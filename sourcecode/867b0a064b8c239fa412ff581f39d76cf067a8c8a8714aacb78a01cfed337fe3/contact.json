{
  "address": "0xc8c322d2bd8c51dadea6b107ffa8c1bdf237e417",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DreamCarToken2",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-30\n*/\n\npragma solidity ^0.5.5;\n\n//DCC VERSION 5\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n/// @author Dieter Shirley <[emailÂ protected]> (https://github.com/dete)\ninterface ERC721 {\n    // Required methods\n    function totalSupply() external view returns (uint256 total);\n    \n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function exists(uint256 _tokenId) external view returns (bool _exists);\n    \n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721 {\n  function name() external view returns (string memory _name);\n  function symbol() external view returns (string memory _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string memory);\n}\n\n/**\n * These are required for the DCC contract to interact with the WLC contract\n */\ninterface WLCCompatible {\n    function getWLCReward(uint256 _boughtWLCAmount, address _owner) external returns (uint256 _remaining);\n    function setWLCParams(address _address, uint256 _reward) external;\n    function resetWLCParams() external;\n    \n    function getForWLC(address _owner) external;\n    \n    function getWLCRewardAmount() external view returns (uint256 _amount);\n    function getWLCAddress() external view returns (address _address);\n}\n\ncontract DreamCarToken2 is ERC721, ERC721Metadata, WLCCompatible {\n    string internal constant tokenName   = 'DreamCarCoin2';\n    string internal constant tokenSymbol = 'DCC2';\n    \n    uint8 public constant decimals = 0;\n    \n    //ERC721 VARIABLES\n    \n    //the total count of wishes\n    uint256 internal totalTokenSupply;\n    \n    //this address is the CEO\n    address payable public CEO;\n    \n    bytes4 constant InterfaceSignature_ERC165 =\n        bytes4(keccak256('supportsInterface(bytes4)'));\n\n    bytes4 constant InterfaceSignature_ERC721 =\n        bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalTokenSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\n    \n    // Mapping from owner to number of owned tokens\n    //mapping (address => uint256) internal tokensBalanceOf;\n    \n    // Mapping from token ID to owner\n    mapping (uint256 => address) internal tokenOwner;\n    \n    // Optional mapping for token URIs\n    mapping(uint256 => string) internal tokenURIs;\n    \n    //TOKEN SPECIFIC VARIABLES\n\n    mapping (address => uint256) internal tokenBallanceOf;\n    \n    //Token price in WEI\n    uint256 public tokenPrice;\n    \n    //A list of price admins; they can change price, in addition to the CEO\n    address[] public priceAdmins;\n    \n    //Next id that will be assigned to token\n    uint256 internal nextTokenId = 1;\n    \n    //The winning token id\n    uint256 public winningTokenId = 0;\n    \n    //The winner's address, it will be empty, until the reward is claimed\n    address public winnerAddress; \n    \n    //WLC CONTRACT INTERACTION VARIABLES\n    \n    //WLC tokens in a single purchase to earn a DCC token\n    uint256 internal WLCRewardAmount;\n    \n    //WLC deployed contract address\n    address internal WLCAdress;\n    \n    //ERC721 FUNCTIONS IMPLEMENTATIONS\n    \n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n    \n    /**\n     * Gets the total amount of tokens stored by the contract\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public view returns (uint256 total) {\n        return totalTokenSupply;\n    }\n    \n    /**\n     * Gets the balance of the specified address\n     * @param _owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address _owner) public view returns (uint256 _balance) {\n        return tokenBallanceOf[_owner];\n    }\n    \n    /**\n     * Gets the owner of the specified token ID\n     * @param _tokenId uint256 ID of the token to query the owner of\n     * @return owner address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 _tokenId) public view returns (address _owner) {\n        return tokenOwner[_tokenId];\n    }\n    \n    /**\n     * Returns whether the specified token exists\n     * @param _tokenId uint256 ID of the token to query the existence of\n     * @return whether the token exists\n     */\n    function exists(uint256 _tokenId) public view returns (bool) {\n        address owner = tokenOwner[_tokenId];\n        return owner != address(0);\n    }\n    \n    /**\n     * Not necessary in the contract\n     */\n    function transfer(address _to, uint256 _tokenId) external { }\n    \n    /**\n     * Not necessary in the contract\n     */\n    function approve(address _to, uint256 _tokenId) external { }\n    \n    /**\n     * Not necessary in the contract - reverts\n     */\n    function transferFrom(address _from, address _to, uint256 _tokenId) external { }\n    \n    /**\n     * Internal function to set the token URI for a given token\n     * Reverts if the token ID does not exist\n     * @param _tokenId uint256 ID of the token to set its URI\n     * @param _uri string URI to assign\n     */\n    function _setTokenURI(uint256 _tokenId, string storage _uri) internal {\n        require(exists(_tokenId));\n        tokenURIs[_tokenId] = _uri;\n    }\n    \n    //ERC721Metadata FUNCTIONS IMPLEMENTATIONS\n    /**\n     * Gets the token name\n     * @return string representing the token name\n     */\n    function name() external view returns (string memory _name) {\n        return tokenName;\n    }\n    \n    /**\n     * Gets the token symbol\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string memory _symbol) {\n        return tokenSymbol;\n    }\n    \n    /**\n     * Returns an URI for a given token ID\n     * Throws if the token ID does not exist. May return an empty string.\n     * @param _tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        require(exists(_tokenId));\n        return tokenURIs[_tokenId];\n    }\n    \n    //TOKEN SPECIFIC FUNCTIONS\n    \n    event Buy(address indexed from, uint256 amount, uint256 fromTokenId, uint256 toTokenId);\n    \n    event RewardIsClaimed(address indexed from, uint256 tokenId);\n    \n    event WinnerIsChosen(address indexed from, uint256 tokenId);\n    \n    /**\n     * Ensures that the caller of the function is the CEO of contract\n     */\n    modifier onlyCEO {\n        require(msg.sender == CEO, 'You need to be the CEO to do that!');\n        _;\n    }\n    \n    /**\n     * Constructor of the contract\n     * @param _ceo address the CEO (owner) of the contract\n     */\n    constructor (address payable _ceo) public {\n        CEO = _ceo;\n        \n        totalTokenSupply = 20000;\n        \n        tokenPrice = 14685225386285277; // (if eth = 156.62USD, 2.3 USD for token)\n    }\n    \n    /**\n     * Gets the last existing token ids\n     * @return uint256 the id of the token\n     */\n    function lastTokenId() public view returns (uint256 tokenId) {\n        return nextTokenId - 1;\n    }\n    \n    /**\n     * Sets a new price for the tokensExchangedBy\n     * @param _newPrice uint256 the new price in WEI\n     */\n    function setTokenPriceInWEI(uint256 _newPrice) public {\n        bool transactionAllowed = false;\n        \n        if (msg.sender == CEO) {\n            transactionAllowed = true;\n        } else {\n            for (uint256 i = 0; i < priceAdmins.length; i++) {\n                if (msg.sender == priceAdmins[i]) {\n                    transactionAllowed = true;\n                    break;\n                }\n            }\n        }\n        \n        require((transactionAllowed == true), 'You cannot do that!');\n        tokenPrice = _newPrice;\n    }\n    \n    /**\n     * Add a new price admin address to the list\n     * @param _newPriceAdmin address the address of the new price admin\n     */\n    function addPriceAdmin(address _newPriceAdmin) onlyCEO public {\n        priceAdmins.push(_newPriceAdmin);\n    }\n    \n    /**\n     * Remove existing price admin address from the list\n     * @param _existingPriceAdmin address the address of the existing price admin\n     */\n    function removePriceAdmin(address _existingPriceAdmin) onlyCEO public {\n        for (uint256 i = 0; i < priceAdmins.length; i++) {\n            if (_existingPriceAdmin == priceAdmins[i]) {\n                delete priceAdmins[i];\n                break;\n            }\n        }\n    }\n    \n    /**\n     * Adds the specified number of tokens to the specified address\n     * Internal method, used when creating new tokens\n     * @param _to address The address, which is going to own the tokens\n     * @param _amount uint256 The number of tokens\n     */\n    function _addTokensToAddress(address _to, uint256 _amount) internal {\n        for (uint256 i = 0; i < _amount; i++) {\n            tokenOwner[nextTokenId + i] = _to;\n        }\n        \n        tokenBallanceOf[_to] += _amount;\n        \n        nextTokenId += _amount;\n    }\n    \n    /**\n     * Checks if the specified token is owned by the transaction sender\n     */\n    function ensureAddressIsTokenOwner(address _owner, uint256 _tokenId) internal view {\n        require(balanceOf(_owner) >= 1, 'You do not own any tokens!');\n        \n        require(tokenOwner[_tokenId] == _owner, 'You do not own this token!');\n    }\n    \n    /**\n     * Generates a random number between 1 and totalTokenSupply variable\n     * This is used to choose the winning token id\n     */\n    function getRandomNumber() internal view returns (uint16) {\n        return uint16(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(block.timestamp, block.difficulty, block.number)\n                    )\n                )%totalTokenSupply\n            ) + 1;\n    }\n    \n    /**\n     * Chooses a winning token id, if all tokens are purchased\n     */\n    function chooseWinner() internal {\n         if ((nextTokenId - 1) == totalTokenSupply) {\n            winningTokenId = getRandomNumber();\n            emit WinnerIsChosen(tokenOwner[winningTokenId], winningTokenId);\n        } \n    }\n    \n    /**\n     * Scales the amount of tokens in a purchase, to ensure it will be less or equal to the amount of unsold tokens\n     * If there are no tokens left, it will return 0\n     * @param _amount uint256 the amout of tokens in the purchase attempt\n     * @return _exactAmount uint256\n     */\n    function scalePurchaseTokenAmountToMatchRemainingTokens(uint256 _amount) internal view returns (uint256 _exactAmount) {\n        if (nextTokenId + _amount - 1 > totalTokenSupply) {\n            _amount = totalTokenSupply - nextTokenId + 1;\n        }\n        \n        return _amount;\n    }\n\n    /**\n    * Buy new tokens with ETH\n    * Calculates the nubmer of tokens for the given ETH amount\n    * Creates the new tokens when they are purchased\n    * Returns the excessive ETH (if any) to the transaction sender\n    */\n    function buy() payable public {\n        require(msg.value >= tokenPrice, \"You did't send enough ETH\");\n        \n        uint256 amount = scalePurchaseTokenAmountToMatchRemainingTokens(msg.value / tokenPrice);\n        \n        require(amount > 0, \"Not enough tokens are available for purchase!\");\n        \n        _addTokensToAddress(msg.sender, amount);\n        \n        emit Buy(msg.sender, amount, nextTokenId - amount, nextTokenId - 1);\n        \n        //transfer ETH to CEO\n        CEO.transfer((amount * tokenPrice));\n        \n        //returns excessive ETH\n        msg.sender.transfer(msg.value - (amount * tokenPrice));\n        \n        chooseWinner();\n    }\n    \n    /**\n    * Allows user to destroy a specified token\n    * This would allow a user to claim his prize for the destroyed token\n    * @param _tokenId uint256 ID of the token\n    */\n    function claimReward(uint256 _tokenId) public {\n        require(winningTokenId > 0, \"The is not winner yet!\");\n        require(_tokenId == winningTokenId, \"This token is not the winner!\");\n        \n        ensureAddressIsTokenOwner(msg.sender, _tokenId);\n        \n        winnerAddress = msg.sender;\n        \n        emit RewardIsClaimed(msg.sender, _tokenId);\n    }\n    \n    //WLC INTERACTION FUNCTIONS\n    \n    /**\n     * Allows the CEO to set the address and the reward values for a connected WishListToken\n     * @param _address address the address of the deployed contract\n     * @param _reward uint256 how many tokens need to be bought in a single transaction to the one DCC token\n     */\n    function setWLCParams(address _address, uint256 _reward) public onlyCEO {\n        WLCAdress = _address;\n        WLCRewardAmount = _reward;\n    }\n    \n    /**\n     * Allows the CEO to revmove a connected WishListToken\n     * This revokes the reward and exchange functions\n     */\n    function resetWLCParams() public onlyCEO {\n        WLCAdress = address(0);\n        WLCRewardAmount = 0;\n    }\n    \n    /**\n     * How many WLC tokens need to be bought in a single transaction to the one DCC token\n     * @return _amount uint256\n     */\n    function getWLCRewardAmount() public view returns (uint256 _amount) {\n        return WLCRewardAmount;\n    }\n    \n    /**\n     * The address of the deployed WLC contract\n     * @return _address address\n     */\n    function getWLCAddress() public view returns (address _address) {\n        return WLCAdress;\n    }\n    \n    /**\n     * Allows the buyer of at least the number of WLC tokens, specified in WLCRewardAmount\n     * to receive a DCC as a bonus.\n     * This can only be called by the deployed WLC contract, by the address specified in WLCAdress\n     * @param _boughtWLCAmount uint256 the number of bought WLC tokens\n     * @param _owner address the address of the buyer\n     */\n    function getWLCReward(uint256 _boughtWLCAmount, address _owner) public returns (uint256 _remaining) {\n        if (WLCAdress != address(0) && WLCRewardAmount > 0 && _boughtWLCAmount >= WLCRewardAmount) {\n            require(WLCAdress == msg.sender, \"You cannot invoke this function directly!\");\n            \n            uint256 DCCAmount = scalePurchaseTokenAmountToMatchRemainingTokens(_boughtWLCAmount / WLCRewardAmount);\n            \n            if (DCCAmount > 0) {\n                _addTokensToAddress(_owner, DCCAmount);\n                \n                emit Buy(_owner, DCCAmount, nextTokenId - DCCAmount, nextTokenId - 1);\n                \n                chooseWinner();\n                \n                return _boughtWLCAmount - (DCCAmount * WLCRewardAmount);\n            }\n        }\n        \n        return _boughtWLCAmount;\n    }\n    \n    /**\n     * Allows an onwer of WLC token to excange it for DCC token\n     * This can only be called by the deployed WLC contract, by the address specified in WLCAdress\n     * @param _owner address the address of the exchanger\n     */\n    function getForWLC(address _owner) public {\n        require(WLCAdress == msg.sender, \"You cannot invoke this function directly!\");\n        \n        require(nextTokenId <= totalTokenSupply, \"Not enough tokens are available for purchase!\");\n        \n        _addTokensToAddress(_owner, 1);\n        \n        emit Buy(_owner, 1, nextTokenId - 1, nextTokenId - 1);\n        \n        chooseWinner();\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000d8e0ed6a36d93bb791f3ba9fa2567bfe36f4a061"
}