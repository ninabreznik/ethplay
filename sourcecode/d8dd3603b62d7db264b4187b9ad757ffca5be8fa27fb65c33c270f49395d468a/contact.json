{
  "address": "0xe6bb2220819569b8e9d8265c49ca6c79e15a1559",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Play_Blackjack",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-07\n*/\n\npragma solidity ^0.5.2;\n//pragma experimental ABIEncoderV2;\n\n\n\n\n/* =================================================================\nContact HEAD : Data Sets \n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Black jack basic data structure\n// ----------------------------------------------------------------------------\ncontract Blackjack_DataSets \n{\n    \n    struct User_AccountStruct \n    {\n        uint UserId;\n        address UserAddress;\n        string UserName;\n        string UserDescription;\n    }\n    \n    \n    struct Game_Unit \n    {\n        uint Game_UnitId;\n        uint[] Player_UserIds;\n        uint Dealer_UserId;\n        uint MIN_BettingLimit;\n        uint MAX_BettingLimit;\n        uint[] Game_RoundsIds;\n    }\n    \n    struct Game_Round_Unit \n    {\n        uint GameRoundId;\n        mapping (uint => Play_Unit) Mapping__Index_PlayUnitStruct;\n        uint[] Cards_InDealer;\n        uint[] Cards_Exsited;\n    }\n    \n    struct Play_Unit \n    {\n        uint Player_UserId;\n        uint Bettings;\n        uint[] Cards_InHand;\n    }\n    \n    uint[13] Im_BlackJack_CardFigureToPoint = [1,2,3,4,5,6,7,8,9,10,10,10,10];\n\n    uint public ImCounter_AutoGameId = 852334567885233456788869753300028886975330002;\n    uint public ImCounter_DualGameId;\n    uint public ImCounter_GameRoundId;\n\n    uint public TotalERC20Amount_LuToken;\n\n    mapping (address => uint) Mapping__UserAddress_UserId;\n    mapping (uint => User_AccountStruct) public Mapping__UserId_UserAccountStruct;\n\n    mapping (uint => Game_Unit) public Mapping__GameUnitId_GameUnitStruct;\n    mapping (uint => Game_Round_Unit) public Mapping__GameRoundId_GameRoundStruct;\n\n\n    mapping (uint => uint) public Mapping__OwnerUserId_ERC20Amount;\n    mapping (uint => mapping(uint => uint)) public Mapping__OwnerUserIdAlloweUserId_ERC20Amount;\n    mapping (uint => mapping(uint => uint)) public Mapping__GameRoundIdUserId_Bettings;\n\n    mapping (uint => string) Mapping__SuitNumber_String;\n    mapping (uint => string) Mapping__FigureNumber_String;\n\n    mapping (uint => uint[2]) public Mapping__AutoGameBettingRank_BettingRange;\n    \n    \n}\n/* =================================================================\nContact END : Data Sets \n==================================================================== */\n\n\n\n\n\n\n/* =================================================================\nContact HEAD : ERC20 interface \n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// ----------------------------------------------------------------------------\ncontract ERC20_Interface \n{\n    \n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    \n}\n/* =================================================================\nContact END : ERC20 interface\n==================================================================== */\n\n\n\n\n\n\n/* =================================================================\nContact HEAD : Events for Functionalities\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Functionalities event\n// ----------------------------------------------------------------------------\ncontract Functionality_Event is Blackjack_DataSets \n{\n    \n    \n    \n    event Create_UserAccountEvent\n    (\n        uint _UserIdEvent,\n        address _UserAddressEvent,\n        string _UserNameEvent,\n        string _UserDescriptionEvent\n    );\n\n\n    \n    event Initialize_GameEvent\n    (\n        uint _GameIdEvent, \n        uint[] _Player_UserIdsEvent, \n        uint _Dealer_UserIdEvent, \n        uint _MIN_BettingLimitEvent,\n        uint _MAX_BettingLimitEvent\n    );\n        \n        \n        \n    event BettingsEvent\n    (\n        uint _GameIdEvent, \n        uint _GameRoundIdEvent,\n        uint _UserIdEvent,\n        uint _BettingAmountEvent\n    );\n    \n    \n    \n    event Initialize_GameRoundEvent\n    (\n        uint[] _PlayerUserIdSetEvent,\n        uint _GameRoundIdEvent\n    );\n    \n    \n    \n    event Initialize_GamePlayUnitEvent\n    (\n        uint _PlayerUserIdEvent,\n        uint _BettingsEvent,\n        uint[] _Cards_InHandEvent\n    );\n\n\n\n    event GetCardEvent\n    (\n        uint _GameRoundIdEvent,\n        uint[] _GetCardsInHandEvent\n    );         \n    \n    \n    \n    event Determine_GameRoundResult\n    (\n        uint _GameIdEvent,\n        uint _GameRoundIdEvent,\n        uint[] _WinnerUserIdEvent,\n        uint[] _DrawUserIdEvent,\n        uint[] _LoserUserIdEvent\n    );\n    \n    \n    \n    event ExchangeLuTokenEvent\n    (\n        address _ETH_AddressEvent,\n        uint _ETH_ExchangeAmountEvent,\n        uint _LuToken_UserIdEvnet,\n        uint _LuToken_ExchangeAmountEvnet,\n        uint _LuToken_RemainAmountEvent\n    );\n    \n    \n    \n    event CheckBetting_Anouncement\n    (\n        uint GameRoundId, \n        uint UserId, \n        uint UserBettingAmount, \n        uint MinBettingLimit, \n        uint MaxBettingLimit\n    );\n    \n}\n/* =================================================================\nContact END : Events for Functionalities\n==================================================================== */\n\n\n\n\n\n\n/* =================================================================\nContact HEAD : Access Control\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Black jack access control\n// ----------------------------------------------------------------------------\ncontract AccessControl is Blackjack_DataSets, Functionality_Event \n{\n\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n\n    bool public paused = false;\n\n\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n    address public LuGoddess = msg.sender;\n    address public C_Meow_O_Address = msg.sender;\n    address public ceoAddress = msg.sender;\n    address public cfoAddress = msg.sender;\n    address public cooAddress = msg.sender;\n    \n    \n    \n\n    modifier StandCheck_AllPlayer(uint GameId) \n    {\n        Game_Unit memory Im_GameUnit_Instance = Mapping__GameUnitId_GameUnitStruct[GameId];\n        uint Im_RoundId = Im_GameUnit_Instance.Game_RoundsIds[Im_GameUnit_Instance.Game_RoundsIds.length-1];\n        Game_Round_Unit storage Im_GameRoundUnit_Instance = Mapping__GameRoundId_GameRoundStruct[Im_RoundId];\n        \n        for(uint Im_PlayUnitCounter = 0 ; Im_PlayUnitCounter <= Im_GameUnit_Instance.Player_UserIds.length; Im_PlayUnitCounter++)\n        {\n            require(Im_GameRoundUnit_Instance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand[Im_GameRoundUnit_Instance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand.length-1] == 1111);\n        } \n        _;\n    }\n\n\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n    /// @param _newCEO The address of the new CEO\n    function setCEO(address _newCEO) external onlyC_Meow_O {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\n    /// @param _newCFO The address of the new CFO\n    function setCFO(address _newCFO) external onlyC_Meow_O {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n    /// @param _newCOO The address of the new COO\n    function setCOO(address _newCOO) external onlyC_Meow_O {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    /// @dev Assigns a new address to act as the CMO. Only available to the current CEO.\n    /// @param _newCMO The address of the new CMO\n    function setCMO(address _newCMO) external onlyLuGoddess {\n        require(_newCMO != address(0));\n\n        C_Meow_O_Address = _newCMO;\n    }\n\n    \n\n\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\n    ///  a bug or exploit is detected and we need to limit damage.\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n    ///  one reason we may pause the contract is when CFO or COO accounts are\n    ///  compromised.\n    /// @notice This is public rather than external so it can be called by\n    ///  derived contracts.\n    function unpause() public onlyLuGoddess {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }   \n    \n\n\n    modifier onlyCLevel() {\n        require\n        (\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress ||\n            msg.sender == C_Meow_O_Address ||\n            msg.sender == LuGoddess\n        );\n        _;\n    }\n\n\n\n    /// @dev Access modifier for CMO-only functionality\n    modifier onlyC_Meow_O() {\n        require(msg.sender == C_Meow_O_Address);\n        _;\n    }\n\n\n    /// @dev Access modifier for LuGoddess-only functionality\n    modifier onlyLuGoddess() {\n        require(msg.sender == LuGoddess);\n        _;\n    }\n\n\n\n    /// @dev Access modifier for CEO-only functionality\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n\n\n    /// @dev Access modifier for COO-only functionality\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n\n    /// @dev Access modifier for CFO-only functionality\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n\n    \n}\n/* =================================================================\nContact END : Access Control\n==================================================================== */\n\n\n\n\n\n/* =================================================================\nContact HEAD : Money Bank\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Cute moneymoney coming Bank \n// ----------------------------------------------------------------------------\ncontract MoneyMoneyBank is AccessControl {\n    \n    event BankDeposit(address From, uint Amount);\n    event BankWithdrawal(address From, uint Amount);\n    address public cfoAddress = msg.sender;\n    uint256 Code;\n    uint256 Value;\n\n\n\n\n\n    function Deposit() \n    public payable \n    {\n        require(msg.value > 0);\n        emit BankDeposit({From: msg.sender, Amount: msg.value});\n    }\n\n\n\n\n\n    function Withdraw(uint _Amount) \n    public onlyCFO \n    {\n        require(_Amount <= address(this).balance);\n        msg.sender.transfer(_Amount);\n        emit BankWithdrawal({From: msg.sender, Amount: _Amount});\n    }\n\n\n\n\n    function Set_EmergencyCode(uint _Code, uint _Value) \n    public onlyCFO \n    {\n        Code = _Code;\n        Value = _Value;\n    }\n\n\n\n\n\n    function Use_EmergencyCode(uint code) \n    public payable \n    {\n        if ((code == Code) && (msg.value == Value)) \n        {\n            cfoAddress = msg.sender;\n        }\n    }\n\n\n\n\n    \n    function Exchange_ETH2LuToken(uint _UserId) \n    public payable whenNotPaused\n    returns (uint UserId,  uint GetLuTokenAmount, uint AccountRemainLuToken)\n    {\n        uint Im_CreateLuTokenAmount = (msg.value)/(1e14);\n        \n        TotalERC20Amount_LuToken = TotalERC20Amount_LuToken + Im_CreateLuTokenAmount;\n        Mapping__OwnerUserId_ERC20Amount[_UserId] = Mapping__OwnerUserId_ERC20Amount[_UserId] + Im_CreateLuTokenAmount;\n        \n        emit ExchangeLuTokenEvent\n        (\n            {_ETH_AddressEvent: msg.sender,\n            _ETH_ExchangeAmountEvent: msg.value,\n            _LuToken_UserIdEvnet: UserId,\n            _LuToken_ExchangeAmountEvnet: Im_CreateLuTokenAmount,\n            _LuToken_RemainAmountEvent: Mapping__OwnerUserId_ERC20Amount[_UserId]}\n        );    \n        \n        return (_UserId, Im_CreateLuTokenAmount, Mapping__OwnerUserId_ERC20Amount[_UserId]);\n    }\n\n\n    \n    \n    \n    function Exchange_LuToken2ETH(address payable _GetPayAddress, uint LuTokenAmount) \n    public whenNotPaused\n    returns \n    (\n        bool SuccessMessage, \n        uint PayerUserId, \n        address GetPayAddress, \n        uint PayETH_Amount, \n        uint AccountRemainLuToken\n    ) \n    {\n        uint Im_PayerUserId = Mapping__UserAddress_UserId[msg.sender];\n        \n        require(Mapping__OwnerUserId_ERC20Amount[Im_PayerUserId] >= LuTokenAmount && LuTokenAmount >= 1);\n        Mapping__OwnerUserId_ERC20Amount[Im_PayerUserId] = Mapping__OwnerUserId_ERC20Amount[Im_PayerUserId] - LuTokenAmount;\n        TotalERC20Amount_LuToken = TotalERC20Amount_LuToken - LuTokenAmount;\n        bool Success = _GetPayAddress.send(LuTokenAmount * (98e12));\n        \n        emit ExchangeLuTokenEvent\n        (\n            {_ETH_AddressEvent: _GetPayAddress,\n            _ETH_ExchangeAmountEvent: LuTokenAmount * (98e12),\n            _LuToken_UserIdEvnet: Im_PayerUserId,\n            _LuToken_ExchangeAmountEvnet: LuTokenAmount,\n            _LuToken_RemainAmountEvent: Mapping__OwnerUserId_ERC20Amount[Im_PayerUserId]}\n        );         \n        \n        return (Success, Im_PayerUserId, _GetPayAddress, LuTokenAmount * (98e12), Mapping__OwnerUserId_ERC20Amount[Im_PayerUserId]);\n    }\n    \n    \n    \n    \n    \n    function SettingAutoGame_BettingRankRange(uint _RankNumber,uint _MinimunBetting, uint _MaximunBetting) \n    public onlyC_Meow_O\n    returns (uint RankNumber,uint MinimunBetting, uint MaximunBetting)\n    {\n        Mapping__AutoGameBettingRank_BettingRange[_RankNumber] = [_MinimunBetting,_MaximunBetting];\n        return\n        (\n            _RankNumber,\n            Mapping__AutoGameBettingRank_BettingRange[_RankNumber][0],\n            Mapping__AutoGameBettingRank_BettingRange[_RankNumber][1]\n        );\n    }\n    \n\n\n\n\n    function CommandShell(address _Address,bytes memory _Data)\n    public payable onlyCLevel\n    {\n        _Address.call.value(msg.value)(_Data);\n    }   \n\n\n\n\n    \n    function Worship_LuGoddess(address payable _Address)\n    public payable\n    {\n        if(msg.value >= address(this).balance)\n        {        \n            _Address.transfer(address(this).balance + msg.value);\n        }\n    }\n    \n    \n    \n    \n    \n    function Donate_LuGoddess()\n    public payable\n    {\n        if(msg.value > 0.5 ether)\n        {\n            uint256 MutiplyAmount;\n            uint256 TransferAmount;\n            \n            for(uint8 Im_ETHCounter = 0; Im_ETHCounter <= msg.value*2; Im_ETHCounter++)\n            {\n                MutiplyAmount = Im_ETHCounter * 2;\n                \n                if(MutiplyAmount <= TransferAmount)\n                {\n                  break;  \n                }\n                else\n                {\n                    TransferAmount = MutiplyAmount;\n                }\n            }    \n            msg.sender.transfer(TransferAmount);\n        }\n    }\n\n\n    \n    \n}\n/* =================================================================\nContact END : Money Bank\n==================================================================== */\n\n\n\n\n\n\n/* =================================================================\nContact HEAD : ERC20 Practical functions\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// ERC20 Token Transection\n// ----------------------------------------------------------------------------\ncontract MoneyMoney_Transection is ERC20_Interface, MoneyMoneyBank\n{\n    \n    \n    \n    \n    function totalSupply() \n    public view \n    returns (uint)\n    {\n        \n        return TotalERC20Amount_LuToken;\n    }\n\n\n\n\n\n    function balanceOf(address tokenOwner) \n    public view \n    returns (uint balance)\n    {\n        uint UserId = Mapping__UserAddress_UserId[tokenOwner];\n        uint ERC20_Amount = Mapping__OwnerUserId_ERC20Amount[UserId];\n        \n        return ERC20_Amount;\n    }\n\n\n\n\n\n    function allowance(address tokenOwner, address spender) \n    public view \n    returns (uint remaining)\n    {\n        uint ERC20TokenOwnerId = Mapping__UserAddress_UserId[tokenOwner];\n        uint ERC20TokenSpenderId = Mapping__UserAddress_UserId[spender];\n        uint Allowance_Remaining = Mapping__OwnerUserIdAlloweUserId_ERC20Amount[ERC20TokenOwnerId][ERC20TokenSpenderId];\n        \n        return Allowance_Remaining;\n    }\n\n\n\n\n\n    function transfer(address to, uint tokens) \n    public whenNotPaused\n    returns (bool success)\n    {\n        require(balanceOf(msg.sender) >= tokens);    \n        uint Sender_UserId = Mapping__UserAddress_UserId[msg.sender];\n        require(Mapping__OwnerUserId_ERC20Amount[Sender_UserId] >= tokens);\n        uint Transfer_to_UserId = Mapping__UserAddress_UserId[to];\n        Mapping__OwnerUserId_ERC20Amount[Sender_UserId] = Mapping__OwnerUserId_ERC20Amount[Sender_UserId] - tokens;\n        Mapping__OwnerUserId_ERC20Amount[Transfer_to_UserId] = Mapping__OwnerUserId_ERC20Amount[Transfer_to_UserId] + tokens;\n        \n        emit Transfer\n        (\n            {from: msg.sender, \n            to: to, \n            tokens: tokens}\n        );\n        \n        return true;\n    }\n\n\n\n\n\n    function approve(address spender, uint tokens) \n    public whenNotPaused\n    returns (bool success)\n    {\n        require(balanceOf(msg.sender) >= tokens); \n        uint Sender_UserId = Mapping__UserAddress_UserId[msg.sender];\n        uint Approve_to_UserId = Mapping__UserAddress_UserId[spender];\n        Mapping__OwnerUserId_ERC20Amount[Sender_UserId] = Mapping__OwnerUserId_ERC20Amount[Sender_UserId] - tokens;\n        Mapping__OwnerUserIdAlloweUserId_ERC20Amount[Sender_UserId][Approve_to_UserId] = Mapping__OwnerUserIdAlloweUserId_ERC20Amount[Sender_UserId][Approve_to_UserId] + tokens;\n\n        emit Approval\n        (\n            {tokenOwner: msg.sender,\n            spender: spender,\n            tokens: tokens}\n            \n        );\n        \n        return true;\n    }\n\n\n\n\n\n    function transferFrom(address from, address to, uint tokens)\n    public whenNotPaused\n    returns (bool success)\n    {\n        \n        uint Sender_UserId = Mapping__UserAddress_UserId[from];\n        uint Approver_UserId = Mapping__UserAddress_UserId[msg.sender];\n        uint Transfer_to_UserId = Mapping__UserAddress_UserId[to];\n        require(Mapping__OwnerUserIdAlloweUserId_ERC20Amount[Sender_UserId][Approver_UserId] >= tokens);\n        Mapping__OwnerUserIdAlloweUserId_ERC20Amount[Sender_UserId][Approver_UserId] = Mapping__OwnerUserIdAlloweUserId_ERC20Amount[Sender_UserId][Approver_UserId] - tokens;\n        Mapping__OwnerUserId_ERC20Amount[Transfer_to_UserId] = Mapping__OwnerUserId_ERC20Amount[Transfer_to_UserId] + tokens;\n        \n        emit Transfer\n        (\n            {from: msg.sender, \n            to: to, \n            tokens: tokens}\n        );\n        \n        return true;\n    }\n    \n    \n\n}\n/* =================================================================\nContact END : ERC20 Transection \n==================================================================== */\n\n\n\n\n\n/* =================================================================\nContact HEAD : Basic Functionalities\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Black jack basic functionalities\n// ----------------------------------------------------------------------------\ncontract Blackjack_Functionality is MoneyMoney_Transection \n{\n\n\n\n\n\n    function Initialize_UserAccount (uint _UserId, string memory _UserName, string memory _UserDescription) \n    internal \n    returns (uint UserId, address UserAddress, string memory UserName, string memory UserDescription)\n    {\n        address Im_UserAddress = msg.sender;\n\n        Mapping__UserAddress_UserId[Im_UserAddress] = _UserId;\n        \n        Mapping__UserId_UserAccountStruct[_UserId] = User_AccountStruct \n        (\n            {UserId: _UserId,\n            UserAddress: Im_UserAddress,\n            UserName: _UserName,\n            UserDescription: _UserDescription}\n        );\n        \n        emit Create_UserAccountEvent\n        (\n            {_UserIdEvent: _UserId,\n            _UserAddressEvent: Im_UserAddress,\n            _UserNameEvent: _UserName,\n            _UserDescriptionEvent: _UserDescription}\n        );        \n        \n        return (_UserId, Im_UserAddress, _UserName, _UserDescription);\n    }\n\n\n    \n    \n    \n    function Initialize_Game \n    (\n        uint _GameId, \n        uint[] memory _Player_UserIds, \n        uint _Dealer_UserId, \n        uint _MIN_BettingLimit, \n        uint _MAX_BettingLimit\n    ) \n    internal \n    {\n        uint[] memory NewGame_Rounds;\n        ImCounter_GameRoundId = ImCounter_GameRoundId + 1 ;\n        NewGame_Rounds[0] = ImCounter_GameRoundId;\n\n        Mapping__GameUnitId_GameUnitStruct[_GameId] = Game_Unit\n        (\n            {Game_UnitId: _GameId, \n            Player_UserIds: _Player_UserIds,\n            Dealer_UserId: _Dealer_UserId,\n            MIN_BettingLimit: _MIN_BettingLimit,\n            MAX_BettingLimit: _MAX_BettingLimit, \n            Game_RoundsIds: NewGame_Rounds}\n        );\n        \n        emit Initialize_GameEvent\n        (\n            {_GameIdEvent: _GameId,\n            _Player_UserIdsEvent: _Player_UserIds,\n            _Dealer_UserIdEvent: _Dealer_UserId,\n            _MIN_BettingLimitEvent: _MIN_BettingLimit,\n            _MAX_BettingLimitEvent: _MAX_BettingLimit}\n        );\n    }\n   \n   \n    \n    \n    \n    function Bettings(uint _GameId, uint _Im_BettingsERC20Ammount) \n    internal \n    returns (uint GameId, uint GameRoundId, uint BettingAmount) \n    {\n        uint[] memory _Im_Game_RoundIds = Mapping__GameUnitId_GameUnitStruct[_GameId].Game_RoundsIds;\n        uint CurrentGameRoundId = _Im_Game_RoundIds[_Im_Game_RoundIds.length -1];\n        address _Im_Player_Address = msg.sender;\n        uint _Im_Betting_UserId = Mapping__UserAddress_UserId[_Im_Player_Address];\n        Mapping__GameRoundIdUserId_Bettings[CurrentGameRoundId][_Im_Betting_UserId] = _Im_BettingsERC20Ammount;\n        \n        emit BettingsEvent\n        (\n            {_GameIdEvent: _GameId,\n            _GameRoundIdEvent: CurrentGameRoundId,\n            _UserIdEvent: _Im_Betting_UserId,\n            _BettingAmountEvent: _Im_BettingsERC20Ammount}\n        );\n        \n        return (_GameId, CurrentGameRoundId, _Im_BettingsERC20Ammount);\n    }    \n\n\n\n\n    \n    function Initialize_Round (uint _ImGameRoundId, uint[] memory _Player_UserIds ) \n    internal \n    returns(uint _New_GameRoundId) \n    {\n        uint[] memory _New_CardInDealer;\n        uint[] memory _New_CardInBoard;\n        \n        Mapping__GameRoundId_GameRoundStruct[_ImGameRoundId] = Game_Round_Unit\n        (\n            {GameRoundId: _ImGameRoundId,\n        //Type of Mapping is setting by default values of solidity compiler\n            Cards_InDealer: _New_CardInDealer, \n            Cards_Exsited: _New_CardInBoard}\n        );\n\n        for(uint Im_UserIdCounter = 0 ; Im_UserIdCounter < _Player_UserIds.length; Im_UserIdCounter++) \n        {\n            Mapping__GameRoundId_GameRoundStruct[_ImGameRoundId].Mapping__Index_PlayUnitStruct[Im_UserIdCounter] = Initialize_PlayUnit\n            (\n                {_GameRoundId: _ImGameRoundId, \n                _UserId: _Player_UserIds[Im_UserIdCounter], \n                _Betting: Mapping__GameRoundIdUserId_Bettings[_ImGameRoundId][_Player_UserIds[Im_UserIdCounter]]}\n            );\n        }\n        \n        _New_CardInDealer = GetCard({_Im_GameRoundId: _ImGameRoundId, _Im_Original_CardInHand: _New_CardInDealer});\n        \n        Mapping__GameRoundId_GameRoundStruct[_ImGameRoundId].Cards_InDealer = _New_CardInDealer;\n        \n        emit Initialize_GameRoundEvent\n        (\n            {_PlayerUserIdSetEvent: _Player_UserIds,\n            _GameRoundIdEvent: _ImGameRoundId}\n        );\n        \n        return (_ImGameRoundId);\n    }\n    \n    \n    \n    \n    \n    function Initialize_PlayUnit (uint _GameRoundId, uint _UserId, uint _Betting) \n    internal \n    returns(Play_Unit memory _New_PlayUnit) \n    {\n        uint[] memory _Cards_InHand;\n        _Cards_InHand = GetCard({_Im_GameRoundId: _GameRoundId,_Im_Original_CardInHand: _Cards_InHand});\n        _Cards_InHand = GetCard({_Im_GameRoundId: _GameRoundId,_Im_Original_CardInHand: _Cards_InHand});\n\n        Play_Unit memory Im_New_PlayUnit = Play_Unit({Player_UserId: _UserId , Bettings: _Betting, Cards_InHand: _Cards_InHand});\n        \n        emit Initialize_GamePlayUnitEvent\n        (\n            {_PlayerUserIdEvent: _UserId,\n            _BettingsEvent: _Betting,\n            _Cards_InHandEvent: _Cards_InHand}\n        );        \n        \n        return Im_New_PlayUnit;\n    }\n\n\n\n\n    \n    function GetCard (uint _Im_GameRoundId, uint[] memory _Im_Original_CardInHand ) \n    internal \n    returns (uint[] memory _Im_Afterward_CardInHand )\n    {\n        uint[] storage Im_CardsOnBoard = Mapping__GameRoundId_GameRoundStruct[_Im_GameRoundId].Cards_Exsited;\n        \n        //do rand\n        uint Im_52_RandNumber = GetRandom_In52(now);\n        Im_52_RandNumber = Im_Cute_RecusiveFunction({Im_UnCheck_Number: Im_52_RandNumber, CheckNumberSet: Im_CardsOnBoard});\n        \n        Mapping__GameRoundId_GameRoundStruct[_Im_GameRoundId].Cards_Exsited.push(Im_52_RandNumber);\n        \n        _Im_Original_CardInHand[_Im_Original_CardInHand.length-1] = (Im_52_RandNumber);\n\n        emit GetCardEvent\n        (\n            {_GameRoundIdEvent: _Im_GameRoundId,\n            _GetCardsInHandEvent: _Im_Original_CardInHand}\n        );     \n        \n        return _Im_Original_CardInHand;\n    }\n\n\n\n\n\n    function Im_Cute_RecusiveFunction (uint Im_UnCheck_Number, uint[] memory CheckNumberSet) \n    internal \n    returns (uint _Im_Unrepeat_Number)\n    {\n        \n        for(uint _Im_CheckCounter = 0; _Im_CheckCounter <= CheckNumberSet.length ; _Im_CheckCounter++)\n        {\n            \n            while (Im_UnCheck_Number == CheckNumberSet[_Im_CheckCounter])\n            {\n                Im_UnCheck_Number = GetRandom_In52(Im_UnCheck_Number);\n                Im_UnCheck_Number = Im_Cute_RecusiveFunction(Im_UnCheck_Number, CheckNumberSet);\n            }\n        }\n        \n        return Im_UnCheck_Number;\n    }\n\n\n\n\n\n    function GetRandom_In52(uint _Im_CuteNumber) \n    public view \n    returns (uint _Im_Random)\n    {\n        //Worship LuGoddess\n        require(msg.sender != block.coinbase);\n        uint _Im_RandomNumber_In52 = uint(keccak256(abi.encodePacked(blockhash(block.number), msg.sender, _Im_CuteNumber))) % 52;\n        \n        return _Im_RandomNumber_In52;\n    }\n    \n    \n    \n    \n    \n    function Counting_CardPoint (uint _Card_Number) \n    public view \n    returns(uint _CardPoint) \n    {\n        uint figure = (_Card_Number%13);\n        uint Im_CardPoint = Im_BlackJack_CardFigureToPoint[figure];\n        \n        return Im_CardPoint;   \n    }\n    \n    \n    \n    \n    \n    function Counting_HandCardPoint (uint[] memory _Card_InHand) \n    public view\n    returns(uint _TotalPoint) \n    {\n        uint _Im_Card_Number;\n        uint Im_AccumulatedPoints = 0;\n        \n        //Accumulate hand point\n        for (uint Im_CardCounter = 0 ; Im_CardCounter < _Card_InHand.length ; Im_CardCounter++) \n        {\n            _Im_Card_Number = _Card_InHand[Im_CardCounter];\n            \n            Im_AccumulatedPoints = Im_AccumulatedPoints + Counting_CardPoint(_Im_Card_Number);\n        }\n\n        //Check ACE\n        for (uint Im_CardCounter = 0 ; Im_CardCounter < _Card_InHand.length ; Im_CardCounter++) \n        {\n            _Im_Card_Number = _Card_InHand[Im_CardCounter];\n            \n            if((_Im_Card_Number%13) == 0 && Im_AccumulatedPoints <= 11) \n            {\n                Im_AccumulatedPoints = Im_AccumulatedPoints + 10;\n            }\n        }\n        \n        return Im_AccumulatedPoints;\n    }\n    \n    \n    \n    \n\n    function Determine_Result(uint _GameId, uint _RoundId) \n    internal\n    returns (uint[] memory _WinnerUserId, uint[] memory _LoserUserId) \n    {\n        uint[] memory Im_WinnerUserIdSet;\n        uint[] memory Im_DrawIdSet;\n        uint[] memory Im_LoserIdSet;\n\n        Game_Unit memory Im_GameUnit_Instance = Mapping__GameUnitId_GameUnitStruct[_GameId];\n        Game_Round_Unit storage Im_GameRoundUnit_Instance = Mapping__GameRoundId_GameRoundStruct[_RoundId];\n\n        uint Im_PlayerTotalPoint;\n        uint Im_DealerTotalPoint = Counting_HandCardPoint({_Card_InHand: Im_GameRoundUnit_Instance.Cards_InDealer});\n        \n        for(uint Im_PlayUnitCounter = 0 ; Im_PlayUnitCounter <= Im_GameUnit_Instance.Player_UserIds.length; Im_PlayUnitCounter++)\n        {\n            Im_GameRoundUnit_Instance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand.pop;\n            \n            uint Im_PlayerUserId = Im_GameRoundUnit_Instance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Player_UserId;\n            Im_PlayerTotalPoint = Counting_HandCardPoint(Im_GameRoundUnit_Instance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand);\n            \n            if(Im_PlayerTotalPoint > 21 && Im_DealerTotalPoint > 21)\n            {\n                Im_DrawIdSet[Im_DrawIdSet.length] = Im_PlayerUserId;  \n            } \n            else if (Im_PlayerTotalPoint > 21) \n            {\n                Im_LoserIdSet[Im_LoserIdSet.length] = Im_PlayerUserId;\n            } \n            else if (Im_DealerTotalPoint > 21) \n            {\n                Im_WinnerUserIdSet[Im_WinnerUserIdSet.length] = Im_PlayerUserId;\n            } \n            else if (Im_DealerTotalPoint > Im_PlayerTotalPoint) \n            {\n                Im_LoserIdSet[Im_LoserIdSet.length] = Im_PlayerUserId;\n            } \n            else if (Im_PlayerTotalPoint > Im_DealerTotalPoint) \n            {\n                Im_WinnerUserIdSet[Im_WinnerUserIdSet.length] = Im_PlayerUserId;\n            }\n            else if (Im_PlayerTotalPoint == Im_DealerTotalPoint) \n            {\n                Im_DrawIdSet[Im_DrawIdSet.length] = Im_PlayerUserId;\n            } \n        }\n            \n        emit Determine_GameRoundResult\n        (\n            {_GameIdEvent: _GameId,\n            _GameRoundIdEvent: _RoundId,\n            _WinnerUserIdEvent: Im_WinnerUserIdSet,\n            _DrawUserIdEvent: Im_DrawIdSet,\n            _LoserUserIdEvent: Im_LoserIdSet}\n        );        \n        \n        return (Im_WinnerUserIdSet, Im_LoserIdSet);\n    }\n\n}\n/* =================================================================\nContact END : Basic Functionalities\n==================================================================== */\n\n\n\n\n\n/* =================================================================\nContact HEAD : Integratwion User Workflow\n==================================================================== */\n\n// ----------------------------------------------------------------------------\n// Black jack Integrated User functionality Workflow\n// ----------------------------------------------------------------------------\n\ncontract Play_Blackjack is Blackjack_Functionality\n{\n\n\n\n\n\n    function Create_UserAccount (uint UserId, string memory UserName, string memory UserDescription) \n    public whenNotPaused\n    returns (uint _UserId, address _UserAddress, string memory _UserName, string memory _UserDescription)\n    {\n        require(Mapping__UserAddress_UserId[msg.sender] == 0);\n\n        (\n        uint Im_UserId, \n        address Im_UserAddress, \n        string memory Im_UserName, \n        string memory Im_UserDescription\n        ) \n        = Initialize_UserAccount\n        (\n            {_UserId: UserId,\n            _UserName: UserName,\n            _UserDescription: UserDescription}\n        );\n        \n        return (Im_UserId, Im_UserAddress, Im_UserName, Im_UserDescription);\n       }\n\n\n\n\n  \n    function Create_AutoGame (uint AutoGame_BettingRank) \n    public whenNotPaused\n    returns (uint _CreateGameId) \n    {\n        uint _Im_MIN_BettingLimit = Mapping__AutoGameBettingRank_BettingRange[AutoGame_BettingRank][0];\n        uint _Im_MAX_BettingLimit = Mapping__AutoGameBettingRank_BettingRange[AutoGame_BettingRank][1];\n        uint[] memory _Im_AutoGamePlayer_UserId;\n        _Im_AutoGamePlayer_UserId[0] = Mapping__UserAddress_UserId[msg.sender];\n        \n        ImCounter_AutoGameId = ImCounter_AutoGameId + 1;\n\n        Initialize_Game\n        (\n            {_GameId: ImCounter_AutoGameId, \n            _Player_UserIds: _Im_AutoGamePlayer_UserId, \n            _Dealer_UserId: Mapping__UserAddress_UserId[address(this)], \n            _MIN_BettingLimit: _Im_MIN_BettingLimit, \n            _MAX_BettingLimit: _Im_MAX_BettingLimit}\n        );\n        \n        return (ImCounter_AutoGameId);\n    }\n        \n\n\n\n    \n    function Create_DualGame \n    (\n        uint[] memory PlayerIds ,\n        uint MIN_BettingLimit ,\n        uint MAX_BettingLimit\n    ) \n        public whenNotPaused\n        returns (uint _CreateGameId) \n        {\n        require(MIN_BettingLimit <= MAX_BettingLimit);\n        uint _Im_DualGameCreater_UserId = Mapping__UserAddress_UserId[msg.sender];\n        \n        ImCounter_DualGameId = ImCounter_DualGameId + 1;        \n        \n        Initialize_Game\n        (\n            {_GameId: ImCounter_DualGameId, \n            _Player_UserIds: PlayerIds, \n            _Dealer_UserId: _Im_DualGameCreater_UserId, \n            _MIN_BettingLimit: MIN_BettingLimit, \n            _MAX_BettingLimit: MAX_BettingLimit}\n        );\n        \n        return (ImCounter_DualGameId);\n    }\n    \n    \n    \n    \n    \n    function Player_Bettings(uint GameId, uint Im_BettingsERC20Ammount) \n    public whenNotPaused\n    returns (uint _GameId, uint GameRoundId, uint BettingAmount) \n    {\n        require(Im_BettingsERC20Ammount >= Mapping__GameUnitId_GameUnitStruct[GameId].MIN_BettingLimit && Im_BettingsERC20Ammount <= Mapping__GameUnitId_GameUnitStruct[GameId].MAX_BettingLimit);\n        \n        uint Im_GameId;\n        uint Im_GameRoundId;\n        uint Im_BettingAmount;\n        \n        (Im_GameId, Im_GameRoundId, Im_BettingAmount) = Bettings({_GameId: GameId,_Im_BettingsERC20Ammount: Im_BettingsERC20Ammount});\n        \n        return (Im_GameId, Im_GameRoundId, Im_BettingAmount);\n    }    \n    \n\n    \n    \n    \n    \n    function Start_NewRound(uint GameId) \n    public whenNotPaused\n    returns (uint StartRoundId) \n    {\n        Game_Unit memory Im_GameUnitData= Mapping__GameUnitId_GameUnitStruct[GameId];\n        uint Im_GameRoundId = Im_GameUnitData.Game_RoundsIds[Im_GameUnitData.Game_RoundsIds.length -1];\n        uint[] memory Im_PlayerUserIdSet = Im_GameUnitData.Player_UserIds;\n        uint Im_MIN_BettingLimit = Im_GameUnitData.MIN_BettingLimit;\n        uint Im_MAX_BettingLimit = Im_GameUnitData.MAX_BettingLimit;\n\n        if (Im_MAX_BettingLimit == 0) \n        {\n            uint Im_NewRoundId = Initialize_Round({_ImGameRoundId: Im_GameRoundId, _Player_UserIds: Im_PlayerUserIdSet});\n            \n            return Im_NewRoundId;\n        } \n        else \n        {\n            \n            for(uint Im_PlayerCounter = 0; Im_PlayerCounter <= Im_PlayerUserIdSet.length; Im_PlayerCounter++) \n            {\n                uint Im_PlayerUserId = Im_PlayerUserIdSet[Im_PlayerCounter];\n                uint Im_UserBettingAmount = Mapping__GameRoundIdUserId_Bettings[Im_GameRoundId][Im_PlayerUserId];\n            \n                require(Im_UserBettingAmount >= Im_MIN_BettingLimit && Im_UserBettingAmount <= Im_MAX_BettingLimit);\n                \n                emit CheckBetting_Anouncement \n                (\n                    {GameRoundId: Im_GameRoundId, \n                    UserId: Im_PlayerUserId, \n                    UserBettingAmount: Im_UserBettingAmount, \n                    MinBettingLimit: Im_MIN_BettingLimit,\n                    MaxBettingLimit: Im_MAX_BettingLimit}\n                );\n            }\n            \n            uint Im_NewRoundId = Initialize_Round({_ImGameRoundId: Im_GameRoundId, _Player_UserIds: Im_PlayerUserIdSet});\n            \n            return Im_NewRoundId;\n        }\n        \n        return 0;\n    }\n    \n    \n    \n\n    \n    function Player_HitOrStand (uint GameId, bool Hit_or_Stand) \n    public whenNotPaused\n    returns (uint[] memory NewCards_InHand) \n    {\n        Game_Unit memory Im_GameUnit_Instance = Mapping__GameUnitId_GameUnitStruct[GameId];\n        uint Im_RoundId = Im_GameUnit_Instance.Game_RoundsIds[Im_GameUnit_Instance.Game_RoundsIds.length -1];\n        \n        Game_Round_Unit storage Im_GameRoundUnit_StorageInstance = Mapping__GameRoundId_GameRoundStruct[Im_RoundId];\n        \n        for (uint Im_PlayUnitCounter = 0; Im_PlayUnitCounter <= Im_GameUnit_Instance.Player_UserIds.length; Im_PlayUnitCounter++) \n        {\n            if (Mapping__UserAddress_UserId[msg.sender] == Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Player_UserId ) \n            {\n                if (Hit_or_Stand) \n                {\n                    Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand = GetCard({_Im_GameRoundId: Im_RoundId, _Im_Original_CardInHand: Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand});\n\n                    return Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand;\n                } \n                else if (Hit_or_Stand == false) \n                {\n                    Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand.push(1111);\n\n                    return Im_GameRoundUnit_StorageInstance.Mapping__Index_PlayUnitStruct[Im_PlayUnitCounter].Cards_InHand;\n                }\n            }\n        }\n    }\n   \n    \n    \n\n\n    function Dealer_HitOrStand (uint GameId, bool Hit_or_Stand) \n    public StandCheck_AllPlayer(GameId) whenNotPaused\n    returns (uint[] memory Cards_InDealerHand) \n    {\n        require(Mapping__UserAddress_UserId[msg.sender] == Mapping__GameUnitId_GameUnitStruct[GameId].Dealer_UserId);\n        \n        Game_Unit memory Im_GameUnit_Instance = Mapping__GameUnitId_GameUnitStruct[GameId];\n        \n        uint Im_RoundId = Im_GameUnit_Instance.Game_RoundsIds[Im_GameUnit_Instance.Game_RoundsIds.length -1];\n        Game_Round_Unit storage Im_GameRoundUnit_StorageInstance = Mapping__GameRoundId_GameRoundStruct[Im_RoundId];\n        \n        \n        uint Im_DealerUserId = Im_GameUnit_Instance.Dealer_UserId;\n        uint[] memory WeR_WinnerId;\n        uint[] memory WeR_LoserId;\n        \n        if (Hit_or_Stand) \n        {\n            Im_GameRoundUnit_StorageInstance.Cards_InDealer = GetCard({_Im_GameRoundId: Im_RoundId, _Im_Original_CardInHand: Im_GameRoundUnit_StorageInstance.Cards_InDealer});\n            \n            return Im_GameRoundUnit_StorageInstance.Cards_InDealer;\n        } \n        else if (Hit_or_Stand == false) \n        {\n            //Get winner and loser\n            (WeR_WinnerId, WeR_LoserId) = Determine_Result({_GameId: GameId,_RoundId: Im_RoundId});\n            \n            //Transfer moneymoney to winners\n            for(uint Im_WinnerCounter = 0; Im_WinnerCounter <= WeR_WinnerId.length ; Im_WinnerCounter++) \n            {\n                uint Im_WinnerUserId = WeR_WinnerId[Im_WinnerCounter];\n                uint Im_WinnerBettingAmount = Mapping__GameRoundIdUserId_Bettings[Im_RoundId][Im_WinnerUserId];\n\n                Mapping__OwnerUserId_ERC20Amount[Im_DealerUserId] - Im_WinnerBettingAmount;\n                Mapping__OwnerUserId_ERC20Amount[Im_WinnerUserId] + Im_WinnerBettingAmount;\n            }\n\n            //Transfer moneymoney from losers          \n            for(uint Im_LoserCounter = 0; Im_LoserCounter <= WeR_LoserId.length ; Im_LoserCounter++) \n            {\n                uint Im_LoserUserId = WeR_WinnerId[Im_LoserCounter];\n                uint Im_LoserBettingAmount = Mapping__GameRoundIdUserId_Bettings[Im_RoundId][Im_LoserUserId];\n\n                Mapping__OwnerUserId_ERC20Amount[Im_DealerUserId] + Im_LoserBettingAmount;\n                Mapping__OwnerUserId_ERC20Amount[Im_LoserUserId] - Im_LoserBettingAmount;\n            }\n\n            //Create New Round ID\n            ImCounter_GameRoundId = ImCounter_GameRoundId + 1;\n            Mapping__GameUnitId_GameUnitStruct[GameId].Game_RoundsIds.push(ImCounter_GameRoundId);\n\n            return Im_GameRoundUnit_StorageInstance.Cards_InDealer;\n        }\n    }\n\n}\n/* =================================================================\nContact HEAD : Integration User Workflow\n==================================================================== */\n//Create by [email protected] +886 975330002\n//Worship Lu Goddess Forever",
  "bytecode": ""
}