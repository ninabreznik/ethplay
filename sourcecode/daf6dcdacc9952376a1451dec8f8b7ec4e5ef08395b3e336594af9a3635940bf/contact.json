{
  "address": "0xd2d660055fecf35b66e8e1da82c3aec55a6d2c51",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "XTransferRerouter",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-04\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/utility/interfaces/IOwned.sol\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public view returns (address) {}\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n// File: contracts/utility/Owned.sol\n\n/*\n    Provides support and utilities for contract ownership\n*/\ncontract Owned is IOwned {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n        @dev constructor\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n        @dev allows transferring the contract ownership\n        the new owner still needs to accept the transfer\n        can only be called by the contract owner\n\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /**\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: contracts/bancorx/XTransferRerouter.sol\n\ncontract XTransferRerouter is Owned {\n    bool public reroutingEnabled;\n\n    // triggered when a rerouteTx is called\n    event TxReroute(\n        uint256 indexed _txId,\n        bytes32 _toBlockchain,\n        bytes32 _to\n    );\n\n    /**\n        @dev constructor\n\n        @param _reroutingEnabled    intializes transactions routing to enabled/disabled   \n     */\n    constructor(bool _reroutingEnabled) public {\n        reroutingEnabled = _reroutingEnabled;\n    }\n    /**\n        @dev allows the owner to disable/enable rerouting\n\n        @param _enable     true to enable, false to disable\n     */\n    function enableRerouting(bool _enable) public ownerOnly {\n        reroutingEnabled = _enable;\n    }\n\n    // allows execution only when rerouting enabled\n    modifier whenReroutingEnabled {\n        require(reroutingEnabled);\n        _;\n    }\n\n    /**\n        @dev    allows a user to reroute a transaction to a new blockchain/target address\n\n        @param _txId        the original transaction id\n        @param _blockchain  the new blockchain name\n        @param _to          the new target address/account\n     */\n    function rerouteTx(\n        uint256 _txId,\n        bytes32 _blockchain,\n        bytes32 _to\n    )\n        public\n        whenReroutingEnabled \n    {\n        emit TxReroute(_txId, _blockchain, _to);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806103ec833981016040525160008054600160a060020a0319163317905560018054911515740100000000000000000000000000000000000000000260a060020a60ff0219909216919091179055610379806100736000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166379ba509781146100875780638da5cb5b1461009e578063a3ebe71c146100cf578063d4ee1d90146100e9578063e3db16f7146100fe578063edd63c351461011c578063f2fde38b14610145575b600080fd5b34801561009357600080fd5b5061009c610166565b005b3480156100aa57600080fd5b506100b36101ee565b60408051600160a060020a039092168252519081900360200190f35b3480156100db57600080fd5b5061009c60043515156101fd565b3480156100f557600080fd5b506100b3610254565b34801561010a57600080fd5b5061009c600435602435604435610263565b34801561012857600080fd5b506101316102cb565b604080519115158252519081900360200190f35b34801561015157600080fd5b5061009c600160a060020a03600435166102ec565b600154600160a060020a0316331461017d57600080fd5b60015460008054604051600160a060020a0393841693909116917f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b600054600160a060020a0316331461021457600080fd5b60018054911515740100000000000000000000000000000000000000000274ff000000000000000000000000000000000000000019909216919091179055565b600154600160a060020a031681565b60015474010000000000000000000000000000000000000000900460ff16151561028c57600080fd5b6040805183815260208101839052815185927fb5c80f971fb729e469ffa874c60425659ce82cb4adcfba9731af35ef87b6e619928290030190a2505050565b60015474010000000000000000000000000000000000000000900460ff1681565b600054600160a060020a0316331461030357600080fd5b600054600160a060020a038281169116141561031e57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058204d1941294aa8144c74e364dde2b6a0dece854a4258643898a543137d2f22d4f600290000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000001"
}