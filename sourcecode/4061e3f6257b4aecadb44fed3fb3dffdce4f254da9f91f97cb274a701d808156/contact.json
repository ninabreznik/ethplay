{
  "address": "0xe7d3e4413e29ae35b0893140f4500965c74365e5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "B2BCoinContract",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-19\n*/\n\npragma solidity ^0.4.13;\n\ncontract tokenRecipientInterface {\n  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n}\n\ncontract ERC20TokenInterface {\n  function totalSupply() public constant returns (uint256 _totalSupply);\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n  function approve(address _spender, uint256 _value) public returns (bool success);\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract SafeMath {\n    \n    uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        require(x <= MAX_UINT256 - y);\n        return x + y;\n    }\n\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        require(x >= y);\n        return x - y;\n    }\n\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n        if (y == 0) {\n            return 0;\n        }\n        require(x <= (MAX_UINT256 / y));\n        return x * y;\n    }\n}\n\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n}\n\ncontract Lockable is Owned {\n\n    uint256 public lockedUntilBlock;\n\n    event ContractLocked(uint256 _untilBlock, string _reason);\n\n    modifier lockAffected {\n        require(block.number > lockedUntilBlock);\n        _;\n    }\n\n    function lockFromSelf(uint256 _untilBlock, string _reason) internal {\n        lockedUntilBlock = _untilBlock;\n        ContractLocked(_untilBlock, _reason);\n    }\n\n\n    function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\n        lockedUntilBlock = _untilBlock;\n        ContractLocked(_untilBlock, _reason);\n    }\n}\n\ncontract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\n\n    // Name of token\n    string public name;\n    // Abbreviation of tokens name\n    string public symbol;\n    // Number of decimals token has\n    uint8 public decimals;\n    // Maximum tokens that can be minted\n    uint256 public totalSupplyLimit;\n\n    // Current supply of tokens\n    uint256 supply = 0;\n    // Map of users balances\n    mapping (address => uint256) balances;\n    // Map of users allowances\n    mapping (address => mapping (address => uint256)) allowances;\n\n    // Event that shows that new tokens were created\n    event Mint(address indexed _to, uint256 _value);\n    // Event that shows that old tokens were destroyed\n    event Burn(address indexed _from, uint _value);\n\n    /**\n    * @dev Returns number of tokens in circulation\n    *\n    * @return total number od tokens\n    */\n    function totalSupply() public constant returns (uint256) {\n        return supply;\n    }\n\n    /**\n    * @dev Returns the balance of specific account\n    *\n    * @param _owner The account that caller wants to querry\n    * @return the balance on this account\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev User can transfer tokens with this method, method is disabled if emergencyLock is activated\n    *\n    * @param _to Reciever of tokens\n    * @param _value The amount of tokens that will be sent \n    * @return if successful returns true\n    */\n    function transfer(address _to, uint256 _value) lockAffected public returns (bool success) {\n        require(_to != 0x0 && _to != address(this));\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev This is used to allow some account to utilise transferFrom and sends tokens on your behalf, this method is disabled if emergencyLock is activated\n    *\n    * @param _spender Who can send tokens on your behalf\n    * @param _value The amount of tokens that are allowed to be sent \n    * @return if successful returns true\n    */\n    function approve(address _spender, uint256 _value) lockAffected public returns (bool success) {\n        allowances[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev This is used to send tokens and execute code on other smart contract, this method is disabled if emergencyLock is activated\n    *\n    * @param _spender Contract that is receiving tokens\n    * @param _value The amount that msg.sender is sending\n    * @param _extraData Additional params that can be used on reciving smart contract\n    * @return if successful returns true\n    */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected public returns (bool success) {\n        tokenRecipientInterface spender = tokenRecipientInterface(_spender);\n        approve(_spender, _value);\n        spender.receiveApproval(msg.sender, _value, this, _extraData);\n        return true;\n    }\n\n    /**\n    * @dev Sender can transfer tokens on others behalf, this method is disabled if emergencyLock is activated\n    *\n    * @param _from The account that will send tokens\n    * @param _to Account that will recive the tokens\n    * @param _value The amount that msg.sender is sending\n    * @return if successful returns true\n    */\n    function transferFrom(address _from, address _to, uint256 _value) lockAffected public returns (bool success) {\n        require(_to != 0x0 && _to != address(this));\n        balances[_from] = safeSub(balanceOf(_from), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Returns the amount od tokens that can be sent from this addres by spender\n    *\n    * @param _owner Account that has tokens\n    * @param _spender Account that can spend tokens\n    * @return remaining balance to spend\n    */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowances[_owner][_spender];\n    }\n\n    /**\n    * @dev Creates new tokens as long as total supply does not reach limit\n    *\n    * @param _to Reciver od newly created tokens\n    * @param _amount Amount of tokens to be created;\n    */\n    function mintTokens(address _to, uint256 _amount) onlyOwner public {\n        require(supply + _amount <= totalSupplyLimit);\n        supply = safeAdd(supply, _amount);\n        balances[_to] = safeAdd(balances[_to], _amount);\n        Mint(_to, _amount);\n        Transfer(0x0, _to, _amount);\n    }\n\n    /**\n    * @dev Destroys the amount of tokens and lowers total supply\n    *\n    * @param _amount Number of tokens user wants to destroy\n    */\n    function burn(uint _amount) public {\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _amount);\n        supply = safeSub(supply, _amount);\n        Burn(msg.sender, _amount);\n        Transfer(msg.sender, 0x0, _amount);\n    }\n\n    /**\n    * @dev Saves exidentaly sent tokens to this contract, can be used only by owner\n    *\n    * @param _tokenAddress Address of tokens smart contract\n    * @param _to Where to send the tokens\n    * @param _amount The amount of tokens that we are salvaging\n    */\n    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {\n        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\n    }\n\n    /**\n    * @dev Disables the contract and wipes all the balances, can be used only by owner\n    */\n    function killContract() public onlyOwner {\n        selfdestruct(owner);\n    }\n}\n\ncontract B2BCoinContract is ERC20Token {\n\n    /**\n    * @dev Intialises token and all the necesary variable\n    */\n    function B2BCoinContract() {\n        name = \"B2BCoin\";\n        symbol = \"BBC\";\n        decimals = 18;\n        totalSupplyLimit = 1000000000 * 10**18;\n        lockFromSelf(0, \"Lock before crowdsale starts\");\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"lockUntil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"ContractLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052600060075534156200001557600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600781526020017f423242436f696e0000000000000000000000000000000000000000000000000081525060039080519060200190620000a29291906200022e565b506040805190810160405280600381526020017f424243000000000000000000000000000000000000000000000000000000000081525060049080519060200190620000f09291906200022e565b506012600560006101000a81548160ff021916908360ff1602179055506b033b2e3c9fd0803ce80000006006819055506200017660006040805190810160405280601c81526020017f4c6f636b206265666f72652063726f776473616c6520737461727473000000008152506200017c64010000000002620019aa176401000000009004565b620002dd565b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015620001ee578082015181840152602081019050620001d1565b50505050905090810190601f1680156200021c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027157805160ff1916838001178555620002a2565b82800160010185558215620002a2579182015b82811115620002a157825182559160200191906001019062000284565b5b509050620002b19190620002b5565b5090565b620002da91905b80821115620002d6576000816000905550600101620002bc565b5090565b90565b611a8580620002ed6000396000f300606060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d578063095ea7b3146101bb57806318160ddd146102155780631c02708d1461023e57806323b872dd14610253578063313ce567146102cc57806333a581d2146102fb57806342966c681461032457806370a082311461034757806379ba5097146103945780638da5cb5b146103a957806395d89b41146103fe578063a0929cda1461048c578063a9059cbb146104ed578063b26eafe414610547578063bac21a22146105ad578063cae9ca51146105d6578063d4ee1d9014610673578063d8162db7146106c8578063dd62ed3e146106f1578063f0dda65c1461075d578063f2fde38b1461079f575b600080fd5b341561013857600080fd5b6101406107d8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610180578082015181840152602081019050610165565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c657600080fd5b6101fb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610876565b604051808215151515815260200191505060405180910390f35b341561022057600080fd5b610228610978565b6040518082815260200191505060405180910390f35b341561024957600080fd5b610251610982565b005b341561025e57600080fd5b6102b2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a14565b604051808215151515815260200191505060405180910390f35b34156102d757600080fd5b6102df610ca4565b604051808260ff1660ff16815260200191505060405180910390f35b341561030657600080fd5b61030e610cb7565b6040518082815260200191505060405180910390f35b341561032f57600080fd5b6103456004808035906020019091905050610cdb565b005b341561035257600080fd5b61037e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610de3565b6040518082815260200191505060405180910390f35b341561039f57600080fd5b6103a7610e2c565b005b34156103b457600080fd5b6103bc611008565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561040957600080fd5b61041161102d565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610451578082015181840152602081019050610436565b50505050905090810190601f16801561047e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049757600080fd5b6104eb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110cb565b005b34156104f857600080fd5b61052d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506111e2565b604051808215151515815260200191505060405180910390f35b341561055257600080fd5b6105ab600480803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061136b565b005b34156105b857600080fd5b6105c0611472565b6040518082815260200191505060405180910390f35b34156105e157600080fd5b610659600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611478565b604051808215151515815260200191505060405180910390f35b341561067e57600080fd5b6106866115f8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106d357600080fd5b6106db61161e565b6040518082815260200191505060405180910390f35b34156106fc57600080fd5b610747600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611624565b6040518082815260200191505060405180910390f35b341561076857600080fd5b61079d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506116ab565b005b34156107aa57600080fd5b6107d6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611858565b005b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561086e5780601f106108435761010080835404028352916020019161086e565b820191906000526020600020905b81548152906001019060200180831161085157829003601f168201915b505050505081565b60006002544311151561088857600080fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600754905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109da57fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b600060025443111515610a2657600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff1614158015610a7957503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1515610a8457600080fd5b610a96610a9085610de3565b83611950565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610aeb610ae584610de3565b8361196c565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bb4600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611950565b600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600560009054906101000a900460ff1681565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b610ced610ce733610de3565b82611950565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d3c60075482611950565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a260003373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8857600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110c35780601f10611098576101008083540402835291602001916110c3565b820191906000526020600020905b8154815290600101906020018083116110a657829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561112357fe5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156111c557600080fd5b5af115156111d257600080fd5b5050506040518051905050505050565b6000600254431115156111f457600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415801561124757503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b151561125257600080fd5b61126461125e33610de3565b83611950565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112b96112b384610de3565b8361196c565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113c357fe5b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611433578082015181840152602081019050611418565b50505050905090810190601f1680156114605780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15050565b60065481565b6000806002544311151561148b57600080fd5b8490506114988585610876565b508073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561158e578082015181840152602081019050611573565b50505050905090810190601f1680156115bb5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156115dc57600080fd5b5af115156115e957600080fd5b50505060019150509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561170357fe5b60065481600754011115151561171857600080fd5b6117246007548261196c565b600781905550611773600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261196c565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118b057fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561190c57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081831015151561196157600080fd5b818303905092915050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831115151561199f57600080fd5b818301905092915050565b816002819055507f2c1bcb4f0c190ca2fcb1bb54323892ec36606ef7958dc7a4e1dc599fe2c1c0f082826040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611a1a5780820151818401526020810190506119ff565b50505050905090810190601f168015611a475780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505600a165627a7a72305820efe80189c76541377b5a8c9a361043ee32a931bb440cae8bdc8b6c3146b1515d0029"
}