{
  "address": "0x8b7d07b6ffb9364e97b89cea8b84f94249be459f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FUTX",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-30\n*/\n\npragma solidity ^0.4.18;\n\n// FUTR, but time is shorter and less ether / tokens.\n\ncontract FUTX {\n\n    uint256 constant MAX_UINT256 = 2**256 - 1;\n    \n    uint256 MAX_SUBMITTED = 5000671576194550000000;\n\n    // (no premine)\n    uint256 _totalSupply = 0;\n    \n    // The following 2 variables are essentially a lookup table.\n    // They are not constant because they are memory.\n    // I came up with this because calculating it was expensive,\n    // especially so when crossing tiers.\n    \n    // Sum of each tier by ether submitted.\n   uint256[] levels = [ \n      87719298245614000000,\n     198955253301794000000,\n     373500707847248000000,\n     641147766670778000000,\n     984004909527921000000,\n    1484004909527920000000,\n    2184004909527920000000,\n    3084004909527920000000,\n    4150671576194590000000,\n    5000671576194550000000\n    ];\n    \n    // Token amounts for each tier.\n    uint256[] ratios = [\n      114,\n      89,\n      55,\n      34,\n      21,\n      13,\n       8,\n       5,\n       3,\n       2 ];\n     \n    // total ether submitted before fees.\n    uint256 _submitted = 0;\n    \n    uint256 public tier = 0;\n    \n    // ERC20 events.\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n    \n    // FUTR events.\n    event Mined(address indexed _miner, uint _value);\n    event WaitStarted(uint256 endTime);\n    event SwapStarted(uint256 endTime);\n    event MiningStart(uint256 end_time, uint256 swap_time, uint256 swap_end_time);\n    event MiningExtended(uint256 end_time, uint256 swap_time, uint256 swap_end_time);\n\n \n    // Optional ERC20 values.\n    string public name = \"Futereum X\";\n    uint8 public decimals = 18;\n    string public symbol = \"FUTX\";\n    \n    // Public variables so the curious can check the state.\n    bool public swap = false;\n    bool public wait = false;\n    bool public extended = false;\n    \n    // Public end time for the current state.\n    uint256 public endTime;\n    \n    // These are calculated at mining start.\n    uint256 swapTime;\n    uint256 swapEndTime;\n    uint256 endTimeExtended;\n    uint256 swapTimeExtended;\n    uint256 swapEndTimeExtended;\n    \n    // Pay rate calculated from balance later.\n    uint256 public payRate = 0;\n    \n    // Fee variables.  Fees are reserved and then withdrawn  later.\n    uint256 submittedFeesPaid = 0;\n    uint256 penalty = 0;\n    uint256 reservedFees = 0;\n    \n    // Storage.\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n\n   // Fallback function mines the tokens.\n   // Send from a wallet you control.\n   // DON'T send from an exchange wallet!\n   // We recommend sending using a method that calculates gas for you.\n   // Here are some estimates (not guaranteed to be accurate):\n   // It usually costs around 90k gas.  It cost more if you cross a tier.\n   // Maximum around 190k gas.\n   function () external payable {\n   \n       require(msg.sender != address(0) &&\n                tier != 10 &&\n                swap == false &&\n                wait == false);\n    \n        uint256 issued = mint(msg.sender, msg.value);\n        \n        Mined(msg.sender, issued);\n        Transfer(this, msg.sender, issued);\n    }\n    \n    // Constructor.\n    function FUTX() public {\n        _start();\n    }\n    \n    // This gets called by constructor AND after the swap to restart evertying.\n    function _start() internal \n    {\n        swap = false;\n        wait = false;\n        extended = false;\n    \n        endTime = now + 90 days;\n        swapTime = endTime + 30 days;\n        swapEndTime = swapTime + 5 days;\n        endTimeExtended = now + 270 days;\n        swapTimeExtended = endTimeExtended + 90 days;\n        swapEndTimeExtended = swapTimeExtended + 5 days;\n        \n        submittedFeesPaid = 0;\n        _submitted = 0;\n        \n        reservedFees = 0;\n        \n        payRate = 0;\n        \n        tier = 0;\n                \n        MiningStart(endTime, swapTime, swapEndTime);\n    }\n    \n    // Restarts everything after swap.\n    // This is expensive, so we make someone call it and pay for the gas.\n    // Any holders that miss the swap get to keep their tokens.\n    // Ether stays in contract, minus 20% penalty fee.\n    function restart() public {\n        require(swap && now >= endTime);\n        \n        penalty = this.balance * 2000 / 10000;\n        \n        payFees();\n        \n        _start();\n    }\n    \n    // ERC20 standard supply function.\n    function totalSupply() public constant returns (uint)\n    {\n        return _totalSupply;\n    }\n    \n    // Mints new tokens when they are mined.\n    function mint(address _to, uint256 _value) internal returns (uint256) \n    {\n        uint256 total = _submitted + _value;\n        \n        if (total > MAX_SUBMITTED)\n        {\n            uint256 refund = total - MAX_SUBMITTED - 1;\n            _value = _value - refund;\n            \n            // refund money and continue.\n            _to.transfer(refund);\n        }\n        \n        _submitted += _value;\n        \n        total -= refund;\n        \n        uint256 tokens = calculateTokens(total, _value);\n        \n        balances[_to] += tokens;\n       \n        _totalSupply += tokens;\n        \n        return tokens;\n    }\n    \n    // Calculates the tokens mined based on the tier.\n    function calculateTokens(uint256 total, uint256 _value) internal returns (uint256)\n    {\n        if (tier == 10) \n        {\n            // This just rounds it off to an even number.\n            return 74000000;\n        }\n        \n        uint256 tokens = 0;\n        \n        if (total > levels[tier])\n        {\n            uint256 remaining = total - levels[tier];\n            _value -= remaining;\n            tokens = (_value) * ratios[tier];\n           \n            tier += 1;\n            \n            tokens += calculateTokens(total, remaining);\n        }\n        else\n        {\n            tokens = _value * ratios[tier];\n        }\n        \n        return tokens;\n    }\n    \n    // This is basically so you don't have to add 1 to the last completed tier.\n    //  You're welcome.\n    function currentTier() public view returns (uint256) {\n        if (tier == 10)\n        {\n            return 10;\n        }\n        else\n        {\n            return tier + 1;\n        }\n    }\n    \n    // Ether remaining for tier.\n    function leftInTier() public view returns (uint256) {\n        if (tier == 10) {\n            return 0;\n        }\n        else\n        {\n            return levels[tier] - _submitted;\n        }\n    }\n    \n    // Total sumbitted for mining.\n    function submitted() public view returns (uint256) {\n        return _submitted;\n    }\n    \n    // Balance minus oustanding fees.\n    function balanceMinusFeesOutstanding() public view returns (uint256) {\n        return this.balance - (penalty + (_submitted - submittedFeesPaid) * 1530 / 10000);  // fees are 15.3 % total.\n    }\n    \n    // Calculates the amount of ether per token from the balance.\n    // This is calculated once by the first account to swap.\n    function calulateRate() internal {\n        reservedFees = penalty + (_submitted - submittedFeesPaid) * 1530 / 10000;  // fees are 15.3 % total.\n        \n        uint256 tokens = _totalSupply / 1 ether;\n        payRate = (this.balance - reservedFees);\n\n        payRate = payRate / tokens;\n    }\n    \n    // This function is called on token transfer and fee payment.\n    // It checks the next deadline and then updates the deadline and state.\n    // \n    // It uses the block time, but the time periods are days and months,\n    // so it should be pretty safe  ¯\\_(ツ)_/¯ \n    function _updateState() internal {\n        // Most of the time, this will just be skipped.\n        if (now >= endTime)\n        {\n            // We are not currently swapping or waiting to swap\n            if(!swap && !wait)\n            {\n                if (extended)\n                {\n                    // It's been 36 months.\n                    wait = true;\n                    endTime = swapTimeExtended;\n                    WaitStarted(endTime);\n                }\n                else if (tier == 10)\n                {\n                    // Tiers filled\n                    wait = true;\n                    endTime = swapTime;\n                    WaitStarted(endTime);\n                } \n                else\n                {\n                    // Extended to 36 months\n                    endTime = endTimeExtended;\n                    extended = true;\n                    \n                    MiningExtended(endTime, swapTime, swapEndTime);\n                }\n            } \n            else if (wait)\n            {\n                // It's time to swap.\n                swap = true;\n                wait = false;\n                \n                if (extended) \n                {\n                    endTime = swapEndTimeExtended;\n                }\n                else\n                {\n                    endTime = swapEndTime;\n                }\n                \n                SwapStarted(endTime);\n            }\n        }\n    }\n   \n    // Standard ERC20 transfer plus state check and token swap logic.\n    //\n    // We recommend sending using a method that calculates gas for you.\n    //\n    // Here are some estimates (not guaranteed to be accurate):\n    // It usually costs around 37k gas.  It cost more if the state changes.\n    // State change means around 55k - 65k gas.\n    // Swapping tokens for ether costs around 46k gas. (around 93k for the first account to swap)\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        \n        require(balances[msg.sender] >= _value);\n        \n         // Normal transfers check if time is expired.  \n        _updateState();\n\n        // Check if sending in for swap.\n        if (_to == address(this)) \n        {\n            // throw if they can't swap yet.\n            require(swap);\n            \n            if (payRate == 0)\n            {\n                calulateRate(); // Gas to calc the rate paid by first unlucky soul.\n            }\n            \n            uint256 amount = _value * payRate;\n            // Adjust for decimals\n            amount /= 1 ether;\n            \n            // Burn tokens.\n            balances[msg.sender] -= _value;\n             _totalSupply -= _value;\n            Transfer(msg.sender, _to, _value);\n            \n            //send ether\n            msg.sender.transfer(amount);\n        } else\n        {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n        }\n        return true;\n    }\n    \n    // Standard ERC20.\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n       \n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    // Standard ERC20.\n    function balanceOf(address _owner) view public returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // Standard ERC20.\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n    \n    // ********************\n    // Fee stuff.\n\n    // Addresses for fees.\n    address public foundation = 0x950ec4ef693d90f8519c4213821e462426d30905;\n    address public owner = 0x78BFCA5E20B0D710EbEF98249f68d9320eE423be;\n    address public dev = 0x5d2b9f5345e69e2390ce4c26ccc9c2910a097520;\n    \n    // Pays fees to the foundation, the owner, and the dev.\n    // It also updates the state.  Anyone can call this.\n    function payFees() public {\n         // Check state to see if swap needs to happen.\n         _updateState();\n         \n        uint256 fees = penalty + (_submitted - submittedFeesPaid) * 1530 / 10000;  // fees are 15.3 % total.\n        submittedFeesPaid = _submitted;\n        \n        reservedFees = 0;\n        penalty = 0;\n        \n        if (fees > 0) \n        {\n            foundation.transfer(fees / 3);\n            owner.transfer(fees / 3);\n            dev.transfer(fees / 3);\n        }\n    }\n    \n    function changeFoundation (address _receiver) public\n    {\n        require(msg.sender == foundation);\n        foundation = _receiver;\n    }\n    \n    \n    function changeOwner (address _receiver) public\n    {\n        require(msg.sender == owner);\n        owner = _receiver;\n    }\n    \n    function changeDev (address _receiver) public\n    {\n        require(msg.sender == dev);\n        dev = _receiver;\n    }    \n\n}",
  "bytecode": "606060405269010f16424fdafce2e9806000556000600155610140604051908101604052806804c1598cff645e578069ffffffffffffffffffff168152602001680ac90f0cc4934b4c8069ffffffffffffffffffff16815260200168143f5d12e5402bb40069ffffffffffffffffffff1681526020016822c1b670d732c1628069ffffffffffffffffffff168152602001683557cfb3bbf41efe4069ffffffffffffffffffff168152602001685072b48a9ee35fbc0069ffffffffffffffffffff168152602001687665281ddc98cfbc0069ffffffffffffffffffff16815260200168a72f2a6d75145fbc0069ffffffffffffffffffff16815260200168e10223af59353d438069ffffffffffffffffffff16815260200169010f16424fdafce2e98069ffffffffffffffffffff16815250600290600a6200014392919062000535565b5061014060405190810160405280607260ff168152602001605960ff168152602001603760ff168152602001602260ff168152602001601560ff168152602001600d60ff168152602001600860ff168152602001600560ff168152602001600360ff168152602001600260ff16815250600390600a620001c592919062000595565b50600060045560006005556040805190810160405280600a81526020017f467574657265756d205800000000000000000000000000000000000000000000815250600690805190602001906200021d929190620005ec565b506012600760006101000a81548160ff021916908360ff1602179055506040805190810160405280600481526020017f46555458000000000000000000000000000000000000000000000000000000008152506008908051906020019062000287929190620005ec565b506000600960006101000a81548160ff0219169083151502179055506000600960016101000a81548160ff0219169083151502179055506000600960026101000a81548160ff021916908315150217905550600060105560006011556000601255600060135573950ec4ef693d90f8519c4213821e462426d30905601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507378bfca5e20b0d710ebef98249f68d9320ee423be601760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735d2b9f5345e69e2390ce4c26ccc9c2910a097520601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503415620003f857600080fd5b620004166200041c6401000000000262001931176401000000009004565b6200069b565b6000600960006101000a81548160ff0219169083151502179055506000600960016101000a81548160ff0219169083151502179055506000600960026101000a81548160ff0219169083151502179055506276a7004201600a8190555062278d00600a5401600b8190555062069780600b5401600c81905550630163f5004201600d819055506276a700600d5401600e8190555062069780600e5401600f81905550600060118190555060006004819055506000601381905550600060108190555060006005819055507f938e6fcc245d7476cacd79a5032e14b706e6a7ead38fab7a0d73c4feaded40eb600a54600b54600c5460405180848152602001838152602001828152602001935050505060405180910390a1565b82805482825590600052602060002090810192821562000582579160200282015b8281111562000581578251829069ffffffffffffffffffff1690559160200191906001019062000556565b5b50905062000591919062000673565b5090565b828054828255906000526020600020908101928215620005d9579160200282015b82811115620005d8578251829060ff16905591602001919060010190620005b6565b5b509050620005e8919062000673565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200062f57805160ff191683800117855562000660565b8280016001018555821562000660579182015b828111156200065f57825182559160200191906001019062000642565b5b5090506200066f919062000673565b5090565b6200069891905b80821115620006945760008160009055506001016200067a565b5090565b90565b611d3780620006ab6000396000f30060606040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146102ab578063095ea7b31461033957806316f4d0221461039357806318160ddd146103bc5780631ef3755d146103e557806323b872dd146103fa57806324bb49d614610473578063313ce5671461049c5780633197cbb6146104cb57806341fbb050146104f457806362779e151461054957806364bd70131461055e57806365a5f1cd1461058b5780636f3921ee146105c4578063708ddf7b146105f157806370a082311461061a5780638119c0651461066757806388a8c95c146106945780638da5cb5b146106cd57806391cca3db1461072257806395d89b4114610777578063a6f9dae114610805578063a9059cbb1461083e578063d679677a14610898578063dd62ed3e146108c1578063f51fb6a11461092d578063f97e17d914610956575b60008073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156101a05750600a60055414155b80156101bf575060001515600960009054906101000a900460ff161515145b80156101de575060001515600960019054906101000a900460ff161515145b15156101e957600080fd5b6101f3333461097f565b90503373ffffffffffffffffffffffffffffffffffffffff167f3ad10ba9777a3bc21180a465e5459861d07cbdb271af9a0f10c993b365b760f8826040518082815260200191505060405180910390a23373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350005b34156102b657600080fd5b6102be610a70565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102fe5780820151818401526020810190506102e3565b50505050905090810190601f16801561032b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034457600080fd5b610379600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b0e565b604051808215151515815260200191505060405180910390f35b341561039e57600080fd5b6103a6610c00565b6040518082815260200191505060405180910390f35b34156103c757600080fd5b6103cf610c06565b6040518082815260200191505060405180910390f35b34156103f057600080fd5b6103f8610c10565b005b341561040557600080fd5b610459600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c7a565b604051808215151515815260200191505060405180910390f35b341561047e57600080fd5b610486610f14565b6040518082815260200191505060405180910390f35b34156104a757600080fd5b6104af610f50565b604051808260ff1660ff16815260200191505060405180910390f35b34156104d657600080fd5b6104de610f63565b6040518082815260200191505060405180910390f35b34156104ff57600080fd5b610507610f69565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561055457600080fd5b61055c610f8f565b005b341561056957600080fd5b610571611127565b604051808215151515815260200191505060405180910390f35b341561059657600080fd5b6105c2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061113a565b005b34156105cf57600080fd5b6105d76111da565b604051808215151515815260200191505060405180910390f35b34156105fc57600080fd5b6106046111ed565b6040518082815260200191505060405180910390f35b341561062557600080fd5b610651600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111f7565b6040518082815260200191505060405180910390f35b341561067257600080fd5b61067a611240565b604051808215151515815260200191505060405180910390f35b341561069f57600080fd5b6106cb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611253565b005b34156106d857600080fd5b6106e06112f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561072d57600080fd5b610735611319565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561078257600080fd5b61078a61133f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107ca5780820151818401526020810190506107af565b50505050905090810190601f1680156107f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561081057600080fd5b61083c600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113dd565b005b341561084957600080fd5b61087e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061147d565b604051808215151515815260200191505060405180910390f35b34156108a357600080fd5b6108ab611768565b6040518082815260200191505060405180910390f35b34156108cc57600080fd5b610917600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061178a565b6040518082815260200191505060405180910390f35b341561093857600080fd5b610940611811565b6040518082815260200191505060405180910390f35b341561096157600080fd5b61096961184e565b6040518082815260200191505060405180910390f35b600080600080846004540192506000548311156109e6576001600054840303915081850394508573ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015156109e557600080fd5b5b846004600082825401925050819055508183039250610a058386611854565b905080601460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508060016000828254019250508190555080935050505092915050565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b065780601f10610adb57610100808354040283529160200191610b06565b820191906000526020600020905b815481529060010190602001808311610ae957829003601f168201915b505050505081565b600081601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60055481565b6000600154905090565b600960009054906101000a900460ff168015610c2e5750600a544210155b1515610c3957600080fd5b6127106107d03073ffffffffffffffffffffffffffffffffffffffff163102811515610c6157fe5b04601281905550610c70610f8f565b610c78611931565b565b600080601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610d4b5750828110155b1515610d5657600080fd5b82601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610ea35782601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60006127106105fa6011546004540302811515610f2d57fe5b04601254013073ffffffffffffffffffffffffffffffffffffffff163103905090565b600760009054906101000a900460ff1681565b600a5481565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610f99611a4a565b6127106105fa6011546004540302811515610fb057fe5b0460125401905060045460118190555060006013819055506000601281905550600081111561112457601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60038381151561102157fe5b049081150290604051600060405180830381858888f19350505050151561104757600080fd5b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60038381151561108f57fe5b049081150290604051600060405180830381858888f1935050505015156110b557600080fd5b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003838115156110fd57fe5b049081150290604051600060405180830381858888f19350505050151561112357600080fd5b5b50565b600960019054906101000a900460ff1681565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119657600080fd5b80601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600960029054906101000a900460ff1681565b6000600454905090565b6000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600960009054906101000a900460ff1681565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112af57600080fd5b80601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113d55780601f106113aa576101008083540402835291602001916113d5565b820191906000526020600020905b8154815290600101906020018083116113b857829003601f168201915b505050505081565b601760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561143957600080fd5b80601760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008082601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156114ce57600080fd5b6114d6611a4a565b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561165d57600960009054906101000a900460ff16151561152557600080fd5b6000601054141561153957611538611c96565b5b60105483029050670de0b6b3a76400008181151561155357fe5b04905082601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550826001600082825403925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561165857600080fd5b61175d565b82601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b600191505092915050565b6000600a600554141561177e57600a9050611787565b60016005540190505b90565b6000601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600a6005541415611827576000905061184b565b600454600260055481548110151561183b57fe5b9060005260206000209001540390505b90565b60105481565b6000806000600a60055414156118705763046926809250611929565b60009150600260055481548110151561188557fe5b9060005260206000209001548511156119035760026005548154811015156118a957fe5b90600052602060002090015485039050808403935060036005548154811015156118cf57fe5b9060005260206000209001548402915060016005600082825401925050819055506118fa8582611854565b82019150611925565b600360055481548110151561191457fe5b906000526020600020900154840291505b8192505b505092915050565b6000600960006101000a81548160ff0219169083151502179055506000600960016101000a81548160ff0219169083151502179055506000600960026101000a81548160ff0219169083151502179055506276a7004201600a8190555062278d00600a5401600b8190555062069780600b5401600c81905550630163f5004201600d819055506276a700600d5401600e8190555062069780600e5401600f81905550600060118190555060006004819055506000601381905550600060108190555060006005819055507f938e6fcc245d7476cacd79a5032e14b706e6a7ead38fab7a0d73c4feaded40eb600a54600b54600c5460405180848152602001838152602001828152602001935050505060405180910390a1565b600a5442101515611c9457600960009054906101000a900460ff16158015611a7f5750600960019054906101000a900460ff16155b15611be057600960029054906101000a900460ff1615611afb576001600960016101000a81548160ff021916908315150217905550600e54600a819055507f24f7a980d4f032f59e7197d51a3cd619f138504a9b0da6fee19a08985863775e600a546040518082815260200191505060405180910390a1611bdb565b600a6005541415611b68576001600960016101000a81548160ff021916908315150217905550600b54600a819055507f24f7a980d4f032f59e7197d51a3cd619f138504a9b0da6fee19a08985863775e600a546040518082815260200191505060405180910390a1611bda565b600d54600a819055506001600960026101000a81548160ff0219169083151502179055507fd157e8167dfe7e28a6a152fd1fa166e7e3404cf58c49c769442efce28d387e00600a54600b54600c5460405180848152602001838152602001828152602001935050505060405180910390a15b5b611c93565b600960019054906101000a900460ff1615611c92576001600960006101000a81548160ff0219169083151502179055506000600960016101000a81548160ff021916908315150217905550600960029054906101000a900460ff1615611c4e57600f54600a81905550611c58565b600c54600a819055505b7f4ebcdc2b14eacac39cf3ffaa28fc33f98e82cb4ce5d3002187b611b4d7a8b398600a546040518082815260200191505060405180910390a15b5b5b565b60006127106105fa6011546004540302811515611caf57fe5b0460125401601381905550670de0b6b3a7640000600154811515611ccf57fe5b0490506013543073ffffffffffffffffffffffffffffffffffffffff16310360108190555080601054811515611d0157fe5b04601081905550505600a165627a7a7230582092ee94d868630f27bbe6ca4ea079d340400e75f39d68bf1b38b89f8e9960d2b20029"
}