{
  "address": "0x3c139c5ef130d4db3793b1ce7017e6b326d66f2b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TripusCandyToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-10\n*/\n\npragma solidity ^0.4.24;\nlibrary SafeMath {\n\n        function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract AltcoinToken {\n    function balanceOf(address _owner) constant public returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract TripusCandyToken is ERC20 {\n    \n    using SafeMath for uint256;\n    address owner = msg.sender;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;    \n\n    string public constant name = \"Tripus.io Candy Token\";\n    string public constant symbol = \"tripus.io\";\n    uint public constant decimals = 0;\n    \n    uint256 public totalSupply = 6000000000;\n    uint256 public totalDistributed = 0;        \n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    event Distr(address indexed to, uint256 amount);\n    event DistrFinished();\n\n    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n\n   event Burn(address indexed burner, uint256 value);\n\n    bool public distributionFinished = false;\n    \n    modifier canDistr() {\n        require(!distributionFinished);\n        _;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function TripusCandyToken () public {\n        owner = msg.sender;\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    \n    function finishDistribution() onlyOwner canDistr public returns (bool) {\n        distributionFinished = true;\n        emit DistrFinished();\n        return true;\n    }\n    \n    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n        totalDistributed = totalDistributed.add(_amount);        \n        balances[_to] = balances[_to].add(_amount);\n        emit Distr(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    function doAirdrop(address _participant, uint _amount) internal {\n        require( _amount > 0 );      \n        require( totalDistributed < totalSupply );\n        balances[_participant] = balances[_participant].add(_amount);\n        totalDistributed = totalDistributed.add(_amount);\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n        emit Airdrop(_participant, _amount, balances[_participant]);\n        emit Transfer(address(0), _participant, _amount);\n    }\n\n    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        \n        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\n    }\n\n       function () external payable {\n        getTokens();\n     }\n    \n    function getTokens() payable canDistr  public {\n        uint256 tokens = 0;\n        require( msg.value > 0 );\n        \n        address investor = msg.sender;\n        if (tokens > 0) {\n            distr(investor, tokens);\n        }\n\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n        return balances[_owner];\n    }\n\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n    \n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n        AltcoinToken t = AltcoinToken(tokenAddress);\n        uint bal = t.balanceOf(who);\n        return bal;\n    }\n    \n    function withdrawAltcoinTokens(address _tokenContract) onlyOwner public returns (bool) {\n        AltcoinToken token = AltcoinToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n}",
  "bytecode": "608060405260018054600160a060020a03191633179055640165a0bc0060045560006005556006805460ff1916905534801561003a57600080fd5b5060018054600160a060020a03191633179055610d2f8061005c6000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100fa578063095ea7b31461018457806318160ddd146101bc5780632195845f146101e357806323b872dd14610204578063313ce5671461022e57806367220fd71461024357806370a082311461029a57806395d89b41146102bb5780639b1cbccc146102d0578063a9059cbb146102e5578063aa6ca808146100f0578063c108d54214610309578063c489744b1461031e578063dd62ed3e14610345578063efca2eed1461036c578063f2fde38b14610381575b6100f86103a2565b005b34801561010657600080fd5b5061010f6103fb565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610149578181015183820152602001610131565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019057600080fd5b506101a8600160a060020a0360043516602435610432565b604080519115158252519081900360200190f35b3480156101c857600080fd5b506101d16104da565b60408051918252519081900360200190f35b3480156101ef57600080fd5b506101a8600160a060020a03600435166104e0565b34801561021057600080fd5b506101a8600160a060020a0360043581169060243516604435610634565b34801561023a57600080fd5b506101d16107a7565b34801561024f57600080fd5b50604080516020600480358082013583810280860185019096528085526100f89536959394602494938501929182918501908490808284375094975050933594506107ac9350505050565b3480156102a657600080fd5b506101d1600160a060020a0360043516610801565b3480156102c757600080fd5b5061010f61081c565b3480156102dc57600080fd5b506101a8610853565b3480156102f157600080fd5b506101a8600160a060020a03600435166024356108b9565b34801561031557600080fd5b506101a8610998565b34801561032a57600080fd5b506101d1600160a060020a03600435811690602435166109a1565b34801561035157600080fd5b506101d1600160a060020a0360043581169060243516610a52565b34801561037857600080fd5b506101d1610a7d565b34801561038d57600080fd5b506100f8600160a060020a0360043516610a83565b600654600090819060ff16156103b757600080fd5b600091503482106103c757600080fd5b503360008211156103de576103dc8183610ad5565b505b600454600554106103f7576006805460ff191660011790555b5050565b60408051808201909152601581527f5472697075732e696f2043616e647920546f6b656e0000000000000000000000602082015281565b600081158015906104655750336000908152600360209081526040808320600160a060020a038716845290915290205415155b15610472575060006104d4565b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60045481565b60015460009081908190600160a060020a031633146104fe57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561056257600080fd5b505af1158015610576573d6000803e3d6000fd5b505050506040513d602081101561058c57600080fd5b5051600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810184905290519293509084169163a9059cbb916044808201926020929091908290030181600087803b15801561060057600080fd5b505af1158015610614573d6000803e3d6000fd5b505050506040513d602081101561062a57600080fd5b5051949350505050565b60006060606436101561064357fe5b600160a060020a038416151561065857600080fd5b600160a060020a03851660009081526002602052604090205483111561067d57600080fd5b600160a060020a03851660009081526003602090815260408083203384529091529020548311156106ad57600080fd5b600160a060020a0385166000908152600260205260409020546106d6908463ffffffff610bb116565b600160a060020a0386166000908152600260209081526040808320939093556003815282822033835290522054610713908463ffffffff610bb116565b600160a060020a038087166000908152600360209081526040808320338452825280832094909455918716815260029091522054610757908463ffffffff610bc316565b600160a060020a038086166000818152600260209081526040918290209490945580518781529051919392891692600080516020610ce483398151915292918290030190a3506001949350505050565b600081565b600154600090600160a060020a031633146107c657600080fd5b5060005b82518110156107fc576107f483828151811015156107e457fe5b9060200190602002015183610bd0565b6001016107ca565b505050565b600160a060020a031660009081526002602052604090205490565b60408051808201909152600981527f7472697075732e696f0000000000000000000000000000000000000000000000602082015281565b600154600090600160a060020a0316331461086d57600080fd5b60065460ff161561087d57600080fd5b6006805460ff191660011790556040517f7f95d919e78bdebe8a285e6e33357c2fcb65ccf66e72d7573f9f8f6caad0c4cc90600090a150600190565b6000604060443610156108c857fe5b600160a060020a03841615156108dd57600080fd5b336000908152600260205260409020548311156108f957600080fd5b33600090815260026020526040902054610919908463ffffffff610bb116565b3360009081526002602052604080822092909255600160a060020a0386168152205461094b908463ffffffff610bc316565b600160a060020a038516600081815260026020908152604091829020939093558051868152905191923392600080516020610ce48339815191529281900390910190a35060019392505050565b60065460ff1681565b600080600084915081600160a060020a03166370a08231856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610a1d57600080fd5b505af1158015610a31573d6000803e3d6000fd5b505050506040513d6020811015610a4757600080fd5b505195945050505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60055481565b600154600160a060020a03163314610a9a57600080fd5b600160a060020a03811615610ad2576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b60065460009060ff1615610ae857600080fd5b600554610afb908363ffffffff610bc316565b600555600160a060020a038316600090815260026020526040902054610b27908363ffffffff610bc316565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f8940c4b8e215f8822c5c8f0056c12652c746cbc57eedbd2a440b175971d47a7792918290030190a2604080518381529051600160a060020a03851691600091600080516020610ce48339815191529181900360200190a350600192915050565b600082821115610bbd57fe5b50900390565b818101828110156104d457fe5b60008111610bdd57600080fd5b60045460055410610bed57600080fd5b600160a060020a038216600090815260026020526040902054610c16908263ffffffff610bc316565b600160a060020a038316600090815260026020526040902055600554610c42908263ffffffff610bc316565b600581905560045411610c5d576006805460ff191660011790555b600160a060020a0382166000818152600260209081526040918290205482518581529182015281517fada993ad066837289fe186cd37227aa338d27519a8a1547472ecb9831486d272929181900390910190a2604080518281529051600160a060020a03841691600091600080516020610ce48339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582072d3abf3098feb4eb04b4d16ca7893ede0fbe2eef61fe7fa861ea456804ded480029"
}