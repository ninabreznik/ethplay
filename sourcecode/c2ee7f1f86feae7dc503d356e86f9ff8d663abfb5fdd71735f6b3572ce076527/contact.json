{
  "address": "0x236dbbfcd3d32ec57c3d2a9f75dfab26721d542c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PO8InDependenceDaySale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-08\n*/\n\npragma solidity^0.4.21;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = address(0x072F140DcCCE18F9966Aeb6D71ffcD0b42748683);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public;\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract PO8BaseToken is ERC20 {\n    using SafeMath for uint256;\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 totalSupply_;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply_ = _totalSupply;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0));\n        require(balances[_from] >= _value);\n        require(balances[_to].add(_value) > balances[_to]);\n\n\n        uint256 previousBalances = balances[_from].add(balances[_to]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n\n        assert(balances[_from].add(balances[_to]) == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract PO8Token is PO8BaseToken(\"PO8 Token\", \"PO8\", 18, 10000000000000000000000000000), Ownable {\n\n    uint256 internal privateToken;\n    uint256 internal preSaleToken;\n    uint256 internal crowdSaleToken;\n    uint256 internal bountyToken;\n    uint256 internal foundationToken;\n    address public founderAddress;\n    bool public unlockAllTokens;\n\n    mapping (address => bool) public approvedAccount;\n\n    event UnFrozenFunds(address target, bool unfrozen);\n    event UnLockAllTokens(bool unlock);\n\n    constructor() public {\n        founderAddress = address(0x072F140DcCCE18F9966Aeb6D71ffcD0b42748683);\n        balances[founderAddress] = totalSupply_;\n        emit Transfer(address(0), founderAddress, totalSupply_);\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != address(0));                               \n        require (balances[_from] >= _value);               \n        require (balances[_to].add(_value) >= balances[_to]); \n        require(approvedAccount[_from] || unlockAllTokens);\n\n        balances[_from] = balances[_from].sub(_value);                  \n        balances[_to] = balances[_to].add(_value);                  \n        emit Transfer(_from, _to, _value);\n    }\n\n    function unlockAllTokens(bool _unlock) public onlyOwner {\n        unlockAllTokens = _unlock;\n        emit UnLockAllTokens(_unlock);\n    }\n\n    function approvedAccount(address target, bool approval) public onlyOwner {\n        approvedAccount[target] = approval;\n        emit UnFrozenFunds(target, approval);\n    }\n}\n\ncontract PO8InDependenceDaySale is Ownable{\n    using SafeMath for uint256;\n\n    PO8Token public token;\n    address public wallet;\n    uint256 public currentRate;\n\n    event ChangeRate(address indexed who, uint256 newrate);\n    event FinishPreSale();\n\n    constructor() public {\n        currentRate = 48000;\n        wallet = address(0x072F140DcCCE18F9966Aeb6D71ffcD0b42748683); //address of founder\n        token = PO8Token(0x8744a672D5a2df51Da92B4BAb608CE7ff4Ddd804);// address of PO8 Token\n    }\n\n    function changeRate(uint256 newrate) public onlyOwner{\n        require(newrate > 0);\n        currentRate = newrate;\n\n        emit ChangeRate(msg.sender, newrate);\n    }\n\n    function remainTokens() view public returns(uint256) {\n        return token.balanceOf(this);\n    }\n\n    function finish() public onlyOwner {\n        uint256 reTokens = remainTokens();\n        token.transfer(owner, reTokens);\n        \n        emit FinishPreSale();\n    }\n\n    function () public payable {\n        assert(msg.value >= 0.1 ether);\n        \n        uint256 tokens = currentRate.mul(msg.value);\n        token.transfer(msg.sender, tokens);        \n        wallet.transfer(msg.value);       \n    }  \n}",
  "bytecode": "608060405234801561001057600080fd5b5073072f140dccce18f9966aeb6d71ffcd0b427486836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061bb8060038190555073072f140dccce18f9966aeb6d71ffcd0b42748683600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550738744a672d5a2df51da92b4bab608ce7ff4ddd804600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061096b806101276000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063521eb2731461020457806374e7493b1461025b5780638da5cb5b14610288578063ce0befcf146102df578063d56b28891461030a578063f2fde38b14610321578063f9f8bdb714610364578063fc0c546a1461038f575b600067016345785d8a000034101515156100a457fe5b6100b9346003546103e690919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561018057600080fd5b505af1158015610194573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610200573d6000803e3d6000fd5b5050005b34801561021057600080fd5b5061021961041e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561026757600080fd5b5061028660048036038101908080359060200190929190505050610444565b005b34801561029457600080fd5b5061029d610506565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102eb57600080fd5b506102f461052b565b6040518082815260200191505060405180910390f35b34801561031657600080fd5b5061031f61062a565b005b34801561032d57600080fd5b50610362600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107be565b005b34801561037057600080fd5b50610379610913565b6040518082815260200191505060405180910390f35b34801561039b57600080fd5b506103a4610919565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000808314156103f95760009050610418565b818302905081838281151561040a57fe5b0414151561041457fe5b8090505b92915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561049f57600080fd5b6000811115156104ae57600080fd5b806003819055503373ffffffffffffffffffffffffffffffffffffffff167fae6f5501f9804864e67131319de4074394eb6002e205e3a057e44899930b401c826040518082815260200191505060405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156105ea57600080fd5b505af11580156105fe573d6000803e3d6000fd5b505050506040513d602081101561061457600080fd5b8101908080519060200190929190505050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561068757600080fd5b61068f61052b565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561077757600080fd5b505af115801561078b573d6000803e3d6000fd5b505050507f767d96e55da93c8ed7dcf55b2db46221de6931b9a204f659680cbbdaf80d30bd60405160405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561081957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561085557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a723058204ee3f44cd49792296acc6364ed3648310d8aee6e10c3ba5de8ec9e65cc00c5a00029"
}