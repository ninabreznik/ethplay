{
  "address": "0xcf4206351514dcd09b7da6ae14786674ab59fb8f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Vboom",
  "compilerVersion": "v0.4.25-nightly.2018.6.22+commit.9b67bdb3",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-12\n*/\n\npragma solidity ^0.4.8;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\ncontract Vboom is SafeMath{\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    address public owner;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => uint256) public freezeOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n    \n    /* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n    \n    /* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\n   /* Initializes contract with initial supply tokens to the creator of the contract */\n    function Vboom() {\n        name = \"Vboom\";                                   // Set the name for display purposes\n        symbol = \"Vboom\";                               // Set the symbol for display purposes\n        owner = msg.sender;\n        decimals = 18;\n        totalSupply = 25000000000 * 10**uint(decimals);\n        balanceOf[msg.sender] = totalSupply;              // Give the creator all initial tokens\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n        if (_value <= 0) throw; \n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n        if (_value <= 0) throw; \n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n       \n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n        if (_value <= 0) throw; \n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n        if (_value <= 0) throw; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n    \n    function freeze(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n        if (_value <= 0) throw; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n        Freeze(msg.sender, _value);\n        return true;\n    }\n    \n    function unfreeze(uint256 _value) returns (bool success) {\n        if (freezeOf[msg.sender] < _value) throw;            // Check if the sender has enough\n        if (_value <= 0) throw; \n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n        Unfreeze(msg.sender, _value);\n        return true;\n    }\n    \n    // transfer balance to owner\n    function withdrawEther(uint256 amount) {\n        if(msg.sender != owner)throw;\n        owner.transfer(amount);\n    }\n    \n    // can accept ether\n    function() payable {\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040805180820190915260058082527f56626f6f6d0000000000000000000000000000000000000000000000000000006020909201918252610055916000916100e9565b506040805180820190915260058082527f56626f6f6d000000000000000000000000000000000000000000000000000000602090920191825261009a916001916100e9565b5060048054600160a060020a031916339081179091556002805460ff1916601217908190556405d21dba0060ff91909116600a0a02600381905560009182526005602052604090912055610184565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012a57805160ff1916838001178555610157565b82800160010185558215610157579182015b8281111561015757825182559160200191906001019061013c565b50610163929150610167565b5090565b61018191905b80821115610163576000815560010161016d565b90565b610a4c806101936000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100dc578063095ea7b31461016657806318160ddd1461019e57806323b872dd146101c5578063313ce567146101ef5780633bed33ce1461021a57806342966c68146102325780636623fc461461024a57806370a08231146102625780638da5cb5b1461028357806395d89b41146102b4578063a9059cbb146102c9578063cd4217c1146102ed578063d7a78db81461030e578063dd62ed3e14610326575b005b3480156100e857600080fd5b506100f161034d565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012b578181015183820152602001610113565b50505050905090810190601f1680156101585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017257600080fd5b5061018a600160a060020a03600435166024356103db565b604080519115158252519081900360200190f35b3480156101aa57600080fd5b506101b3610417565b60408051918252519081900360200190f35b3480156101d157600080fd5b5061018a600160a060020a036004358116906024351660443561041d565b3480156101fb57600080fd5b506102046105b8565b6040805160ff9092168252519081900360200190f35b34801561022657600080fd5b506100da6004356105c1565b34801561023e57600080fd5b5061018a600435610616565b34801561025657600080fd5b5061018a6004356106b7565b34801561026e57600080fd5b506101b3600160a060020a0360043516610771565b34801561028f57600080fd5b50610298610783565b60408051600160a060020a039092168252519081900360200190f35b3480156102c057600080fd5b506100f1610792565b3480156102d557600080fd5b506100da600160a060020a03600435166024356107ec565b3480156102f957600080fd5b506101b3600160a060020a03600435166108f0565b34801561031a57600080fd5b5061018a600435610902565b34801561033257600080fd5b506101b3600160a060020a03600435811690602435166109bc565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103d35780601f106103a8576101008083540402835291602001916103d3565b820191906000526020600020905b8154815290600101906020018083116103b657829003601f168201915b505050505081565b60008082116103e957600080fd5b50336000908152600760209081526040808320600160a060020a039590951683529390529190912055600190565b60035481565b6000600160a060020a038316151561043457600080fd5b6000821161044157600080fd5b600160a060020a03841660009081526005602052604090205482111561046657600080fd5b600160a060020a038316600090815260056020526040902054828101101561048d57600080fd5b600160a060020a03841660009081526007602090815260408083203384529091529020548211156104bd57600080fd5b600160a060020a0384166000908152600560205260409020546104e090836109d9565b600160a060020a03808616600090815260056020526040808220939093559085168152205461050f90836109ed565b600160a060020a03808516600090815260056020908152604080832094909455918716815260078252828120338252909152205461054d90836109d9565b600160a060020a03808616600081815260076020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60025460ff1681565b600454600160a060020a031633146105d857600080fd5b600454604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610612573d6000803e3d6000fd5b5050565b3360009081526005602052604081205482111561063257600080fd5b6000821161063f57600080fd5b3360009081526005602052604090205461065990836109d9565b3360009081526005602052604090205560035461067690836109d9565b60035560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b336000908152600660205260408120548211156106d357600080fd5b600082116106e057600080fd5b336000908152600660205260409020546106fa90836109d9565b3360009081526006602090815260408083209390935560059052205461072090836109ed565b33600081815260056020908152604091829020939093558051858152905191927f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f92918290030190a2506001919050565b60056020526000908152604090205481565b600454600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103d35780601f106103a8576101008083540402835291602001916103d3565b600160a060020a038216151561080157600080fd5b6000811161080e57600080fd5b3360009081526005602052604090205481111561082a57600080fd5b600160a060020a038216600090815260056020526040902054818101101561085157600080fd5b3360009081526005602052604090205461086b90826109d9565b3360009081526005602052604080822092909255600160a060020a0384168152205461089790826109ed565b600160a060020a0383166000818152600560209081526040918290209390935580518481529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60066020526000908152604090205481565b3360009081526005602052604081205482111561091e57600080fd5b6000821161092b57600080fd5b3360009081526005602052604090205461094590836109d9565b3360009081526005602090815260408083209390935560069052205461096b90836109ed565b33600081815260066020908152604091829020939093558051858152905191927ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e092918290030190a2506001919050565b600760209081526000928352604080842090915290825290205481565b60006109e783831115610a11565b50900390565b6000828201610a0a848210801590610a055750838210155b610a11565b9392505050565b801515610a1d57600080fd5b505600a165627a7a723058208f06c379fe1e03c6b67aad626d16e2c1f57523910e9bf0941e41376157c457400029"
}