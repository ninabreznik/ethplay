{
  "address": "0x039f5050de4908f9b5ddf40a4f3aa3f329086387",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthernetCash",
  "compilerVersion": "v0.4.24-nightly.2018.4.27+commit.1604a996",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-28\n*/\n\npragma solidity ^0.4.16;\n/*-------------------------------------------------------------------------*/\n /*\n  * Website\t: https://ethernet.cash\n  * Email\t: contact(a)ethernet.cash\n */\n/*-------------------------------------------------------------------------*/\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n/*-------------------------------------------------------------------------*/\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner == 0x0) throw;\n        owner = newOwner;\n    }\n}\n/*-------------------------------------------------------------------------*/\n/**\n * Overflow aware uint math functions.\n */\ncontract SafeMath {\n  //internals\n\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) throw;\n  }\n}\n/*-------------------------------------------------------------------------*/\ncontract EthernetCash is owned, SafeMath {\n\t\n\tstring \tpublic EthernetCashWebsite\t= \"https://ethernet.cash\";\n\taddress public EthernetCashAddress \t= this;\n\taddress public creator \t\t\t\t= msg.sender;\n    string \tpublic name \t\t\t\t= \"Ethernet Cash\";\n    string \tpublic symbol \t\t\t\t= \"ENC\";\n    uint8 \tpublic decimals \t\t\t= 18;\t\t\t\t\t\t\t\t\t\t\t    \n    uint256 public totalSupply \t\t\t= 19999999986000000000000000000;\n    uint256 public buyPrice \t\t\t= 1800000;\n\tuint256 public sellPrice \t\t\t= 1800000;\n   \t\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\tmapping (address => bool) public frozenAccount;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\t\t\t\t\n    event FundTransfer(address backer, uint amount, bool isContribution);\n     // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\tevent FrozenFunds(address target, bool frozen);\n    \n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function EthernetCash() public {\n        balanceOf[msg.sender] = totalSupply;    \t\t\t\t\t\t\t\t\t\t\t\n\t\tcreator = msg.sender;\n    }\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n    \n    /// @notice Buy tokens from contract by sending ether\n    function () payable internal {\n        uint amount = msg.value * buyPrice ; \n\t\tuint amountRaised;\n\t\tuint bonus = 0;\n\t\t\n\t\tbonus = getBonus(amount);\n\t\tamount = amount +  bonus;\n\t\t\n\t\t//amount = now ;\n\t\t\n        require(balanceOf[creator] >= amount);               \t\t\t\t\n        require(msg.value > 0);\n\t\tamountRaised = safeAdd(amountRaised, msg.value);                    \n\t\tbalanceOf[msg.sender] = safeAdd(balanceOf[msg.sender], amount);     \n        balanceOf[creator] = safeSub(balanceOf[creator], amount);           \n        Transfer(creator, msg.sender, amount);               \t\t\t\t\n        creator.transfer(amountRaised);\n    }\n\t\n\t/// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n\t\n\t/**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\t\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\t\n\t\n\t/**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\t\n\t/**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n\t\n\tfunction getBonus(uint _amount) constant private returns (uint256) {\n        \n\t\tif(now >= 1524873600 && now <= 1527551999) { \n            return _amount * 50 / 100;\n        }\n\t\t\n\t\tif(now >= 1527552000 && now <= 1530316799) { \n            return _amount * 40 / 100;\n        }\n\t\t\n\t\tif(now >= 1530316800 && now <= 1532995199) { \n            return _amount * 30 / 100;\n        }\n\t\t\n\t\tif(now >= 1532995200 && now <= 1535759999) { \n            return _amount * 20 / 100;\n        }\n\t\t\n\t\tif(now >= 1535760000 && now <= 1538438399) { \n            return _amount * 10 / 100;\n        }\n\t\t\n        return 0;\n    }\n\t\n\t/// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n    function sell(uint256 amount) public {\n        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n\t\n }\n/*-------------------------------------------------------------------------*/",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EthernetCashAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EthernetCashWebsite\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"}]",
  "bytecode": "60c0604052601560808190527f68747470733a2f2f65746865726e65742e63617368000000000000000000000060a090815262000040916001919062000161565b5060028054600160a060020a03199081163017909155600380549091163317905560408051808201909152600d8082527f45746865726e65742043617368000000000000000000000000000000000000006020909201918252620000a79160049162000161565b506040805180820190915260038082527f454e4300000000000000000000000000000000000000000000000000000000006020909201918252620000ee9160059162000161565b506006805460ff191660121790556b409f9cbbba0006eef8880000600755621b774060088190556009553480156200012557600080fd5b506000805433600160a060020a031991821681178355600754818452600a60205260409093209290925560038054909116909117905562000206565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a457805160ff1916838001178555620001d4565b82800160010185558215620001d4579182015b82811115620001d4578251825591602001919060010190620001b7565b50620001e2929150620001e6565b5090565b6200020391905b80821115620001e25760008155600101620001ed565b90565b610e5f80620002166000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461026157806305fefda71461029257806306fdde03146102af578063095ea7b31461033957806318160ddd146103715780631d41161214610398578063313ce567146103ad57806342966c68146103d85780634490efe3146103f05780634b7503341461040557806370a082311461041a57806379c650681461043b57806379cc67901461045f5780638620410b146104835780638da5cb5b1461049857806395d89b41146104ad578063a9059cbb146104c2578063b414d4b6146104e6578063cae9ca5114610507578063dd62ed3e14610570578063e4849b3214610597578063e724529c146105af578063f2fde38b146105d5575b6008543402600080610143836105f6565b600354600160a060020a03166000908152600a60205260409020549381019390915083111561017157600080fd5b6000341161017e57600080fd5b61018882346106cd565b336000908152600a60205260409020549092506101a590846106cd565b336000908152600a602052604080822092909255600354600160a060020a0316815220546101d390846106f1565b60038054600160a060020a039081166000908152600a60209081526040918290209490945591548251878152925133949190921692600080516020610e14833981519152929081900390910190a3600354604051600160a060020a039091169083156108fc029084906000818181858888f1935050505015801561025b573d6000803e3d6000fd5b50505050005b34801561026d57600080fd5b50610276610705565b60408051600160a060020a039092168252519081900360200190f35b34801561029e57600080fd5b506102ad600435602435610714565b005b3480156102bb57600080fd5b506102c4610736565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102fe5781810151838201526020016102e6565b50505050905090810190601f16801561032b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561034557600080fd5b5061035d600160a060020a03600435166024356107c4565b604080519115158252519081900360200190f35b34801561037d57600080fd5b506103866107f1565b60408051918252519081900360200190f35b3480156103a457600080fd5b506102766107f7565b3480156103b957600080fd5b506103c2610806565b6040805160ff9092168252519081900360200190f35b3480156103e457600080fd5b5061035d60043561080f565b3480156103fc57600080fd5b506102c4610887565b34801561041157600080fd5b506103866108e1565b34801561042657600080fd5b50610386600160a060020a03600435166108e7565b34801561044757600080fd5b506102ad600160a060020a03600435166024356108f9565b34801561046b57600080fd5b5061035d600160a060020a036004351660243561098b565b34801561048f57600080fd5b50610386610a5c565b3480156104a457600080fd5b50610276610a62565b3480156104b957600080fd5b506102c4610a71565b3480156104ce57600080fd5b506102ad600160a060020a0360043516602435610acc565b3480156104f257600080fd5b5061035d600160a060020a0360043516610adb565b34801561051357600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261035d948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610af09650505050505050565b34801561057c57600080fd5b50610386600160a060020a0360043581169060243516610c09565b3480156105a357600080fd5b506102ad600435610c26565b3480156105bb57600080fd5b506102ad600160a060020a03600435166024351515610c73565b3480156105e157600080fd5b506102ad600160a060020a0360043516610cee565b6000635ae3b98042101580156106105750635b0c97ff4211155b15610624576064603283025b0490506106c8565b635b0c9800421015801561063c5750635b36c7ff4211155b1561064c5760646028830261061c565b635b36c80042101580156106645750635b5fa67f4211155b15610674576064601e830261061c565b635b5fa680421015801561068c5750635b89d67f4211155b1561069c5760646014830261061c565b635b89d68042101580156106b45750635bb2b4ff4211155b156106c4576064600a830261061c565b5060005b919050565b60008282016106ea8482108015906106e55750838210155b610d49565b9392505050565b60006106ff83831115610d49565b50900390565b600354600160a060020a031681565b600054600160a060020a0316331461072b57600080fd5b600991909155600855565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107bc5780601f10610791576101008083540402835291602001916107bc565b820191906000526020600020905b81548152906001019060200180831161079f57829003601f168201915b505050505081565b336000908152600b60209081526040808320600160a060020a039590951683529390529190912055600190565b60075481565b600254600160a060020a031681565b60065460ff1681565b336000908152600a602052604081205482111561082b57600080fd5b336000818152600a602090815260409182902080548690039055600780548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107bc5780601f10610791576101008083540402835291602001916107bc565b60095481565b600a6020526000908152604090205481565b600054600160a060020a0316331461091057600080fd5b600160a060020a0382166000908152600a60209081526040808320805485019055600780548501905580518481529051309392600080516020610e14833981519152928290030190a3604080518281529051600160a060020a038416913091600080516020610e148339815191529181900360200190a35050565b600160a060020a0382166000908152600a60205260408120548211156109b057600080fd5b600160a060020a0383166000908152600b602090815260408083203384529091529020548211156109e057600080fd5b600160a060020a0383166000818152600a6020908152604080832080548790039055600b825280832033845282529182902080548690039055600780548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60085481565b600054600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107bc5780601f10610791576101008083540402835291602001916107bc565b610ad7338383610d58565b5050565b600c6020526000908152604090205460ff1681565b600083610afd81856107c4565b15610c01576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b83811015610b95578181015183820152602001610b7d565b50505050905090810190601f168015610bc25780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610be457600080fd5b505af1158015610bf8573d6000803e3d6000fd5b50505050600191505b509392505050565b600b60209081526000928352604080842090915290825290205481565b600954810230311015610c3857600080fd5b610c43333083610d58565b6009546040513391830280156108fc02916000818181858888f19350505050158015610ad7573d6000803e3d6000fd5b600054600160a060020a03163314610c8a57600080fd5b600160a060020a0382166000818152600c6020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a03163314610d0557600080fd5b600160a060020a0381161515610d1a57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b801515610d5557600080fd5b50565b600160a060020a0382161515610d6d57600080fd5b600160a060020a0383166000908152600a6020526040902054811115610d9257600080fd5b600160a060020a0382166000908152600a60205260409020548181011015610db957600080fd5b600160a060020a038084166000818152600a602090815260408083208054879003905593861680835291849020805486019055835185815293519193600080516020610e14833981519152929081900390910190a35050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058209bcd21ac923db86a34cb775c43e6b9749c8b057908f56e8d16787a19519d42d60029"
}