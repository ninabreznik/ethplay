{
  "address": "0x10fbf61e4cce57d72eed8b5d9728134ce374bd82",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NameFactory",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\n\n\n\n\n/**\n * @title TAOCurrency\n */\ncontract TAOCurrency is TheAO {\n\tusing SafeMath for uint256;\n\n\t// Public variables of the contract\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\n\t// To differentiate denomination of TAO Currency\n\tuint256 public powerOfTen;\n\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\t// address is the address of nameId, not the eth public address\n\tmapping (address => uint256) public balanceOf;\n\n\t// This generates a public event on the blockchain that will notify clients\n\t// address is the address of TAO/Name Id, not eth public address\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This notifies clients about the amount burnt\n\t// address is the address of TAO/Name Id, not eth public address\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply TAOCurrency to the creator of the contract\n\t */\n\tconstructor (string memory _name, string memory _symbol, address _nameTAOPositionAddress) public {\n\t\tname = _name;\t\t// Set the name for display purposes\n\t\tsymbol = _symbol;\t// Set the symbol for display purposes\n\n\t\tpowerOfTen = 0;\n\t\tdecimals = 0;\n\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_id` is a Name or a TAO\n\t */\n\tmodifier isNameOrTAO(address _id) {\n\t\trequire (AOLibrary.isName(_id) || AOLibrary.isTAO(_id));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev transfer TAOCurrency from other address\n\t *\n\t * Send `_value` TAOCurrency to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public inWhitelist isNameOrTAO(_from) isNameOrTAO(_to) returns (bool) {\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\n\t * @param target Address to receive TAOCurrency\n\t * @param mintedAmount The amount of TAOCurrency it will receive\n\t * @return true on success\n\t */\n\tfunction mint(address target, uint256 mintedAmount) public inWhitelist isNameOrTAO(target) returns (bool) {\n\t\t_mint(target, mintedAmount);\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * @dev Whitelisted address remove `_value` TAOCurrency from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\n\t\ttotalSupply = totalSupply.sub(_value);              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Send `_value` TAOCurrency from `_from` to `_to`\n\t * @param _from The address of sender\n\t * @param _to The address of the recipient\n\t * @param _value The amount to send\n\t */\n\tfunction _transfer(address _from, address _to, uint256 _value) internal {\n\t\trequire (_to != address(0));\t\t\t\t\t\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (balanceOf[_from] >= _value);\t\t\t\t\t// Check if the sender has enough\n\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n\t\tuint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient\n\t\temit Transfer(_from, _to, _value);\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n\t}\n\n\t/**\n\t * @dev Create `mintedAmount` TAOCurrency and send it to `target`\n\t * @param target Address to receive TAOCurrency\n\t * @param mintedAmount The amount of TAOCurrency it will receive\n\t */\n\tfunction _mint(address target, uint256 mintedAmount) internal {\n\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\n\t\ttotalSupply = totalSupply.add(mintedAmount);\n\t\temit Transfer(address(0), address(this), mintedAmount);\n\t\temit Transfer(address(this), target, mintedAmount);\n\t}\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\n\ninterface IAOSetting {\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory);\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8);\n\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8);\n}\n\n\ninterface INameAccountRecovery {\n\tfunction isCompromised(address _id) external view returns (bool);\n}\n\n\ninterface INamePublicKey {\n\tfunction initialize(address _id, address _defaultKey, address _writerKey) external returns (bool);\n\n\tfunction isKeyExist(address _id, address _key) external view returns (bool);\n\n\tfunction getDefaultKey(address _id) external view returns (address);\n\n\tfunction whitelistAddKey(address _id, address _key) external returns (bool);\n}\n\n\ninterface INameTAOLookup {\n\tfunction isExist(string calldata _name) external view returns (bool);\n\n\tfunction initialize(string calldata _name, address _nameTAOId, uint256 _typeId, string calldata _parentName, address _parentId, uint256 _parentTypeId) external returns (bool);\n\n\tfunction getById(address _id) external view returns (string memory, address, uint256, string memory, address, uint256);\n\n\tfunction getIdByName(string calldata _name) external view returns (address);\n}\n\n\ninterface INameFactory {\n\tfunction nonces(address _nameId) external view returns (uint256);\n\tfunction incrementNonce(address _nameId) external returns (uint256);\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Voice\n */\ncontract Voice is TheAO {\n\tusing SafeMath for uint256;\n\n\t// Public variables of the contract\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 4;\n\n\tuint256 constant public MAX_SUPPLY_PER_NAME = 100 * (10 ** 4);\n\n\tuint256 public totalSupply;\n\n\t// Mapping from Name ID to bool value whether or not it has received Voice\n\tmapping (address => bool) public hasReceived;\n\n\t// Mapping from Name/TAO ID to its total available balance\n\tmapping (address => uint256) public balanceOf;\n\n\t// Mapping from Name ID to TAO ID and its staked amount\n\tmapping (address => mapping(address => uint256)) public taoStakedBalance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Mint(address indexed nameId, uint256 value);\n\tevent Stake(address indexed nameId, address indexed taoId, uint256 value);\n\tevent Unstake(address indexed nameId, address indexed taoId, uint256 value);\n\n\t/**\n\t * Constructor function\n\t */\n\tconstructor (string memory _name, string memory _symbol) public {\n\t\tname = _name;\t\t\t\t\t\t// Set the name for display purposes\n\t\tsymbol = _symbol;\t\t\t\t\t// Set the symbol for display purposes\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_taoId` is a TAO\n\t */\n\tmodifier isTAO(address _taoId) {\n\t\trequire (AOLibrary.isTAO(_taoId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_nameId` is a Name\n\t */\n\tmodifier isName(address _nameId) {\n\t\trequire (AOLibrary.isName(_nameId));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Create `MAX_SUPPLY_PER_NAME` Voice and send it to `_nameId`\n\t * @param _nameId Address to receive Voice\n\t * @return true on success\n\t */\n\tfunction mint(address _nameId) public inWhitelist isName(_nameId) returns (bool) {\n\t\t// Make sure _nameId has not received Voice\n\t\trequire (hasReceived[_nameId] == false);\n\n\t\thasReceived[_nameId] = true;\n\t\tbalanceOf[_nameId] = balanceOf[_nameId].add(MAX_SUPPLY_PER_NAME);\n\t\ttotalSupply = totalSupply.add(MAX_SUPPLY_PER_NAME);\n\t\temit Mint(_nameId, MAX_SUPPLY_PER_NAME);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Get staked balance of `_nameId`\n\t * @param _nameId The Name ID to be queried\n\t * @return total staked balance\n\t */\n\tfunction stakedBalance(address _nameId) public isName(_nameId) view returns (uint256) {\n\t\treturn MAX_SUPPLY_PER_NAME.sub(balanceOf[_nameId]);\n\t}\n\n\t/**\n\t * @dev Stake `_value` Voice on `_taoId` from `_nameId`\n\t * @param _nameId The Name ID that wants to stake\n\t * @param _taoId The TAO ID to stake\n\t * @param _value The amount to stake\n\t * @return true on success\n\t */\n\tfunction stake(address _nameId, address _taoId, uint256 _value) public inWhitelist isName(_nameId) isTAO(_taoId) returns (bool) {\n\t\trequire (_value > 0 && _value <= MAX_SUPPLY_PER_NAME);\n\t\trequire (balanceOf[_nameId] >= _value);\t\t\t\t\t\t\t// Check if the targeted balance is enough\n\t\tbalanceOf[_nameId] = balanceOf[_nameId].sub(_value);\t\t\t// Subtract from the targeted balance\n\t\ttaoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].add(_value);\t// Add to the targeted staked balance\n\t\tbalanceOf[_taoId] = balanceOf[_taoId].add(_value);\n\t\temit Stake(_nameId, _taoId, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Unstake `_value` Voice from `_nameId`'s `_taoId`\n\t * @param _nameId The Name ID that wants to unstake\n\t * @param _taoId The TAO ID to unstake\n\t * @param _value The amount to unstake\n\t * @return true on success\n\t */\n\tfunction unstake(address _nameId, address _taoId, uint256 _value) public inWhitelist isName(_nameId) isTAO(_taoId) returns (bool) {\n\t\trequire (_value > 0 && _value <= MAX_SUPPLY_PER_NAME);\n\t\trequire (taoStakedBalance[_nameId][_taoId] >= _value);\t// Check if the targeted staked balance is enough\n\t\trequire (balanceOf[_taoId] >= _value);\t// Check if the total targeted staked balance is enough\n\t\ttaoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].sub(_value);\t// Subtract from the targeted staked balance\n\t\tbalanceOf[_taoId] = balanceOf[_taoId].sub(_value);\n\t\tbalanceOf[_nameId] = balanceOf[_nameId].add(_value);\t\t\t// Add to the targeted balance\n\t\temit Unstake(_nameId, _taoId, _value);\n\t\treturn true;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\ncontract Pathos is TAOCurrency {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(string memory _name, string memory _symbol, address _nameTAOPositionAddress)\n\t\tTAOCurrency(_name, _symbol, _nameTAOPositionAddress) public {}\n}\n\n\n\n\n\ncontract Ethos is TAOCurrency {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(string memory _name, string memory _symbol, address _nameTAOPositionAddress)\n\t\tTAOCurrency(_name, _symbol, _nameTAOPositionAddress) public {}\n}\n\n\n/**\n * @title NameFactory\n *\n * The purpose of this contract is to allow node to create Name\n */\ncontract NameFactory is TheAO, INameFactory {\n\tusing SafeMath for uint256;\n\n\taddress public voiceAddress;\n\taddress public nameTAOVaultAddress;\n\taddress public nameTAOLookupAddress;\n\taddress public namePublicKeyAddress;\n\taddress public nameAccountRecoveryAddress;\n\taddress public settingTAOId;\n\taddress public aoSettingAddress;\n\taddress public pathosAddress;\n\taddress public ethosAddress;\n\n\tVoice internal _voice;\n\tINameTAOLookup internal _nameTAOLookup;\n\tINameTAOPosition internal _nameTAOPosition;\n\tINamePublicKey internal _namePublicKey;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\tIAOSetting internal _aoSetting;\n\tPathos internal _pathos;\n\tEthos internal _ethos;\n\n\taddress[] internal names;\n\n\t// Mapping from eth address to Name ID\n\tmapping (address => address) internal _ethAddressToNameId;\n\n\t// Mapping from Name ID to eth address\n\tmapping (address => address) internal _nameIdToEthAddress;\n\n\t// Mapping from Name ID to its nonce\n\tmapping (address => uint256) internal _nonces;\n\n\t// Event to be broadcasted to public when a Name is created\n\tevent CreateName(address indexed ethAddress, address nameId, uint256 index, string name);\n\n\t// Event to be broadcasted to public when Primordial contributor is rewarded\n\tevent RewardContributor(address indexed nameId, uint256 pathosAmount, uint256 ethosAmount);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(address _voiceAddress) public {\n\t\tsetVoiceAddress(_voiceAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Checks if calling address can update Name's nonce\n\t */\n\tmodifier canUpdateNonce {\n\t\trequire (msg.sender == nameTAOPositionAddress || msg.sender == namePublicKeyAddress || msg.sender == nameAccountRecoveryAddress);\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO set the Voice Address\n\t * @param _voiceAddress The address of Voice\n\t */\n\tfunction setVoiceAddress(address _voiceAddress) public onlyTheAO {\n\t\trequire (_voiceAddress != address(0));\n\t\tvoiceAddress = _voiceAddress;\n\t\t_voice = Voice(voiceAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOVault Address\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction setNameTAOVaultAddress(address _nameTAOVaultAddress) public onlyTheAO {\n\t\trequire (_nameTAOVaultAddress != address(0));\n\t\tnameTAOVaultAddress = _nameTAOVaultAddress;\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOLookup Address\n\t * @param _nameTAOLookupAddress The address of NameTAOLookup\n\t */\n\tfunction setNameTAOLookupAddress(address _nameTAOLookupAddress) public onlyTheAO {\n\t\trequire (_nameTAOLookupAddress != address(0));\n\t\tnameTAOLookupAddress = _nameTAOLookupAddress;\n\t\t_nameTAOLookup = INameTAOLookup(nameTAOLookupAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameTAOPosition Address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NamePublicKey Address\n\t * @param _namePublicKeyAddress The address of NamePublicKey\n\t */\n\tfunction setNamePublicKeyAddress(address _namePublicKeyAddress) public onlyTheAO {\n\t\trequire (_namePublicKeyAddress != address(0));\n\t\tnamePublicKeyAddress = _namePublicKeyAddress;\n\t\t_namePublicKey = INamePublicKey(namePublicKeyAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets setting TAO ID\n\t * @param _settingTAOId The new setting TAO ID to set\n\t */\n\tfunction setSettingTAOId(address _settingTAOId) public onlyTheAO {\n\t\trequire (AOLibrary.isTAO(_settingTAOId));\n\t\tsettingTAOId = _settingTAOId;\n\t}\n\n\t/**\n\t * @dev The AO sets AO Setting address\n\t * @param _aoSettingAddress The address of AOSetting\n\t */\n\tfunction setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {\n\t\trequire (_aoSettingAddress != address(0));\n\t\taoSettingAddress = _aoSettingAddress;\n\t\t_aoSetting = IAOSetting(_aoSettingAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets Pathos address\n\t * @param _pathosAddress The address of Pathos\n\t */\n\tfunction setPathosAddress(address _pathosAddress) public onlyTheAO {\n\t\trequire (_pathosAddress != address(0));\n\t\tpathosAddress = _pathosAddress;\n\t\t_pathos = Pathos(_pathosAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets Ethos address\n\t * @param _ethosAddress The address of Ethos\n\t */\n\tfunction setEthosAddress(address _ethosAddress) public onlyTheAO {\n\t\trequire (_ethosAddress != address(0));\n\t\tethosAddress = _ethosAddress;\n\t\t_ethos = Ethos(_ethosAddress);\n\t}\n\n\t/**\n\t * @dev NameAccountRecovery contract replaces eth address associated with a Name\n\t * @param _id The ID of the Name\n\t * @param _newAddress The new eth address\n\t * @return true on success\n\t */\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool) {\n\t\trequire (msg.sender == nameAccountRecoveryAddress);\n\t\trequire (AOLibrary.isName(_id));\n\t\trequire (_newAddress != address(0));\n\t\trequire (_ethAddressToNameId[_newAddress] == address(0));\n\t\trequire (_nameIdToEthAddress[_id] != address(0));\n\n\t\taddress _currentEthAddress = _nameIdToEthAddress[_id];\n\t\t_ethAddressToNameId[_currentEthAddress] = address(0);\n\t\t_ethAddressToNameId[_newAddress] = _id;\n\t\t_nameIdToEthAddress[_id] = _newAddress;\n\t\treturn true;\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Get the nonce given a Name ID\n\t * @param _nameId The Name ID to check\n\t * @return The nonce of the Name\n\t */\n\tfunction nonces(address _nameId) external view returns (uint256) {\n\t\treturn _nonces[_nameId];\n\t}\n\n\t/**\n\t * @dev Increment the nonce of a Name\n\t * @param _nameId The ID of the Name\n\t * @return current nonce\n\t */\n\tfunction incrementNonce(address _nameId) external canUpdateNonce returns (uint256) {\n\t\t// Check if _nameId exist\n\t\trequire (_nonces[_nameId] > 0);\n\t\t_nonces[_nameId]++;\n\t\treturn _nonces[_nameId];\n\t}\n\n\t/**\n\t * @dev Create a Name\n\t * @param _name The name of the Name\n\t * @param _datHash The datHash to this Name's profile\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _writerKey The writer public key for this Name\n\t */\n\tfunction createName(string memory _name, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _writerKey) public {\n\t\trequire (bytes(_name).length > 0);\n\t\trequire (!_nameTAOLookup.isExist(_name));\n\n\t\t// Only one Name per ETH address\n\t\trequire (_ethAddressToNameId[msg.sender] == address(0));\n\n\t\t// The address is the Name ID (which is also a TAO ID)\n\t\taddress nameId = address(AOLibrary.deployName(_name, msg.sender, _datHash, _database, _keyValue, _contentId, nameTAOVaultAddress));\n\n\t\t// Only one ETH address per Name\n\t\trequire (_nameIdToEthAddress[nameId] == address(0));\n\n\t\t// Increment the nonce\n\t\t_nonces[nameId]++;\n\n\t\t_ethAddressToNameId[msg.sender] = nameId;\n\t\t_nameIdToEthAddress[nameId] = msg.sender;\n\n\t\t// Store the name lookup information\n\t\trequire (_nameTAOLookup.initialize(_name, nameId, 1, 'human', msg.sender, 2));\n\n\t\t// Store the Advocate/Listener/Speaker information\n\t\trequire (_nameTAOPosition.initialize(nameId, nameId, nameId, nameId));\n\n\t\t// Store the public key information\n\t\trequire (_namePublicKey.initialize(nameId, msg.sender, _writerKey));\n\n\t\tnames.push(nameId);\n\n\t\t// Need to mint Voice for this Name\n\t\trequire (_voice.mint(nameId));\n\n\t\t// Reward primordial contributor Name with Pathos/Ethos\n\t\t_rewardContributor(nameId);\n\n\t\temit CreateName(msg.sender, nameId, names.length.sub(1), _name);\n\t}\n\n\t/**\n\t * @dev Get the Name ID given an ETH address\n\t * @param _ethAddress The ETH address to check\n\t * @return The Name ID\n\t */\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address) {\n\t\treturn _ethAddressToNameId[_ethAddress];\n\t}\n\n\t/**\n\t * @dev Get the ETH address given a Name ID\n\t * @param _nameId The Name ID to check\n\t * @return The ETH address\n\t */\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address) {\n\t\treturn _nameIdToEthAddress[_nameId];\n\t}\n\n\t/**\n\t * @dev Get Name information\n\t * @param _nameId The ID of the Name to be queried\n\t * @return The name of the Name\n\t * @return The originId of the Name (in this case, it's the creator node's ETH address)\n\t * @return The datHash of the Name\n\t * @return The database of the Name\n\t * @return The keyValue of the Name\n\t * @return The contentId of the Name\n\t * @return The typeId of the Name\n\t */\n\tfunction getName(address _nameId) public view returns (string memory, address, string memory, string memory, string memory, bytes32, uint8) {\n\t\tName _name = Name(address(uint160(_nameId)));\n\t\treturn (\n\t\t\t_name.name(),\n\t\t\t_name.originId(),\n\t\t\t_name.datHash(),\n\t\t\t_name.database(),\n\t\t\t_name.keyValue(),\n\t\t\t_name.contentId(),\n\t\t\t_name.typeId()\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get total Names count\n\t * @return total Names count\n\t */\n\tfunction getTotalNamesCount() public view returns (uint256) {\n\t\treturn names.length;\n\t}\n\n\t/**\n\t * @dev Get list of Name IDs\n\t * @param _from The starting index\n\t * @param _to The ending index\n\t * @return list of Name IDs\n\t */\n\tfunction getNameIds(uint256 _from, uint256 _to) public view returns (address[] memory) {\n\t\trequire (_from >= 0 && _to >= _from);\n\t\trequire (names.length > 0);\n\n\t\taddress[] memory _names = new address[](_to.sub(_from).add(1));\n\t\tif (_to > names.length.sub(1)) {\n\t\t\t_to = names.length.sub(1);\n\t\t}\n\t\tfor (uint256 i = _from; i <= _to; i++) {\n\t\t\t_names[i.sub(_from)] = names[i];\n\t\t}\n\t\treturn _names;\n\t}\n\n\t/**\n\t * @dev Check whether or not the signature is valid\n\t * @param _data The signed string data\n\t * @param _nonce The signed uint256 nonce (should be Name's current nonce + 1)\n\t * @param _validateAddress The ETH address to be validated (optional)\n\t * @param _name The name of the Name\n\t * @param _signatureV The V part of the signature\n\t * @param _signatureR The R part of the signature\n\t * @param _signatureS The S part of the signature\n\t * @return true if valid. false otherwise\n\t */\n\tfunction validateNameSignature(\n\t\tstring memory _data,\n\t\tuint256 _nonce,\n\t\taddress _validateAddress,\n\t\tstring memory _name,\n\t\tuint8 _signatureV,\n\t\tbytes32 _signatureR,\n\t\tbytes32 _signatureS\n\t) public view returns (bool) {\n\t\trequire (_nameTAOLookup.isExist(_name));\n\t\taddress _nameId = _nameTAOLookup.getIdByName(_name);\n\t\trequire (_nameId != address(0));\n\t\taddress _signatureAddress = _getValidateSignatureAddress(_data, _nonce, _signatureV, _signatureR, _signatureS);\n\t\tif (_validateAddress != address(0)) {\n\t\t\treturn (\n\t\t\t\t_nonce == _nonces[_nameId].add(1) &&\n\t\t\t\t_signatureAddress == _validateAddress &&\n\t\t\t\t_namePublicKey.isKeyExist(_nameId, _validateAddress)\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t_nonce == _nonces[_nameId].add(1) &&\n\t\t\t\t_signatureAddress == _namePublicKey.getDefaultKey(_nameId)\n\t\t\t);\n\t\t}\n\t}\n\n\t/***** INTERNAL METHODS *****/\n\t/**\n\t * @dev Return the address that signed the data and nonce when validating signature\n\t * @param _data the data that was signed\n\t * @param _nonce The signed uint256 nonce\n\t * @param _v part of the signature\n\t * @param _r part of the signature\n\t * @param _s part of the signature\n\t * @return the address that signed the message\n\t */\n\tfunction _getValidateSignatureAddress(string memory _data, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) internal view returns (address) {\n\t\tbytes32 _hash = keccak256(abi.encodePacked(address(this), _data, _nonce));\n\t\treturn ecrecover(_hash, _v, _r, _s);\n\t}\n\n\t/**\n\t * @dev Reward primordial contributor Name with pathos/ethos\n\t */\n\tfunction _rewardContributor(address _nameId) internal {\n\t\tif (settingTAOId != address(0)) {\n\t\t\t(,,,, string memory primordialContributorName) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorName');\n\t\t\t(uint256 primordialContributorPathos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorPathos');\n\t\t\t(uint256 primordialContributorEthos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEthos');\n\t\t\t(uint256 primordialContributorEarning,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEarning');\n\t\t\taddress _primordialContributorNameId = _nameTAOLookup.getIdByName(primordialContributorName);\n\t\t\tif (_primordialContributorNameId == _nameId) {\n\t\t\t\t_pathos.mint(_nameId, primordialContributorPathos);\n\t\t\t\t_ethos.mint(_nameId, primordialContributorEthos);\n\t\t\t} else if (_primordialContributorNameId != address(0)) {\n\t\t\t\t_pathos.mint(_primordialContributorNameId, primordialContributorEarning);\n\t\t\t\t_ethos.mint(_primordialContributorNameId, primordialContributorEarning);\n\t\t\t\temit RewardContributor(_nameId, primordialContributorEarning, primordialContributorEarning);\n\t\t\t}\n\t\t}\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_ethAddress\",\"type\":\"address\"}],\"name\":\"ethAddressToNameId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voiceAddress\",\"type\":\"address\"}],\"name\":\"setVoiceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethosAddress\",\"type\":\"address\"}],\"name\":\"setEthosAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"}],\"name\":\"setNameAccountRecoveryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setNameNewAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voiceAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOVaultAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOVaultAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalNamesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pathosAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameId\",\"type\":\"address\"}],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_namePublicKeyAddress\",\"type\":\"address\"}],\"name\":\"setNamePublicKeyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"string\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_validateAddress\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_signatureV\",\"type\":\"uint8\"},{\"name\":\"_signatureR\",\"type\":\"bytes32\"},{\"name\":\"_signatureS\",\"type\":\"bytes32\"}],\"name\":\"validateNameSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pathosAddress\",\"type\":\"address\"}],\"name\":\"setPathosAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameId\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethosAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameAccountRecoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_datHash\",\"type\":\"string\"},{\"name\":\"_database\",\"type\":\"string\"},{\"name\":\"_keyValue\",\"type\":\"string\"},{\"name\":\"_contentId\",\"type\":\"bytes32\"},{\"name\":\"_writerKey\",\"type\":\"address\"}],\"name\":\"createName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOVaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingTAOId\",\"type\":\"address\"}],\"name\":\"setSettingTAOId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"namePublicKeyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOLookupAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameId\",\"type\":\"address\"}],\"name\":\"nameIdToEthAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"settingTAOId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getNameIds\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameId\",\"type\":\"address\"}],\"name\":\"incrementNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOLookupAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOLookupAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_voiceAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"ethAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"CreateName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"nameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pathosAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethosAmount\",\"type\":\"uint256\"}],\"name\":\"RewardContributor\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506040516020806200383a833981018060405260208110156200003357600080fd5b505160008054600160a060020a031916331790556200005b8164010000000062000062810204565b506200016a565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015620000eb57600080fd5b505af415801562000100573d6000803e3d6000fd5b505050506040513d60208110156200011757600080fd5b505115156200012557600080fd5b600160a060020a03811615156200013b57600080fd5b60038054600160a060020a0319908116600160a060020a039384161791829055600c8054929093169116179055565b6136c0806200017a6000396000f3fe608060405234801561001057600080fd5b506004361061020a5760003560e060020a90048063793c82281161011e578063d6830af3116100b1578063e7c5018511610080578063e7c5018514610a8b578063e9233a6514610a93578063f2fde38b14610b06578063f5743c4c14610b2c578063fc86202714610b525761020a565b8063d6830af314610a2f578063d8ce52d114610a55578063df2721f014610a5d578063e205734414610a655761020a565b8063a4e5fad2116100ed578063a4e5fad2146107ce578063a9b6b38e146107d6578063aea15246146107de578063afb2dd8714610a275761020a565b8063793c8228146107545780637ecebe001461077a5780639093a790146107a05780639b19251a146107a85761020a565b80633670832e116101a157806353d6fd591161017057806353d6fd591461038d5780635cfaf2ef146103bb5780635fd4b08a146103e15780636d9aa034146105de578063743ab538146106045761020a565b80633670832e1461033d578063419e6e5c146103635780634486ab0a1461037d5780634ef033f0146103855761020a565b80631d0138ff116101dd5780631d0138ff146102c55780631dfde2bd146102cd5780632b3fd4a0146102f35780632d2f45b9146103355761020a565b8063029b7d531461020f57806306fd70881461025157806319d4cc31146102795780631add5b981461029f575b600080fd5b6102356004803603602081101561022557600080fd5b5035600160a060020a0316610b78565b60408051600160a060020a039092168252519081900360200190f35b6102776004803603602081101561026757600080fd5b5035600160a060020a0316610b96565b005b6102776004803603602081101561028f57600080fd5b5035600160a060020a0316610c80565b610277600480360360208110156102b557600080fd5b5035600160a060020a0316610d6d565b610235610e57565b610277600480360360208110156102e357600080fd5b5035600160a060020a0316610e66565b6103216004803603604081101561030957600080fd5b50600160a060020a0381358116916020013516610f53565b604080519115158252519081900360200190f35b6102356110d7565b6102776004803603602081101561035357600080fd5b5035600160a060020a03166110e6565b61036b6111c6565b60408051918252519081900360200190f35b6102356111cc565b6102356111db565b610277600480360360408110156103a357600080fd5b50600160a060020a03813516906020013515156111ea565b610277600480360360208110156103d157600080fd5b5035600160a060020a03166112d3565b610407600480360360208110156103f757600080fd5b5035600160a060020a03166113c0565b604051808060200188600160a060020a0316600160a060020a031681526020018060200180602001806020018781526020018660ff1660ff16815260200185810385528c818151815260200191508051906020019080838360005b8381101561047a578181015183820152602001610462565b50505050905090810190601f1680156104a75780820380516001836020036101000a031916815260200191505b5085810384528a5181528a516020918201918c019080838360005b838110156104da5781810151838201526020016104c2565b50505050905090810190601f1680156105075780820380516001836020036101000a031916815260200191505b5085810383528951815289516020918201918b019080838360005b8381101561053a578181015183820152602001610522565b50505050905090810190601f1680156105675780820380516001836020036101000a031916815260200191505b5085810382528851815288516020918201918a019080838360005b8381101561059a578181015183820152602001610582565b50505050905090810190601f1680156105c75780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b610277600480360360208110156105f457600080fd5b5035600160a060020a0316611873565b610321600480360360e081101561061a57600080fd5b81019060208101813564010000000081111561063557600080fd5b82018360208201111561064757600080fd5b8035906020019184600183028401116401000000008311171561066957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295843595600160a060020a03602087013516959194509250606081019150604001356401000000008111156106d157600080fd5b8201836020820111156106e357600080fd5b8035906020019184600183028401116401000000008311171561070557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505060ff8335169350505060208101359060400135611960565b6102776004803603602081101561076a57600080fd5b5035600160a060020a0316611d52565b61036b6004803603602081101561079057600080fd5b5035600160a060020a0316611e3c565b610235611e57565b610321600480360360208110156107be57600080fd5b5035600160a060020a0316611e66565b610235611e7b565b610235611e8a565b610277600480360360c08110156107f457600080fd5b81019060208101813564010000000081111561080f57600080fd5b82018360208201111561082157600080fd5b8035906020019184600183028401116401000000008311171561084357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561089657600080fd5b8201836020820111156108a857600080fd5b803590602001918460018302840111640100000000831117156108ca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561091d57600080fd5b82018360208201111561092f57600080fd5b8035906020019184600183028401116401000000008311171561095157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156109a457600080fd5b8201836020820111156109b657600080fd5b803590602001918460018302840111640100000000831117156109d857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060200135600160a060020a0316611e99565b6102356127ba565b61027760048036036020811015610a4557600080fd5b5035600160a060020a03166127c9565b61023561293e565b61023561294d565b61023560048036036020811015610a7b57600080fd5b5035600160a060020a031661295c565b61023561297a565b610ab660048036036040811015610aa957600080fd5b5080359060200135612989565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610af2578181015183820152602001610ada565b505050509050019250505060405180910390f35b61027760048036036020811015610b1c57600080fd5b5035600160a060020a0316612aa6565b61036b60048036036020811015610b4257600080fd5b5035600160a060020a0316612b86565b61027760048036036020811015610b6857600080fd5b5035600160a060020a0316612c13565b600160a060020a039081166000908152601560205260409020541690565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610c0857600080fd5b505af4158015610c1c573d6000803e3d6000fd5b505050506040513d6020811015610c3257600080fd5b50511515610c3f57600080fd5b600160a060020a0381161515610c5457600080fd5b60098054600160a060020a03909216600160a060020a0319928316811790915560118054909216179055565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610cf257600080fd5b505af4158015610d06573d6000803e3d6000fd5b505050506040513d6020811015610d1c57600080fd5b50511515610d2957600080fd5b600160a060020a0381161515610d3e57600080fd5b60038054600160a060020a0319908116600160a060020a039384161791829055600c8054929093169116179055565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610ddf57600080fd5b505af4158015610df3573d6000803e3d6000fd5b505050506040513d6020811015610e0957600080fd5b50511515610e1657600080fd5b600160a060020a0381161515610e2b57600080fd5b600b8054600160a060020a03909216600160a060020a0319928316811790915560138054909216179055565b600954600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015610ed857600080fd5b505af4158015610eec573d6000803e3d6000fd5b505050506040513d6020811015610f0257600080fd5b50511515610f0f57600080fd5b600160a060020a0381161515610f2457600080fd5b60078054600160a060020a0319908116600160a060020a03938416179182905560108054929093169116179055565b600754600090600160a060020a03163314610f6d57600080fd5b604080517f2d706a34000000000000000000000000000000000000000000000000000000008152600160a060020a03851660048201529051731150d53299abb7de27464d01b626728f5c84022991632d706a34916024808301926020929190829003018186803b158015610fe057600080fd5b505af4158015610ff4573d6000803e3d6000fd5b505050506040513d602081101561100a57600080fd5b5051151561101757600080fd5b600160a060020a038216151561102c57600080fd5b600160a060020a03828116600090815260156020526040902054161561105157600080fd5b600160a060020a0383811660009081526016602052604090205416151561107757600080fd5b50600160a060020a039182166000818152601660208181526040808420805488168552601583528185208054600160a060020a03199081169091559690971680855290842080548716861790559390925290528254909116179055600190565b600354600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561115857600080fd5b505af415801561116c573d6000803e3d6000fd5b505050506040513d602081101561118257600080fd5b5051151561118f57600080fd5b600160a060020a03811615156111a457600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b60145490565b600a54600160a060020a031681565b600154600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561125c57600080fd5b505af4158015611270573d6000803e3d6000fd5b505050506040513d602081101561128657600080fd5b5051151561129357600080fd5b600160a060020a03821615156112a857600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561134557600080fd5b505af4158015611359573d6000803e3d6000fd5b505050506040513d602081101561136f57600080fd5b5051151561137c57600080fd5b600160a060020a038116151561139157600080fd5b60018054600160a060020a0319908116600160a060020a039384161791829055600e8054929093169116179055565b606060006060806060600080600088905080600160a060020a03166306fdde036040518163ffffffff1660e060020a02815260040160006040518083038186803b15801561140d57600080fd5b505afa158015611421573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561144a57600080fd5b81019080805164010000000081111561146257600080fd5b8201602081018481111561147557600080fd5b815164010000000081118282018710171561148f57600080fd5b505092919050505081600160a060020a03166313866efa6040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156114d357600080fd5b505afa1580156114e7573d6000803e3d6000fd5b505050506040513d60208110156114fd57600080fd5b5051604080517f056847900000000000000000000000000000000000000000000000000000000081529051600160a060020a038516916305684790916004808301926000929190829003018186803b15801561155857600080fd5b505afa15801561156c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561159557600080fd5b8101908080516401000000008111156115ad57600080fd5b820160208101848111156115c057600080fd5b81516401000000008111828201871017156115da57600080fd5b505092919050505083600160a060020a031663713b563f6040518163ffffffff1660e060020a02815260040160006040518083038186803b15801561161e57600080fd5b505afa158015611632573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561165b57600080fd5b81019080805164010000000081111561167357600080fd5b8201602081018481111561168657600080fd5b81516401000000008111828201871017156116a057600080fd5b505092919050505084600160a060020a031663a727be576040518163ffffffff1660e060020a02815260040160006040518083038186803b1580156116e457600080fd5b505afa1580156116f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561172157600080fd5b81019080805164010000000081111561173957600080fd5b8201602081018481111561174c57600080fd5b815164010000000081118282018710171561176657600080fd5b505092919050505085600160a060020a031663d97aa9776040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156117aa57600080fd5b505afa1580156117be573d6000803e3d6000fd5b505050506040513d60208110156117d457600080fd5b5051604080517f8f940f630000000000000000000000000000000000000000000000000000000081529051600160a060020a03891691638f940f63916004808301926020929190829003018186803b15801561182f57600080fd5b505afa158015611843573d6000803e3d6000fd5b505050506040513d602081101561185957600080fd5b5051959f949e50929c50909a509850965090945092505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156118e557600080fd5b505af41580156118f9573d6000803e3d6000fd5b505050506040513d602081101561190f57600080fd5b5051151561191c57600080fd5b600160a060020a038116151561193157600080fd5b60068054600160a060020a0319908116600160a060020a039384161791829055600f8054929093169116179055565b600d546040517f4d3d096b000000000000000000000000000000000000000000000000000000008152602060048201818152875160248401528751600094600160a060020a031693634d3d096b938a93928392604401918501908083838b5b838110156119d75781810151838201526020016119bf565b50505050905090810190601f168015611a045780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611a2157600080fd5b505afa158015611a35573d6000803e3d6000fd5b505050506040513d6020811015611a4b57600080fd5b50511515611a5857600080fd5b600d546040517f1367944b000000000000000000000000000000000000000000000000000000008152602060048201818152885160248401528851600094600160a060020a031693631367944b938b93928392604401918501908083838b5b83811015611acf578181015183820152602001611ab7565b50505050905090810190601f168015611afc5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611b1957600080fd5b505afa158015611b2d573d6000803e3d6000fd5b505050506040513d6020811015611b4357600080fd5b50519050600160a060020a0381161515611b5c57600080fd5b6000611b6b8a8a888888612d00565b9050600160a060020a03881615611c7057600160a060020a038216600090815260176020526040902054611ba690600163ffffffff612e0616565b89148015611bc5575087600160a060020a031681600160a060020a0316145b8015611c675750600f54604080517fa481247c000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528b811660248301529151919092169163a481247c916044808301926020929190829003018186803b158015611c3a57600080fd5b505afa158015611c4e573d6000803e3d6000fd5b505050506040513d6020811015611c6457600080fd5b50515b92505050611d47565b600160a060020a038216600090815260176020526040902054611c9a90600163ffffffff612e0616565b89148015611c675750600f54604080517fdb536d2f000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163db536d2f916024808301926020929190829003018186803b158015611d0957600080fd5b505afa158015611d1d573d6000803e3d6000fd5b505050506040513d6020811015611d3357600080fd5b5051600160a060020a039081169116149150505b979650505050505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015611dc457600080fd5b505af4158015611dd8573d6000803e3d6000fd5b505050506040513d6020811015611dee57600080fd5b50511515611dfb57600080fd5b600160a060020a0381161515611e1057600080fd5b600a8054600160a060020a03909216600160a060020a0319928316811790915560128054909216179055565b600160a060020a031660009081526017602052604090205490565b600b54600160a060020a031681565b60026020526000908152604090205460ff1681565b600754600160a060020a031681565b600054600160a060020a031681565b8551600010611ea757600080fd5b600d546040517f4d3d096b000000000000000000000000000000000000000000000000000000008152602060048201818152895160248401528951600160a060020a0390941693634d3d096b938b9383926044909201919085019080838360005b83811015611f20578181015183820152602001611f08565b50505050905090810190601f168015611f4d5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611f6a57600080fd5b505afa158015611f7e573d6000803e3d6000fd5b505050506040513d6020811015611f9457600080fd5b505115611fa057600080fd5b33600090815260156020526040902054600160a060020a031615611fc357600080fd5b6000731150d53299abb7de27464d01b626728f5c84022963a1e79750883389898989600460009054906101000a9004600160a060020a03166040518863ffffffff1660e060020a028152600401808060200188600160a060020a0316600160a060020a0316815260200180602001806020018060200187815260200186600160a060020a0316600160a060020a0316815260200185810385528c818151815260200191508051906020019080838360005b8381101561208c578181015183820152602001612074565b50505050905090810190601f1680156120b95780820380516001836020036101000a031916815260200191505b5085810384528a5181528a516020918201918c019080838360005b838110156120ec5781810151838201526020016120d4565b50505050905090810190601f1680156121195780820380516001836020036101000a031916815260200191505b5085810383528951815289516020918201918b019080838360005b8381101561214c578181015183820152602001612134565b50505050905090810190601f1680156121795780820380516001836020036101000a031916815260200191505b5085810382528851815288516020918201918a019080838360005b838110156121ac578181015183820152602001612194565b50505050905090810190601f1680156121d95780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060206040518083038186803b1580156121ff57600080fd5b505af4158015612213573d6000803e3d6000fd5b505050506040513d602081101561222957600080fd5b5051600160a060020a03808216600090815260166020526040902054919250161561225357600080fd5b6017600082600160a060020a0316600160a060020a0316815260200190815260200160002060008154809291906001019190505550806015600033600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a03160217905550336016600083600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a03160217905550600d60009054906101000a9004600160a060020a0316600160a060020a031663aaa9165a888360013360026040518663ffffffff1660e060020a028152600401808060200186600160a060020a0316600160a060020a031681526020018581526020018060200185600160a060020a0316600160a060020a03168152602001848152602001838103835288818151815260200191508051906020019080838360005b838110156123d65781810151838201526020016123be565b50505050905090810190601f1680156124035780820380516001836020036101000a031916815260200191505b50838103825260058152602001807f68756d616e000000000000000000000000000000000000000000000000000000815250602001975050505050505050602060405180830381600087803b15801561245b57600080fd5b505af115801561246f573d6000803e3d6000fd5b505050506040513d602081101561248557600080fd5b5051151561249257600080fd5b600e54604080517ff8c8765e000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301819052602483018190526044830181905260648301529151919092169163f8c8765e9160848083019260209291908290030181600087803b15801561250f57600080fd5b505af1158015612523573d6000803e3d6000fd5b505050506040513d602081101561253957600080fd5b5051151561254657600080fd5b600f54604080517fc0c53b8b000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015233602483015285811660448301529151919092169163c0c53b8b9160648083019260209291908290030181600087803b1580156125bc57600080fd5b505af11580156125d0573d6000803e3d6000fd5b505050506040513d60208110156125e657600080fd5b505115156125f357600080fd5b6014805460018101825560009182527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec018054600160a060020a031916600160a060020a03848116918217909255600c54604080517f6a627842000000000000000000000000000000000000000000000000000000008152600481019390935251921692636a627842926024808401936020939083900390910190829087803b15801561269f57600080fd5b505af11580156126b3573d6000803e3d6000fd5b505050506040513d60208110156126c957600080fd5b505115156126d657600080fd5b6126df81612e19565b60145433907fdd445519212181802441b3ea8a0080462d25346f8279d9de28b7a64365d5f2fa90839061271990600163ffffffff61368216565b8a6040518084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561277557818101518382015260200161275d565b50505050905090810190601f1680156127a25780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a250505050505050565b600454600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561283b57600080fd5b505af415801561284f573d6000803e3d6000fd5b505050506040513d602081101561286557600080fd5b5051151561287257600080fd5b604080517f2fca5414000000000000000000000000000000000000000000000000000000008152600160a060020a03831660048201529051731150d53299abb7de27464d01b626728f5c84022991632fca5414916024808301926020929190829003018186803b1580156128e557600080fd5b505af41580156128f9573d6000803e3d6000fd5b505050506040513d602081101561290f57600080fd5b5051151561291c57600080fd5b60088054600160a060020a031916600160a060020a0392909216919091179055565b600654600160a060020a031681565b600554600160a060020a031681565b600160a060020a039081166000908152601660205260409020541690565b600854600160a060020a031681565b60606000831015801561299c5750828210155b15156129a757600080fd5b6014546000106129b657600080fd5b60606129d960016129cd858763ffffffff61368216565b9063ffffffff612e0616565b604051908082528060200260200182016040528015612a02578160200160208202803883390190505b50601454909150612a1a90600163ffffffff61368216565b831115612a3857601454612a3590600163ffffffff61368216565b92505b835b838111612a9e576014805482908110612a4f57fe5b600091825260209091200154600160a060020a031682612a75838863ffffffff61368216565b81518110612a7f57fe5b600160a060020a03909216602092830290910190910152600101612a3a565b509392505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015612b1857600080fd5b505af4158015612b2c573d6000803e3d6000fd5b505050506040513d6020811015612b4257600080fd5b50511515612b4f57600080fd5b600160a060020a0381161515612b6457600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600154600090600160a060020a0316331480612bac5750600654600160a060020a031633145b80612bc15750600754600160a060020a031633145b1515612bcc57600080fd5b600160a060020a03821660009081526017602052604081205411612bef57600080fd5b50600160a060020a0316600090815260176020526040902080546001019081905590565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015612c8557600080fd5b505af4158015612c99573d6000803e3d6000fd5b505050506040513d6020811015612caf57600080fd5b50511515612cbc57600080fd5b600160a060020a0381161515612cd157600080fd5b60058054600160a060020a0319908116600160a060020a039384161791829055600d8054929093169116179055565b6000803087876040516020018084600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140183805190602001908083835b60208310612d5f5780518252601f199092019160209182019101612d40565b51815160209384036101000a6000190180199092169116179052920193845250604080518085038152848301808352815191840191909120600090915281850180835281905260ff8c166060860152608085018b905260a085018a905290519096506001955060c080850195509193601f198201935081900390910190855afa158015612df0573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b81810182811015612e1357fe5b92915050565b600854600160a060020a03161561367f576011546008546040805160e260020a631c196fb7028152600160a060020a03928316600482015260248101829052601960448201527f7072696d6f726469616c436f6e7472696275746f724e616d6500000000000000606482015290516060939290921691637065bedc91608480820192600092909190829003018186803b158015612eb557600080fd5b505afa158015612ec9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a0811015612ef257600080fd5b815160208301516040840151606085015160808601805194969395929491939283019291640100000000811115612f2857600080fd5b82016020810184811115612f3b57600080fd5b8151640100000000811182820187101715612f5557600080fd5b50506011546008546040805160e260020a631c196fb7028152600160a060020a03928316600482015260248101829052601b60448201527f7072696d6f726469616c436f6e7472696275746f72506174686f73000000000060648201529051939b5060009a5091169750637065bedc9650608480820196508995509193508390030190508186803b158015612fe957600080fd5b505afa158015612ffd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a081101561302657600080fd5b81516020830151604084015160608501516080860180519496939592949193928301929164010000000081111561305c57600080fd5b8201602081018481111561306f57600080fd5b815164010000000081118282018710171561308957600080fd5b50506011546008546040805160e260020a631c196fb7028152600160a060020a03928316600482015260248101829052601a60448201527f7072696d6f726469616c436f6e7472696275746f724574686f73000000000000606482015290519a9b5060009a919092169850637065bedc9750608480830197508a96509094509084900301915082905086803b15801561312157600080fd5b505afa158015613135573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a081101561315e57600080fd5b81516020830151604084015160608501516080860180519496939592949193928301929164010000000081111561319457600080fd5b820160208101848111156131a757600080fd5b81516401000000008111828201871017156131c157600080fd5b50506011546008546040805160e260020a631c196fb7028152600160a060020a03928316600482015260248101829052601c60448201527f7072696d6f726469616c436f6e7472696275746f724561726e696e6700000000606482015290519a9b5060009a919092169850637065bedc9750608480830197508a96509094509084900301915082905086803b15801561325957600080fd5b505afa15801561326d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a081101561329657600080fd5b8151602083015160408401516060850151608086018051949693959294919392830192916401000000008111156132cc57600080fd5b820160208101848111156132df57600080fd5b81516401000000008111828201871017156132f957600080fd5b5050600d546040517f1367944b0000000000000000000000000000000000000000000000000000000081526020600482018181528f5160248401528f519b9c5060009b600160a060020a039094169a50631367944b99508f9850965086955060449091019350860191508083838b5b83811015613380578181015183820152602001613368565b50505050905090810190601f1680156133ad5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156133ca57600080fd5b505afa1580156133de573d6000803e3d6000fd5b505050506040513d60208110156133f457600080fd5b50519050600160a060020a03808216908716141561351c576012546040805160e060020a6340c10f19028152600160a060020a03898116600483015260248201889052915191909216916340c10f199160448083019260209291908290030181600087803b15801561346557600080fd5b505af1158015613479573d6000803e3d6000fd5b505050506040513d602081101561348f57600080fd5b50506013546040805160e060020a6340c10f19028152600160a060020a03898116600483015260248201879052915191909216916340c10f199160448083019260209291908290030181600087803b1580156134ea57600080fd5b505af11580156134fe573d6000803e3d6000fd5b505050506040513d602081101561351457600080fd5b506136799050565b600160a060020a03811615613679576012546040805160e060020a6340c10f19028152600160a060020a03848116600483015260248201869052915191909216916340c10f199160448083019260209291908290030181600087803b15801561358457600080fd5b505af1158015613598573d6000803e3d6000fd5b505050506040513d60208110156135ae57600080fd5b50506013546040805160e060020a6340c10f19028152600160a060020a03848116600483015260248201869052915191909216916340c10f199160448083019260209291908290030181600087803b15801561360957600080fd5b505af115801561361d573d6000803e3d6000fd5b505050506040513d602081101561363357600080fd5b505060408051838152602081018490528151600160a060020a038916927f734610a8df4b989871ed27981447b1532b05e8c8a0cc2df9e8749756b270e8e8928290030190a25b50505050505b50565b60008282111561368e57fe5b5090039056fea165627a7a723058208c42adb17a6da17e56051d3b1acee166711ca6347a113682de74750f43de3bf600290000000000000000000000009639740a2536ffc5b3b97df6d9c1bd4fae557c08",
  "constructorArguments": "0000000000000000000000009639740a2536ffc5b3b97df6d9c1bd4fae557c08",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}