{
  "address": "0xb654457bab03011531ef939cb31f76eb36e2ddf3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GameSetting",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-08\n*/\n\npragma solidity ^0.4.24;\n\n// https://www.ethereum.org/token\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n\n/**\n * @title SpinWinInterface\n */\ninterface SpinWinInterface {\n\tfunction refundPendingBets() external returns (bool);\n}\n\n\n/**\n * @title SettingInterface\n */\ninterface SettingInterface {\n\tfunction uintSettings(bytes32 name) external constant returns (uint256);\n\tfunction boolSettings(bytes32 name) external constant returns (bool);\n\tfunction isActive() external constant returns (bool);\n\tfunction canBet(uint256 rewardValue, uint256 betValue, uint256 playerNumber, uint256 houseEdge) external constant returns (bool);\n\tfunction isExchangeAllowed(address playerAddress, uint256 tokenAmount) external constant returns (bool);\n\n\t/******************************************/\n\t/*          SPINWIN ONLY METHODS          */\n\t/******************************************/\n\tfunction spinwinSetUintSetting(bytes32 name, uint256 value) external;\n\tfunction spinwinIncrementUintSetting(bytes32 name) external;\n\tfunction spinwinSetBoolSetting(bytes32 name, bool value) external;\n\tfunction spinwinAddFunds(uint256 amount) external;\n\tfunction spinwinUpdateTokenToWeiExchangeRate() external;\n\tfunction spinwinRollDice(uint256 betValue) external;\n\tfunction spinwinUpdateWinMetric(uint256 playerProfit) external;\n\tfunction spinwinUpdateLoseMetric(uint256 betValue, uint256 tokenRewardValue) external;\n\tfunction spinwinUpdateLotteryContributionMetric(uint256 lotteryContribution) external;\n\tfunction spinwinUpdateExchangeMetric(uint256 exchangeAmount) external;\n\n\t/******************************************/\n\t/*      SPINLOTTERY ONLY METHODS          */\n\t/******************************************/\n\tfunction spinlotterySetUintSetting(bytes32 name, uint256 value) external;\n\tfunction spinlotteryIncrementUintSetting(bytes32 name) external;\n\tfunction spinlotterySetBoolSetting(bytes32 name, bool value) external;\n\tfunction spinlotteryUpdateTokenToWeiExchangeRate() external;\n\tfunction spinlotterySetMinBankroll(uint256 _minBankroll) external returns (bool);\n}\n\n\n/**\n * @title TokenInterface\n */\ninterface TokenInterface {\n\tfunction getTotalSupply() external constant returns (uint256);\n\tfunction getBalanceOf(address account) external constant returns (uint256);\n\tfunction transfer(address _to, uint256 _value) external returns (bool);\n\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n\tfunction approve(address _spender, uint256 _value) external returns (bool success);\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) external returns (bool success);\n\tfunction burn(uint256 _value) external returns (bool success);\n\tfunction burnFrom(address _from, uint256 _value) external returns (bool success);\n\tfunction mintTransfer(address _to, uint _value) external returns (bool);\n\tfunction burnAt(address _at, uint _value) external returns (bool);\n}\n\n\n\n\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\n\n\n\n// https://github.com/ethereum/ethereum-org/blob/master/solidity/token-advanced.sol\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor(\n\t\tuint256 initialSupply,\n\t\tstring tokenName,\n\t\tstring tokenSymbol\n\t) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != 0x0);\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\t\tpublic\n\t\treturns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\ncontract developed {\n\taddress public developer;\n\n\t/**\n\t * Constructor\n\t */\n\tconstructor() public {\n\t\tdeveloper = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks only developer address is calling\n\t */\n\tmodifier onlyDeveloper {\n\t\trequire(msg.sender == developer);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows developer to switch developer address\n\t * @param _developer The new developer address to be set\n\t */\n\tfunction changeDeveloper(address _developer) public onlyDeveloper {\n\t\tdeveloper = _developer;\n\t}\n\n\t/**\n\t * @dev Allows developer to withdraw ERC20 Token\n\t */\n\tfunction withdrawToken(address tokenContractAddress) public onlyDeveloper {\n\t\tTokenERC20 _token = TokenERC20(tokenContractAddress);\n\t\tif (_token.balanceOf(this) > 0) {\n\t\t\t_token.transfer(developer, _token.balanceOf(this));\n\t\t}\n\t}\n}\n\n\n\ncontract escaped {\n\taddress public escapeActivator;\n\n\t/**\n\t * Constructor\n\t */\n\tconstructor() public {\n\t\tescapeActivator = 0xB15C54b4B9819925Cd2A7eE3079544402Ac33cEe;\n\t}\n\n\t/**\n\t * @dev Checks only escapeActivator address is calling\n\t */\n\tmodifier onlyEscapeActivator {\n\t\trequire(msg.sender == escapeActivator);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows escapeActivator to switch escapeActivator address\n\t * @param _escapeActivator The new escapeActivator address to be set\n\t */\n\tfunction changeAddress(address _escapeActivator) public onlyEscapeActivator {\n\t\tescapeActivator = _escapeActivator;\n\t}\n}\n\n\n\n\n\n/**\n * @title GameSetting\n */\ncontract GameSetting is developed, escaped, SettingInterface {\n\tusing SafeMath for uint256;\n\n\taddress public spinwinAddress;\n\taddress public spinlotteryAddress;\n\n\tmapping(bytes32 => uint256) internal _uintSettings;    // Array containing all uint256 settings\n\tmapping(bytes32 => bool) internal _boolSettings;       // Array containing all bool settings\n\n\tuint256 constant public PERCENTAGE_DIVISOR = 10 ** 6;   // 1000000 = 100%\n\tuint256 constant public HOUSE_EDGE_DIVISOR = 1000;\n\tuint256 constant public CURRENCY_DIVISOR = 10**18;\n\tuint256 constant public TWO_DECIMALS = 100;\n\tuint256 constant public MAX_NUMBER = 99;\n\tuint256 constant public MIN_NUMBER = 2;\n\tuint256 constant public MAX_HOUSE_EDGE = 1000;          // 0% House Edge\n\tuint256 constant public MIN_HOUSE_EDGE = 0;             // 100% House edge\n\n\tTokenInterface internal _spintoken;\n\tSpinWinInterface internal _spinwin;\n\n\t/**\n\t * @dev Log dev sets uint setting\n\t */\n\tevent LogSetUintSetting(address indexed who, bytes32 indexed name, uint256 value);\n\n\t/**\n\t * @dev Log dev sets bool setting\n\t */\n\tevent LogSetBoolSetting(address indexed who, bytes32 indexed name, bool value);\n\n\t/**\n\t * @dev Log when dev adds some funds\n\t */\n\tevent LogAddBankRoll(uint256 amount);\n\n\t/**\n\t * @dev Log when the token to Wei exchange rate is updated\n\t */\n\tevent LogUpdateTokenToWeiExchangeRate(uint256 exchangeRate, uint256 exchangeRateBlockNumber);\n\n\t/**\n\t * @dev Log when developer set spinwin contract to emergency mode\n\t */\n\tevent LogSpinwinEscapeHatch();\n\n\t/**\n\t * Constructor\n\t */\n\tconstructor(address _spintokenAddress) public {\n\t\t_spintoken = TokenInterface(_spintokenAddress);\n\t\tdevSetUintSetting('minBet', CURRENCY_DIVISOR.div(100));\t\t\t// init min bet (0.01 ether)\n\t\tdevSetUintSetting('maxProfitAsPercentOfHouse', 200000);         // init 200000 = 20% commission\n\t\tdevSetUintSetting('minBankroll', CURRENCY_DIVISOR.mul(20));     // init min bank roll (20 eth)\n\t\tdevSetTokenExchangeMinBankrollPercent(900000);                  // init token exchange min bank roll percentage (90%)\n\t\tdevSetUintSetting('referralPercent', 10000);                    // init referral percentage (1%)\n\t\tdevSetUintSetting('gasForLottery', 250000);                     // init gas for lottery\n\t\tdevSetUintSetting('maxBlockSecurityCount', 256);                // init max block security count (256)\n\t\tdevSetUintSetting('blockSecurityCount', 3);                     // init block security count (3)\n\t\tdevSetUintSetting('tokenExchangeBlockSecurityCount', 3);        // init token exchange block security count (3)\n\t\tdevSetUintSetting('maxProfitBlockSecurityCount', 3);            // init max profit block security count (3)\n\t\tdevSetUintSetting('spinEdgeModifier', 80);                      // init spin edge modifier (0.8)\n\t\tdevSetUintSetting('spinBankModifier', 50);                      // init spin bank modifier (0.5)\n\t\tdevSetUintSetting('spinNumberModifier', 5);                     // init spin number modifier (0.05)\n\t\tdevSetUintSetting('maxMinBankroll', CURRENCY_DIVISOR.mul(5000));   // init max value for min bankroll (5,000 eth)\n\t\tdevSetUintSetting('lastProcessedBetInternalId', 1);             // init lastProcessedBetInternalId = 1\n\t\tdevSetUintSetting('exchangeAmountDivisor', 2);                  // init exchangeAmountDivisor = 2\n\t\tdevSetUintSetting('tokenExchangeRatio', 10);                    // init tokenExchangeRatio = 0.1 (divided by TWO_DECIMALS)\n\t\tdevSetUintSetting('spinToWeiRate', CURRENCY_DIVISOR);           // init spinToWeiRate = 1\n\t\tdevSetUintSetting('blockToSpinRate', CURRENCY_DIVISOR);         // init blockToSpinRate = 1\n\t\tdevSetUintSetting('blockToWeiRate', CURRENCY_DIVISOR);          // init blockToWeiRate = 1\n\t\tdevSetUintSetting('gasForClearingBet', 320000);                 // init gasForClearingBet = 320000 gas\n\t\tdevSetUintSetting('gasPrice', 40000000000);                     // init gasPrice = 40 gwei\n\t\tdevSetUintSetting('clearSingleBetMultiplier', 200);             // init clearSingleBetMultiplier = 2x (divided by TWO_DECIMALS)\n\t\tdevSetUintSetting('clearMultipleBetsMultiplier', 100);          // init clearMultipleBetMultiplier = 1x (divided by TWO_DECIMALS)\n\t\tdevSetUintSetting('maxNumClearBets', 4);                        // init maxNumClearBets = 4\n\t\tdevSetUintSetting('lotteryTargetMultiplier', 200);              // init lotteryTargetMultiplier = 2x (divided by TWO_DECIMALS)\n\t\t_setMaxProfit(true);\n\t}\n\n\t/**\n\t * @dev Checks only spinwinAddress is calling\n\t */\n\tmodifier onlySpinwin {\n\t\trequire(msg.sender == spinwinAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Checks only spinlotteryAddress is calling\n\t */\n\tmodifier onlySpinlottery {\n\t\trequire(msg.sender == spinlotteryAddress);\n\t\t_;\n\t}\n\n\t/******************************************/\n\t/*       DEVELOPER ONLY METHODS           */\n\t/******************************************/\n\n\t/**\n\t * @dev Allows developer to set spinwin contract address\n\t * @param _address The contract address to be set\n\t */\n\tfunction devSetSpinwinAddress(address _address) public onlyDeveloper {\n\t\trequire (_address != address(0));\n\t\tspinwinAddress = _address;\n\t\t_spinwin = SpinWinInterface(spinwinAddress);\n\t}\n\n\t/**\n\t * @dev Allows developer to set spinlottery contract address\n\t * @param _address The contract address to be set\n\t */\n\tfunction devSetSpinlotteryAddress(address _address) public onlyDeveloper {\n\t\trequire (_address != address(0));\n\t\tspinlotteryAddress = _address;\n\t}\n\n\t/**\n\t * @dev Allows dev to set uint setting\n\t * @param name The setting name to be set\n\t * @param value The value to be set\n\t */\n\tfunction devSetUintSetting(bytes32 name, uint256 value) public onlyDeveloper {\n\t\t_uintSettings[name] = value;\n\t\temit LogSetUintSetting(developer, name, value);\n\t}\n\n\t/**\n\t * @dev Allows dev to set bool setting\n\t * @param name The setting name to be set\n\t * @param value The value to be set\n\t */\n\tfunction devSetBoolSetting(bytes32 name, bool value) public onlyDeveloper {\n\t\t_boolSettings[name] = value;\n\t\temit LogSetBoolSetting(developer, name, value);\n\t}\n\n\t/**\n\t * @dev Allows developer to set min bank roll\n\t * @param minBankroll The new min bankroll value to be set\n\t */\n\tfunction devSetMinBankroll(uint256 minBankroll) public onlyDeveloper {\n\t\t_uintSettings['minBankroll'] = minBankroll;\n\t\t_uintSettings['tokenExchangeMinBankroll'] = _uintSettings['minBankroll'].mul(_uintSettings['tokenExchangeMinBankrollPercent']).div(PERCENTAGE_DIVISOR);\n\t}\n\n\t/**\n\t * @dev Allows developer to set token exchange min bank roll percent\n\t * @param tokenExchangeMinBankrollPercent The new value to be set\n\t */\n\tfunction devSetTokenExchangeMinBankrollPercent(uint256 tokenExchangeMinBankrollPercent) public onlyDeveloper {\n\t\t_uintSettings['tokenExchangeMinBankrollPercent'] = tokenExchangeMinBankrollPercent;\n\t\t_uintSettings['tokenExchangeMinBankroll'] = _uintSettings['minBankroll'].mul(_uintSettings['tokenExchangeMinBankrollPercent']).div(PERCENTAGE_DIVISOR);\n\t}\n\n\t/******************************************/\n\t/*      ESCAPE ACTIVATOR ONLY METHODS     */\n\t/******************************************/\n\n\t/**\n\t * @dev Allows escapeActivator to trigger spinwin emergency mode. Will disable all bets and only allow token exchange at a fixed rate\n\t */\n\tfunction spinwinEscapeHatch() public onlyEscapeActivator {\n\t\t_spinwin.refundPendingBets();\n\t\t_boolSettings['contractKilled'] = true;\n\t\t_uintSettings['contractBalanceHonor'] = _uintSettings['contractBalance'];\n\t\t_uintSettings['tokenExchangeMinBankroll'] = 0;\n\t\t_uintSettings['tokenExchangeMinBankrollHonor'] = 0;\n\t\t/**\n\t\t * tokenToWeiExchangeRate is ETH in 36 decimals or WEI in 18 decimals to account for\n\t\t * the state when token's totalSupply is 10^18 more than contractBalance.\n\t\t * Otherwise the tokenToWeiExchangeRate will always be 0.\n\t\t * This means, in the exchange token function, we need to divide\n\t\t * tokenToWeiExchangeRate with CURRENCY_DIVISOR\n\t\t */\n\t\t_uintSettings['tokenToWeiExchangeRate'] = _spintoken.getTotalSupply() > 0 ? _uintSettings['contractBalance'].mul(CURRENCY_DIVISOR).mul(CURRENCY_DIVISOR).div(_spintoken.getTotalSupply()) : 0;\n\t\t_uintSettings['tokenToWeiExchangeRateHonor'] = _uintSettings['tokenToWeiExchangeRate'];\n\t\t_uintSettings['tokenToWeiExchangeRateBlockNum'] = block.number;\n\t\temit LogUpdateTokenToWeiExchangeRate(_uintSettings['tokenToWeiExchangeRateHonor'], _uintSettings['tokenToWeiExchangeRateBlockNum']);\n\t\temit LogSpinwinEscapeHatch();\n\t}\n\n\t/******************************************/\n\t/*         SPINWIN ONLY METHODS           */\n\t/******************************************/\n\t/**\n\t * @dev Allows spinwin to set uint setting\n\t * @param name The setting name to be set\n\t * @param value The value to be set\n\t */\n\tfunction spinwinSetUintSetting(bytes32 name, uint256 value) public onlySpinwin {\n\t\t_uintSettings[name] = value;\n\t\temit LogSetUintSetting(spinwinAddress, name, value);\n\t}\n\n\t/**\n\t * @dev Allows spinwin to increment existing uint setting value\n\t * @param name The setting name to be set\n\t */\n\tfunction spinwinIncrementUintSetting(bytes32 name) public onlySpinwin {\n\t\t_uintSettings[name] = _uintSettings[name].add(1);\n\t\temit LogSetUintSetting(spinwinAddress, name, _uintSettings[name]);\n\t}\n\n\t/**\n\t * @dev Allows spinwin to set bool setting\n\t * @param name The setting name to be set\n\t * @param value The value to be set\n\t */\n\tfunction spinwinSetBoolSetting(bytes32 name, bool value) public onlySpinwin {\n\t\t_boolSettings[name] = value;\n\t\temit LogSetBoolSetting(spinwinAddress, name, value);\n\t}\n\n\t/**\n\t * @dev Add funds to the spinwin contract\n\t * @param amount The amount of eth sent\n\t */\n\tfunction spinwinAddFunds(uint256 amount) public onlySpinwin {\n\t\t// Safely update contract balance\n\t\t_uintSettings['contractBalance'] = _uintSettings['contractBalance'].add(amount);\n\n\t\t// Update max profit\n\t\t_setMaxProfit(false);\n\n\t\temit LogAddBankRoll(amount);\n\t}\n\n\t/**\n\t * @dev Allow spinwin to update token to Wei exchange rate.\n\t */\n\tfunction spinwinUpdateTokenToWeiExchangeRate() public onlySpinwin {\n\t\t_updateTokenToWeiExchangeRate();\n\t}\n\n\t/**\n\t * @dev Allow spinwin to update settings when roll dice\n\t * Increment totalBets\n\t * Add betValue to totalWeiWagered\n\t *\n\t * @param betValue The bet value\n\t * @return The internal bet ID\n\t */\n\tfunction spinwinRollDice(uint256 betValue) public onlySpinwin {\n\t\t_uintSettings['totalBets']++;\n\t\t_uintSettings['totalWeiWagered'] = _uintSettings['totalWeiWagered'].add(betValue);\n\t}\n\n\t/**\n\t * @dev Allows spinwin to update uint setting when player wins\n\t * @param playerProfit The player profit to be subtracted from contractBalance and added to totalWeiWon\n\t */\n\tfunction spinwinUpdateWinMetric(uint256 playerProfit) public onlySpinwin {\n\t\t_uintSettings['contractBalance'] = _uintSettings['contractBalance'].sub(playerProfit);\n\t\t_uintSettings['totalWeiWon'] = _uintSettings['totalWeiWon'].add(playerProfit);\n\t\t_setMaxProfit(false);\n\t}\n\n\t/**\n\t * @dev Allows spinwin to update uint setting when player loses\n\t * @param betValue The original wager\n\t * @param tokenRewardValue The amount of token to be rewarded\n\t */\n\tfunction spinwinUpdateLoseMetric(uint256 betValue, uint256 tokenRewardValue) public onlySpinwin {\n\t\t_uintSettings['contractBalance'] = _uintSettings['contractBalance'].add(betValue).sub(1);\n\t\t_uintSettings['totalWeiWon'] = _uintSettings['totalWeiWon'].add(1);\n\t\t_uintSettings['totalWeiLost'] = _uintSettings['totalWeiLost'].add(betValue).sub(1);\n\t\t_uintSettings['totalTokenPayouts'] = _uintSettings['totalTokenPayouts'].add(tokenRewardValue);\n\t\t_setMaxProfit(false);\n\t}\n\n\t/**\n\t * @dev Allows spinwin to update uint setting when there is a lottery contribution\n\t * @param lotteryContribution The amount to be contributed to lottery\n\t */\n\tfunction spinwinUpdateLotteryContributionMetric(uint256 lotteryContribution) public onlySpinwin {\n\t\t_uintSettings['contractBalance'] = _uintSettings['contractBalance'].sub(lotteryContribution);\n\t\t_setMaxProfit(true);\n\t}\n\n\t/**\n\t * @dev Allows spinwin to update uint setting when there is a token exchange transaction\n\t * @param exchangeAmount The converted exchange amount\n\t */\n\tfunction spinwinUpdateExchangeMetric(uint256 exchangeAmount) public onlySpinwin {\n\t\t_uintSettings['contractBalance'] = _uintSettings['contractBalance'].sub(exchangeAmount);\n\t\t_setMaxProfit(false);\n\t}\n\n\n\t/******************************************/\n\t/*      SPINLOTTERY ONLY METHODS          */\n\t/******************************************/\n\t/**\n\t * @dev Allows spinlottery to set uint setting\n\t * @param name The setting name to be set\n\t * @param value The value to be set\n\t */\n\tfunction spinlotterySetUintSetting(bytes32 name, uint256 value) public onlySpinlottery {\n\t\t_uintSettings[name] = value;\n\t\temit LogSetUintSetting(spinlotteryAddress, name, value);\n\t}\n\n\t/**\n\t * @dev Allows spinlottery to increment existing uint setting value\n\t * @param name The setting name to be set\n\t */\n\tfunction spinlotteryIncrementUintSetting(bytes32 name) public onlySpinlottery {\n\t\t_uintSettings[name] = _uintSettings[name].add(1);\n\t\temit LogSetUintSetting(spinwinAddress, name, _uintSettings[name]);\n\t}\n\n\t/**\n\t * @dev Allows spinlottery to set bool setting\n\t * @param name The setting name to be set\n\t * @param value The value to be set\n\t */\n\tfunction spinlotterySetBoolSetting(bytes32 name, bool value) public onlySpinlottery {\n\t\t_boolSettings[name] = value;\n\t\temit LogSetBoolSetting(spinlotteryAddress, name, value);\n\t}\n\n\t/**\n\t * @dev Allow spinlottery to update token to Wei exchange rate.\n\t */\n\tfunction spinlotteryUpdateTokenToWeiExchangeRate() public onlySpinlottery {\n\t\t_updateTokenToWeiExchangeRate();\n\t}\n\n\t/**\n\t * @dev Allows lottery to set spinwin minBankroll value\n\t * @param _minBankroll The new value to be set\n\t * @return Return true if success\n\t */\n\tfunction spinlotterySetMinBankroll(uint256 _minBankroll) public onlySpinlottery returns (bool) {\n\t\tif (_minBankroll > _uintSettings['maxMinBankroll']) {\n\t\t\t_minBankroll = _uintSettings['maxMinBankroll'];\n\t\t} else if (_minBankroll < _uintSettings['contractBalance']) {\n\t\t\t_minBankroll = _uintSettings['contractBalance'];\n\t\t}\n\t\t_uintSettings['minBankroll'] = _minBankroll;\n\t\t_uintSettings['tokenExchangeMinBankroll'] = _uintSettings['minBankroll'].mul(_uintSettings['tokenExchangeMinBankrollPercent']).div(PERCENTAGE_DIVISOR);\n\n\t\t// Update max profit\n\t\t_setMaxProfit(false);\n\n\t\treturn true;\n\t}\n\n\t/******************************************/\n\t/*         PUBLIC ONLY METHODS            */\n\t/******************************************/\n\t/**\n\t * @dev Gets uint setting value\n\t * @param name The name of the uint setting\n\t * @return The value of the setting\n\t */\n\tfunction uintSettings(bytes32 name) public constant returns (uint256) {\n\t\treturn _uintSettings[name];\n\t}\n\n\t/**\n\t * @dev Gets bool setting value\n\t * @param name The name of the bool setting\n\t * @return The value of the setting\n\t */\n\tfunction boolSettings(bytes32 name) public constant returns (bool) {\n\t\treturn _boolSettings[name];\n\t}\n\n\t/**\n\t * @dev Check if contract is active\n\t * @return Return true if yes, false otherwise.\n\t */\n\tfunction isActive() public constant returns (bool) {\n\t\tif (_boolSettings['contractKilled'] == false && _boolSettings['gamePaused'] == false) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Check whether current bet is valid\n\t * @param rewardValue The winning amount\n\t * @param betValue The original wager\n\t * @param playerNumber The player chosen number\n\t * @param houseEdge The house edge\n\t * @return Return true if yes, false otherwise.\n\t */\n\tfunction canBet(uint256 rewardValue, uint256 betValue, uint256 playerNumber, uint256 houseEdge) public constant returns (bool) {\n\t\tif (_boolSettings['contractKilled'] == false && _boolSettings['gamePaused'] == false && rewardValue <= _uintSettings['maxProfitHonor'] && betValue >= _uintSettings['minBet'] && houseEdge >= MIN_HOUSE_EDGE && houseEdge <= MAX_HOUSE_EDGE && playerNumber >= MIN_NUMBER && playerNumber <= MAX_NUMBER) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Check whether token exchange is allowed\n\t * @param playerAddress The player address to be checked\n\t * @param tokenAmount The amount of token to be exchanged\n\t * @return Return true if yes, false otherwise.\n\t */\n\tfunction isExchangeAllowed(address playerAddress, uint256 tokenAmount) public constant returns (bool) {\n\t\tif (_boolSettings['gamePaused'] == false && _boolSettings['tokenExchangePaused'] == false && _uintSettings['contractBalanceHonor'] >= _uintSettings['tokenExchangeMinBankrollHonor'] && _uintSettings['tokenToWeiExchangeRateHonor'] > 0 && _spintoken.getBalanceOf(playerAddress) >= tokenAmount) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/******************************************/\n\t/*        INTERNAL ONLY METHODS           */\n\t/******************************************/\n\n\t/**\n\t * @dev Calculates and sets the latest max profit a bet can possibly earn. Also update the honor variables that we are going to promise players.\n\t * @param force If true, bypass the block security check and update honor settings\n\t */\n\tfunction _setMaxProfit(bool force) internal {\n\t\t_uintSettings['maxProfit'] = _uintSettings['contractBalance'].mul(_uintSettings['maxProfitAsPercentOfHouse']).div(PERCENTAGE_DIVISOR);\n\t\tif (force || block.number > _uintSettings['maxProfitBlockNum'].add(_uintSettings['maxProfitBlockSecurityCount'])) {\n\t\t\tif (_uintSettings['contractBalance'] < 10 ether) {\n\t\t\t\t_uintSettings['maxProfitAsPercentOfHouse'] = 200000; // 20%\n\t\t\t} else if (_uintSettings['contractBalance'] >= 10 ether && _uintSettings['contractBalance'] < 100 ether) {\n\t\t\t\t_uintSettings['maxProfitAsPercentOfHouse'] = 100000; // 10%\n\t\t\t} else if (_uintSettings['contractBalance'] >= 100 ether && _uintSettings['contractBalance'] < 1000 ether) {\n\t\t\t\t_uintSettings['maxProfitAsPercentOfHouse'] = 50000; // 5%\n\t\t\t} else {\n\t\t\t\t_uintSettings['maxProfitAsPercentOfHouse'] = 10000; // 1%\n\t\t\t}\n\t\t\t_uintSettings['maxProfitHonor'] = _uintSettings['maxProfit'];\n\t\t\t_uintSettings['contractBalanceHonor'] = _uintSettings['contractBalance'];\n\t\t\t_uintSettings['minBankrollHonor'] = _uintSettings['minBankroll'];\n\t\t\t_uintSettings['tokenExchangeMinBankrollHonor'] = _uintSettings['tokenExchangeMinBankroll'];\n\t\t\t_uintSettings['totalWeiLostHonor'] = _uintSettings['totalWeiLost'];\n\t\t\t_uintSettings['maxProfitBlockNum'] = block.number;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Updates token to Wei exchange rate.\n\t * The exchange rate will be updated everytime there is a transaction happens in spinwin.\n\t * If contract is killed, we don't need to do anything\n\t */\n\tfunction _updateTokenToWeiExchangeRate() internal {\n\t\tif (!_boolSettings['contractKilled']) {\n\t\t\tif (_uintSettings['contractBalance'] >= _uintSettings['tokenExchangeMinBankroll'] && _spintoken.getTotalSupply() > 0) {\n\t\t\t\t/**\n\t\t\t\t * tokenToWeiExchangeRate is ETH in 36 decimals or WEI in 18 decimals to account for\n\t\t\t\t * the state when token's totalSupply is 10^18 more than contractBalance.\n\t\t\t\t * Otherwise the tokenToWeiExchangeRate will always be 0.\n\t\t\t\t * This means, in the exchange token function, we need to divide\n\t\t\t\t * tokenToWeiExchangeRate with CURRENCY_DIVISOR\n\t\t\t\t */\n\t\t\t\t_uintSettings['tokenToWeiExchangeRate'] = ((_uintSettings['contractBalance'].sub(_uintSettings['tokenExchangeMinBankroll'])).mul(CURRENCY_DIVISOR).mul(CURRENCY_DIVISOR).div(_uintSettings['exchangeAmountDivisor'])).div(_spintoken.getTotalSupply().mul(_uintSettings['tokenExchangeRatio']).div(TWO_DECIMALS));\n\t\t\t} else {\n\t\t\t\t_uintSettings['tokenToWeiExchangeRate'] = 0;\n\t\t\t}\n\n\t\t\tif (block.number > _uintSettings['tokenToWeiExchangeRateBlockNum'].add(_uintSettings['tokenExchangeBlockSecurityCount'])) {\n\t\t\t\t_uintSettings['tokenToWeiExchangeRateHonor'] = _uintSettings['tokenToWeiExchangeRate'];\n\t\t\t\t_uintSettings['tokenToWeiExchangeRateBlockNum'] = block.number;\n\t\t\t\temit LogUpdateTokenToWeiExchangeRate(_uintSettings['tokenToWeiExchangeRateHonor'], _uintSettings['tokenToWeiExchangeRateBlockNum']);\n\t\t\t}\n\t\t}\n\t}\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000b42f5366792ed7c08995451c1a93780b7554762b"
}