{
  "address": "0x4865a4d8e52e3754fc0e20ad0146660ad053fd44",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Sopow",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-25\n*/\n\npragma solidity ^0.5.0;\n\ncontract Sopow {\n\n    event NewStake(address source, uint256 hash, uint256 value, uint256 target, uint payment);\n    event NewMiner(address miner, uint256 hash, uint payment);\n    event Status(uint min, uint256 target, uint block);\n    event PaidOut(address miner, uint amount);\n\n    address payable service = 0x935F545C5aA388B6846FB7A4c51ED1b180A4eFFF;\n\n    //Set initial values\n    uint min = 1 wei;\n    uint finalBlock = 100000000;\n    uint lastBlock = 7000000;\n    address payable miner = 0x0000000000000000000000000000000000000000;\n    uint256 target = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    uint256 total = 0;\n\n    function getTargetAmount() public view returns(uint) {\n        return min;\n    }\n\n    function getPayment() public view returns(uint) {\n        uint _total = getPreviousBalance();\n        return (_total / 2) + (_total / 4);\n    }\n\n    function getTarget() public view returns(uint) {\n        return target;\n    }\n\n    function getMiner() public view returns(address) {\n        return miner;\n    }\n\n    function getFinalBlock() public view returns(uint) {\n        return finalBlock;\n    }\n\n\n    function getTotal() public view returns(uint) {\n        return total;\n    }\n\n    // ---\n\n    function getPreviousBalance() private view returns(uint) {\n        return address(this).balance - msg.value;\n    }\n\n    function isFinished() private view returns(bool) {\n        return block.number >= getFinalBlock();\n    }\n\n    function tooLate() private view returns(bool) {\n        return block.number >= getFinalBlock() + 11000;\n    }\n\n    function work(uint _target, uint _total, uint _miner, uint _value) private pure returns(uint) {\n        return uint256(keccak256(abi.encodePacked(_target, _total, _miner, _value))) - _value;\n    }\n\n    function getNextPayment() private view returns(uint) {\n        uint _total = address(this).balance;\n        return (_total / 2) + (_total / 4);\n    }\n\n\n    // ---\n\n    function () external payable {\n        if (msg.sender != tx.origin) {\n            return;\n        }\n        payout();\n        uint _nextMinerPayment = getNextPayment();\n        uint _stake = msg.value;\n        uint _hash = work(target, total, uint256(miner), _stake);\n        emit NewStake(msg.sender, _hash, _stake, target, _nextMinerPayment);\n        if (_stake < min) {\n            return;\n        }\n        if (_hash < target) {\n            target = _hash;\n            miner = msg.sender;\n            min = _stake;\n            finalBlock = block.number + (block.number - lastBlock) + 42;\n            if (finalBlock > (block.number + 11000)) {\n                finalBlock =  block.number + 11000;\n            }\n            lastBlock = block.number;\n            total += _stake;\n            emit NewMiner(miner, target, _nextMinerPayment);\n            emit Status(min, target, finalBlock);\n        }\n    }\n\n    function payout() public {\n        if (!isFinished()) {\n            return;\n        }\n        // if nobody requested payout for more than 11000 blocks\n        if (tooLate()) {\n            service.transfer(getPreviousBalance() / 2);\n            min = min / 2;\n            target = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n            lastBlock  = block.number - 11000;\n            finalBlock = block.number + 11000;\n            return;\n        }\n        uint _total = getPreviousBalance();\n        uint _payment = getPayment();\n        uint _fee = _total / 8;\n        miner.transfer(_payment);\n        service.transfer(_fee);\n        emit PaidOut(miner, _payment);\n        min = _total / 64;\n        target = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        lastBlock  = block.number - 11000;\n        finalBlock = block.number + 11000;\n        total = 0;\n        emit Status(min, target, finalBlock);\n    }\n\n}",
  "bytecode": "608060405273935f545c5aa388b6846fb7a4c51ed1b180a4efff6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180556305f5e100600255626acfc06003556000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60055560006006553480156100e257600080fd5b5061092b806100f26000396000f3fe608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063302c11ca1461033e57806363bd1d4a14610395578063775a25e3146103ac57806391ac4b88146103d7578063bb328a7d14610402578063d31cca931461042d578063f00e6a2a14610458575b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156100bd5761033c565b6100c5610483565b60006100cf6107a7565b905060003490506000610120600554600654600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16856107e5565b90507f3cd01c2058c2b0d3a8d3e58ece55745b3f6e47ecf7b462f1a057fce69c4c868533828460055487604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a16001548210156101b95750505061033c565b600554811015610338578060058190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600181905550602a6003544303430101600281905550612af84301600254111561023c57612af843016002819055505b43600381905550816006600082825401925050819055507f54645b2905a66da31b2ef0ecbd0ee8bce8810a2ef9ae30f7cd199a3eb222e6f4600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660055485604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a17fd42cacab4700e77b08a2d33cc97d95a9cb985cdfca3a206cfa4990da46dd181360015460055460025460405180848152602001838152602001828152602001935050505060405180910390a15b5050505b005b34801561034a57600080fd5b50610353610836565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a157600080fd5b506103aa610483565b005b3480156103b857600080fd5b506103c1610860565b6040518082815260200191505060405180910390f35b3480156103e357600080fd5b506103ec61086a565b6040518082815260200191505060405180910390f35b34801561040e57600080fd5b50610417610874565b6040518082815260200191505060405180910390f35b34801561043957600080fd5b506104426108a2565b6040518082815260200191505060405180910390f35b34801561046457600080fd5b5061046d6108ac565b6040518082815260200191505060405180910390f35b61048b6108b6565b1515610496576107a5565b61049e6108c8565b15610575576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60026104e86108de565b8115156104f157fe5b049081150290604051600060405180830381858888f1935050505015801561051d573d6000803e3d6000fd5b50600260015481151561052c57fe5b046001819055507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600581905550612af84303600381905550612af843016002819055506107a5565b600061057f6108de565b9050600061058b610874565b9050600060088381151561059b57fe5b049050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610606573d6000803e3d6000fd5b506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561066e573d6000803e3d6000fd5b507f85614384dd52aa71c3b02d6986abe55274cb38b9b13fc323db17de1b950c2727600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a160408381151561070857fe5b046001819055507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600581905550612af84303600381905550612af8430160028190555060006006819055507fd42cacab4700e77b08a2d33cc97d95a9cb985cdfca3a206cfa4990da46dd181360015460055460025460405180848152602001838152602001828152602001935050505060405180910390a15050505b565b6000803073ffffffffffffffffffffffffffffffffffffffff163190506004818115156107d057fe5b046002828115156107dd57fe5b040191505090565b60008185858585604051602001808581526020018481526020018381526020018281526020019450505050506040516020818303038152906040528051906020012060019004039050949350505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600654905090565b6000600154905090565b60008061087f6108de565b905060048181151561088d57fe5b0460028281151561089a57fe5b040191505090565b6000600254905090565b6000600554905090565b60006108c06108a2565b431015905090565b6000612af86108d56108a2565b01431015905090565b6000343073ffffffffffffffffffffffffffffffffffffffff16310390509056fea165627a7a7230582076a3e6b8c141e3ad543399991fd4828fdff06148d41766c8dcbd2589f77890dc0029"
}