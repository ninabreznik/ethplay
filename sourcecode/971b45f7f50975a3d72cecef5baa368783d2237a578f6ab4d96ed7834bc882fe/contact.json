{
  "address": "0xbd1e7f594600dcaf7f483af55deacec0159a064e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Qobit.com Token",
  "contractName": "ERC20",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\npragma solidity ^0.5.0;\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }    \n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\nlibrary SafeMath {\n    function mul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint a, uint b) internal pure returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract Pausable is Ownable {\n    bool private _paused;\n\n    event Paused(address account);\n    event Unpaused(address account);\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }    \n}\n\ncontract EIP20Interface {\n    function transfer(address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function allowance(address owner, address spender) public view returns (uint256);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract ERC20 is Ownable, Pausable, EIP20Interface {\n    using SafeMath for uint256;\n    \n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n    \n    \n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    constructor() public {\n        _name = \"Qobit.com Token\";\n        _symbol = \"QOB\";\n        _decimals = 8;\n        _totalSupply = 1500000000 * 10 ** uint256(_decimals);\n        _balances[msg.sender] = _totalSupply;\n    }\n    \n    // erc20\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }    \n\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        require(value > 0);\n        _approve(msg.sender, spender, value);\n        return true;\n    }    \n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }    \n    \n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        \n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }    \n    \n    // details\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360008054600160a01b60ff021916905560408051808201909152600f8082527f516f6269742e636f6d20546f6b656e000000000000000000000000000000000060209092019182526100ae91600291610129565b506040805180820190915260038082527f514f42000000000000000000000000000000000000000000000000000000000060209092019182526100f19181610129565b5060048054600860ff19909116179081905560ff16600a0a6359682f00026001819055336000908152600560205260409020556101c4565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016a57805160ff1916838001178555610197565b82800160010185558215610197579182015b8281111561019757825182559160200191906001019061017c565b506101a39291506101a7565b5090565b6101c191905b808211156101a357600081556001016101ad565b90565b610d8b806101d36000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a257806395d89b411161007157806395d89b41146102d3578063a457c2d7146102db578063a9059cbb14610307578063dd62ed3e14610333578063f2fde38b146103615761010b565b806370a08231146102795780638456cb591461029f5780638da5cb5b146102a75780638f32d59b146102cb5761010b565b8063313ce567116100de578063313ce5671461021d578063395093511461023b5780633f4ba83a146102675780635c975abb146102715761010b565b806306fdde0314610110578063095ea7b31461018d57806318160ddd146101cd57806323b872dd146101e7575b600080fd5b610118610387565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101b9600480360360408110156101a357600080fd5b506001600160a01b03813516906020013561041a565b604080519115158252519081900360200190f35b6101d5610494565b60408051918252519081900360200190f35b6101b9600480360360608110156101fd57600080fd5b506001600160a01b0381358116916020810135909116906040013561049a565b610225610548565b6040805160ff9092168252519081900360200190f35b6101b96004803603604081101561025157600080fd5b506001600160a01b038135169060200135610551565b61026f6105e5565b005b6101b96106e7565b6101d56004803603602081101561028f57600080fd5b50356001600160a01b03166106f7565b61026f610712565b6102af610811565b604080516001600160a01b039092168252519081900360200190f35b6101b9610820565b610118610831565b6101b9600480360360408110156102f157600080fd5b506001600160a01b038135169060200135610892565b6101b96004803603604081101561031d57600080fd5b506001600160a01b038135169060200135610926565b6101d56004803603604081101561034957600080fd5b506001600160a01b038135811691602001351661098a565b61026f6004803603602081101561037757600080fd5b50356001600160a01b03166109b5565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156104105780601f106103e557610100808354040283529160200191610410565b820191906000526020600020905b8154815290600101906020018083116103f357829003601f168201915b5050505050905090565b60008054600160a01b900460ff16156104735760408051600160e51b62461bcd0281526020600482015260106024820152600160821b6f14185d5cd8589b194e881c185d5cd95902604482015290519081900360640190fd5b6000821161048057600080fd5b61048b338484610ab4565b50600192915050565b60015490565b60008054600160a01b900460ff16156104f35760408051600160e51b62461bcd0281526020600482015260106024820152600160821b6f14185d5cd8589b194e881c185d5cd95902604482015290519081900360640190fd5b6104fe848484610ba6565b6001600160a01b03841660009081526006602090815260408083203380855292529091205461053e918691610539908663ffffffff610ca816565b610ab4565b5060019392505050565b60045460ff1690565b60008054600160a01b900460ff16156105aa5760408051600160e51b62461bcd0281526020600482015260106024820152600160821b6f14185d5cd8589b194e881c185d5cd95902604482015290519081900360640190fd5b3360008181526006602090815260408083206001600160a01b038816845290915290205461048b91908590610539908663ffffffff610cba16565b6105ed610820565b6106415760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600054600160a01b900460ff166106a25760408051600160e51b62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015290519081900360640190fd5b60008054600160a01b60ff02191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600054600160a01b900460ff1690565b6001600160a01b031660009081526005602052604090205490565b61071a610820565b61076e5760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600054600160a01b900460ff16156107c65760408051600160e51b62461bcd0281526020600482015260106024820152600160821b6f14185d5cd8589b194e881c185d5cd95902604482015290519081900360640190fd5b60008054600160a01b60ff021916600160a01b1790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104105780601f106103e557610100808354040283529160200191610410565b60008054600160a01b900460ff16156108eb5760408051600160e51b62461bcd0281526020600482015260106024820152600160821b6f14185d5cd8589b194e881c185d5cd95902604482015290519081900360640190fd5b3360008181526006602090815260408083206001600160a01b038816845290915290205461048b91908590610539908663ffffffff610ca816565b60008054600160a01b900460ff161561097f5760408051600160e51b62461bcd0281526020600482015260106024820152600160821b6f14185d5cd8589b194e881c185d5cd95902604482015290519081900360640190fd5b61048b338484610ba6565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b6109bd610820565b610a115760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610a5957604051600160e51b62461bcd028152600401808060200182810382526026815260200180610cf46026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316610afc57604051600160e51b62461bcd028152600401808060200182810382526024815260200180610d3c6024913960400191505060405180910390fd5b6001600160a01b038216610b4457604051600160e51b62461bcd028152600401808060200182810382526022815260200180610d1a6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260066020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038216610bee57604051600160e51b62461bcd028152600401808060200182810382526023815260200180610cd16023913960400191505060405180910390fd5b6001600160a01b038316600090815260056020526040902054610c17908263ffffffff610ca816565b6001600160a01b038085166000908152600560205260408082209390935590841681522054610c4c908263ffffffff610cba16565b6001600160a01b0380841660008181526005602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115610cb457fe5b50900390565b600082820183811015610cc957fe5b939250505056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373a165627a7a723058208f2df7ce3f2da6bfa02233da4b7c713bf52f049b3333b58fe59ff0d320ed1e230029"
}