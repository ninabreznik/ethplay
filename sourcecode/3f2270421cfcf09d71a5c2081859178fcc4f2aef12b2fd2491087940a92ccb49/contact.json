{
  "address": "0x1f3fad06ef1e397cf7d4affe00bd2e647261b0cb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LynchpinPublicICO",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-27\n*/\n\npragma solidity 0.4.25;\n\nlibrary SafeMath\n{\n    function mul(uint256 a, uint256 b) internal pure\n    returns (uint256)\n    {\n        uint256 c = a * b;\n\n        assert(a == 0 || c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure\n    returns (uint256)\n    {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure\n    returns (uint256)\n    {\n        assert(b <= a);\n\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure\n    returns (uint256)\n    {\n        uint256 c = a + b;\n\n        assert(c >= a);\n\n        return c;\n    }\n}\n\ninterface ERC20\n{\n    function totalSupply() view external returns (uint _totalSupply);\n    function balanceOf(address _owner) view external returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) view external returns (uint remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract LynchpinToken is ERC20\n{\n    using SafeMath for uint256;\n\n    string  public name        = \"Lynchpin\";\n    string  public symbol      = \"LYN\";\n    uint8   public decimals    = 18;\n    uint    public totalSupply = 5000000 * (10 ** uint(decimals));\n    address public owner       = 0xAc983022185b95eF2B2C7219143483BD0C65Ecda;\n\n    mapping (address => uint) public balanceOf;\n    mapping (address => mapping (address => uint)) public allowance;\n\n    constructor() public\n    {\n        balanceOf[owner] = totalSupply;\n    }\n\n    function totalSupply() view external returns (uint _totalSupply)\n    {\n        return totalSupply;\n    }\n\n    function balanceOf(address _owner) view external returns (uint balance)\n    {\n        return balanceOf[_owner];\n    }\n\n    function allowance(address _owner, address _spender) view external returns (uint remaining)\n    {\n        return allowance[_owner][_spender];\n    }\n    function _transfer(address _from, address _to, uint _value) internal\n    {\n        require(_to != 0x0);\n\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n    }\n\n    function transfer(address _to, uint _value) public returns (bool success)\n    {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success)\n    {\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint _value) public returns (bool success)\n    {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // disallow incoming ether to this contract\n    function () public\n    {\n        revert();\n    }\n}\n\ncontract Ownable\n{\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor(address _owner) public\n    {\n        owner = _owner;\n    }\n\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner\n    {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract LynchpinPublicICO is Ownable(0xAc983022185b95eF2B2C7219143483BD0C65Ecda)\n{\n    using SafeMath for uint256;\n\n    LynchpinToken public lynT = LynchpinToken(0xB0B1685f55843D03739c7D9b0A230F1B7DcF03D5);\n\n    uint256 public tokeninOneEther;\n    uint256 public maxTokensToSell = 2000000 * 10**18;\n    uint256 public tokenSold;\n    bool crowdsaleClosed = false;\n\n    mapping(address => bool) public isWhitelisted;\n\n    event LogAddedToWhitelist(address indexed _contributor);\n    event LogTokenRateUpdated(uint256 _newRate);\n    event LogSaleClosed();\n\n    constructor(uint256 _tokeninOneEther) public\n    {\n        require (_tokeninOneEther > 0);\n        isWhitelisted[owner] = true;\n        tokeninOneEther = _tokeninOneEther;\n        emit LogTokenRateUpdated(_tokeninOneEther);\n    }\n\n    function () public payable\n    {\n        require(!crowdsaleClosed);\n        require(isWhitelisted[msg.sender]);\n\n        uint256 amountToSend = msg.value * tokeninOneEther;\n\n        require (tokenSold.add(amountToSend) <= maxTokensToSell);\n\n        lynT.transfer(msg.sender, amountToSend);\n        tokenSold += amountToSend;\n        owner.transfer(address(this).balance);\n    }\n\n    function addContributor(address _contributor) external onlyOwner\n    {\n        require(_contributor != address(0));\n        require(!isWhitelisted[_contributor]);\n        isWhitelisted[_contributor] = true;\n        emit LogAddedToWhitelist(_contributor);\n    }\n\n    function updateTokenRate(uint256 _tokeninOneEther ) external onlyOwner\n    {\n        require (_tokeninOneEther > 0);\n        tokeninOneEther = _tokeninOneEther;\n        emit LogTokenRateUpdated(_tokeninOneEther);\n    }\n\n    function closeSale() external onlyOwner\n    {\n        lynT.transfer(msg.sender, lynT.balanceOf(address(this)));\n        owner.transfer(address(this).balance);\n        crowdsaleClosed = true;\n        emit LogSaleClosed();\n    }\n}",
  "bytecode": "608060405273b0b1685f55843d03739c7d9b0a230f1b7dcf03d5600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a01a784379d99db420000006003556000600560006101000a81548160ff02191690831515021790555034801561008f57600080fd5b50604051602080610e7b8339810180604052810190808051906020019092919050505073ac983022185b95ef2b2c7219143483bd0c65ecda806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060008111151561011757600080fd5b6001600660008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550806002819055507fa8167a494fd63659986a35402ba134163c3e8c8f7a0ce1358588e3797419154c816040518082815260200191505060405180910390a150610c9d806101de6000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633af32abf146102d95780634fe5b83014610334578063519ee19e1461038b5780635a03d679146103b65780638da5cb5b146103e15780639cd337de14610438578063b579184f14610463578063c6c85ca5146104a6578063ee55efee146104d3578063f2fde38b146104ea575b6000600560009054906101000a900460ff161515156100c257600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561011a57600080fd5b600254340290506003546101398260045461052d90919063ffffffff16565b1115151561014657600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561020b57600080fd5b505af115801561021f573d6000803e3d6000fd5b505050506040513d602081101561023557600080fd5b810190808051906020019092919050505050806004600082825401925050819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156102d5573d6000803e3d6000fd5b5050005b3480156102e557600080fd5b5061031a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061054b565b604051808215151515815260200191505060405180910390f35b34801561034057600080fd5b5061034961056b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039757600080fd5b506103a0610591565b6040518082815260200191505060405180910390f35b3480156103c257600080fd5b506103cb610597565b6040518082815260200191505060405180910390f35b3480156103ed57600080fd5b506103f661059d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561044457600080fd5b5061044d6105c2565b6040518082815260200191505060405180910390f35b34801561046f57600080fd5b506104a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105c8565b005b3480156104b257600080fd5b506104d160048036038101908080359060200190929190505050610756565b005b3480156104df57600080fd5b506104e8610801565b005b3480156104f657600080fd5b5061052b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b1c565b005b600080828401905083811015151561054157fe5b8091505092915050565b60066020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561062357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561065f57600080fd5b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156106b857600080fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fd824f5e4ab5a8ed29c8abf265102c44a8a18e1ccf3279b48f231a572bd183c7260405160405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107b157600080fd5b6000811115156107c057600080fd5b806002819055507fa8167a494fd63659986a35402ba134163c3e8c8f7a0ce1358588e3797419154c816040518082815260200191505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561085c57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610a1857600080fd5b505af1158015610a2c573d6000803e3d6000fd5b505050506040513d6020811015610a4257600080fd5b8101908080519060200190929190505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610ad2573d6000803e3d6000fd5b506001600560006101000a81548160ff0219169083151502179055507fb6eafcae528942c33b3294eacf17907d3f993a5fd90f492627168071d97905d460405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610bb357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a723058208a3c896349498807123ece9e3f7a7abdcecc48aa51870bc879d1e72223c20b9900290000000000000000000000000000000000000000000000000000000000000018",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000018"
}