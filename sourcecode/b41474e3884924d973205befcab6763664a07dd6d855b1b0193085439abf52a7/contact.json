{
  "address": "0x7f4404db6a3f4d3cfb41d5920d81d44d64759235",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Yumerium",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-16\n*/\n\npragma solidity ^0.4.23;\n\n \n\n \n\n \n\ncontract owned {\n\n \n\n    address public owner;\n\n \n\n \n\n \n\n    function owned() public {\n\n \n\n        owner = msg.sender;\n\n \n\n    }\n\n \n\n \n\n \n\n    modifier onlyOwner {\n\n \n\n        require(msg.sender == owner);\n\n \n\n        _;\n\n \n\n    }\n\n \n\n \n\n \n\n    function transferOwnership(address newOwner) onlyOwner public {\n\n \n\n        owner = newOwner;\n\n \n\n    }\n\n \n\n}\n\n \n\n \n\n \n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\n \n\n \n\n \n\ncontract TokenERC20 {\n\n \n\n    // Public variables of the token\n\n \n\n    string public name = \"Yumerium Token\";\n\n \n\n    string public symbol = \"YUM\";\n\n \n\n    uint8 public decimals = 8;\n\n \n\n    uint256 public totalSupply = 808274854 * 10 ** uint256(decimals);\n\n \n\n \n\n    // This creates an array with all balances\n\n \n\n    mapping (address => uint256) public balanceOf;\n\n \n\n    mapping (address => mapping (address => uint256)) public allowance;\n\n \n    \n \n\n \n\n    // This generates a public event on the blockchain that will notify clients\n\n \n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n \n\n \n\n \n\n    // This notifies clients about the amount burnt\n\n \n\n    event Burn(address indexed from, uint256 value);\n\n \n\n \n\n \n\n    /**\n\n \n\n     * Constrctor function\n\n \n\n     *\n\n \n\n     * Initializes contract with initial supply tokens to the creator of the contract\n\n \n\n     */\n\n \n\n    \n\n \n\n \n\n \n\n    /**\n\n \n\n     * Internal transfer, only can be called by this contract\n\n \n\n     */\n\n \n\n    function _transfer(address _from, address _to, uint _value) internal {\n\n \n\n        // Prevent transfer to 0x0 address. Use burn() instead\n\n \n\n        require(_to != 0x0);\n\n \n\n        // Check if the sender has enough\n\n \n\n        require(balanceOf[_from] >= _value);\n\n \n\n        // Check for overflows\n\n \n\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n\n \n\n        // Save this for an assertion in the future\n\n \n\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\n \n\n        // Subtract from the sender\n\n \n\n        balanceOf[_from] -= _value;\n\n \n\n        // Add the same to the recipient\n\n \n\n        balanceOf[_to] += _value;\n\n \n\n        Transfer(_from, _to, _value);\n\n \n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n\n \n\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\n \n\n    }\n\n \n\n \n\n \n\n    /**\n\n \n\n     * Transfer tokens\n\n \n\n     *\n\n \n\n     * Send `_value` tokens to `_to` from your account\n\n \n\n     *\n\n \n\n     * @param _to The address of the recipient\n\n \n\n     * @param _value the amount to send\n\n \n\n     */\n\n \n\n    function transfer(address _to, uint256 _value) public {\n\n \n\n        _transfer(msg.sender, _to, _value);\n\n \n\n    }\n    \n    \n    \n\n \n\n \n\n \n\n    /**\n\n \n\n     * Transfer tokens from other address\n\n \n\n     *\n\n \n\n     * Send `_value` tokens to `_to` in behalf of `_from`\n\n \n\n     *\n\n \n\n     * @param _from The address of the sender\n\n \n\n     * @param _to The address of the recipient\n\n \n\n     * @param _value the amount to send\n\n \n\n     */\n\n \n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\n \n\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n\n \n\n        allowance[_from][msg.sender] -= _value;\n\n \n\n        _transfer(_from, _to, _value);\n\n \n\n        return true;\n\n \n\n    }\n\n \n\n \n\n \n\n    /**\n\n \n\n     * Set allowance for other address\n\n \n\n     *\n\n \n\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\n \n\n     *\n\n \n\n     * @param _spender The address authorized to spend\n\n \n\n     * @param _value the max amount they can spend\n\n \n\n     */\n\n \n\n    function approve(address _spender, uint256 _value) public\n\n \n\n        returns (bool success) {\n\n \n\n        allowance[msg.sender][_spender] = _value;\n\n \n\n        return true;\n\n \n\n    }\n\n \n\n \n\n \n\n    /**\n\n \n\n     * Set allowance for other address and notify\n\n \n\n     *\n\n \n\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\n \n\n     *\n\n \n\n     * @param _spender The address authorized to spend\n\n \n\n     * @param _value the max amount they can spend\n\n \n\n     * @param _extraData some extra information to send to the approved contract\n\n \n\n     */\n\n \n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\n \n\n        public\n\n \n\n        returns (bool success) {\n\n \n\n        tokenRecipient spender = tokenRecipient(_spender);\n\n \n\n        if (approve(_spender, _value)) {\n\n \n\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n \n\n            return true;\n\n \n\n        }\n\n \n\n    }\n\n \n\n \n\n \n\n    /**\n\n \n\n     * Destroy tokens\n\n \n\n     *\n\n \n\n     * Remove `_value` tokens from the system irreversibly\n\n \n\n     *\n\n \n\n     * @param _value the amount of money to burn\n\n \n\n     */\n\n \n\n    function burn(uint256 _value) public returns (bool success) {\n\n \n\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\n \n\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n\n \n\n        totalSupply -= _value;                      // Updates totalSupply\n\n \n\n        Burn(msg.sender, _value);\n\n \n\n        return true;\n\n \n\n    }\n\n \n\n \n\n \n\n    /**\n\n \n\n     * Destroy tokens from other account\n\n \n\n     *\n\n \n\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\n \n\n     *\n\n \n\n     * @param _from the address of the sender\n\n \n\n     * @param _value the amount of money to burn\n\n \n\n     */\n\n \n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n\n \n\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\n \n\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n\n \n\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\n \n\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\n \n\n        totalSupply -= _value;                              // Update totalSupply\n\n \n\n        Burn(_from, _value);\n\n \n\n        return true;\n\n \n\n    }\n\n \n\n}\n\n \n\n \n\n \n\n/******************************************/\n\n \n\n/*       ADVANCED TOKEN STARTS HERE       */\n\n \n\n/******************************************/\n\n \n\n \n\n \n\ncontract Yumerium is owned, TokenERC20 {\n\n    address public saleAddress;\n    \n\n    mapping (address => bool) public frozenAccount;\n\n    \n\n    event Buy(address indexed to, uint256 value);\n\n    \n\n    event Sell(address indexed from, uint256 value);\n\n    event Sale(address indexed to, uint256 value);\n \n\n    /* This generates a public event on the blockchain that will notify clients */\n\n \n\n    event FrozenFunds(address target, bool frozen);\n\n    \n\n    function Yumerium() public {\n\n        balanceOf[this] = totalSupply; \n        \n\n    }\n    \n    \n    function sale(address _to, uint256 _value) public {\n        require (msg.sender == saleAddress);\n        require (balanceOf[this] >= _value);\n        \n        balanceOf[this] -= _value;\n        balanceOf[_to] += _value;\n        Sale(_to, _value);\n        Transfer(this, _to, _value);\n    }\n    \n    \n    function privateSale(address _to, uint256 _value) onlyOwner public {\n        require (balanceOf[this] >= _value);\n        \n        balanceOf[this] -= _value;\n        balanceOf[_to] += _value;\n        Sale(_to, _value);\n        Transfer(this, _to, _value);\n    }\n    \n    \n    \n    function changeSaleAddress(address _saleAddress) onlyOwner public {\n        saleAddress = _saleAddress;\n    }\n \n\n    /* Internal transfer, only can be called by this contract */\n\n \n\n    function _transfer(address _from, address _to, uint _value) internal {\n\n \n\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n\n \n\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n\n \n\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n\n \n\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n\n \n\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n\n \n\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n\n \n\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n\n \n\n        Transfer(_from, _to, _value);\n\n        \n\n    }\n\n \n\n \n\n \n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n\n \n\n    /// @param target Address to receive the tokens\n\n \n\n    /// @param mintedAmount the amount of tokens it will receive\n\n \n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n\n \n\n        balanceOf[target] += mintedAmount;\n\n \n\n        totalSupply += mintedAmount;\n\n \n\n        Transfer(0, this, mintedAmount);\n\n \n\n        Transfer(this, target, mintedAmount);\n\n \n\n    }\n\n \n\n \n\n \n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n\n \n\n    /// @param target Address to be frozen\n\n \n\n    /// @param freeze either to freeze it or not\n\n \n\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n\n \n\n        frozenAccount[target] = freeze;\n\n \n\n        FrozenFunds(target, freeze);\n\n \n\n    }\n\n \n\n \n\n\n    \n\n    \n\n    function sell(uint256 amount) payable public {\n\n        _transfer(msg.sender, owner, amount);\n\n\n        Sell(msg.sender, amount);\n\n    }\n\n \n\n \n\n \n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleAddress\",\"type\":\"address\"}],\"name\":\"changeSaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"privateSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "60806040526040805190810160405280600e81526020017f59756d657269756d20546f6b656e000000000000000000000000000000000000815250600190805190602001906200005192919062000175565b506040805190810160405280600381526020017f59554d0000000000000000000000000000000000000000000000000000000000815250600290805190602001906200009f92919062000175565b506008600360006101000a81548160ff021916908360ff160217905550600360009054906101000a900460ff1660ff16600a0a63302d4ba602600455348015620000e857600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600454600560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000224565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001b857805160ff1916838001178555620001e9565b82800160010185558215620001e9579182015b82811115620001e8578251825591602001919060010190620001cb565b5b509050620001f89190620001fc565b5090565b6200022191905b808211156200021d57600081600090555060010162000203565b5090565b90565b611c7880620002346000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d578063095ea7b3146101bd57806318160ddd14610222578063184bd3941461024d57806323b872dd14610290578063313ce5671461031557806342966c6814610346578063611efc091461038b57806370a08231146103d857806379c650681461042f57806379cc67901461047c5780638da5cb5b146104e157806395d89b4114610538578063a9059cbb146105c8578063b414d4b614610615578063cae9ca5114610670578063d50a3d2c1461071b578063dd62ed3e14610768578063e4849b32146107df578063e724529c146107ff578063f2fde38b1461084e578063fffe088d14610891575b600080fd5b34801561013957600080fd5b506101426108e8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610182578082015181840152602081019050610167565b50505050905090810190601f1680156101af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c957600080fd5b50610208600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610986565b604051808215151515815260200191505060405180910390f35b34801561022e57600080fd5b50610237610a13565b6040518082815260200191505060405180910390f35b34801561025957600080fd5b5061028e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a19565b005b34801561029c57600080fd5b506102fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ab8565b604051808215151515815260200191505060405180910390f35b34801561032157600080fd5b5061032a610be5565b604051808260ff1660ff16815260200191505060405180910390f35b34801561035257600080fd5b5061037160048036038101908080359060200190929190505050610bf8565b604051808215151515815260200191505060405180910390f35b34801561039757600080fd5b506103d6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cfc565b005b3480156103e457600080fd5b50610419600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ef7565b6040518082815260200191505060405180910390f35b34801561043b57600080fd5b5061047a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f0f565b005b34801561048857600080fd5b506104c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611080565b604051808215151515815260200191505060405180910390f35b3480156104ed57600080fd5b506104f661129a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054457600080fd5b5061054d6112bf565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561058d578082015181840152602081019050610572565b50505050905090810190601f1680156105ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105d457600080fd5b50610613600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061135d565b005b34801561062157600080fd5b50610656600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061136c565b604051808215151515815260200191505060405180910390f35b34801561067c57600080fd5b50610701600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061138c565b604051808215151515815260200191505060405180910390f35b34801561072757600080fd5b50610766600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061150f565b005b34801561077457600080fd5b506107c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611709565b6040518082815260200191505060405180910390f35b6107fd6004803603810190808035906020019092919050505061172e565b005b34801561080b57600080fd5b5061084c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506117ab565b005b34801561085a57600080fd5b5061088f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118d0565b005b34801561089d57600080fd5b506108a661196e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561097e5780601f106109535761010080835404028352916020019161097e565b820191906000526020600020905b81548152906001019060200180831161096157829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a7457600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b4557600080fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610bda848484611994565b600190509392505050565b600360009054906101000a900460ff1681565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610c4857600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d5857600080fd5b80600560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610da657600080fd5b80600560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff167fc6851889326b4ff916523ef06f539b4cf0b81d78fc6e0f97c30e6223d1831990826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60056020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f6a57600080fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806004600082825401925050819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156110d057600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561115b57600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816004600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a26001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113555780601f1061132a57610100808354040283529160200191611355565b820191906000526020600020905b81548152906001019060200180831161133857829003601f168201915b505050505081565b611368338383611994565b5050565b60086020528060005260406000206000915054906101000a900460ff1681565b60008084905061139c8585610986565b15611506578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561149657808201518184015260208101905061147b565b50505050905090810190601f1680156114c35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156114e557600080fd5b505af11580156114f9573d6000803e3d6000fd5b5050505060019150611507565b5b509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561156a57600080fd5b80600560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156115b857600080fd5b80600560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff167fc6851889326b4ff916523ef06f539b4cf0b81d78fc6e0f97c30e6223d1831990826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6006602052816000526040600020602052806000526040600020600091509150505481565b61175a336000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611994565b3373ffffffffffffffffffffffffffffffffffffffff167f5e5e995ce3133561afceaa51a9a154d5db228cd7525d34df5185582c18d3df09826040518082815260200191505060405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561180657600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561192b57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156119ba57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611a0857600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515611a9657600080fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611aef57600080fd5b600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611b4857600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a723058203de452be90336fb748647d37cbb480ea8abed88a8be7854cdc489607ab01427a0029"
}