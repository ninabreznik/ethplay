{
  "address": "0xd21065f1f5376ba9cb151dac3f4242a97630d735",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AnimalMarketplace",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-27\n*/\n\npragma solidity 0.4.24;\n\n// File: openzeppelin-solidity/contracts/AddressUtils.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes _data\n  )\n    public;\n}\n\n// File: contracts/IMarketplace.sol\n\ncontract IMarketplace {\n    function createAuction(\n        uint256 _tokenId,\n        uint128 startPrice,\n        uint128 endPrice,\n        uint128 duration\n    )\n        external;\n}\n\n// File: contracts/AnimalMarketplace.sol\n\ncontract AnimalMarketplace is Ownable, IMarketplace {\n    using AddressUtils for address;\n    using SafeMath for uint256;\n    uint8 internal percentFee = 5;\n\n    ERC721Basic private erc721Contract;\n\n    struct Auction {\n        address tokenOwner;\n        uint256 startTime;\n        uint128 startPrice;\n        uint128 endPrice;\n        uint128 duration;\n    }\n\n    struct AuctionEntry {\n        uint256 keyIndex;\n        Auction value;\n    }\n\n    struct TokenIdAuctionMap {\n        mapping(uint256 => AuctionEntry) data;\n        uint256[] keys;\n    }\n\n    TokenIdAuctionMap private auctions;\n\n    event AuctionBoughtEvent(\n        uint256 tokenId,\n        address previousOwner,\n        address newOwner,\n        uint256 pricePaid\n    );\n\n    event AuctionCreatedEvent(\n        uint256 tokenId,\n        uint128 startPrice,\n        uint128 endPrice,\n        uint128 duration\n    );\n\n    event AuctionCanceledEvent(uint256 tokenId);\n\n    modifier isNotFromContract() {\n        require(!msg.sender.isContract());\n        _;\n    }\n\n    constructor(ERC721Basic _erc721Contract) public {\n        erc721Contract = _erc721Contract;\n    }\n\n    // \"approve\" in game contract will revert if sender is not token owner\n    function createAuction(\n        uint256 _tokenId,\n        uint128 _startPrice,\n        uint128 _endPrice,\n        uint128 _duration\n    )\n        external\n    {\n        // this can be only called from game contract\n        require(msg.sender == address(erc721Contract));\n\n        AuctionEntry storage entry = auctions.data[_tokenId];\n        require(entry.keyIndex == 0);\n\n        address tokenOwner = erc721Contract.ownerOf(_tokenId);\n        erc721Contract.transferFrom(tokenOwner, address(this), _tokenId);\n\n        entry.value = Auction({\n            tokenOwner: tokenOwner,\n            startTime: block.timestamp,\n            startPrice: _startPrice,\n            endPrice: _endPrice,\n            duration: _duration\n        });\n\n        entry.keyIndex = ++auctions.keys.length;\n        auctions.keys[entry.keyIndex - 1] = _tokenId;\n\n        emit AuctionCreatedEvent(_tokenId, _startPrice, _endPrice, _duration);\n    }\n\n    function cancelAuction(uint256 _tokenId) external {\n        AuctionEntry storage entry = auctions.data[_tokenId];\n        Auction storage auction = entry.value;\n        address sender = msg.sender;\n        require(sender == auction.tokenOwner);\n        erc721Contract.transferFrom(address(this), sender, _tokenId);\n        deleteAuction(_tokenId, entry);\n        emit AuctionCanceledEvent(_tokenId);\n    }\n\n    function buyAuction(uint256 _tokenId)\n        external\n        payable\n        isNotFromContract\n    {\n        AuctionEntry storage entry = auctions.data[_tokenId];\n        require(entry.keyIndex > 0);\n        Auction storage auction = entry.value;\n        address sender = msg.sender;\n        address tokenOwner = auction.tokenOwner;\n        uint256 auctionPrice = calculateCurrentPrice(auction);\n        uint256 pricePaid = msg.value;\n\n        require(pricePaid >= auctionPrice);\n        deleteAuction(_tokenId, entry);\n\n        refundSender(sender, pricePaid, auctionPrice);\n        payTokenOwner(tokenOwner, auctionPrice);\n        erc721Contract.transferFrom(address(this), sender, _tokenId);\n        emit AuctionBoughtEvent(_tokenId, tokenOwner, sender, auctionPrice);\n    }\n\n    function getAuctionByTokenId(uint256 _tokenId)\n        external\n        view\n        returns (\n            uint256 tokenId,\n            address tokenOwner,\n            uint128 startPrice,\n            uint128 endPrice,\n            uint256 startTime,\n            uint128 duration,\n            uint256 currentPrice,\n            bool exists\n        )\n    {\n        AuctionEntry storage entry = auctions.data[_tokenId];\n        Auction storage auction = entry.value;\n        uint256 calculatedCurrentPrice = calculateCurrentPrice(auction);\n        return (\n            entry.keyIndex > 0 ? _tokenId : 0,\n            auction.tokenOwner,\n            auction.startPrice,\n            auction.endPrice,\n            auction.startTime,\n            auction.duration,\n            calculatedCurrentPrice,\n            entry.keyIndex > 0\n        );\n    }\n\n    function getAuctionByIndex(uint256 _auctionIndex)\n        external\n        view\n        returns (\n            uint256 tokenId,\n            address tokenOwner,\n            uint128 startPrice,\n            uint128 endPrice,\n            uint256 startTime,\n            uint128 duration,\n            uint256 currentPrice,\n            bool exists\n        )\n    {\n        // for consistency with getAuctionByTokenId when returning invalid auction - otherwise it would throw error\n        if (_auctionIndex >= auctions.keys.length) {\n            return (0, address(0), 0, 0, 0, 0, 0, false);\n        }\n\n        uint256 currentTokenId = auctions.keys[_auctionIndex];\n        Auction storage auction = auctions.data[currentTokenId].value;\n        uint256 calculatedCurrentPrice = calculateCurrentPrice(auction);\n        return (\n            currentTokenId,\n            auction.tokenOwner,\n            auction.startPrice,\n            auction.endPrice,\n            auction.startTime,\n            auction.duration,\n            calculatedCurrentPrice,\n            true\n        );\n    }\n\n    function getAuctionsCount() external view returns (uint256 auctionsCount) {\n        return auctions.keys.length;\n    }\n\n    function isOnAuction(uint256 _tokenId) public view returns (bool onAuction) {\n        return auctions.data[_tokenId].keyIndex > 0;\n    }\n\n    function withdrawContract() public onlyOwner {\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function refundSender(address _sender, uint256 _pricePaid, uint256 _auctionPrice) private {\n        uint256 etherToRefund = _pricePaid.sub(_auctionPrice);\n        if (etherToRefund > 0) {\n            _sender.transfer(etherToRefund);\n        }\n    }\n\n    function payTokenOwner(address _tokenOwner, uint256 _auctionPrice) private {\n        uint256 etherToPay = _auctionPrice.sub(_auctionPrice * percentFee / 100);\n        if (etherToPay > 0) {\n            _tokenOwner.transfer(etherToPay);\n        }\n    }\n\n    function deleteAuction(uint256 _tokenId, AuctionEntry storage _entry) private {\n        uint256 keysLength = auctions.keys.length;\n        if (_entry.keyIndex <= keysLength) {\n            // Move an existing element into the vacated key slot.\n            auctions.data[auctions.keys[keysLength - 1]].keyIndex = _entry.keyIndex;\n            auctions.keys[_entry.keyIndex - 1] = auctions.keys[keysLength - 1];\n            auctions.keys.length = keysLength - 1;\n            delete auctions.data[_tokenId];\n        }\n    }\n\n    function calculateCurrentPrice(Auction storage _auction) private view returns (uint256) {\n        uint256 secondsInProgress = block.timestamp - _auction.startTime;\n\n        if (secondsInProgress >= _auction.duration) {\n            return _auction.endPrice;\n        }\n\n        int256 totalPriceChange = int256(_auction.endPrice) - int256(_auction.startPrice);\n        int256 currentPriceChange =\n            totalPriceChange * int256(secondsInProgress) / int256(_auction.duration);\n\n        int256 calculatedPrice = int256(_auction.startPrice) + int256(currentPriceChange);\n\n        return uint256(calculatedPrice);\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_startPrice\",\"type\":\"uint128\"},{\"name\":\"_endPrice\",\"type\":\"uint128\"},{\"name\":\"_duration\",\"type\":\"uint128\"}],\"name\":\"createAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOnAuction\",\"outputs\":[{\"name\":\"onAuction\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAuctionByTokenId\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"startPrice\",\"type\":\"uint128\"},{\"name\":\"endPrice\",\"type\":\"uint128\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint128\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auctionIndex\",\"type\":\"uint256\"}],\"name\":\"getAuctionByIndex\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"startPrice\",\"type\":\"uint128\"},{\"name\":\"endPrice\",\"type\":\"uint128\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint128\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuctionsCount\",\"outputs\":[{\"name\":\"auctionsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_erc721Contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"name\":\"AuctionBoughtEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"endPrice\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint128\"}],\"name\":\"AuctionCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCanceledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526000805460a060020a60ff0219167405000000000000000000000000000000000000000017905534801561003757600080fd5b50604051602080610df1833981016040525160008054600160a060020a0319908116331790915560018054600160a060020a0390931692909116919091179055610d6b806100866000396000f3006080604052600436106100ae5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663011879db81146100b357806337e246ad146100e5578063715018a61461011157806377413267146101265780638da5cb5b1461019757806396b5a755146101c85780639da9df3e146101e0578063b1ddf52f146101f5578063e45c18791461020d578063f2fde38b14610234578063fd8acc4214610255575b600080fd5b3480156100bf57600080fd5b506100e36004356001608060020a0360243581169060443581169060643516610260565b005b3480156100f157600080fd5b506100fd600435610506565b604080519115158252519081900360200190f35b34801561011d57600080fd5b506100e3610519565b34801561013257600080fd5b5061013e600435610585565b60408051988952600160a060020a0390971660208901526001608060020a03958616888801529385166060880152608087019290925290921660a085015260c0840191909152151560e083015251908190036101000190f35b3480156101a357600080fd5b506101ac61062c565b60408051600160a060020a039092168252519081900360200190f35b3480156101d457600080fd5b506100e360043561063b565b3480156101ec57600080fd5b506100e3610734565b34801561020157600080fd5b5061013e60043561077b565b34801561021957600080fd5b50610222610860565b60408051918252519081900360200190f35b34801561024057600080fd5b506100e3600160a060020a0360043516610867565b6100e3600435610887565b6001546000908190600160a060020a0316331461027c57600080fd5b600086815260026020526040902080549092501561029957600080fd5b600154604080517f6352211e000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a0390921691636352211e916024808201926020929091908290030181600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050506040513d602081101561032a57600080fd5b5051600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038085166004830152306024830152604482018b905291519394509116916323b872dd9160648082019260009290919082900301818387803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b50506040805160a081018252600160a060020a03851680825242602083018190526001608060020a03808c169484018590528a8116606085018190528a821660809095018590526001808b01805473ffffffffffffffffffffffffffffffffffffffff191690951790945560028a01929092556003808a0180547001000000000000000000000000000000009094026fffffffffffffffffffffffffffffffff199485169097179092169590951790556004880180549091169092179091558154019250610485915082610d02565b8083556003805488926000190190811061049b57fe5b60009182526020918290200191909155604080518881526001608060020a0380891693820193909352828716818301529185166060830152517f1f3fa07eef312d01584476eae20b7e2ec9c47e5e9dbe030f1b6f4fd2e4e98ebd9181900360800190a1505050505050565b6000908152600260205260408120541190565b600054600160a060020a0316331461053057600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000818152600260205260408120819081908190819081908190819060018101826105af826109f5565b905060008360000154116105c45760006105c6565b8b5b82546002840154600185015460038601548754949f50600160a060020a039093169d506001608060020a038083169d5070010000000000000000000000000000000090920482169b5099501696509094506000109250835b505050919395975091939597565b600054600160a060020a031681565b60008181526002602052604090206001810180543390600160a060020a0316811461066557600080fd5b600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a03848116602483015260448201889052915191909216916323b872dd91606480830192600092919082900301818387803b1580156106d957600080fd5b505af11580156106ed573d6000803e3d6000fd5b505050506106fb8484610aa7565b6040805185815290517fed8fb000ffbca95a3d18bf4e255c9afd07b522bebf471f94919571d2cafaa4a79181900360200190a150505050565b600054600160a060020a0316331461074b57600080fd5b6040513390303180156108fc02916000818181858888f19350505050158015610778573d6000803e3d6000fd5b50565b60008060008060008060008060008060006002600101805490508c1015156107bb5760009a508a995089985088975087965086955085945084935061061e565b600380548d9081106107c957fe5b906000526020600020015492506002600001600084815260200190815260200160002060010191506107fa826109f5565b825460028401546001808601546003870154979f50600160a060020a039093169d506001608060020a038083169d5070010000000000000000000000000000000090920482169b5091995094909416965094509192508991505050919395975091939597565b6003545b90565b600054600160a060020a0316331461087e57600080fd5b61077881610b98565b6000808080808061089733610c15565b156108a157600080fd5b60008781526002602052604081208054909750116108be57600080fd5b600186018054909550339450600160a060020a031692506108de856109f5565b9150349050818110156108f057600080fd5b6108fa8787610aa7565b610905848284610c1d565b61090f8383610c78565b600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a038781166024830152604482018b9052915191909216916323b872dd91606480830192600092919082900301818387803b15801561098357600080fd5b505af1158015610997573d6000803e3d6000fd5b5050604080518a8152600160a060020a0380881660208301528816818301526060810186905290517f83a815b11f49373aebbe0b7a4065fc83c15d7dbdde75e788016e4ae250c12f039350908190036080019150a150505050505050565b600181015460038201546000914203908290819081906001608060020a03168410610a4357600286015470010000000000000000000000000000000090046001608060020a03169450610a9e565b600286015460038701546001608060020a03808316700100000000000000000000000000000000909304811692909203945016848402811515610a8257fe5b60028801546001608060020a0316919005908101955091508490505b50505050919050565b60035481548110610b93578154600380546002916000916000198601908110610acc57fe5b60009182526020808320909101548352820192909252604001902055600380546000198301908110610afa57fe5b600091825260209091200154825460038054909160001901908110610b1b57fe5b6000918252602090912001556000198101610b37600382610d02565b506000838152600260208190526040822082815560018101805473ffffffffffffffffffffffffffffffffffffffff19169055908101829055600381019190915560040180546fffffffffffffffffffffffffffffffff191690555b505050565b600160a060020a0381161515610bad57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000903b1190565b6000610c2f838363ffffffff610cf016565b90506000811115610c7257604051600160a060020a0385169082156108fc029083906000818181858888f19350505050158015610c70573d6000803e3d6000fd5b505b50505050565b60008054610caf9060649074010000000000000000000000000000000000000000900460ff1684028491900463ffffffff610cf016565b90506000811115610b9357604051600160a060020a0384169082156108fc029083906000818181858888f19350505050158015610c72573d6000803e3d6000fd5b600082821115610cfc57fe5b50900390565b815481835581811115610b9357600083815260209020610b9391810190830161086491905b80821115610d3b5760008155600101610d27565b50905600a165627a7a7230582027c0bfd333c7e768ae4ffec8257dc39991d8ffd9fabd7a63b9fbcdfa96a0f86b00290000000000000000000000003a1957a0b9755d78c77e301410b254b6147a400c",
  "constructorArguments": "0000000000000000000000003a1957a0b9755d78c77e301410b254b6147a400c"
}