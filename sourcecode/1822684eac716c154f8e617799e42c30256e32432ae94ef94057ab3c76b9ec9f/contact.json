{
  "address": "0x7c21d723af0f4594d4f8821aa16bc27c8ea6cec7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DUBIex",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-24\n*/\n\npragma solidity 0.4.18;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Helps contracts guard agains reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private reentrancy_lock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!reentrancy_lock);\n    reentrancy_lock = true;\n    _;\n    reentrancy_lock = false;\n  }\n\n}\n\nlibrary Utils {\n  function isEther(address addr) internal pure returns (bool) {\n    return addr == address(0x0);\n  }\n}\n\n\ncontract DUBIex is ReentrancyGuard {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20;\n  \n  // order\n  struct Order {\n    uint256 id;\n    address maker;\n    uint256 amount;\n    address pairA;\n    address pairB;\n    uint256 priceA;\n    uint256 priceB;\n  }\n\n  // order id -> order\n  mapping(uint256 => Order) public orders;\n\n  // weiSend of current tx\n  uint256 private weiSend = 0;\n\n  // makes sure weiSend of current tx is reset\n  modifier weiSendGuard() {\n    weiSend = msg.value;\n    _;\n    weiSend = 0;\n  }\n\n  // logs\n  event LogMakeOrder(uint256 id, address indexed maker, uint256 amount, address indexed pairA, address indexed pairB, uint256 priceA, uint256 priceB);\n  event LogTakeOrder(uint256 indexed id, address indexed taker, uint256 amount);\n  event LogCancelOrder(uint256 indexed id);\n\n  // internal\n  function _makeOrder(uint256 id, uint256 amount, address pairA, address pairB, uint256 priceA, uint256 priceB, address maker) internal returns (bool) {\n    // validate input\n    if (\n      id <= 0 ||\n      amount <= 0 ||\n      pairA == pairB ||\n      priceA <= 0 ||\n      priceB <= 0 ||\n      orders[id].id == id\n    ) return false;\n\n    bool pairAisEther = Utils.isEther(pairA);\n    ERC20 tokenA = ERC20(pairA);\n\n    // validate maker's deposit\n    if (pairAisEther && (weiSend <= 0 || weiSend < amount)) return false;\n    else if (!pairAisEther && (tokenA.allowance(maker, this) < amount || tokenA.balanceOf(maker) < amount)) return false;\n\n    // update state\n    orders[id] = Order(id, maker, amount, pairA, pairB, priceA, priceB);\n\n    // retrieve makers amount\n    if (pairAisEther) {\n      // eth already received, subtract used wei\n      weiSend = weiSend.sub(amount);\n    } else {\n      // pull tokens\n      tokenA.safeTransferFrom(maker, this, amount);\n    }\n\n    LogMakeOrder(id, maker, amount, pairA, pairB, priceA, priceB);\n\n    return true;\n  }\n\n  function _takeOrder(uint256 id, uint256 amount, address taker) internal returns (bool) {\n    // validate inputs\n    if (\n      id <= 0 ||\n      amount <= 0\n    ) return false;\n    \n    // get order\n    Order storage order = orders[id];\n    // validate order\n    if (order.id != id) return false;\n    \n    bool pairAisEther = Utils.isEther(order.pairA);\n    bool pairBisEther = Utils.isEther(order.pairB);\n    // amount of pairA usable\n    uint256 usableAmount = amount > order.amount ? order.amount : amount;\n    // amount of pairB maker will receive\n    uint256 totalB = usableAmount.mul(order.priceB).div(order.priceA);\n\n    // token interfaces\n    ERC20 tokenA = ERC20(order.pairA);\n    ERC20 tokenB = ERC20(order.pairB);\n\n    // validate taker's deposit\n    if (pairBisEther && (weiSend <= 0 || weiSend < totalB)) return false;\n    else if (!pairBisEther && (tokenB.allowance(taker, this) < totalB || tokenB.balanceOf(taker) < amount)) return false;\n\n    // update state\n    order.amount = order.amount.sub(usableAmount);\n\n    // pay maker\n    if (pairBisEther) {\n      weiSend = weiSend.sub(totalB);\n      order.maker.transfer(totalB);\n    } else {\n      tokenB.safeTransferFrom(taker, order.maker, totalB);\n    }\n\n    // pay taker\n    if (pairAisEther) {\n      taker.transfer(usableAmount);\n    } else {\n      tokenA.safeTransfer(taker, usableAmount);\n    }\n\n    LogTakeOrder(id, taker, usableAmount);\n\n    return true;\n  }\n\n  function _cancelOrder(uint256 id, address maker) internal returns (bool) {\n    // validate inputs\n    if (id <= 0) return false;\n\n    // get order\n    Order storage order = orders[id];\n    if (\n      order.id != id ||\n      order.maker != maker\n    ) return false;\n\n    uint256 amount = order.amount;\n    bool pairAisEther = Utils.isEther(order.pairA);\n\n    // update state\n    order.amount = 0;\n\n    // actions\n    if (pairAisEther) {\n      order.maker.transfer(amount);\n    } else {\n      ERC20(order.pairA).safeTransfer(order.maker, amount);\n    }\n\n    LogCancelOrder(id);\n\n    return true;\n  }\n\n  // single\n  function makeOrder(uint256 id, uint256 amount, address pairA, address pairB, uint256 priceA, uint256 priceB) external payable weiSendGuard nonReentrant returns (bool) {\n    bool success = _makeOrder(id, amount, pairA, pairB, priceA, priceB, msg.sender);\n\n    if (weiSend > 0) msg.sender.transfer(weiSend);\n\n    return success;\n  }\n\n  function takeOrder(uint256 id, uint256 amount) external payable weiSendGuard nonReentrant returns (bool) {\n    bool success = _takeOrder(id, amount, msg.sender);\n\n    if (weiSend > 0) msg.sender.transfer(weiSend);\n\n    return success;\n  }\n\n  function cancelOrder(uint256 id) external nonReentrant returns (bool) {\n    return _cancelOrder(id, msg.sender);\n  }\n\n  // multi\n  function makeOrders(uint256[] ids, uint256[] amounts, address[] pairAs, address[] pairBs, uint256[] priceAs, uint256[] priceBs) external payable weiSendGuard nonReentrant returns (bool) {\n    require(\n      amounts.length == ids.length &&\n      pairAs.length == ids.length &&\n      pairBs.length == ids.length &&\n      priceAs.length == ids.length &&\n      priceBs.length == ids.length\n    );\n\n    bool allSuccess = true;\n\n    for (uint256 i = 0; i < ids.length; i++) {\n      // update if any of the orders failed\n      // the function is like this because \"stack too deep\" error\n      if (allSuccess && !_makeOrder(ids[i], amounts[i], pairAs[i], pairBs[i], priceAs[i], priceBs[i], msg.sender)) allSuccess = false;\n    }\n\n    if (weiSend > 0) msg.sender.transfer(weiSend);\n\n    return allSuccess;\n  }\n\n  function takeOrders(uint256[] ids, uint256[] amounts) external payable weiSendGuard nonReentrant returns (bool) {\n    require(ids.length == amounts.length);\n\n    bool allSuccess = true;\n\n    for (uint256 i = 0; i < ids.length; i++) {\n      bool success = _takeOrder(ids[i], amounts[i], msg.sender);\n\n      // update if any of the orders failed\n      if (allSuccess && !success) allSuccess = success;\n    }\n\n    if (weiSend > 0) msg.sender.transfer(weiSend);\n\n    return allSuccess;\n  }\n\n  function cancelOrders(uint256[] ids) external nonReentrant returns (bool) {\n    bool allSuccess = true;\n\n    for (uint256 i = 0; i < ids.length; i++) {\n      bool success = _cancelOrder(ids[i], msg.sender);\n\n      // update if any of the orders failed\n      if (allSuccess && !success) allSuccess = success;\n    }\n\n    return allSuccess;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"pairA\",\"type\":\"address\"},{\"name\":\"pairB\",\"type\":\"address\"},{\"name\":\"priceA\",\"type\":\"uint256\"},{\"name\":\"priceB\",\"type\":\"uint256\"}],\"name\":\"makeOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"takeOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"pairA\",\"type\":\"address\"},{\"name\":\"pairB\",\"type\":\"address\"},{\"name\":\"priceA\",\"type\":\"uint256\"},{\"name\":\"priceB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"cancelOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"pairAs\",\"type\":\"address[]\"},{\"name\":\"pairBs\",\"type\":\"address[]\"},{\"name\":\"priceAs\",\"type\":\"uint256[]\"},{\"name\":\"priceBs\",\"type\":\"uint256[]\"}],\"name\":\"makeOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pairA\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"pairB\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priceA\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceB\",\"type\":\"uint256\"}],\"name\":\"LogMakeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTakeOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LogCancelOrder\",\"type\":\"event\"}]",
  "bytecode": "60606040526000805460ff19168155600255341561001c57600080fd5b610ff68061002b6000396000f3006060604052600436106100695763ffffffff60e060020a6000350416632eab93cb811461006e578063514fcac714610090578063555ac876146100a6578063a5b1fbe4146100cc578063a85c38ef146100eb578063b55fb5741461014c578063bdb026191461016a575b600080fd5b61007c6004356024356101b9565b604051901515815260200160405180910390f35b341561009b57600080fd5b61007c60043561023e565b61007c600435602435600160a060020a036044358116906064351660843560a435610276565b61007c6024600480358281019290820135918135918201910135610303565b34156100f657600080fd5b6101016004356103f2565b604051968752600160a060020a03958616602088015260408088019590955292851660608701529316608085015260a084019290925260c083019190915260e0909101905180910390f35b341561015757600080fd5b61007c600480356024810191013561043d565b61007c602460048035828101929082013591813580830192908201359160443580830192908201359160643580830192908201359160843580830192908201359160a4359182019101356104c0565b3460025560008054819060ff16156101d057600080fd5b6000805460ff191660011790556101e8848433610642565b90506000600254111561022a5733600160a060020a03166108fc6002549081150290604051600060405180830381858888f19350505050151561022a57600080fd5b6000805460ff191681556002559392505050565b6000805460ff161561024f57600080fd5b6000805460ff191660011790556102668233610995565b6000805460ff1916905592915050565b3460025560008054819060ff161561028d57600080fd5b6000805460ff191660011790556102a988888888888833610ab3565b9050600060025411156102eb5733600160a060020a03166108fc6002549081150290604051600060405180830381858888f1935050505015156102eb57600080fd5b6000805460ff19168155600255979650505050505050565b346002556000805481908190819060ff161561031e57600080fd5b6000805460ff1916600117905586851461033757600080fd5b60019250600091505b8682101561039a5761037988888481811061035757fe5b90506020020135878785818110151561036c57fe5b9050602002013533610642565b9050828015610386575080155b1561038f578092505b600190910190610340565b600060025411156103da5733600160a060020a03166108fc6002549081150290604051600060405180830381858888f1935050505015156103da57600080fd5b50506000805460ff1916815560025595945050505050565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600690950154600160a060020a0394851695939492831693919092169187565b6000805481908190819060ff161561045457600080fd5b6000805460ff191660019081178255935091505b848210156104ad5761048c86868481811061047f57fe5b9050602002013533610995565b9050828015610499575080155b156104a2578092505b600190910190610468565b50506000805460ff191690559392505050565b34600255600080548190819060ff16156104d957600080fd5b6000805460ff191660011790558b8e1480156104f45750898e145b80156104ff5750878e145b801561050a5750858e145b80156105155750838e145b151561052057600080fd5b506001905060005b8d8110156105e3578180156105d157506105cf8f8f8381811061054757fe5b905060200201358e8e84818110151561055c57fe5b905060200201358d8d85818110151561057157fe5b90506020020135600160a060020a03168c8c86818110151561058f57fe5b90506020020135600160a060020a03168b8b8781811015156105ad57fe5b905060200201358a8a8881811015156105c257fe5b9050602002013533610ab3565b155b156105db57600091505b600101610528565b600060025411156106235733600160a060020a03166108fc6002549081150290604051600060405180830381858888f19350505050151561062357600080fd5b506000805460ff191681556002559d9c50505050505050505050505050565b60008060008060008060008060008b11158061065f575060008a11155b1561066d5760009750610987565b60008b815260016020526040902080549097508b1461068f5760009750610987565b60038701546106a690600160a060020a0316610e46565b60048801549096506106c090600160a060020a0316610e46565b945086600201548a116106d357896106d9565b86600201545b935061070687600501546106fa896006015487610e5390919063ffffffff16565b9063ffffffff610e8916565b60038801546004890154919450600160a060020a03908116935016905084801561073e5750600060025411158061073e575082600254105b1561074c5760009750610987565b8415801561084c57508281600160a060020a031663dd62ed3e8b3060006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b15156107b557600080fd5b6102c65a03f115156107c657600080fd5b50505060405180519050108061084c57508981600160a060020a03166370a082318b60006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561082f57600080fd5b6102c65a03f1151561084057600080fd5b50505060405180519050105b1561085a5760009750610987565b600287015461086f908563ffffffff610ea016565b600288015584156108ca5760025461088d908463ffffffff610ea016565b6002556001870154600160a060020a031683156108fc0284604051600060405180830381858888f1935050505015156108c557600080fd5b6108ee565b60018701546108ee90600160a060020a03838116918c91168663ffffffff610eb216565b851561092a57600160a060020a03891684156108fc0285604051600060405180830381858888f19350505050151561092557600080fd5b610944565b610944600160a060020a0383168a8663ffffffff610f4516565b88600160a060020a03168b7ff2ddff064e87065b7ccf7a7786f209ea28c611b68999df4082e6a705a8a30fe08660405190815260200160405180910390a3600197505b505050505050509392505050565b60008080808086116109aa5760009350610aaa565b60008681526001602052604090208054909350861415806109db57506001830154600160a060020a03868116911614155b156109e95760009350610aaa565b60028301546003840154909250610a0890600160a060020a0316610e46565b6000600285015590508015610a51576001830154600160a060020a031682156108fc0283604051600060405180830381858888f193505050501515610a4c57600080fd5b610a78565b60018301546003840154610a7891600160a060020a0391821691168463ffffffff610f4516565b857f8494c6ab0bed98b12bf4cbc58bfb258bc8caf244731c669bee18100f9737b21d60405160405180910390a2600193505b50505092915050565b6000806000808a111580610ac8575060008911155b80610ae4575086600160a060020a031688600160a060020a0316145b80610af0575060008611155b80610afc575060008511155b80610b14575060008a8152600160205260409020548a145b15610b225760009250610e39565b610b2b88610e46565b9150879050818015610b4b57506000600254111580610b4b575088600254105b15610b595760009250610e39565b81158015610c5957508881600160a060020a031663dd62ed3e863060006040516020015260405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b1515610bc257600080fd5b6102c65a03f11515610bd357600080fd5b505050604051805190501080610c5957508881600160a060020a03166370a082318660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c3c57600080fd5b6102c65a03f11515610c4d57600080fd5b50505060405180519050105b15610c675760009250610e39565b60e0604051908101604052808b815260200185600160a060020a031681526020018a815260200189600160a060020a0316815260200188600160a060020a0316815260200187815260200186815250600160008c815260200190815260200160002060008201518155602082015160018201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560408201518160020155606082015160038201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055608082015160048201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560a0820151816005015560c0820151600690910155508115610dad57600254610da5908a63ffffffff610ea016565b600255610dc8565b610dc8600160a060020a03821685308c63ffffffff610eb216565b86600160a060020a031688600160a060020a031685600160a060020a03167e72fbf2e3fc056577d2c46dc0e8cca3d8543e68150583ac1bfd4d32070829d48d8d8b8b6040518085815260200184815260200183815260200182815260200194505050505060405180910390a4600192505b5050979650505050505050565b600160a060020a03161590565b600080831515610e665760009150610e82565b50828202828482811515610e7657fe5b0414610e7e57fe5b8091505b5092915050565b6000808284811515610e9757fe5b04949350505050565b600082821115610eac57fe5b50900390565b83600160a060020a03166323b872dd84848460006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610f1c57600080fd5b6102c65a03f11515610f2d57600080fd5b505050604051805190501515610f3f57fe5b50505050565b82600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610fa257600080fd5b6102c65a03f11515610fb357600080fd5b505050604051805190501515610fc557fe5b5050505600a165627a7a72305820496ae87aa1f0931306cf087a2e0ee01526ff0d936b9ac1b61d1f9b4eab88cbc50029"
}