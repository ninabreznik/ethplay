{
  "address": "0x65375171f109e90b9ea3e22f4734621857f13ea4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FSTTokenAgentHolder",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-17\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns(address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns(bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n    external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value)\n    external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n    {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private minters;\n\n    constructor() internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\ncontract StandardERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) internal _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor(string name, string symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns(string) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns(string) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns(uint8) {\n        return _decimals;\n    }\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address owner,\n        address spender\n    )\n    public\n    view\n    returns (uint256)\n    {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n    public\n    returns (bool)\n    {\n        require(value <= _allowed[from][msg.sender]);\n\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    )\n    public\n    returns (bool)\n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].add(addedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    )\n    public\n    returns (bool)\n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].sub(subtractedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(value <= _balances[from]);\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is StandardERC20, MinterRole {\n\n    constructor(string name, string symbol, uint8 decimals)\n    public\n    StandardERC20(name,symbol,decimals)\n    {\n    }\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(\n        address to,\n        uint256 value\n    )\n    public\n    onlyMinter\n    returns (bool)\n    {\n        _mint(to, value);\n        return true;\n    }\n}\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract ERC20Capped is ERC20Mintable {\n\n    uint256 private _cap;\n\n    constructor(string name, string symbol, uint8 decimals,uint256 cap)\n    public\n    ERC20Mintable(name,symbol,decimals)\n    {\n        require(cap > 0);\n        _cap =  cap.mul(uint(10) **decimals);\n    }\n\n    /**\n     * @return the cap for the token minting.\n     */\n    function cap() public view returns(uint256) {\n        return _cap;\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(totalSupply().add(value) <= _cap);\n        super._mint(account, value);\n    }\n}\n\ncontract FSTToken is ERC20Capped {\n\n    constructor(string name, string symbol, uint8 decimals,uint256 cap)\n    public\n    ERC20Capped(name,symbol,decimals,cap)\n    {\n\n    }\n\n}\n\ncontract FSTTokenAgentHolder is Ownable{\n\n    using SafeMath for uint256;\n\n    FSTToken private token ;\n\n    uint256 public totalLockTokens;\n\n    uint256 public totalUNLockTokens;\n    uint256 public globalLockPeriod;\n\n    uint256 public totalUnlockNum=4;\n    mapping (address => HolderSchedule) public holderList;\n    address[] public holderAccountList=[0x0];\n\n    uint256 private singleNodeTime;\n\n    event ReleaseTokens(address indexed who,uint256 value);\n    event HolderToken(address indexed who,uint256 value,uint256 totalValue);\n\n    struct HolderSchedule {\n        uint256 startAt;\n        uint256 lockAmount;\n        uint256 releasedAmount;\n        uint256 totalReleasedAmount;\n        uint256 lastUnlocktime;\n        bool isReleased;\n        bool isInvested;\n        uint256 unlockNumed;\n    }\n\n    constructor(address _tokenAddress ,uint256 _globalLockPeriod,uint256 _totalUnlockNum) public{\n        token = FSTToken(_tokenAddress);\n        globalLockPeriod=_globalLockPeriod;\n        totalUnlockNum=_totalUnlockNum;\n        singleNodeTime=globalLockPeriod.div(totalUnlockNum);\n    }\n\n    function addHolderToken(address _adr,uint256 _lockAmount) public onlyOwner {\n        HolderSchedule storage holderSchedule = holderList[_adr];\n        require(_lockAmount > 0);\n        _lockAmount=_lockAmount.mul(uint(10) **token.decimals());\n        if(holderSchedule.isInvested==false||holderSchedule.isReleased==true){\n            holderSchedule.isInvested=true;\n            holderSchedule.startAt = block.timestamp;\n            holderSchedule.lastUnlocktime=holderSchedule.startAt;\n            if(holderSchedule.isReleased==false){\n                holderSchedule.releasedAmount=0;\n                if(holderAccountList[0]==0x0){\n                    holderAccountList[0]=_adr;\n                }else{\n                    holderAccountList.push(_adr);\n                }\n            }\n        }\n        holderSchedule.isReleased = false;\n        holderSchedule.lockAmount=holderSchedule.lockAmount.add(_lockAmount);\n        totalLockTokens=totalLockTokens.add(_lockAmount);\n        emit HolderToken(_adr,_lockAmount,holderSchedule.lockAmount.add(holderSchedule.releasedAmount));\n    }\n\n    function subHolderToken(address _adr,uint256 _lockAmount)public onlyOwner{\n        HolderSchedule storage holderSchedule = holderList[_adr];\n        require(_lockAmount > 0);\n        _lockAmount=_lockAmount.mul(uint(10) **token.decimals());\n        require(holderSchedule.lockAmount>=_lockAmount);\n        holderSchedule.lockAmount=holderSchedule.lockAmount.sub(_lockAmount);\n        totalLockTokens=totalLockTokens.sub(_lockAmount);\n        emit HolderToken(_adr,_lockAmount,holderSchedule.lockAmount.add(holderSchedule.releasedAmount));\n    }\n\n    function accessToken(address rec,uint256 value) private {\n        totalUNLockTokens=totalUNLockTokens.add(value);\n        token.mint(rec,value);\n    }\n    function releaseMyTokens() public{\n        releaseTokens(msg.sender);\n    }\n\n    function releaseTokens(address _adr) public{\n        require(_adr!=address(0));\n        HolderSchedule storage holderSchedule = holderList[_adr];\n        if(holderSchedule.isReleased==false&&holderSchedule.lockAmount>0){\n            uint256 unlockAmount=lockStrategy(_adr);\n            if(unlockAmount>0&&holderSchedule.lockAmount>=unlockAmount){\n                holderSchedule.lockAmount=holderSchedule.lockAmount.sub(unlockAmount);\n                holderSchedule.releasedAmount=holderSchedule.releasedAmount.add(unlockAmount);\n                holderSchedule.totalReleasedAmount=holderSchedule.totalReleasedAmount.add(unlockAmount);\n                holderSchedule.lastUnlocktime=block.timestamp;\n                if(holderSchedule.lockAmount==0){\n                    holderSchedule.isReleased=true;\n                    holderSchedule.releasedAmount=0;\n                    holderSchedule.unlockNumed=0;\n                }\n                accessToken(_adr,unlockAmount);\n                emit ReleaseTokens(_adr,unlockAmount);\n            }\n        }\n    }\n    function releaseEachTokens() public {\n        require(holderAccountList.length>0);\n        for(uint i=0;i<holderAccountList.length;i++){\n            HolderSchedule storage holderSchedule = holderList[holderAccountList[i]];\n            if(holderSchedule.lockAmount>0&&holderSchedule.isReleased==false){\n                uint256 unlockAmount=lockStrategy(holderAccountList[i]);\n                if(unlockAmount>0){\n                    holderSchedule.lockAmount=holderSchedule.lockAmount.sub(unlockAmount);\n                    holderSchedule.releasedAmount=holderSchedule.releasedAmount.add(unlockAmount);\n                    holderSchedule.totalReleasedAmount=holderSchedule.totalReleasedAmount.add(unlockAmount);\n                    holderSchedule.lastUnlocktime=block.timestamp;\n                    if(holderSchedule.lockAmount==0){\n                        holderSchedule.isReleased=true;\n                        holderSchedule.releasedAmount=0;\n                        holderSchedule.unlockNumed=0;\n                    }\n                    accessToken(holderAccountList[i],unlockAmount);\n                }\n            }\n        }\n    }\n    function lockStrategy(address _adr) private returns(uint256){\n        HolderSchedule storage holderSchedule = holderList[_adr];\n        uint256 interval=block.timestamp.sub(holderSchedule.startAt);\n        uint256 unlockAmount=0;\n        if(interval>=singleNodeTime){\n            uint256 unlockNum=interval.div(singleNodeTime);\n            uint256 nextUnlockNum=unlockNum.sub(holderSchedule.unlockNumed);\n            if(nextUnlockNum>0){\n                holderSchedule.unlockNumed=unlockNum;\n                uint totalAmount=holderSchedule.lockAmount.add(holderSchedule.releasedAmount);\n                uint singleAmount=totalAmount.div(totalUnlockNum);\n                unlockAmount=singleAmount.mul(nextUnlockNum);\n                if(unlockAmount>holderSchedule.lockAmount){\n                    unlockAmount=holderSchedule.lockAmount;\n                }\n            }\n        }\n        return unlockAmount;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderList\",\"outputs\":[{\"name\":\"startAt\",\"type\":\"uint256\"},{\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"name\":\"totalReleasedAmount\",\"type\":\"uint256\"},{\"name\":\"lastUnlocktime\",\"type\":\"uint256\"},{\"name\":\"isReleased\",\"type\":\"bool\"},{\"name\":\"isInvested\",\"type\":\"bool\"},{\"name\":\"unlockNumed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseEachTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"_lockAmount\",\"type\":\"uint256\"}],\"name\":\"addHolderToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseMyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"},{\"name\":\"_lockAmount\",\"type\":\"uint256\"}],\"name\":\"subHolderToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holderAccountList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUnlockNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUNLockTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_globalLockPeriod\",\"type\":\"uint256\"},{\"name\":\"_totalUnlockNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReleaseTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalValue\",\"type\":\"uint256\"}],\"name\":\"HolderToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "600460055560a06040526000608090815261001e9060079060016100fb565b5034801561002b57600080fd5b50604051606080610eac83398101604081815282516020840151919093015160008054600160a060020a031916331780825592939192600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360018054600160a060020a031916600160a060020a038516179055600482905560058190556100cc82826401000000006100d88102610ccd1704565b60085550610181915050565b6000808083116100e757600080fd5b82848115156100f257fe5b04949350505050565b82805482825590600052602060002090810192821561014a579160200282015b8281111561014a5782518254600160a060020a03191660ff90911617825560209092019160019091019061011b565b5061015692915061015a565b5090565b61017e91905b80821115610156578054600160a060020a0319168155600101610160565b90565b610d1c806101906000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305a955af81146100df5780630c6d1efb146101455780632e69a73d1461015c57806336f1f238146101835780635b0e1a2f146101a75780635c151199146101bc578063715018a6146101e057806387b0be48146101f55780638da5cb5b146102165780638f32d59b14610247578063a58e225314610270578063bad9c26314610288578063d2f2d1e31461029d578063ee4a1569146102b2578063f2fde38b146102c7575b600080fd5b3480156100eb57600080fd5b50610100600160a060020a03600435166102e8565b6040805198895260208901979097528787019590955260608701939093526080860191909152151560a0850152151560c084015260e083015251908190036101000190f35b34801561015157600080fd5b5061015a610333565b005b34801561016857600080fd5b5061017161049e565b60408051918252519081900360200190f35b34801561018f57600080fd5b5061015a600160a060020a03600435166024356104a4565b3480156101b357600080fd5b5061015a610740565b3480156101c857600080fd5b5061015a600160a060020a036004351660243561074b565b3480156101ec57600080fd5b5061015a610828565b34801561020157600080fd5b5061015a600160a060020a0360043516610892565b34801561022257600080fd5b5061022b6109d2565b60408051600160a060020a039092168252519081900360200190f35b34801561025357600080fd5b5061025c6109e1565b604080519115158252519081900360200190f35b34801561027c57600080fd5b5061022b6004356109f2565b34801561029457600080fd5b50610171610a1a565b3480156102a957600080fd5b50610171610a20565b3480156102be57600080fd5b50610171610a26565b3480156102d357600080fd5b5061015a600160a060020a0360043516610a2c565b6006602081905260009182526040909120805460018201546002830154600384015460048501546005860154959096015493959294919390929160ff80821692610100909204169088565b60075460009081908190811061034857600080fd5b600092505b600754831015610499576006600060078581548110151561036a57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001812060018101549093501180156103a85750600582015460ff16155b1561048e576103d96007848154811015156103bf57fe5b600091825260209091200154600160a060020a0316610a4b565b9050600081111561048e5760018201546103f9908263ffffffff610b3616565b60018301556002820154610413908263ffffffff610b5416565b6002830155600382015461042d908263ffffffff610b5416565b6003830155426004830155600182015415156104615760058201805460ff1916600117905560006002830181905560068301555b61048e60078481548110151561047357fe5b600091825260209091200154600160a060020a031682610b6d565b60019092019161034d565b505050565b60025481565b60006104ae6109e1565b15156104b957600080fd5b50600160a060020a03821660009081526006602052604081209082116104de57600080fd5b600154604080517f313ce567000000000000000000000000000000000000000000000000000000008152905161057e92600160a060020a03169163313ce5679160048083019260209291908290030181600087803b15801561053f57600080fd5b505af1158015610553573d6000803e3d6000fd5b505050506040513d602081101561056957600080fd5b5051839060ff16600a0a63ffffffff610c2216565b6005820154909250610100900460ff1615806105a35750600581015460ff1615156001145b1561069d5760058101805461ff001916610100179081905542808355600483015560ff16151561069d576000600282018190556007805490919081106105e557fe5b600091825260209091200154600160a060020a0316151561064457826007600081548110151561061157fe5b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555061069d565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790555b60058101805460ff1916905560018101546106be908363ffffffff610b5416565b60018201556002546106d6908363ffffffff610b5416565b60028190555082600160a060020a03167fa7cd436d87a5f6488d31899541ac49a4be905e00c3f81db488c1570d6d8cbd008361072384600201548560010154610b5490919063ffffffff16565b6040805192835260208301919091528051918290030190a2505050565b61074933610892565b565b60006107556109e1565b151561076057600080fd5b50600160a060020a038216600090815260066020526040812090821161078557600080fd5b600154604080517f313ce56700000000000000000000000000000000000000000000000000000000815290516107e692600160a060020a03169163313ce5679160048083019260209291908290030181600087803b15801561053f57600080fd5b9150818160010154101515156107fb57600080fd5b6001810154610810908363ffffffff610b3616565b60018201556002546106d6908363ffffffff610b3616565b6108306109e1565b151561083b57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600080600160a060020a03831615156108aa57600080fd5b600160a060020a0383166000908152600660205260409020600581015490925060ff161580156108de575060008260010154115b15610499576108ec83610a4b565b9050600081118015610902575080826001015410155b1561049957600182015461091c908263ffffffff610b3616565b60018301556002820154610936908263ffffffff610b5416565b60028301556003820154610950908263ffffffff610b5416565b6003830155426004830155600182015415156109845760058201805460ff1916600117905560006002830181905560068301555b61098e8382610b6d565b604080518281529051600160a060020a038516917fa739e4172366f5a78dcb29dc28f3b20e3071cfe83b0be85e9dc4365232eb6be9919081900360200190a2505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b6007805482908110610a0057fe5b600091825260209091200154600160a060020a0316905081565b60055481565b60035481565b60045481565b610a346109e1565b1515610a3f57600080fd5b610a4881610c50565b50565b600160a060020a03811660009081526006602052604081208054829081908190819081908190610a8290429063ffffffff610b3616565b600854909650600095508610610b2957600854610aa690879063ffffffff610ccd16565b9350610abf876006015485610b3690919063ffffffff16565b92506000831115610b29576006870184905560028701546001880154610aea9163ffffffff610b5416565b9150610b0160055483610ccd90919063ffffffff16565b9050610b13818463ffffffff610c2216565b94508660010154851115610b2957866001015494505b5092979650505050505050565b60008083831115610b4657600080fd5b5050808203805b5092915050565b600082820183811015610b6657600080fd5b9392505050565b600354610b80908263ffffffff610b5416565b600355600154604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015260248201859052915191909216916340c10f199160448083019260209291908290030181600087803b158015610bf257600080fd5b505af1158015610c06573d6000803e3d6000fd5b505050506040513d6020811015610c1c57600080fd5b50505050565b600080831515610c355760009150610b4d565b50828202828482811515610c4557fe5b0414610b6657600080fd5b600160a060020a0381161515610c6557600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080808311610cdc57600080fd5b8284811515610ce757fe5b049493505050505600a165627a7a72305820688293ad66bcbad63f9bd125151393640afa7c70e5bd5fdc88cce71993727e4500290000000000000000000000008171740c3f6631da0496ca237e6ec7b9b94ed01e0000000000000000000000000000000000000000000000000000000003c267000000000000000000000000000000000000000000000000000000000000000004",
  "constructorArguments": "0000000000000000000000008171740c3f6631da0496ca237e6ec7b9b94ed01e0000000000000000000000000000000000000000000000000000000003c267000000000000000000000000000000000000000000000000000000000000000004"
}