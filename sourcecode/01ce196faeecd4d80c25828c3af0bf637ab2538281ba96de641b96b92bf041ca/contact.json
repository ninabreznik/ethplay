{
  "address": "0x11320d0b29e59da6b1b08a85e9d689ec4ed42e6c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Cryptolotto1Hour",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-28\n*/\n\n/**\n* @dev Cryptolotto referral system interface.\n*/\ncontract iCryptolottoReferral {\n    /**\n    * @dev Get partner by referral.\n    */\n    function getPartnerByReferral(address) public view returns (address) {}\n    \n    /**\n    * @dev Get partner percent.\n    */\n    function getPartnerPercent(address) public view returns (uint8) {}\n    \n    /**\n    * @dev Get sales partner percent by partner address.\n    */\n    function getSalesPartnerPercent(address) public view returns (uint8) {}\n    \n    /**\n    * @dev Get sales partner address by partner address.\n    */\n    function getSalesPartner(address) public view returns (address) {}\n    \n    /**\n    * @dev Add new referral.\n    */\n    function addReferral(address, address) public {}\n}\n\n/**\n* @dev Cryptolotto stats aggregator interface.\n*/\ncontract iCryptolottoStatsAggregator {\n    /**\n    * @dev Write info to log about the new winner.\n    */\n    function newWinner(address, uint, uint, uint, uint8, uint) public {}\n}\n\n/**\n* @dev Ownable contract interface.\n*/\ncontract iOwnable {\n    function getOwner() public view returns (address) {}\n    function allowed(address) public view returns (bool) {}\n}\n\n\n/**\n* @title Cryptolotto1Day\n* @dev This smart contract is a part of Cryptolotto (cryptolotto.cc) product.\n*\n* @dev Cryptolotto is a blockchain-based, Ethereum powered lottery which gives to users the most \n* @dev transparent and honest chances of winning.\n*\n* @dev The main idea of Cryptolotto is straightforward: people from all over the world during the \n* @dev set period of time are contributing an equal amount of ETH to one wallet. When a timer ends \n* @dev this smart-contract powered wallet automatically sends all received ETHs to a one randomly \n* @dev chosen wallet-participant.\n*\n* @dev Due to the fact that Cryptolotto is built on a blockchain technology, it eliminates any \n* @dev potential for intervention by third parties and gives 100% guarantee of an honest game.\n* @dev There are no backdoors and no human or computer soft can interfere the process of picking a winner.\n*\n* @dev If during the game only one player joins it, then the player will receive all his ETH back.\n* @dev If a player sends not the exact amount of ETH - he will receive all his ETH back.\n* @dev Creators of the product can change the entrance price for the game. If the price is changed \n* @dev then new rules are applied when a new game starts.\n*\n* @dev The original idea of Cryptolotto belongs to t.me/crypto_god and t.me/crypto_creator - Founders. \n* @dev Cryptolotto smart-contracts are protected by copyright, trademark, patent, trade secret, \n* @dev other intellectual property, proprietary rights laws and other applicable laws.\n*\n* @dev All information related to the product can be found only on: \n* @dev - cryptolotto.cc\n* @dev - github.com/cryptolotto\n* @dev - instagram.com/cryptolotto\n* @dev - facebook.com/cryptolotto\n*\n* @dev Cryptolotto was designed and developed by erde group (https://erde.group).\n**/\ncontract Cryptolotto1Hour {\n    /**\n    * @dev Write to log info about the new game.\n    *\n    * @param _game Game number.\n    * @param _time Time when game stated.\n    */\n    event Game(uint _game, uint indexed _time);\n\n    /**\n    * @dev Write to log info about the new game player.\n    *\n    * @param _address Player wallet address.\n    * @param _game Game number in which player buy ticket.\n    * @param _number Player number in the game.\n    * @param _time Time when player buy ticket.\n    */\n    event Ticket(\n        address indexed _address,\n        uint indexed _game,\n        uint _number,\n        uint _time\n    );\n\n    /**\n    * @dev Write to log info about partner earnings.\n    *\n    * @param _partner Partner wallet address.\n    * @param _referral Referral wallet address.\n    * @param _amount Earning amount.\n    * @param _time The time when ether was earned.\n    */\n    event ToPartner(\n        address indexed _partner,\n        address _referral,\n        uint _amount,\n        uint _time\n    );\n\n    /**\n    * @dev Write to log info about sales partner earnings.\n    *\n    * @param _salesPartner Sales partner wallet address.\n    * @param _partner Partner wallet address.\n    * @param _amount Earning amount.\n    * @param _time The time when ether was earned.\n    */\n    event ToSalesPartner(\n        address indexed _salesPartner,\n        address _partner,\n        uint _amount,\n        uint _time\n    );\n    \n    // Game type. Each game has own type.\n    uint8 public gType = 2;\n    // Game fee.\n    uint8 public fee = 10;\n    // Current game number.\n    uint public game;\n    // Ticket price.\n    uint public ticketPrice = 0.01 ether;\n    // New ticket price.\n    uint public newPrice;\n    // All-time game jackpot.\n    uint public allTimeJackpot = 0;\n    // All-time game players count\n    uint public allTimePlayers = 0;\n    \n    // Paid to partners.\n    uint public paidToPartners = 0;\n    // Game status.\n    bool public isActive = true;\n    // The variable that indicates game status switching.\n    bool public toogleStatus = false;\n    // The array of all games\n    uint[] public games;\n    \n    // Store game jackpot.\n    mapping(uint => uint) jackpot;\n    // Store game players.\n    mapping(uint => address[]) players;\n    \n    // Ownable contract\n    iOwnable public ownable;\n    // Stats aggregator contract.\n    iCryptolottoStatsAggregator public stats;\n    // Referral system contract.\n    iCryptolottoReferral public referralInstance;\n    // Funds distributor address.\n    address public fundsDistributor;\n\n    /**\n    * @dev Check sender address and compare it to an owner.\n    */\n    modifier onlyOwner() {\n        require(ownable.allowed(msg.sender));\n        _;\n    }\n\n    /**\n    * @dev Initialize game.\n    * @dev Create ownable and stats aggregator instances, \n    * @dev set funds distributor contract address.\n    *\n    * @param ownableContract The address of previously deployed ownable contract.\n    * @param distributor The address of previously deployed funds distributor contract.\n    * @param statsA The address of previously deployed stats aggregator contract.\n    * @param referralSystem The address of previously deployed referral system contract.\n    */\n    function Cryptolotto1Hour(\n        address ownableContract,\n        address distributor,\n        address statsA,\n        address referralSystem\n    ) \n        public\n    {\n        ownable = iOwnable(ownableContract);\n        stats = iCryptolottoStatsAggregator(statsA);\n        referralInstance = iCryptolottoReferral(referralSystem);\n        fundsDistributor = distributor;\n        startGame();\n    }\n\n    /**\n    * @dev The method that allows buying tickets by directly sending ether to the contract.\n    */\n    function() public payable {\n        buyTicket(address(0));\n    }\n\n    /**\n    * @dev Returns current game players.\n    */\n    function getPlayedGamePlayers() \n        public\n        view\n        returns (uint)\n    {\n        return getPlayersInGame(game);\n    }\n\n    /**\n    * @dev Get players by game.\n    *\n    * @param playedGame Game number.\n    */\n    function getPlayersInGame(uint playedGame) \n        public \n        view\n        returns (uint)\n    {\n        return players[playedGame].length;\n    }\n\n    /**\n    * @dev Returns current game jackpot.\n    */\n    function getPlayedGameJackpot() \n        public \n        view\n        returns (uint) \n    {\n        return getGameJackpot(game);\n    }\n    \n    /**\n    * @dev Get jackpot by game number.\n    *\n    * @param playedGame The number of the played game.\n    */\n    function getGameJackpot(uint playedGame) \n        public \n        view \n        returns(uint)\n    {\n        return jackpot[playedGame];\n    }\n    \n    /**\n    * @dev Change game status.\n    * @dev If the game is active sets flag for game status changing. Otherwise, change game status.\n    */\n    function toogleActive() public onlyOwner() {\n        if (!isActive) {\n            isActive = true;\n        } else {\n            toogleStatus = !toogleStatus;\n        }\n    }\n\n    /**\n    * @dev Start the new game.`\n    */\n    function start() public onlyOwner() {\n        if (players[game].length > 0) {\n            pickTheWinner();\n        }\n        startGame();\n    }\n\n    /**\n    * @dev Change ticket price on next game.\n    *\n    * @param price New ticket price.``\n    */    \n    function changeTicketPrice(uint price) \n        public \n        onlyOwner() \n    {\n        newPrice = price;\n    }\n\n\n    /**\n    * @dev Get random number.\n    * @dev Random number calculation depends on block timestamp,\n    * @dev difficulty, number and hash.\n    *\n    * @param min Minimal number.\n    * @param max Maximum number.\n    * @param time Timestamp.\n    * @param difficulty Block difficulty.\n    * @param number Block number.\n    * @param bHash Block hash.\n    */\n    function randomNumber(\n        uint min,\n        uint max,\n        uint time,\n        uint difficulty,\n        uint number,\n        bytes32 bHash\n    ) \n        public \n        pure \n        returns (uint) \n    {\n        min ++;\n        max ++;\n\n        uint random = uint(keccak256(\n            time * \n            difficulty * \n            number *\n            uint(bHash)\n        ))%10 + 1;\n       \n        uint result = uint(keccak256(random))%(min+max)-min;\n        \n        if (result > max) {\n            result = max;\n        }\n        \n        if (result < min) {\n            result = min;\n        }\n        \n        result--;\n\n        return result;\n    }\n    \n    /**\n    * @dev The payable method that accepts ether and adds the player to the game.\n    */\n    function buyTicket(address partner) public payable {\n        require(isActive);\n        require(msg.value == ticketPrice);\n        \n        jackpot[game] += msg.value;\n        \n        uint playerNumber =  players[game].length;\n        players[game].push(msg.sender);\n\n        processReferralSystem(partner, msg.sender);\n\n        emit Ticket(msg.sender, game, playerNumber, now);\n    }\n\n    /**\n    * @dev Start the new game.\n    * @dev Checks ticket price changes, if exists new ticket price the price will be changed.\n    * @dev Checks game status changes, if exists request for changing game status game status \n    * @dev will be changed.\n    */\n    function startGame() internal {\n        require(isActive);\n\n        game = block.number;\n        if (newPrice != 0) {\n            ticketPrice = newPrice;\n            newPrice = 0;\n        }\n        if (toogleStatus) {\n            isActive = !isActive;\n            toogleStatus = false;\n        }\n        emit Game(game, now);\n    }\n\n    /**\n    * @dev Pick the winner.\n    * @dev Check game players, depends on player count provides next logic:\n    * @dev - if in the game is only one player, by game rules the whole jackpot \n    * @dev without commission returns to him.\n    * @dev - if more than one player smart contract randomly selects one player, \n    * @dev calculates commission and after that jackpot transfers to the winner,\n    * @dev commision to founders.\n    */\n    function pickTheWinner() internal {\n        uint winner;\n        uint toPlayer;\n        if (players[game].length == 1) {\n            toPlayer = jackpot[game];\n            players[game][0].transfer(jackpot[game]);\n            winner = 0;\n        } else {\n            winner = randomNumber(\n                0,\n                players[game].length - 1,\n                block.timestamp,\n                block.difficulty,\n                block.number,\n                blockhash(block.number - 1)\n            );\n        \n            uint distribute = jackpot[game] * fee / 100;\n            toPlayer = jackpot[game] - distribute;\n            players[game][winner].transfer(toPlayer);\n\n            transferToPartner(players[game][winner]);\n            \n            distribute -= paidToPartners;\n            bool result = address(fundsDistributor).call.gas(30000).value(distribute)();\n            if (!result) {\n                revert();\n            }\n        }\n    \n        paidToPartners = 0;\n        stats.newWinner(\n            players[game][winner],\n            game,\n            players[game].length,\n            toPlayer,\n            gType,\n            winner\n        );\n        \n        allTimeJackpot += toPlayer;\n        allTimePlayers += players[game].length;\n    }\n\n    /**\n    * @dev Checks if the player is in referral system.\n    * @dev Sending earned ether to partners.\n    *\n    * @param partner Partner address.\n    * @param referral Player address.\n    */\n    function processReferralSystem(address partner, address referral) \n        internal \n    {\n        address partnerRef = referralInstance.getPartnerByReferral(referral);\n        if (partner != address(0) || partnerRef != address(0)) {\n            if (partnerRef == address(0)) {\n                referralInstance.addReferral(partner, referral);\n                partnerRef = partner;\n            }\n\n            if (players[game].length > 1) {\n                transferToPartner(referral);\n            }\n        }\n    }\n\n    /**\n    * @dev Sending earned ether to partners.\n    *\n    * @param referral Player address.\n    */\n    function transferToPartner(address referral) internal {\n        address partner = referralInstance.getPartnerByReferral(referral);\n        if (partner != address(0)) {\n            uint sum = getPartnerAmount(partner);\n            if (sum != 0) {\n                partner.transfer(sum);\n                paidToPartners += sum;\n\n                emit ToPartner(partner, referral, sum, now);\n\n                transferToSalesPartner(partner);\n            }\n        }\n    }\n\n    /**\n    * @dev Sending earned ether to sales partners.\n    *\n    * @param partner Partner address.\n    */\n    function transferToSalesPartner(address partner) internal {\n        address salesPartner = referralInstance.getSalesPartner(partner);\n        if (salesPartner != address(0)) {\n            uint sum = getSalesPartnerAmount(partner);\n            if (sum != 0) {\n                salesPartner.transfer(sum);\n                paidToPartners += sum;\n\n                emit ToSalesPartner(salesPartner, partner, sum, now);\n            } \n        }\n    }\n\n    /**\n    * @dev Getting partner percent and calculate earned ether.\n    *\n    * @param partner Partner address.\n    */\n    function getPartnerAmount(address partner) \n        internal\n        view\n        returns (uint) \n    {\n        uint8 partnerPercent = referralInstance.getPartnerPercent(partner);\n        if (partnerPercent == 0) {\n            return 0;\n        }\n\n        return calculateReferral(partnerPercent);\n    }\n\n    /**\n    * @dev Getting sales partner percent and calculate earned ether.\n    *\n    * @param partner sales partner address.\n    */\n    function getSalesPartnerAmount(address partner) \n        internal \n        view \n        returns (uint)\n    {\n        uint8 salesPartnerPercent = referralInstance.getSalesPartnerPercent(partner);\n        if (salesPartnerPercent == 0) {\n            return 0;\n        }\n\n        return calculateReferral(salesPartnerPercent);\n    }\n\n    /**\n    * @dev Calculate earned ether by partner percent.\n    *\n    * @param percent Partner percent.\n    */\n    function calculateReferral(uint8 percent)\n        internal \n        view \n        returns (uint) \n    {\n        uint distribute =  ticketPrice * fee / 100;\n\n        return distribute * percent / 100;\n    }\n}",
  "bytecode": "608060405260008054600260ff19918216811761ff0019908116610a00178455662386f26fc100009091556004839055600583905560069290925560078054909116600117909116905534801561005557600080fd5b506040516080806112978339810160409081528151602083015191830151606090930151600b8054600160a060020a03808516600160a060020a031992831617909255600c8054838816908316179055600d8054838516908316179055600e8054928616929091169190911790559092906100d76401000000006100e0810204565b5050505061016b565b60075460ff1615156100f157600080fd5b43600155600354156101095760038054600255600090555b600754610100900460ff1615610131576007805460ff81161560ff199091161761ff00191690555b600154604080519182525142917fc1e01725071603d5872b301174fe013f7471bd2a95a627a777cf5ad0df4df720919081900360200190a2565b61111d8061017a6000396000f30060806040526004361061013d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630d8c1a628114610149578063117a5b901461015e5780631209b1f61461018857806316521a2b1461019d57806322f3e2d4146101b55780632ef5c784146101de5780634630a0ee146101f357806347ddf87e1461020b57806351df9db914610220578063650b147d1461023557806374796cc21461024a57806374cb55fb1461026257806385b75b1e146102935780638897c1f4146102a8578063a46d11dc146102cf578063a5f8cdbb146102fa578063b38854be1461030e578063be9a655514610323578063c3a151de14610338578063c3fe3e281461034d578063c6ab848a14610362578063cf4e593a14610377578063d80528ae1461038c578063ddca3f43146103a1575b61014760006103b6565b005b34801561015557600080fd5b50610147610476565b34801561016a57600080fd5b5061017660043561054f565b60408051918252519081900360200190f35b34801561019457600080fd5b5061017661056e565b3480156101a957600080fd5b50610176600435610574565b3480156101c157600080fd5b506101ca610586565b604080519115158252519081900360200190f35b3480156101ea57600080fd5b5061017661058f565b3480156101ff57600080fd5b50610147600435610595565b34801561021757600080fd5b50610176610637565b34801561022c57600080fd5b5061017661063d565b34801561024157600080fd5b50610176610643565b34801561025657600080fd5b50610176600435610649565b34801561026e57600080fd5b5061027761065b565b60408051600160a060020a039092168252519081900360200190f35b34801561029f57600080fd5b506101ca61066a565b3480156102b457600080fd5b5061017660043560243560443560643560843560a435610678565b3480156102db57600080fd5b506102e46106f4565b6040805160ff9092168252519081900360200190f35b610147600160a060020a03600435166103b6565b34801561031a57600080fd5b506102776106fd565b34801561032f57600080fd5b5061014761070c565b34801561034457600080fd5b506101766107d1565b34801561035957600080fd5b506101766107e3565b34801561036e57600080fd5b506102776107e9565b34801561038357600080fd5b506101766107f8565b34801561039857600080fd5b50610277610805565b3480156103ad57600080fd5b506102e4610814565b60075460009060ff1615156103ca57600080fd5b60025434146103d857600080fd5b5060018054600090815260096020908152604080832080543401905583548352600a8252822080549384018155825290208101805473ffffffffffffffffffffffffffffffffffffffff191633908117909155610436908390610822565b60015460408051838152426020820152815133927fcc0ff04ae3b71c72a35f6f90c97e68b82f9e63de7c7738ff9155e41a1bd874c1928290030190a35050565b600b54604080517fd63a8e110000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163d63a8e11916024808201926020929091908290030181600087803b1580156104dc57600080fd5b505af11580156104f0573d6000803e3d6000fd5b505050506040513d602081101561050657600080fd5b5051151561051357600080fd5b60075460ff161515610531576007805460ff1916600117905561054d565b6007805461ff001981166101009182900460ff16159091021790555b565b600880548290811061055d57fe5b600091825260209091200154905081565b60025481565b60009081526009602052604090205490565b60075460ff1681565b60055481565b600b54604080517fd63a8e110000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163d63a8e11916024808201926020929091908290030181600087803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b505050506040513d602081101561062557600080fd5b5051151561063257600080fd5b600355565b60045481565b60035481565b60065481565b6000908152600a602052604090205490565b600e54600160a060020a031681565b600754610100900460ff1681565b60408051848602840283028152815160209181900382018120600a90066001908101808352935191829003909201902088820198918801976000939284928b926002920191909101908115156106ca57fe5b06039050878111156106d95750865b888110156106e45750875b6000190198975050505050505050565b60005460ff1681565b600b54600160a060020a031681565b600b54604080517fd63a8e110000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163d63a8e11916024808201926020929091908290030181600087803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b505050506040513d602081101561079c57600080fd5b505115156107a957600080fd5b6001546000908152600a602052604081205411156107c9576107c96109a1565b61054d610c8d565b60006107de600154610649565b905090565b60015481565b600d54600160a060020a031681565b60006107de600154610574565b600c54600160a060020a031681565b600054610100900460ff1681565b600d54604080517fafb26159000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151600093929092169163afb261599160248082019260209290919082900301818787803b15801561088d57600080fd5b505af11580156108a1573d6000803e3d6000fd5b505050506040513d60208110156108b757600080fd5b50519050600160a060020a0383161515806108da5750600160a060020a03811615155b1561099c57600160a060020a038116151561097a57600d54604080517f0b5c3f87000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152858116602483015291519190921691630b5c3f8791604480830192600092919082900301818387803b15801561095e57600080fd5b505af1158015610972573d6000803e3d6000fd5b505050508290505b600180546000908152600a6020526040902054111561099c5761099c82610d18565b505050565b600180546000908152600a602052604081205490918291829182911415610a4857600154600090815260096020908152604080832054600a90925282208054919550919081106109ed57fe5b6000918252602080832090910154600154835260099091526040808320549051600160a060020a039092169281156108fc029290818181858888f19350505050158015610a3e573d6000803e3d6000fd5b5060009350610b75565b610a7660006001600a6000600154815260200190815260200160002080549050034244436001430340610678565b60008054600154825260096020908152604080842054600a9092529092208054939750606461010090920460ff168302919091049182900395509093509085908110610abe57fe5b6000918252602082200154604051600160a060020a039091169185156108fc02918691818181858888f19350505050158015610afe573d6000803e3d6000fd5b506001546000908152600a602052604090208054610b3b919086908110610b2157fe5b600091825260209091200154600160a060020a0316610d18565b600654600e546040519190930392600160a060020a0316906175309084906000818181858888f193505050509050801515610b7557600080fd5b60006006819055600c546001548252600a60205260409091208054600160a060020a03909216916306525fa9919087908110610bad57fe5b6000918252602080832090910154600154808452600a909252604080842054845482517c010000000000000000000000000000000000000000000000000000000063ffffffff8916028152600160a060020a039094166004850152602484019490945260448301526064820189905260ff909216608482015260a48101899052905160c4808301939282900301818387803b158015610c4b57600080fd5b505af1158015610c5f573d6000803e3d6000fd5b50506004805490950190945550506001546000908152600a6020526040902054600580549091019055505050565b60075460ff161515610c9e57600080fd5b4360015560035415610cb65760038054600255600090555b600754610100900460ff1615610cde576007805460ff81161560ff199091161761ff00191690555b600154604080519182525142917fc1e01725071603d5872b301174fe013f7471bd2a95a627a777cf5ad0df4df720919081900360200190a2565b600d54604080517fafb26159000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015291516000938493169163afb2615991602480830192602092919082900301818787803b158015610d8157600080fd5b505af1158015610d95573d6000803e3d6000fd5b505050506040513d6020811015610dab57600080fd5b50519150600160a060020a0382161561099c57610dc782610e64565b9050801561099c57604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610e05573d6000803e3d6000fd5b50600680548201905560408051600160a060020a0385811682526020820184905242828401529151918416917f7267ae1f9f5417f846b1b070c0cdaad8e81251b46cd11a63bb352d7d03c954899181900360600190a261099c82610f20565b600d54604080517fe09f4559000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015291516000938493169163e09f455991602480830192602092919082900301818787803b158015610ecd57600080fd5b505af1158015610ee1573d6000803e3d6000fd5b505050506040513d6020811015610ef757600080fd5b5051905060ff81161515610f0e5760009150610f1a565b610f1781611068565b91505b50919050565b600d54604080517f3622cc76000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915160009384931691633622cc7691602480830192602092919082900301818787803b158015610f8957600080fd5b505af1158015610f9d573d6000803e3d6000fd5b505050506040513d6020811015610fb357600080fd5b50519150600160a060020a0382161561099c57610fcf83611088565b9050801561099c57604051600160a060020a0383169082156108fc029083906000818181858888f1935050505015801561100d573d6000803e3d6000fd5b50600680548201905560408051600160a060020a0385811682526020820184905242828401529151918416917f3fa7b2cc7530a0fcf1d72b5550ba8a6213a976c256cb4d4858502fa4e95735949181900360600190a2505050565b600054600254606460ff9384166101009093049390931602829004020490565b600d54604080517f068593cc000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015291516000938493169163068593cc91602480830192602092919082900301818787803b158015610ecd57600080fd00a165627a7a72305820d3df881923b7b07cc84da5672dd2bf3078b614e993508ab1498e64f2c80924980029000000000000000000000000b68b1b6b35bd13593bcde58bf6af299fb2ea64000000000000000000000000000bda2ba473d5a4a491b252de032218d17b58c1580000000000000000000000001edfacf829f913538636db8dc06aa9bb70eb93c3000000000000000000000000ce13620f4426a2f83d146d3eefb0b909f6fc1007",
  "constructorArguments": "000000000000000000000000b68b1b6b35bd13593bcde58bf6af299fb2ea64000000000000000000000000000bda2ba473d5a4a491b252de032218d17b58c1580000000000000000000000001edfacf829f913538636db8dc06aa9bb70eb93c3000000000000000000000000ce13620f4426a2f83d146d3eefb0b909f6fc1007"
}