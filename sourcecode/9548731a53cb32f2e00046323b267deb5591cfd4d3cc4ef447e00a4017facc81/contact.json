{
  "address": "0x0944393abcfc9879cedc19e070c056f70703f9b8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FourArt",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-25\n*/\n\n/**\n * 4art ERC20 StandardToken\n * Author: scalify.it\n * */\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event DelegatedTransfer(address indexed from, address indexed to, address indexed delegate, uint256 value, uint256 fee);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    mapping(address => uint256) public balances;\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract Owned {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\ncontract FourArt is StandardToken, Owned {\n    string public constant name = \"4ArtCoin\";\n    string public constant symbol = \"4Art\";\n    uint8 public constant decimals = 18;\n    uint256 public sellPrice = 0; // eth\n    uint256 public buyPrice = 0; // eth\n    mapping (address => bool) private SubFounders;       \n    mapping (address => bool) private TeamAdviserPartner;\n    \n    //FounderAddress1 is main founder\n    address private FounderAddress1;\n    address private FounderAddress2;\n    address private FounderAddress3;\n    address private FounderAddress4;\n    address private FounderAddress5;\n    address private teamAddress;\n    address private adviserAddress;\n    address private partnershipAddress;\n    address private bountyAddress;\n    address private affiliateAddress;\n    address private miscAddress;\n    \n    function FourArt(\n        address _founderAddress1, \n        address _founderAddress2,\n        address _founderAddress3, \n        address _founderAddress4, \n        address _founderAddress5, \n        address _teamAddress, \n        address _adviserAddress, \n        address _partnershipAddress, \n        address _bountyAddress, \n        address _affiliateAddress,\n        address _miscAddress\n        )  {\n        totalSupply = 6500000000e18;\n        //assign initial tokens for sale to contracter\n        balances[msg.sender] = 4354000000e18;\n        FounderAddress1 = _founderAddress1;\n        FounderAddress2 = _founderAddress2;\n        FounderAddress3 = _founderAddress3;\n        FounderAddress4 = _founderAddress4;\n        FounderAddress5 = _founderAddress5;\n        teamAddress = _teamAddress;\n        adviserAddress =  _adviserAddress;\n        partnershipAddress = _partnershipAddress;\n        bountyAddress = _bountyAddress;\n        affiliateAddress = _affiliateAddress;\n        miscAddress =  _miscAddress;\n        \n        //Assign tokens to the addresses at contract deployment\n        balances[FounderAddress1] = 1390000000e18;\n        balances[FounderAddress2] = 27500000e18;\n        balances[FounderAddress3] = 27500000e18;\n        balances[FounderAddress4] = 27500000e18;\n        balances[FounderAddress5] = 27500000e18;\n        balances[teamAddress] = 39000000e18;\n        balances[adviserAddress] = 39000000e18;\n        balances[partnershipAddress] = 39000000e18;\n        balances[bountyAddress] = 65000000e18;\n        balances[affiliateAddress] = 364000000e18;\n        balances[miscAddress] = 100000000e18;\n\n        //checks for tokens transfer        \n        SubFounders[FounderAddress2] = true;        \n        SubFounders[FounderAddress3] = true;        \n        SubFounders[FounderAddress4] = true;        \n        SubFounders[FounderAddress5] = true;        \n        TeamAdviserPartner[teamAddress] = true;     \n        TeamAdviserPartner[adviserAddress] = true;  \n        TeamAdviserPartner[partnershipAddress] = true;\n    }\n    \n    // desposit funds to smart contract\n    function () public payable {\n    }\n\n    // Set buy and sell price of 1 token in eth.\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    // @notice Buy tokens from contract by sending ether\n    function buy() payable public {\n        require(now > 1543536000); // seconds since 01.01.1970 to 30.11.2018 (18:00:00 o'clock GMT)\n        uint amount = msg.value.div(buyPrice);       // calculates the amount\n        _transfer(owner, msg.sender, amount);   // makes the transfers\n    }\n\n    // @notice Sell `amount` tokens to contract\n    function sell(uint256 amount) public {\n        require(now > 1543536000); // seconds since 01.01.1970 to 30.11.2018 (18:00:00 o'clock GMT) \n        require(amount > 0);\n        require(balances[msg.sender] >= amount);\n        uint256 requiredBalance = amount.mul(sellPrice);\n        require(this.balance >= requiredBalance);  // checks if the contract has enough ether to pay\n        balances[msg.sender] -= amount;\n        balances[owner] += amount;\n        Transfer(msg.sender, owner, amount); \n        msg.sender.transfer(requiredBalance);    // sends ether to the seller.\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balances[_from] >= _value);\n        // Check for overflows\n        require(balances[_to] + _value > balances[_to]);\n        // Subtract from the sender\n        balances[_from] -= _value;\n        // Add the same to the recipient\n        balances[_to] += _value;\n        Transfer(_from, _to, _value);\n    }\n\n    // @dev if owner wants to transfer contract ether balance to own account.\n    function transferBalanceToOwner(uint256 _value) public onlyOwner {\n        require(_value <= this.balance);\n        owner.transfer(_value);\n    }\n    \n    // @dev if someone wants to transfer tokens to other account.\n    function transferTokens(address _to, uint256 _tokens) lockTokenTransferBeforeStage4 TeamTransferConditions(_tokens, msg.sender)   public {\n        _transfer(msg.sender, _to, _tokens);\n    }\n    \n    // @dev Transfer tokens from one address to another\n    function transferFrom(address _from, address _to, uint256 _value) lockTokenTransferBeforeStage4 TeamTransferConditions(_value, _from)  public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    modifier lockTokenTransferBeforeStage4{\n        if(msg.sender != owner){\n           require(now > 1533513600); // Locking till stage 4 starting date (ICO).\n        }\n        _;\n    }\n    \n    modifier TeamTransferConditions(uint256 _tokens,  address _address) {\n        if(SubFounders[_address]){\n            require(now > 1543536000);\n            if(now > 1543536000 && now < 1569628800){\n                //90% lock of total 27500000e18\n                isLocked(_tokens, 24750000e18, _address);\n            } \n            if(now > 1569628800 && now < 1601251200){\n               //50% lock of total 27500000e18\n               isLocked(_tokens, 13750000e18, _address);\n            }\n        }\n        \n        if(TeamAdviserPartner[_address]){\n            require(now > 1543536000);\n            if(now > 1543536000 && now < 1569628800){\n                //85% lock of total 39000000e18\n                isLocked(_tokens, 33150000e18, _address);\n            } \n            if(now > 1569628800 && now < 1601251200){\n               //60% lock of total 39000000e18\n               isLocked(_tokens, 23400000e18, _address);\n            }\n        }\n        _;\n    }\n\n    // @dev if someone wants to transfer tokens to other account.    \n    function isLocked(uint256 _value,uint256 remainingTokens, address _address)  internal returns (bool) {\n            uint256 remainingBalance = balances[_address].sub(_value);\n            require(remainingBalance >= remainingTokens);\n            return true;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000c2e9248160ee2f77d69611fa45a36f941eafc1ca000000000000000000000000b6790202dad8f3750e93e74ca040330705fe2987000000000000000000000000f34e425ac144e50bdfcc6e54b64064ab05c94ef2000000000000000000000000ee1be8a57051c392d2d1f587545376ba65547f22000000000000000000000000a2088f0bd7650a32a807934605ea17453f8091fb00000000000000000000000040e2a66571a06a8d6e8dbab4d1209d14427573c00000000000000000000000009d498c1b1bf16e5de040591d6011dcd48d080e38000000000000000000000000d3cfc8961a38bd5d4f8ad0659543e95e8275a94d0000000000000000000000001012fb3640e8e8224c1475414c4bf855407a4767000000000000000000000000504b7573db9dee062c7e091c1e51380a85aa70550000000000000000000000001449b742a1deadcdd975a8d63cc576c9c2b5007d"
}