{
  "address": "0xad0a61589f3559026f00888027beac31a5ac4625",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NeutrinoTokenStandard",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-22\n*/\n\npragma solidity ^0.4.25;\n\n/*\n    Neutrino Token Standard v1.1\n    + fund() payable\n    + 2 days free deposit\n\n    [Rules]\n\n    [✓] 10% Deposit fee\n            33% => referrer (or contract owner, if none)\n            10% => contract owner\n            57% => dividends\n    [✓] 1% Withdraw fee\n            100% => contract owner\n*/\n\ncontract NeutrinoTokenStandard {\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    event OnFunded(\n        address indexed source,\n        uint256 value,\n        uint256 perShare\n    );\n\n    string public name = \"Neutrino Token Standard\";\n    string public symbol = \"NTS\";\n    address constant internal boss = 0x10d915C0B3e01090C7B5f80eF2D9CdB616283853;\n    uint8 constant public decimals = 18;\n    uint8 constant internal entryFee_ = 10;\n    uint8 constant internal exitFee_ = 1;\n    uint8 constant internal refferalFee_ = 33;\n    uint8 constant internal ownerFee1 = 10;\n    uint8 constant internal ownerFee2 = 25;\n    uint32 holdTimeInBlocks = 558000;\n    uint256 constant internal tokenPrice = 0.001 ether;\n    \n    uint256 constant internal magnitude = 2 ** 64;\n    uint256 public stakingRequirement = 50e18;\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) public referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) public since;\n\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    uint256 internal start_;\n    \n    constructor() public {\n        start_ = block.number;\n    }\n\n    function buy(address _referredBy) public payable returns (uint256) {\n        return purchaseTokens(msg.value, _referredBy);\n    }\n\n    function() payable public {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    function reinvest() onlyStronghands public {\n        uint256 _dividends = myDividends(false);\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    function exit() public {\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n        withdraw();\n    }\n\n    function withdraw() onlyStronghands public {\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false);\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        _customerAddress.transfer(_dividends);\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n\n        uint8 applyFee;\n        uint256 _dividends;\n        uint256 forBoss;\n        uint256 _taxedEthereum;\n        \n        if (since[msg.sender] + holdTimeInBlocks > block.number) {\n            applyFee = 20;\n\n            _dividends = SafeMath.div(SafeMath.mul(_ethereum, applyFee), 100);\n            forBoss = SafeMath.div(SafeMath.mul(_dividends, ownerFee2), 100);\n            _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            \n            _dividends = SafeMath.sub(_dividends, forBoss);\n            \n            tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n    \n            if (tokenSupply_ > 0) {\n                profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n            } else {\n                referralBalance_[boss] += _dividends;\n            }\n        } else {\n            applyFee = exitFee_;\n            \n            forBoss = SafeMath.div(SafeMath.mul(_ethereum, applyFee), 100);\n            _taxedEthereum = SafeMath.sub(_ethereum, forBoss);\n            \n            tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        }\n        \n        referralBalance_[boss] = SafeMath.add(referralBalance_[boss], forBoss);\n        \n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        \n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n        \n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    function sellPrice() public pure returns (uint256) {\n        uint256 _ethereum = tokensToEthereum_(1e18);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        return _taxedEthereum;\n    }\n\n    function buyPrice() public pure returns (uint256) {\n        uint256 _ethereum = tokensToEthereum_(1e18);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n        return _taxedEthereum;\n    }\n\n    function calculateTokensReceived(uint256 _ethereumToSpend) public pure returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint8 applyFee = exitFee_;\n        if (since[msg.sender] + holdTimeInBlocks > block.number) applyFee = 20;\n        \n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, applyFee), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\n        address _customerAddress = msg.sender;\n        uint8 _entryFee = entryFee_;\n        if (block.number < start_ + 12130) _entryFee = 0;\n        \n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, _entryFee), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 forBoss = SafeMath.div(SafeMath.mul(_undividedDividends, ownerFee1), 100);\n        uint256 _dividends = SafeMath.sub(SafeMath.sub(_undividedDividends, _referralBonus), forBoss);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        if (\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n            _referredBy != _customerAddress &&\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n            emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n        } else {\n            referralBalance_[boss] = SafeMath.add(referralBalance_[boss], _referralBonus);\n            emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, 0x0, now, buyPrice());\n        }\n\n        referralBalance_[boss] = SafeMath.add(referralBalance_[boss], forBoss);\n\n        if (tokenSupply_ > 0) {\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        if (since[msg.sender] == 0) since[msg.sender] = block.number;\n\n        return _amountOfTokens;\n    }\n\n    function ethereumToTokens_(uint256 _ethereum) public pure returns (uint256) {\n        uint256 _tokensReceived = SafeMath.div(SafeMath.mul(_ethereum, 1e18), tokenPrice);\n\n        return _tokensReceived;\n    }\n\n    function tokensToEthereum_(uint256 _tokens) public pure returns (uint256) {\n        uint256 _etherReceived = SafeMath.div(SafeMath.mul(_tokens, tokenPrice), 1e18);\n\n        return _etherReceived;\n    }\n    \n    function fund() public payable {\n        uint256 perShare = msg.value * magnitude / tokenSupply_;\n        profitPerShare_ += perShare;\n        emit OnFunded(msg.sender, msg.value, perShare);\n    }\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereum\",\"type\":\"uint256\"}],\"name\":\"ethereumToTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToEthereum_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"since\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"perShare\",\"type\":\"uint256\"}],\"name\":\"OnFunded\",\"type\":\"event\"}]",
  "bytecode": "60c0604052601760808190527f4e65757472696e6f20546f6b656e205374616e6461726400000000000000000060a0908152620000409160009190620000bf565b506040805180820190915260038082527f4e5453000000000000000000000000000000000000000000000000000000000060209092019182526200008791600191620000bf565b506002805463ffffffff1916620883b01790556802b5e3af16b1880000600355348015620000b457600080fd5b5043600a5562000164565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010257805160ff191683800117855562000132565b8280016001018555821562000132579182015b828111156200013257825182559160200191906001019062000115565b506200014092915062000144565b5090565b6200016191905b808211156200014057600081556001016200014b565b90565b61106580620001746000396000f3006080604052600436106101315763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461013f57806306fdde031461017257806310d0ffdd146101fc57806318160ddd1461021457806322609373146102295780632a9121c714610241578063313ce567146102595780633ccfd60b146102845780634b7503341461029b57806356d399e8146102b0578063688abbf7146102c557806370a08231146102df5780638620410b14610300578063949e8acd1461031557806395d89b411461032a578063b60d42881461033f578063bf3b397b14610347578063c664f7f11461035f578063e4849b3214610380578063e9fad8ee14610398578063eaec2b43146103ad578063f088d547146103ce578063fdb5a03e146103e2575b61013c3460006103f7565b50005b34801561014b57600080fd5b50610160600160a060020a03600435166107cf565b60408051918252519081900360200190f35b34801561017e57600080fd5b5061018761080a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c15781810151838201526020016101a9565b50505050905090810190601f1680156101ee5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020857600080fd5b50610160600435610898565b34801561022057600080fd5b506101606108cb565b34801561023557600080fd5b506101606004356108d1565b34801561024d57600080fd5b5061016060043561094a565b34801561026557600080fd5b5061026e610976565b6040805160ff9092168252519081900360200190f35b34801561029057600080fd5b5061029961097b565b005b3480156102a757600080fd5b50610160610a4e565b3480156102bc57600080fd5b50610160610a89565b3480156102d157600080fd5b506101606004351515610a8f565b3480156102eb57600080fd5b50610160600160a060020a0360043516610acf565b34801561030c57600080fd5b50610160610aea565b34801561032157600080fd5b50610160610b1d565b34801561033657600080fd5b50610187610b2f565b610299610b89565b34801561035357600080fd5b50610160600435610bf3565b34801561036b57600080fd5b50610160600160a060020a0360043516610c18565b34801561038c57600080fd5b50610299600435610c2a565b3480156103a457600080fd5b50610299610e8f565b3480156103b957600080fd5b50610160600160a060020a0360043516610ebc565b610160600160a060020a0360043516610ece565b3480156103ee57600080fd5b50610299610ee0565b6000806000806000806000806000806000339950600a9850600a54612f620143101561042257600098505b6104396104328e8b60ff16610f96565b6064610fcf565b9750610449610432896021610f96565b965061045961043289600a610f96565b955061046e6104688989610ff2565b87610ff2565b945061047a8d89610ff2565b93506104858461094a565b925068010000000000000000850291506000831180156104af57506008546104ad8482611007565b115b15156104ba57600080fd5b600160a060020a038c16158015906104e4575089600160a060020a03168c600160a060020a031614155b801561050a5750600354600160a060020a038d1660009081526004602052604090205410155b156105a757600160a060020a038c166000908152600560205260409020546105329088611007565b600160a060020a03808e166000818152600560205260409020929092558b167f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8f864261057d610aea565b604080519485526020850193909352838301919091526060830152519081900360800190a361066c565b7310d915c0b3e01090c7b5f80ef2d9cdb616283853600052600560205260008051602061101a833981519152546105de9088611007565b7310d915c0b3e01090c7b5f80ef2d9cdb6162838536000908152600560205260008051602061101a83398151915291909155600160a060020a038b167f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8f8642610646610aea565b604080519485526020850193909352838301919091526060830152519081900360800190a35b7310d915c0b3e01090c7b5f80ef2d9cdb616283853600052600560205260008051602061101a833981519152546106a39087611007565b7310d915c0b3e01090c7b5f80ef2d9cdb6162838536000908152600560205260008051602061101a833981519152919091556008541115610737576106ea60085484611007565b600881905568010000000000000000860281151561070457fe5b6009805492909104909101905560085468010000000000000000860281151561072957fe5b04830282038203915061073d565b60088390555b600160a060020a038a166000908152600460205260409020546107609084611007565b600160a060020a038b16600090815260046020908152604080832093909355600954600682528383208054918802879003918201905533835260079091529190205490915015156107be573360009081526007602052604090204390555b50909b9a5050505050505050505050565b600160a060020a0316600090815260066020908152604080832054600490925290912054600954680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108905780601f1061086557610100808354040283529160200191610890565b820191906000526020600020905b81548152906001019060200180831161087357829003601f168201915b505050505081565b60008080806108ab61043286600a610f96565b92506108b78584610ff2565b91506108c28261094a565b95945050505050565b60085490565b600080600080600060085486111515156108ea57600080fd5b6108f386610bf3565b60025433600090815260076020526040902054919550600194504363ffffffff909116909101111561092457601492505b610934610432858560ff16610f96565b91506109408483610ff2565b9695505050505050565b60008061096f61096284670de0b6b3a7640000610f96565b66038d7ea4c68000610fcf565b9392505050565b601281565b600080600061098a6001610a8f565b1161099457600080fd5b3391506109a16000610a8f565b600160a060020a038316600081815260066020908152604080832080546801000000000000000087020190556005909152808220805490839055905193019350909183156108fc0291849190818181858888f19350505050158015610a0a573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b600080600080610a65670de0b6b3a7640000610bf3565b9250610a75610432846001610f96565b9150610a818383610ff2565b949350505050565b60035481565b60003382610aa557610aa0816107cf565b61096f565b600160a060020a038116600090815260056020526040902054610ac7826107cf565b019392505050565b600160a060020a031660009081526004602052604090205490565b600080600080610b01670de0b6b3a7640000610bf3565b9250610b1161043284600a610f96565b9150610a818383611007565b600033610b2981610acf565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108905780601f1061086557610100808354040283529160200191610890565b6000600854680100000000000000003402811515610ba357fe5b600980549290910491820190556040805134815260208101839052815192935033927f492bbc975155443892f7e88ae16227978acc1c9110a1592879c8f427e6c45280929181900390910190a250565b60008061096f610c0a8466038d7ea4c68000610f96565b670de0b6b3a7640000610fcf565b60056020526000908152604090205481565b6000806000806000806000806000610c40610b1d565b11610c4a57600080fd5b33600081815260046020526040902054909850891115610c6957600080fd5b889650610c7587610bf3565b600254336000908152600760205260409020549197504363ffffffff9091169091011115610d555760149450610cae6104328787610f96565b9350610cbe610432856019610f96565b9250610cca8685610ff2565b9150610cd68484610ff2565b9350610ce460085488610ff2565b600881905560001015610d1d57610d15600954600854680100000000000000008702811515610d0f57fe5b04611007565b600955610d50565b7310d915c0b3e01090c7b5f80ef2d9cdb616283853600052600560205260008051602061101a8339815191528054850190555b610d84565b60019450610d666104328787610f96565b9250610d728684610ff2565b9150610d8060085488610ff2565b6008555b7310d915c0b3e01090c7b5f80ef2d9cdb616283853600052600560205260008051602061101a83398151915254610dbb9084611007565b60008051602061101a83398151915255600160a060020a038816600090815260046020526040902054610dee9088610ff2565b600160a060020a03891660008181526004602090815260408083209490945560095460069091529290208054928a02680100000000000000008602019283900390559091507f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e888442610e5f610aea565b604080519485526020850193909352838301919091526060830152519081900360800190a2505050505050505050565b3360008181526004602052604081205490811115610eb057610eb081610c2a565b610eb861097b565b5050565b60076020526000908152604090205481565b6000610eda34836103f7565b92915050565b600080600080610ef06001610a8f565b11610efa57600080fd5b610f046000610a8f565b33600081815260066020908152604080832080546801000000000000000087020190556005909152812080549082905590920194509250610f469084906103f7565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600080831515610fa95760009150610fc8565b50828202828482811515610fb957fe5b0414610fc457600080fd5b8091505b5092915050565b600080808311610fde57600080fd5b8284811515610fe957fe5b04949350505050565b60008282111561100157600080fd5b50900390565b600082820183811015610fc457600080fd003da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9a165627a7a7230582009d9aeceb58464bed3082ecd58bc2e40b579124afb34c0175a2330185854874e0029"
}