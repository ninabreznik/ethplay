{
  "address": "0xc3098b97ba3dd1594b8fc8eae3cd53fb1ecd36af",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DITCToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "20000000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-02\n*/\n\npragma solidity ^0.4.23;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a && c>=b);\n    return c;\n  }\n}\n\n\n// source : https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\n\ncontract DITCToken is ERC20Interface {\n  using SafeMath for uint;\n\n  // State variables\n  string public name = 'DitCoin Token';\n  string public symbol = 'DITC';\n  uint public decimals = 8;\n  address public owner;\n  uint public totalSupply = 100000000 * (10 ** 8);\n  bool public emergencyFreeze;\n  \n  // mappings\n  mapping (address => uint) balances;\n  mapping (address => mapping (address => uint) ) allowed;\n  mapping (address => bool) frozen;\n  \n\n  // constructor\n  constructor () public {\n    owner = msg.sender;\n    balances[owner] = totalSupply;\n    emit Transfer(0x0, owner, totalSupply);\n  }\n\n  // events\n  event OwnershipTransferred(address indexed _from, address indexed _to);\n  event Burn(address indexed from, uint256 amount);\n  event Freezed(address targetAddress, bool frozen);\n  event EmerygencyFreezed(bool emergencyFreezeStatus);\n  \n\n\n  // Modifiers\n  modifier onlyOwner {\n    require(msg.sender == owner);\n     _;\n  }\n\n  modifier unfreezed(address _account) { \n    require(!frozen[_account]);\n    _;  \n  }\n  \n  modifier noEmergencyFreeze() { \n    require(!emergencyFreeze);\n    _; \n  }\n  \n\n\n  // functions\n\n  // ------------------------------------------------------------------------\n  // Transfer Token\n  // ------------------------------------------------------------------------\n  function transfer(address _to, uint _value) unfreezed(_to) unfreezed(msg.sender) noEmergencyFreeze() public returns (bool success) {\n    require(_to != 0x0);\n    require(balances[msg.sender] >= _value); \n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  // ------------------------------------------------------------------------\n  // Approve others to spend on your behalf\n  // ------------------------------------------------------------------------\n  /* \n    While changing approval, the allowed must be changed to 0 than then to updated value\n    The smart contract enforces this for security reasons\n   */\n  function approve(address _spender, uint _value) unfreezed(_spender) unfreezed(msg.sender) noEmergencyFreeze() public returns (bool success) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition \n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  // ------------------------------------------------------------------------\n  // Approve and call : If approve returns true, it calls receiveApproval method of contract\n  // ------------------------------------------------------------------------\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)\n    {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n  // ------------------------------------------------------------------------\n  // Transferred approved amount from other's account\n  // ------------------------------------------------------------------------\n  function transferFrom(address _from, address _to, uint _value) unfreezed(_to) unfreezed(_from) unfreezed(msg.sender) noEmergencyFreeze() public returns (bool success) {\n    require(_value <= allowed[_from][msg.sender]);\n    require (_value <= balances[_from]);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n\n  // ------------------------------------------------------------------------\n  // Burn (Destroy tokens)\n  // ------------------------------------------------------------------------\n  function burn(uint256 _value) unfreezed(msg.sender) public returns (bool success) {\n    require(balances[msg.sender] >= _value);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    emit Burn(msg.sender, _value);\n    return true;\n  }\n\n  // ------------------------------------------------------------------------\n  //               ONLYOWNER METHODS                             \n  // ------------------------------------------------------------------------\n\n\n  // ------------------------------------------------------------------------\n  // Transfer Ownership\n  // ------------------------------------------------------------------------\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require(_newOwner != address(0));\n    owner = _newOwner;\n    emit OwnershipTransferred(owner, _newOwner);\n  }\n\n  // ------------------------------------------------------------------------\n  // Freeze account - onlyOwner\n  // ------------------------------------------------------------------------\n  function freezeAccount (address _target, bool _freeze) public onlyOwner returns(bool res) {\n    require(_target != 0x0);\n    frozen[_target] = _freeze;\n    emit Freezed(_target, _freeze);\n    return true;\n  }\n\n  // ------------------------------------------------------------------------\n  // Emerygency freeze - onlyOwner\n  // ------------------------------------------------------------------------\n  function emergencyFreezeAllAccounts (bool _freeze) public onlyOwner returns(bool res) {\n    emergencyFreeze = _freeze;\n    emit EmerygencyFreezed(_freeze);\n    return true;\n  }\n  \n\n  // ------------------------------------------------------------------------\n  //               CONSTANT METHODS\n  // ------------------------------------------------------------------------\n\n\n  // ------------------------------------------------------------------------\n  // Check Allowance : Constant\n  // ------------------------------------------------------------------------\n  function allowance(address _tokenOwner, address _spender) public constant returns (uint remaining) {\n    return allowed[_tokenOwner][_spender];\n  }\n\n  // ------------------------------------------------------------------------\n  // Check Balance : Constant\n  // ------------------------------------------------------------------------\n  function balanceOf(address _tokenOwner) public constant returns (uint balance) {\n    return balances[_tokenOwner];\n  }\n\n  // ------------------------------------------------------------------------\n  // Total supply : Constant\n  // ------------------------------------------------------------------------\n  function totalSupply() public constant returns (uint) {\n    return totalSupply;\n  }\n\n  // ------------------------------------------------------------------------\n  // Get Freeze Status : Constant\n  // ------------------------------------------------------------------------\n  function isFreezed(address _targetAddress) public constant returns (bool) {\n    return frozen[_targetAddress]; \n  }\n\n\n\n  // ------------------------------------------------------------------------\n  // Prevents contract from accepting ETH\n  // ------------------------------------------------------------------------\n  function () public payable {\n    revert();\n  }\n\n  // ------------------------------------------------------------------------\n  // Owner can transfer out any accidentally sent ERC20 tokens\n  // ------------------------------------------------------------------------\n  function transferAnyERC20Token(address _tokenAddress, uint _value) public onlyOwner returns (bool success) {\n      return ERC20Interface(_tokenAddress).transfer(owner, _value);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"emergencyFreezeAllAccounts\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_targetAddress\",\"type\":\"address\"}],\"name\":\"isFreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"targetAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"emergencyFreezeStatus\",\"type\":\"bool\"}],\"name\":\"EmerygencyFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60c0604052600d60808190527f446974436f696e20546f6b656e0000000000000000000000000000000000000060a090815262000040916000919062000119565b506040805180820190915260048082527f44495443000000000000000000000000000000000000000000000000000000006020909201918252620000879160019162000119565b506008600255662386f26fc10000600455348015620000a557600080fd5b5060038054600160a060020a0319163317808255600454600160a060020a039182166000908152600660209081526040808320849055945485519384529451949093169390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3620001be565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015c57805160ff19168380011785556200018c565b828001600101855582156200018c579182015b828111156200018c5782518255916020019190600101906200016f565b506200019a9291506200019e565b5090565b620001bb91905b808211156200019a5760008155600101620001a5565b90565b6110a180620001ce6000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101cf57806323b872dd146101f6578063313ce5671461022d57806342966c681461024257806370a082311461025a5780637898278f146102885780638111f24e146102a25780638da5cb5b146102d057806395d89b411461030e578063a9059cbb14610323578063cae9ca5114610354578063dc39d06d146103ca578063dd62ed3e146103fb578063e724529c1461042f578063f2fde38b14610462578063f3d4b94214610492575b600080fd5b34801561010c57600080fd5b506101156104a7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014f578181015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019657600080fd5b506101bb73ffffffffffffffffffffffffffffffffffffffff60043516602435610553565b604080519115158252519081900360200190f35b3480156101db57600080fd5b506101e4610671565b60408051918252519081900360200190f35b34801561020257600080fd5b506101bb73ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435610677565b34801561023957600080fd5b506101e46108bf565b34801561024e57600080fd5b506101bb6004356108c5565b34801561026657600080fd5b506101e473ffffffffffffffffffffffffffffffffffffffff60043516610986565b34801561029457600080fd5b506101bb60043515156109ae565b3480156102ae57600080fd5b506101bb73ffffffffffffffffffffffffffffffffffffffff60043516610a3f565b3480156102dc57600080fd5b506102e5610a6a565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561031a57600080fd5b50610115610a86565b34801561032f57600080fd5b506101bb73ffffffffffffffffffffffffffffffffffffffff60043516602435610afe565b34801561036057600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101bb94823573ffffffffffffffffffffffffffffffffffffffff16946024803595369594606494920191908190840183828082843750949750610c6a9650505050505050565b3480156103d657600080fd5b506101bb73ffffffffffffffffffffffffffffffffffffffff60043516602435610d90565b34801561040757600080fd5b506101e473ffffffffffffffffffffffffffffffffffffffff60043581169060243516610e66565b34801561043b57600080fd5b506101bb73ffffffffffffffffffffffffffffffffffffffff600435166024351515610e9e565b34801561046e57600080fd5b5061049073ffffffffffffffffffffffffffffffffffffffff60043516610f7b565b005b34801561049e57600080fd5b506101bb611036565b6000805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f8101849004840282018401909252818152929183018282801561054b5780601f106105205761010080835404028352916020019161054b565b820191906000526020600020905b81548152906001019060200180831161052e57829003601f168201915b505050505081565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040812054839060ff161561058857600080fd5b3360008181526008602052604090205460ff16156105a557600080fd5b60055460ff16156105b557600080fd5b8315806105f0575033600090815260076020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452909152902054155b15156105fb57600080fd5b33600081815260076020908152604080832073ffffffffffffffffffffffffffffffffffffffff8a1680855290835292819020889055805188815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3506001949350505050565b60045490565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040812054839060ff16156106ac57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516600090815260086020526040902054859060ff16156106e157600080fd5b3360008181526008602052604090205460ff16156106fe57600080fd5b60055460ff161561070e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8716600090815260076020908152604080832033845290915290205485111561074b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff871660009081526006602052604090205485111561077d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff87166000908152600660205260409020546107b3908663ffffffff61103f16565b73ffffffffffffffffffffffffffffffffffffffff881660009081526006602090815260408083209390935560078152828220338352905220546107fd908663ffffffff61103f16565b73ffffffffffffffffffffffffffffffffffffffff808916600090815260076020908152604080832033845282528083209490945591891681526006909152205461084e908663ffffffff61105116565b73ffffffffffffffffffffffffffffffffffffffff80881660008181526006602090815260409182902094909455805189815290519193928b16927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019695505050505050565b60025481565b3360008181526008602052604081205490919060ff16156108e557600080fd5b3360009081526006602052604090205483111561090157600080fd5b33600090815260066020526040902054610921908463ffffffff61103f16565b33600090815260066020526040902055600454610944908463ffffffff61103f16565b60045560408051848152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a250600192915050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526006602052604090205490565b60035460009073ffffffffffffffffffffffffffffffffffffffff1633146109d557600080fd5b600580548315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116811790915560408051918252517f20cab5a89e9642fc2f3e47bcd2c27f01489aa2e5f76f1a2e673d2e1358dbfdf59181900360200190a1506001919050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526008602052604090205460ff1690565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60018054604080516020600284861615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f8101849004840282018401909252818152929183018282801561054b5780601f106105205761010080835404028352916020019161054b565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020526040812054839060ff1615610b3357600080fd5b3360008181526008602052604090205460ff1615610b5057600080fd5b60055460ff1615610b6057600080fd5b73ffffffffffffffffffffffffffffffffffffffff85161515610b8257600080fd5b33600090815260066020526040902054841115610b9e57600080fd5b33600090815260066020526040902054610bbe908563ffffffff61103f16565b336000908152600660205260408082209290925573ffffffffffffffffffffffffffffffffffffffff871681522054610bfd908563ffffffff61105116565b73ffffffffffffffffffffffffffffffffffffffff86166000818152600660209081526040918290209390935580518781529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001949350505050565b600083610c778185610553565b15610d88576040517f8f4ffcb1000000000000000000000000000000000000000000000000000000008152336004820181815260248301879052306044840181905260806064850190815287516084860152875173ffffffffffffffffffffffffffffffffffffffff871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b83811015610d1c578181015183820152602001610d04565b50505050905090810190601f168015610d495780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015610d6b57600080fd5b505af1158015610d7f573d6000803e3d6000fd5b50505050600191505b509392505050565b60035460009073ffffffffffffffffffffffffffffffffffffffff163314610db757600080fd5b600354604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810185905290519185169163a9059cbb916044808201926020929091908290030181600087803b158015610e3357600080fd5b505af1158015610e47573d6000803e3d6000fd5b505050506040513d6020811015610e5d57600080fd5b50519392505050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260076020908152604080832093909416825291909152205490565b60035460009073ffffffffffffffffffffffffffffffffffffffff163314610ec557600080fd5b73ffffffffffffffffffffffffffffffffffffffff83161515610ee757600080fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526008602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915582519384529083015280517f8e0072eb5b566b3db642c008c48eecb43223b42000750a06f59acbbc58580aed9281900390910190a150600192915050565b60035473ffffffffffffffffffffffffffffffffffffffff163314610f9f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff81161515610fc157600080fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821792839055604051919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b60055460ff1681565b60008282111561104b57fe5b50900390565b60008282018381108015906110665750828110155b151561106e57fe5b93925050505600a165627a7a72305820d3f586b3e8641adbd21de84fbd2340b2fc8401762b492e601fe0bd5b62f86fd20029"
}