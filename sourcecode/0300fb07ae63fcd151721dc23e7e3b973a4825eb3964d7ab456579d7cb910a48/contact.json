{
  "address": "0xDA6a108955AB098c8e685FF07e357DF3a4979ADd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AuraToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.5.7;\n\ncontract AuraToken {\n\n    mapping (address => uint256) balances;\n    uint256 totalSupply;\n    uint256 freeSupply;\n    address owner1;\n    address owner2;\n    address owner3;\n    string public name;                   //fancy name: eg Simon Bucks\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    string public symbol;                 //An identifier: eg SBX\n    string public version = 'H1.7';       //human 0.1 standard. Just an arbitrary versioning scheme.\n\n    uint256 rateBuy;\n    //uint256 amount1;\n    //uint256 amount2;\n    //uint256 amount3;\n    address payable w_owner;\n    uint256 w_amount;\n    ///uint256 rateSell;\n\n    constructor () public {\n        owner2 = 0xEb5887409Dbf80de52cBE1dD441801F1f01c568b;\n        owner1 = 0xBd1A0E79e12F9D7109d58D014C2A8fba1AA44935;\n        owner3 = 0xc0eE5076F0D78D87AD992B6CE205d88133aD25c0;\n\n        //balances[msg.sender] = 1000000000000000; // Give the creator all initial tokens (100000 for example)\n        totalSupply = 0;                    // Update total supply (100000 for example)\n        freeSupply = 0;                     // Update free supply (100000 for example)\n        name = \"atlant resourse\";           // Set the name for display purposes\n        decimals = 8;                        // Amount of decimals for display purposes\n        symbol = \"AURA\";                     // Set the symbol for display purposes\n        rateBuy = 200000000000;              // 20 eth per AURA\n        ///rateSell = 404000000;\n        emit TotalSupply(totalSupply);\n        //amount1 = 0;\n        //amount2 = 0;\n        //amount3 = 0;\n        w_amount = 0;\n    }\n\n    /// @return total amount of tokens\n    function total_supply() public view returns (uint256 _supply) {\n        return totalSupply;\n    }\n\n    /// @return free amount of tokens\n    function free_supply() public view returns (uint256 _supply) {\n        return freeSupply;\n    }\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        if (balances[msg.sender] - _value >= 0 && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    /// @notice send `_value` token to `_to` from New Atlantis Central bank\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred. Negative value is allowed\n    /// @return Whether the transfer was successful or not\n    function transferFromNA(address _to, uint256 _value) public returns (bool success) {\n        require((msg.sender == owner1) || (msg.sender == owner2) || (msg.sender == owner3));\n        balances[_to] += _value;\n        freeSupply -= _value;\n        emit Transfer(address(0), _to, _value);\n        return true;\n    }\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event TotalSupply(uint256 _value);\n    event Rates(uint256 _value);\n    \n    function () external payable {\n        buyAura();\n    }\n\n    ///function setRates(uint256 _rateBuy, uint256 _rateSell) public {\n    function setRates(uint256 _rateBuy) public {\n        require((msg.sender == owner1) || (msg.sender == owner2) || (msg.sender == owner3));\n        ///require(_rateBuy < _rateSell);\n        rateBuy = _rateBuy;\n        ///rateSell = _rateSell;\n        emit Rates(rateBuy);\n    }\n    \n    function printTokens(uint256 _amount) public {       // must be signed from owner1\n        require(totalSupply<=1500000000000000000000000);  // 15 000 000 000 000 000 AURA\n        require(_amount>0);\n        require(_amount<=1500000000000000000);          // 15 000 000 000 AURA\n        //if(msg.sender == owner1) amount1 = _amount;\n        //if(msg.sender == owner2) amount2 = _amount;\n        //if(msg.sender == owner3) amount3 = _amount;\n        //if((amount1 == amount2) && (amount2 == amount3)) {\n        if(msg.sender == owner1) {\n            totalSupply +=_amount;\n            freeSupply += _amount;\n            emit TotalSupply(_amount);\n            //amount1 = 0;\n            //amount2 = 0;\n            //amount3 = 0;\n        }\n    }\n    \n    function buyAura() public payable {\n        require(msg.value > 0);\n        require(msg.value <= 150000000000000000000000000000); //150 000 000 000 ether\n        balances[msg.sender] += msg.value / rateBuy;\n        freeSupply -= msg.value / rateBuy; // Negative value is allowed\n    }\n    \n    ///function sellAura(uint256 _amount) public {\n    ///    require(balances[msg.sender] > _amount);\n    ///    balances[msg.sender] -= _amount;\n    ///    msg.sender.transfer(_amount / rateSell);\n    ///}\n    \n    function withdraw(uint256 _amount) public {  // must be signed from 2 owners\n        require(_amount > 0);\n        require((msg.sender == owner1) || (msg.sender == owner2) || (msg.sender == owner3));\n        if((msg.sender != w_owner) && (_amount == w_amount)) {\n            w_amount = 0;\n            w_owner.transfer(_amount);\n        }\n        else {\n            w_owner = msg.sender;\n            w_amount = _amount;\n        }\n    }\n}",
  "bytecode": "60c0604052600460808190527f48312e370000000000000000000000000000000000000000000000000000000060a090815261003e916009919061019d565b5034801561004b57600080fd5b50600480546001600160a01b031990811673eb5887409dbf80de52cbe1dd441801f1f01c568b1790915560038054821673bd1a0e79e12f9d7109d58d014c2a8fba1aa449351790556005805490911673c0ee5076f0d78d87ad992b6ce205d88133ad25c01790556000600181905560025560408051808201909152600f8082527f61746c616e74207265736f75727365000000000000000000000000000000000060209092019182526101009160069161019d565b506007805460ff191660089081179091556040805180820190915260048082527f4155524100000000000000000000000000000000000000000000000000000000602090920191825261015492919061019d565b50642e90edd000600a5560015460408051918252517f91cf34a58a9ed220d9b072639106d1d07251e1791426d2560ab2d6c4ca19a1839181900360200190a16000600c55610238565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101de57805160ff191683800117855561020b565b8280016001018555821561020b579182015b8281111561020b5782518255916020019190600101906101f0565b5061021792915061021b565b5090565b61023591905b808211156102175760008155600101610221565b90565b610831806102476000396000f3fe6080604052600436106100c25760003560e01c806364db3a8a1161007f57806395d89b411161005957806395d89b4114610259578063a9059cbb1461026e578063fb3296ea146102bb578063fb68a3be146102f4576100c2565b806364db3a8a146100c257806366fe513a1461021157806370a0823114610226576100c2565b806306fdde03146100cc5780632d1babed146101565780632e1a7d4d14610180578063313ce567146101aa5780633940e9ee146101d557806354fd4d50146101fc575b6100ca61031e565b005b3480156100d857600080fd5b506100e1610384565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561011b578181015183820152602001610103565b50505050905090810190601f1680156101485780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016257600080fd5b506100ca6004803603602081101561017957600080fd5b5035610412565b34801561018c57600080fd5b506100ca600480360360208110156101a357600080fd5b503561048e565b3480156101b657600080fd5b506101bf61055d565b6040805160ff9092168252519081900360200190f35b3480156101e157600080fd5b506101ea610566565b60408051918252519081900360200190f35b34801561020857600080fd5b506100e161056c565b34801561021d57600080fd5b506101ea6105c7565b34801561023257600080fd5b506101ea6004803603602081101561024957600080fd5b50356001600160a01b03166105cd565b34801561026557600080fd5b506100e16105e8565b34801561027a57600080fd5b506102a76004803603604081101561029157600080fd5b506001600160a01b038135169060200135610643565b604080519115158252519081900360200190f35b3480156102c757600080fd5b506102a7600480360360408110156102de57600080fd5b506001600160a01b0381351690602001356106c9565b34801561030057600080fd5b506100ca6004803603602081101561031757600080fd5b5035610770565b6000341161032b57600080fd5b6c01e4ad1785a42b23aff000000034111561034557600080fd5b600a54348161035057fe5b3360009081526020819052604090208054929091049091019055600a54348161037557fe5b60028054929091049091039055565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561040a5780601f106103df5761010080835404028352916020019161040a565b820191906000526020600020905b8154815290600101906020018083116103ed57829003601f168201915b505050505081565b6003546001600160a01b031633148061043557506004546001600160a01b031633145b8061044a57506005546001600160a01b031633145b61045357600080fd5b600a8190556040805182815290517ffba09e264e05d7e303c3bbc792e1df3c944b544b495358b19786f96560015d0a9181900360200190a150565b6000811161049b57600080fd5b6003546001600160a01b03163314806104be57506004546001600160a01b031633145b806104d357506005546001600160a01b031633145b6104dc57600080fd5b600b546001600160a01b031633148015906104f85750600c5481145b15610542576000600c819055600b546040516001600160a01b039091169183156108fc02918491818181858888f1935050505015801561053c573d6000803e3d6000fd5b5061055a565b600b80546001600160a01b03191633179055600c8190555b50565b60075460ff1681565b60015490565b6009805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561040a5780601f106103df5761010080835404028352916020019161040a565b60025490565b6001600160a01b031660009081526020819052604090205490565b6008805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561040a5780601f106103df5761010080835404028352916020019161040a565b336000908152602081905281156106bf5733600081815260208181526040808320805487900390556001600160a01b03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060016106c3565b5060005b92915050565b6003546000906001600160a01b03163314806106ef57506004546001600160a01b031633145b8061070457506005546001600160a01b031633145b61070d57600080fd5b6001600160a01b038316600081815260208181526040808320805487019055600280548790039055805186815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a350600192915050565b6a013da329b6336471800000600154111561078a57600080fd5b6000811161079757600080fd5b6714d1120d7b1600008111156107ac57600080fd5b6003546001600160a01b031633141561055a57600180548201905560028054820190556040805182815290517f91cf34a58a9ed220d9b072639106d1d07251e1791426d2560ab2d6c4ca19a1839181900360200190a15056fea165627a7a72305820cf4ae8cbd00788232c2a3e034b5fce5e81b295d29ead8b2a77911804f0258ff60029"
}