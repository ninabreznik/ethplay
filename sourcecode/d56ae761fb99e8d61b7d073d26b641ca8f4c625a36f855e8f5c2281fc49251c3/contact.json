{
  "address": "0x1d16264deb1c78f83b3128ee2517e7a1518028e1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AlkionToken",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-24\n*/\n\npragma solidity ^0.5.0;\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/AlkionToken.sol\n\n/**\n * @title Alkion Token\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `ERC20` functions.\n */\ncontract AlkionToken is Pausable, Ownable {\n  \tusing SafeMath for uint256;\n  \t\n\tstring internal constant ALREADY_LOCKED = 'Tokens already locked';\n\tstring internal constant NOT_LOCKED = 'No tokens locked';\n\tstring internal constant AMOUNT_ZERO = 'Amount can not be 0';\n\tstring internal constant NOT_OWNER = 'You are not owner';\n\tstring internal constant NOT_ADMIN = 'You are not admin';\n\tstring internal constant NOT_ENOUGH_TOKEN = 'Not enough token';\n\tstring internal constant NOT_ENOUGH_ALLOWED = 'Not enough allowed';\n\tstring internal constant INVALID_TARGET_ADDRESS = 'Invalid target address';\n\tstring internal constant UNABLE_DEPOSIT = 'Unable to deposit';\n\n\tstring \tpublic constant name \t\t= \"Alkion Token\";\n\tstring \tpublic constant symbol \t\t= \"ALK\";\n\tuint8 \tpublic constant decimals \t= 18;\n  \n\tuint256 internal constant INITIAL_SUPPLY = 50000000000 * (10 ** uint256(decimals));\n\t    \n    mapping (address => uint256) internal _balances;\n\n    mapping (address => mapping (address => uint256)) internal _allowed;\n\n    uint256 internal _totalSupply;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);    \t\t\n\t\n\t// -----\n\t\n\tmapping(address => bytes32[]) internal lockReason;\n\t\n\tuint256 internal sellingTime = 99999999999999;\n\n    struct lockToken {\n        uint256 amount;\n        uint256 validity;\n        bool claimed;\n    }\n    \n    mapping(address => mapping(bytes32 => lockToken)) internal locked;\n        \n    event Locked(\n        address indexed _of,\n        bytes32 indexed _reason,\n        uint256 _amount,\n        uint256 _validity\n    );\n\n    event Unlocked(\n        address indexed _of,\n        bytes32 indexed _reason,\n        uint256 _amount\n    );\n    \n    // --\n    \n\tmodifier onlyOwner() {\n\t\trequire(isOwner(), NOT_OWNER);\n\t\t_;\n\t}\n\t\n\t// --\n  \n\tconstructor() \n\t\tpublic \n\t{\t\n\t\t_mint(msg.sender, INITIAL_SUPPLY);\t\n\t}\n\t\t\n\tfunction startSelling(uint256 _time)\n\t\tonlyOwner\n\t\tpublic \n\t{\n\t\trequire(_time != 0);\n\t\tsellingTime = _time;\n\t}\n\t\n\tfunction whenSelling()\n\t\tpublic\n\t\tview\n\t\treturns (uint256) \t\n\t{\n\t\tif(!isOwner()) return 0;\n\t\treturn sellingTime;\n\t}\n\t\n    function totalSupply() \n    \tpublic \n    \tview \n    \treturns (uint256) \n    {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) \n    \tpublic \n    \tview \n    \treturns (uint256 amount) \n    {\n        amount = _balances[owner];\n        for (uint256 i = 0; i < lockReason[owner].length; i++) {\n            amount = amount.add(tokensLocked(owner, lockReason[owner][i]));\n        }        \n    }\n    \n    function lockedBalanceOf(address _of)\n        public\n        view\n        returns (uint256 amount)\n    {\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            amount = amount.add(tokensLocked(_of, lockReason[_of][i]));\n        }\n    }    \n\n    function allowance(address owner, address spender) \n    \tpublic \n    \tview \n    \treturns (uint256) \n    {\n        return _allowed[owner][spender];\n    }\t\n\t\n\tfunction approve(address spender, uint256 value)\n\t\twhenNotPaused \n\t\tpublic \n\t\treturns (bool) \n\t{\n        require(spender != address(0));\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\t\t\n\t}\n\t\t\n\tfunction transferFrom(address from, address to, uint256 value)\n\t\twhenNotPaused \n\t\tpublic \n\t\treturns (bool) \n\t{\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\t\t\n\t}\t\n\n\tfunction transfer(address to, uint256 value)\n\t\twhenNotPaused\n\t\tpublic\n\t\treturns (bool) \n\t{\n        _transfer(msg.sender, to, value);\n        return true;\t\t\n\t}\n\t\n    function transferWithLock(address _from, address _to, bytes32 _reason, uint256 _amount, uint256 _time)\n    \twhenNotPaused\n    \tonlyOwner\n        public\n        returns (bool)\n    {\t        \n\t    require(_amount <= _balances[_from], NOT_ENOUGH_TOKEN);\n\t    require(_to != address(0), INVALID_TARGET_ADDRESS);\n        require(tokensLocked(_to, _reason) == 0, ALREADY_LOCKED);\t            \n        require(_amount != 0, AMOUNT_ZERO);\n            \n        uint256 validUntil = _time; \n\n        if (locked[_to][_reason].amount == 0)\n            lockReason[_to].push(_reason);\n\t\n\t    _balances[_from] = _balances[_from].sub(_amount);\n        locked[_to][_reason] = lockToken(_amount, validUntil, false);\n        \n        emit Locked(_to, _reason, _amount, validUntil);\n        return true;\n    }\n    \n    function transferCancelWithLock(address _from, address _to, bytes32 _reason)\n        whenNotPaused\n        onlyOwner\n        public\n        returns (bool)\n    {\n    \tuint256 l = tokensLocked(_from, _reason);\n\t\trequire(l > 0, NOT_LOCKED);\n\t\t\n\t\tlocked[_from][_reason].claimed = true;\n\t\t_balances[_to] = _balances[_to].add(l);\n\t\treturn true;\n    }\n    \n    function tokensLocked(address _of, bytes32 _reason)\n        public\n        view\n        returns (uint256 amount)\n    {\n        if (!locked[_of][_reason].claimed)\n            amount = locked[_of][_reason].amount;\n    }    \n    \n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\n        public\n        view\n        returns (uint256 amount)\n    {\n        uint256 t = sellingTime.add(locked[_of][_reason].validity);\n        if (t > _time)\n            amount = locked[_of][_reason].amount;        \n\t}\n        \n    function extendLock(address _to, bytes32 _reason, uint256 _time)\n    \twhenNotPaused\n    \tonlyOwner\n        public\n        returns (bool)\n    {\n        require(tokensLocked(_to, _reason) > 0, NOT_LOCKED);\n\n        locked[_to][_reason].validity = locked[_to][_reason].validity.add(_time);\n\n        emit Locked(_to, _reason, locked[_to][_reason].amount, locked[_to][_reason].validity);\n        return true;\n    } \n    \n    function tokensUnlockable(address _of, bytes32 _reason)\n        public\n        view\n        returns (uint256 amount)\n    {\n\t\tuint256 t = sellingTime.add(locked[_of][_reason].validity);\n        if (t <= now && !locked[_of][_reason].claimed)\n            amount = locked[_of][_reason].amount;\t\t        \n    }\n    \n    function unlock(address _of)\n    \twhenNotPaused\n    \tonlyOwner\n        public\n        returns (uint256 unlockableTokens)\n    {\t\n        uint256 lockedTokens;\n\n        for (uint256 i = 0; i < lockReason[_of].length; i++) {\n            lockedTokens = tokensUnlockable(_of, lockReason[_of][i]);\n            if (lockedTokens > 0) {\n                unlockableTokens = unlockableTokens.add(lockedTokens);\n                locked[_of][lockReason[_of][i]].claimed = true;\n                emit Unlocked(_of, lockReason[_of][i], lockedTokens);\n            }\n        }\n        \n        if (unlockableTokens > 0) {\n\t\t\t_balances[_of] = _balances[_of].add(unlockableTokens);\n        }\n    }\n    \n    function countLockedReasons(address _of)\n\t\tpublic\n\t\tview\n\t\treturns (uint256)    \n    {\n    \treturn lockReason[_of].length;\n    }\n    \n\tfunction lockedReason(address _of, uint256 _idx)\n\t\tpublic\n\t\tview\n\t\treturns (bytes32)\n\t{\n\t\tif(_idx >= lockReason[_of].length) \n\t\t\treturn bytes32(0);\n\t\treturn lockReason[_of][_idx];\n\t}\n\t\n    function lockedTime(address _of, bytes32 _reason)\n        public\n        view\n        returns (uint256 validity)\n    {\n    \tvalidity = 0;\n        if (!locked[_of][_reason].claimed)\n            validity = locked[_of][_reason].validity;\n    }\n    \n    function burn(uint256 value)\n    \twhenNotPaused \n    \tpublic \n    {\n        _burn(msg.sender, value);\n    }\n\n    function burnFrom(address from, uint256 value)\n    \twhenNotPaused     \n    \tpublic \n    {\n        _burnFrom(from, value);\n    }\n    \n    function _mint(address account, uint256 value) \n    \tinternal \n    {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n        \n    function _transfer(address from, address to, uint256 value) \n    \tinternal \n    {   \n    \trequire(value != 0, AMOUNT_ZERO); \n\t    require(value <= _balances[from], NOT_ENOUGH_TOKEN);\n\t    require(to != address(0), INVALID_TARGET_ADDRESS);\t            \n        \n        uint256 lockedBalance = lockedBalanceOf(to);\n        require(lockedBalance == 0, UNABLE_DEPOSIT);\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }    \n    \n    function _burn(address account, uint256 value) \n    \tinternal \n    {\n        require(account != address(0), INVALID_TARGET_ADDRESS);\n        require(value <= _balances[account], NOT_ENOUGH_TOKEN);\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    function _burnFrom(address account, uint256 value) \n    \tinternal \n    {\n    \trequire(value <= _allowed[account][msg.sender], NOT_ENOUGH_ALLOWED);\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }            \t\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"lockedTime\",\"outputs\":[{\"name\":\"validity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"countLockedReasons\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"tokensLockedAtTime\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"unlockableTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensUnlockable\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whenSelling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"tokensLocked\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_of\",\"type\":\"address\"},{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"lockedReason\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"}],\"name\":\"transferCancelWithLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"startSelling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_reason\",\"type\":\"bytes32\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_validity\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_reason\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]",
  "bytecode": "6080604052655af3107a3fff6006553480156200001b57600080fd5b506200003033640100000000620000ac810204565b60018054600160a860020a0319166101003381029190911791829055604051600160a060020a039190920416906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620000a6336ba18f07d736b90be550000000640100000000620000fe810204565b6200026c565b620000c7600082640100000000620021f3620001bf82021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a03821615156200011457600080fd5b600454620001319082640100000000620019e76200021a82021704565b600455600160a060020a038216600090815260026020526040902054620001679082640100000000620019e76200021a82021704565b600160a060020a03831660008181526002602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0381161515620001d557600080fd5b620001ea828264010000000062000234810204565b15620001f557600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000828201838110156200022d57600080fd5b9392505050565b6000600160a060020a03821615156200024c57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61228d806200027c6000396000f3fe608060405234801561001057600080fd5b5060043610610223576000357c0100000000000000000000000000000000000000000000000000000000900480636ef8d66d1161013757806395d89b41116100ca578063ce1392b411610099578063ce1392b414610636578063d3d1a2851461066c578063dd62ed3e14610689578063e4d542b6146106b7578063f2fde38b146106e957610223565b806395d89b4114610594578063a053dea51461059c578063a9059cbb146105c8578063bec9ba34146105f457610223565b806382dc1ec41161010657806382dc1ec41461053a5780638456cb59146105605780638da5cb5b146105685780638f32d59b1461058c57610223565b80636ef8d66d146104d857806370a08231146104e0578063715018a61461050657806379cc67901461050e57610223565b8063313ce567116101ba5780635294d0e8116101895780635294d0e81461044a5780635429e9ad14610476578063593557361461047e5780635c975abb146104a45780635ca48d8c146104ac57610223565b8063313ce567146103df5780633f4ba83a146103fd57806342966c681461040757806346fbf68e1461042457610223565b8063179e91f1116101f6578063179e91f11461034957806318160ddd1461037b57806323b872dd146103835780632f6c493c146103b957610223565b806306fdde031461022857806307409b81146102a5578063095ea7b3146102e35780630ad31bbd14610323575b600080fd5b61023061070f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561026a578181015183820152602001610252565b50505050905090810190601f1680156102975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d1600480360360408110156102bb57600080fd5b50600160a060020a038135169060200135610746565b60408051918252519081900360200190f35b61030f600480360360408110156102f957600080fd5b50600160a060020a0381351690602001356107a5565b604080519115158252519081900360200190f35b6102d16004803603602081101561033957600080fd5b5035600160a060020a0316610834565b6102d16004803603606081101561035f57600080fd5b50600160a060020a03813516906020810135906040013561084f565b6102d16108c4565b61030f6004803603606081101561039957600080fd5b50600160a060020a038135811691602081013590911690604001356108cb565b6102d1600480360360208110156103cf57600080fd5b5035600160a060020a03166109a7565b6103e7610c1c565b6040805160ff9092168252519081900360200190f35b610405610c21565b005b6104056004803603602081101561041d57600080fd5b5035610c85565b61030f6004803603602081101561043a57600080fd5b5035600160a060020a0316610ca2565b6102d16004803603604081101561046057600080fd5b50600160a060020a038135169060200135610cb4565b6102d1610d5c565b6102d16004803603602081101561049457600080fd5b5035600160a060020a0316610d7b565b61030f610df5565b6102d1600480360360408110156104c257600080fd5b50600160a060020a038135169060200135610dfe565b610405610e57565b6102d1600480360360208110156104f657600080fd5b5035600160a060020a0316610e62565b610405610ed6565b6104056004803603604081101561052457600080fd5b50600160a060020a038135169060200135610fb0565b6104056004803603602081101561055057600080fd5b5035600160a060020a0316610fce565b610405610feb565b610570611050565b60408051600160a060020a039092168252519081900360200190f35b61030f611064565b61023061107a565b6102d1600480360360408110156105b257600080fd5b50600160a060020a0381351690602001356110b1565b61030f600480360360408110156105de57600080fd5b50600160a060020a03813516906020013561110f565b61030f600480360360a081101561060a57600080fd5b50600160a060020a03813581169160208101359091169060408101359060608101359060800135611136565b61030f6004803603606081101561064c57600080fd5b50600160a060020a03813581169160208101359091169060400135611546565b6104056004803603602081101561068257600080fd5b50356116e0565b6102d16004803603604081101561069f57600080fd5b50600160a060020a038135811691602001351661176e565b61030f600480360360608110156106cd57600080fd5b50600160a060020a038135169060208101359060400135611799565b610405600480360360208110156106ff57600080fd5b5035600160a060020a0316611961565b60408051808201909152600c81527f416c6b696f6e20546f6b656e0000000000000000000000000000000000000000602082015281565b600160a060020a038216600090815260076020908152604080832084845290915281206002015460ff16151561079f5750600160a060020a03821660009081526007602090815260408083208484529091529020600101545b92915050565b60015460009060ff16156107b857600080fd5b600160a060020a03831615156107cd57600080fd5b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a031660009081526005602052604090205490565b600160a060020a0383166000908152600760209081526040808320858452909152812060010154600654829161088b919063ffffffff6119e716565b9050828111156108bc57600160a060020a038516600090815260076020908152604080832087845290915290205491505b509392505050565b6004545b90565b60015460009060ff16156108de57600080fd5b600160a060020a0384166000908152600360209081526040808320338452909152902054610912908363ffffffff611a0016565b600160a060020a0385166000908152600360209081526040808320338452909152902055610941848484611a15565b600160a060020a0384166000818152600360209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60015460009060ff16156109ba57600080fd5b6109c2611064565b60408051808201909152601181526000805160206122428339815191526020820152901515610a725760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a37578181015183820152602001610a1f565b50505050905090810190601f168015610a645780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000805b600160a060020a038416600090815260056020526040902054811015610bc957600160a060020a03841660009081526005602052604090208054610ad191869184908110610ac157fe5b9060005260206000200154610cb4565b91506000821115610bc157610aec838363ffffffff6119e716565b600160a060020a038516600090815260076020908152604080832060059092528220805493965060019391929185908110610b2357fe5b60009182526020808320919091015483528281019390935260409182018120600201805460ff191694151594909417909355600160a060020a038716835260059091529020805482908110610b7457fe5b906000526020600020015484600160a060020a03167f11f87fd5adcd05786919b8b868f59a70d78ae4eb6f305c5927f9c5b1659841a4846040518082815260200191505060405180910390a35b600101610a77565b506000821115610c1657600160a060020a038316600090815260026020526040902054610bfc908363ffffffff6119e716565b600160a060020a0384166000908152600260205260409020555b50919050565b601281565b610c2a33610ca2565b1515610c3557600080fd5b60015460ff161515610c4657600080fd5b6001805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b60015460ff1615610c9557600080fd5b610c9f3382611d1f565b50565b600061079f818363ffffffff611ee916565b600160a060020a03821660009081526007602090815260408083208484529091528120600101546006548291610cf0919063ffffffff6119e716565b9050428111158015610d295750600160a060020a038416600090815260076020908152604080832086845290915290206002015460ff16155b15610d5557600160a060020a038416600090815260076020908152604080832086845290915290205491505b5092915050565b6000610d66611064565b1515610d74575060006108c8565b5060065490565b6000805b600160a060020a038316600090815260056020526040902054811015610c1657600160a060020a03831660009081526005602052604090208054610deb91610dde9186919085908110610dce57fe5b9060005260206000200154610dfe565b839063ffffffff6119e716565b9150600101610d7f565b60015460ff1690565b600160a060020a038216600090815260076020908152604080832084845290915281206002015460ff16151561079f5750600160a060020a03919091166000908152600760209081526040808320938352929052205490565b610e6033611f20565b565b600160a060020a038116600090815260026020526040812054905b600160a060020a038316600090815260056020526040902054811015610c1657600160a060020a03831660009081526005602052604090208054610ecc91610dde9186919085908110610dce57fe5b9150600101610e7d565b610ede611064565b60408051808201909152601181526000805160206122428339815191526020820152901515610f525760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b506001546040516000916101009004600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36001805474ffffffffffffffffffffffffffffffffffffffff0019169055565b60015460ff1615610fc057600080fd5b610fca8282611f68565b5050565b610fd733610ca2565b1515610fe257600080fd5b610c9f816120d6565b610ff433610ca2565b1515610fff57600080fd5b60015460ff161561100f57600080fd5b6001805460ff1916811790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b6001546101009004600160a060020a031690565b6001546101009004600160a060020a0316331490565b60408051808201909152600381527f414c4b0000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03821660009081526005602052604081205482106110d85750600061079f565b600160a060020a03831660009081526005602052604090208054839081106110fc57fe5b9060005260206000200154905092915050565b60015460009060ff161561112257600080fd5b61112d338484611a15565b50600192915050565b60015460009060ff161561114957600080fd5b611151611064565b604080518082019091526011815260008051602061224283398151915260208201529015156111c55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b50600160a060020a038616600090815260026020908152604091829020548251808401909352601083527f4e6f7420656e6f75676820746f6b656e00000000000000000000000000000000918301919091528411156112695760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b5060408051808201909152601681527f496e76616c6964207461726765742061646472657373000000000000000000006020820152600160a060020a03861615156112f95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b506113048585610dfe565b60408051808201909152601581527f546f6b656e7320616c7265616479206c6f636b65640000000000000000000000602082015290156113895760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b5060408051808201909152601381527f416d6f756e742063616e206e6f7420626520300000000000000000000000000060208201528315156114105760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b50600160a060020a03851660009081526007602090815260408083208784529091529020548290151561146957600160a060020a0386166000908152600560209081526040822080546001810182559083529120018590555b600160a060020a038716600090815260026020526040902054611492908563ffffffff611a0016565b600160a060020a038881166000908152600260208181526040808420959095558451606081018652898152808201878152818701858152958d16808652600784528786208d875284529487902091518255516001820155935193909101805460ff19169315159390931790925582518781529182018490528251889391927fea90ef40963535482537f0689e05cb8d259e459ebd21530e826702294d0eafdd92908290030190a35060019695505050505050565b60015460009060ff161561155957600080fd5b611561611064565b604080518082019091526011815260008051602061224283398151915260208201529015156115d55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b5060006115e28584610dfe565b60408051808201909152601081527f4e6f20746f6b656e73206c6f636b65640000000000000000000000000000000060208201529091506000821161166c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b50600160a060020a03808616600090815260076020908152604080832087845282528083206002908101805460ff19166001179055938816835292905220546116bb908263ffffffff6119e716565b600160a060020a03851660009081526002602052604090205550600190509392505050565b6116e8611064565b6040805180820190915260118152600080516020612242833981519152602082015290151561175c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b5080151561176957600080fd5b600655565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b60015460009060ff16156117ac57600080fd5b6117b4611064565b604080518082019091526011815260008051602061224283398151915260208201529015156118285760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b5060006118358585610dfe565b60408051808201909152601081527f4e6f20746f6b656e73206c6f636b656400000000000000000000000000000000602082015291106118ba5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b50600160a060020a03841660009081526007602090815260408083208684529091529020600101546118f2908363ffffffff6119e716565b600160a060020a03851660008181526007602090815260408083208884528252918290206001810185905554825190815290810193909352805186937fea90ef40963535482537f0689e05cb8d259e459ebd21530e826702294d0eafdd92908290030190a35060019392505050565b611969611064565b604080518082019091526011815260008051602061224283398151915260208201529015156119dd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b50610c9f8161211e565b6000828201838110156119f957600080fd5b9392505050565b600082821115611a0f57600080fd5b50900390565b60408051808201909152601381527f416d6f756e742063616e206e6f742062652030000000000000000000000000006020820152811515611a9b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b50600160a060020a038316600090815260026020908152604091829020548251808401909352601083527f4e6f7420656e6f75676820746f6b656e0000000000000000000000000000000091830191909152821115611b3f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b5060408051808201909152601681527f496e76616c6964207461726765742061646472657373000000000000000000006020820152600160a060020a0383161515611bcf5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b506000611bdb83610d7b565b60408051808201909152601181527f556e61626c6520746f206465706f73697400000000000000000000000000000060208201529091508115611c635760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b50600160a060020a038416600090815260026020526040902054611c8d908363ffffffff611a0016565b600160a060020a038086166000908152600260205260408082209390935590851681522054611cc2908363ffffffff6119e716565b600160a060020a0380851660008181526002602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350505050565b60408051808201909152601681527f496e76616c6964207461726765742061646472657373000000000000000000006020820152600160a060020a0383161515611dae5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b50600160a060020a038216600090815260026020908152604091829020548251808401909352601083527f4e6f7420656e6f75676820746f6b656e0000000000000000000000000000000091830191909152821115611e525760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b50600454611e66908263ffffffff611a0016565b600455600160a060020a038216600090815260026020526040902054611e92908263ffffffff611a0016565b600160a060020a0383166000818152600260209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6000600160a060020a0382161515611f0057600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b611f3160008263ffffffff6121a716565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b600160a060020a0382166000908152600360209081526040808320338452825291829020548251808401909352601283527f4e6f7420656e6f75676820616c6c6f7765640000000000000000000000000000918301919091528211156120135760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a37578181015183820152602001610a1f565b50600160a060020a0382166000908152600360209081526040808320338452909152902054612048908263ffffffff611a0016565b600160a060020a03831660009081526003602090815260408083203384529091529020556120768282611d1f565b600160a060020a0382166000818152600360209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b6120e760008263ffffffff6121f316565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a038116151561213357600080fd5b600154604051600160a060020a0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360018054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600160a060020a03811615156121bc57600080fd5b6121c68282611ee9565b15156121d157600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a038116151561220857600080fd5b6122128282611ee9565b1561221c57600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916600117905556fe596f7520617265206e6f74206f776e6572000000000000000000000000000000a165627a7a723058205dfcac789400b98c6679934101ef305feb4cf432b2de6f13988186f9dfe49d410029"
}