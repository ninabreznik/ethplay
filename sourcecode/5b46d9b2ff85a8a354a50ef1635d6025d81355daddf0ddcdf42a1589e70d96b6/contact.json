{
  "address": "0x70c4949d483166abefb2b4b2be78e338cd8b2c40",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FrikandelToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-25\n*/\n\npragma solidity ^0.4.19;\n\ncontract FrikandelToken {\n    address public contractOwner = msg.sender; //King Frikandel\n\n    bool public ICOEnabled = true; //Enable selling new Frikandellen\n    bool public Killable = true; //Enabled when the contract can commit suicide (In case of a problem with the contract in its early development, we will set this to false later on)\n\n    mapping (address => uint256) balances; //This is where de lekkere frikandellen are stored\n    mapping (address => mapping (address => uint256)) allowed; //This is where approvals are stored!\n\n    uint256 internal airdropLimit = 450000; //The maximum amount of tokens to airdrop before the feature shuts down\n    uint256 public airdropSpent = 0; //The amount of airdropped tokens given away (The airdrop will not send past this)\n    \n    //uint256 internal ownerDrop = 50000; //Lets not waste gas storing this solid value we will only use 1 time - Adding it here so its obvious though\n    uint256 public totalSupply = 500000; //We're reserving the airdrop tokens, they will be spent eventually. Combining that with the ownerDrop tokens we're at 500k\n    uint256 internal hardLimitICO = 750000; //Do not allow more then 750k frikandellen to exist, ever. (The ICO will not sell past this)\n\n    function name() public pure returns (string) { return \"Frikandel\"; } //Frikandellen zijn lekker\n    function symbol() public pure returns (string) { return \"FRIKANDEL\"; } //I was deciding between FRKNDL and FRIKANDEL, but since the former is already kinda long why not just write it in full\n    function decimals() public pure returns (uint8) { return 0; } //Imagine getting half of a frikandel, that must be pretty shitty... Lets not do that. Whish we could store this as uint256 to save gas though lol\n\n    function balanceOf(address _owner) public view returns (uint256) { return balances[_owner]; }\n\n\tfunction FrikandelToken() public {\n\t    balances[contractOwner] = 50000; //To use for rewards and such - also I REALLY like frikandellen so don't judge please\n\t    Transfer(0x0, contractOwner, 50000); //Run a Transfer event for this as recommended by the ERC20 spec.\n\t}\n\t\n\tfunction transferOwnership(address _newOwner) public {\n\t    require(msg.sender == contractOwner); //:crying_tears_of_joy:\n\n        contractOwner = _newOwner; //Nieuwe eigennaar van de frikandellentent\n\t}\n\t\n\tfunction Destroy() public {\n\t    require(msg.sender == contractOwner); //yo what why\n\t    \n\t    if (Killable == true){ //Only if the contract is killable.. Go ahead\n\t        selfdestruct(contractOwner);\n\t    }\n\t}\n\t\n\tfunction disableSuicide() public returns (bool success){\n\t    require(msg.sender == contractOwner); //u dont control me\n\t    \n\t    Killable = false; //The contract is now solid and will for ever be on the chain\n\t    return true;\n\t}\n\t\n    function Airdrop(address[] _recipients) public {\n        require(msg.sender == contractOwner); //no airdrop access 4 u\n        if((_recipients.length + airdropSpent) > airdropLimit) { revert(); } //Hey, you're sending too much!!\n        for (uint256 i = 0; i < _recipients.length; i++) {\n            balances[_recipients[i]] += 1; //One frikandelletje 4 u\n\t\t\tTransfer(address(this), _recipients[i], 1);\n        }\n        airdropSpent += _recipients.length; //Store the amount of tokens that have been given away. Doing this once instead of in the loop saves a neat amount of gas! (If the code gets intreupted it gets reverted anyways)\n    }\n\t\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { //Useful if someone allowed you to spend some of their frikandellen or if a smart contract needs to interact with it! :)\n        //if (msg.data.length < (3 * 32) + 4) { revert(); } - Been thinking about implementing this, but its not fair to waste gas just to potentially ever save someone from sending a dumb malformed transaction, as a fault of their code or systems. (ERC20 Short address migration)\n        if (_value == 0) { Transfer(msg.sender, _to, 0); return; } //Follow the ERC20 spec and just mark the transfer event even through 0 tokens are being transfered\n\n        //bool sufficientFunds = balances[_from] >= _value; (Not having this single use variable in there saves us 8 gas)\n        //bool sufficientAllowance = allowed[_from][msg.sender] >= _value;\n        if (allowed[_from][msg.sender] >= _value && balances[_from] >= _value) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            \n            allowed[_from][msg.sender] -= _value;\n            \n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; } //ERC20 spec tells us the feature SHOULD throw() if the account has not authhorized the sender of the message, however I see everyone using return false... As its not a MUST to throw(), I'm going with the others and returning false\n    }\n\t\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) { //Allow someone else to spend some of your frikandellen\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; } //ERC20 Spend/Approval race conditional migration - Always have a tx set the allowance to 0 first, before applying a new amount.\n        \n        allowed[msg.sender][_spender] = _value;\n        \n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n        if (allowed[msg.sender][_spender] >= allowed[msg.sender][_spender] + _addedValue) { revert(); } //Lets not overflow the allowance ;) (I guess this also prevents it from being increased by 0 as a nice extra)\n        allowed[msg.sender][_spender] += _addedValue;\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\t\n\tfunction allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        //if (msg.data.length < (2 * 32) + 4) { revert(); } - Been thinking about implementing this, but its not fair to waste gas just to potentially ever save someone from sending a dumb malformed transaction, as a fault of their code or systems. (ERC20 Short address migration)\n\n        if (_value == 0) { Transfer(msg.sender, _to, 0); return; } //Follow the ERC20 specification and just trigger the event and quit the function since nothing is being transfered anyways\n\n        //bool sufficientFunds = balances[msg.sender] >= _value; (Not having this single use variable in there saves us 8 gas)\n        //bool overflowed = balances[_to] + _value < balances[_to]; (Not having this one probably saves some too but I'm too lazy to test how much we save so fuck that)\n\n        if (balances[msg.sender] >= _value && !(balances[_to] + _value < balances[_to])) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            \n            Transfer(msg.sender, _to, _value);\n            return true; //Smakelijk!\n        } else { return false; } //Sorry man je hebt niet genoeg F R I K A N D E L L E N\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function enableICO() public {\n        require(msg.sender == contractOwner); //Bro stay of my contract\n        ICOEnabled = true;\n    }\n\n    function disableICO() public {\n        require(msg.sender == contractOwner); //BRO what did I tell you\n        ICOEnabled = false; //Business closed y'all\n    }\n\n    function() payable public {\n        require(ICOEnabled);\n        require(msg.value > 0); //You can't send nothing lol. It won't get you anything and I won't allow you to waste your precious gas on it! (You can send 1wei though, which will give you nothing in return either but still run the code below)\n        if(balances[msg.sender]+(msg.value / 1e14) > 50000) { revert(); } //This would give you more then 50000 frikandellen, you can't buy from this account anymore through the ICO (If you eat 50000 frikandellen you'd probably die for real from all the layers of fat)\n        if(totalSupply+(msg.value / 1e14) > hardLimitICO) { revert(); } //Hard limit on Frikandellen\n        \n        contractOwner.transfer(msg.value); //Thank you very much for supporting, I'll promise that I will spend an equal amount of money on purchaching frikandellen from my local store!\n\n        uint256 tokensIssued = (msg.value / 1e14); //Since 1 token can be bought for 0.0001 ETH split the value (in Wei) through 1e14 to get the amount of tokens\n\n        totalSupply += tokensIssued; //Lets note the tokens\n        balances[msg.sender] += tokensIssued; //Dinner is served (Or well, maybe just a snack... Kinda depends on how many frikandel you've bought)\n\n        Transfer(address(this), msg.sender, tokensIssued); //Trigger a transfer() event :)\n    }\n}",
  "bytecode": "606060405260008054750100000000000000000000000000000000000000000074010000000000000000000000000000000000000000600160a060020a031990921633600160a060020a03161760a060020a60ff0219169190911760a860020a60ff0219161781556206ddd06003556004556207a120600555620b71b0600655341561008a57600080fd5b60008054600160a060020a0390811682526001602052604080832061c35090819055835490921692917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a3610c47806100f36000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610228578063095ea7b3146102b257806318160ddd146102e857806323b872dd1461030d57806328bc8a0414610335578063313ce56714610348578063666b7d321461037157806370a082311461038657806389b13814146103a557806395d89b41146103b857806397dbfc5a146103cb578063a9059cbb146103de578063b049474d14610400578063ce606ee014610413578063cee401ef14610442578063d73dd62314610455578063dd62ed3e14610477578063ece8c31c1461049c578063f2fde38b146104eb578063f58fef8e1461050a575b6000805474010000000000000000000000000000000000000000900460ff16151561013b57600080fd5b6000341161014857600080fd5b61c350655af3107a400034600160a060020a03331660009081526001602052604090205491900401111561017b57600080fd5b600654655af3107a4000340460055401111561019657600080fd5b600054600160a060020a03163480156108fc0290604051600060405180830381858888f1935050505015156101ca57600080fd5b5060058054655af3107a40003404908101909155600160a060020a03338116600081815260016020526040908190208054850190559091301690600080516020610bfc8339815191529084905190815260200160405180910390a350005b341561023357600080fd5b61023b61051d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561027757808201518382015260200161025f565b50505050905090810190601f1680156102a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102bd57600080fd5b6102d4600160a060020a036004351660243561055e565b604051901515815260200160405180910390f35b34156102f357600080fd5b6102fb61060a565b60405190815260200160405180910390f35b341561031857600080fd5b6102d4600160a060020a0360043581169060243516604435610610565b341561034057600080fd5b6102fb61072e565b341561035357600080fd5b61035b610734565b60405160ff909116815260200160405180910390f35b341561037c57600080fd5b610384610739565b005b341561039157600080fd5b6102fb600160a060020a0360043516610774565b34156103b057600080fd5b6102d461078f565b34156103c357600080fd5b61023b6107b1565b34156103d657600080fd5b6102d46107f2565b34156103e957600080fd5b6102d4600160a060020a0360043516602435610813565b341561040b57600080fd5b6102d4610902565b341561041e57600080fd5b610426610943565b604051600160a060020a03909116815260200160405180910390f35b341561044d57600080fd5b610384610952565b341561046057600080fd5b6102d4600160a060020a03600435166024356109a4565b341561048257600080fd5b6102fb600160a060020a0360043581169060243516610a46565b34156104a757600080fd5b6103846004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610a7195505050505050565b34156104f657600080fd5b610384600160a060020a0360043516610b4b565b341561051557600080fd5b610384610b95565b610525610be9565b60408051908101604052600981527f4672696b616e64656c00000000000000000000000000000000000000000000006020820152905090565b600081158015906105935750600160a060020a0333811660009081526002602090815260408083209387168352929052205415155b156105a057506000610604565b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60055481565b60008115156106545782600160a060020a031633600160a060020a0316600080516020610bfc833981519152600060405190815260200160405180910390a3610727565b600160a060020a03808516600090815260026020908152604080832033909416835292905220548290108015906106a45750600160a060020a038416600090815260016020526040902054829010155b1561072357600160a060020a0380841660008181526001602090815260408083208054880190558885168084528184208054899003905560028352818420339096168452949091529081902080548690039055909190600080516020610bfc8339815191529085905190815260200160405180910390a3506001610727565b5060005b9392505050565b60045481565b600090565b60005433600160a060020a0390811691161461075457600080fd5b6000805474ff000000000000000000000000000000000000000019169055565b600160a060020a031660009081526001602052604090205490565b6000547501000000000000000000000000000000000000000000900460ff1681565b6107b9610be9565b60408051908101604052600981527f4652494b414e44454c00000000000000000000000000000000000000000000006020820152905090565b60005474010000000000000000000000000000000000000000900460ff1681565b60008115156108575782600160a060020a031633600160a060020a0316600080516020610bfc833981519152600060405190815260200160405180910390a3610604565b600160a060020a03331660009081526001602052604090205482901080159061089a5750600160a060020a03831660009081526001602052604090205482810110155b156108fa57600160a060020a03338116600081815260016020526040808220805487900390559286168082529083902080548601905591600080516020610bfc8339815191529085905190815260200160405180910390a3506001610604565b506000610604565b6000805433600160a060020a0390811691161461091e57600080fd5b506000805475ff00000000000000000000000000000000000000000019169055600190565b600054600160a060020a031681565b60005433600160a060020a0390811691161461096d57600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205482810190106109da57600080fd5b600160a060020a033381166000818152600260209081526040808320948816808452949091529081902080548601908190557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000805433600160a060020a03908116911614610a8d57600080fd5b6003546004548351011115610aa157600080fd5b5060005b8151811015610b3c576001806000848481518110610abf57fe5b90602001906020020151600160a060020a03168152602081019190915260400160002080549091019055818181518110610af557fe5b90602001906020020151600160a060020a031630600160a060020a0316600080516020610bfc833981519152600160405190815260200160405180910390a3600101610aa5565b81516004805490910190555050565b60005433600160a060020a03908116911614610b6657600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614610bb057600080fd5b6000547501000000000000000000000000000000000000000000900460ff16151560011415610be757600054600160a060020a0316ff5b565b602060405190810160405260008152905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058202fefb6a126bb3d803a3904e391fa9adfeebf5a325457fc5159a7639702f668c00029"
}