{
  "address": "0x62f58fb4d45cd0675026f549c9d717cbb6445e5e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ETHerNity",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-26\n*/\n\npragma solidity ^0.4.24;\n\ncontract ETHerNity {\n    \n    struct Tx {\n        address user;\n        uint value;\n    }\n    \n    address public owner;\n    Tx[] public txs;\n    bool blocking;\n    \n    uint constant MIN_ETHER = 0.01 ether;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier mutex() {\n        blocking = true;\n        _;\n        blocking = false;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function() payable public {\n        withReferrer(owner);\n        \n        if (msg.sender == owner) {\n            dispatch();\n        }\n    }\n    \n    function withReferrer(address referrar) payable public {\n        if (blocking) return;\n        \n        owner.send(msg.value / 10);\n        referrar.send(msg.value / 10);\n        \n        if (msg.value < MIN_ETHER)\n            return;\n\n        txs.push(Tx({\n           user: msg.sender,\n           value: msg.value / 30\n        }));\n    }\n    \n    function dispatch() onlyOwner mutex public {\n        for(uint i = 0; i < txs.length; i++) {\n            if (address(this).balance >= txs[i].value)\n                txs[i].user.send(txs[i].value);\n        }\n            \n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610395806100326000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631916037d81146100935780638da5cb5b146100a7578063e9c4a3ac146100d8578063f5715d56146100ed575b60005461007690600160a060020a0316610128565b600054600160a060020a031633141561009157610091610248565b005b610091600160a060020a0360043516610128565b3480156100b357600080fd5b506100bc610324565b60408051600160a060020a039092168252519081900360200190f35b3480156100e457600080fd5b50610091610248565b3480156100f957600080fd5b50610105600435610333565b60408051600160a060020a03909316835260208301919091528051918290030190f35b60025460ff161561013857610245565b600054600160a060020a03166108fc600a34049081150290604051600060405180830381858888f15050604051600160a060020a0385169350600a340480156108fc02935091506000818181858888f1935050505050662386f26fc100003410156101a257610245565b60408051808201909152338152601e34046020820190815260018054808201825560009190915291517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf66002909302928301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf7909101555b50565b60008054600160a060020a0316331461026057600080fd5b506002805460ff1916600117905560005b60015481101561031757600180548290811061028957fe5b600091825260209091206001600290920201015430311061030f5760018054829081106102b257fe5b600091825260209091206002909102015460018054600160a060020a03909216916108fc9190849081106102e257fe5b9060005260206000209060020201600101549081150290604051600060405180830381858888f150505050505b600101610271565b506002805460ff19169055565b600054600160a060020a031681565b600180548290811061034157fe5b600091825260209091206002909102018054600190910154600160a060020a039091169150825600a165627a7a7230582067c0d3c4a90edf3a08950056d123b593403c54dbd20160fadbfebfbd1b0101650029"
}