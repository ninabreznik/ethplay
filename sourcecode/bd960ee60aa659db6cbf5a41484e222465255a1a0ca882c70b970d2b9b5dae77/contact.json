{
  "address": "0xe3d631a5fc2aa15d8f051e5ecc8b7979312c4aef",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BriskCoin",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-15\n*/\n\npragma solidity ^0.4.11;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract IERC20 {\n\n    function totalSupply() public constant returns (uint256);\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public;\n    function transferFrom(address from, address to, uint256 value) public;\n    function approve(address spender, uint256 value) public;\n    function allowance(address owner, address spender) public constant returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\ncontract BriskCoin is IERC20 {\n\n    using SafeMath for uint256;\n\n    // Token properties\n    string public name = \"BriskCoin\";\n    string public symbol = \"BSK\";\n    uint public decimals = 18;\n\n    uint public _totalSupply = 100000000000e18;\n\n    uint public _icoSupply = 70000000000e18; // crowdsale\n\n    uint public _futureSupply = 30000000000e18; // futureUse\n\n    // Balances for each account\n    mapping (address => uint256) balances;\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping (address => mapping(address => uint256)) allowed;\n\n    uint256 public startTime;\n\n    // Owner of Token\n    address public owner;\n\n    // how many token units a buyer gets per wei\n    uint public PRICE = 400000;\n\n    uint public maxCap = 70000000000e18 ether; // 50000 ether\n\n    // amount of raised money in wei\n    uint256 public fundRaised;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    // modifier to allow only owner has full control on the function\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    // Constructor\n    // @notice BSK Token Contract\n    // @return the transaction address\n    function BriskCoin() public payable {\n        startTime = now;\n        owner = msg.sender;\n\n        balances[owner] = _totalSupply; \n    }\n\n    // Payable method\n    // @notice Anyone can buy the tokens on tokensale by paying ether\n    function () public payable {\n        tokensale(msg.sender);\n    }\n\n    // @notice tokensale\n    // @param recipient The address of the recipient\n    // @return the transaction address and send the event as Transfer\n    function tokensale(address recipient) public payable {\n        require(recipient != 0x0);\n\n        uint256 weiAmount = msg.value;\n        uint tokens = weiAmount.mul(getPrice());\n\n        require(_icoSupply >= tokens);\n\n        balances[owner] = balances[owner].sub(tokens);\n        balances[recipient] = balances[recipient].add(tokens);\n\n        _icoSupply = _icoSupply.sub(tokens);\n\n        TokenPurchase(msg.sender, recipient, weiAmount, tokens);\n\t\tif ( tokens == 0 ) {\n\t\trecipient.transfer(msg.value);\n\t\t} else {\n\t\towner.transfer(msg.value);\n}    }\n\n    // @return total tokens supplied\n    function totalSupply() public constant returns (uint256) {\n        return _totalSupply;\n    }\n\n    // What is the balance of a particular account?\n    // @param who The address of the particular account\n    // @return the balanace the particular account\n    function balanceOf(address who) public constant returns (uint256) {\n        return balances[who];\n    }\n\n    // Token distribution to founder, develoment team, partners, charity, and bounty\n    function sendFutureSupplyToken(address to, uint256 value) public onlyOwner {\n        require (\n            to != 0x0 && value > 0 && _futureSupply >= value\n        );\n\n        balances[owner] = balances[owner].sub(value);\n        balances[to] = balances[to].add(value);\n        _futureSupply = _futureSupply.sub(value);\n        Transfer(owner, to, value);\n    }\n\n    // @notice send `value` token to `to` from `msg.sender`\n    // @param to The address of the recipient\n    // @param value The amount of token to be transferred\n    // @return the transaction address and send the event as Transfer\n    function transfer(address to, uint256 value) public {\n        require (\n            balances[msg.sender] >= value && value > 0\n        );\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        balances[to] = balances[to].add(value);\n        Transfer(msg.sender, to, value);\n    }\n\n    // @notice send `value` token to `to` from `from`\n    // @param from The address of the sender\n    // @param to The address of the recipient\n    // @param value The amount of token to be transferred\n    // @return the transaction address and send the event as Transfer\n    function transferFrom(address from, address to, uint256 value) public {\n        require (\n            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\n        );\n        balances[from] = balances[from].sub(value);\n        balances[to] = balances[to].add(value);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n        Transfer(from, to, value);\n    }\n\n    // Allow spender to withdraw from your account, multiple times, up to the value amount.\n    // If this function is called again it overwrites the current allowance with value.\n    // @param spender The address of the sender\n    // @param value The amount to be approved\n    // @return the transaction address and send the event as Approval\n    function approve(address spender, uint256 value) public {\n        require (\n            balances[msg.sender] >= value && value > 0\n        );\n        allowed[msg.sender][spender] = value;\n        Approval(msg.sender, spender, value);\n    }\n\n    // Check the allowed value for the spender to withdraw from owner\n    // @param owner The address of the owner\n    // @param spender The address of the spender\n    // @return the amount which spender is still allowed to withdraw from owner\n    function allowance(address _owner, address spender) public constant returns (uint256) {\n        return allowed[_owner][spender];\n    }\n\n    // Get current price of a Token\n    // @return the price or token value for a ether\n    function getPrice() public constant returns (uint result) {\n        if ( now >= startTime  && now <= startTime + 6 days) {\n    \t    return PRICE.mul(2);\n    \t} else if ( now >= startTime + 16 days  && now <= startTime + 31 days) {\n    \t    return PRICE.mul(35).div(20);\n    \t} else if ( now >= startTime + 41 days  && now <= startTime + 51 days) {\n    \t    return PRICE.mul(5).div(4);\n    \t} else if ( now >= startTime + 61 days && now <= startTime + 66 days) {\n    \t    return PRICE;\n    \t} else {\n    \t    return 0;\n    \t}\n    }\n\n}",
  "bytecode": "606060405260408051908101604052600981527f427269736b436f696e00000000000000000000000000000000000000000000006020820152600090805161004b92916020019061012a565b5060408051908101604052600381527f42534b00000000000000000000000000000000000000000000000000000000006020820152600190805161009392916020019061012a565b5060126002556c01431e0fae6d7217caa00000006003556be22ea493b30310a7700000006004556b60ef6b1aba6f07233000000060055562061a80600a55730c42e89764d6a6a60fa69bc30b77c00000000000600b555b4260085560098054600160a060020a03191633600160a060020a03908116919091179182905560035491166000908152600660205260409020555b6101ca565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016b57805160ff1916838001178555610198565b82800160010185558215610198579182015b8281111561019857825182559160200191906001019061017d565b5b506101a59291506101a9565b5090565b6101c791905b808211156101a557600081556001016101af565b5090565b90565b610e33806101d96000396000f3006060604052361561010f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461011c578063095ea7b3146101a757806318160ddd146101cb57806323548b8b146101f057806323b872dd14610215578063313ce5671461023f5780633c50afe1146102645780633eaaf86b14610289578063558a8f47146102ae57806370a08231146102d257806378e97925146103035780638d859f3e146103285780638da5cb5b1461034d57806395d89b411461037c57806398d5fdca14610407578063a9059cbb1461042c578063aec3ab5314610450578063b113d9dc14610475578063c71c0b401461048b578063dd62ed3e146104b0575b5b610119336104e7565b5b005b341561012757600080fd5b61012f610680565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016c5780820151818401525b602001610153565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b257600080fd5b610119600160a060020a036004351660243561071e565b005b34156101d657600080fd5b6101de6107b7565b60405190815260200160405180910390f35b34156101fb57600080fd5b6101de6107be565b60405190815260200160405180910390f35b341561022057600080fd5b610119600160a060020a03600435811690602435166044356107c4565b005b341561024a57600080fd5b6101de61093a565b60405190815260200160405180910390f35b341561026f57600080fd5b6101de610940565b60405190815260200160405180910390f35b341561029457600080fd5b6101de610946565b60405190815260200160405180910390f35b34156102b957600080fd5b610119600160a060020a036004351660243561094c565b005b34156102dd57600080fd5b6101de600160a060020a0360043516610a73565b60405190815260200160405180910390f35b341561030e57600080fd5b6101de610a92565b60405190815260200160405180910390f35b341561033357600080fd5b6101de610a98565b60405190815260200160405180910390f35b341561035857600080fd5b610360610a9e565b604051600160a060020a03909116815260200160405180910390f35b341561038757600080fd5b61012f610aad565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016c5780820151818401525b602001610153565b50505050905090810190601f1680156101995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041257600080fd5b6101de610b4b565b60405190815260200160405180910390f35b341561043757600080fd5b610119600160a060020a0360043516602435610c63565b005b341561045b57600080fd5b6101de610d52565b60405190815260200160405180910390f35b610119600160a060020a03600435166104e7565b005b341561049657600080fd5b6101de610d58565b60405190815260200160405180910390f35b34156104bb57600080fd5b6101de600160a060020a0360043581169060243516610d5e565b60405190815260200160405180910390f35b600080600160a060020a03831615156104ff57600080fd5b34915061051a61050d610b4b565b839063ffffffff610d8b16565b9050806004541015151561052d57600080fd5b600954600160a060020a0316600090815260066020526040902054610558908263ffffffff610dba16565b600954600160a060020a039081166000908152600660205260408082209390935590851681522054610590908263ffffffff610dd116565b600160a060020a0384166000908152600660205260409020556004546105bc908263ffffffff610dba16565b600455600160a060020a038084169033167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18848460405191825260208201526040908101905180910390a380151561064557600160a060020a0383163480156108fc0290604051600060405180830381858888f19350505050151561064057600080fd5b610679565b600954600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561067957600080fd5b5b5b505050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107165780601f106106eb57610100808354040283529160200191610716565b820191906000526020600020905b8154815290600101906020018083116106f957829003601f168201915b505050505081565b600160a060020a0333166000908152600660205260409020548190108015906107475750600081115b151561075257600080fd5b600160a060020a03338116600081815260076020908152604080832094871680845294909152908190208490557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35b5050565b6003545b90565b600b5481565b600160a060020a03808416600090815260076020908152604080832033909416835292905220548190108015906108145750600160a060020a038316600090815260066020526040902054819010155b80156108205750600081115b151561082b57600080fd5b600160a060020a038316600090815260066020526040902054610854908263ffffffff610dba16565b600160a060020a038085166000908152600660205260408082209390935590841681522054610889908263ffffffff610dd116565b600160a060020a038084166000908152600660209081526040808320949094558683168252600781528382203390931682529190915220546108d1908263ffffffff610dba16565b600160a060020a03808516600081815260076020908152604080832033861684529091529081902093909355908416917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b505050565b60025481565b60045481565b60035481565b60095433600160a060020a0390811691161461096757600080fd5b600160a060020a0382161580159061097f5750600081115b801561098d57508060055410155b151561099857600080fd5b600954600160a060020a03166000908152600660205260409020546109c3908263ffffffff610dba16565b600954600160a060020a0390811660009081526006602052604080822093909355908416815220546109fb908263ffffffff610dd116565b600160a060020a038316600090815260066020526040902055600554610a27908263ffffffff610dba16565b600555600954600160a060020a0380841691167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35b5b5050565b600160a060020a0381166000908152600660205260409020545b919050565b60085481565b600a5481565b600954600160a060020a031681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107165780601f106106eb57610100808354040283529160200191610716565b820191906000526020600020905b8154815290600101906020018083116106f957829003601f168201915b505050505081565b60006008544210158015610b6657506008546207e900014211155b15610b8657600a54610b7f90600263ffffffff610d8b16565b90506107bb565b60085462151800014210158015610ba457506008546228de80014211155b15610bd757610b7f6014610bc46023600a54610d8b90919063ffffffff16565b9063ffffffff610deb16565b90506107bb565b60085462360d80014210158015610bf5575060085462433c80014211155b15610c2857610b7f6004610bc46005600a54610d8b90919063ffffffff16565b9063ffffffff610deb16565b90506107bb565b60085462506b80014210158015610c46575060085462570300014211155b15610c545750600a546107bb565b5060006107bb565b5b5b5b5b90565b600160a060020a033316600090815260066020526040902054819010801590610c8c5750600081115b1515610c9757600080fd5b600160a060020a033316600090815260066020526040902054610cc0908263ffffffff610dba16565b600160a060020a033381166000908152600660205260408082209390935590841681522054610cf5908263ffffffff610dd116565b600160a060020a0380841660008181526006602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5050565b60055481565b600c5481565b600160a060020a038083166000908152600760209081526040808320938516835292905220545b92915050565b6000828202831580610da75750828482811515610da457fe5b04145b1515610daf57fe5b8091505b5092915050565b600082821115610dc657fe5b508082035b92915050565b600082820183811015610daf57fe5b8091505b5092915050565b6000808284811515610df957fe5b0490508091505b50929150505600a165627a7a72305820e30779da1226bdb243c635793b364d032f29f744f77eb4cbc708ca585202cb940029"
}