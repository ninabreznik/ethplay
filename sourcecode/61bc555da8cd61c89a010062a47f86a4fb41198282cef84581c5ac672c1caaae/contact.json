{
  "address": "0xec46f8207d766012454c408de210bcbc2243e71c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Nitro Token",
  "contractName": "NitroToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-19\n*/\n\npragma solidity ^0.4.18;\n\ncontract Ownable {\n\n  address public owner = msg.sender;\n  address private newOwner = address(0);\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {\n    require(_newOwner != address(0));      \n    newOwner = _newOwner;\n  }\n\n  function acceptOwnership() public {\n    require(msg.sender != address(0));\n    require(msg.sender == newOwner);\n\n    owner = newOwner;\n    newOwner = address(0);\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n\n  /**\n   * the total token supply.\n   */\n  uint256 public totalSupply;\n\n  /**\n   * @param _owner The address from which the balance will be retrieved\n   * @return The balance\n   */\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n\n  /**\n   * @notice send `_value` token to `_to` from `msg.sender`\n   * @param _to The address of the recipient\n   * @param _value The amount of token to be transferred\n   * @return Whether the transfer was successful or not\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success);\n\n  /**\n   * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n   * @param _from The address of the sender\n   * @param _to The address of the recipient\n   * @param _value The amount of token to be transferred\n   * @return Whether the transfer was successful or not\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n  /**\n   * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n   * @param _spender The address of the account able to transfer the tokens\n   * @param _value The amount of tokens to be approved for transfer\n   * @return Whether the approval was successful or not\n   */\n  function approve(address _spender, uint256 _value) public returns (bool success);\n\n  /**\n   * @param _owner The address of the account owning tokens\n   * @param _spender The address of the account able to transfer the tokens\n   * @return Amount of remaining tokens allowed to spent\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n  /**\n   * MUST trigger when tokens are transferred, including zero value transfers.\n   */\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * MUST trigger on any successful call to approve(address _spender, uint256 _value)\n   */\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n * @dev Based on code by OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/StandardToken.sol\n */\ncontract ERC20Token is ERC20 {\n\n  using SafeMath for uint256;\n\n  mapping (address => uint256) balances;\n  \n  mapping (address => mapping (address => uint256)) allowed;\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param _owner The address to query the the balance of.\n   * @return An uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n  \n  /**\n   * @dev transfer token for a specified address\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] +=_value;\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0);\n\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    \n    balances[_to] += _value;\n    \n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n}\n\ncontract NitroToken is ERC20Token, Ownable {\n    \n  string public constant name = \"Nitro\";\n  string public constant symbol = \"NOX\";\n  uint8 public constant decimals = 18;\n\n  function NitroToken(uint256 _totalSupply) public {\n    totalSupply = _totalSupply;\n    balances[owner] = _totalSupply;\n    Transfer(address(0), owner, _totalSupply);\n  }\n  \n  function acceptOwnership() public {\n    address oldOwner = owner;\n    super.acceptOwnership();\n    balances[owner] = balances[oldOwner];\n    balances[oldOwner] = 0;\n    Transfer(oldOwner, owner, balances[owner]);\n  }\n\n}\n\ncontract Declaration {\n  \n  enum TokenTypes { crowdsale, interactive, icandy, consultant, team, reserve }\n  mapping(uint => uint256) public balances;\n  \n  uint256 public preSaleStart = 1511020800;\n  uint256 public preSaleEnd = 1511452800;\n    \n  uint256 public saleStart = 1512057600;\n  uint256 public saleStartFirstDayEnd = saleStart + 1 days;\n  uint256 public saleStartSecondDayEnd = saleStart + 3 days;\n  uint256 public saleEnd = 1514304000;\n  \n  uint256 public teamFrozenTokens = 4800000 * 1 ether;\n  uint256 public teamUnfreezeDate = saleEnd + 182 days;\n\n  uint256 public presaleMinValue = 5 ether;\n \n  uint256 public preSaleRate = 1040;\n  uint256 public saleRate = 800;\n  uint256 public saleRateFirstDay = 1000;\n  uint256 public saleRateSecondDay = 920;\n\n  NitroToken public token;\n\n  function Declaration() public {\n    balances[uint8(TokenTypes.crowdsale)] = 60000000 * 1 ether;\n    balances[uint8(TokenTypes.interactive)] = 6000000 * 1 ether;\n    balances[uint8(TokenTypes.icandy)] = 3000000 * 1 ether;\n    balances[uint8(TokenTypes.consultant)] = 1200000 * 1 ether;\n    balances[uint8(TokenTypes.team)] = 7200000 * 1 ether;\n    balances[uint8(TokenTypes.reserve)] = 42600000 * 1 ether;\n    token = new NitroToken(120000000 * 1 ether);\n  }\n  \n  modifier withinPeriod(){\n    require(isPresale() || isSale());\n    _;\n  }\n  \n  function isPresale() public constant returns (bool){\n    return now>=preSaleStart && now<=preSaleEnd;\n  }\n\n  function isSale()  public constant returns (bool){\n    return now >= saleStart && now <= saleEnd;\n  }\n  \n  function rate() public constant returns (uint256) {\n    if (isPresale()) {\n      return preSaleRate;\n    } else if (now>=saleStart && now<=(saleStartFirstDayEnd)){\n      return saleRateFirstDay;\n    } else if (now>(saleStartFirstDayEnd) && now<=(saleStartSecondDayEnd)){\n      return saleRateSecondDay;\n    }\n    return saleRate;\n  }\n  \n}\n\ncontract Crowdsale is Declaration, Ownable{\n    \n    using SafeMath for uint256;\n\n    address public wallet;\n    \n    uint256 public weiLimit = 6 ether;\n    uint256 public satLimit = 30000000;\n\n    mapping(address => bool) users;\n    mapping(address => uint256) weiOwed;\n    mapping(address => uint256) satOwed;\n    mapping(address => uint256) weiTokensOwed;\n    mapping(address => uint256) satTokensOwed;\n    \n    uint256 public weiRaised;\n    uint256 public satRaised;\n\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    \n    function Crowdsale(address _wallet) Declaration public {\n        wallet = _wallet;    \n    }\n    \n    function () public payable {\n        buy();\n    }\n\n    function weiFreeze(address _addr, uint256 _value) internal {\n        uint256 amount = _value * rate();\n        balances[0] = balances[0].sub(amount);\n        weiOwed[_addr] += _value;\n        weiTokensOwed[_addr] += amount;\n    }\n\n    function weiTransfer(address _addr, uint256 _value) internal {\n        uint256 amount = _value * rate();\n        balances[0] = balances[0].sub(amount);\n        token.transfer(_addr, amount);\n        weiRaised += _value;\n        TokenPurchase(_addr, _addr, _value, amount);\n    }\n\n    function buy() withinPeriod public payable returns (bool){\n        if (isPresale()) {\n          require(msg.value >= presaleMinValue);\n        }else{\n          require(msg.value > 0);\n        }\n        if (weiOwed[msg.sender]>0) {\n          weiFreeze(msg.sender, msg.value);\n        } else if (msg.value>weiLimit && !users[msg.sender]) {\n          weiFreeze(msg.sender, msg.value.sub(weiLimit));\n          weiTransfer(msg.sender, weiLimit);\n        } else {\n          weiTransfer(msg.sender, msg.value);\n        }\n        return true;\n    }\n    \n    function _verify(address _addr) onlyOwner internal {\n        users[_addr] = true;\n        \n        weiRaised += weiOwed[_addr];\n        satRaised += satOwed[_addr];\n\n        token.transfer(_addr, weiTokensOwed[_addr] + satTokensOwed[_addr]);\n        \n        TokenPurchase(_addr, _addr, 0, weiTokensOwed[_addr] + satTokensOwed[_addr]);\n\n        weiOwed[_addr]=0;\n        satOwed[_addr]=0;\n        weiTokensOwed[_addr]=0;\n        satTokensOwed[_addr]=0;\n    }\n\n    function verify(address _addr) public returns(bool){\n        _verify(_addr);\n        return true;\n    }\n    \n    function isVerified(address _addr) public constant returns(bool){\n      return users[_addr];\n    }\n    \n    function getWeiTokensOwed(address _addr) public constant returns (uint256){\n        return weiTokensOwed[_addr];\n    }\n\n    function getSatTokensOwed(address _addr) public constant returns (uint256){\n        return satTokensOwed[_addr];\n    }\n\n    function owedTokens(address _addr) public constant returns (uint256){\n        return weiTokensOwed[_addr] + satTokensOwed[_addr];\n    }\n    \n    function getSatOwed(address _addr) public constant returns (uint256){\n        return satOwed[_addr];\n    }\n    \n    function getWeiOwed(address _addr) public constant returns (uint256){\n        return weiOwed[_addr];\n    }\n    \n    function satFreeze(address _addr, uint256 _wei, uint _sat) private {\n        uint256 amount = _wei * rate();\n        balances[0] = balances[0].sub(amount);\n        \n        satOwed[_addr] += _sat;\n        satTokensOwed[_addr] += amount;    \n    }\n\n    function satTransfer(address _addr, uint256 _wei, uint _sat) private {\n        uint256 amount = _wei * rate();\n        balances[0] = balances[0].sub(amount);\n        \n        token.transfer(_addr, amount);\n        TokenPurchase(_addr, _addr, _wei, amount);\n        satRaised += _sat;\n    }\n\n    function buyForBtc(\n        address _addr,\n        uint256 _sat,\n        uint256 _satOwed,\n        uint256 _wei,\n        uint256 _weiOwed\n    ) onlyOwner withinPeriod public {\n        require(_addr != address(0));\n        \n        satFreeze(_addr, _weiOwed, _satOwed);\n        satTransfer(_addr, _wei, _sat);\n    }\n    \n    function refundWei(address _addr, uint256 _amount) onlyOwner public returns (bool){\n        _addr.transfer(_amount);\n        balances[0] += weiTokensOwed[_addr];\n        weiTokensOwed[_addr] = 0;\n        weiOwed[_addr] = 0;\n        return true;\n    }\n  \n    function refundedSat(address _addr) onlyOwner public returns (bool){\n        balances[0] += satTokensOwed[_addr];\n        satTokensOwed[_addr] = 0;\n        satOwed[_addr] = 0;\n        return true;\n    }\n    \n    function sendOtherTokens(\n        uint8 _index,\n        address _addr,\n        uint256 _amount\n    ) onlyOwner public {\n        require(_addr!=address(0));\n\n        if (_index==uint8(TokenTypes.team) && now<teamUnfreezeDate) {\n            uint256 limit = balances[uint8(TokenTypes.team)].sub(teamFrozenTokens);\n            require(_amount<=limit);\n        }\n        \n        token.transfer(_addr, _amount);\n        balances[_index] = balances[_index].sub(_amount);\n        TokenPurchase(owner, _addr, 0, _amount);\n    }\n    \n    function rsrvToSale(uint256 _amount) onlyOwner public {\n        balances[uint8(TokenTypes.reserve)] = balances[uint8(TokenTypes.reserve)].sub(_amount);\n        balances[0] += _amount;\n    }\n    \n    function forwardFunds(uint256 amount) onlyOwner public {\n        wallet.transfer(amount);\n    }\n    \n    function setTokenOwner(address _addr) onlyOwner public {\n        token.transferOwnership(_addr);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550341561009257600080fd5b60405160208061117383398101604052808051906020019091905050806000819055508060016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350610fc0806101b36000396000f3006060604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100bf578063095ea7b31461014d57806318160ddd146101a757806323b872dd146101d0578063313ce5671461024957806370a082311461027857806379ba5097146102c55780638da5cb5b146102da57806395d89b411461032f578063a9059cbb146103bd578063dd62ed3e14610417578063f2fde38b14610483575b600080fd5b34156100ca57600080fd5b6100d26104bc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101125780820151818401526020810190506100f7565b50505050905090810190601f16801561013f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015857600080fd5b61018d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506104f5565b604051808215151515815260200191505060405180910390f35b34156101b257600080fd5b6101ba6105e7565b6040518082815260200191505060405180910390f35b34156101db57600080fd5b61022f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105ed565b604051808215151515815260200191505060405180910390f35b341561025457600080fd5b61025c61089a565b604051808260ff1660ff16815260200191505060405180910390f35b341561028357600080fd5b6102af600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061089f565b6040518082815260200191505060405180910390f35b34156102d057600080fd5b6102d86108e8565b005b34156102e557600080fd5b6102ed610aec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561033a57600080fd5b610342610b12565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610382578082015181840152602081019050610367565b50505050905090810190601f1680156103af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103c857600080fd5b6103fd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b4b565b604051808215151515815260200191505060405180910390f35b341561042257600080fd5b61046d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cd9565b6040518082815260200191505060405180910390f35b341561048e57600080fd5b6104ba600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d60565b005b6040805190810160405280600581526020017f4e6974726f00000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561062a57600080fd5b60008211151561063957600080fd5b61068b82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e3c90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061075d82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e3c90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610917610e55565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60016000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f4e4f58000000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610b8857600080fd5b610bda82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e3c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dbc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610df857600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000828211151515610e4a57fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610e9157600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eed57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505600a165627a7a723058207809176de79107567cfefd6120fcbdccecb97d64f357519c8c4300200093f81100290000000000000000000000000000000000000000006342fd08f00f6378000000",
  "constructorArguments": "0000000000000000000000000000000000000000006342fd08f00f6378000000"
}