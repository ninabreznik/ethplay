{
  "address": "0xc44d38e90f4adf384f2af84e0f920dab62535d02",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ex",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-06\n*/\n\ncontract Token {\n\n    function totalSupply() constant returns (uint256 supply) {}\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract SafeMath{\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\t\n\tfunction safeSub(uint a, uint b) internal returns (uint) {\n    \tassert(b <= a);\n    \treturn a - b;\n  }\n\n\tfunction safeAdd(uint a, uint b) internal returns (uint) {\n    \tuint c = a + b;\n    \tassert(c >= a);\n    \treturn c;\n  }\n\tfunction assert(bool assertion) internal {\n\t    if (!assertion) {\n\t      revert();\n\t    }\n\t}\n}\n\n\ncontract StandardToken is Token , SafeMath{\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] = safeSub(balances[msg.sender], _value);\n            balances[_to] = safeAdd(balances[_to],_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n         if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] = safeAdd(balances[_to],_value);\n            balances[_from] = safeSub(balances[_from],_value);\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n}\n\ncontract Ownable {\n  address public owner = msg.sender;\n\n  /// @notice check if the caller is the owner of the contract\n  modifier onlyOwner {\n    if (msg.sender != owner) throw;\n    _;\n  }\n\n  /// @notice change the owner of the contract\n  /// @param _newOwner the address of the new owner of the contract.\n  function changeOwner(address _newOwner)\n  onlyOwner\n  {\n    if(_newOwner == 0x0) throw;\n    owner = _newOwner;\n  }\n}\ncontract StrHelper{\n  function uintToString(uint256 v) constant returns (string str) {\n        uint maxlength = 100;\n        bytes memory reversed = new bytes(maxlength);\n        uint i = 0;\n        while (v != 0) {\n            uint remainder = v % 10;\n            v = v / 10;\n            reversed[i++] = byte(48 + remainder);\n        }\n        bytes memory s = new bytes(i);\n        for (uint j = 0; j < i; j++) {\n            s[j] = reversed[i - 1 - j];\n        }\n        str = string(s);\n    }\n\n    function appendUintToString(string inStr, uint256 v) constant returns (string str) {\n        uint maxlength = 78;\n        bytes memory reversed = new bytes(maxlength);\n        uint i = 0;\n        while (v != 0) {\n            uint remainder = v % 10;\n            v = v / 10;\n            reversed[i++] = byte(48 + remainder);\n        }\n        bytes memory inStrb = bytes(inStr);\n        bytes memory s = new bytes(inStrb.length + i);\n        uint j;\n        for (j = 0; j < inStrb.length; j++) {\n            s[j] = inStrb[j];\n        }\n        for (j = 0; j < i; j++) {\n            s[j + inStrb.length] = reversed[i - 1 - j];\n        }\n        str = string(s);\n    }\n}\n\ncontract Ex is StandardToken, Ownable, StrHelper {\n    \n    \n  event Mint(address indexed to, uint256 amount);\n  event Minty(string announcement);\n  \n    string public name = \"Ex Token\";   \n    string public description = \"Mining reward for running an Ex Node\";\n    string public additionalInfo = \"The value of Ex token is set at Â£1000. The lowest denomination of the Ex token is 0.01 (Â£10); anything below this should be paid in smiles, good wishes and agreeable nods. VAT applicable on all transactions.\";\n    string public moreInfo = \"As of Oct 2018, the Ex Network has sold 20% of it's equity @ Â£10k per share to fend for the startup costs. Thus evaluating the Coy @ Â£1M at the time of idea floating.\";\n    string public evenMoreInfo = \"Â£1M worth of Ex tokens to be split 80-20% between the two parties holding equity at genesis time. Initial Supply =  1000 ðŸ–¤\";\n    uint8 public decimals = 2;\n    string public symbol = \"ðŸ–¤\";\n  \n///////////////////\n///////////////////  \nfunction () {\n        throw;\n    }\n///////////////////\n///////////////////\nfunction Ex() {\n   \n   /*\n   Description: As of Oct 2018, the Ex Network has sold 20% of it's equity @ Â£10k per share to fend for the startup costs. Thus evaluating the Coy @ Â£1M at the time of idea floating.\n   Distribution: Â£1M worth of Ex tokens to be split 80-20% between the two parties represented below.\n   Initial supply: 1000 ðŸ–¤\n   */\n\n        mint(0x07777ae0a01ca3db33fc0128f7cc9fdbb783118c,20000);\n        mint(0x07777c1ab6d8ee46c3b616819bdf7900373fc530,80000);\n    }\n///////////////////\n///////////////////  \nfunction mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    onlyOwner\n    returns (bool)\n  {\n    totalSupply = safeAdd(totalSupply,_amount);\n    balances[_to] = safeAdd(balances[_to],_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    Minty(appendUintToString(\"Ex tokens generated in this round: \",_amount));\n    return true;\n  }\n///////////////////\n///////////////////\nfunction mintMulti(\n    address[] _to,\n    uint256[] _amount\n  )\n    public\n    onlyOwner\n    returns (bool)\n  {\n      if(_to.length != _amount.length)\n      return(false);\n      \n      uint256 i = 0;\n      uint256 total=0;\n        while (i < _to.length) {\n            totalSupply = safeAdd(totalSupply,_amount[i]);\n            balances[_to[i]] = safeAdd(balances[_to[i]],_amount[i]);\n            Mint(_to[i], _amount[i]);\n            Transfer(address(0), _to[i], _amount[i]);\n            total=safeAdd(total,_amount[i]);\n           i += 1;\n        }\n    \n      Minty(appendUintToString(\"Ex tokens generated in this round: \",total));\n      return true;\n  }\n  \n\n}",
  "bytecode": "606060405233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600881526020017f457820546f6b656e000000000000000000000000000000000000000000000000815250600490805190602001906200009292919062000907565b50606060405190810160405280602481526020017f4d696e696e672072657761726420666f722072756e6e696e6720616e2045782081526020017f4e6f646500000000000000000000000000000000000000000000000000000000815250600590805190602001906200010792919062000907565b506101006040519081016040528060d1815260200162002b9c60d19139600690805190602001906200013b92919062000907565b5060e06040519081016040528060a8815260200162002af460a89139600790805190602001906200016e92919062000907565b5060a060405190810160405280607e81526020017fc2a3314d20776f727468206f6620457820746f6b656e7320746f20626520737081526020017f6c69742038302d323025206265747765656e207468652074776f20706172746981526020017f657320686f6c64696e67206571756974792061742067656e657369732074696d81526020017f652e20496e697469616c20537570706c79203d20203130303020f09f96a40000815250600890805190602001906200022f92919062000907565b506002600960006101000a81548160ff021916908360ff1602179055506040805190810160405280600481526020017ff09f96a400000000000000000000000000000000000000000000000000000000815250600a90805190602001906200029992919062000907565b503415620002a657600080fd5b620002dc7307777ae0a01ca3db33fc0128f7cc9fdbb783118c614e206200031b6401000000000262001014176401000000009004565b50620003147307777c1ab6d8ee46c3b616819bdf7900373fc530620138806200031b6401000000000262001014176401000000009004565b50620009de565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200037a57600080fd5b6200039c600254836200061a640100000000026200206c176401000000009004565b600281905550620004006000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836200061a640100000000026200206c176401000000009004565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a37f5be6137e93a2224e4183bef1faf4bc0d1557b826e81d9d03d43bea83a765010762000593606060405190810160405280602381526020017f457820746f6b656e732067656e65726174656420696e207468697320726f756e81526020017f643a200000000000000000000000000000000000000000000000000000000000815250846200064e6401000000000262001b86176401000000009004565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015620005d5578082015181840152602081019050620005b8565b50505050905090810190601f168015620006035780820380516001836020036101000a031916815260200191505b509250505060405180910390a16001905092915050565b60008082840190506200064484821015620008f764010000000002620020a3176401000000009004565b8091505092915050565b620006586200098e565b600062000664620009a2565b60008062000671620009a2565b6200067b620009a2565b6000604e965086604051805910620006905750595b9080825280601f01601f19166020018201604052509550600094505b6000891415156200074857600a89811515620006c457fe5b069350600a89811515620006d457fe5b049850836030017f01000000000000000000000000000000000000000000000000000000000000000286868060010197508151811015156200071257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350620006ac565b899250848351016040518059106200075d5750595b9080825280601f01601f19166020018201604052509150600090505b82518110156200082a5782818151811015156200079257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028282815181101515620007ec57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505062000779565b600090505b84811015620008e757858160018703038151811015156200084c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028284518301815181101515620008a957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506200082f565b8197505050505050505092915050565b8015156200090457600080fd5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200094a57805160ff19168380011785556200097b565b828001600101855582156200097b579182015b828111156200097a5782518255916020019190600101906200095d565b5b5090506200098a9190620009b6565b5090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b620009db91905b80821115620009d7576000816000905550600101620009bd565b5090565b90565b61210680620009ee6000396000f300606060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610117578063095ea7b3146101a5578063100a9f4a146101ff57806318160ddd1461028d57806323b872dd146102b6578063313ce5671461032f5780634063c8651461035e57806340c10f19146103ec57806346e4959d146104465780635f2420ac146104f857806370a08231146105865780637284e416146105d35780638da5cb5b1461066157806395d89b41146106b6578063a6f9dae114610744578063a9059cbb1461077d578063c80667e3146107d7578063dd62ed3e146108b6578063e939567914610922575b341561011257600080fd5b600080fd5b341561012257600080fd5b61012a6109be565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016a57808201518184015260208101905061014f565b50505050905090810190601f1680156101975780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b057600080fd5b6101e5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a5c565b604051808215151515815260200191505060405180910390f35b341561020a57600080fd5b610212610b4e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610252578082015181840152602081019050610237565b50505050905090810190601f16801561027f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029857600080fd5b6102a0610bec565b6040518082815260200191505060405180910390f35b34156102c157600080fd5b610315600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bf2565b604051808215151515815260200191505060405180910390f35b341561033a57600080fd5b610342610f63565b604051808260ff1660ff16815260200191505060405180910390f35b341561036957600080fd5b610371610f76565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b1578082015181840152602081019050610396565b50505050905090810190601f1680156103de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103f757600080fd5b61042c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611014565b604051808215151515815260200191505060405180910390f35b341561045157600080fd5b6104de600480803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919050506112cd565b604051808215151515815260200191505060405180910390f35b341561050357600080fd5b61050b611698565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561054b578082015181840152602081019050610530565b50505050905090810190601f1680156105785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561059157600080fd5b6105bd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611736565b6040518082815260200191505060405180910390f35b34156105de57600080fd5b6105e661177e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561062657808201518184015260208101905061060b565b50505050905090810190601f1680156106535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561066c57600080fd5b61067461181c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106c157600080fd5b6106c9611842565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107095780820151818401526020810190506106ee565b50505050905090810190601f1680156107365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561074f57600080fd5b61077b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506118e0565b005b341561078857600080fd5b6107bd600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506119a4565b604051808215151515815260200191505060405180910390f35b34156107e257600080fd5b61083b600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091905050611b86565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561087b578082015181840152602081019050610860565b50505050905090810190601f1680156108a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156108c157600080fd5b61090c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e18565b6040518082815260200191505060405180910390f35b341561092d57600080fd5b6109436004808035906020019091905050611e9f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610983578082015181840152602081019050610968565b50505050905090810190601f1680156109b05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a545780601f10610a2957610100808354040283529160200191610a54565b820191906000526020600020905b815481529060010190602001808311610a3757829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610be45780601f10610bb957610100808354040283529160200191610be4565b820191906000526020600020905b815481529060010190602001808311610bc757829003601f168201915b505050505081565b60025481565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610cbe575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610cca5750600082115b15610f5757610d176000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361206c565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610da16000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361208a565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e69600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361208a565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610f5c565b600090505b9392505050565b600960009054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561100c5780601f10610fe15761010080835404028352916020019161100c565b820191906000526020600020905b815481529060010190602001808311610fef57829003601f168201915b505050505081565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561107257600080fd5b61107e6002548361206c565b6002819055506110cc6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361206c565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a37f5be6137e93a2224e4183bef1faf4bc0d1557b826e81d9d03d43bea83a7650107611249606060405190810160405280602381526020017f457820746f6b656e732067656e65726174656420696e207468697320726f756e81526020017f643a20000000000000000000000000000000000000000000000000000000000081525084611b86565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561128957808201518184015260208101905061126e565b50505050905090810190601f1680156112b65780820380516001836020036101000a031916815260200191505b509250505060405180910390a16001905092915050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561132e57600080fd5b835185511415156113425760009250611690565b60009150600090505b845182101561158a57611377600254858481518110151561136857fe5b9060200190602002015161206c565b6002819055506113f3600080878581518110151561139157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485848151811015156113e457fe5b9060200190602002015161206c565b600080878581518110151561140457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550848281518110151561145a57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688585848151811015156114a957fe5b906020019060200201516040518082815260200191505060405180910390a284828151811015156114d657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef868581518110151561153d57fe5b906020019060200201516040518082815260200191505060405180910390a361157d81858481518110151561156e57fe5b9060200190602002015161206c565b905060018201915061134b565b7f5be6137e93a2224e4183bef1faf4bc0d1557b826e81d9d03d43bea83a7650107611611606060405190810160405280602381526020017f457820746f6b656e732067656e65726174656420696e207468697320726f756e81526020017f643a20000000000000000000000000000000000000000000000000000000000081525083611b86565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015611651578082015181840152602081019050611636565b50505050905090810190601f16801561167e5780820380516001836020036101000a031916815260200191505b509250505060405180910390a1600192505b505092915050565b60078054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561172e5780601f106117035761010080835404028352916020019161172e565b820191906000526020600020905b81548152906001019060200180831161171157829003601f168201915b505050505081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118145780601f106117e957610100808354040283529160200191611814565b820191906000526020600020905b8154815290600101906020018083116117f757829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118d85780601f106118ad576101008083540402835291602001916118d8565b820191906000526020600020905b8154815290600101906020018083116118bb57829003601f168201915b505050505081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193c57600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141561196057600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156119f45750600082115b15611b7b57611a416000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361208a565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611acb6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361206c565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611b80565b600090505b92915050565b611b8e6120b2565b6000611b986120c6565b600080611ba36120c6565b611bab6120c6565b6000604e965086604051805910611bbf5750595b9080825280601f01601f19166020018201604052509550600094505b600089141515611c7257600a89811515611bf157fe5b069350600a89811515611c0057fe5b049850836030017f0100000000000000000000000000000000000000000000000000000000000000028686806001019750815181101515611c3d57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611bdb565b89925084835101604051805910611c865750595b9080825280601f01601f19166020018201604052509150600090505b8251811015611d4f578281815181101515611cb957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028282815181101515611d1257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611ca2565b600090505b84811015611e085785816001870303815181101515611d6f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028284518301815181101515611dcb57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611d54565b8197505050505050505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611ea76120b2565b6000611eb16120c6565b600080611ebc6120c6565b60006064955085604051805910611ed05750595b9080825280601f01601f19166020018201604052509450600093505b600088141515611f8357600a88811515611f0257fe5b069250600a88811515611f1157fe5b049750826030017f0100000000000000000000000000000000000000000000000000000000000000028585806001019650815181101515611f4e57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611eec565b83604051805910611f915750595b9080825280601f01601f19166020018201604052509150600090505b8381101561205e5784816001860303815181101515611fc857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002828281518110151561202157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611fad565b819650505050505050919050565b6000808284019050612080848210156120a3565b8091505092915050565b6000612098838311156120a3565b818303905092915050565b8015156120af57600080fd5b50565b602060405190810160405280600081525090565b6020604051908101604052806000815250905600a165627a7a72305820ce19d45dfaef46844a0d2e94c5c46dae0b89e5a9dc2f8e7e20f644d290fc855c00294173206f66204f637420323031382c20746865204578204e6574776f726b2068617320736f6c6420323025206f66206974277320657175697479204020c2a331306b2070657220736861726520746f2066656e6420666f7220746865207374617274757020636f7374732e2054687573206576616c756174696e672074686520436f79204020c2a3314d206174207468652074696d65206f66206964656120666c6f6174696e672e5468652076616c7565206f6620457820746f6b656e2069732073657420617420c2a3313030302e20546865206c6f776573742064656e6f6d696e6174696f6e206f662074686520457820746f6b656e20697320302e30312028c2a33130293b20616e797468696e672062656c6f7720746869732073686f756c64206265207061696420696e20736d696c65732c20676f6f642077697368657320616e6420616772656561626c65206e6f64732e20564154206170706c696361626c65206f6e20616c6c207472616e73616374696f6e732e",
  "constructorArguments": "4173206f66204f637420323031382c20746865204578204e6574776f726b2068617320736f6c6420323025206f66206974277320657175697479204020c2a331306b2070657220736861726520746f2066656e6420666f7220746865207374617274757020636f7374732e2054687573206576616c756174696e672074686520436f79204020c2a3314d206174207468652074696d65206f66206964656120666c6f6174696e672e5468652076616c7565206f6620457820746f6b656e2069732073657420617420c2a3313030302e20546865206c6f776573742064656e6f6d696e6174696f6e206f662074686520457820746f6b656e20697320302e30312028c2a33130293b20616e797468696e672062656c6f7720746869732073686f756c64206265207061696420696e20736d696c65732c20676f6f642077697368657320616e6420616772656561626c65206e6f64732e20564154206170706c696361626c65206f6e20616c6c207472616e73616374696f6e732e"
}