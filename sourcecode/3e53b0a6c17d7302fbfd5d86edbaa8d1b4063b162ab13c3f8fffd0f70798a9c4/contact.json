{
  "address": "0xd1e58006ec70e615c2413eae1448da3241adde2a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthereumTravelToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-04\n*/\n\npragma solidity 0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    /// Total amount of tokens\n  uint256 public totalSupply;\n  \n  function balanceOf(address _owner) public view returns (uint256 balance);\n  \n  function transfer(address _to, uint256 _amount) public returns (bool success);\n  \n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n  \n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\n  \n  function approve(address _spender, uint256 _amount) public returns (bool success);\n  \n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n struct TokenVest\n    {\n        address vestAddress;\n        uint vestTokensLimit;\n        uint vestTill;\n    }\n  //balance in each address account\n  mapping(address => uint256) balances;\n  \n  // list of tokens vest\n  TokenVest[] listofVest;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _amount The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n    require(isTransferAllowed(msg.sender,_amount));\n    require(_to != address(0));\n    require(balances[msg.sender] >= _amount && _amount > 0\n        && balances[_to].add(_amount) > balances[_to]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Transfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n    function isTransferAllowed(address trans_from, uint amt) internal returns(bool)\n    {\n        for(uint i=0;i<listofVest.length;i++)\n        {\n            if(listofVest[i].vestAddress==trans_from)\n            {\n                if(now<=listofVest[i].vestTill)\n                {\n                    if((balanceOf(trans_from).sub(amt)<listofVest[i].vestTokensLimit))\n                    {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n  \n  \n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _amount uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n    require(isTransferAllowed(_from,_amount));\n    require(_to != address(0));\n    require(balances[_from] >= _amount);\n    require(allowed[_from][msg.sender] >= _amount);\n    require(_amount > 0 && balances[_to].add(_amount) > balances[_to]);\n\n    balances[_from] = balances[_from].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n    emit Transfer(_from, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _amount The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\n    allowed[msg.sender][_spender] = _amount;\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken, Ownable {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public onlyOwner{\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n    }\n}\n/**\n * @title EthereumTravelToken Token\n * @dev \n */\n contract EthereumTravelToken is BurnableToken {\n     \n     \n     string public name ;\n     string public symbol ;\n     uint8 public decimals = 18 ;\n     address public AdvisorsAddress;\n     address public TeamAddress;\n     address public ReserveAddress;\n     \n     TokenVest vestObject;\n     uint public TeamVestTimeLimit;\n    \n     \n     /**\n     *@dev users sending ether to this contract will be reverted. Any ether sent to the contract will be sent back to the caller\n     */\n     function ()public payable {\n         revert();\n     }\n     \n     /**\n     * @dev Constructor function to initialize the initial supply of token to the creator of the contract\n     */\n     function EthereumTravelToken(\n            address wallet,\n            uint supply,\n            string nam, \n            string symb\n            ) public {\n         owner = wallet;\n         totalSupply = supply;\n         totalSupply = totalSupply.mul( 10 ** uint256(decimals)); //Update total supply with the decimal amount\n         name = nam;\n         symbol = symb;\n         balances[wallet] = totalSupply;\n         TeamAddress=0xACE8841DF22F7b5d112db5f5AE913c7adA3457aF;\n         AdvisorsAddress=0x49695C3cB19aA4A32F6f465b54CE62e337A07c7b;\n         ReserveAddress=0xec599e12B45BB77B65291C30911d9B2c3991aB3D;\n         TeamVestTimeLimit = now + 365 days;\n         //Emitting transfer event since assigning all tokens to the creator also corresponds to the transfer of tokens to the creator\n         emit Transfer(address(0), msg.sender, totalSupply);\n         \n         // transferring 18% of the tokens to team Address\n         transfer(TeamAddress, (totalSupply.mul(18)).div(100));\n         \n         // transferring 1% of the tokens to advisors Address\n         transfer(AdvisorsAddress, (totalSupply.mul(1)).div(100));\n         \n         // transferring 21% of the tokens to company Address\n         transfer(ReserveAddress, (totalSupply.mul(21)).div(100));\n         \n         // vesting team address\n         vestTokens(TeamAddress,(totalSupply.mul(18)).div(100),TeamVestTimeLimit);\n     }\n     \n     /**\n     *@dev helper method to get token details, name, symbol and totalSupply in one go\n     */\n    function getTokenDetail() public view returns (string, string, uint256) {\n      return (name, symbol, totalSupply);\n    }\n    /**\n     *@dev internal method to add a vest in token memory\n     */\n     function vestTokens(address ad, uint tkns, uint timelimit) internal {\n      vestObject = TokenVest({\n          vestAddress:ad,\n          vestTokensLimit:tkns,\n          vestTill:timelimit\n      });\n      listofVest.push(vestObject);\n    }\n }",
  "bytecode": "60806040526012600760006101000a81548160ff021916908360ff1602179055503480156200002d57600080fd5b5060405162002553380380620025538339810180604052810190808051906020019092919080519060200190929190805182019291906020018051820192919050505033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260008190555062000133600760009054906101000a900460ff1660ff16600a0a60005462000549640100000000026200183f179091906401000000009004565b60008190555081600590805190602001906200015192919062000bd3565b5080600690805190602001906200016a92919062000bd3565b50600054600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555073ace8841df22f7b5d112db5f5ae913c7ada3457af600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507349695c3cb19aa4a32f6f465b54ce62e337a07c7b600760016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ec599e12b45bb77b65291c30911d9b2c3991ab3d600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506301e133804201600d819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000546040518082815260200191505060405180910390a3620003aa600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000395606462000378601260005462000549640100000000026200183f179091906401000000009004565b62000588640100000000026200187a179091906401000000009004565b620005a4640100000000026401000000009004565b5062000430600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200041b6064620003fe600160005462000549640100000000026200183f179091906401000000009004565b62000588640100000000026200187a179091906401000000009004565b620005a4640100000000026401000000009004565b50620004b6600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620004a1606462000484601560005462000549640100000000026200183f179091906401000000009004565b62000588640100000000026200187a179091906401000000009004565b620005a4640100000000026401000000009004565b506200053f600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200052760646200050a601260005462000549640100000000026200183f179091906401000000009004565b62000588640100000000026200187a179091906401000000009004565b600d54620008cb640100000000026401000000009004565b5050505062000c82565b600080600084141562000560576000915062000581565b82840290508284828115156200057257fe5b041415156200057d57fe5b8091505b5092915050565b60008082848115156200059757fe5b0490508091505092915050565b6000620005c1338362000a0f640100000000026401000000009004565b1515620005cd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156200060a57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156200065a5750600082115b8015620007065750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200070483600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462000b516401000000000262001808179091906401000000009004565b115b15156200071257600080fd5b6200077482600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462000b706401000000000262001826179091906401000000009004565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200081982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462000b516401000000000262001808179091906401000000009004565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6060604051908101604052808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050506002600a908060018154018082558091505090600182039060005260206000209060030201600090919290919091506000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155505050505050565b600080600090505b60028054905081101562000b45578373ffffffffffffffffffffffffffffffffffffffff1660028281548110151562000a4c57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000b375760028181548110151562000aab57fe5b9060005260206000209060030201600201544211151562000b365760028181548110151562000ad657fe5b90600052602060002090600302016001015462000b248462000b078762000b8a640100000000026401000000009004565b62000b706401000000000262001826179091906401000000009004565b101562000b35576000915062000b4a565b5b5b808060010191505062000a17565b600191505b5092915050565b600080828401905083811015151562000b6657fe5b8091505092915050565b600082821115151562000b7f57fe5b818303905092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000c1657805160ff191683800117855562000c47565b8280016001018555821562000c47579182015b8281111562000c4657825182559160200191906001019062000c29565b5b50905062000c56919062000c5a565b5090565b62000c7f91905b8082111562000c7b57600081600090555060010162000c61565b5090565b90565b6118c18062000c926000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f6578063095ea7b31461018657806318160ddd146101eb57806323b872dd14610216578063289de6151461029b578063313ce5671461039e57806342966c68146103cf57806370a08231146103fc57806372432965146104535780637ff3366f146104aa5780638da5cb5b1461050157806395d89b4114610558578063a5a2286b146105e8578063a9059cbb1461063f578063b9204d1c146106a4578063dd62ed3e146106cf578063f2fde38b14610746575b600080fd5b34801561010257600080fd5b5061010b610789565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014b578082015181840152602081019050610130565b50505050905090810190601f1680156101785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019257600080fd5b506101d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610827565b604051808215151515815260200191505060405180910390f35b3480156101f757600080fd5b50610200610919565b6040518082815260200191505060405180910390f35b34801561022257600080fd5b50610281600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061091f565b604051808215151515815260200191505060405180910390f35b3480156102a757600080fd5b506102b0610d9e565b604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156102fa5780820151818401526020810190506102df565b50505050905090810190601f1680156103275780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015610360578082015181840152602081019050610345565b50505050905090810190601f16801561038d5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156103aa57600080fd5b506103b3610eed565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103db57600080fd5b506103fa60048036038101908080359060200190929190505050610f00565b005b34801561040857600080fd5b5061043d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110ab565b6040518082815260200191505060405180910390f35b34801561045f57600080fd5b506104686110f4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b657600080fd5b506104bf61111a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561050d57600080fd5b50610516611140565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561056457600080fd5b5061056d611166565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105ad578082015181840152602081019050610592565b50505050905090810190601f1680156105da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105f457600080fd5b506105fd611204565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064b57600080fd5b5061068a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061122a565b604051808215151515815260200191505060405180910390f35b3480156106b057600080fd5b506106b961150b565b6040518082815260200191505060405180910390f35b3480156106db57600080fd5b50610730600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611511565b6040518082815260200191505060405180910390f35b34801561075257600080fd5b50610787600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611598565b005b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561081f5780601f106107f45761010080835404028352916020019161081f565b820191906000526020600020905b81548152906001019060200180831161080257829003601f168201915b505050505081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600061092b84836116f0565b151561093657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561097257600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156109c057600080fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a4b57600080fd5b600082118015610aea5750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ae883600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461180890919063ffffffff16565b115b1515610af557600080fd5b610b4782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bdc82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461180890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cae82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182690919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b606080600060056006600054828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e3f5780601f10610e1457610100808354040283529160200191610e3f565b820191906000526020600020905b815481529060010190602001808311610e2257829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610edb5780601f10610eb057610100808354040283529160200191610edb565b820191906000526020600020905b815481529060010190602001808311610ebe57829003601f168201915b50505050509150925092509250909192565b600760009054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f5c57600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111151515610faa57600080fd5b610ffc81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110548160005461182690919063ffffffff16565b6000819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a250565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600760019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111fc5780601f106111d1576101008083540402835291602001916111fc565b820191906000526020600020905b8154815290600101906020018083116111df57829003601f168201915b505050505081565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061123633836116f0565b151561124157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561127d57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156112cc5750600082115b80156113675750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136583600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461180890919063ffffffff16565b115b151561137257600080fd5b6113c482600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182690919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061145982600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461180890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600d5481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115f457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561163057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600090505b6002805490508110156117fc578373ffffffffffffffffffffffffffffffffffffffff1660028281548110151561172b57fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117ef5760028181548110151561178857fe5b906000526020600020906003020160020154421115156117ee576002818154811015156117b157fe5b9060005260206000209060030201600101546117de846117d0876110ab565b61182690919063ffffffff16565b10156117ed5760009150611801565b5b5b80806001019150506116f8565b600191505b5092915050565b600080828401905083811015151561181c57fe5b8091505092915050565b600082821115151561183457fe5b818303905092915050565b60008060008414156118545760009150611873565b828402905082848281151561186557fe5b0414151561186f57fe5b8091505b5092915050565b600080828481151561188857fe5b04905080915050929150505600a165627a7a72305820a9770d4896a23013eb7d64e6a180d2c6ac8753b79f776045125321d550e383d70029000000000000000000000000e6145d3eac7f22713587e7d68a5a8d7dae162f4d00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000015457468657265756d2054726176656c20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000054554485454000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000e6145d3eac7f22713587e7d68a5a8d7dae162f4d00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000015457468657265756d2054726176656c20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000054554485454000000000000000000000000000000000000000000000000000000"
}