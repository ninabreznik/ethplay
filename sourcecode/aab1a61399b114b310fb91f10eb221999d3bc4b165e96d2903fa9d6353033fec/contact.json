{
  "address": "0x8db8ad2888b338dc8ad715347821c24bbbcac5b0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ESCARCE",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-24\n*/\n\npragma solidity ^0.4.8;\n\n\n  \ncontract ESCARCE {\n   \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed from, uint256 value);\n    \n   \n    string public constant symbol = \"ESCARCE\";\n    string public constant name = \"E-scarce\";\n    uint8 public constant decimals = 0;\n    uint256 _totalSupply = 100000;    \n    uint256 _totalBurned = 0;                            \n     \n   \n    address public owner;\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n  \n    function ESCARCE() \n    {\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n    }\n  \n     function totalSupply() constant returns (uint256 l_totalSupply) \n     {\n        l_totalSupply = _totalSupply;\n     }\n\n     function totalBurned() constant returns (uint256 l_totalBurned)\n     {\n        l_totalBurned = _totalBurned;\n     }\n  \n     \n     function balanceOf(address _owner) constant returns (uint256 balance) \n     {\n        return balances[_owner];\n     }\n  \n     \n     function transfer(address _to, uint256 _amount) returns (bool success) \n     {\n        if (_to == 0x0) throw;      \n\n        if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n        {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n         } \n         else \n         {\n            return false;\n         }\n     }\n  \n     function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) \n     {\n        if (_to == 0x0) throw;      \n\n        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n        {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n         } \n         else \n         {\n            return false;\n         }\n     }\n  \n    \n     \n     \n     function approve(address _spender, uint256 _amount) returns (bool success) \n     {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n     }\n  \n     \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) \n     {\n        return allowed[_owner][_spender];\n     }\n\n    function aidrop(address[] addresses,uint256 _amount) //onlyOwner \n    {   \n       for (uint i = 0; i < addresses.length; i++) \n        {\n             balances[msg.sender] -= _amount;\n             balances[addresses[i]] += _amount;\n             Transfer(msg.sender, addresses[i], _amount);\n         }\n     }\n    \n    \n    function burn(uint256 _value) returns (bool success) \n    {\n        if (balances[msg.sender] < _value) throw;            \n        balances[msg.sender] -= _value;                      \n        \n        _totalSupply -= _value;          \n        _totalBurned += _value;                             \n        \n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) returns (bool success) \n    {\n        if (balances[_from] < _value) throw;                \n        if (_value > allowed[_from][msg.sender]) throw;     \n        balances[_from] -= _value;                          \n        \n        _totalSupply -= _value;                           \n        _totalBurned += _value;\n     \n        Burn(_from, _value);\n        return true;\n    }\n }",
  "bytecode": "6060604052620186a06000556000600155341561001b57600080fd5b60028054600160a060020a03338116600160a060020a0319909216919091179182905560008054929091168152600360205260409020556108f2806100616000396000f3006060604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019457806323b872dd146101b9578063313ce567146101e157806342966c681461020a578063557d04791461022057806370a082311461027357806379cc6790146102925780638da5cb5b146102b457806395d89b41146102e3578063a9059cbb146102f6578063d89135cd14610318578063dd62ed3e1461032b575b600080fd5b34156100df57600080fd5b6100e7610350565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012357808201518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016957600080fd5b610180600160a060020a0360043516602435610387565b604051901515815260200160405180910390f35b341561019f57600080fd5b6101a76103f4565b60405190815260200160405180910390f35b34156101c457600080fd5b610180600160a060020a03600435811690602435166044356103fa565b34156101ec57600080fd5b6101f461052c565b60405160ff909116815260200160405180910390f35b341561021557600080fd5b610180600435610531565b341561022b57600080fd5b610271600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050933593506105c292505050565b005b341561027e57600080fd5b6101a7600160a060020a0360043516610690565b341561029d57600080fd5b610180600160a060020a03600435166024356106ab565b34156102bf57600080fd5b6102c7610770565b604051600160a060020a03909116815260200160405180910390f35b34156102ee57600080fd5b6100e761077f565b341561030157600080fd5b610180600160a060020a03600435166024356107b6565b341561032357600080fd5b6101a7610895565b341561033657600080fd5b6101a7600160a060020a036004358116906024351661089b565b60408051908101604052600881527f452d736361726365000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260046020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005490565b6000600160a060020a038316151561041157600080fd5b600160a060020a0384166000908152600360205260409020548290108015906104615750600160a060020a0380851660009081526004602090815260408083203390941683529290522054829010155b801561046d5750600082115b80156104925750600160a060020a038316600090815260036020526040902054828101115b1561052157600160a060020a0380851660008181526003602081815260408084208054899003905560048252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001610525565b5060005b9392505050565b600081565b600160a060020a0333166000908152600360205260408120548290101561055757600080fd5b600160a060020a03331660008181526003602052604080822080548690039055815485900390915560018054850190557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b60005b825181101561068b57600160a060020a033316600090815260036020819052604082208054859003905583918584815181106105fd57fe5b90602001906020020151600160a060020a0316815260208101919091526040016000208054909101905582818151811061063357fe5b90602001906020020151600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a36001016105c5565b505050565b600160a060020a031660009081526003602052604090205490565b600160a060020a038216600090815260036020526040812054829010156106d157600080fd5b600160a060020a038084166000908152600460209081526040808320339094168352929052205482111561070457600080fd5b600160a060020a03831660008181526003602052604080822080548690039055815485900390915560018054850190557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b600254600160a060020a031681565b60408051908101604052600781527f4553434152434500000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156107cd57600080fd5b600160a060020a0333166000908152600360205260409020548290108015906107f65750600082115b801561081b5750600160a060020a038316600090815260036020526040902054828101115b1561088d57600160a060020a033381166000818152600360205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016103ee565b5060006103ee565b60015490565b600160a060020a039182166000908152600460209081526040808320939094168252919091522054905600a165627a7a723058209dd92260f17751bebbc02c55cfea9b856383e6c5d422b7f77ce82644838390ed0029"
}