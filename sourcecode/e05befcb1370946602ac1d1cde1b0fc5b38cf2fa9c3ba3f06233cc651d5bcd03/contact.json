{
  "address": "0x93052d29c94f5bca09a22ee026ceb8c68522306c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "bestmoney",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-31\n*/\n\npragma solidity ^0.4.25;\n\n/*\n* https://bestmoney.group/\n*\n* Crypto miner token concept\n*\n* [✓] 8% Withdraw fee\n* [✓] 10% Deposit fee\n* [✓] 1% Token transfer\n* [✓] 3,5% Referal link ()\n* [✓] 0.5% _admin (from buy)\n* [✓] 1% _onreclame (from sell)\n*\n*/\n\ncontract bestmoney {\n\n    modifier onlyBagholders {    \n        require(myTokens() > 0);\n        _;\n    }\n\n    modifier onlyStronghands {  \n        require(myDividends(true) > 0);\n        _;\n    }\n   \n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n);\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n);\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n);\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n);\n\n    string public name = \"Bestmoney\";\n    string public symbol = \"BMG\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal entryFee_ = 10;\n    uint8 constant internal transferFee_ = 1;\n    uint8 constant internal exitFee_ = 8;\n    uint8 constant internal onreclame = 1;\n    uint8 constant internal refferalFee_ = 35;\n    uint8 constant internal adminFee_ = 5;\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether; //начальная цена токена\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether; //инкремент цены токена\n    uint256 constant internal magnitude = 2 ** 64;   // 2^64 \n    uint256 public stakingRequirement = 1e18;    //сколько токенов нужно для рефералки \n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    \n    function buy(address _referredBy) public payable returns (uint256) {\n        purchaseTokens(msg.value, _referredBy);\n    }\n\n    function() payable public {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    function reinvest() onlyStronghands public {\n        uint256 _dividends = myDividends(false);\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    function exit() public {\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n        withdraw();\n    }\n\n    function withdraw() onlyStronghands public {\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false);\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        _customerAddress.transfer(_dividends);\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n         if (_customerAddress != 0x39D080403562770754d2fA41225b33CaEE85fdDd){\n        uint256 _reclama = SafeMath.div(SafeMath.mul(_ethereum, onreclame), 100);\n        _taxedEthereum = SafeMath.sub (_taxedEthereum, _reclama);\n        tokenBalanceLedger_[0x39D080403562770754d2fA41225b33CaEE85fdDd] += _reclama;}\n     \n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n        \n        if (tokenSupply_ > 0) {\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n        return true;\n    }\n\n    address contractAddress = this;\n\n    function totalEthereumBalance() public view returns (uint256) {\n        return contractAddress.balance;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n     function myTokens() public view returns(uint256)\n    {   address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n     \n    function myDividends(bool _includeReferralBonus) public view returns(uint256)\n    {   address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n    \n    function balanceOf(address _customerAddress) view public returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n    \n    function dividendsOf(address _customerAddress) view public returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n    \n    function sellPrice() public view returns (uint256) {\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    function buyPrice() public view returns (uint256) {\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        if (_customerAddress != 0x39D080403562770754d2fA41225b33CaEE85fdDd){\n            uint256 _admin = SafeMath.div(SafeMath.mul(_undividedDividends, adminFee_),100);\n            _dividends = SafeMath.sub(_dividends, _admin);\n            uint256 _adminamountOfTokens = ethereumToTokens_(_admin);\n            tokenBalanceLedger_[0x39D080403562770754d2fA41225b33CaEE85fdDd] += _adminamountOfTokens;\n        }\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        \n        uint256 _fee = _dividends * magnitude;\n        \n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        if (\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n            _referredBy != _customerAddress &&\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        if (tokenSupply_ > 0) {\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n            _fee = _amountOfTokens * (_dividends * magnitude / tokenSupply_);\n\n        } else { \n            tokenSupply_ = _amountOfTokens;\n        }\n\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n       \n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);  //profitPerShare_old * magnitude * _amountOfTokens;ayoutsToOLD\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n\n        return _amountOfTokens;\n    }\n\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n            (\n                (\n                    SafeMath.sub(\n                        (sqrt(\n                                (_tokenPriceInitial ** 2)\n                                +\n                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                                +\n                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                                +\n                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                            )\n                        ), _tokenPriceInitial\n                    )\n                ) / (tokenPriceIncremental_)\n            ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n            (\n                SafeMath.sub(\n                    (\n                        (\n                            (tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                            ) - tokenPriceIncremental_\n                        ) * (tokens_ - 1e18)\n                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n                )\n                / 1e18);\n\n        return _etherReceived;\n    }\n\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "60c0604052600960808190527f426573746d6f6e6579000000000000000000000000000000000000000000000060a0908152620000409160009190620000ba565b506040805180820190915260038082527f424d47000000000000000000000000000000000000000000000000000000000060209092019182526200008791600191620000ba565b50670de0b6b3a764000060025560088054600160a060020a03191630179055348015620000b357600080fd5b506200015f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000fd57805160ff19168380011785556200012d565b828001600101855582156200012d579182015b828111156200012d57825182559160200191906001019062000110565b506200013b9291506200013f565b5090565b6200015c91905b808211156200013b576000815560010162000146565b90565b61108c806200016f6000396000f3006080604052600436106101105763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461011e57806306fdde031461015157806310d0ffdd146101db57806318160ddd146101f35780632260937314610208578063313ce567146102205780633ccfd60b1461024b5780634b7503341461026257806356d399e814610277578063688abbf71461028c5780636b2f4632146102a657806370a08231146102bb5780638620410b146102dc578063949e8acd146102f157806395d89b4114610306578063a9059cbb1461031b578063e4849b3214610353578063e9fad8ee1461036b578063f088d54714610380578063fdb5a03e14610394575b61011b3460006103a9565b50005b34801561012a57600080fd5b5061013f600160a060020a036004351661069c565b60408051918252519081900360200190f35b34801561015d57600080fd5b506101666106d7565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a0578181015183820152602001610188565b50505050905090810190601f1680156101cd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e757600080fd5b5061013f600435610765565b3480156101ff57600080fd5b5061013f610798565b34801561021457600080fd5b5061013f60043561079e565b34801561022c57600080fd5b506102356107da565b6040805160ff9092168252519081900360200190f35b34801561025757600080fd5b506102606107df565b005b34801561026e57600080fd5b5061013f6108b2565b34801561028357600080fd5b5061013f610909565b34801561029857600080fd5b5061013f600435151561090f565b3480156102b257600080fd5b5061013f610952565b3480156102c757600080fd5b5061013f600160a060020a0360043516610962565b3480156102e857600080fd5b5061013f61097d565b3480156102fd57600080fd5b5061013f6109c8565b34801561031257600080fd5b506101666109da565b34801561032757600080fd5b5061033f600160a060020a0360043516602435610a34565b604080519115158252519081900360200190f35b34801561035f57600080fd5b50610260600435610bd7565b34801561037757600080fd5b50610260610dca565b61013f600160a060020a0360043516610df7565b3480156103a057600080fd5b50610260610e03565b6000338180808080808080806103ca6103c38e600a610eb9565b6064610eef565b98506103d68986610f06565b97507339d080403562770754d2fa41225b33caee85fddd600160a060020a038b16146104685761040a6103c38a6005610eb9565b96506104168888610f06565b975061042187610f18565b7339d080403562770754d2fa41225b33caee85fddd60005260036020527fa364dfa6ab7f6b3b867e1e1f7580c6721b70873522ae66b5f135274d11d2607f80548201905595505b6104766103c38a6023610eb9565b94506104828d8a610f06565b935061048d84610f18565b925068010000000000000000880291506000831180156104b757506006546104b58482610fb0565b115b15156104c257600080fd5b600160a060020a038c16158015906104ec575089600160a060020a03168c600160a060020a031614155b80156105125750600254600160a060020a038d1660009081526003602052604090205410155b1561055857600160a060020a038c1660009081526004602052604090205461053a9086610fb0565b600160a060020a038d16600090815260046020526040902055610573565b6105628886610fb0565b975068010000000000000000880291505b600060065411156105d35761058a60065484610fb0565b60068190556801000000000000000089028115156105a457fe5b600780549290910490910190556006546801000000000000000089028115156105c957fe5b04830291506105d9565b60068390555b600160a060020a038a166000908152600360205260409020546105fc9084610fb0565b600160a060020a03808c166000818152600360209081526040808320959095556007546005909152939020805493870286900393840190559192508d16907f8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab8f864261066661097d565b604080519485526020850193909352838301919091526060830152519081900360800190a350909b9a5050505050505050505050565b600160a060020a0316600090815260056020908152604080832054600390925290912054600754680100000000000000009102919091030490565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561075d5780601f106107325761010080835404028352916020019161075d565b820191906000526020600020905b81548152906001019060200180831161074057829003601f168201915b505050505081565b60008080806107786103c386600a610eb9565b92506107848584610f06565b915061078f82610f18565b95945050505050565b60065490565b60008060008060065485111515156107b557600080fd5b6107be85610fbf565b92506107ce6103c3846008610eb9565b915061078f8383610f06565b601281565b60008060006107ee600161090f565b116107f857600080fd5b339150610805600061090f565b600160a060020a038316600081815260056020908152604080832080546801000000000000000087020190556004909152808220805490839055905193019350909183156108fc0291849190818181858888f1935050505015801561086e573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b600080600080600654600014156108d0576414f46b04009350610903565b6108e1670de0b6b3a7640000610fbf565b92506108f16103c3846008610eb9565b91506108fd8383610f06565b90508093505b50505090565b60025481565b60003382610925576109208161069c565b610949565b600160a060020a0381166000908152600460205260409020546109478261069c565b015b91505b50919050565b600854600160a060020a03163190565b600160a060020a031660009081526003602052604090205490565b6000806000806006546000141561099b5764199c82cc009350610903565b6109ac670de0b6b3a7640000610fbf565b92506109bc6103c384600a610eb9565b91506108fd8383610fb0565b6000336109d481610962565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561075d5780601f106107325761010080835404028352916020019161075d565b600080600080600080610a456109c8565b11610a4f57600080fd5b33600081815260036020526040902054909450861115610a6e57600080fd5b6000610a7a600161090f565b1115610a8857610a886107df565b610a966103c3876001610eb9565b9250610aa28684610f06565b9150610aad83610fbf565b9050610abb60065484610f06565b600655600160a060020a038416600090815260036020526040902054610ae19087610f06565b600160a060020a038086166000908152600360205260408082209390935590891681522054610b109083610fb0565b600160a060020a0388811660008181526003602090815260408083209590955560078054948a16835260059091528482208054948c02909403909355825491815292909220805492850290920190915554600654610b849190680100000000000000008402811515610b7e57fe5b04610fb0565b600755604080518381529051600160a060020a03808a1692908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35060019695505050505050565b600080600080600080600080610beb6109c8565b11610bf557600080fd5b33600081815260036020526040902054909750881115610c1457600080fd5b879550610c2086610fbf565b9450610c306103c3866008610eb9565b9350610c3c8585610f06565b92507339d080403562770754d2fa41225b33caee85fddd600160a060020a03881614610cc357610c706103c3866001610eb9565b9150610c7c8383610f06565b7339d080403562770754d2fa41225b33caee85fddd60005260036020527fa364dfa6ab7f6b3b867e1e1f7580c6721b70873522ae66b5f135274d11d2607f80548401905592505b610ccf60065487610f06565b600655600160a060020a038716600090815260036020526040902054610cf59087610f06565b600160a060020a03881660009081526003602090815260408083209390935560075460059091529181208054928902680100000000000000008702019283900390556006549192501015610d6557610d61600754600654680100000000000000008702811515610b7e57fe5b6007555b86600160a060020a03167f8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e878542610d9b61097d565b604080519485526020850193909352838301919091526060830152519081900360800190a25050505050505050565b3360008181526003602052604081205490811115610deb57610deb81610bd7565b610df36107df565b5050565b600061094c34836103a9565b600080600080610e13600161090f565b11610e1d57600080fd5b610e27600061090f565b33600081815260056020908152604080832080546801000000000000000087020190556004909152812080549082905590920194509250610e699084906103a9565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b600080831515610ecc5760009150610ee8565b50828202828482811515610edc57fe5b0414610ee457fe5b8091505b5092915050565b6000808284811515610efd57fe5b04949350505050565b600082821115610f1257fe5b50900390565b6006546000906c01431e0fae6d7217caa00000009082906402540be400610f9d610f97730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e4000000000000000161102b565b85610f06565b811515610fa657fe5b0403949350505050565b600082820183811015610ee457fe5b600654600090670de0b6b3a76400008381019181019083906110186414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be4000281151561101257fe5b04610f06565b81151561102157fe5b0495945050505050565b80600260018201045b8181101561094c57809150600281828581151561104d57fe5b040181151561105857fe5b0490506110345600a165627a7a7230582018cd24bdfde6396f288f4d3bd54e79a550b1a935ad4f8abe59c75247ef6825b50029"
}