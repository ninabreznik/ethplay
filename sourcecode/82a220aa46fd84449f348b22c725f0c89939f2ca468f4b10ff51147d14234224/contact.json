{
  "address": "0xb36502c671c1157b5989d89e20bb96be98465116",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Faucet",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-08\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract Ownable {\n\tevent NewOwner(address indexed old, address indexed current);\n\n\taddress public owner = msg.sender;\n\n\tmodifier onlyOwner {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n  constructor () internal {\n    owner = msg.sender;\n  }\n\n\tfunction setOwner(address _new)\n\t\texternal\n\t\tonlyOwner\n\t{\n\t\temit NewOwner(owner, _new);\n\t\towner = _new;\n\t}\n}\n\n/**\n * @title ERC20\n * @dev ERC20 token interface\n */\n contract ERC20 {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n }\n\n\ncontract Faucet is Ownable {\n    using SafeMath for uint256;\n\n    /* --- EVENTS --- */\n\n    event TokenExchanged(address receiver, uint etherReceived, uint tokenSent);\n\n    /* --- FIELDS / CONSTANTS --- */\n\n    address public tokenAddress;\n    uint16 public exchangeRate; // ETH -> token exchange rate\n    uint public exchangeLimit; // Max amount of ether allowed to exchange\n\n    /* --- PUBLIC/EXTERNAL FUNCTIONS --- */\n\n    constructor(address _tokenAddress, uint16 _exchangeRate, uint _exchangeLimit) public {\n        tokenAddress = _tokenAddress;\n        exchangeRate = _exchangeRate;\n        exchangeLimit = _exchangeLimit;\n    }\n\n    function() public payable {\n        require(msg.value <= exchangeLimit);\n\n        uint transferAmount = msg.value.mul(exchangeRate);\n        require(ERC20(tokenAddress).transfer(msg.sender, transferAmount), \"insufficient erc20 token balance\");\n\n        emit TokenExchanged(msg.sender, msg.value, transferAmount);\n    }\n\n    function withdrawEther(uint amount) onlyOwner public {\n        owner.transfer(amount);\n    }\n\n    function withdrawToken(uint amount) onlyOwner public {\n        ERC20(tokenAddress).transfer(owner, amount);\n    }\n\n    function getTokenBalance() public view returns (uint) {\n        return ERC20(tokenAddress).balanceOf(this);\n    }\n\n    function getEtherBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function updateExchangeRate(uint16 newExchangeRate) onlyOwner public {\n        exchangeRate = newExchangeRate;\n    }\n\n    function updateExchangeLimit(uint newExchangeLimit) onlyOwner public {\n        exchangeLimit = newExchangeLimit;\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b50604051606080610c96833981018060405281019080805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160146101000a81548161ffff021916908361ffff16021790555080600281905550505050610b588061013e6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af4035146102d55780633ba0b9a9146103185780633bed33ce1461034b57806350baa622146103785780635454481a146103a557806382b2e257146103d25780638da5cb5b146103fd5780639d76ea5814610454578063d717b05e146104ab578063e0864db5146104d6578063ea46193e14610507575b600060025434111515156100c257600080fd5b6100e9600160149054906101000a900461ffff1661ffff163461053290919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156101b057600080fd5b505af11580156101c4573d6000803e3d6000fd5b505050506040513d60208110156101da57600080fd5b8101908080519060200190929190505050151561025f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f696e73756666696369656e7420657263323020746f6b656e2062616c616e636581525060200191505060405180910390fd5b7fccaee9a64343009ed3ba775fb0599bbf674eb8bd4ce4c7c364ad39e3a8bf9b2b333483604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a150005b3480156102e157600080fd5b50610316600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061056a565b005b34801561032457600080fd5b5061032d610683565b604051808261ffff1661ffff16815260200191505060405180910390f35b34801561035757600080fd5b5061037660048036038101908080359060200190929190505050610697565b005b34801561038457600080fd5b506103a36004803603810190808035906020019092919050505061075d565b005b3480156103b157600080fd5b506103d0600480360381019080803590602001909291905050506108dd565b005b3480156103de57600080fd5b506103e7610942565b6040518082815260200191505060405180910390f35b34801561040957600080fd5b50610412610a41565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046057600080fd5b50610469610a66565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b757600080fd5b506104c0610a8c565b6040518082815260200191505060405180910390f35b3480156104e257600080fd5b50610505600480360381019080803561ffff169060200190929190505050610a92565b005b34801561051357600080fd5b5061051c610b0d565b6040518082815260200191505060405180910390f35b6000808314156105455760009050610564565b818302905081838281151561055657fe5b0414151561056057fe5b8090505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105c557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236460405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160149054906101000a900461ffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106f257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610759573d6000803e3d6000fd5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107b857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561089e57600080fd5b505af11580156108b2573d6000803e3d6000fd5b505050506040513d60208110156108c857600080fd5b81019080805190602001909291905050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561093857600080fd5b8060028190555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610a0157600080fd5b505af1158015610a15573d6000803e3d6000fd5b505050506040513d6020811015610a2b57600080fd5b8101908080519060200190929190505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aed57600080fd5b80600160146101000a81548161ffff021916908361ffff16021790555050565b60003073ffffffffffffffffffffffffffffffffffffffff16319050905600a165627a7a72305820baec12b4cac45442270d4607284ee0ae1f3d07f2da2a4e780d72851d5c1173a000290000000000000000000000000b6bc42cb9b89259a3aa986363fa37a9cbf03b8e0000000000000000000000000000000000000000000000000000000000003a980000000000000000000000000000000000000000000000001bc16d674ec80000",
  "constructorArguments": "0000000000000000000000000b6bc42cb9b89259a3aa986363fa37a9cbf03b8e0000000000000000000000000000000000000000000000000000000000003a980000000000000000000000000000000000000000000000001bc16d674ec80000"
}