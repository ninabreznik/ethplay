{
  "address": "0x78a81946f5b221b9487ac56a96871977c1a1a357",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSigRoot",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\n/**\nAuthor: Sik Jean Soon\n**/\n\n/**\n * @title SafeMath for uint256\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathUint256 {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"Multiplier exception\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b; // Solidity automatically throws when dividing by 0\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"Subtraction exception\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a, \"Addition exception\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"Modulo exception\");\n        return a % b;\n    }\n\n}\n\n/**\n * @title SafeMath for uint8\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMathUint8 {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"Multiplier exception\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\n        return a / b; // Solidity automatically throws when dividing by 0\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b <= a, \"Subtraction exception\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        c = a + b;\n        require(c >= a, \"Addition exception\");\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b != 0, \"Modulo exception\");\n        return a % b;\n    }\n\n}\n\ncontract Common {\n    bytes32 internal LABEL_CODE_STAKER;\n    bytes32 internal LABEL_CODE_STAKER_CONTROLLER;\n    bytes32 internal LABEL_CODE_SIGNER_CONTROLLER;\n    bytes32 internal LABEL_CODE_SIGNER;\n    bytes32 internal LABEL_CODE_BACKSYS;\n    bytes32 internal LABEL_CODE_OPS;\n\n    uint8 constant internal MAX_WALLET = 64;\n    uint256 constant internal WALLET_FLAG_ALL = (2 ** (uint256(MAX_WALLET))) - 1;\n\n    constructor() public\n    {\n        LABEL_CODE_STAKER = encodePacked(\"STAKER\");\n        LABEL_CODE_STAKER_CONTROLLER = encodePacked(\"STAKER_CONTROLLER\");\n        LABEL_CODE_SIGNER_CONTROLLER = encodePacked(\"SIGNER_CONTROLLER\");\n        LABEL_CODE_SIGNER = encodePacked(\"SIGNER\");\n        LABEL_CODE_BACKSYS = encodePacked(\"BACKSYS\");\n        LABEL_CODE_OPS = encodePacked(\"OPS\");\n    }\n\n    function encodePacked(string memory s) internal pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(s));\n    }\n\n    function convertBytesToBytes4(bytes memory _in) internal pure\n        returns (bytes4 out)\n    {\n        if (0 == _in.length)\n            return 0x0;\n\n        assembly {\n            out := mload(add(_in, 32))\n        }\n    }\n\n    function isContract(address _address) internal view\n        returns (bool)\n    {\n        uint32 size;\n        assembly {\n            size := extcodesize(_address)\n        }\n        return (0 < size);\n    }\n\n}\n\ncontract Label is Common {\n    string public class;\n    string public label;\n    string public description;\n\n    bytes32 public classCode;\n    bytes32 public labelCode;\n\n    constructor(string memory _class, string memory _label, string memory _description) public\n    {\n        class = _class;        \n        label = _label;\n        description = _description;\n\n        classCode = encodePacked(_class);\n        labelCode = encodePacked(_label);\n    }\n\n}\n\n\ncontract MultiSigNode is Label {\n    using SafeMathUint8 for uint8;\n\n    address payable public root;\n    address public parent;\n\n    // wallet index => wallet address\n    mapping(uint8 => address) public wallets;\n    // wallet address => wallet bit position\n    mapping(address => uint8) public walletsIndex;\n\n    // Normal wallet\n    uint8 public walletCount;\n    // Total wallet = normal wallet + contract wallet\n    uint8 public totalWallet;\n\n    modifier onlyRoot() {\n        require(msg.sender == root, \"Node.onlyRoot: Access denied\");\n        _;\n    }\n\n    constructor(address payable _root, address[] memory _wallets, string memory _label, string memory _description) public\n        Label(\"NODE\", _label, _description)\n    {\n        require(address(0) != _root, \"Node: Root address is empty\");\n        require(MAX_WALLET >= _wallets.length, \"Node: Wallet list exceeded limit\");\n\n        root = _root;\n\n        for (uint8 i = 1; _wallets.length >= i; i = i.add(1)) {\n            address wallet = _wallets[i.sub(1)];\n\n            require(address(0) != wallet, \"Node: Wallet address is empty\");\n            require(0 == walletsIndex[wallet], \"Node: Duplicated wallet address\");\n\n            wallets[i] = wallet;\n            walletsIndex[wallet] = i;\n\n            if (!isContract(wallet))\n                walletCount = walletCount.add(1);\n        }\n\n        totalWallet = uint8(_wallets.length);\n    }\n\n    function init(address _parent) external\n        onlyRoot\n    {\n        parent = _parent;\n\n        if (0 < totalWallet) {\n            uint8 count = 0;\n\n            for (uint8 i = 1; i <= MAX_WALLET && count <= totalWallet; i = i.add(1)) {\n                address wallet = wallets[i];\n\n                if (address(0) != wallet) {\n                    count = count.add(1);\n\n                    // Notify root this attached wallet, root will set parent address (if this is node)\n                    MultiSigRoot(root).attachWalletOrNode(wallet);\n                }\n            }\n        }\n    }\n\n    function term() external\n        onlyRoot\n    {\n        if (0 < totalWallet) {\n            uint8 count = 0;\n\n            for (uint8 i = 1; i <= MAX_WALLET && count <= totalWallet; i = i.add(1)) {\n                address wallet = wallets[i];\n\n                if (address(0) != wallet) {\n                    count = count.add(1);\n\n                    // Notify root to remove this wallet from list\n                    MultiSigRoot(root).detachWalletOrNode(wallet);\n                }\n            }\n        }\n    }\n\n    function attach(uint8 _index, address _wallet) external\n        onlyRoot\n        returns (bool)\n    {\n        require(0 < _index && MAX_WALLET >= _index, \"Node.attach: Index out of range\");\n        require(address(0) != _wallet, \"Node.attach: Wallet address is empty\");\n        require(0 == walletsIndex[_wallet], \"Node.attach: Duplicated wallet address\");\n\n        if (address(0) != wallets[_index])\n            detach(wallets[_index]);\n\n        walletsIndex[_wallet] = _index;\n        wallets[_index] = _wallet;\n\n        if (!isContract(_wallet))\n            walletCount = walletCount.add(1);\n\n        totalWallet = totalWallet.add(1);\n\n        // Notify root this attached wallet, root will trigger attach operation (if this wallet is a contract)\n        MultiSigRoot(root).attachWalletOrNode(_wallet);\n\n        return true;\n    }\n\n    function detach(address _wallet) public\n        onlyRoot\n        returns (bool)\n    {\n        require(address(0) != _wallet, \"Node.detach: Wallet address is empty\");\n\n        uint8 index = walletsIndex[_wallet];\n        require(0 < index && MAX_WALLET >= index, \"Node.detach: Wallet address is not registered\");\n\n        if (!isContract(_wallet))\n            walletCount = walletCount.sub(1);\n\n        totalWallet = totalWallet.sub(1);\n\n        delete wallets[index];\n        delete walletsIndex[_wallet];\n\n        // Notify root to remove this wallet from list\n        MultiSigRoot(root).detachWalletOrNode(_wallet);\n\n        return true;\n    }\n\n    function getRootNode() external view\n        returns (address)\n    {\n        if (address(0) == parent)\n            return address(this);\n\n        return MultiSigNode(parent).getRootNode();\n    }\n\n}\n\n\n/**\n * NOTE: Regulator is meant for changable rules for multi-sig\n */\ncontract MultiSigRegulator is Label {\n    using SafeMathUint8 for uint8;\n    using SafeMathUint256 for uint256;\n\n    event TransactionLimitChanged(string requirementType, uint256 limit);\n\n    address payable public root;\n\n    address private creator;\n\n    // Cached parameters\n    address private argTo;\n    uint256 private argValue;\n\n    bool public isSealed;\n\n    // Daily transaction limit (mapped: requirement type => TransactionLimit)\n    mapping(bytes32 => TransactionLimit) public transactionLimits;\n\n    struct TransactionLimit {\n        uint256 datetime;\n        uint256 volume;\n        uint256 upperLimit;\n    }\n\n    modifier onlySealed() {\n        require(isSealed, \"Regulator.onlySealed: Not sealed\");\n        _;\n    }\n\n    modifier onlyMe() {\n        require(msg.sender == address(this), \"Regulator.onlyMe: Access denied\");\n        _;\n    }\n\n    modifier onlyRoot() {\n        require(msg.sender == root, \"Regulator.onlyRoot: Access denied\");\n        _;\n    }\n\n    modifier onlyCreator() {\n        require(msg.sender == creator, \"Regulator.onlyCreator: Access denied\");\n        _;\n    }\n\n    /**\n     * Supported non-payable default function\n     */\n    function () external\n        onlyMe\n        onlySealed\n    {\n        revert(\"Regulator: Not supported\");\n    }\n\n    constructor(address payable _root, string memory _label, string memory _description) public\n        Label(\"REGULATOR\", _label, _description)\n    {\n        require(address(0) != _root, \"Regulator: Root address is empty\");\n        root = _root;\n        creator = msg.sender;\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.increaseSupply\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function increaseSupply(uint256 _value, address /* _to */) external\n        onlyMe\n        onlySealed\n    {\n        defaultRequirement(\"increaseSupply\", _value);\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.decreaseSupply\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function decreaseSupply(uint256 _value, address /* _from */) external\n        onlyMe\n        onlySealed\n    {\n        defaultRequirement(\"decreaseSupply\", _value);\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.freeze\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function freeze(address /* _from */, uint256 /* _value */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.unfreeze\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function unfreeze(address /* _from */, uint256 /* _value */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.freezeAddress\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function freezeAddress(address /* _addressOf */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: ERC_ER_SHI.unfreezeAddress\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function unfreezeAddress(address /* _addressOf */) external\n        onlyMe\n        onlySealed\n    {\n        requirement1Backsys();\n    }\n\n    /**\n     * Supported non-payable function: Ownership.acceptOwnership\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function acceptOwnership () external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_OPS, 2, 1); // INDEX 2: ONE SIGNABLE\n        requirement(LABEL_CODE_SIGNER_CONTROLLER, 1, 1); // INDEX 1: ONE SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: Ownership.transferOwnership\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function transferOwnership (address payable /* _newOwner */) external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_STAKER, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n        requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL SIGNABLE\n        requirement(LABEL_CODE_SIGNER_CONTROLLER, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: Controllable.pause\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function pause () external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: Controllable.resume\n     * Only can be called by this contract itself to resolve calldata\n     */\n    function resume () external\n        onlyMe\n        onlySealed\n    {\n        requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, 2); // ANY TWO SIGNABLE\n    }\n\n    /**\n     * Supported non-payable function: MultiSigRegulator.setTransactionLimit\n     */\n    function setTransactionLimit(string calldata _requirementType, uint256 _limit) external\n    {\n        if (msg.sender == root || !isSealed) {\n            // Set transaction limit\n            transactionLimits[encodePacked(_requirementType)].upperLimit = _limit;\n            emit TransactionLimitChanged(_requirementType, _limit);\n        }\n        else {\n            require(msg.sender == address(this), \"Regulator.setTransactionLimit: Access denied\");\n\n            // Create requirements for this transaction\n            requirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, 2); // ANY TWO SIGNABLE\n        }\n    }\n\n    function seal() external\n        onlyCreator\n    {\n        require(!isSealed, \"Regulator.seal: Access denied\");\n        isSealed = true;\n    }\n\n    function createRequirement(uint256 /* _transactionCode */, address /* _from */, address _to, uint256 _value, bytes calldata _data) external\n        onlyRoot\n    {\n        // Cache parameters\n        argTo = _to;\n        argValue = _value;\n\n        // Perform self call to determine function details for requirement setup\n        (bool success, bytes memory returnData) = address(this).call.value(_value)(_data);\n\n        if (!success) {\n            // Check the error string is available or not\n            if (0 == returnData.length || bytes4(0x08c379a0) != convertBytesToBytes4(returnData))\n                revert(\"Regulator.createRequirement: Function call failed\");\n            else {\n                bytes memory bytesArray = new bytes(returnData.length);\n                for (uint256 i = 0; i < returnData.length.sub(4); i = i.add(1)) {\n                    bytesArray[i] = returnData[i.add(4)];\n                }\n\n                (string memory reason) = abi.decode(bytesArray, (string));\n                revert(reason);\n            }\n        }\n    }\n\n    function requirement(bytes32 _labelCode, uint256 _flag, uint8 _required) private\n    {\n        MultiSigRoot(root).createRequirement(_labelCode, _flag, _required);\n    }\n\n    function defaultRequirement(string memory _requirementType, uint256 _value) private\n    {\n        bytes32 t = encodePacked(_requirementType);\n\n        // Check transaction volume limit\n        TransactionLimit storage limit = transactionLimits[t];\n\n        // Check transaction volume limit\n        if (0 < limit.upperLimit) {\n            // Truncate timestamp (YYYYMMDD) to daily (UTC time)\n            uint256 dt = now - (now % 86400);\n\n            if (dt == limit.datetime)\n                limit.volume = limit.volume.add(_value);\n            else {\n                // Reset volume on new day\n                limit.datetime = dt;\n                limit.volume = _value;\n            }\n\n            require(limit.upperLimit >= limit.volume, \"Regulator.defaultRequirement: Exceeded limit\");\n        }\n\n        // Create requirement for this transaction\n        requirement(LABEL_CODE_OPS, WALLET_FLAG_ALL, 4); // ANY FOUR SIGNABLE\n    }\n\n    function requirement1Backsys() private\n    {\n        requirement(LABEL_CODE_BACKSYS, WALLET_FLAG_ALL, 1); // ANY ONE SIGNABLE\n    }\n\n}\n\n\ncontract MultiSigRoot is Label {\n    using SafeMathUint8 for uint8;\n    using SafeMathUint256 for uint256;\n\n    uint8 constant private WALLET_TYPE_WALLET = 1;\n    uint8 constant private WALLET_TYPE_NODE = 2;\n\n    uint8 constant private TRANSACTION_STATUS_EMPTY = 0;\n    uint8 constant private TRANSACTION_STATUS_PENDING = 1;\n    uint8 constant private TRANSACTION_STATUS_EXECUTED = 2;\n    uint8 constant private TRANSACTION_STATUS_FAILURE = 3;\n    uint8 constant private TRANSACTION_STATUS_REVOKED = 4;\n\n    event Confirmation(address indexed sender, uint256 indexed transactionCode);\n    event Revocation(address indexed sender, uint256 indexed transactionCode);\n    event Submission(uint256 indexed transactionCode);\n    event Requirement(uint256 indexed transactionCode, bytes32 labelCode, uint256 flag, uint8 required);\n    event Execution(uint256 indexed transactionCode);\n    event ExecutionFailure(uint256 indexed transactionCode);\n    event Deposit(address indexed sender, uint256 value);\n\n    event StakersChanged(address indexed stakers);\n    event SignersChanged(address indexed signers);\n    event RegulatorChanged(address indexed regulator);\n    event StakersControllerChanged(address indexed stakersController);\n    event SignersControllerChanged(address indexed signersController);\n    \n    event WalletOrNodeAttached(address indexed wallet);\n    event WalletOrNodeDetached(address indexed wallet);\n    \n    address public stakers;\n    address public signers;\n\n    address public stakersController;\n    address public signersController;\n\n    address public regulator;\n\n    // Transaction (mapped: transactionCode => Transaction)\n    mapping(uint256 => Transaction) public transactions;\n    uint256 public transactionCode;\n\n    // Requirement (mapped: transactionCode + label code => requirement)\n    mapping(uint256 => mapping(bytes32 => TransactionRequirement)) public requirements;\n    // Prevent duplicated confirmation (mapped: transactionCode + wallet address => bool)\n    mapping(uint256 => mapping(address => bool)) public confirmations;\n\n    // Registered wallets or nodes (mapped: address => type)\n    mapping(address => uint8) public registered;\n\n    // Search node address by wallet address (mapped: wallet address => node address)\n    mapping(address => address) public walletToNodes;\n\n    // Search wallet index by wallet address (mapped: wallet address => wallet index)\n    mapping(address => uint8) private walletToIndexes;\n\n    // Search label code by wallet address (mapped: wallet address => label code)\n    mapping(address => bytes32) private walletToLabelCodes;\n\n    // Search node address by label code (mapped: label code => node address)\n    mapping(bytes32 => address) private labelCodeToNodes;\n\n    struct Transaction {\n        uint8 status;\n        uint8 totalRequired;\n\n        address to;\n        uint256 value;\n        bytes data;\n        string reason;\n    }\n\n    struct TransactionRequirement {\n        uint8 required;\n        uint256 flag;\n    }\n\n    modifier onlyEligible(uint256 _transactionCode) {\n        require(isEligible(_transactionCode, msg.sender), \"Root.onlyEligible: Not eligible\");\n        _;\n    }\n\n    modifier onlySignable(uint256 _transactionCode) {\n        require(isSignable(_transactionCode, msg.sender), \"Root.onlySignable: Not signable\");\n        _;\n    }\n\n    modifier onlyNode() {\n        require(WALLET_TYPE_NODE == registered[msg.sender], \"Root.onlyNode: Access denied\");\n        _;\n    }\n\n    modifier onlyWallet() {\n        require(WALLET_TYPE_WALLET == registered[msg.sender], \"Root.onlyWallet: Access denied\");\n        require(!isContract(msg.sender), \"Root.onlyWallet: Is not node\");\n        _;\n    }\n\n    modifier onlyRegulator() {\n        require(msg.sender == regulator, \"Root.onlyRegulator: Access denied\");\n        _;\n    }\n\n    constructor(string memory _label, string memory _description) public\n        Label(\"ROOT\", _label, _description)\n    {\n    }\n\n    function () external payable\n    {\n        if (0 < msg.value)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    function isEligible(uint256 _transactionCode, address _sender) public view\n        returns (bool)\n    {\n        uint256 flag = requirements[_transactionCode][walletToLabelCodes[_sender]].flag;\n\n        if (0 != flag) {\n            uint8 index = walletToIndexes[_sender];\n\n            if (0 != index) {\n                index = index.sub(1);\n\n                // Check the bit is on for wallet index\n                return (0 != ((flag >> index) & 1));\n            }\n        }\n        return false;\n    }\n\n    function isSignable(uint256 _transactionCode, address _sender) public view\n        returns (bool)\n    {\n        if (TRANSACTION_STATUS_PENDING == transactions[_transactionCode].status) {\n            if (!confirmations[_transactionCode][_sender]) {\n                if (0 != requirements[_transactionCode][walletToLabelCodes[_sender]].required)\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    function createRequirement(bytes32 _labelCode, uint256 _flag, uint8 _required) external\n        onlyRegulator\n    {\n        setRequirement(_labelCode, _flag, _required);\n    }\n\n    function setRequirement(bytes32 _labelCode, uint256 _flag, uint8 _required) private\n    {\n        require(0 < _flag, \"Root.setRequirement: Confirmation flag is empty\");\n\n        uint8 totalRequired;\n\n        // Required all wallet in the node\n        if (uint8(-1) == _required) {\n            address node = labelCodeToNodes[_labelCode];\n            require(address(0) != node, \"Root.setRequirement: Node is not found\");\n\n            totalRequired = MultiSigNode(node).walletCount();\n\n            if (node != signers) {\n                // Stakers and controllers must have at least 1 wallet attached\n                require(0 < totalRequired, \"Root.setRequirement: No wallet\");\n            }\n            else {\n                // Signer node allowed to be empty\n                if (0 == totalRequired)\n                    return;\n            }\n\n            require(0 < totalRequired, \"Root.setRequirement: Confirmation required is empty\");\n        }\n        else {\n            // allowed 0 requirement, in order to support eligible user but not signable (view transaction only)\n            totalRequired = _required;\n        }\n\n        require(0 == requirements[transactionCode][_labelCode].flag, \"Root.setRequirement: Duplicated requirement\");\n\n        requirements[transactionCode][_labelCode] = TransactionRequirement({\n            required: totalRequired,\n            flag: _flag\n        });\n\n        // Increase total required in transaction\n        transactions[transactionCode].totalRequired = transactions[transactionCode].totalRequired.add(totalRequired);\n\n        emit Requirement(transactionCode, _labelCode, _flag, totalRequired);\n    }\n\n    function submit(address _to, uint256 _value, bytes calldata _data) external\n        onlyWallet\n        returns (uint256 /* transactionCode */) \n    {\n        require(address(0) != _to, \"Root.submit: Target address is empty\");\n\n        // Generate transaction id\n        transactionCode = transactionCode.add(1);\n\n        bytes4 functionId = convertBytesToBytes4(_data);\n\n        // Create requirement that based on destination address\n        if (address(this) != _to) {\n            // Check this is node address or not\n            if (WALLET_TYPE_NODE == registered[_to]) {\n                // Calling node function\n                // - 0x80882800: node.attach\n                // - 0xceb6c343: node.detach\n                if (bytes4(0x80882800) == functionId || bytes4(0xceb6c343) == functionId) { // node.attach or node.detach\n                    address rootNode = MultiSigNode(_to).getRootNode();\n\n                    if (rootNode == signers) {\n                        // Change SIGNER need ALL SIGNER_CONTROLLER\n                        setRequirement(LABEL_CODE_SIGNER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n                    }\n                    else if (rootNode == signersController || rootNode == stakersController) {\n                        // Change SIGNERS_CONTROLLER or STAKER_CONTROLLER need ALL STAKER\n                        setRequirement(LABEL_CODE_STAKER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n                    }\n                    else if (rootNode == stakers) {\n                        // Change STAKER need ALL STAKER_CONTROLLER\n                        setRequirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n                    }\n                    else {\n                        revert(\"Root.submit: Unknown node\");\n                    }\n                }\n                else\n                    revert(\"Root.submit: Not supported\");\n            }\n            else {\n                // Regulator create requirement\n                MultiSigRegulator(regulator).createRequirement(transactionCode, msg.sender, _to, _value, _data);\n            }\n        }\n        else {\n            // Calling self functions\n            // - 0xcde0a4f8: root.setRegulator\n            // - 0xb47876ea: root.setSigners\n            // - 0xc27dbe63: root.setStakers\n            // - 0x26bc178c: root.setStakersController\n            // - 0x51d996bf: root.setSignersController\n            if (bytes4(0xcde0a4f8) == functionId || bytes4(0xc27dbe63) == functionId) // setRegulator or setStakers\n                setRequirement(LABEL_CODE_STAKER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n            else if (bytes4(0x26bc178c) == functionId || bytes4(0x51d996bf) == functionId) // setStakersController or setSignersController\n                setRequirement(LABEL_CODE_STAKER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n            else if (bytes4(0xb47876ea) == functionId) // setSigners\n                setRequirement(LABEL_CODE_SIGNER_CONTROLLER, WALLET_FLAG_ALL, uint8(-1)); // ALL signable\n            else\n                revert(\"Root.submit: Not supported\");\n        }\n\n        require(0 < transactions[transactionCode].totalRequired, \"Root.submit: Requirement is empty\");\n\n        // Create transaction structure\n        transactions[transactionCode] = Transaction({\n            status: TRANSACTION_STATUS_PENDING,\n            totalRequired: transactions[transactionCode].totalRequired,\n            to: _to,\n            value: _value,\n            data: _data,\n            reason: \"\"\n        });\n\n        emit Submission(transactionCode);\n\n        // Confirm transaction if eligible and signable\n        if (isEligible(transactionCode, msg.sender) && isSignable(transactionCode, msg.sender))\n            confirmTransaction(transactionCode, transactions[transactionCode]);\n\n        return transactionCode;\n    }\n\n    function confirm(uint256 _transactionCode) external\n        onlyWallet\n        onlyEligible(_transactionCode)\n        onlySignable(_transactionCode)\n        returns (bool)\n    {\n        Transaction storage transaction = transactions[_transactionCode];\n\n        return confirmTransaction(_transactionCode, transaction);\n    }\n\n    function revoke(uint256 _transactionCode) external\n        onlyWallet\n        onlyEligible(_transactionCode)\n        returns (bool)\n    {\n        require(TRANSACTION_STATUS_PENDING == transactions[_transactionCode].status, \"Root.revoke: Transaction has been completed\");\n        transactions[_transactionCode].status = TRANSACTION_STATUS_REVOKED;\n\n        emit Revocation(msg.sender, _transactionCode);\n        return true;\n    }\n\n    function confirmTransaction(uint256 _transactionCode, Transaction storage _transaction) private\n        returns (bool)\n    {\n        TransactionRequirement storage requirement = requirements[_transactionCode][walletToLabelCodes[msg.sender]];\n        require(0 != requirement.flag && 0 != requirement.required, \"Root.confirmTransaction: Requirement is empty\");\n\n        // Prevent duplicated confirmation\n        require(!confirmations[_transactionCode][msg.sender], \"root.confirmTransaction: Duplicated confirmation\");\n        confirmations[_transactionCode][msg.sender] = true;\n\n        requirement.required = requirement.required.sub(1);\n        _transaction.totalRequired = _transaction.totalRequired.sub(1);\n\n        emit Confirmation(msg.sender, _transactionCode);\n\n        return executeTransaction(_transactionCode, _transaction);\n    }\n\n    function executeTransaction(uint256 _transactionCode, Transaction storage _transaction) private\n        returns (bool)\n    {\n        require(TRANSACTION_STATUS_PENDING == _transaction.status, \"Root.executeTransaction: Status not active\");\n\n        if (0 == _transaction.totalRequired) {\n            _transaction.status = TRANSACTION_STATUS_EXECUTED;\n\n            // Perform remote call\n            (bool success, bytes memory returnData) = _transaction.to.call.value(_transaction.value)(_transaction.data);\n\n            if (success)\n                emit Execution(_transactionCode);\n            else {\n                // Check the error string is available or not\n                if (0 == returnData.length || bytes4(0x08c379a0) != convertBytesToBytes4(returnData))\n                    _transaction.reason = \"Root.executeTransaction: Function call failed\";\n                else {\n                    bytes memory bytesArray = new bytes(returnData.length);\n                    for (uint256 i = 0; i < returnData.length.sub(4); i = i.add(1)) {\n                        bytesArray[i] = returnData[i.add(4)];\n                    }\n\n                    (string memory reason) = abi.decode(bytesArray, (string));\n                    _transaction.reason = reason;\n                }\n\n                _transaction.status = TRANSACTION_STATUS_FAILURE;\n                emit ExecutionFailure(_transactionCode);\n            }\n\n            return success;\n        }\n\n        return true;\n    }\n\n    function setRegulator(address _addressOf) external\n    {\n        if (address(0) != regulator)\n            require(msg.sender == address(this), \"Root.setRegulator: Access denied\");\n        \n        require(MultiSigRegulator(_addressOf).isSealed(), \"Root.setRegulator: Regulator is not sealed\");\n\n        regulator = setNode(regulator, _addressOf, false);\n        emit RegulatorChanged(regulator);\n    }\n\n    function setStakers(address _addressOf) external\n    {\n        if (address(0) != stakers)\n            require(msg.sender == address(this), \"Root.setStakers: Access denied\");\n\n        if (isContract(_addressOf))\n            require(0 < MultiSigNode(_addressOf).walletCount(), \"Root.setStakers: No wallet\");\n\n        stakers = setNode(stakers, _addressOf, true);\n        emit StakersChanged(stakers);\n    }\n\n    function setSigners(address _addressOf) external\n        returns (bool)\n    {\n        if (address(0) != signers)\n            require(msg.sender == address(this), \"Root.setSigners: Access denied\");\n\n        // Signer node allowed to be empty\n\n        signers = setNode(signers, _addressOf, true);\n        emit SignersChanged(signers);\n        return true;\n    }\n\n    function setStakersController(address _addressOf) external\n    {\n        if (address(0) != stakersController)\n            require(msg.sender == address(this), \"Root.setStakersController: Access denied\");\n\n        if (isContract(_addressOf))\n            require(0 < MultiSigNode(_addressOf).walletCount(), \"Root.setStakersController: No wallet\");\n\n        stakersController = setNode(stakersController, _addressOf, true);\n        emit StakersControllerChanged(stakersController);\n    }\n\n    function setSignersController(address _addressOf) external\n    {\n        if (address(0) != signersController)\n            require(msg.sender == address(this), \"Root.setSignersController: Access denied\");\n\n        if (isContract(_addressOf))\n            require(0 < MultiSigNode(_addressOf).walletCount(), \"Root.setSignersController: No wallet\");\n\n        signersController = setNode(signersController, _addressOf, true);\n        emit SignersControllerChanged(signersController);\n    }\n\n    function setNode(address _from, address _to, bool needAttachment) private\n        returns (address)\n    {\n        require(address(0) != _to, \"Root.setNode: Address is empty\");\n\n        if (needAttachment) {\n            require(0 == registered[_to], \"Root.setNode: Duplicated node\");\n\n            // Remove node from list\n            if (address(0) != _from) {\n                if (isContract(_from)) {\n                    // detach node\n                    MultiSigNode(_from).term();\n                }\n\n                delete registered[_from];\n            }\n\n            if (isContract(_to)) {\n                // Mark address as registered node\n                registered[_to] = WALLET_TYPE_NODE;\n\n                if (needAttachment) {\n                    // Attach node (parrent address = 0x0)\n                    MultiSigNode(_to).init(address(0));\n                }\n            }\n            else {\n                // Mark address as registered wallet\n                registered[_to] = WALLET_TYPE_WALLET;\n            }\n        }\n\n        return _to;\n    }\n\n    function attachWalletOrNode(address _wallet) external\n        onlyNode\n        returns (bool)\n    {\n        require(address(0) != _wallet, \"Root.attachWalletOrNode: Wallet address is empty\");\n        require(0 == registered[_wallet], \"Root.attachWalletOrNode: Duplicated wallet address\");\n\n        bytes32 labelCode = MultiSigNode(msg.sender).labelCode();\n\n        walletToNodes[_wallet] = msg.sender;\n        walletToIndexes[_wallet] = MultiSigNode(msg.sender).walletsIndex(_wallet);\n        walletToLabelCodes[_wallet] = labelCode;\n\n        labelCodeToNodes[labelCode] = msg.sender;\n\n        if (isContract(_wallet)) {\n            // Mark address as registered node\n            registered[_wallet] = WALLET_TYPE_NODE;\n\n            // Attach node with their parent address\n            MultiSigNode(_wallet).init(msg.sender);\n        }\n        else {\n            // Mark address as registered wallet\n            registered[_wallet] = WALLET_TYPE_WALLET;\n        }\n\n        emit WalletOrNodeAttached(_wallet);\n\n        return true;\n    }\n\n    function detachWalletOrNode(address _wallet) external\n        onlyNode\n        returns (bool)\n    {\n        require(address(0) != _wallet, \"Root.detachWalletOrNode: Wallet address is empty\");\n        require(0 != registered[_wallet], \"Root.detachWalletOrNode: Wallet address is not registered\");\n\n        if (isContract(_wallet)) {\n            // Detach node with their parent\n            MultiSigNode(_wallet).term();\n\n            bytes32 labelCode = MultiSigNode(msg.sender).labelCode();\n\n            delete labelCodeToNodes[labelCode];\n        }\n\n        delete registered[_wallet];\n        delete walletToNodes[_wallet];\n        delete walletToIndexes[_wallet];\n        delete walletToLabelCodes[_wallet];\n\n        emit WalletOrNodeDetached(_wallet);\n\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"transactionCode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requirements\",\"outputs\":[{\"name\":\"required\",\"type\":\"uint8\"},{\"name\":\"flag\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"submit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionCode\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressOf\",\"type\":\"address\"}],\"name\":\"setStakersController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressOf\",\"type\":\"address\"}],\"name\":\"setSignersController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transactionCode\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isEligible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_labelCode\",\"type\":\"bytes32\"},{\"name\":\"_flag\",\"type\":\"uint256\"},{\"name\":\"_required\",\"type\":\"uint8\"}],\"name\":\"createRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signersController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"totalRequired\",\"type\":\"uint8\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"reason\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakersController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressOf\",\"type\":\"address\"}],\"name\":\"setSigners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionCode\",\"type\":\"uint256\"}],\"name\":\"confirm\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"class\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressOf\",\"type\":\"address\"}],\"name\":\"setStakers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"labelCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"attachWalletOrNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"label\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressOf\",\"type\":\"address\"}],\"name\":\"setRegulator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"detachWalletOrNode\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regulator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"classCode\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transactionCode\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isSignable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletToNodes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_label\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionCode\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionCode\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionCode\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"labelCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"flag\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"required\",\"type\":\"uint8\"}],\"name\":\"Requirement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionCode\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionCode\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stakers\",\"type\":\"address\"}],\"name\":\"StakersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signers\",\"type\":\"address\"}],\"name\":\"SignersChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"regulator\",\"type\":\"address\"}],\"name\":\"RegulatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"stakersController\",\"type\":\"address\"}],\"name\":\"StakersControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"signersController\",\"type\":\"address\"}],\"name\":\"SignersControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletOrNodeAttached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"WalletOrNodeDetached\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50604051620061bf380380620061bf833981018060405260408110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b828101905060208101848111156200006757600080fd5b81518560018202830111640100000000821117156200008557600080fd5b50509291906020018051640100000000811115620000a257600080fd5b82810190506020810184811115620000b957600080fd5b8151856001820283011164010000000082111715620000d757600080fd5b50509291905050506040805190810160405280600481526020017f524f4f54000000000000000000000000000000000000000000000000000000008152508282620001666040805190810160405280600681526020017f5354414b45520000000000000000000000000000000000000000000000000000815250620003ab640100000000026401000000009004565b600081905550620001bb6040805190810160405280601181526020017f5354414b45525f434f4e54524f4c4c4552000000000000000000000000000000815250620003ab640100000000026401000000009004565b600181905550620002106040805190810160405280601181526020017f5349474e45525f434f4e54524f4c4c4552000000000000000000000000000000815250620003ab640100000000026401000000009004565b600281905550620002656040805190810160405280600681526020017f5349474e45520000000000000000000000000000000000000000000000000000815250620003ab640100000000026401000000009004565b600381905550620002ba6040805190810160405280600781526020017f4241434b53595300000000000000000000000000000000000000000000000000815250620003ab640100000000026401000000009004565b6004819055506200030f6040805190810160405280600381526020017f4f50530000000000000000000000000000000000000000000000000000000000815250620003ab640100000000026401000000009004565b60058190555082600690805190602001906200032d9291906200042a565b508160079080519060200190620003469291906200042a565b5080600890805190602001906200035f9291906200042a565b506200037a83620003ab640100000000026401000000009004565b6009819055506200039a82620003ab640100000000026401000000009004565b600a819055505050505050620004d9565b6000816040516020018082805190602001908083835b602083101515620003e85780518252602082019150602081019050602083039250620003c1565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200046d57805160ff19168380011785556200049e565b828001600101855582156200049e579182015b828111156200049d57825182559160200191906001019062000480565b5b509050620004ad9190620004b1565b5090565b620004d691905b80821115620004d2576000816000905550600101620004b8565b5090565b90565b615cd680620004e96000396000f3fe608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806307a48ee1146101cf5780630dbfe4e3146101fa57806314de327f1461026057806320c5429b1461032457806326bc178c146103775780633411c81c146103c857806346f0975a1461043b57806351d996bf14610492578063592e0e00146104e35780637284e4161461055657806381309cdd146105e65780638ef631f3146106385780639ace38c21461068f578063a31c2e8814610803578063b2dd5c071461085a578063b47876ea146108c5578063ba0179b51461092e578063bff852fa14610981578063c27dbe6314610a11578063c47d1a7a14610a62578063c4def70a14610a8d578063cb4774c414610af6578063cde0a4f814610b86578063d4ab68e414610bd7578063dd8fee1414610c40578063e24ff74414610c97578063edb9c6a114610cc2578063f029659614610d35578063fed1252a14610dc6575b34600010156101cd573373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c346040518082815260200191505060405180910390a25b005b3480156101db57600080fd5b506101e4610e1d565b6040518082815260200191505060405180910390f35b34801561020657600080fd5b5061023d6004803603604081101561021d57600080fd5b810190808035906020019092919080359060200190929190505050610e23565b604051808360ff1660ff1681526020018281526020019250505060405180910390f35b34801561026c57600080fd5b5061030e6004803603606081101561028357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156102ca57600080fd5b8201836020820111156102dc57600080fd5b803590602001918460018302840111640100000000831117156102fe57600080fd5b9091929391929390505050610e61565b6040518082815260200191505060405180910390f35b34801561033057600080fd5b5061035d6004803603602081101561034757600080fd5b8101908080359060200190929190505050611d5d565b604051808215151515815260200191505060405180910390f35b34801561038357600080fd5b506103c66004803603602081101561039a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061206b565b005b3480156103d457600080fd5b50610421600480360360408110156103eb57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123af565b604051808215151515815260200191505060405180910390f35b34801561044757600080fd5b506104506123de565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049e57600080fd5b506104e1600480360360208110156104b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612404565b005b3480156104ef57600080fd5b5061053c6004803603604081101561050657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612748565b604051808215151515815260200191505060405180910390f35b34801561056257600080fd5b5061056b612862565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105ab578082015181840152602081019050610590565b50505050905090810190601f1680156105d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105f257600080fd5b506106366004803603606081101561060957600080fd5b810190808035906020019092919080359060200190929190803560ff169060200190929190505050612900565b005b34801561064457600080fd5b5061064d6129fb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069b57600080fd5b506106c8600480360360208110156106b257600080fd5b8101908080359060200190929190505050612a21565b604051808760ff1660ff1681526020018660ff1660ff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561075c578082015181840152602081019050610741565b50505050905090810190601f1680156107895780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156107c25780820151818401526020810190506107a7565b50505050905090810190601f1680156107ef5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561080f57600080fd5b50610818612bc7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561086657600080fd5b506108a96004803603602081101561087d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bed565b604051808260ff1660ff16815260200191505060405180910390f35b3480156108d157600080fd5b50610914600480360360208110156108e857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c0d565b604051808215151515815260200191505060405180910390f35b34801561093a57600080fd5b506109676004803603602081101561095157600080fd5b8101908080359060200190929190505050612de7565b604051808215151515815260200191505060405180910390f35b34801561098d57600080fd5b5061099661305a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109d65780820151818401526020810190506109bb565b50505050905090810190601f168015610a035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610a1d57600080fd5b50610a6060048036036020811015610a3457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506130f8565b005b348015610a6e57600080fd5b50610a776133f0565b6040518082815260200191505060405180910390f35b348015610a9957600080fd5b50610adc60048036036020811015610ab057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133f6565b604051808215151515815260200191505060405180910390f35b348015610b0257600080fd5b50610b0b613b20565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b4b578082015181840152602081019050610b30565b50505050905090810190601f168015610b785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b9257600080fd5b50610bd560048036036020811015610ba957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613bbe565b005b348015610be357600080fd5b50610c2660048036036020811015610bfa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613ec7565b604051808215151515815260200191505060405180910390f35b348015610c4c57600080fd5b50610c5561443e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610ca357600080fd5b50610cac614464565b6040518082815260200191505060405180910390f35b348015610cce57600080fd5b50610d1b60048036036040811015610ce557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061446a565b604051808215151515815260200191505060405180910390f35b348015610d4157600080fd5b50610d8460048036036020811015610d5857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614598565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610dd257600080fd5b50610ddb6145cb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60115481565b6012602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900460ff16908060010154905082565b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16600160ff16141515610f2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f526f6f742e6f6e6c7957616c6c65743a204163636573732064656e696564000081525060200191505060405180910390fd5b610f36336145f1565b151515610fab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f526f6f742e6f6e6c7957616c6c65743a204973206e6f74206e6f64650000000081525060200191505060405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151515611076576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f526f6f742e7375626d69743a205461726765742061646472657373206973206581526020017f6d7074790000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b61108c600160115461460a90919063ffffffff16565b60118190555060006110e184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050614692565b90508573ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614151561173457601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16600260ff1614156115df57807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191663808828007c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806112425750807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191663ceb6c3437c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561156c5760008673ffffffffffffffffffffffffffffffffffffffff166338d1fcc36040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156112ab57600080fd5b505afa1580156112bf573d6000803e3d6000fd5b505050506040513d60208110156112d557600080fd5b81019080805190602001909291905050509050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561137a576113756002546001604060ff1660020a037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6146d3565b611566565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806114235750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b156114645761145f6000546001604060ff1660020a037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6146d3565b611565565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114f6576114f16001546001604060ff1660020a037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6146d3565b611564565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f526f6f742e7375626d69743a20556e6b6e6f776e206e6f64650000000000000081525060200191505060405180910390fd5b5b5b506115da565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f526f6f742e7375626d69743a204e6f7420737570706f7274656400000000000081525060200191505060405180910390fd5b61172f565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166369e92c6660115433898989896040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b15801561171657600080fd5b505af115801561172a573d6000803e3d6000fd5b505050505b611a6a565b807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191663cde0a4f87c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806118035750807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191663c27dbe637c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156118445761183f6001546001604060ff1660020a037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6146d3565b611a69565b807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166326bc178c7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806119135750807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166351d996bf7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156119545761194f6000546001604060ff1660020a037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6146d3565b611a68565b807bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191663b47876ea7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156119f9576119f46002546001604060ff1660020a037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6146d3565b611a67565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f526f6f742e7375626d69743a204e6f7420737570706f7274656400000000000081525060200191505060405180910390fd5b5b5b5b60106000601154815260200190815260200160002060000160019054906101000a900460ff1660ff166000101515611b30576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6f742e7375626d69743a20526571756972656d656e7420697320656d707481526020017f790000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60c060405190810160405280600160ff16815260200160106000601154815260200190815260200160002060000160019054906101000a900460ff1660ff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001602060405190810160405280600081525081525060106000601154815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600101556080820151816002019080519060200190611cb8929190615b05565b5060a0820151816003019080519060200190611cd5929190615b85565b509050506011547fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5160405160405180910390a2611d1460115433612748565b8015611d285750611d276011543361446a565b5b15611d4f57611d4d601154601060006011548152602001908152602001600020614cce565b505b601154915050949350505050565b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16600160ff16141515611e29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f526f6f742e6f6e6c7957616c6c65743a204163636573732064656e696564000081525060200191505060405180910390fd5b611e32336145f1565b151515611ea7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f526f6f742e6f6e6c7957616c6c65743a204973206e6f74206e6f64650000000081525060200191505060405180910390fd5b81611eb28133612748565b1515611f26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6f742e6f6e6c79456c696769626c653a204e6f7420656c696769626c650081525060200191505060405180910390fd5b6010600084815260200190815260200160002060000160009054906101000a900460ff1660ff16600160ff16141515611fed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f526f6f742e7265766f6b653a205472616e73616374696f6e206861732062656581526020017f6e20636f6d706c6574656400000000000000000000000000000000000000000081525060400191505060405180910390fd5b60046010600085815260200190815260200160002060000160006101000a81548160ff021916908360ff160217905550823373ffffffffffffffffffffffffffffffffffffffff167ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e960405160405180910390a36001915050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614151561218d573073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561218c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f526f6f742e7365745374616b657273436f6e74726f6c6c65723a20416363657381526020017f732064656e69656400000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b612196816145f1565b156122d9578073ffffffffffffffffffffffffffffffffffffffff166329b57c696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156121fd57600080fd5b505afa158015612211573d6000803e3d6000fd5b505050506040513d602081101561222757600080fd5b810190808051906020019092919050505060ff1660001015156122d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f526f6f742e7365745374616b657273436f6e74726f6c6c65723a204e6f20776181526020017f6c6c65740000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b612307600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600161503b565b600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fcd8b3417f1ee32db2e68a96ea425384ec1b47d598bde365c1a482097d5215b5060405160405180910390a250565b60136020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141515612526573073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612525576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f526f6f742e7365745369676e657273436f6e74726f6c6c65723a20416363657381526020017f732064656e69656400000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b61252f816145f1565b15612672578073ffffffffffffffffffffffffffffffffffffffff166329b57c696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561259657600080fd5b505afa1580156125aa573d6000803e3d6000fd5b505050506040513d60208110156125c057600080fd5b810190808051906020019092919050505060ff166000101515612671576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f526f6f742e7365745369676e657273436f6e74726f6c6c65723a204e6f20776181526020017f6c6c65740000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b6126a0600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600161503b565b600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdbe94348b10272885e6fe60207ef23bb00ff750e40c759afa7baf8ba549c6d8460405160405180910390a250565b600080601260008581526020019081526020016000206000601760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548152602001908152602001600020600101549050806000141515612856576000601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690508060ff1660001415156128545761283360018260ff1661544c90919063ffffffff16565b905060018160ff1683908060020a820491505016600014159250505061285c565b505b60009150505b92915050565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128f85780601f106128cd576101008083540402835291602001916128f8565b820191906000526020600020905b8154815290600101906020018083116128db57829003601f168201915b505050505081565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f526f6f742e6f6e6c79526567756c61746f723a204163636573732064656e696581526020017f640000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6129f68383836146d3565b505050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60106020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b1f5780601f10612af457610100808354040283529160200191612b1f565b820191906000526020600020905b815481529060010190602001808311612b0257829003601f168201915b505050505090806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bbd5780601f10612b9257610100808354040283529160200191612bbd565b820191906000526020600020905b815481529060010190602001808311612ba057829003601f168201915b5050505050905086565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60146020528060005260406000206000915054906101000a900460ff1681565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141515612d0b573073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f526f6f742e7365745369676e6572733a204163636573732064656e696564000081525060200191505060405180910390fd5b5b612d39600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600161503b565b600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1c3f6ae7cfaeddc65dd056712548a3db4e93b5230773486b1e1565a3fdd6c15f60405160405180910390a260019050919050565b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16600160ff16141515612eb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f526f6f742e6f6e6c7957616c6c65743a204163636573732064656e696564000081525060200191505060405180910390fd5b612ebc336145f1565b151515612f31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f526f6f742e6f6e6c7957616c6c65743a204973206e6f74206e6f64650000000081525060200191505060405180910390fd5b81612f3c8133612748565b1515612fb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6f742e6f6e6c79456c696769626c653a204e6f7420656c696769626c650081525060200191505060405180910390fd5b82612fbb813361446a565b151561302f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6f742e6f6e6c795369676e61626c653a204e6f74207369676e61626c650081525060200191505060405180910390fd5b60006010600086815260200190815260200160002090506130508582614cce565b9350505050919050565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130f05780601f106130c5576101008083540402835291602001916130f0565b820191906000526020600020905b8154815290600101906020018083116130d357829003601f168201915b505050505081565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415156131f4573073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156131f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f526f6f742e7365745374616b6572733a204163636573732064656e696564000081525060200191505060405180910390fd5b5b6131fd816145f1565b1561331a578073ffffffffffffffffffffffffffffffffffffffff166329b57c696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561326457600080fd5b505afa158015613278573d6000803e3d6000fd5b505050506040513d602081101561328e57600080fd5b810190808051906020019092919050505060ff166000101515613319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f526f6f742e7365745374616b6572733a204e6f2077616c6c657400000000000081525060200191505060405180910390fd5b5b613348600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600161503b565b600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f79b7992d6cb9389e5d866b20c7069785f57c1c5ded5fc78af1cc504e5a79bc1560405160405180910390a250565b600a5481565b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16600260ff161415156134c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f526f6f742e6f6e6c794e6f64653a204163636573732064656e6965640000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561358d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f526f6f742e61747461636857616c6c65744f724e6f64653a2057616c6c65742081526020017f6164647265737320697320656d7074790000000000000000000000000000000081525060400191505060405180910390fd5b601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16600014151561367a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f526f6f742e61747461636857616c6c65744f724e6f64653a204475706c69636181526020017f7465642077616c6c65742061646472657373000000000000000000000000000081525060400191505060405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1663c47d1a7a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156136de57600080fd5b505afa1580156136f2573d6000803e3d6000fd5b505050506040513d602081101561370857600080fd5b8101908080519060200190929190505050905033601560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1663c79e6429846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561383257600080fd5b505afa158015613846573d6000803e3d6000fd5b505050506040513d602081101561385c57600080fd5b8101908080519060200190929190505050601660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555080601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550336018600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613963836145f1565b15613a79576002601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508273ffffffffffffffffffffffffffffffffffffffff166319ab453c336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015613a5c57600080fd5b505af1158015613a70573d6000803e3d6000fd5b50505050613ad3565b6001601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505b8273ffffffffffffffffffffffffffffffffffffffff167f85c59ad333b866aa3a9350eae9b7b0665e61c1eb511ef1d200f742dd9bd06a7960405160405180910390a26001915050919050565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613bb65780601f10613b8b57610100808354040283529160200191613bb6565b820191906000526020600020905b815481529060010190602001808311613b9957829003601f168201915b505050505081565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141515613cba573073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613cb9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f526f6f742e736574526567756c61746f723a204163636573732064656e69656481525060200191505060405180910390fd5b5b8073ffffffffffffffffffffffffffffffffffffffff1663631f98526040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015613d1c57600080fd5b505afa158015613d30573d6000803e3d6000fd5b505050506040513d6020811015613d4657600080fd5b81019080805190602001909291905050501515613df1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f526f6f742e736574526567756c61746f723a20526567756c61746f722069732081526020017f6e6f74207365616c65640000000000000000000000000000000000000000000081525060400191505060405180910390fd5b613e1f600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600061503b565b600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f9a81ba56746cc9975688bbc332b8b1abc56893ca7fec307f0a74cc040c769d9f60405160405180910390a250565b6000601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16600260ff16141515613f93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f526f6f742e6f6e6c794e6f64653a204163636573732064656e6965640000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415151561405e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f526f6f742e64657461636857616c6c65744f724e6f64653a2057616c6c65742081526020017f6164647265737320697320656d7074790000000000000000000000000000000081525060400191505060405180910390fd5b601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1660001415151561414c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001807f526f6f742e64657461636857616c6c65744f724e6f64653a2057616c6c65742081526020017f61646472657373206973206e6f7420726567697374657265640000000000000081525060400191505060405180910390fd5b614155826145f1565b156142af578173ffffffffffffffffffffffffffffffffffffffff1663a10ffbed6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156141be57600080fd5b505af11580156141d2573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff1663c47d1a7a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561423a57600080fd5b505afa15801561424e573d6000803e3d6000fd5b505050506040513d602081101561426457600080fd5b810190808051906020019092919050505090506018600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505b601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055601760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558173ffffffffffffffffffffffffffffffffffffffff167fd3ebb8da9240053d091bebf041f8842c87f8a09f49171bf5f817d2a20a4df41160405160405180910390a260019050919050565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60006010600084815260200190815260200160002060000160009054906101000a900460ff1660ff16600160ff16141561458d576013600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151561458c57601260008481526020019081526020016000206000601760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060000160009054906101000a900460ff1660ff16600014151561458b5760019050614592565b5b5b600090505b92915050565b60156020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080823b90508063ffffffff16600010915050919050565b60008183019050828110151515614689576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4164646974696f6e20657863657074696f6e000000000000000000000000000081525060200191505060405180910390fd5b80905092915050565b60008151600014156146c65760007c01000000000000000000000000000000000000000000000000000000000290506146ce565b602082015190505b919050565b816000101515614771576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f526f6f742e736574526571756972656d656e743a20436f6e6669726d6174696f81526020017f6e20666c616720697320656d707479000000000000000000000000000000000081525060400191505060405180910390fd5b60008160ff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff161415614ad55760006018600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141515156148a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f526f6f742e736574526571756972656d656e743a204e6f6465206973206e6f7481526020017f20666f756e64000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166329b57c696040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561490657600080fd5b505afa15801561491a573d6000803e3d6000fd5b505050506040513d602081101561493057600080fd5b81019080805190602001909291905050509150600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515614a1a578160ff166000101515614a15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f526f6f742e736574526571756972656d656e743a204e6f2077616c6c6574000081525060200191505060405180910390fd5b614a2e565b8160ff1660001415614a2d575050614cc9565b5b8160ff166000101515614acf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260338152602001807f526f6f742e736574526571756972656d656e743a20436f6e6669726d6174696f81526020017f6e20726571756972656420697320656d7074790000000000000000000000000081525060400191505060405180910390fd5b50614ad9565b8190505b6012600060115481526020019081526020016000206000858152602001908152602001600020600101546000141515614ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f526f6f742e736574526571756972656d656e743a204475706c6963617465642081526020017f726571756972656d656e7400000000000000000000000000000000000000000081525060400191505060405180910390fd5b60408051908101604052808260ff16815260200184815250601260006011548152602001908152602001600020600086815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160010155905050614c478160106000601154815260200190815260200160002060000160019054906101000a900460ff1660ff166154d790919063ffffffff16565b60106000601154815260200190815260200160002060000160016101000a81548160ff021916908360ff1602179055506011547fa2b35f0b71caa261a2df40230dd0aff954b80982c3fe3944eb3391581970436c858584604051808481526020018381526020018260ff1660ff168152602001935050505060405180910390a2505b505050565b600080601260008581526020019081526020016000206000601760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002090508060010154600014158015614d6057508060000160009054906101000a900460ff1660ff16600014155b1515614dfa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f526f6f742e636f6e6669726d5472616e73616374696f6e3a205265717569726581526020017f6d656e7420697320656d7074790000000000000000000000000000000000000081525060400191505060405180910390fd5b6013600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515614ef3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f726f6f742e636f6e6669726d5472616e73616374696f6e3a204475706c69636181526020017f74656420636f6e6669726d6174696f6e0000000000000000000000000000000081525060400191505060405180910390fd5b60016013600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550614f8460018260000160009054906101000a900460ff1660ff1661544c90919063ffffffff16565b8160000160006101000a81548160ff021916908360ff160217905550614fc860018460000160019054906101000a900460ff1660ff1661544c90919063ffffffff16565b8360000160016101000a81548160ff021916908360ff160217905550833373ffffffffffffffffffffffffffffffffffffffff167f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef60405160405180910390a36150328484615565565b91505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16141515156150e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f526f6f742e7365744e6f64653a204164647265737320697320656d707479000081525060200191505060405180910390fd5b811561544257601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1660001415156151af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f526f6f742e7365744e6f64653a204475706c696361746564206e6f646500000081525060200191505060405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff161415156152c0576151ee846145f1565b15615270578373ffffffffffffffffffffffffffffffffffffffff1663a10ffbed6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801561525757600080fd5b505af115801561526b573d6000803e3d6000fd5b505050505b601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690555b6152c9836145f1565b156153e7576002601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555081156153e2578273ffffffffffffffffffffffffffffffffffffffff166319ab453c60006040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156153c957600080fd5b505af11580156153dd573d6000803e3d6000fd5b505050505b615441565b6001601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505b5b8290509392505050565b60008260ff168260ff16111515156154cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5375627472616374696f6e20657863657074696f6e000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b600081830190508260ff168160ff161015151561555c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4164646974696f6e20657863657074696f6e000000000000000000000000000081525060200191505060405180910390fd5b80905092915050565b60008160000160009054906101000a900460ff1660ff16600160ff1614151561561c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f526f6f742e657865637574655472616e73616374696f6e3a205374617475732081526020017f6e6f74206163746976650000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8160000160019054906101000a900460ff1660ff1660001415615a755760028260000160006101000a81548160ff021916908360ff160217905550600060608360000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684600101548560020160405180828054600181600116156101000203166002900480156156fa5780601f106156d85761010080835404028352918201916156fa565b820191906000526020600020905b8154815290600101906020018083116156e6575b505091505060006040518083038185875af1925050503d806000811461573c576040519150601f19603f3d011682016040523d82523d6000602084013e615741565b606091505b5091509150811561577e57847f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7560405160405180910390a2615a6b565b8051600014806157f7575061579281614692565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166308c379a07c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561587657606060405190810160405280602d81526020017f526f6f742e657865637574655472616e73616374696f6e3a2046756e6374696f81526020017f6e2063616c6c206661696c656400000000000000000000000000000000000000815250846003019080519060200190615870929190615c05565b50615a1f565b606081516040519080825280601f01601f1916602001820160405280156158ac5781602001600182028038833980820191505090505b50905060008090505b6158ca60048451615a8090919063ffffffff16565b81101561599657826158e660048361460a90919063ffffffff16565b8151811015156158f257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002828281518110151561594b57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061598f60018261460a90919063ffffffff16565b90506158b5565b5060608180602001905160208110156159ae57600080fd5b8101908080516401000000008111156159c657600080fd5b828101905060208101848111156159dc57600080fd5b81518560018202830111640100000000821117156159f957600080fd5b5050929190505050905080866003019080519060200190615a1b929190615c05565b5050505b60038460000160006101000a81548160ff021916908360ff160217905550847f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923660405160405180910390a25b8192505050615a7a565b600190505b92915050565b6000828211151515615afa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f5375627472616374696f6e20657863657074696f6e000000000000000000000081525060200191505060405180910390fd5b818303905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615b4657805160ff1916838001178555615b74565b82800160010185558215615b74579182015b82811115615b73578251825591602001919060010190615b58565b5b509050615b819190615c85565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615bc657805160ff1916838001178555615bf4565b82800160010185558215615bf4579182015b82811115615bf3578251825591602001919060010190615bd8565b5b509050615c019190615c85565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615c4657805160ff1916838001178555615c74565b82800160010185558215615c74579182015b82811115615c73578251825591602001919060010190615c58565b5b509050615c819190615c85565b5090565b615ca791905b80821115615ca3576000816000905550600101615c8b565b5090565b9056fea165627a7a72305820ba1d95d571baa48fb52de42e25f51731d8b667add8c602dbc1a63534ddc41cec0029000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004524f4f5400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001455534441204d756c74695369672057616c6c6574000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000004524f4f5400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001455534441204d756c74695369672057616c6c6574000000000000000000000000"
}