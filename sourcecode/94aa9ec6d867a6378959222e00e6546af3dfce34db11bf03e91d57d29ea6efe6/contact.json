{
  "address": "0x484c4b5510e0a1b1aad05a52daf709a7643328b7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-20\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n \ncontract Token  is StandardToken, PausableToken , BurnableToken {\n mapping(address => bool) internal locks;\n mapping(address => uint256) internal timelocks;\n mapping(address => uint256) internal valuelocks;\n\n\n  string public  name; \n  string public  symbol; \n  uint8 public decimals;\n\n\n    constructor( uint256 _initialSupply, string _name, string _symbol, uint8 _decimals,address admin) public {\n        owner = msg.sender;\n        totalSupply_ = _initialSupply;\n        balances[admin] = _initialSupply;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n      require(locks[msg.sender] == false);\n      require(timelocks[msg.sender] == 0 ||\n      timelocks[msg.sender] < now ||  \n      balanceOf(msg.sender).sub(valuelocks[msg.sender]) >= _value);\n      super.transfer(_to, _value);\n    }\n\n    function lock(address addr) public onlyOwner returns (bool) {\n    require(locks[addr] == false);\n    locks[addr] = true;  \n    return true;\n  }\n\n  function unlock(address addr) public onlyOwner returns (bool) {\n    require(locks[addr] == true);\n    locks[addr] = false; \n    return true;\n  }\n\n  function showLock(address addr) public view returns (bool) {\n    return locks[addr];\n  }\n\n   function resetTimeLockValue(address addr) public onlyOwner returns (bool) {\n    require(locks[addr] == false);\n    require(timelocks[addr] < now); \n    valuelocks[addr] = 0;\n    return true;\n  }\n\n  function timelock(address addr, uint256 _releaseTime, uint256 _value) public onlyOwner returns (bool) {\n  require(locks[addr] == false);\n  require(_releaseTime > now); \n\n  require(_releaseTime >= timelocks[addr]);\n  require(balanceOf(addr) >= _value); \n  \n  timelocks[addr] = _releaseTime;\n  valuelocks[addr] = _value; \n  return true;\n  }\n\n  function showTimeLock(address addr) public view returns (uint256) {\n    return timelocks[addr];\n  }\n\nfunction showTimeLockValue(address addr) public view returns (uint256) {\n    return valuelocks[addr];\n  }\n\n  function showTokenValue(address addr) public view returns (uint256) {\n    return balanceOf(addr); \n  }\n  \n  function Now() public view returns (uint256){\n    return now;\n  }\n\n    function () public payable {\n    revert();\n  }\n\n}",
  "bytecode": "60806040526003805460a060020a60ff02191690553480156200002157600080fd5b50604051620013c4380380620013c4833981016040908152815160208084015183850151606086015160808701516003805433600160a060020a031991821681179091161790556001869055600160a060020a03811660009081528086529690962085905591860180519496909591019391929091620000a89160079190870190620000de565b508251620000be906008906020860190620000de565b50506009805460ff191660ff929092169190911790555062000183915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012157805160ff191683800117855562000151565b8280016001018555821562000151579182015b828111156200015157825182559160200191906001019062000134565b506200015f92915062000163565b5090565b6200018091905b808211156200015f57600081556001016200016a565b90565b61123180620001936000396000f30060806040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610163578063095ea7b3146101ed57806318160ddd1461022557806323b872dd1461024c5780632f6c493c14610276578063313ce567146102975780633cf7cbdb146102c25780633f4ba83a146102e357806342966c68146102fa57806342b222bd1461031257806344d4fd19146103335780635c975abb14610348578063661884631461035d57806370a0823114610381578063715018a6146103a25780638456cb59146103b75780638da5cb5b146103cc57806395d89b41146103fd5780639e8f152c14610412578063a9059cbb14610433578063ba08809d14610457578063d73dd62314610478578063dd62ed3e1461049c578063f2fde38b146104c3578063f435f5a7146104e4578063fc1f5e5314610505578063fd57ee6d14610526575b600080fd5b34801561016f57600080fd5b5061017861054d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b257818101518382015260200161019a565b50505050905090810190601f1680156101df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f957600080fd5b50610211600160a060020a03600435166024356105db565b604080519115158252519081900360200190f35b34801561023157600080fd5b5061023a610606565b60408051918252519081900360200190f35b34801561025857600080fd5b50610211600160a060020a036004358116906024351660443561060c565b34801561028257600080fd5b50610211600160a060020a0360043516610639565b3480156102a357600080fd5b506102ac6106a2565b6040805160ff9092168252519081900360200190f35b3480156102ce57600080fd5b5061023a600160a060020a03600435166106ab565b3480156102ef57600080fd5b506102f86106c6565b005b34801561030657600080fd5b506102f860043561073e565b34801561031e57600080fd5b5061023a600160a060020a036004351661074b565b34801561033f57600080fd5b5061023a61075c565b34801561035457600080fd5b50610211610760565b34801561036957600080fd5b50610211600160a060020a0360043516602435610770565b34801561038d57600080fd5b5061023a600160a060020a0360043516610794565b3480156103ae57600080fd5b506102f86107af565b3480156103c357600080fd5b506102f861081d565b3480156103d857600080fd5b506103e161089a565b60408051600160a060020a039092168252519081900360200190f35b34801561040957600080fd5b506101786108a9565b34801561041e57600080fd5b50610211600160a060020a0360043516610904565b34801561043f57600080fd5b50610211600160a060020a0360043516602435610922565b34801561046357600080fd5b5061023a600160a060020a03600435166109d4565b34801561048457600080fd5b50610211600160a060020a03600435166024356109ef565b3480156104a857600080fd5b5061023a600160a060020a0360043581169060243516610a13565b3480156104cf57600080fd5b506102f8600160a060020a0360043516610a3e565b3480156104f057600080fd5b50610211600160a060020a0360043516610a5e565b34801561051157600080fd5b50610211600160a060020a0360043516610ac7565b34801561053257600080fd5b50610211600160a060020a0360043516602435604435610b49565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105d35780601f106105a8576101008083540402835291602001916105d3565b820191906000526020600020905b8154815290600101906020018083116105b657829003601f168201915b505050505081565b60035460009060a060020a900460ff16156105f557600080fd5b6105ff8383610bfc565b9392505050565b60015490565b60035460009060a060020a900460ff161561062657600080fd5b610631848484610c62565b949350505050565b600354600090600160a060020a0316331461065357600080fd5b600160a060020a03821660009081526004602052604090205460ff16151560011461067d57600080fd5b50600160a060020a03166000908152600460205260409020805460ff19169055600190565b60095460ff1681565b600160a060020a031660009081526006602052604090205490565b600354600160a060020a031633146106dd57600080fd5b60035460a060020a900460ff1615156106f557600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6107483382610dd9565b50565b600061075682610794565b92915050565b4290565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff161561078a57600080fd5b6105ff8383610eda565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031633146107c657600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a0316331461083457600080fd5b60035460a060020a900460ff161561084b57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105d35780601f106105a8576101008083540402835291602001916105d3565b600160a060020a031660009081526004602052604090205460ff1690565b60035460009060a060020a900460ff161561093c57600080fd5b3360009081526004602052604090205460ff161561095957600080fd5b33600090815260056020526040902054158061098357503360009081526005602052604090205442115b806109b857503360008181526006602052604090205483916109b591906109a990610794565b9063ffffffff610fca16565b10155b15156109c357600080fd5b6109cd8383610fdc565b5092915050565b600160a060020a031660009081526005602052604090205490565b60035460009060a060020a900460ff1615610a0957600080fd5b6105ff8383611000565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610a5557600080fd5b61074881611099565b600354600090600160a060020a03163314610a7857600080fd5b600160a060020a03821660009081526004602052604090205460ff1615610a9e57600080fd5b50600160a060020a03166000908152600460205260409020805460ff1916600190811790915590565b600354600090600160a060020a03163314610ae157600080fd5b600160a060020a03821660009081526004602052604090205460ff1615610b0757600080fd5b600160a060020a0382166000908152600560205260409020544211610b2b57600080fd5b50600160a060020a0316600090815260066020526040812055600190565b600354600090600160a060020a03163314610b6357600080fd5b600160a060020a03841660009081526004602052604090205460ff1615610b8957600080fd5b428311610b9557600080fd5b600160a060020a038416600090815260056020526040902054831015610bba57600080fd5b81610bc485610794565b1015610bcf57600080fd5b50600160a060020a0392909216600090815260056020908152604080832093909355600690522055600190565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a0383161515610c7957600080fd5b600160a060020a038416600090815260208190526040902054821115610c9e57600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610cce57600080fd5b600160a060020a038416600090815260208190526040902054610cf7908363ffffffff610fca16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610d2c908363ffffffff61111716565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610d6e908363ffffffff610fca16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600160a060020a038216600090815260208190526040902054811115610dfe57600080fd5b600160a060020a038216600090815260208190526040902054610e27908263ffffffff610fca16565b600160a060020a038316600090815260208190526040902055600154610e53908263ffffffff610fca16565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610f2f57336000908152600260209081526040808320600160a060020a0388168452909152812055610f64565b610f3f818463ffffffff610fca16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600082821115610fd657fe5b50900390565b60035460009060a060020a900460ff1615610ff657600080fd5b6105ff8383611124565b336000908152600260209081526040808320600160a060020a0386168452909152812054611034908363ffffffff61111716565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03811615156110ae57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b8181018281101561075657fe5b6000600160a060020a038316151561113b57600080fd5b3360009081526020819052604090205482111561115757600080fd5b33600090815260208190526040902054611177908363ffffffff610fca16565b3360009081526020819052604080822092909255600160a060020a038516815220546111a9908363ffffffff61111716565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3506001929150505600a165627a7a723058208546c6f617195f6f6c073a3caddd8d986eb73f3f7f7128cd9f02fb0882ae7d83002900000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000e39cc96c8204dbf0b55e747efd68223dbac219d6000000000000000000000000000000000000000000000000000000000000000d4d4143482045786368616e67650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d41434800000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000e39cc96c8204dbf0b55e747efd68223dbac219d6000000000000000000000000000000000000000000000000000000000000000d4d4143482045786368616e67650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d41434800000000000000000000000000000000000000000000000000000000"
}