{
  "address": "0xd1ce8888b962022365a660b17b4b6dcfa3c7ce7e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SX",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-30\n*/\n\npragma solidity ^0.4.25;\n\n\n// * DICE.SX: dice.sx (DSX) - Fair Game, Real Gain.\n// * \n// *\n// * 100% Fair Ethereum Games.\n// * No cheat. No signup required. No bullshit.\n// *\n// * All code and calculations are executed by smart contract.\n// * That means 100% transparency, everything is calculated by this contact (including random hash generation).\n// *\n// * Contract address: 0xd1ce8888b962022365a660b17b4b6dcfa3c7ce7e\n// *\n// *\n// * Website: https://dice.sx\n//\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() internal {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n   * @return true if `msg.sender` is the owner of the contract.\n   */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n// File: contracts/Jackpot.sol\n\ncontract Jackpot is Ownable {\n    using SafeMath for uint256;\n\n    struct Range {\n        uint256 end;\n        address player;\n    }\n\n    uint256 constant public NO_WINNER = uint256(-1);\n    uint256 constant public BLOCK_STEP = 100; // Every 100 blocks\n    uint256 constant public PROBABILITY = 500; // 1/500 prob, each 9 days\n\n    uint256 public winnerOffset = NO_WINNER;\n    uint256 public totalLength;\n    mapping (uint256 => Range) public ranges;\n    mapping (address => uint256) public playerLengths;\n\n    function () public payable onlyOwner {\n    }\n\n    function addRange(address player, uint256 length) public onlyOwner returns(uint256 begin, uint256 end) {\n        begin = totalLength;\n        end = begin.add(length);\n\n        playerLengths[player] += length;\n        ranges[begin] = Range({\n            end: end,\n            player: player\n        });\n\n        totalLength = end;\n    }\n\n    function candidateBlockNumber() public view returns(uint256) {\n        return block.number.sub(1).div(BLOCK_STEP).mul(BLOCK_STEP);\n    }\n\n    function candidateBlockNumberHash() public view returns(uint256) {\n        return uint256(blockhash(candidateBlockNumber()));\n    }\n\n    function candidateNextBlockNumberHash() public view returns(uint256) {\n        return uint256(blockhash(candidateBlockNumber() + 1));\n    }\n\n    function shouldSelectWinner() public view returns(bool) {\n        return totalLength > 0 &&\n            block.number > candidateBlockNumber() + 1 &&\n            (candidateBlockNumberHash() ^ uint256(this)) % PROBABILITY == 0;\n    }\n\n    function selectWinner() public onlyOwner returns(uint256) {\n        require(winnerOffset == NO_WINNER, \"Winner was selected\");\n        require(shouldSelectWinner(), \"Winner could not be selected now\");\n\n        winnerOffset = (candidateNextBlockNumberHash() / PROBABILITY) % totalLength;\n        return winnerOffset;\n    }\n\n    function payJackpot(uint256 begin) public onlyOwner {\n        Range storage range = ranges[begin];\n        require(winnerOffset != NO_WINNER, \"Winner was not selected\");\n        require(begin <= winnerOffset && winnerOffset < range.end, \"Not winning range\");\n\n        selfdestruct(range.player);\n    }\n}\n\n// File: contracts/SX.sol\n\ncontract SX is Ownable {\n    using SafeMath for uint256;\n\n    string constant public name = \"DICE.SX\";\n    string constant public symbol = \"DSX\";\n\n    uint256 public adminFeePercent = 1;   // 1%\n    uint256 public jackpotFeePercent = 1; // 1%\n    uint256 public maxRewardPercent = 10; // 10%\n    uint256 public minReward = 0.01 ether;\n    uint256 public maxReward = 3 ether;\n    \n    struct Game {\n        address player;\n        uint256 blockNumber;\n        uint256 value;\n        uint256 combinations;\n        uint256 answer;\n        uint256 salt;\n    }\n\n    Game[] public games;\n    uint256 public gamesFinished;\n    uint256 public totalWeisInGame;\n    \n    Jackpot public nextJackpot;\n    Jackpot[] public prevJackpots;\n\n    event GameStarted(\n        address indexed player,\n        uint256 indexed blockNumber,\n        uint256 indexed index,\n        uint256 combinations,\n        uint256 answer,\n        uint256 value\n    );\n    event GameFinished(\n        address indexed player,\n        uint256 indexed blockNumber,\n        uint256 value,\n        uint256 combinations,\n        uint256 answer,\n        uint256 result\n    );\n\n    event JackpotRangeAdded(\n        uint256 indexed jackpotIndex,\n        address indexed player,\n        uint256 indexed begin,\n        uint256 end\n    );\n    event JackpotWinnerSelected(\n        uint256 indexed jackpotIndex,\n        uint256 offset\n    );\n    event JackpotRewardPayed(\n        uint256 indexed jackpotIndex,\n        address indexed player,\n        uint256 begin,\n        uint256 end,\n        uint256 winnerOffset,\n        uint256 value\n    );\n\n    constructor() public {\n        nextJackpot = new Jackpot();\n    }\n\n    function () public payable {\n        // Coin flip\n        uint256 prevBlockHash = uint256(blockhash(block.number - 1));\n        play(2, 1 << (prevBlockHash % 2));\n    }\n\n    function gamesLength() public view returns(uint256) {\n        return games.length;\n    }\n\n    function prevJackpotsLength() public view returns(uint256) {\n        return prevJackpots.length;\n    }\n\n    function updateState() public {\n        finishAllGames();\n\n        if (nextJackpot.shouldSelectWinner()) {\n            nextJackpot.selectWinner();\n            emit JackpotWinnerSelected(prevJackpots.length, nextJackpot.winnerOffset());\n\n            prevJackpots.push(nextJackpot);\n            nextJackpot = new Jackpot();\n        }\n    }\n\n    function playAndFinishJackpot(\n        uint256 combinations,\n        uint256 answer,\n        uint256 jackpotIndex,\n        uint256 begin\n    ) \n        public\n        payable\n    {\n        finishJackpot(jackpotIndex, begin);\n        play(combinations, answer);\n    }\n\n    function play(uint256 combinations, uint256 answer) public payable {\n        uint256 answerSize = _countBits(answer);\n        uint256 possibleReward = msg.value.mul(combinations).div(answerSize);\n        require(minReward <= possibleReward && possibleReward <= maxReward, \"Possible reward value out of range\");\n        require(possibleReward <= address(this).balance.mul(maxRewardPercent).div(100), \"Possible reward value out of range\");\n        require(answer > 0 && answer < (1 << combinations) - 1, \"Answer should not contain all bits set\");\n        require(2 <= combinations && combinations <= 100, \"Combinations value is invalid\");\n\n        // Update\n        updateState();\n\n        // Play game\n        uint256 blockNumber = block.number + 1;\n        emit GameStarted(\n            msg.sender,\n            blockNumber,\n            games.length,\n            combinations,\n            answer,\n            msg.value\n        );\n        games.push(Game({\n            player: msg.sender,\n            blockNumber: blockNumber,\n            value: msg.value,\n            combinations: combinations,\n            answer: answer,\n            salt: nextJackpot.totalLength()\n        }));\n\n        (uint256 begin, uint256 end) = nextJackpot.addRange(msg.sender, msg.value);\n        emit JackpotRangeAdded(\n            prevJackpots.length,\n            msg.sender,\n            begin,\n            end\n        );\n\n        totalWeisInGame = totalWeisInGame.add(possibleReward);\n        require(totalWeisInGame <= address(this).balance, \"Not enough balance\");\n    }\n\n    function finishAllGames() public returns(uint256 count) {\n        while (finishNextGame()) {\n            count += 1;\n        }\n    }\n\n    function finishNextGame() public returns(bool) {\n        if (gamesFinished >= games.length) {\n            return false;\n        }\n\n        Game storage game = games[gamesFinished];\n        if (game.blockNumber >= block.number) {\n            return false;\n        }\n\n        uint256 hash = uint256(blockhash(game.blockNumber));\n        bool lose = (hash == 0);\n        hash = uint256(keccak256(abi.encodePacked(hash, game.salt)));\n\n        uint256 answerSize = _countBits(game.answer);\n        uint256 reward = game.value.mul(game.combinations).div(answerSize);\n        \n        uint256 result = 1 << (hash % game.combinations);\n        if (!lose && (result & game.answer) != 0) {\n            uint256 adminFee = reward.mul(adminFeePercent).div(100);\n            uint256 jackpotFee = reward.mul(jackpotFeePercent).div(100);\n\n            owner().send(adminFee);                                 // solium-disable-line security/no-send\n            address(nextJackpot).send(jackpotFee);                  // solium-disable-line security/no-send\n            game.player.send(reward.sub(adminFee).sub(jackpotFee)); // solium-disable-line security/no-send\n        }\n\n        emit GameFinished(\n            game.player,\n            game.blockNumber,\n            game.value,\n            game.combinations,\n            game.answer,\n            result\n        );\n        delete games[gamesFinished];\n        totalWeisInGame = totalWeisInGame.sub(reward);\n        gamesFinished += 1;\n        return true;\n    }\n\n    function finishJackpot(uint256 jackpotIndex, uint256 begin) public {\n        if (jackpotIndex >= prevJackpots.length) {\n            return;\n        }\n\n        Jackpot jackpot = prevJackpots[jackpotIndex];\n        if (address(jackpot).balance == 0) {\n            return;\n        }\n\n        (uint256 end, address player) = jackpot.ranges(begin);\n        uint256 winnerOffset = jackpot.winnerOffset();\n        uint256 value = address(jackpot).balance;\n        jackpot.payJackpot(begin);\n        delete prevJackpots[jackpotIndex];\n        emit JackpotRewardPayed(\n            jackpotIndex,\n            player,\n            begin,\n            end,\n            winnerOffset,\n            value\n        );\n    }\n\n    // Admin methods\n\n    function setAdminFeePercent(uint256 feePercent) public onlyOwner {\n        require(feePercent <= 2, \"Should be <= 2%\");\n        adminFeePercent = feePercent;\n    }\n\n    function setJackpotFeePercent(uint256 feePercent) public onlyOwner {\n        require(feePercent <= 3, \"Should be <= 3%\");\n        jackpotFeePercent = feePercent;\n    }\n\n    function setMaxRewardPercent(uint256 value) public onlyOwner {\n        require(value <= 100, \"Should not exceed 100%\");\n        maxRewardPercent = value;\n    }\n\n    function setMinReward(uint256 value) public onlyOwner {\n        minReward = value;\n    }\n\n    function setMaxReward(uint256 value) public onlyOwner {\n        maxReward = value;\n    }\n\n    function putToBank() public payable onlyOwner {\n    }\n\n    function getFromBank(uint256 value) public onlyOwner {\n        msg.sender.transfer(value);\n        require(totalWeisInGame <= address(this).balance, \"Not enough balance\");\n    }\n\n    function _countBits(uint256 arg) internal pure returns(uint256 count) {\n        uint256 value = arg;\n        while (value != 0) {\n            value &= value - 1; // clear the least significant bit set\n            count++;\n        }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"nextJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamesFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"combinations\",\"type\":\"uint256\"},{\"name\":\"answer\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gamesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRewardPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prevJackpots\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"jackpotIndex\",\"type\":\"uint256\"},{\"name\":\"begin\",\"type\":\"uint256\"}],\"name\":\"finishJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getFromBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWeisInGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishNextGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"combinations\",\"type\":\"uint256\"},{\"name\":\"answer\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"combinations\",\"type\":\"uint256\"},{\"name\":\"answer\",\"type\":\"uint256\"},{\"name\":\"jackpotIndex\",\"type\":\"uint256\"},{\"name\":\"begin\",\"type\":\"uint256\"}],\"name\":\"playAndFinishJackpot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevJackpotsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxRewardPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"setJackpotFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"setAdminFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishAllGames\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"putToBank\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"combinations\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"answer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"combinations\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"answer\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"GameFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"jackpotIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"begin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"JackpotRangeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"jackpotIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"JackpotWinnerSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"jackpotIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"begin\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerOffset\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"JackpotRewardPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6080604052600180556001600255600a600355662386f26fc100006004556729a2241af62c000060055534801561003557600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36100876100c9565b604051809103906000f0801580156100a3573d6000803e3d6000fd5b5060098054600160a060020a031916600160a060020a03929092169190911790556100d9565b6040516108e88061217983390190565b612091806100e86000396000f3006080604052600436106101715763ffffffff60e060020a60003504166303fca061811461018a57806306fdde03146101bb578063079333e314610245578063117a5b901461026c5780631d8557d7146102c157806320eba3f2146102d857806325c33e13146102ed5780633395b75a1461030557806334acd3471461031a578063370f2827146103325780634942a71f1461034d57806359a997081461036557806366a78e6c1461037a57806370ae882f1461038f578063715018a6146103b85780637bc49a95146103cd5780638c7fb793146103db5780638cf7d906146103f05780638da5cb5b146104045780638f32d59b1461041957806395d89b411461042e578063987faf18146104435780639cee9492146104585780639ef35c0114610470578063b6a1cb2b14610488578063ba16d600146104a0578063ba527629146104b5578063d1ff9605146104ca578063dda0e4ba146104e2578063ee749b26146104f7578063f2fde38b146104ff575b600019430140610187600280830660020a610520565b50005b34801561019657600080fd5b5061019f610a43565b60408051600160a060020a039092168252519081900360200190f35b3480156101c757600080fd5b506101d0610a52565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561020a5781810151838201526020016101f2565b50505050905090810190601f1680156102375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025157600080fd5b5061025a610a89565b60408051918252519081900360200190f35b34801561027857600080fd5b50610284600435610a8f565b60408051600160a060020a0390971687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b3480156102cd57600080fd5b506102d6610add565b005b3480156102e457600080fd5b5061025a610d42565b3480156102f957600080fd5b506102d6600435610d49565b34801561031157600080fd5b5061025a610d61565b34801561032657600080fd5b5061019f600435610d67565b34801561033e57600080fd5b506102d6600435602435610d8f565b34801561035957600080fd5b506102d6600435610ffa565b34801561037157600080fd5b5061025a611099565b34801561038657600080fd5b5061025a61109f565b34801561039b57600080fd5b506103a46110a5565b604080519115158252519081900360200190f35b3480156103c457600080fd5b506102d66113be565b6102d6600435602435610520565b3480156103e757600080fd5b5061025a61141b565b6102d6600435602435604435606435611421565b34801561041057600080fd5b5061019f61143b565b34801561042557600080fd5b506103a461144a565b34801561043a57600080fd5b506101d061145b565b34801561044f57600080fd5b5061025a611492565b34801561046457600080fd5b506102d6600435611498565b34801561047c57600080fd5b506102d6600435611509565b34801561049457600080fd5b506102d660043561157a565b3480156104ac57600080fd5b5061025a611592565b3480156104c157600080fd5b5061025a611598565b3480156104d657600080fd5b506102d660043561159e565b3480156104ee57600080fd5b5061025a61160f565b6102d6611627565b34801561050b57600080fd5b506102d6600160a060020a036004351661163a565b600080600080600061053186611656565b945061055385610547348a63ffffffff61167816565b9063ffffffff6116b116565b9350836004541115801561056957506005548411155b15156105e5576040805160e560020a62461bcd02815260206004820152602260248201527f506f737369626c65207265776172642076616c7565206f7574206f662072616e60448201527f6765000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600354610601906064906105479030319063ffffffff61167816565b84111561067e576040805160e560020a62461bcd02815260206004820152602260248201527f506f737369626c65207265776172642076616c7565206f7574206f662072616e60448201527f6765000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000861180156106955750600019600288900a0186105b1515610711576040805160e560020a62461bcd02815260206004820152602660248201527f416e737765722073686f756c64206e6f7420636f6e7461696e20616c6c20626960448201527f7473207365740000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b86600211158015610723575060648711155b1515610779576040805160e560020a62461bcd02815260206004820152601d60248201527f436f6d62696e6174696f6e732076616c756520697320696e76616c6964000000604482015290519081900360640190fd5b610781610add565b600654604080518981526020810189905234818301529051600143019550859133917fdea9f9a6458b1c5cadc8462e2a3bd4f8dacc946b233d4ecaded91c81d316487d9181900360600190a46040805160c08101825233815260208082018690523482840152606082018a90526080820189905260095483517fed7ea372000000000000000000000000000000000000000000000000000000008152935160069460a0850193600160a060020a039093169263ed7ea372926004808401938290030181600087803b15801561085557600080fd5b505af1158015610869573d6000803e3d6000fd5b505050506040513d602081101561087f57600080fd5b505190528154600180820184556000938452602080852084516006909402018054600160a060020a031916600160a060020a039485161781559084015191810191909155604080840151600283015560608401516003830155608084015160048084019190915560a09094015160059092019190915560095481517f36733fa0000000000000000000000000000000000000000000000000000000008152339481019490945234602485015281519216936336733fa09360448082019492918390030190829087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050506040513d604081101561097e57600080fd5b508051602091820151600a546040805183815290519396509194508593339391927f927c57a7e839fbcd44e64d0502f745a9d8466804662a66890628a0479149053f929081900390910190a46008546109dd908563ffffffff6116d416565b600881905530311015610a3a576040805160e560020a62461bcd02815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000604482015290519081900360640190fd5b50505050505050565b600954600160a060020a031681565b60408051808201909152600781527f444943452e535800000000000000000000000000000000000000000000000000602082015281565b60075481565b6006805482908110610a9d57fe5b6000918252602090912060069091020180546001820154600283015460038401546004850154600590950154600160a060020a0390941695509193909286565b610ae561160f565b50600960009054906101000a9004600160a060020a0316600160a060020a0316634a16673b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610b3957600080fd5b505af1158015610b4d573d6000803e3d6000fd5b505050506040513d6020811015610b6357600080fd5b505115610d4057600960009054906101000a9004600160a060020a0316600160a060020a03166333a99e046040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610bbd57600080fd5b505af1158015610bd1573d6000803e3d6000fd5b505050506040513d6020811015610be757600080fd5b5050600a54600954604080517fd257309100000000000000000000000000000000000000000000000000000000815290517fd4eaf99e2437d54bbe149fd24143b8b11a418ce4319f74ca7942ed3026a3777892600160a060020a03169163d25730919160048083019260209291908290030181600087803b158015610c6b57600080fd5b505af1158015610c7f573d6000803e3d6000fd5b505050506040513d6020811015610c9557600080fd5b505160408051918252519081900360200190a2600954600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018054600160a060020a031916600160a060020a03909216919091179055610d0261176d565b604051809103906000f080158015610d1e573d6000803e3d6000fd5b5060098054600160a060020a031916600160a060020a03929092169190911790555b565b6006545b90565b610d5161144a565b1515610d5c57600080fd5b600555565b60035481565b600a805482908110610d7557fe5b600091825260209091200154600160a060020a0316905081565b6000806000806000600a8054905087101515610daa57610a3a565b600a805488908110610db857fe5b600091825260209091200154600160a060020a0316945084311515610ddc57610a3a565b604080517f5fdecdfa000000000000000000000000000000000000000000000000000000008152600481018890528151600160a060020a03881692635fdecdfa92602480820193918290030181600087803b158015610e3a57600080fd5b505af1158015610e4e573d6000803e3d6000fd5b505050506040513d6040811015610e6457600080fd5b508051602091820151604080517fd25730910000000000000000000000000000000000000000000000000000000081529051929750909550600160a060020a0388169263d2573091926004808401938290030181600087803b158015610ec957600080fd5b505af1158015610edd573d6000803e3d6000fd5b505050506040513d6020811015610ef357600080fd5b5051604080517fd093e04b000000000000000000000000000000000000000000000000000000008152600481018990529051919350600160a060020a038716803193509163d093e04b9160248082019260009290919082900301818387803b158015610f5e57600080fd5b505af1158015610f72573d6000803e3d6000fd5b50505050600a87815481101515610f8557fe5b6000918252602091829020018054600160a060020a0319169055604080518881529182018690528181018490526060820183905251600160a060020a0385169189917f4a6aefef0a331da660fc27707025e58b7468fdd44a59d6aec3e8d41f0108b1369181900360800190a350505050505050565b61100261144a565b151561100d57600080fd5b604051339082156108fc029083906000818181858888f1935050505015801561103a573d6000803e3d6000fd5b5060085430311015611096576040805160e560020a62461bcd02815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000604482015290519081900360640190fd5b50565b60085481565b60055481565b60008060008060008060008060006006805490506007541015156110cc57600098506113b3565b60066007548154811015156110dd57fe5b9060005260206000209060060201975043886001015410151561110357600098506113b3565b87600101544060019004965086600014955086886005015460405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106111705780518252601f199092019160209182019101611151565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900496506111b08860040154611656565b94506111d1856105478a600301548b6002015461167890919063ffffffff16565b93508760030154878115156111e257fe5b0660020a9250851580156111fb57506004880154831615155b156112d95761121a60646105476001548761167890919063ffffffff16565b915061123660646105476002548761167890919063ffffffff16565b905061124061143b565b600160a060020a03166108fc839081150290604051600060405180830381858888f15050600954604051600160a060020a03909116935084156108fc0292508491506000818181858888f150508a54600160a060020a031692506108fc91506112c19050836112b5888763ffffffff6116e616565b9063ffffffff6116e616565b6040518115909202916000818181858888f150505050505b6001880154885460028a015460038b015460048c0154604080519384526020840192909252828201526060820187905251600160a060020a03909216917f6b6ebb7a793c434f3d004e8191fdc17c6a5311ab274b09e7423d42767275a7a09181900360800190a3600660075481548110151561135157fe5b6000918252602082206006909102018054600160a060020a031916815560018101829055600281018290556003810182905560048101829055600501556008546113a1908563ffffffff6116e616565b60085560078054600190810190915598505b505050505050505090565b6113c661144a565b15156113d157600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360008054600160a060020a0319169055565b60015481565b61142b8282610d8f565b6114358484610520565b50505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b60408051808201909152600381527f4453580000000000000000000000000000000000000000000000000000000000602082015281565b600a5490565b6114a061144a565b15156114ab57600080fd5b6064811115611504576040805160e560020a62461bcd02815260206004820152601660248201527f53686f756c64206e6f7420657863656564203130302500000000000000000000604482015290519081900360640190fd5b600355565b61151161144a565b151561151c57600080fd5b6003811115611575576040805160e560020a62461bcd02815260206004820152600f60248201527f53686f756c64206265203c3d2033250000000000000000000000000000000000604482015290519081900360640190fd5b600255565b61158261144a565b151561158d57600080fd5b600455565b60045481565b60025481565b6115a661144a565b15156115b157600080fd5b600281111561160a576040805160e560020a62461bcd02815260206004820152600f60248201527f53686f756c64206265203c3d2032250000000000000000000000000000000000604482015290519081900360640190fd5b600155565b60005b61161a6110a5565b15610d4657600101611612565b61162f61144a565b1515610d4057600080fd5b61164261144a565b151561164d57600080fd5b611096816116fd565b6000815b8015611672576001919091019060001981011661165a565b50919050565b60008083151561168b57600091506116aa565b5082820282848281151561169b57fe5b04146116a657600080fd5b8091505b5092915050565b6000808083116116c057600080fd5b82848115156116cb57fe5b04949350505050565b6000828201838110156116a657600080fd5b600080838311156116f657600080fd5b5050900390565b600160a060020a038116151561171257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b6040516108e88061177e8339019056006080604081905260001960015560008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361088b8061005d6000396000f3006080604052600436106100fa5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662783a6d811461010f5780630606d17a1461014257806310177a671461015757806333a99e041461016c57806336733fa0146101815780633f4f057f146101be5780634415d736146101d35780634a16673b146101e85780635fdecdfa14610211578063715018a61461024a5780638da5cb5b1461025f5780638f32d59b146102905780639e1585b9146102a5578063add2f089146102ba578063d093e04b146102cf578063d2573091146102e7578063ed7ea372146102fc578063f2fde38b14610311575b610102610332565b151561010d57600080fd5b005b34801561011b57600080fd5b50610130600160a060020a0360043516610343565b60408051918252519081900360200190f35b34801561014e57600080fd5b50610130610355565b34801561016357600080fd5b5061013061035b565b34801561017857600080fd5b50610130610360565b34801561018d57600080fd5b506101a5600160a060020a036004351660243561045a565b6040805192835260208301919091528051918290030190f35b3480156101ca57600080fd5b506101306104ff565b3480156101df57600080fd5b5061013061050f565b3480156101f457600080fd5b506101fd610515565b604080519115158252519081900360200190f35b34801561021d57600080fd5b50610229600435610556565b60408051928352600160a060020a0390911660208301528051918290030190f35b34801561025657600080fd5b5061010d610578565b34801561026b57600080fd5b506102746105e2565b60408051600160a060020a039092168252519081900360200190f35b34801561029c57600080fd5b506101fd610332565b3480156102b157600080fd5b506101306105f1565b3480156102c657600080fd5b50610130610604565b3480156102db57600080fd5b5061010d600435610638565b3480156102f357600080fd5b50610130610732565b34801561030857600080fd5b50610130610738565b34801561031d57600080fd5b5061010d600160a060020a036004351661073e565b600054600160a060020a0316331490565b60046020526000908152604090205481565b60001981565b606481565b600061036a610332565b151561037557600080fd5b600154600019146103d0576040805160e560020a62461bcd02815260206004820152601360248201527f57696e6e6572207761732073656c656374656400000000000000000000000000604482015290519081900360640190fd5b6103d8610515565b151561042e576040805160e560020a62461bcd02815260206004820181905260248201527f57696e6e657220636f756c64206e6f742062652073656c6563746564206e6f77604482015290519081900360640190fd5b6002546101f461043c6105f1565b81151561044557fe5b0481151561044f57fe5b066001819055905090565b600080610465610332565b151561047057600080fd5b6002549150610485828463ffffffff61075d16565b600160a060020a0394851660008181526004602090815260408083208054989098019097558651808801885284815280820193845286835260039091529590209451855551600194909401805473ffffffffffffffffffffffffffffffffffffffff19169490951693909317909355600282905592909150565b6000610509610604565b40905090565b6101f481565b600080600254118015610531575061052b610604565b60010143115b801561055157506101f4306105446104ff565b1881151561054e57fe5b06155b905090565b60036020526000908152604090208054600190910154600160a060020a031682565b610580610332565b151561058b57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b60006105fb610604565b60010140905090565b6000610551606461062c8161062043600163ffffffff61077a16565b9063ffffffff61079116565b9063ffffffff6107b416565b6000610642610332565b151561064d57600080fd5b50600081815260036020526040902060015460001914156106b8576040805160e560020a62461bcd02815260206004820152601760248201527f57696e6e657220776173206e6f742073656c6563746564000000000000000000604482015290519081900360640190fd5b60015482111580156106cc57508054600154105b1515610722576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f742077696e6e696e672072616e6765000000000000000000000000000000604482015290519081900360640190fd5b6001810154600160a060020a0316ff5b60015481565b60025481565b610746610332565b151561075157600080fd5b61075a816107e2565b50565b60008282018381101561076f57600080fd5b8091505b5092915050565b6000808383111561078a57600080fd5b5050900390565b6000808083116107a057600080fd5b82848115156107ab57fe5b04949350505050565b6000808315156107c75760009150610773565b508282028284828115156107d757fe5b041461076f57600080fd5b600160a060020a03811615156107f757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582086be07d26ed53ab36c247e3d39d8beabc7a29b6624014da1833c33318c609d540029a165627a7a72305820fbc825d76696e80fac2979f9860f388c1280be29e0a975366e3a9b2a8b068bf600296080604081905260001960015560008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361088b8061005d6000396000f3006080604052600436106100fa5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662783a6d811461010f5780630606d17a1461014257806310177a671461015757806333a99e041461016c57806336733fa0146101815780633f4f057f146101be5780634415d736146101d35780634a16673b146101e85780635fdecdfa14610211578063715018a61461024a5780638da5cb5b1461025f5780638f32d59b146102905780639e1585b9146102a5578063add2f089146102ba578063d093e04b146102cf578063d2573091146102e7578063ed7ea372146102fc578063f2fde38b14610311575b610102610332565b151561010d57600080fd5b005b34801561011b57600080fd5b50610130600160a060020a0360043516610343565b60408051918252519081900360200190f35b34801561014e57600080fd5b50610130610355565b34801561016357600080fd5b5061013061035b565b34801561017857600080fd5b50610130610360565b34801561018d57600080fd5b506101a5600160a060020a036004351660243561045a565b6040805192835260208301919091528051918290030190f35b3480156101ca57600080fd5b506101306104ff565b3480156101df57600080fd5b5061013061050f565b3480156101f457600080fd5b506101fd610515565b604080519115158252519081900360200190f35b34801561021d57600080fd5b50610229600435610556565b60408051928352600160a060020a0390911660208301528051918290030190f35b34801561025657600080fd5b5061010d610578565b34801561026b57600080fd5b506102746105e2565b60408051600160a060020a039092168252519081900360200190f35b34801561029c57600080fd5b506101fd610332565b3480156102b157600080fd5b506101306105f1565b3480156102c657600080fd5b50610130610604565b3480156102db57600080fd5b5061010d600435610638565b3480156102f357600080fd5b50610130610732565b34801561030857600080fd5b50610130610738565b34801561031d57600080fd5b5061010d600160a060020a036004351661073e565b600054600160a060020a0316331490565b60046020526000908152604090205481565b60001981565b606481565b600061036a610332565b151561037557600080fd5b600154600019146103d0576040805160e560020a62461bcd02815260206004820152601360248201527f57696e6e6572207761732073656c656374656400000000000000000000000000604482015290519081900360640190fd5b6103d8610515565b151561042e576040805160e560020a62461bcd02815260206004820181905260248201527f57696e6e657220636f756c64206e6f742062652073656c6563746564206e6f77604482015290519081900360640190fd5b6002546101f461043c6105f1565b81151561044557fe5b0481151561044f57fe5b066001819055905090565b600080610465610332565b151561047057600080fd5b6002549150610485828463ffffffff61075d16565b600160a060020a0394851660008181526004602090815260408083208054989098019097558651808801885284815280820193845286835260039091529590209451855551600194909401805473ffffffffffffffffffffffffffffffffffffffff19169490951693909317909355600282905592909150565b6000610509610604565b40905090565b6101f481565b600080600254118015610531575061052b610604565b60010143115b801561055157506101f4306105446104ff565b1881151561054e57fe5b06155b905090565b60036020526000908152604090208054600190910154600160a060020a031682565b610580610332565b151561058b57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b60006105fb610604565b60010140905090565b6000610551606461062c8161062043600163ffffffff61077a16565b9063ffffffff61079116565b9063ffffffff6107b416565b6000610642610332565b151561064d57600080fd5b50600081815260036020526040902060015460001914156106b8576040805160e560020a62461bcd02815260206004820152601760248201527f57696e6e657220776173206e6f742073656c6563746564000000000000000000604482015290519081900360640190fd5b60015482111580156106cc57508054600154105b1515610722576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f742077696e6e696e672072616e6765000000000000000000000000000000604482015290519081900360640190fd5b6001810154600160a060020a0316ff5b60015481565b60025481565b610746610332565b151561075157600080fd5b61075a816107e2565b50565b60008282018381101561076f57600080fd5b8091505b5092915050565b6000808383111561078a57600080fd5b5050900390565b6000808083116107a057600080fd5b82848115156107ab57fe5b04949350505050565b6000808315156107c75760009150610773565b508282028284828115156107d757fe5b041461076f57600080fd5b600160a060020a03811615156107f757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582086be07d26ed53ab36c247e3d39d8beabc7a29b6624014da1833c33318c609d540029"
}