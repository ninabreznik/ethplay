{
  "address": "0x513fea5cd4c4c1b4f92382cb0a31a57abe1975ba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OneYearDreamTokensVestingAdvisors",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\npragma solidity 0.4.24;\n\ncontract ERC20TokenInterface {\n\n    function totalSupply () external constant returns (uint);\n    function balanceOf (address tokenOwner) external constant returns (uint balance);\n    function transfer (address to, uint tokens) external returns (bool success);\n    function transferFrom (address from, address to, uint tokens) external returns (bool success);\n\n}\n\n/**\n * Math operations with safety checks that throw on overflows.\n */\nlibrary SafeMath {\n\n    function mul (uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div (uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    function sub (uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function add (uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n}\n\n/**\n * DreamTeam tokens vesting smart contract. \n * This vesting smart contracts unlocks 50% of the tokens for `withdrawalAddress` on December 25, 2018.\n * Other 50% are unlocked on 30 June, 2019.\n * The withdrawal address is set during the initialization (initializeVestingFor function).\n * To withdraw tokens, send an empty transaction to this smart contract address (just like you send Ether, but set\n * amount to transfer to 0 instead).\n * Once vesting period (1 year) ends and after all DREAM tokens are withdrawn, this smart contract self-destructs.\n */\ncontract OneYearDreamTokensVestingAdvisors {\n\n    using SafeMath for uint256;\n\n    /**\n     * Address of DREAM token.\n     */\n    ERC20TokenInterface public dreamToken;\n\n    /**\n     * Address which will receive tokens. This address is set during initialization.\n     */\n    address public withdrawalAddress = 0x0;\n\n    /**\n     * Tokens vesting stage structure with vesting date and tokens allowed to unlock.\n     */\n    struct VestingStage {\n        uint256 date;\n        uint256 tokensUnlockedPercentage;\n    }\n\n    /**\n     * Array for storing all vesting stages with structure defined above.\n     */\n    VestingStage[2] public stages;\n\n    /**\n     * Total amount of tokens to send.\n     */\n    uint256 public initialTokensBalance;\n\n    /**\n     * Amount of tokens already sent.\n     */\n    uint256 public tokensSent;\n\n    /**\n     * Account that deployed this smart contract, which is authorized to initialize vesting.\n     */\n    address public deployer;\n\n    modifier deployerOnly { require(msg.sender == deployer); _; }\n    modifier whenInitialized { require(withdrawalAddress != 0x0); _; }\n    modifier whenNotInitialized { require(withdrawalAddress == 0x0); _; }\n\n    /**\n     * Event raised on each successful withdraw.\n     */\n    event Withdraw(uint256 amount, uint256 timestamp);\n\n    /**\n     * Dedicate vesting smart contract for a particular token during deployment.\n     * @param token Address of DreamToken that will be locked on contract.\n     */\n    constructor (ERC20TokenInterface token) public {\n        dreamToken = token;\n        deployer = msg.sender;\n    }\n\n    /**\n     * Fallback: function that releases locked tokens within schedule. Send an empty transaction to this\n     * smart contract for withdrawalAddress to receive tokens.\n     */\n    function () external {\n        withdrawTokens();\n    }\n\n    /**\n     * Vesting initialization function. Contract deployer has to trigger this function after vesting amount\n     * was sent to this smart contract.\n     * @param account Account to initialize vesting for.\n     */\n    function initializeVestingFor (address account) external deployerOnly whenNotInitialized {\n        initialTokensBalance = dreamToken.balanceOf(this);\n        require(initialTokensBalance != 0);\n        withdrawalAddress = account;\n        vestingRules();\n    }\n\n    /**\n     * Calculate tokens amount that is sent to withdrawalAddress.\n     * @return Amount of tokens that can be sent.\n     */\n    function getAvailableTokensToWithdraw () public view returns (uint256) {\n        uint256 tokensUnlockedPercentage = getTokensUnlockedPercentage();\n        // withdrawalAddress will only be able to get all additional tokens sent to this smart contract\n        // at the end of the vesting period\n        if (tokensUnlockedPercentage >= 100) {\n            return dreamToken.balanceOf(this);\n        } else {\n            return getTokensAmountAllowedToWithdraw(tokensUnlockedPercentage);\n        }\n    }\n\n    /**\n     * Setup array with vesting stages dates and percentages.\n     */\n    function vestingRules () internal {\n\n        stages[0].date = 1545696000; // December 25, 2018\n        stages[1].date = 1561852800; // June 30, 2018\n\n        stages[0].tokensUnlockedPercentage = 50;\n        stages[1].tokensUnlockedPercentage = 100;\n\n    }\n\n    /**\n     * Function for tokens withdrawal from the vesting smart contract. Triggered from the fallback function.\n     */\n    function withdrawTokens () private whenInitialized {\n        uint256 tokensToSend = getAvailableTokensToWithdraw();\n        sendTokens(tokensToSend);\n        if (dreamToken.balanceOf(this) == 0) { // When all tokens were sent, destroy this smart contract\n            selfdestruct(withdrawalAddress);\n        }\n    }\n\n    /**\n     * Send tokens to withdrawalAddress.\n     * @param tokensToSend Amount of tokens will be sent.\n     */\n    function sendTokens (uint256 tokensToSend) private {\n        if (tokensToSend == 0) {\n            return;\n        }\n        tokensSent = tokensSent.add(tokensToSend); // Update tokensSent variable to send correct amount later\n        dreamToken.transfer(withdrawalAddress, tokensToSend); // Send allowed number of tokens\n        emit Withdraw(tokensToSend, now); // Emitting a notification that tokens were withdrawn\n    }\n\n    /**\n     * Calculate tokens available for withdrawal.\n     * @param tokensUnlockedPercentage Percent of tokens that are allowed to be sent.\n     * @return Amount of tokens that can be sent according to provided percentage.\n     */\n    function getTokensAmountAllowedToWithdraw (uint256 tokensUnlockedPercentage) private view returns (uint256) {\n        uint256 totalTokensAllowedToWithdraw = initialTokensBalance.mul(tokensUnlockedPercentage).div(100);\n        uint256 unsentTokensAmount = totalTokensAllowedToWithdraw.sub(tokensSent);\n        return unsentTokensAmount;\n    }\n\n    /**\n     * Get tokens unlocked percentage on current stage.\n     * @return Percent of tokens allowed to be sent.\n     */\n    function getTokensUnlockedPercentage () private view returns (uint256) {\n\n        uint256 allowedPercent;\n\n        for (uint8 i = 0; i < stages.length; i++) {\n            if (now >= stages[i].date) {\n                allowedPercent = stages[i].tokensUnlockedPercentage;\n            }\n        }\n\n        return allowedPercent;\n\n    }\n\n}",
  "bytecode": "608060405260018054600160a060020a031916905534801561002057600080fd5b5060405160208061074a833981016040525160008054600160a060020a03909216600160a060020a031992831617905560088054909116331790556106e08061006a6000396000f30060806040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663045e240f81146100a45780631f130761146100cb5780633c72f070146100e057806341c1f5b4146100f5578063420b5fe014610126578063845ddcb214610147578063d5f3948814610178578063f2bcd0221461018d575b34801561009957600080fd5b506100a26101a2565b005b3480156100b057600080fd5b506100b9610279565b60408051918252519081900360200190f35b3480156100d757600080fd5b506100b9610338565b3480156100ec57600080fd5b506100b961033e565b34801561010157600080fd5b5061010a610344565b60408051600160a060020a039092168252519081900360200190f35b34801561013257600080fd5b506100a2600160a060020a0360043516610353565b34801561015357600080fd5b5061015f600435610453565b6040805192835260208301919091528051918290030190f35b34801561018457600080fd5b5061010a610471565b34801561019957600080fd5b5061010a610480565b600154600090600160a060020a031615156101bc57600080fd5b6101c4610279565b90506101cf8161048f565b60008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b15801561023657600080fd5b505af115801561024a573d6000803e3d6000fd5b505050506040513d602081101561026057600080fd5b5051151561027657600154600160a060020a0316ff5b50565b60008061028461058f565b9050606481106103285760008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b1580156102f557600080fd5b505af1158015610309573d6000803e3d6000fd5b505050506040513d602081101561031f57600080fd5b50519150610334565b610331816105e2565b91505b5090565b60075481565b60065481565b600054600160a060020a031681565b600854600160a060020a0316331461036a57600080fd5b600154600160a060020a03161561038057600080fd5b60008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926370a08231926024808401936020939083900390910190829087803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b505050506040513d602081101561041157600080fd5b50516006819055151561042357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905561027661062c565b60028181811061045f57fe5b60020201805460019091015490915082565b600854600160a060020a031681565b600154600160a060020a031681565b80151561049b57610276565b6007546104ae908263ffffffff61064816565b60075560008054600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018690529051919092169263a9059cbb92604480820193602093909283900390910190829087803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b505050506040513d602081101561055057600080fd5b50506040805182815242602082015281517f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8929181900390910190a150565b600080805b60028160ff1610156105dc57600260ff82168181106105af57fe5b600202015442106105d457600260ff82168181106105c957fe5b600202016001015491505b600101610594565b50919050565b600080600061060d60646106018660065461065e90919063ffffffff16565b9063ffffffff61068a16565b91506106246007548361069f90919063ffffffff16565b949350505050565b635c217300600255635d17fb8060045560326003556064600555565b8181018281101561065857600080fd5b92915050565b600082151561066f57506000610658565b5081810281838281151561067f57fe5b041461065857600080fd5b6000818381151561069757fe5b049392505050565b6000828211156106ae57600080fd5b509003905600a165627a7a72305820629fa0800c7494d236f8a1e40a4a185a8f3dd55d1b4ff36ddf4e357277fca8c5002900000000000000000000000082f4ded9cec9b5750fbff5c2185aee35afc16587",
  "constructorArguments": "00000000000000000000000082f4ded9cec9b5750fbff5c2185aee35afc16587"
}