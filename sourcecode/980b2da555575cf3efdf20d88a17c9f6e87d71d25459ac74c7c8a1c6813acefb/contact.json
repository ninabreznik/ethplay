{
  "address": "0x39173925e7c7a07dc7a6afbf1dffd0179de18c27",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ExperimentalPreICO",
  "compilerVersion": "v0.4.13+commit.fb4cb1a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-30\n*/\n\npragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n/**\n * @title Contracts that should not own Contracts\n * @author Remco Bloemen <[email protected]π.com>\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n * of this contract to reclaim ownership of the contracts.\n */\ncontract HasNoContracts is Ownable {\n\n  /**\n   * @dev Reclaim ownership of Ownable contracts\n   * @param contractAddr The address of the Ownable to be reclaimed.\n   */\n  function reclaimContract(address contractAddr) external onlyOwner {\n    Ownable contractInst = Ownable(contractAddr);\n    contractInst.transferOwnership(owner);\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Contracts that should not own Tokens\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n * owner to reclaim the tokens.\n */\ncontract reclaimTokens is Ownable {\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param tokenAddr address The address of the token contract\n   */\n  function reclaimToken(address tokenAddr) external onlyOwner {\n    ERC20Basic tokenInst = ERC20Basic(tokenAddr);\n    uint256 balance = tokenInst.balanceOf(this);\n    tokenInst.transfer(owner, balance);\n  }\n}\n\ncontract ExperimentalPreICO is reclaimTokens, HasNoContracts {\n  using SafeMath for uint256;\n\n  address public beneficiary;\n  bool public fundingGoalReached = false;\n  bool public crowdsaleClosed = false;\n  ERC20Basic public rewardToken;\n  uint256 public fundingGoal;\n  uint256 public fundingCap;\n  uint256 public paymentMin;\n  uint256 public paymentMax;\n  uint256 public amountRaised;\n  uint256 public rate;\n\n  mapping(address => uint256) public balanceOf;\n  mapping(address => bool) public whitelistedAddresses;\n  event GoalReached(address beneficiaryAddress, uint256 amount);\n  event FundTransfer(address backer, uint256 amount, bool isContribution);\n\n  /**\n   * @dev data structure to hold information about campaign contributors\n   */\n  function ExperimentalPreICO(address _wallet,\n                              uint256 _goalInEthers,\n                              uint256 _capInEthers,\n                              uint256 _minPaymentInEthers,\n                              uint256 _maxPaymentInEthers,\n                              uint256 _rate,\n                              address _rewardToken) {\n    require(_goalInEthers > 0);\n    require(_capInEthers >= _goalInEthers);\n    require(_minPaymentInEthers > 0);\n    require(_maxPaymentInEthers > _minPaymentInEthers);\n    require(_rate > 0);\n    require(_wallet != 0x0);\n    beneficiary = _wallet;\n    fundingGoal = _goalInEthers.mul(1 ether);\n    fundingCap = _capInEthers.mul(1 ether);\n    paymentMin = _minPaymentInEthers.mul(1 ether);\n    paymentMax = _maxPaymentInEthers.mul(1 ether);\n    rate = _rate;\n    rewardToken = ERC20Basic(_rewardToken);\n  }\n\n  /**\n   * @dev The default function that is called whenever anyone sends funds to the contract\n   */\n  function () external payable crowdsaleActive {\n    require(validPurchase());\n\n    uint256 amount = msg.value;\n    balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\n    amountRaised = amountRaised.add(amount);\n    rewardToken.transfer(msg.sender, amount.mul(rate));\n    FundTransfer(msg.sender, amount, true);\n  }\n\n  /**\n   * @dev Throws if called when crowdsale is still open.\n   */\n  modifier crowdsaleEnded() {\n    require(crowdsaleClosed == true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called when crowdsale has closed.\n   */\n  modifier crowdsaleActive() {\n    require(crowdsaleClosed == false);\n    _;\n  }\n\n  /**\n   * @dev return true if the transaction can buy tokens\n   */\n  function validPurchase() internal returns (bool) {\n    bool whitelisted = whitelistedAddresses[msg.sender] == true;\n    bool validAmmount = msg.value >= paymentMin && msg.value <= paymentMax;\n    bool availableFunding = fundingCap >= amountRaised.add(msg.value);\n    return whitelisted && validAmmount && availableFunding;\n  }\n\n  /**\n   * @dev checks if the goal has been reached\n   */\n  function checkGoal() external onlyOwner {\n    if (amountRaised >= fundingGoal){\n      fundingGoalReached = true;\n      GoalReached(beneficiary, amountRaised);\n    }\n  }\n\n  /**\n   * @dev ends or resumes the crowdsale\n   */\n  function endCrowdsale() external onlyOwner {\n    crowdsaleClosed = true;\n  }\n\n  /**\n   * @dev Allows backers to withdraw their funds in the crowdsale was unsuccessful,\n   * and allow the owner to send the amount raised to the beneficiary\n   */\n  function safeWithdrawal() external crowdsaleEnded {\n    if (!fundingGoalReached) {\n      uint256 amount = balanceOf[msg.sender];\n      balanceOf[msg.sender] = 0;\n      if (amount > 0) {\n        if (msg.sender.send(amount)) {\n          FundTransfer(msg.sender, amount, false);\n        } else {\n          balanceOf[msg.sender] = amount;\n        }\n      }\n    }\n\n    if (fundingGoalReached && owner == msg.sender) {\n      if (beneficiary.send(amountRaised)) {\n        FundTransfer(beneficiary, amountRaised, false);\n      } else {\n        //If we fail to send the funds to beneficiary, unlock funders balance\n        fundingGoalReached = false;\n      }\n    }\n  }\n\n  /**\n   * @dev Whitelists a list of addresses\n   */\n  function whitelistAddress (address[] addresses) external onlyOwner crowdsaleActive {\n    for (uint i = 0; i < addresses.length; i++) {\n      whitelistedAddresses[addresses[i]] = true;\n    }\n  }\n\n}",
  "bytecode": "60606040526001805460a060020a61ffff021916905534156200002157600080fd5b60405160e08062000e3f833981016040528080519190602001805191906020018051919060200180519190602001805191906020018051919060200180519150505b5b60008054600160a060020a03191633600160a060020a03161790555b600086116200008e57600080fd5b858510156200009c57600080fd5b60008411620000aa57600080fd5b838311620000b757600080fd5b60008211620000c557600080fd5b600160a060020a0387161515620000db57600080fd5b60018054600160a060020a031916600160a060020a0389161790556200011886670de0b6b3a7640000640100000000620001b88102620005de1704565b6003556200013d85670de0b6b3a7640000640100000000620005de620001b882021704565b6004556200016284670de0b6b3a7640000640100000000620005de620001b882021704565b6005556200018783670de0b6b3a7640000640100000000620005de620001b882021704565b600655600882905560028054600160a060020a031916600160a060020a0383161790555b50505050505050620001ea565b6000828202831580620001d65750828482811515620001d357fe5b04145b1515620001df57fe5b8091505b5092915050565b610c4580620001fa6000396000f300606060405236156100f65763ffffffff60e060020a60003504166306c933d8811461027057806317ffc320146102a35780632095f2d4146102c45780632aed7f3f146102d95780632c4e722e146102fa57806338af3eed1461031f5780634c4870c61461034e5780636a4509f01461036357806370a08231146103885780637674cee3146103b95780637a3a0e84146103de5780637b3e5e7b146104035780638da5cb5b14610428578063b31d61b014610457578063ccb07cef14610477578063d424f6281461049e578063e3b2594f146104c5578063f2fde38b146104ea578063f7c618c11461050b578063fd6b7ef81461053a575b61026e5b60015460009060a860020a900460ff161561011457600080fd5b61011c61054f565b151561012757600080fd5b50600160a060020a0333166000908152600960205260409020543490610153908263ffffffff6105c416565b600160a060020a03331660009081526009602052604090205560075461017f908263ffffffff6105c416565b600755600254600854600160a060020a039091169063a9059cbb9033906101ad90859063ffffffff6105de16565b60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156101f957600080fd5b6102c65a03f1151561020a57600080fd5b50505060405180519050507fe842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf633826001604051600160a060020a039093168352602083019190915215156040808301919091526060909101905180910390a15b5b50565b005b341561027b57600080fd5b61028f600160a060020a036004351661060d565b604051901515815260200160405180910390f35b34156102ae57600080fd5b61026e600160a060020a0360043516610622565b005b34156102cf57600080fd5b61026e61073d565b005b34156102e457600080fd5b61026e600160a060020a0360043516610781565b005b341561030557600080fd5b61030d61080e565b60405190815260200160405180910390f35b341561032a57600080fd5b610332610814565b604051600160a060020a03909116815260200160405180910390f35b341561035957600080fd5b61026e610823565b005b341561036e57600080fd5b61030d6108c4565b60405190815260200160405180910390f35b341561039357600080fd5b61030d600160a060020a03600435166108ca565b60405190815260200160405180910390f35b34156103c457600080fd5b61030d6108dc565b60405190815260200160405180910390f35b34156103e957600080fd5b61030d6108e2565b60405190815260200160405180910390f35b341561040e57600080fd5b61030d6108e8565b60405190815260200160405180910390f35b341561043357600080fd5b6103326108ee565b604051600160a060020a03909116815260200160405180910390f35b341561046257600080fd5b61026e60048035602481019101356108fd565b005b341561048257600080fd5b61028f6109a6565b604051901515815260200160405180910390f35b34156104a957600080fd5b61028f6109b6565b604051901515815260200160405180910390f35b34156104d057600080fd5b61030d6109c6565b60405190815260200160405180910390f35b34156104f557600080fd5b61026e600160a060020a03600435166109cc565b005b341561051657600080fd5b610332610a24565b604051600160a060020a03909116815260200160405180910390f35b341561054557600080fd5b61026e610a33565b005b600160a060020a0333166000908152600a602052604081205460055460ff90911615156001149082908190341080159061058b57506006543411155b6007549092506105a1903463ffffffff6105c416565b600454101590508280156105b25750815b80156105bb5750805b93505b50505090565b6000828201838110156105d357fe5b8091505b5092915050565b60008282028315806105fa57508284828115156105f757fe5b04145b15156105d357fe5b8091505b5092915050565b600a6020526000908152604090205460ff1681565b60008054819033600160a060020a0390811691161461064057600080fd5b82915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561069a57600080fd5b6102c65a03f115156106ab57600080fd5b505050604051805160008054919350600160a060020a03808616935063a9059cbb92169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561071b57600080fd5b6102c65a03f1151561072c57600080fd5b505050604051805150505b5b505050565b60005433600160a060020a0390811691161461075857600080fd5b6001805475ff000000000000000000000000000000000000000000191660a860020a1790555b5b565b6000805433600160a060020a0390811691161461079d57600080fd5b506000548190600160a060020a038083169163f2fde38b911660405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156107f457600080fd5b6102c65a03f1151561080557600080fd5b5050505b5b5050565b60085481565b600154600160a060020a031681565b60005433600160a060020a0390811691161461083e57600080fd5b6003546007541061077e576001805474ff0000000000000000000000000000000000000000191660a060020a17908190556007547fec3f991caf7857d61663fd1bba1739e04abd4781238508cde554bb849d790c8591600160a060020a031690604051600160a060020a03909216825260208201526040908101905180910390a15b5b5b565b60065481565b60096020526000908152604090205481565b60055481565b60035481565b60075481565b600054600160a060020a031681565b6000805433600160a060020a0390811691161461091957600080fd5b60015460a860020a900460ff161561093057600080fd5b5060005b81811015610737576001600a600085858581811061094e57fe5b90506020020135600160a060020a0316600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600101610934565b5b5b5b505050565b60015460a860020a900460ff1681565b60015460a060020a900460ff1681565b60045481565b60005433600160a060020a039081169116146109e757600080fd5b600160a060020a0381161561026a576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600254600160a060020a031681565b6001805460009160a860020a90910460ff16151514610a5157600080fd5b60015460a060020a900460ff161515610b2b5750600160a060020a033316600090815260096020526040812080549082905590811115610b2b57600160a060020a03331681156108fc0282604051600060405180830381858888f1935050505015610b0f577fe842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf633826000604051600160a060020a039093168352602083019190915215156040808301919091526060909101905180910390a1610b2b565b600160a060020a03331660009081526009602052604090208190555b5b5b60015460a060020a900460ff168015610b54575060005433600160a060020a039081169116145b1561026a57600154600754600160a060020a039091169080156108fc0290604051600060405180830381858888f1935050505015610bf4576001546007547fe842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf691600160a060020a0316906000604051600160a060020a039093168352602083019190915215156040808301919091526060909101905180910390a161026a565b6001805474ff0000000000000000000000000000000000000000191690555b5b5b5b505600a165627a7a72305820f021610d0014bc985e37b481298f4b75f096b56a5322b4caffe858c71e88b08f0029000000000000000000000000352044056717c2ac541258c8f94c194185b8ece1000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000004805f9568bca23bef099c2a317346b42146384a1",
  "constructorArguments": "000000000000000000000000352044056717c2ac541258c8f94c194185b8ece1000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000003e80000000000000000000000004805f9568bca23bef099c2a317346b42146384a1"
}