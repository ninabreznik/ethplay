{
  "address": "0xDC6f40c9Bb2d48889537b2C7407d3A30471539B2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "slave",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-10\n*/\n\npragma solidity ^0.4.25;\n\n\n\n\n\n  \n\ncontract owned {\n    address public master_address;\n    address public mayor;\n    address public contract_owner; \n    \n \n    constructor() public{\n        \n        master_address = 0x0ac10bf0342fa2724e93d250751186ba5b659303; \n        mayor = msg.sender;\n        contract_owner = msg.sender;\n    }  \n    modifier onlyMaster{ \n        require(msg.sender == master_address);\n        _;\n    }  \n \n    modifier onlyowner{\n        require(msg.sender == contract_owner);\n        _;\n    }\n\n    function transferMastership(address new_master) public onlyowner {\n        master_address = new_master;\n    }\n\n    function transferMayorship(address new_mayor) public onlyMaster {\n        mayor = new_mayor;\n    } \n    \n    \n    \n    \n}\n\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\ninterface IERC721Receiver {\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\n}\n\ncontract ERC165 is IERC165 {\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n \n\ninterface ERC20_interface {\n  function balanceOf(address who) external view returns (uint256);\n  function transfer(address to, uint256 value) external returns(bool);\n}\n\n interface treasure{\n     function callTreasureMin(uint8 index, address target, uint mintedAmount) external;\n     function callTreasureBurn(uint8 index, address target, uint burnedAmount) external;\n }\n\n\n\ncontract ERC20 {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns(bool);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) { \n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\nlibrary SafeMath{\n\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n        return c;\n    }\n\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n }\n \n library SafeMath8{\n     function add(uint8 a, uint8 b) internal pure returns (uint8) {\n        uint8 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b <= a);\n        uint8 c = a - b;\n        return c;\n    }\n\n }\n \n library SafeMath16{\n     function add(uint16 a, uint16 b) internal pure returns (uint16) {\n        uint16 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\n        require(b <= a);\n        uint16 c = a - b;\n        return c;\n    }\n\n     function mul(uint16 a, uint16 b) internal pure returns (uint16) {\n        if (a == 0) {\n            return 0;\n        }\n        uint16 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\n        require(b > 0);\n        uint16 c = a / b;\n        return c;\n    }\n }\n\n\ncontract ERC721{\n\n     event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n     event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n     event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n     function balanceOf(address _owner) public view returns (uint256);\n     function ownerOf(uint256 _tokenId) public view returns (address);\n     function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) public payable;\n     function safeTransferFrom(address _from, address _to, uint256 _tokenId) public payable;\n     function transferFrom(address _from, address _to, uint256 _tokenId) public payable;\n     function approve(address _approved, uint256 _tokenId) external payable;\n     function setApprovalForAll(address _operator, bool _approved) external;\n     function getApproved(uint256 _tokenId) public view returns (address);\n     function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n }\n\ncontract external_function{\n    function inquire_totdomains_amount() public view returns(uint16);\n    \n    \n\n    function inquire_domain_level_star(uint16 _id) public view returns(uint8, uint8);\n    function inquire_domain_building(uint16 _id, uint8 _index) public view returns(uint8);\n    function inquire_domain_attribute(uint16 _id, uint8 _index) public view returns(uint8);\n    function inquire_tot_domain_attribute(uint16 _id) public view returns(uint8[5]);\n    function inquire_domain_cooltime(uint16 _id) public view returns(uint);\n    function inquire_mayor_cooltime() public view returns(uint);\n    function inquire_mayor_address() public view returns(address);\n    function inquire_own_domain(address _sender) public view returns(uint16[]);\n    \n    function inquire_land_info(uint16  _city_number, uint16 _id) public pure returns(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8);\n    function inquire_building_limit(uint8 _building) public view returns(uint8);\n  \n    function domain_build(uint16 _id,  uint8 _building) external;\n    function reconstruction(uint16 _id, uint8 _index, uint8 _building)external;\n    function set_domian_attribute(uint16 _id, uint8 _index) external;\n    function domain_all_reward(uint8 _class, address _user) external;\n    function mayor_reward(address _user)external;\n    \n\n    function domain_reward(uint8 _class, address _user, uint16 _id) external;\n    function transfer_master(address _to, uint16 _id) public;\n    function retrieve_domain(uint16 _id) external;\n    function set_domain_cooltime(uint cooltime) external;\n}\n\ninterface master{\n    function inquire_location(address _address) external view returns(uint16, uint16);\n}\n\ninterface trade{\n    function set_city_box_amount(uint16 _city, uint8 _index, uint _amount ) external;\n}\n\n\n\ncontract slave is ERC165, ERC721, external_function, owned{\n    \n    event openBoxAmount(address indexed target, uint8 boxIndex, uint boxAmount); \n\n    constructor() public{\n        \n        _registerInterface(_InterfaceId_ERC721);\n        \n        random_seed = uint((keccak256(abi.encodePacked(now))));\n     \n    }    \n            \n    \n      \n    address public treasure_contract = 0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6; \n    address public arina_contract = 0xe6987cd613dfda0995a95b3e6acbabececd41376;\n    address trade_address = 0x167ee8dDfd7045090CDf8FF38864c6744Ef952d9;\n    \n       \n    uint8 public area_number = 6;  \n    uint8 public building_number = 20;\n    uint16 public city_number = 6; \n                 \n    uint random_seed;         \n    uint mayorCooltime;    \n                         \n              \n    string name = \"land6\";   \n    string symbol = \"land6\"; \n   \n    using SafeMath for uint256; \n    using SafeMath16 for uint16;\n    using SafeMath8 for uint8; \n    using Address for address;\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n\n\n    \n    mapping (address => uint256) private owned_domain_amount;\n\n    mapping (address => uint16[]) public owned_domain_id;\n\n    \n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n    mapping (uint8 => uint8) same_building_limit;\n\n    struct domain{\n        address owner; \n        address backup; \n \n        uint8 star; \n        uint8 level; \n        uint8[] building; \n        uint cooltime; \n        \n        address approvals; \n        \n        uint8[5] attribute; \n        \n    }\n\n \n    uint public every_cooltime = 86400;\n\n \n    uint8 public building_amount = 4; \n    uint8 public building_type_amount = 20; \n    \n \n\n    uint8 level_limit = 100; \n    uint8 star_limit = 5; \n\n    uint8 public domains_amount = 100; \n\n    domain[100] public citys; \n\n\n    function set_treasure_contract(address _treasure_contract) public onlyowner{\n        treasure_contract = _treasure_contract;\n    }\n\n    function set_arina_contract(address _arina_contract) public onlyowner{\n        arina_contract = _arina_contract;\n    }\n\n    function set_building_amount(uint8 _building_amount) public onlyowner{\n        building_amount = _building_amount;\n    }\n\n    function set_building_type_amount(uint8 _building_type_amount) public onlyowner{\n        building_type_amount = _building_type_amount;\n    }\n\n    function set_level_limit(uint8 _level_limit) public onlyowner{\n        level_limit = _level_limit;\n    }\n\n    function set_star_limit(uint8 _star_limit) public onlyowner{\n        star_limit = _star_limit;\n    }\n\n    function set_city_number(uint8 _city_number) public onlyowner{\n        city_number = _city_number;\n    }\n\n    function set_area_number(uint8 _area_number) public onlyowner{\n        area_number = _area_number;\n    }\n     \n    function set_trade_address(address _trade_address) public onlyowner{ \n       trade_address = _trade_address;\n    } \n    \n\n    function withdraw_all_ETH() public onlyowner{\n        contract_owner.transfer(address(this).balance);\n    }\n\n    \n    \n    \n    \n\n    function withdraw_ETH(uint _eth_wei) public onlyowner{\n        contract_owner.transfer(_eth_wei);\n    }\n\n    \n    \n    \n\n\n\n    \n    function inquire_own_domain(address _sender) public view returns(uint16[]){\n        uint16[] memory _own_domains = new uint16[](citys.length);\n\n        uint16 counter = 0;\n        for (uint16 i = 0; i < citys.length; i++) {\n\n            if (citys[i].owner == _sender) {\n                _own_domains[counter] = i;\n                counter = counter.add(1);\n            }\n        }\n\n        uint16[] memory own_domains = new uint16[](counter);\n\n        for (uint16 j = 0; j < counter; j++) {\n            own_domains[j] = _own_domains[j];\n        }\n\n        return own_domains;\n    }\n\n    function inquire_domain_level(uint16 _id) public view returns(uint8){\n        if(citys[_id].level <= level_limit){\n            return citys[_id].level;\n        }\n        else\n            return 0;\n    }\n\n    function inquire_domain_star(uint16 _id) public view returns(uint8){\n        return citys[_id].star;\n    }\n    \n\n    function inquire_domain_level_star(uint16 _id) public view returns(uint8, uint8){\n        uint8 _level;\n        if(citys[_id].level <= level_limit){\n            _level = citys[_id].level;\n        }\n        else {\n            _level = 0 ;\n        }\n        return (_level, citys[_id].star);\n    }\n\n    function inquire_domain_building(uint16 _id, uint8 _index) public view returns(uint8){\n        return citys[_id].building[_index];\n    }\n\n\n    function inquire_tot_domain_building(uint16 _id) public view returns(uint8[]){\n        return citys[_id].building;\n    }\n\n    function inquire_domain_cooltime(uint16 _id) public view returns(uint){\n        return citys[_id].cooltime;\n    } \n    \n    function inquire_mayor_address() public view returns(address){\n        return mayor;\n    }\n    \n    function inquire_mayor_cooltime() public view returns(uint){\n        return mayorCooltime;\n    }\n \n\n    function inquire_totdomains_amount() public view returns(uint16){\n      return uint16(citys.length);\n    }\n    \n    function inquire_domain_attribute(uint16 _id, uint8 _index) public view returns(uint8){\n        return citys[_id].attribute[_index];\n    }\n    \n    function inquire_tot_domain_attribute(uint16 _id) public view returns(uint8[5]){\n        return citys[_id].attribute;\n    }\n    \n    function inquire_building_limit(uint8 _building) public view returns(uint8){\n        return same_building_limit[_building];\n    }\n    \n  \n\n\n\n    function() payable public{\n    }\n\n    function domain_build(uint16 _id,  uint8 _building) external onlyMaster{\n        require(citys[_id].building.length < building_amount,\"不能超出可建設區塊數\");\n        \n        require(_building != 0, \"不能蓋空地\");\n        require(_building <= building_type_amount,\"不能超出可建設種類\"); \n        \n        if(isBuilded(_id,_building)){\n \n            if(_building == 14){\n                require(same_building_limit[14] < building_number);\n                same_building_limit[14] = same_building_limit[14].add(1);\n            }else if(_building == 15){\n                require(same_building_limit[15] < building_number);\n                same_building_limit[15] = same_building_limit[15].add(1);\n            }else if(_building == 17){\n                require(same_building_limit[17] < building_number);\n                same_building_limit[17] = same_building_limit[17].add(1);\n            }   \n                \n            citys[_id].building.push(_building);\n        }\n\n        if(citys[_id].star < star_limit){ \n            citys[_id].star = citys[_id].star.add(1);\n        }\n    }\n\n    function reconstruction(uint16 _id, uint8 _index, uint8 _building)\n    external onlyMaster{\n\n        require(_index < building_amount); \n        require(_building != 0); \n        require(_building <= building_type_amount); \n\n        require(citys[_id].building[_index] != 0); \n        uint8 old_building = citys[_id].building[_index];\n        if(isBuilded(_id,_building)){\n            \n             \n             \n            if(_building == 14){\n                require(same_building_limit[14] < building_number);\n                same_building_limit[14] = same_building_limit[14].add(1);\n            }else if(_building == 15){\n                require(same_building_limit[15] < building_number);\n                same_building_limit[15] = same_building_limit[15].add(1);\n            }else if(_building == 17){\n                require(same_building_limit[17] < building_number);\n                same_building_limit[17] = same_building_limit[17].add(1);\n            } \n            \n            citys[_id].building[_index] = _building;\n            \n            if(old_building == 14){\n                same_building_limit[14] = same_building_limit[14].sub(1);\n            }else if(old_building == 15){\n                same_building_limit[15] = same_building_limit[15].sub(1);\n            }else if(old_building == 17){\n                same_building_limit[17] = same_building_limit[17].sub(1);\n            }\n         \n        }\n \n    }\n    \n    function set_domian_attribute(uint16 _id, uint8 _index) external onlyMaster{  \n         \n        uint8 produce;\n         \n        if(_index == 0){\n            (produce,,,,,,,,,) =inquire_land_info(city_number,_id);\n             \n        }else if(_index == 1){ \n            (,produce,,,,,,,,) =inquire_land_info(city_number,_id);\n        }else if(_index == 2){\n            (,,produce,,,,,,,) =inquire_land_info(city_number,_id);\n        }else if(_index == 3){\n            (,,,produce,,,,,,) =inquire_land_info(city_number,_id);\n        }else{\n            (,,,,produce,,,,,) =inquire_land_info(city_number,_id);\n        } \n        \n        require((citys[_id].attribute[_index] + produce) < 10);\n         \n          \n        citys[_id].attribute[_index] = citys[_id].attribute[_index].add(1);\n    }\n    \n    function isBuilded(uint16 _id,  uint8 _building) public view returns(bool){ \n        \n        uint8 produce01;\n        uint8 produce02;\n        uint8 produce03; \n        uint8 produce04;\n        uint8 produce05;\n        uint8 produce07;\n        uint8 produce08;\n        uint8 produce09;\n        \n        (produce01,produce02,produce03,produce04,produce05,,produce07,produce08,produce09,) = inquire_land_info(city_number,_id);\n        \n        produce01 = produce01.add(citys[_id].attribute[0]); \n        produce02 = produce02.add(citys[_id].attribute[1]);\n        produce03 = produce03.add(citys[_id].attribute[2]);\n        produce04 = produce04.add(citys[_id].attribute[3]);\n        produce05 = produce05.add(citys[_id].attribute[4]);\n\n  \n        if(_building == 1){\n            require(produce01 > 6 && produce09 > 4 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true;\n        }else if(_building == 2){\n            require(produce02 > 6 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true;\n        }else if(_building == 3 ){\n           require(produce05 > 6 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n           return true;\n        }else if(_building == 4 ){\n            require(produce07 > 7 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true;\n        }else if(_building == 5 || _building == 7){\n            require(produce08 < 3 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true; \n        }else if(_building == 6 ){\n            require(produce07 > 3 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true;\n        }else if(_building == 8 ){\n            require(produce08 > 7 && produce09 > 4 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true;\n        }else if(_building == 9 ){\n            require(produce01 > 4 && produce09 > 4 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true;\n        }else if(_building == 10 ){\n            require(produce03 > 6 && produce07 < 3 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true;\n        }else if(_building == 11 ){\n            require(produce04 > 6 && produce03 < 3 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true;\n        }else if(_building == 15 || _building == 16 || _building == 18){\n            require(produce07 > 7 && produce08 > 7 && checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true;\n        }else{\n            require(checkBuild(_id,_building),\"土地特性需求不滿足條件\");\n            return true;\n        }\n    }\n    \n    function checkBuild(uint16 _id,  uint8 _building) public view returns(bool){     \n        bool same = true;                                                            \n         for(uint m=0;m<citys[_id].building.length;m++){\n            if(citys[_id].building[m] == _building){\n                same = false;                                                        \n                return same;\n            }   \n        }\n        return same;\n    }\n        \n\n\n    function domain_reward(uint8 _class, address _user, uint16 _id) external onlyMaster{\n        \n        uint8 star = inquire_domain_star(_id);\n        uint8 treasure_level = _treasure_level(star,_id);\n       \n        \n        uint amount = 1;\n        uint8 index = _class*5+treasure_level-1;\n        \n        if(citys[_id].owner == _user){                                          \n            require(citys[_id].cooltime <= now);\n            treasure(treasure_contract).callTreasureMin(index, _user , amount);\n            citys[_id].cooltime = now.add(every_cooltime);\n            emit openBoxAmount(_user,index,amount);\n        }else{                                                                  \n            for(uint n=0;n<citys[_id].building.length;n++){\n                if(_class == 0 && citys[_id].building[n] == 1){\n                    amount++;\n                    break;\n                }else if(_class == 1 && citys[_id].building[n] == 2){\n                    amount++;\n                    break;\n                }else if(_class == 2 && citys[_id].building[n] == 10){\n                    amount++;\n                    break;\n                }else if(_class == 3 && citys[_id].building[n] == 11){\n                    amount++;\n                    break;\n                }else if(_class == 4 && citys[_id].building[n] == 3){\n                    amount++;\n                    break;\n                }\n            } \n            \n            \n            if(amount==2){        \n                treasure(treasure_contract).callTreasureMin(index, _user , amount);\n                treasure(treasure_contract).callTreasureMin(index, citys[_id].owner , 1);\n                emit openBoxAmount(_user,index,amount); \n                 \n            }else{\n                treasure(treasure_contract).callTreasureMin(index, _user , amount);\n                emit openBoxAmount(_user,index,amount);  \n            }\n\n        }\n\n    }\n  \n    \n    function domain_all_reward(uint8 _class, address _user) external onlyMaster{\n        uint16[] memory domains ;\n        domains = inquire_own_domain(_user);            \n        \n        uint[] memory amounts = new uint[](5);  \n        uint8[] memory boxIndex = new uint8[](5);\n        uint8 star;\n        uint8 treasure_level;\n        uint8 index;\n        uint8 newIndex;\n        \n      \n        if(domains.length!=0){\n            for(uint16 i = 0 ; i<domains.length;i++){\n                 if(citys[domains[i]].owner == _user && citys[domains[i]].cooltime <= now){\n                    \n                    star = inquire_domain_star(domains[i]);\n                    treasure_level = _treasure_level(star,domains[i]);\n                    \n                    index = _class*5+treasure_level-1; \n                    newIndex = index - (_class*5);\n                    boxIndex[newIndex]=index;\n                    amounts[newIndex] = amounts[newIndex].add(1);\n                 \n                    citys[domains[i]].cooltime = now.add(every_cooltime);\n                     \n                 }\n            }\n            \n            for(uint8 m = 0 ; m < amounts.length; m++ ){\n                if(amounts[m]!=0){\n                     treasure(treasure_contract).callTreasureMin(boxIndex[m], _user , amounts[m]);\n                     emit openBoxAmount(_user,boxIndex[m],amounts[m]);                 \n                } \n            }\n        }\n  \n    }\n    \n    \n    \n     function mayor_reward(address _user) external onlyMaster {\n        require(_user == mayor); \n        require(mayorCooltime <= now);\n        \n        uint8 _class;\n    \n        uint[] memory amounts = new uint[](30);\n        uint8[] memory boxIndex = new uint8[](30);\n        uint8 star;\n        uint8 treasure_level;\n        uint8 index;\n        \n         \n        for(uint16 k=0 ; k < citys.length ; k++){     \n     \n              star = inquire_domain_star(k);\n              treasure_level = _treasure_level(star,k);\n              \n              _class = uint8(keccak256(abi.encodePacked(now + uint(k),blockhash(block.number-1))))%6; \n              index = _class*5+treasure_level-1;\n            \n              \n              boxIndex[index]=index;\n              amounts[index] = amounts[index].add(1);\n          \n        }\n          \n        for(uint8 m = 0 ; m < amounts.length; m++ ){\n            if(amounts[m]!=0){\n                 treasure(treasure_contract).callTreasureMin(boxIndex[m], trade_address , amounts[m]);\n                 emit openBoxAmount(_user,boxIndex[m],amounts[m]);                 \n                 trade(trade_address).set_city_box_amount(city_number, boxIndex[m], amounts[m]) ;\n            } \n        }\n\n        mayorCooltime = now.add(every_cooltime);\n        \n     }\n \n    \n    function inquire_land_info(uint16  _city_number, uint16 _id) public pure returns(uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8){\n      require(0 < _city_number);\n      \n      bytes32 _result = keccak256(abi.encodePacked(_id,_city_number));\n\n        if(_city_number<5){\n            return (uint8(_result[0] ) % 5 + 2,\n                    uint8(_result[1] ) % 5 + 1,\n                    uint8(_result[2] ) % 5,\n                    uint8(_result[3] ) % 5 + 3,\n                    uint8(_result[4] ) % 9 + 2,\n                    uint8(_result[5] ) % 8 + 1,\n                    uint8(_result[6] ) % 8 + 3,\n                    uint8(_result[7] ) % 5 + 4,\n                    uint8(_result[8] ) % 6 + 3,\n                    uint8(_result[9] ) % 7 + 2);\n        }else if(_city_number<9){\n            return (uint8(_result[0] ) % 5 + 1,\n                    uint8(_result[1] ) % 5 + 6,\n                    uint8(_result[2] ) % 6 + 1,\n                    uint8(_result[3] ) % 4 + 2,\n                    uint8(_result[4] ) % 6 ,\n                    uint8(_result[5] ) % 6,\n                    uint8(_result[6] ) % 5 + 2,\n                    uint8(_result[7] ) % 9,\n                    uint8(_result[8] ) % 5,\n                    uint8(_result[9] ) % 6 + 5);\n        }else if(_city_number<13){\n            return (uint8(_result[0] ) % 6 + 5,\n                    uint8(_result[1] ) % 4,\n                    uint8(_result[2] ) % 5 + 6,\n                    uint8(_result[3] ) % 3,\n                    uint8(_result[4] ) % 5 + 3 ,\n                    uint8(_result[5] ) % 5 + 6,\n                    uint8(_result[6] ) % 4,\n                    uint8(_result[7] ) % 11,\n                    uint8(_result[8] ) % 6 + 5,\n                    uint8(_result[9] ) % 7);\n        }else{\n            return (uint8(_result[0] ) % 3,\n                    uint8(_result[1] ) % 5 + 4,\n                    uint8(_result[2] ) % 2,\n                    uint8(_result[3] ) % 6 + 5,\n                    uint8(_result[4] ) % 7 + 2 ,\n                    uint8(_result[5] ) % 5 + 1,\n                    uint8(_result[6] ) % 4 + 7,\n                    uint8(_result[7] ) % 7,\n                    uint8(_result[8] ) % 5 + 2,\n                    uint8(_result[9] ) % 8);\n        }\n\n    }\n    \n\n    function _treasure_level(uint8 _star,uint16 _id) view private returns(uint8){\n        \n        \n        uint random = uint((keccak256(abi.encodePacked(now, random_seed.add(_id)))));\n\n        uint ItemLv2_Deno = 20;\n        uint ItemLv3_Deno = 80; \n        uint ItemLv4_Deno = 320;\n        uint ItemLv5_Deno = 1280;  \n\n        uint Item_numerator = 2**(uint(_star) - 1);\n\n\t    uint ItemLv2_Random =  (random % ItemLv2_Deno).add(1);\n    \tuint ItemLv3_Random =  (random % ItemLv3_Deno).add(1);\n    \tuint ItemLv4_Random =  (random % ItemLv4_Deno).add(1);\n    \tuint ItemLv5_Random =  (random % ItemLv5_Deno).add(1);\n\n        if(Item_numerator >= ItemLv5_Random){\n            return 5;\n        }\n        else if(Item_numerator >= ItemLv4_Random){\n            return 4;\n        }\n        else if(Item_numerator >= ItemLv3_Random){\n            return 3;\n        }\n        else if(Item_numerator >= ItemLv2_Random){\n            return 2;\n        }\n        else {\n            return 1;\n        }\n    }\n\n    \n    function transfer_master(address _to, uint16 _id) public onlyMaster{\n        require(_to != address(0));\n\n        address domain_owner = citys[_id].owner;\n\n        if (domain_owner != 0x0){\n            owned_domain_amount[domain_owner] = owned_domain_amount[domain_owner].sub(1);\n        }\n\n        if(citys[_id].star == 0){\n            citys[_id].star = citys[_id].star.add(1); \n        }\n\n        owned_domain_amount[_to] = owned_domain_amount[_to].add(1);\n        owned_domain_id[_to].push(_id);\n        citys[_id].owner = _to;\n        if(citys[_id].level < level_limit){\n            citys[_id].level = citys[_id].level.add(1);\n        }\n\n        \n    }\n\n    function retrieve_domain(uint16 _id) external onlyMaster{\n        require(msg.sender == citys[_id].backup);\n        transfer_master(contract_owner, _id);\n        emit Transfer(citys[_id].owner, contract_owner, _id);\n    }\n    \n    function set_domain_cooltime(uint _cooltime) external onlyMaster{\n        every_cooltime = _cooltime;\n    }\n     \n    function set_building_number(uint8 _building_number) public onlyMaster{\n        building_number = _building_number;\n    }\n\n\n\n    function balanceOf(address _owner) public view returns (uint256){\n        require(_owner != address(0));\n        return owned_domain_amount[_owner];\n    }\n    function ownerOf(uint256 _tokenId) public view returns (address){\n        address owner = citys[_tokenId].owner;\n        return owner;\n    }\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public payable{\n        transferFrom(_from, _to, _tokenId);\n        require(_checkOnERC721Received(_from, _to, _tokenId, _data));\n    }\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public payable{\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n    function transferFrom(address _from, address _to, uint256 _tokenId) public payable{\n        require(_isApprovedOrOwner(msg.sender, _tokenId));\n        _transferFrom(_from, _to, _tokenId);\n    }\n    function approve(address _approved, uint256 _tokenId) external payable{\n        address owner = ownerOf(_tokenId);\n        require(_approved != owner);\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        citys[_tokenId].approvals = _approved;\n        emit Approval(owner, _approved, _tokenId);\n    }\n    function setApprovalForAll(address _operator, bool _approved) external{\n        require(_operator != msg.sender);\n        _operatorApprovals[msg.sender][_operator] = _approved;\n        emit ApprovalForAll(msg.sender, _operator, _approved);\n    }\n    function getApproved(uint256 _tokenId) public view returns (address){\n        require(_exists(_tokenId));\n        return citys[_tokenId].approvals;\n    }\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool){\n        return _operatorApprovals[_owner][_operator];\n    }\n\n    function _exists(uint256 _tokenId) internal view returns (bool) {\n        address owner = citys[_tokenId].owner;\n        return owner != address(0);\n    }\n\n    function _isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n        address owner = ownerOf(_tokenId);\n        return (_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender));\n    }\n\n    function _transferFrom(address _from, address _to, uint256 _tokenId) internal {\n        require(ownerOf(_tokenId) == _from);\n        require(_to != address(0));\n\n        _clearApproval(_tokenId);\n\n        owned_domain_amount[_from] = owned_domain_amount[_from].sub(1);\n        owned_domain_amount[_to] = owned_domain_amount[_to].add(1);\n\n        citys[_tokenId].owner = _to;\n\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    function _checkOnERC721Received(address _from, address _to, uint256 _tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!_to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    function _clearApproval(uint256 _tokenId) private {\n        if (citys[_tokenId].approvals != address(0)) {\n            citys[_tokenId].approvals = address(0);\n        }\n    }\n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_trade_address\",\"type\":\"address\"}],\"name\":\"set_trade_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"domain_reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina_contract\",\"type\":\"address\"}],\"name\":\"set_arina_contract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inquire_mayor_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth_wei\",\"type\":\"uint256\"}],\"name\":\"withdraw_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"inquire_domain_attribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"building_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_building_type_amount\",\"type\":\"uint8\"}],\"name\":\"set_building_type_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"domain_all_reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inquire_totdomains_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inquire_mayor_cooltime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_level_limit\",\"type\":\"uint8\"}],\"name\":\"set_level_limit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_domain_cooltime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasure_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"every_cooltime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_area_number\",\"type\":\"uint8\"}],\"name\":\"set_area_number\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cooltime\",\"type\":\"uint256\"}],\"name\":\"set_domain_cooltime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"building_type_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"domains_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"retrieve_domain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"domain_build\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"citys\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"backup\",\"type\":\"address\"},{\"name\":\"star\",\"type\":\"uint8\"},{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"cooltime\",\"type\":\"uint256\"},{\"name\":\"approvals\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"checkBuild\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"reconstruction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_tot_domain_building\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"mayor_reward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_mayor\",\"type\":\"address\"}],\"name\":\"transferMayorship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"isBuilded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owned_domain_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_treasure_contract\",\"type\":\"address\"}],\"name\":\"set_treasure_contract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"building_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_building\",\"type\":\"uint8\"}],\"name\":\"inquire_building_limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"set_domian_attribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city_number\",\"type\":\"uint8\"}],\"name\":\"set_city_number\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_domain_level_star\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"area_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"inquire_own_domain\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_star_limit\",\"type\":\"uint8\"}],\"name\":\"set_star_limit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"city_number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_master\",\"type\":\"address\"}],\"name\":\"transferMastership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_building_number\",\"type\":\"uint8\"}],\"name\":\"set_building_number\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_building_amount\",\"type\":\"uint8\"}],\"name\":\"set_building_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_tot_domain_attribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mayor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"transfer_master\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arina_contract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_domain_level\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"inquire_domain_building\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_domain_star\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city_number\",\"type\":\"uint16\"},{\"name\":\"_id\",\"type\":\"uint16\"}],\"name\":\"inquire_land_info\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"boxAmount\",\"type\":\"uint256\"}],\"name\":\"openBoxAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]",
  "bytecode": "60048054731570158e0ad7c5b95c69abe0ce4536f522a1cde6600160a060020a0319918216179091556005805473e6987cd613dfda0995a95b3e6acbabececd413769083161781556006805473167ee8ddfd7045090cdf8ff38864c6744ef952d993169290921760a060020a60ff021916740600000000000000000000000000000000000000001760a860020a60ff02191675140000000000000000000000000000000000000000001760b060020a61ffff0219167606000000000000000000000000000000000000000000001790915560c060405260808190527f6c616e643600000000000000000000000000000000000000000000000000000060a09081526200010f916009919062000347565b506040805180820190915260058082527f6c616e643600000000000000000000000000000000000000000000000000000060209092019182526200015691600a9162000347565b5062015180600f5560108054600460ff199091161761ff0019166114001762ff00001916626400001763ff000000191663050000001764ff000000001916646400000000179055348015620001aa57600080fd5b50620001df7f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620002da810204565b60018054600160a060020a0319908116730ac10bf0342fa2724e93d250751186ba5b659303179091556002805482163390811790915560038054909216179055620002537f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620002da810204565b42604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b60208310620002a45780518252601f19909201916020918201910162000283565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060075550620003ec915050565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200030a57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200038a57805160ff1916838001178555620003ba565b82800160010185558215620003ba579182015b82811115620003ba5782518255916020019190600101906200039d565b50620003c8929150620003cc565b5090565b620003e991905b80821115620003c85760008155600101620003d3565b90565b6143af80620003fc6000396000f3006080604052600436106102d15763ffffffff60e060020a60003504166301ffc9a781146102d35780630316e0471461031e578063052c2ef41461033f578063081812fc1461036d578063095ea7b3146103a15780630a1811a1146103b85780630ce5ef8a146103d95780630db1a483146103ee5780631c10f1e614610406578063218897431461043e57806323b872dd1461045357806327b9e817146104705780632e0aa0441461048b578063301b7a86146104b25780633380d0f7146104de57806335d9776714610505578063384f58eb1461052057806339148e9c1461053557806342842e0e1461055157806348cc65771461056e5780634ac629a7146105835780635649d405146105985780635bb61b77146105ad5780636352211e146105c8578063657a3609146105e05780636ce2564c146105f857806370a082311461060d5780638000690d1461062e578063812b2c501461064357806382dac2f81461065f578063837d47d2146106815780638439721b146106dc5780638f3d1238146106fe578063941cfc8f14610726578063962928c51461079257806398c6688e146107b35780639a439907146107d45780639bbbc33d146107f65780639c2aa3d41461081a5780639c95fc301461083b578063a07e3ff014610850578063a22cb4651461086b578063a3f7b7de14610891578063a70344f7146108b3578063a817c203146108ce578063a9cd00391461090a578063abe358e21461091f578063acfe3ef414610934578063b1cd598814610955578063b436d8f614610970578063b88d4fde14610985578063c3f59687146109e7578063c4b8bc2414610a08578063c7e6390214610a23578063ce12564514610a3e578063cf7ff13314610a92578063d3f3d38714610aa7578063d561250a14610acf578063d5d7b57414610ae4578063db0f49b414610b00578063e985e9c514610b22578063eb440ff014610b49578063ec4f5f6a14610b65575b005b3480156102df57600080fd5b5061030a7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610be5565b604080519115158252519081900360200190f35b34801561032a57600080fd5b506102d1600160a060020a0360043516610c1d565b34801561034b57600080fd5b506102d160ff60043516600160a060020a036024351661ffff60443516610c56565b34801561037957600080fd5b50610385600435611268565b60408051600160a060020a039092168252519081900360200190f35b6102d1600160a060020a03600435166024356112a2565b3480156103c457600080fd5b506102d1600160a060020a036004351661136e565b3480156103e557600080fd5b506103856113a7565b3480156103fa57600080fd5b506102d16004356113b6565b34801561041257600080fd5b5061042861ffff6004351660ff6024351661140b565b6040805160ff9092168252519081900360200190f35b34801561044a57600080fd5b50610428611453565b6102d1600160a060020a0360043581169060243516604435611463565b34801561047c57600080fd5b506102d160ff60043516611488565b34801561049757600080fd5b506102d160ff60043516600160a060020a03602435166114bb565b3480156104be57600080fd5b506104c7611859565b6040805161ffff9092168252519081900360200190f35b3480156104ea57600080fd5b506104f361185e565b60408051918252519081900360200190f35b34801561051157600080fd5b506102d160ff60043516611864565b34801561052c57600080fd5b50610385611899565b34801561054157600080fd5b506104f361ffff600435166118a8565b6102d1600160a060020a03600435811690602435166044356118ca565b34801561057a57600080fd5b506103856118e6565b34801561058f57600080fd5b506102d16118f5565b3480156105a457600080fd5b506104f3611949565b3480156105b957600080fd5b506102d160ff6004351661194f565b3480156105d457600080fd5b506103856004356119a8565b3480156105ec57600080fd5b506102d16004356119cd565b34801561060457600080fd5b506104286119e9565b34801561061957600080fd5b506104f3600160a060020a03600435166119f7565b34801561063a57600080fd5b50610428611a2a565b34801561064f57600080fd5b506102d161ffff60043516611a3b565b34801561066b57600080fd5b506102d161ffff6004351660ff60243516611af1565b34801561068d57600080fd5b50610699600435611f28565b60408051600160a060020a039788168152958716602087015260ff948516868201529290931660608501526080840152921660a082015290519081900360c00190f35b3480156106e857600080fd5b5061030a61ffff6004351660ff60243516611f89565b34801561070a57600080fd5b506102d161ffff6004351660ff60243581169060443516612021565b34801561073257600080fd5b5061074261ffff60043516612492565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561077e578181015183820152602001610766565b505050509050019250505060405180910390f35b34801561079e57600080fd5b506102d1600160a060020a0360043516612520565b3480156107bf57600080fd5b506102d1600160a060020a036004351661292b565b3480156107e057600080fd5b5061030a61ffff6004351660ff60243516612964565b34801561080257600080fd5b506104c7600160a060020a0360043516602435612dd9565b34801561082657600080fd5b506102d1600160a060020a0360043516612e1f565b34801561084757600080fd5b50610428612e58565b34801561085c57600080fd5b5061042860ff60043516612e61565b34801561087757600080fd5b506102d1600160a060020a03600435166024351515612e79565b34801561089d57600080fd5b506102d161ffff6004351660ff60243516612efd565b3480156108bf57600080fd5b506102d160ff600435166130ff565b3480156108da57600080fd5b506108ea61ffff60043516613149565b6040805160ff938416815291909216602082015281519081900390910190f35b34801561091657600080fd5b506103856131e6565b34801561092b57600080fd5b506104286131f5565b34801561094057600080fd5b50610742600160a060020a0360043516613216565b34801561096157600080fd5b506102d160ff6004351661336f565b34801561097c57600080fd5b506104c76133a6565b604080516020601f6064356004818101359283018490048402850184019095528184526102d194600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506133b79650505050505050565b3480156109f357600080fd5b506102d1600160a060020a03600435166133d9565b348015610a1457600080fd5b506102d160ff60043516613412565b348015610a2f57600080fd5b506102d160ff6004351661345b565b348015610a4a57600080fd5b50610a5a61ffff60043516613488565b604051808260a080838360005b83811015610a7f578181015183820152602001610a67565b5050505090500191505060405180910390f35b348015610a9e57600080fd5b506103856134df565b348015610ab357600080fd5b506102d1600160a060020a036004351661ffff602435166134ee565b348015610adb57600080fd5b50610385613755565b348015610af057600080fd5b5061042861ffff60043516613764565b348015610b0c57600080fd5b5061042861ffff6004351660ff602435166137d0565b348015610b2e57600080fd5b5061030a600160a060020a0360043581169060243516613822565b348015610b5557600080fd5b5061042861ffff60043516613850565b348015610b7157600080fd5b50610b8761ffff6004358116906024351661387f565b6040805160ff9b8c168152998b1660208b0152978a16898901529589166060890152938816608088015291871660a0870152861660c0860152851660e085015284166101008401529092166101208201529051908190036101400190f35b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811660009081526020819052604090205460ff165b919050565b600354600160a060020a03163314610c3457600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b6001546000908190819081908190600160a060020a03163314610c7857600080fd5b610c8186613850565b9450610c8d8587613d5f565b935060019250600019600589028501019150600160a060020a038716601161ffff881660648110610cba57fe5b6006020154600160a060020a03161415610deb5742601161ffff881660648110610ce057fe5b600602016003015411151515610cf557600080fd5b60048054604080517fbf88d34600000000000000000000000000000000000000000000000000000000815260ff861693810193909352600160a060020a038a8116602485015260448401879052905191169163bf88d34691606480830192600092919082900301818387803b158015610d6d57600080fd5b505af1158015610d81573d6000803e3d6000fd5b5050600f54610d99925042915063ffffffff613eda16565b601161ffff881660648110610daa57fe5b60060201600301556040805160ff84168152602081018590528151600160a060020a038a1692600080516020614304833981519152928290030190a261125e565b5060005b601161ffff871660648110610e0057fe5b600602016002018054905081101561102a5760ff8816158015610e6a5750601161ffff871660648110610e2f57fe5b6006020160020181815481101515610e4357fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff166001145b15610e7a5760019092019161102a565b8760ff166001148015610ed45750601161ffff871660648110610e9957fe5b6006020160020181815481101515610ead57fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff166002145b15610ee45760019092019161102a565b8760ff166002148015610f3e5750601161ffff871660648110610f0357fe5b6006020160020181815481101515610f1757fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff16600a145b15610f4e5760019092019161102a565b8760ff166003148015610fa85750601161ffff871660648110610f6d57fe5b6006020160020181815481101515610f8157fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff16600b145b15610fb85760019092019161102a565b8760ff1660041480156110125750601161ffff871660648110610fd757fe5b6006020160020181815481101515610feb57fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff166003145b156110225760019092019161102a565b600101610def565b82600214156111965760048054604080517fbf88d34600000000000000000000000000000000000000000000000000000000815260ff861693810193909352600160a060020a038a8116602485015260448401879052905191169163bf88d34691606480830192600092919082900301818387803b1580156110ab57600080fd5b505af11580156110bf573d6000803e3d6000fd5b5050600454600160a060020a0316915063bf88d346905083601161ffff8a16606481106110e857fe5b60060201546040805160e060020a63ffffffff861602815260ff9093166004840152600160a060020a0390911660248301526001604483015251606480830192600092919082900301818387803b15801561114257600080fd5b505af1158015611156573d6000803e3d6000fd5b50506040805160ff86168152602081018790528151600160a060020a038c16945060008051602061430483398151915293509081900390910190a261125e565b60048054604080517fbf88d34600000000000000000000000000000000000000000000000000000000815260ff861693810193909352600160a060020a038a8116602485015260448401879052905191169163bf88d34691606480830192600092919082900301818387803b15801561120e57600080fd5b505af1158015611222573d6000803e3d6000fd5b50506040805160ff86168152602081018790528151600160a060020a038c16945060008051602061430483398151915293509081900390910190a25b5050505050505050565b600061127382613ef3565b151561127e57600080fd5b6011826064811061128b57fe5b6006020160040154600160a060020a031692915050565b60006112ad826119a8565b9050600160a060020a0383811690821614156112c857600080fd5b33600160a060020a03821614806112e457506112e48133613822565b15156112ef57600080fd5b82601183606481106112fd57fe5b6006020160040160006101000a815481600160a060020a030219169083600160a060020a031602179055508183600160a060020a031682600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600354600160a060020a0316331461138557600080fd5b60058054600160a060020a031916600160a060020a0392909216919091179055565b600254600160a060020a031690565b600354600160a060020a031633146113cd57600080fd5b600354604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015611407573d6000803e3d6000fd5b5050565b6000601161ffff84166064811061141e57fe5b600602016005018260ff1660058110151561143557fe5b602081049091015460ff601f9092166101000a900416905092915050565b60065460a860020a900460ff1681565b61146d3382613f1a565b151561147857600080fd5b611483838383613f79565b505050565b600354600160a060020a0316331461149f57600080fd5b6010805460ff9092166101000261ff0019909216919091179055565b6001546060908190819060009081908190819081908190600160a060020a031633146114e657600080fd5b6114ef8a613216565b60408051600580825260c08201909252919a506020820160a080388339505060408051600580825260c08201909252929a5090506020820160a08038833950508a51919850501561184c57600091505b88518261ffff1610156116f45789600160a060020a031660118a8461ffff1681518110151561156a57fe5b6020908102909101015161ffff166064811061158257fe5b6006020154600160a060020a03161480156115d057504260118a8461ffff168151811015156115ad57fe5b6020908102909101015161ffff16606481106115c557fe5b600602016003015411155b156116e9576115f9898361ffff168151811015156115ea57fe5b90602001906020020151613850565b9550611620868a8461ffff1681518110151561161157fe5b90602001906020020151613d5f565b94506001858c600502010393508a6005028403925083878460ff1681518110151561164757fe5b60ff928316602091820290920101528851611682916001918b91871690811061166c57fe5b602090810290910101519063ffffffff613eda16565b888460ff1681518110151561169357fe5b60209081029091010152600f546116b190429063ffffffff613eda16565b60118a8461ffff168151811015156116c557fe5b6020908102909101015161ffff16606481106116dd57fe5b60060201600301819055505b60019091019061153f565b5060005b87518160ff16101561184c57878160ff1681518110151561171557fe5b6020908102909101015115611844576004548751600160a060020a039091169063bf88d34690899060ff851690811061174a57fe5b906020019060200201518c8b8560ff1681518110151561176657fe5b602090810290910101516040805160e060020a63ffffffff871602815260ff9094166004850152600160a060020a039092166024840152604483015251606480830192600092919082900301818387803b1580156117c357600080fd5b505af11580156117d7573d6000803e3d6000fd5b5050505089600160a060020a0316600080516020614304833981519152888360ff1681518110151561180557fe5b906020019060200201518a8460ff1681518110151561182057fe5b60209081029091018101516040805160ff9094168452918301528051918290030190a25b6001016116f8565b5050505050505050505050565b606490565b60085490565b600354600160a060020a0316331461187b57600080fd5b6010805460ff909216620100000262ff000019909216919091179055565b600354600160a060020a031681565b6000601161ffff8316606481106118bb57fe5b60060201600301549050919050565b61148383838360206040519081016040528060008152506133b7565b600454600160a060020a031681565b600354600160a060020a0316331461190c57600080fd5b600354604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015611946573d6000803e3d6000fd5b50565b600f5481565b600354600160a060020a0316331461196657600080fd5b6006805460ff909216740100000000000000000000000000000000000000000274ff000000000000000000000000000000000000000019909216919091179055565b600080601183606481106119b857fe5b6006020154600160a060020a03169392505050565b600154600160a060020a031633146119e457600080fd5b600f55565b601054610100900460ff1681565b6000600160a060020a0382161515611a0e57600080fd5b50600160a060020a03166000908152600b602052604090205490565b601054640100000000900460ff1681565b600154600160a060020a03163314611a5257600080fd5b601161ffff821660648110611a6357fe5b6006020160010154600160a060020a03163314611a7f57600080fd5b600354611a9590600160a060020a0316826134ee565b60035461ffff821690600160a060020a031660118260648110611ab457fe5b6006020154604051600160a060020a03909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a450565b600154600160a060020a03163314611b0857600080fd5b60105460ff16601161ffff841660648110611b1f57fe5b6006020160020180549050101515611b81576040805160e560020a62461bcd02815260206004820152601e60248201527fe4b88de883bde8b685e587bae58fafe5bbbae8a8ade58d80e5a18ae695b80000604482015290519081900360640190fd5b60ff81161515611bdb576040805160e560020a62461bcd02815260206004820152600f60248201527fe4b88de883bde8938be7a9bae59cb00000000000000000000000000000000000604482015290519081900360640190fd5b60105460ff61010090910481169082161115611c41576040805160e560020a62461bcd02815260206004820152601b60248201527fe4b88de883bde8b685e587bae58fafe5bbbae8a8ade7a8aee9a19e0000000000604482015290519081900360640190fd5b611c4b8282612964565b15611e79578060ff16600e1415611cef57600654600e60008190526020526000805160206143648339815191525460ff60a860020a9092048216911610611c9157600080fd5b600e600081905260205260008051602061436483398151915254611cbf9060ff16600163ffffffff61409a16565b600e6000819052602052600080516020614364833981519152805460ff191660ff92909216919091179055611e29565b8060ff16600f1415611d8e57600654600f600052600e6020526000805160206143248339815191525460ff60a860020a9092048216911610611d3057600080fd5b600f600052600e60205260008051602061432483398151915254611d5e9060ff16600163ffffffff61409a16565b600f600052600e602052600080516020614324833981519152805460ff191660ff92909216919091179055611e29565b8060ff1660111415611e29576006546011600052600e6020526000805160206143448339815191525460ff60a860020a9092048216911610611dcf57600080fd5b6011600052600e60205260008051602061434483398151915254611dfd9060ff16600163ffffffff61409a16565b6011600052600e602052600080516020614344833981519152805460ff191660ff929092169190911790555b601161ffff831660648110611e3a57fe5b60060201600201805460018101825560009182526020918290209181049091018054601f9092166101000a60ff81810219909316928416029190911790555b6010546301000000900460ff16601161ffff841660648110611e9757fe5b6006020160010160149054906101000a900460ff1660ff16101561140757611ef46001601161ffff851660648110611ecb57fe5b600602016001015474010000000000000000000000000000000000000000900460ff169061409a565b601161ffff841660648110611f0557fe5b6006020160010160146101000a81548160ff021916908360ff1602179055505050565b60118160648110611f3557fe5b60060201805460018201546003830154600490930154600160a060020a0392831694508183169360ff74010000000000000000000000000000000000000000840481169460a860020a909404169290911686565b60006001815b601161ffff861660648110611fa057fe5b60060201600201805490508110156120155760ff8416601161ffff871660648110611fc757fe5b6006020160020182815481101515611fdb57fe5b60009182526020918290209181049091015460ff601f9092166101000a900416141561200d5760009150819250612019565b600101611f8f565b8192505b505092915050565b600154600090600160a060020a0316331461203b57600080fd5b60105460ff9081169084161061205057600080fd5b60ff8216151561205f57600080fd5b60105460ff6101009091048116908316111561207a57600080fd5b601161ffff85166064811061208b57fe5b600602016002018360ff168154811015156120a257fe5b60009182526020918290209181049091015460ff601f9092166101000a90041615156120cd57600080fd5b601161ffff8516606481106120de57fe5b600602016002018360ff168154811015156120f557fe5b90600052602060002090602091828204019190069054906101000a900460ff1690506121218483612964565b1561248c578160ff16600e14156121c557600654600e60008190526020526000805160206143648339815191525460ff60a860020a909204821691161061216757600080fd5b600e6000819052602052600080516020614364833981519152546121959060ff16600163ffffffff61409a16565b600e6000819052602052600080516020614364833981519152805460ff191660ff929092169190911790556122ff565b8160ff16600f141561226457600654600f600052600e6020526000805160206143248339815191525460ff60a860020a909204821691161061220657600080fd5b600f600052600e602052600080516020614324833981519152546122349060ff16600163ffffffff61409a16565b600f600052600e602052600080516020614324833981519152805460ff191660ff929092169190911790556122ff565b8160ff16601114156122ff576006546011600052600e6020526000805160206143448339815191525460ff60a860020a90920482169116106122a557600080fd5b6011600052600e602052600080516020614344833981519152546122d39060ff16600163ffffffff61409a16565b6011600052600e602052600080516020614344833981519152805460ff191660ff929092169190911790555b81601161ffff86166064811061231157fe5b600602016002018460ff1681548110151561232857fe5b90600052602060002090602091828204019190066101000a81548160ff021916908360ff1602179055508060ff16600e14156123bc57600e60008190526020526000805160206143648339815191525461238c9060ff16600163ffffffff6140b216565b600e6000819052602052600080516020614364833981519152805460ff191660ff9290921691909117905561248c565b8060ff16600f141561242657600f600052600e602052600080516020614324833981519152546123f69060ff16600163ffffffff6140b216565b600f600052600e602052600080516020614324833981519152805460ff191660ff9290921691909117905561248c565b8060ff166011141561248c576011600052600e602052600080516020614344833981519152546124609060ff16600163ffffffff6140b216565b6011600052600e602052600080516020614344833981519152805460ff191660ff929092169190911790555b50505050565b6060601161ffff8316606481106124a557fe5b6006020160020180548060200260200160405190810160405280929190818152602001828054801561251457602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116124e55790505b50505050509050919050565b600154600090606090819083908190819081908190600160a060020a0316331461254957600080fd5b600254600160a060020a038a811691161461256357600080fd5b60085442101561257257600080fd5b60408051601e8082526103e0820190925290602082016103c080388339505060408051601e8082526103e082019092529299509050602082016103c080388339019050509550600091505b60648261ffff1610156126e6576125d382613850565b94506125df8583613d5f565b604080514261ffff86160160208083019190915260001943014082840152825180830384018152606090920192839052815193975060069391929182918401908083835b602083106126425780518252601f199092019160209182019101612623565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060ff169250505081151561267b57fe5b069750600184896005020103925082868460ff1681518110151561269b57fe5b60ff9283166020918202909201015287516126c0916001918a91871690811061166c57fe5b878460ff168151811015156126d157fe5b602090810290910101526001909101906125bd565b5060005b86518160ff16101561290957868160ff1681518110151561270757fe5b6020908102909101015115612901576004548651600160a060020a039091169063bf88d34690889060ff851690811061273c57fe5b602090810290910101516006548a51600160a060020a03909116908b9060ff871690811061276657fe5b602090810290910101516040805160e060020a63ffffffff871602815260ff9094166004850152600160a060020a039092166024840152604483015251606480830192600092919082900301818387803b1580156127c357600080fd5b505af11580156127d7573d6000803e3d6000fd5b5050505088600160a060020a0316600080516020614304833981519152878360ff1681518110151561280557fe5b90602001906020020151898460ff1681518110151561282057fe5b60209081029091018101516040805160ff9094168452918301528051918290030190a26006548651600160a060020a03821691631d3b5f8a9160b060020a90910461ffff1690899060ff861690811061287557fe5b906020019060200201518a8560ff1681518110151561289057fe5b602090810290910101516040805160e060020a63ffffffff871602815261ffff909416600485015260ff9092166024840152604483015251606480830192600092919082900301818387803b1580156128e857600080fd5b505af11580156128fc573d6000803e3d6000fd5b505050505b6001016126ea565b600f5461291d90429063ffffffff613eda16565b600855505050505050505050565b600154600160a060020a0316331461294257600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b600080600080600080600080600061298c600660169054906101000a900461ffff168c61387f565b50979f50959d50939b5091995097509095509093509091506129f39050601161ffff8d16606481106129ba57fe5b6006020160050160006005811015156129cf57fe5b602081049091015460ff8b811692601f166101000a9091041663ffffffff61409a16565b9750612a42601161ffff8d1660648110612a0957fe5b600602016005016001600581101515612a1e57fe5b602081049091015460ff8a811692601f166101000a9091041663ffffffff61409a16565b9650612a91601161ffff8d1660648110612a5857fe5b600602016005016002600581101515612a6d57fe5b602081049091015460ff89811692601f166101000a9091041663ffffffff61409a16565b9550612ae0601161ffff8d1660648110612aa757fe5b600602016005016003600581101515612abc57fe5b602081049091015460ff88811692601f166101000a9091041663ffffffff61409a16565b9450612b2f601161ffff8d1660648110612af657fe5b600602016005016004600581101515612b0b57fe5b602081049091015460ff87811692601f166101000a9091041663ffffffff61409a16565b93508960ff1660011415612be95760068860ff16118015612b53575060048160ff16115b8015612b645750612b648b8b611f89565b1515612be0576040805160e560020a62461bcd02815260206004820152602160248201527fe59c9fe59cb0e789b9e680a7e99c80e6b182e4b88de6bbbfe8b6b3e6a29de4bb60448201527fb600000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60019850612dcb565b8960ff1660021415612c0d5760068760ff16118015612b645750612b648b8b611f89565b8960ff1660031415612c315760068460ff16118015612b645750612b648b8b611f89565b8960ff1660041415612c555760078360ff16118015612b645750612b648b8b611f89565b8960ff1660051480612c6a57508960ff166007145b15612c875760038260ff16108015612b645750612b648b8b611f89565b8960ff1660061415612cab5760038360ff16118015612b645750612b648b8b611f89565b8960ff1660081415612cdd5760078260ff16118015612b53575060048160ff16118015612b645750612b648b8b611f89565b8960ff1660091415612d0f5760048860ff16118015612b53575060048160ff16118015612b645750612b648b8b611f89565b8960ff16600a1415612d415760068660ff16118015612b53575060038360ff16108015612b645750612b648b8b611f89565b8960ff16600b1415612d735760068560ff16118015612b53575060038660ff16108015612b645750612b648b8b611f89565b8960ff16600f1480612d8857508960ff166010145b80612d9657508960ff166012145b15612dc15760078360ff16118015612b53575060078260ff16118015612b645750612b648b8b611f89565b612b648b8b611f89565b505050505050505092915050565b600c60205281600052604060002081815481101515612df457fe5b9060005260206000209060109182820401919006600202915091509054906101000a900461ffff1681565b600354600160a060020a03163314612e3657600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b60105460ff1681565b60ff9081166000908152600e60205260409020541690565b600160a060020a038216331415612e8f57600080fd5b336000818152600d60209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600154600090600160a060020a03163314612f1757600080fd5b60ff82161515612f4b57600654612f399060b060020a900461ffff168461387f565b50979850613012975050505050505050565b8160ff1660011415612f8157600654612f6f9060b060020a900461ffff168461387f565b50969850613012975050505050505050565b8160ff1660021415612fb757600654612fa59060b060020a900461ffff168461387f565b50959850613012975050505050505050565b8160ff1660031415612fed57600654612fdb9060b060020a900461ffff168461387f565b50949850613012975050505050505050565b6006546130059060b060020a900461ffff168461387f565b5093985050505050505050505b600a81601161ffff86166064811061302657fe5b600602016005018460ff1660058110151561303d57fe5b602091828204019190069054906101000a900460ff160160ff1610151561306357600080fd5b6130b26001601161ffff86166064811061307957fe5b600602016005018460ff1660058110151561309057fe5b602081049091015460ff601f9092166101000a9004169063ffffffff61409a16565b601161ffff8516606481106130c357fe5b600602016005018360ff166005811015156130da57fe5b602091828204019190066101000a81548160ff021916908360ff160217905550505050565b600354600160a060020a0316331461311657600080fd5b6006805477ffff00000000000000000000000000000000000000000000191660ff9290921660b060020a02919091179055565b6010546000908190819062010000900460ff16601161ffff86166064811061316d57fe5b600602016001015460a860020a900460ff16116131b157601161ffff85166064811061319557fe5b6006020160010160159054906101000a900460ff1690506131b5565b5060005b80601161ffff8616606481106131c757fe5b6006020160010160149054906101000a900460ff169250925050915091565b600154600160a060020a031681565b60065474010000000000000000000000000000000000000000900460ff1681565b60608060008060606000606460405190808252806020026020018201604052801561324b578160200160208202803883390190505b50945060009350600092505b60648361ffff1610156132d757600160a060020a038716601161ffff85166064811061327f57fe5b6006020154600160a060020a031614156132cc5782858561ffff168151811015156132a657fe5b61ffff928316602091820290920101526132c9908516600163ffffffff6140cf16565b93505b600190920191613257565b8361ffff16604051908082528060200260200182016040528015613305578160200160208202803883390190505b509150600090505b8361ffff168161ffff16101561336557848161ffff1681518110151561332f57fe5b90602001906020020151828261ffff1681518110151561334b57fe5b61ffff90921660209283029091019091015260010161330d565b5095945050505050565b600354600160a060020a0316331461338657600080fd5b6010805460ff90921663010000000263ff00000019909216919091179055565b60065460b060020a900461ffff1681565b6133c2848484611463565b6133ce848484846140e8565b151561248c57600080fd5b600354600160a060020a031633146133f057600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600154600160a060020a0316331461342957600080fd5b6006805460ff90921660a860020a0275ff00000000000000000000000000000000000000000019909216919091179055565b600354600160a060020a0316331461347257600080fd5b6010805460ff191660ff92909216919091179055565b6134906142e4565b601161ffff8316606481106134a157fe5b6040805160a08101918290526006929092029092016005908101805460ff1683529192826001602086018084116124e5575094979650505050505050565b600254600160a060020a031681565b600154600090600160a060020a0316331461350857600080fd5b600160a060020a038316151561351d57600080fd5b601161ffff83166064811061352e57fe5b6006020154600160a060020a03169050801561358857600160a060020a0381166000908152600b602052604090205461356e90600163ffffffff61426a16565b600160a060020a0382166000908152600b60205260409020555b601161ffff83166064811061359957fe5b6006020160010160149054906101000a900460ff1660ff1660001415613600576135cf6001601161ffff851660648110611ecb57fe5b601161ffff8416606481106135e057fe5b6006020160010160146101000a81548160ff021916908360ff1602179055505b600160a060020a0383166000908152600b602052604090205461362a90600163ffffffff613eda16565b600160a060020a0384166000908152600b6020908152604080832093909355600c815291812080546001810182559082529190206010820401805461ffff8086166002600f909516949094026101000a84810291021990911617905583906011906064811061369557fe5b600602018054600160a060020a031916600160a060020a039290921691909117905560105462010000900460ff16601161ffff8416606481106136d457fe5b6006020160010160159054906101000a900460ff1660ff161015611483576137206001601161ffff85166064811061370857fe5b600602016001015460a860020a900460ff169061409a565b601161ffff84166064811061373157fe5b6006020160010160156101000a81548160ff021916908360ff160217905550505050565b600554600160a060020a031681565b60105460009062010000900460ff16601161ffff84166064811061378457fe5b600602016001015460a860020a900460ff16116137c857601161ffff8316606481106137ac57fe5b6006020160010160159054906101000a900460ff169050610c18565b506000610c18565b6000601161ffff8416606481106137e357fe5b600602016002018260ff168154811015156137fa57fe5b90600052602060002090602091828204019190069054906101000a900460ff16905092915050565b600160a060020a039182166000908152600d6020908152604080832093909416825291909152205460ff1690565b6000601161ffff83166064811061386357fe5b6006020160010160149054906101000a900460ff169050919050565b60008080808080808080808061ffff8d16811061389b57600080fd5b8b8d604051602001808361ffff1661ffff167e010000000000000000000000000000000000000000000000000000000000000281526002018261ffff1661ffff167e01000000000000000000000000000000000000000000000000000000000000028152600201925050506040516020818303038152906040526040518082805190602001908083835b602083106139445780518252601f199092019160209182019101613925565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905060058d61ffff161015613a7257600560ff60f860020a600084901a8102041606600201600560f860020a600184901a81020460ff1606600101600560f860020a600285901a81020460ff1606600560ff60f860020a600387901a8102041606600301600960f860020a600487901a81020460ff1606600201600860f860020a600588901a81020460ff1606600101600860f860020a600689901a81020460ff1606600301600560f860020a60078a901a81020460ff1606600401600660f860020a60088b901a81020460ff1606600301600760f860020a60098c901a81020460ff16066002019a509a509a509a509a509a509a509a509a509a50613d4f565b60098d61ffff161015613b77576001600560f860020a600084901a81020460ff1681900682019183901a60f860020a0260f860020a900460ff16811515613ab557fe5b0660069081019060f860020a600285901a81020460ff1606600101600460f860020a600386901a81020460ff1606600201600660f860020a600487901a81020460ff1606600660ff60f860020a600589901a8102041606600560ff60f860020a60068a901a8102041606600201600960f860020a60078a901a81020460ff1606600560ff60f860020a60088c901a8102041606600660ff60f860020a60098d901a81020416066005019a509a509a509a509a509a509a509a509a509a50613d4f565b600d8d61ffff161015613c8d57600660ff60f860020a600084901a8102041606600501600460f860020a600184901a81020460ff1606600560ff60f860020a600286901a8102041606600601600360f860020a85821a81020460ff1606600560ff60f860020a600488901a8102041606600301600560f860020a87821a81020460ff16066006016004876006602081101515613c0f57fe5b1a60f860020a0260f860020a900460ff16811515613c2957fe5b06600b60ff60f860020a60078b901a8102041606600660ff60f860020a60088c901a810204160660050160078a60095b1a60f860020a0260f860020a900460ff16811515613c7357fe5b069a509a509a509a509a509a509a509a509a509a50613d4f565b600360ff60f860020a600084901a8102041606600560ff60f860020a600185901a8102041606600401600260f860020a84821a81020460ff1606600660ff60f860020a600387901a8102041606600501600760f860020a600487901a81020460ff1606600201600560f860020a87821a81020460ff1606600101600460f860020a600689901a81020460ff160660079081019060f860020a89821a81020460ff1606600560ff60f860020a60088c901a810204160660020160088a6009613c59565b509295989b9194979a5092959850565b600080600080600080600080600080600042613d8a8d61ffff16600754613eda90919063ffffffff16565b60405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310613ddf5780518252601f199092019160209182019101613dc0565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060019004995060149850605097506101409650610500955060018d60ff160360020a9450613e4d60018a8c811515613e4057fe5b069063ffffffff613eda16565b9350613e5f6001898c811515613e4057fe5b9250613e716001888c811515613e4057fe5b9150613e836001878c811515613e4057fe5b9050808510613e955760059a50613eca565b818510613ea55760049a50613eca565b828510613eb55760039a50613eca565b838510613ec55760029a50613eca565b60019a505b5050505050505050505092915050565b600082820183811015613eec57600080fd5b9392505050565b60008060118360648110613f0357fe5b6006020154600160a060020a031615159392505050565b600080613f26836119a8565b905080600160a060020a031684600160a060020a03161480613f61575083600160a060020a0316613f5684611268565b600160a060020a0316145b80613f715750613f718185613822565b949350505050565b82600160a060020a0316613f8c826119a8565b600160a060020a031614613f9f57600080fd5b600160a060020a0382161515613fb457600080fd5b613fbd8161427a565b600160a060020a0383166000908152600b6020526040902054613fe790600163ffffffff61426a16565b600160a060020a038085166000908152600b6020526040808220939093559084168152205461401d90600163ffffffff613eda16565b600160a060020a0383166000908152600b6020526040902055816011826064811061404457fe5b600602018054600160a060020a031916600160a060020a03928316179055604051829184811691908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90600090a4505050565b600082820160ff8085169082161015613eec57600080fd5b60008060ff80851690841611156140c857600080fd5b5050900390565b600082820161ffff8085169082161015613eec57600080fd5b6000806140fd85600160a060020a03166142dc565b151561410c5760019150614261565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b8381101561419f578181015183820152602001614187565b50505050905090810190601f1680156141cc5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156141ee57600080fd5b505af1158015614202573d6000803e3d6000fd5b505050506040513d602081101561421857600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600080838311156140c857600080fd5b60006011826064811061428957fe5b6006020160040154600160a060020a031614611946576000601182606481106142ae57fe5b6006020160040160006101000a815481600160a060020a030219169083600160a060020a0316021790555050565b6000903b1190565b60a06040519081016040528060059060208202803883395091929150505600d56a24652f698adf8c9828af6f82e5ca401b19da2b0b3c3f9a84a5b01129d4c260dd7f0393e3d3987afafbb50883ff45658a7a0c2d4460aa7a872d45c2ea2352c0fe3ac15929d25201e62b8c796afb6745bcdd80b8be9470092f43535ba0b48da6897c210c76a29b3d6bf757063b10a3faa77fe0657de0ee282493e99a18ed50a165627a7a723058205aa0a7978d80d3a0ebe23082278d430f2c34537de33e665e68138ee4582481340029"
}