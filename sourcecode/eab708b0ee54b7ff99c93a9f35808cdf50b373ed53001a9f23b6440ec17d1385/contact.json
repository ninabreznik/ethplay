{
  "address": "0x1f31d1168efe4bd22d00d31fc425e5bcb54c75e7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "STeX_WL",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-11\n*/\n\npragma solidity ^0.4.19;\n\ncontract owned {\n    // Owner's address\n    address public owner;\n\n    // Hardcoded address of super owner (for security reasons)\n    address internal super_owner = 0x630CC4c83fCc1121feD041126227d25Bbeb51959;\n    \n    // Hardcoded addresses of founders for withdraw after gracePeriod is succeed (for security reasons)\n    address[2] internal foundersAddresses = [\n        0x2f072F00328B6176257C21E64925760990561001,\n        0x2640d4b3baF3F6CF9bB5732Fe37fE1a9735a32CE\n    ];\n\n    // Constructor of parent the contract\n    function owned() public {\n        owner = msg.sender;\n        super_owner = msg.sender;\n    }\n\n    // Modifier for owner's functions of the contract\n    modifier onlyOwner {\n        if ((msg.sender != owner) && (msg.sender != super_owner)) revert();\n        _;\n    }\n\n    // Modifier for super-owner's functions of the contract\n    modifier onlySuperOwner {\n        if (msg.sender != super_owner) revert();\n        _;\n    }\n\n    // Return true if sender is owner or super-owner of the contract\n    function isOwner() internal returns(bool success) {\n        if ((msg.sender == owner) || (msg.sender == super_owner)) return true;\n        return false;\n    }\n\n    // Change the owner of the contract\n    function transferOwnership(address newOwner)  public onlySuperOwner {\n        owner = newOwner;\n    }\n}\n\n\ncontract STeX_WL is owned {\n\t// ERC20 \n\tstring public standard = 'Token 0.1';\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    // ---\n    \n    uint256 public ethRaised;\n    uint256 public soldSupply;\n    uint256 public curPrice;\n    uint256 public minBuyPrice;\n    uint256 public maxBuyPrice;\n    \n    // White list start and stop blocks\n    uint256 public wlStartBlock;\n    uint256 public wlStopBlock;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    \n    // Constructor\n    function STeX_WL() public {        \n    \ttotalSupply = 1000000000000000; // 10M with decimal = 8\n    \tbalanceOf[this] = totalSupply;\n    \tsoldSupply = 0;\n        decimals = 8;\n        \n        name = \"STeX White List\";\n        symbol = \"STE(WL)\";\n        \n        minBuyPrice = 20500000; // min price is 0.00205 ETH for 1 STE\n        maxBuyPrice = 24900000; // max price is 0.00249 ETH for 1 STE\n        curPrice = minBuyPrice;\n        \n        wlStartBlock = 5071809;\n        wlStopBlock = wlStartBlock + 287000;\n    }\n    \n    // Calls when send Ethereum to the contract\n    function() internal payable {\n    \tif ( msg.value < 100000000000000000 ) revert(); // min transaction is 0.1 ETH\n    \tif ( ( block.number >= wlStopBlock ) || ( block.number < wlStartBlock ) ) revert();    \t\n    \t\n    \tuint256 add_by_blocks = (((block.number-wlStartBlock)*1000000)/(wlStopBlock-wlStartBlock)*(maxBuyPrice-minBuyPrice))/1000000;\n    \tuint256 add_by_solded = ((soldSupply*1000000)/totalSupply*(maxBuyPrice-minBuyPrice))/1000000;\n    \t\n    \t// The price is calculated from blocks and sold supply\n    \tif ( add_by_blocks > add_by_solded ) {\n    \t\tcurPrice = minBuyPrice + add_by_blocks;\n    \t} else {\n    \t\tcurPrice = minBuyPrice + add_by_solded;\n    \t}\n    \t\n    \tif ( curPrice > maxBuyPrice ) curPrice = maxBuyPrice;\n    \t\n    \tuint256 amount = msg.value / curPrice;\n    \t\n    \tif ( balanceOf[this] < amount ) revert();\n    \t\n    \tbalanceOf[this] -= amount;\n        balanceOf[msg.sender] += amount;\n        soldSupply += amount;\n        ethRaised += msg.value;\n    \t\n        Transfer(0x0, msg.sender, amount);\n    }\n    \n\t// ERC20 transfer\n    function transfer(address _to, uint256 _value) public {\n    \trevert();\n    }\n\n\t// ERC20 approve\n    function approve(address _spender, uint256 _value) public returns(bool success) {\n        revert();\n    }\n\n\t// ERC20 transferFrom\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\n    \trevert();\n    }\n    \n    // Admin function\n    function transferFromAdmin(address _from, address _to, uint256 _value) public onlyOwner returns(bool success) {\n        if (_to == 0x0) revert();\n        if (balanceOf[_from] < _value) revert();\n        if ((balanceOf[_to] + _value) < balanceOf[_to]) revert(); // Check for overflows\n\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    // Set min/max prices\n    function setPrices(uint256 _minBuyPrice, uint256 _maxBuyPrice) public onlyOwner {\n    \tminBuyPrice = _minBuyPrice;\n    \tmaxBuyPrice = _maxBuyPrice;\n    }\n    \n    // Set start and stop blocks of White List\n    function setStartStopBlocks(uint256 _wlStartBlock, uint256 _wlStopBlock) public onlyOwner {\n    \twlStartBlock = _wlStartBlock;\n    \twlStopBlock = _wlStopBlock;\n    }\n    \n    // Withdraw\n    function withdrawToFounders(uint256 amount) public onlyOwner {\n    \tuint256 amount_to_withdraw = amount * 1000000000000000; // 0.001 ETH\n        if (this.balance < amount_to_withdraw) revert();\n        amount_to_withdraw = amount_to_withdraw / foundersAddresses.length;\n        uint8 i = 0;\n        uint8 errors = 0;\n        \n        for (i = 0; i < foundersAddresses.length; i++) {\n\t\t\tif (!foundersAddresses[i].send(amount_to_withdraw)) {\n\t\t\t\terrors++;\n\t\t\t}\n\t\t}\n    }\n    \n    // Remove white list contract after STE will be distributed\n    function afterSTEDistributed() public onlySuperOwner {\n    \tuint256 amount_to_withdraw = this.balance;\n        amount_to_withdraw = amount_to_withdraw / foundersAddresses.length;\n        uint8 i = 0;\n        uint8 errors = 0;\n        \n        for (i = 0; i < foundersAddresses.length; i++) {\n\t\t\tif (!foundersAddresses[i].send(amount_to_withdraw)) {\n\t\t\t\terrors++;\n\t\t\t}\n\t\t}\n\t\t\n    \tsuicide(foundersAddresses[0]);\n    }\n}",
  "bytecode": "606060405273630cc4c83fcc1121fed041126227d25bbeb51959600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280732f072f00328b6176257c21e6492576099056100173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001732640d4b3baf3f6cf9bb5732fe37fe1a9735a32ce73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152506002906002620001009291906200032d565b506040805190810160405280600981526020017f546f6b656e20302e310000000000000000000000000000000000000000000000815250600490805190602001906200014e929190620003af565b5034156200015b57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555066038d7ea4c68000600881905550600854601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600a819055506008600760006101000a81548160ff021916908360ff1602179055506040805190810160405280600f81526020017f53546558205768697465204c697374000000000000000000000000000000000081525060059080519060200190620002a1929190620003af565b506040805190810160405280600781526020017f53544528574c290000000000000000000000000000000000000000000000000081525060069080519060200190620002ef929190620003af565b50630138ce20600c8190555063017bf1a0600d81905550600c54600b81905550624d63c1600e8190555062046118600e5401600f81905550620004a4565b82600281019282156200039c579160200282015b828111156200039b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019062000341565b5b509050620003ab919062000436565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003f257805160ff191683800117855562000423565b8280016001018555821562000423579182015b828111156200042257825182559160200191906001019062000405565b5b5090506200043291906200047c565b5090565b6200047991905b808211156200047557600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016200043d565b5090565b90565b620004a191905b808211156200049d57600081600090555060010162000483565b5090565b90565b6114b580620004b46000396000f30060606040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063026d6a671461037957806304e262b8146103a557806305fefda7146103ce57806306fdde03146103fa578063095ea7b3146104885780630d271720146104e257806316fcdb841461055b57806318160ddd1461058457806323b872dd146105ad578063313ce567146106265780635a3b7e421461065557806363de882b146106e35780636d9521171461070c57806370a08231146107355780638da5cb5b1461078257806393a91682146107d757806395d89b4114610800578063a9059cbb1461088e578063c65538ec146108d0578063dd62ed3e146108e5578063e37d4fed14610951578063f2fde38b14610974578063fa2299ee146109ad578063fddf0fc0146109d6575b600080600067016345785d8a000034101561015857600080fd5b600f544310158061016a5750600e5443105b1561017457600080fd5b620f4240600c54600d5403600e54600f5403620f4240600e5443030281151561019957fe5b04028115156101a457fe5b049250620f4240600c54600d5403600854620f4240600a54028115156101c657fe5b04028115156101d157fe5b049150818311156101ec5782600c5401600b819055506101f8565b81600c5401600b819055505b600d54600b54111561020e57600d54600b819055505b600b543481151561021b57fe5b04905080601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561026a57600080fd5b80601060003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600a60008282540192505081905550346009600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050005b341561038457600080fd5b6103a360048080359060200190919080359060200190919050506109ff565b005b34156103b057600080fd5b6103b8610ac6565b6040518082815260200191505060405180910390f35b34156103d957600080fd5b6103f86004808035906020019091908035906020019091905050610acc565b005b341561040557600080fd5b61040d610b93565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561044d578082015181840152602081019050610432565b50505050905090810190601f16801561047a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049357600080fd5b6104c8600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c31565b604051808215151515815260200191505060405180910390f35b34156104ed57600080fd5b610541600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c38565b604051808215151515815260200191505060405180910390f35b341561056657600080fd5b61056e610ef6565b6040518082815260200191505060405180910390f35b341561058f57600080fd5b610597610efc565b6040518082815260200191505060405180910390f35b34156105b857600080fd5b61060c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f02565b604051808215151515815260200191505060405180910390f35b341561063157600080fd5b610639610f09565b604051808260ff1660ff16815260200191505060405180910390f35b341561066057600080fd5b610668610f1c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106a857808201518184015260208101905061068d565b50505050905090810190601f1680156106d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106ee57600080fd5b6106f6610fba565b6040518082815260200191505060405180910390f35b341561071757600080fd5b61071f610fc0565b6040518082815260200191505060405180910390f35b341561074057600080fd5b61076c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fc6565b6040518082815260200191505060405180910390f35b341561078d57600080fd5b610795610fde565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107e257600080fd5b6107ea611003565b6040518082815260200191505060405180910390f35b341561080b57600080fd5b610813611009565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610853578082015181840152602081019050610838565b50505050905090810190601f1680156108805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561089957600080fd5b6108ce600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110a7565b005b34156108db57600080fd5b6108e36110ac565b005b34156108f057600080fd5b61093b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061121d565b6040518082815260200191505060405180910390f35b341561095c57600080fd5b6109726004808035906020019091905050611242565b005b341561097f57600080fd5b6109ab600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113de565b005b34156109b857600080fd5b6109c061147d565b6040518082815260200191505060405180910390f35b34156109e157600080fd5b6109e9611483565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610aaa5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610ab457600080fd5b81600e8190555080600f819055505050565b600e5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610b775750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610b8157600080fd5b81600c8190555080600d819055505050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c295780601f10610bfe57610100808354040283529160200191610c29565b820191906000526020600020905b815481529060010190602001808311610c0c57829003601f168201915b505050505081565b6000806000fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610ce55750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610cef57600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415610d1357600080fd5b81601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d5f57600080fd5b601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015610dec57600080fd5b81601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600c5481565b60085481565b6000806000fd5b600760009054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fb25780601f10610f8757610100808354040283529160200191610fb2565b820191906000526020600020905b815481529060010190602001808311610f9557829003601f168201915b505050505081565b600f5481565b600d5481565b60106020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561109f5780601f106110745761010080835404028352916020019161109f565b820191906000526020600020905b81548152906001019060200180831161108257829003601f168201915b505050505081565b600080fd5b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561110d57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631925060028381151561113357fe5b0492506000915060009050600091505b60028260ff1610156111d35760028260ff1660028110151561116157fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015156111c65780806001019150505b8180600101925050611143565b600260006002811015156111e357fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6011602052816000526040600020602052806000526040600020600091509150505481565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156112f25750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156112fc57600080fd5b66038d7ea4c6800084029250823073ffffffffffffffffffffffffffffffffffffffff1631101561132c57600080fd5b60028381151561133857fe5b0492506000915060009050600091505b60028260ff1610156113d85760028260ff1660028110151561136657fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015156113cb5780806001019150505b8180600101925050611348565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561143a57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a5481565b600954815600a165627a7a72305820f1c46238d605af07ac7cf24acf78daa3d3f0a6f9c0f7fc15805df2d0f21dc80e0029"
}