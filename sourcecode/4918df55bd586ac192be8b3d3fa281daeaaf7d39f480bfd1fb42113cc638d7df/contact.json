{
  "address": "0x2f41f538f52b30ea61ed2a09d2fdb1fe2aef47de",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ONTOPToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-14\n*/\n\npragma solidity ^0.4.21;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n       \n    \n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract ONTOPToken is owned, TokenERC20 {\n    struct frozenInfo {\n       bool frozenAccount;\n       bool frozenAccBytime;\n       // uint time_stfrozen;\n       uint time_end_frozen;\n       uint time_last_query;\n       uint256 frozen_total;\n       // uint256 realsestep;\n    }\n    \n    struct frozenInfo_prv {\n       uint256 realsestep;\n    }\n    \n    uint private constant timerate = 1;\n    string public declaration = \"frozenInfos will reflush by function QueryFrozenCoins and transfer.\";\n    // mapping (address => bool) public frozenAccount;\n    mapping (address => frozenInfo) public frozenInfos;\n    mapping (address => frozenInfo_prv) private frozenInfos_prv;\n    \n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    // This notifies clients about the frozen coin\n    event FrozenTotal(address indexed from, uint256 value);\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function ONTOPToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n    \n    function _resetFrozenInfo(address target) internal {\n       frozenInfos[target].frozen_total = 0;\n       frozenInfos[target].time_end_frozen = 0;\n       frozenInfos_prv[target].realsestep = 0;\n       frozenInfos[target].time_last_query = 0;\n       frozenInfos[target].frozenAccBytime = false; \n    }\n    \n    function _refulshFrozenInfo(address target) internal {\n       if(frozenInfos[target].frozenAccBytime) \n        {\n            uint nowtime = now ;// + 60*60*24*365*5 ;\n            frozenInfos[target].time_last_query = nowtime;\n            if(nowtime>=frozenInfos[target].time_end_frozen)\n            {\n               _resetFrozenInfo(target);              \n            }\n            else\n            {\n               uint stepcnt = frozenInfos[target].time_end_frozen - nowtime;\n               uint256 releasecoin = stepcnt * frozenInfos_prv[target].realsestep;\n               if(frozenInfos[target].frozen_total<=releasecoin)\n                  _resetFrozenInfo(target);\n               else\n               {\n                  frozenInfos[target].frozen_total=releasecoin;\n               }\n            }\n        }       \n    }\n    \n    /* Internal transfer, only can be called by this contract */\n    \n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        // require(!frozenAccount[_from]);                     // Check if sender is frozen\n        // require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        require(!frozenInfos[_from].frozenAccount);                     // Check if sender is frozen\n        require(!frozenInfos[_to].frozenAccount);                       // Check if recipient is frozen\n        require(!frozenInfos[_to].frozenAccBytime); \n                \n        if(frozenInfos[_from].frozenAccBytime) \n        {\n            _refulshFrozenInfo(_from);\n            if(frozenInfos[_from].frozenAccBytime)\n            {\n               if((balanceOf[_from]-_value)<=frozenInfos[_from].frozen_total)\n                   require(false);\n            }\n        }\n        \n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        // frozenAccount[target] = freeze;\n        frozenInfos[target].frozenAccount = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n    \n    function freezeAccountByTime(address target, uint time) onlyOwner public {\n        // frozenAccount[target] = freeze;\n        require (target != 0x0);\n        require (balanceOf[target] >= 1); \n        require(!frozenInfos[target].frozenAccBytime);\n        require (time >0);\n        frozenInfos[target].frozenAccBytime = true;\n        uint nowtime = now;\n        frozenInfos[target].time_end_frozen = nowtime + time * timerate;\n        frozenInfos[target].time_last_query = nowtime;\n        frozenInfos[target].frozen_total = balanceOf[target];\n        frozenInfos_prv[target].realsestep = frozenInfos[target].frozen_total / (time * timerate);  \n        require (frozenInfos_prv[target].realsestep>0);      \n        emit FrozenTotal(target, frozenInfos[target].frozen_total);\n    }    \n    \n    function UnfreezeAccountByTime(address target) onlyOwner public {\n        _resetFrozenInfo(target);\n        emit FrozenTotal(target, frozenInfos[target].frozen_total);\n    }\n    \n    function QueryFrozenCoins(address _from) public returns (uint256 total) {\n        require (_from != 0x0);\n        require(frozenInfos[_from].frozenAccBytime);\n        _refulshFrozenInfo(_from);        \n        emit FrozenTotal(_from, frozenInfos[_from].frozen_total);\n        return frozenInfos[_from].frozen_total;\n    }\n\n}",
  "bytecode": "606060409081526003805460ff191660121790556080905190810160405280604381526020017f66726f7a656e496e666f732077696c6c207265666c7573682062792066756e6381526020017f74696f6e20517565727946726f7a656e436f696e7320616e64207472616e736681526020017f65722e000000000000000000000000000000000000000000000000000000000081525060069080516100a8929160200190610151565b5034156100b457600080fd5b604051610e69380380610e69833981016040528080519190602001805182019190602001805160008054600160a060020a033316600160a060020a03199091168117825560035460ff16600a0a87026004819055908252600560205260409091205590910190508282826001828051610131929160200190610151565b506002818051610145929160200190610151565b505050505050506101ec565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061019257805160ff19168380011785556101bf565b828001600101855582156101bf579182015b828111156101bf5782518255916020019190600101906101a4565b506101cb9291506101cf565b5090565b6101e991905b808211156101cb57600081556001016101d5565b90565b610c6e806101fb6000396000f3006060604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df57806318160ddd14610169578063313ce5671461018e57806340394dcc146101b757806342966c68146101db57806350d78f7d1461020557806370a08231146102245780638da5cb5b146102435780639073576c1461027257806395d89b4114610291578063a9059cbb146102a4578063b1a6afd3146102c6578063c9736d80146102d9578063e724529c1461032b578063f2fde38b1461034f575b600080fd5b34156100ea57600080fd5b6100f261036e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561012e578082015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017457600080fd5b61017c61040c565b60405190815260200160405180910390f35b341561019957600080fd5b6101a1610412565b60405160ff909116815260200160405180910390f35b34156101c257600080fd5b6101d9600160a060020a036004351660243561041b565b005b34156101e657600080fd5b6101f1600435610583565b604051901515815260200160405180910390f35b341561021057600080fd5b61017c600160a060020a036004351661060e565b341561022f57600080fd5b61017c600160a060020a03600435166106c8565b341561024e57600080fd5b6102566106da565b604051600160a060020a03909116815260200160405180910390f35b341561027d57600080fd5b6101d9600160a060020a03600435166106e9565b341561029c57600080fd5b6100f261075f565b34156102af57600080fd5b6101f1600160a060020a03600435166024356107ca565b34156102d157600080fd5b6100f26107e0565b34156102e457600080fd5b6102f8600160a060020a036004351661084b565b604051941515855292151560208501526040808501929092526060840152608083019190915260a0909101905180910390f35b341561033657600080fd5b6101d9600160a060020a0360043516602435151561087d565b341561035a57600080fd5b6101d9600160a060020a0360043516610909565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104045780601f106103d957610100808354040283529160200191610404565b820191906000526020600020905b8154815290600101906020018083116103e757829003601f168201915b505050505081565b60045481565b60035460ff1681565b6000805433600160a060020a0390811691161461043757600080fd5b600160a060020a038316151561044c57600080fd5b600160a060020a038316600090815260056020526040902054600190101561047357600080fd5b600160a060020a038316600090815260076020526040902054610100900460ff161561049e57600080fd5b600082116104ab57600080fd5b50600160a060020a0382166000908152600760208181526040808420805461ff00191661010017815542868101600183015560028201819055600584529190942054929091526003909201819055829081151561050457fe5b600160a060020a03851660009081526008602052604081209290910491829055901161052f57600080fd5b600160a060020a03831660008181526007602052604090819020600301547f43e4957c36a7928d87c46c096567928625314057ed11e3ed634710223f561e6f915190815260200160405180910390a2505050565b600160a060020a033316600090815260056020526040812054829010156105a957600080fd5b600160a060020a03331660008181526005602052604090819020805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b6000600160a060020a038216151561062557600080fd5b600160a060020a038216600090815260076020526040902054610100900460ff16151561065157600080fd5b61065a82610953565b600160a060020a03821660008181526007602052604090819020600301547f43e4957c36a7928d87c46c096567928625314057ed11e3ed634710223f561e6f915190815260200160405180910390a250600160a060020a031660009081526007602052604090206003015490565b60056020526000908152604090205481565b600054600160a060020a031681565b60005433600160a060020a0390811691161461070457600080fd5b61070d81610a2d565b600160a060020a03811660008181526007602052604090819020600301547f43e4957c36a7928d87c46c096567928625314057ed11e3ed634710223f561e6f915190815260200160405180910390a250565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104045780601f106103d957610100808354040283529160200191610404565b60006107d7338484610a75565b50600192915050565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104045780601f106103d957610100808354040283529160200191610404565b600760205260009081526040902080546001820154600283015460039093015460ff8084169461010090940416929085565b60005433600160a060020a0390811691161461089857600080fd5b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a0390811691161461092457600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03811660009081526007602052604081205481908190610100900460ff1615610a2757600160a060020a0384166000908152600760205260409020426002820181905560019091015490935083106109ba576109b584610a2d565b610a27565b5050600160a060020a0382166000908152600760208181526040808420600181015460088452919094205492909152600390920154918390039190820290819011610a08576109b584610a2d565b600160a060020a03841660009081526007602052604090206003018190555b50505050565b600160a060020a031660009081526007602081815260408084206003810185905560018101859055600883529084208490559190526002810191909155805461ff0019169055565b600160a060020a0382161515610a8a57600080fd5b600160a060020a03831660009081526005602052604090205481901015610ab057600080fd5b600160a060020a0382166000908152600560205260409020548181011015610ad757600080fd5b600160a060020a03831660009081526007602052604090205460ff1615610afd57600080fd5b600160a060020a03821660009081526007602052604090205460ff1615610b2357600080fd5b600160a060020a038216600090815260076020526040902054610100900460ff1615610b4e57600080fd5b600160a060020a038316600090815260076020526040902054610100900460ff1615610bd857610b7d83610953565b600160a060020a038316600090815260076020526040902054610100900460ff1615610bd857600160a060020a03831660009081526007602090815260408083206003015460059092529091205482900311610bd857600080fd5b600160a060020a038084166000818152600560205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050505600a165627a7a72305820b9cdae8b5a15286ff6915bcc702627b8557229813ef93d20bfb8c460e02553d5002900000000000000000000000000000000000000000000000000000000b2d05e00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b4f6e20546f7020436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054f4e544f50000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000b2d05e00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000b4f6e20546f7020436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054f4e544f50000000000000000000000000000000000000000000000000000000"
}