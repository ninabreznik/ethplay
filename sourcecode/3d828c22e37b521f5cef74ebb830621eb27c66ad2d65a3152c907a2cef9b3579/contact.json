{
  "address": "0x2d16e45b28c3cd1881edcaa5b15b19c65ade2f24",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Soar",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-03\n*/\n\npragma solidity ^0.5.2;\n\n// File: node_modules/openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: contracts/Adminable.sol\n\ncontract Adminable {\n    using Roles for Roles.Role;\n\n    event AdminAdded(address indexed account);\n    event AdminRemoved(address indexed account);\n\n    Roles.Role private _admins;\n\n    constructor () internal {\n        _addAdmin(msg.sender);\n    }\n\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender));\n        _;\n    }\n\n    function isAdmin(address account) public view returns (bool) {\n        return _admins.has(account);\n    }\n\n    function addAdmin(address account) public onlyAdmin {\n        _addAdmin(account);\n    }\n\n    function renounceAdmin() public {\n        _removeAdmin(msg.sender);\n    }\n\n    function _addAdmin(address account) internal {\n        _admins.add(account);\n        emit AdminAdded(account);\n    }\n\n    function _removeAdmin(address account) internal {\n        _admins.remove(account);\n        emit AdminRemoved(account);\n    }\n}\n\n// File: contracts/Authorizable.sol\n\ncontract Authorizable is Adminable {\n\n    address public authorizedAddress;\n    \n    modifier onlyAuthorized() {\n        require(msg.sender == authorizedAddress);\n        _;\n    }\n\n    function updateAuthorizedAddress(address _address) onlyAdmin public {\n        authorizedAddress = _address;\n    }\n\n}\n\n// File: contracts/SoarStorage.sol\n\n/**\n    @title Soar Storage\n    @author Marek Tlacbaba ([email protected])\n    @dev This smart contract behave as simple storage and can be \n    accessed only by authorized caller who is responsible for any\n    checks and validation. The authorized caller can updated by \n    admins so it allows to update application logic \n    and keeping data and events untouched.\n*/\n\n//TODO\n// use safeMath\ncontract SoarStorage is Authorizable {\n\n    /**\n    Status: \n        0 - unknown\n        1 - created\n        2 - updated\n        3 - deleted\n    */\n    struct ListingObject {\n        address owner;\n        address sponsor;\n        bytes12 geohash;\n        mapping (address => mapping (bytes32 => uint )) sales;\n        uint256 salesCount;\n        uint8 status;\n    }\n\n    uint public counter = 0;\n    mapping (bytes32 => ListingObject) internal listings;\n\n    event Listing (\n        bytes32 filehash,\n        address indexed owner,\n        address indexed sponsor,\n        string previewUrl, \n        string url, \n        string pointWKT,\n        bytes12 geohash, \n        string metadata\n    );\n\n    event ListingUpdated (\n        bytes32 filehash,\n        address indexed owner, \n        address indexed sponsor,\n        string previewUrl, \n        string url, \n        string pointWKT,\n        bytes12 geohash, \n        string metadata \n    );\n\n    event ListingDeleted (\n        bytes32 filehash,\n        address indexed owner,\n        address indexed sponsor\n    );\n\n    event Sale(\n        address indexed buyer, \n        bytes32 id, \n        address indexed owner, \n        address sponsor,\n        bytes32 indexed filehash,\n        uint price \n    );\n\n    function putListing (\n        bytes32 _filehash,\n        address _owner,\n        address _sponsor,\n        string memory _previewUrl, \n        string memory _url, \n        string memory _pointWKT, \n        bytes12 _geohash, \n        string memory _metadata\n    ) \n        public \n        onlyAuthorized \n    {\n        listings[_filehash].owner = _owner;\n        listings[_filehash].sponsor = _sponsor;\n        listings[_filehash].geohash = _geohash;\n        listings[_filehash].status = 1;\n        counter++;\n        emit Listing(\n            _filehash, \n            _owner,\n            _sponsor, \n            _previewUrl, \n            _url, \n            _pointWKT, \n            _geohash, \n            _metadata\n        );\n    }\n\n    function updateListing (\n        bytes32 _filehash,\n        address _owner,\n        address _sponsor,\n        string memory _previewUrl, \n        string memory _url, \n        string memory _pointWKT, \n        bytes12 _geohash, \n        string memory _metadata \n    ) \n        public \n        onlyAuthorized \n    {\n        listings[_filehash].geohash = _geohash;\n        listings[_filehash].status = 2;\n        emit ListingUpdated(\n            _filehash, \n            _owner,\n            _sponsor, \n            _previewUrl, \n            _url, \n            _pointWKT, \n            _geohash, \n            _metadata\n        );\n    }\n\n    function deleteListing(\n        bytes32 _filehash \n    )\n        public \n        onlyAuthorized \n    {\n        listings[_filehash].status = 3;\n        counter--;\n        emit ListingDeleted(_filehash, listings[_filehash].owner, listings[_filehash].sponsor);\n    }\n\n    function putSale (\n        address _buyer,\n        bytes32 _id,\n        bytes32 _filehash, \n        uint256 _price\n    ) \n        public \n        onlyAuthorized \n    {\n        listings[_filehash].sales[_buyer][_id] = _price;\n        listings[_filehash].salesCount++;\n        emit Sale(_buyer, _id, listings[_filehash].owner, listings[_filehash].sponsor, _filehash, _price);\n    }\n\n    function getListingDetails(bytes32 _filehash, address _user, bytes32 _id) \n        public view\n        returns (\n            address owner_,\n            address sponsor_,\n            bytes12 geohash_,\n            uint8 status_,\n            uint256 sale_\n        )\n    {\n        owner_ = listings[_filehash].owner;\n        sponsor_ = listings[_filehash].sponsor;\n        geohash_ = listings[_filehash].geohash;\n        status_ = listings[_filehash].status;\n        sale_ = listings[_filehash].sales[_user][_id];\n    }\n}\n\n// File: contracts/Soar.sol\n\n/**\n    @title Soar\n    @author Marek Tlacbaba ([email protected])\n    @dev Main Soar smart contract with bussiness logic composing\n    all other parts together and it is by design upgradable. When all\n    development is finished then all admins can be removed and no more \n    upgrade will be allowed.\n*/\n \ncontract Soar is Pausable, Adminable {\n\n    // attributes\n    address public soarStorageAddress;\n\n    // contracts\n    SoarStorage private soarStorageContract;\n\n    bytes32 private emptyUserId = \"00000000000000000000000000000000\";\n    address private emptySponsor = address(0);\n\n    mapping (address => mapping ( address => bool)) private sponsors;\n\n    event SponsorAdminAdded(address indexed sponsor, address admin);\n    event SponsorAdminRemoved(address indexed sponsor, address admin);\n\n    modifier listingExistAndNotDeleted(bytes32 _filehash) {\n        (,,,uint8 status,) = soarStorageContract.getListingDetails(_filehash, msg.sender, emptyUserId);\n        require(status == 1 || status == 2, \"Listing must exist and not be deleted\");\n        _;\n    }\n\n    modifier listingNotExistOrDeleted(bytes32 _filehash) {\n        (,,,uint8 status,) = soarStorageContract.getListingDetails(_filehash, msg.sender, emptyUserId);\n        require(status == 0 || status == 3, \"Listing can not exist or must be deleted\");\n        _;\n    }\n\n    modifier onlySponsor(address _sponsor) {\n        require(sponsors[_sponsor][msg.sender] == true, \"Only sponsor\");\n        _;\n    }\n\n    modifier onlySponsorListingOwner(bytes32 _filehash, address _sponsor) {\n        require(sponsors[_sponsor][msg.sender] == true, \"Only sponsor\");\n        (,address sponsor,,uint8 status,) = soarStorageContract.getListingDetails(_filehash, msg.sender, emptyUserId);\n        require(status == 1 || status == 2, \"Listing must exist and not be deleted\");\n        require(sponsor == _sponsor, \"Incorrect sponsor\");\n        _;\n    }\n    \n    constructor() public {}\n\n    /**\n        @dev Create listing as sponsor and put it in storage.\n    */\n    function sponsorCreateListing(\n        address _sponsor,\n        address _owner,\n        bytes32 _filehash,\n        string memory _previewUrl, \n        string memory _url, \n        string memory _pointWKT, \n        bytes12 _geohash, \n        string memory _metadata) \n        public\n        whenNotPaused\n        listingNotExistOrDeleted(_filehash)\n        onlySponsor(_sponsor)\n    {\n        soarStorageContract.putListing(_filehash, _owner, _sponsor, _previewUrl, _url, _pointWKT, _geohash, _metadata);\n    }\n\n    /**\n        @dev Update listing as sponsor in storage.\n    */\n    function sponsorUpdateListing(\n        address _sponsor,\n        address _owner,\n        bytes32 _filehash,\n        string memory _previewUrl, \n        string memory _url, \n        string memory _pointWKT, \n        bytes12 _geohash, \n        string memory _metadata) \n        public\n        whenNotPaused\n        onlySponsorListingOwner(_filehash, _sponsor)\n    {\n        soarStorageContract.updateListing(_filehash, _owner, _sponsor, _previewUrl, _url, _pointWKT, _geohash, _metadata);\n    }\n\n    /**\n        @dev Delete listing as sponsor in storage.\n    */\n    function sponsorDeleteListing(\n        address _sponsor,\n        bytes32 _filehash) \n        public\n        whenNotPaused\n        onlySponsorListingOwner(_filehash, _sponsor)\n    {\n        soarStorageContract.deleteListing(_filehash);\n    }\n\n    function listingExist(bytes32 _filehash) \n        public view\n        whenNotPaused  \n        returns (bool exists_) \n    {\n        (,,,uint8 status,) = soarStorageContract.getListingDetails(_filehash, msg.sender, emptyUserId);\n        exists_ = (status == 1 || status == 2);\n    }\n\n    /**\n    ADMIN FUNCTIONS\n     */\n\n    function addSponsorAdmin(address _sponsor, address _admin) \n        public \n        whenNotPaused\n        onlyAdmin \n    {\n        sponsors[_sponsor][_admin] = true;\n        emit SponsorAdminAdded(_sponsor, _admin);\n    }\n\n    function removeSponsorAdmin(address _sponsor, address _admin) \n        public\n        whenNotPaused\n        onlyAdmin \n    {\n        sponsors[_sponsor][_admin] = false;\n        emit SponsorAdminRemoved(_sponsor, _admin);\n    }\n\n    function isSponsorAdmin(address _sponsor) \n        public view\n        returns (bool isSponsorAdmin_)\n    {\n        isSponsorAdmin_ = sponsors[_sponsor][msg.sender] == true;\n    }\n\n    function setSoarStorageContract(address _address) \n        public\n        whenNotPaused \n        onlyAdmin \n    {\n        soarStorageContract = SoarStorage(_address);\n        soarStorageAddress = _address;\n    }\n\n}",
  "bytecode": "60806040527f30303030303030303030303030303030303030303030303030303030303030306005556000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200007757600080fd5b506200009233620000cd640100000000026401000000009004565b6000600160006101000a81548160ff021916908315150217905550620000c73362000137640100000000026401000000009004565b620002f9565b620000f1816000620001a1640100000000026200255f179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6200015b816002620001a1640100000000026200255f179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33960405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620001de57600080fd5b620001f9828262000264640100000000026401000000009004565b1515156200020657600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620002a257600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61268880620003096000396000f3fe608060405234801561001057600080fd5b5060043610610133576000357c01000000000000000000000000000000000000000000000000000000009004806370480275116100bf5780638bad0c0a1161008e5780638bad0c0a14610712578063b25977791461071c578063e7f371381461076a578063eaf1c48e146107b0578063ebf2380914610a9c57610133565b8063704802751461061c57806382dc1ec41461066057806383561cab146106a45780638456cb591461070857610133565b80633e2aa33f116101065780633e2aa33f1461029e5780633f4ba83a1461058a57806346fbf68e146105945780635c975abb146105f05780636ef8d66d1461061257610133565b80631022f4281461013857806324d7806c14610194578063281e4f43146101f057806334f024381461023a575b600080fd5b61017a6004803603602081101561014e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ae0565b604051808215151515815260200191505060405180910390f35b6101d6600480360360208110156101aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b7a565b604051808215151515815260200191505060405180910390f35b6101f8610b97565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61029c6004803603604081101561025057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bbd565b005b61058860048036036101008110156102b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561031c57600080fd5b82018360208201111561032e57600080fd5b8035906020019184600183028401116401000000008311171561035057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156103b357600080fd5b8201836020820111156103c557600080fd5b803590602001918460018302840111640100000000831117156103e757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561044a57600080fd5b82018360208201111561045c57600080fd5b8035906020019184600183028401116401000000008311171561047e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff191690602001909291908035906020019064010000000081111561050257600080fd5b82018360208201111561051457600080fd5b8035906020019184600183028401116401000000008311171561053657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610d00565b005b610592611375565b005b6105d6600480360360208110156105aa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611424565b604051808215151515815260200191505060405180910390f35b6105f8611441565b604051808215151515815260200191505060405180910390f35b61061a611458565b005b61065e6004803603602081101561063257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611463565b005b6106a26004803603602081101561067657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611483565b005b610706600480360360408110156106ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114a3565b005b6107106115e6565b005b61071a611695565b005b6107686004803603604081101561073257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116a0565b005b6107966004803603602081101561078057600080fd5b8101908080359060200190929190505050611abd565b604051808215151515815260200191505060405180910390f35b610a9a60048036036101008110156107c757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561082e57600080fd5b82018360208201111561084057600080fd5b8035906020019184600183028401116401000000008311171561086257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156108c557600080fd5b8201836020820111156108d757600080fd5b803590602001918460018302840111640100000000831117156108f957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561095c57600080fd5b82018360208201111561096e57600080fd5b8035906020019184600183028401116401000000008311171561099057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1916906020019092919080359060200190640100000000811115610a1457600080fd5b820183602082011115610a2657600080fd5b80359060200191846001830284011164010000000083111715610a4857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611c30565b005b610ade60048036036020811015610ab257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121ff565b005b600060011515600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515149050919050565b6000610b908260026122b490919063ffffffff16565b9050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900460ff16151515610bd957600080fd5b610be233610b7a565b1515610bed57600080fd5b6001600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fc9e86b73f959b84690c19a9ff5a9aaf1432211643e764e7d23a904682a7bc1de82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a25050565b600160009054906101000a900460ff16151515610d1c57600080fd5b858860011515600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610e23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4f6e6c792073706f6e736f72000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de4108aa85336005546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060a06040518083038186803b158015610ef357600080fd5b505afa158015610f07573d6000803e3d6000fd5b505050506040513d60a0811015610f1d57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050505093505092505060018160ff161480610f72575060028160ff16145b1515610fc9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806126106025913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151561106c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e636f72726563742073706f6e736f7200000000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635e6ea10f8b8d8f8d8d8d8d8d6040518963ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001806020018673ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff191681526020018060200185810385528a818151815260200191508051906020019080838360005b838110156111c75780820151818401526020810190506111ac565b50505050905090810190601f1680156111f45780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b8381101561122d578082015181840152602081019050611212565b50505050905090810190601f16801561125a5780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b83811015611293578082015181840152602081019050611278565b50505050905090810190601f1680156112c05780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156112f95780820151818401526020810190506112de565b50505050905090810190601f1680156113265780820380516001836020036101000a031916815260200191505b509c50505050505050505050505050600060405180830381600087803b15801561134f57600080fd5b505af1158015611363573d6000803e3d6000fd5b50505050505050505050505050505050565b61137e33611424565b151561138957600080fd5b600160009054906101000a900460ff1615156113a457600080fd5b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600061143a8260006122b490919063ffffffff16565b9050919050565b6000600160009054906101000a900460ff16905090565b61146133612348565b565b61146c33610b7a565b151561147757600080fd5b611480816123a2565b50565b61148c33611424565b151561149757600080fd5b6114a0816123fc565b50565b600160009054906101000a900460ff161515156114bf57600080fd5b6114c833610b7a565b15156114d357600080fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167fa37b03ffa9ca3e4e24d2a99b422f3ad39735da8bf07eb1c29479e730fe4878fc82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a25050565b6115ef33611424565b15156115fa57600080fd5b600160009054906101000a900460ff1615151561161657600080fd5b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b61169e33612456565b565b600160009054906101000a900460ff161515156116bc57600080fd5b808260011515600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156117c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4f6e6c792073706f6e736f72000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de4108aa85336005546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060a06040518083038186803b15801561189357600080fd5b505afa1580156118a7573d6000803e3d6000fd5b505050506040513d60a08110156118bd57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050505093505092505060018160ff161480611912575060028160ff16145b1515611969576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806126106025913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515611a0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e636f72726563742073706f6e736f7200000000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0491b9b866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015611a9d57600080fd5b505af1158015611ab1573d6000803e3d6000fd5b50505050505050505050565b6000600160009054906101000a900460ff16151515611adb57600080fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de4108aa84336005546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060a06040518083038186803b158015611baa57600080fd5b505afa158015611bbe573d6000803e3d6000fd5b505050506040513d60a0811015611bd457600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050935050505060018160ff161480611c28575060028160ff16145b915050919050565b600160009054906101000a900460ff16151515611c4c57600080fd5b856000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de4108aa83336005546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060a06040518083038186803b158015611d1c57600080fd5b505afa158015611d30573d6000803e3d6000fd5b505050506040513d60a0811015611d4657600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505050935050505060008160ff161480611d9a575060038160ff16145b1515611df1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806126356028913960400191505060405180910390fd5b8960011515600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611ef7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f4f6e6c792073706f6e736f72000000000000000000000000000000000000000081525060200191505060405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663741a1b0f8a8c8e8c8c8c8c8c6040518963ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018060200180602001806020018673ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff191681526020018060200185810385528a818151815260200191508051906020019080838360005b83811015612052578082015181840152602081019050612037565b50505050905090810190601f16801561207f5780820380516001836020036101000a031916815260200191505b50858103845289818151815260200191508051906020019080838360005b838110156120b857808201518184015260208101905061209d565b50505050905090810190601f1680156120e55780820380516001836020036101000a031916815260200191505b50858103835288818151815260200191508051906020019080838360005b8381101561211e578082015181840152602081019050612103565b50505050905090810190601f16801561214b5780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b83811015612184578082015181840152602081019050612169565b50505050905090810190601f1680156121b15780820380516001836020036101000a031916815260200191505b509c50505050505050505050505050600060405180830381600087803b1580156121da57600080fd5b505af11580156121ee573d6000803e3d6000fd5b505050505050505050505050505050565b600160009054906101000a900460ff1615151561221b57600080fd5b61222433610b7a565b151561222f57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156122f157600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61235c8160006124b090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b6123b681600261255f90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e33960405160405180910390a250565b61241081600061255f90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b61246a8160026124b090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f60405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156124ec57600080fd5b6124f682826122b4565b151561250157600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561259b57600080fd5b6125a582826122b4565b1515156125b157600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fe4c697374696e67206d75737420657869737420616e64206e6f742062652064656c657465644c697374696e672063616e206e6f74206578697374206f72206d7573742062652064656c65746564a165627a7a7230582061556aff831fe6efc110d0573753e144facb4db33012a3443c88115bf9a1e3860029"
}