{
  "address": "0x4288f043370910c923f7a600526ca8064da05d0d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Trustee",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-13\n*/\n\npragma solidity ^0.4.17;\n\n// ----------------------------------------------------------------------------\n// Token Trustee Implementation\n//\n// Copyright (c) 2017 OpenST Ltd.\n// https://simpletoken.org/\n//\n// The MIT Licence.\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// SafeMath Library Implementation\n//\n// Copyright (c) 2017 OpenST Ltd.\n// https://simpletoken.org/\n//\n// The MIT Licence.\n//\n// Based on the SafeMath library by the OpenZeppelin team.\n// Copyright (c) 2016 Smart Contract Solutions, Inc.\n// https://github.com/OpenZeppelin/zeppelin-solidity\n// The MIT License.\n// ----------------------------------------------------------------------------\n\n\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n\n        assert(a == 0 || c / a == b);\n\n        return c;\n    }\n\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n\n        return a - b;\n    }\n\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n\n        assert(c >= a);\n\n        return c;\n    }\n}\n\n//\n// Implements basic ownership with 2-step transfers.\n//\ncontract Owned {\n\n    address public owner;\n    address public proposedOwner;\n\n    event OwnershipTransferInitiated(address indexed _proposedOwner);\n    event OwnershipTransferCompleted(address indexed _newOwner);\n\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n\n    modifier onlyOwner() {\n        require(isOwner(msg.sender));\n        _;\n    }\n\n\n    function isOwner(address _address) internal view returns (bool) {\n        return (_address == owner);\n    }\n\n\n    function initiateOwnershipTransfer(address _proposedOwner) public onlyOwner returns (bool) {\n        proposedOwner = _proposedOwner;\n\n        OwnershipTransferInitiated(_proposedOwner);\n\n        return true;\n    }\n\n\n    function completeOwnershipTransfer() public returns (bool) {\n        require(msg.sender == proposedOwner);\n\n        owner = proposedOwner;\n        proposedOwner = address(0);\n\n        OwnershipTransferCompleted(owner);\n\n        return true;\n    }\n}\n\n//\n// Implements a more advanced ownership and permission model based on owner,\n// admin and ops per Simple Token key management specification.\n//\ncontract OpsManaged is Owned {\n\n    address public opsAddress;\n    address public adminAddress;\n\n    event AdminAddressChanged(address indexed _newAddress);\n    event OpsAddressChanged(address indexed _newAddress);\n\n\n    function OpsManaged() public\n        Owned()\n    {\n    }\n\n\n    modifier onlyAdmin() {\n        require(isAdmin(msg.sender));\n        _;\n    }\n\n\n    modifier onlyAdminOrOps() {\n        require(isAdmin(msg.sender) || isOps(msg.sender));\n        _;\n    }\n\n\n    modifier onlyOwnerOrAdmin() {\n        require(isOwner(msg.sender) || isAdmin(msg.sender));\n        _;\n    }\n\n\n    modifier onlyOps() {\n        require(isOps(msg.sender));\n        _;\n    }\n\n\n    function isAdmin(address _address) internal view returns (bool) {\n        return (adminAddress != address(0) && _address == adminAddress);\n    }\n\n\n    function isOps(address _address) internal view returns (bool) {\n        return (opsAddress != address(0) && _address == opsAddress);\n    }\n\n\n    function isOwnerOrOps(address _address) internal view returns (bool) {\n        return (isOwner(_address) || isOps(_address));\n    }\n\n\n    // Owner and Admin can change the admin address. Address can also be set to 0 to 'disable' it.\n    function setAdminAddress(address _adminAddress) external onlyOwnerOrAdmin returns (bool) {\n        require(_adminAddress != owner);\n        require(_adminAddress != address(this));\n        require(!isOps(_adminAddress));\n\n        adminAddress = _adminAddress;\n\n        AdminAddressChanged(_adminAddress);\n\n        return true;\n    }\n\n\n    // Owner and Admin can change the operations address. Address can also be set to 0 to 'disable' it.\n    function setOpsAddress(address _opsAddress) external onlyOwnerOrAdmin returns (bool) {\n        require(_opsAddress != owner);\n        require(_opsAddress != address(this));\n        require(!isAdmin(_opsAddress));\n\n        opsAddress = _opsAddress;\n\n        OpsAddressChanged(_opsAddress);\n\n        return true;\n    }\n}\n\ncontract SimpleTokenConfig {\n\n    string  public constant TOKEN_SYMBOL   = \"ST\";\n    string  public constant TOKEN_NAME     = \"Simple Token\";\n    uint8   public constant TOKEN_DECIMALS = 18;\n\n    uint256 public constant DECIMALSFACTOR = 10**uint256(TOKEN_DECIMALS);\n    uint256 public constant TOKENS_MAX     = 800000000 * DECIMALSFACTOR;\n}\n\ncontract ERC20Interface {\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function name() public view returns (string);\n    function symbol() public view returns (string);\n    function decimals() public view returns (uint8);\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n//\n// Standard ERC20 implementation, with ownership.\n//\ncontract ERC20Token is ERC20Interface, Owned {\n\n    using SafeMath for uint256;\n\n    string  private tokenName;\n    string  private tokenSymbol;\n    uint8   private tokenDecimals;\n    uint256 internal tokenTotalSupply;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n\n\n    function ERC20Token(string _symbol, string _name, uint8 _decimals, uint256 _totalSupply) public\n        Owned()\n    {\n        tokenSymbol      = _symbol;\n        tokenName        = _name;\n        tokenDecimals    = _decimals;\n        tokenTotalSupply = _totalSupply;\n        balances[owner]  = _totalSupply;\n\n        // According to the ERC20 standard, a token contract which creates new tokens should trigger\n        // a Transfer event and transfers of 0 values must also fire the event.\n        Transfer(0x0, owner, _totalSupply);\n    }\n\n\n    function name() public view returns (string) {\n        return tokenName;\n    }\n\n\n    function symbol() public view returns (string) {\n        return tokenSymbol;\n    }\n\n\n    function decimals() public view returns (uint8) {\n        return tokenDecimals;\n    }\n\n\n    function totalSupply() public view returns (uint256) {\n        return tokenTotalSupply;\n    }\n\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        // According to the EIP20 spec, \"transfers of 0 values MUST be treated as normal\n        // transfers and fire the Transfer event\".\n        // Also, should throw if not enough balance. This is taken care of by SafeMath.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n}\n\n//\n// SimpleToken is a standard ERC20 token with some additional functionality:\n// - It has a concept of finalize\n// - Before finalize, nobody can transfer tokens except:\n//     - Owner and operations can transfer tokens\n//     - Anybody can send back tokens to owner\n// - After finalize, no restrictions on token transfers\n//\n\n//\n// Permissions, according to the ST key management specification.\n//\n//                                    Owner    Admin   Ops\n// transfer (before finalize)           x               x\n// transferForm (before finalize)       x               x\n// finalize                                      x\n//\n\ncontract SimpleToken is ERC20Token, OpsManaged, SimpleTokenConfig {\n\n    bool public finalized;\n\n\n    // Events\n    event Burnt(address indexed _from, uint256 _amount);\n    event Finalized();\n\n\n    function SimpleToken() public\n        ERC20Token(TOKEN_SYMBOL, TOKEN_NAME, TOKEN_DECIMALS, TOKENS_MAX)\n        OpsManaged()\n    {\n        finalized = false;\n    }\n\n\n    // Implementation of the standard transfer method that takes into account the finalize flag.\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        checkTransferAllowed(msg.sender, _to);\n\n        return super.transfer(_to, _value);\n    }\n\n\n    // Implementation of the standard transferFrom method that takes into account the finalize flag.\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        checkTransferAllowed(msg.sender, _to);\n\n        return super.transferFrom(_from, _to, _value);\n    }\n\n\n    function checkTransferAllowed(address _sender, address _to) private view {\n        if (finalized) {\n            // Everybody should be ok to transfer once the token is finalized.\n            return;\n        }\n\n        // Owner and Ops are allowed to transfer tokens before the sale is finalized.\n        // This allows the tokens to move from the TokenSale contract to a beneficiary.\n        // We also allow someone to send tokens back to the owner. This is useful among other\n        // cases, for the Trustee to transfer unlocked tokens back to the owner (reclaimTokens).\n        require(isOwnerOrOps(_sender) || _to == owner);\n    }\n\n    // Implement a burn function to permit msg.sender to reduce its balance\n    // which also reduces tokenTotalSupply\n    function burn(uint256 _value) public returns (bool success) {\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        tokenTotalSupply = tokenTotalSupply.sub(_value);\n\n        Burnt(msg.sender, _value);\n\n        return true;\n    }\n\n\n    // Finalize method marks the point where token transfers are finally allowed for everybody.\n    function finalize() external onlyAdmin returns (bool success) {\n        require(!finalized);\n\n        finalized = true;\n\n        Finalized();\n\n        return true;\n    }\n}\n\n//\n// Implements a simple trustee which can release tokens based on\n// an explicit call from the owner.\n//\n\n//\n// Permissions, according to the ST key management specification.\n//\n//                                Owner    Admin   Ops   Revoke\n// grantAllocation                           x      x\n// revokeAllocation                                        x\n// processAllocation                                x\n// reclaimTokens                             x\n// setRevokeAddress                 x                      x\n//\n\ncontract Trustee is OpsManaged {\n\n    using SafeMath for uint256;\n\n\n    SimpleToken public tokenContract;\n\n    struct Allocation {\n        uint256 amountGranted;\n        uint256 amountTransferred;\n        bool    revokable;\n    }\n\n    // The trustee has a special 'revoke' key which is allowed to revoke allocations.\n    address public revokeAddress;\n\n    // Total number of tokens that are currently allocated.\n    // This does not include tokens that have been processed (sent to an address) already or\n    // the ones in the trustee's account that have not been allocated yet.\n    uint256 public totalLocked;\n\n    mapping (address => Allocation) public allocations;\n\n\n    //\n    // Events\n    //\n    event AllocationGranted(address indexed _from, address indexed _account, uint256 _amount, bool _revokable);\n    event AllocationRevoked(address indexed _from, address indexed _account, uint256 _amountRevoked);\n    event AllocationProcessed(address indexed _from, address indexed _account, uint256 _amount);\n    event RevokeAddressChanged(address indexed _newAddress);\n    event TokensReclaimed(uint256 _amount);\n\n\n    function Trustee(SimpleToken _tokenContract) public\n        OpsManaged()\n    {\n        require(address(_tokenContract) != address(0));\n\n        tokenContract = _tokenContract;\n    }\n\n\n    modifier onlyOwnerOrRevoke() {\n        require(isOwner(msg.sender) || isRevoke(msg.sender));\n        _;\n    }\n\n\n    modifier onlyRevoke() {\n        require(isRevoke(msg.sender));\n        _;\n    }\n\n\n    function isRevoke(address _address) private view returns (bool) {\n        return (revokeAddress != address(0) && _address == revokeAddress);\n    }\n\n\n    // Owner and revoke can change the revoke address. Address can also be set to 0 to 'disable' it.\n    function setRevokeAddress(address _revokeAddress) external onlyOwnerOrRevoke returns (bool) {\n        require(_revokeAddress != owner);\n        require(!isAdmin(_revokeAddress));\n        require(!isOps(_revokeAddress));\n\n        revokeAddress = _revokeAddress;\n\n        RevokeAddressChanged(_revokeAddress);\n\n        return true;\n    }\n\n\n    // Allows admin or ops to create new allocations for a specific account.\n    function grantAllocation(address _account, uint256 _amount, bool _revokable) public onlyAdminOrOps returns (bool) {\n        require(_account != address(0));\n        require(_account != address(this));\n        require(_amount > 0);\n\n        // Can't create an allocation if there is already one for this account.\n        require(allocations[_account].amountGranted == 0);\n\n        if (isOps(msg.sender)) {\n            // Once the token contract is finalized, the ops key should not be able to grant allocations any longer.\n            // Before finalized, it is used by the TokenSale contract to allocate pre-sales.\n            require(!tokenContract.finalized());\n        }\n\n        totalLocked = totalLocked.add(_amount);\n        require(totalLocked <= tokenContract.balanceOf(address(this)));\n\n        allocations[_account] = Allocation({\n            amountGranted     : _amount,\n            amountTransferred : 0,\n            revokable         : _revokable\n        });\n\n        AllocationGranted(msg.sender, _account, _amount, _revokable);\n\n        return true;\n    }\n\n\n    // Allows the revoke key to revoke allocations, if revoke is allowed.\n    function revokeAllocation(address _account) external onlyRevoke returns (bool) {\n        require(_account != address(0));\n\n        Allocation memory allocation = allocations[_account];\n\n        require(allocation.revokable);\n\n        uint256 ownerRefund = allocation.amountGranted.sub(allocation.amountTransferred);\n\n        delete allocations[_account];\n\n        totalLocked = totalLocked.sub(ownerRefund);\n\n        AllocationRevoked(msg.sender, _account, ownerRefund);\n\n        return true;\n    }\n\n\n    // Push model which allows ops to transfer tokens to the beneficiary.\n    // The exact amount to transfer is calculated based on agreements with\n    // the beneficiaries. Here we only restrict that the total amount transfered cannot\n    // exceed what has been granted.\n    function processAllocation(address _account, uint256 _amount) external onlyOps returns (bool) {\n        require(_account != address(0));\n        require(_amount > 0);\n\n        Allocation storage allocation = allocations[_account];\n\n        require(allocation.amountGranted > 0);\n\n        uint256 transferable = allocation.amountGranted.sub(allocation.amountTransferred);\n\n        if (transferable < _amount) {\n           return false;\n        }\n\n        allocation.amountTransferred = allocation.amountTransferred.add(_amount);\n\n        // Note that transfer will fail if the token contract has not been finalized yet.\n        require(tokenContract.transfer(_account, _amount));\n\n        totalLocked = totalLocked.sub(_amount);\n\n        AllocationProcessed(msg.sender, _account, _amount);\n\n        return true;\n    }\n\n\n    // Allows the admin to claim back all tokens that are not currently allocated.\n    // Note that the trustee should be able to move tokens even before the token is\n    // finalized because SimpleToken allows sending back to owner specifically.\n    function reclaimTokens() external onlyAdmin returns (bool) {\n        uint256 ownBalance = tokenContract.balanceOf(address(this));\n\n        // If balance <= amount locked, there is nothing to reclaim.\n        require(ownBalance > totalLocked);\n\n        uint256 amountReclaimed = ownBalance.sub(totalLocked);\n\n        address tokenOwner = tokenContract.owner();\n        require(tokenOwner != address(0));\n\n        require(tokenContract.transfer(tokenOwner, amountReclaimed));\n\n        TokensReclaimed(amountReclaimed);\n\n        return true;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051602080610f708339810160405280805160008054600160a060020a03191633600160a060020a039081169190911790915590925082161515905061005557600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055610eec806100846000396000f3006060604052600436106100d75763ffffffff60e060020a6000350416632c1e816d81146100dc5780633c54caa51461010f57806352a9039c1461012257806355575ddb1461016757806355a373d61461018657806356891412146101b5578063707789c5146101da57806388559aaf146101f95780638da5cb5b1461021b5780638ea643761461022e57806395c8d4ee14610241578063a38ce2b414610268578063c0b6f5611461027b578063d153b60c1461029a578063e70b11df146102ad578063e71a7811146102cc578063fc6f9468146102df575b600080fd5b34156100e757600080fd5b6100fb600160a060020a03600435166102f2565b604051901515815260200160405180910390f35b341561011a57600080fd5b6100fb6103c5565b341561012d57600080fd5b610141600160a060020a03600435166105b6565b604051928352602083019190915215156040808301919091526060909101905180910390f35b341561017257600080fd5b6100fb600160a060020a03600435166105da565b341561019157600080fd5b61019961069f565b604051600160a060020a03909116815260200160405180910390f35b34156101c057600080fd5b6101c86106ae565b60405190815260200160405180910390f35b34156101e557600080fd5b6100fb600160a060020a03600435166106b4565b341561020457600080fd5b6100fb600160a060020a0360043516602435610787565b341561022657600080fd5b610199610915565b341561023957600080fd5b610199610924565b341561024c57600080fd5b6100fb600160a060020a03600435166024356044351515610933565b341561027357600080fd5b610199610b80565b341561028657600080fd5b6100fb600160a060020a0360043516610b8f565b34156102a557600080fd5b610199610c04565b34156102b857600080fd5b6100fb600160a060020a0360043516610c13565b34156102d757600080fd5b6100fb610d44565b34156102ea57600080fd5b610199610dcb565b60006102fd33610dda565b8061030c575061030c33610dee565b151561031757600080fd5b600054600160a060020a038381169116141561033257600080fd5b30600160a060020a031682600160a060020a03161415151561035357600080fd5b61035c82610e1e565b1561036657600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384169081179091557f17bb0532ac84902a52bb6799529153f5ea501fc54fbcf3ea00dbd42bceb6b0f460405160405180910390a2506001919050565b6000806000806103d433610dee565b15156103df57600080fd5b600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561043857600080fd5b6102c65a03f1151561044957600080fd5b50505060405180516006549094508411905061046457600080fd5b60065461047890849063ffffffff610e4b16565b600454909250600160a060020a0316638da5cb5b6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156104c357600080fd5b6102c65a03f115156104d457600080fd5b5050506040518051915050600160a060020a03811615156104f457600080fd5b600454600160a060020a031663a9059cbb828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561055357600080fd5b6102c65a03f1151561056457600080fd5b50505060405180519050151561057957600080fd5b7fbce3cc672456937708767d1642a17cacb1962753bd5cff46c8dbd377906a6b4b8260405190815260200160405180910390a16001935050505090565b60076020526000908152604090208054600182015460029092015490919060ff1683565b60006105e533610dda565b806105f457506105f433610e5d565b15156105ff57600080fd5b600054600160a060020a038381169116141561061a57600080fd5b61062382610dee565b1561062d57600080fd5b61063682610e1e565b1561064057600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384169081179091557f14950f6463abdf1281cbe4d16af796cd87405b1c26c2238f9954e04eafe87bdd60405160405180910390a2506001919050565b600454600160a060020a031681565b60065481565b60006106bf33610dda565b806106ce57506106ce33610dee565b15156106d957600080fd5b600054600160a060020a03838116911614156106f457600080fd5b30600160a060020a031682600160a060020a03161415151561071557600080fd5b61071e82610dee565b1561072857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384169081179091557fac46a4511b8366ae3b7cf3cf342e31556274975598dcae03c866f8f0f55d51c460405160405180910390a2506001919050565b600080600061079533610e1e565b15156107a057600080fd5b600160a060020a03851615156107b557600080fd5b600084116107c257600080fd5b600160a060020a03851660009081526007602052604081208054909350116107e957600080fd5b600182015482546107ff9163ffffffff610e4b16565b905083811015610812576000925061090d565b6001820154610827908563ffffffff610e8a16565b6001830155600454600160a060020a031663a9059cbb868660006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561088b57600080fd5b6102c65a03f1151561089c57600080fd5b5050506040518051905015156108b157600080fd5b6006546108c4908563ffffffff610e4b16565b600655600160a060020a038086169033167f5171bdecf41168cfcbc85d1dd8fcfa68bd50d53cf61aa5f8a4609d12334e3afd8660405190815260200160405180910390a3600192505b505092915050565b600054600160a060020a031681565b600254600160a060020a031681565b600061093e33610dee565b8061094d575061094d33610e1e565b151561095857600080fd5b600160a060020a038416151561096d57600080fd5b30600160a060020a031684600160a060020a03161415151561098e57600080fd5b6000831161099b57600080fd5b600160a060020a038416600090815260076020526040902054156109be57600080fd5b6109c733610e1e565b15610a3957600454600160a060020a031663b3f05b976000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610a1457600080fd5b6102c65a03f11515610a2557600080fd5b5050506040518051159050610a3957600080fd5b600654610a4c908463ffffffff610e8a16565b600655600454600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610aa857600080fd5b6102c65a03f11515610ab957600080fd5b505050604051805160065411159050610ad157600080fd5b606060405190810160409081528482526000602080840182905285151583850152600160a060020a0388168252600790522081518155602082015181600101556040820151600291909101805460ff191691151591909117905550600160a060020a038481169033167faf8a849c746f857caadd7644cfb59ee64d62fc8c1aac842d591469b64dceab818585604051918252151560208201526040908101905180910390a35060019392505050565b600554600160a060020a031681565b6000610b9a33610dda565b1515610ba557600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384169081179091557f20f5afdf40bf7b43c89031a5d4369a30b159e512d164aa46124bcb706b4a1caf60405160405180910390a2506001919050565b600154600160a060020a031681565b6000610c1d610ea0565b6000610c2833610e5d565b1515610c3357600080fd5b600160a060020a0384161515610c4857600080fd5b600160a060020a0384166000908152600760205260409081902090606090519081016040908152825482526001830154602083015260029092015460ff1615159181019182529250511515610c9c57600080fd5b610cb2826020015183519063ffffffff610e4b16565b600160a060020a03851660009081526007602052604081208181556001810191909155600201805460ff19169055600654909150610cf6908263ffffffff610e4b16565b600655600160a060020a038085169033167f9550c023e3b81a07bf690bdfc489ebae166c30f918f7aefa6274ba922a1315658360405190815260200160405180910390a35060019392505050565b60015460009033600160a060020a03908116911614610d6257600080fd5b6001805460008054600160a060020a0380841673ffffffffffffffffffffffffffffffffffffffff1992831617928390559216909255167f624adc4c72536289dd9d5439ccdeccd8923cb9af95fb626b21935447c77b840760405160405180910390a250600190565b600354600160a060020a031681565b600054600160a060020a0390811691161490565b600354600090600160a060020a031615801590610e185750600354600160a060020a038381169116145b92915050565b600254600090600160a060020a031615801590610e18575050600254600160a060020a0390811691161490565b600082821115610e5757fe5b50900390565b600554600090600160a060020a031615801590610e18575050600554600160a060020a0390811691161490565b600082820183811015610e9957fe5b9392505050565b6060604051908101604090815260008083526020830181905290820152905600a165627a7a723058203045bfadd496ff91f0119b1beacc606e9fcc87b9284d66e1b5655ef44a731f7700290000000000000000000000002c4e8f2d746113d0696ce89b35f0d8bf88e0aeca",
  "constructorArguments": "0000000000000000000000002c4e8f2d746113d0696ce89b35f0d8bf88e0aeca"
}