{
  "address": "0x844a23f03b15eec241f376a2a95148c78c092a9f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AacCreation",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-07\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n\n//-----------------------------------------------------------------------------\n/// @title Ownable\n/// @dev The Ownable contract has an owner address, and provides basic \n///  authorization control functions, this simplifies the implementation of\n///  \"user permissions\".\n//-----------------------------------------------------------------------------\ncontract Ownable {\n    //-------------------------------------------------------------------------\n    /// @dev Emits when owner address changes by any mechanism.\n    //-------------------------------------------------------------------------\n    event OwnershipTransfer (address previousOwner, address newOwner);\n    \n    // Wallet address that can sucessfully execute onlyOwner functions\n    address owner;\n    \n    //-------------------------------------------------------------------------\n    /// @dev Sets the owner of the contract to the sender account.\n    //-------------------------------------------------------------------------\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @dev Throws if called by any account other than `owner`.\n    //-------------------------------------------------------------------------\n    modifier onlyOwner() {\n        require (msg.sender == owner);\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Transfer control of the contract to a newOwner.\n    /// @dev Throws if `_newOwner` is zero address.\n    /// @param _newOwner The address to transfer ownership to.\n    //-------------------------------------------------------------------------\n    function transferOwnership(address _newOwner) public onlyOwner {\n        // for safety, new owner parameter must not be 0\n        require (_newOwner != address(0));\n        // define local variable for old owner\n        address oldOwner = owner;\n        // set owner to new owner\n        owner = _newOwner;\n        // emit ownership transfer event\n        emit OwnershipTransfer(oldOwner, _newOwner);\n    }\n}\n\n\n//-----------------------------------------------------------------------------\n///@title VIP-180 interface\n//-----------------------------------------------------------------------------\ninterface VIP180 {\n    function transfer (\n        address to, \n        uint tokens\n    ) external returns (bool success);\n\n    function transferFrom (\n        address from, \n        address to, \n        uint tokens\n    ) external returns (bool success);\n}\n\n\ninterface LockedTokenManager {    \n    function lockFrom(\n        address _tokenHolder, \n        address _tokenAddress, \n        uint _tokens, \n        uint _numberOfMonths\n    ) external returns(bool);\n    \n    function transferFromAndLock(\n        address _from,\n        address _to,\n        address _tokenAddress,\n        uint _tokens,\n        uint _numberOfMonths\n    ) external returns (bool);\n}\n\n\ninterface LinkDependency {\n    function onLink(uint _oldUid, uint _newUid) external;\n}\n\n\ninterface AacInterface {\n    function ownerOf(uint _tokenId) external returns(address);\n    function getApproved(uint256 _tokenId) external view returns (address);\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n    function checkExists(uint _tokenId) external view returns(bool);\n    \n    function mint() external;\n    function mintAndSend(address payable _to) external;\n    function link(bytes7 _newUid, uint _aacId, bytes calldata _data) external;\n    function linkExternalNft(uint _aacUid, address _externalAddress, uint _externalId) external;\n}\n\n\ncontract SegmentedTransfer is Ownable {\n    uint public percentageBurned = 50;\n    uint public percentageLocked = 0;\n    uint public percentageTransferredThenLocked = 0;\n    uint public lockMonths = 24;\n    // Lock contract to interface with\n    LockedTokenManager public lockContract;\n\n    //-------------------------------------------------------------------------\n    /// @dev Throws if parameter is zero\n    //-------------------------------------------------------------------------\n    modifier notZero(uint _param) {\n        require(_param != 0);\n        _;\n    }\n    \n    function setLockContract(address _lockAddress) external onlyOwner {\n        lockContract = LockedTokenManager(_lockAddress);\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Set percentages of tokens to burn, lock, transferLock.\n    /// @dev Throws if the sender is not the contract owner. Throws if sum of\n    ///  new amounts is greater than 100.\n    /// @param _burned The new percentage to burn.\n    /// @param _locked The new percentage to lock.\n    /// @param _transferLocked The new percentage to transfer then lock.\n    //-------------------------------------------------------------------------\n    function setPercentages(uint _burned, uint _locked, uint _transferLocked, uint _lockMonths) \n        external \n        onlyOwner\n    {\n        require (_burned + _locked + _transferLocked <= 100);\n        percentageBurned = _burned;\n        percentageLocked = _locked;\n        percentageTransferredThenLocked = _transferLocked;\n        lockMonths = _lockMonths;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice (1)Burn (2)Lock (3)TransferThenLock (4)Transfer\n    //-------------------------------------------------------------------------\n    function segmentedTransfer(\n        address _tokenContractAddress, \n        uint _totalTokens\n    ) internal {\n        uint tokensLeft = _totalTokens;\n        uint amount;\n        // burn\n        if (percentageBurned > 0) {\n            amount = _totalTokens * percentageBurned / 100;\n            VIP180(_tokenContractAddress).transferFrom(msg.sender, address(0), amount);\n            tokensLeft -= amount;\n        }\n        // Lock\n        if (percentageLocked > 0) {\n            amount = _totalTokens * percentageLocked / 100;\n            lockContract.lockFrom(msg.sender, _tokenContractAddress, lockMonths, amount);\n            tokensLeft -= amount;\n        }\n        // Transfer Then Lock\n        if (percentageTransferredThenLocked > 0) {\n            amount = _totalTokens * percentageTransferredThenLocked / 100;\n            lockContract.transferFromAndLock(msg.sender, address(this), _tokenContractAddress, lockMonths, amount);\n            tokensLeft -= amount;\n        }\n        // Transfer\n        if (tokensLeft > 0) {\n            VIP180(_tokenContractAddress).transferFrom(msg.sender, owner, tokensLeft);\n        }\n    }   \n}\n\n\ncontract AacCreation is SegmentedTransfer {\n    \n    // EHrTs needed to mint one AAC\n    uint public priceToMint;\n    \n    // UID value is 7 bytes. Max value is 2**56 - 1\n    uint constant UID_MAX = 0xFFFFFFFFFFFFFF;\n    \n    // EHrT Contract address.\n    address public ehrtContractAddress;\n    \n    LinkDependency public coloredEhrtContract;\n    LinkDependency public externalTokensContract;\n    \n    AacInterface public aacContract;\n    \n    \n    \n    // Whitelist of addresses allowed to link AACs to RFID tags\n    mapping (address => bool) public allowedToLink;\n    \n    \n    //-------------------------------------------------------------------------\n    /// @dev Throws if called by any account other than token owner, approved\n    ///  address, or authorized operator.\n    //-------------------------------------------------------------------------\n    modifier canOperate(uint _uid) {\n        // sender must be owner of AAC #uid, or sender must be the\n        //  approved address of AAC #uid, or an authorized operator for\n        //  AAC owner\n        address owner = aacContract.ownerOf(_uid);\n        require (\n            msg.sender == owner ||\n            msg.sender == aacContract.getApproved(_uid) ||\n            aacContract.isApprovedForAll(owner, msg.sender),\n            \"Not authorized to operate for this AAC\"\n        );\n        _;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Update AAC contract with new contract address.\n    /// @param _newAddress Updated contract address.\n    //-------------------------------------------------------------------------\n    function updateAacContract(address _newAddress) external onlyOwner {\n        aacContract = AacInterface(_newAddress);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Update EHrT address variable with new contract address.\n    /// @dev Throws if `_newAddress` is the zero address.\n    /// @param _newAddress Updated contract address.\n    //-------------------------------------------------------------------------\n    function updateEhrtContractAddress(address _newAddress) external onlyOwner {\n        ehrtContractAddress = _newAddress;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Update Colored EHrT contract with new contract address.\n    /// @dev Throws if `_newAddress` is the zero address.\n    /// @param _newAddress Updated contract address.\n    //-------------------------------------------------------------------------\n    function updateColoredEhrtContractAddress(address _newAddress) external onlyOwner {\n        coloredEhrtContract = LinkDependency(_newAddress);\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Update Colored EHrT contract with new contract address.\n    /// @dev Throws if `_newAddress` is the zero address.\n    /// @param _newAddress Updated contract address.\n    //-------------------------------------------------------------------------\n    function updateExternalTokensContractAddress(address _newAddress) external onlyOwner {\n        externalTokensContract = LinkDependency(_newAddress);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Change the number of EHrT needed to mint a new AAC\n    /// @dev Throws if `_newPrice` is zero.\n    /// @param _newPrice The new price to mint (in pWei)\n    //-------------------------------------------------------------------------\n    function changeAacPrice(uint _newPrice) external onlyOwner {\n        priceToMint = _newPrice;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Allow or ban an address from linking AACs\n    /// @dev Throws if sender is not contract owner\n    /// @param _linker The address to whitelist\n    //-------------------------------------------------------------------------\n    function whitelistLinker(address _linker, bool _isAllowed) external onlyOwner {\n        allowedToLink[_linker] = _isAllowed;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @notice Transfer EHrTs to mint a new empty AAC for yourself.\n    /// @dev Sender must have approved this contract address as an authorized\n    ///  spender with at least \"priceToMint\" EHrTs. Throws if the sender has\n    ///  insufficient balance. Throws if sender has not granted this contract's\n    ///  address sufficient allowance.\n    //-------------------------------------------------------------------------\n    function mint() external {\n        segmentedTransfer(ehrtContractAddress, priceToMint);\n\n        aacContract.mintAndSend(msg.sender);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Transfer EHrTs to mint a new empty AAC for '_to'.\n    /// @dev Sender must have approved this contract address as an authorized\n    ///  spender with at least \"priceToMint\" tokens. Throws if the sender has\n    ///  insufficient balance. Throws if sender has not granted this contract's\n    ///  address sufficient allowance.\n    /// @param _to The address to deduct EHrTs from and send new AAC to.\n    //-------------------------------------------------------------------------\n    function mintAndSend(address payable _to) external {\n        segmentedTransfer(ehrtContractAddress, priceToMint);\n        \n        aacContract.mintAndSend(_to);\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Change AAC #`_aacId` to AAC #`_newUid`. Writes any\n    ///  data passed through '_data' into the AAC's public data.\n    /// @dev Throws if AAC #`_aacId` does not exist. Throws if sender is\n    ///  not approved to operate for AAC. Throws if '_aacId' is smaller\n    ///  than 8 bytes. Throws if '_newUid' is bigger than 7 bytes. Throws if \n    ///  '_newUid' is zero. Throws if '_newUid' is already taken.\n    /// @param _newUid The UID of the RFID chip to link to the AAC\n    /// @param _aacId The UID of the empty AAC to link\n    /// @param _data A byte string of data to attach to the AAC\n    //-------------------------------------------------------------------------\n    function link(\n        bytes7 _newUid, \n        uint _currentUid, \n        bytes calldata _data\n    ) external canOperate(_currentUid) {\n        require (allowedToLink[msg.sender]);\n        //Aac storage aac = aacArray[uidToAacIndex[_aacId]];\n        // _aacId must be an empty AAC\n        require (_currentUid > UID_MAX);\n        // _newUid field cannot be empty or greater than 7 bytes\n        require (_newUid > 0 && uint56(_newUid) < UID_MAX);\n        // an AAC with the new UID must not currently exist\n        require (aacContract.checkExists(_currentUid) == false);\n        \n        aacContract.link(_newUid, _currentUid, _data);\n        \n        coloredEhrtContract.onLink(_currentUid, uint(uint56(_newUid)));\n        externalTokensContract.onLink(_currentUid, uint(uint56(_newUid)));\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"lockMonths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateColoredEhrtContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aacContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_linker\",\"type\":\"address\"},{\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"whitelistLinker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ehrtContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burned\",\"type\":\"uint256\"},{\"name\":\"_locked\",\"type\":\"uint256\"},{\"name\":\"_transferLocked\",\"type\":\"uint256\"},{\"name\":\"_lockMonths\",\"type\":\"uint256\"}],\"name\":\"setPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateExternalTokensContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeAacPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUid\",\"type\":\"bytes7\"},{\"name\":\"_currentUid\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"link\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateAacContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedToLink\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"setLockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coloredEhrtContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageTransferredThenLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateEhrtContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageBurned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"externalTokensContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526032600155600060025560006003556018600455336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611f8d806100676000396000f3fe60806040526004361061012d576000357c0100000000000000000000000000000000000000000000000000000000900480630cc349bd146101325780631249c58b1461015d5780631b9ad5af1461017457806325fe1505146101c55780633db4ac3b1461021c5780634004ac3c146102795780634dc1dbec146102d05780635027b650146102fb5780635f089b97146103545780636a4372f6146103a557806373778a7c146103d0578063753868e31461040b57806383684bbb14610462578063a2abb32514610518578063a8d68ed114610569578063acd487c2146105d2578063bd2c44cc14610623578063c2b299a71461067a578063c501ba59146106a5578063c9ccc017146106f6578063cd0a7f8614610747578063e7b7ce2414610772578063f2fde38b146107c9575b600080fd5b34801561013e57600080fd5b5061014761081a565b6040518082815260200191505060405180910390f35b34801561016957600080fd5b50610172610820565b005b34801561018057600080fd5b506101c36004803603602081101561019757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610925565b005b3480156101d157600080fd5b506101da6109c4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022857600080fd5b506102776004803603604081101561023f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506109ea565b005b34801561028557600080fd5b5061028e610aa0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102dc57600080fd5b506102e5610ac6565b6040518082815260200191505060405180910390f35b34801561030757600080fd5b506103526004803603608081101561031e57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610acc565b005b34801561036057600080fd5b506103a36004803603602081101561037757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b5d565b005b3480156103b157600080fd5b506103ba610bfc565b6040518082815260200191505060405180910390f35b3480156103dc57600080fd5b50610409600480360360208110156103f357600080fd5b8101908080359060200190929190505050610c02565b005b34801561041757600080fd5b50610420610c67565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046e57600080fd5b506105166004803603606081101561048557600080fd5b81019080803578ffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919080359060200190929190803590602001906401000000008111156104d257600080fd5b8201836020820111156104e457600080fd5b8035906020019184600183028401116401000000008311171561050657600080fd5b9091929391929390505050610c8d565b005b34801561052457600080fd5b506105676004803603602081101561053b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114f2565b005b34801561057557600080fd5b506105b86004803603602081101561058c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611591565b604051808215151515815260200191505060405180910390f35b3480156105de57600080fd5b50610621600480360360208110156105f557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115b1565b005b34801561062f57600080fd5b50610638611650565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561068657600080fd5b5061068f611676565b6040518082815260200191505060405180910390f35b3480156106b157600080fd5b506106f4600480360360208110156106c857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061167c565b005b34801561070257600080fd5b506107456004803603602081101561071957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611782565b005b34801561075357600080fd5b5061075c611821565b6040518082815260200191505060405180910390f35b34801561077e57600080fd5b50610787611827565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107d557600080fd5b50610818600480360360208110156107ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061184d565b005b60045481565b61084e600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166006546119e5565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c501ba59336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561090b57600080fd5b505af115801561091f573d6000803e3d6000fd5b50505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561098057600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a4557600080fd5b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b2757600080fd5b6064828486010111151515610b3b57600080fd5b8360018190555082600281905550816003819055508060048190555050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb857600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c5d57600080fd5b8060068190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b826000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015610d2157600080fd5b505af1158015610d35573d6000803e3d6000fd5b505050506040513d6020811015610d4b57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e8c5750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081812fc836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015610e2257600080fd5b505afa158015610e36573d6000803e3d6000fd5b505050506040513d6020811015610e4c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610fbd5750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e985e9c582336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015610f8157600080fd5b505afa158015610f95573d6000803e3d6000fd5b505050506040513d6020811015610fab57600080fd5b81019080805190602001909291905050505b1515611057576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f4e6f7420617574686f72697a656420746f206f70657261746520666f7220746881526020017f697320414143000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156110af57600080fd5b66ffffffffffffff851115156110c457600080fd5b6000790100000000000000000000000000000000000000000000000000028678ffffffffffffffffffffffffffffffffffffffffffffffffff1916118015611138575066ffffffffffffff86790100000000000000000000000000000000000000000000000000900466ffffffffffffff16105b151561114357600080fd5b60001515600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e2e44e8876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156111d657600080fd5b505afa1580156111ea573d6000803e3d6000fd5b505050506040513d602081101561120057600080fd5b8101908080519060200190929190505050151514151561121f57600080fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166383684bbb878787876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808578ffffffffffffffffffffffffffffffffffffffffffffffffff191678ffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505095505050505050600060405180830381600087803b15801561132457600080fd5b505af1158015611338573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323d523ef8688790100000000000000000000000000000000000000000000000000900466ffffffffffffff166040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156113fb57600080fd5b505af115801561140f573d6000803e3d6000fd5b50505050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323d523ef8688790100000000000000000000000000000000000000000000000000900466ffffffffffffff166040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156114d257600080fd5b505af11580156114e6573d6000803e3d6000fd5b50505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561154d57600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b6020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561160c57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6116aa600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166006546119e5565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c501ba59826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561176757600080fd5b505af115801561177b573d6000803e3d6000fd5b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117dd57600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60015481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118a857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156118e457600080fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f22500af037c600dd7b720644ab6e358635085601d9ac508ad83eb2d6b2d729ca8183604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15050565b60008190506000806001541115611b235760646001548402811515611a0657fe5b0490508373ffffffffffffffffffffffffffffffffffffffff166323b872dd336000846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611ae157600080fd5b505af1158015611af5573d6000803e3d6000fd5b505050506040513d6020811015611b0b57600080fd5b81019080805190602001909291905050505080820391505b60006002541115611c865760646002548402811515611b3e57fe5b049050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcef06bf3386600454856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001945050505050602060405180830381600087803b158015611c4457600080fd5b505af1158015611c58573d6000803e3d6000fd5b505050506040513d6020811015611c6e57600080fd5b81019080805190602001909291905050505080820391505b60006003541115611e1d5760646003548402811515611ca157fe5b049050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cda092d0333087600454866040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200195505050505050602060405180830381600087803b158015611ddb57600080fd5b505af1158015611def573d6000803e3d6000fd5b505050506040513d6020811015611e0557600080fd5b81019080805190602001909291905050505080820391505b6000821115611f5b578373ffffffffffffffffffffffffffffffffffffffff166323b872dd336000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611f1e57600080fd5b505af1158015611f32573d6000803e3d6000fd5b505050506040513d6020811015611f4857600080fd5b8101908080519060200190929190505050505b5050505056fea165627a7a72305820a27a9ab1152d9acc52415b928c74cf50f7144e301993acdefa18acbe9ce60bce0029"
}