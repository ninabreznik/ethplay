{
  "address": "0x9e083eb1c302e2fbf7cb50536608902c0b38743e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AOSettingAttribute",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ninterface IAOSettingAttribute {\n\tfunction add(uint256 _settingId, address _creatorNameId, string calldata _settingName, address _creatorTAOId, address _associatedTAOId, string calldata _extraData) external returns (bytes32, bytes32);\n\n\tfunction getSettingData(uint256 _settingId) external view returns (uint256, address, address, address, string memory, bool, bool, bool, string memory);\n\n\tfunction approveAdd(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external returns (bool);\n\n\tfunction finalizeAdd(uint256 _settingId, address _creatorTAOAdvocate) external returns (bool);\n\n\tfunction update(uint256 _settingId, address _associatedTAOAdvocate, address _proposalTAOId, string calldata _extraData) external returns (bool);\n\n\tfunction getSettingState(uint256 _settingId) external view returns (uint256, bool, address, address, address, string memory);\n\n\tfunction approveUpdate(uint256 _settingId, address _proposalTAOAdvocate, bool _approved) external returns (bool);\n\n\tfunction finalizeUpdate(uint256 _settingId, address _associatedTAOAdvocate) external returns (bool);\n\n\tfunction addDeprecation(uint256 _settingId, address _creatorNameId, address _creatorTAOId, address _associatedTAOId, uint256 _newSettingId, address _newSettingContractAddress) external returns (bytes32, bytes32);\n\n\tfunction getSettingDeprecation(uint256 _settingId) external view returns (uint256, address, address, address, bool, bool, bool, bool, uint256, uint256, address, address);\n\n\tfunction approveDeprecation(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external returns (bool);\n\n\tfunction finalizeDeprecation(uint256 _settingId, address _creatorTAOAdvocate) external returns (bool);\n\n\tfunction settingExist(uint256 _settingId) external view returns (bool);\n\n\tfunction getLatestSettingId(uint256 _settingId) external view returns (uint256);\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n\n\n/**\n * @title AOSettingAttribute\n *\n * This contract stores all AO setting data/state\n */\ncontract AOSettingAttribute is TheAO, IAOSettingAttribute {\n\tINameTAOPosition internal _nameTAOPosition;\n\n\tstruct SettingData {\n\t\tuint256 settingId;\t\t\t\t// Identifier of this setting\n\t\taddress creatorNameId;\t\t\t// The nameId that created the setting\n\t\taddress creatorTAOId;\t\t// The taoId that created the setting\n\t\taddress associatedTAOId;\t// The taoId that the setting affects\n\t\tstring settingName;\t\t\t\t// The human-readable name of the setting\n\t\tbool pendingCreate;\t\t\t\t// State when associatedTAOId has not accepted setting\n\t\tbool locked;\t\t\t\t\t// State when pending anything (cannot change if locked)\n\t\tbool rejected;\t\t\t\t\t// State when associatedTAOId rejected this setting\n\t\tstring settingDataJSON;\t\t\t// Catch-all\n\t}\n\n\tstruct SettingState {\n\t\tuint256 settingId;\t\t\t\t// Identifier of this setting\n\t\tbool pendingUpdate;\t\t\t\t// State when setting is in process of being updated\n\t\taddress updateAdvocateNameId;\t// The nameId of the Advocate that performed the update\n\n\t\t/**\n\t\t * A child of the associatedTAOId with the update Logos.\n\t\t * This tells the setting contract that there is a proposal TAO that is a Child TAO\n\t\t * of the associated TAO, which will be responsible for deciding if the update to the\n\t\t * setting is accepted or rejected.\n\t\t */\n\t\taddress proposalTAOId;\n\n\t\t/**\n\t\t * The proposalTAOId moves here when setting value changes successfully\n\t\t */\n\t\taddress lastUpdateTAOId;\n\n\t\tstring settingStateJSON;\t\t// Catch-all\n\t}\n\n\tstruct SettingDeprecation {\n\t\tuint256 settingId;\t\t\t\t// Identifier of this setting\n\t\taddress creatorNameId;\t\t\t// The nameId that created this deprecation\n\t\taddress creatorTAOId;\t\t// The taoId that created this deprecation\n\t\taddress associatedTAOId;\t// The taoId that the setting affects\n\t\tbool pendingDeprecated;\t\t\t// State when associatedTAOId has not accepted setting\n\t\tbool locked;\t\t\t\t\t// State when pending anything (cannot change if locked)\n\t\tbool rejected;\t\t\t\t\t// State when associatedTAOId rejected this setting\n\t\tbool migrated;\t\t\t\t\t// State when this setting is fully migrated\n\n\t\t// holds the pending new settingId value when a deprecation is set\n\t\tuint256 pendingNewSettingId;\n\n\t\t// holds the new settingId that has been approved by associatedTAOId\n\t\tuint256 newSettingId;\n\n\t\t// holds the pending new contract address for this setting\n\t\taddress pendingNewSettingContractAddress;\n\n\t\t// holds the new contract address for this setting\n\t\taddress newSettingContractAddress;\n\t}\n\n\tstruct AssociatedTAOSetting {\n\t\tbytes32 associatedTAOSettingId;\t\t// Identifier\n\t\taddress associatedTAOId;\t\t\t// The TAO ID that the setting is associated to\n\t\tuint256 settingId;\t\t\t\t\t\t// The Setting ID that is associated with the TAO ID\n\t}\n\n\tstruct CreatorTAOSetting {\n\t\tbytes32 creatorTAOSettingId;\t\t// Identifier\n\t\taddress creatorTAOId;\t\t\t\t// The TAO ID that the setting was created from\n\t\tuint256 settingId;\t\t\t\t\t\t// The Setting ID created from the TAO ID\n\t}\n\n\tstruct AssociatedTAOSettingDeprecation {\n\t\tbytes32 associatedTAOSettingDeprecationId;\t\t// Identifier\n\t\taddress associatedTAOId;\t\t\t\t\t\t// The TAO ID that the setting is associated to\n\t\tuint256 settingId;\t\t\t\t\t\t\t\t\t// The Setting ID that is associated with the TAO ID\n\t}\n\n\tstruct CreatorTAOSettingDeprecation {\n\t\tbytes32 creatorTAOSettingDeprecationId;\t\t\t// Identifier\n\t\taddress creatorTAOId;\t\t\t\t\t\t\t// The TAO ID that the setting was created from\n\t\tuint256 settingId;\t\t\t\t\t\t\t\t\t// The Setting ID created from the TAO ID\n\t}\n\n\t// Mapping from settingId to it's data\n\tmapping (uint256 => SettingData) internal settingDatas;\n\n\t// Mapping from settingId to it's state\n\tmapping (uint256 => SettingState) internal settingStates;\n\n\t// Mapping from settingId to it's deprecation info\n\tmapping (uint256 => SettingDeprecation) internal settingDeprecations;\n\n\t// Mapping from associatedTAOSettingId to AssociatedTAOSetting\n\tmapping (bytes32 => AssociatedTAOSetting) internal associatedTAOSettings;\n\n\t// Mapping from creatorTAOSettingId to CreatorTAOSetting\n\tmapping (bytes32 => CreatorTAOSetting) internal creatorTAOSettings;\n\n\t// Mapping from associatedTAOSettingDeprecationId to AssociatedTAOSettingDeprecation\n\tmapping (bytes32 => AssociatedTAOSettingDeprecation) internal associatedTAOSettingDeprecations;\n\n\t// Mapping from creatorTAOSettingDeprecationId to CreatorTAOSettingDeprecation\n\tmapping (bytes32 => CreatorTAOSettingDeprecation) internal creatorTAOSettingDeprecations;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(address _nameTAOPositionAddress) public {\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO sets NameTAOPosition address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Add setting data/state\n\t * @param _settingId The ID of the setting\n\t * @param _creatorNameId The nameId that created the setting\n\t * @param _settingName The human-readable name of the setting\n\t * @param _creatorTAOId The taoId that created the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @param _extraData Catch-all string value to be stored if exist\n\t * @return The ID of the \"Associated\" setting\n\t * @return The ID of the \"Creator\" setting\n\t */\n\tfunction add(uint256 _settingId, address _creatorNameId, string calldata _settingName, address _creatorTAOId, address _associatedTAOId, string calldata _extraData) external inWhitelist returns (bytes32, bytes32) {\n\t\t// Store setting data/state\n\t\trequire (_storeSettingDataState(_settingId, _creatorNameId, _settingName, _creatorTAOId, _associatedTAOId, _extraData));\n\n\t\t// Store the associatedTAOSetting/creatorTAOSetting info\n\t\treturn (\n\t\t\t_storeAssociatedTAOSetting(_associatedTAOId, _settingId),\n\t\t\t_storeCreatorTAOSetting(_creatorTAOId, _settingId)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get Setting Data of a setting ID\n\t * @param _settingId The ID of the setting\n\t */\n\tfunction getSettingData(uint256 _settingId) external view returns (uint256, address, address, address, string memory, bool, bool, bool, string memory) {\n\t\tSettingData memory _settingData = settingDatas[_settingId];\n\t\treturn (\n\t\t\t_settingData.settingId,\n\t\t\t_settingData.creatorNameId,\n\t\t\t_settingData.creatorTAOId,\n\t\t\t_settingData.associatedTAOId,\n\t\t\t_settingData.settingName,\n\t\t\t_settingData.pendingCreate,\n\t\t\t_settingData.locked,\n\t\t\t_settingData.rejected,\n\t\t\t_settingData.settingDataJSON\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get Associated TAO Setting info\n\t * @param _associatedTAOSettingId The ID of the associated tao setting\n\t */\n\tfunction getAssociatedTAOSetting(bytes32 _associatedTAOSettingId) public view returns (bytes32, address, uint256) {\n\t\tAssociatedTAOSetting memory _associatedTAOSetting = associatedTAOSettings[_associatedTAOSettingId];\n\t\treturn (\n\t\t\t_associatedTAOSetting.associatedTAOSettingId,\n\t\t\t_associatedTAOSetting.associatedTAOId,\n\t\t\t_associatedTAOSetting.settingId\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get Creator TAO Setting info\n\t * @param _creatorTAOSettingId The ID of the creator tao setting\n\t */\n\tfunction getCreatorTAOSetting(bytes32 _creatorTAOSettingId) public view returns (bytes32, address, uint256) {\n\t\tCreatorTAOSetting memory _creatorTAOSetting = creatorTAOSettings[_creatorTAOSettingId];\n\t\treturn (\n\t\t\t_creatorTAOSetting.creatorTAOSettingId,\n\t\t\t_creatorTAOSetting.creatorTAOId,\n\t\t\t_creatorTAOSetting.settingId\n\t\t);\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's _associatedTAOId approves setting creation\n\t * @param _settingId The ID of the setting to approve\n\t * @param _associatedTAOAdvocate The advocate of the associated TAO\n\t * @param _approved Whether to approve or reject\n\t * @return true on success\n\t */\n\tfunction approveAdd(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external inWhitelist returns (bool) {\n\t\t// Make sure setting exists and needs approval\n\t\tSettingData storage _settingData = settingDatas[_settingId];\n\t\trequire (_settingData.settingId == _settingId &&\n\t\t\t_settingData.pendingCreate == true &&\n\t\t\t_settingData.locked == true &&\n\t\t\t_settingData.rejected == false &&\n\t\t\t_associatedTAOAdvocate != address(0) &&\n\t\t\t_associatedTAOAdvocate == _nameTAOPosition.getAdvocate(_settingData.associatedTAOId)\n\t\t);\n\n\t\tif (_approved) {\n\t\t\t// Unlock the setting so that advocate of creatorTAOId can finalize the creation\n\t\t\t_settingData.locked = false;\n\t\t} else {\n\t\t\t// Reject the setting\n\t\t\t_settingData.pendingCreate = false;\n\t\t\t_settingData.rejected = true;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's _creatorTAOId finalizes the setting creation once the setting is approved\n\t * @param _settingId The ID of the setting to be finalized\n\t * @param _creatorTAOAdvocate The advocate of the creator TAO\n\t * @return true on success\n\t */\n\tfunction finalizeAdd(uint256 _settingId, address _creatorTAOAdvocate) external inWhitelist returns (bool) {\n\t\t// Make sure setting exists and needs approval\n\t\tSettingData storage _settingData = settingDatas[_settingId];\n\t\trequire (_settingData.settingId == _settingId &&\n\t\t\t_settingData.pendingCreate == true &&\n\t\t\t_settingData.locked == false &&\n\t\t\t_settingData.rejected == false &&\n\t\t\t_creatorTAOAdvocate != address(0) &&\n\t\t\t_creatorTAOAdvocate == _nameTAOPosition.getAdvocate(_settingData.creatorTAOId)\n\t\t);\n\n\t\t// Update the setting data\n\t\t_settingData.pendingCreate = false;\n\t\t_settingData.locked = true;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Store setting update data\n\t * @param _settingId The ID of the setting to be updated\n\t * @param _associatedTAOAdvocate The setting's associatedTAOId's advocate's name address\n\t * @param _proposalTAOId The child of the associatedTAOId with the update Logos\n\t * @param _extraData Catch-all string value to be stored if exist\n\t * @return true on success\n\t */\n\tfunction update(uint256 _settingId, address _associatedTAOAdvocate, address _proposalTAOId, string calldata _extraData) external inWhitelist returns (bool) {\n\t\t// Make sure setting is created\n\t\tSettingData memory _settingData = settingDatas[_settingId];\n\t\trequire (_settingData.settingId == _settingId &&\n\t\t\t_settingData.pendingCreate == false &&\n\t\t\t_settingData.locked == true &&\n\t\t\t_settingData.rejected == false &&\n\t\t\t_associatedTAOAdvocate != address(0) &&\n\t\t\t_associatedTAOAdvocate == _nameTAOPosition.getAdvocate(_settingData.associatedTAOId)\n\t\t);\n\n\t\t// Make sure setting is not in the middle of updating\n\t\tSettingState storage _settingState = settingStates[_settingId];\n\t\trequire (_settingState.pendingUpdate == false);\n\n\t\t// Make sure setting is not yet deprecated\n\t\tSettingDeprecation memory _settingDeprecation = settingDeprecations[_settingId];\n\t\tif (_settingDeprecation.settingId == _settingId) {\n\t\t\trequire (_settingDeprecation.migrated == false);\n\t\t}\n\n\t\t// Store the SettingState data\n\t\t_settingState.pendingUpdate = true;\n\t\t_settingState.updateAdvocateNameId = _associatedTAOAdvocate;\n\t\t_settingState.proposalTAOId = _proposalTAOId;\n\t\t_settingState.settingStateJSON = _extraData;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Get setting state\n\t * @param _settingId The ID of the setting\n\t */\n\tfunction getSettingState(uint256 _settingId) external view returns (uint256, bool, address, address, address, string memory) {\n\t\tSettingState memory _settingState = settingStates[_settingId];\n\t\treturn (\n\t\t\t_settingState.settingId,\n\t\t\t_settingState.pendingUpdate,\n\t\t\t_settingState.updateAdvocateNameId,\n\t\t\t_settingState.proposalTAOId,\n\t\t\t_settingState.lastUpdateTAOId,\n\t\t\t_settingState.settingStateJSON\n\t\t);\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's proposalTAOId approves the setting update\n\t * @param _settingId The ID of the setting to be approved\n\t * @param _proposalTAOAdvocate The advocate of the proposal TAO\n\t * @param _approved Whether to approve or reject\n\t * @return true on success\n\t */\n\tfunction approveUpdate(uint256 _settingId, address _proposalTAOAdvocate, bool _approved) external inWhitelist returns (bool) {\n\t\t// Make sure setting is created\n\t\tSettingData storage _settingData = settingDatas[_settingId];\n\t\trequire (_settingData.settingId == _settingId && _settingData.pendingCreate == false && _settingData.locked == true && _settingData.rejected == false);\n\n\t\t// Make sure setting update exists and needs approval\n\t\tSettingState storage _settingState = settingStates[_settingId];\n\t\trequire (_settingState.settingId == _settingId &&\n\t\t\t_settingState.pendingUpdate == true &&\n\t\t\t_proposalTAOAdvocate != address(0) &&\n\t\t\t_proposalTAOAdvocate == _nameTAOPosition.getAdvocate(_settingState.proposalTAOId)\n\t\t);\n\n\t\tif (_approved) {\n\t\t\t// Unlock the setting so that advocate of associatedTAOId can finalize the update\n\t\t\t_settingData.locked = false;\n\t\t} else {\n\t\t\t// Set pendingUpdate to false\n\t\t\t_settingState.pendingUpdate = false;\n\t\t\t_settingState.proposalTAOId = address(0);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's _associatedTAOId finalizes the setting update once the setting is approved\n\t * @param _settingId The ID of the setting to be finalized\n\t * @param _associatedTAOAdvocate The advocate of the associated TAO\n\t * @return true on success\n\t */\n\tfunction finalizeUpdate(uint256 _settingId, address _associatedTAOAdvocate) external inWhitelist returns (bool) {\n\t\t// Make sure setting is created\n\t\tSettingData storage _settingData = settingDatas[_settingId];\n\t\trequire (_settingData.settingId == _settingId &&\n\t\t\t_settingData.pendingCreate == false &&\n\t\t\t_settingData.locked == false &&\n\t\t\t_settingData.rejected == false &&\n\t\t\t_associatedTAOAdvocate != address(0) &&\n\t\t\t_associatedTAOAdvocate == _nameTAOPosition.getAdvocate(_settingData.associatedTAOId)\n\t\t);\n\n\t\t// Make sure setting update exists and needs approval\n\t\tSettingState storage _settingState = settingStates[_settingId];\n\t\trequire (_settingState.settingId == _settingId && _settingState.pendingUpdate == true && _settingState.proposalTAOId != address(0));\n\n\t\t// Update the setting data\n\t\t_settingData.locked = true;\n\n\t\t// Update the setting state\n\t\t_settingState.pendingUpdate = false;\n\t\t_settingState.updateAdvocateNameId = _associatedTAOAdvocate;\n\t\taddress _proposalTAOId = _settingState.proposalTAOId;\n\t\t_settingState.proposalTAOId = address(0);\n\t\t_settingState.lastUpdateTAOId = _proposalTAOId;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Add setting deprecation\n\t * @param _settingId The ID of the setting\n\t * @param _creatorNameId The nameId that created the setting\n\t * @param _creatorTAOId The taoId that created the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @param _newSettingId The new settingId value to route\n\t * @param _newSettingContractAddress The address of the new setting contract to route\n\t * @return The ID of the \"Associated\" setting deprecation\n\t * @return The ID of the \"Creator\" setting deprecation\n\t */\n\tfunction addDeprecation(uint256 _settingId, address _creatorNameId, address _creatorTAOId, address _associatedTAOId, uint256 _newSettingId, address _newSettingContractAddress) external inWhitelist returns (bytes32, bytes32) {\n\t\trequire (_storeSettingDeprecation(_settingId, _creatorNameId, _creatorTAOId, _associatedTAOId, _newSettingId, _newSettingContractAddress));\n\n\t\t// Store the associatedTAOSettingDeprecation info\n\t\tbytes32 _associatedTAOSettingDeprecationId = keccak256(abi.encodePacked(this, _associatedTAOId, _settingId));\n\t\tAssociatedTAOSettingDeprecation storage _associatedTAOSettingDeprecation = associatedTAOSettingDeprecations[_associatedTAOSettingDeprecationId];\n\t\t_associatedTAOSettingDeprecation.associatedTAOSettingDeprecationId = _associatedTAOSettingDeprecationId;\n\t\t_associatedTAOSettingDeprecation.associatedTAOId = _associatedTAOId;\n\t\t_associatedTAOSettingDeprecation.settingId = _settingId;\n\n\t\t// Store the creatorTAOSettingDeprecation info\n\t\tbytes32 _creatorTAOSettingDeprecationId = keccak256(abi.encodePacked(this, _creatorTAOId, _settingId));\n\t\tCreatorTAOSettingDeprecation storage _creatorTAOSettingDeprecation = creatorTAOSettingDeprecations[_creatorTAOSettingDeprecationId];\n\t\t_creatorTAOSettingDeprecation.creatorTAOSettingDeprecationId = _creatorTAOSettingDeprecationId;\n\t\t_creatorTAOSettingDeprecation.creatorTAOId = _creatorTAOId;\n\t\t_creatorTAOSettingDeprecation.settingId = _settingId;\n\n\t\treturn (_associatedTAOSettingDeprecationId, _creatorTAOSettingDeprecationId);\n\t}\n\n\t/**\n\t * @dev Get Setting Deprecation info of a setting ID\n\t * @param _settingId The ID of the setting\n\t */\n\tfunction getSettingDeprecation(uint256 _settingId) external view returns (uint256, address, address, address, bool, bool, bool, bool, uint256, uint256, address, address) {\n\t\tSettingDeprecation memory _settingDeprecation = settingDeprecations[_settingId];\n\t\treturn (\n\t\t\t_settingDeprecation.settingId,\n\t\t\t_settingDeprecation.creatorNameId,\n\t\t\t_settingDeprecation.creatorTAOId,\n\t\t\t_settingDeprecation.associatedTAOId,\n\t\t\t_settingDeprecation.pendingDeprecated,\n\t\t\t_settingDeprecation.locked,\n\t\t\t_settingDeprecation.rejected,\n\t\t\t_settingDeprecation.migrated,\n\t\t\t_settingDeprecation.pendingNewSettingId,\n\t\t\t_settingDeprecation.newSettingId,\n\t\t\t_settingDeprecation.pendingNewSettingContractAddress,\n\t\t\t_settingDeprecation.newSettingContractAddress\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get Associated TAO Setting Deprecation info\n\t * @param _associatedTAOSettingDeprecationId The ID of the associated tao setting deprecation\n\t */\n\tfunction getAssociatedTAOSettingDeprecation(bytes32 _associatedTAOSettingDeprecationId) external view returns (bytes32, address, uint256) {\n\t\tAssociatedTAOSettingDeprecation memory _associatedTAOSettingDeprecation = associatedTAOSettingDeprecations[_associatedTAOSettingDeprecationId];\n\t\treturn (\n\t\t\t_associatedTAOSettingDeprecation.associatedTAOSettingDeprecationId,\n\t\t\t_associatedTAOSettingDeprecation.associatedTAOId,\n\t\t\t_associatedTAOSettingDeprecation.settingId\n\t\t);\n\t}\n\n\t/**\n\t * @dev Get Creator TAO Setting Deprecation info\n\t * @param _creatorTAOSettingDeprecationId The ID of the creator tao setting deprecation\n\t */\n\tfunction getCreatorTAOSettingDeprecation(bytes32 _creatorTAOSettingDeprecationId) public view returns (bytes32, address, uint256) {\n\t\tCreatorTAOSettingDeprecation memory _creatorTAOSettingDeprecation = creatorTAOSettingDeprecations[_creatorTAOSettingDeprecationId];\n\t\treturn (\n\t\t\t_creatorTAOSettingDeprecation.creatorTAOSettingDeprecationId,\n\t\t\t_creatorTAOSettingDeprecation.creatorTAOId,\n\t\t\t_creatorTAOSettingDeprecation.settingId\n\t\t);\n\t}\n\n\t/**\n\t * @dev Advocate of SettingDeprecation's _associatedTAOId approves deprecation\n\t * @param _settingId The ID of the setting to approve\n\t * @param _associatedTAOAdvocate The advocate of the associated TAO\n\t * @param _approved Whether to approve or reject\n\t * @return true on success\n\t */\n\tfunction approveDeprecation(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external inWhitelist returns (bool) {\n\t\t// Make sure setting exists and needs approval\n\t\tSettingDeprecation storage _settingDeprecation = settingDeprecations[_settingId];\n\t\trequire (_settingDeprecation.settingId == _settingId &&\n\t\t\t_settingDeprecation.migrated == false &&\n\t\t\t_settingDeprecation.pendingDeprecated == true &&\n\t\t\t_settingDeprecation.locked == true &&\n\t\t\t_settingDeprecation.rejected == false &&\n\t\t\t_associatedTAOAdvocate != address(0) &&\n\t\t\t_associatedTAOAdvocate == _nameTAOPosition.getAdvocate(_settingDeprecation.associatedTAOId)\n\t\t);\n\n\t\tif (_approved) {\n\t\t\t// Unlock the setting so that advocate of creatorTAOId can finalize the creation\n\t\t\t_settingDeprecation.locked = false;\n\t\t} else {\n\t\t\t// Reject the setting\n\t\t\t_settingDeprecation.pendingDeprecated = false;\n\t\t\t_settingDeprecation.rejected = true;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Advocate of SettingDeprecation's _creatorTAOId finalizes the deprecation once the setting deprecation is approved\n\t * @param _settingId The ID of the setting to be finalized\n\t * @param _creatorTAOAdvocate The advocate of the creator TAO\n\t * @return true on success\n\t */\n\tfunction finalizeDeprecation(uint256 _settingId, address _creatorTAOAdvocate) external inWhitelist returns (bool) {\n\t\t// Make sure setting exists and needs approval\n\t\tSettingDeprecation storage _settingDeprecation = settingDeprecations[_settingId];\n\t\trequire (_settingDeprecation.settingId == _settingId &&\n\t\t\t_settingDeprecation.migrated == false &&\n\t\t\t_settingDeprecation.pendingDeprecated == true &&\n\t\t\t_settingDeprecation.locked == false &&\n\t\t\t_settingDeprecation.rejected == false &&\n\t\t\t_creatorTAOAdvocate != address(0) &&\n\t\t\t_creatorTAOAdvocate == _nameTAOPosition.getAdvocate(_settingDeprecation.creatorTAOId)\n\t\t);\n\n\t\t// Update the setting data\n\t\t_settingDeprecation.pendingDeprecated = false;\n\t\t_settingDeprecation.locked = true;\n\t\t_settingDeprecation.migrated = true;\n\t\tuint256 _newSettingId = _settingDeprecation.pendingNewSettingId;\n\t\t_settingDeprecation.pendingNewSettingId = 0;\n\t\t_settingDeprecation.newSettingId = _newSettingId;\n\n\t\taddress _newSettingContractAddress = _settingDeprecation.pendingNewSettingContractAddress;\n\t\t_settingDeprecation.pendingNewSettingContractAddress = address(0);\n\t\t_settingDeprecation.newSettingContractAddress = _newSettingContractAddress;\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Check if a setting exist and not rejected\n\t * @param _settingId The ID of the setting\n\t * @return true if exist. false otherwise\n\t */\n\tfunction settingExist(uint256 _settingId) external view returns (bool) {\n\t\tSettingData memory _settingData = settingDatas[_settingId];\n\t\treturn (_settingData.settingId == _settingId && _settingData.rejected == false);\n\t}\n\n\t/**\n\t * @dev Get the latest ID of a deprecated setting, if exist\n\t * @param _settingId The ID of the setting\n\t * @return The latest setting ID\n\t */\n\tfunction getLatestSettingId(uint256 _settingId) external view returns (uint256) {\n\t\tuint256 _latestSettingId = _settingId;\n\t\t(,,,,,,, bool _migrated,, uint256 _newSettingId,,) = this.getSettingDeprecation(_latestSettingId);\n\t\twhile (_migrated && _newSettingId > 0) {\n\t\t\t_latestSettingId = _newSettingId;\n\t\t\t(,,,,,,, _migrated,, _newSettingId,,) = this.getSettingDeprecation(_latestSettingId);\n\t\t}\n\t\treturn _latestSettingId;\n\t}\n\n\t/***** Internal Method *****/\n\t/**\n\t * @dev Store setting data/state\n\t * @param _settingId The ID of the setting\n\t * @param _creatorNameId The nameId that created the setting\n\t * @param _settingName The human-readable name of the setting\n\t * @param _creatorTAOId The taoId that created the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @param _extraData Catch-all string value to be stored if exist\n\t * @return true on success\n\t */\n\tfunction _storeSettingDataState(uint256 _settingId, address _creatorNameId, string memory _settingName, address _creatorTAOId, address _associatedTAOId, string memory _extraData) internal returns (bool) {\n\t\t// Store setting data\n\t\tSettingData storage _settingData = settingDatas[_settingId];\n\t\t_settingData.settingId = _settingId;\n\t\t_settingData.creatorNameId = _creatorNameId;\n\t\t_settingData.creatorTAOId = _creatorTAOId;\n\t\t_settingData.associatedTAOId = _associatedTAOId;\n\t\t_settingData.settingName = _settingName;\n\t\t_settingData.pendingCreate = true;\n\t\t_settingData.locked = true;\n\t\t_settingData.settingDataJSON = _extraData;\n\n\t\t// Store setting state\n\t\tSettingState storage _settingState = settingStates[_settingId];\n\t\t_settingState.settingId = _settingId;\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Store setting deprecation\n\t * @param _settingId The ID of the setting\n\t * @param _creatorNameId The nameId that created the setting\n\t * @param _creatorTAOId The taoId that created the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @param _newSettingId The new settingId value to route\n\t * @param _newSettingContractAddress The address of the new setting contract to route\n\t * @return true on success\n\t */\n\tfunction _storeSettingDeprecation(uint256 _settingId, address _creatorNameId, address _creatorTAOId, address _associatedTAOId, uint256 _newSettingId, address _newSettingContractAddress) internal returns (bool) {\n\t\t// Make sure this setting exists\n\t\trequire (settingDatas[_settingId].creatorNameId != address(0) && settingDatas[_settingId].rejected == false && settingDatas[_settingId].pendingCreate == false);\n\n\t\t// Make sure deprecation is not yet exist for this setting Id\n\t\trequire (settingDeprecations[_settingId].creatorNameId == address(0));\n\n\t\t// Make sure newSettingId exists\n\t\trequire (settingDatas[_newSettingId].creatorNameId != address(0) && settingDatas[_newSettingId].rejected == false && settingDatas[_newSettingId].pendingCreate == false);\n\n\t\t// Store setting deprecation info\n\t\tSettingDeprecation storage _settingDeprecation = settingDeprecations[_settingId];\n\t\t_settingDeprecation.settingId = _settingId;\n\t\t_settingDeprecation.creatorNameId = _creatorNameId;\n\t\t_settingDeprecation.creatorTAOId = _creatorTAOId;\n\t\t_settingDeprecation.associatedTAOId = _associatedTAOId;\n\t\t_settingDeprecation.pendingDeprecated = true;\n\t\t_settingDeprecation.locked = true;\n\t\t_settingDeprecation.pendingNewSettingId = _newSettingId;\n\t\t_settingDeprecation.pendingNewSettingContractAddress = _newSettingContractAddress;\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Store the associated TAO Setting info\n\t * @param _associatedTAOId The Associated TAO ID\n\t * @param _settingId The setting ID\n\t * @return The newly created associated TAO setting ID\n\t */\n\tfunction _storeAssociatedTAOSetting(address _associatedTAOId, uint256 _settingId) internal returns (bytes32) {\n\t\t// Store the associatedTAOSetting info\n\t\tbytes32 _associatedTAOSettingId = keccak256(abi.encodePacked(this, _associatedTAOId, _settingId));\n\t\tAssociatedTAOSetting storage _associatedTAOSetting = associatedTAOSettings[_associatedTAOSettingId];\n\t\t_associatedTAOSetting.associatedTAOSettingId = _associatedTAOSettingId;\n\t\t_associatedTAOSetting.associatedTAOId = _associatedTAOId;\n\t\t_associatedTAOSetting.settingId = _settingId;\n\t\treturn _associatedTAOSettingId;\n\t}\n\n\t/**\n\t * @dev Store the creator TAO Setting info\n\t * @param _creatorTAOId The Creator TAO ID\n\t * @param _settingId The setting ID\n\t * @return The newly created creator TAO setting ID\n\t */\n\tfunction _storeCreatorTAOSetting(address _creatorTAOId, uint256 _settingId) internal returns (bytes32) {\n\t\t// Store the creatorTAOSetting info\n\t\tbytes32 _creatorTAOSettingId = keccak256(abi.encodePacked(this, _creatorTAOId, _settingId));\n\t\tCreatorTAOSetting storage _creatorTAOSetting = creatorTAOSettings[_creatorTAOSettingId];\n\t\t_creatorTAOSetting.creatorTAOSettingId = _creatorTAOSettingId;\n\t\t_creatorTAOSetting.creatorTAOId = _creatorTAOId;\n\t\t_creatorTAOSetting.settingId = _settingId;\n\t\treturn _creatorTAOSettingId;\n\t}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_associatedTAOAdvocate\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_associatedTAOAdvocate\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_associatedTAOSettingDeprecationId\",\"type\":\"bytes32\"}],\"name\":\"getAssociatedTAOSettingDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_creatorTAOAdvocate\",\"type\":\"address\"}],\"name\":\"finalizeAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_creatorNameId\",\"type\":\"address\"},{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"add\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creatorTAOSettingDeprecationId\",\"type\":\"bytes32\"}],\"name\":\"getCreatorTAOSettingDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_creatorTAOSettingId\",\"type\":\"bytes32\"}],\"name\":\"getCreatorTAOSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_proposalTAOAdvocate\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getLatestSettingId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_associatedTAOSettingId\",\"type\":\"bytes32\"}],\"name\":\"getAssociatedTAOSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSettingData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_associatedTAOAdvocate\",\"type\":\"address\"}],\"name\":\"finalizeUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"settingExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSettingState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_associatedTAOAdvocate\",\"type\":\"address\"},{\"name\":\"_proposalTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_creatorNameId\",\"type\":\"address\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_newSettingId\",\"type\":\"uint256\"},{\"name\":\"_newSettingContractAddress\",\"type\":\"address\"}],\"name\":\"addDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSettingDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_creatorTAOAdvocate\",\"type\":\"address\"}],\"name\":\"finalizeDeprecation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}