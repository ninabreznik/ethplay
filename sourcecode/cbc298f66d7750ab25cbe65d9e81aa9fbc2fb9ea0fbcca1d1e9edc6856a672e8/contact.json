{
  "address": "0x83d904a2489bae727c1037469206891d8d058d92",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RecoveryWithTenant",
  "compilerVersion": "v0.3.6-2016-08-15-868a167",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2016-08-15\n*/\n\ncontract Destination {\n    function recover(address _from, address _to) returns(bool);\n}\n\ncontract RecoveryWithTenant {\n    event Recovery(uint indexed nonce, address indexed from, address indexed to);\n    event Setup(uint indexed nonce, address indexed user);\n    \n    //1: user not existing\n    //2: conflict, user exists already\n    //3: signature not by tenant\n    //4: nonce/signature used before\n    //5: contract call failed\n    //6: oracle access denied\n    //8: requested user not found\n    event Error(uint indexed nonce, uint code);\n    \n    struct User {\n        address addr;\n    }\n    \n    mapping (address => uint) userIndex;\n    User[] public users;\n\n    address public oracle;\n    address public tenant;\n    mapping(uint => bool) nonceUsed;\n    address public callDestination;\n\n\n    modifier onlyOracle() {\n        if (msg.sender == oracle) {\n            _\n        }\n        Error(0, 6);\n    }\n    \n    modifier noEther() {\n        if (msg.value > 0) throw;\n        _\n    }\n\n    function RecoveryWithTenant() {\n        oracle = msg.sender;\n        tenant = msg.sender;\n        users.length++;\n    }\n    \n    //############# INTERNAL FUNCTIONS\n    \n    function _checkSigned(bytes32 _hash, uint _nonce, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool) {\n        address recovered = ecrecover(_hash, _v, _r, _s);\n\n        if (tenant != recovered) {\n            Error(_nonce, 3);\n            return false;\n        }\n        if (nonceUsed[_nonce]) {\n            Error(_nonce, 4);\n            return false;\n        }\n        nonceUsed[_nonce] = true; \n        return true;\n    }\n    \n    \n    //############# PUBLIC FUNCTIONS\n    \n    function setOracle(address _newOracle) noEther onlyOracle {\n        oracle = _newOracle;\n    }\n    \n    function configure(address _tenant, address _callDestination, uint _nonce, uint8 _v, bytes32 _r, bytes32 _s) noEther onlyOracle returns (bool) {\n        if(tenant != oracle && !_checkSigned(sha3(_tenant, _callDestination, _nonce), _nonce, _v, _r, _s))\n            return false;\n        tenant = _tenant;\n        callDestination = _callDestination;\n        return true;\n    }\n    \n    \n    function addUser(address _userAddr, uint _nonce, uint8 _v, bytes32 _r, bytes32 _s) noEther onlyOracle returns (bool) {\n        if(userIndex[_userAddr] > 0) {\n            Error(_nonce, 2);\n            return false;\n        }\n        if(!_checkSigned(sha3(_userAddr, _nonce), _nonce, _v, _r, _s))\n            return false;\n        uint posUser = users.length++;\n        userIndex[_userAddr] = posUser;\n        users[posUser] = User(_userAddr);\n        Setup(_nonce, _userAddr);\n        return true;\n    }\n    \n    function recoverUser(address _oldAddr, address _newAddr, uint _nonce, uint8 _v, bytes32 _r, bytes32 _s) noEther onlyOracle returns (bool) {\n        uint userPos = userIndex[_oldAddr];\n        if (userPos == 0) {\n            Error(_nonce, 1); //user doesn't exsit\n            return false;\n        }\n        \n        if (!_checkSigned(sha3(_oldAddr, _newAddr, _nonce), _nonce, _v, _r, _s))\n            return false;\n        bool result = Destination(callDestination).recover(_oldAddr, _newAddr);\n        if (result) {\n            users[userPos].addr = _newAddr;\n            delete userIndex[_oldAddr];\n            userIndex[_newAddr] = userPos;\n            Recovery(_nonce, _oldAddr, _newAddr);\n            return true;\n        }\n        Error(_nonce, 5);\n        return false;\n    }\n\n    function () noEther {\n        throw;\n    }\n    \n    //############# STATIC FUNCTIONS\n    \n    function isUser(address _userAddr) constant returns (bool) {\n        return (userIndex[_userAddr] > 0);\n    }\n\n}",
  "bytecode": "60606040526002805433600160a060020a0319918216811790925560038054909116909117905560018054808201808355909190828015829011606a57600083815260209020606a9181019083015b80821115607c578054600160a060020a0319168155600101604e565b50505050610821806100806000396000f35b509056606060405236156100775760e060020a6000350463213ac9328114610088578063305b73d9146100ac578063365b98b2146100d15780634209fff11461011757806352c743d2146101485780637adbf9731461015a5780637dc0d1d01461016e578063adf0779114610180578063f32efd3c14610192575b6101bb60003411156101bd57610002565b61013460043560243560443560643560843560006000600034111561021057610002565b61013460043560243560443560643560843560a4356000600034111561046457610002565b6101c260043560018054829081101561000257506000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60154600160a060020a031681565b600160a060020a0360043516600090815260208190526040812054115b604080519115158252519081900360200190f35b6101c2600554600160a060020a031681565b6101bb600435600034111561051057610002565b6101c2600254600160a060020a031681565b6101c2600354600160a060020a031681565b61013460043560243560443560643560843560a435600060006000600034111561059757610002565b005b610002565b60408051600160a060020a03929092168252519081900360200190f35b60408051600681529051600091600080516020610801833981519152919081900360200190a25b5095945050505050565b600254600160a060020a039081163390911614156101df57600160a060020a038716600090815260208190526040812054111561027557604080516002815290518791600080516020610801833981519152919081900360200190a260009150610206565b60408051600160a060020a038916606060020a02815260148101889052905190819003603401902061033690878787875b6040805186815260ff8516602082810191909152818301859052606082018490529151600092839260019260808281019392829003018186866161da5a03f11561000257505060405151600354909150600160a060020a0382811691161461079957604080516003815290518791600080516020610801833981519152919081900360200190a260009150610206565b15156103455760009150610206565b6001805480820180835590919082801582901161038f5781836000526020600020918201910161038f91905b8082111561042f578054600160a060020a0319168155600101610371565b505050600160a060020a038816600090815260208181526040918290208390558151908101909152888152600180549293509091839081101561000257906000526020600020900160005080549151600160a060020a0319909216919091179055604051600160a060020a0388169087907f1cdc11bca241dc169d540f64b001eb72f75954aebc6fe626d4980a3a1d2dd29b90600090a360019150610206565b5090565b60408051600681529051600091600080516020610801833981519152919081900360200190a25b9695505050505050565b600254600160a060020a0390811633909116141561043357600254600354600160a060020a039081169116148015906104db575060408051600160a060020a03898116606060020a90810283529089160260148201526028810187905290519081900360480190206104d990868686866102a6565b155b156104e85750600061045a565b5060038054600160a060020a031990811688179091556005805490911686179055600161045a565b600254600160a060020a0390811633909116141561053b5760028054600160a060020a031916821790555b60408051600681529051600091600080516020610801833981519152919081900360200190a250565b60408051600681529051600091600080516020610801833981519152919081900360200190a25b50509695505050505050565b60025433600160a060020a039081169116141561056457600160a060020a03891660009081526020819052604081205492508214156105fe57604080516001815290518891600080516020610801833981519152919081900360200190a26000925061058b565b60408051600160a060020a038b8116606060020a9081028352908b1602601482015260288101899052905190819003604801902061063f90888888886102a6565b151561064e576000925061058b565b604080516005547f648bf774000000000000000000000000000000000000000000000000000000008252600160a060020a038c811660048401528b81166024840152925192169163648bf7749160448181019260209290919082900301816000876161da5a03f11561000257505060405151915050801561076b57876001600050838154811015610002575050604080517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf685018054600160a060020a031916909317909255600160a060020a038b811660008181526020819052838120819055918c1680835292822086905591928a917f8e19ee4ce0cc3bb4d98a637725baa2c206a54864937ece05b89aa69f8148207491a46001925061058b565b604080516005815290518891600080516020610801833981519152919081900360200190a26000925061058b565b60008681526004602052604090205460ff16156107de57604080516004815290518791600080516020610801833981519152919081900360200190a260009150610206565b6000868152600460205260409020805460ff1916600190811790915591506102065638e3aaf1b2f2c930b2c3ad9e7ba74f151a8852833d7f1f4c6a12793fff19c927"
}