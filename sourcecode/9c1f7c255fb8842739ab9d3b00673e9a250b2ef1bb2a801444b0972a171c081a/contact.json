{
  "address": "0x1e29ca8c874b4dff828297cc2e9856819eea0933",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TOURISTOKEN",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-06\n*/\n\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TOURISTOKEN {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 777777777000000000000000000;  \n        balanceOf[msg.sender] = totalSupply;               \n        name = \"TOURISTOKEN\";                                   \n        symbol = \"TOU\";                               \n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);    \n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   \n        balanceOf[msg.sender] -= _value;            \n        totalSupply -= _value;                      \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                \n        require(_value <= allowance[_from][msg.sender]);    \n        balanceOf[_from] -= _value;                         \n        allowance[_from][msg.sender] -= _value;             \n        totalSupply -= _value;                              \n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\ncontract MyAdvancedToken is owned, TOURISTOKEN {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    mapping (address => bool) public frozenAccount;\n\n    event FrozenFunds(address target, bool frozen);\n\n    function MyAdvancedToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n     )MyAdvancedToken(initialSupply, tokenName, tokenSymbol) public {}\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               \n        require (balanceOf[_from] >= _value);              \n        require (balanceOf[_to] + _value >= balanceOf[_to]); \n        require(!frozenAccount[_from]);                     \n        require(!frozenAccount[_to]);                       \n        balanceOf[_from] -= _value;                         \n        balanceOf[_to] += _value;                           \n        emit Transfer(_from, _to, _value);\n    }\n\n    function mint(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n\n    \n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    \n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    \n    function buy() payable public {\n        uint amount = msg.value /buyPrice ;              \n        _transfer(this, msg.sender, amount);              \n    }\n\n    \n    function sell(uint256 amount) public {\n        address myAddress = this;\n        require(myAddress.balance >= amount * sellPrice);      \n        _transfer(msg.sender, this, amount);              \n        msg.sender.transfer(amount * sellPrice);          \n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * Constrctor function\n  function totalSupply() public constant returns (uint256 supply);\n\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n\n  function transfer(address _to, uint256 _value) public returns (bool success);\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n  function approve(address _spender, uint256 _value) public returns (bool success);\n\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  uint public decimals;\n  string public name;\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));      \n    owner = newOwner;\n  }\n\n}\ncontract Gateway is Ownable{\n    using SafeMath for uint;\n    address public feeAccount1 = 0xcAc496756f98a4E6e4e56f14e46A6824608a29a2; \n    address public feeAccount2 = 0xE4BD9Cb073A247911A520BbDcBE0e8C2492be346; \n    address public feeAccountToken = 0x5D151cdD1833237ACb2Fef613F560221230D77c5;\n    \n    struct BuyInfo {\n      address buyerAddress; \n      address sellerAddress;\n      uint value;\n      address currency;\n    }\n    \n    mapping(address => mapping(uint => BuyInfo)) public payment;\n   \n    uint balanceFee;\n    uint public feePercent;\n    uint public maxFee;\n    constructor() public{\n       feePercent = 1500000; \n       maxFee = 3000000; \n    }\n    \n    \n    function getBuyerAddressPayment(address _sellerAddress, uint _orderId) public view returns(address){\n      return  payment[_sellerAddress][_orderId].buyerAddress;\n    }    \n    function getSellerAddressPayment(address _sellerAddress, uint _orderId) public view returns(address){\n      return  payment[_sellerAddress][_orderId].sellerAddress;\n    }    \n    \n    function getValuePayment(address _sellerAddress, uint _orderId) public view returns(uint){\n      return  payment[_sellerAddress][_orderId].value;\n    }    \n    \n    function getCurrencyPayment(address _sellerAddress, uint _orderId) public view returns(address){\n      return  payment[_sellerAddress][_orderId].currency;\n    }\n    \n    \n    function setFeeAccount1(address _feeAccount1) onlyOwner public{\n      feeAccount1 = _feeAccount1;  \n    }\n    function setFeeAccount2(address _feeAccount2) onlyOwner public{\n      feeAccount2 = _feeAccount2;  \n    }\n    function setFeeAccountToken(address _feeAccountToken) onlyOwner public{\n      feeAccountToken = _feeAccountToken;  \n    }    \n    function setFeePercent(uint _feePercent) onlyOwner public{\n      require(_feePercent <= maxFee);\n      feePercent = _feePercent;  \n    }    \n    function payToken(address _tokenAddress, address _sellerAddress, uint _orderId,  uint _value) public returns (bool success){\n      require(_tokenAddress != address(0));\n      require(_sellerAddress != address(0)); \n      require(_value > 0);\n      TOURISTOKEN token = TOURISTOKEN(_tokenAddress);\n      require(token.allowance(msg.sender, this) >= _value);\n      token.transferFrom(msg.sender, feeAccountToken, _value.mul(feePercent).div(100000000));\n      token.transferFrom(msg.sender, _sellerAddress, _value.sub(_value.mul(feePercent).div(100000000)));\n      payment[_sellerAddress][_orderId] = BuyInfo(msg.sender, _sellerAddress, _value, _tokenAddress);\n      success = true;\n    }\n    function payEth(address _sellerAddress, uint _orderId, uint _value) internal returns  (bool success){\n      require(_sellerAddress != address(0)); \n      require(_value > 0);\n      uint fee = _value.mul(feePercent).div(100000000);\n      _sellerAddress.transfer(_value.sub(fee));\n      balanceFee = balanceFee.add(fee);\n      payment[_sellerAddress][_orderId] = BuyInfo(msg.sender, _sellerAddress, _value, 0x0000000000000000000000000000000000000001);    \n      success = true;\n    }\n    function transferFee() onlyOwner public{\n      uint valfee1 = balanceFee.div(2);\n      feeAccount1.transfer(valfee1);\n      balanceFee = balanceFee.sub(valfee1);\n      feeAccount2.transfer(balanceFee);\n      balanceFee = 0;\n    }\n    function balanceOfToken(address _tokenAddress, address _Address) public view returns (uint) {\n      TOURISTOKEN token = TOURISTOKEN(_tokenAddress);\n      return token.balanceOf(_Address);\n    }\n    function balanceOfEthFee() public view returns (uint) {\n      return balanceFee;\n    }\n    function bytesToAddress(bytes source) internal pure returns(address) {\n      uint result;\n      uint mul = 1;\n      for(uint i = 20; i > 0; i--) {\n        result += uint8(source[i-1])*mul;\n        mul = mul*256;\n      }\n      return address(result);\n    }\n    function() external payable {\n      require(msg.data.length == 20); \n      require(msg.value > 99999999999);\n      address sellerAddress = bytesToAddress(bytes(msg.data));\n      uint value = msg.value.div(10000000000).mul(10000000000);\n      uint orderId = msg.value.sub(value);\n      balanceFee = balanceFee.add(orderId);\n      payEth(sellerAddress, orderId, value);\n  }\n}",
  "bytecode": "60806040526002805460ff1916601217905534801561001d57600080fd5b50610ace8061002d6000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461018b57806323b872dd146101b2578063313ce567146101dc57806342966c681461020757806370a082311461021f57806379cc67901461024057806395d89b41146102645780639dbf008714610279578063a9059cbb14610317578063cae9ca511461033b578063dd62ed3e146103a4575b600080fd5b3480156100d557600080fd5b506100de6103cb565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b50610177600160a060020a0360043516602435610459565b604080519115158252519081900360200190f35b34801561019757600080fd5b506101a0610489565b60408051918252519081900360200190f35b3480156101be57600080fd5b50610177600160a060020a036004358116906024351660443561048f565b3480156101e857600080fd5b506101f1610506565b6040805160ff9092168252519081900360200190f35b34801561021357600080fd5b5061017760043561050f565b34801561022b57600080fd5b506101a0600160a060020a0360043516610599565b34801561024c57600080fd5b50610177600160a060020a03600435166024356105ab565b34801561027057600080fd5b506100de610687565b34801561028557600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261031595833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506106e19650505050505050565b005b34801561032357600080fd5b50610177600160a060020a036004351660243561079c565b34801561034757600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610177948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107b29650505050505050565b3480156103b057600080fd5b506101a0600160a060020a03600435811690602435166108e9565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104515780601f1061042657610100808354040283529160200191610451565b820191906000526020600020905b81548152906001019060200180831161043457829003601f168201915b505050505081565b600160a060020a033381166000908152600560209081526040808320938616835292905220819055600192915050565b60035481565b600160a060020a038084166000908152600560209081526040808320339094168352929052908120548211156104c457600080fd5b600160a060020a03808516600090815260056020908152604080832033909416835292905220805483900390556104fc848484610906565b5060019392505050565b60025460ff1681565b600160a060020a03331660009081526004602052604081205482111561053457600080fd5b600160a060020a03331660008181526004602090815260409182902080548690039055600380548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b60046020526000908152604090205481565b600160a060020a0382166000908152600460205260408120548211156105d057600080fd5b600160a060020a038084166000908152600560209081526040808320339094168352929052205482111561060357600080fd5b600160a060020a038084166000818152600460209081526040808320805488900390556005825280832033909516835293815290839020805486900390556003805486900390558251858152925191927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5929081900390910190a250600192915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104515780601f1061042657610100808354040283529160200191610451565b6b02835cd9c6d6f2156b2400006003819055600160a060020a0333166000908152600460209081526040808320939093558251808401909352600b8084527f544f55524953544f4b454e000000000000000000000000000000000000000000939091019283526107519290610a07565b506040805180820190915260038082527f544f550000000000000000000000000000000000000000000000000000000000602090920191825261079691600191610a07565b50505050565b60006107a9338484610906565b50600192915050565b6000836107bf8185610459565b156108e15780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561087557818101518382015260200161085d565b50505050905090810190601f1680156108a25780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156108c457600080fd5b505af11580156108d8573d6000803e3d6000fd5b50505050600191505b509392505050565b600560209081526000928352604080842090915290825290205481565b6000600160a060020a038316151561091d57600080fd5b600160a060020a03841660009081526004602052604090205482111561094257600080fd5b600160a060020a0383166000908152600460205260409020548281011161096857600080fd5b50600160a060020a038083166000818152600460209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a0380841660009081526004602052604080822054928716825290205401811461079657fe5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a4857805160ff1916838001178555610a75565b82800160010185558215610a75579182015b82811115610a75578251825591602001919060010190610a5a565b50610a81929150610a85565b5090565b610a9f91905b80821115610a815760008155600101610a8b565b905600a165627a7a723058208ac999a5dc640d1c71a4226b271a5ad576d1a5717635d0478beae57f368c33fb0029"
}