{
  "address": "0x53ab17c844abb25e570bf9042f60d7bed18d612b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VeganCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-13\n*/\n\npragma solidity ^0.4.24;\n\n/*\n    @title Provides support and utilities for contract ownership\n*/\ncontract Ownable {\n  address public owner;\n  address public newOwnerCandidate;\n\n  event OwnerUpdate(address prevOwner, address newOwner);\n\n  /*\n    @dev constructor\n  */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /*\n    @dev allows execution by the owner only\n  */\n  modifier ownerOnly {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /*\n    @dev allows transferring the contract ownership\n    the new owner still needs to accept the transfer\n    can only be called by the contract owner\n\n    @param _newOwnerCandidate    new contract owner\n  */\n  function transferOwnership(address _newOwnerCandidate) public ownerOnly {\n    require(_newOwnerCandidate != address(0));\n    require(_newOwnerCandidate != owner);\n    newOwnerCandidate = _newOwnerCandidate;\n  }\n\n  /*\n    @dev used by a new owner to accept an ownership transfer\n  */\n  function acceptOwnership() public {\n    require(msg.sender == newOwnerCandidate);\n    emit OwnerUpdate(owner, newOwnerCandidate);\n    owner = newOwnerCandidate;\n    newOwnerCandidate = address(0);\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) internal _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 internal _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. In order to mitigate this\n   * race condition is we first check the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n    require(value == 0 || _allowed[msg.sender][spender] == 0);\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is ERC20, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n  event Burn(address indexed from, uint256 amount);\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address to, uint256 amount) public ownerOnly canMint returns (bool) {\n    require(to != address(0));\n    \n    _totalSupply = _totalSupply.add(amount);\n    _balances[to] = _balances[to].add(amount);\n    emit Mint(to, amount);\n    emit Transfer(address(0), to, amount);\n    return true;\n  }\n\n    /**\n   * @dev Function to burn tokens\n   * @param from The address whose tokens will be burnt.\n   * @param amount The amount of tokens to burn.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function burn(address from, uint256 amount) public ownerOnly canMint returns (bool) {\n    require(from != address(0));\n\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[from] = _balances[from].sub(amount);\n    emit Burn(from, amount);\n    emit Transfer(from, address(0), amount);\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public ownerOnly canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title FreezableToken\n * @dev LimitedTransferToken transfers start as disabled untill enabled by the contract owner\n */\n\ncontract FreezableToken is ERC20, Ownable {\n\n  event TransfersEnabled();\n\n  bool public allowTransfers = false;\n\n  /**\n   * @dev Checks whether it can transfer or otherwise throws.\n   */\n  modifier canTransfer() {\n    require(allowTransfers || msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Checks modifier and allows transfer if tokens are not locked.\n\n   */\n  function enableTransfers() public ownerOnly {\n    allowTransfers = true;\n    emit TransfersEnabled();\n  }\n\n  /**\n   * @dev Checks modifier and allows transfer if tokens are not locked.\n   * @param to The address that will receive the tokens.\n   * @param value The amount of tokens to be transferred.\n   */\n  function transfer(address to, uint256 value) public canTransfer returns (bool) {\n    return super.transfer(to, value);\n  }\n\n  /**\n  * @dev Checks modifier and allows transfer if tokens are not locked.\n  * @param from The address that will send the tokens.\n  * @param to The address that will receive the tokens.\n  * @param value The amount of tokens to be transferred.\n  */\n  function transferFrom(address from, address to, uint256 value) public canTransfer returns (bool) {\n    return super.transferFrom(from, to, value);\n  }\n}\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public constant cap = 1000000000000000000000000000;\n\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 amount\n  )\n    public\n    returns (bool)\n  {\n    require(_totalSupply.add(amount) <= cap);\n\n    return super.mint(to, amount);\n  }\n\n}\n\n/**\n * @title VeganCoin\n * @dev Based on openzeppelin ERC20 token\n */\ncontract VeganCoin is CappedToken, FreezableToken {\n\n  string public name = \"VeganCoin\"; \n  string public symbol = \"VCN\";\n  uint8 public decimals = 18;\n}\n\n/// @title Vesting contract\ncontract VestingTrustee is Ownable {\n    using SafeMath for uint256;\n\n    // The address of the VCN ERC20 token.\n    VeganCoin public veganCoin;\n\n    struct Grant {\n        uint256 value;\n        uint256 start;\n        uint256 cliff;\n        uint256 end;\n        uint256 transferred;\n        bool revokable;\n    }\n\n    // Grants holder.\n    mapping (address => Grant) public grants;\n\n    // Total tokens available for vesting.\n    uint256 public totalVesting;\n\n    event NewGrant(address indexed _from, address indexed _to, uint256 _value);\n    event UnlockGrant(address indexed _holder, uint256 _value);\n    event RevokeGrant(address indexed _holder, uint256 _refund);\n\n    /// @dev Constructor that initializes the address of the VeganCoin contract.\n    /// @param _veganCoin The address of the previously deployed VeganCoin smart contract.\n    constructor(VeganCoin _veganCoin) public {\n        require(_veganCoin != address(0));\n\n        veganCoin = _veganCoin;\n    }\n\n    /// @dev Grant tokens to a specified address.\n    /// @param _to address The address to grant tokens to.\n    /// @param _value uint256 The amount of tokens to be granted.\n    /// @param _start uint256 The beginning of the vesting period.\n    /// @param _cliff uint256 Duration of the cliff period.\n    /// @param _end uint256 The end of the vesting period.\n    /// @param _revokable bool Whether the grant is revokable or not.\n    function grant(address _to, uint256 _value, uint256 _start, uint256 _cliff, uint256 _end, bool _revokable)\n        public ownerOnly {\n        require(_to != address(0));\n        require(_value > 0);\n\n        // Make sure that a single address can be granted tokens only once.\n        require(grants[_to].value == 0);\n\n        // Check for date inconsistencies that may cause unexpected behavior.\n        require(_start <= _cliff && _cliff <= _end);\n\n        // Check that this grant doesn't exceed the total amount of tokens currently available for vesting.\n        require(totalVesting.add(_value) <= veganCoin.balanceOf(address(this)));\n\n        // Assign a new grant.\n        grants[_to] = Grant({\n            value: _value,\n            start: _start,\n            cliff: _cliff,\n            end: _end,\n            transferred: 0,\n            revokable: _revokable\n        });\n\n        // Tokens granted, reduce the total amount available for vesting.\n        totalVesting = totalVesting.add(_value);\n\n        emit NewGrant(msg.sender, _to, _value);\n    }\n\n    /// @dev Revoke the grant of tokens of a specifed address.\n    /// @param _holder The address which will have its tokens revoked.\n    function revoke(address _holder) public ownerOnly {\n        Grant storage grant = grants[_holder];\n\n        require(grant.revokable);\n\n        // Revoke the remaining VCN.\n        uint256 refund = grant.value.sub(grant.transferred);\n\n        // Remove the grant.\n        delete grants[_holder];\n\n        totalVesting = totalVesting.sub(refund);\n\n        emit RevokeGrant(_holder, refund);\n    }\n\n    /// @dev Calculate the total amount of vested tokens of a holder at a given time.\n    /// @param _holder address The address of the holder.\n    /// @param _time uint256 The specific time.\n    /// @return a uint256 representing a holder's total amount of vested tokens.\n    function vestedTokens(address _holder, uint256 _time) public constant returns (uint256) {\n        Grant storage grant = grants[_holder];\n        if (grant.value == 0) {\n            return 0;\n        }\n\n        return calculateVestedTokens(grant, _time);\n    }\n\n    /// @dev Calculate amount of vested tokens at a specifc time.\n    /// @param _grant Grant The vesting grant.\n    /// @param _time uint256 The time to be checked\n    /// @return An uint256 representing the amount of vested tokens of a specific grant.\n    ///   |                         _/--------   vestedTokens rect\n    ///   |                       _/\n    ///   |                     _/\n    ///   |                   _/\n    ///   |                 _/\n    ///   |                /\n    ///   |              .|\n    ///   |            .  |\n    ///   |          .    |\n    ///   |        .      |\n    ///   |      .        |\n    ///   |    .          |\n    ///   +===+===========+---------+----------> time\n    ///     Start       Cliff      End\n    function calculateVestedTokens(Grant _grant, uint256 _time) private pure returns (uint256) {\n        // If we're before the cliff, then nothing is vested.\n        if (_time < _grant.cliff) {\n            return 0;\n        }\n\n        // If we're after the end of the vesting period - everything is vested;\n        if (_time >= _grant.end) {\n            return _grant.value;\n        }\n\n        // Interpolate all vested tokens: vestedTokens = tokens/// (time - start) / (end - start)\n         return _grant.value.mul(_time.sub(_grant.start)).div(_grant.end.sub(_grant.start));\n    }\n\n    /// @dev Unlock vested tokens and transfer them to their holder.\n    /// @return a uint256 representing the amount of vested tokens transferred to their holder.\n    function unlockVestedTokens() public {\n        Grant storage grant = grants[msg.sender];\n        require(grant.value != 0);\n\n        // Get the total amount of vested tokens, acccording to grant.\n        uint256 vested = calculateVestedTokens(grant, now);\n        if (vested == 0) {\n            return;\n        }\n\n        // Make sure the holder doesn't transfer more than what he already has.\n        uint256 transferable = vested.sub(grant.transferred);\n        if (transferable == 0) {\n            return;\n        }\n\n        grant.transferred = grant.transferred.add(transferable);\n        totalVesting = totalVesting.sub(transferable);\n        veganCoin.transfer(msg.sender, transferable);\n\n        emit UnlockGrant(msg.sender, transferable);\n    }\n}",
  "bytecode": ""
}