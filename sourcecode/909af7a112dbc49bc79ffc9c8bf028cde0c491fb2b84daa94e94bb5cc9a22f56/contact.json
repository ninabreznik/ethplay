{
  "address": "0x6531f133e6deebe7f2dce5a0441aa7ef330b4e53",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Time Token",
  "contractName": "ChronoBankAssetProxy",
  "compilerVersion": "v0.4.8+commit.60cc1668",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-06\n*/\n\npragma solidity ^0.4.4;\n\ncontract Owned {\n    address public contractOwner;\n    address public pendingContractOwner;\n\n    function Owned() {\n        contractOwner = msg.sender;\n    }\n\n    modifier onlyContractOwner() {\n        if (contractOwner == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * Prepares ownership pass.\n     *\n     * Can only be called by current owner.\n     *\n     * @param _to address of the next owner.\n     *\n     * @return success.\n     */\n    function changeContractOwnership(address _to) onlyContractOwner() returns(bool) {\n        pendingContractOwner = _to;\n        return true;\n    }\n\n    /**\n     * Finalize ownership pass.\n     *\n     * Can only be called by pending owner.\n     *\n     * @return success.\n     */\n    function claimContractOwnership() returns(bool) {\n        if (pendingContractOwner != msg.sender) {\n            return false;\n        }\n        contractOwner = pendingContractOwner;\n        delete pendingContractOwner;\n        return true;\n    }\n}\n\n\ncontract Emitter {\n    function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference);\n    function emitIssue(bytes32 _symbol, uint _value, address _by);\n    function emitRevoke(bytes32 _symbol, uint _value, address _by);\n    function emitOwnershipChange(address _from, address _to, bytes32 _symbol);\n    function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value);\n    function emitRecovery(address _from, address _to, address _by);\n    function emitError(bytes32 _message);\n}\n\ncontract Proxy {\n    function emitTransfer(address _from, address _to, uint _value);\n    function emitApprove(address _from, address _spender, uint _value);\n}\n\n/**\n * @title ChronoBank Platform.\n *\n * The official ChronoBank assets platform powering TIME and LHT tokens, and possibly\n * other unknown tokens needed later.\n * Platform uses EventsHistory contract to keep events, so that in case it needs to be redeployed\n * at some point, all the events keep appearing at the same place.\n *\n * Every asset is meant to be used through a proxy contract. Only one proxy contract have access\n * rights for a particular asset.\n *\n * Features: transfers, allowances, supply adjustments, lost wallet access recovery.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract ChronoBankPlatform is Owned {\n    // Structure of a particular asset.\n    struct Asset {\n        uint owner;                       // Asset's owner id.\n        uint totalSupply;                 // Asset's total supply.\n        string name;                      // Asset's name, for information purposes.\n        string description;               // Asset's description, for information purposes.\n        bool isReissuable;                // Indicates if asset have dynamic of fixed supply.\n        uint8 baseUnit;                   // Proposed number of decimals.\n        mapping(uint => Wallet) wallets;  // Holders wallets.\n    }\n\n    // Structure of an asset holder wallet for particular asset.\n    struct Wallet {\n        uint balance;\n        mapping(uint => uint) allowance;\n    }\n\n    // Structure of an asset holder.\n    struct Holder {\n        address addr;                    // Current address of the holder.\n        mapping(address => bool) trust;  // Addresses that are trusted with recovery proocedure.\n    }\n\n    // Iterable mapping pattern is used for holders.\n    uint public holdersCount;\n    mapping(uint => Holder) public holders;\n\n    // This is an access address mapping. Many addresses may have access to a single holder.\n    mapping(address => uint) holderIndex;\n\n    // Asset symbol to asset mapping.\n    mapping(bytes32 => Asset) public assets;\n\n    // Asset symbol to asset proxy mapping.\n    mapping(bytes32 => address) public proxies;\n\n    // Should use interface of the emitter, but address of events history.\n    Emitter public eventsHistory;\n\n    /**\n     * Emits Error event with specified error message.\n     *\n     * Should only be used if no state changes happened.\n     *\n     * @param _message error message.\n     */\n    function _error(bytes32 _message) internal {\n        eventsHistory.emitError(_message);\n    }\n\n    /**\n     * Sets EventsHstory contract address.\n     *\n     * Can be set only once, and only by contract owner.\n     *\n     * @param _eventsHistory EventsHistory contract address.\n     *\n     * @return success.\n     */\n    function setupEventsHistory(address _eventsHistory) onlyContractOwner() returns(bool) {\n        if (address(eventsHistory) != 0) {\n            return false;\n        }\n        eventsHistory = Emitter(_eventsHistory);\n        return true;\n    }\n\n    /**\n     * Emits Error if called not by asset owner.\n     */\n    modifier onlyOwner(bytes32 _symbol) {\n        if (isOwner(msg.sender, _symbol)) {\n            _;\n        } else {\n            _error(\"Only owner: access denied\");\n        }\n    }\n\n    /**\n     * Emits Error if called not by asset proxy.\n     */\n    modifier onlyProxy(bytes32 _symbol) {\n        if (proxies[_symbol] == msg.sender) {\n            _;\n        } else {\n            _error(\"Only proxy: access denied\");\n        }\n    }\n\n    /**\n     * Emits Error if _from doesn't trust _to.\n     */\n    modifier checkTrust(address _from, address _to) {\n        if (isTrusted(_from, _to)) {\n            _;\n        } else {\n            _error(\"Only trusted: access denied\");\n        }\n    }\n\n    /**\n     * Check asset existance.\n     *\n     * @param _symbol asset symbol.\n     *\n     * @return asset existance.\n     */\n    function isCreated(bytes32 _symbol) constant returns(bool) {\n        return assets[_symbol].owner != 0;\n    }\n\n    /**\n     * Returns asset decimals.\n     *\n     * @param _symbol asset symbol.\n     *\n     * @return asset decimals.\n     */\n    function baseUnit(bytes32 _symbol) constant returns(uint8) {\n        return assets[_symbol].baseUnit;\n    }\n\n    /**\n     * Returns asset name.\n     *\n     * @param _symbol asset symbol.\n     *\n     * @return asset name.\n     */\n    function name(bytes32 _symbol) constant returns(string) {\n        return assets[_symbol].name;\n    }\n\n    /**\n     * Returns asset description.\n     *\n     * @param _symbol asset symbol.\n     *\n     * @return asset description.\n     */\n    function description(bytes32 _symbol) constant returns(string) {\n        return assets[_symbol].description;\n    }\n\n    /**\n     * Returns asset reissuability.\n     *\n     * @param _symbol asset symbol.\n     *\n     * @return asset reissuability.\n     */\n    function isReissuable(bytes32 _symbol) constant returns(bool) {\n        return assets[_symbol].isReissuable;\n    }\n\n    /**\n     * Returns asset owner address.\n     *\n     * @param _symbol asset symbol.\n     *\n     * @return asset owner address.\n     */\n    function owner(bytes32 _symbol) constant returns(address) {\n        return holders[assets[_symbol].owner].addr;\n    }\n\n    /**\n     * Check if specified address has asset owner rights.\n     *\n     * @param _owner address to check.\n     * @param _symbol asset symbol.\n     *\n     * @return owner rights availability.\n     */\n    function isOwner(address _owner, bytes32 _symbol) constant returns(bool) {\n        return isCreated(_symbol) && (assets[_symbol].owner == getHolderId(_owner));\n    }\n\n    /**\n     * Returns asset total supply.\n     *\n     * @param _symbol asset symbol.\n     *\n     * @return asset total supply.\n     */\n    function totalSupply(bytes32 _symbol) constant returns(uint) {\n        return assets[_symbol].totalSupply;\n    }\n\n    /**\n     * Returns asset balance for a particular holder.\n     *\n     * @param _holder holder address.\n     * @param _symbol asset symbol.\n     *\n     * @return holder balance.\n     */\n    function balanceOf(address _holder, bytes32 _symbol) constant returns(uint) {\n        return _balanceOf(getHolderId(_holder), _symbol);\n    }\n\n    /**\n     * Returns asset balance for a particular holder id.\n     *\n     * @param _holderId holder id.\n     * @param _symbol asset symbol.\n     *\n     * @return holder balance.\n     */\n    function _balanceOf(uint _holderId, bytes32 _symbol) constant returns(uint) {\n        return assets[_symbol].wallets[_holderId].balance;\n    }\n\n    /**\n     * Returns current address for a particular holder id.\n     *\n     * @param _holderId holder id.\n     *\n     * @return holder address.\n     */\n    function _address(uint _holderId) constant returns(address) {\n        return holders[_holderId].addr;\n    }\n\n    /**\n     * Sets Proxy contract address for a particular asset.\n     *\n     * Can be set only once for each asset, and only by contract owner.\n     *\n     * @param _address Proxy contract address.\n     * @param _symbol asset symbol.\n     *\n     * @return success.\n     */\n    function setProxy(address _address, bytes32 _symbol) onlyContractOwner() returns(bool) {\n        if (proxies[_symbol] != 0x0) {\n            return false;\n        }\n        proxies[_symbol] = _address;\n        return true;\n    }\n\n    /**\n     * Transfers asset balance between holders wallets.\n     *\n     * @param _fromId holder id to take from.\n     * @param _toId holder id to give to.\n     * @param _value amount to transfer.\n     * @param _symbol asset symbol.\n     */\n    function _transferDirect(uint _fromId, uint _toId, uint _value, bytes32 _symbol) internal {\n        assets[_symbol].wallets[_fromId].balance -= _value;\n        assets[_symbol].wallets[_toId].balance += _value;\n    }\n\n    /**\n     * Transfers asset balance between holders wallets.\n     *\n     * Performs sanity checks and takes care of allowances adjustment.\n     *\n     * @param _fromId holder id to take from.\n     * @param _toId holder id to give to.\n     * @param _value amount to transfer.\n     * @param _symbol asset symbol.\n     * @param _reference transfer comment to be included in a Transfer event.\n     * @param _senderId transfer initiator holder id.\n     *\n     * @return success.\n     */\n    function _transfer(uint _fromId, uint _toId, uint _value, bytes32 _symbol, string _reference, uint _senderId) internal returns(bool) {\n        // Should not allow to send to oneself.\n        if (_fromId == _toId) {\n            _error(\"Cannot send to oneself\");\n            return false;\n        }\n        // Should have positive value.\n        if (_value == 0) {\n            _error(\"Cannot send 0 value\");\n            return false;\n        }\n        // Should have enough balance.\n        if (_balanceOf(_fromId, _symbol) < _value) {\n            _error(\"Insufficient balance\");\n            return false;\n        }\n        // Should have enough allowance.\n        if (_fromId != _senderId && _allowance(_fromId, _senderId, _symbol) < _value) {\n            _error(\"Not enough allowance\");\n            return false;\n        }\n        _transferDirect(_fromId, _toId, _value, _symbol);\n        // Adjust allowance.\n        if (_fromId != _senderId) {\n            assets[_symbol].wallets[_fromId].allowance[_senderId] -= _value;\n        }\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: n/a after HF 4;\n        // Recursive Call: safe, all changes already made.\n        eventsHistory.emitTransfer(_address(_fromId), _address(_toId), _symbol, _value, _reference);\n        _proxyTransferEvent(_fromId, _toId, _value, _symbol);\n        return true;\n    }\n\n    /**\n     * Transfers asset balance between holders wallets.\n     *\n     * Can only be called by asset proxy.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _symbol asset symbol.\n     * @param _reference transfer comment to be included in a Transfer event.\n     * @param _sender transfer initiator address.\n     *\n     * @return success.\n     */\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) onlyProxy(_symbol) returns(bool) {\n        return _transfer(getHolderId(_sender), _createHolderId(_to), _value, _symbol, _reference, getHolderId(_sender));\n    }\n\n    /**\n     * Ask asset Proxy contract to emit ERC20 compliant Transfer event.\n     *\n     * @param _fromId holder id to take from.\n     * @param _toId holder id to give to.\n     * @param _value amount to transfer.\n     * @param _symbol asset symbol.\n     */\n    function _proxyTransferEvent(uint _fromId, uint _toId, uint _value, bytes32 _symbol) internal {\n        if (proxies[_symbol] != 0x0) {\n            // Internal Out Of Gas/Throw: revert this transaction too;\n            // Call Stack Depth Limit reached: n/a after HF 4;\n            // Recursive Call: safe, all changes already made.\n            Proxy(proxies[_symbol]).emitTransfer(_address(_fromId), _address(_toId), _value);\n        }\n    }\n\n    /**\n     * Returns holder id for the specified address.\n     *\n     * @param _holder holder address.\n     *\n     * @return holder id.\n     */\n    function getHolderId(address _holder) constant returns(uint) {\n        return holderIndex[_holder];\n    }\n\n    /**\n     * Returns holder id for the specified address, creates it if needed.\n     *\n     * @param _holder holder address.\n     *\n     * @return holder id.\n     */\n    function _createHolderId(address _holder) internal returns(uint) {\n        uint holderId = holderIndex[_holder];\n        if (holderId == 0) {\n            holderId = ++holdersCount;\n            holders[holderId].addr = _holder;\n            holderIndex[_holder] = holderId;\n        }\n        return holderId;\n    }\n\n    /**\n     * Issues new asset token on the platform.\n     *\n     * Tokens issued with this call go straight to contract owner.\n     * Each symbol can be issued only once, and only by contract owner.\n     *\n     * @param _symbol asset symbol.\n     * @param _value amount of tokens to issue immediately.\n     * @param _name name of the asset.\n     * @param _description description for the asset.\n     * @param _baseUnit number of decimals.\n     * @param _isReissuable dynamic or fixed supply.\n     *\n     * @return success.\n     */\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) onlyContractOwner() returns(bool) {\n        // Should have positive value if supply is going to be fixed.\n        if (_value == 0 && !_isReissuable) {\n            _error(\"Cannot issue 0 value fixed asset\");\n            return false;\n        }\n        // Should not be issued yet.\n        if (isCreated(_symbol)) {\n            _error(\"Asset already issued\");\n            return false;\n        }\n        uint holderId = _createHolderId(msg.sender);\n\n        assets[_symbol] = Asset(holderId, _value, _name, _description, _isReissuable, _baseUnit);\n        assets[_symbol].wallets[holderId].balance = _value;\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: n/a after HF 4;\n        // Recursive Call: safe, all changes already made.\n        eventsHistory.emitIssue(_symbol, _value, _address(holderId));\n        return true;\n    }\n\n    /**\n     * Issues additional asset tokens if the asset have dynamic supply.\n     *\n     * Tokens issued with this call go straight to asset owner.\n     * Can only be called by asset owner.\n     *\n     * @param _symbol asset symbol.\n     * @param _value amount of additional tokens to issue.\n     *\n     * @return success.\n     */\n    function reissueAsset(bytes32 _symbol, uint _value) onlyOwner(_symbol) returns(bool) {\n        // Should have positive value.\n        if (_value == 0) {\n            _error(\"Cannot reissue 0 value\");\n            return false;\n        }\n        Asset asset = assets[_symbol];\n        // Should have dynamic supply.\n        if (!asset.isReissuable) {\n            _error(\"Cannot reissue fixed asset\");\n            return false;\n        }\n        // Resulting total supply should not overflow.\n        if (asset.totalSupply + _value < asset.totalSupply) {\n            _error(\"Total supply overflow\");\n            return false;\n        }\n        uint holderId = getHolderId(msg.sender);\n        asset.wallets[holderId].balance += _value;\n        asset.totalSupply += _value;\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: n/a after HF 4;\n        // Recursive Call: safe, all changes already made.\n        eventsHistory.emitIssue(_symbol, _value, _address(holderId));\n        _proxyTransferEvent(0, holderId, _value, _symbol);\n        return true;\n    }\n\n    /**\n     * Destroys specified amount of senders asset tokens.\n     *\n     * @param _symbol asset symbol.\n     * @param _value amount of tokens to destroy.\n     *\n     * @return success.\n     */\n    function revokeAsset(bytes32 _symbol, uint _value) returns(bool) {\n        // Should have positive value.\n        if (_value == 0) {\n            _error(\"Cannot revoke 0 value\");\n            return false;\n        }\n        Asset asset = assets[_symbol];\n        uint holderId = getHolderId(msg.sender);\n        // Should have enough tokens.\n        if (asset.wallets[holderId].balance < _value) {\n            _error(\"Not enough tokens to revoke\");\n            return false;\n        }\n        asset.wallets[holderId].balance -= _value;\n        asset.totalSupply -= _value;\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: n/a after HF 4;\n        // Recursive Call: safe, all changes already made.\n        eventsHistory.emitRevoke(_symbol, _value, _address(holderId));\n        _proxyTransferEvent(holderId, 0, _value, _symbol);\n        return true;\n    }\n\n    /**\n     * Passes asset ownership to specified address.\n     *\n     * Only ownership is changed, balances are not touched.\n     * Can only be called by asset owner.\n     *\n     * @param _symbol asset symbol.\n     * @param _newOwner address to become a new owner.\n     *\n     * @return success.\n     */\n    function changeOwnership(bytes32 _symbol, address _newOwner) onlyOwner(_symbol) returns(bool) {\n        Asset asset = assets[_symbol];\n        uint newOwnerId = _createHolderId(_newOwner);\n        // Should pass ownership to another holder.\n        if (asset.owner == newOwnerId) {\n            _error(\"Cannot pass ownership to oneself\");\n            return false;\n        }\n        address oldOwner = _address(asset.owner);\n        asset.owner = newOwnerId;\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: n/a after HF 4;\n        // Recursive Call: safe, all changes already made.\n        eventsHistory.emitOwnershipChange(oldOwner, _address(newOwnerId), _symbol);\n        return true;\n    }\n\n    /**\n     * Check if specified holder trusts an address with recovery procedure.\n     *\n     * @param _from truster.\n     * @param _to trustee.\n     *\n     * @return trust existance.\n     */\n    function isTrusted(address _from, address _to) constant returns(bool) {\n        return holders[getHolderId(_from)].trust[_to];\n    }\n\n    /**\n     * Trust an address to perform recovery procedure for the caller.\n     *\n     * @param _to trustee.\n     *\n     * @return success.\n     */\n    function trust(address _to) returns(bool) {\n        uint fromId = _createHolderId(msg.sender);\n        // Should trust to another address.\n        if (fromId == getHolderId(_to)) {\n            _error(\"Cannot trust to oneself\");\n            return false;\n        }\n        // Should trust to yet untrusted.\n        if (isTrusted(msg.sender, _to)) {\n            _error(\"Already trusted\");\n            return false;\n        }\n        holders[fromId].trust[_to] = true;\n        return true;\n    }\n\n    /**\n     * Revoke trust to perform recovery procedure from an address.\n     *\n     * @param _to trustee.\n     *\n     * @return success.\n     */\n    function distrust(address _to) checkTrust(msg.sender, _to) returns(bool) {\n        holders[getHolderId(msg.sender)].trust[_to] = false;\n        return true;\n    }\n\n    /**\n     * Perform recovery procedure.\n     *\n     * This function logic is actually more of an addAccess(uint _holderId, address _to).\n     * It grants another address access to recovery subject wallets.\n     * Can only be called by trustee of recovery subject.\n     *\n     * @param _from holder address to recover from.\n     * @param _to address to grant access to.\n     *\n     * @return success.\n     */\n    function recover(address _from, address _to) checkTrust(_from, msg.sender) returns(bool) {\n        // Should recover to previously unused address.\n        if (getHolderId(_to) != 0) {\n            _error(\"Should recover to new address\");\n            return false;\n        }\n        // We take current holder address because it might not equal _from.\n        // It is possible to recover from any old holder address, but event should have the current one.\n        address from = holders[getHolderId(_from)].addr;\n        holders[getHolderId(_from)].addr = _to;\n        holderIndex[_to] = getHolderId(_from);\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: revert this transaction too;\n        // Recursive Call: safe, all changes already made.\n        eventsHistory.emitRecovery(from, _to, msg.sender);\n        return true;\n    }\n\n    /**\n     * Sets asset spending allowance for a specified spender.\n     *\n     * Note: to revoke allowance, one needs to set allowance to 0.\n     *\n     * @param _spenderId holder id to set allowance for.\n     * @param _value amount to allow.\n     * @param _symbol asset symbol.\n     * @param _senderId approve initiator holder id.\n     *\n     * @return success.\n     */\n    function _approve(uint _spenderId, uint _value, bytes32 _symbol, uint _senderId) internal returns(bool) {\n        // Asset should exist.\n        if (!isCreated(_symbol)) {\n            _error(\"Asset is not issued\");\n            return false;\n        }\n        // Should allow to another holder.\n        if (_senderId == _spenderId) {\n            _error(\"Cannot approve to oneself\");\n            return false;\n        }\n        assets[_symbol].wallets[_senderId].allowance[_spenderId] = _value;\n        // Internal Out Of Gas/Throw: revert this transaction too;\n        // Call Stack Depth Limit reached: revert this transaction too;\n        // Recursive Call: safe, all changes already made.\n        eventsHistory.emitApprove(_address(_senderId), _address(_spenderId), _symbol, _value);\n        if (proxies[_symbol] != 0x0) {\n            // Internal Out Of Gas/Throw: revert this transaction too;\n            // Call Stack Depth Limit reached: n/a after HF 4;\n            // Recursive Call: safe, all changes already made.\n            Proxy(proxies[_symbol]).emitApprove(_address(_senderId), _address(_spenderId), _value);\n        }\n        return true;\n    }\n\n    /**\n     * Sets asset spending allowance for a specified spender.\n     *\n     * Can only be called by asset proxy.\n     *\n     * @param _spender holder address to set allowance to.\n     * @param _value amount to allow.\n     * @param _symbol asset symbol.\n     * @param _sender approve initiator address.\n     *\n     * @return success.\n     */\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) onlyProxy(_symbol) returns(bool) {\n        return _approve(_createHolderId(_spender), _value, _symbol, _createHolderId(_sender));\n    }\n\n    /**\n     * Returns asset allowance from one holder to another.\n     *\n     * @param _from holder that allowed spending.\n     * @param _spender holder that is allowed to spend.\n     * @param _symbol asset symbol.\n     *\n     * @return holder to spender allowance.\n     */\n    function allowance(address _from, address _spender, bytes32 _symbol) constant returns(uint) {\n        return _allowance(getHolderId(_from), getHolderId(_spender), _symbol);\n    }\n\n    /**\n     * Returns asset allowance from one holder to another.\n     *\n     * @param _fromId holder id that allowed spending.\n     * @param _toId holder id that is allowed to spend.\n     * @param _symbol asset symbol.\n     *\n     * @return holder to spender allowance.\n     */\n    function _allowance(uint _fromId, uint _toId, bytes32 _symbol) constant internal returns(uint) {\n        return assets[_symbol].wallets[_fromId].allowance[_toId];\n    }\n\n    /**\n     * Prforms allowance transfer of asset balance between holders wallets.\n     *\n     * Can only be called by asset proxy.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _symbol asset symbol.\n     * @param _reference transfer comment to be included in a Transfer event.\n     * @param _sender allowance transfer initiator address.\n     *\n     * @return success.\n     */\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) onlyProxy(_symbol) returns(bool) {\n        return _transfer(getHolderId(_from), _createHolderId(_to), _value, _symbol, _reference, getHolderId(_sender));\n    }\n}\n\ncontract ChronoBankAsset {\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) returns(bool);\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\n    function __approve(address _spender, uint _value, address _sender) returns(bool);\n    function __process(bytes _data, address _sender) payable {\n        throw;\n    }\n}\n\ncontract ERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed spender, uint256 value);\n\n    function totalSupply() constant returns (uint256 supply);\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n}\n\ncontract ChronoBankAssetProxy is ERC20 {\n    // Assigned platform, immutable.\n    ChronoBankPlatform public chronoBankPlatform;\n\n    // Assigned symbol, immutable.\n    bytes32 smbl;\n\n    // Assigned name, immutable.\n    string public name;\n\n    string public symbol;\n\n    /**\n     * Sets platform address, assigns symbol and name.\n     *\n     * Can be set only once.\n     *\n     * @param _chronoBankPlatform platform contract address.\n     * @param _symbol assigned symbol.\n     * @param _name assigned name.\n     *\n     * @return success.\n     */\n    function init(ChronoBankPlatform _chronoBankPlatform, string _symbol, string _name) returns(bool) {\n        if (address(chronoBankPlatform) != 0x0) {\n            return false;\n        }\n        chronoBankPlatform = _chronoBankPlatform;\n        symbol = _symbol;\n        smbl = stringToBytes32(_symbol);\n        name = _name;\n        return true;\n    }\n\nfunction stringToBytes32(string memory source) returns (bytes32 result) {\n    assembly {\n        result := mload(add(source, 32))\n    }\n}\n\n    /**\n     * Only platform is allowed to call.\n     */\n    modifier onlyChronoBankPlatform() {\n        if (msg.sender == address(chronoBankPlatform)) {\n            _;\n        }\n    }\n\n    /**\n     * Only current asset owner is allowed to call.\n     */\n    modifier onlyAssetOwner() {\n        if (chronoBankPlatform.isOwner(msg.sender, smbl)) {\n            _;\n        }\n    }\n\n    /**\n     * Returns asset implementation contract for current caller.\n     *\n     * @return asset implementation contract.\n     */\n    function _getAsset() internal returns(ChronoBankAsset) {\n        return ChronoBankAsset(getVersionFor(msg.sender));\n    }\n\n    /**\n     * Returns asset total supply.\n     *\n     * @return asset total supply.\n     */\n    function totalSupply() constant returns(uint) {\n        return chronoBankPlatform.totalSupply(smbl);\n    }\n\n    /**\n     * Returns asset balance for a particular holder.\n     *\n     * @param _owner holder address.\n     *\n     * @return holder balance.\n     */\n    function balanceOf(address _owner) constant returns(uint) {\n        return chronoBankPlatform.balanceOf(_owner, smbl);\n    }\n\n    /**\n     * Returns asset allowance from one holder to another.\n     *\n     * @param _from holder that allowed spending.\n     * @param _spender holder that is allowed to spend.\n     *\n     * @return holder to spender allowance.\n     */\n    function allowance(address _from, address _spender) constant returns(uint) {\n        return chronoBankPlatform.allowance(_from, _spender, smbl);\n    }\n\n    /**\n     * Returns asset decimals.\n     *\n     * @return asset decimals.\n     */\n    function decimals() constant returns(uint8) {\n        return chronoBankPlatform.baseUnit(smbl);\n    }\n\n    /**\n     * Transfers asset balance from the caller to specified receiver.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     *\n     * @return success.\n     */\n    function transfer(address _to, uint _value) returns(bool) {\n        return _transferWithReference(_to, _value, \"\");\n    }\n\n    /**\n     * Transfers asset balance from the caller to specified receiver adding specified comment.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     *\n     * @return success.\n     */\n    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\n        return _transferWithReference(_to, _value, _reference);\n    }\n\n    /**\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\n     * the caller address.\n     *\n     * @return success.\n     */\n    function _transferWithReference(address _to, uint _value, string _reference) internal returns(bool) {\n        return _getAsset().__transferWithReference(_to, _value, _reference, msg.sender);\n    }\n\n    /**\n     * Performs transfer call on the platform by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) onlyAccess(_sender) returns(bool) {\n        return chronoBankPlatform.proxyTransferWithReference(_to, _value, smbl, _reference, _sender);\n    }\n\n    /**\n     * Prforms allowance transfer of asset balance between holders.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     *\n     * @return success.\n     */\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\n        return _transferFromWithReference(_from, _to, _value, \"\");\n    }\n\n    /**\n     * Prforms allowance transfer of asset balance between holders adding specified comment.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     *\n     * @return success.\n     */\n    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool) {\n        return _transferFromWithReference(_from, _to, _value, _reference);\n    }\n\n    /**\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\n     * the caller address.\n     *\n     * @return success.\n     */\n    function _transferFromWithReference(address _from, address _to, uint _value, string _reference) internal returns(bool) {\n        return _getAsset().__transferFromWithReference(_from, _to, _value, _reference, msg.sender);\n    }\n\n    /**\n     * Performs allowance transfer call on the platform by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) onlyAccess(_sender) returns(bool) {\n        return chronoBankPlatform.proxyTransferFromWithReference(_from, _to, _value, smbl, _reference, _sender);\n    }\n\n    /**\n     * Sets asset spending allowance for a specified spender.\n     *\n     * @param _spender holder address to set allowance to.\n     * @param _value amount to allow.\n     *\n     * @return success.\n     */\n    function approve(address _spender, uint _value) returns(bool) {\n        return _approve(_spender, _value);\n    }\n\n    /**\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\n     * the caller address.\n     *\n     * @return success.\n     */\n    function _approve(address _spender, uint _value) internal returns(bool) {\n        return _getAsset().__approve(_spender, _value, msg.sender);\n    }\n\n    /**\n     * Performs allowance setting call on the platform by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _spender holder address to set allowance to.\n     * @param _value amount to allow.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function __approve(address _spender, uint _value, address _sender) onlyAccess(_sender) returns(bool) {\n        return chronoBankPlatform.proxyApprove(_spender, _value, smbl, _sender);\n    }\n\n    /**\n     * Emits ERC20 Transfer event on this contract.\n     *\n     * Can only be, and, called by assigned platform when asset transfer happens.\n     */\n    function emitTransfer(address _from, address _to, uint _value) onlyChronoBankPlatform() {\n        Transfer(_from, _to, _value);\n    }\n\n    /**\n     * Emits ERC20 Approval event on this contract.\n     *\n     * Can only be, and, called by assigned platform when asset allowance set happens.\n     */\n    function emitApprove(address _from, address _spender, uint _value) onlyChronoBankPlatform() {\n        Approval(_from, _spender, _value);\n    }\n\n    /**\n     * Resolves asset implementation contract for the caller and forwards there transaction data,\n     * along with the value. This allows for proxy interface growth.\n     */\n    function () payable {\n        _getAsset().__process.value(msg.value)(msg.data, msg.sender);\n    }\n\n    /**\n     * Indicates an upgrade freeze-time start, and the next asset implementation contract.\n     */\n    event UpgradeProposal(address newVersion);\n\n    // Current asset implementation contract address.\n    address latestVersion;\n\n    // Proposed next asset implementation contract address.\n    address pendingVersion;\n\n    // Upgrade freeze-time start.\n    uint pendingVersionTimestamp;\n\n    // Timespan for users to review the new implementation and make decision.\n    uint constant UPGRADE_FREEZE_TIME = 3 days;\n\n    // Asset implementation contract address that user decided to stick with.\n    // 0x0 means that user uses latest version.\n    mapping(address => address) userOptOutVersion;\n\n    /**\n     * Only asset implementation contract assigned to sender is allowed to call.\n     */\n    modifier onlyAccess(address _sender) {\n        if (getVersionFor(_sender) == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * Returns asset implementation contract address assigned to sender.\n     *\n     * @param _sender sender address.\n     *\n     * @return asset implementation contract address.\n     */\n    function getVersionFor(address _sender) constant returns(address) {\n        return userOptOutVersion[_sender] == 0 ? latestVersion : userOptOutVersion[_sender];\n    }\n\n    /**\n     * Returns current asset implementation contract address.\n     *\n     * @return asset implementation contract address.\n     */\n    function getLatestVersion() constant returns(address) {\n        return latestVersion;\n    }\n\n    /**\n     * Returns proposed next asset implementation contract address.\n     *\n     * @return asset implementation contract address.\n     */\n    function getPendingVersion() constant returns(address) {\n        return pendingVersion;\n    }\n\n    /**\n     * Returns upgrade freeze-time start.\n     *\n     * @return freeze-time start.\n     */\n    function getPendingVersionTimestamp() constant returns(uint) {\n        return pendingVersionTimestamp;\n    }\n\n    /**\n     * Propose next asset implementation contract address.\n     *\n     * Can only be called by current asset owner.\n     *\n     * Note: freeze-time should not be applied for the initial setup.\n     *\n     * @param _newVersion asset implementation contract address.\n     *\n     * @return success.\n     */\n    function proposeUpgrade(address _newVersion) onlyAssetOwner() returns(bool) {\n        // Should not already be in the upgrading process.\n        if (pendingVersion != 0x0) {\n            return false;\n        }\n        // New version address should be other than 0x0.\n        if (_newVersion == 0x0) {\n            return false;\n        }\n        // Don't apply freeze-time for the initial setup.\n        if (latestVersion == 0x0) {\n            latestVersion = _newVersion;\n            return true;\n        }\n        pendingVersion = _newVersion;\n        pendingVersionTimestamp = now;\n        UpgradeProposal(_newVersion);\n        return true;\n    }\n\n    /**\n     * Cancel the pending upgrade process.\n     *\n     * Can only be called by current asset owner.\n     *\n     * @return success.\n     */\n    function purgeUpgrade() onlyAssetOwner() returns(bool) {\n        if (pendingVersion == 0x0) {\n            return false;\n        }\n        delete pendingVersion;\n        delete pendingVersionTimestamp;\n        return true;\n    }\n\n    /**\n     * Finalize an upgrade process setting new asset implementation contract address.\n     *\n     * Can only be called after an upgrade freeze-time.\n     *\n     * @return success.\n     */\n    function commitUpgrade() returns(bool) {\n        if (pendingVersion == 0x0) {\n            return false;\n        }\n        if (pendingVersionTimestamp + UPGRADE_FREEZE_TIME > now) {\n            return false;\n        }\n        latestVersion = pendingVersion;\n        delete pendingVersion;\n        delete pendingVersionTimestamp;\n        return true;\n    }\n\n    /**\n     * Disagree with proposed upgrade, and stick with current asset implementation\n     * until further explicit agreement to upgrade.\n     *\n     * @return success.\n     */\n    function optOut() returns(bool) {\n        if (userOptOutVersion[msg.sender] != 0x0) {\n            return false;\n        }\n        userOptOutVersion[msg.sender] = latestVersion;\n        return true;\n    }\n\n    /**\n     * Implicitly agree to upgrade to current and future asset implementation upgrades,\n     * until further explicit disagreement.\n     *\n     * @return success.\n     */\n    function optIn() returns(bool) {\n        delete userOptOutVersion[msg.sender];\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commitUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApprove\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chronoBankPlatform\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingVersionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purgeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optIn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_chronoBankPlatform\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"address\"}],\"name\":\"proposeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"__transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getVersionFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newVersion\",\"type\":\"address\"}],\"name\":\"UpgradeProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": ""
}