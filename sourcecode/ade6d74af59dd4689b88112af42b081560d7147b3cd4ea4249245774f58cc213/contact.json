{
  "address": "0x26cb3641aaa43911f1d4cb2ce544eb652aac7c47",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CrystalToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-10\n*/\n\npragma solidity ^0.4.19;\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic\n{\n    uint256 public totalSupply;\n\n    function balanceOf(address who) public constant returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic\n{\n    function allowance(address owner, address spender) public constant returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// Contract Ownable (defines a contract with an owner)\n//------------------------------------------------------------------------------------------------------------\ncontract Ownable\n{\n    /**\n    * @dev Address of the current owner\n    */\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    // Constructor. Set the original `owner` of the contract to the sender account.\n    function Ownable() public\n    {\n        owner = msg.sender;\n    }\n\n    // Throws if called by any account other than the owner.\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /** Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public\n    {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n// ------------------------------------------------------------------------------------------------------------\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath\n{\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract SafeBasicToken is ERC20Basic\n{\n    // Use safemath for math operations\n    using SafeMath for uint256;\n\n    // Maps each address to its current balance\n    mapping(address => uint256) balances;\n\n    // List of admins that can transfer tokens also during the ICO\n    mapping(address => bool) public admin;\n\n    // List of addresses that can receive tokens also during the ICO\n    mapping(address => bool) public receivable;\n\n    // Specifies whether the tokens are locked(ICO is running) - Tokens cannot be transferred during the ICO\n    bool public locked;\n\n\n    // Checks the size of the message to avoid attacks\n    modifier onlyPayloadSize(uint size)\n    {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n\n    /** Transfer tokens to the specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool)\n    {\n        require(_to != address(0));\n        require(!locked || admin[msg.sender] == true || receivable[_to] == true);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    /** Get the balance of the specified address.\n    * @param _owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256)\n    {\n        return balances[_owner];\n    }\n}\n\n\n/** @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract SafeStandardToken is ERC20, SafeBasicToken\n{\n    /** Map address => (address => value)\n    *   allowed[_owner][_spender] represents the amount of tokens the _spender can use on behalf of the _owner\n    */\n    mapping(address => mapping(address => uint256)) allowed;\n\n\n    /** Return the allowance of the _spender on behalf of the _owner\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will be allowed to spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining)\n    {\n        return allowed[_owner][_spender];\n    }\n\n\n    /** Allow the _spender to spend _value tokens on behalf of msg.sender.\n     * To avoid race condition, the current allowed amount must be first set to 0 through a different transaction.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool)\n    {\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\n    /** Increase the allowance for _spender by _addedValue (to be use when allowed[_spender] > 0)\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success)\n    {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n\n    /** Decrease the allowance for _spender by _subtractedValue. Set it to 0 if _subtractedValue is less then the current allowance\n    */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success)\n    {\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue)\n            allowed[msg.sender][_spender] = 0;\n        else\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n\n    /** Transfer tokens on behalf of _from to _to (if allowed)\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)\n    {\n        require(_to != address(0));\n        uint256 _allowance = allowed[_from][msg.sender];\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n}\n\n\n\n// Main contract\ncontract CrystalToken is SafeStandardToken, Ownable\n{\n    using SafeMath for uint256;\n\n    string public constant name = \"CrystalToken\";\n    string public constant symbol = \"CYL\";\n    uint256 public constant decimals = 18;\n    uint256 public constant INITIAL_SUPPLY = 28000000 * (10 ** uint256(decimals));\n\n    // Struct representing information of a single round\n    struct Round\n    {\n        uint256 startTime;                      // Timestamp of the start of the round\n        uint256 endTime;                        // Timestamp of the end of the round\n        uint256 availableTokens;                // Number of tokens available in this round\n        uint256 maxPerUser;                     // Number of maximum tokens per user\n        uint256 rate;                           // Number of token per wei in this round\n        mapping(address => uint256) balances;   // Balances of the users in this round\n    }\n\n    // Array containing information of all the rounds\n    Round[5] rounds;\n\n    // Address where funds are collected\n    address public wallet;\n\n    // Amount of collected money in wei\n    uint256 public weiRaised;\n\n    // Current round index\n    uint256 public runningRound;\n\n    // Constructor\n    function CrystalToken(address _walletAddress) public\n    {\n        wallet = _walletAddress;\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n\n        rounds[0] = Round(1519052400, 1519138800,  250000 * (10 ** 18), 200 * (10 ** 18), 2000);    // 19 Feb 2018 - 15.00 GMT\n        rounds[1] = Round(1519398000, 1519484400, 1250000 * (10 ** 18), 400 * (10 ** 18), 1333);    // 23 Feb 2018 - 15.00 GMT\n        rounds[2] = Round(1519657200, 1519743600, 1500000 * (10 ** 18), 1000 * (10 ** 18), 1000);   // 26 Feb 2018 - 15.00 GMT\n        rounds[3] = Round(1519830000, 1519916400, 2000000 * (10 ** 18), 1000 * (10 ** 18), 800);    // 28 Feb 2018 - 15.00 GMT\n        rounds[4] = Round(1520262000, 1520348400, 2000000 * (10 ** 18), 2000 * (10 ** 18), 667);    //  5 Mar 2018 - 15.00 GMT\n\n        // Set the owner as an admin\n        admin[msg.sender] = true;\n\n        // Lock the tokens for the ICO\n        locked = true;\n\n        // Set the current round to 100 (no round)\n        runningRound = uint256(0);\n    }\n\n\n    /** Event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param beneficiary who got the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n    // Rate change event\n    event RateChanged(address indexed owner, uint round, uint256 old_rate, uint256 new_rate);\n\n\n    // Fallback function, used to buy token\n    // If ETH are sent to the contract address, without any additional data, this function is called\n    function() public payable\n    {\n        // Take the address of the buyer\n        address beneficiary = msg.sender;\n\n        // Check that the sender is not the 0 address\n        require(beneficiary != 0x0);\n\n        // Check that sent ETH in wei is > 0\n        uint256 weiAmount = msg.value;\n        require(weiAmount != 0);\n\n        // Get the current round (100 if there is no open round)\n        uint256 roundIndex = runningRound;\n\n        // Check if there is a running round\n        require(roundIndex != uint256(100));\n\n        // Get the information of the current round\n        Round storage round = rounds[roundIndex];\n\n        // Calculate the token amount to sell. Exceeding amount will not generate tokens\n        uint256 tokens = weiAmount.mul(round.rate);\n        uint256 maxPerUser = round.maxPerUser;\n        uint256 remaining = maxPerUser - round.balances[beneficiary];\n        if(remaining < tokens)\n            tokens = remaining;\n\n        // Check if the tokens can be sold\n        require(areTokensBuyable(roundIndex, tokens));\n\n        // Reduce the number of available tokens in the round (fails if there are no more available tokens)\n        round.availableTokens = round.availableTokens.sub(tokens);\n\n        // Add the number of tokens to the current user's balance of this round\n        round.balances[msg.sender] = round.balances[msg.sender].add(tokens);\n\n        // Transfer the amount of token to the buyer\n        balances[owner] = balances[owner].sub(tokens);\n        balances[beneficiary] = balances[beneficiary].add(tokens);\n        Transfer(owner, beneficiary, tokens);\n\n        // Raise the event of token purchase\n        TokenPurchase(beneficiary, beneficiary, weiAmount, tokens);\n\n        // Update the number of collected money\n        weiRaised = weiRaised.add(weiAmount);\n\n        // Transfer funds to the wallet\n        wallet.transfer(msg.value);\n    }\n\n\n    /** Check if there is an open round and if there are enough tokens available for current phase and for the sender\n    * @param _roundIndex index of the current round\n    * @param _tokens number of requested tokens\n    */\n    function areTokensBuyable(uint _roundIndex, uint256 _tokens) internal constant returns (bool)\n    {\n        uint256 current_time = block.timestamp;\n        Round storage round = rounds[_roundIndex];\n\n        return (\n        _tokens > 0 &&                                              // Check that the user can still buy tokens\n        round.availableTokens >= _tokens &&                         // Check that there are still available tokens\n        current_time >= round.startTime &&                          // Check that the current timestamp is after the start of the round\n        current_time <= round.endTime                               // Check that the current timestamp is before the end of the round\n        );\n    }\n\n\n\n    // Return the current number of unsold tokens\n    function tokenBalance() constant public returns (uint256)\n    {\n        return balanceOf(owner);\n    }\n\n\n    event Burn(address burner, uint256 value);\n\n\n    /** Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public onlyOwner\n    {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n\n\n    /** Mint a specific amount of tokens.\n   * @param _value The amount of token to be minted.\n   */\n    function mint(uint256 _value) public onlyOwner\n    {\n        totalSupply = totalSupply.add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_value);\n    }\n\n\n\n    // Functions to set the features of each round (only for the owner) and of the whole ICO\n    // ----------------------------------------------------------------------------------------\n    function setTokensLocked(bool _value) onlyOwner public\n    {\n        locked = _value;\n    }\n\n    /** Set the current round index\n    * @param _roundIndex the new round index to set\n    */\n    function setRound(uint256 _roundIndex) public onlyOwner\n    {\n        runningRound = _roundIndex;\n    }\n\n    function setAdmin(address _addr, bool _value) onlyOwner public\n    {\n        admin[_addr] = _value;\n    }\n\n    function setReceivable(address _addr, bool _value) onlyOwner public\n    {\n        receivable[_addr] = _value;\n    }\n\n    function setRoundStart(uint _round, uint256 _value) onlyOwner public\n    {\n        require(_round >= 0 && _round < rounds.length);\n        rounds[_round].startTime = _value;\n    }\n\n    function setRoundEnd(uint _round, uint256 _value) onlyOwner public\n    {\n        require(_round >= 0 && _round < rounds.length);\n        rounds[_round].endTime = _value;\n    }\n\n    function setRoundAvailableToken(uint _round, uint256 _value) onlyOwner public\n    {\n        require(_round >= 0 && _round < rounds.length);\n        rounds[_round].availableTokens = _value;\n    }\n\n    function setRoundMaxPerUser(uint _round, uint256 _value) onlyOwner public\n    {\n        require(_round >= 0 && _round < rounds.length);\n        rounds[_round].maxPerUser = _value;\n    }\n\n    function setRoundRate(uint _round, uint256 _round_usd_cents, uint256 _ethvalue_usd) onlyOwner public\n    {\n        require(_round >= 0 && _round < rounds.length);\n        uint256 rate = _ethvalue_usd * 100 / _round_usd_cents;\n        uint256 oldRate = rounds[_round].rate;\n        rounds[_round].rate = rate;\n        RateChanged(msg.sender, _round, oldRate, rounds[_round].rate);\n    }\n    // ----------------------------------------------------------------------------------------\n\n\n    // Functions to get the features of each round\n    // ----------------------------------------------------------------------------------------\n    function getRoundUserBalance(uint _round, address _user) public constant returns (uint256)\n    {\n        require(_round >= 0 && _round < rounds.length);\n        return rounds[_round].balances[_user];\n    }\n\n    function getRoundStart(uint _round) public constant returns (uint256)\n    {\n        require(_round >= 0 && _round < rounds.length);\n        return rounds[_round].startTime;\n    }\n\n    function getRoundEnd(uint _round) public constant returns (uint256)\n    {\n        require(_round >= 0 && _round < rounds.length);\n        return rounds[_round].endTime;\n    }\n\n    function getRoundAvailableToken(uint _round) public constant returns (uint256)\n    {\n        require(_round >= 0 && _round < rounds.length);\n        return rounds[_round].availableTokens;\n    }\n\n    function getRoundMaxPerUser(uint _round) public constant returns (uint256)\n    {\n        require(_round >= 0 && _round < rounds.length);\n        return rounds[_round].maxPerUser;\n    }\n\n    function getRoundRate(uint _round) public constant returns (uint256)\n    {\n        require(_round >= 0 && _round < rounds.length);\n        return rounds[_round].rate;\n    }\n    // ----------------------------------------------------------------------------------------\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setReceivable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setTokensLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_round_usd_cents\",\"type\":\"uint256\"},{\"name\":\"_ethvalue_usd\",\"type\":\"uint256\"}],\"name\":\"setRoundRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRoundMaxPerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRoundEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundMaxPerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundIndex\",\"type\":\"uint256\"}],\"name\":\"setRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundAvailableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRoundUserBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRoundStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"runningRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"receivable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRoundAvailableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_walletAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"old_rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_rate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000024cf63494b22472d864c827258e30d722c53c97a"
}