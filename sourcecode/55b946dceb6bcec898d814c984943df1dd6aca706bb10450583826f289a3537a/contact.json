{
  "address": "0xcf5dfe6e2fa63af41e9c01df75e79d3fda69b5f3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MUSystem",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-23\n*/\n\n// MUSystem is based of the mathematical algorithm created \n// by the Mavrodi brothers - Sergey and Vyacheslav. \n// The solidity code was written by the enthusiast and devoted MMM participant Andrew from Russia.\n// According to these rules MMM worked in Russia in the nineties. \n// Today you help someone — Tomorrow you will be helped out!\n// Mutual Uniting System (MUSystem) email: [email protected]\n// http:// Musystem.online\n// Hello from Russia with love! ;) Привет из России! ;)\n// \"MMM IS A FINANCIAL NUCLEAR WEAPON.\n// They say Baba Vanga predicted, “Pyramid from Russia will travel the world.”\n// When Sergey Mavrodi passed away, many people thought this prediction \n// wasn't going to come true. What if it's just started to materialize?\"\n\n// Financial apocalypse is inevitable! Together we can do a lot!\n// Thank you Sergey Mavrodi. You've opened my eyes.\n\npragma solidity ^0.4.21;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a / b;\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract MUSystem {\n    \n    using SafeMath for uint;\n    \n    string public constant name = \"Mutual Uniting System\";\n    string public constant symbol = \"MUS\";\n    uint public constant decimals = 15;\n    uint public totalSupply;\n    address private creatorOwner;\n    address private userAddr;\n    mapping (address => uint) balances;\n    struct UserWhoBuy {\n        uint UserAmt;\n        uint UserTokenObtain;\n        uint UserBuyDate;\n        uint UserBuyFirstDate;\n        uint UserBuyTokenPackNum;\n        uint UserFirstAmt;\n        uint UserContinued;\n        uint UserTotalAmtDepositCurrentPack;\n    }\n    mapping (address => UserWhoBuy) usersWhoBuy;\n    address[] private userWhoBuyDatas;\n    struct UserWhoSell {\n        uint UserAmtWithdrawal;\n        uint UserTokenSell;\n        uint UserSellDate;\n        uint UserSellTokenPackNum;\n        uint UserTotalAmtWithdrawal;\n        uint UserTotalAmtWithdrawalCurrentPack;\n    }\n    mapping (address => UserWhoSell) usersWhoSell;\n    address[] private userWhoSellDatas;\n\n// The basic parameters of MUSystem that determine \n// the participant's income per package, \n// the initial price of one token, \n// the number of tokens in pack, Disparity mode percentage\n// and another internal constants.\n\n    uint private CoMargin = 101; \n    uint private CoOverlap = 110; \n    uint private Disparity = 70; \n    bool private DisparityMode;\n    uint private RestartModeDate;\n    bool private RestartMode;\n    uint private PackVolume = 50;  \n    uint private FirstPackTokenPriceSellout = 50;    \n    uint private BigAmt = 250 * 1 ether; \n    bool private feeTransfered;\n    uint private PrevPrevPackTokenPriceSellout;\n    uint private PrevPackTokenPriceSellout;\n    uint private PrevPackTokenPriceBuyout; \n    uint private PrevPackDelta; \n    uint private PrevPackCost;\n    uint private PrevPackTotalAmt;\n    uint private CurrentPackYield;\n    uint private CurrentPackDelta;\n    uint private CurrentPackCost;\n    uint private CurrentPackTotalToPay;\n    uint private CurrentPackTotalAmt;\n    uint private CurrentPackRestAmt;\n    uint private CurrentPackFee;\n    uint private CurrentPackTotalToPayDisparity;\n    uint private CurrentPackNumber; \n    uint private CurrentPackStartDate; \n    uint private CurrentPackTokenPriceSellout;  \n    uint private CurrentPackTokenPriceBuyout;\n    uint private CurrentPackTokenAvailablePercent;\n    uint private NextPackTokenPriceBuyout; \n    uint private NextPackYield; \n    uint private NextPackDelta;\n    uint private userContinued;\n    uint private userAmt; \n    uint private userFirstAmt;\n    uint private userTotalAmtDepositCurrentPack;\n    uint private userBuyFirstDate;\n    uint private userTotalAmtWithdrawal;\n    uint private userTotalAmtWithdrawalCurrentPack;\n    uint private UserTokensReturn;\n    bool private returnTokenInCurrentPack;\n    uint private withdrawAmtToCurrentPack;\n    uint private withdrawAmtAboveCurrentPack;\n    uint private UserTokensReturnToCurrentPack;\n    uint private UserTokensReturnAboveCurrentPack;\n    uint private bonus;\n    uint private userAmtOverloadToSend;\n\n// MUSystem is launched at the time of the contract deployment. \n// It all starts with the first package. \n// Settings are applied and the number of tokens is released.\n\n    constructor () public payable {\n        creatorOwner = msg.sender;\n        PackVolume = (10 ** decimals).mul(PackVolume);\n        DisparityMode = false;\n        RestartMode = false;\n        CurrentPackNumber = 1; \n        CurrentPackStartDate = now;\n        mint(PackVolume);\n        packSettings(CurrentPackNumber);\n    }\n\n// Write down participants who make deposits.\n\n    function addUserWhoBuy (\n    address _address, \n    uint _UserAmt, \n    uint _UserTokenObtain, \n    uint _UserBuyDate,\n    uint _UserBuyFirstDate,\n    uint _UserBuyTokenPackNum,\n    uint _UserFirstAmt,\n    uint _UserContinued,\n    uint _UserTotalAmtDepositCurrentPack) internal {\n        UserWhoBuy storage userWhoBuy = usersWhoBuy[_address];\n        userWhoBuy.UserAmt = _UserAmt;\n        userWhoBuy.UserTokenObtain = _UserTokenObtain;\n        userWhoBuy.UserBuyDate = _UserBuyDate;\n        userWhoBuy.UserBuyFirstDate = _UserBuyFirstDate;\n        userWhoBuy.UserBuyTokenPackNum = _UserBuyTokenPackNum;\n        userWhoBuy.UserFirstAmt = _UserFirstAmt;\n        userWhoBuy.UserContinued = _UserContinued;\n        userWhoBuy.UserTotalAmtDepositCurrentPack = _UserTotalAmtDepositCurrentPack;\n        userWhoBuyDatas.push(_address) -1;\n    }\n// Write down also participants who make withdrawals.\n\n    function addUserWhoSell (\n    address _address, \n    uint _UserAmtWithdrawal, \n    uint _UserTokenSell, \n    uint _UserSellDate,\n    uint _UserSellTokenPackNum,\n    uint _UserTotalAmtWithdrawal,\n    uint _UserTotalAmtWithdrawalCurrentPack) internal {\n        UserWhoSell storage userWhoSell = usersWhoSell[_address];\n        userWhoSell.UserAmtWithdrawal = _UserAmtWithdrawal;\n        userWhoSell.UserTokenSell = _UserTokenSell;\n        userWhoSell.UserSellDate = _UserSellDate;\n        userWhoSell.UserSellTokenPackNum = _UserSellTokenPackNum;\n        userWhoSell.UserTotalAmtWithdrawal = _UserTotalAmtWithdrawal; \n        userWhoSell.UserTotalAmtWithdrawalCurrentPack = _UserTotalAmtWithdrawalCurrentPack;\n        userWhoSellDatas.push(_address) -1;\n    }\n\n// Calculation of pack's parameters \"on the fly\". \n// Course (price) of tokens is growing by a special technique, \n// which designed increases with the passage of time the size \n// of a possible return donations for the participants, \n// subject to a maximum system stability.\n\n    function packSettings (uint _currentPackNumber) internal {\n        CurrentPackNumber = _currentPackNumber;\n        if(CurrentPackNumber == 1){\n            PrevPackDelta = 0;\n            PrevPackCost = 0;\n            PrevPackTotalAmt = 0;\n            CurrentPackStartDate = now;\n            CurrentPackTokenPriceSellout = FirstPackTokenPriceSellout;\n            CurrentPackTokenPriceBuyout = FirstPackTokenPriceSellout; \n            CurrentPackCost = PackVolume.mul(CurrentPackTokenPriceSellout);\n            CurrentPackTotalToPay = 0;\n            CurrentPackTotalToPayDisparity = 0;\n            CurrentPackYield = 0;\n            CurrentPackDelta = 0;\n            CurrentPackTotalAmt = CurrentPackCost;\n            CurrentPackFee = 0;\n            CurrentPackRestAmt = CurrentPackCost.sub(CurrentPackTotalToPay);\n            if (FirstPackTokenPriceSellout == 50){NextPackTokenPriceBuyout = 60;}else{NextPackTokenPriceBuyout = FirstPackTokenPriceSellout+5;}\n        }\n        if(CurrentPackNumber == 2){\n            PrevPrevPackTokenPriceSellout = 0;\n            PrevPackTokenPriceSellout = CurrentPackTokenPriceSellout;\n            PrevPackTokenPriceBuyout = CurrentPackTokenPriceBuyout;\n            PrevPackDelta = CurrentPackDelta;\n            PrevPackCost = CurrentPackCost;\n            PrevPackTotalAmt = CurrentPackTotalAmt;\n            CurrentPackYield = 0;\n            CurrentPackDelta = 0;\n            NextPackTokenPriceBuyout = PrevPackTokenPriceSellout.mul(CoOverlap).div(100);\n            NextPackYield = NextPackTokenPriceBuyout.sub(PrevPackTokenPriceSellout);\n            NextPackDelta = NextPackYield;\n            CurrentPackTokenPriceSellout = NextPackTokenPriceBuyout.add(NextPackDelta);\n            CurrentPackTokenPriceBuyout = CurrentPackTokenPriceSellout;\n            CurrentPackCost = PackVolume.mul(CurrentPackTokenPriceSellout);\n            CurrentPackTotalToPay = 0;\n            CurrentPackTotalAmt = CurrentPackCost.add(PrevPackTotalAmt);\n            CurrentPackFee = 0;\n            CurrentPackTotalToPayDisparity = PrevPackCost.mul(Disparity).div(100);\n            CurrentPackRestAmt = CurrentPackCost.sub(CurrentPackTotalToPay);\n        }\n        if(CurrentPackNumber > 2){\n            PrevPackTokenPriceSellout = CurrentPackTokenPriceSellout;\n            PrevPackTokenPriceBuyout = CurrentPackTokenPriceBuyout;\n            PrevPackDelta = CurrentPackDelta;\n            PrevPackCost = CurrentPackCost;\n            PrevPackTotalAmt = CurrentPackTotalAmt;\n            CurrentPackYield = NextPackYield;\n            CurrentPackDelta = NextPackDelta;\n            CurrentPackTokenPriceBuyout = NextPackTokenPriceBuyout;\n            NextPackTokenPriceBuyout = PrevPackTokenPriceSellout.mul(CoOverlap);\n            if(NextPackTokenPriceBuyout<=100){  \n                NextPackTokenPriceBuyout=PrevPackTokenPriceSellout.mul(CoOverlap).div(100);\n            }\n            if(NextPackTokenPriceBuyout>100){ \n                NextPackTokenPriceBuyout=NextPackTokenPriceBuyout*10**3;\n                NextPackTokenPriceBuyout=((NextPackTokenPriceBuyout/10000)+5)/10;\n            }\n            NextPackYield = NextPackTokenPriceBuyout.sub(PrevPackTokenPriceSellout);\n            NextPackDelta = NextPackYield.mul(CoMargin);\n            if(NextPackDelta <= 100){ \n                NextPackDelta = CurrentPackDelta.add(NextPackYield.mul(CoMargin).div(100));\n            }\n            if(NextPackDelta > 100){\n                NextPackDelta = NextPackDelta*10**3;\n                NextPackDelta = ((NextPackDelta/10000)+5)/10;\n                NextPackDelta = CurrentPackDelta.add(NextPackDelta);\n            }\n            CurrentPackTokenPriceSellout = NextPackTokenPriceBuyout.add(NextPackDelta);\n            CurrentPackCost = PackVolume.mul(CurrentPackTokenPriceSellout);\n            CurrentPackTotalToPay = PackVolume.mul(CurrentPackTokenPriceBuyout);\n            CurrentPackTotalToPayDisparity = PrevPackCost.mul(Disparity).div(100);\n            CurrentPackRestAmt = CurrentPackCost.sub(CurrentPackTotalToPay);\n            CurrentPackTotalAmt = CurrentPackRestAmt.add(PrevPackTotalAmt);\n            CurrentPackFee = PrevPackTotalAmt.sub(CurrentPackTotalToPay).sub(CurrentPackTotalToPayDisparity);\n        }\n        CurrentPackTokenAvailablePercent = balances[address(this)].mul(100).div(PackVolume);\n        emit NextPack(CurrentPackTokenPriceSellout, CurrentPackTokenPriceBuyout);\n    }\n\n// The data of the current package can be obtained \n// by performing this function.\n// Available tokens - the remaining number of available \n// tokens in the current package. \n// At onetime you can not buy more than this number of tokens.\n// Available tokens in percentage - the percentage of \n// remaining available tokens in the current package.\n// Available amount to deposit in wei - the maximum amount \n// that can be deposited in the current package.\n// Attempt to exceed this amount too much \n// (i.e., an attempt to buy more tokens than the Available tokens \n// in the current package) will be rejected. \n// In case of a small excess of the amount, the unused leftover \n// will return to your Ethereum account.\n// Current pack token price sellout -  the price at which \n// tokens are bought by a participant.\n// Current pack token price buyout - the price at which \n// tokens are sold by a participant (are bought by the system).\n\n    function aboutCurrentPack () public constant returns (uint availableTokens, uint availableTokensInPercentage, uint availableAmountToDepositInWei, uint tokenPriceSellout, uint tokenPriceBuyout){\n        uint _availableTokens = balances[address(this)];\n        uint _availableAmountToDepositInWei = _availableTokens.mul(CurrentPackTokenPriceSellout);\n        return (_availableTokens, CurrentPackTokenAvailablePercent, _availableAmountToDepositInWei, CurrentPackTokenPriceSellout, CurrentPackTokenPriceBuyout);\n    }\n\n// Move to the next package. Sending a reward to the owner. \n// Minting of new tokens.\n\n    function nextPack (uint _currentPackNumber) internal { \n        transferFee();\n        feeTransfered = false;\n        CurrentPackNumber=_currentPackNumber.add(1);\n        CurrentPackStartDate = now;\n        mint(PackVolume);\n        packSettings(CurrentPackNumber);\n    }\n\n// Restart occurs if the Disparity mode is enabled and \n// there were no new donations within 14 days. \n// Everything will start with the first package. \n// After restart, the system saves the participant's tokens. \n// Moreover, by participating from the very beginning \n// (starting from the first package of the new cycle), \n// the participant can easily compensate for his \n// insignificant losses. And quickly achieve a good profit!\n\n    function restart(bool _dm)internal{\n        if(_dm==true){if(RestartMode==false){RestartMode=true;RestartModeDate=now;}\n            else{if(now>RestartModeDate+14*1 days){RestartMode=false;DisparityMode=false;nextPack(0);}}}\n        else{if(RestartMode==true){RestartMode=false;RestartModeDate=0;}}\n    }\n\n// Sending reward to the owner. \n// No more and no less - just as much as it does not hurt. \n// Exactly as much as provided by the algorithm.\n\n    function transferFee()internal{\n        if(CurrentPackNumber > 2 && feeTransfered == false){\n            if(address(this).balance>=CurrentPackFee){\n                creatorOwner.transfer(CurrentPackFee);\n                feeTransfered = true;\n            }\n        }\n    }\n\n// Receiving a donation and calculating the number of participant tokens. \n// Bonuses, penalties.\n\n    function deposit() public payable returns (uint UserTokenObtain){ \n        require(msg.sender != 0x0 && msg.sender != 0);\n        require(msg.value < BigAmt); \n        uint availableTokens = balances[address(this)];\n        require(msg.value <= availableTokens.mul(CurrentPackTokenPriceSellout).add(availableTokens.mul(CurrentPackTokenPriceSellout).mul(10).div(100)).add(10*1 finney)); \n        require(msg.value.div(CurrentPackTokenPriceSellout) > 0);\n        userAddr = msg.sender;\n        userAmt = msg.value;\n        if(usersWhoBuy[userAddr].UserBuyTokenPackNum == CurrentPackNumber){\n            userTotalAmtDepositCurrentPack = usersWhoBuy[userAddr].UserTotalAmtDepositCurrentPack;\n        }\n        else{\n            userTotalAmtDepositCurrentPack = 0;\n        }\n        if(usersWhoBuy[userAddr].UserBuyTokenPackNum == CurrentPackNumber){\n            require(userTotalAmtDepositCurrentPack.add(userAmt) < BigAmt);\n        }\n\n// If the participant making a donation in the current package \n// has already received a backward donation in the same package, \n// the amount of the new donation is reduced by 5% of the amount\n// of the received donation; a kind of \"penalty\" is imposed in \n// the amount of 5% of the amount received earlier \n// by the participant in the same package.\n\n        if(usersWhoSell[userAddr].UserSellTokenPackNum == CurrentPackNumber){\n            uint penalty = usersWhoSell[userAddr].UserTotalAmtWithdrawalCurrentPack.mul(5).div(100);\n            userAmt = userAmt.sub(penalty);\n            require(userAmt.div(CurrentPackTokenPriceSellout) > 0);\n            penalty=0;\n        }\n        UserTokenObtain = userAmt.div(CurrentPackTokenPriceSellout);\n        bonus = 0;\n\n// Participants who made donation amounting to at least  0.1 ether:\n// In the 1st day of the current package is entitled to receive \n// the amount of possible backward donation to 0.75% more than usual.\n// In the 2nd day of the current package - 0.5% more than usual.\n// In the 3rd day of the current package - 0.25% more than usual.\n\n        if(userAmt >= 100*1 finney){\n            if(now <= (CurrentPackStartDate + 1*1 days)){\n                bonus = UserTokenObtain.mul(75).div(10000);\n            }\n            if(now > (CurrentPackStartDate + 1*1 days) && now <= (CurrentPackStartDate + 2*1 days)){\n                bonus = UserTokenObtain.mul(50).div(10000);\n            }\n            if(now > (CurrentPackStartDate + 2*1 days) && now <= (CurrentPackStartDate + 3*1 days)){\n                bonus = UserTokenObtain.mul(25).div(10000);\n            }\n        }\n\n// For continuous long-time participation, \n// starting from the second week of participation \n// (starting from the 4th participation package), \n// bonus incentives for the continuous participation \n// of 1% of the contributed amount for each subsequent \n// \"own\" package are accrued for the participant.\n\n        if(userContinued > 4 && now > (userBuyFirstDate + 1 * 1 weeks)){\n            bonus = bonus.add(UserTokenObtain.mul(1).div(100));\n        }\n        UserTokenObtain = UserTokenObtain.add(bonus);  \n        if(UserTokenObtain > availableTokens){\n            userAmtOverloadToSend = CurrentPackTokenPriceSellout.mul(UserTokenObtain.sub(availableTokens)); \n            transfer(address(this), userAddr, availableTokens);\n            UserTokenObtain = availableTokens;\n            if(address(this).balance>=userAmtOverloadToSend){\n                userAddr.transfer(userAmtOverloadToSend);\n            }\n        }                \n        else{                 \n            transfer(address(this), userAddr, UserTokenObtain);\n        }\n        if(usersWhoBuy[userAddr].UserBuyTokenPackNum == 0){\n            userFirstAmt = userAmt;\n            userBuyFirstDate = now;\n        }\n        else{\n            userFirstAmt = usersWhoBuy[userAddr].UserFirstAmt;\n            userBuyFirstDate = usersWhoBuy[userAddr].UserBuyFirstDate;\n        }\n        if(usersWhoBuy[userAddr].UserContinued == 0){\n            userContinued = 1;\n        }\n        else{\n            if(usersWhoBuy[userAddr].UserBuyTokenPackNum == CurrentPackNumber.sub(1)){\n                userContinued = userContinued.add(1);\n            }\n            else{\n                userContinued = 1;\n            }\n        }\n        userTotalAmtDepositCurrentPack = userTotalAmtDepositCurrentPack.add(userAmt);\n        addUserWhoBuy(userAddr, userAmt, UserTokenObtain, now, userBuyFirstDate, CurrentPackNumber, userFirstAmt, userContinued, userTotalAmtDepositCurrentPack);\n        CurrentPackTokenAvailablePercent = balances[address(this)].mul(100).div(PackVolume);\n        bonus = 0;\n        availableTokens = 0;\n        userAmtOverloadToSend = 0;\n        userAddr = 0;\n        userAmt = 0;\n        restart(false);\n        DisparityMode = false;\n\n// Move to the next pack, if all the tokens of the current one are over.\n\n        if(balances[address(this)] == 0){nextPack(CurrentPackNumber);}\n        return UserTokenObtain;\n    } \n\n// And here the participant decided to sell his tokens (some or all at once) and sends us his withdrawal request.\n\n    function withdraw(uint WithdrawAmount, uint WithdrawTokens) public returns (uint withdrawAmt){\n        require(msg.sender != 0x0 && msg.sender != 0);\n        require(WithdrawTokens > 0 || WithdrawAmount > 0);\n        require(WithdrawTokens<=balances[msg.sender]); \n        require(WithdrawAmount.mul(1 finney)<=balances[msg.sender].mul(CurrentPackTokenPriceSellout).add(balances[msg.sender].mul(CurrentPackTokenPriceSellout).mul(5).div(100)));\n\n// If the normal work is braked then Disparity mode is turning on.\n// If Disparity mode is already enabled, then we check whether it's time to restart.\n\n        if(RestartMode==true){restart(true);}\n        if(address(this).balance<=CurrentPackTotalToPayDisparity){\n            DisparityMode=true;}else{DisparityMode=false;}\n\n// The participant can apply at any time for the selling \n// his tokens at the buyout price of the last realized (current) package.\n// Let calculate how much tokens are returned in the current package, \n// and how much was purchased earlier.\n\n        userTotalAmtWithdrawal = usersWhoSell[msg.sender].UserTotalAmtWithdrawal;\n        if(usersWhoSell[msg.sender].UserSellTokenPackNum == CurrentPackNumber){\n            userTotalAmtWithdrawalCurrentPack = usersWhoSell[msg.sender].UserTotalAmtWithdrawalCurrentPack;\n        }\n        else{\n            userTotalAmtWithdrawalCurrentPack = 0;\n        }\n        if(usersWhoBuy[msg.sender].UserBuyTokenPackNum == CurrentPackNumber && userTotalAmtWithdrawalCurrentPack < usersWhoBuy[msg.sender].UserTotalAmtDepositCurrentPack){\n            returnTokenInCurrentPack = true;\n            withdrawAmtToCurrentPack = usersWhoBuy[msg.sender].UserTotalAmtDepositCurrentPack.sub(userTotalAmtWithdrawalCurrentPack);\n        }\n        else{ \n            returnTokenInCurrentPack = false;\n        }\n        if(WithdrawAmount > 0){\n            withdrawAmt = WithdrawAmount.mul(1 finney);\n            if(returnTokenInCurrentPack == true){\n                UserTokensReturnToCurrentPack = withdrawAmtToCurrentPack.div(CurrentPackTokenPriceSellout);\n                if(withdrawAmt>withdrawAmtToCurrentPack){ \n                    withdrawAmtAboveCurrentPack = withdrawAmt.sub(withdrawAmtToCurrentPack);\n                    UserTokensReturnAboveCurrentPack = withdrawAmtAboveCurrentPack.div(CurrentPackTokenPriceBuyout);\n                } \n                else{\n                    withdrawAmtToCurrentPack = withdrawAmt;\n                    UserTokensReturnToCurrentPack = withdrawAmtToCurrentPack.div(CurrentPackTokenPriceSellout);\n                    withdrawAmtAboveCurrentPack = 0;\n                    UserTokensReturnAboveCurrentPack = 0;\n                }\n            }\n            else{\n                withdrawAmtToCurrentPack = 0;\n                UserTokensReturnToCurrentPack = 0;\n                withdrawAmtAboveCurrentPack = withdrawAmt;\n                UserTokensReturnAboveCurrentPack = withdrawAmtAboveCurrentPack.div(CurrentPackTokenPriceBuyout);\n            }\n        }\n        else{\n            UserTokensReturn = WithdrawTokens;\n            if(returnTokenInCurrentPack == true){\n                UserTokensReturnToCurrentPack = withdrawAmtToCurrentPack.div(CurrentPackTokenPriceSellout);\n                if(UserTokensReturn>UserTokensReturnToCurrentPack){\n                    UserTokensReturnAboveCurrentPack = UserTokensReturn.sub(UserTokensReturnToCurrentPack);\n                    withdrawAmtAboveCurrentPack = UserTokensReturnAboveCurrentPack.mul(CurrentPackTokenPriceBuyout);\n                }\n                else{\n                    withdrawAmtToCurrentPack = UserTokensReturn.mul(CurrentPackTokenPriceSellout);\n                    UserTokensReturnToCurrentPack = UserTokensReturn;\n                    withdrawAmtAboveCurrentPack = 0;\n                    UserTokensReturnAboveCurrentPack = 0;\n                }\n            }\n            else{\n                withdrawAmtToCurrentPack = 0;\n                UserTokensReturnToCurrentPack = 0;\n                UserTokensReturnAboveCurrentPack = UserTokensReturn;\n                withdrawAmtAboveCurrentPack = UserTokensReturnAboveCurrentPack.mul(CurrentPackTokenPriceBuyout);\n            }    \n        }\n        withdrawAmt = withdrawAmtToCurrentPack.add(withdrawAmtAboveCurrentPack);\n\n// When applying for a donation, if the remaining number \n// of available tokens of the current package is less than 10%, \n// participants are entitled to withdraw of 1% more than usual.\n\n        if(balances[address(this)]<=(PackVolume.mul(10).div(100))){\n            withdrawAmtAboveCurrentPack = withdrawAmtAboveCurrentPack.add(withdrawAmt.mul(1).div(100));\n        }\n\n// With each withdrawal, the system checks the total balance \n// and if the system is on the verge, when it can pay to each participant \n// 70% of his initial donation, the protection mode called \"Disparity mode\" is activated.\n// In disparity mode: participant who made a donation in the current package \n// can withdraw up to 100% of his initial donation amount,\n// participant who made a donation earlier (in previous packs) \n// can withdraw up to 70% of his initial donation amount.\n\n        if(address(this).balance<CurrentPackTotalToPayDisparity || withdrawAmt > address(this).balance || DisparityMode == true){\n            uint disparityAmt = usersWhoBuy[msg.sender].UserFirstAmt.mul(Disparity).div(100);\n            if(userTotalAmtWithdrawal >= disparityAmt){\n                withdrawAmtAboveCurrentPack = 0;\n                UserTokensReturnAboveCurrentPack = 0;\n            }\n            else{\n                if(withdrawAmtAboveCurrentPack.add(userTotalAmtWithdrawal) >= disparityAmt){\n                    withdrawAmtAboveCurrentPack = disparityAmt.sub(userTotalAmtWithdrawal);\n                    UserTokensReturnAboveCurrentPack = withdrawAmtAboveCurrentPack.div(CurrentPackTokenPriceBuyout);\n                }\n            }\n            DisparityMode = true;\n            if(CurrentPackNumber>2){restart(true);}\n        }\n        if(withdrawAmt>address(this).balance){\n            withdrawAmt = address(this).balance;\n            withdrawAmtAboveCurrentPack = address(this).balance.sub(withdrawAmtToCurrentPack);\n            UserTokensReturnAboveCurrentPack = withdrawAmtAboveCurrentPack.div(CurrentPackTokenPriceBuyout);\n            if(CurrentPackNumber>2){restart(true);}\n        }\n        withdrawAmt = withdrawAmtToCurrentPack.add(withdrawAmtAboveCurrentPack);\n        UserTokensReturn = UserTokensReturnToCurrentPack.add(UserTokensReturnAboveCurrentPack);\n        require(UserTokensReturn<=balances[msg.sender]); \n        transfer(msg.sender, address(this), UserTokensReturn);\n        msg.sender.transfer(withdrawAmt);\n        userTotalAmtWithdrawal = userTotalAmtWithdrawal.add(withdrawAmt);\n        userTotalAmtWithdrawalCurrentPack = userTotalAmtWithdrawalCurrentPack.add(withdrawAmt);\n        addUserWhoSell(msg.sender, withdrawAmt, UserTokensReturn, now, CurrentPackNumber, userTotalAmtWithdrawal, userTotalAmtWithdrawalCurrentPack);\n        CurrentPackTokenAvailablePercent = balances[address(this)].mul(100).div(PackVolume);\n        withdrawAmtToCurrentPack = 0;\n        withdrawAmtAboveCurrentPack = 0;\n        UserTokensReturnToCurrentPack = 0;\n        UserTokensReturnAboveCurrentPack = 0;\n        return withdrawAmt;\n    }\n\n// If tokens purchased in the current package are returned, \n// they are again available for purchase by other participants.\n// If tokens purchased in previous packages are returned, \n// then such tokens are no longer available to anyone.\n\n    function transfer(address _from, address _to, uint _value) internal returns (bool success) {\n        balances[_from] = balances[_from].sub(_value); \n        if(_to == address(this)){ \n            if(returnTokenInCurrentPack == true){\n                balances[_to] = balances[_to].add(UserTokensReturnToCurrentPack);\n            }\n            else{\n                balances[_to] = balances[_to];\n            }\n            totalSupply = totalSupply.sub(UserTokensReturnAboveCurrentPack);\n        }\n        else{\n            balances[_to] = balances[_to].add(_value);\n        }\n        emit Transfer(_from, _to, _value); \n        return true;\n    }  \n\n// BalanceOf — get balance of tokens.\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n// Minting new tokens if the moving to a new package occurred.\n\n    function mint(uint _value) internal returns (bool) {\n        balances[address(this)] = balances[address(this)].add(_value);\n        totalSupply = totalSupply.add(_value);\n        return true;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event NextPack(uint indexed CurrentPackTokenPriceSellout, uint indexed CurrentPackTokenPriceBuyout);\n}",
  "bytecode": "60806040526065600855606e6009556046600a556032600e556032600f55680d8d726b7177a8000060105533600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000094600e54600f600a0a6200011e6401000000000262001a98179091906401000000009004565b600e819055506000600b60006101000a81548160ff0219169083151502179055506000600d60006101000a81548160ff021916908315150217905550600160208190555042602181905550620000fb600e546200015a640100000000026401000000009004565b506200011860205462000235640100000000026401000000009004565b62000a21565b60008083141562000133576000905062000154565b81830290508183828115156200014557fe5b041415156200015057fe5b8090505b92915050565b6000620001be82600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620009d06401000000000262001ae9179091906401000000009004565b600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506200022682600054620009d06401000000000262001ae9179091906401000000009004565b60008190555060019050919050565b80602081905550600160205414156200032c5760006015819055506000601681905550600060178190555042602181905550600f54602281905550600f54602381905550620002a0602254600e546200011e6401000000000262001a98179091906401000000009004565b601a819055506000601b819055506000601f8190555060006018819055506000601981905550601a54601c819055506000601e81905550620002fe601b54601a54620009ed6401000000000262001bef179091906401000000009004565b601d819055506032600f5414156200031e57603c6025819055506200032b565b6005600f54016025819055505b5b6002602054141562000521576000601281905550602254601381905550602354601481905550601954601581905550601a54601681905550601c5460178190555060006018819055506000601981905550620003c76064620003aa6009546013546200011e6401000000000262001a98179091906401000000009004565b62000a076401000000000262001ad0179091906401000000009004565b602581905550620003f4601354602554620009ed6401000000000262001bef179091906401000000009004565b6026819055506026546027819055506200042a602754602554620009d06401000000000262001ae9179091906401000000009004565b60228190555060225460238190555062000460602254600e546200011e6401000000000262001a98179091906401000000009004565b601a819055506000601b8190555062000495601754601a54620009d06401000000000262001ae9179091906401000000009004565b601c819055506000601e81905550620004ed6064620004d0600a546016546200011e6401000000000262001a98179091906401000000009004565b62000a076401000000000262001ad0179091906401000000009004565b601f819055506200051a601b54601a54620009ed6401000000000262001bef179091906401000000009004565b601d819055505b600260205411156200090e57602254601381905550602354601481905550601954601581905550601a54601681905550601c546017819055506026546018819055506027546019819055506025546023819055506200059c6009546013546200011e6401000000000262001a98179091906401000000009004565b60258190555060646025541115156200060057620005f96064620005dc6009546013546200011e6401000000000262001a98179091906401000000009004565b62000a076401000000000262001ad0179091906401000000009004565b6025819055505b6064602554111562000641576103e860255402602581905550600a60056127106025548115156200062d57fe5b04018115156200063957fe5b046025819055505b62000668601354602554620009ed6401000000000262001bef179091906401000000009004565b602681905550620006956008546026546200011e6401000000000262001a98179091906401000000009004565b60278190555060646027541115156200071d5762000716620006f66064620006d96008546026546200011e6401000000000262001a98179091906401000000009004565b62000a076401000000000262001ad0179091906401000000009004565b601954620009d06401000000000262001ae9179091906401000000009004565b6027819055505b606460275411156200078b576103e860275402602781905550600a60056127106027548115156200074a57fe5b04018115156200075657fe5b0460278190555062000784602754601954620009d06401000000000262001ae9179091906401000000009004565b6027819055505b620007b2602754602554620009d06401000000000262001ae9179091906401000000009004565b602281905550620007df602254600e546200011e6401000000000262001a98179091906401000000009004565b601a819055506200080c602354600e546200011e6401000000000262001a98179091906401000000009004565b601b819055506200085c60646200083f600a546016546200011e6401000000000262001a98179091906401000000009004565b62000a076401000000000262001ad0179091906401000000009004565b601f8190555062000889601b54601a54620009ed6401000000000262001bef179091906401000000009004565b601d81905550620008b6601754601d54620009d06401000000000262001ae9179091906401000000009004565b601c8190555062000907601f54620008ea601b54601754620009ed6401000000000262001bef179091906401000000009004565b620009ed6401000000000262001bef179091906401000000009004565b601e819055505b62000995600e54620009786064600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200011e6401000000000262001a98179091906401000000009004565b62000a076401000000000262001ad0179091906401000000009004565b6024819055506023546022547f80123097a76fe2b82a8a76c7c41e432f73fce3311a85c3ca296fdfa52f6d57d860405160405180910390a350565b60008183019050828110151515620009e457fe5b80905092915050565b6000828211151515620009fc57fe5b818303905092915050565b6000818381151562000a1557fe5b04905080905092915050565b6128dc8062000a316000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461009357806318160ddd14610123578063313ce5671461014e578063441a3e701461017957806370a08231146101c457806395d89b411461021b578063d0e30db0146102ab578063d89fec58146102c9575b600080fd5b34801561009f57600080fd5b506100a8610310565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100e85780820151818401526020810190506100cd565b50505050905090810190601f1680156101155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561012f57600080fd5b50610138610349565b6040518082815260200191505060405180910390f35b34801561015a57600080fd5b5061016361034f565b6040518082815260200191505060405180910390f35b34801561018557600080fd5b506101ae6004803603810190808035906020019092919080359060200190929190505050610354565b6040518082815260200191505060405180910390f35b3480156101d057600080fd5b50610205600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e6b565b6040518082815260200191505060405180910390f35b34801561022757600080fd5b50610230610eb4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610270578082015181840152602081019050610255565b50505050905090810190601f16801561029d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102b3610eed565b6040518082815260200191505060405180910390f35b3480156102d557600080fd5b506102de611a16565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b6040805190810160405280601581526020017f4d757475616c20556e6974696e672053797374656d000000000000000000000081525081565b60005481565b600f81565b60008060003373ffffffffffffffffffffffffffffffffffffffff1614158015610395575060003373ffffffffffffffffffffffffffffffffffffffff1614155b15156103a057600080fd5b60008311806103af5750600084115b15156103ba57600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561040857600080fd5b6104e761048560646104776005610469602254600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a9890919063ffffffff16565b611a9890919063ffffffff16565b611ad090919063ffffffff16565b6104d9602254600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a9890919063ffffffff16565b611ae990919063ffffffff16565b61050166038d7ea4c6800086611a9890919063ffffffff16565b1115151561050e57600080fd5b60011515600d60009054906101000a900460ff1615151415610535576105346001611b05565b5b601f543073ffffffffffffffffffffffffffffffffffffffff1631111515610577576001600b60006101000a81548160ff021916908315150217905550610593565b6000600b60006101000a81548160ff0219169083151502179055505b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154602d81905550602054600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154141561067657600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154602e8190555061067f565b6000602e819055505b602054600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401541480156107155750600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070154602e54105b15610797576001603060006101000a81548160ff02191690831515021790555061078c602e54600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070154611bef90919063ffffffff16565b6031819055506107b3565b6000603060006101000a81548160ff0219169083151502179055505b60008411156108cc576107d666038d7ea4c6800085611a9890919063ffffffff16565b915060011515603060009054906101000a900460ff16151514156108925761080b602254603154611ad090919063ffffffff16565b6033819055506031548211156108585761083060315483611bef90919063ffffffff16565b60328190555061084d602354603254611ad090919063ffffffff16565b60348190555061088d565b81603181905550610876602254603154611ad090919063ffffffff16565b603381905550600060328190555060006034819055505b6108c7565b60006031819055506000603381905550816032819055506108c0602354603254611ad090919063ffffffff16565b6034819055505b6109cb565b82602f8190555060011515603060009054906101000a900460ff161515141561099357610906602254603154611ad090919063ffffffff16565b603381905550603354602f5411156109575761092f603354602f54611bef90919063ffffffff16565b60348190555061094c602354603454611a9890919063ffffffff16565b60328190555061098e565b61096e602254602f54611a9890919063ffffffff16565b603181905550602f54603381905550600060328190555060006034819055505b6109ca565b60006031819055506000603381905550602f546034819055506109c3602354603454611a9890919063ffffffff16565b6032819055505b5b6109e2603254603154611ae990919063ffffffff16565b9150610a0d60646109ff600a600e54611a9890919063ffffffff16565b611ad090919063ffffffff16565b600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610a9657610a8f610a7e6064610a70600186611a9890919063ffffffff16565b611ad090919063ffffffff16565b603254611ae990919063ffffffff16565b6032819055505b601f543073ffffffffffffffffffffffffffffffffffffffff16311080610ad357503073ffffffffffffffffffffffffffffffffffffffff163182115b80610af1575060011515600b60009054906101000a900460ff161515145b15610c0d57610b606064610b52600a54600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154611a9890919063ffffffff16565b611ad090919063ffffffff16565b905080602d54101515610b825760006032819055506000603481905550610bdb565b80610b9a602d54603254611ae990919063ffffffff16565b101515610bda57610bb6602d5482611bef90919063ffffffff16565b603281905550610bd3602354603254611ad090919063ffffffff16565b6034819055505b5b6001600b60006101000a81548160ff02191690831515021790555060026020541115610c0c57610c0b6001611b05565b5b5b3073ffffffffffffffffffffffffffffffffffffffff1631821115610cac573073ffffffffffffffffffffffffffffffffffffffff16319150610c726031543073ffffffffffffffffffffffffffffffffffffffff1631611bef90919063ffffffff16565b603281905550610c8f602354603254611ad090919063ffffffff16565b60348190555060026020541115610cab57610caa6001611b05565b5b5b610cc3603254603154611ae990919063ffffffff16565b9150610cdc603454603354611ae990919063ffffffff16565b602f81905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054602f5411151515610d3257600080fd5b610d3f3330602f54611c08565b503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610d86573d6000803e3d6000fd5b50610d9c82602d54611ae990919063ffffffff16565b602d81905550610db782602e54611ae990919063ffffffff16565b602e81905550610dd43383602f5442602054602d54602e54611f37565b610e3b600e54610e2d6064600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a9890919063ffffffff16565b611ad090919063ffffffff16565b60248190555060006031819055506000603281905550600060338190555060006034819055508191505092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f4d5553000000000000000000000000000000000000000000000000000000000081525081565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1614158015610f2f575060003373ffffffffffffffffffffffffffffffffffffffff1614155b1515610f3a57600080fd5b60105434101515610f4a57600080fd5b600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150611006662386f26fc10000610ff8610fd56064610fc7600a610fb96022548a611a9890919063ffffffff16565b611a9890919063ffffffff16565b611ad090919063ffffffff16565b610fea60225487611a9890919063ffffffff16565b611ae990919063ffffffff16565b611ae990919063ffffffff16565b341115151561101457600080fd5b600061102b60225434611ad090919063ffffffff16565b11151561103757600080fd5b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503460298190555060205460046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154141561115d5760046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060070154602b81905550611166565b6000602b819055505b60205460046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015414156111fb576010546111ee602954602b54611ae990919063ffffffff16565b1015156111fa57600080fd5b5b60205460066000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154141561133b576112f460646112e6600560066000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154611a9890919063ffffffff16565b611ad090919063ffffffff16565b905061130b81602954611bef90919063ffffffff16565b602981905550600061132a602254602954611ad090919063ffffffff16565b11151561133657600080fd5b600090505b611352602254602954611ad090919063ffffffff16565b9250600060358190555067016345785d8a0000602954101515611451576201518060215401421115156113ae576113a7612710611399604b86611a9890919063ffffffff16565b611ad090919063ffffffff16565b6035819055505b6201518060215401421180156113cb57506202a300602154014211155b156113ff576113f86127106113ea603286611a9890919063ffffffff16565b611ad090919063ffffffff16565b6035819055505b6202a300602154014211801561141c57506203f480602154014211155b156114505761144961271061143b601986611a9890919063ffffffff16565b611ad090919063ffffffff16565b6035819055505b5b6004602854118015611469575062093a80602c540142115b156114b0576114a9611498606461148a600187611a9890919063ffffffff16565b611ad090919063ffffffff16565b603554611ae990919063ffffffff16565b6035819055505b6114c560355484611ae990919063ffffffff16565b9250818311156115c0576114f66114e58385611bef90919063ffffffff16565b602254611a9890919063ffffffff16565b60368190555061152930600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684611c08565b508192506036543073ffffffffffffffffffffffffffffffffffffffff16311015156115bb57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6036549081150290604051600060405180830381858888f193505050501580156115b9573d6000803e3d6000fd5b505b6115ef565b6115ed30600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685611c08565b505b600060046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154141561167157602954602a8190555042602c81905550611748565b60046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154602a8190555060046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154602c819055505b600060046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006015414156117c257600160288190555061186e565b6117d86001602054611bef90919063ffffffff16565b60046000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401541415611864576118596001602854611ae990919063ffffffff16565b60288190555061186d565b60016028819055505b5b611885602954602b54611ae990919063ffffffff16565b602b819055506118ca600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166029548542602c54602054602a54602854602b54612023565b611931600e546119236064600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a9890919063ffffffff16565b611ad090919063ffffffff16565b60248190555060006035819055506000915060006036819055506000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060298190555061199f6000611b05565b6000600b60006101000a81548160ff0219169083151502179055506000600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611a0e57611a0d602054612123565b5b829250505090565b6000806000806000806000600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150611a7860225483611a9890919063ffffffff16565b905081602454826022546023549650965096509650965050509091929394565b600080831415611aab5760009050611aca565b8183029050818382811515611abc57fe5b04141515611ac657fe5b8090505b92915050565b60008183811515611add57fe5b04905080905092915050565b60008183019050828110151515611afc57fe5b80905092915050565b600115158115151415611bab5760001515600d60009054906101000a900460ff1615151415611b55576001600d60006101000a81548160ff02191690831515021790555042600c81905550611ba6565b62127500600c5401421115611ba5576000600d60006101000a81548160ff0219169083151502179055506000600b60006101000a81548160ff021916908315150217905550611ba46000612123565b5b5b611bec565b60011515600d60009054906101000a900460ff1615151415611beb576000600d60006101000a81548160ff0219169083151502179055506000600c819055505b5b50565b6000828211151515611bfd57fe5b818303905092915050565b6000611c5c82600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bef90919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e315760011515603060009054906101000a900460ff1615151415611d8b57611d43603354600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ae990919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e0f565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b611e26603454600054611bef90919063ffffffff16565b600081905550611ec7565b611e8382600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ae990919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050868160000181905550858160010181905550848160020181905550838160030181905550828160040181905550818160050181905550600160078990806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050505050565b6000600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050888160000181905550878160010181905550868160020181905550858160030181905550848160040181905550838160050181905550828160060181905550818160070181905550600160058b90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050505050505050565b61212b612181565b6000601160006101000a81548160ff02191690831515021790555061215a600182611ae990919063ffffffff16565b60208190555042602181905550612172600e54612257565b5061217e602054612312565b50565b60026020541180156121a6575060001515601160009054906101000a900460ff161515145b1561225557601e543073ffffffffffffffffffffffffffffffffffffffff163110151561225457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc601e549081150290604051600060405180830381858888f19350505050158015612237573d6000803e3d6000fd5b506001601160006101000a81548160ff0219169083151502179055505b5b565b60006122ab82600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ae990919063ffffffff16565b600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061230382600054611ae990919063ffffffff16565b60008190555060019050919050565b80602081905550600160205414156123e65760006015819055506000601681905550600060178190555042602181905550600f54602281905550600f5460238190555061236c602254600e54611a9890919063ffffffff16565b601a819055506000601b819055506000601f8190555060006018819055506000601981905550601a54601c819055506000601e819055506123ba601b54601a54611bef90919063ffffffff16565b601d819055506032600f5414156123d857603c6025819055506123e5565b6005600f54016025819055505b5b6002602054141561254a576000601281905550602254601381905550602354601481905550601954601581905550601a54601681905550601c54601781905550600060188190555060006019819055506124606064612452600954601354611a9890919063ffffffff16565b611ad090919063ffffffff16565b60258190555061247d601354602554611bef90919063ffffffff16565b6026819055506026546027819055506124a3602754602554611ae990919063ffffffff16565b6022819055506022546023819055506124c9602254600e54611a9890919063ffffffff16565b601a819055506000601b819055506124ee601754601a54611ae990919063ffffffff16565b601c819055506000601e819055506125266064612518600a54601654611a9890919063ffffffff16565b611ad090919063ffffffff16565b601f81905550612543601b54601a54611bef90919063ffffffff16565b601d819055505b6002602054111561280e57602254601381905550602354601481905550601954601581905550601a54601681905550601c546017819055506026546018819055506027546019819055506025546023819055506125b4600954601354611a9890919063ffffffff16565b60258190555060646025541115156125f7576125f060646125e2600954601354611a9890919063ffffffff16565b611ad090919063ffffffff16565b6025819055505b60646025541115612635576103e860255402602581905550600a600561271060255481151561262257fe5b040181151561262d57fe5b046025819055505b61264c601354602554611bef90919063ffffffff16565b602681905550612669600854602654611a9890919063ffffffff16565b60278190555060646027541115156126c0576126b96126a8606461269a600854602654611a9890919063ffffffff16565b611ad090919063ffffffff16565b601954611ae990919063ffffffff16565b6027819055505b6064602754111561271b576103e860275402602781905550600a60056127106027548115156126eb57fe5b04018115156126f657fe5b04602781905550612714602754601954611ae990919063ffffffff16565b6027819055505b612732602754602554611ae990919063ffffffff16565b60228190555061274f602254600e54611a9890919063ffffffff16565b601a8190555061276c602354600e54611a9890919063ffffffff16565b601b8190555061279c606461278e600a54601654611a9890919063ffffffff16565b611ad090919063ffffffff16565b601f819055506127b9601b54601a54611bef90919063ffffffff16565b601d819055506127d6601754601d54611ae990919063ffffffff16565b601c81905550612807601f546127f9601b54601754611bef90919063ffffffff16565b611bef90919063ffffffff16565b601e819055505b612875600e546128676064600360003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a9890919063ffffffff16565b611ad090919063ffffffff16565b6024819055506023546022547f80123097a76fe2b82a8a76c7c41e432f73fce3311a85c3ca296fdfa52f6d57d860405160405180910390a3505600a165627a7a723058203ce2a4aa512e887637a71fb6db38d20eb9fc84a658f60a5eef2a7c364857c9a80029"
}