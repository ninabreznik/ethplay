{
  "address": "0xbd314084ac5872598fdff2f31567084fc9c44270",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AOSetting",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity >=0.5.4 <0.6.0;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n\t/**\n\t * @dev Multiplies two numbers, throws on overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tc = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, truncating the quotient.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn a / b;\n\t}\n\n\t/**\n\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\t/**\n\t * @dev Adds two numbers, throws on overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\tc = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\ninterface INameTAOPosition {\n\tfunction senderIsAdvocate(address _sender, address _id) external view returns (bool);\n\tfunction senderIsListener(address _sender, address _id) external view returns (bool);\n\tfunction senderIsSpeaker(address _sender, address _id) external view returns (bool);\n\tfunction senderIsPosition(address _sender, address _id) external view returns (bool);\n\tfunction getAdvocate(address _id) external view returns (address);\n\tfunction nameIsAdvocate(address _nameId, address _id) external view returns (bool);\n\tfunction nameIsPosition(address _nameId, address _id) external view returns (bool);\n\tfunction initialize(address _id, address _advocateId, address _listenerId, address _speakerId) external returns (bool);\n\tfunction determinePosition(address _sender, address _id) external view returns (uint256);\n}\n\n\ninterface INameAccountRecovery {\n\tfunction isCompromised(address _id) external view returns (bool);\n}\n\n\ninterface IAOSettingValue {\n\tfunction setPendingValue(uint256 _settingId, address _addressValue, bool _boolValue, bytes32 _bytesValue, string calldata _stringValue, uint256 _uintValue) external returns (bool);\n\n\tfunction movePendingToSetting(uint256 _settingId) external returns (bool);\n\n\tfunction settingValue(uint256 _settingId) external view returns (address, bool, bytes32, string memory, uint256);\n}\n\n\ninterface IAOSettingAttribute {\n\tfunction add(uint256 _settingId, address _creatorNameId, string calldata _settingName, address _creatorTAOId, address _associatedTAOId, string calldata _extraData) external returns (bytes32, bytes32);\n\n\tfunction getSettingData(uint256 _settingId) external view returns (uint256, address, address, address, string memory, bool, bool, bool, string memory);\n\n\tfunction approveAdd(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external returns (bool);\n\n\tfunction finalizeAdd(uint256 _settingId, address _creatorTAOAdvocate) external returns (bool);\n\n\tfunction update(uint256 _settingId, address _associatedTAOAdvocate, address _proposalTAOId, string calldata _extraData) external returns (bool);\n\n\tfunction getSettingState(uint256 _settingId) external view returns (uint256, bool, address, address, address, string memory);\n\n\tfunction approveUpdate(uint256 _settingId, address _proposalTAOAdvocate, bool _approved) external returns (bool);\n\n\tfunction finalizeUpdate(uint256 _settingId, address _associatedTAOAdvocate) external returns (bool);\n\n\tfunction addDeprecation(uint256 _settingId, address _creatorNameId, address _creatorTAOId, address _associatedTAOId, uint256 _newSettingId, address _newSettingContractAddress) external returns (bytes32, bytes32);\n\n\tfunction getSettingDeprecation(uint256 _settingId) external view returns (uint256, address, address, address, bool, bool, bool, bool, uint256, uint256, address, address);\n\n\tfunction approveDeprecation(uint256 _settingId, address _associatedTAOAdvocate, bool _approved) external returns (bool);\n\n\tfunction finalizeDeprecation(uint256 _settingId, address _creatorTAOAdvocate) external returns (bool);\n\n\tfunction settingExist(uint256 _settingId) external view returns (bool);\n\n\tfunction getLatestSettingId(uint256 _settingId) external view returns (uint256);\n}\n\n\ninterface INameFactory {\n\tfunction nonces(address _nameId) external view returns (uint256);\n\tfunction incrementNonce(address _nameId) external returns (uint256);\n\tfunction ethAddressToNameId(address _ethAddress) external view returns (address);\n\tfunction setNameNewAddress(address _id, address _newAddress) external returns (bool);\n\tfunction nameIdToEthAddress(address _nameId) external view returns (address);\n}\n\n\ninterface IAOSetting {\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory);\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8);\n\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8);\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor (uint256 initialSupply, string memory tokenName, string memory tokenSymbol) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != address(0));\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, address(this), _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title TAO\n */\ncontract TAO {\n\tusing SafeMath for uint256;\n\n\taddress public vaultAddress;\n\tstring public name;\t\t\t\t// the name for this TAO\n\taddress public originId;\t\t// the ID of the Name that created this TAO. If Name, it's the eth address\n\n\t// TAO's data\n\tstring public datHash;\n\tstring public database;\n\tstring public keyValue;\n\tbytes32 public contentId;\n\n\t/**\n\t * 0 = TAO\n\t * 1 = Name\n\t */\n\tuint8 public typeId;\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _vaultAddress\n\t) public {\n\t\tname = _name;\n\t\toriginId = _originId;\n\t\tdatHash = _datHash;\n\t\tdatabase = _database;\n\t\tkeyValue = _keyValue;\n\t\tcontentId = _contentId;\n\n\t\t// Creating TAO\n\t\ttypeId = 0;\n\n\t\tvaultAddress = _vaultAddress;\n\t}\n\n\t/**\n\t * @dev Checks if calling address is Vault contract\n\t */\n\tmodifier onlyVault {\n\t\trequire (msg.sender == vaultAddress);\n\t\t_;\n\t}\n\n\t/**\n\t * Will receive any ETH sent\n\t */\n\tfunction () external payable {\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ETH from this TAO to `_recipient`\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\t_recipient.transfer(_amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Allows Vault to transfer `_amount` of ERC20 Token from this TAO to `_recipient`\n\t * @param _erc20TokenAddress The address of ERC20 Token\n\t * @param _recipient The recipient address\n\t * @param _amount The amount to transfer\n\t * @return true on success\n\t */\n\tfunction transferERC20(address _erc20TokenAddress, address _recipient, uint256 _amount) public onlyVault returns (bool) {\n\t\tTokenERC20 _erc20 = TokenERC20(_erc20TokenAddress);\n\t\t_erc20.transfer(_recipient, _amount);\n\t\treturn true;\n\t}\n}\n\n\n\n\n/**\n * @title Name\n */\ncontract Name is TAO {\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor (string memory _name, address _originId, string memory _datHash, string memory _database, string memory _keyValue, bytes32 _contentId, address _vaultAddress)\n\t\tTAO (_name, _originId, _datHash, _database, _keyValue, _contentId, _vaultAddress) public {\n\t\t// Creating Name\n\t\ttypeId = 1;\n\t}\n}\n\n\n\n\n/**\n * @title AOLibrary\n */\nlibrary AOLibrary {\n\tusing SafeMath for uint256;\n\n\tuint256 constant private _MULTIPLIER_DIVISOR = 10 ** 6; // 1000000 = 1\n\tuint256 constant private _PERCENTAGE_DIVISOR = 10 ** 6; // 100% = 1000000\n\n\t/**\n\t * @dev Check whether or not the given TAO ID is a TAO\n\t * @param _taoId The ID of the TAO\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isTAO(address _taoId) public view returns (bool) {\n\t\treturn (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);\n\t}\n\n\t/**\n\t * @dev Check whether or not the given Name ID is a Name\n\t * @param _nameId The ID of the Name\n\t * @return true if yes. false otherwise\n\t */\n\tfunction isName(address _nameId) public view returns (bool) {\n\t\treturn (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);\n\t}\n\n\t/**\n\t * @dev Check if `_tokenAddress` is a valid ERC20 Token address\n\t * @param _tokenAddress The ERC20 Token address to check\n\t */\n\tfunction isValidERC20TokenAddress(address _tokenAddress) public view returns (bool) {\n\t\tif (_tokenAddress == address(0)) {\n\t\t\treturn false;\n\t\t}\n\t\tTokenERC20 _erc20 = TokenERC20(_tokenAddress);\n\t\treturn (_erc20.totalSupply() >= 0 && bytes(_erc20.name()).length > 0 && bytes(_erc20.symbol()).length > 0);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t * @param _sender The address to check\n\t * @param _theAO The AO address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t * @return true if yes, false otherwise\n\t */\n\tfunction isTheAO(address _sender, address _theAO, address _nameTAOPositionAddress) public view returns (bool) {\n\t\treturn (_sender == _theAO ||\n\t\t\t(\n\t\t\t\t(isTAO(_theAO) || isName(_theAO)) &&\n\t\t\t\t_nameTAOPositionAddress != address(0) &&\n\t\t\t\tINameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate percentage.\n\t *\t\tPercentage stored throughout AO contracts covers 4 decimals,\n\t *\t\tso 1% is 10000, 1.25% is 12500, etc\n\t */\n\tfunction PERCENTAGE_DIVISOR() public pure returns (uint256) {\n\t\treturn _PERCENTAGE_DIVISOR;\n\t}\n\n\t/**\n\t * @dev Return the divisor used to correctly calculate multiplier.\n\t *\t\tMultiplier stored throughout AO contracts covers 6 decimals,\n\t *\t\tso 1 is 1000000, 0.023 is 23000, etc\n\t */\n\tfunction MULTIPLIER_DIVISOR() public pure returns (uint256) {\n\t\treturn _MULTIPLIER_DIVISOR;\n\t}\n\n\t/**\n\t * @dev deploy a TAO\n\t * @param _name The name of the TAO\n\t * @param _originId The Name ID the creates the TAO\n\t * @param _datHash The datHash of this TAO\n\t * @param _database The database for this TAO\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this TAO\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployTAO(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (TAO _tao) {\n\t\t_tao = new TAO(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev deploy a Name\n\t * @param _name The name of the Name\n\t * @param _originId The eth address the creates the Name\n\t * @param _datHash The datHash of this Name\n\t * @param _database The database for this Name\n\t * @param _keyValue The key/value pair to be checked on the database\n\t * @param _contentId The contentId related to this Name\n\t * @param _nameTAOVaultAddress The address of NameTAOVault\n\t */\n\tfunction deployName(string memory _name,\n\t\taddress _originId,\n\t\tstring memory _datHash,\n\t\tstring memory _database,\n\t\tstring memory _keyValue,\n\t\tbytes32 _contentId,\n\t\taddress _nameTAOVaultAddress\n\t\t) public returns (Name _myName) {\n\t\t_myName = new Name(_name, _originId, _datHash, _database, _keyValue, _contentId, _nameTAOVaultAddress);\n\t}\n\n\t/**\n\t * @dev Calculate the new weighted multiplier when adding `_additionalPrimordialAmount` at `_additionalWeightedMultiplier` to the current `_currentPrimordialBalance` at `_currentWeightedMultiplier`\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _currentPrimordialBalance Account's current primordial ion balance\n\t * @param _additionalWeightedMultiplier The weighted multiplier to be added\n\t * @param _additionalPrimordialAmount The primordial ion amount to be added\n\t * @return the new primordial weighted multiplier\n\t */\n\tfunction calculateWeightedMultiplier(uint256 _currentWeightedMultiplier, uint256 _currentPrimordialBalance, uint256 _additionalWeightedMultiplier, uint256 _additionalPrimordialAmount) public pure returns (uint256) {\n\t\tif (_currentWeightedMultiplier > 0) {\n\t\t\tuint256 _totalWeightedIons = (_currentWeightedMultiplier.mul(_currentPrimordialBalance)).add(_additionalWeightedMultiplier.mul(_additionalPrimordialAmount));\n\t\t\tuint256 _totalIons = _currentPrimordialBalance.add(_additionalPrimordialAmount);\n\t\t\treturn _totalWeightedIons.div(_totalIons);\n\t\t} else {\n\t\t\treturn _additionalWeightedMultiplier;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the primordial ion multiplier on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Multiplier = S\n\t *\t\tEnding Multiplier = E\n\t *\t\tTo Purchase = P\n\t *\t\tMultiplier for next Lot of Amount = (1 - ((M + P/2) / T)) x (S-E)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion mintable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting multiplier in (10 ** 6)\n\t * @param _endingMultiplier The ending multiplier in (10 ** 6)\n\t * @return The multiplier in (10 ** 6)\n\t */\n\tfunction calculatePrimordialMultiplier(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * Multiplier = (1 - (temp / T)) x (S-E)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply multiplier with _MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR to account for 6 decimals\n\t\t\t * so, Multiplier = (_MULTIPLIER_DIVISOR/_MULTIPLIER_DIVISOR) * (1 - (temp / T)) * (S-E)\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR * (1 - (temp / T))) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Multiplier = ((_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)) / _MULTIPLIER_DIVISOR\n\t\t\t * Take out the division by _MULTIPLIER_DIVISOR for now and include in later calculation\n\t\t\t * Multiplier = (_MULTIPLIER_DIVISOR - ((_MULTIPLIER_DIVISOR * temp) / T)) * (S-E)\n\t\t\t */\n\t\t\tuint256 multiplier = (_MULTIPLIER_DIVISOR.sub(_MULTIPLIER_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier));\n\t\t\t/**\n\t\t\t * Since _startingMultiplier and _endingMultiplier are in 6 decimals\n\t\t\t * Need to divide multiplier by _MULTIPLIER_DIVISOR\n\t\t\t */\n\t\t\treturn multiplier.div(_MULTIPLIER_DIVISOR);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus percentage of network ion on a given lot\n\t *\t\tTotal Primordial Mintable = T\n\t *\t\tTotal Primordial Minted = M\n\t *\t\tStarting Network Bonus Multiplier = Bs\n\t *\t\tEnding Network Bonus Multiplier = Be\n\t *\t\tTo Purchase = P\n\t *\t\tAO Bonus % = B% = (1 - ((M + P/2) / T)) x (Bs-Be)\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusPercentage(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tif (_purchaseAmount > 0 && _purchaseAmount <= _totalPrimordialMintable.sub(_totalPrimordialMinted)) {\n\t\t\t/**\n\t\t\t * Let temp = M + (P/2)\n\t\t\t * B% = (1 - (temp / T)) x (Bs-Be)\n\t\t\t */\n\t\t\tuint256 temp = _totalPrimordialMinted.add(_purchaseAmount.div(2));\n\n\t\t\t/**\n\t\t\t * Multiply B% with _PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR to account for 6 decimals\n\t\t\t * so, B% = (_PERCENTAGE_DIVISOR/_PERCENTAGE_DIVISOR) * (1 - (temp / T)) * (Bs-Be)\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR * (1 - (temp / T))) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * B% = ((_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)) / _PERCENTAGE_DIVISOR\n\t\t\t * Take out the division by _PERCENTAGE_DIVISOR for now and include in later calculation\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be)\n\t\t\t * But since Bs and Be are in 6 decimals, need to divide by _PERCENTAGE_DIVISOR\n\t\t\t * B% = (_PERCENTAGE_DIVISOR - ((_PERCENTAGE_DIVISOR * temp) / T)) * (Bs-Be) / _PERCENTAGE_DIVISOR\n\t\t\t */\n\t\t\tuint256 bonusPercentage = (_PERCENTAGE_DIVISOR.sub(_PERCENTAGE_DIVISOR.mul(temp).div(_totalPrimordialMintable))).mul(_startingMultiplier.sub(_endingMultiplier)).div(_PERCENTAGE_DIVISOR);\n\t\t\treturn bonusPercentage;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculate the bonus amount of network ion on a given lot\n\t *\t\tAO Bonus Amount = B% x P\n\t *\n\t * @param _purchaseAmount The amount of primordial ion intended to be purchased\n\t * @param _totalPrimordialMintable Total Primordial ion intable\n\t * @param _totalPrimordialMinted Total Primordial ion minted so far\n\t * @param _startingMultiplier The starting Network ion bonus multiplier\n\t * @param _endingMultiplier The ending Network ion bonus multiplier\n\t * @return The bonus percentage\n\t */\n\tfunction calculateNetworkBonusAmount(uint256 _purchaseAmount, uint256 _totalPrimordialMintable, uint256 _totalPrimordialMinted, uint256 _startingMultiplier, uint256 _endingMultiplier) public pure returns (uint256) {\n\t\tuint256 bonusPercentage = calculateNetworkBonusPercentage(_purchaseAmount, _totalPrimordialMintable, _totalPrimordialMinted, _startingMultiplier, _endingMultiplier);\n\t\t/**\n\t\t * Since bonusPercentage is in _PERCENTAGE_DIVISOR format, need to divide it with _PERCENTAGE DIVISOR\n\t\t * when calculating the network ion bonus amount\n\t\t */\n\t\tuint256 networkBonus = bonusPercentage.mul(_purchaseAmount).div(_PERCENTAGE_DIVISOR);\n\t\treturn networkBonus;\n\t}\n\n\t/**\n\t * @dev Calculate the maximum amount of Primordial an account can burn\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_maximumMultiplier = S\n\t *\t\t_amountToBurn = B\n\t *\t\tB = ((S x P) - (P x M)) / S\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _maximumMultiplier The maximum multiplier of this account\n\t * @return The maximum burn amount\n\t */\n\tfunction calculateMaximumBurnAmount(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _maximumMultiplier) public pure returns (uint256) {\n\t\treturn (_maximumMultiplier.mul(_primordialBalance).sub(_primordialBalance.mul(_currentWeightedMultiplier))).div(_maximumMultiplier);\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after burning primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToBurn = B\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P - B)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToBurn The amount of primordial ion to burn\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterBurn(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToBurn) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.sub(_amountToBurn));\n\t}\n\n\t/**\n\t * @dev Calculate the new multiplier after converting network ion to primordial ion\n\t *\t\t_primordialBalance = P\n\t *\t\t_currentWeightedMultiplier = M\n\t *\t\t_amountToConvert = C\n\t *\t\t_newMultiplier = E\n\t *\t\tE = (P x M) / (P + C)\n\t *\n\t * @param _primordialBalance Account's primordial ion balance\n\t * @param _currentWeightedMultiplier Account's current weighted multiplier\n\t * @param _amountToConvert The amount of network ion to convert\n\t * @return The new multiplier\n\t */\n\tfunction calculateMultiplierAfterConversion(uint256 _primordialBalance, uint256 _currentWeightedMultiplier, uint256 _amountToConvert) public pure returns (uint256) {\n\t\treturn _primordialBalance.mul(_currentWeightedMultiplier).div(_primordialBalance.add(_amountToConvert));\n\t}\n\n\t/**\n\t * @dev count num of digits\n\t * @param number uint256 of the nuumber to be checked\n\t * @return uint8 num of digits\n\t */\n\tfunction numDigits(uint256 number) public pure returns (uint8) {\n\t\tuint8 digits = 0;\n\t\twhile(number != 0) {\n\t\t\tnumber = number.div(10);\n\t\t\tdigits++;\n\t\t}\n\t\treturn digits;\n\t}\n}\n\n\n\ncontract TheAO {\n\taddress public theAO;\n\taddress public nameTAOPositionAddress;\n\n\t// Check whether an address is whitelisted and granted access to transact\n\t// on behalf of others\n\tmapping (address => bool) public whitelist;\n\n\tconstructor() public {\n\t\ttheAO = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks if msg.sender is in whitelist.\n\t */\n\tmodifier inWhitelist() {\n\t\trequire (whitelist[msg.sender] == true);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public {\n\t\trequire (msg.sender == theAO);\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n}\n\n\n\n\n\n\n\n\n/**\n * @title AOSetting\n *\n * This contract stores all AO setting variables\n */\ncontract AOSetting is TheAO, IAOSetting {\n\taddress public nameFactoryAddress;\n\taddress public nameAccountRecoveryAddress;\n\taddress public aoSettingAttributeAddress;\n\taddress public aoSettingValueAddress;\n\n\tINameFactory internal _nameFactory;\n\tINameTAOPosition internal _nameTAOPosition;\n\tINameAccountRecovery internal _nameAccountRecovery;\n\tIAOSettingAttribute internal _aoSettingAttribute;\n\tIAOSettingValue internal _aoSettingValue;\n\n\tuint8 constant public ADDRESS_SETTING_TYPE = 1;\n\tuint8 constant public BOOL_SETTING_TYPE = 2;\n\tuint8 constant public BYTES_SETTING_TYPE = 3;\n\tuint8 constant public STRING_SETTING_TYPE = 4;\n\tuint8 constant public UINT_SETTING_TYPE = 5;\n\n\tuint256 public totalSetting;\n\n\t/**\n\t * Mapping from associatedTAOId's setting name to Setting ID.\n\t *\n\t * Instead of concatenating the associatedTAOID and setting name to create a unique ID for lookup,\n\t * use nested mapping to achieve the same result.\n\t *\n\t * The setting's name needs to be converted to bytes32 since solidity does not support mapping by string.\n\t */\n\tmapping (address => mapping (bytes32 => uint256)) internal nameSettingLookup;\n\n\t// Mapping from updateHashKey to it's settingId\n\tmapping (bytes32 => uint256) public updateHashLookup;\n\n\t// Mapping from setting ID to it's type\n\t// setting type 1 => uint256, 2 => bool, 3 => address, 4 => bytes32, 5 => string\n\tmapping (uint256 => uint8) internal _settingTypeLookup;\n\n\t// Event to be broadcasted to public when a setting is created and waiting for approval\n\tevent SettingCreation(uint256 indexed settingId, address indexed creatorNameId, address creatorTAOId, address associatedTAOId, string settingName, bytes32 associatedTAOSettingId, bytes32 creatorTAOSettingId);\n\n\t// Event to be broadcasted to public when setting creation is approved/rejected by the advocate of associatedTAOId\n\tevent ApproveSettingCreation(uint256 indexed settingId, address associatedTAOId, address associatedTAOAdvocate, bool approved);\n\t// Event to be broadcasted to public when setting creation is finalized by the advocate of creatorTAOId\n\tevent FinalizeSettingCreation(uint256 indexed settingId, address creatorTAOId, address creatorTAOAdvocate);\n\n\t/**\n\t * @dev Constructor function\n\t */\n\tconstructor(address _nameFactoryAddress,\n\t\taddress _nameTAOPositionAddress,\n\t\taddress _nameAccountRecoveryAddress,\n\t\taddress _aoSettingAttributeAddress,\n\t\taddress _aoSettingValueAddress\n\t\t) public {\n\t\tsetNameFactoryAddress(_nameFactoryAddress);\n\t\tsetNameTAOPositionAddress(_nameTAOPositionAddress);\n\t\tsetNameAccountRecoveryAddress(_nameAccountRecoveryAddress);\n\t\tsetAOSettingAttributeAddress(_aoSettingAttributeAddress);\n\t\tsetAOSettingValueAddress(_aoSettingValueAddress);\n\t}\n\n\t/**\n\t * @dev Checks if the calling contract address is The AO\n\t *\t\tOR\n\t *\t\tIf The AO is set to a Name/TAO, then check if calling address is the Advocate\n\t */\n\tmodifier onlyTheAO {\n\t\trequire (AOLibrary.isTheAO(msg.sender, theAO, nameTAOPositionAddress));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_taoId` is a TAO\n\t */\n\tmodifier isTAO(address _taoId) {\n\t\trequire (AOLibrary.isTAO(_taoId));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if `_settingName` of `_associatedTAOId` is taken\n\t */\n\tmodifier settingNameNotTaken(string memory _settingName, address _associatedTAOId) {\n\t\trequire (settingNameExist(_settingName, _associatedTAOId) == false);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check if msg.sender is the current advocate of Name ID\n\t */\n\tmodifier onlyAdvocate(address _id) {\n\t\trequire (_nameTAOPosition.senderIsAdvocate(msg.sender, _id));\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Check is msg.sender address is a Name\n\t */\n\t modifier senderIsName() {\n\t\trequire (_nameFactory.ethAddressToNameId(msg.sender) != address(0));\n\t\t_;\n\t }\n\n\t/**\n\t * @dev Only allowed if sender's Name is not compromised\n\t */\n\tmodifier senderNameNotCompromised() {\n\t\trequire (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));\n\t\t_;\n\t}\n\n\t/***** The AO ONLY METHODS *****/\n\t/**\n\t * @dev Transfer ownership of The AO to new address\n\t * @param _theAO The new address to be transferred\n\t */\n\tfunction transferOwnership(address _theAO) public onlyTheAO {\n\t\trequire (_theAO != address(0));\n\t\ttheAO = _theAO;\n\t}\n\n\t/**\n\t * @dev Whitelist `_account` address to transact on behalf of others\n\t * @param _account The address to whitelist\n\t * @param _whitelist Either to whitelist or not\n\t */\n\tfunction setWhitelist(address _account, bool _whitelist) public onlyTheAO {\n\t\trequire (_account != address(0));\n\t\twhitelist[_account] = _whitelist;\n\t}\n\n\t/**\n\t * @dev The AO sets NameFactory address\n\t * @param _nameFactoryAddress The address of NameFactory\n\t */\n\tfunction setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {\n\t\trequire (_nameFactoryAddress != address(0));\n\t\tnameFactoryAddress = _nameFactoryAddress;\n\t\t_nameFactory = INameFactory(_nameFactoryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets NameTAOPosition address\n\t * @param _nameTAOPositionAddress The address of NameTAOPosition\n\t */\n\tfunction setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {\n\t\trequire (_nameTAOPositionAddress != address(0));\n\t\tnameTAOPositionAddress = _nameTAOPositionAddress;\n\t\t_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);\n\t}\n\n\t/**\n\t * @dev The AO set the NameAccountRecovery Address\n\t * @param _nameAccountRecoveryAddress The address of NameAccountRecovery\n\t */\n\tfunction setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {\n\t\trequire (_nameAccountRecoveryAddress != address(0));\n\t\tnameAccountRecoveryAddress = _nameAccountRecoveryAddress;\n\t\t_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOSettingAttribute address\n\t * @param _aoSettingAttributeAddress The address of AOSettingAttribute\n\t */\n\tfunction setAOSettingAttributeAddress(address _aoSettingAttributeAddress) public onlyTheAO {\n\t\trequire (_aoSettingAttributeAddress != address(0));\n\t\taoSettingAttributeAddress = _aoSettingAttributeAddress;\n\t\t_aoSettingAttribute = IAOSettingAttribute(_aoSettingAttributeAddress);\n\t}\n\n\t/**\n\t * @dev The AO sets AOSettingValue address\n\t * @param _aoSettingValueAddress The address of AOSettingValue\n\t */\n\tfunction setAOSettingValueAddress(address _aoSettingValueAddress) public onlyTheAO {\n\t\trequire (_aoSettingValueAddress != address(0));\n\t\taoSettingValueAddress = _aoSettingValueAddress;\n\t\t_aoSettingValue = IAOSettingValue(_aoSettingValueAddress);\n\t}\n\n\t/***** PUBLIC METHODS *****/\n\t/**\n\t * @dev Check whether or not a setting name of an associatedTAOId exist\n\t * @param _settingName The human-readable name of the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @return true if yes. false otherwise\n\t */\n\tfunction settingNameExist(string memory _settingName, address _associatedTAOId) public view returns (bool) {\n\t\treturn (nameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(this, _settingName))] > 0);\n\t}\n\n\t/**\n\t * @dev Advocate of _creatorTAOId adds a uint setting\n\t * @param _settingName The human-readable name of the setting\n\t * @param _value The uint256 value of the setting\n\t * @param _creatorTAOId The taoId that created the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction addUintSetting(\n\t\tstring memory _settingName,\n\t\tuint256 _value,\n\t\taddress _creatorTAOId,\n\t\taddress _associatedTAOId,\n\t\tstring memory _extraData)\n\t\tpublic\n\t\tisTAO(_creatorTAOId)\n\t\tisTAO(_associatedTAOId)\n\t\tsettingNameNotTaken(_settingName, _associatedTAOId)\n\t\tonlyAdvocate(_creatorTAOId)\n\t\tsenderNameNotCompromised {\n\t\t// Update global variables\n\t\ttotalSetting++;\n\n\t\t_settingTypeLookup[totalSetting] = UINT_SETTING_TYPE;\n\n\t\t// Store the value as pending value\n\t\t_aoSettingValue.setPendingValue(totalSetting, address(0), false, '', '', _value);\n\n\t\t// Store setting creation data\n\t\t_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);\n\t}\n\n\t/**\n\t * @dev Advocate of _creatorTAOId adds a bool setting\n\t * @param _settingName The human-readable name of the setting\n\t * @param _value The bool value of the setting\n\t * @param _creatorTAOId The taoId that created the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction addBoolSetting(\n\t\tstring memory _settingName,\n\t\tbool _value,\n\t\taddress _creatorTAOId,\n\t\taddress _associatedTAOId,\n\t\tstring memory _extraData)\n\t\tpublic\n\t\tisTAO(_creatorTAOId)\n\t\tisTAO(_associatedTAOId)\n\t\tsettingNameNotTaken(_settingName, _associatedTAOId)\n\t\tonlyAdvocate(_creatorTAOId)\n\t\tsenderNameNotCompromised {\n\t\t// Update global variables\n\t\ttotalSetting++;\n\n\t\t_settingTypeLookup[totalSetting] = BOOL_SETTING_TYPE;\n\n\t\t// Store the value as pending value\n\t\t_aoSettingValue.setPendingValue(totalSetting, address(0), _value, '', '', 0);\n\n\t\t// Store setting creation data\n\t\t_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);\n\t}\n\n\t/**\n\t * @dev Advocate of _creatorTAOId adds an address setting\n\t * @param _settingName The human-readable name of the setting\n\t * @param _value The address value of the setting\n\t * @param _creatorTAOId The taoId that created the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction addAddressSetting(\n\t\tstring memory _settingName,\n\t\taddress _value,\n\t\taddress _creatorTAOId,\n\t\taddress _associatedTAOId,\n\t\tstring memory _extraData)\n\t\tpublic\n\t\tisTAO(_creatorTAOId)\n\t\tisTAO(_associatedTAOId)\n\t\tsettingNameNotTaken(_settingName, _associatedTAOId)\n\t\tonlyAdvocate(_creatorTAOId)\n\t\tsenderNameNotCompromised {\n\t\t// Update global variables\n\t\ttotalSetting++;\n\n\t\t_settingTypeLookup[totalSetting] = ADDRESS_SETTING_TYPE;\n\n\t\t// Store the value as pending value\n\t\t_aoSettingValue.setPendingValue(totalSetting, _value, false, '', '', 0);\n\n\t\t// Store setting creation data\n\t\t_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);\n\t}\n\n\t/**\n\t * @dev Advocate of _creatorTAOId adds a bytes32 setting\n\t * @param _settingName The human-readable name of the setting\n\t * @param _value The bytes32 value of the setting\n\t * @param _creatorTAOId The taoId that created the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction addBytesSetting(\n\t\tstring memory _settingName,\n\t\tbytes32 _value,\n\t\taddress _creatorTAOId,\n\t\taddress _associatedTAOId,\n\t\tstring memory _extraData)\n\t\tpublic\n\t\tisTAO(_creatorTAOId)\n\t\tisTAO(_associatedTAOId)\n\t\tsettingNameNotTaken(_settingName, _associatedTAOId)\n\t\tonlyAdvocate(_creatorTAOId)\n\t\tsenderNameNotCompromised {\n\t\t// Update global variables\n\t\ttotalSetting++;\n\n\t\t_settingTypeLookup[totalSetting] = BYTES_SETTING_TYPE;\n\n\t\t// Store the value as pending value\n\t\t_aoSettingValue.setPendingValue(totalSetting, address(0), false, _value, '', 0);\n\n\t\t// Store setting creation data\n\t\t_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);\n\t}\n\n\t/**\n\t * @dev Advocate of _creatorTAOId adds a string setting\n\t * @param _settingName The human-readable name of the setting\n\t * @param _value The string value of the setting\n\t * @param _creatorTAOId The taoId that created the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction addStringSetting(\n\t\tstring memory _settingName,\n\t\tstring memory _value,\n\t\taddress _creatorTAOId,\n\t\taddress _associatedTAOId,\n\t\tstring memory _extraData)\n\t\tpublic\n\t\tisTAO(_creatorTAOId)\n\t\tisTAO(_associatedTAOId)\n\t\tsettingNameNotTaken(_settingName, _associatedTAOId)\n\t\tonlyAdvocate(_creatorTAOId)\n\t\tsenderNameNotCompromised {\n\t\t// Update global variables\n\t\ttotalSetting++;\n\n\t\t_settingTypeLookup[totalSetting] = STRING_SETTING_TYPE;\n\n\t\t// Store the value as pending value\n\t\t_aoSettingValue.setPendingValue(totalSetting, address(0), false, '', _value, 0);\n\n\t\t// Store setting creation data\n\t\t_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's _associatedTAOId approves setting creation\n\t * @param _settingId The ID of the setting to approve\n\t * @param _approved Whether to approve or reject\n\t */\n\tfunction approveSettingCreation(uint256 _settingId, bool _approved) public senderIsName senderNameNotCompromised {\n\t\taddress _associatedTAOAdvocate = _nameFactory.ethAddressToNameId(msg.sender);\n\t\trequire (_aoSettingAttribute.approveAdd(_settingId, _associatedTAOAdvocate, _approved));\n\t\t(,,, address _associatedTAOId, string memory _settingName,,,,) = _aoSettingAttribute.getSettingData(_settingId);\n\t\tif (!_approved) {\n\t\t\t// Clear the settingName from nameSettingLookup so it can be added again in the future\n\t\t\tdelete nameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(this, _settingName))];\n\t\t\tdelete _settingTypeLookup[_settingId];\n\t\t}\n\t\temit ApproveSettingCreation(_settingId, _associatedTAOId, _associatedTAOAdvocate, _approved);\n\t}\n\n\t/**\n\t * @dev Advocate of Setting's _creatorTAOId finalizes the setting creation once the setting is approved\n\t * @param _settingId The ID of the setting to be finalized\n\t */\n\tfunction finalizeSettingCreation(uint256 _settingId) public senderIsName senderNameNotCompromised {\n\t\taddress _creatorTAOAdvocate = _nameFactory.ethAddressToNameId(msg.sender);\n\t\trequire (_aoSettingAttribute.finalizeAdd(_settingId, _creatorTAOAdvocate));\n\n\t\t(,,address _creatorTAOId,,,,,,) = _aoSettingAttribute.getSettingData(_settingId);\n\n\t\trequire (_aoSettingValue.movePendingToSetting(_settingId));\n\n\t\temit FinalizeSettingCreation(_settingId, _creatorTAOId, _creatorTAOAdvocate);\n\t}\n\n\t/**\n\t * @dev Get setting type of a setting ID\n\t * @param _settingId The ID of the setting\n\t * @return the setting type value\n\t *\t\t   setting type 1 => uint256, 2 => bool, 3 => address, 4 => bytes32, 5 => string\n\t */\n\tfunction settingTypeLookup(uint256 _settingId) external view returns (uint8) {\n\t\treturn _settingTypeLookup[_settingId];\n\t}\n\n\t/**\n\t * @dev Get setting Id given an associatedTAOId and settingName\n\t * @param _associatedTAOId The ID of the AssociatedTAO\n\t * @param _settingName The name of the setting\n\t * @return the ID of the setting\n\t */\n\tfunction getSettingIdByTAOName(address _associatedTAOId, string memory _settingName) public view returns (uint256) {\n\t\treturn nameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(this, _settingName))];\n\t}\n\n\t/**\n\t * @dev Get setting values by setting ID.\n\t *\t\tWill throw error if the setting is not exist or rejected.\n\t * @param _settingId The ID of the setting\n\t * @return the uint256 value of this setting ID\n\t * @return the bool value of this setting ID\n\t * @return the address value of this setting ID\n\t * @return the bytes32 value of this setting ID\n\t * @return the string value of this setting ID\n\t */\n\tfunction getSettingValuesById(uint256 _settingId) public view returns (uint256, bool, address, bytes32, string memory) {\n\t\trequire (_aoSettingAttribute.settingExist(_settingId));\n\t\t_settingId = _aoSettingAttribute.getLatestSettingId(_settingId);\n\t\t(address _addressValue, bool _boolValue, bytes32 _bytesValue, string memory _stringValue, uint256 _uintValue) = _aoSettingValue.settingValue(_settingId);\n\t\treturn (_uintValue, _boolValue, _addressValue, _bytesValue, _stringValue);\n\t}\n\n\t/**\n\t * @dev Get setting values by taoId and settingName.\n\t *\t\tWill throw error if the setting is not exist or rejected.\n\t * @param _taoId The ID of the TAO\n\t * @param _settingName The name of the setting\n\t * @return the uint256 value of this setting ID\n\t * @return the bool value of this setting ID\n\t * @return the address value of this setting ID\n\t * @return the bytes32 value of this setting ID\n\t * @return the string value of this setting ID\n\t */\n\tfunction getSettingValuesByTAOName(address _taoId, string calldata _settingName) external view returns (uint256, bool, address, bytes32, string memory) {\n\t\treturn getSettingValuesById(getSettingIdByTAOName(_taoId, _settingName));\n\t}\n\n\t/**\n\t * @dev Return the setting type values\n\t * @return The setting type value for address\n\t * @return The setting type value for bool\n\t * @return The setting type value for bytes\n\t * @return The setting type value for string\n\t * @return The setting type value for uint\n\t */\n\tfunction getSettingTypes() external view returns (uint8, uint8, uint8, uint8, uint8) {\n\t\treturn (\n\t\t\tADDRESS_SETTING_TYPE,\n\t\t\tBOOL_SETTING_TYPE,\n\t\t\tBYTES_SETTING_TYPE,\n\t\t\tSTRING_SETTING_TYPE,\n\t\t\tUINT_SETTING_TYPE\n\t\t);\n\t}\n\n\t/***** Internal Method *****/\n\t/**\n\t * @dev Store setting creation data\n\t * @param _creatorNameId The nameId that created the setting\n\t * @param _settingName The human-readable name of the setting\n\t * @param _creatorTAOId The taoId that created the setting\n\t * @param _associatedTAOId The taoId that the setting affects\n\t * @param _extraData Catch-all string value to be stored if exist\n\t */\n\tfunction _storeSettingCreation(address _creatorNameId, string memory _settingName, address _creatorTAOId, address _associatedTAOId, string memory _extraData) internal {\n\t\t// Store nameSettingLookup\n\t\tnameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(address(this), _settingName))] = totalSetting;\n\n\t\t// Store setting data/state\n\t\t(bytes32 _associatedTAOSettingId, bytes32 _creatorTAOSettingId) = _aoSettingAttribute.add(totalSetting, _creatorNameId, _settingName, _creatorTAOId, _associatedTAOId, _extraData);\n\n\t\temit SettingCreation(totalSetting, _creatorNameId, _creatorTAOId, _associatedTAOId, _settingName, _associatedTAOSettingId, _creatorTAOSettingId);\n\t}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"bytes32\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"addBytesSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"updateHashLookup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"}],\"name\":\"setNameAccountRecoveryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_settingName\",\"type\":\"string\"}],\"name\":\"getSettingIdByTAOName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveSettingCreation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingValueAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingValueAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"string\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"addStringSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"addUintSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameTAOPositionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"address\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"addAddressSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STRING_SETTING_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"}],\"name\":\"setNameTAOPositionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"getSettingValuesById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_taoId\",\"type\":\"address\"},{\"name\":\"_settingName\",\"type\":\"string\"}],\"name\":\"getSettingValuesByTAOName\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aoSettingAttributeAddress\",\"type\":\"address\"}],\"name\":\"setAOSettingAttributeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"bool\"},{\"name\":\"_creatorTAOId\",\"type\":\"address\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"string\"}],\"name\":\"addBoolSetting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSettingTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOOL_SETTING_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"}],\"name\":\"setNameFactoryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"finalizeSettingCreation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameAccountRecoveryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UINT_SETTING_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingId\",\"type\":\"uint256\"}],\"name\":\"settingTypeLookup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSetting\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BYTES_SETTING_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nameFactoryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_settingName\",\"type\":\"string\"},{\"name\":\"_associatedTAOId\",\"type\":\"address\"}],\"name\":\"settingNameExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingAttributeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aoSettingValueAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_theAO\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADDRESS_SETTING_TYPE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nameFactoryAddress\",\"type\":\"address\"},{\"name\":\"_nameTAOPositionAddress\",\"type\":\"address\"},{\"name\":\"_nameAccountRecoveryAddress\",\"type\":\"address\"},{\"name\":\"_aoSettingAttributeAddress\",\"type\":\"address\"},{\"name\":\"_aoSettingValueAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"settingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"creatorNameId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"creatorTAOId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"associatedTAOId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"settingName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"associatedTAOSettingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"creatorTAOSettingId\",\"type\":\"bytes32\"}],\"name\":\"SettingCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"settingId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"associatedTAOId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"associatedTAOAdvocate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApproveSettingCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"settingId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creatorTAOId\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"creatorTAOAdvocate\",\"type\":\"address\"}],\"name\":\"FinalizeSettingCreation\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160a080620040fd833981018060405260a08110156200003357600080fd5b50805160208201516040830151606084015160809094015160008054600160a060020a03191633179055929391929091906200007885640100000000620000d3810204565b6200008c84640100000000620001d8810204565b620000a083640100000000620002dd810204565b620000b482640100000000620003e5810204565b620000c881640100000000620004ea810204565b5050505050620005ef565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200015c57600080fd5b505af415801562000171573d6000803e3d6000fd5b505050506040513d60208110156200018857600080fd5b505115156200019657600080fd5b600160a060020a0381161515620001ac57600080fd5b60038054600160a060020a03909216600160a060020a0319928316811790915560078054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200026157600080fd5b505af415801562000276573d6000803e3d6000fd5b505050506040513d60208110156200028d57600080fd5b505115156200029b57600080fd5b600160a060020a0381161515620002b157600080fd5b60018054600160a060020a03909216600160a060020a0319928316811790915560088054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200036657600080fd5b505af41580156200037b573d6000803e3d6000fd5b505050506040513d60208110156200039257600080fd5b50511515620003a057600080fd5b600160a060020a0381161515620003b657600080fd5b60048054600160a060020a0319908116600160a060020a03938416179182905560098054929093169116179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200046e57600080fd5b505af415801562000483573d6000803e3d6000fd5b505050506040513d60208110156200049a57600080fd5b50511515620004a857600080fd5b600160a060020a0381161515620004be57600080fd5b60058054600160a060020a03909216600160a060020a03199283168117909155600a8054909216179055565b600054600154604080517ff66afcac000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156200057357600080fd5b505af415801562000588573d6000803e3d6000fd5b505050506040513d60208110156200059f57600080fd5b50511515620005ad57600080fd5b600160a060020a0381161515620005c357600080fd5b60068054600160a060020a03909216600160a060020a03199283168117909155600b8054909216179055565b613afe80620005ff6000396000f3fe608060405234801561001057600080fd5b506004361061020a5760003560e060020a9004806379d0c71e1161011e578063a9b6b38e116100b1578063bdfd625711610080578063bdfd625714610d7c578063cf8477cf14610e2d578063dc4c5d5614610e35578063f2fde38b14610e3d578063ff282aaf14610e635761020a565b8063a9b6b38e14610d5c578063bb2445a814610d64578063bbc8f29b14610d6c578063bc40620614610d745761020a565b80639b19251a116100ed5780639b19251a14610cf5578063a4e5fad214610d2f578063a4ed5eab14610d37578063a62eeead14610d3f5761020a565b806379d0c71e14610c6c57806387e5b07014610caa5780638c92436114610cb25780639525f38214610cd85761020a565b80634ef033f0116101a15780635cfaf2ef116101705780635cfaf2ef1461098b5780635ef17eff146109b15780637065bedc14610a7857806372eca63514610af8578063788e31bf14610b1e5761020a565b80634ef033f0146107cc5780634efa45a1146107f057806353d6fd591461093f5780635885d7bb1461096d5761020a565b80633d694f30116101dd5780633d694f30146104685780633f056cb41461048d57806342091137146104b357806343863045146106805761020a565b8063113d89381461020f5780631b2dbff61461035d5780631dfde2bd1461038c57806332f896af146103b2575b600080fd5b61035b600480360360a081101561022557600080fd5b81019060208101813564010000000081111561024057600080fd5b82018360208201111561025257600080fd5b8035906020019184600183028401116401000000008311171561027457600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295843595600160a060020a0360208701358116966040810135909116955091935091506080810190606001356401000000008111156102e657600080fd5b8201836020820111156102f857600080fd5b8035906020019184600183028401116401000000008311171561031a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610e6b945050505050565b005b61037a6004803603602081101561037357600080fd5b50356112a0565b60408051918252519081900360200190f35b61035b600480360360208110156103a257600080fd5b5035600160a060020a03166112b2565b61037a600480360360408110156103c857600080fd5b600160a060020a0382351691908101906040810160208201356401000000008111156103f357600080fd5b82018360208201111561040557600080fd5b8035906020019184600183028401116401000000008311171561042757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506113ac945050505050565b61035b6004803603604081101561047e57600080fd5b50803590602001351515611483565b61035b600480360360208110156104a357600080fd5b5035600160a060020a03166119f3565b61035b600480360360a08110156104c957600080fd5b8101906020810181356401000000008111156104e457600080fd5b8201836020820111156104f657600080fd5b8035906020019184600183028401116401000000008311171561051857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561056b57600080fd5b82018360208201111561057d57600080fd5b8035906020019184600183028401116401000000008311171561059f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295600160a060020a03853581169660208701359091169591945092506060810191506040013564010000000081111561060b57600080fd5b82018360208201111561061d57600080fd5b8035906020019184600183028401116401000000008311171561063f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611aea945050505050565b61035b600480360360a081101561069657600080fd5b8101906020810181356401000000008111156106b157600080fd5b8201836020820111156106c357600080fd5b803590602001918460018302840111640100000000831117156106e557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295843595600160a060020a03602087013581169660408101359091169550919350915060808101906060013564010000000081111561075757600080fd5b82018360208201111561076957600080fd5b8035906020019184600183028401116401000000008311171561078b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611f03945050505050565b6107d4612275565b60408051600160a060020a039092168252519081900360200190f35b61035b600480360360a081101561080657600080fd5b81019060208101813564010000000081111561082157600080fd5b82018360208201111561083357600080fd5b8035906020019184600183028401116401000000008311171561085557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295600160a060020a0385358116966020870135821696604081013590921695509193509091506080810190606001356401000000008111156108ca57600080fd5b8201836020820111156108dc57600080fd5b803590602001918460018302840111640100000000831117156108fe57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612284945050505050565b61035b6004803603604081101561095557600080fd5b50600160a060020a03813516906020013515156125fc565b6109756126e5565b6040805160ff9092168252519081900360200190f35b61035b600480360360208110156109a157600080fd5b5035600160a060020a03166126ea565b6109ce600480360360208110156109c757600080fd5b50356127e1565b604051808681526020018515151515815260200184600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a39578181015183820152602001610a21565b50505050905090810190601f168015610a665780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6109ce60048036036040811015610a8e57600080fd5b600160a060020a038235169190810190604081016020820135640100000000811115610ab957600080fd5b820183602082011115610acb57600080fd5b80359060200191846001830284011164010000000083111715610aed57600080fd5b509092509050612a3c565b61035b60048036036020811015610b0e57600080fd5b5035600160a060020a0316612aa0565b61035b600480360360a0811015610b3457600080fd5b810190602081018135640100000000811115610b4f57600080fd5b820183602082011115610b6157600080fd5b80359060200191846001830284011164010000000083111715610b8357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435151595600160a060020a036020870135811696604081013590911695509193509150608081019060600135640100000000811115610bf757600080fd5b820183602082011115610c0957600080fd5b80359060200191846001830284011164010000000083111715610c2b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612b97945050505050565b610c74612f0a565b6040805160ff96871681529486166020860152928516848401529084166060840152909216608082015290519081900360a00190f35b610975612f1b565b61035b60048036036020811015610cc857600080fd5b5035600160a060020a0316612f20565b61035b60048036036020811015610cee57600080fd5b5035613017565b610d1b60048036036020811015610d0b57600080fd5b5035600160a060020a0316613517565b604080519115158252519081900360200190f35b6107d461352c565b61097561353b565b61097560048036036020811015610d5557600080fd5b5035613540565b6107d4613555565b61037a613564565b61097561356a565b6107d461356f565b610d1b60048036036040811015610d9257600080fd5b810190602081018135640100000000811115610dad57600080fd5b820183602082011115610dbf57600080fd5b80359060200191846001830284011164010000000083111715610de157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050509035600160a060020a0316915061357e9050565b6107d4613657565b6107d4613666565b61035b60048036036020811015610e5357600080fd5b5035600160a060020a0316613675565b610975613762565b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015610ed057600080fd5b505af4158015610ee4573d6000803e3d6000fd5b505050506040513d6020811015610efa57600080fd5b50511515610f0757600080fd5b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015610f6c57600080fd5b505af4158015610f80573d6000803e3d6000fd5b505050506040513d6020811015610f9657600080fd5b50511515610fa357600080fd5b8684610faf828261357e565b15610fb957600080fd5b6008546040805160e060020a6371ce52ed028152336004820152600160a060020a03808b16602483015291518a9392909216916371ce52ed91604480820192602092909190829003018186803b15801561101257600080fd5b505afa158015611026573d6000803e3d6000fd5b505050506040513d602081101561103c57600080fd5b5051151561104957600080fd5b6009546007546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b1580156110a157600080fd5b505afa1580156110b5573d6000803e3d6000fd5b505050506040513d60208110156110cb57600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b15801561111057600080fd5b505afa158015611124573d6000803e3d6000fd5b505050506040513d602081101561113a57600080fd5b50511561114657600080fd5b600c80546001018082556000908152600f60209081526040808320805460ff19166003179055600b549354815160e060020a63ccdd6afd02815260048101919091526024810184905260448101849052606481018e905260a4810184905260c0608482015260c481018490529051600160a060020a039094169363ccdd6afd9361010480840194938390030190829087803b1580156111e457600080fd5b505af11580156111f8573d6000803e3d6000fd5b505050506040513d602081101561120e57600080fd5b50506007546040805160e060020a63029b7d53028152336004820152905161129492600160a060020a03169163029b7d53916024808301926020929190829003018186803b15801561125f57600080fd5b505afa158015611273573d6000803e3d6000fd5b505050506040513d602081101561128957600080fd5b50518b8a8a8a613767565b50505050505050505050565b600e6020526000908152604090205481565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561132457600080fd5b505af4158015611338573d6000803e3d6000fd5b505050506040513d602081101561134e57600080fd5b5051151561135b57600080fd5b600160a060020a038116151561137057600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03938416179182905560098054929093169116179055565b6000600d600084600160a060020a0316600160a060020a03168152602001908152602001600020600030846040516020018083600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140182805190602001908083835b602083106114305780518252601f199092019160209182019101611411565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120815260200190815260200160002054905092915050565b6007546040805160e060020a63029b7d530281523360048201529051600092600160a060020a03169163029b7d53916024808301926020929190829003018186803b1580156114d157600080fd5b505afa1580156114e5573d6000803e3d6000fd5b505050506040513d60208110156114fb57600080fd5b5051600160a060020a0316141561151157600080fd5b6009546007546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b15801561156957600080fd5b505afa15801561157d573d6000803e3d6000fd5b505050506040513d602081101561159357600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b1580156115d857600080fd5b505afa1580156115ec573d6000803e3d6000fd5b505050506040513d602081101561160257600080fd5b50511561160e57600080fd5b6007546040805160e060020a63029b7d530281523360048201529051600092600160a060020a03169163029b7d53916024808301926020929190829003018186803b15801561165c57600080fd5b505afa158015611670573d6000803e3d6000fd5b505050506040513d602081101561168657600080fd5b5051600a54604080517f2a82fdbd00000000000000000000000000000000000000000000000000000000815260048101879052600160a060020a03808516602483015286151560448301529151939450911691632a82fdbd916064808201926020929091908290030181600087803b15801561170157600080fd5b505af1158015611715573d6000803e3d6000fd5b505050506040513d602081101561172b57600080fd5b5051151561173857600080fd5b600a54604080517f81f3e897000000000000000000000000000000000000000000000000000000008152600481018690529051600092606092600160a060020a03909116916381f3e897916024808201928792909190829003018186803b1580156117a257600080fd5b505afa1580156117b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101208110156117e057600080fd5b81516020830151604084015160608501516080860180519496939592949193928301929164010000000081111561181657600080fd5b8201602081018481111561182957600080fd5b815164010000000081118282018710171561184357600080fd5b5050602082015160408301516060840151608090940180519396929591949364010000000081111561187457600080fd5b8201602081018481111561188757600080fd5b81516401000000008111828201871017156118a157600080fd5b5050929190505050505050509450945050505083151561199e57600d600083600160a060020a0316600160a060020a03168152602001908152602001600020600030836040516020018083600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140182805190602001908083835b6020831061193d5780518252601f19909201916020918201910161191e565b51815160209384036101000a60001901801990921691161790526040805192909401828103601f1901835284528151918101919091208752868101979097525093840160009081208190558a8152600f9095525050509020805460ff191690555b60408051600160a060020a0380851682528516602082015285151581830152905186917f88777193beb258cd3af58ac99deaac6fe1e4fd4079ce3085aa04e27c153c241a919081900360600190a25050505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015611a6557600080fd5b505af4158015611a79573d6000803e3d6000fd5b505050506040513d6020811015611a8f57600080fd5b50511515611a9c57600080fd5b600160a060020a0381161515611ab157600080fd5b60068054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff199283168117909155600b8054909216179055565b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611b4f57600080fd5b505af4158015611b63573d6000803e3d6000fd5b505050506040513d6020811015611b7957600080fd5b50511515611b8657600080fd5b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611beb57600080fd5b505af4158015611bff573d6000803e3d6000fd5b505050506040513d6020811015611c1557600080fd5b50511515611c2257600080fd5b8684611c2e828261357e565b15611c3857600080fd5b6008546040805160e060020a6371ce52ed028152336004820152600160a060020a03808b16602483015291518a9392909216916371ce52ed91604480820192602092909190829003018186803b158015611c9157600080fd5b505afa158015611ca5573d6000803e3d6000fd5b505050506040513d6020811015611cbb57600080fd5b50511515611cc857600080fd5b6009546007546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b158015611d2057600080fd5b505afa158015611d34573d6000803e3d6000fd5b505050506040513d6020811015611d4a57600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b158015611d8f57600080fd5b505afa158015611da3573d6000803e3d6000fd5b505050506040513d6020811015611db957600080fd5b505115611dc557600080fd5b600c600081548092919060010191905055506004600f6000600c54815260200190815260200160002060006101000a81548160ff021916908360ff160217905550600b60009054906101000a9004600160a060020a0316600160a060020a031663ccdd6afd600c546000808d60006040518663ffffffff1660e060020a0281526004018086815260200185600160a060020a0316600160a060020a031681526020018415151515815260200160200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611eb3578181015183820152602001611e9b565b50505050905090810190601f168015611ee05780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b1580156111e457600080fd5b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611f6857600080fd5b505af4158015611f7c573d6000803e3d6000fd5b505050506040513d6020811015611f9257600080fd5b50511515611f9f57600080fd5b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561200457600080fd5b505af4158015612018573d6000803e3d6000fd5b505050506040513d602081101561202e57600080fd5b5051151561203b57600080fd5b8684612047828261357e565b1561205157600080fd5b6008546040805160e060020a6371ce52ed028152336004820152600160a060020a03808b16602483015291518a9392909216916371ce52ed91604480820192602092909190829003018186803b1580156120aa57600080fd5b505afa1580156120be573d6000803e3d6000fd5b505050506040513d60208110156120d457600080fd5b505115156120e157600080fd5b6009546007546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b15801561213957600080fd5b505afa15801561214d573d6000803e3d6000fd5b505050506040513d602081101561216357600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b1580156121a857600080fd5b505afa1580156121bc573d6000803e3d6000fd5b505050506040513d60208110156121d257600080fd5b5051156121de57600080fd5b600c80546001018082556000908152600f60209081526040808320805460ff19166005179055600b549354815160e060020a63ccdd6afd0281526004810191909152602481018490526044810184905260a481018e905260c0608482015260c481018490529051600160a060020a039094169363ccdd6afd9361010480840194938390030190829087803b1580156111e457600080fd5b600154600160a060020a031681565b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156122e957600080fd5b505af41580156122fd573d6000803e3d6000fd5b505050506040513d602081101561231357600080fd5b5051151561232057600080fd5b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b15801561238557600080fd5b505af4158015612399573d6000803e3d6000fd5b505050506040513d60208110156123af57600080fd5b505115156123bc57600080fd5b86846123c8828261357e565b156123d257600080fd5b6008546040805160e060020a6371ce52ed028152336004820152600160a060020a03808b16602483015291518a9392909216916371ce52ed91604480820192602092909190829003018186803b15801561242b57600080fd5b505afa15801561243f573d6000803e3d6000fd5b505050506040513d602081101561245557600080fd5b5051151561246257600080fd5b6009546007546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b1580156124ba57600080fd5b505afa1580156124ce573d6000803e3d6000fd5b505050506040513d60208110156124e457600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b15801561252957600080fd5b505afa15801561253d573d6000803e3d6000fd5b505050506040513d602081101561255357600080fd5b50511561255f57600080fd5b600c805460019081018083556000908152600f60209081526040808320805460ff1916909417909355600b549354835160e060020a63ccdd6afd0281526004810191909152600160a060020a038e811660248301526044820184905260a4820184905260c0608483015260c482018490529351939094169363ccdd6afd936101048083019491928390030190829087803b1580156111e457600080fd5b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561266e57600080fd5b505af4158015612682573d6000803e3d6000fd5b505050506040513d602081101561269857600080fd5b505115156126a557600080fd5b600160a060020a03821615156126ba57600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b600481565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b15801561275c57600080fd5b505af4158015612770573d6000803e3d6000fd5b505050506040513d602081101561278657600080fd5b5051151561279357600080fd5b600160a060020a03811615156127a857600080fd5b60018054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560088054909216179055565b6000806000806060600a60009054906101000a9004600160a060020a0316600160a060020a031663982a2376876040518263ffffffff1660e060020a0281526004018082815260200191505060206040518083038186803b15801561284557600080fd5b505afa158015612859573d6000803e3d6000fd5b505050506040513d602081101561286f57600080fd5b5051151561287c57600080fd5b600a54604080517f7b0862e1000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a0390921691637b0862e191602480820192602092909190829003018186803b1580156128e157600080fd5b505afa1580156128f5573d6000803e3d6000fd5b505050506040513d602081101561290b57600080fd5b5051600b54604080517f9ba535ce000000000000000000000000000000000000000000000000000000008152600481018490529051929850600092839283926060928492600160a060020a031691639ba535ce9160248083019286929190829003018186803b15801561297d57600080fd5b505afa158015612991573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a08110156129ba57600080fd5b81516020830151604084015160608501805193959294919391830192916401000000008111156129e957600080fd5b820160208101848111156129fc57600080fd5b8151640100000000811182820187101715612a1657600080fd5b50506020909101519f50939d50939b509099509097505050505050505091939590929450565b6000806000806060612a8c612a878989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506113ac92505050565b6127e1565b939c929b5090995097509095509350505050565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015612b1257600080fd5b505af4158015612b26573d6000803e3d6000fd5b505050506040513d6020811015612b3c57600080fd5b50511515612b4957600080fd5b600160a060020a0381161515612b5e57600080fd5b60058054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff199283168117909155600a8054909216179055565b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015612bfc57600080fd5b505af4158015612c10573d6000803e3d6000fd5b505050506040513d6020811015612c2657600080fd5b50511515612c3357600080fd5b82731150d53299abb7de27464d01b626728f5c840229632fca5414826040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015612c9857600080fd5b505af4158015612cac573d6000803e3d6000fd5b505050506040513d6020811015612cc257600080fd5b50511515612ccf57600080fd5b8684612cdb828261357e565b15612ce557600080fd5b6008546040805160e060020a6371ce52ed028152336004820152600160a060020a03808b16602483015291518a9392909216916371ce52ed91604480820192602092909190829003018186803b158015612d3e57600080fd5b505afa158015612d52573d6000803e3d6000fd5b505050506040513d6020811015612d6857600080fd5b50511515612d7557600080fd5b6009546007546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b158015612dcd57600080fd5b505afa158015612de1573d6000803e3d6000fd5b505050506040513d6020811015612df757600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b158015612e3c57600080fd5b505afa158015612e50573d6000803e3d6000fd5b505050506040513d6020811015612e6657600080fd5b505115612e7257600080fd5b600c80546001018082556000908152600f60209081526040808320805460ff19166002179055600b549354815160e060020a63ccdd6afd0281526004810191909152602481018490528d1515604482015260a4810184905260c0608482015260c481018490529051600160a060020a039094169363ccdd6afd9361010480840194938390030190829087803b1580156111e457600080fd5b600160026003600460059091929394565b600281565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b158015612f9257600080fd5b505af4158015612fa6573d6000803e3d6000fd5b505050506040513d6020811015612fbc57600080fd5b50511515612fc957600080fd5b600160a060020a0381161515612fde57600080fd5b60038054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560078054909216179055565b6007546040805160e060020a63029b7d530281523360048201529051600092600160a060020a03169163029b7d53916024808301926020929190829003018186803b15801561306557600080fd5b505afa158015613079573d6000803e3d6000fd5b505050506040513d602081101561308f57600080fd5b5051600160a060020a031614156130a557600080fd5b6009546007546040805160e060020a63029b7d530281523360048201529051600160a060020a0393841693633ebc2ab393169163029b7d53916024808301926020929190829003018186803b1580156130fd57600080fd5b505afa158015613111573d6000803e3d6000fd5b505050506040513d602081101561312757600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a039092166004830152516024808301926020929190829003018186803b15801561316c57600080fd5b505afa158015613180573d6000803e3d6000fd5b505050506040513d602081101561319657600080fd5b5051156131a257600080fd5b6007546040805160e060020a63029b7d530281523360048201529051600092600160a060020a03169163029b7d53916024808301926020929190829003018186803b1580156131f057600080fd5b505afa158015613204573d6000803e3d6000fd5b505050506040513d602081101561321a57600080fd5b5051600a54604080517f4a17601700000000000000000000000000000000000000000000000000000000815260048101869052600160a060020a0380851660248301529151939450911691634a176017916044808201926020929091908290030181600087803b15801561328d57600080fd5b505af11580156132a1573d6000803e3d6000fd5b505050506040513d60208110156132b757600080fd5b505115156132c457600080fd5b600a54604080517f81f3e897000000000000000000000000000000000000000000000000000000008152600481018590529051600092600160a060020a0316916381f3e8979160248083019286929190829003018186803b15801561332857600080fd5b505afa15801561333c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261012081101561336657600080fd5b81516020830151604084015160608501516080860180519496939592949193928301929164010000000081111561339c57600080fd5b820160208101848111156133af57600080fd5b81516401000000008111828201871017156133c957600080fd5b505060208201516040830151606084015160809094018051939692959194936401000000008111156133fa57600080fd5b8201602081018481111561340d57600080fd5b815164010000000081118282018710171561342757600080fd5b505092919050505050505050505092505050600b60009054906101000a9004600160a060020a0316600160a060020a031663088fc1a8846040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b15801561349757600080fd5b505af11580156134ab573d6000803e3d6000fd5b505050506040513d60208110156134c157600080fd5b505115156134ce57600080fd5b60408051600160a060020a03808416825284166020820152815185927fbb5e0d5e53d5c4edcb39f401558efb469259576f753902721daa75c87b14416c928290030190a2505050565b60026020526000908152604090205460ff1681565b600454600160a060020a031681565b600581565b6000908152600f602052604090205460ff1690565b600054600160a060020a031681565b600c5481565b600381565b600354600160a060020a031681565b600080600d600084600160a060020a0316600160a060020a03168152602001908152602001600020600030866040516020018083600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140182805190602001908083835b602083106136035780518252601f1990920191602091820191016135e4565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040528051906020012081526020019081526020016000205411905092915050565b600554600160a060020a031681565b600654600160a060020a031681565b6000546001546040805160e260020a633d9abf2b028152336004820152600160a060020a03938416602482015292909116604483015251731150d53299abb7de27464d01b626728f5c8402299163f66afcac916064808301926020929190829003018186803b1580156136e757600080fd5b505af41580156136fb573d6000803e3d6000fd5b505050506040513d602081101561371157600080fd5b5051151561371e57600080fd5b600160a060020a038116151561373357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600181565b600c54600d600084600160a060020a0316600160a060020a03168152602001908152602001600020600030876040516020018083600160a060020a0316600160a060020a03166c0100000000000000000000000002815260140182805190602001908083835b602083106137ec5780518252601f1990920191602091820191016137cd565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405280519060200120815260200190815260200160002081905550600080600a60009054906101000a9004600160a060020a0316600160a060020a0316634c5598cd600c5489898989896040518763ffffffff1660e060020a0281526004018087815260200186600160a060020a0316600160a060020a031681526020018060200185600160a060020a0316600160a060020a0316815260200184600160a060020a0316600160a060020a0316815260200180602001838103835287818151815260200191508051906020019080838360005b8381101561390a5781810151838201526020016138f2565b50505050905090810190601f1680156139375780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561396a578181015183820152602001613952565b50505050905090810190601f1680156139975780820380516001836020036101000a031916815260200191505b50985050505050505050506040805180830381600087803b1580156139bb57600080fd5b505af11580156139cf573d6000803e3d6000fd5b505050506040513d60408110156139e557600080fd5b508051602091820151600c5460408051600160a060020a038b811682528a811682880152606082018690526080820185905260a09282018381528d51938301939093528c51959850939650928c169491937f53322aac567204587b4738d1fb8b8942e91eca09c783083ab113f683fe707367938b938b938e938b938b9390929160c084019187019080838360005b83811015613a8b578181015183820152602001613a73565b50505050905090810190601f168015613ab85780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a35050505050505056fea165627a7a72305820346f7ea793062a86c68f6ed459a39dfab98c6a603af68d6757ffe750abcb8878002900000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe000000000000000000000000a829ff6e63c2a2e043b70a614faf074d8dbe9a8d0000000000000000000000009e083eb1c302e2fbf7cb50536608902c0b38743e000000000000000000000000c51f8ed65b9870549abf87815948fd6a1a74fc5f",
  "constructorArguments": "00000000000000000000000010fbf61e4cce57d72eed8b5d9728134ce374bd820000000000000000000000001f7f65b220a0f2d48b28390380f57468e7a382fe000000000000000000000000a829ff6e63c2a2e043b70a614faf074d8dbe9a8d0000000000000000000000009e083eb1c302e2fbf7cb50536608902c0b38743e000000000000000000000000c51f8ed65b9870549abf87815948fd6a1a74fc5f",
  "libraries": [
    {
      "name": "AOLibrary",
      "address": "0x1150d53299Abb7DE27464D01B626728f5c840229"
    }
  ]
}