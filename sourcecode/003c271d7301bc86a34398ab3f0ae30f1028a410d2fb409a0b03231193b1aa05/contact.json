{
  "address": "0x2a1dbabe65c595b0022e75208c34014139d5d357",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TrustedhealthToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-11\n*/\n\npragma solidity ^0.4.21;\n\n/***********************/\n/* Trustedhealth Token */\n/***********************/\n\nlibrary SafeMath {\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract owned {\n\n    address public owner;\n\n    function owned() public{\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n}\n\n/************************/\n/* STANDARD ERC20 TOKEN */\n/************************/\n\ncontract ERC20Token {\n\n    /** Functions needed to be implemented by ERC20 standard **/\n    function totalSupply() public constant returns (uint256 _totalSupply);\n    function balanceOf(address _owner) public constant returns (uint256 _balance);\n    function transfer(address _to, uint256 _amount) public returns (bool _success);\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool _success);\n    function approve(address _spender, uint256 _amount) public returns (bool _success);\n    function allowance(address _owner, address _spender) public constant returns (uint256 _remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n}\n\n\n/**************************************/\n/* TRUSTEDHEALTH TOKEN IMPLEMENTATION */\n/**************************************/\n\ncontract TrustedhealthToken is ERC20Token, owned {\n    using SafeMath for uint256;\n\n    /* Public variables */\n    string public name = \"Trustedhealth\";\n    string public symbol = \"TDH\";\n    uint8 public decimals = 18;\n    bool public tokenFrozen;\n\n    /* Private variables */\n    uint256 supply;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowances;\n    mapping (address => bool) allowedToMint;\n\n    /* Events */\n    event TokenFrozen(bool _frozen, string _reason);\n    event Mint(address indexed _to, uint256 _value);\n\n    /**\n    * Constructor function\n    *\n    * Initializes contract.\n    **/\n    function TrustedhealthToken() public {\n        tokenFrozen = false;\n    }\n\n    /**\n    * Internal transfer function.\n    **/\n    function _transfer(address _from, address _to, uint256 _amount) private {\n        require(_to != 0x0);\n        require(_to != address(this));\n        require(balances[_from] >= _amount);\n        balances[_to] = balances[_to].add(_amount);\n        balances[_from] = balances[_from].sub(_amount);\n        emit Transfer(_from, _to, _amount);\n    }\n\n    /**\n    * Transfer token\n    *\n    * Send '_amount' tokens to '_to' from your address.\n    *\n    * @param _to Address of recipient.\n    * @param _amount Amount to send.\n    * @return Whether the transfer was successful or not.\n    **/\n    function transfer(address _to, uint256 _amount) public returns (bool _success) {\n        require(!tokenFrozen);\n        _transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /**\n    * Set allowance\n    *\n    * Allows '_spender' to spend '_amount' tokens from your address\n    *\n    * @param _spender Address of spender.\n    * @param _amount Max amount allowed to spend.\n    * @return Whether the approve was successful or not.\n    **/\n    function approve(address _spender, uint256 _amount) public returns (bool _success) {\n        allowances[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /**\n    *Transfer token from\n    *\n    * Send '_amount' token from address '_from' to address '_to'\n    *\n    * @param _from Address of sender.\n    * @param _to Address of recipient.\n    * @param _amount Amount of token to send.\n    * @return Whether the transfer was successful or not.\n    **/\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool _success) {\n        require(_amount <= allowances[_from][msg.sender]);\n        require(!tokenFrozen);\n        _transfer(_from, _to, _amount);\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_amount);\n        return true;\n    }\n\n    /**\n    * Mint Tokens\n    *\n    * Adds _amount of tokens to _atAddress\n    *\n    * @param _atAddress Adds tokens to address\n    * @param _amount Amount of tokens to add\n    **/\n    function mintTokens(address _atAddress, uint256 _amount) public {\n        require(allowedToMint[msg.sender]);\n        require(balances[_atAddress].add(_amount) > balances[_atAddress]);\n        require((supply.add(_amount)) <= 201225419354262000000000000);\n        supply = supply.add(_amount);\n        balances[_atAddress] = balances[_atAddress].add(_amount);\n        emit Mint(_atAddress, _amount);\n        emit Transfer(0x0, _atAddress, _amount);\n    }\n\n    /**\n    * Change freeze\n    *\n    * Changes status of frozen because of '_reason'\n    *\n    * @param _reason Reason for freezing or unfreezing token\n    **/\n    function changeFreezeTransaction(string _reason) public onlyOwner {\n        tokenFrozen = !tokenFrozen;\n        emit TokenFrozen(tokenFrozen, _reason);\n    }\n\n    /**\n    * Change mint address\n    *\n    *  Changes the address to mint\n    *\n    * @param _addressToMint Address of new minter\n    **/\n    function changeAllowanceToMint(address _addressToMint) public onlyOwner {\n        allowedToMint[_addressToMint] = !allowedToMint[_addressToMint];\n    }\n\n    /**\n    * Get allowance\n    *\n    * @return Return amount allowed to spend from '_owner' by '_spender'\n    **/\n    function allowance(address _owner, address _spender) public constant returns (uint256 _remaining) {\n        return allowances[_owner][_spender];\n    }\n\n    /**\n    * Total amount of token\n    *\n    * @return Total amount of token\n    **/\n    function totalSupply() public constant returns (uint256 _totalSupply) {\n        return supply;\n    }\n\n    /**\n    * Balance of address\n    *\n    * Check balance of '_owner'\n    *\n    * @param _owner Address\n    * @return Amount of token in possession\n    **/\n    function balanceOf(address _owner) public constant returns (uint256 _balance) {\n        return balances[_owner];\n    }\n\n    /**\n    * Address allowed to mint\n    *\n    * Checks if '_address' is allowed to mint\n    *\n    * @param _address Address\n    * @return Allowance to mint\n    **/\n    function isAllowedToMint(address _address) public constant returns (bool _allowed) {\n        return allowedToMint[_address];\n    }\n\n    /** Revert if someone sends ether to this contract **/\n    function () public {\n        revert();\n    }\n\n    /**\n    * This part is here only for testing and will not be included into final version\n    **/\n    /**\n    function killContract() onlyOwner{\n    selfdestruct(msg.sender);\n    }\n    **/\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAllowedToMint\",\"outputs\":[{\"name\":\"_allowed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"changeFreezeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToMint\",\"type\":\"address\"}],\"name\":\"changeAllowanceToMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_atAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_frozen\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"TokenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600d81526020017f547275737465646865616c746800000000000000000000000000000000000000815250600190805190602001906200005192919062000129565b506040805190810160405280600381526020017f5444480000000000000000000000000000000000000000000000000000000000815250600290805190602001906200009f92919062000129565b506012600360006101000a81548160ff021916908360ff1602179055503415620000c857600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360016101000a81548160ff021916908315150217905550620001d8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016c57805160ff19168380011785556200019d565b828001600101855582156200019d579182015b828111156200019c5782518255916020019190600101906200017f565b5b509050620001ac9190620001b0565b5090565b620001d591905b80821115620001d1576000816000905550600101620001b7565b5090565b90565b6113d080620001e86000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f6578063095ea7b31461018457806318160ddd146101de57806323b872dd14610207578063313ce567146102805780634813d8a6146102af57806370a082311461030057806374dfcabc1461034d5780638da5cb5b146103aa57806395d89b41146103ff578063a69eae7c1461048d578063a9059cbb146104c6578063afc361bc14610520578063dd62ed3e1461054d578063f0dda65c146105b9578063f2fde38b146105fb575b34156100f157600080fd5b600080fd5b341561010157600080fd5b610109610634565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014957808201518184015260208101905061012e565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018f57600080fd5b6101c4600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106d2565b604051808215151515815260200191505060405180910390f35b34156101e957600080fd5b6101f16107c4565b6040518082815260200191505060405180910390f35b341561021257600080fd5b610266600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107ce565b604051808215151515815260200191505060405180910390f35b341561028b57600080fd5b61029361099c565b604051808260ff1660ff16815260200191505060405180910390f35b34156102ba57600080fd5b6102e6600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506109af565b604051808215151515815260200191505060405180910390f35b341561030b57600080fd5b610337600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a05565b6040518082815260200191505060405180910390f35b341561035857600080fd5b6103a8600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610a4e565b005b34156103b557600080fd5b6103bd610b8a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561040a57600080fd5b610412610baf565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610452578082015181840152602081019050610437565b50505050905090810190601f16801561047f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049857600080fd5b6104c4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c4d565b005b34156104d157600080fd5b610506600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610d4c565b604051808215151515815260200191505060405180910390f35b341561052b57600080fd5b610533610d7f565b604051808215151515815260200191505060405180910390f35b341561055857600080fd5b6105a3600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d92565b6040518082815260200191505060405180910390f35b34156105c457600080fd5b6105f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e19565b005b341561060657600080fd5b610632600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061108f565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ca5780601f1061069f576101008083540402835291602001916106ca565b820191906000526020600020905b8154815290600101906020018083116106ad57829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600454905090565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561085b57600080fd5b600360019054906101000a900460ff1615151561087757600080fd5b61088284848461112a565b61091182600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136d90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190509392505050565b600360009054906101000a900460ff1681565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aa657fe5b600360019054906101000a900460ff1615600360016101000a81548160ff0219169083151502179055507f47c6ecc0250868e718dd5a39de5e4347d56c07cbf3f911ade8483435afc4076e600360019054906101000a900460ff1682604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b4c578082015181840152602081019050610b31565b50505050905090810190601f168015610b795780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c455780601f10610c1a57610100808354040283529160200191610c45565b820191906000526020600020905b815481529060010190602001808311610c2857829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ca557fe5b600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600360019054906101000a900460ff16151515610d6a57600080fd5b610d7533848461112a565b6001905092915050565b600360019054906101000a900460ff1681565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610e7157600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f0382600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461138690919063ffffffff16565b111515610f0f57600080fd5b6aa67323d75640f087b76000610f308260045461138690919063ffffffff16565b11151515610f3d57600080fd5b610f528160045461138690919063ffffffff16565b600481905550610faa81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461138690919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110e757fe5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008273ffffffffffffffffffffffffffffffffffffffff161415151561115057600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561118b57600080fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156111d957600080fd5b61122b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461138690919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112c081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461136d90919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600082821115151561137b57fe5b818303905092915050565b600080828401905083811015151561139a57fe5b80915050929150505600a165627a7a72305820885d1fe1379a8ab08a91ac981b4d38268156964cb735f1370ccc24941bd24bf80029"
}