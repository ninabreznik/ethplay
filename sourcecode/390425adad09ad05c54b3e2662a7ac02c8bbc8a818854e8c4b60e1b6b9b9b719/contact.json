{
  "address": "0xf7e13ba09219dba3666d997d34b9ad1e2f1fe9ac",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "StayBitContractFactory",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-02\n*/\n\npragma solidity ^0.4.15;\n\n\n\n\n\n\n\nlibrary DateTime {\n        /*\n         *  Date and Time utilities for ethereum contracts\n         *\n         */\n        struct _DateTime {\n                uint16 year;\n                uint8 month;\n                uint8 day;\n                uint8 hour;\n                uint8 minute;\n                uint8 second;\n                uint8 weekday;\n        }\n\n        uint private constant DAY_IN_SECONDS = 86400;\n        uint private constant YEAR_IN_SECONDS = 31536000;\n        uint private constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n        uint private constant HOUR_IN_SECONDS = 3600;\n        uint private constant MINUTE_IN_SECONDS = 60;\n\n        uint16 private constant ORIGIN_YEAR = 1970;\n\n        function isLeapYear(uint16 year) public constant returns (bool) {\n                if (year % 4 != 0) {\n                        return false;\n                }\n                if (year % 100 != 0) {\n                        return true;\n                }\n                if (year % 400 != 0) {\n                        return false;\n                }\n                return true;\n        }\n\n        function leapYearsBefore(uint year) public constant  returns (uint) {\n                year -= 1;\n                return year / 4 - year / 100 + year / 400;\n        }\n\n        function getDaysInMonth(uint8 month, uint16 year) public constant  returns (uint8) {\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                        return 31;\n                }\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                        return 30;\n                }\n                else if (isLeapYear(year)) {\n                        return 29;\n                }\n                else {\n                        return 28;\n                }\n        }\n\n        function parseTimestamp(uint timestamp) internal constant returns (_DateTime dt) {\n                uint secondsAccountedFor = 0;\n                uint buf;\n                uint8 i;\n\n                // Year\n                dt.year = getYear(timestamp);\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n                // Month\n                uint secondsInMonth;\n                for (i = 1; i <= 12; i++) {\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n                                dt.month = i;\n                                break;\n                        }\n                        secondsAccountedFor += secondsInMonth;\n                }\n\n                // Day\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                                dt.day = i;\n                                break;\n                        }\n                        secondsAccountedFor += DAY_IN_SECONDS;\n                }\n\n                // Hour\n                dt.hour = getHour(timestamp);\n\n                // Minute\n                dt.minute = getMinute(timestamp);\n\n                // Second\n                dt.second = getSecond(timestamp);\n\n                // Day of week.\n                dt.weekday = getWeekday(timestamp);\n        }\n\n        function getYear(uint timestamp) public constant returns (uint16) {\n                uint secondsAccountedFor = 0;\n                uint16 year;\n                uint numLeapYears;\n\n                // Year\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n                while (secondsAccountedFor > timestamp) {\n                        if (isLeapYear(uint16(year - 1))) {\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\n                        }\n                        year -= 1;\n                }\n                return year;\n        }\n\n        function getMonth(uint timestamp) public constant returns (uint8) {\n                return parseTimestamp(timestamp).month;\n        }\n\n        function getDay(uint timestamp) public constant returns (uint8) {\n                return parseTimestamp(timestamp).day;\n        }\n\n        function getHour(uint timestamp) public constant returns (uint8) {\n                return uint8((timestamp / 60 / 60) % 24);\n        }\n\n        function getMinute(uint timestamp) public constant returns (uint8) {\n                return uint8((timestamp / 60) % 60);\n        }\n\n        function getSecond(uint timestamp) public constant returns (uint8) {\n                return uint8(timestamp % 60);\n        }\n\n        function getWeekday(uint timestamp) public constant returns (uint8) {\n                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day) public constant returns (uint timestamp) {\n                return toTimestamp(year, month, day, 0, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public constant returns (uint timestamp) {\n                return toTimestamp(year, month, day, hour, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public constant returns (uint timestamp) {\n                return toTimestamp(year, month, day, hour, minute, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public constant returns (uint timestamp) {\n                uint16 i;\n\n                // Year\n                for (i = ORIGIN_YEAR; i < year; i++) {\n                        if (isLeapYear(i)) {\n                                timestamp += LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                timestamp += YEAR_IN_SECONDS;\n                        }\n                }\n\n                // Month\n                uint8[12] memory monthDayCounts;\n                monthDayCounts[0] = 31;\n                if (isLeapYear(year)) {\n                        monthDayCounts[1] = 29;\n                }\n                else {\n                        monthDayCounts[1] = 28;\n                }\n                monthDayCounts[2] = 31;\n                monthDayCounts[3] = 30;\n                monthDayCounts[4] = 31;\n                monthDayCounts[5] = 30;\n                monthDayCounts[6] = 31;\n                monthDayCounts[7] = 31;\n                monthDayCounts[8] = 30;\n                monthDayCounts[9] = 31;\n                monthDayCounts[10] = 30;\n                monthDayCounts[11] = 31;\n\n                for (i = 1; i < month; i++) {\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n                }\n\n                // Day\n                timestamp += DAY_IN_SECONDS * (day - 1);\n\n                // Hour\n                timestamp += HOUR_IN_SECONDS * (hour);\n\n                // Minute\n                timestamp += MINUTE_IN_SECONDS * (minute);\n\n                // Second\n                timestamp += second;\n\n                return timestamp;\n        }\n\n\t\t// -1 t1 < t2\n\t\t// 0  t1 == t2\n\t\t// 1  t1 > t2\n\t\tfunction compareDatesWithoutTime(uint t1, uint t2) public constant returns (int res)\n\t\t{\n\t\t\t_DateTime memory dt1 = parseTimestamp(t1);\n\t\t\t_DateTime memory dt2 = parseTimestamp(t2);\n\n\t\t\tres = compareInts(dt1.year, dt2.year);\n\t\t\tif (res == 0)\n\t\t\t{\n\t\t\t\tres = compareInts(dt1.month, dt2.month);\n\t\t\t\tif (res == 0)\n\t\t\t\t{\n\t\t\t\t\tres = compareInts(dt1.day, dt2.day);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t//  t2 -> MoveIn or MoveOut day in GMT, will be counted as beginning of a day\n\t\t//  t1 -> Current System DateTime\n\t\t// -1 t1 before t2\n\t\t//--------------------------------\n\t\t// 0  t1 same day as t2\n\t\t// 1  t1 after t2\n\t\tfunction compareDateTimesForContract(uint t1, uint t2) public constant returns (int res)\n\t\t{\n\t\t    uint endOfDay = t2 + (60 * 60 * 24);\n\t\t    res = 0;\n\t\t    \n\t\t    if (t2 <= t1 && t1 <= endOfDay)\n\t\t    {\n\t\t        res = 0;\n\t\t    }\n\t\t    else if (t2 > t1)\n\t\t    {\n\t\t        res = -1;\n\t\t    }\n\t\t    else if (t1 > endOfDay)\n\t\t    {\n\t\t        res = 1;\n\t\t    }\n\t\t}\t\n\n\n\t\t// -1 n1 < n2\n\t\t// 0  n1 == n2\n\t\t// 1  n1 > n2\n\t\tfunction compareInts(int n1, int n2) internal constant returns (int res)\n\t\t{\n\t\t\tif (n1 == n2)\n\t\t\t{\n\t\t\t\tres = 0;\n\t\t\t}\n\t\t\telse if (n1 < n2)\n\t\t\t{\n\t\t\t\tres = -1;\n\t\t\t}\n\t\t\telse if (n1 > n2)\n\t\t\t{\n\t\t\t\tres = 1;\n\t\t\t}\n\t\t}\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\nlibrary BaseEscrowLib\n{\n    struct EscrowContractState { \n\t\tuint _CurrentDate;\n\t\tuint _CreatedDate;\n\t\tint _RentPerDay;\n\t\tuint _MoveInDate;\n\t\tuint _MoveOutDate;\t\t\t\t\n\t\tint _TotalAmount;\t\t\t\t\t\n\t\tint _SecDeposit;\n\t\tint _State;\t\n\t\tuint _ActualMoveInDate;\n\t\tuint _ActualMoveOutDate;\n\t\taddress _landlord;\n\t\taddress _tenant;\n\t\tbool _TenantConfirmedMoveIn;\t\t\n\t\tbool _MisrepSignaled;\t\t\t\n\t\tstring _DoorLockData;\n\t\taddress _ContractAddress;\t\t\n\t\tERC20Interface _tokenApi;\n\t\tint _landlBal;\n\t\tint _tenantBal;\n\t\tint _Id;\n\t\tint _CancelPolicy;\n\t\tuint _Balance;\n\t\tstring _Guid;\n    }\n\n    //Define public constants\n\t//Pre-Move In\n\tint internal constant ContractStateActive = 1;\n\tint internal constant ContractStateCancelledByTenant = 2;\n\tint internal constant ContractStateCancelledByLandlord = 3;\n\n\t//Move-In\n\tint internal constant ContractStateTerminatedMisrep = 4;\n\n\t//Living\n\tint internal constant ContractStateEarlyTerminatedByTenant = 5;\n\tint internal constant ContractStateEarlyTerminatedByTenantSecDep = 6;\n\tint internal constant ContractStateEarlyTerminatedByLandlord = 7;\t\t\n\n\t//Move-Out\n\tint internal constant ContractStateTerminatedOK = 8;\t\n\tint internal constant ContractStateTerminatedSecDep = 9;\n\t\n\t//Stages\n\tint internal constant ContractStagePreMoveIn = 0;\n\tint internal constant ContractStageLiving = 1;\n\tint internal constant ContractStageTermination = 2;\n\n\t//Action\n\tint internal constant ActionKeyTerminate = 0;\n\tint internal constant ActionKeyMoveIn = 1;\t\n\tint internal constant ActionKeyTerminateMisrep = 2;\t\n\tint internal constant ActionKeyPropOk = 3;\n\tint internal constant ActionKeyClaimDeposit = 4;\n\n\t//Log\n\tint internal constant LogMessageInfo = 0;\n\tint internal constant LogMessageWarning = 1;\n\tint internal constant LogMessageError = 2;\n\n\tevent logEvent(int stage, int atype, uint timestamp, string guid, string text);\n\n\n\t//DEBUG or TESTNET\n\t//bool private constant EnableSimulatedCurrentDate = true;\n\n\t//RELEASE\n\tbool private constant EnableSimulatedCurrentDate = false;\n\n\n\t//LogEvent wrapper\n\tfunction ContractLogEvent(int stage, int atype, uint timestamp, string guid, string text) public\n\t{\n\t\tlogEvent(stage, atype, timestamp, guid, text);\n\t}\n\n\t//Constant function wrappers\n\tfunction GetContractStateActive() public constant returns (int)\n\t{\n\t\treturn ContractStateActive;\n\t}\n\n\tfunction GetContractStateCancelledByTenant() public constant returns (int)\n\t{\n\t\treturn ContractStateCancelledByTenant;\n\t}\n\n\tfunction GetContractStateCancelledByLandlord() public constant returns (int)\n\t{\n\t\treturn ContractStateCancelledByLandlord;\n\t}\n\t\n\tfunction GetContractStateTerminatedMisrep() public constant returns (int)\n\t{\n\t\treturn ContractStateTerminatedMisrep;\n\t}\n\n\tfunction GetContractStateEarlyTerminatedByTenant() public constant returns (int)\n\t{\n\t\treturn ContractStateEarlyTerminatedByTenant;\n\t}\n\n\tfunction GetContractStateEarlyTerminatedByTenantSecDep() public constant returns (int)\n\t{\n\t\treturn ContractStateEarlyTerminatedByTenantSecDep;\n\t}\n\n\tfunction GetContractStateEarlyTerminatedByLandlord() public constant returns (int)\n\t{\n\t\treturn ContractStateEarlyTerminatedByLandlord;\t\t\n\t}\n\n\tfunction GetContractStateTerminatedOK() public constant returns (int)\n\t{\n\t\treturn ContractStateTerminatedOK;\t\n\t}\n\n\tfunction GetContractStateTerminatedSecDep() public constant returns (int)\n\t{\n\t\treturn ContractStateTerminatedSecDep;\n\t}\n\t\n\tfunction GetContractStagePreMoveIn() public constant returns (int)\n\t{\n\t\treturn ContractStagePreMoveIn;\n\t}\n\n\tfunction GetContractStageLiving() public constant returns (int)\n\t{\n\t\treturn ContractStageLiving;\n\t}\n\n\tfunction GetContractStageTermination() public constant returns (int)\n\t{\n\t\treturn ContractStageTermination;\n\t}\n\t\n\tfunction GetLogMessageInfo() public constant returns (int)\n\t{\n\t\treturn LogMessageInfo;\n\t}\n\n\tfunction GetLogMessageWarning() public constant returns (int)\n\t{\n\t\treturn LogMessageWarning;\n\t}\n\n\tfunction GetLogMessageError() public constant returns (int)\n\t{\n\t\treturn LogMessageError;\n\t}\n\n\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tfunction initialize(EscrowContractState storage self) {\n\n\t\t//Check parameters\n\t\t//all dates must be in the future\n\n\t\trequire(self._CurrentDate < self._MoveInDate);\n\t\trequire(self._MoveInDate < self._MoveOutDate);\n\t\t\t\t\t\t\t\n\t\tint nPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\n\t\tint nPotentialBillableAmount = nPotentialBillableDays * (self._RentPerDay);\n\t\t\n\t\t//Limit 2 months stay\n\t\trequire (nPotentialBillableDays <= 60); \n\n\t\tself._TotalAmount = nPotentialBillableAmount + self._SecDeposit;\n\t\t\t\t\n\t\t//Sec Deposit should not be more than 30 perecent\n\t\trequire (self._SecDeposit / nPotentialBillableAmount * 100 <= 30);\n\t\t\t\t\n\n\t\tself._TenantConfirmedMoveIn = false;\n\t\tself._MisrepSignaled = false;\n\t\tself._State = GetContractStateActive();\n\t\tself._ActualMoveInDate = 0;\n\t\tself._ActualMoveOutDate = 0;\n\t\tself._landlBal = 0;\n\t\tself._tenantBal = 0;\n\t}\n\n\n\tfunction TerminateContract(EscrowContractState storage self, int tenantBal, int landlBal, int state) public\n\t{\n\t\tint stage = GetCurrentStage(self);\n\t\tuint nCurrentDate = GetCurrentDate(self);\n\t\tint nActualBalance = int(GetContractBalance(self));\n\n\t\tif (nActualBalance == 0)\n\t\t{\n\t\t    //If it was unfunded, just change state\n\t\t    self._State = state;   \n\t\t}\n\t\telse if (self._State == ContractStateActive && state != ContractStateActive)\n\t\t{\n\t\t\t//Check if some balances are negative\n\t\t\tif (landlBal < 0)\n\t\t\t{\n\t\t\t\ttenantBal += landlBal;\n\t\t\t\tlandlBal = 0;\n\t\t\t}\n\n\t\t\tif (tenantBal < 0) {\n\t\t\t\tlandlBal += tenantBal;\n\t\t\t\ttenantBal = 0;\n\t\t\t}\n\n\t\t\t//Check if balances exceed total amount\n\t\t\tif ((landlBal + tenantBal) > nActualBalance)\n\t\t\t{\n\t\t\t\tvar nOverrun = (landlBal + tenantBal) - self._TotalAmount;\n\t\t\t\tlandlBal -= (nOverrun / 2);\n\t\t\t\ttenantBal -= (nOverrun / 2);\n\t\t\t}\n\n\t\t\tself._State = state;\n\n\t\t\tstring memory strState = \"\";\n\n\t\t\tif (state == ContractStateTerminatedOK)\n\t\t\t{\n\t\t\t\tstrState = \" State is: OK\";\n\t\t\t}\n\t\t\telse if (state == ContractStateEarlyTerminatedByTenant)\n\t\t\t{\n\t\t\t\tstrState = \" State is: Early terminated by tenant\";\n\t\t\t}\n\t\t\telse if (state == ContractStateEarlyTerminatedByTenantSecDep)\n\t\t\t{\n\t\t\t\tstrState = \" State is: Early terminated by tenant, Security Deposit claimed\";\n\t\t\t}\n\t\t\telse if (state == ContractStateEarlyTerminatedByLandlord)\n\t\t\t{\n\t\t\t\tstrState = \" State is: Early terminated by landlord\";\n\t\t\t}\n\t\t\telse if (state == ContractStateCancelledByTenant)\n\t\t\t{\n\t\t\t\tstrState = \" State is: Cancelled by tenant\";\n\t\t\t}\n\t\t\telse if (state == ContractStateCancelledByLandlord)\n\t\t\t{\n\t\t\t\tstrState = \" State is: Cancelled by landlord\";\n\t\t\t}\n\t\t\telse if (state == ContractStateTerminatedSecDep)\n\t\t\t{\n\t\t\t\tstrState = \" State is: Security Deposit claimed\";\n\t\t\t}\n\t\t\n\t\t\t\n\t\t\t\n\t\t\tbytes32 b1;\n\t\t\tbytes32 b2;\n\t\t\tb1 = uintToBytes(uint(landlBal));\n\t\t\tb2 = uintToBytes(uint(tenantBal));\n\n                        /*\n\t\t    string memory s1;\n\t\t    string memory s2;\t\n\t\t    s1 = bytes32ToString(b1);\n\t\t    s2 = bytes32ToString(b2);\n                        */\n\t\t\t\n\t\t\tstring memory strMessage = strConcat(\n\t\t\t    \"Contract is termintaing. Landlord balance is _$b_\", \n\t\t\t    bytes32ToString(b1), \n\t\t\t    \"_$e_, Tenant balance is _$b_\", \n\t\t\t    bytes32ToString(b2));\n\n            \n\t\t\tstring memory strMessage2 = strConcat(\n\t\t\t\tstrMessage,\n\t\t\t\t\"_$e_.\",\n\t\t\t\tstrState\n\t\t\t);\n\n            string memory sGuid;\n            sGuid = self._Guid;\n\t\t\t\n            logEvent(stage, LogMessageInfo, nCurrentDate, sGuid, strMessage2);\n            \n\t\t\t//Send tokens\n\t\t\tself._landlBal = landlBal;\n\t\t\tself._tenantBal = tenantBal;\n\t\t}\t\n\t}\n\n\tfunction GetCurrentStage(EscrowContractState storage self) public constant returns (int stage)\n\t{\n\t\tuint nCurrentDate = GetCurrentDate(self);\n\t\tuint nActualBalance = GetContractBalance(self);\n        \n        stage = ContractStagePreMoveIn;\n        \n\t\tif (self._State == ContractStateActive && uint(self._TotalAmount) > nActualBalance)\n\t\t{\n\t\t\t//Contract unfunded\n\t\t\tstage = ContractStagePreMoveIn;\n\t\t}\t\t\n\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) < 0)\n\t\t{\n\t\t\tstage = ContractStagePreMoveIn;\n\t\t}\n\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) >= 0 && \n\t\t         DateTime.compareDateTimesForContract(nCurrentDate, self._MoveOutDate) < 0 && \n\t\t         self._TenantConfirmedMoveIn)\n\t\t{\n\t\t\tstage = ContractStageLiving;\n\t\t}\n\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveOutDate) >= 0)\n\t\t{\n\t\t\tstage = ContractStageTermination;\n\t\t}\t\n\t}\n\n\n\n\t///Helper functions\n\tfunction SimulateCurrentDate(EscrowContractState storage self, uint n) public\n\t{\n\t\tif (EnableSimulatedCurrentDate)\n\t\t{\n\t\t\tself._CurrentDate = n;\n\t\t\t//int stage = GetCurrentStage(self);\n\t\t\t//logEvent(stage, LogMessageInfo, self._CurrentDate, \"SimulateCurrentDate was called.\");\t\n\t\t}\n\t}\n\t\n\t\n\t\n\tfunction GetCurrentDate(EscrowContractState storage self) public constant returns (uint nCurrentDate)\n\t{\n\t\tif (EnableSimulatedCurrentDate)\n\t\t{\n\t\t\tnCurrentDate = self._CurrentDate;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnCurrentDate = now;\n\t\t}\t\n\t}\n\n\tfunction GetContractBalance(EscrowContractState storage self) public returns (uint res)\n\t{\n\t    res = self._Balance;\n\t}\n\n\n\tfunction splitBalanceAccordingToRatings(int balance, int tenantScore, int landlScore) public constant returns (int tenantBal, int landlBal)\n\t{\n\t\tif (tenantScore == landlScore) {\n\t\t\t//Just split in two \n\t\t\ttenantBal = balance / 2;\n\t\t\tlandlBal = balance / 2;\n\t\t}\n\t\telse if (tenantScore == 0)\n\t\t{\n\t\t\ttenantBal = 0;\n\t\t\tlandlBal = balance;\t\t\t\n\t\t}\n\t\telse if (landlScore == 0) {\n\t\t\ttenantBal = balance;\n\t\t\tlandlBal = 0;\n\t\t}\n\t\telse if (tenantScore > landlScore) {\t\t\t\n\t\t\tlandlBal = ((landlScore * balance / 2) / tenantScore);\n\t\t\ttenantBal = balance - landlBal;\t\t\t\n\t\t}\n\t\telse if (tenantScore < landlScore) {\t\t\t\n\t\t\ttenantBal = ((tenantScore * balance / 2) / landlScore);\n\t\t\tlandlBal = balance - tenantBal;\t\t\t\n\t\t}\t\t\n\t}\n\n\tfunction formatDate(uint dt) public constant returns (string strDate)\n\t{\n\t\tbytes32 b1;\n\t\tbytes32 b2;\n\t\tbytes32 b3;\n\t\tb1 = uintToBytes(uint(DateTime.getMonth(dt)));\n\t\tb2 = uintToBytes(uint(DateTime.getDay(dt)));\n\t\tb3 = uintToBytes(uint(DateTime.getYear(dt)));\n\t\tstring memory s1;\n\t\tstring memory s2;\t\n\t\tstring memory s3;\n\t\ts1 = bytes32ToString(b1);\n\t\ts2 = bytes32ToString(b2);\n\t\ts3 = bytes32ToString(b3);\n\t\t\n\t\tstring memory strDate1 = strConcat(s1, \"/\", s2, \"/\");\n\t\tstrDate = strConcat(strDate1, s3);\t\t\t\n\t}\n\t\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal constant returns (string){\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n    \n    function strConcat(string _a, string _b, string _c, string _d) internal constant returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n    \n    function strConcat(string _a, string _b, string _c) internal constant returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n    \n    function strConcat(string _a, string _b) internal constant returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    } \n    \n    function bytes32ToString(bytes32 x) internal constant returns (string) {\n        bytes memory bytesString = new bytes(32);\n        uint charCount = 0;\n        for (uint j = 0; j < 32; j++) {\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n            if (char != 0) {\n                bytesString[charCount] = char;\n                charCount++;\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (j = 0; j < charCount; j++) {\n            bytesStringTrimmed[j] = bytesString[j];\n        }\n        return string(bytesStringTrimmed);\n    }\n\n    function bytes32ArrayToString(bytes32[] data) internal constant returns (string) {\n        bytes memory bytesString = new bytes(data.length * 32);\n        uint urlLength;\n        for (uint i=0; i<data.length; i++) {\n            for (uint j=0; j<32; j++) {\n                byte char = byte(bytes32(uint(data[i]) * 2 ** (8 * j)));\n                if (char != 0) {\n                    bytesString[urlLength] = char;\n                    urlLength += 1;\n                }\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(urlLength);\n        for (i=0; i<urlLength; i++) {\n            bytesStringTrimmed[i] = bytesString[i];\n        }\n        return string(bytesStringTrimmed);\n    }  \n    \n    \n    function uintToBytes(uint v) internal constant returns (bytes32 ret) {\n        if (v == 0) {\n            ret = '0';\n        }\n        else {\n            while (v > 0) {\n                ret = bytes32(uint(ret) / (2 ** 8));\n                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\n                v /= 10;\n            }\n        }\n        return ret;\n    }\n\n    /// @dev Converts a numeric string to it's unsigned integer representation.\n    /// @param v The string to be converted.\n    function bytesToUInt(bytes32 v) internal constant returns (uint ret) {\n        if (v == 0x0) {\n            throw;\n        }\n\n        uint digit;\n\n        for (uint i = 0; i < 32; i++) {\n            digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\n            if (digit == 0) {\n                break;\n            }\n            else if (digit < 48 || digit > 57) {\n                throw;\n            }\n            ret *= 10;\n            ret += (digit - 48);\n        }\n        return ret;\n    }    \n\n\n}\n\n\nlibrary FlexibleEscrowLib\n{\n\tusing BaseEscrowLib for BaseEscrowLib.EscrowContractState;\n\n    //Cancel days\n\tint internal constant FreeCancelBeforeMoveInDays = 14;\n\n\t//Expiration\n\tint internal constant ExpireAfterMoveOutDays = 14;\n\t\t    \n\n    \n\tfunction TenantTerminate(BaseEscrowLib.EscrowContractState storage self) public\n    {\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n\t\tint tenantBal = 0;\n\t\tint landlBal = 0;\n\t\tint state = 0; \n\t\tbool bProcessed = false;\n        string memory sGuid;\n        sGuid = self._Guid;\n\n\t\tif (nActualBalance == 0)\n\t\t{\n\t\t\t//If contract is unfunded, just cancel it\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\n\t\t\tbProcessed = true;\t\t\t\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn())\n\t\t{\t\t\t\n\t\t\tint nDaysBeforeMoveIn = (int)(self._MoveInDate - nCurrentDate) / (60 * 60 * 24);\n\t\t\tif (nDaysBeforeMoveIn < FreeCancelBeforeMoveInDays)\n\t\t\t{\n\t\t\t\t//Pay cancel fee\n\t\t\t\t//Contract must be fully funded\n\t\t\t\trequire(self._RentPerDay <= nActualBalance);\n\n\t\t\t\t//Cancellation fee is one day rent\n\t\t\t\ttenantBal = nActualBalance - self._RentPerDay;\n\t\t\t\tlandlBal = self._RentPerDay;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\n\t\t\t\tbProcessed = true;\n\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow. Cancellation fee will be withheld from tenant.\");\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//No cancel fee\n\t\t\t\ttenantBal = nActualBalance;\n\t\t\t\tlandlBal = 0;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\n\t\t\t\tbProcessed = true;\n\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow.\");\n\t\t\t}\t\t\t\t\t\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageLiving())\n\t\t{\n\t\t\tstate = 0;\n\t\t\tself._ActualMoveOutDate = nCurrentDate;\n\t\t\tbProcessed = true;\n\t\t\t//In this case landlord will close escrow\n\n\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant signaled early move-out\");\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageTermination())\n\t\t{\n\t\t\t//If landlord did not close the escrow, and if it is expired, tenant may only pay for rent without sec deposit\n\t\t\tint nDaysAfterMoveOut = (int)(nCurrentDate - self._MoveOutDate) / (60 * 60 * 24);\n\n\t\t\tif (nDaysAfterMoveOut > ExpireAfterMoveOutDays)\n\t\t\t{\n\t\t\t\tint nPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\n\t\t\t\trequire(self._RentPerDay * nPotentialBillableDays <= nActualBalance);\n\n\t\t\t\tlandlBal = self._RentPerDay * nPotentialBillableDays;\n\t\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\t\tbProcessed = true;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\n\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant closed escrow because it was expired\");\n\t\t\t}\n\t\t}\n\n\t\trequire(bProcessed);\n\t\tif (state > 0)\n\t\t{\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\n\t\t}\n\n    }\n    \n    function TenantMoveIn(BaseEscrowLib.EscrowContractState storage self) public\n    {\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n\t\tstring memory sGuid;\n        sGuid = self._Guid;\n\t\t\t\t\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= self._TotalAmount && \n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) >= 0);\n\n        BaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant signaled move-in\");\n\n\t\tself._TenantConfirmedMoveIn = true;\n    } \n\t       \n    function TenantTerminateMisrep(BaseEscrowLib.EscrowContractState storage self) public\n    {\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n\t\tint tenantBal = 0;\n\t\tint landlBal = 0;\n        string memory sGuid;\n        sGuid = self._Guid;\n\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= self._RentPerDay && \n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) == 0);\n\n\t\t(tenantBal, landlBal) = BaseEscrowLib.splitBalanceAccordingToRatings(self._RentPerDay,0,0);\n\t\t\t\t\t\n\t\ttenantBal = nActualBalance - landlBal;\n\t\t\n\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant signaled misrepresentation and terminated escrow!\");\n\t\tself._MisrepSignaled = true;\n\n\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,BaseEscrowLib.GetContractStateTerminatedMisrep());\t         \n    }    \n\t\n\tfunction LandlordTerminate(BaseEscrowLib.EscrowContractState storage self, uint SecDeposit) public\n\t{\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n\t\tint tenantBal = 0;\n\t\tint landlBal = 0;\n\t\tint state = 0; \n\t\tbool bProcessed = false;\n\t\tint nPotentialBillableDays = 0;\n        string memory sGuid;\n        sGuid = self._Guid;\n\n\t\tif (nActualBalance == 0)\n\t\t{\n\t\t\t//If contract is unfunded, just cancel it\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\n\t\t\tbProcessed = true;\t\t\t\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn())\n\t\t{\t\n\t\t\tif (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) > 0 && \n\t\t\t\t!self._TenantConfirmedMoveIn)\n\t\t\t{\n\t\t\t\t//Landlord gets cancell fee if tenant did not signal anything after move in date\n\t\t\t\ttenantBal = nActualBalance - self._RentPerDay;\t\n\t\t\t\tlandlBal = self._RentPerDay;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\n\t\t\t\tbProcessed = true;\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Landlord cancelled escrow. Tenant did not show up and will pay cancellation fee.\");\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\t\t        \t\t\t\t\n\t\t\t\t//No cancel fee\n\t\t\t\ttenantBal = nActualBalance;\n\t\t\t\tlandlBal = 0;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\n\t\t\t\tbProcessed = true;\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord cancelled esqrow\");\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageLiving())\n\t\t{\n\t\t\tnPotentialBillableDays = (int)(nCurrentDate - self._MoveInDate) / (60 * 60 * 24);\n\t\t\t\n\t\t\tif (self._ActualMoveOutDate == 0)\n\t\t\t{\n\t\t\t\t//If landlord initiates it, he cannot claim sec deposit\n\t\t\t\trequire(nActualBalance >= nPotentialBillableDays * self._RentPerDay);\n\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByLandlord();\n\t\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay;\n\t\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\t\tbProcessed = true;\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled early move-out\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\t//If tenant initiates it, landlord can claim sec deposit, and tenant pays for one extra day\n\t\t\t\trequire(int(SecDeposit) <= self._SecDeposit && nActualBalance >= (nPotentialBillableDays + 1) * self._RentPerDay + int(SecDeposit));\n\t\t\t\t\n\t\t\t\tif (SecDeposit == 0)\n\t\t\t\t{\n\t\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByTenant();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled Security Deposit\");\n\t\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByTenantSecDep();\n\t\t\t\t}\n\n\t\t\t\tlandlBal = (nPotentialBillableDays + 1) * self._RentPerDay + int(SecDeposit);\n\t\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\t\tbProcessed = true;\n\t\t\t}\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageTermination())\n\t\t{\n\t\t\tnPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\n\t\t\trequire(int(SecDeposit) <= self._SecDeposit && nActualBalance >= nPotentialBillableDays * self._RentPerDay + int(SecDeposit));\n\t\t\tif (SecDeposit == 0)\n\t\t\t{\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled Security Deposit\");\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedSecDep();\n\t\t\t}\n\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay + int(SecDeposit);\n\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\tbProcessed = true;\n\t\t}\n\n\t\trequire(bProcessed);\n\t\tif (state > 0)\n\t\t{\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\n\t\t}\t\n\t}\n}\n\nlibrary ModerateEscrowLib\n{\n\tusing BaseEscrowLib for BaseEscrowLib.EscrowContractState;\n\n    //Cancel days\n\tint internal constant FreeCancelBeforeMoveInDays = 30;\n\n\t//Expiration\n\tint internal constant ExpireAfterMoveOutDays = 14;\n\t\t    \n    \n\tfunction TenantTerminate(BaseEscrowLib.EscrowContractState storage self) public\n    {\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n\t\tint tenantBal = 0;\n\t\tint landlBal = 0;\n\t\tint state = 0; \n\t\tbool bProcessed = false;\n        string memory sGuid;\n        sGuid = self._Guid;\n\n\t\tif (nActualBalance == 0)\n\t\t{\n\t\t\t//If contract is unfunded, just cancel it\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\n\t\t\tbProcessed = true;\t\t\t\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn())\n\t\t{\t\t\t\n\t\t\tint nDaysBeforeMoveIn = (int)(self._MoveInDate - nCurrentDate) / (60 * 60 * 24);\n\t\t\tif (nDaysBeforeMoveIn < FreeCancelBeforeMoveInDays)\n\t\t\t{\n\t\t\t\t//Pay cancel fee\n\t\t\t\t//Contract must be fully funded\n\n\t\t\t\tint cancelFee = (self._TotalAmount - self._SecDeposit) / 2;\n\n\t\t\t\trequire(cancelFee <= nActualBalance);\n\n\t\t\t\t//Cancellation fee is half of the rent to pay\n\t\t\t\ttenantBal = nActualBalance - cancelFee;\n\t\t\t\tlandlBal = cancelFee;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\n\t\t\t\tbProcessed = true;\n\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow. Cancellation fee will be withheld from tenant.\");\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//No cancel fee\n\t\t\t\ttenantBal = nActualBalance;\n\t\t\t\tlandlBal = 0;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\n\t\t\t\tbProcessed = true;\n\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow.\");\n\t\t\t}\t\t\t\t\t\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageLiving())\n\t\t{\n\t\t\tstate = 0;\n\t\t\tself._ActualMoveOutDate = nCurrentDate;\n\t\t\tbProcessed = true;\n\t\t\t//In this case landlord will close escrow\n\n\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant signaled early move-out\");\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageTermination())\n\t\t{\n\t\t\t//If landlord did not close the escrow, and if it is expired, tenant may only pay for rent without sec deposit\n\t\t\tint nDaysAfterMoveOut = (int)(nCurrentDate - self._MoveOutDate) / (60 * 60 * 24);\n\n\t\t\tif (nDaysAfterMoveOut > ExpireAfterMoveOutDays)\n\t\t\t{\n\t\t\t\tint nPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\n\t\t\t\trequire(self._RentPerDay * nPotentialBillableDays <= nActualBalance);\n\n\t\t\t\tlandlBal = self._RentPerDay * nPotentialBillableDays;\n\t\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\t\tbProcessed = true;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\n\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant closed escrow because it was expired\");\n\t\t\t}\n\t\t}\n\n\t\trequire(bProcessed);\n\t\tif (state > 0)\n\t\t{\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\n\t\t}\n\n    }\n    \n    function TenantMoveIn(BaseEscrowLib.EscrowContractState storage self) public\n    {\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n        string memory sGuid;\n        sGuid = self._Guid;\n\t\t\t\t\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= self._TotalAmount && \n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) >= 0);\n\n        BaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant signaled move-in\");\n\n\t\tself._TenantConfirmedMoveIn = true;\n    } \n\t       \n    function TenantTerminateMisrep(BaseEscrowLib.EscrowContractState storage self) public\n    {\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n\t\tint tenantBal = 0;\n\t\tint landlBal = 0;\n\t\tint cancelFee = (self._TotalAmount - self._SecDeposit) / 2;\n        string memory sGuid;\n        sGuid = self._Guid;\n\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= cancelFee && \n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) == 0);\n\n\t\t(tenantBal, landlBal) = BaseEscrowLib.splitBalanceAccordingToRatings(cancelFee,0,0);\n\t\t\t\t\t\n\t\ttenantBal = nActualBalance - landlBal;\n\t\t\n\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant signaled misrepresentation and terminated escrow!\");\n\t\tself._MisrepSignaled = true;\n\n\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,BaseEscrowLib.GetContractStateTerminatedMisrep());\t         \n    }    \n\t\n\tfunction LandlordTerminate(BaseEscrowLib.EscrowContractState storage self, uint SecDeposit) public\n\t{\n\t\t//int nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n\t\tint tenantBal = 0;\n\t\tint landlBal = 0;\n\t\tint state = 0; \n\t\tbool bProcessed = false;\n\t\tint nPotentialBillableDays = 0;\n\t\tint cancelFee = (self._TotalAmount - self._SecDeposit) / 2;\n        string memory sGuid;\n        sGuid = self._Guid;\n\n\t\tif (nActualBalance == 0)\n\t\t{\n\t\t\t//If contract is unfunded, just cancel it\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\n\t\t\tbProcessed = true;\t\t\t\n\t\t}\n\t\telse if (BaseEscrowLib.GetCurrentStage(self) == BaseEscrowLib.GetContractStagePreMoveIn())\n\t\t{\t\n\t\t\tif (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) > 0 && \n\t\t\t\t!self._TenantConfirmedMoveIn)\n\t\t\t{\n\t\t\t\t//Landlord gets cancell fee if tenant did not signal anything after move in date\n\t\t\t\ttenantBal = nActualBalance - cancelFee;\t\n\t\t\t\tlandlBal = cancelFee;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\n\t\t\t\tbProcessed = true;\n\t\t\t\tBaseEscrowLib.ContractLogEvent(BaseEscrowLib.GetCurrentStage(self), BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Landlord cancelled escrow. Tenant did not show up and will pay cancellation fee.\");\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\t\t        \t\t\t\t\n\t\t\t\t//No cancel fee\n\t\t\t\ttenantBal = nActualBalance;\n\t\t\t\tlandlBal = 0;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\n\t\t\t\tbProcessed = true;\n\t\t\t\tBaseEscrowLib.ContractLogEvent(BaseEscrowLib.GetCurrentStage(self), BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord cancelled esqrow\");\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse if (BaseEscrowLib.GetCurrentStage(self) == BaseEscrowLib.GetContractStageLiving())\n\t\t{\n\t\t\tnPotentialBillableDays = (int)(nCurrentDate - self._MoveInDate) / (60 * 60 * 24);\n\t\t\t\n\t\t\tif (self._ActualMoveOutDate == 0)\n\t\t\t{\n\t\t\t\t//If landlord initiates it, he cannot claim sec deposit\n\t\t\t\trequire(nActualBalance >= nPotentialBillableDays * self._RentPerDay);\n\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByLandlord();\n\t\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay;\n\t\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\t\tbProcessed = true;\n\t\t\t\tBaseEscrowLib.ContractLogEvent(BaseEscrowLib.GetCurrentStage(self), BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled early move-out\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\t//If tenant initiates it, landlord can claim sec deposit, and tenant pays cancellation fee\n\t\t\t\tint nContractBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\n\t\t\t\tcancelFee = (nContractBillableDays - nPotentialBillableDays) * self._RentPerDay / 2;\n\n\t\t\t\trequire(int(SecDeposit) <= self._SecDeposit && nActualBalance >= (nPotentialBillableDays * self._RentPerDay + int(SecDeposit) + cancelFee));\n\t\t\t\t\n\t\t\t\tif (SecDeposit == 0)\n\t\t\t\t{\n\t\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByTenant();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tBaseEscrowLib.ContractLogEvent(BaseEscrowLib.GetCurrentStage(self), BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled Security Deposit\");\n\t\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByTenantSecDep();\n\t\t\t\t}\n\n\t\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay + int(SecDeposit) + cancelFee;\n\t\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\t\tbProcessed = true;\n\t\t\t}\n\t\t}\n\t\telse if (BaseEscrowLib.GetCurrentStage(self) == BaseEscrowLib.GetContractStageTermination())\n\t\t{\n\t\t\tnPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\n\t\t\trequire(int(SecDeposit) <= self._SecDeposit && nActualBalance >= nPotentialBillableDays * self._RentPerDay + int(SecDeposit));\n\t\t\tif (SecDeposit == 0)\n\t\t\t{\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tBaseEscrowLib.ContractLogEvent(BaseEscrowLib.GetCurrentStage(self), BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled Security Deposit\");\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedSecDep();\n\t\t\t}\n\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay + int(SecDeposit);\n\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\tbProcessed = true;\n\t\t}\n\n\t\trequire(bProcessed);\n\t\tif (state > 0)\n\t\t{\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\n\t\t}\t\n\t}\n}\n\nlibrary StrictEscrowLib\n{\n\tusing BaseEscrowLib for BaseEscrowLib.EscrowContractState;\n\n    //Cancel days\n\tint internal constant FreeCancelBeforeMoveInDays = 60;\n\n\t//Expiration\n\tint internal constant ExpireAfterMoveOutDays = 14;\n\t\t    \n    \n\tfunction TenantTerminate(BaseEscrowLib.EscrowContractState storage self) public\n    {\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n\t\tint tenantBal = 0;\n\t\tint landlBal = 0;\n\t\tint state = 0; \n\t\tbool bProcessed = false;\n        string memory sGuid;\n        sGuid = self._Guid;\n\n\n\t\tif (nActualBalance == 0)\n\t\t{\n\t\t\t//If contract is unfunded, just cancel it\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\n\t\t\tbProcessed = true;\t\t\t\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn())\n\t\t{\t\t\t\n\t\t\tint nDaysBeforeMoveIn = (int)(self._MoveInDate - nCurrentDate) / (60 * 60 * 24);\n\t\t\tif (nDaysBeforeMoveIn < FreeCancelBeforeMoveInDays)\n\t\t\t{\n\t\t\t\t//Pay cancel fee\n\t\t\t\tint cancelFee = self._TotalAmount - self._SecDeposit;\n\n\t\t\t\t//Contract must be fully funded\n\t\t\t\trequire(cancelFee <= nActualBalance);\n\n\t\t\t\t//Cancel fee is the whole rent\n\t\t\t\ttenantBal = nActualBalance - cancelFee;\n\t\t\t\tlandlBal = cancelFee;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\n\t\t\t\tbProcessed = true;\n\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow. Cancellation fee will be withheld from tenant.\");\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//No cancel fee\n\t\t\t\ttenantBal = nActualBalance;\n\t\t\t\tlandlBal = 0;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\n\t\t\t\tbProcessed = true;\n\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow.\");\n\t\t\t}\t\t\t\t\t\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageTermination())\n\t\t{\n\t\t\t//If landlord did not close the escrow, and if it is expired, tenant may only pay for rent without sec deposit\n\t\t\tint nDaysAfterMoveOut = (int)(nCurrentDate - self._MoveOutDate) / (60 * 60 * 24);\n\n\t\t\tif (nDaysAfterMoveOut > ExpireAfterMoveOutDays)\n\t\t\t{\n\t\t\t\tint nPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\n\t\t\t\trequire(self._RentPerDay * nPotentialBillableDays <= nActualBalance);\n\n\t\t\t\tlandlBal = self._RentPerDay * nPotentialBillableDays;\n\t\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\t\tbProcessed = true;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\n\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant closed escrow because it was expired\");\n\t\t\t}\n\t\t}\n\n\t\trequire(bProcessed);\n\t\tif (state > 0)\n\t\t{\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\n\t\t}\n    }\n    \n    function TenantMoveIn(BaseEscrowLib.EscrowContractState storage self) public\n    {\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n        string memory sGuid;\n        sGuid = self._Guid;\n\n\t\t\t\t\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= self._TotalAmount && \n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) >= 0);\n\n        BaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant signaled move-in\");\n\n\t\tself._TenantConfirmedMoveIn = true;\n    } \n\t       \n    function TenantTerminateMisrep(BaseEscrowLib.EscrowContractState storage self) public\n    {\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n\t\tint tenantBal = 0;\n\t\tint landlBal = 0;\n\t\tint cancelFee = self._TotalAmount - self._SecDeposit;\n        string memory sGuid;\n        sGuid = self._Guid;\n\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= cancelFee && \n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) == 0);\n\t\t\n\t\t//For strict escrow, give everything to landl\n\t\tlandlBal = cancelFee;\t\t\t\n\t\ttenantBal = nActualBalance - landlBal;\n\t\t\n\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant signaled misrepresentation and terminated escrow!\");\n\t\tself._MisrepSignaled = true;\n\n\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,BaseEscrowLib.GetContractStateTerminatedMisrep());    \n\t}    \n\t\n\tfunction LandlordTerminate(BaseEscrowLib.EscrowContractState storage self, uint SecDeposit) public\n\t{\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\n\t\tint tenantBal = 0;\n\t\tint landlBal = 0;\n\t\tint state = 0; \n\t\tbool bProcessed = false;\n\t\tint nPotentialBillableDays = 0;\n\t\tint cancelFee = self._TotalAmount - self._SecDeposit;\n        string memory sGuid;\n        sGuid = self._Guid;\n\n\t\tif (nActualBalance == 0)\n\t\t{\n\t\t\t//If contract is unfunded, just cancel it\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\n\t\t\tbProcessed = true;\t\t\t\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn())\n\t\t{\t\n\t\t\tif (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) > 0 && \n\t\t\t\t!self._TenantConfirmedMoveIn)\n\t\t\t{\n\t\t\t\t//Landlord gets cancell fee if tenant did not signal anything after move in date\n\t\t\t\ttenantBal = nActualBalance - cancelFee;\t\n\t\t\t\tlandlBal = cancelFee;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\n\t\t\t\tbProcessed = true;\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Landlord cancelled escrow. Tenant did not show up and will pay cancellation fee.\");\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\t\t        \t\t\t\t\n\t\t\t\t//No cancel fee\n\t\t\t\ttenantBal = nActualBalance;\n\t\t\t\tlandlBal = 0;\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\n\t\t\t\tbProcessed = true;\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord cancelled esqrow\");\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageLiving())\n\t\t{\n\t\t\tnPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\n\t\t\t\n\n\t\t\t//If landlord initiates it, he cannot claim sec deposit\n\t\t\trequire(nActualBalance >= nPotentialBillableDays * self._RentPerDay);\n\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByLandlord();\n\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay;\n\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\tbProcessed = true;\n\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled early move-out\");\t\t\t\n\t\t}\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageTermination())\n\t\t{\n\t\t\tnPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\n\t\t\trequire(int(SecDeposit) <= self._SecDeposit && nActualBalance >= nPotentialBillableDays * self._RentPerDay + int(SecDeposit));\n\t\t\tif (SecDeposit == 0)\n\t\t\t{\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled Security Deposit\");\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedSecDep();\n\t\t\t}\n\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay + int(SecDeposit);\n\t\t\ttenantBal = nActualBalance - landlBal;\n\t\t\tbProcessed = true;\n\t\t}\n\n\t\trequire(bProcessed);\n\t\tif (state > 0)\n\t\t{\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\n\t\t}\t\n\t}\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private owner_;\n\n  \n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner_ = msg.sender;\n  }\n\n  /**\n   * @return the address of the owner.\n   */\n  function owner() public constant returns(address) {\n    return owner_;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner_);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    OwnershipTransferred(owner_, _newOwner);\n    owner_ = _newOwner;\n  }\n}\n\ncontract StayBitContractFactory is Ownable\n{\n    struct EscrowTokenInfo { \n\t\tuint _RentMin;  //Min value for rent per day\n\t\tuint _RentMax;  //Max value for rent per day\n\t\taddress _ContractAddress; //Token address\n\t\tuint _ContractFeeBal;  //Earned balance\n    }\n\n\tusing BaseEscrowLib for BaseEscrowLib.EscrowContractState;\n    mapping(bytes32 => BaseEscrowLib.EscrowContractState) private contracts;\n\tmapping(uint => EscrowTokenInfo) private supportedTokens;\n\tbool private CreateEnabled; // Enables / disables creation of new contracts\n\tbool private PercentageFee;  // true - percentage fee per contract false - fixed fee per contract\n\tuint ContractFee;  //Either fixed amount or percentage\n\t\t\n\tevent contractCreated(int rentPerDay, int cancelPolicy, uint moveInDate, uint moveOutDate, int secDeposit, address landlord, uint tokenId, int Id, string Guid, uint extraAmount);\n\tevent contractTerminated(int Id, string Guid, int State);\n\n\tfunction StayBitContractFactory()\n\t{\n\t\tCreateEnabled = true;\n\t\tPercentageFee = false;\n\t\tContractFee = 0;\n\t}\n\n\tfunction SetFactoryParams(bool enable, bool percFee, uint contrFee) public onlyOwner\n\t{\n\t\tCreateEnabled = enable;\t\n\t\tPercentageFee = percFee;\n\t\tContractFee = contrFee;\n\t}\n\n\tfunction GetFeeBalance(uint tokenId) public constant returns (uint)\n\t{\n\t\treturn supportedTokens[tokenId]._ContractFeeBal;\n\t}\n\n\tfunction WithdrawFeeBalance(uint tokenId, address to, uint amount) public onlyOwner\n\t{\t    \n\t\trequire(supportedTokens[tokenId]._RentMax > 0);\t\t\n\t\trequire(supportedTokens[tokenId]._ContractFeeBal >= amount);\t\t\n\t\tsupportedTokens[tokenId]._ContractFeeBal -= amount;\t\t\n\t\tERC20Interface tokenApi = ERC20Interface(supportedTokens[tokenId]._ContractAddress);\n\t\ttokenApi.transfer(to, amount);\n\t}\n\n\n\tfunction SetTokenInfo(uint tokenId, address tokenAddress, uint rentMin, uint rentMax) public onlyOwner\n\t{\n\t\tsupportedTokens[tokenId]._RentMin = rentMin;\n\t\tsupportedTokens[tokenId]._RentMax = rentMax;\n\t\tsupportedTokens[tokenId]._ContractAddress = tokenAddress;\n\t}\n\n\tfunction CalculateCreateFee(uint amount) public constant returns (uint)\n\t{\n\t\tuint result = 0;\n\t\tif (PercentageFee)\n\t\t{\n\t\t\tresult = amount * ContractFee / 100;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = ContractFee;\n\t\t}\n\t\treturn result;\n\t}\n\n\n    //75, 1, 1533417601, 1534281601, 100, \"0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db\", \"\", \"0x4514d8d91a10bda73c10e2b8ffd99cb9646620a9\", 1, \"test\"\n\tfunction CreateContract(int rentPerDay, int cancelPolicy, uint moveInDate, uint moveOutDate, int secDeposit, address landlord, string doorLockData, uint tokenId, int Id, string Guid, uint extraAmount) public\n\t{\n\t\t//It must be enabled\n\t\trequire (CreateEnabled && rentPerDay > 0 && secDeposit > 0 && moveInDate > 0 && moveOutDate > 0 && landlord != address(0) && landlord != msg.sender && Id > 0);\n\n\t\t//Token must be supported\n\t\trequire(supportedTokens[tokenId]._RentMax > 0);\n\n\t\t//Rent per day values must be within range for this token\n\t\trequire(supportedTokens[tokenId]._RentMin <= uint(rentPerDay) && supportedTokens[tokenId]._RentMax >= uint(rentPerDay));\n\n\t\t//Check that we support cancel policy\n\t\t//TESTNET\n\t\t//require (cancelPolicy == 1 || cancelPolicy == 2 || cancelPolicy == 3);\n\n\t\t//PRODUCTION\n\t\trequire (cancelPolicy == 1 || cancelPolicy == 2);\n\n\t\t//Check that GUID does not exist\t\t\n\t\trequire (contracts[keccak256(Guid)]._Id == 0);\n\n\t\tcontracts[keccak256(Guid)]._CurrentDate = now;\n\t\tcontracts[keccak256(Guid)]._CreatedDate = now;\n\t\tcontracts[keccak256(Guid)]._RentPerDay = rentPerDay;\n\t\tcontracts[keccak256(Guid)]._MoveInDate = moveInDate;\n\t\tcontracts[keccak256(Guid)]._MoveOutDate = moveOutDate;\n\t\tcontracts[keccak256(Guid)]._SecDeposit = secDeposit;\n\t\tcontracts[keccak256(Guid)]._DoorLockData = doorLockData;\n\t\tcontracts[keccak256(Guid)]._landlord = landlord;\n\t\tcontracts[keccak256(Guid)]._tenant = msg.sender;\n\t\tcontracts[keccak256(Guid)]._ContractAddress = this;\t\t\n\t\tcontracts[keccak256(Guid)]._tokenApi = ERC20Interface(supportedTokens[tokenId]._ContractAddress);\n\t\tcontracts[keccak256(Guid)]._Id = Id;\n\t\tcontracts[keccak256(Guid)]._Guid = Guid;\n\t\tcontracts[keccak256(Guid)]._CancelPolicy = cancelPolicy;\n\n\t\tcontracts[keccak256(Guid)].initialize();\n\n\t\tuint256 startBalance = contracts[keccak256(Guid)]._tokenApi.balanceOf(this);\n\n\t\t//Calculate our fees\n\t\tsupportedTokens[tokenId]._ContractFeeBal += CalculateCreateFee(uint(contracts[keccak256(Guid)]._TotalAmount));\n\n\t\t//Check that tenant has funds\n\t\trequire(extraAmount + uint(contracts[keccak256(Guid)]._TotalAmount) + CalculateCreateFee(uint(contracts[keccak256(Guid)]._TotalAmount)) <= contracts[keccak256(Guid)]._tokenApi.balanceOf(msg.sender));\n\n\t\t//Fund. Token fee, if any, will be witheld here \n\t\tcontracts[keccak256(Guid)]._tokenApi.transferFrom(msg.sender, this, extraAmount + uint(contracts[keccak256(Guid)]._TotalAmount) + CalculateCreateFee(uint(contracts[keccak256(Guid)]._TotalAmount)));\n\n\t\t//We need to measure balance diff because some tokens (TrueUSD) charge fees per transfer\n\t\tcontracts[keccak256(Guid)]._Balance = contracts[keccak256(Guid)]._tokenApi.balanceOf(this) - startBalance - CalculateCreateFee(uint(contracts[keccak256(Guid)]._TotalAmount));\n\n\t\t//Check that balance is still greater than contract's amount\n\t\trequire(contracts[keccak256(Guid)]._Balance >= uint(contracts[keccak256(Guid)]._TotalAmount));\n\n\t\t//raise event\n\t\tcontractCreated(rentPerDay, cancelPolicy, moveInDate, moveOutDate, secDeposit, landlord, tokenId, Id, Guid, extraAmount);\n\t}\n\n\tfunction() payable\n\t{\t\n\t\trevert();\n\t}\n\n\tfunction SimulateCurrentDate(uint n, string Guid) public {\n\t    if (contracts[keccak256(Guid)]._Id != 0)\n\t\t{\n\t\t\tcontracts[keccak256(Guid)].SimulateCurrentDate(n);\n\t\t}\n\t}\n\t\n\t\n\tfunction GetContractInfo(string Guid) public constant returns (uint curDate, int escrState, int escrStage, bool tenantMovedIn, uint actualBalance, bool misrepSignaled, string doorLockData, int calcAmount, uint actualMoveOutDate, int cancelPolicy)\n\t{\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\n\t\t{\n\t\t\tactualBalance = contracts[keccak256(Guid)].GetContractBalance();\n\t\t\tcurDate = contracts[keccak256(Guid)].GetCurrentDate();\n\t\t\ttenantMovedIn = contracts[keccak256(Guid)]._TenantConfirmedMoveIn;\n\t\t\tmisrepSignaled = contracts[keccak256(Guid)]._MisrepSignaled;\n\t\t\tdoorLockData = contracts[keccak256(Guid)]._DoorLockData;\n\t\t\tescrStage = contracts[keccak256(Guid)].GetCurrentStage();\n\t\t\tescrState = contracts[keccak256(Guid)]._State;\n\t\t\tcalcAmount = contracts[keccak256(Guid)]._TotalAmount;\n\t\t\tactualMoveOutDate = contracts[keccak256(Guid)]._ActualMoveOutDate;\n\t\t\tcancelPolicy = contracts[keccak256(Guid)]._CancelPolicy;\n\t\t}\n\t}\n\t\t\n\tfunction TenantTerminate(string Guid) public\n\t{\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\n\t\t{\n\t\t\trequire(contracts[keccak256(Guid)]._State == BaseEscrowLib.GetContractStateActive() && msg.sender == contracts[keccak256(Guid)]._tenant);\n\n\t\t\tif (contracts[keccak256(Guid)]._CancelPolicy == 1)\n\t\t\t{\n\t\t\t\tFlexibleEscrowLib.TenantTerminate(contracts[keccak256(Guid)]);\n\t\t\t}\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 2)\n\t\t\t{\n\t\t\t\tModerateEscrowLib.TenantTerminate(contracts[keccak256(Guid)]);\n\t\t\t}\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 3)\n\t\t\t{\n\t\t\t\tStrictEscrowLib.TenantTerminate(contracts[keccak256(Guid)]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\trevert();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSendTokens(Guid);\n\n\t\t\t//Raise event\n\t\t\tcontractTerminated(contracts[keccak256(Guid)]._Id, Guid, contracts[keccak256(Guid)]._State);\n\n\t\t}\n\t}\n\n\tfunction TenantTerminateMisrep(string Guid) public\n\t{\t\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\n\t\t{\n\t\t\trequire(contracts[keccak256(Guid)]._State == BaseEscrowLib.GetContractStateActive() && msg.sender == contracts[keccak256(Guid)]._tenant);\n\n\t\t\tif (contracts[keccak256(Guid)]._CancelPolicy == 1)\n\t\t\t{\n\t\t\t\tFlexibleEscrowLib.TenantTerminateMisrep(contracts[keccak256(Guid)]);\n\t\t\t}\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 2)\n\t\t\t{\n\t\t\t\tModerateEscrowLib.TenantTerminateMisrep(contracts[keccak256(Guid)]);\n\t\t\t}\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 3)\n\t\t\t{\n\t\t\t\tStrictEscrowLib.TenantTerminateMisrep(contracts[keccak256(Guid)]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\trevert();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSendTokens(Guid);\n\n\t\t\t//Raise event\n\t\t\tcontractTerminated(contracts[keccak256(Guid)]._Id, Guid, contracts[keccak256(Guid)]._State);\n\t\t}\n\t}\n    \n\tfunction TenantMoveIn(string Guid) public\n\t{\t\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\n\t\t{\n\t\t\trequire(contracts[keccak256(Guid)]._State == BaseEscrowLib.GetContractStateActive() && msg.sender == contracts[keccak256(Guid)]._tenant);\n\n\t\t\tif (contracts[keccak256(Guid)]._CancelPolicy == 1)\n\t\t\t{\n\t\t\t\tFlexibleEscrowLib.TenantMoveIn(contracts[keccak256(Guid)]);\n\t\t\t}\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 2)\n\t\t\t{\n\t\t\t\tModerateEscrowLib.TenantMoveIn(contracts[keccak256(Guid)]);\n\t\t\t}\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 3)\n\t\t\t{\n\t\t\t\tStrictEscrowLib.TenantMoveIn(contracts[keccak256(Guid)]);\n\t\t\t}\n\t\t\telse{\n\t\t\t\trevert();\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction LandlordTerminate(uint SecDeposit, string Guid) public\n\t{\t\t\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\n\t\t{\n\t\t\trequire(SecDeposit >= 0 && SecDeposit <= uint256(contracts[keccak256(Guid)]._SecDeposit));\n\t\t\trequire(contracts[keccak256(Guid)]._State == BaseEscrowLib.GetContractStateActive() && msg.sender == contracts[keccak256(Guid)]._landlord);\n\n\t\t\tif (contracts[keccak256(Guid)]._CancelPolicy == 1)\n\t\t\t{\n\t\t\t\tFlexibleEscrowLib.LandlordTerminate(contracts[keccak256(Guid)], SecDeposit);\n\t\t\t}\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 2)\n\t\t\t{\n\t\t\t\tModerateEscrowLib.LandlordTerminate(contracts[keccak256(Guid)], SecDeposit);\n\t\t\t}\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 3)\n\t\t\t{\n\t\t\t\tStrictEscrowLib.LandlordTerminate(contracts[keccak256(Guid)], SecDeposit);\n\t\t\t}\n\t\t\telse{\n\t\t\t\trevert();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSendTokens(Guid);\n\n\t\t\t//Raise event\n\t\t\tcontractTerminated(contracts[keccak256(Guid)]._Id, Guid, contracts[keccak256(Guid)]._State);\n\t\t}\n\t}\n\n\tfunction SendTokens(string Guid) private\n\t{\t\t\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\n\t\t{\n\t\t\tif (contracts[keccak256(Guid)]._landlBal > 0)\n\t\t\t{\t\n\t\t\t\tuint landlBal = uint(contracts[keccak256(Guid)]._landlBal);\n\t\t\t\tcontracts[keccak256(Guid)]._landlBal = 0;\t\t\n\t\t\t\tcontracts[keccak256(Guid)]._tokenApi.transfer(contracts[keccak256(Guid)]._landlord, landlBal);\n\t\t\t\tcontracts[keccak256(Guid)]._Balance -= landlBal;\t\t\t\t\t\t\n\t\t\t}\n\t    \n\t\t\tif (contracts[keccak256(Guid)]._tenantBal > 0)\n\t\t\t{\t\t\t\n\t\t\t\tuint tenantBal = uint(contracts[keccak256(Guid)]._tenantBal);\n\t\t\t\tcontracts[keccak256(Guid)]._tenantBal = 0;\n\t\t\t\tcontracts[keccak256(Guid)]._tokenApi.transfer(contracts[keccak256(Guid)]._tenant, tenantBal);\t\t\t\n\t\t\t\tcontracts[keccak256(Guid)]._Balance -= tenantBal;\n\t\t\t}\n\t\t}\t\t\t    \n\t}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"SimulateCurrentDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rentPerDay\",\"type\":\"int256\"},{\"name\":\"cancelPolicy\",\"type\":\"int256\"},{\"name\":\"moveInDate\",\"type\":\"uint256\"},{\"name\":\"moveOutDate\",\"type\":\"uint256\"},{\"name\":\"secDeposit\",\"type\":\"int256\"},{\"name\":\"landlord\",\"type\":\"address\"},{\"name\":\"doorLockData\",\"type\":\"string\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"Id\",\"type\":\"int256\"},{\"name\":\"Guid\",\"type\":\"string\"},{\"name\":\"extraAmount\",\"type\":\"uint256\"}],\"name\":\"CreateContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"TenantTerminate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"SecDeposit\",\"type\":\"uint256\"},{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"LandlordTerminate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"},{\"name\":\"percFee\",\"type\":\"bool\"},{\"name\":\"contrFee\",\"type\":\"uint256\"}],\"name\":\"SetFactoryParams\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"GetContractInfo\",\"outputs\":[{\"name\":\"curDate\",\"type\":\"uint256\"},{\"name\":\"escrState\",\"type\":\"int256\"},{\"name\":\"escrStage\",\"type\":\"int256\"},{\"name\":\"tenantMovedIn\",\"type\":\"bool\"},{\"name\":\"actualBalance\",\"type\":\"uint256\"},{\"name\":\"misrepSignaled\",\"type\":\"bool\"},{\"name\":\"doorLockData\",\"type\":\"string\"},{\"name\":\"calcAmount\",\"type\":\"int256\"},{\"name\":\"actualMoveOutDate\",\"type\":\"uint256\"},{\"name\":\"cancelPolicy\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeeBalance\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"rentMin\",\"type\":\"uint256\"},{\"name\":\"rentMax\",\"type\":\"uint256\"}],\"name\":\"SetTokenInfo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CalculateCreateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GetFeeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"TenantTerminateMisrep\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"TenantMoveIn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rentPerDay\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"cancelPolicy\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"moveInDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"moveOutDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"secDeposit\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"landlord\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Id\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"Guid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"extraAmount\",\"type\":\"uint256\"}],\"name\":\"contractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Id\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"Guid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"State\",\"type\":\"int256\"}],\"name\":\"contractTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b5b5b60008054600160a060020a03191633600160a060020a03161790555b6003805461ff001960ff1990911660011716905560006004555b5b614a17806100576000396000f300606060405236156100b45763ffffffff60e060020a6000350416631919049581146100bc578063271619fb146101145780633687e257146101d857806337c6fcba1461022b5780634aa880c1146102835780635360cd82146102a55780637282c5b1146103b657806388ccf2b9146103dd5780638da5cb5b1461040757806398eb109614610436578063dcf988d61461045e578063eb57d30914610486578063ed598be7146104d9578063f2fde38b1461052c575b5b600080fd5b005b34156100c757600080fd5b6100ba600480359060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061054d95505050505050565b005b341561011f57600080fd5b6100ba60048035906024803591604435916064359160843591600160a060020a0360a43516919060e49060c43590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094968635966020808201359750919550606081019450604090810135860180830194503592508291601f83018190048102019051908101604052818152929190602084018383808284375094965050933593506106af92505050565b005b34156101e357600080fd5b6100ba60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506119e795505050505050565b005b341561023657600080fd5b6100ba600480359060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061219295505050505050565b005b341561028e57600080fd5b6100ba600435151560243515156044356129ed565b005b34156102b057600080fd5b6102f660046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650612a2f95505050505050565b604051808b81526020018a8152602001898152602001881515151581526020018781526020018615151515815260200180602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156103725780820151818401525b602001610359565b50505050905090810190601f16801561039f5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34156103c157600080fd5b6100ba600435600160a060020a03602435166044356131c5565b005b34156103e857600080fd5b6100ba600435600160a060020a03602435166044356064356132bf565b005b341561041257600080fd5b61041a613324565b604051600160a060020a03909116815260200160405180910390f35b341561044157600080fd5b61044c600435613334565b60405190815260200160405180910390f35b341561046957600080fd5b61044c600435613369565b60405190815260200160405180910390f35b341561049157600080fd5b6100ba60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061338195505050505050565b005b34156104e457600080fd5b6100ba60046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650613b2c95505050505050565b005b341561053757600080fd5b6100ba600160a060020a0360043516614134565b005b60016000826040518082805190602001908083835b6020831061058257805182525b601f199092019160209182019101610562565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060110154156106aa5760016000826040518082805190602001908083835b602083106105fd57805182525b601f1990920191602091820191016105dd565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000207332d5846107480154cf011068a7f476912972785563cec3ce4490918460405160e060020a63ffffffff85160281526004810192909252602482015260440160006040518083038186803b151561069557600080fd5b6102c65a03f415156106a657600080fd5b5050505b5b5050565b60035460009060ff1680156106c4575060008c135b80156106d05750600088135b80156106dc575060008a115b80156106e85750600089115b80156106fc5750600160a060020a03871615155b801561071a575033600160a060020a031687600160a060020a031614155b80156107265750600084135b151561073157600080fd5b6000858152600260205260408120600101541161074d57600080fd5b6000858152600260205260409020548c901180159061077e57506000858152600260205260409020600101548c9010155b151561078957600080fd5b8a6001148061079857508a6002145b15156107a357600080fd5b60016000846040518082805190602001908083835b602083106107d857805182525b601f1990920191602091820191016107b8565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020601101541561082357600080fd5b4260016000856040518082805190602001908083835b6020831061085957805182525b601f199092019160209182019101610839565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600001819055504260016000856040518082805190602001908083835b602083106108d857805182525b601f1990920191602091820191016108b8565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600101819055508b60016000856040518082805190602001908083835b6020831061095757805182525b601f199092019160209182019101610937565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600201819055508960016000856040518082805190602001908083835b602083106109d657805182525b601f1990920191602091820191016109b6565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600301819055508860016000856040518082805190602001908083835b60208310610a5557805182525b601f199092019160209182019101610a35565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600401819055508760016000856040518082805190602001908083835b60208310610ad457805182525b601f199092019160209182019101610ab4565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600601819055508560016000856040518082805190602001908083835b60208310610b5357805182525b601f199092019160209182019101610b33565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020600c01908051610ba4929160200190614939565b508660016000856040518082805190602001908083835b60208310610bdb57805182525b601f199092019160209182019101610bbb565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600a0160006101000a815481600160a060020a030219169083600160a060020a031602179055503360016000856040518082805190602001908083835b60208310610c7a57805182525b601f199092019160209182019101610c5a565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600b0160006101000a815481600160a060020a030219169083600160a060020a031602179055503060016000856040518082805190602001908083835b60208310610d1957805182525b601f199092019160209182019101610cf9565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208082019290925260409081016000908120600d01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039586161790558881526002928390528181209092015490921691600191908690518082805190602001908083835b60208310610dcd57805182525b601f199092019160209182019101610dad565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600e0160006101000a815481600160a060020a030219169083600160a060020a031602179055508360016000856040518082805190602001908083835b60208310610e6c57805182525b601f199092019160209182019101610e4c565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020601101819055508260016000856040518082805190602001908083835b60208310610eeb57805182525b601f199092019160209182019101610ecb565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020601401908051610f3c929160200190614939565b508a60016000856040518082805190602001908083835b60208310610f7357805182525b601f199092019160209182019101610f53565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000206012018190555060016000846040518082805190602001908083835b60208310610ff157805182525b601f199092019160209182019101610fd1565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000207332d5846107480154cf011068a7f47691297278559163e111536f91905160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b151561107f57600080fd5b6102c65a03f4151561109057600080fd5b50505060016000846040518082805190602001908083835b602083106110c857805182525b601f1990920191602091820191016110a8565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000908120600e0154600160a060020a0316916370a08231913091516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561116257600080fd5b6102c65a03f1151561117357600080fd5b5050506040518051905090506111fd60016000856040518082805190602001908083835b602083106111b757805182525b601f199092019160209182019101611197565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060050154613334565b60008681526002602052604080822060030180549093019092556001918590518082805190602001908083835b6020831061124a57805182525b601f19909201916020918201910161122a565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000908120600e0154600160a060020a0316916370a08231913391516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156112e457600080fd5b6102c65a03f115156112f557600080fd5b5050506040518051905061137d60016000866040518082805190602001908083835b602083106111b757805182525b601f199092019160209182019101611197565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060050154613334565b60016000866040518082805190602001908083835b602083106113b257805182525b601f199092019160209182019101611392565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060050154840101111561140157600080fd5b60016000846040518082805190602001908083835b6020831061143657805182525b601f199092019160209182019101611416565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000908120600e0154600160a060020a0316916323b872dd913391309161150d91600191908a90518082805190602001908083835b602083106111b757805182525b601f199092019160209182019101611197565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060050154613334565b60016000896040518082805190602001908083835b6020831061154257805182525b601f199092019160209182019101611522565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000206005015487010160006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156115e357600080fd5b6102c65a03f115156115f457600080fd5b505050604051805190505061167d60016000856040518082805190602001908083835b602083106111b757805182525b601f199092019160209182019101611197565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060050154613334565b8160016000866040518082805190602001908083835b602083106116b357805182525b601f199092019160209182019101611693565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000908120600e0154600160a060020a0316916370a08231913091516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561174d57600080fd5b6102c65a03f1151561175e57600080fd5b50505060405180519050030360016000856040518082805190602001908083835b6020831061179f57805182525b601f19909201916020918201910161177f565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000206013018190555060016000846040518082805190602001908083835b6020831061181d57805182525b601f1990920191602091820191016117fd565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000206005015460016000856040518082805190602001908083835b6020831061189857805182525b601f199092019160209182019101611878565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040016000206013015410156118e457600080fd5b7f2a44801e7d94ce9745f3d9000e6f4bac5a6e259b76ba8e11c1b2a3befbb645028c8c8c8c8c8c8b8b8b8b604051808b81526020018a815260200189815260200188815260200187815260200186600160a060020a0316600160a060020a0316815260200185815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156119955780820151818401525b60200161197c565b50505050905090810190601f1680156119c25780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390a15b505050505050505050505050565b60016000826040518082805190602001908083835b60208310611a1c57805182525b601f1990920191602091820191016119fc565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020601101541561218e577332d5846107480154cf011068a7f4769129727855631c4d749b6000604051602001526040518163ffffffff1660e060020a02815260040160206040518083038186803b1515611ab157600080fd5b6102c65a03f41515611ac257600080fd5b5050506040518051905060016000836040518082805190602001908083835b60208310611b0157805182525b601f199092019160209182019101611ae1565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060070154148015611bd0575060016000826040518082805190602001908083835b60208310611b7f57805182525b601f199092019160209182019101611b5f565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020600b015433600160a060020a039081169116145b1515611bdb57600080fd5b60016000826040518082805190602001908083835b60208310611c1057805182525b601f199092019160209182019101611bf0565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040016000206012015460011415611d335773925dec1f875b55f24754ef30a9237577b6a8b6b763d687f9cd60016000846040518082805190602001908083835b60208310611ca857805182525b601f199092019160209182019101611c88565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040908101600020905160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b1515611d1a57600080fd5b6102c65a03f41515611d2b57600080fd5b505050611fe8565b60016000826040518082805190602001908083835b60208310611d6857805182525b601f199092019160209182019101611d48565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040016000206012015460021415611e8b57736461366873e25dae881127d834c36fec0751928f63d687f9cd60016000846040518082805190602001908083835b60208310611ca857805182525b601f199092019160209182019101611c88565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040908101600020905160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b1515611d1a57600080fd5b6102c65a03f41515611d2b57600080fd5b505050611fe8565b60016000826040518082805190602001908083835b60208310611ec057805182525b601f199092019160209182019101611ea0565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060120154600314156100b45773b42f3153ceca8892cfb54eefbb947e7f4d19cc9f63d687f9cd60016000846040518082805190602001908083835b60208310611ca857805182525b601f199092019160209182019101611c88565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040908101600020905160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b1515611d1a57600080fd5b6102c65a03f41515611d2b57600080fd5b505050611fe8565b600080fd5b5b5b611ff38161415d565b7ff024f66267ee0c89b0ae0bd269c1485604b49ce614eda041309087fc0ade966160016000836040518082805190602001908083835b6020831061204957805182525b601f199092019160209182019101612029565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020601101548260016000856040518082805190602001908083835b602083106120c557805182525b601f1990920191602091820191016120a5565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000206007015490518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156121515780820151818401525b602001612138565b50505050905090810190601f16801561217e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15b5b50565b60016000826040518082805190602001908083835b602083106121c757805182525b601f1990920191602091820191016121a7565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060110154156106aa5760008210158015612293575060016000826040518082805190602001908083835b6020831061224e57805182525b601f19909201916020918201910161222e565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020600601548211155b151561229e57600080fd5b7332d5846107480154cf011068a7f4769129727855631c4d749b6000604051602001526040518163ffffffff1660e060020a02815260040160206040518083038186803b15156122ed57600080fd5b6102c65a03f415156122fe57600080fd5b5050506040518051905060016000836040518082805190602001908083835b6020831061233d57805182525b601f19909201916020918201910161231d565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040016000206007015414801561240c575060016000826040518082805190602001908083835b602083106123bb57805182525b601f19909201916020918201910161239b565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020600a015433600160a060020a039081169116145b151561241757600080fd5b60016000826040518082805190602001908083835b6020831061244c57805182525b601f19909201916020918201910161242c565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060120154600114156125795773925dec1f875b55f24754ef30a9237577b6a8b6b763e1c2854d60016000846040518082805190602001908083835b602083106124e457805182525b601f1990920191602091820191016124c4565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000208460405160e060020a63ffffffff85160281526004810192909252602482015260440160006040518083038186803b151561256057600080fd5b6102c65a03f4151561257157600080fd5b505050612842565b60016000826040518082805190602001908083835b602083106125ae57805182525b601f19909201916020918201910161258e565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060120154600214156126db57736461366873e25dae881127d834c36fec0751928f63e1c2854d60016000846040518082805190602001908083835b602083106124e457805182525b601f1990920191602091820191016124c4565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000208460405160e060020a63ffffffff85160281526004810192909252602482015260440160006040518083038186803b151561256057600080fd5b6102c65a03f4151561257157600080fd5b505050612842565b60016000826040518082805190602001908083835b6020831061271057805182525b601f1990920191602091820191016126f0565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060120154600314156100b45773b42f3153ceca8892cfb54eefbb947e7f4d19cc9f63e1c2854d60016000846040518082805190602001908083835b602083106124e457805182525b601f1990920191602091820191016124c4565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000208460405160e060020a63ffffffff85160281526004810192909252602482015260440160006040518083038186803b151561256057600080fd5b6102c65a03f4151561257157600080fd5b505050612842565b600080fd5b5b5b61284d8161415d565b7ff024f66267ee0c89b0ae0bd269c1485604b49ce614eda041309087fc0ade966160016000836040518082805190602001908083835b602083106128a357805182525b601f199092019160209182019101612883565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020601101548260016000856040518082805190602001908083835b6020831061291f57805182525b601f1990920191602091820191016128ff565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000206007015490518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156129ab5780820151818401525b602001612992565b50505050905090810190601f1680156129d85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15b5b5050565b60005433600160a060020a03908116911614612a0857600080fd5b6003805460ff19168415151761ff0019166101008415150217905560048190555b5b505050565b600080600080600080612a406149b8565b6000806000600160008c6040518082805190602001908083835b60208310612a7a57805182525b601f199092019160209182019101612a5a565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060110154156131b757600160008c6040518082805190602001908083835b60208310612af557805182525b601f199092019160209182019101612ad5565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000207332d5846107480154cf011068a7f476912972785563a922f3bf909160006040516020015260405160e060020a63ffffffff8416028152600481019190915260240160206040518083038186803b1515612b9057600080fd5b6102c65a03f41515612ba157600080fd5b505050604051805190509550600160008c6040518082805190602001908083835b60208310612be257805182525b601f199092019160209182019101612bc2565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000207332d5846107480154cf011068a7f4769129727855639376ea01909160006040516020015260405160e060020a63ffffffff8416028152600481019190915260240160206040518083038186803b1515612c7d57600080fd5b6102c65a03f41515612c8e57600080fd5b505050604051805190509950600160008c6040518082805190602001908083835b60208310612ccf57805182525b601f199092019160209182019101612caf565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000908120600b015474010000000000000000000000000000000000000000900460ff1698506001918d90518082805190602001908083835b60208310612d6457805182525b601f199092019160209182019101612d44565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000908120600b01547501000000000000000000000000000000000000000000900460ff1696506001918d90518082805190602001908083835b60208310612dfa57805182525b601f199092019160209182019101612dda565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600c018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ed35780601f10612ea857610100808354040283529160200191612ed3565b820191906000526020600020905b815481529060010190602001808311612eb657829003601f168201915b50505050509350600160008c6040518082805190602001908083835b60208310612f0f57805182525b601f199092019160209182019101612eef565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000207332d5846107480154cf011068a7f476912972785563297913fd909160006040516020015260405160e060020a63ffffffff8416028152600481019190915260240160206040518083038186803b1515612faa57600080fd5b6102c65a03f41515612fbb57600080fd5b505050604051805190509750600160008c6040518082805190602001908083835b60208310612ffc57805182525b601f199092019160209182019101612fdc565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600701549850600160008c6040518082805190602001908083835b6020831061307957805182525b601f199092019160209182019101613059565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600501549250600160008c6040518082805190602001908083835b602083106130f657805182525b601f1990920191602091820191016130d6565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600901549150600160008c6040518082805190602001908083835b6020831061317357805182525b601f199092019160209182019101613153565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040016000206012015490505b5b9193959799509193959799565b6000805433600160a060020a039081169116146131e157600080fd5b600084815260026020526040812060010154116131fd57600080fd5b6000848152600260205260409020600301548290101561321c57600080fd5b506000838152600260208190526040808320600381018054869003905590910154600160a060020a031691829163a9059cbb918691869190516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561329c57600080fd5b6102c65a03f115156132ad57600080fd5b505050604051805150505b5b50505050565b60005433600160a060020a039081169116146132da57600080fd5b60008481526002602081905260409091208381556001810183905501805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0385161790555b5b50505050565b600054600160a060020a03165b90565b6003546000908190610100900460ff161561335a5760045460649084025b04905061335f565b506004545b8091505b50919050565b6000818152600260205260409020600301545b919050565b60016000826040518082805190602001908083835b602083106133b657805182525b601f199092019160209182019101613396565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020601101541561218e577332d5846107480154cf011068a7f4769129727855631c4d749b6000604051602001526040518163ffffffff1660e060020a02815260040160206040518083038186803b151561344b57600080fd5b6102c65a03f4151561345c57600080fd5b5050506040518051905060016000836040518082805190602001908083835b6020831061349b57805182525b601f19909201916020918201910161347b565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040016000206007015414801561356a575060016000826040518082805190602001908083835b6020831061351957805182525b601f1990920191602091820191016134f9565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020600b015433600160a060020a039081169116145b151561357557600080fd5b60016000826040518082805190602001908083835b602083106135aa57805182525b601f19909201916020918201910161358a565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060120154600114156136cd5773925dec1f875b55f24754ef30a9237577b6a8b6b7636d91163060016000846040518082805190602001908083835b60208310611ca857805182525b601f199092019160209182019101611c88565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040908101600020905160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b1515611d1a57600080fd5b6102c65a03f41515611d2b57600080fd5b505050611fe8565b60016000826040518082805190602001908083835b6020831061370257805182525b601f1990920191602091820191016136e2565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020601201546002141561382557736461366873e25dae881127d834c36fec0751928f636d91163060016000846040518082805190602001908083835b60208310611ca857805182525b601f199092019160209182019101611c88565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040908101600020905160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b1515611d1a57600080fd5b6102c65a03f41515611d2b57600080fd5b505050611fe8565b60016000826040518082805190602001908083835b6020831061385a57805182525b601f19909201916020918201910161383a565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060120154600314156100b45773b42f3153ceca8892cfb54eefbb947e7f4d19cc9f636d91163060016000846040518082805190602001908083835b60208310611ca857805182525b601f199092019160209182019101611c88565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040908101600020905160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b1515611d1a57600080fd5b6102c65a03f41515611d2b57600080fd5b505050611fe8565b600080fd5b5b5b611ff38161415d565b7ff024f66267ee0c89b0ae0bd269c1485604b49ce614eda041309087fc0ade966160016000836040518082805190602001908083835b6020831061204957805182525b601f199092019160209182019101612029565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020601101548260016000856040518082805190602001908083835b602083106120c557805182525b601f1990920191602091820191016120a5565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000206007015490518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156121515780820151818401525b602001612138565b50505050905090810190601f16801561217e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15b5b50565b60016000826040518082805190602001908083835b60208310613b6157805182525b601f199092019160209182019101613b41565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020601101541561218e577332d5846107480154cf011068a7f4769129727855631c4d749b6000604051602001526040518163ffffffff1660e060020a02815260040160206040518083038186803b1515613bf657600080fd5b6102c65a03f41515613c0757600080fd5b5050506040518051905060016000836040518082805190602001908083835b60208310613c4657805182525b601f199092019160209182019101613c26565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060070154148015613d15575060016000826040518082805190602001908083835b60208310613cc457805182525b601f199092019160209182019101613ca4565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020600b015433600160a060020a039081169116145b1515613d2057600080fd5b60016000826040518082805190602001908083835b60208310613d5557805182525b601f199092019160209182019101613d35565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040016000206012015460011415613e785773925dec1f875b55f24754ef30a9237577b6a8b6b763101b8b2b60016000846040518082805190602001908083835b60208310613ded57805182525b601f199092019160209182019101613dcd565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040908101600020905160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b1515613e5f57600080fd5b6102c65a03f41515613e7057600080fd5b50505061218e565b60016000826040518082805190602001908083835b60208310613ead57805182525b601f199092019160209182019101613e8d565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040016000206012015460021415613fd057736461366873e25dae881127d834c36fec0751928f63101b8b2b60016000846040518082805190602001908083835b60208310613ded57805182525b601f199092019160209182019101613dcd565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040908101600020905160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b1515613e5f57600080fd5b6102c65a03f41515613e7057600080fd5b50505061218e565b60016000826040518082805190602001908083835b6020831061400557805182525b601f199092019160209182019101613fe5565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060120154600314156100b45773b42f3153ceca8892cfb54eefbb947e7f4d19cc9f63101b8b2b60016000846040518082805190602001908083835b60208310613ded57805182525b601f199092019160209182019101613dcd565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040908101600020905160e060020a63ffffffff8416028152600481019190915260240160006040518083038186803b1515613e5f57600080fd5b6102c65a03f41515613e7057600080fd5b50505061218e565b600080fd5b5b5b5b5b50565b60005433600160a060020a0390811691161461414f57600080fd5b61218e816148bc565b5b5b50565b60008060016000846040518082805190602001908083835b6020831061419557805182525b601f199092019160209182019101614175565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020815260208101919091526040016000206011015415612a2957600060016000856040518082805190602001908083835b6020831061421257805182525b601f1990920191602091820191016141f2565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020600f015413156145485760016000846040518082805190602001908083835b6020831061428e57805182525b601f19909201916020918201910161426e565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600f01549150600060016000856040518082805190602001908083835b6020831061430d57805182525b601f1990920191602091820191016142ed565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020600f018190555060016000846040518082805190602001908083835b6020831061438b57805182525b601f19909201916020918201910161436b565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000908120600e0154600160a060020a03169163a9059cbb916001918790518082805190602001908083835b6020831061441357805182525b601f1990920191602091820191016143f3565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000908120600a0154600160a060020a031691869190516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156144ad57600080fd5b6102c65a03f115156144be57600080fd5b50505060405180519050508160016000856040518082805190602001908083835b602083106144ff57805182525b601f1990920191602091820191016144df565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060130180549190910390555b600060016000856040518082805190602001908083835b6020831061457f57805182525b601f19909201916020918201910161455f565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902081526020810191909152604001600020601001541315612a295760016000846040518082805190602001908083835b602083106145fb57805182525b601f1990920191602091820191016145db565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902060001916600019168152602001908152602001600020601001549050600060016000856040518082805190602001908083835b6020831061467a57805182525b601f19909201916020918201910161465a565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020600019166000191681526020019081526020016000206010018190555060016000846040518082805190602001908083835b602083106146f857805182525b601f1990920191602091820191016146d8565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000908120600e0154600160a060020a03169163a9059cbb916001918790518082805190602001908083835b6020831061478057805182525b601f199092019160209182019101614760565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260409081016000908120600b0154600160a060020a031691859190516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561481a57600080fd5b6102c65a03f1151561482b57600080fd5b50505060405180519050508060016000856040518082805190602001908083835b6020831061486c57805182525b601f19909201916020918201910161484c565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390208152602081019190915260400160002060130180549190910390555b5b5b505050565b600160a060020a03811615156148d157600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061497a57805160ff19168380011785556149a7565b828001600101855582156149a7579182015b828111156149a757825182559160200191906001019061498c565b5b506149b49291506149ca565b5090565b60206040519081016040526000815290565b61333191905b808211156149b457600081556001016149d0565b5090565b905600a165627a7a723058204ed04dfca8bd29b9dc792e8fe5f1138a07432897c268e97a81b3ae464bf2532f0029"
}