{
  "address": "0xc96a79647afc1eb3e57285a93edf54c74232b3ea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RegulatorService",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n\n/**\n   Copyright (c) 2017 Harbor Platform, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the “License”);\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an “AS IS” BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\npragma solidity ^0.4.24;\n\n/// @notice Standard interface for `RegulatorService`s\ncontract RegulatorServiceI {\n\n  /*\n   * @notice This method *MUST* be called by `RegulatedToken`s during `transfer()` and `transferFrom()`.\n   *         The implementation *SHOULD* check whether or not a transfer can be approved.\n   *\n   * @dev    This method *MAY* call back to the token contract specified by `_token` for\n   *         more information needed to enforce trade approval.\n   *\n   * @param  _token The address of the token to be transfered\n   * @param  _spender The address of the spender of the token\n   * @param  _from The address of the sender account\n   * @param  _to The address of the receiver account\n   * @param  _amount The quantity of the token to trade\n   *\n   * @return uint8 The reason code: 0 means success.  Non-zero values are left to the implementation\n   *               to assign meaning.\n   */\n  function check(address _token, address _spender, address _from, address _to, uint256 _amount) public returns (uint8);\n}\n\n\npragma solidity ^0.4.18;\n\n\n\n\n/**\n * @title  On-chain RegulatorService implementation for approving trades\n * @author Originally Bob Remeika, modified by TokenSoft Inc\n * @dev Orignal source: https://github.com/harborhq/r-token/blob/master/contracts/TokenRegulatorService.sol\n */\ncontract RegulatorService is RegulatorServiceI, Ownable {\n  /**\n   * @dev Throws if called by any account other than the admin\n   */\n  modifier onlyAdmins() {\n    require(msg.sender == admin || msg.sender == owner);\n    _;\n  }\n\n  /// @dev Settings that affect token trading at a global level\n  struct Settings {\n\n    /**\n     * @dev Toggle for locking/unlocking trades at a token level.\n     *      The default behavior of the zero memory state for locking will be unlocked.\n     */\n    bool locked;\n\n    /**\n     * @dev Toggle for allowing/disallowing fractional token trades at a token level.\n     *      The default state when this contract is created `false` (or no partial\n     *      transfers allowed).\n     */\n    bool partialTransfers;\n\n    /**\n     * @dev Mappning for 12 months hold up period for investors.\n     * @param  address investors wallet\n     * @param  uint256 holdingPeriod start date in unix\n     */\n    mapping(address => uint256) holdingPeriod;\n  }\n\n  // @dev number of seconds in a year = 365 * 24 * 60 * 60\n  uint256 constant private YEAR = 1 years;\n\n  // @dev Check success code & message\n  uint8 constant private CHECK_SUCCESS = 0;\n  string constant private SUCCESS_MESSAGE = 'Success';\n\n  // @dev Check error reason: Token is locked\n  uint8 constant private CHECK_ELOCKED = 1;\n  string constant private ELOCKED_MESSAGE = 'Token is locked';\n\n  // @dev Check error reason: Token can not trade partial amounts\n  uint8 constant private CHECK_EDIVIS = 2;\n  string constant private EDIVIS_MESSAGE = 'Token can not trade partial amounts';\n\n  // @dev Check error reason: Sender is not allowed to send the token\n  uint8 constant private CHECK_ESEND = 3;\n  string constant private ESEND_MESSAGE = 'Sender is not allowed to send the token';\n\n  // @dev Check error reason: Receiver is not allowed to receive the token\n  uint8 constant private CHECK_ERECV = 4;\n  string constant private ERECV_MESSAGE = 'Receiver is not allowed to receive the token';\n\n  uint8 constant private CHECK_EHOLDING_PERIOD = 5;\n  string constant private EHOLDING_PERIOD_MESSAGE = 'Sender is still in 12 months holding period';\n\n  uint8 constant private CHECK_EDECIMALS = 6;\n  string constant private EDECIMALS_MESSAGE = 'Transfer value must be bigger than 0.000001 or 1 szabo';\n\n  uint256 constant public MINIMAL_TRANSFER = 1 szabo;\n\n  /// @dev Permission bits for allowing a participant to send tokens\n  uint8 constant private PERM_SEND = 0x1;\n\n  /// @dev Permission bits for allowing a participant to receive tokens\n  uint8 constant private PERM_RECEIVE = 0x2;\n\n  // @dev Address of the administrator\n  address public admin;\n\n  /// @notice Permissions that allow/disallow token trades on a per token level\n  mapping(address => Settings) private settings;\n\n  /// @dev Permissions that allow/disallow token trades on a per participant basis.\n  ///      The format for key based access is `participants[tokenAddress][participantAddress]`\n  ///      which returns the permission bits of a participant for a particular token.\n  mapping(address => mapping(address => uint8)) private participants;\n\n  /// @dev Event raised when a token's locked setting is set\n  event LogLockSet(address indexed token, bool locked);\n\n  /// @dev Event raised when a token's partial transfer setting is set\n  event LogPartialTransferSet(address indexed token, bool enabled);\n\n  /// @dev Event raised when a participant permissions are set for a token\n  event LogPermissionSet(address indexed token, address indexed participant, uint8 permission);\n\n  /// @dev Event raised when the admin address changes\n  event LogTransferAdmin(address indexed oldAdmin, address indexed newAdmin);\n\n  /// @dev Event raised when holding period start date is set for participant\n  event LogHoldingPeriod(\n    address indexed _token, address indexed _participant, uint256 _startDate);\n\n  constructor() public {\n    admin = msg.sender;\n  }\n\n  /**\n   * @notice Locks the ability to trade a token\n   *\n   * @dev    This method can only be called by this contract's owner\n   *\n   * @param  _token The address of the token to lock\n   */\n  function setLocked(address _token, bool _locked) onlyOwner public {\n    settings[_token].locked = _locked;\n\n    emit LogLockSet(_token, _locked);\n  }\n\n  /**\n   * @notice Allows the ability to trade a fraction of a token\n   *\n   * @dev    This method can only be called by this contract's owner\n   *\n   * @param  _token The address of the token to allow partial transfers\n   */\n  function setPartialTransfers(address _token, bool _enabled) onlyOwner public {\n   settings[_token].partialTransfers = _enabled;\n\n   emit LogPartialTransferSet(_token, _enabled);\n  }\n\n  /**\n   * @notice Sets the trade permissions for a participant on a token\n   *\n   * @dev    The `_permission` bits overwrite the previous trade permissions and can\n   *         only be called by the contract's owner.  `_permissions` can be bitwise\n   *         `|`'d together to allow for more than one permission bit to be set.\n   *\n   * @param  _token The address of the token\n   * @param  _participant The address of the trade participant\n   * @param  _permission Permission bits to be set\n   */\n  function setPermission(address _token, address _participant, uint8 _permission) onlyAdmins public {\n    participants[_token][_participant] = _permission;\n\n    emit LogPermissionSet(_token, _participant, _permission);\n  }\n\n  /**\n   * @notice Set initial holding period for investor\n   * @param _token       token address\n   * @param _participant participant address\n   * @param _startDate   start date of holding period in UNIX format\n   */\n  function setHoldingPeriod(address _token, address _participant, uint256 _startDate) onlyAdmins public {\n    settings[_token].holdingPeriod[_participant] = _startDate;\n\n    emit LogHoldingPeriod(_token, _participant, _startDate);\n  }\n\n  /**\n   * @dev Allows the owner to transfer admin controls to newAdmin.\n   *\n   * @param newAdmin The address to transfer admin rights to.\n   */\n  function transferAdmin(address newAdmin) onlyOwner public {\n    require(newAdmin != address(0));\n\n    address oldAdmin = admin;\n    admin = newAdmin;\n\n    emit LogTransferAdmin(oldAdmin, newAdmin);\n  }\n\n  /**\n   * @notice Checks whether or not a trade should be approved\n   *\n   * @dev    This method calls back to the token contract specified by `_token` for\n   *         information needed to enforce trade approval if needed\n   *\n   * @param  _token The address of the token to be transfered\n   * @param  _spender The address of the spender of the token (unused in this implementation)\n   * @param  _from The address of the sender account\n   * @param  _to The address of the receiver account\n   * @param  _amount The quantity of the token to trade\n   *\n   * @return `true` if the trade should be approved and `false` if the trade should not be approved\n   */\n  function check(address _token, address _spender, address _from, address _to, uint256 _amount) public returns (uint8) {\n    if (settings[_token].locked) {\n      return CHECK_ELOCKED;\n    }\n\n    if (participants[_token][_from] & PERM_SEND == 0) {\n      return CHECK_ESEND;\n    }\n\n    if (participants[_token][_to] & PERM_RECEIVE == 0) {\n      return CHECK_ERECV;\n    }\n\n    if (!settings[_token].partialTransfers && _amount % _wholeToken(_token) != 0) {\n      return CHECK_EDIVIS;\n    }\n\n    if (settings[_token].holdingPeriod[_from] + YEAR >= now) {\n      return CHECK_EHOLDING_PERIOD;\n    }\n\n    if (_amount < MINIMAL_TRANSFER) {\n      return CHECK_EDECIMALS;\n    }\n\n    return CHECK_SUCCESS;\n  }\n\n  /**\n   * @notice Returns the error message for a passed failed check reason\n   *\n   * @param  _reason The reason code: 0 means success.  Non-zero values are left to the implementation\n   *                 to assign meaning.\n   *\n   * @return The human-readable mesage string\n   */\n  function messageForReason (uint8 _reason) public pure returns (string) {\n    if (_reason == CHECK_ELOCKED) {\n      return ELOCKED_MESSAGE;\n    }\n    \n    if (_reason == CHECK_ESEND) {\n      return ESEND_MESSAGE;\n    }\n\n    if (_reason == CHECK_ERECV) {\n      return ERECV_MESSAGE;\n    }\n\n    if (_reason == CHECK_EDIVIS) {\n      return EDIVIS_MESSAGE;\n    }\n\n    if (_reason == CHECK_EHOLDING_PERIOD) {\n      return EHOLDING_PERIOD_MESSAGE;\n    }\n\n    if (_reason == CHECK_EDECIMALS) {\n      return EDECIMALS_MESSAGE;\n    }\n\n    return SUCCESS_MESSAGE;\n  }\n\n  /**\n   * @notice Retrieves the whole token value from a token that this `RegulatorService` manages\n   *\n   * @param  _token The token address of the managed token\n   *\n   * @return The uint256 value that represents a single whole token\n   */\n  function _wholeToken(address _token) view private returns (uint256) {\n    return uint256(10)**DetailedERC20(_token).decimals();\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_permission\",\"type\":\"uint8\"}],\"name\":\"setPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setPartialTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"setHoldingPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMAL_TRANSFER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_reason\",\"type\":\"uint8\"}],\"name\":\"messageForReason\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"LogLockSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"LogPartialTransferSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"LogPermissionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"LogTransferAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"LogHoldingPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611524806100a16000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305204231146100bf578063715018a61461012f57806375829def14610146578063803fcd431461018957806389ad0a34146102505780638da5cb5b1461029f57806392f96115146102f65780639f11fda414610345578063c5fbeb4e146103b2578063d7fb8dc0146103dd578063f2fde38b14610486578063f851a440146104c9575b600080fd5b3480156100cb57600080fd5b5061012d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190505050610520565b005b34801561013b57600080fd5b506101446106d8565b005b34801561015257600080fd5b50610187600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107da565b005b34801561019557600080fd5b50610234600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610937565b604051808260ff1660ff16815260200191505060405180910390f35b34801561025c57600080fd5b5061029d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610c13565b005b3480156102ab57600080fd5b506102b4610d1e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030257600080fd5b50610343600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610d43565b005b34801561035157600080fd5b506103b0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e4e565b005b3480156103be57600080fd5b506103c7610fef565b6040518082815260200191505060405180910390f35b3480156103e957600080fd5b5061040b600480360381019080803560ff169060200190929190505050610ff8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561044b578082015181840152602081019050610430565b50505050905090810190601f1680156104785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561049257600080fd5b506104c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112c3565b005b3480156104d557600080fd5b506104de61132a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105c857506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156105d357600080fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f79ce3a32c049677f0da6a41a1035fc36947480d903cbae5f26118d5d5b96e7d883604051808260ff1660ff16815260200191505060405180910390a3505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561073357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561083757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561087357600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f0ad836e1614da10ff391cfc802a39f547f3cdc42900fa72de16b085855c169d560405160405180910390a35050565b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16156109975760019050610c0a565b60006001600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161660ff161415610a385760039050610c0a565b60006002600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161660ff161415610ad95760049050610c0a565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff16158015610b4a57506000610b3c87611350565b83811515610b4657fe5b0614155b15610b585760029050610c0a565b426301e13380600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101515610bef5760059050610c0a565b64e8d4a51000821015610c055760069050610c0a565b600090505b95945050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c6e57600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f0a12157eaf7bc78c797f32f0756efb6a90d605759d6e535a278033ec487d176682604051808215151515815260200191505060405180910390a25050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9e57600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f85d37ec694752aafe8ff3ea3fb045641ded9ae08224d069215d88722175a8db882604051808215151515815260200191505060405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ef657506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610f0157600080fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fe0a9c6d818f91e3727400a59e368b8e3310b0dc8472abbb4b0b9a7bb931e8025836040518082815260200191505060405180910390a3505050565b64e8d4a5100081565b6060600160ff168260ff161415611046576040805190810160405280600f81526020017f546f6b656e206973206c6f636b6564000000000000000000000000000000000081525090506112be565b600360ff168260ff1614156110b957606060405190810160405280602781526020017f53656e646572206973206e6f7420616c6c6f77656420746f2073656e6420746881526020017f6520746f6b656e0000000000000000000000000000000000000000000000000081525090506112be565b600460ff168260ff16141561112c57606060405190810160405280602c81526020017f5265636569766572206973206e6f7420616c6c6f77656420746f20726563656981526020017f76652074686520746f6b656e000000000000000000000000000000000000000081525090506112be565b600260ff168260ff16141561119f57606060405190810160405280602381526020017f546f6b656e2063616e206e6f74207472616465207061727469616c20616d6f7581526020017f6e7473000000000000000000000000000000000000000000000000000000000081525090506112be565b600560ff168260ff16141561121257606060405190810160405280602b81526020017f53656e646572206973207374696c6c20696e203132206d6f6e74687320686f6c81526020017f64696e6720706572696f6400000000000000000000000000000000000000000081525090506112be565b600660ff168260ff16141561128557606060405190810160405280603681526020017f5472616e736665722076616c7565206d7573742062652062696767657220746881526020017f616e20302e303030303031206f72203120737a61626f0000000000000000000081525090506112be565b6040805190810160405280600781526020017f537563636573730000000000000000000000000000000000000000000000000081525090505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131e57600080fd5b611327816113fe565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113b657600080fd5b505af11580156113ca573d6000803e3d6000fd5b505050506040513d60208110156113e057600080fd5b810190808051906020019092919050505060ff16600a0a9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561143a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a723058208f696ce505607219801a23456fec29a9fa25064d200d7a974dc3c1cd1d9276da0029"
}