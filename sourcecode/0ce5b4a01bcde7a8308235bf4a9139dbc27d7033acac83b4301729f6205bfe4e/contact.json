{
  "address": "0x4be45969e8f72ce085424913ac4fb916932d58d7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Escrow",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-16\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\ncontract EternalStorage is Ownable {\n\n    struct Storage {\n        mapping(uint256 => uint256) _uint;\n        mapping(uint256 => address) _address;\n    }\n\n    Storage internal s;\n    address allowed;\n\n    constructor(uint _rF, address _r, address _f, address _a, address _t)\n\n    public {\n        setAddress(0, _a);\n        setAddress(1, _r);\n        setUint(1, _rF);\n        setAddress(2, _f);\n        setAddress(3, _t);\n    }\n\n    modifier onlyAllowed() {\n        require(msg.sender == owner || msg.sender == allowed);\n        _;\n    }\n\n    function identify(address _address) external onlyOwner {\n        allowed = _address;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a\n     * newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        Ownable.transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Allows the owner to set a value for an unsigned integer variable.\n     * @param i Unsigned integer variable key\n     * @param v The value to be stored\n     */\n    function setUint(uint256 i, uint256 v) public onlyOwner {\n        s._uint[i] = v;\n    }\n\n    /**\n     * @dev Allows the owner to set a value for a address variable.\n     * @param i Unsigned integer variable key\n     * @param v The value to be stored\n     */\n    function setAddress(uint256 i, address v) public onlyOwner {\n        s._address[i] = v;\n    }\n\n    /**\n     * @dev Get the value stored of a uint variable by the hash name\n     * @param i Unsigned integer variable key\n     */\n    function getUint(uint256 i) external view onlyAllowed returns (uint256) {\n        return s._uint[i];\n    }\n\n    /**\n     * @dev Get the value stored of a address variable by the hash name\n     * @param i Unsigned integer variable key\n     */\n    function getAddress(uint256 i) external view onlyAllowed returns (address) {\n        return s._address[i];\n    }\n\n    function selfDestruct () external onlyOwner {\n        selfdestruct(owner);\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n\ncontract Escrow is Ownable {\n\n    enum transactionStatus {\n        Default,\n        Pending,\n        PendingR1,\n        PendingR2,\n        Completed,\n        Canceled}\n\n    struct Transaction {\n        transactionStatus status;\n        uint baseAmt;\n        uint txnAmt;\n        uint sellerFee;\n        uint buyerFee;\n        uint buyerBalance;\n        address buyer;\n        uint token;\n    }\n\n    mapping(address => Transaction) transactions;\n    mapping(address => uint) balance;\n    ERC20 base;\n    ERC20 token;\n    EternalStorage eternal;\n    uint rF;\n    address r;\n    address reserve;\n\n    constructor(ERC20 _base, address _s) public {\n\n        base = _base;\n        eternal = EternalStorage(_s);\n\n    }\n\n    modifier onlyAllowed() {\n        require(msg.sender == owner || msg.sender == eternal.getAddress(0));\n        _;\n    }\n\n    function createTransaction (\n\n        address _tag,\n        uint _baseAmt,\n        uint _txnAmt,\n        uint _sellerFee,\n        uint _buyerFee) external payable {\n\n        Transaction storage transaction = transactions[_tag];\n        require(transaction.buyer == 0x0);\n        transactions[_tag] =\n        Transaction(\n            transactionStatus.Pending,\n            _baseAmt,\n            _txnAmt,\n            _sellerFee,\n            _buyerFee,\n            0,\n            msg.sender,\n            0);\n\n        uint buyerTotal = _txnAmt + _buyerFee;\n        require(transaction.buyerBalance + msg.value == buyerTotal);\n        transaction.buyerBalance += msg.value;\n        balance[msg.sender] += msg.value;\n    }\n\n    function createTokenTransaction (\n\n        address _tag,\n        uint _baseAmt,\n        uint _txnAmt,\n        uint _sellerFee,\n        uint _buyerFee,\n        address _buyer,\n        uint _token) external onlyAllowed {\n\n        require(_token != 0);\n        require(eternal.getAddress(_token) != 0x0);\n        Transaction storage transaction = transactions[_tag];\n        require(transaction.buyer == 0x0);\n        transactions[_tag] =\n        Transaction(\n            transactionStatus.Pending,\n            _baseAmt,\n            _txnAmt,\n            _sellerFee,\n            _buyerFee,\n            0,\n            _buyer,\n            _token);\n\n        uint buyerTotal = _txnAmt + _buyerFee;\n        token = ERC20(eternal.getAddress(_token));\n        token.transferFrom(_buyer, address(this), buyerTotal);\n        transaction.buyerBalance += buyerTotal;\n    }\n\n    function release(address _tag) external onlyAllowed {\n        releaseFunds(_tag);\n    }\n\n    function releaseFunds (address _tag) private {\n        Transaction storage transaction = transactions[_tag];\n        require(transaction.status == transactionStatus.Pending);\n        uint buyerTotal = transaction.txnAmt + transaction.buyerFee;\n        uint buyerBalance = transaction.buyerBalance;\n        transaction.buyerBalance = 0;\n        require(buyerTotal == buyerBalance);\n        base.transferFrom(_tag, transaction.buyer, transaction.baseAmt);\n        uint totalFees = transaction.buyerFee + transaction.sellerFee;\n        uint sellerTotal = transaction.txnAmt - transaction.sellerFee;\n        transaction.txnAmt = 0;\n        transaction.sellerFee = 0;\n        if (transaction.token == 0) {\n            _tag.transfer(sellerTotal);\n            owner.transfer(totalFees);\n        } else {\n            token = ERC20(eternal.getAddress(transaction.token));\n            token.transfer(_tag, sellerTotal);\n            token.transfer(owner, totalFees);\n        }\n\n        transaction.status = transactionStatus.PendingR1;\n        recovery(_tag);\n    }\n\n    function recovery(address _tag) private {\n        r1(_tag);\n        r2(_tag);\n    }\n\n    function r1 (address _tag) private {\n        Transaction storage transaction = transactions[_tag];\n        require(transaction.status == transactionStatus.PendingR1);\n        transaction.status = transactionStatus.PendingR2;\n        base.transferFrom(reserve, _tag, rF);\n    }\n\n    function r2 (address _tag) private {\n        Transaction storage transaction = transactions[_tag];\n        require(transaction.status == transactionStatus.PendingR2);\n        transaction.buyer = 0x0;\n        transaction.status = transactionStatus.Completed;\n        base.transferFrom(_tag, r, rF);\n    }\n\n    function cancel (address _tag) external onlyAllowed {\n        Transaction storage transaction = transactions[_tag];\n        if (transaction.token == 0) {\n            cancelTransaction(_tag);\n        } else {\n            cancelTokenTransaction(_tag);\n        }\n    }\n\n    function cancelTransaction (address _tag) private {\n        Transaction storage transaction = transactions[_tag];\n        require(transaction.status == transactionStatus.Pending);\n        uint refund = transaction.buyerBalance;\n        transaction.buyerBalance = 0;\n        address buyer = transaction.buyer;\n        transaction.buyer = 0x0;\n        buyer.transfer(refund);\n        transaction.status = transactionStatus.Canceled;\n    }\n\n    function cancelTokenTransaction (address _tag) private {\n        Transaction storage transaction = transactions[_tag];\n        require(transaction.status == transactionStatus.Pending);\n        token = ERC20(eternal.getAddress(transaction.token));\n        uint refund = transaction.buyerBalance;\n        transaction.buyerBalance = 0;\n        address buyer = transaction.buyer;\n        transaction.buyer = 0x0;\n        token.transfer(buyer, refund);\n        transaction.status = transactionStatus.Canceled;\n    }\n\n    function resync () external onlyOwner {\n        rF = eternal.getUint(1);\n        r = eternal.getAddress(1);\n        reserve = eternal.getAddress(2);\n    }\n\n    function selfDestruct () external onlyOwner {\n        selfdestruct(owner);\n    }\n\n    function status (address _tag) external view onlyOwner returns (\n        transactionStatus _status,\n        uint _baseAmt,\n        uint _txnAmt,\n        uint _sellerFee,\n        uint _buyerFee,\n        uint _buyerBalance,\n        address _buyer,\n        uint _token) {\n\n        Transaction storage transaction = transactions[_tag];\n        return (\n        transaction.status,\n        transaction.baseAmt,\n        transaction.txnAmt,\n        transaction.sellerFee,\n        transaction.buyerFee,\n        transaction.buyerBalance,\n        transaction.buyer,\n        transaction.token\n        );\n    }\n\n    function getAddress (uint i) external view onlyAllowed returns (address) {\n        return eternal.getAddress(i);\n    }\n\n    function variables () external view onlyAllowed returns (\n        address,\n        address,\n        address,\n        uint) {\n\n        address p = eternal.getAddress(0);\n        return (p, r, reserve, rF);\n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000419c4db4b9e25d6db2ad9691ccb832c8d9fda05e00000000000000000000000081c8213193b12b8b4781d20a251a24a137a9c9e6"
}