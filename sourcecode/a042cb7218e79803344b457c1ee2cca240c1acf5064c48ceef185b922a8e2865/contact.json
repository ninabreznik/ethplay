{
  "address": "0x3ccb44b8543fac6d1a444fd3576a4a2e40cafa20",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ABCCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-07\n*/\n\npragma solidity ^0.4.24;\n\n\nlibrary SafeMath {\n\n/**\n* @dev Multiplies two unsigned integers, reverts on overflow.\n*/\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\n\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\t// benefit is lost if 'b' is also tested.\n\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\n        if (_a == 0) {\n            return 0;\n\t}\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n/**\n* @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n*/\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n        require(_b > 0);\n        uint256 c = _a / _b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n/**\n* @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n*/\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n/**\n* @dev Adds two unsigned integers, reverts on overflow.\n*/\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n\n/**\n* @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n* reverts when dividing by zero.\n*/\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n\n}\n\n\n/*\n* Ownable\n*\n* Base contract with an owner.\n* Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n*/\n\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n        newOwner = address(0);\n    }\n\n// allows execution by the owner only\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyNewOwner() {\n        require(msg.sender != address(0));\n        require(msg.sender == newOwner);\n        _;\n    }\n\n/**\n*@dev allows transferring the contract ownership\n*the new owner still needs to accept the transfer\n*can only be called by the contract owner\n*@param _newOwner new contract owner\n*/\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;\n    }\n\n/**\n*@dev used by a new owner to accept an ownership transfer\n*/\n\n    function acceptOwnership() public onlyNewOwner returns(bool) {\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n/*\n*ERC20 Token interface\n*/\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ninterface TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n}\n\n\ncontract ABCCoin is ERC20, Ownable {\n    using SafeMath for uint256;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 internal initialSupply;\n    uint256 internal totalSupply_;\n    mapping(address => uint256) internal balances;\n    mapping(address => bool) public frozen;\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    event Burn(address indexed owner, uint256 value);\n    event Mint(uint256 value);\n    event Freeze(address indexed holder);\n    event Unfreeze(address indexed holder);\n\n    modifier notFrozen(address _holder) {\n        require(!frozen[_holder]);\n        _;\n    }\n\n    constructor() public {\n        name = \"ABCCoin\";\n        symbol = \"ABC\";\n        decimals = 0;\n        initialSupply = 10000000000;\n        totalSupply_ = 10000000000;\n        balances[owner] = totalSupply_;\n        emit Transfer(address(0), owner, totalSupply_);\n    }\n\n    function() public payable {\n        revert();\n    }\n\n/**\n* @dev Total number of tokens in existence\n*/\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n/**\n* @dev Transfer token for a specified addresses\n* @param _from The address to transfer from.\n* @param _to The address to transfer to.\n* @param _value The amount to be transferred.\n*/\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n    }\n\n/**\n* @dev Transfer token for a specified address\n* @param _to The address to transfer to.\n* @param _value The amount to be transferred.\n*/\n\n    function transfer(address _to, uint256 _value) public notFrozen(msg.sender) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n/**\n* @dev Gets the balance of the specified address.\n* @param _holder The address to query the balance of.\n* @return An uint256 representing the amount owned by the passed address.\n*/\n\n    function balanceOf(address _holder) public view returns (uint256 balance) {\n        return balances[_holder];\n    }\n\n/**\n* ERC20 Token Transfer\n*/\n\n    function sendwithgas (address _from, address _to, uint256 _value, uint256 _fee) public notFrozen(_from) returns (bool) {\n        uint256 _total;\n        _total = _value.add(_fee);\n        require(_to != address(0));\n        require(_total <= balances[_from]);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        balances[_from] = balances[_from].sub(_total);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        emit Transfer(_from, msg.sender, _fee);\n        //require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to])\n        return true;\n    }\n\n/**\n* @dev Transfer tokens from one address to another.\n* Note that while this function emits an Approval event, this is not required as per the specification,\n* and other compliant implementations may not emit the event.\n* @param _from address The address which you want to send tokens from\n* @param _to address The address which you want to transfer to\n* @param _value uint256 the amount of tokens to be transferred\n*/\n\n    function transferFrom(address _from, address _to, uint256 _value) public notFrozen(_from) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n/**\n* @dev Approve the passed address to _spender the specified amount of tokens on behalf of msg.sender.\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n* @param _spender The address which will spend the funds.\n* @param _value The amount of tokens to be spent.\n*/\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n/**\n* @dev Function to check the amount of tokens that an _holder allowed to a spender.\n* @param _holder address The address which owns the funds.\n* @param _spender address The address which will spend the funds.\n* @return A uint256 specifying the amount of tokens still available for the spender.\n*/\n\n    function allowance(address _holder, address _spender) public view returns (uint256) {\n        return allowed[_holder][_spender];\n    }\n\n/**\n* Freeze Account.\n*/\n\n    function freezeAccount(address _holder) public onlyOwner returns (bool) {\n        require(!frozen[_holder]);\n        frozen[_holder] = true;\n        emit Freeze(_holder);\n        return true;\n    }\n\n/**\n* Unfreeze Account.\n*/\n\n    function unfreezeAccount(address _holder) public onlyOwner returns (bool) {\n        require(frozen[_holder]);\n        frozen[_holder] = false;\n        emit Unfreeze(_holder);\n        return true;\n    }\n\n/**\n* Token Burn.\n*/\n\n    function burn(uint256 _value) public onlyOwner returns (bool) {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n        emit Transfer(burner, address(0), _value);\n        return true;\n    }\n\n/**\n* Token Mint.\n*/\n\n    function mint(uint256 _amount) public onlyOwner returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[owner] = balances[owner].add(_amount);\n        emit Transfer(address(0), owner, _amount);\n        return true;\n    }\n\n/**\n* @dev Internal function to determine if an address is a contract\n* @param addr The address being queried\n* @return True if `_addr` is a contract\n*/\n\n    function isContract(address addr) internal view returns (bool) {\n        uint size;\n        assembly{size := extcodesize(addr)}\n        return size > 0;\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a031990811633179091556001805490911690556040805180820190915260078082527f414243436f696e0000000000000000000000000000000000000000000000000060209092019182526100739160029161012d565b506040805180820190915260038082527f414243000000000000000000000000000000000000000000000000000000000060209092019182526100b6918161012d565b506004805460ff191690556402540be4006005819055600681905560008054600160a060020a0390811682526007602090815260408084208590558354815195865290519216937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a36101c8565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016e57805160ff191683800117855561019b565b8280016001018555821561019b579182015b8281111561019b578251825591602001919060010190610180565b506101a79291506101ab565b5090565b6101c591905b808211156101a757600081556001016101b1565b90565b610e7880620001d86000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b31461019557806318160ddd146101cd57806323b872dd146101f4578063313ce5671461021e57806342966c6814610249578063614552991461026157806370a082311461028e578063788649ea146102af57806379ba5097146102d05780638da5cb5b146102e557806395d89b4114610316578063a0712d681461032b578063a9059cbb14610343578063d051665014610367578063d4ee1d9014610388578063dd62ed3e1461039d578063f26c159f146103c4578063f2fde38b146103e5575b600080fd5b34801561011757600080fd5b50610120610408565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a157600080fd5b506101b9600160a060020a0360043516602435610493565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101e26104f9565b60408051918252519081900360200190f35b34801561020057600080fd5b506101b9600160a060020a03600435811690602435166044356104ff565b34801561022a57600080fd5b506102336105a7565b6040805160ff9092168252519081900360200190f35b34801561025557600080fd5b506101b96004356105b0565b34801561026d57600080fd5b506101b9600160a060020a03600435811690602435166044356064356106ad565b34801561029a57600080fd5b506101e2600160a060020a036004351661082a565b3480156102bb57600080fd5b506101b9600160a060020a0360043516610845565b3480156102dc57600080fd5b506101b96108d2565b3480156102f157600080fd5b506102fa610966565b60408051600160a060020a039092168252519081900360200190f35b34801561032257600080fd5b50610120610975565b34801561033757600080fd5b506101b96004356109d0565b34801561034f57600080fd5b506101b9600160a060020a0360043516602435610a75565b34801561037357600080fd5b506101b9600160a060020a0360043516610b65565b34801561039457600080fd5b506102fa610b7a565b3480156103a957600080fd5b506101e2600160a060020a0360043581169060243516610b89565b3480156103d057600080fd5b506101b9600160a060020a0360043516610bb4565b3480156103f157600080fd5b50610406600160a060020a0360043516610c43565b005b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561048b5780601f106104605761010080835404028352916020019161048b565b820191906000526020600020905b81548152906001019060200180831161046e57829003601f168201915b505050505081565b336000818152600960209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60065490565b600160a060020a038316600090815260086020526040812054849060ff161561052757600080fd5b600160a060020a038416151561053c57600080fd5b600160a060020a03851660009081526007602052604090205483111561056157600080fd5b600160a060020a038516600090815260096020908152604080832033845290915290205483111561059157600080fd5b61059c858585610c9e565b506001949350505050565b60045460ff1681565b600080548190600160a060020a031633146105ca57600080fd5b336000908152600760205260409020548311156105e657600080fd5b5033600081815260076020526040902054610607908463ffffffff610dfe16565b600160a060020a038216600090815260076020526040902055600654610633908463ffffffff610dfe16565b600655604080518481529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518481529051600091600160a060020a03841691600080516020610e2d8339815191529181900360200190a350600192915050565b600160a060020a0384166000908152600860205260408120548190869060ff16156106d757600080fd5b6106e7858563ffffffff610e1316565b9150600160a060020a03861615156106fe57600080fd5b600160a060020a03871660009081526007602052604090205482111561072357600080fd5b33600090815260076020526040902054610743908563ffffffff610e1316565b3360009081526007602052604080822092909255600160a060020a03891681522054610775908363ffffffff610dfe16565b600160a060020a0380891660009081526007602052604080822093909355908816815220546107aa908663ffffffff610e1316565b600160a060020a0380881660008181526007602090815260409182902094909455805189815290519193928b1692600080516020610e2d83398151915292918290030190a36040805185815290513391600160a060020a038a1691600080516020610e2d8339815191529181900360200190a35060019695505050505050565b600160a060020a031660009081526007602052604090205490565b60008054600160a060020a0316331461085d57600080fd5b600160a060020a03821660009081526008602052604090205460ff16151561088457600080fd5b600160a060020a038216600081815260086020526040808220805460ff19169055517fca5069937e68fd197927055037f59d7c90bf75ac104e6e375539ef480c3ad6ee9190a2506001919050565b60003315156108e057600080fd5b600154600160a060020a031633146108f757600080fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36001546000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390921691909117905590565b600054600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561048b5780601f106104605761010080835404028352916020019161048b565b60008054600160a060020a031633146109e857600080fd5b6006546109fb908363ffffffff610e1316565b60065560008054600160a060020a0316815260076020526040902054610a27908363ffffffff610e1316565b60008054600160a060020a03908116825260076020908152604080842094909455825484518781529451921693600080516020610e2d833981519152929081900390910190a3506001919050565b3360008181526008602052604081205490919060ff1615610a9557600080fd5b600160a060020a0384161515610aaa57600080fd5b33600090815260076020526040902054831115610ac657600080fd5b33600090815260076020526040902054610ae6908463ffffffff610dfe16565b3360009081526007602052604080822092909255600160a060020a03861681522054610b18908463ffffffff610e1316565b600160a060020a038516600081815260076020908152604091829020939093558051868152905191923392600080516020610e2d8339815191529281900390910190a35060019392505050565b60086020526000908152604090205460ff1681565b600154600160a060020a031681565b600160a060020a03918216600090815260096020908152604080832093909416825291909152205490565b60008054600160a060020a03163314610bcc57600080fd5b600160a060020a03821660009081526008602052604090205460ff1615610bf257600080fd5b600160a060020a038216600081815260086020526040808220805460ff19166001179055517faf85b60d26151edd11443b704d424da6c43d0468f2235ebae3d1904dbc3230499190a2506001919050565b600054600160a060020a03163314610c5a57600080fd5b600160a060020a0381161515610c6f57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382161515610cb357600080fd5b600160a060020a038316600090815260076020526040902054811115610cd857600080fd5b600160a060020a0383166000908152600960209081526040808320338452909152902054811115610d0857600080fd5b600160a060020a038316600090815260076020526040902054610d31908263ffffffff610dfe16565b600160a060020a038085166000908152600760205260408082209390935590841681522054610d66908263ffffffff610e1316565b600160a060020a038084166000908152600760209081526040808320949094559186168152600982528281203382529091522054610daa908263ffffffff610dfe16565b600160a060020a0380851660008181526009602090815260408083203384528252918290209490945580518581529051928616939192600080516020610e2d833981519152929181900390910190a3505050565b600082821115610e0d57600080fd5b50900390565b600082820183811015610e2557600080fd5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820c0e364a6c689cf8a7fe92f9e1ad6c06e98e6ebe6cc7cb92f26e63a0780d060d30029"
}