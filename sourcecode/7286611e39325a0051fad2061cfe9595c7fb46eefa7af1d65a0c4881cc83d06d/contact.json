{
  "address": "0x37304b0ab297f13f5520c523102797121182fb5b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SportCrypt",
  "contractName": "SportCrypt",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-19\n*/\n\npragma solidity ^0.4.18;\n\ncontract SportCrypt {\n    address private owner;\n    mapping(address => bool) private admins;\n\n    function SportCrypt() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function changeOwner(address newOwner) external onlyOwner {\n        owner = newOwner;\n    }\n\n    function addAdmin(address addr) external onlyOwner {\n        admins[addr] = true;\n    }\n\n    function removeAdmin(address addr) external onlyOwner {\n        admins[addr] = false;\n    }\n\n\n    // Events\n\n    event LogBalanceChange(address indexed account, uint oldAmount, uint newAmount);\n    event LogDeposit(address indexed account);\n    event LogWithdraw(address indexed account);\n    event LogTrade(address indexed takerAccount, address indexed makerAccount, uint indexed matchId, uint orderHash, uint8 orderDirection, uint8 price, uint longAmount, int newLongPosition, uint shortAmount, int newShortPosition);\n    event LogTradeError(address indexed takerAccount, address indexed makerAccount, uint indexed matchId, uint orderHash, uint16 status);\n    event LogOrderCancel(address indexed account, uint indexed matchId, uint orderHash);\n    event LogFinalizeMatch(uint indexed matchId, uint8 finalPrice);\n    event LogClaim(address indexed account, uint indexed matchId, uint amount);\n\n\n    // Storage\n\n    struct Match {\n        mapping(address => int) positions;\n        uint64 firstTradeTimestamp;\n        bool finalized;\n        uint8 finalPrice;\n    }\n\n    mapping(address => uint) private balances;\n    mapping(uint => Match) private matches;\n    mapping(uint => uint) private filledAmounts;\n\n\n    // Memory\n\n    uint constant MAX_SANE_AMOUNT = 2**128;\n\n    enum Status {\n        OK,\n        MATCH_FINALIZED,\n        ORDER_EXPIRED,\n        ORDER_MALFORMED,\n        ORDER_BAD_SIG,\n        AMOUNT_MALFORMED,\n        SELF_TRADE,\n        ZERO_VALUE_TRADE\n    }\n\n    struct Order {\n        uint orderHash;\n        uint matchId;\n        uint amount;\n        uint expiry;\n        address addr;\n        uint8 price;\n        uint8 direction;\n    }\n\n    // [0]: match hash\n    // [1]: amount\n    // [2]: 5-byte expiry, 5-byte nonce, 1-byte price, 1-byte direction, 20-byte address\n\n    function parseOrder(uint[3] memory rawOrder) private constant returns(Order memory o) {\n        o.orderHash = uint(keccak256(this, rawOrder));\n\n        o.matchId = rawOrder[0];\n        o.amount = rawOrder[1];\n\n        uint packed = rawOrder[2];\n        o.expiry = packed >> (8*27);\n        o.addr = address(packed & 0x00ffffffffffffffffffffffffffffffffffffffff);\n        o.price = uint8((packed >> (8*21)) & 0xff);\n        o.direction = uint8((packed >> (8*20)) & 0xff);\n    }\n\n    function validateOrderParams(Order memory o) private pure returns(bool) {\n        if (o.amount > MAX_SANE_AMOUNT) return false;\n        if (o.price == 0 || o.price > 99) return false;\n        if (o.direction > 1) return false;\n        return true;\n    }\n\n    function validateOrderSig(Order memory o, bytes32 r, bytes32 s, uint8 v) private pure returns(bool) {\n        if (ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", o.orderHash), v, r, s) != o.addr) return false;\n        return true;\n    }\n\n    struct Trade {\n        Status status;\n        address longAddr;\n        address shortAddr;\n        int newLongPosition;\n        int newShortPosition;\n        int longBalanceDelta;\n        int shortBalanceDelta;\n        uint shortAmount;\n        uint longAmount;\n    }\n\n\n    // User methods\n\n    function() external payable {\n        revert();\n    }\n\n    function deposit() external payable {\n        if (msg.value > 0) {\n            uint origAmount = balances[msg.sender];\n            uint newAmount = safeAdd(origAmount, msg.value);\n            balances[msg.sender] = newAmount;\n\n            LogDeposit(msg.sender);\n            LogBalanceChange(msg.sender, origAmount, newAmount);\n        }\n    }\n\n    function withdraw(uint amount) external {\n        uint origAmount = balances[msg.sender];\n        uint amountToWithdraw = minu256(origAmount, amount);\n\n        if (amountToWithdraw > 0) {\n            uint newAmount = origAmount - amountToWithdraw;\n            balances[msg.sender] = newAmount;\n\n            LogWithdraw(msg.sender);\n            LogBalanceChange(msg.sender, origAmount, newAmount);\n\n            msg.sender.transfer(amountToWithdraw);\n        }\n    }\n\n    function cancelOrder(uint[3] order, bytes32 r, bytes32 s, uint8 v) external {\n        Order memory o = parseOrder(order);\n\n        // Don't bother validating order params.\n        require(validateOrderSig(o, r, s, v));\n        require(o.addr == msg.sender);\n\n        if (block.timestamp < o.expiry) {\n            filledAmounts[o.orderHash] = o.amount;\n            LogOrderCancel(msg.sender, o.matchId, o.orderHash);\n        }\n    }\n\n    function trade(uint amount, uint[3] order, bytes32 r, bytes32 s, uint8 v) external {\n        Order memory o = parseOrder(order);\n\n        if (!validateOrderParams(o)) {\n            LogTradeError(msg.sender, o.addr, o.matchId, o.orderHash, uint16(Status.ORDER_MALFORMED));\n            return;\n        }\n\n        if (!validateOrderSig(o, r, s, v)) {\n            LogTradeError(msg.sender, o.addr, o.matchId, o.orderHash, uint16(Status.ORDER_BAD_SIG));\n            return;\n        }\n\n        Trade memory t = tradeCore(amount, o);\n\n        if (t.status != Status.OK) {\n            LogTradeError(msg.sender, o.addr, o.matchId, o.orderHash, uint16(t.status));\n            return;\n        }\n\n        // Modify storage to reflect trade:\n\n        var m = matches[o.matchId];\n\n        if (m.firstTradeTimestamp == 0) {\n            assert(block.timestamp > 0);\n            m.firstTradeTimestamp = uint64(block.timestamp);\n        }\n\n        m.positions[t.longAddr] = t.newLongPosition;\n        m.positions[t.shortAddr] = t.newShortPosition;\n\n        adjustBalance(t.longAddr, t.longBalanceDelta);\n        adjustBalance(t.shortAddr, t.shortBalanceDelta);\n\n        filledAmounts[o.orderHash] += (o.direction == 0 ? t.shortAmount : t.longAmount);\n\n        LogTrade(msg.sender, o.addr, o.matchId, o.orderHash, o.direction, o.price, t.longAmount, t.newLongPosition, t.shortAmount, t.newShortPosition);\n    }\n\n    function claim(uint matchId, uint8 finalPrice, bytes32 r, bytes32 s, uint8 v) external {\n        var m = matches[matchId];\n\n        if (m.finalized) {\n            require(m.finalPrice == finalPrice);\n        } else {\n            uint messageHash = uint(keccak256(this, matchId, finalPrice));\n            address signer = ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", messageHash), v, r, s);\n            require(admins[signer]);\n            require(finalPrice <= 100);\n\n            m.finalized = true;\n            m.finalPrice = finalPrice;\n            LogFinalizeMatch(matchId, finalPrice);\n        }\n\n        // NOTE: final prices other than 0 and 100 may leave very small amounts of unrecoverable dust in the contract due to rounding.\n\n        int delta = 0;\n        int senderPosition = m.positions[msg.sender];\n\n        if (senderPosition > 0) {\n            delta = priceDivide(senderPosition, finalPrice);\n        } else if (senderPosition < 0) {\n            delta = priceDivide(-senderPosition, 100 - finalPrice);\n        } else {\n            return;\n        }\n\n        assert(delta >= 0);\n\n        m.positions[msg.sender] = 0;\n        adjustBalance(msg.sender, delta);\n\n        LogClaim(msg.sender, matchId, uint(delta));\n    }\n\n    function recoverFunds(uint matchId) external {\n        var m = matches[matchId];\n\n        if (m.finalized || m.firstTradeTimestamp == 0) {\n            return;\n        }\n\n        uint recoveryTimestamp = uint(m.firstTradeTimestamp) + ((matchId & 0xFF) * 7 * 86400);\n\n        if (uint(block.timestamp) > recoveryTimestamp) {\n            uint8 finalPrice = uint8((matchId & 0xFF00) >> 8);\n            require(finalPrice <= 100);\n\n            m.finalized = true;\n            m.finalPrice = finalPrice;\n            LogFinalizeMatch(matchId, finalPrice);\n        }\n    }\n\n\n    // Private utilities\n\n    function adjustBalance(address addr, int delta) private {\n        uint origAmount = balances[addr];\n        uint newAmount = delta >= 0 ? safeAdd(origAmount, uint(delta)) : safeSub(origAmount, uint(-delta));\n        balances[addr] = newAmount;\n\n        LogBalanceChange(addr, origAmount, newAmount);\n    }\n\n    function priceDivide(int amount, uint8 price) private pure returns(int) {\n        assert(amount >= 0);\n        return int(safeMul(uint(amount), price) / 100);\n    }\n\n    function computeEffectiveBalance(uint balance, int position, uint8 price, bool isLong) private pure returns(uint) {\n        uint effectiveBalance = balance;\n\n        if (isLong) {\n            if (position < 0) effectiveBalance += uint(priceDivide(-position, price));\n        } else {\n            if (position > 0) effectiveBalance += uint(priceDivide(position, 100 - price));\n        }\n\n        return effectiveBalance;\n    }\n\n    function computePriceWeightedAmounts(uint longAmount, uint shortAmount, uint price) private pure returns(uint, uint) {\n        uint totalLongAmount;\n        uint totalShortAmount;\n\n        totalLongAmount = longAmount + (safeMul(longAmount, 100 - price) / price);\n        totalShortAmount = shortAmount + (safeMul(shortAmount, price) / (100 - price));\n\n        if (totalLongAmount > totalShortAmount) {\n            return (totalShortAmount - shortAmount, shortAmount);\n        } else {\n            return (longAmount, totalLongAmount - longAmount);\n        }\n    }\n\n    function computeExposureDelta(int longBalanceDelta, int shortBalanceDelta, int oldLongPosition, int newLongPosition, int oldShortPosition, int newShortPosition) private pure returns(int) {\n        int positionDelta = 0;\n        if (newLongPosition > 0) positionDelta += newLongPosition - max256(0, oldLongPosition);\n        if (oldShortPosition > 0) positionDelta -= oldShortPosition - max256(0, newShortPosition);\n\n        return positionDelta + longBalanceDelta + shortBalanceDelta;\n    }\n\n    function tradeCore(uint amount, Order memory o) private constant returns(Trade t) {\n        var m = matches[o.matchId];\n\n        if (block.timestamp >= o.expiry) {\n            t.status = Status.ORDER_EXPIRED;\n            return;\n        }\n\n        if (m.finalized) {\n            t.status = Status.MATCH_FINALIZED;\n            return;\n        }\n\n        if (msg.sender == o.addr) {\n            t.status = Status.SELF_TRADE;\n            return;\n        }\n\n        if (amount > MAX_SANE_AMOUNT) {\n            t.status = Status.AMOUNT_MALFORMED;\n            return;\n        }\n\n        t.status = Status.OK;\n\n\n        uint longAmount;\n        uint shortAmount;\n\n        if (o.direction == 0) {\n            // maker short, taker long\n            t.longAddr = msg.sender;\n            longAmount = amount;\n\n            t.shortAddr = o.addr;\n            shortAmount = safeSub(o.amount, filledAmounts[o.orderHash]);\n        } else {\n            // maker long, taker short \n            t.longAddr = o.addr;\n            longAmount = safeSub(o.amount, filledAmounts[o.orderHash]);\n\n            t.shortAddr = msg.sender;\n            shortAmount = amount;\n        }\n\n        int oldLongPosition = m.positions[t.longAddr];\n        int oldShortPosition = m.positions[t.shortAddr];\n\n        longAmount = minu256(longAmount, computeEffectiveBalance(balances[t.longAddr], oldLongPosition, o.price, true));\n        shortAmount = minu256(shortAmount, computeEffectiveBalance(balances[t.shortAddr], oldShortPosition, o.price, false));\n\n        (longAmount, shortAmount) = computePriceWeightedAmounts(longAmount, shortAmount, o.price);\n\n        if (longAmount == 0 || shortAmount == 0) {\n            t.status = Status.ZERO_VALUE_TRADE;\n            return;\n        }\n\n\n        int newLongPosition = oldLongPosition + (int(longAmount) + int(shortAmount));\n        int newShortPosition = oldShortPosition - (int(longAmount) + int(shortAmount));\n\n\n        t.longBalanceDelta = 0;\n        t.shortBalanceDelta = 0;\n\n        if (oldLongPosition < 0) t.longBalanceDelta += priceDivide(-oldLongPosition + min256(0, newLongPosition), 100 - o.price);\n        if (newLongPosition > 0) t.longBalanceDelta -= priceDivide(newLongPosition - max256(0, oldLongPosition), o.price);\n\n        if (oldShortPosition > 0) t.shortBalanceDelta += priceDivide(oldShortPosition - max256(0, newShortPosition), o.price);\n        if (newShortPosition < 0) t.shortBalanceDelta -= priceDivide(-newShortPosition + min256(0, oldShortPosition), 100 - o.price);\n\n        int exposureDelta = computeExposureDelta(t.longBalanceDelta, t.shortBalanceDelta, oldLongPosition, newLongPosition, oldShortPosition, newShortPosition);\n\n        if (exposureDelta != 0) {\n            if (exposureDelta == 1) {\n                newLongPosition--;\n                newShortPosition++;\n            } else if (exposureDelta == -1) {\n                t.longBalanceDelta++; // one left-over wei: arbitrarily give it to long\n            } else {\n                assert(false);\n            }\n\n            exposureDelta = computeExposureDelta(t.longBalanceDelta, t.shortBalanceDelta, oldLongPosition, newLongPosition, oldShortPosition, newShortPosition);\n            assert(exposureDelta == 0);\n        }\n\n\n        t.newLongPosition = newLongPosition;\n        t.newShortPosition = newShortPosition;\n        t.shortAmount = shortAmount;\n        t.longAmount = longAmount;\n    }\n\n\n    // External views\n\n    function getOwner() external view returns(address) {\n        return owner;\n    }\n\n    function isAdmin(address addr) external view returns(bool) {\n        return admins[addr];\n    }\n\n    function getBalance(address addr) external view returns(uint) {\n        return balances[addr];\n    }\n\n    function getMatchInfo(uint matchId) external view returns(uint64, bool, uint8) {\n        var m = matches[matchId];\n        return (m.firstTradeTimestamp, m.finalized, m.finalPrice);\n    }\n\n    function getPosition(uint matchId, address addr) external view returns(int) {\n        return matches[matchId].positions[addr];\n    }\n\n    function getFilledAmount(uint orderHash) external view returns(uint) {\n        return filledAmounts[orderHash];\n    }\n\n    function checkMatchBatch(address myAddr, uint[16] matchIds) external view returns(int[16] myPosition, bool[16] finalized, uint8[16] finalPrice) {\n        for (uint i = 0; i < 16; i++) {\n            if (matchIds[i] == 0) break;\n\n            var m = matches[matchIds[i]];\n\n            myPosition[i] = m.positions[myAddr];\n            finalized[i] = m.finalized;\n            finalPrice[i] = m.finalPrice;\n        }\n    }\n\n    function checkOrderBatch(uint[48] input) external view returns(uint16[16] status, uint[16] amount) {\n        for (uint i = 0; i < 16; i++) {\n            uint[3] memory rawOrder;\n            rawOrder[0] = input[(i*3)];\n            rawOrder[1] = input[(i*3) + 1];\n            rawOrder[2] = input[(i*3) + 2];\n\n            if (rawOrder[0] == 0) break;\n\n            Order memory o = parseOrder(rawOrder);\n\n            if (!validateOrderParams(o)) {\n                status[i] = uint16(Status.ORDER_MALFORMED);\n                amount[i] = 0;\n                continue;\n            }\n\n            // Not validating order signatures or timestamps: should be done by clients\n\n            var m = matches[o.matchId];\n\n            if (m.finalized) {\n                status[i] = uint16(Status.MATCH_FINALIZED);\n                amount[i] = 0;\n                continue;\n            }\n\n            uint longAmount;\n            uint shortAmount;\n\n            if (o.direction == 0) {\n                shortAmount = safeSub(o.amount, filledAmounts[o.orderHash]);\n                longAmount = safeMul(shortAmount, 100);\n                shortAmount = minu256(shortAmount, computeEffectiveBalance(balances[o.addr], m.positions[o.addr], o.price, false));\n                (longAmount, shortAmount) = computePriceWeightedAmounts(longAmount, shortAmount, o.price);\n                status[i] = uint16(Status.OK);\n                amount[i] = shortAmount;\n            } else {\n                longAmount = safeSub(o.amount, filledAmounts[o.orderHash]);\n                shortAmount = safeMul(longAmount, 100);\n                longAmount = minu256(longAmount, computeEffectiveBalance(balances[o.addr], m.positions[o.addr], o.price, true));\n                (longAmount, shortAmount) = computePriceWeightedAmounts(longAmount, shortAmount, o.price);\n                status[i] = uint16(Status.OK);\n                amount[i] = longAmount;\n            }\n        }\n    }\n\n\n    // Math utilities\n\n    function safeMul(uint a, uint b) private pure returns(uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeSub(uint a, uint b) private pure returns(uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) private pure returns(uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\n    function minu256(uint a, uint b) private pure returns(uint) {\n        return a < b ? a : b;\n    }\n\n    function max256(int a, int b) private pure returns(int) {\n        return a >= b ? a : b;\n    }\n\n    function min256(int a, int b) private pure returns(int) {\n        return a < b ? a : b;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"myAddr\",\"type\":\"address\"},{\"name\":\"matchIds\",\"type\":\"uint256[16]\"}],\"name\":\"checkMatchBatch\",\"outputs\":[{\"name\":\"myPosition\",\"type\":\"int256[16]\"},{\"name\":\"finalized\",\"type\":\"bool[16]\"},{\"name\":\"finalPrice\",\"type\":\"uint8[16]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"}],\"name\":\"getMatchInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"},{\"name\":\"finalPrice\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"order\",\"type\":\"uint256[3]\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderHash\",\"type\":\"uint256\"}],\"name\":\"getFilledAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"order\",\"type\":\"uint256[3]\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"input\",\"type\":\"uint256[48]\"}],\"name\":\"checkOrderBatch\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint16[16]\"},{\"name\":\"amount\",\"type\":\"uint256[16]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"matchId\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"LogBalanceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"takerAccount\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"makerAccount\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"orderDirection\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"longAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newLongPosition\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"shortAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newShortPosition\",\"type\":\"int256\"}],\"name\":\"LogTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"takerAccount\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"makerAccount\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint16\"}],\"name\":\"LogTradeError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"uint256\"}],\"name\":\"LogOrderCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalPrice\",\"type\":\"uint8\"}],\"name\":\"LogFinalizeMatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogClaim\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b60008054600160a060020a033316600160a060020a0319909116179055611d398061003b6000396000f3006060604052600436106100f05763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631785f53c81146100f557806324d7806c146101165780632e1a7d4d146101495780633448ec4a1461015f5780634ab358c7146102115780634b561a1614610227578063641bbdfe1461026f57806370480275146102995780638671b894146102b8578063893d20e8146102d9578063a6f9dae114610308578063ab47f1bf14610327578063b15a36471461034f578063cb1579ec14610373578063d0e30db0146103ed578063d29f541d146103f5578063f8b2cb4f14610417575b600080fd5b341561010057600080fd5b610114600160a060020a0360043516610436565b005b341561012157600080fd5b610135600160a060020a0360043516610472565b604051901515815260200160405180910390f35b341561015457600080fd5b610114600435610494565b341561016a57600080fd5b610180600160a060020a0360043516602461058e565b604051808461020080838360005b838110156101a657808201518382015260200161018e565b5050505090500183601060200280838360005b838110156101d15780820151838201526020016101b9565b5050505090500182601060200280838360005b838110156101fc5780820151838201526020016101e4565b50505050905001935050505060405180910390f35b341561021c57600080fd5b61011460043561069b565b341561023257600080fd5b61023d60043561079f565b60405167ffffffffffffffff9093168352901515602083015260ff166040808301919091526060909101905180910390f35b341561027a57600080fd5b61011460043560ff6024358116906044359060643590608435166107df565b34156102a457600080fd5b610114600160a060020a0360043516610ac0565b34156102c357600080fd5b610114600460643560843560ff60a43516610b02565b34156102e457600080fd5b6102ec610bdf565b604051600160a060020a03909116815260200160405180910390f35b341561031357600080fd5b610114600160a060020a0360043516610bee565b341561033257600080fd5b61033d600435610c38565b60405190815260200160405180910390f35b341561035a57600080fd5b610114600435602460843560a43560ff60c43516610c4a565b341561037e57600080fd5b6103886004610f87565b604051808361020080838360005b838110156103ae578082015183820152602001610396565b5050505090500182601060200280838360005b838110156103d95780820151838201526020016103c1565b505050509050019250505060405180910390f35b610114611286565b341561040057600080fd5b61033d600435600160a060020a036024351661134c565b341561042257600080fd5b61033d600160a060020a0360043516611374565b60005433600160a060020a0390811691161461045157600080fd5b600160a060020a03166000908152600160205260409020805460ff19169055565b600160a060020a03811660009081526001602052604090205460ff165b919050565b600160a060020a03331660009081526002602052604081205490806104b9838561138f565b915060008211156105885750600160a060020a033316600081815260026020526040908190208385039081905591907faf66eb1ff59a99165e990351acac53ab2fbc78bf79381392dd75b57ed2b8c40c905160405180910390a233600160a060020a03167fd0a6f018d0e9629a13bfeb9c60fd1bd8422531c157615dd2b75f0416f9255d98848360405191825260208201526040908101905180910390a2600160a060020a03331682156108fc0283604051600060405180830381858888f19350505050151561058857600080fd5b50505050565b610596611c07565b61059e611c2f565b6105a6611c2f565b6000805b6010821015610692578582601081106105bf57fe5b602002013515156105cf57610692565b600360008784601081106105df57fe5b60200201358152602001908152602001600020905080600001600088600160a060020a0316600160a060020a0316815260200190815260200160002054858360108110151561062a57fe5b6020020152600181015468010000000000000000900460ff1684836010811061064f57fe5b9115156020909202015260018101546901000000000000000000900460ff1683836010811061067a57fe5b60ff90921660209290920201526001909101906105aa565b50509250925092565b60008181526003602052604081206001810154909190819068010000000000000000900460ff16806106d95750600183015467ffffffffffffffff16155b156106e357610588565b600183015467ffffffffffffffff1662093a8060ff8616020191504282901115610588575061010061ff00841604606460ff8216111561072257600080fd5b6001830180546801000000000000000068ff0000000000000000199091161769ff0000000000000000001916690100000000000000000060ff841602179055837f7f2609eb806286dc6666e93a10aa26fd1ed386ef551226eab624fa2989e18f1d8260405160ff909116815260200160405180910390a250505050565b60009081526003602052604090206001015467ffffffffffffffff81169160ff680100000000000000008304811692690100000000000000000090041690565b6000858152600360205260408120600181015490919081908190819068010000000000000000900460ff161561083757600185015460ff8a81166901000000000000000000909204161461083257600080fd5b6109f4565b308a8a604051600160a060020a03939093166c01000000000000000000000000028352601483019190915260ff167f010000000000000000000000000000000000000000000000000000000000000002603482015260350160405190819003902093506001846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c016040518091039020878a8a6040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f1151561093857600080fd5b505060206040510351600160a060020a03811660009081526001602052604090205490935060ff16151561096b57600080fd5b606460ff8a16111561097c57600080fd5b6001850180546801000000000000000068ff0000000000000000199091161769ff0000000000000000001916690100000000000000000060ff8c1602179055897f7f2609eb806286dc6666e93a10aa26fd1ed386ef551226eab624fa2989e18f1d8a60405160ff909116815260200160405180910390a25b5050600160a060020a03331660009081526020849052604081205481811315610a2857610a21818a6113a7565b9150610a46565b6000811215610a4157610a21816000038a6064036113a7565b610ab4565b6000821215610a5157fe5b33600160a060020a038116600090815260208790526040812055610a7590836113d3565b8933600160a060020a03167f9a4772cd5c0946aaea956f025c3bd64f5b4464abfaa006dbfc1ffe104b89ef2f8460405190815260200160405180910390a35b50505050505050505050565b60005433600160a060020a03908116911614610adb57600080fd5b600160a060020a03166000908152600160208190526040909120805460ff19169091179055565b610b0a611c58565b610b30856003606060405190810160405291908282606080828437506114739350505050565b9050610b3e8185858561156e565b1515610b4957600080fd5b33600160a060020a03168160800151600160a060020a031614610b6b57600080fd5b8060600151421015610bd85780604001516004600083518152602001908152602001600020819055508060200151600160a060020a0333167f30935e4be65589802d673b5be2728667a369b55b560f059108e2121907c6d6f9835160405190815260200160405180910390a35b5050505050565b600054600160a060020a031690565b60005433600160a060020a03908116911614610c0957600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60009081526004602052604090205490565b610c52611c58565b610c5a611c94565b6000610c82876003606060405190810160405291908282606080828437506114739350505050565b9250610c8d83611648565b1515610cf95782602001518360800151600160a060020a031633600160a060020a03167fff786f2db0e226ba2ad212d9b57fa5c209c8c5cb0692bf0486e30b8b2e17fe95866000015160035b60405191825261ffff1660208201526040908101905180910390a4610f7d565b610d058387878761156e565b1515610d555782602001518360800151600160a060020a031633600160a060020a03167fff786f2db0e226ba2ad212d9b57fa5c209c8c5cb0692bf0486e30b8b2e17fe9586600001516004610cd9565b610d5f88846116b7565b9150600082516007811115610d7057fe5b14610dc55782602001518360800151600160a060020a031633600160a060020a03167fff786f2db0e226ba2ad212d9b57fa5c209c8c5cb0692bf0486e30b8b2e17fe95866000015186516007811115610cd957fe5b60036000846020015181526020810191909152604001600020600181015490915067ffffffffffffffff161515610e205760004211610e0057fe5b60018101805467ffffffffffffffff19164267ffffffffffffffff161790555b81606001518160006020850151600160a060020a0316815260208101919091526040016000205560808201518160006040850151600160a060020a0316600160a060020a0316815260200190815260200160002081905550610e8a82602001518360a001516113d3565b610e9c82604001518360c001516113d3565b8260c0015160ff1615610eb457816101000151610eba565b8160e001515b600460008551815260208082019290925260400160002080549092019091558301518360800151600160a060020a031633600160a060020a03167fd5db3fe23370479a78dc47612ce8be2c8c0ae30d3f255129af35fe3f852b965686600001518760c001518860a0015188610100015189606001518a60e001518b6080015160405196875260ff9586166020880152939094166040808701919091526060860192909252608085015260a084019290925260c083015260e0909101905180910390a45b5050505050505050565b610f8f611c2f565b610f97611c07565b6000610fa1611cf3565b610fa9611c58565b60008060008095505b601086101561127b57886003870260308110610fca57fe5b60200201358552886003870260010160308110610fe357fe5b6020020135856001602002015288600260038802016030811061100257fe5b60200201356040860152845115156110195761127b565b61102285611473565b935061102d84611648565b15156110685760035b88876010811061104257fe5b61ffff9092166020929092020152600087876010811061105e57fe5b6020020152611270565b600360008560200151815260200190815260200160002092508260010160089054906101000a900460ff161561109f576001611036565b8360c0015160ff16151561118e576110cf8460400151600460008751815260200190815260200160002054611aa9565b90506110dc816064611abb565b915061114c81611147600260008860800151600160a060020a0316600160a060020a03168152602001908152602001600020548660000160008960800151600160a060020a0316600160a060020a03168152602001908152602001600020548860a001516000611adf565b61138f565b905061116082828660a0015160ff16611b26565b9092509050600088876010811061117357fe5b61ffff90921660209290920201528087876010811061105e57fe5b6111b08460400151600460008751815260200190815260200160002054611aa9565b91506111bd826064611abb565b905061122882611147600260008860800151600160a060020a0316600160a060020a03168152602001908152602001600020548660000160008960800151600160a060020a0316600160a060020a03168152602001908152602001600020548860a001516001611adf565b915061123c82828660a0015160ff16611b26565b9092509050600088876010811061124f57fe5b61ffff90921660209290920201528187876010811061126a57fe5b60200201525b600190950194610fb2565b505050505050915091565b600080600034111561134857600160a060020a03331660009081526002602052604090205491506112b78234611b8c565b600160a060020a03331660008181526002602052604090819020839055919250907fd3f6be9fd42ca63d7d8f466cf84e429063ac713c319d5fd9edfa0232fc5f684d905160405180910390a233600160a060020a03167fd0a6f018d0e9629a13bfeb9c60fd1bd8422531c157615dd2b75f0416f9255d98838360405191825260208201526040908101905180910390a25b5050565b6000918252600360209081526040808420600160a060020a0393909316845291905290205490565b600160a060020a031660009081526002602052604090205490565b600081831061139e57816113a0565b825b9392505050565b6000808312156113b357fe5b60646113c2848460ff16611abb565b8115156113cb57fe5b049392505050565b600160a060020a0382166000908152600260205260408120549080831215611407576114028284600003611aa9565b611411565b6114118284611b8c565b600160a060020a03851660008181526002602052604090819020839055919250907fd0a6f018d0e9629a13bfeb9c60fd1bd8422531c157615dd2b75f0416f9255d9890849084905191825260208201526040908101905180910390a250505050565b61147b611c58565b600030836040516c01000000000000000000000000600160a060020a0384160281526014810182606080838360005b838110156114c25780820151838201526020016114aa565b50505050905001925050506040519081900390208252825160208301528260016020020151604083015282600260200201517b0100000000000000000000000000000000000000000000000000000081046060840152600160a060020a038116608084015260ff75010000000000000000000000000000000000000000008204811660a0850152740100000000000000000000000000000000000000009091041660c083015250919050565b60008460800151600160a060020a0316600186516040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0160405180910390208487876040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f1151561161d57600080fd5b505060206040510351600160a060020a03161461163c57506000611640565b5060015b949350505050565b60007001000000000000000000000000000000008260400151111561166f5750600061048f565b8160a0015160ff16158061168a575060638260a0015160ff16115b156116975750600061048f565b60018260c0015160ff1611156116af5750600061048f565b506001919050565b6116bf611c94565b600080600080600080600080600360008b602001518152602001908152602001600020975089606001514210611708578860025b9081600781111561170057fe5b905250611a9b565b600188015468010000000000000000900460ff1615611729578860016116f3565b8960800151600160a060020a031633600160a060020a0316141561174f578860066116f3565b7001000000000000000000000000000000008b1115611770578860056116f3565b6000895260c08a015160ff1615156117d357600160a060020a03331660208a01528a965060808a0151600160a060020a03166040808b01919091526117cc908b0151600460008d51815260200190815260200160002054611aa9565b955061181d565b8960800151600160a060020a031660208a015261180860408b0151600460008d51815260200190815260200160002054611aa9565b600160a060020a03331660408b015296508a95505b87600060208b0151600160a060020a0316600160a060020a031681526020019081526020016000205494508760000160008a60400151600160a060020a0316600160a060020a031681526020019081526020016000205493506118b487611147600260008d60200151600160a060020a0316600160a060020a0316815260200190815260200160002054888e60a001516001611adf565b96506118f486611147600260008d60400151600160a060020a0316600160a060020a0316815260200190815260200160002054878e60a001516000611adf565b955061190887878c60a0015160ff16611b26565b9097509550861580611918575085155b15611925578860076116f3565b600060a08a0181905260c08a0181905287870186810194508503925085121561197457611968611956600085611ba6565b86600003018b60a001516064036113a7565b8960a001818151019052505b60008313156119a35761199761198b600087611bb5565b84038b60a001516113a7565b8960a001818151039052505b60008413156119d2576119c66119ba600084611bb5565b85038b60a001516113a7565b8960c001818151019052505b6000821215611a07576119fb6119e9600086611ba6565b83600003018b60a001516064036113a7565b8960c001818151039052505b611a1d8960a001518a60c0015187868887611bc5565b90508015611a7d578060011415611a41576000199092019160019190910190611a5d565b806000191415611a5b578860a00180516001019052611a5d565bfe5b611a738960a001518a60c0015187868887611bc5565b90508015611a7d57fe5b606089018390526080890182905260e0890186905261010089018790525b505050505050505092915050565b600082821115611ab557fe5b50900390565b6000828202831580611ad75750828482811515611ad457fe5b04145b15156113a057fe5b6000848215611b05576000851215611b0057611afe85600003856113a7565b015b611b1d565b6000851315611b1d57611b1b85856064036113a7565b015b95945050505050565b60008060008084611b3a8887606403611abb565b811515611b4357fe5b048701915084606403611b568787611abb565b811515611b5f57fe5b048601905080821115611b79578581038693509350611b82565b86878303935093505b5050935093915050565b6000828201838110801590611ad75750828110156113a057fe5b600081831261139e57816113a0565b60008183121561139e57816113a0565b60008080851315611bdf57611bdb600087611bb5565b8503015b6000841315611bf857611bf3600084611bb5565b840390035b90960190940195945050505050565b6102006040519081016040526010815b6000815260200190600190039081611c175790505090565b6102006040519081016040526010815b600081526000199091019060200181611c3f5790505090565b60e06040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c082015290565b61012060405190810160405280600081526020016000600160a060020a031681526020016000600160a060020a031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b606060405190810160405260008152600260208201611c175600a165627a7a723058208924aeca67b69b681cf7fee4578e4f8e783c9a28478db3f6fb4a129908d9435e0029"
}