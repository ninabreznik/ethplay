{
  "address": "0xa98ed1fd277ead2c00d143cbe1465f59e65a0066",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Thx! Token",
  "contractName": "SmartToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "330000000",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-22\n*/\n\npragma solidity ^0.4.24;\npragma experimental \"v0.5.0\";\npragma experimental ABIEncoderV2;\n\nlibrary AddressExtension {\n\n  function isValid(address _address) internal pure returns (bool) {\n    return 0 != _address;\n  }\n\n  function isAccount(address _address) internal view returns (bool result) {\n    assembly {\n      result := iszero(extcodesize(_address))\n    }\n  }\n\n  function toBytes(address _address) internal pure returns (bytes b) {\n   assembly {\n      let m := mload(0x40)\n      mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, _address))\n      mstore(0x40, add(m, 52))\n      b := m\n    }\n  }\n}\n\nlibrary Math {\n\n  struct Fraction {\n    uint256 numerator;\n    uint256 denominator;\n  }\n\n  function isPositive(Fraction memory fraction) internal pure returns (bool) {\n    return fraction.numerator > 0 && fraction.denominator > 0;\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 r) {\n    r = a * b;\n    require((a == 0) || (r / a == b));\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256 r) {\n    r = a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256 r) {\n    require((r = a - b) <= a);\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 r) {\n    require((r = a + b) >= a);\n  }\n\n  function min(uint256 x, uint256 y) internal pure returns (uint256 r) {\n    return x <= y ? x : y;\n  }\n\n  function max(uint256 x, uint256 y) internal pure returns (uint256 r) {\n    return x >= y ? x : y;\n  }\n\n  function mulDiv(uint256 value, uint256 m, uint256 d) internal pure returns (uint256 r) {\n    r = value * m;\n    if (r / value == m) {\n      r /= d;\n    } else {\n      r = mul(value / d, m);\n    }\n  }\n\n  function mulDivCeil(uint256 value, uint256 m, uint256 d) internal pure returns (uint256 r) {\n    r = value * m;\n    if (r / value == m) {\n      if (r % d == 0) {\n        r /= d;\n      } else {\n        r = (r / d) + 1;\n      }\n    } else {\n      r = mul(value / d, m);\n      if (value % d != 0) {\n        r += 1;\n      }\n    }\n  }\n\n  function mul(uint256 x, Fraction memory f) internal pure returns (uint256) {\n    return mulDiv(x, f.numerator, f.denominator);\n  }\n\n  function mulCeil(uint256 x, Fraction memory f) internal pure returns (uint256) {\n    return mulDivCeil(x, f.numerator, f.denominator);\n  }\n\n  function div(uint256 x, Fraction memory f) internal pure returns (uint256) {\n    return mulDiv(x, f.denominator, f.numerator);\n  }\n\n  function divCeil(uint256 x, Fraction memory f) internal pure returns (uint256) {\n    return mulDivCeil(x, f.denominator, f.numerator);\n  }\n\n  function mul(Fraction memory x, Fraction memory y) internal pure returns (Math.Fraction) {\n    return Math.Fraction({\n      numerator: mul(x.numerator, y.numerator),\n      denominator: mul(x.denominator, y.denominator)\n    });\n  }\n}\n\ncontract FsTKAuthority {\n\n  function isAuthorized(address sender, address _contract, bytes data) public view returns (bool);\n  function isApproved(bytes32 hash, uint256 approveTime, bytes approveToken) public view returns (bool);\n  function validate() public pure returns (bytes4);\n}\n\ncontract Authorizable {\n\n  event SetFsTKAuthority(FsTKAuthority indexed _address);\n\n  modifier onlyFsTKAuthorized {\n    require(fstkAuthority.isAuthorized(msg.sender, this, msg.data));\n    _;\n  }\n  modifier onlyFsTKApproved(bytes32 hash, uint256 approveTime, bytes approveToken) {\n    require(fstkAuthority.isApproved(hash, approveTime, approveToken));\n    _;\n  }\n\n  FsTKAuthority internal fstkAuthority;\n\n  constructor(FsTKAuthority _fstkAuthority) internal {\n    fstkAuthority = _fstkAuthority;\n  }\n\n  function setFsTKAuthority(FsTKAuthority _fstkAuthority) public onlyFsTKAuthorized {\n    require(_fstkAuthority.validate() == _fstkAuthority.validate.selector);\n    emit SetFsTKAuthority(fstkAuthority = _fstkAuthority);\n  }\n}\n\ncontract IssuerContract {\n  using AddressExtension for address;\n\n  event SetIssuer(address indexed _address);\n\n  modifier onlyIssuer {\n    require(issuer == msg.sender);\n    _;\n  }\n\n  address public issuer;\n  address public newIssuer;\n\n  constructor(address _issuer) internal {\n    issuer = _issuer;\n  }\n\n  function setIssuer(address _address) public onlyIssuer {\n    newIssuer = _address;\n  }\n\n  function confirmSetIssuer() public {\n    require(newIssuer == msg.sender);\n    emit SetIssuer(issuer = newIssuer);\n    delete newIssuer;\n  }\n}\n\ncontract ERC20 {\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  function balanceOf(address owner) public view returns (uint256);\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n}\n\ncontract SecureERC20 is ERC20 {\n\n  event SetERC20ApproveChecking(bool approveChecking);\n\n  function approve(address spender, uint256 expectedValue, uint256 newValue) public returns (bool);\n  function increaseAllowance(address spender, uint256 value) public returns (bool);\n  function decreaseAllowance(address spender, uint256 value, bool strict) public returns (bool);\n  function setERC20ApproveChecking(bool approveChecking) public;\n}\n\ncontract FsTKToken {\n\n  enum DelegateMode { PublicMsgSender, PublicTxOrigin, PrivateMsgSender, PrivateTxOrigin }\n\n  event Consume(address indexed from, uint256 value, bytes32 challenge);\n  event IncreaseNonce(address indexed from, uint256 nonce);\n  event SetupDirectDebit(address indexed debtor, address indexed receiver, DirectDebitInfo info);\n  event TerminateDirectDebit(address indexed debtor, address indexed receiver);\n  event WithdrawDirectDebitFailure(address indexed debtor, address indexed receiver);\n\n  event SetMetadata(string metadata);\n  event SetLiquid(bool liquidity);\n  event SetDelegate(bool isDelegateEnable);\n  event SetDirectDebit(bool isDirectDebitEnable);\n\n  struct DirectDebitInfo {\n    uint256 amount;\n    uint256 startTime;\n    uint256 interval;\n  }\n  struct DirectDebit {\n    DirectDebitInfo info;\n    uint256 epoch;\n  }\n  struct Instrument {\n    uint256 allowance;\n    DirectDebit directDebit;\n  }\n  struct Account {\n    uint256 balance;\n    uint256 nonce;\n    mapping (address => Instrument) instruments;\n  }\n\n  function spendableAllowance(address owner, address spender) public view returns (uint256);\n  function transfer(uint256[] data) public returns (bool);\n  function transferAndCall(address to, uint256 value, bytes data) public payable returns (bool);\n\n  function nonceOf(address owner) public view returns (uint256);\n  function increaseNonce() public returns (bool);\n  function delegateTransferAndCall(\n    uint256 nonce,\n    uint256 fee,\n    uint256 gasAmount,\n    address to,\n    uint256 value,\n    bytes data,\n    DelegateMode mode,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public returns (bool);\n\n  function directDebit(address debtor, address receiver) public view returns (DirectDebit);\n  function setupDirectDebit(address receiver, DirectDebitInfo info) public returns (bool);\n  function terminateDirectDebit(address receiver) public returns (bool);\n  function withdrawDirectDebit(address debtor) public returns (bool);\n  function withdrawDirectDebit(address[] debtors, bool strict) public returns (bool);\n}\n\ncontract ERC20Like is SecureERC20, FsTKToken {\n  using AddressExtension for address;\n  using Math for uint256;\n\n  modifier liquid {\n    require(isLiquid);\n     _;\n  }\n  modifier canUseDirectDebit {\n    require(isDirectDebitEnable);\n     _;\n  }\n  modifier canDelegate {\n    require(isDelegateEnable);\n     _;\n  }\n\n  bool public erc20ApproveChecking;\n  bool public isLiquid = true;\n  bool public isDelegateEnable;\n  bool public isDirectDebitEnable;\n  string public metadata;\n  mapping(address => Account) internal accounts;\n\n  constructor(string _metadata) public {\n    metadata = _metadata;\n  }\n\n  function balanceOf(address owner) public view returns (uint256) {\n    return accounts[owner].balance;\n  }\n\n  function allowance(address owner, address spender) public view returns (uint256) {\n    return accounts[owner].instruments[spender].allowance;\n  }\n\n  function transfer(address to, uint256 value) public liquid returns (bool) {\n    Account storage senderAccount = accounts[msg.sender];\n\n    senderAccount.balance = senderAccount.balance.sub(value);\n    accounts[to].balance += value;\n\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n\n  function transferFrom(address from, address to, uint256 value) public liquid returns (bool) {\n    Account storage fromAccount = accounts[from];\n    Instrument storage senderInstrument = fromAccount.instruments[msg.sender];\n\n    fromAccount.balance = fromAccount.balance.sub(value);\n    senderInstrument.allowance = senderInstrument.allowance.sub(value);\n    accounts[to].balance += value;\n\n    emit Transfer(from, to, value);\n    return true;\n  }\n\n  function approve(address spender, uint256 value) public returns (bool) {\n    Instrument storage spenderInstrument = accounts[msg.sender].instruments[spender];\n    if (erc20ApproveChecking) {\n      require((value == 0) || (spenderInstrument.allowance == 0));\n    }\n\n    emit Approval(\n      msg.sender,\n      spender,\n      spenderInstrument.allowance = value\n    );\n    return true;\n  }\n\n  function setERC20ApproveChecking(bool approveChecking) public {\n    emit SetERC20ApproveChecking(erc20ApproveChecking = approveChecking);\n  }\n\n  function approve(address spender, uint256 expectedValue, uint256 newValue) public returns (bool) {\n    Instrument storage spenderInstrument = accounts[msg.sender].instruments[spender];\n    require(spenderInstrument.allowance == expectedValue);\n\n    emit Approval(\n      msg.sender,\n      spender,\n      spenderInstrument.allowance = newValue\n    );\n    return true;\n  }\n\n  function increaseAllowance(address spender, uint256 value) public returns (bool) {\n    Instrument storage spenderInstrument = accounts[msg.sender].instruments[spender];\n\n    emit Approval(\n      msg.sender,\n      spender,\n      spenderInstrument.allowance = spenderInstrument.allowance.add(value)\n    );\n    return true;\n  }\n\n  function decreaseAllowance(address spender, uint256 value, bool strict) public returns (bool) {\n    Instrument storage spenderInstrument = accounts[msg.sender].instruments[spender];\n\n    uint256 currentValue = spenderInstrument.allowance;\n    uint256 newValue;\n    if (strict) {\n      newValue = currentValue.sub(value);\n    } else if (value < currentValue) {\n      newValue = currentValue - value;\n    }\n\n    emit Approval(\n      msg.sender,\n      spender,\n      spenderInstrument.allowance = newValue\n    );\n    return true;\n  }\n\n  function setMetadata0(string _metadata) internal {\n    emit SetMetadata(metadata = _metadata);\n  }\n\n  function setLiquid0(bool liquidity) internal {\n    emit SetLiquid(isLiquid = liquidity);\n  }\n\n  function setDelegate(bool delegate) public {\n    emit SetDelegate(isDelegateEnable = delegate);\n  }\n\n  function setDirectDebit(bool directDebit) public {\n    emit SetDirectDebit(isDirectDebitEnable = directDebit);\n  }\n\n  function spendableAllowance(address owner, address spender) public view returns (uint256) {\n    Account storage ownerAccount = accounts[owner];\n    return Math.min(\n      ownerAccount.instruments[spender].allowance,\n      ownerAccount.balance\n    );\n  }\n\n  function transfer(uint256[] data) public liquid returns (bool) {\n    Account storage senderAccount = accounts[msg.sender];\n    uint256 totalValue;\n\n    for (uint256 i = 0; i < data.length; i++) {\n      address receiver = address(data[i] >> 96);\n      uint256 value = data[i] & 0xffffffffffffffffffffffff;\n\n      totalValue = totalValue.add(value);\n      accounts[receiver].balance += value;\n\n      emit Transfer(msg.sender, receiver, value);\n    }\n\n    senderAccount.balance = senderAccount.balance.sub(totalValue);\n\n    return true;\n  }\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes data\n  )\n    public\n    payable\n    liquid\n    returns (bool)\n  {\n    require(\n      to != address(this) &&\n      data.length >= 68 &&\n      transfer(to, value)\n    );\n    assembly {\n        mstore(add(data, 36), value)\n        mstore(add(data, 68), caller)\n    }\n    require(to.call.value(msg.value)(data));\n    return true;\n  }\n\n  function nonceOf(address owner) public view returns (uint256) {\n    return accounts[owner].nonce;\n  }\n\n  function increaseNonce() public returns (bool) {\n    emit IncreaseNonce(msg.sender, accounts[msg.sender].nonce += 1);\n  }\n\n  function delegateTransferAndCall(\n    uint256 nonce,\n    uint256 fee,\n    uint256 gasAmount,\n    address to,\n    uint256 value,\n    bytes data,\n    DelegateMode mode,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  )\n    public\n    liquid\n    canDelegate\n    returns (bool)\n  {\n    require(to != address(this));\n    address signer;\n    address relayer;\n    if (mode == DelegateMode.PublicMsgSender) {\n      signer = ecrecover(\n        keccak256(abi.encodePacked(this, nonce, fee, gasAmount, to, value, data, mode, address(0))),\n        v,\n        r,\n        s\n      );\n      relayer = msg.sender;\n    } else if (mode == DelegateMode.PublicTxOrigin) {\n      signer = ecrecover(\n        keccak256(abi.encodePacked(this, nonce, fee, gasAmount, to, value, data, mode, address(0))),\n        v,\n        r,\n        s\n      );\n      relayer = tx.origin;\n    } else if (mode == DelegateMode.PrivateMsgSender) {\n      signer = ecrecover(\n        keccak256(abi.encodePacked(this, nonce, fee, gasAmount, to, value, data, mode, msg.sender)),\n        v,\n        r,\n        s\n      );\n      relayer = msg.sender;\n    } else if (mode == DelegateMode.PrivateTxOrigin) {\n      signer = ecrecover(\n        keccak256(abi.encodePacked(this, nonce, fee, gasAmount, to, value, data, mode, tx.origin)),\n        v,\n        r,\n        s\n      );\n      relayer = tx.origin;\n    } else {\n      revert();\n    }\n\n    Account storage signerAccount = accounts[signer];\n    require(nonce == signerAccount.nonce);\n    emit IncreaseNonce(signer, signerAccount.nonce += 1);\n\n    signerAccount.balance = signerAccount.balance.sub(value.add(fee));\n    accounts[to].balance += value;\n    if (fee != 0) {\n      accounts[relayer].balance += fee;\n      emit Transfer(signer, relayer, fee);\n    }\n\n    if (!to.isAccount() && data.length >= 68) {\n      assembly {\n        mstore(add(data, 36), value)\n        mstore(add(data, 68), signer)\n      }\n      if (to.call.gas(gasAmount)(data)) {\n        emit Transfer(signer, to, value);\n      } else {\n        signerAccount.balance += value;\n        accounts[to].balance -= value;\n      }\n    } else {\n      emit Transfer(signer, to, value);\n    }\n\n    return true;\n  }\n\n  function directDebit(address debtor, address receiver) public view returns (DirectDebit) {\n    return accounts[debtor].instruments[receiver].directDebit;\n  }\n\n  function setupDirectDebit(\n    address receiver,\n    DirectDebitInfo info\n  )\n    public\n    returns (bool)\n  {\n    accounts[msg.sender].instruments[receiver].directDebit = DirectDebit({\n      info: info,\n      epoch: 0\n    });\n\n    emit SetupDirectDebit(msg.sender, receiver, info);\n    return true;\n  }\n\n  function terminateDirectDebit(address receiver) public returns (bool) {\n    delete accounts[msg.sender].instruments[receiver].directDebit;\n\n    emit TerminateDirectDebit(msg.sender, receiver);\n    return true;\n  }\n\n  function withdrawDirectDebit(address debtor) public liquid canUseDirectDebit returns (bool) {\n    Account storage debtorAccount = accounts[debtor];\n    DirectDebit storage debit = debtorAccount.instruments[msg.sender].directDebit;\n    uint256 epoch = (block.timestamp.sub(debit.info.startTime) / debit.info.interval).add(1);\n    uint256 amount = epoch.sub(debit.epoch).mul(debit.info.amount);\n    require(amount > 0);\n    debtorAccount.balance = debtorAccount.balance.sub(amount);\n    accounts[msg.sender].balance += amount;\n    debit.epoch = epoch;\n\n    emit Transfer(debtor, msg.sender, amount);\n    return true;\n  }\n\n  function withdrawDirectDebit(address[] debtors, bool strict) public liquid canUseDirectDebit returns (bool result) {\n    Account storage receiverAccount = accounts[msg.sender];\n    result = true;\n    uint256 total;\n\n    for (uint256 i = 0; i < debtors.length; i++) {\n      address debtor = debtors[i];\n      Account storage debtorAccount = accounts[debtor];\n      DirectDebit storage debit = debtorAccount.instruments[msg.sender].directDebit;\n      uint256 epoch = (block.timestamp.sub(debit.info.startTime) / debit.info.interval).add(1);\n      uint256 amount = epoch.sub(debit.epoch).mul(debit.info.amount);\n      require(amount > 0);\n      uint256 debtorBalance = debtorAccount.balance;\n\n      if (amount > debtorBalance) {\n        if (strict) {\n          revert();\n        }\n        result = false;\n        emit WithdrawDirectDebitFailure(debtor, msg.sender);\n      } else {\n        debtorAccount.balance = debtorBalance - amount;\n        total += amount;\n        debit.epoch = epoch;\n\n        emit Transfer(debtor, msg.sender, amount);\n      }\n    }\n\n    receiverAccount.balance += total;\n  }\n}\n\ncontract SmartToken is Authorizable, IssuerContract, ERC20Like {\n\n  string public name;\n  string public symbol;\n  uint256 public totalSupply;\n  uint8 public constant decimals = 18;\n\n  constructor(\n    address _issuer,\n    FsTKAuthority _fstkAuthority,\n    string _name,\n    string _symbol,\n    uint256 _totalSupply,\n    string _metadata\n  )\n    Authorizable(_fstkAuthority)\n    IssuerContract(_issuer)\n    ERC20Like(_metadata)\n    public\n  {\n    name = _name;\n    symbol = _symbol;\n    totalSupply = _totalSupply;\n\n    accounts[_issuer].balance = _totalSupply;\n    emit Transfer(address(0), _issuer, _totalSupply);\n  }\n\n  function setERC20ApproveChecking(bool approveChecking) public onlyIssuer {\n    super.setERC20ApproveChecking(approveChecking);\n  }\n\n  function setDelegate(bool delegate) public onlyIssuer {\n    super.setDelegate(delegate);\n  }\n\n  function setDirectDebit(bool directDebit) public onlyIssuer {\n    super.setDirectDebit(directDebit);\n  }\n\n  function setMetadata(\n    string infoUrl,\n    uint256 approveTime,\n    bytes approveToken\n  )\n    public\n    onlyIssuer\n    onlyFsTKApproved(keccak256(abi.encodePacked(approveTime, this, msg.sig, infoUrl)), approveTime, approveToken)\n  {\n    setMetadata0(infoUrl);\n  }\n\n  function setLiquid(\n    bool liquidity,\n    uint256 approveTime,\n    bytes approveToken\n  )\n    public\n    onlyIssuer\n    onlyFsTKApproved(keccak256(abi.encodePacked(approveTime, this, msg.sig, liquidity)), approveTime, approveToken)\n  {\n    setLiquid0(liquidity);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"terminateDirectDebit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"approveChecking\",\"type\":\"bool\"}],\"name\":\"setERC20ApproveChecking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"bool\"}],\"name\":\"setDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"strict\",\"type\":\"bool\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"},{\"name\":\"approveTime\",\"type\":\"uint256\"},{\"name\":\"approveToken\",\"type\":\"bytes\"}],\"name\":\"setMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"debtor\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"directDebit\",\"outputs\":[{\"components\":[{\"components\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"info\",\"type\":\"tuple\"},{\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"expectedValue\",\"type\":\"uint256\"},{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDelegateEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLiquid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"spendableAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fstkAuthority\",\"type\":\"address\"}],\"name\":\"setFsTKAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"debtors\",\"type\":\"address[]\"},{\"name\":\"strict\",\"type\":\"bool\"}],\"name\":\"withdrawDirectDebit\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"directDebit\",\"type\":\"bool\"}],\"name\":\"setDirectDebit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"setupDirectDebit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"mode\",\"type\":\"uint8\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateTransferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDirectDebitEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"liquidity\",\"type\":\"bool\"},{\"name\":\"approveTime\",\"type\":\"uint256\"},{\"name\":\"approveToken\",\"type\":\"bytes\"}],\"name\":\"setLiquid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"debtor\",\"type\":\"address\"}],\"name\":\"withdrawDirectDebit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increaseNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirmSetIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20ApproveChecking\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_issuer\",\"type\":\"address\"},{\"name\":\"_fstkAuthority\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_metadata\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"challenge\",\"type\":\"bytes32\"}],\"name\":\"Consume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"IncreaseNonce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"interval\",\"type\":\"uint256\"}],\"indexed\":false,\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"SetupDirectDebit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"TerminateDirectDebit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"debtor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WithdrawDirectDebitFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"SetMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"liquidity\",\"type\":\"bool\"}],\"name\":\"SetLiquid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isDelegateEnable\",\"type\":\"bool\"}],\"name\":\"SetDelegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isDirectDebitEnable\",\"type\":\"bool\"}],\"name\":\"SetDirectDebit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"approveChecking\",\"type\":\"bool\"}],\"name\":\"SetERC20ApproveChecking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetIssuer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetFsTKAuthority\",\"type\":\"event\"}]",
  "bytecode": "60806040526002805460a860020a60ff02191675010000000000000000000000000000000000000000001790553480156200003957600080fd5b5060405162003b2838038062003b2883398101806040526200005f91908101906200026b565b60008054600160a060020a03808816600160a060020a031992831617909255600180549289169290911691909117905580518190620000a690600390602084019062000139565b50508351620000bd90600590602087019062000139565b508251620000d390600690602086019062000139565b506007829055600160a060020a038616600081815260046020526040808220859055517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906200012590869062000358565b60405180910390a350505050505062000409565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017c57805160ff1916838001178555620001ac565b82800160010185558215620001ac579182015b82811115620001ac5782518255916020019190600101906200018f565b50620001ba929150620001be565b5090565b620001db91905b80821115620001ba5760008155600101620001c5565b90565b6000620001ec8251620003bd565b9392505050565b6000620001ec8251620003c9565b6000601f820183136200021357600080fd5b81516200022a620002248262000395565b6200036e565b915080825260208301602083018583830111156200024757600080fd5b62000254838284620003d6565b50505092915050565b6000620001ec8251620001db565b60008060008060008060c087890312156200028557600080fd5b6000620002938989620001de565b9650506020620002a689828a01620001f3565b95505060408701516001604060020a03811115620002c357600080fd5b620002d189828a0162000201565b94505060608701516001604060020a03811115620002ee57600080fd5b620002fc89828a0162000201565b93505060806200030f89828a016200025d565b92505060a08701516001604060020a038111156200032c57600080fd5b6200033a89828a0162000201565b9150509295509295509295565b6200035281620001db565b82525050565b6020810162000368828462000347565b92915050565b6040518181016001604060020a03811182821017156200038d57600080fd5b604052919050565b60006001604060020a03821115620003ac57600080fd5b506020601f91909101601f19160190565b600160a060020a031690565b60006200036882620003bd565b60005b83811015620003f3578181015183820152602001620003d9565b8381111562000403576000848401525b50505050565b61370f80620004196000396000f3006080604052600436106101d75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101dc578063095ea7b3146102075780630ade71421461023457806318160ddd1461025457806319261e6f146102765780631d14384814610298578063218e6877146102ba57806323b872dd146102da57806324a73e5f146102fa578063313ce5671461031a578063392f37e91461033c57806339509351146103515780633c42f95a146103715780634000aea01461039157806340086aa0146103a4578063426a8493146103d15780635551b6b6146103f157806355cc4e57146104065780635d272468146104265780635d71cf461461043b578063643f0e2a1461045b57806370a082311461047b578063712c0c5a1461049b57806371a04009146104bb5780637bc0e005146104d0578063806333c4146104f05780638b8ba6921461051057806395d89b4114610530578063a196bea014610545578063a9059cbb1461055a578063af488ca31461057a578063b39e1c6c1461059a578063b5e36417146105ba578063c53a0292146105da578063dd62ed3e146105ef578063e4495b151461060f578063ed2a2d6414610624578063ef765af814610644575b600080fd5b3480156101e857600080fd5b506101f1610659565b6040516101fe919061351a565b60405180910390f35b34801561021357600080fd5b50610227610222366004612f8e565b610705565b6040516101fe91906134a1565b34801561024057600080fd5b5061022761024f366004612eb9565b6107d2565b34801561026057600080fd5b50610269610856565b6040516101fe9190613558565b34801561028257600080fd5b5061029661029136600461310a565b61085c565b005b3480156102a457600080fd5b506102ad61088c565b6040516101fe919061345b565b3480156102c657600080fd5b506102966102d536600461310a565b6108a8565b3480156102e657600080fd5b506102276102f5366004612f11565b6108d5565b34801561030657600080fd5b50610227610315366004612fbe565b6109c9565b34801561032657600080fd5b5061032f610a8b565b6040516101fe9190613566565b34801561034857600080fd5b506101f1610a90565b34801561035d57600080fd5b5061022761036c366004612f8e565b610b09565b34801561037d57600080fd5b5061029661038c3660046131a3565b610b87565b61022761039f366004613001565b610e44565b3480156103b057600080fd5b506103c46103bf366004612ed7565b610f5b565b6040516101fe919061354a565b3480156103dd57600080fd5b506102276103ec36600461305c565b610fd4565b3480156103fd57600080fd5b50610227611074565b34801561041257600080fd5b50610296610421366004612eb9565b611097565b34801561043257600080fd5b50610227611102565b34801561044757600080fd5b50610269610456366004612ed7565b611124565b34801561046757600080fd5b50610296610476366004613185565b611173565b34801561048757600080fd5b50610269610496366004612eb9565b611362565b3480156104a757600080fd5b506102276104b636600461308e565b61138a565b3480156104c757600080fd5b506102ad6115ae565b3480156104dc57600080fd5b506102966104eb36600461310a565b6115ca565b3480156104fc57600080fd5b5061022761050b366004612f5e565b6115f7565b34801561051c57600080fd5b5061022761052b3660046131db565b6116a8565b34801561053c57600080fd5b506101f16121f0565b34801561055157600080fd5b50610227612269565b34801561056657600080fd5b50610227610575366004612f8e565b61228d565b34801561058657600080fd5b50610296610595366004613146565b61233d565b3480156105a657600080fd5b506102276105b5366004612eb9565b61253d565b3480156105c657600080fd5b506102276105d53660046130d5565b612692565b3480156105e657600080fd5b506102276127c2565b3480156105fb57600080fd5b5061026961060a366004612ed7565b61281b565b34801561061b57600080fd5b50610296612857565b34801561063057600080fd5b5061026961063f366004612eb9565b612914565b34801561065057600080fd5b5061022761293f565b6005805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b820191906000526020600020905b8154815290600101906020018083116106e057829003601f168201915b505050505081565b33600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845260029081019092528220905474010000000000000000000000000000000000000000900460ff16156107735782158061076857508054155b151561077357600080fd5b82815560405173ffffffffffffffffffffffffffffffffffffffff85169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906107c0908790613558565b60405180910390a35060019392505050565b33600081815260046020818152604080842073ffffffffffffffffffffffffffffffffffffffff8716808652600291820190935281852060018101869055908101859055600381018590559092018390559051919290917f7f321b39581bf86dddbaa9ddeec3e0740b71f116b22c14cf346cb71d91fd0832908490a3506001919050565b60075481565b60015473ffffffffffffffffffffffffffffffffffffffff16331461088057600080fd5b61088981612960565b50565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108cc57600080fd5b610889816129de565b6000806000600260159054906101000a900460ff1615156108f557600080fd5b505073ffffffffffffffffffffffffffffffffffffffff8416600090815260046020908152604080832033845260028101909252909120815461093e908563ffffffff612a5316565b82558054610952908563ffffffff612a5316565b815573ffffffffffffffffffffffffffffffffffffffff808616600081815260046020526040908190208054880190555190918816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109b5908890613558565b60405180910390a350600195945050505050565b33600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845260020190915281208054828415610a1c57610a15828763ffffffff612a5316565b9050610a29565b81861015610a2957508481035b80835560405173ffffffffffffffffffffffffffffffffffffffff88169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a76908590613558565b60405180910390a35060019695505050505050565b601281565b6003805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b33600081815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552600290910190925282208054929390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b77908763ffffffff612a6316565b8085556040516107c09190613558565b60015473ffffffffffffffffffffffffffffffffffffffff163314610bab57600080fd5b81306000357fffffffff000000000000000000000000000000000000000000000000000000001685604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182805190602001908083835b60208310610cae57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610c71565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040518082805190602001908083835b60208310610d3257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610cf5565b5181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169216919091179052604051920182900382206000547fc3662528000000000000000000000000000000000000000000000000000000008452909450869350859273ffffffffffffffffffffffffffffffffffffffff909116915063c366252890610dd8908690869086906004016134af565b60206040518083038186803b158015610df057600080fd5b505afa158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e289190810190613128565b1515610e3357600080fd5b610e3c86612a73565b505050505050565b6002546000907501000000000000000000000000000000000000000000900460ff161515610e7157600080fd5b73ffffffffffffffffffffffffffffffffffffffff84163014801590610e9957506044825110155b8015610eaa5750610eaa848461228d565b1515610eb557600080fd5b8260248301523360448301528373ffffffffffffffffffffffffffffffffffffffff16348360405180828051906020019080838360005b83811015610f04578181015183820152602001610eec565b50505050905090810190601f168015610f315780820380516001836020036101000a031916815260200191505b5091505060006040518083038185875af1925050501515610f5157600080fd5b5060019392505050565b610f63612be2565b5073ffffffffffffffffffffffffffffffffffffffff808316600090815260046020818152604080842094861684526002948501825292839020835160a081018552600182015494810194855294810154606086015260038101546080860152928452910154908201525b92915050565b33600090815260046020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845260020190915281208054841461101457600080fd5b82815560405173ffffffffffffffffffffffffffffffffffffffff86169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611061908790613558565b60405180910390a3506001949350505050565b600254760100000000000000000000000000000000000000000000900460ff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110bb57600080fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6002547501000000000000000000000000000000000000000000900460ff1681565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600460209081526040808320938516835260028401909152812054825491929161116b9190612ab5565b949350505050565b600080546040517f0a85bb2500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911691630a85bb25916111cf9133913091903690600401613469565b60206040518083038186803b1580156111e757600080fd5b505afa1580156111fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061121f9190810190613128565b151561122a57600080fd5b604080517f6901f66800000000000000000000000000000000000000000000000000000000808252915173ffffffffffffffffffffffffffffffffffffffff841691636901f668916004808301926020929190829003018186803b15801561129157600080fd5b505afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112c99190810190613167565b7fffffffff0000000000000000000000000000000000000000000000000000000016146112f557600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f1e03f798432da753fa76bd6d807748d894d4e59e05731b05fff74173f35464d191a250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090205490565b600080600080600080600080600080600260159054906101000a900460ff1615156113b457600080fd5b60025477010000000000000000000000000000000000000000000000900460ff1615156113e057600080fd5b33600090815260046020526040812060019b50995096505b8b51871015611598578b8781518110151561140f57fe5b602090810290910181015173ffffffffffffffffffffffffffffffffffffffff81166000908152600483526040808220338352600280820190955291206003810154938101549299509097506001908101965061148f92909161147990429063ffffffff612a5316565b81151561148257fe5b049063ffffffff612a6316565b845460038601549194506114ba916114ae90869063ffffffff612a5316565b9063ffffffff612ace16565b9150600082116114c957600080fd5b5083548082111561152a578a156114df57600080fd5b60405160009a50339073ffffffffffffffffffffffffffffffffffffffff8816907f3a2e3d0ecec3142514fb77933d7647fd6c7cf9f76de44841c91ceadaa38a9565908d90a361158d565b81810385556003840183905560405197820197339073ffffffffffffffffffffffffffffffffffffffff8816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611584908690613558565b60405180910390a35b6001909601956113f8565b5050865490950190955550939695505050505050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1633146115ee57600080fd5b61088981612af3565b6040805180820182528281526000602080830182815233808452600480845286852073ffffffffffffffffffffffffffffffffffffffff8a16808752600291820186528887209751805160018a01559586015191880191909155938701516003870155915194909101939093559251909291907fa25dcfb713acdeba8b55101aa403f8ce07b4d6f33b0cebf81226fe558a28c56b9061169790869061353c565b60405180910390a350600192915050565b600080600080600260159054906101000a900460ff1615156116c957600080fd5b600254760100000000000000000000000000000000000000000000900460ff1615156116f457600080fd5b73ffffffffffffffffffffffffffffffffffffffff8b1630141561171757600080fd5b600088600381111561172557fe5b14156119b9576001308f8f8f8f8f8f8f6000604051602001808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140185815260200184805190602001908083835b6020831061182157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016117e4565b6001836020036101000a03801982511681845116808217855250505050505090500183600381111561184f57fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140199505050505050505050506040516020818303038152906040526040518082805190602001908083835b6020831061192157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016118e4565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790526040805192909401829003822060008352910192839052611983945092508b918b91508a906134e5565b6020604051602081039080840390855afa1580156119a5573d6000803e3d6000fd5b505050602060405103519250339150611e6b565b60018860038111156119c757fe5b1415611c5b576001308f8f8f8f8f8f8f6000604051602001808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140185815260200184805190602001908083835b60208310611ac357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611a86565b6001836020036101000a038019825116818451168082178552505050505050905001836003811115611af157fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140199505050505050505050506040516020818303038152906040526040518082805190602001908083835b60208310611bc357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611b86565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790526040805192909401829003822060008352910192839052611c25945092508b918b91508a906134e5565b6020604051602081039080840390855afa158015611c47573d6000803e3d6000fd5b505050602060405103519250329150611e6b565b6002886003811115611c6957fe5b1415611d63576001308f8f8f8f8f8f8f33604051602001808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140185815260200184805190602001908083836020831061182157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016117e4565b6003886003811115611d7157fe5b14156101d7576001308f8f8f8f8f8f8f32604051602001808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401858152602001848051906020019080838360208310611ac357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611a86565b5073ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902060018101548e14611ea157600080fd5b8273ffffffffffffffffffffffffffffffffffffffff167fceb9e69e536dba286db476863cd607b4a7dd1f8f1c044bf410f2c4306517cc26600183600101600082825401925050819055604051611ef89190613558565b60405180910390a2611f21611f138b8f63ffffffff612a6316565b82549063ffffffff612a5316565b815573ffffffffffffffffffffffffffffffffffffffff8b16600090815260046020526040902080548b0190558c1561200a578c600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8f6040516120019190613558565b60405180910390a35b6120298b73ffffffffffffffffffffffffffffffffffffffff16612b69565b15801561203857506044895110155b15612176578960248a01528260448a01528a73ffffffffffffffffffffffffffffffffffffffff168c8a60405180828051906020019080838360005b8381101561208c578181015183820152602001612074565b50505050905090810190601f1680156120b95780820380516001836020036101000a031916815260200191505b5091505060006040518083038160008787f1925050501561213e578a73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c6040516121319190613558565b60405180910390a3612171565b80548a01815573ffffffffffffffffffffffffffffffffffffffff8b16600090815260046020526040902080548b900390555b6121dc565b8a73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c6040516121d39190613558565b60405180910390a35b5060019d9c50505050505050505050505050565b6006805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f810184900484028201840190925281815292918301828280156106fd5780601f106106d2576101008083540402835291602001916106fd565b60025477010000000000000000000000000000000000000000000000900460ff1681565b60025460009081907501000000000000000000000000000000000000000000900460ff1615156122bc57600080fd5b5033600090815260046020526040902080546122de908463ffffffff612a5316565b815573ffffffffffffffffffffffffffffffffffffffff8416600081815260046020526040908190208054860190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906107c0908790613558565b60015473ffffffffffffffffffffffffffffffffffffffff16331461236157600080fd5b6040805160208082018590526c010000000000000000000000003002828401527fffffffff000000000000000000000000000000000000000000000000000000006000351660548301527f010000000000000000000000000000000000000000000000000000000000000086151502605883015282516039818403018152605990920192839052815191929182918401908083835b6020831061243357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016123f6565b5181516020939093036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169216919091179052604051920182900382206000547fc3662528000000000000000000000000000000000000000000000000000000008452909450869350859273ffffffffffffffffffffffffffffffffffffffff909116915063c3662528906124d9908690869086906004016134af565b60206040518083038186803b1580156124f157600080fd5b505afa158015612505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125299190810190613128565b151561253457600080fd5b610e3c86612b6e565b6000806000806000600260159054906101000a900460ff16151561256057600080fd5b60025477010000000000000000000000000000000000000000000000900460ff16151561258c57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8616600090815260046020908152604080832033845260028082019093529220600381015491810154929650600190810195506125ec9290919061147990429063ffffffff612a5316565b8354600385015491935061260b916114ae90859063ffffffff612a5316565b90506000811161261a57600080fd5b835461262c908263ffffffff612a5316565b84553360008181526004602052604090819020805484019055600385018490555173ffffffffffffffffffffffffffffffffffffffff8816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109b5908590613558565b600080600080600080600260159054906101000a900460ff1615156126b657600080fd5b336000908152600460205260408120955092505b86518310156127a157606087848151811015156126e357fe5b906020019060200201519060020a90049150868381518110151561270357fe5b602090810290910101516bffffffffffffffffffffffff16905061272d848263ffffffff612a6316565b73ffffffffffffffffffffffffffffffffffffffff831660008181526004602052604090819020805485019055519195509033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061278e908590613558565b60405180910390a36001909201916126ca565b84546127b3908563ffffffff612a5316565b90945550600195945050505050565b33600081815260046020526040808220600190810180549091019081905590519192917fceb9e69e536dba286db476863cd607b4a7dd1f8f1c044bf410f2c4306517cc269161281091613558565b60405180910390a290565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526004602090815260408083209390941682526002909201909152205490565b60025473ffffffffffffffffffffffffffffffffffffffff16331461287b57600080fd5b600254600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691821790556040517fd56ed7b1c1110348b1fbf418469f6fc4acc32d9b675e9e1e448cc19169a64ca090600090a2600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090206001015490565b60025474010000000000000000000000000000000000000000900460ff1681565b600280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000831515021790556040517f0742a23da401b3f99c3da7b7508a78f0faf0098b7e54106be805c671dd913007906129d39083906134a1565b60405180910390a150565b600280547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16760100000000000000000000000000000000000000000000831515021790556040517f8557fc9589f24ba6adfed162065f291fe9d7e55aff6a9b2924dcd6c2cfce8755906129d39083906134a1565b80820382811115610fce57600080fd5b80820182811015610fce57600080fd5b80517f862d2bb6b8cf31caf965347718f48b7d2ac43dd5af10d2040d8da4fde4f3855090612aa8906003906020850190612c03565b6040516129d3919061352b565b600081831115612ac55781612ac7565b825b9392505050565b818102821580612ae85750818382811515612ae557fe5b04145b1515610fce57600080fd5b600280547fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff1677010000000000000000000000000000000000000000000000831515021790556040517f93365d0422216fbe0e6a095101b1602da2d51549500da385b7d0920e6eb0db13906129d39083906134a1565b3b1590565b600280547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff167501000000000000000000000000000000000000000000831515021790556040517ff6ff712ce1a864d00b4e395a3226b3b51837947e34df82826504708e4da47393906129d39083906134a1565b608060405190810160405280612bf6612c81565b8152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612c4457805160ff1916838001178555612c71565b82800160010185558215612c71579182015b82811115612c71578251825591602001919060010190612c56565b50612c7d929150612ca3565b5090565b6060604051908101604052806000815260200160008152602001600081525090565b612cbd91905b80821115612c7d5760008155600101612ca9565b90565b6000612ac78235613612565b6000601f82018313612cdd57600080fd5b8135612cf0612ceb8261359b565b613574565b91508181835260208401935060208101905083856020840282011115612d1557600080fd5b60005b83811015612d415781612d2b8882612cc0565b8452506020928301929190910190600101612d18565b5050505092915050565b6000601f82018313612d5c57600080fd5b8135612d6a612ceb8261359b565b91508181835260208401935060208101905083856020840282011115612d8f57600080fd5b60005b83811015612d415781612da58882612dd3565b8452506020928301929190910190600101612d92565b6000612ac7823561362b565b6000612ac7825161362b565b6000612ac78235612cbd565b6000612ac78251613636565b6000601f82018313612dfc57600080fd5b8135612e0a612ceb826135bc565b91508082526020830160208301858383011115612e2657600080fd5b612e31838284613675565b50505092915050565b6000612ac7823561365b565b6000612ac78235613666565b600060608284031215612e6457600080fd5b612e6e6060613574565b90506000612e7c8484612dd3565b8252506020612e8d84848301612dd3565b6020830152506040612ea184828501612dd3565b60408301525092915050565b6000612ac78235613630565b600060208284031215612ecb57600080fd5b600061116b8484612cc0565b60008060408385031215612eea57600080fd5b6000612ef68585612cc0565b9250506020612f0785828601612cc0565b9150509250929050565b600080600060608486031215612f2657600080fd5b6000612f328686612cc0565b9350506020612f4386828701612cc0565b9250506040612f5486828701612dd3565b9150509250925092565b60008060808385031215612f7157600080fd5b6000612f7d8585612cc0565b9250506020612f0785828601612e52565b60008060408385031215612fa157600080fd5b6000612fad8585612cc0565b9250506020612f0785828601612dd3565b600080600060608486031215612fd357600080fd5b6000612fdf8686612cc0565b9350506020612ff086828701612dd3565b9250506040612f5486828701612dbb565b60008060006060848603121561301657600080fd5b60006130228686612cc0565b935050602061303386828701612dd3565b925050604084013567ffffffffffffffff81111561305057600080fd5b612f5486828701612deb565b60008060006060848603121561307157600080fd5b600061307d8686612cc0565b9350506020612f4386828701612dd3565b600080604083850312156130a157600080fd5b823567ffffffffffffffff8111156130b857600080fd5b6130c485828601612ccc565b9250506020612f0785828601612dbb565b6000602082840312156130e757600080fd5b813567ffffffffffffffff8111156130fe57600080fd5b61116b84828501612d4b565b60006020828403121561311c57600080fd5b600061116b8484612dbb565b60006020828403121561313a57600080fd5b600061116b8484612dc7565b60008060006060848603121561315b57600080fd5b60006130228686612dbb565b60006020828403121561317957600080fd5b600061116b8484612ddf565b60006020828403121561319757600080fd5b600061116b8484612e3a565b6000806000606084860312156131b857600080fd5b833567ffffffffffffffff8111156131cf57600080fd5b61302286828701612deb565b6000806000806000806000806000806101408b8d0312156131fb57600080fd5b60006132078d8d612dd3565b9a505060206132188d828e01612dd3565b99505060406132298d828e01612dd3565b985050606061323a8d828e01612cc0565b975050608061324b8d828e01612dd3565b96505060a08b013567ffffffffffffffff81111561326857600080fd5b6132748d828e01612deb565b95505060c06132858d828e01612e46565b94505060e06132968d828e01612ead565b9350506101006132a88d828e01612dd3565b9250506101206132ba8d828e01612dd3565b9150509295989b9194979a5092959850565b6132d581613612565b82525050565b6132d58161362b565b6132d581612cbd565b6000828452602084019350613303838584613675565b61330c836136ad565b9093019392505050565b60006133218261360e565b808452613335816020860160208601613681565b61333e816136ad565b9093016020019392505050565b6132d58161365b565b60008154600181166000811461337157600181146133ad576133e9565b60028204607f1685527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00821660208601526040850192506133e9565b600282048086526020860195506133c385613602565b60005b828110156133e2578154888201526001909101906020016133c6565b8701945050505b505092915050565b8051606083019061340284826132e4565b50602082015161341560208501826132e4565b50604082015161342860408501826132e4565b50505050565b8051608083019061343f84826133f1565b50602082015161342860608501826132e4565b6132d581613630565b60208101610fce82846132cc565b6060810161347782876132cc565b613484602083018661334b565b81810360408301526134978184866132ed565b9695505050505050565b60208101610fce82846132db565b606081016134bd82866132e4565b6134ca60208301856132e4565b81810360408301526134dc8184613316565b95945050505050565b608081016134f382876132e4565b6135006020830186613452565b61350d60408301856132e4565b6134dc60608301846132e4565b60208082528101612ac78184613316565b60208082528101612ac78184613354565b60608101610fce82846133f1565b60808101610fce828461342e565b60208101610fce82846132e4565b60208101610fce8284613452565b60405181810167ffffffffffffffff8111828210171561359357600080fd5b604052919050565b600067ffffffffffffffff8211156135b257600080fd5b5060209081020190565b600067ffffffffffffffff8211156135d357600080fd5b506020601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190565b60009081526020902090565b5190565b73ffffffffffffffffffffffffffffffffffffffff1690565b151590565b60ff1690565b7fffffffff000000000000000000000000000000000000000000000000000000001690565b6000610fce82613612565b600060048210612c7d57600080fd5b82818337506000910152565b60005b8381101561369c578181015183820152602001613684565b838111156134285750506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016905600a265627a7a7230582045cf2cbc953b4143a4136242141507a9885ede2b178ee879862d58957d0181f26c6578706572696d656e74616cf50037000000000000000000000000e81b3d74865a944c463aa962213c6ab1aa8f4a43000000000000000000000000bab2ffe40c73e2983030e5e23fb32cc0f309165900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000025391ee35a05c54d00000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000a7468782120746f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003544858000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000632f697066732f7a4275724b41313574584675777147776439447a465a724d43666b38445064686a70764d487552526e387257316e32624554726871473657735575754471693432476351526a77654d58435a5045324632565658676b537543634a78690000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000e81b3d74865a944c463aa962213c6ab1aa8f4a43000000000000000000000000bab2ffe40c73e2983030e5e23fb32cc0f309165900000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000025391ee35a05c54d00000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000a7468782120746f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003544858000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000632f697066732f7a4275724b41313574584675777147776439447a465a724d43666b38445064686a70764d487552526e387257316e32624554726871473657735575754471693432476351526a77654d58435a5045324632565658676b537543634a78690000000000000000000000000000000000000000000000000000000000"
}