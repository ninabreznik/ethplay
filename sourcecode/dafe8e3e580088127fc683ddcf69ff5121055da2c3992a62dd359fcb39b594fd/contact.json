{
  "address": "0xC1e20543F90673ce56864dBec6Bc8CcA3a2c411D",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    //require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(\n    address _spender,\n    uint256 _value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\n\n\n\n\n\n\ncontract Token  is StandardToken, PausableToken , BurnableToken, MintableToken {\n  mapping(address => bool) blacklist;\n  uint256 public dayTimeStamp = 89280;\n\n  event RefreshLockUp(address addr, uint256 date, uint256 amount);\n  event AddLock(address indexed to, uint256 time, uint256 amount);\n\n\n\tstruct LockAccount {\n\t  uint256 unlockDate;\n\t\tuint256 amount;\n    bool div;\n    uint day;\n    uint256 unlockAmount;\n\t}\n  \n\n struct LockState {\n    uint256 latestReleaseTime;\n    LockAccount[] locks; \n  }\n\n\tmapping (address => LockAccount) public lockAccounts;\n  mapping (address => LockState) public multiLockAccounts;\n\n\n\n  bool public noLocked = false;\n  string public  name; \n  string public  symbol; \n  uint8 public decimals;\n\n\n    constructor( uint256 _initialSupply, string _name, string _symbol, uint8 _decimals,address admin) public {\n        owner = msg.sender;\n        totalSupply_ = _initialSupply;\n        balances[admin] = _initialSupply;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused canTransfer(msg.sender, _value) returns (bool) {\n      refreshLockUp(msg.sender);\n      require(noLocked || (balanceOf(msg.sender).sub(lockAccounts[msg.sender].amount)) >= _value);\n      if (_to == address(0)) {\n        require(msg.sender == owner);\n        totalSupply_ = totalSupply_.sub(_value);\n      }\n\n      super.transfer(_to, _value);\n    }\n\n  function addLock(address _addr, uint256 _value, uint256 _release_time) onlyOwner public {\n    require(_value > 0);\n    require(_release_time > now);\n\n    LockState storage lockState = multiLockAccounts[_addr];\n    if (_release_time > lockState.latestReleaseTime) {\n      lockState.latestReleaseTime = _release_time;\n    }\n    lockState.locks.push(LockAccount(_release_time, _value,false,0,0));\n\n    emit AddLock(_addr, _release_time, _value);\n  }\n\n  function clearLock(address _addr) onlyOwner {\n    uint256 i;\n    LockState storage lockState = multiLockAccounts[_addr];\n    for (i=0; i<lockState.locks.length; i++) {\n      lockState.locks[i].amount = 0;\n      lockState.locks[i].unlockDate = 0;\n    }\n  }\n\n  function getLockAmount(address _addr) view public returns (uint256 locked) {\n    uint256 i;\n    uint256 amt;\n    uint256 time;\n    uint256 lock = 0;\n\n    LockState storage lockState = multiLockAccounts[_addr];\n    if (lockState.latestReleaseTime < now) {\n      return 0;\n    }\n\n    for (i=0; i<lockState.locks.length; i++) {\n      amt = lockState.locks[i].amount;\n      time = lockState.locks[i].unlockDate;\n\n      if (time > now) {\n        lock = lock.add(amt);\n      }\n    }\n\n    return lock;\n  }\n\n\n\n  function lock(address addr) public onlyOwner returns (bool) {\n    require(blacklist[addr] == false);\n    blacklist[addr] = true;  \n    return true;\n  }\n\n  function unlock(address addr) public onlyOwner returns (bool) {\n    require(blacklist[addr] == true);\n    blacklist[addr] = false; \n    return true;\n  }\n\n  function showlock(address addr) public view returns (bool) {\n    return blacklist[addr];\n  }\n\n  \n  function Now() public view returns (uint256){\n    return now;\n  }\n\n  function () public payable {\n    revert();\n  }\n\n  function unlockAllTokens() public onlyOwner {\n    noLocked = true;\n  }\n\n    function relockAllTokens() public onlyOwner {\n    noLocked = false;\n  }\n\n  function showTimeLockValue(address _user)\n  public view returns (uint256 ,uint256, bool, uint256, uint256)\n  {\n    return (lockAccounts[_user].amount, lockAccounts[_user].unlockDate, lockAccounts[_user].div, lockAccounts[_user].day, lockAccounts[_user].unlockAmount);\n  }\n\n\n\n  function addTimeLockAddress(address _owner, uint256 _amount, uint256 _unlockDate, bool _div,\n  uint _day, uint256 _unlockAmount)\n        public\n        onlyOwner\n        returns(bool)\n    {\n        require(balanceOf(_owner) >= _amount);\n        require(_unlockDate >= now);\n\n        lockAccounts[_owner].amount = _amount;\n        lockAccounts[_owner].unlockDate = _unlockDate;\n        lockAccounts[_owner].div = _div;\n        lockAccounts[_owner].day = _day;\n        lockAccounts[_owner].unlockAmount = _unlockAmount;\n\n        return true;\n    }\n\n  modifier canTransfer(address _sender, uint256 _value) {\n    require(blacklist[_sender] == false);\n    require(noLocked || lockAccounts[_sender].unlockDate < now || (balanceOf(msg.sender).sub(lockAccounts[msg.sender].amount)) >= _value);\n    require(balanceOf(msg.sender).sub(getLockAmount(msg.sender)) >= _value);\n    _;\n  }\n\n  function refreshLockUp(address _sender) {\n    if (lockAccounts[_sender].div && lockAccounts[_sender].amount > 0) {\n      uint current = now;\n      if ( current >= lockAccounts[_sender].unlockDate) {\n          uint date = current.sub(lockAccounts[_sender].unlockDate);\n          lockAccounts[_sender].amount = lockAccounts[_sender].amount.sub(lockAccounts[_sender].unlockAmount);\n          if ( date.div(lockAccounts[_sender].day.mul(dayTimeStamp)) >= 1 && lockAccounts[_sender].amount > 0 ) {\n            if (lockAccounts[_sender].unlockAmount.mul(date.div(lockAccounts[_sender].day.mul(dayTimeStamp))) <= lockAccounts[_sender].amount) {\n            lockAccounts[_sender].amount = lockAccounts[_sender].amount.sub(lockAccounts[_sender].unlockAmount.mul(date.div(lockAccounts[_sender].day.mul(dayTimeStamp))));\n            } else {\n              lockAccounts[_sender].amount = 0;\n            }\n          }\n          if ( lockAccounts[_sender].amount > 0 ) {\n            lockAccounts[_sender].unlockDate = current.add(dayTimeStamp.mul(lockAccounts[_sender].day)).sub(date % dayTimeStamp.mul(lockAccounts[_sender].day));\n          } else {\n            lockAccounts[_sender].div = false;\n            lockAccounts[_sender].unlockDate = 0;\n          }    \n      }\n      emit RefreshLockUp(_sender, lockAccounts[_sender].unlockDate, lockAccounts[_sender].amount);\n\n    }\n  }\n  \n  \n\n\n  function totalBurn() public view returns(uint256) {\n\t\treturn balanceOf(address(0));\n\t}\n\n\n\n}",
  "bytecode": "60806040526003805460a060020a61ffff021916905562015cc06005556008805460ff191690553480156200003357600080fd5b5060405162001e4a38038062001e4a833981016040908152815160208084015183850151606086015160808701516003805433600160a060020a031991821681179091161790556001869055600160a060020a03811660009081528086529690962085905591860180519496909591019391929091620000ba9160099190870190620000f0565b508251620000d090600a906020860190620000f0565b5050600b805460ff191660ff929092169190911790555062000195915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013357805160ff191683800117855562000163565b8280016001018555821562000163579182015b828111156200016357825182559160200191906001019062000146565b506200017192915062000175565b5090565b6200019291905b808211156200017157600081556001016200017c565b90565b611ca580620001a56000396000f3006080604052600436106101d75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146101dc57806306fdde0314610205578063095ea7b31461028f578063125acb25146102b357806318160ddd146102e657806323b872dd146102fb5780632f6c493c14610325578063313ce56714610346578063399d6465146103715780633c9f861d146103925780633cf7cbdb146103a75780633f4ba83a146103f35780633fe49a2e1461040a57806340c10f191461042b57806342966c681461044f57806344d4fd1914610467578063576511c61461047c5780635c975abb1461049d5780635e0be607146104b257806360ee8fb9146104c757806366188463146104f957806370a082311461051d578063715018a61461053e5780637d64bcb4146105535780637eea8581146105685780638456cb591461057d5780638da5cb5b146105925780638dc73521146105c357806395d89b41146105e4578063a9059cbb146105f9578063b2b9ed651461061d578063c837d04614610632578063cc9ac37614610647578063d73dd6231461066e578063dd62ed3e14610692578063f2fde38b146106b9578063f435f5a7146106da578063ff749c37146106fb575b600080fd5b3480156101e857600080fd5b506101f161071c565b604080519115158252519081900360200190f35b34801561021157600080fd5b5061021a61073e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025457818101518382015260200161023c565b50505050905090810190601f1680156102815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029b57600080fd5b506101f1600160a060020a03600435166024356107cc565b3480156102bf57600080fd5b506102d4600160a060020a03600435166107f9565b60408051918252519081900360200190f35b3480156102f257600080fd5b506102d461080b565b34801561030757600080fd5b506101f1600160a060020a0360043581169060243516604435610811565b34801561033157600080fd5b506101f1600160a060020a036004351661083e565b34801561035257600080fd5b5061035b6108a7565b6040805160ff9092168252519081900360200190f35b34801561037d57600080fd5b506102d4600160a060020a03600435166108b0565b34801561039e57600080fd5b506102d4610970565b3480156103b357600080fd5b506103c8600160a060020a0360043516610981565b6040805195865260208601949094529115158484015260608401526080830152519081900360a00190f35b3480156103ff57600080fd5b506104086109bd565b005b34801561041657600080fd5b506103c8600160a060020a0360043516610a35565b34801561043757600080fd5b506101f1600160a060020a0360043516602435610a68565b34801561045b57600080fd5b50610408600435610b72565b34801561047357600080fd5b506102d4610b7f565b34801561048857600080fd5b506101f1600160a060020a0360043516610b83565b3480156104a957600080fd5b506101f1610ba1565b3480156104be57600080fd5b50610408610bb1565b3480156104d357600080fd5b506101f1600160a060020a0360043516602435604435606435151560843560a435610bd7565b34801561050557600080fd5b506101f1600160a060020a0360043516602435610c5d565b34801561052957600080fd5b506102d4600160a060020a0360043516610c81565b34801561054a57600080fd5b50610408610c9c565b34801561055f57600080fd5b506101f1610d0a565b34801561057457600080fd5b506101f1610db3565b34801561058957600080fd5b50610408610dbc565b34801561059e57600080fd5b506105a7610e39565b60408051600160a060020a039092168252519081900360200190f35b3480156105cf57600080fd5b50610408600160a060020a0360043516610e48565b3480156105f057600080fd5b5061021a610ee7565b34801561060557600080fd5b506101f1600160a060020a0360043516602435610f42565b34801561062957600080fd5b5061040861109e565b34801561063e57600080fd5b506102d46110c1565b34801561065357600080fd5b50610408600160a060020a03600435166024356044356110c7565b34801561067a57600080fd5b506101f1600160a060020a03600435166024356111df565b34801561069e57600080fd5b506102d4600160a060020a0360043581169060243516611203565b3480156106c557600080fd5b50610408600160a060020a036004351661122e565b3480156106e657600080fd5b506101f1600160a060020a036004351661124e565b34801561070757600080fd5b50610408600160a060020a03600435166112b7565b6003547501000000000000000000000000000000000000000000900460ff1681565b6009805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107c45780601f10610799576101008083540402835291602001916107c4565b820191906000526020600020905b8154815290600101906020018083116107a757829003601f168201915b505050505081565b60035460009060a060020a900460ff16156107e657600080fd5b6107f0838361165f565b90505b92915050565b60076020526000908152604090205481565b60015490565b60035460009060a060020a900460ff161561082b57600080fd5b6108368484846116c5565b949350505050565b600354600090600160a060020a0316331461085857600080fd5b600160a060020a03821660009081526004602052604090205460ff16151560011461088257600080fd5b50600160a060020a03166000908152600460205260409020805460ff19169055600190565b600b5460ff1681565b600160a060020a0381166000908152600760205260408120805482918291829182914211156108e25760009550610966565b600094505b6001810154851015610962576001810180548690811061090357fe5b9060005260206000209060050201600101549350806001018581548110151561092857fe5b90600052602060002090600502016000015492504283111561095757610954828563ffffffff61182a16565b91505b6001909401936108e7565b8195505b5050505050919050565b600061097c6000610c81565b905090565b600160a060020a0316600090815260066020526040902060018101548154600283015460038401546004909401549294919360ff909116929091565b600354600160a060020a031633146109d457600080fd5b60035460a060020a900460ff1615156109ec57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600660205260009081526040902080546001820154600283015460038401546004909401549293919260ff909116919085565b600354600090600160a060020a03163314610a8257600080fd5b6003547501000000000000000000000000000000000000000000900460ff1615610aab57600080fd5b600154610abe908363ffffffff61182a16565b600155600160a060020a038316600090815260208190526040902054610aea908363ffffffff61182a16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020611c5a8339815191529181900360200190a350600192915050565b610b7c3382611837565b50565b4290565b600160a060020a031660009081526004602052604090205460ff1690565b60035460a060020a900460ff1681565b600354600160a060020a03163314610bc857600080fd5b6008805460ff19166001179055565b600354600090600160a060020a03163314610bf157600080fd5b85610bfb88610c81565b1015610c0657600080fd5b42851015610c1357600080fd5b50600160a060020a0395909516600090815260066020526040902060018082019590955592835560028301805460ff19169215159290921790915560038201556004019190915590565b60035460009060a060020a900460ff1615610c7757600080fd5b6107f08383611926565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314610cb357600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a03163314610d2457600080fd5b6003547501000000000000000000000000000000000000000000900460ff1615610d4d57600080fd5b6003805475ff000000000000000000000000000000000000000000191675010000000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b60085460ff1681565b600354600160a060020a03163314610dd357600080fd5b60035460a060020a900460ff1615610dea57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b6003546000908190600160a060020a03163314610e6457600080fd5b5050600160a060020a03811660009081526007602052604081205b6001810154821015610ee25760008160010183815481101515610e9e57fe5b90600052602060002090600502016001018190555060008160010183815481101515610ec657fe5b6000918252602090912060059091020155600190910190610e7f565b505050565b600a805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107c45780601f10610799576101008083540402835291602001916107c4565b60035460009060a060020a900460ff1615610f5c57600080fd5b33600081815260046020526040902054839060ff1615610f7b57600080fd5b60085460ff1680610fa35750600160a060020a03821660009081526006602052604090205442115b80610fdb5750336000818152600660205260409020600101548291610fd89190610fcc90610c81565b9063ffffffff611a1616565b10155b1515610fe657600080fd5b80610ffc610ff3336108b0565b610fcc33610c81565b101561100757600080fd5b611010336112b7565b60085460ff1680611042575033600081815260066020526040902060010154859161103f9190610fcc90610c81565b10155b151561104d57600080fd5b600160a060020a038516151561108b57600354600160a060020a0316331461107457600080fd5b600154611087908563ffffffff611a1616565b6001555b6110958585611a28565b50505092915050565b600354600160a060020a031633146110b557600080fd5b6008805460ff19169055565b60055481565b600354600090600160a060020a031633146110e157600080fd5b600083116110ee57600080fd5b4282116110fa57600080fd5b50600160a060020a03831660009081526007602052604090208054821115611120578181555b6040805160a08101825283815260208082018681526000838501818152606085018281526080860183815260018981018054808301825590865294879020975160059095029097019384559351958301959095555160028201805460ff1916911515919091179055925160038401555160049092019190915581518481529081018590528151600160a060020a038716927fd358cc2dd1abdafd03d9dfa1df999dd03959e41ae1ec3773ad2d62a8ce1153db928290030190a250505050565b60035460009060a060020a900460ff16156111f957600080fd5b6107f08383611a4c565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461124557600080fd5b610b7c81611ae5565b600354600090600160a060020a0316331461126857600080fd5b600160a060020a03821660009081526004602052604090205460ff161561128e57600080fd5b50600160a060020a03166000908152600460205260409020805460ff1916600190811790915590565b600160a060020a038116600090815260066020526040812060020154819060ff1680156112fd5750600160a060020a038316600090815260066020526040812060010154115b15610ee257600160a060020a03831660009081526006602052604090205442925082106115fe57600160a060020a03831660009081526006602052604090205461134e90839063ffffffff611a1616565b600160a060020a03841660009081526006602052604090206004810154600190910154919250611384919063ffffffff611a1616565b600160a060020a03841660009081526006602052604090206001808201929092556005546003909101546113cf916113c2919063ffffffff611b6316565b839063ffffffff611b8c16565b101580156113f65750600160a060020a038316600090815260066020526040812060010154115b1561151657600160a060020a038316600090815260066020526040902060018101546005546003909201549091611470916114489161143b919063ffffffff611b6316565b849063ffffffff611b8c16565b600160a060020a0386166000908152600660205260409020600401549063ffffffff611b6316565b116114f957600554600160a060020a0384166000908152600660205260409020600301546114d8916114b0916114489161143b919063ffffffff611b6316565b600160a060020a0385166000908152600660205260409020600101549063ffffffff611a1616565b600160a060020a038416600090815260066020526040902060010155611516565b600160a060020a0383166000908152600660205260408120600101555b600160a060020a03831660009081526006602052604081206001015411156115d857600160a060020a0383166000908152600660205260409020600301546005546115ba9161156b919063ffffffff611b6316565b8281151561157557fe5b600160a060020a0386166000908152600660205260409020600301546005549290910691610fcc916115ad919063ffffffff611b6316565b859063ffffffff61182a16565b600160a060020a0384166000908152600660205260409020556115fe565b600160a060020a038316600090815260066020526040812060028101805460ff19169055555b600160a060020a038316600081815260066020908152604091829020805460019091015483519485529184015282820152517fc9d2e2673026f64a68e9c7fc58b09b9c166da51e0633cddb76edba683a9327939181900360600190a1505050565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b6000600160a060020a03831615156116dc57600080fd5b600160a060020a03841660009081526020819052604090205482111561170157600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561173157600080fd5b600160a060020a03841660009081526020819052604090205461175a908363ffffffff611a1616565b600160a060020a03808616600090815260208190526040808220939093559085168152205461178f908363ffffffff61182a16565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546117d1908363ffffffff611a1616565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020611c5a833981519152929181900390910190a35060019392505050565b818101828110156107f357fe5b600160a060020a03821660009081526020819052604090205481111561185c57600080fd5b600160a060020a038216600090815260208190526040902054611885908263ffffffff611a1616565b600160a060020a0383166000908152602081905260409020556001546118b1908263ffffffff611a1616565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020611c5a8339815191529181900360200190a35050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561197b57336000908152600260209081526040808320600160a060020a03881684529091528120556119b0565b61198b818463ffffffff611a1616565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600082821115611a2257fe5b50900390565b60035460009060a060020a900460ff1615611a4257600080fd5b6107f08383611ba1565b336000908152600260209081526040808320600160a060020a0386168452909152812054611a80908363ffffffff61182a16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a0381161515611afa57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000821515611b74575060006107f3565b50818102818382811515611b8457fe5b04146107f357fe5b60008183811515611b9957fe5b049392505050565b33600090815260208190526040812054821115611bbd57600080fd5b33600090815260208190526040902054611bdd908363ffffffff611a1616565b3360009081526020819052604080822092909255600160a060020a03851681522054611c0f908363ffffffff61182a16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191923392600080516020611c5a8339815191529281900390910190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820cec40e824424cdb90c34c9f252c8ae715fecf61f2710387aaf56750c1e5e03cf0029000000000000000000000000000000000000000000cecb8f27f4200f3a00000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000f29864de22a6b227c37ec6dc2b0c6d31562758c60000000000000000000000000000000000000000000000000000000000000003584249000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035842490000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000cecb8f27f4200f3a00000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000f29864de22a6b227c37ec6dc2b0c6d31562758c60000000000000000000000000000000000000000000000000000000000000003584249000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035842490000000000000000000000000000000000000000000000000000000000"
}