{
  "address": "0x7a458fc5e15e671eb22d00696aa7cfd961d302e2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SDToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-24\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        c = _a * _b;\n        assert(c / _a == _b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = _a / _b;\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n        return _a / _b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n        c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n}\n\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal balances;\n\n    uint256 internal totalSupply_;\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_value <= balances[msg.sender]);\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    returns (bool)\n    {\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(_to != address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(\n        address _owner,\n        address _spender\n    )\n    public\n    view\n    returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n    public\n    returns (bool)\n    {\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n    public\n    returns (bool)\n    {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract Burnable is BasicToken, Ownable {\n    event EnableBurn();\n    event DisableBurn();\n    event Burn(address indexed burner, uint256 value);\n\n    bool public burnStatus = true;\n\n\n    modifier whenNotBurn() {\n        require(!burnStatus);\n        _;\n    }\n\n    modifier whenBurn() {\n        require(burnStatus);\n        _;\n    }\n\n    function enableBurn() public onlyOwner whenNotBurn {\n        burnStatus = true;\n        emit EnableBurn();\n    }\n\n    function disableBurn() public onlyOwner whenBurn {\n        burnStatus = false;\n        emit DisableBurn();\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value)\n    public\n    whenBurn\n    {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n    }\n}\n\ncontract TokenLock is Ownable {\n    struct Lock {\n        uint until;//the end of lock time in seconds\n    }\n\n    mapping(address => Lock) lockedAccount;\n\n    event LockAccount(address indexed from, uint until);\n\n    function lockAccount(address[] addresses, uint[] untils)\n    onlyOwner\n    public\n    {\n        for (uint i = 0; i < addresses.length; i++) {\n            lockedAccount[addresses[i]].until = untils[i];\n            emit LockAccount(addresses[i], untils[i]);\n        }\n    }\n\n    function lockTime(address owner)\n    public\n    view\n    returns (uint)\n    {\n        return lockedAccount[owner].until;\n    }\n\n    modifier notLocked(address owner){\n        require(lockedAccount[owner].until < now);\n        _;\n    }\n}\n\ncontract SDToken is Pausable, Burnable, TokenLock, StandardToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n\n    constructor()\n    public {\n        name = \"SD Token\";\n        symbol = \"SD\";\n        totalSupply_ = 10000000000 * 1 ether;\n        balances[msg.sender] = totalSupply_;\n    }\n\n    function transfer(\n        address _to,\n        uint256 _value\n    )\n    public\n    whenNotPaused\n    notLocked(msg.sender)\n    returns (bool)\n    {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    whenNotPaused\n    notLocked(_from)\n    returns (bool)\n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(\n        address _spender,\n        uint256 _value\n    )\n    public\n    whenNotPaused\n    returns (bool)\n    {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(\n        address _spender,\n        uint _addedValue\n    )\n    public\n    whenNotPaused\n    returns (bool success)\n    {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(\n        address _spender,\n        uint _subtractedValue\n    )\n    public\n    whenNotPaused\n    returns (bool success)\n    {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n}",
  "bytecode": "60806040526002805460a060020a61ffff02191675010000000000000000000000000000000000000000001790556007805460ff191660121790553480156200004757600080fd5b5060028054600160a060020a031916331790556040805180820190915260088082527f534420546f6b656e0000000000000000000000000000000000000000000000006020909201918252620000a09160059162000110565b506040805180820190915260028082527f53440000000000000000000000000000000000000000000000000000000000006020909201918252620000e79160069162000110565b506b204fce5e3e25026110000000600181905533600090815260208190526040902055620001b5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015357805160ff191683800117855562000183565b8280016001018555821562000183579182015b828111156200018357825182559160200191906001019062000166565b506200019192915062000195565b5090565b620001b291905b808211156200019157600081556001016200019c565b90565b61105480620001c56000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461012c578063095ea7b3146101b657806318160ddd146101ee57806323b872dd146102155780632403c08e1461023f578063313ce567146102565780633b37d1d6146102815780633f4ba83a1461029657806342966c68146102ab5780635c975abb146102c357806366188463146102d857806370a08231146102fc5780638456cb591461031d5780638da5cb5b1461033257806390e0d9921461036357806395d89b4114610378578063a4beda631461038d578063a9059cbb146103ae578063d73dd623146103d2578063dd62ed3e146103f6578063f2fde38b1461041d578063f57d290e1461043e575b600080fd5b34801561013857600080fd5b506101416104cc565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017b578181015183820152602001610163565b50505050905090810190601f1680156101a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c257600080fd5b506101da600160a060020a036004351660243561055a565b604080519115158252519081900360200190f35b3480156101fa57600080fd5b50610203610585565b60408051918252519081900360200190f35b34801561022157600080fd5b506101da600160a060020a036004358116906024351660443561058b565b34801561024b57600080fd5b506102546105df565b005b34801561026257600080fd5b5061026b610658565b6040805160ff9092168252519081900360200190f35b34801561028d57600080fd5b50610254610661565b3480156102a257600080fd5b506102546106df565b3480156102b757600080fd5b50610254600435610757565b3480156102cf57600080fd5b506101da61077c565b3480156102e457600080fd5b506101da600160a060020a036004351660243561078c565b34801561030857600080fd5b50610203600160a060020a03600435166107b0565b34801561032957600080fd5b506102546107cb565b34801561033e57600080fd5b50610347610848565b60408051600160a060020a039092168252519081900360200190f35b34801561036f57600080fd5b506101da610857565b34801561038457600080fd5b50610141610867565b34801561039957600080fd5b50610203600160a060020a03600435166108c2565b3480156103ba57600080fd5b506101da600160a060020a03600435166024356108dd565b3480156103de57600080fd5b506101da600160a060020a0360043516602435610924565b34801561040257600080fd5b50610203600160a060020a0360043581169060243516610948565b34801561042957600080fd5b50610254600160a060020a0360043516610973565b34801561044a57600080fd5b506040805160206004803580820135838102808601850190965280855261025495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506109939650505050505050565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105525780601f1061052757610100808354040283529160200191610552565b820191906000526020600020905b81548152906001019060200180831161053557829003601f168201915b505050505081565b60025460009060a060020a900460ff161561057457600080fd5b61057e8383610a83565b9392505050565b60015490565b60025460009060a060020a900460ff16156105a557600080fd5b600160a060020a038416600090815260036020526040902054849042116105cb57600080fd5b6105d6858585610ae9565b95945050505050565b600254600160a060020a031633146105f657600080fd5b60025460a860020a900460ff16151561060e57600080fd5b6002805475ff000000000000000000000000000000000000000000191690556040517fbbc93a6206317394647562699947851b9094e381eecad6a3ac6376eda00767aa90600090a1565b60075460ff1681565b600254600160a060020a0316331461067857600080fd5b60025460a860020a900460ff161561068f57600080fd5b6002805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f4c0ca4acedb0ee17ab12db45bc09ba316f1eecdda7def59ff3e54fe8aea947fe90600090a1565b600254600160a060020a031633146106f657600080fd5b60025460a060020a900460ff16151561070e57600080fd5b6002805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60025460a860020a900460ff16151561076f57600080fd5b6107793382610c5e565b50565b60025460a060020a900460ff1681565b60025460009060a060020a900460ff16156107a657600080fd5b61057e8383610d1e565b600160a060020a031660009081526020819052604090205490565b600254600160a060020a031633146107e257600080fd5b60025460a060020a900460ff16156107f957600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600254600160a060020a031681565b60025460a860020a900460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105525780601f1061052757610100808354040283529160200191610552565b600160a060020a031660009081526003602052604090205490565b60025460009060a060020a900460ff16156108f757600080fd5b33600081815260036020526040902054421161091257600080fd5b61091c8484610e0d565b949350505050565b60025460009060a060020a900460ff161561093e57600080fd5b61057e8383610eec565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600254600160a060020a0316331461098a57600080fd5b61077981610f85565b600254600090600160a060020a031633146109ad57600080fd5b5060005b8251811015610a7e5781818151811015156109c857fe5b906020019060200201516003600085848151811015156109e457fe5b6020908102909101810151600160a060020a03168252810191909152604001600020558251839082908110610a1557fe5b90602001906020020151600160a060020a03167fd54d19172fb86c7b0ec92bd53717c37c4e77dd87775bae11a52816120905a2fa8383815181101515610a5757fe5b906020019060200201516040518082815260200191505060405180910390a26001016109b1565b505050565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a038316600090815260208190526040812054821115610b0e57600080fd5b600160a060020a0384166000908152600460209081526040808320338452909152902054821115610b3e57600080fd5b600160a060020a0383161515610b5357600080fd5b600160a060020a038416600090815260208190526040902054610b7c908363ffffffff61100316565b600160a060020a038086166000908152602081905260408082209390935590851681522054610bb1908363ffffffff61101516565b600160a060020a03808516600090815260208181526040808320949094559187168152600482528281203382529091522054610bf3908363ffffffff61100316565b600160a060020a03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600160a060020a038216600090815260208190526040902054811115610c8357600080fd5b600160a060020a038216600090815260208190526040902054610cac908263ffffffff61100316565b600160a060020a038316600090815260208190526040902055600154610cd8908263ffffffff61100316565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b336000908152600460209081526040808320600160a060020a0386168452909152812054808310610d7257336000908152600460209081526040808320600160a060020a0388168452909152812055610da7565b610d82818463ffffffff61100316565b336000908152600460209081526040808320600160a060020a03891684529091529020555b336000818152600460209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b33600090815260208190526040812054821115610e2957600080fd5b600160a060020a0383161515610e3e57600080fd5b33600090815260208190526040902054610e5e908363ffffffff61100316565b3360009081526020819052604080822092909255600160a060020a03851681522054610e90908363ffffffff61101516565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600460209081526040808320600160a060020a0386168452909152812054610f20908363ffffffff61101516565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a0381161515610f9a57600080fd5b600254604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008282111561100f57fe5b50900390565b8181018281101561102257fe5b929150505600a165627a7a723058203004611d15d90de52385607fea6bbb15f4e308ad591eb34910d3bc3f20c56ffc0029"
}