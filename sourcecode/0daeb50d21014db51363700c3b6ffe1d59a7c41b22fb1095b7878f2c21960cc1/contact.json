{
  "address": "0x4eb8caf98d26a43a0de1f3ddd949a89aa8150213",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InstaSave",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\npragma solidity ^0.5.0;\n\ninterface TubInterface {\n    function open() external returns (bytes32);\n    function join(uint) external;\n    function exit(uint) external;\n    function lock(bytes32, uint) external;\n    function free(bytes32, uint) external;\n    function draw(bytes32, uint) external;\n    function wipe(bytes32, uint) external;\n    function give(bytes32, address) external;\n    function shut(bytes32) external;\n    function cups(bytes32) external view returns (address, uint, uint, uint);\n    function gem() external view returns (TokenInterface);\n    function gov() external view returns (TokenInterface);\n    function skr() external view returns (TokenInterface);\n    function sai() external view returns (TokenInterface);\n    function ink(bytes32) external view returns (uint);\n    function tab(bytes32) external returns (uint);\n    function rap(bytes32) external returns (uint);\n    function per() external view returns (uint);\n    function pep() external view returns (PepInterface);\n}\n\ninterface PepInterface {\n    function peek() external returns (bytes32, bool);\n}\n\n\ninterface oracleInterface {\n    function read() external view returns (bytes32);\n}\n\ninterface UniswapExchange {\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\n    function tokenToTokenSwapOutput(\n        uint256 tokensBought,\n        uint256 maxTokensSold,\n        uint256 maxEthSold,\n        uint256 deadline,\n        address tokenAddr\n        ) external returns (uint256  tokensSold);\n}\n\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface KyberInterface {\n    function trade(\n        address src,\n        uint srcAmount,\n        address dest,\n        address destAddress,\n        uint maxDestAmount,\n        uint minConversionRate,\n        address walletId\n        ) external payable returns (uint);\n\n    function getExpectedRate(\n        address src,\n        address dest,\n        uint srcQty\n        ) external view returns (uint, uint);\n}\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract Helpers is DSMath {\n\n    /**\n     * @dev get MakerDAO CDP engine\n     */\n    function getSaiTubAddress() public pure returns (address sai) {\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    }\n\n    /**\n     * @dev get MakerDAO Oracle for ETH price\n     */\n    function getOracleAddress() public pure returns (address oracle) {\n        oracle = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\n    }\n\n    /**\n     * @dev get uniswap MKR exchange\n     */\n    function getUniswapMKRExchange() public pure returns (address ume) {\n        ume = 0x2C4Bd064b998838076fa341A83d007FC2FA50957;\n    }\n\n    /**\n     * @dev get uniswap DAI exchange\n     */\n    function getUniswapDAIExchange() public pure returns (address ude) {\n        ude = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\n    }\n\n    /**\n     * @dev get ethereum address for trade\n     */\n    function getAddressETH() public pure returns (address eth) {\n        eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n\n    /**\n     * @dev get ethereum address for trade\n     */\n    function getAddressDAI() public pure returns (address dai) {\n        dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    }\n\n    /**\n     * @dev get kyber proxy address\n     */\n    function getAddressKyber() public pure returns (address kyber) {\n        kyber = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    }\n\n    /**\n     * @dev get admin address\n     */\n    function getAddressAdmin() public pure returns (address payable admin) {\n        admin = 0x7284a8451d9a0e7Dc62B3a71C0593eA2eC5c5638;\n    }\n\n    function getCDPStats(bytes32 cup) internal view returns (uint ethCol, uint daiDebt, uint usdPerEth) {\n        TubInterface tub = TubInterface(getSaiTubAddress());\n        usdPerEth = uint(oracleInterface(getOracleAddress()).read());\n        (, uint pethCol, uint debt,) = tub.cups(cup);\n        ethCol = rmul(pethCol, tub.per()); // get ETH col from PETH col\n        daiDebt = debt;\n    }\n\n}\n\n\ncontract MakerHelpers is Helpers {\n\n    event LogLock(uint cdpNum, uint amtETH, uint amtPETH, address owner);\n    event LogFree(uint cdpNum, uint amtETH, uint amtPETH, address owner);\n    event LogDraw(uint cdpNum, uint amtDAI, address owner);\n    event LogWipe(uint cdpNum, uint daiAmt, uint mkrFee, uint daiFee, address owner);\n\n    function setAllowance(TokenInterface _token, address _spender) internal {\n        if (_token.allowance(address(this), _spender) != uint(-1)) {\n            _token.approve(_spender, uint(-1));\n        }\n    }\n\n    function lock(uint cdpNum, uint ethAmt) internal {\n        if (ethAmt > 0) {\n            bytes32 cup = bytes32(cdpNum);\n            address tubAddr = getSaiTubAddress();\n\n            TubInterface tub = TubInterface(tubAddr);\n            TokenInterface weth = tub.gem();\n            TokenInterface peth = tub.skr();\n\n            (address lad,,,) = tub.cups(cup);\n            require(lad == address(this), \"cup-not-owned\");\n\n            weth.deposit.value(ethAmt)();\n\n            uint ink = rdiv(ethAmt, tub.per());\n            ink = rmul(ink, tub.per()) <= ethAmt ? ink : ink - 1;\n\n            setAllowance(weth, tubAddr);\n            tub.join(ink);\n\n            setAllowance(peth, tubAddr);\n            tub.lock(cup, ink);\n\n            emit LogLock(\n                cdpNum,\n                ethAmt,\n                ink,\n                address(this)\n            );\n        }\n    }\n\n    function free(uint cdpNum, uint jam) internal {\n        if (jam > 0) {\n            bytes32 cup = bytes32(cdpNum);\n            address tubAddr = getSaiTubAddress();\n\n            TubInterface tub = TubInterface(tubAddr);\n            TokenInterface peth = tub.skr();\n            TokenInterface weth = tub.gem();\n\n            uint ink = rdiv(jam, tub.per());\n            ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\n            tub.free(cup, ink);\n\n            setAllowance(peth, tubAddr);\n\n            tub.exit(ink);\n            uint freeJam = weth.balanceOf(address(this)); // withdraw possible previous stuck WETH as well\n            weth.withdraw(freeJam);\n\n            emit LogFree(\n                cdpNum,\n                freeJam,\n                ink,\n                address(this)\n            );\n        }\n    }\n\n    function draw(uint cdpNum, uint _wad) internal {\n        bytes32 cup = bytes32(cdpNum);\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n\n            tub.draw(cup, _wad);\n\n            emit LogDraw(cdpNum, _wad, address(this));\n        }\n    }\n\n    function wipe(uint cdpNum, uint _wad) internal {\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n            UniswapExchange daiEx = UniswapExchange(getUniswapDAIExchange());\n            UniswapExchange mkrEx = UniswapExchange(getUniswapMKRExchange());\n            TokenInterface dai = tub.sai();\n            TokenInterface mkr = tub.gov();\n\n            bytes32 cup = bytes32(cdpNum);\n\n            (address lad,,,) = tub.cups(cup);\n            require(lad == address(this), \"cup-not-owned\");\n\n            setAllowance(dai, getSaiTubAddress());\n            setAllowance(mkr, getSaiTubAddress());\n            setAllowance(dai, getUniswapDAIExchange());\n\n            (bytes32 val, bool ok) = tub.pep().peek();\n\n            // tub.rap(cup) = stability fee in $, tub.tab(cup) = total DAI debt\n            uint mkrFee = wdiv(rmul(_wad, rdiv(tub.rap(cup), tub.tab(cup))), uint(val));\n            // uint mkrFee = wdiv(rmul(_wad, rdiv(tub.rap(cup), add(tub.rap(cup), tub.tab(cup)))), uint(val));\n\n            uint daiFeeAmt = daiEx.getTokenToEthOutputPrice(mkrEx.getEthToTokenOutputPrice(mkrFee));\n            uint daiAmt = sub(_wad, daiFeeAmt);\n\n            if (ok && val != 0) {\n                daiEx.tokenToTokenSwapOutput(\n                    mkrFee,\n                    daiFeeAmt,\n                    uint(999000000000000000000),\n                    uint(1899063809), // 6th March 2030 GMT // no logic\n                    address(mkr)\n                );\n            }\n\n            tub.wipe(cup, daiAmt);\n\n            emit LogWipe(\n                cdpNum,\n                _wad,\n                mkrFee,\n                daiFeeAmt,\n                address(this)\n            );\n\n        }\n    }\n\n}\n\n\ncontract GetDetails is MakerHelpers {\n\n    function getMax(uint cdpID) public view returns (uint maxColToFree, uint maxDaiToDraw, uint ethInUSD) {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        uint colToUSD = wmul(ethCol, usdPerEth) - 10;\n        uint minColNeeded = wmul(daiDebt, 1500000000000000000) + 10;\n        maxColToFree = wdiv(sub(colToUSD, minColNeeded), usdPerEth);\n        uint maxDebtLimit = wdiv(colToUSD, 1500000000000000000) - 10;\n        maxDaiToDraw = sub(maxDebtLimit, daiDebt);\n        ethInUSD = usdPerEth;\n    }\n\n    function getSave(uint cdpID, uint ethToSwap) public view returns (uint finalEthCol, uint finalDaiDebt, uint finalColToUSD, bool canSave) {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        (finalEthCol, finalDaiDebt, finalColToUSD, canSave) = checkSave(\n            ethCol,\n            daiDebt,\n            usdPerEth,\n            ethToSwap\n        );\n    }\n\n    function checkSave(\n        uint ethCol,\n        uint daiDebt,\n        uint usdPerEth,\n        uint ethToSwap\n    ) internal view returns\n    (\n        uint finalEthCol,\n        uint finalDaiDebt,\n        uint finalColToUSD,\n        bool canSave\n    )\n    {\n        uint colToUSD = wmul(ethCol, usdPerEth) - 10;\n        uint minColNeeded = wmul(daiDebt, 1500000000000000000) + 10;\n        uint colToFree = wdiv(sub(colToUSD, minColNeeded), usdPerEth);\n        if (ethToSwap < colToFree) {\n            colToFree = ethToSwap;\n        }\n        (uint expectedRate,) = KyberInterface(getAddressKyber()).getExpectedRate(getAddressETH(), getAddressDAI(), colToFree);\n        expectedRate = wdiv(wmul(expectedRate, 99750000000000000000), 100000000000000000000);\n        uint expectedDAI = wmul(colToFree, expectedRate);\n        if (expectedDAI < daiDebt) {\n            finalEthCol = sub(ethCol, colToFree);\n            finalDaiDebt = sub(daiDebt, expectedDAI);\n            finalColToUSD = wmul(finalEthCol, usdPerEth);\n            canSave = true;\n        } else {\n            finalEthCol = 0;\n            finalDaiDebt = 0;\n            finalColToUSD = 0;\n            canSave = false;\n        }\n    }\n\n    function getLeverage(\n        uint cdpID,\n        uint daiToSwap\n    ) public view returns (\n        uint finalEthCol,\n        uint finalDaiDebt,\n        uint finalColToUSD,\n        bool canLeverage\n    )\n    {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        (finalEthCol, finalDaiDebt, finalColToUSD, canLeverage) = checkLeverage(\n            ethCol,\n            daiDebt,\n            usdPerEth,\n            daiToSwap\n        );\n    }\n\n    function checkLeverage(\n        uint ethCol,\n        uint daiDebt,\n        uint usdPerEth,\n        uint daiToSwap\n    ) internal view returns\n    (\n        uint finalEthCol,\n        uint finalDaiDebt,\n        uint finalColToUSD,\n        bool canLeverage\n    )\n    {\n        uint colToUSD = wmul(ethCol, usdPerEth) - 10;\n        uint maxDebtLimit = wdiv(colToUSD, 1500000000000000000) - 10;\n        uint debtToBorrow = sub(maxDebtLimit, daiDebt);\n        if (daiToSwap < debtToBorrow) {\n            debtToBorrow = daiToSwap;\n        }\n        (uint expectedRate,) = KyberInterface(getAddressKyber()).getExpectedRate(getAddressDAI(), getAddressETH(), debtToBorrow);\n        expectedRate = wdiv(wmul(expectedRate, 99750000000000000000), 100000000000000000000);\n        uint expectedETH = wmul(debtToBorrow, expectedRate);\n        if (ethCol != 0) {\n            finalEthCol = add(ethCol, expectedETH);\n            finalDaiDebt = maxDebtLimit;\n            finalColToUSD = wmul(finalEthCol, usdPerEth);\n            canLeverage = true;\n        } else {\n            finalEthCol = 0;\n            finalDaiDebt = 0;\n            finalColToUSD = 0;\n            canLeverage = false;\n        }\n    }\n\n}\n\n\ncontract Save is GetDetails {\n\n    /**\n     * @param what 2 for SAVE & 3 for LEVERAGE\n     */\n    event LogTrade(\n        uint what, // 2 for SAVE & 3 for LEVERAGE\n        address src,\n        uint srcAmt,\n        address dest,\n        uint destAmt,\n        address beneficiary,\n        uint minConversionRate,\n        address affiliate\n    );\n\n    function getColToFree(uint ethCol, uint daiDebt, uint usdPerEth) internal pure returns (uint colToFree) {\n        uint colToUSD = sub(wmul(ethCol, usdPerEth), 10);\n        uint minColNeeded = add(wmul(daiDebt, 1500000000000000000), 10);\n        colToFree = sub(wdiv(sub(colToUSD, minColNeeded), usdPerEth), 10);\n    }\n\n    function save(uint cdpID, uint colToSwap) public {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        uint colToFree = getColToFree(ethCol, daiDebt, usdPerEth);\n        require(colToFree != 0, \"No-collatral-to-free\");\n        if (colToSwap < colToFree) {\n            colToFree = colToSwap;\n        }\n        uint thisBalance = address(this).balance;\n        free(cdpID, colToFree);\n        uint ethToSwap = wdiv(wmul(colToFree, 99750000000000000000), 100000000000000000000);\n        getAddressAdmin().transfer(sub(colToFree, ethToSwap));\n        uint destAmt = KyberInterface(getAddressKyber()).trade.value(ethToSwap)(\n            getAddressETH(),\n            ethToSwap,\n            getAddressDAI(),\n            address(this),\n            daiDebt,\n            0,\n            getAddressAdmin()\n        );\n        wipe(cdpID, destAmt);\n\n        if (thisBalance < address(this).balance) {\n            uint balToLock = address(this).balance - thisBalance;\n            lock(cdpID, balToLock);\n        }\n\n        emit LogTrade(\n            2,\n            getAddressETH(),\n            colToFree,\n            getAddressDAI(),\n            destAmt,\n            address(this),\n            0,\n            getAddressAdmin()\n        );\n    }\n\n    function getDebtToBorrow(uint ethCol, uint daiDebt, uint usdPerEth) internal pure returns (uint debtToBorrow) {\n        uint colToUSD = sub(wmul(ethCol, usdPerEth), 10);\n        uint maxDebtLimit = sub(wdiv(colToUSD, 1500000000000000000), 10);\n        debtToBorrow = sub(maxDebtLimit, daiDebt);\n    }\n\n    function leverage(uint cdpID, uint daiToSwap) public {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        uint debtToBorrow = getDebtToBorrow(ethCol, daiDebt, usdPerEth);\n        require(debtToBorrow != 0, \"No-debt-to-borrow\");\n        if (daiToSwap < debtToBorrow) {\n            debtToBorrow = daiToSwap;\n        }\n        draw(cdpID, debtToBorrow);\n        setAllowance(TokenInterface(getAddressDAI()), getAddressKyber());\n        uint destAmt = KyberInterface(getAddressKyber()).trade.value(0)(\n            getAddressDAI(),\n            debtToBorrow,\n            getAddressETH(),\n            address(this),\n            2**255,\n            0,\n            getAddressAdmin()\n        );\n        uint ethToDeposit = wdiv(wmul(destAmt, 99750000000000000000), 100000000000000000000);\n        getAddressAdmin().transfer(sub(destAmt, ethToDeposit));\n        lock(cdpID, ethToDeposit);\n        emit LogTrade(\n            3,\n            getAddressDAI(),\n            debtToBorrow,\n            getAddressETH(),\n            destAmt,\n            address(this),\n            0,\n            getAddressAdmin()\n        );\n    }\n\n}\n\n\ncontract InstaSave is Save {\n\n    uint public version;\n\n    /**\n     * @dev setting up variables on deployment\n     * 1...2...3 versioning in each subsequent deployments\n     */\n    constructor(uint _version) public {\n        version = _version;\n    }\n\n    function() external payable {}\n\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000001"
}