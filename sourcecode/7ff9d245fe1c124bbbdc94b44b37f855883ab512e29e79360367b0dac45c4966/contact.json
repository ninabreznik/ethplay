{
  "address": "0xac870cdc25a87f12a5533704d047138d098812b8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RealityCheck",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-09\n*/\n\npragma solidity 0.4.18;\n\nlibrary SafeMath32 {\n  function add(uint32 a, uint32 b) internal pure returns (uint32) {\n    uint32 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BalanceHolder {\n\n    mapping(address => uint256) public balanceOf;\n\n    event LogWithdraw(\n        address indexed user,\n        uint256 amount\n    );\n\n    function withdraw() \n    public {\n        uint256 bal = balanceOf[msg.sender];\n        balanceOf[msg.sender] = 0;\n        msg.sender.transfer(bal);\n        LogWithdraw(msg.sender, bal);\n    }\n\n}\n\ncontract RealityCheck is BalanceHolder {\n\n    using SafeMath for uint256;\n    using SafeMath32 for uint32;\n\n    address constant NULL_ADDRESS = address(0);\n\n    // History hash when no history is created, or history has been cleared\n    bytes32 constant NULL_HASH = bytes32(0);\n\n    // An unitinalized finalize_ts for a question will indicate an unanswered question.\n    uint32 constant UNANSWERED = 0;\n\n    // An unanswered reveal_ts for a commitment will indicate that it does not exist.\n    uint256 constant COMMITMENT_NON_EXISTENT = 0;\n\n    // Commit->reveal timeout is 1/8 of the question timeout (rounded down).\n    uint32 constant COMMITMENT_TIMEOUT_RATIO = 8;\n\n    event LogSetQuestionFee(\n        address arbitrator,\n        uint256 amount\n    );\n\n    event LogNewTemplate(\n        uint256 indexed template_id,\n        address indexed user, \n        string question_text\n    );\n\n    event LogNewQuestion(\n        bytes32 indexed question_id,\n        address indexed user, \n        uint256 template_id,\n        string question,\n        bytes32 indexed content_hash,\n        address arbitrator, \n        uint32 timeout,\n        uint32 opening_ts,\n        uint256 nonce,\n        uint256 created\n    );\n\n    event LogFundAnswerBounty(\n        bytes32 indexed question_id,\n        uint256 bounty_added,\n        uint256 bounty,\n        address indexed user \n    );\n\n    event LogNewAnswer(\n        bytes32 answer,\n        bytes32 indexed question_id,\n        bytes32 history_hash,\n        address indexed user,\n        uint256 bond,\n        uint256 ts,\n        bool is_commitment\n    );\n\n    event LogAnswerReveal(\n        bytes32 indexed question_id, \n        address indexed user, \n        bytes32 indexed answer_hash, \n        bytes32 answer, \n        uint256 nonce, \n        uint256 bond\n    );\n\n    event LogNotifyOfArbitrationRequest(\n        bytes32 indexed question_id,\n        address indexed user \n    );\n\n    event LogFinalize(\n        bytes32 indexed question_id,\n        bytes32 indexed answer\n    );\n\n    event LogClaim(\n        bytes32 indexed question_id,\n        address indexed user,\n        uint256 amount\n    );\n\n    struct Question {\n        bytes32 content_hash;\n        address arbitrator;\n        uint32 opening_ts;\n        uint32 timeout;\n        uint32 finalize_ts;\n        bool is_pending_arbitration;\n        uint256 bounty;\n        bytes32 best_answer;\n        bytes32 history_hash;\n        uint256 bond;\n    }\n\n    // Stored in a mapping indexed by commitment_id, a hash of commitment hash, question, bond. \n    struct Commitment {\n        uint32 reveal_ts;\n        bool is_revealed;\n        bytes32 revealed_answer;\n    }\n\n    // Only used when claiming more bonds than fits into a transaction\n    // Stored in a mapping indexed by question_id.\n    struct Claim {\n        address payee;\n        uint256 last_bond;\n        uint256 queued_funds;\n    }\n\n    uint256 nextTemplateID = 0;\n    mapping(uint256 => uint256) public templates;\n    mapping(uint256 => bytes32) public template_hashes;\n    mapping(bytes32 => Question) public questions;\n    mapping(bytes32 => Claim) question_claims;\n    mapping(bytes32 => Commitment) public commitments;\n    mapping(address => uint256) public arbitrator_question_fees; \n\n    modifier onlyArbitrator(bytes32 question_id) {\n        require(msg.sender == questions[question_id].arbitrator);\n        _;\n    }\n\n    modifier stateAny() {\n        _;\n    }\n\n    modifier stateNotCreated(bytes32 question_id) {\n        require(questions[question_id].timeout == 0);\n        _;\n    }\n\n    modifier stateOpen(bytes32 question_id) {\n        require(questions[question_id].timeout > 0); // Check existence\n        require(!questions[question_id].is_pending_arbitration);\n        uint32 finalize_ts = questions[question_id].finalize_ts;\n        require(finalize_ts == UNANSWERED || finalize_ts > uint32(now));\n        uint32 opening_ts = questions[question_id].opening_ts;\n        require(opening_ts == 0 || opening_ts <= uint32(now)); \n        _;\n    }\n\n    modifier statePendingArbitration(bytes32 question_id) {\n        require(questions[question_id].is_pending_arbitration);\n        _;\n    }\n\n    modifier stateOpenOrPendingArbitration(bytes32 question_id) {\n        require(questions[question_id].timeout > 0); // Check existence\n        uint32 finalize_ts = questions[question_id].finalize_ts;\n        require(finalize_ts == UNANSWERED || finalize_ts > uint32(now));\n        uint32 opening_ts = questions[question_id].opening_ts;\n        require(opening_ts == 0 || opening_ts <= uint32(now)); \n        _;\n    }\n\n    modifier stateFinalized(bytes32 question_id) {\n        require(isFinalized(question_id));\n        _;\n    }\n\n    modifier bondMustBeZero() {\n        require(msg.value == 0);\n        _;\n    }\n\n    modifier bondMustDouble(bytes32 question_id) {\n        require(msg.value > 0); \n        require(msg.value >= (questions[question_id].bond.mul(2)));\n        _;\n    }\n\n    modifier previousBondMustNotBeatMaxPrevious(bytes32 question_id, uint256 max_previous) {\n        if (max_previous > 0) {\n            require(questions[question_id].bond <= max_previous);\n        }\n        _;\n    }\n\n    /// @notice Constructor, sets up some initial templates\n    /// @dev Creates some generalized templates for different question types used in the DApp.\n    function RealityCheck() \n    public {\n        createTemplate('{\"title\": \"%s\", \"type\": \"bool\", \"category\": \"%s\"}');\n        createTemplate('{\"title\": \"%s\", \"type\": \"uint\", \"decimals\": 18, \"category\": \"%s\"}');\n        createTemplate('{\"title\": \"%s\", \"type\": \"single-select\", \"outcomes\": [%s], \"category\": \"%s\"}');\n        createTemplate('{\"title\": \"%s\", \"type\": \"multiple-select\", \"outcomes\": [%s], \"category\": \"%s\"}');\n        createTemplate('{\"title\": \"%s\", \"type\": \"datetime\", \"category\": \"%s\"}');\n    }\n\n    /// @notice Function for arbitrator to set an optional per-question fee. \n    /// @dev The per-question fee, charged when a question is asked, is intended as an anti-spam measure.\n    /// @param fee The fee to be charged by the arbitrator when a question is asked\n    function setQuestionFee(uint256 fee) \n        stateAny() \n    external {\n        arbitrator_question_fees[msg.sender] = fee;\n        LogSetQuestionFee(msg.sender, fee);\n    }\n\n    /// @notice Create a reusable template, which should be a JSON document.\n    /// Placeholders should use gettext() syntax, eg %s.\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\n    /// @param content The template content\n    /// @return The ID of the newly-created template, which is created sequentially.\n    function createTemplate(string content) \n        stateAny()\n    public returns (uint256) {\n        uint256 id = nextTemplateID;\n        templates[id] = block.number;\n        template_hashes[id] = keccak256(content);\n        LogNewTemplate(id, msg.sender, content);\n        nextTemplateID = id.add(1);\n        return id;\n    }\n\n    /// @notice Create a new reusable template and use it to ask a question\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\n    /// @param content The template content\n    /// @param question A string containing the parameters that will be passed into the template to make the question\n    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute\n    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer\n    /// @param opening_ts If set, the earliest time it should be possible to answer the question.\n    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.\n    /// @return The ID of the newly-created template, which is created sequentially.\n    function createTemplateAndAskQuestion(\n        string content, \n        string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce \n    ) \n        // stateNotCreated is enforced by the internal _askQuestion\n    public payable returns (bytes32) {\n        uint256 template_id = createTemplate(content);\n        return askQuestion(template_id, question, arbitrator, timeout, opening_ts, nonce);\n    }\n\n    /// @notice Ask a new question and return the ID\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\n    /// @param template_id The ID number of the template the question will use\n    /// @param question A string containing the parameters that will be passed into the template to make the question\n    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute\n    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer\n    /// @param opening_ts If set, the earliest time it should be possible to answer the question.\n    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.\n    /// @return The ID of the newly-created question, created deterministically.\n    function askQuestion(uint256 template_id, string question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce) \n        // stateNotCreated is enforced by the internal _askQuestion\n    public payable returns (bytes32) {\n\n        require(templates[template_id] > 0); // Template must exist\n\n        bytes32 content_hash = keccak256(template_id, opening_ts, question);\n        bytes32 question_id = keccak256(content_hash, arbitrator, timeout, msg.sender, nonce);\n\n        _askQuestion(question_id, content_hash, arbitrator, timeout, opening_ts);\n        LogNewQuestion(question_id, msg.sender, template_id, question, content_hash, arbitrator, timeout, opening_ts, nonce, now);\n\n        return question_id;\n    }\n\n    function _askQuestion(bytes32 question_id, bytes32 content_hash, address arbitrator, uint32 timeout, uint32 opening_ts) \n        stateNotCreated(question_id)\n    internal {\n\n        // A timeout of 0 makes no sense, and we will use this to check existence\n        require(timeout > 0); \n        require(timeout < 365 days); \n        require(arbitrator != NULL_ADDRESS);\n\n        uint256 bounty = msg.value;\n\n        // The arbitrator can set a fee for asking a question. \n        // This is intended as an anti-spam defence.\n        // The fee is waived if the arbitrator is asking the question.\n        // This allows them to set an impossibly high fee and make users proxy the question through them.\n        // This would allow more sophisticated pricing, question whitelisting etc.\n        if (msg.sender != arbitrator) {\n            uint256 question_fee = arbitrator_question_fees[arbitrator];\n            require(bounty >= question_fee); \n            bounty = bounty.sub(question_fee);\n            balanceOf[arbitrator] = balanceOf[arbitrator].add(question_fee);\n        }\n\n        questions[question_id].content_hash = content_hash;\n        questions[question_id].arbitrator = arbitrator;\n        questions[question_id].opening_ts = opening_ts;\n        questions[question_id].timeout = timeout;\n        questions[question_id].bounty = bounty;\n\n    }\n\n    /// @notice Add funds to the bounty for a question\n    /// @dev Add bounty funds after the initial question creation. Can be done any time until the question is finalized.\n    /// @param question_id The ID of the question you wish to fund\n    function fundAnswerBounty(bytes32 question_id) \n        stateOpen(question_id)\n    external payable {\n        questions[question_id].bounty = questions[question_id].bounty.add(msg.value);\n        LogFundAnswerBounty(question_id, msg.value, questions[question_id].bounty, msg.sender);\n    }\n\n    /// @notice Submit an answer for a question.\n    /// @dev Adds the answer to the history and updates the current \"best\" answer.\n    /// May be subject to front-running attacks; Substitute submitAnswerCommitment()->submitAnswerReveal() to prevent them.\n    /// @param question_id The ID of the question\n    /// @param answer The answer, encoded into bytes32\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) \n        stateOpen(question_id)\n        bondMustDouble(question_id)\n        previousBondMustNotBeatMaxPrevious(question_id, max_previous)\n    external payable {\n        _addAnswerToHistory(question_id, answer, msg.sender, msg.value, false);\n        _updateCurrentAnswer(question_id, answer, questions[question_id].timeout);\n    }\n\n    /// @notice Submit the hash of an answer, laying your claim to that answer if you reveal it in a subsequent transaction.\n    /// @dev Creates a hash, commitment_id, uniquely identifying this answer, to this question, with this bond.\n    /// The commitment_id is stored in the answer history where the answer would normally go.\n    /// Does not update the current best answer - this is left to the later submitAnswerReveal() transaction.\n    /// @param question_id The ID of the question\n    /// @param answer_hash The hash of your answer, plus a nonce that you will later reveal\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\n    /// @param _answerer If specified, the address to be given as the question answerer. Defaults to the sender.\n    /// @dev Specifying the answerer is useful if you want to delegate the commit-and-reveal to a third-party.\n    function submitAnswerCommitment(bytes32 question_id, bytes32 answer_hash, uint256 max_previous, address _answerer) \n        stateOpen(question_id)\n        bondMustDouble(question_id)\n        previousBondMustNotBeatMaxPrevious(question_id, max_previous)\n    external payable {\n\n        bytes32 commitment_id = keccak256(question_id, answer_hash, msg.value);\n        address answerer = (_answerer == NULL_ADDRESS) ? msg.sender : _answerer;\n\n        require(commitments[commitment_id].reveal_ts == COMMITMENT_NON_EXISTENT);\n\n        uint32 commitment_timeout = questions[question_id].timeout / COMMITMENT_TIMEOUT_RATIO;\n        commitments[commitment_id].reveal_ts = uint32(now).add(commitment_timeout);\n\n        _addAnswerToHistory(question_id, commitment_id, answerer, msg.value, true);\n\n    }\n\n    /// @notice Submit the answer whose hash you sent in a previous submitAnswerCommitment() transaction\n    /// @dev Checks the parameters supplied recreate an existing commitment, and stores the revealed answer\n    /// Updates the current answer unless someone has since supplied a new answer with a higher bond\n    /// msg.sender is intentionally not restricted to the user who originally sent the commitment; \n    /// For example, the user may want to provide the answer+nonce to a third-party service and let them send the tx\n    /// NB If we are pending arbitration, it will be up to the arbitrator to wait and see any outstanding reveal is sent\n    /// @param question_id The ID of the question\n    /// @param answer The answer, encoded as bytes32\n    /// @param nonce The nonce that, combined with the answer, recreates the answer_hash you gave in submitAnswerCommitment()\n    /// @param bond The bond that you paid in your submitAnswerCommitment() transaction\n    function submitAnswerReveal(bytes32 question_id, bytes32 answer, uint256 nonce, uint256 bond) \n        stateOpenOrPendingArbitration(question_id)\n    external {\n\n        bytes32 answer_hash = keccak256(answer, nonce);\n        bytes32 commitment_id = keccak256(question_id, answer_hash, bond);\n\n        require(!commitments[commitment_id].is_revealed);\n        require(commitments[commitment_id].reveal_ts > uint32(now)); // Reveal deadline must not have passed\n\n        commitments[commitment_id].revealed_answer = answer;\n        commitments[commitment_id].is_revealed = true;\n\n        if (bond == questions[question_id].bond) {\n            _updateCurrentAnswer(question_id, answer, questions[question_id].timeout);\n        }\n\n        LogAnswerReveal(question_id, msg.sender, answer_hash, answer, nonce, bond);\n\n    }\n\n    function _addAnswerToHistory(bytes32 question_id, bytes32 answer_or_commitment_id, address answerer, uint256 bond, bool is_commitment) \n    internal \n    {\n        bytes32 new_history_hash = keccak256(questions[question_id].history_hash, answer_or_commitment_id, bond, answerer, is_commitment);\n\n        questions[question_id].bond = bond;\n        questions[question_id].history_hash = new_history_hash;\n\n        LogNewAnswer(answer_or_commitment_id, question_id, new_history_hash, answerer, bond, now, is_commitment);\n    }\n\n    function _updateCurrentAnswer(bytes32 question_id, bytes32 answer, uint32 timeout_secs)\n    internal {\n        questions[question_id].best_answer = answer;\n        questions[question_id].finalize_ts = uint32(now).add(timeout_secs);\n    }\n\n    /// @notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\n    /// @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\n    /// @param question_id The ID of the question\n    /// @param requester The account that requested arbitration\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\n    function notifyOfArbitrationRequest(bytes32 question_id, address requester, uint256 max_previous) \n        onlyArbitrator(question_id)\n        stateOpen(question_id)\n        previousBondMustNotBeatMaxPrevious(question_id, max_previous)\n    external {\n        questions[question_id].is_pending_arbitration = true;\n        LogNotifyOfArbitrationRequest(question_id, requester);\n    }\n\n    /// @notice Submit the answer for a question, for use by the arbitrator.\n    /// @dev Doesn't require (or allow) a bond.\n    /// If the current final answer is correct, the account should be whoever submitted it.\n    /// If the current final answer is wrong, the account should be whoever paid for arbitration.\n    /// However, the answerer stipulations are not enforced by the contract.\n    /// @param question_id The ID of the question\n    /// @param answer The answer, encoded into bytes32\n    /// @param answerer The account credited with this answer for the purpose of bond claims\n    function submitAnswerByArbitrator(bytes32 question_id, bytes32 answer, address answerer) \n        onlyArbitrator(question_id)\n        statePendingArbitration(question_id)\n        bondMustBeZero\n    external {\n\n        require(answerer != NULL_ADDRESS);\n        LogFinalize(question_id, answer);\n\n        questions[question_id].is_pending_arbitration = false;\n        _addAnswerToHistory(question_id, answer, answerer, 0, false);\n        _updateCurrentAnswer(question_id, answer, 0);\n\n    }\n\n    /// @notice Report whether the answer to the specified question is finalized\n    /// @param question_id The ID of the question\n    /// @return Return true if finalized\n    function isFinalized(bytes32 question_id) \n    constant public returns (bool) {\n        uint32 finalize_ts = questions[question_id].finalize_ts;\n        return ( !questions[question_id].is_pending_arbitration && (finalize_ts > UNANSWERED) && (finalize_ts <= uint32(now)) );\n    }\n\n    /// @notice Return the final answer to the specified question, or revert if there isn't one\n    /// @param question_id The ID of the question\n    /// @return The answer formatted as a bytes32\n    function getFinalAnswer(bytes32 question_id) \n        stateFinalized(question_id)\n    external constant returns (bytes32) {\n        return questions[question_id].best_answer;\n    }\n\n    /// @notice Return the final answer to the specified question, provided it matches the specified criteria.\n    /// @dev Reverts if the question is not finalized, or if it does not match the specified criteria.\n    /// @param question_id The ID of the question\n    /// @param content_hash The hash of the question content (template ID + opening time + question parameter string)\n    /// @param arbitrator The arbitrator chosen for the question (regardless of whether they are asked to arbitrate)\n    /// @param min_timeout The timeout set in the initial question settings must be this high or higher\n    /// @param min_bond The bond sent with the final answer must be this high or higher\n    /// @return The answer formatted as a bytes32\n    function getFinalAnswerIfMatches(\n        bytes32 question_id, \n        bytes32 content_hash, address arbitrator, uint32 min_timeout, uint256 min_bond\n    ) \n        stateFinalized(question_id)\n    external constant returns (bytes32) {\n        require(content_hash == questions[question_id].content_hash);\n        require(arbitrator == questions[question_id].arbitrator);\n        require(min_timeout <= questions[question_id].timeout);\n        require(min_bond <= questions[question_id].bond);\n        return questions[question_id].best_answer;\n    }\n\n    /// @notice Assigns the winnings (bounty and bonds) to everyone who gave the accepted answer\n    /// Caller must provide the answer history, in reverse order\n    /// @dev Works up the chain and assign bonds to the person who gave the right answer\n    /// If someone gave the winning answer earlier, they must get paid from the higher bond\n    /// That means we can't pay out the bond added at n until we have looked at n-1\n    /// The first answer is authenticated by checking against the stored history_hash.\n    /// One of the inputs to history_hash is the history_hash before it, so we use that to authenticate the next entry, etc\n    /// Once we get to a null hash we'll know we're done and there are no more answers.\n    /// Usually you would call the whole thing in a single transaction, but if not then the data is persisted to pick up later.\n    /// @param question_id The ID of the question\n    /// @param history_hashes Second-last-to-first, the hash of each history entry. (Final one should be empty).\n    /// @param addrs Last-to-first, the address of each answerer or commitment sender\n    /// @param bonds Last-to-first, the bond supplied with each answer or commitment\n    /// @param answers Last-to-first, each answer supplied, or commitment ID if the answer was supplied with commit->reveal\n    function claimWinnings(\n        bytes32 question_id, \n        bytes32[] history_hashes, address[] addrs, uint256[] bonds, bytes32[] answers\n    ) \n        stateFinalized(question_id)\n    public {\n\n        require(history_hashes.length > 0);\n\n        // These are only set if we split our claim over multiple transactions.\n        address payee = question_claims[question_id].payee; \n        uint256 last_bond = question_claims[question_id].last_bond; \n        uint256 queued_funds = question_claims[question_id].queued_funds; \n\n        // Starts as the hash of the final answer submitted. It'll be cleared when we're done.\n        // If we're splitting the claim over multiple transactions, it'll be the hash where we left off last time\n        bytes32 last_history_hash = questions[question_id].history_hash;\n\n        bytes32 best_answer = questions[question_id].best_answer;\n\n        uint256 i;\n        for (i = 0; i < history_hashes.length; i++) {\n        \n            // Check input against the history hash, and see which of 2 possible values of is_commitment fits.\n            bool is_commitment = _verifyHistoryInputOrRevert(last_history_hash, history_hashes[i], answers[i], bonds[i], addrs[i]);\n            \n            queued_funds = queued_funds.add(last_bond); \n            (queued_funds, payee) = _processHistoryItem(\n                question_id, best_answer, queued_funds, payee, \n                addrs[i], bonds[i], answers[i], is_commitment);\n \n            // Line the bond up for next time, when it will be added to somebody's queued_funds\n            last_bond = bonds[i];\n            last_history_hash = history_hashes[i];\n\n        }\n \n        if (last_history_hash != NULL_HASH) {\n            // We haven't yet got to the null hash (1st answer), ie the caller didn't supply the full answer chain.\n            // Persist the details so we can pick up later where we left off later.\n\n            // If we know who to pay we can go ahead and pay them out, only keeping back last_bond\n            // (We always know who to pay unless all we saw were unrevealed commits)\n            if (payee != NULL_ADDRESS) {\n                _payPayee(question_id, payee, queued_funds);\n                queued_funds = 0;\n            }\n\n            question_claims[question_id].payee = payee;\n            question_claims[question_id].last_bond = last_bond;\n            question_claims[question_id].queued_funds = queued_funds;\n        } else {\n            // There is nothing left below us so the payee can keep what remains\n            _payPayee(question_id, payee, queued_funds.add(last_bond));\n            delete question_claims[question_id];\n        }\n\n        questions[question_id].history_hash = last_history_hash;\n\n    }\n\n    function _payPayee(bytes32 question_id, address payee, uint256 value) \n    internal {\n        balanceOf[payee] = balanceOf[payee].add(value);\n        LogClaim(question_id, payee, value);\n    }\n\n    function _verifyHistoryInputOrRevert(\n        bytes32 last_history_hash,\n        bytes32 history_hash, bytes32 answer, uint256 bond, address addr\n    )\n    internal pure returns (bool) {\n        if (last_history_hash == keccak256(history_hash, answer, bond, addr, true) ) {\n            return true;\n        }\n        if (last_history_hash == keccak256(history_hash, answer, bond, addr, false) ) {\n            return false;\n        } \n        revert();\n    }\n\n    function _processHistoryItem(\n        bytes32 question_id, bytes32 best_answer, \n        uint256 queued_funds, address payee, \n        address addr, uint256 bond, bytes32 answer, bool is_commitment\n    )\n    internal returns (uint256, address) {\n\n        // For commit-and-reveal, the answer history holds the commitment ID instead of the answer.\n        // We look at the referenced commitment ID and switch in the actual answer.\n        if (is_commitment) {\n            bytes32 commitment_id = answer;\n            // If it's a commit but it hasn't been revealed, it will always be considered wrong.\n            if (!commitments[commitment_id].is_revealed) {\n                delete commitments[commitment_id];\n                return (queued_funds, payee);\n            } else {\n                answer = commitments[commitment_id].revealed_answer;\n                delete commitments[commitment_id];\n            }\n        }\n\n        if (answer == best_answer) {\n\n            if (payee == NULL_ADDRESS) {\n\n                // The entry is for the first payee we come to, ie the winner.\n                // They get the question bounty.\n                payee = addr;\n                queued_funds = queued_funds.add(questions[question_id].bounty);\n                questions[question_id].bounty = 0;\n\n            } else if (addr != payee) {\n\n                // Answerer has changed, ie we found someone lower down who needs to be paid\n\n                // The lower answerer will take over receiving bonds from higher answerer.\n                // They should also be paid the takeover fee, which is set at a rate equivalent to their bond. \n                // (This is our arbitrary rule, to give consistent right-answerers a defence against high-rollers.)\n\n                // There should be enough for the fee, but if not, take what we have.\n                // There's an edge case involving weird arbitrator behaviour where we may be short.\n                uint256 answer_takeover_fee = (queued_funds >= bond) ? bond : queued_funds;\n\n                // Settle up with the old (higher-bonded) payee\n                _payPayee(question_id, payee, queued_funds.sub(answer_takeover_fee));\n\n                // Now start queued_funds again for the new (lower-bonded) payee\n                payee = addr;\n                queued_funds = answer_takeover_fee;\n\n            }\n\n        }\n\n        return (queued_funds, payee);\n\n    }\n\n    /// @notice Convenience function to assign bounties/bonds for multiple questions in one go, then withdraw all your funds.\n    /// Caller must provide the answer history for each question, in reverse order\n    /// @dev Can be called by anyone to assign bonds/bounties, but funds are only withdrawn for the user making the call.\n    /// @param question_ids The IDs of the questions you want to claim for\n    /// @param lengths The number of history entries you will supply for each question ID\n    /// @param hist_hashes In a single list for all supplied questions, the hash of each history entry.\n    /// @param addrs In a single list for all supplied questions, the address of each answerer or commitment sender\n    /// @param bonds In a single list for all supplied questions, the bond supplied with each answer or commitment\n    /// @param answers In a single list for all supplied questions, each answer supplied, or commitment ID \n    function claimMultipleAndWithdrawBalance(\n        bytes32[] question_ids, uint256[] lengths, \n        bytes32[] hist_hashes, address[] addrs, uint256[] bonds, bytes32[] answers\n    ) \n        stateAny() // The finalization checks are done in the claimWinnings function\n    public {\n        \n        uint256 qi;\n        uint256 i;\n        for (qi = 0; qi < question_ids.length; qi++) {\n            bytes32 qid = question_ids[qi];\n            uint256 ln = lengths[qi];\n            bytes32[] memory hh = new bytes32[](ln);\n            address[] memory ad = new address[](ln);\n            uint256[] memory bo = new uint256[](ln);\n            bytes32[] memory an = new bytes32[](ln);\n            uint256 j;\n            for (j = 0; j < ln; j++) {\n                hh[j] = hist_hashes[i];\n                ad[j] = addrs[i];\n                bo[j] = bonds[i];\n                an[j] = answers[i];\n                i++;\n            }\n            claimWinnings(qid, hh, ad, bo, an);\n        }\n        withdraw();\n    }\n}",
  "bytecode": "6060604052600060015534156200001557600080fd5b6200008960606040519081016040908152603182527f7b227469746c65223a20222573222c202274797065223a2022626f6f6c222c2060208301527f2263617465676f7279223a20222573227d0000000000000000000000000000009082015264010000000062001544620002d682021704565b506200012460806040519081016040908152604182527f7b227469746c65223a20222573222c202274797065223a202275696e74222c2060208301527f22646563696d616c73223a2031382c202263617465676f7279223a2022257322908201527f7d00000000000000000000000000000000000000000000000000000000000000606082015264010000000062001544620002d682021704565b50620001bf60806040519081016040908152604c82527f7b227469746c65223a20222573222c202274797065223a202273696e676c652d60208301527f73656c656374222c20226f7574636f6d6573223a205b25735d2c202263617465908201527f676f7279223a20222573227d0000000000000000000000000000000000000000606082015264010000000062001544620002d682021704565b506200025a60806040519081016040908152604e82527f7b227469746c65223a20222573222c202274797065223a20226d756c7469706c60208301527f652d73656c656374222c20226f7574636f6d6573223a205b25735d2c20226361908201527f7465676f7279223a20222573227d000000000000000000000000000000000000606082015264010000000062001544620002d682021704565b50620002cf60606040519081016040908152603582527f7b227469746c65223a20222573222c202274797065223a20226461746574696d60208301527f65222c202263617465676f7279223a20222573227d00000000000000000000009082015264010000000062001544620002d682021704565b5062000443565b6001546000818152600260205260408082204390559091908390518082805190602001908083835b602083106200031f5780518252601f199092019160209182019101620002fe565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390206000828152600360205260409081902091909155600160a060020a0333169082907fb87fb721c0a557bb8dff89a86796466931d82ba530a66a239263eb8735ade2e49086905160208082528190810183818151815260200191508051906020019080838360005b83811015620003cd578082015183820152602001620003b3565b50505050905090810190601f168015620003fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390a36200042381600164010000000062001cb56200042c82021704565b60015592915050565b6000828201838110156200043c57fe5b9392505050565b61222d80620004536000396000f30060606040526004361061010e5763ffffffff60e060020a6000350416631101a0fd811461011357806312a203c31461022957806328828b1e1461026c5780633ccfd60b146103fb5780634dc266b41461040e5780634df6ca2a1461042d5780634e60f8831461044357806359245ff3146104595780636fa427421461046457806370a0823114610483578063762c38fd146104a257806377f325df146105115780637f8d429e14610522578063839df9451461054c57806383bf46091461058d57806395addb90146105de578063a1130d0414610661578063a462fb7b1461070d578063bc52565214610723578063d7cff98614610739578063f6a94ecb14610756578063fe92049d1461077b575b600080fd5b341561011e57600080fd5ba095505050505050565b005b341561023457600080fd5b61025a600435602435600160a060020a036044351663ffffffff60643516608435610a00565b60405190815260200160405180910390f35b341561027757600080fd5bac695505050505050565b341561040657600080fd5b610227610cb6565b341561041957600080fd5b610227600435602435604435606435610d3e565b341561043857600080fd5b610227600435610f4e565b341561044e57600080fd5b61025a600435610fb3565b610227600435610fc5565b341561046f57600080fd5b61025a600160a060020a0360043516611120565b341561048e57600080fd5b61025a600160a060020a0360043516611132565b61025a600480359060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050600160a060020a038535169463ffffffff60208201358116955060408201351693506060013591506111449050565b610227600435602435604435611337565b341561052d57600080fd5b6105386004356114ba565b604051901515815260200160405180910390f35b341561055757600080fd5b610562600435611517565b60405163ffffffff909316835290151560208301526040808301919091526060909101905180910390f35b341561059857600080fd5b61025a60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061154495505050505050565b34156105e957600080fd5b6105f460043561168b565b604051998a52600160a060020a0390981660208a015263ffffffff9687166040808b019190915295871660608a015293909516608088015290151560a087015260c086015260e0850192909252610100840191909152610120830191909152610140909101905180910390f35b61025a60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965050600160a060020a038535169463ffffffff60208201358116955060408201351693506060013591506116f69050565b341561071857600080fd5b61025a60043561171e565b341561072e57600080fd5b61025a60043561174d565b610227600435602435604435600160a060020a036064351661175f565b341561076157600080fd5b610227600435600160a060020a0360243516604435611980565b341561078657600080fd5b610227600435602435600160a060020a0360443516611b0e565b60008060008060008060008b6107b5816114ba565b15156107c057600080fd5b60008c51116107ce57600080fd5b60008d815260056020818152604080842080546001820154600290920154600494859052928620948501549490930154600160a060020a039093169c509a509850909650945092505b8b5183101561092357610881858d858151811061083057fe5b906020019060200201518b868151811061084657fe5b906020019060200201518d878151811061085c57fe5b906020019060200201518f888151811061087257fe5b90602001906020020151611be6565b9150610893868863ffffffff611cb516565b95506108e48d85888b8f88815181106108a857fe5b906020019060200201518f89815181106108be57fe5b906020019060200201518f8a815181106108d457fe5b9060200190602002015189611ccf565b985095508983815181106108f457fe5b9060200190602002015196508b838151811061090c57fe5b906020019060200201519450600190920191610817565b841561098e57600160a060020a03881615610948576109438d8988611dff565b600095505b60008d8152600560205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038a16178155600181018890556002018690556109dd565b6109a88d896109a3898b63ffffffff611cb516565b611dff565b60008d8152600560205260408120805473ffffffffffffffffffffffffffffffffffffffff1916815560018101829055600201555b5050506000998a5250600460205260409098206005019790975550505050505050565b600085610a0c816114ba565b1515610a1757600080fd5b6000878152600460205260409020548614610a3157600080fd5b600087815260046020526040902060010154600160a060020a03868116911614610a5a57600080fd5b60008781526004602052604090206001015463ffffffff60c060020a90910481169085161115610a8957600080fd5b600087815260046020526040902060060154831115610aa757600080fd5b6000878152600460208190526040909120015491505095945050505050565b600080600080610ad46121ef565b610adc6121ef565b610ae46121ef565b610aec6121ef565b60008098505b8e51891015610c9d578e8981518110610b0757fe5b9060200190602002015196508d8981518110610b1f57fe5b90602001906020020151955085604051805910610b395750595b9080825280602002602001820160405250945085604051805910610b5a5750595b9080825280602002602001820160405250935085604051805910610b7b5750595b9080825280602002602001820160405250925085604051805910610b9c5750595b90808252806020026020018201604052509150600090505b85811015610c85578c8881518110610bc857fe5b90602001906020020151858281518110610bde57fe5b602090810290910101528b8881518110610bf457fe5b90602001906020020151848281518110610c0a57fe5b600160a060020a039092166020928302909101909101528a8881518110610c2d57fe5b90602001906020020151838281518110610c4357fe5b60209081029091010152898881518110610c5957fe5b90602001906020020151828281518110610c6f57fe5b6020908102909101015260019788019701610bb4565b610c9287868686866107a0565b600190980197610af2565b610ca5610cb6565b505050505050505050505050505050565b600160a060020a033316600081815260208190526040808220805492905590919082156108fc0290839051600060405180830381858888f193505050501515610cfe57600080fd5b33600160a060020a03167f4ce7033d118120e254016dccf195288400b28fc8936425acd5f17ce2df3ab7088260405190815260200160405180910390a250565b600084815260046020526040812060010154819086908290819060c060020a900463ffffffff16819011610d7157600080fd5b60008381526004602052604090206001015460e060020a900463ffffffff169150811580610daa57504263ffffffff168263ffffffff16115b1515610db557600080fd5b5060008281526004602052604090206001015460a060020a900463ffffffff16801580610dee57504263ffffffff168163ffffffff1611155b1515610df957600080fd5b878760405191825260208201526040908101905180910390209450888587604051928352602083019190915260408083019190915260609091019051908190039020600081815260066020526040902054909450640100000000900460ff1615610e6257600080fd5b60008481526006602052604090205463ffffffff428116911611610e8557600080fd5b6000848152600660208181526040808420600181018d9055805464ff0000000019166401000000001790558c845260049091529091200154861415610ef057600089815260046020526040902060010154610ef0908a908a9060c060020a900463ffffffff16611e81565b84600160a060020a0333168a7fa7b2d313bc7a062e30b2c3b811aa4c9faf09755a6b4ea3bf42deff920944332f8b8b8b60405192835260208301919091526040808301919091526060909101905180910390a4505050505050505050565b33600160a060020a038116600090815260076020526040908190208390557fdca703d022171824d3d639b33c1525fd2338120b4cfb89507c0b59596893acda9190839051600160a060020a03909216825260208201526040908101905180910390a150565b60036020526000908152604090205481565b600081815260046020526040812060010154829190819060c060020a900463ffffffff16819011610ff557600080fd5b60008381526004602052604090206002015460ff161561101457600080fd5b60008381526004602052604090206001015460e060020a900463ffffffff16915081158061104d57504263ffffffff168263ffffffff16115b151561105857600080fd5b5060008281526004602052604090206001015460a060020a900463ffffffff1680158061109157504263ffffffff168163ffffffff1611155b151561109c57600080fd5b6000848152600460205260409020600301546110be903463ffffffff611cb516565b60008581526004602052604090819020600301829055600160a060020a0333169186917f54d68405b79f2aa4fd4e8db7b67844ad254cf8f208aac476c2894134a9deab669134915191825260208201526040908101905180910390a350505050565b60076020526000908152604090205481565b60006020819052908152604090205481565b6000868152600260205260408120548190819081901161116357600080fd5b88858960405183815260e060020a63ffffffff84160260208201526024810182805190602001908083835b602083106111ad5780518252601f19909201916020918201910161118e565b6001836020036101000a03801982511681845116179092525050509190910194506040935050505051809103902091508187873387604051948552600160a060020a039384166c01000000000000000000000000908102602087015263ffffffff9390931660e060020a0260348601529216026038830152604c820152606c01604051809103902090506112448183898989611ef8565b81600160a060020a033316827ffe2dac156a3890636ce13f65f4fdf41dcaee11526e4a5374531572d92194796c8c8c8c8c8c8c42604051878152600160a060020a038616604082015263ffffffff80861660608301528416608082015260a0810183905260c0810182905260e06020820181815290820188818151815260200191508051906020019080838360005b838110156112eb5780820151838201526020016112d3565b50505050905090810190601f1680156113185780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a498975050505050505050565b600083815260046020526040812060010154849190819060c060020a900463ffffffff1681901161136757600080fd5b60008381526004602052604090206002015460ff161561138657600080fd5b60008381526004602052604090206001015460e060020a900463ffffffff1691508115806113bf57504263ffffffff168263ffffffff16115b15156113ca57600080fd5b5060008281526004602052604090206001015460a060020a900463ffffffff1680158061140357504263ffffffff168163ffffffff1611155b151561140e57600080fd5b856000341161141c57600080fd5b60008181526004602052604090206006015461143f90600263ffffffff6120a216565b34101561144b57600080fd5b86856000811115611475576000828152600460205260409020600601548190111561147557600080fd5b6114838989333460006120cd565b6000898152600460205260409020600101546114af908a908a9060c060020a900463ffffffff16611e81565b505050505050505050565b6000818152600460205260408120600181015460029091015460e060020a90910463ffffffff169060ff161580156114f85750600063ffffffff8216115b801561151057504263ffffffff168163ffffffff1611155b9392505050565b6006602052600090815260409020805460019091015463ffffffff821691640100000000900460ff169083565b6001546000818152600260205260408082204390559091908390518082805190602001908083835b6020831061158b5780518252601f19909201916020918201910161156c565b6001836020036101000a03801982511681845116179092525050509190910192506040915050519081900390206000828152600360205260409081902091909155600160a060020a0333169082907fb87fb721c0a557bb8dff89a86796466931d82ba530a66a239263eb8735ade2e49086905160208082528190810183818151815260200191508051906020019080838360005b8381101561163757808201518382015260200161161f565b50505050905090810190601f1680156116645780820380516001836020036101000a031916815260200191505b509250505060405180910390a361168281600163ffffffff611cb516565b60015592915050565b600460208190526000918252604090912080546001820154600283015460038401549484015460058501546006909501549395600160a060020a0384169563ffffffff60a060020a860481169660c060020a870482169660e060020a90049091169460ff169391908a565b60008061170288611544565b9050611712818888888888611144565b98975050505050505050565b60008161172a816114ba565b151561173557600080fd5b50506000908152600460208190526040909120015490565b60026020526000908152604090205481565b6000848152600460205260408120600101548190819087908290819060c060020a900463ffffffff1681901161179457600080fd5b60008381526004602052604090206002015460ff16156117b357600080fd5b60008381526004602052604090206001015460e060020a900463ffffffff1691508115806117ec57504263ffffffff168263ffffffff16115b15156117f757600080fd5b5060008281526004602052604090206001015460a060020a900463ffffffff1680158061183057504263ffffffff168163ffffffff1611155b151561183b57600080fd5b896000341161184957600080fd5b60008181526004602052604090206006015461186c90600263ffffffff6120a216565b34101561187857600080fd5b8a8960008111156118a257600082815260046020526040902060060154819011156118a257600080fd5b8c8c346040519283526020830191909152604080830191909152606090910190519081900390209850600160a060020a038a16156118e057896118e2565b335b60008a81526006602052604090205490985063ffffffff161561190457600080fd5b60008d81526004602052604090206001015460089060c060020a900463ffffffff1604965061193d63ffffffff4281169089906121c516565b60008a8152600660205260409020805463ffffffff191663ffffffff929092169190911790556119718d8a8a3460016120cd565b50505050505050505050505050565b600083815260046020526040902060010154839033600160a060020a039081169116146119ac57600080fd5b600084815260046020526040812060010154859190819060c060020a900463ffffffff168190116119dc57600080fd5b60008381526004602052604090206002015460ff16156119fb57600080fd5b60008381526004602052604090206001015460e060020a900463ffffffff169150811580611a3457504263ffffffff168263ffffffff16115b1515611a3f57600080fd5b5060008281526004602052604090206001015460a060020a900463ffffffff16801580611a7857504263ffffffff168163ffffffff1611155b1515611a8357600080fd5b86856000811115611aad5760008281526004602052604090206006015481901115611aad57600080fd5b60008981526004602052604090819020600201805460ff19166001179055600160a060020a038916908a907f75d7939999bc902187c4aed400872883e445145f1983539166f783fa040b4762905160405180910390a3505050505050505050565b600083815260046020526040902060010154839033600160a060020a03908116911614611b3a57600080fd5b600084815260046020526040902060020154849060ff161515611b5c57600080fd5b3415611b6757600080fd5b600160a060020a0383161515611b7c57600080fd5b83857f18d760beffe3717270cd90d9d920ec1a48c194e9ad7bba23eb1c92d3eb974f9760405160405180910390a36000858152600460205260408120600201805460ff19169055611bd390869086908690806120cd565b611bdf85856000611e81565b5050505050565b60008484848460016040519485526020850193909352604080850192909252600160a060020a03166c0100000000000000000000000002606084015290151560f860020a02607483015260759091019051908190039020861415611c4c57506001611cac565b8484848460006040519485526020850193909352604080850192909252600160a060020a03166c0100000000000000000000000002606084015290151560f860020a0260748301526075909101905190819003902086141561010e575060005b95945050505050565b600082820183811015611cc457fe5b8091505b5092915050565b6000806000808415611d4f57600086815260066020526040902054869250640100000000900460ff161515611d27576000828152600660205260408120805464ffffffffff1916815560010155899350889250611df0565b6000828152600660205260408120600181018054825464ffffffffff19169092559190915595505b858b1415611de957600160a060020a0389161515611da85760008c8152600460205260409020600301549798508897611d8f908b9063ffffffff611cb516565b60008d8152600460205260408120600301559950611de9565b600160a060020a03888116908a1614611de957868a1015611dc95789611dcb565b865b9050611de28c8a6109a38d8563ffffffff6121dd16565b8798508099505b8989935093505b50509850989650505050505050565b600160a060020a038216600090815260208190526040902054611e28908263ffffffff611cb516565b600160a060020a03831660008181526020819052604090819020929092559084907f9c121aff33b50c1a53fef034ebec5f83da2d5a5187048f9c76c397ba27c1a1a69084905190815260200160405180910390a3505050565b600083815260046020819052604090912001829055611eaa63ffffffff4281169083906121c516565b600093845260046020526040909320600101805463ffffffff9490941660e060020a027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff909416939093179092555050565b6000858152600460205260408120600101548190879060c060020a900463ffffffff1615611f2557600080fd5b600063ffffffff861611611f3857600080fd5b6301e1338063ffffffff861610611f4e57600080fd5b600160a060020a0386161515611f6357600080fd5b34925085600160a060020a031633600160a060020a0316141515611fff57600160a060020a038616600090815260076020526040902054915081831015611fa957600080fd5b611fb9838363ffffffff6121dd16565b600160a060020a038716600090815260208190526040902054909350611fe5908363ffffffff611cb516565b600160a060020a0387166000908152602081905260409020555b505060009586526004602052604090952093845560018401805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03949094169390931777ffffffff0000000000000000000000000000000000000000191660a060020a63ffffffff92831602177fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c060020a929091169190910217905560030155565b6000808315156120b55760009150611cc8565b508282028284828115156120c557fe5b0414611cc457fe5b60008581526004602052604080822060050154908690859087908690519485526020850193909352604080850192909252600160a060020a03166c0100000000000000000000000002606084015290151560f860020a026074830152607590910190519081900390206000878152600460205260409081902060068101869055600501829055909150600160a060020a0385169087907fe47ca4ebbbc2990134d1168821f38c5e177f3d5ee564bffeadeaa351905e622190889085908890429089905194855260208501939093526040808501929092526060840152901515608083015260a0909101905180910390a3505050505050565b600082820163ffffffff8085169082161015611cc457fe5b6000828211156121e957fe5b50900390565b602060405190810160405260008152905600a165627a7a72305820e89a884f3bd2ae73df156c1674cf2ec50d23a50033ee065490dcb2c51d6457d70029"
}