{
  "address": "0x5c6d8bb345f4299c76f24fc771ef04dd160c4d36",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthCrystal",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-19\n*/\n\npragma solidity ^0.4.25;\n\ncontract EthCrystal\n{\n\n    /*\n        EthCrystal.com\n        Thanks for choosing us!\n\n        ███████╗████████╗██╗  ██╗ ██████╗██████╗ ██╗   ██╗███████╗████████╗ █████╗ ██╗         ██████╗ ██████╗ ███╗   ███╗\n        ██╔════╝╚══██╔══╝██║  ██║██╔════╝██╔══██╗╚██╗ ██╔╝██╔════╝╚══██╔══╝██╔══██╗██║        ██╔════╝██╔═══██╗████╗ ████║\n        █████╗     ██║   ███████║██║     ██████╔╝ ╚████╔╝ ███████╗   ██║   ███████║██║        ██║     ██║   ██║██╔████╔██║\n        ██╔══╝     ██║   ██╔══██║██║     ██╔══██╗  ╚██╔╝  ╚════██║   ██║   ██╔══██║██║        ██║     ██║   ██║██║╚██╔╝██║\n        ███████╗   ██║   ██║  ██║╚██████╗██║  ██║   ██║   ███████║   ██║   ██║  ██║███████╗██╗╚██████╗╚██████╔╝██║ ╚═╝ ██║\n        ╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝ ╚═════╝ ╚═════╝ ╚═╝     ╚═╝\n\n        #######               #####\n        #       ##### #    # #     # #####  #   #  ####  #####   ##   #           ####   ####  #    #\n        #         #   #    # #       #    #  # #  #        #    #  #  #          #    # #    # ##  ##\n        #####     #   ###### #       #    #   #    ####    #   #    # #          #      #    # # ## #\n        #         #   #    # #       #####    #        #   #   ###### #      ### #      #    # #    #\n        #         #   #    # #     # #   #    #   #    #   #   #    # #      ### #    # #    # #    #\n        #######   #   #    #  #####  #    #   #    ####    #   #    # ###### ###  ####   ####  #    #\n\n        Telegram: t.me/EthCrystalGame\n\n    */\n    using SafeMath for *;\n\n    struct TowersInfoList {\n        string name;\n        uint256 timeLimit; // The maximum time increasement\n        uint256 warriorToTime;\n        uint256 currentRoundID;\n        uint256 timerType;\n        uint256 growthCoefficient;\n        uint256 winnerShare; // % to the winner after the round [Active Fond]\n        uint256 nextRound; // % to the next round pot\n        uint256 dividendShare; // % as dividends to holders after the round\n\n        mapping (uint256 => TowersInfo) RoundList;\n    }\n\n    struct TowersInfo {\n        uint256 roundID;\n        uint256 towerBalance; // Balance for distribution in the end\n        uint256 totalBalance; // Total balance with referrer or dev %\n        uint256 totalWarriors;\n        uint256 timeToFinish;\n        uint256 timeLimit; // The maximum increasement\n        uint256 warriorToTime;\n        uint256 bonusPot; // % of tower balance from the previous round\n        address lastPlayer;\n        bool potReceived;\n        bool finished;\n    }\n\n    struct PlayerInfo {\n        uint256 playerID;\n        address playerAddress;\n        address referralAddress;\n        string nickname;\n        mapping (uint256 => TowersRoundInfo) TowersList;\n    }\n\n    struct TowersRoundInfo {\n        uint256 _TowerType;\n        mapping (uint256 => PlayerRoundInfo) RoundList;\n    }\n\n    struct PlayerRoundInfo {\n        uint256 warriors;\n        uint256 cashedOut; // To Allow cashing out before the game finished\n    }\n\n\n    struct ReferralInfo {\n        uint256 balance;\n    }\n\n    uint256 public playerID_counter = 1;\n\n    uint256 public devShare = 5; // % to devs\n    uint256 public affShare = 10; // bounty % to reffers\n\n    mapping (uint256 => PlayerInfo) public playersByID;\n    mapping (address => PlayerInfo) public players;\n    mapping (address => ReferralInfo) public aff;\n\n    mapping (uint256 => TowersInfoList) public GameRounds;\n\n    address public ownerAddress;\n    \n    event BuyEvent(address player, uint256 TowerID, uint256 RoundID, uint256 TotalWarriors, uint256 WarriorPrice, uint256 TimeLeft);\n\n    constructor() public {\n        ownerAddress = msg.sender;\n\n        // Creating different towers\n        GameRounds[0] = TowersInfoList(\"Crystal Tower\", 60*60*24,  30, 0, 2,      10000000000000,     35, 15, 50);\n        GameRounds[1] = TowersInfoList(\"Red Tower\",     60*60*24,  60, 0, 2,      20000000000000,     25,  5, 70);\n        GameRounds[2] = TowersInfoList(\"Gold Tower\",    60*60*12,  60*2, 0, 2,   250000000000000,     40, 10, 50);\n        GameRounds[3] = TowersInfoList(\"Purple Tower\",  60*60*24,  60*10, 0, 2, 5000000000000000,     30, 10, 60);\n        GameRounds[4] = TowersInfoList(\"Silver Tower\",  60*60*12,  60*2, 0, 2,  1000000000000000,     35, 15, 50);\n        GameRounds[5] = TowersInfoList(\"Black Tower\",   60*60*12,  30, 0, 2,    1000000000000000,     65, 10, 25);\n        GameRounds[6] = TowersInfoList(\"Toxic Tower\",   60*60*24,  60, 0, 2,    2000000000000000,     65, 10, 25);\n\n\n        newRound(0);\n        newRound(1);\n        newRound(2);\n        newRound(3);\n        newRound(4);\n        newRound(5);\n        newRound(6);\n    }\n\n    function newRound (uint256 _TowerType) private {\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].finished = true;\n        GameRounds[_TowerType].currentRoundID++;\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID] = TowersInfo(GameRounds[_TowerType].currentRoundID, 0, 0, 0, now+GameRounds[_TowerType].timeLimit, GameRounds[_TowerType].timeLimit, GameRounds[_TowerType].warriorToTime,\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID-1].towerBalance*GameRounds[_TowerType].nextRound/100, // Moving nextRound% of the finished round balance to the next round\n        0x0, false, false); // New round\n    }\n\n    function buyWarriors (uint256 _TowerType, uint _WarriorsAmount, uint256 _referralID) public payable {\n        require (msg.value > 10000000); // To prevent % abusing\n        require (_WarriorsAmount >= 1 && _WarriorsAmount < 1000000000); // The limitation of the amount of warriors being bought in 1 time\n        require (GameRounds[_TowerType].timeLimit > 0);\n\n        if (players[msg.sender].playerID == 0){ // this is the new player\n            if (_referralID > 0 && _referralID != players[msg.sender].playerID && _referralID == playersByID[_referralID].playerID){\n            setNickname(\"\", playersByID[_referralID].playerAddress);  // creating the new player...\n            }else{\n            setNickname(\"\", ownerAddress);\n            }\n        }\n\n        if (GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish < now){\n            // The game was ended. Starting the new game...\n\n            // Sending pot to the winner\n            aff[GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].lastPlayer].balance += GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].towerBalance*GameRounds[_TowerType].winnerShare/100;\n\n            // Sending the bonus pot to the winner\n            aff[GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].lastPlayer].balance += GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].bonusPot;\n\n            newRound(_TowerType);\n            //Event Winner and the new round\n            //return;\n        }\n\n        // Getting the price of the current warrior\n        uint256 _totalWarriors = GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalWarriors;\n        uint256 _warriorPrice = (_totalWarriors+1)*GameRounds[_TowerType].growthCoefficient; // Warrior Price\n\n        uint256 _value = (_WarriorsAmount*_warriorPrice)+(((_WarriorsAmount-1)*(_WarriorsAmount-1)+_WarriorsAmount-1)/2)*GameRounds[_TowerType].growthCoefficient;\n\n        require (msg.value >= _value); // Player pays enough\n\n        uint256 _ethToTake = affShare+devShare; // 15%\n\n\n        players[msg.sender].TowersList[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].warriors += _WarriorsAmount;\n\n        if (players[players[msg.sender].referralAddress].playerID > 0 && players[msg.sender].referralAddress != ownerAddress){\n            // To referrer and devs\n            aff[players[msg.sender].referralAddress].balance += _value*affShare/100; // 10%\n            aff[ownerAddress].balance += _value*devShare/100; // 5%\n        } else {\n            // To devs only\n            _ethToTake = affShare;\n            aff[ownerAddress].balance += _value*_ethToTake/100; // 10%\n        }\n\n        if (msg.value-_value > 0){\n            aff[msg.sender].balance += msg.value-_value; // Returning to player the rest of eth\n        }\n\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].towerBalance += _value*(100-_ethToTake)/100; // 10-15%\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalBalance += _value;\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalWarriors += _WarriorsAmount;\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].lastPlayer = msg.sender;\n\n        // Timer increasement\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish += (_WarriorsAmount).mul(GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].warriorToTime);\n\n        // if the finish time is longer than the finish\n        if (GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish > now+GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeLimit){\n            GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish = now+GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeLimit;\n        }\n        \n        uint256 TotalWarriors = GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalWarriors;\n        uint256 TimeLeft = GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish;\n        \n        // Event about the new potential winner and some Tower Details\n        emit BuyEvent(msg.sender,\n        _TowerType,\n        GameRounds[_TowerType].currentRoundID,\n        TotalWarriors,\n        (TotalWarriors+1)*GameRounds[_TowerType].growthCoefficient,\n        TimeLeft);\n        \n        return;\n    }\n\n    function dividendCashout (uint256 _TowerType, uint256 _RoundID) public {\n        require (GameRounds[_TowerType].timeLimit > 0);\n\n        uint256 _warriors = players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].warriors;\n        require (_warriors > 0);\n        uint256 _totalEarned = _warriors*GameRounds[_TowerType].RoundList[_RoundID].towerBalance*GameRounds[_TowerType].dividendShare/GameRounds[_TowerType].RoundList[_RoundID].totalWarriors/100;\n        uint256 _alreadyCashedOut = players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].cashedOut;\n        uint256 _earnedNow = _totalEarned-_alreadyCashedOut;\n        require (_earnedNow > 0); // The total amount of dividends haven't been received by the player yet\n\n        players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].cashedOut = _totalEarned;\n\n        if (!msg.sender.send(_earnedNow)){\n            players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].cashedOut = _alreadyCashedOut;\n        }\n        return;\n    }\n\n    function referralCashout () public {\n        require (aff[msg.sender].balance > 0);\n\n        uint256 _balance = aff[msg.sender].balance;\n\n        aff[msg.sender].balance = 0;\n\n        if (!msg.sender.send(_balance)){\n            aff[msg.sender].balance = _balance;\n        }\n    }\n\n    function setNickname (string nickname, address _referralAddress)\n    public {\n        if (players[msg.sender].playerID == 0){\n            players[msg.sender] = PlayerInfo (playerID_counter, msg.sender, _referralAddress, nickname);\n            playersByID[playerID_counter] = PlayerInfo (playerID_counter, msg.sender, _referralAddress, nickname);\n            playerID_counter++;\n        }else{\n            players[msg.sender].nickname = nickname;\n            playersByID[players[msg.sender].playerID].nickname = nickname;\n        }\n    }\n\n    function _playerRoundsInfo (address _playerAddress, uint256 _TowerType, uint256 _RoundID)\n    public\n    view\n    returns (uint256, uint256, uint256, uint256, uint256, bool, address) {\n        uint256 _warriors = players[_playerAddress].TowersList[_TowerType].RoundList[_RoundID].warriors;\n        TowersInfo memory r = GameRounds[_TowerType].RoundList[_RoundID];\n        uint256 _totalForCashOut = (_warriors*r.towerBalance*GameRounds[_RoundID].dividendShare/r.totalWarriors/100);\n        bool isFinished = true;\n        if (GameRounds[_TowerType].RoundList[_RoundID].timeToFinish > now){\n            isFinished = false;\n        }\n        return (\n        r.towerBalance*GameRounds[_TowerType].winnerShare/100,\n        _currentPlayerAmountUnclaimed(_playerAddress, _TowerType, _RoundID),\n        _totalForCashOut,\n        _warriors,\n        r.totalWarriors,\n        isFinished,\n        r.lastPlayer);\n    }\n\n    function _currentWarriorPrice (uint256 _TowerType)\n    public\n    view\n    returns (uint256) {\n        return ((GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalWarriors+1)*GameRounds[_TowerType].growthCoefficient);\n    }\n\n    function _currentPlayerAmountUnclaimed (address _playerAddress, uint256 _TowerType, uint256 _RoundID)\n    public\n    view\n    returns (uint256) {\n        if (_RoundID == 0){\n            _RoundID = GameRounds[_TowerType].currentRoundID;\n        }\n        uint256 _warriors = players[_playerAddress].TowersList[_TowerType].RoundList[_RoundID].warriors;\n        uint256 _totalForCashOut = (_warriors*GameRounds[_TowerType].RoundList[_RoundID].towerBalance*GameRounds[_RoundID].dividendShare/GameRounds[_TowerType].RoundList[_RoundID].totalWarriors/100);\n        uint256 _unclaimedAmount = _totalForCashOut-players[_playerAddress].TowersList[_TowerType].RoundList[_RoundID].cashedOut;\n        return (_unclaimedAmount);\n    }\n\n    function _currentPlayerAmountUnclaimedAll (address _playerAddress)\n    public\n    view\n    returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\n        return (_currentPlayerAmountUnclaimed(_playerAddress, 0, 1),\n        _currentPlayerAmountUnclaimed(_playerAddress, 1, 1),\n        _currentPlayerAmountUnclaimed(_playerAddress, 2, 1),\n        _currentPlayerAmountUnclaimed(_playerAddress, 3, 1),\n        _currentPlayerAmountUnclaimed(_playerAddress, 4, 1),\n        _currentPlayerAmountUnclaimed(_playerAddress, 5, 1),\n        _currentPlayerAmountUnclaimed(_playerAddress, 6, 1));\n    }\n    /*\n        Gets the player details by IDs\n    */\n\n    function _playerInfo (uint256 _playerID)\n    public\n    view\n    returns (uint256, address, string, uint256) {\n        return (playersByID[_playerID].playerID,\n        playersByID[_playerID].playerAddress,\n        playersByID[_playerID].nickname,\n        aff[playersByID[_playerID].playerAddress].balance);\n    }\n    \n    function WarriorTotalPrice (uint256 _WarriorsAmount, uint256 _warriorPrice, uint256 coef)\n    public\n    pure\n    returns (uint256) {\n        return (_WarriorsAmount*_warriorPrice)+(((_WarriorsAmount-1)*(_WarriorsAmount-1)+_WarriorsAmount-1)/2)*coef;\n    }\n    \n\n\n    function _playerBalance (address _playerAddress)\n    public\n    view\n    returns (uint256) {\n        return aff[_playerAddress].balance;\n    }\n\n    /*\n        Gets the tower's details by round IDs\n    */\n    function _TowerRoundDetails (uint256 _TowerType, uint256 _RoundID)\n    public\n    view\n    returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bool, bool) {\n        TowersInfo memory r = GameRounds[_TowerType].RoundList[_RoundID];\n        return (\n        r.roundID,\n        r.towerBalance,\n        r.totalBalance,\n        r.totalWarriors,\n        r.timeToFinish,\n        r.timeLimit,\n        r.warriorToTime,\n        r.bonusPot,\n        r.lastPlayer,\n        r.potReceived,\n        r.finished\n        );\n    }\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else\n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}",
  "bytecode": ""
}