{
  "address": "0xc3ad35d351b33783f27777e2ee1a4b6f96e4ee34",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "E25_Booster",
  "compilerVersion": "v0.4.25-nightly.2018.6.3+commit.ef8fb63b",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-08\n*/\n\npragma solidity ^0.4.13;\n\ncontract AcceptsProofofHumanity {\n    E25_Booster public tokenContract;\n\n    function AcceptsProofofHumanity(address _tokenContract) public {\n        tokenContract = E25_Booster(_tokenContract);\n    }\n\n    modifier onlyTokenContract { \n        require(msg.sender == address(tokenContract));\n        _;\n    }\n\n    \n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n}\n\n\ncontract E25_Booster {\n  \n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    modifier notContract() {\n      require (msg.sender == tx.origin);\n      _;\n    }\n\n  \n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n  \n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n  \n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n   \n    string public name = \"E25_Booster\";\n    string public symbol = \"E25\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 21;\n    uint8 constant internal charityFee_ = 4;\n    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n    uint256 constant internal magnitude = 2**64;\n\n    \n    address constant public giveEthCharityAddress = 0x9f8162583f7Da0a35a5C00e90bb15f22DcdE41eD;\n    uint256 public totalEthCharityRecieved; \n    uint256 public totalEthCharityCollected; \n\n    uint256 public stakingRequirement = 100e18;\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n   \n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    mapping(address => bool) public administrators;\n\n\n    mapping(address => bool) public canAcceptTokens_; \n\n    function E25_Booster()\n        public\n    {\n  \n        \n    }\n\n\n   \n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseInternal(msg.value, _referredBy);\n    }\n\n   \n    function()\n        payable\n        public\n    {\n        purchaseInternal(msg.value, 0x0);\n    }\n\n   \n    function payCharity() payable public {\n      uint256 ethToPay = SafeMath.sub(totalEthCharityCollected, totalEthCharityRecieved);\n      require(ethToPay > 1);\n      totalEthCharityRecieved = SafeMath.add(totalEthCharityRecieved, ethToPay);\n      if(!giveEthCharityAddress.call.value(ethToPay).gas(400000)()) {\n         totalEthCharityRecieved = SafeMath.sub(totalEthCharityRecieved, ethToPay);\n      }\n    }\n\n   \n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        uint256 _dividends = myDividends(false); \n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    \n    function exit()\n        public\n    {\n        \n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n\n        \n        withdraw();\n    }\n\n   \n    function withdraw()\n        onlyStronghands()\n        public\n    {\n       \n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); \n\n       \n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n       \n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        \n        _customerAddress.transfer(_dividends);\n\n        \n        onWithdraw(_customerAddress, _dividends);\n    }\n\n   \n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n       \n        address _customerAddress = msg.sender;\n       \n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n\n        \n        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _charityPayout);\n\n       \n        totalEthCharityCollected = SafeMath.add(totalEthCharityCollected, _charityPayout);\n\n        \n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        \n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        \n        if (tokenSupply_ > 0) {\n            \n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n       \n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n\n\n  \n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        \n        address _customerAddress = msg.sender;\n\n       \n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        if(myDividends(true) > 0) withdraw();\n\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n\n        Transfer(_customerAddress, _toAddress, _amountOfTokens);\n\n       \n        return true;\n    }\n\n   \n    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\n      require(_to != address(0));\n      require(canAcceptTokens_[_to] == true); \n      require(transfer(_to, _value)); \n\n      if (isContract(_to)) {\n        AcceptsProofofHumanity receiver = AcceptsProofofHumanity(_to);\n        require(receiver.tokenFallback(msg.sender, _value, _data));\n      }\n\n      return true;\n    }\n\n     function isContract(address _addr) private view returns (bool is_contract) {\n      \n       uint length;\n       assembly { length := extcodesize(_addr) }\n       return length > 0;\n     }\n\n  \n    \n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n\n    \n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n\n    \n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n   \n    function myDividends(bool _includeReferralBonus)\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n   \n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(SafeMath.mul(profitPerShare_ ,tokenBalanceLedger_[_customerAddress])) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    \n    function sellPrice()\n        public\n        view\n        returns(uint256)\n    {\n        \n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n            uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _charityPayout);\n            return _taxedEthereum;\n        }\n    }\n\n   \n    function buyPrice()\n        public\n        view\n        returns(uint256)\n    {\n        \n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n            uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _charityPayout);\n            return _taxedEthereum;\n        }\n    }\n\n  \n    function calculateTokensReceived(uint256 _ethereumToSpend)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_), 100);\n        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, charityFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _charityPayout);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        return _amountOfTokens;\n    }\n\n   \n    function calculateEthereumReceived(uint256 _tokensToSell)\n        public\n        view\n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_ethereum, charityFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _charityPayout);\n        return _taxedEthereum;\n    }\n\n    \n    function etherToSendCharity()\n        public\n        view\n        returns(uint256) {\n        return SafeMath.sub(totalEthCharityCollected, totalEthCharityRecieved);\n    }\n\n\n    \n    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\n      notContract()\n      internal\n      returns(uint256) {\n\n      uint256 purchaseEthereum = _incomingEthereum;\n      uint256 excess;\n      if(purchaseEthereum > 5 ether) { \n          if (SafeMath.sub(address(this).balance, purchaseEthereum) <= 100 ether) { \n              purchaseEthereum = 5 ether;\n              excess = SafeMath.sub(_incomingEthereum, purchaseEthereum);\n          }\n      }\n\n      purchaseTokens(purchaseEthereum, _referredBy);\n\n      if (excess > 0) {\n        msg.sender.transfer(excess);\n      }\n    }\n\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        internal\n        returns(uint256)\n    {\n        \n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _charityPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, charityFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _charityPayout);\n\n        totalEthCharityCollected = SafeMath.add(totalEthCharityCollected, _charityPayout);\n\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n\n        \n        if(\n            \n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n           \n            _referredBy != msg.sender &&\n\n          \n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            \n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n          \n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        \n        if(tokenSupply_ > 0){\n\n           \n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            \n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n\n           \n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n\n        } else {\n           \n            tokenSupply_ = _amountOfTokens;\n        }\n\n       \n        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n\n       \n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[msg.sender] += _updatedPayouts;\n\n        \n        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n\n        return _amountOfTokens;\n    }\n\n  \n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n              \n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n\n        return _tokensReceived;\n    }\n\n \n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            \n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n\n\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n\nlibrary SafeMath {\n\n \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n  \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        \n        uint256 c = a / b;\n      \n        return c;\n    }\n\n   \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n  \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canAcceptTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherToSendCharity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payCharity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthCharityRecieved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"giveEthCharityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthCharityCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526040805190810160405280600b81526020017f4532355f426f6f737465720000000000000000000000000000000000000000008152506000908051906020019062000051929190620000c6565b506040805190810160405280600381526020017f4532350000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f929190620000c6565b5068056bc75e2d631000006004556000600855348015620000bf57600080fd5b5062000175565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200010957805160ff19168380011785556200013a565b828001600101855582156200013a579182015b82811115620001395782518255916020019190600101906200011c565b5b5090506200014991906200014d565b5090565b6200017291905b808211156200016e57600081600090555060010162000154565b5090565b90565b61202e80620001856000396000f300608060405260043610610169576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806265318b1461017757806306fdde03146101ce5780630f34dc161461025e57806310d0ffdd146102b957806318160ddd146102fa5780632260937314610325578063313ce567146103665780633b545d2f146103975780633ccfd60b146103c25780634000aea0146103d95780634071f89b146104565780634b7503341461046057806356d399e81461048b578063688abbf7146104b65780636b2f4632146104f957806370a082311461052457806376be15851461057b5780638620410b146105d657806391a266ac14610601578063949e8acd1461062c57806395d89b4114610657578063a9059cbb146106e7578063b743f7b61461074c578063cbe0a1aa146107a3578063e4849b32146107ce578063e9fad8ee146107fb578063f088d54714610812578063fdb5a03e1461085c575b610174346000610873565b50005b34801561018357600080fd5b506101b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610974565b6040518082815260200191505060405180910390f35b3480156101da57600080fd5b506101e3610a1d565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610223578082015181840152602081019050610208565b50505050905090810190601f1680156102505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026a57600080fd5b5061029f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610abb565b604051808215151515815260200191505060405180910390f35b3480156102c557600080fd5b506102e460048036038101908080359060200190929190505050610adb565b6040518082815260200191505060405180910390f35b34801561030657600080fd5b5061030f610b43565b6040518082815260200191505060405180910390f35b34801561033157600080fd5b5061035060048036038101908080359060200190929190505050610b4d565b6040518082815260200191505060405180910390f35b34801561037257600080fd5b5061037b610bc6565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103a357600080fd5b506103ac610bcb565b6040518082815260200191505060405180910390f35b3480156103ce57600080fd5b506103d7610be0565b005b3480156103e557600080fd5b5061043c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050610d84565b604051808215151515815260200191505060405180910390f35b61045e610f61565b005b34801561046c57600080fd5b50610475610ff6565b6040518082815260200191505060405180910390f35b34801561049757600080fd5b506104a0611082565b6040518082815260200191505060405180910390f35b3480156104c257600080fd5b506104e3600480360381019080803515159060200190929190505050611088565b6040518082815260200191505060405180910390f35b34801561050557600080fd5b5061050e6110f4565b6040518082815260200191505060405180910390f35b34801561053057600080fd5b50610565600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611113565b6040518082815260200191505060405180910390f35b34801561058757600080fd5b506105bc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061115c565b604051808215151515815260200191505060405180910390f35b3480156105e257600080fd5b506105eb61117c565b6040518082815260200191505060405180910390f35b34801561060d57600080fd5b50610616611208565b6040518082815260200191505060405180910390f35b34801561063857600080fd5b5061064161120e565b6040518082815260200191505060405180910390f35b34801561066357600080fd5b5061066c611223565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106ac578082015181840152602081019050610691565b50505050905090810190601f1680156106d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106f357600080fd5b50610732600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112c1565b604051808215151515815260200191505060405180910390f35b34801561075857600080fd5b50610761611570565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107af57600080fd5b506107b8611588565b6040518082815260200191505060405180910390f35b3480156107da57600080fd5b506107f96004803603810190808035906020019092919050505061158e565b005b34801561080757600080fd5b506108106117fd565b005b610846600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611864565b6040518082815260200191505060405180910390f35b34801561086857600080fd5b50610871611876565b005b60008060003273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108b257600080fd5b849150674563918244f400008211156109105768056bc75e2d631000006108f03073ffffffffffffffffffffffffffffffffffffffff1631846119ea565b11151561090f57674563918244f40000915061090c85836119ea565b90505b5b61091a8285611a03565b50600081111561096c573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561096a573d6000803e3d6000fd5b505b505092915050565b600068010000000000000000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a0b600954600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dff565b03811515610a1557fe5b049050919050565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ab35780601f10610a8857610100808354040283529160200191610ab3565b820191906000526020600020905b815481529060010190602001808311610a9657829003601f168201915b505050505081565b600b6020528060005260406000206000915054906101000a900460ff1681565b6000806000806000610afb610af487601560ff16611dff565b6064611e3a565b9350610b15610b0e87600460ff16611dff565b6064611e3a565b9250610b2a610b2487866119ea565b846119ea565b9150610b3582611e55565b905080945050505050919050565b6000600854905090565b60008060008060006008548611151515610b6657600080fd5b610b6f86611ede565b9350610b89610b8285601560ff16611dff565b6064611e3a565b9250610ba3610b9c85600460ff16611dff565b6064611e3a565b9150610bb8610bb285856119ea565b836119ea565b905080945050505050919050565b601281565b6000610bdb6003546002546119ea565b905090565b6000806000610bef6001611088565b111515610bfb57600080fd5b339150610c086000611088565b9050680100000000000000008102600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054810190506000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d31573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff167fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc826040518082815260200191505060405180910390a25050565b600080600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515610dc357600080fd5b60011515600b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610e2257600080fd5b610e2c86866112c1565b1515610e3757600080fd5b610e4086611f86565b15610f54578590508073ffffffffffffffffffffffffffffffffffffffff1663c0ee0b8a338787876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018281038252848482818152602001925080828437820191505095505050505050602060405180830381600087803b158015610f0d57600080fd5b505af1158015610f21573d6000803e3d6000fd5b505050506040513d6020811015610f3757600080fd5b81019080805190602001909291905050501515610f5357600080fd5b5b6001915050949350505050565b6000610f716003546002546119ea565b9050600181111515610f8257600080fd5b610f8e60025482611f99565b600281905550739f8162583f7da0a35a5c00e90bb15f22dcde41ed73ffffffffffffffffffffffffffffffffffffffff168162061a8090604051600060405180830381858888f193505050501515610ff357610fec600254826119ea565b6002819055505b50565b600080600080600080600854141561101b57633b9aca006402540be40003945061107b565b61102c670de0b6b3a7640000611ede565b935061104661103f85601560ff16611dff565b6064611e3a565b925061106061105985600460ff16611dff565b6064611e3a565b915061107561106f85856119ea565b836119ea565b90508094505b5050505090565b60045481565b600080339050826110a15761109c81610974565b6110ec565b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546110ea82610974565b015b915050919050565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a6020528060005260406000206000915054906101000a900460ff1681565b60008060008060008060085414156111a157633b9aca006402540be400019450611201565b6111b2670de0b6b3a7640000611ede565b93506111cc6111c585601560ff16611dff565b6064611e3a565b92506111e66111df85600460ff16611dff565b6064611e3a565b91506111fb6111f58585611f99565b83611f99565b90508094505b5050505090565b60025481565b60008033905061121d81611113565b91505090565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112b95780601f1061128e576101008083540402835291602001916112b9565b820191906000526020600020905b81548152906001019060200180831161129c57829003601f168201915b505050505081565b60008060006112ce61120e565b1115156112da57600080fd5b339050600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561132b57600080fd5b60006113376001611088565b111561134657611345610be0565b5b61138f600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846119ea565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061141b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611f99565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508260095402600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508260095402600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b739f8162583f7da0a35a5c00e90bb15f22dcde41ed81565b60035481565b6000806000806000806000806115a261120e565b1115156115ae57600080fd5b339650600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205488111515156115ff57600080fd5b87955061160b86611ede565b945061162561161e86601560ff16611dff565b6064611e3a565b935061163f61163886600460ff16611dff565b6064611e3a565b925061165461164e86866119ea565b846119ea565b915061166260035484611f99565b600381905550611674600854876119ea565b6008819055506116c3600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876119ea565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550680100000000000000008202866009540201905080600760008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506000600854111561179d5761179660095460085468010000000000000000870281151561179057fe5b04611f99565b6009819055505b8673ffffffffffffffffffffffffffffffffffffffff167fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a311398784604051808381526020018281526020019250505060405180910390a25050505050505050565b600080339150600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115611858576118578161158e565b5b611860610be0565b5050565b60006118703483610873565b50919050565b6000806000806118866001611088565b11151561189257600080fd5b61189c6000611088565b9250339150680100000000000000008302600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054830192506000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061198d836000611a03565b90508173ffffffffffffffffffffffffffffffffffffffff167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b60008282111515156119f857fe5b818303905092915050565b6000806000806000806000806000611a29611a228c601560ff16611dff565b6064611e3a565b9750611a36886003611e3a565b9650611a50611a498c600460ff16611dff565b6064611e3a565b9550611a5c88886119ea565b9450611a71611a6b8c8a6119ea565b876119ea565b9350611a7f60035487611f99565b600381905550611a8e84611e55565b92506801000000000000000085029150600083118015611aba5750600854611ab884600854611f99565b115b1515611ac557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614158015611b2e57503373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614155b8015611b7b5750600454600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b15611c1157611bc9600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205488611f99565b600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c2c565b611c1b8588611f99565b945068010000000000000000850291505b60006008541115611c9757611c4360085484611f99565b600881905550600854680100000000000000008602811515611c6157fe5b04600960008282540192505081905550600854680100000000000000008602811515611c8957fe5b048302820382039150611c9f565b826008819055505b611ce8600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611f99565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081836009540203905080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58d86604051808381526020018281526020019250505060405180910390a3829850505050505050505092915050565b6000806000841415611e145760009150611e33565b8284029050828482811515611e2557fe5b04141515611e2f57fe5b8091505b5092915050565b6000808284811515611e4857fe5b0490508091505092915050565b6000806000670de0b6b3a76400006402540be400029150600854633b9aca00611ec7611ec160085486633b9aca00600202020260026008540a6002633b9aca000a02670de0b6b3a76400008a02670de0b6b3a7640000633b9aca0002600202026002890a010101611fb7565b856119ea565b811515611ed057fe5b040390508092505050919050565b600080600080670de0b6b3a764000085019250670de0b6b3a7640000600854019150670de0b6b3a7640000611f6f670de0b6b3a76400008503633b9aca00670de0b6b3a764000086811515611f2f57fe5b04633b9aca00026402540be4000103026002670de0b6b3a7640000876002890a03811515611f5957fe5b04633b9aca0002811515611f6957fe5b046119ea565b811515611f7857fe5b049050809350505050919050565b600080823b905060008111915050919050565b6000808284019050838110151515611fad57fe5b8091505092915050565b600080600260018401811515611fc957fe5b0490508291505b81811015611ffc578091506002818285811515611fe957fe5b0401811515611ff457fe5b049050611fd0565b509190505600a165627a7a72305820b09b45c8a9557873567cc7ac231a47d04180cb56c37a5e5543dba112557002510029"
}