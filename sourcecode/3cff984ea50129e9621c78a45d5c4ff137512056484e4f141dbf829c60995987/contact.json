{
  "address": "0xd1670c55f5e68fede5fddd8ace64a3329f778b89",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ATSTokenReservation",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-30\n*/\n\npragma solidity ^0.4.23;\n\n/*\n * Contract accepting reservations for ATS tokens.\n * The actual tokens are not yet created and distributed due to non-technical reasons.\n * This contract is used to collect funds for the ATS token sale and to transparently document that on a blockchain.\n * It is tailored to allow a simple user journey while keeping complexity minimal.\n * Once the privileged \"state controller\" sets the state to \"Open\", anybody can send Ether to the contract.\n * Only Ether sent from whitelisted addresses is accepted for future ATS token conversion.\n * The whitelisting is done by a dedicated whitelist controller.\n * Whitelisting can take place asynchronously - that is, participants don't need to wait for the whitelisting to\n * succeed before sending funds. This is a technical detail which allows for a smoother user journey.\n * The state controller can switch to synchronous whitelisting (no Ether accepted from accounts not whitelisted before).\n * Participants can trigger refunding during the Open state by making a transfer of 0 Ether.\n * Funds of those not whitelisted (not accepted) are never locked, they can trigger refund beyond Open state.\n * Only in Over state can whitelisted Ether deposits be fetched from the contract.\n *\n * When setting the state to Open, the state controller specifies a minimal timeframe for this state.\n * Transition to the next state (Locked) is not possible (enforced by the contract).\n * This gives participants the guarantee that they can get their full deposits refunded anytime and independently\n * of the will of anybody else during that timeframe.\n * (Note that this is true only as long as the whole process takes place before the date specified by FALLBACK_FETCH_FUNDS_TS)\n *\n * Ideally, there's no funds left in the contract once the state is set to Over and the accepted deposits were fetched.\n * Since this can't really be foreseen, there's a fallback which allows to fetch all remaining Ether\n * to a pre-specified address after a pre-specified date.\n *\n * Static analysis: block.timestamp is not used in a way which gives miners leeway for taking advantage.\n *\n * see https://code.lab10.io/graz/04-artis/artis/issues/364 for task evolution\n */\ncontract ATSTokenReservation {\n\n    // ################### DATA STRUCTURES ###################\n\n    enum States {\n        Init, // initial state. Contract is deployed, but deposits not yet accepted\n        Open, // open for token reservations. Refunds possible for all\n        Locked, // open for token reservations. Refunds locked for accepted deposits\n        Over // contract has done its duty. Funds payout can be triggered by state controller\n    }\n\n    // ################### CONSTANTS ###################\n\n    // 1. Oct 2018\n    uint32 FALLBACK_PAYOUT_TS = 1538352000;\n\n    // ################### STATE VARIABLES ###################\n\n    States public state = States.Init;\n\n    // privileged account: switch contract state, change config, whitelisting, trigger payout, ...\n    address public stateController;\n\n    // privileged account: whitelisting\n    address public whitelistController;\n\n    // Collected funds can be transferred only to this address. Is set in constructor.\n    address public payoutAddress;\n\n    // accepted deposits (received from whitelisted accounts)\n    uint256 public cumAcceptedDeposits = 0;\n    // not (yet) accepted deposits (received from non-whitelisted accounts)\n    uint256 public cumAlienDeposits = 0;\n\n    // cap for how much we accept (since the amount of tokens sold is also capped)\n    uint256 public maxCumAcceptedDeposits = 1E9 * 1E18; // pre-set to effectively unlimited (> existing ETH)\n\n    uint256 public minDeposit = 0.1 * 1E18; // lower bound per participant (can be a kind of spam protection)\n\n    uint256 minLockingTs; // earliest possible start of \"locked\" phase\n\n    // whitelisted addresses (those having \"accepted\" deposits)\n    mapping (address => bool) public whitelist;\n\n    // the state controller can set this in order to disallow deposits from addresses not whitelisted before\n    bool public requireWhitelistingBeforeDeposit = false;\n\n    // tracks accepted deposits (whitelisted accounts)\n    mapping (address => uint256) public acceptedDeposits;\n\n    // tracks alien (not yet accepted) deposits (non-whitelisted accounts)\n    mapping (address => uint256) public alienDeposits;\n\n    // ################### EVENTS ###################\n\n    // emitted events transparently document the open funding activities.\n    // only deposits made by whitelisted accounts (and not followed by a refund) count.\n\n    event StateTransition(States oldState, States newState);\n    event Whitelisted(address addr);\n    event Deposit(address addr, uint256 amount);\n    event Refund(address addr, uint256 amount);\n\n    // emitted when the accepted deposits are fetched to an account controlled by the ATS token provider\n    event FetchedDeposits(uint256 amount);\n\n    // ################### MODIFIERS ###################\n\n    modifier onlyStateControl() { require(msg.sender == stateController, \"no permission\"); _; }\n\n    modifier onlyWhitelistControl()\t{\n        require(msg.sender == stateController || msg.sender == whitelistController, \"no permission\");\n        _;\n    }\n\n    modifier requireState(States _requiredState) { require(state == _requiredState, \"wrong state\"); _; }\n\n    // ################### CONSTRUCTOR ###################\n\n    // the contract creator is set as stateController\n    constructor(address _whitelistController, address _payoutAddress) public {\n        whitelistController = _whitelistController;\n        payoutAddress = _payoutAddress;\n        stateController = msg.sender;\n    }\n\n    // ################### FALLBACK FUNCTION ###################\n\n    // implements the deposit and refund actions.\n    function () payable public {\n        if(msg.value > 0) {\n            require(state == States.Open || state == States.Locked);\n            if(requireWhitelistingBeforeDeposit) {\n                require(whitelist[msg.sender] == true, \"not whitelisted\");\n            }\n            tryDeposit();\n        } else {\n            tryRefund();\n        }\n    }\n\n    // ################### PUBLIC FUNCTIONS ###################\n\n    function stateSetOpen(uint32 _minLockingTs) public\n        onlyStateControl\n        requireState(States.Init)\n    {\n        minLockingTs = _minLockingTs;\n        setState(States.Open);\n    }\n\n    function stateSetLocked() public\n        onlyStateControl\n        requireState(States.Open)\n    {\n        require(block.timestamp >= minLockingTs);\n        setState(States.Locked);\n    }\n\n    function stateSetOver() public\n        onlyStateControl\n        requireState(States.Locked)\n    {\n        setState(States.Over);\n    }\n\n    // state controller can change the cap. Reducing possible only if not below current deposits\n    function updateMaxAcceptedDeposits(uint256 _newMaxDeposits) public onlyStateControl {\n        require(cumAcceptedDeposits <= _newMaxDeposits);\n        maxCumAcceptedDeposits = _newMaxDeposits;\n    }\n\n    // new limit to be enforced for future deposits\n    function updateMinDeposit(uint256 _newMinDeposit) public onlyStateControl {\n        minDeposit = _newMinDeposit;\n    }\n\n    // option to switch between async and sync whitelisting\n    function setRequireWhitelistingBeforeDeposit(bool _newState) public onlyStateControl {\n        requireWhitelistingBeforeDeposit = _newState;\n    }\n\n    // Since whitelisting can occur asynchronously, an account to be whitelisted may already have deposited Ether.\n    // In this case the deposit is converted form alien to accepted.\n    // Since the deposit logic depends on the whitelisting status and since transactions are processed sequentially,\n    // it's ensured that at any time an account can have either (XOR) no or alien or accepted deposits and that\n    // the whitelisting status corresponds to the deposit status (not_whitelisted <-> alien | whitelisted <-> accepted).\n    // This function is idempotent.\n    function addToWhitelist(address _addr) public onlyWhitelistControl {\n        if(whitelist[_addr] != true) {\n            // if address has alien deposit: convert it to accepted\n            if(alienDeposits[_addr] > 0) {\n                cumAcceptedDeposits += alienDeposits[_addr];\n                acceptedDeposits[_addr] += alienDeposits[_addr];\n                cumAlienDeposits -= alienDeposits[_addr];\n                delete alienDeposits[_addr]; // needs to be the last statement in this block!\n            }\n            whitelist[_addr] = true;\n            emit Whitelisted(_addr);\n        }\n    }\n\n    // Option for batched whitelisting (for times with crowded chain).\n    // caller is responsible to not blow gas limit with too many addresses at once\n    function batchAddToWhitelist(address[] _addresses) public onlyWhitelistControl {\n        for (uint i = 0; i < _addresses.length; i++) {\n            addToWhitelist(_addresses[i]);\n        }\n    }\n\n\n    // transfers an alien deposit back to the sender\n    function refundAlienDeposit(address _addr) public onlyWhitelistControl {\n        // Note: this implementation requires that alienDeposits has a primitive value type.\n        // With a complex type, this code would produce a dangling reference.\n        uint256 withdrawAmount = alienDeposits[_addr];\n        require(withdrawAmount > 0);\n        delete alienDeposits[_addr]; // implies setting the value to 0\n        cumAlienDeposits -= withdrawAmount;\n        emit Refund(_addr, withdrawAmount);\n        _addr.transfer(withdrawAmount); // throws on failure\n    }\n\n    // payout of the accepted deposits to the pre-designated address, available once it's all over\n    function payout() public\n        onlyStateControl\n        requireState(States.Over)\n    {\n        uint256 amount = cumAcceptedDeposits;\n        cumAcceptedDeposits = 0;\n        emit FetchedDeposits(amount);\n        payoutAddress.transfer(amount);\n        // not idempotent, but multiple invocation would just trigger zero-transfers\n    }\n\n    // After the specified date, any of the privileged/special accounts can trigger payment of remaining funds\n    // to the payoutAddress. This is a safety net to minimize the risk of funds remaining stuck.\n    // It's not yet clear what we can / should / are allowed to do with alien deposits which aren't reclaimed.\n    // With this fallback in place, we have for example the option to donate them at some point.\n    function fallbackPayout() public {\n        require(msg.sender == stateController || msg.sender == whitelistController || msg.sender == payoutAddress);\n        require(block.timestamp > FALLBACK_PAYOUT_TS);\n        payoutAddress.transfer(address(this).balance);\n    }\n\n    // ################### INTERNAL FUNCTIONS ###################\n\n    // rule enforcement and book-keeping for incoming deposits\n    function tryDeposit() internal {\n        require(cumAcceptedDeposits + msg.value <= maxCumAcceptedDeposits);\n        if(whitelist[msg.sender] == true) {\n            require(acceptedDeposits[msg.sender] + msg.value >= minDeposit);\n            acceptedDeposits[msg.sender] += msg.value;\n            cumAcceptedDeposits += msg.value;\n        } else {\n            require(alienDeposits[msg.sender] + msg.value >= minDeposit);\n            alienDeposits[msg.sender] += msg.value;\n            cumAlienDeposits += msg.value;\n        }\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    // rule enforcement and book-keeping for refunding requests\n    function tryRefund() internal {\n        // Note: this implementation requires that acceptedDeposits and alienDeposits have a primitive value type.\n        // With a complex type, this code would produce dangling references.\n        uint256 withdrawAmount;\n        if(whitelist[msg.sender] == true) {\n            require(state == States.Open);\n            withdrawAmount = acceptedDeposits[msg.sender];\n            require(withdrawAmount > 0);\n            delete acceptedDeposits[msg.sender]; // implies setting the value to 0\n            cumAcceptedDeposits -= withdrawAmount;\n        } else {\n            // alien deposits can be withdrawn anytime (we prefer to not touch them)\n            withdrawAmount = alienDeposits[msg.sender];\n            require(withdrawAmount > 0);\n            delete alienDeposits[msg.sender]; // implies setting the value to 0\n            cumAlienDeposits -= withdrawAmount;\n        }\n        emit Refund(msg.sender, withdrawAmount);\n        // do the actual transfer last as recommended since the DAO incident (Checks-Effects-Interaction pattern)\n        msg.sender.transfer(withdrawAmount); // throws on failure\n    }\n\n    function setState(States _newState) internal {\n        state = _newState;\n        emit StateTransition(state, _newState);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"refundAlienDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requireWhitelistingBeforeDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cumAlienDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"batchAddToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cumAcceptedDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCumAcceptedDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"bool\"}],\"name\":\"setRequireWhitelistingBeforeDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinDeposit\",\"type\":\"uint256\"}],\"name\":\"updateMinDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stateController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minLockingTs\",\"type\":\"uint32\"}],\"name\":\"stateSetOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMaxDeposits\",\"type\":\"uint256\"}],\"name\":\"updateMaxAcceptedDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fallbackPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stateSetOver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stateSetLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"alienDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_whitelistController\",\"type\":\"address\"},{\"name\":\"_payoutAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"StateTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FetchedDeposits\",\"type\":\"event\"}]",
  "bytecode": "60806040526000805463ffffffff1916635bb163801764ff000000001916815560038190556004556b033b2e3c9fd0803ce800000060055567016345785d8a00006006556009805460ff1916905534801561005957600080fd5b5060405160408061121783398101604052805160209091015160018054600160a060020a03938416600160a060020a03199182161790915560028054939092169216919091179055600080546501000000000033027fffffffffffffff0000000000000000000000000000000000000000ffffffffff909116179055611133806100e46000396000f3006080604052600436106101325763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663088f87e0811461021357806320cb27fb14610234578063299f5f1a1461025d5780632db6fa36146102845780632fdbb3d4146102d957806341b3d185146102ee5780635b8d02d7146103035780635ec72a90146103345780636124a5771461034957806363bd1d4a1461035e57806394e2662f146103735780639a7be4711461038d5780639b19251a146103a5578063a9c712f8146103c6578063bf632e67146103e7578063c1707f66146103fc578063c19d93fb1461041a578063c739515114610453578063c8af15381461046b578063d663630714610480578063d9fb696314610495578063e43252d7146104aa578063e85ff4f1146104cb575b6000341115610209576001600054640100000000900460ff16600381111561015657fe5b148061017a57506002600054640100000000900460ff16600381111561017857fe5b145b151561018557600080fd5b60095460ff16156101fc573360009081526008602052604090205460ff1615156001146101fc576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f742077686974656c69737465640000000000000000000000000000000000604482015290519081900360640190fd5b6102046104ec565b610211565b6102116105e0565b005b34801561021f57600080fd5b50610211600160a060020a0360043516610700565b34801561024057600080fd5b50610249610830565b604080519115158252519081900360200190f35b34801561026957600080fd5b50610272610839565b60408051918252519081900360200190f35b34801561029057600080fd5b50604080516020600480358082013583810280860185019096528085526102119536959394602494938501929182918501908490808284375094975061083f9650505050505050565b3480156102e557600080fd5b506102726108e5565b3480156102fa57600080fd5b506102726108eb565b34801561030f57600080fd5b506103186108f1565b60408051600160a060020a039092168252519081900360200190f35b34801561034057600080fd5b50610272610900565b34801561035557600080fd5b50610318610906565b34801561036a57600080fd5b50610211610915565b34801561037f57600080fd5b506102116004351515610a48565b34801561039957600080fd5b50610211600435610ab4565b3480156103b157600080fd5b50610249600160a060020a0360043516610b12565b3480156103d257600080fd5b50610272600160a060020a0360043516610b27565b3480156103f357600080fd5b50610318610b39565b34801561040857600080fd5b5061021163ffffffff60043516610b51565b34801561042657600080fd5b5061042f610c1d565b6040518082600381111561043f57fe5b60ff16815260200191505060405180910390f35b34801561045f57600080fd5b50610211600435610c2e565b34801561047757600080fd5b50610211610c9b565b34801561048c57600080fd5b50610211610d38565b3480156104a157600080fd5b50610211610dfa565b3480156104b657600080fd5b50610211600160a060020a0360043516610ecb565b3480156104d757600080fd5b50610272600160a060020a0360043516611022565b600554600354340111156104ff57600080fd5b3360009081526008602052604090205460ff1615156001141561056257600654336000908152600a60205260409020543401101561053c57600080fd5b336000908152600a602052604090208054349081019091556003805490910190556105a4565b600654336000908152600b60205260409020543401101561058257600080fd5b336000908152600b602052604090208054349081019091556004805490910190555b6040805133815234602082015281517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c929181900390910190a1565b3360009081526008602052604081205460ff1615156001141561065d576001600054640100000000900460ff16600381111561061857fe5b1461062257600080fd5b50336000908152600a602052604081205490811161063f57600080fd5b336000908152600a6020526040812055600380548290039055610694565b50336000908152600b602052604081205490811161067a57600080fd5b336000908152600b60205260408120556004805482900390555b604080513381526020810183905281517fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d929181900390910190a1604051339082156108fc029083906000818181858888f193505050501580156106fc573d6000803e3d6000fd5b5050565b60008054650100000000009004600160a060020a031633148061072d5750600154600160a060020a031633145b1515610771576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206110e8833981519152604482015290519081900360640190fd5b50600160a060020a0381166000908152600b602052604081205490811161079757600080fd5b600160a060020a0382166000818152600b60209081526040808320929092556004805485900390558151928352820183905280517fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d9281900390910190a1604051600160a060020a0383169082156108fc029083906000818181858888f1935050505015801561082b573d6000803e3d6000fd5b505050565b60095460ff1681565b60045481565b60008054650100000000009004600160a060020a031633148061086c5750600154600160a060020a031633145b15156108b0576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206110e8833981519152604482015290519081900360640190fd5b5060005b81518110156106fc576108dd82828151811015156108ce57fe5b90602001906020020151610ecb565b6001016108b4565b60035481565b60065481565b600254600160a060020a031681565b60055481565b600154600160a060020a031681565b60008054650100000000009004600160a060020a0316331461096f576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206110e8833981519152604482015290519081900360640190fd5b600380600054640100000000900460ff16600381111561098b57fe5b146109ce576040805160e560020a62461bcd02815260206004820152600b60248201526000805160206110c8833981519152604482015290519081900360640190fd5b6003805460009091556040805182815290519193507f604544f99364c29a0cb76c78f10d29808ebc464eea63bd8a9cccbf860cff41b3919081900360200190a1600254604051600160a060020a039091169083156108fc029084906000818181858888f1935050505015801561082b573d6000803e3d6000fd5b600054650100000000009004600160a060020a03163314610aa1576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206110e8833981519152604482015290519081900360640190fd5b6009805460ff1916911515919091179055565b600054650100000000009004600160a060020a03163314610b0d576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206110e8833981519152604482015290519081900360640190fd5b600655565b60086020526000908152604090205460ff1681565b600a6020526000908152604090205481565b600054650100000000009004600160a060020a031681565b600054650100000000009004600160a060020a03163314610baa576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206110e8833981519152604482015290519081900360640190fd5b600080600054640100000000900460ff166003811115610bc657fe5b14610c09576040805160e560020a62461bcd02815260206004820152600b60248201526000805160206110c8833981519152604482015290519081900360640190fd5b63ffffffff82166007556106fc6001611034565b600054640100000000900460ff1681565b600054650100000000009004600160a060020a03163314610c87576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206110e8833981519152604482015290519081900360640190fd5b600354811015610c9657600080fd5b600555565b600054650100000000009004600160a060020a0316331480610cc75750600154600160a060020a031633145b80610cdc5750600254600160a060020a031633145b1515610ce757600080fd5b60005463ffffffff164211610cfb57600080fd5b600254604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610d35573d6000803e3d6000fd5b50565b600054650100000000009004600160a060020a03163314610d91576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206110e8833981519152604482015290519081900360640190fd5b600280600054640100000000900460ff166003811115610dad57fe5b14610df0576040805160e560020a62461bcd02815260206004820152600b60248201526000805160206110c8833981519152604482015290519081900360640190fd5b610d356003611034565b600054650100000000009004600160a060020a03163314610e53576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206110e8833981519152604482015290519081900360640190fd5b600180600054640100000000900460ff166003811115610e6f57fe5b14610eb2576040805160e560020a62461bcd02815260206004820152600b60248201526000805160206110c8833981519152604482015290519081900360640190fd5b600754421015610ec157600080fd5b610d356002611034565b600054650100000000009004600160a060020a0316331480610ef75750600154600160a060020a031633145b1515610f3b576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206110e8833981519152604482015290519081900360640190fd5b600160a060020a03811660009081526008602052604090205460ff161515600114610d3557600160a060020a0381166000908152600b60205260408120541115610fc757600160a060020a0381166000908152600b6020818152604080842080546003805490910190558054600a84529185208054909201909155919052805460048054919091039055555b600160a060020a038116600081815260086020908152604091829020805460ff19166001179055815192835290517faab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a549281900390910190a150565b600b6020526000908152604090205481565b6000805482919064ff00000000191664010000000083600381111561105557fe5b02179055507f3a779de46631dd65116ae538600f1bc3c338200c6aef638429b5de43301c28f7600060049054906101000a900460ff16826040518083600381111561109c57fe5b60ff1681526020018260038111156110b057fe5b60ff1681526020019250505060405180910390a150560077726f6e672073746174650000000000000000000000000000000000000000006e6f207065726d697373696f6e00000000000000000000000000000000000000a165627a7a723058203a3998be2566bff4cdd32d60ae846f994290ff88601e3514a80becf298901fde0029000000000000000000000000126479017ef69aed88ce5b33fa8b37ffda2b3efc0000000000000000000000003eee4ad7a36b35888823975d8124a714dff22523",
  "constructorArguments": "000000000000000000000000126479017ef69aed88ce5b33fa8b37ffda2b3efc0000000000000000000000003eee4ad7a36b35888823975d8124a714dff22523"
}