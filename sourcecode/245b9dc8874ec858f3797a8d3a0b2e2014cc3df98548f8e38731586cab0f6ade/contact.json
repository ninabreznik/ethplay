{
  "address": "0x1d555590734778a6b5231d0b5ebe16780385f444",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CryptoConstellationCore",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\ncontract CryptoConstellationAccessControl  {\n    \n    address public ceoAddress;\n    address public ctoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n\n    bool public paused = false;\n    \n    mapping (address => string) public userNickName;\n\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n    \n    modifier onlyCTO() {\n        require(msg.sender == ctoAddress);\n        _;\n    }\n\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress ||\n            msg.sender == ctoAddress\n        );\n        _;\n    }\n    \n    function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n        ceoAddress = _newCEO;\n    }\n    \n    function setCTO(address _newCTO) external onlyCEO {\n        require(_newCTO != address(0));\n        ctoAddress = _newCTO;\n    }\n\n    function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0));\n        cfoAddress = _newCFO;\n    }\n\n    function setCOO(address _newCOO) external onlyCEO {\n        require(_newCOO != address(0));\n        cooAddress = _newCOO;\n    }\n\n    function setNickName(address _user, string calldata _nickName) external returns (bool) {\n        require(_user != address(0));\n        userNickName[_user] = _nickName;\n    }\n\n    function getNickName(address _user) external view returns (string memory _nickname) {\n        require(_user != address(0));\n\n        _nickname = userNickName[_user];\n    }\n    \n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n    \n    function unpause() external onlyCEO whenPaused {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }\n}\n\nlibrary SafeMath {\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract CryptoConstellationBase is CryptoConstellationAccessControl {\n\n    using SafeMath for uint256;\n    \n    event ConstellationCreation(address indexed _owner, uint256 indexed _tokenId);\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n\n    event Bought (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\n\n    event Sold (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\n    \n    struct Constellation {\n        string name;\n        string description;\n        string ipfsHash;\n        uint64 creationTimestamp;\n    }\n\n    \n    uint256 internal increaseLimit1 = 0.02 ether;\n    uint256 internal increaseLimit2 = 0.5 ether;\n    uint256 internal increaseLimit3 = 2.0 ether;\n    uint256 internal increaseLimit4 = 5.0 ether;\n    \n    Constellation[] constellations;\n    \n    mapping (uint256 => address) public constellationCurrentOwner;\n    \n    mapping (address => uint256) internal ownershipTokenCount;\n\n    mapping (uint256 => uint256) internal startingPriceOfConstellation;\n\n    mapping (uint256 => uint256) internal priceOfConstellation;\n\n    mapping (uint256 => address) internal approvedOfConstellation;\n    \n    \n    modifier onlyOwner(uint _propId) {\n\t\trequire(constellationCurrentOwner[_propId] == msg.sender);\n\t\t_;\n\t}\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        \n        // Since the number of assets is capped to 2^32 we can't overflow this\n        ownershipTokenCount[_to]++;\n        // transfer ownership\n        constellationCurrentOwner[_tokenId] = _to;\n\n        approvedOfConstellation[_tokenId] = address(0);\n        // When creating new kittens _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n        }\n        // Emit the transfer event.\n        emit Transfer(_from, _to, _tokenId);\n    }\n    \n    \n    function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {\n        if (_price < increaseLimit1) {\n            return _price.mul(200).div(95);\n        } else if (_price < increaseLimit2) {\n            return _price.mul(135).div(96);\n        } else if (_price < increaseLimit3) {\n            return _price.mul(125).div(97);\n        } else if (_price < increaseLimit4) {\n            return _price.mul(117).div(97);\n        } else {\n            return _price.mul(115).div(98);\n        }\n    }\n\n    function calculateDevCut (uint256 _price) public view returns (uint256 _devCut) {\n        if (_price < increaseLimit1) {\n            return _price.mul(10).div(100); // 10%\n        } else if (_price < increaseLimit2) {\n            return _price.mul(9).div(100); // 9%\n        } else if (_price < increaseLimit3) {\n            return _price.mul(8).div(100); // 8%\n        } else if (_price < increaseLimit4) {\n            return _price.mul(7).div(100); // 7%\n        } else {\n            return _price.mul(6).div(100); // 6%\n        }\n    }\n\n    \n    function createConstellation(\n        string calldata _name,\n        string calldata _description,\n        string calldata _ipfsHash,\n        uint256 _price,\n        address _owner\n    )\n        external\n        whenNotPaused\n        onlyCLevel\n        returns (uint)\n    {\n        return _createConstellation(_name, _description, _ipfsHash, _price, _owner);\n    }\n    \n    function _createConstellation(\n        string memory _name,\n        string memory _description,\n        string memory _ipfsHash,\n        uint256 _price,\n        address _owner\n    )\n        internal\n        whenNotPaused\n        onlyCLevel\n        returns (uint)\n    {\n        \n        Constellation memory _constellation = Constellation({\n            name: _name,\n            description: _description,\n            ipfsHash: _ipfsHash,\n            creationTimestamp: uint64(block.timestamp)\n        });\n        uint256 newConstellationId = constellations.push(_constellation) - 1;\n\n        require(newConstellationId == uint256(uint32(newConstellationId)));\n\n        startingPriceOfConstellation[newConstellationId] = _price;\n        priceOfConstellation[newConstellationId] = _price;\n\n        // emit the birth event\n        emit ConstellationCreation(_owner, newConstellationId);\n\n        _transfer(address(0), _owner, newConstellationId);\n\n        return newConstellationId;\n    }\n   \n}\n\n\ncontract ERC721  {\n    \n    // Required methods\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n    \n}\n\ncontract ERC721Metadata {\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\n    function getMetadata(uint256 _tokenId, string memory) public pure returns (bytes32[4] memory buffer, uint256 count) {\n        if (_tokenId == 1) {\n            buffer[0] = \"Hello World! :D\";\n            count = 15;\n        } else if (_tokenId == 2) {\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        } else if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }\n    }\n}\n\ncontract CryptoConstellationOwnership is CryptoConstellationBase, ERC721 {\n    \n    string public constant name = \"CryptoConstellation\";\n    string public constant symbol = \"CCL\";\n\n    ERC721Metadata public erc721Metadata;\n\n    bytes4 constant InterfaceSignature_ERC165 =\n        bytes4(keccak256('supportsInterface(bytes4)'));\n\n    bytes4 constant InterfaceSignature_ERC721 =\n        bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\n\n\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n    {\n        \n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n\n    function setMetadataAddress(address _contractAddress) public onlyCEO {\n        erc721Metadata = ERC721Metadata(_contractAddress);\n    }\n\n\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return constellationCurrentOwner[_tokenId] == _claimant;\n    }\n    \n    function _approvedFor(uint256 _tokenId) internal view returns (address) {\n        return approvedOfConstellation[_tokenId];\n    }\n\n    function _approve(uint256 _tokenId, address _to) internal {\n        require(msg.sender != _to);\n        require(tokenExists(_tokenId));\n        require(ownerOf(_tokenId) == msg.sender);\n\n        if (_to == address(0)) {\n            if (approvedOfConstellation[_tokenId] != address(0)) {\n                delete approvedOfConstellation[_tokenId];\n                emit Approval(msg.sender, address(0), _tokenId);\n            }\n        } else {\n            approvedOfConstellation[_tokenId] = _to;\n            emit Approval(msg.sender, _to, _tokenId);\n        }\n    }\n\n    function ownerOf (uint256 _itemId) public view returns (address _owner) {\n        return constellationCurrentOwner[_itemId];\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function buy(uint256 _tokenId) payable external whenNotPaused\n    {\n        require(priceOf(_tokenId) > 0);\n        require(ownerOf(_tokenId) != address(0));\n        require(msg.value >= priceOf(_tokenId));\n        require(ownerOf(_tokenId) != msg.sender);\n        require(msg.sender != address(0));\n\n        address payable oldOwner = address(uint160(ownerOf(_tokenId)));\n        address payable newOwner = msg.sender;\n        uint256 price = priceOf(_tokenId);\n        uint256 excess = msg.value.sub(price);\n\n        _transfer(oldOwner, newOwner, _tokenId);\n        priceOfConstellation[_tokenId] = nextPriceOf(_tokenId);\n\n        emit Bought(_tokenId, newOwner, price);\n        emit Sold(_tokenId, oldOwner, price);\n\n        // Devevloper's cut which is left in contract and accesed by\n        // `withdrawAll` and `withdrawAmountTo` methods.\n        uint256 devCut = calculateDevCut(price);\n\n        // Transfer payment to old owner minus the developer's cut.\n        oldOwner.transfer(price.sub(devCut));\n\n        if (excess > 0) {\n            newOwner.transfer(excess);\n        }\n    }\n\n\n    function approve(address _to, uint256 _tokenId) external whenNotPaused\n    {\n        require(_owns(msg.sender, _tokenId));\n        \n        _approve(_tokenId, _to);\n    }\n\n    function transfer(address _to, uint256 _itemId) external {\n        require(msg.sender == ownerOf(_itemId));\n        _transfer(msg.sender, _to, _itemId);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) external whenNotPaused\n    {\n        require(_to != address(0));\n        require(_to != address(this));\n        \n        require(_approvedFor(_tokenId) == msg.sender);\n        require(_owns(_from, _tokenId));\n\n\n        _transfer(_from, _to, _tokenId);\n    }\n    \n    \n\n    function totalSupply() public view returns (uint) {\n        return constellations.length - 1;\n    }\n\n    function tokenExists(uint256 _itemId) public view returns (bool _exists) {\n    return priceOf(_itemId) > 0;\n    }\n\n    function startingPriceOf(uint256 _itemId) public view returns (uint256 _startingPrice) {\n        return startingPriceOfConstellation[_itemId];\n    }\n\n    function priceOf(uint256 _itemId) public view returns (uint256 _price) {\n        return priceOfConstellation[_itemId];\n    }\n\n    function nextPriceOf(uint256 _itemId) public view returns (uint256 _nextPrice) {\n        return calculateNextPrice(priceOf(_itemId));\n    }\n\n\n    function tokensOfOwner(address _owner) external view returns(uint256[] memory ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalConstellation = totalSupply();\n            uint256 resultIndex = 0;\n\n            uint256 constellationId;\n\n            for (constellationId = 1; constellationId <= totalConstellation; constellationId++) {\n                if (constellationCurrentOwner[constellationId] == _owner) {\n                    result[resultIndex] = constellationId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n\n\n    function _memcpy(uint _dest, uint _src, uint _len) private pure {\n        // Copy word-length chunks while possible\n        for(; _len >= 32; _len -= 32) {\n            assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest += 32;\n            _src += 32;\n        }\n\n        // Copy remaining bytes\n        uint256 mask = 256 ** (32 - _len) - 1;\n        assembly {\n            let srcpart := and(mload(_src), not(mask))\n            let destpart := and(mload(_dest), mask)\n            mstore(_dest, or(destpart, srcpart))\n        }\n    }\n    \n    \n    function _toString(bytes32[4] memory _rawBytes, uint256 _stringLength) private pure returns (string memory) {\n        string memory outputString = new string(_stringLength);\n        uint256 outputPtr;\n        uint256 bytesPtr;\n\n        assembly {\n            outputPtr := add(outputString, 32)\n            bytesPtr := _rawBytes\n        }\n\n        _memcpy(outputPtr, bytesPtr, _stringLength);\n\n        return outputString;\n    }\n\n\n    function tokenMetadata(uint256 _tokenId, string calldata _preferredTransport) external view returns (string memory infoUrl) {\n        bytes32[4] memory buffer;\n        uint256 count;\n        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\n\n        return _toString(buffer, count);\n    }\n\n    function withdrawAll () onlyCLevel external {\n        address payable companyAddress = address(uint160(ceoAddress));\n        companyAddress.transfer(address(this).balance);\n    }\n\n    function withdrawAmount (uint256 _amount) onlyCLevel external {\n        address payable companyAddress = address(uint160(ceoAddress));\n        companyAddress.transfer(_amount);\n    }\n}\n\ncontract CryptoConstellationCore is CryptoConstellationOwnership{\n    \n    constructor() public{\n\n        // the creator of the contract is the initial CEO\n        ceoAddress = msg.sender;\n\n        // the creator of the contract is also the initial CTO\n        ctoAddress = msg.sender;\n\n    }\n    \n    \n    function getConstellation(uint256 _id)\n        external\n        view\n        returns (\n        string memory _name,\n        string memory _description,\n        string memory _ipfsHash,\n        address _owner, \n        uint256 _startingPrice, \n        uint256 _price, \n        uint256 _nextPrice\n    ) {\n        Constellation memory constellation = constellations[_id];\n        \n        _name = constellation.name;\n        _description = constellation.description;\n        _ipfsHash = constellation.ipfsHash;\n        _owner = ownerOf(_id);\n        _startingPrice = startingPriceOf(_id);\n        _price = priceOf(_id);\n        _nextPrice = nextPriceOf(_id);\n        \n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_preferredTransport\",\"type\":\"string\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"infoUrl\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ctoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createConstellation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"nextPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateDevCut\",\"outputs\":[{\"name\":\"_devCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userNickName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getConstellation\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"startingPriceOf\",\"outputs\":[{\"name\":\"_startingPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc721Metadata\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setMetadataAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"constellationCurrentOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getNickName\",\"outputs\":[{\"name\":\"_nickname\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_nickName\",\"type\":\"string\"}],\"name\":\"setNickName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCTO\",\"type\":\"address\"}],\"name\":\"setCTO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ConstellationCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a60ff021916905566470de4df8200006005556706f05b59d3b20000600655671bc16d674ec80000600755674563918244f4000060085534801561004f57600080fd5b506000805433600160a060020a0319918216811783556001805490921617905561254490819061007f90396000f3fe6080604052600436106101e15763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041662923f9e81146101e657806301ffc9a7146102245780630519ce791461026d5780630560ff441461029e5780630562b9f71461039757806306fdde03146103c3578063095ea7b3146103d85780630a0f81681461041157806318160ddd146104265780631f5136601461044d578063226386591461046257806323b872dd1461059257806327d7874c146105d55780632ba73c15146106085780633f4ba83a1461063b5780634e0a3379146106505780635ba9e48e146106835780635c975abb146106ad5780636352211e146106c257806365121205146106ec57806370a082311461071657806371496ea3146107495780637fc976161461077c5780638456cb59146109185780638462151c1461092d578063853828b6146109b057806395d89b41146109c5578063a9059cbb146109da578063af7520b914610a13578063b047fb5014610a3d578063b9186d7d14610a52578063bc4006f514610a7c578063d96a094a14610a91578063e08503ec14610aae578063e17b25af14610ad8578063e464bec514610b0b578063ead0327d14610b35578063ebd4aab214610b68578063fe1439b414610bf5575b600080fd5b3480156101f257600080fd5b506102106004803603602081101561020957600080fd5b5035610c28565b604080519115158252519081900360200190f35b34801561023057600080fd5b506102106004803603602081101561024757600080fd5b50357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916610c3d565b34801561027957600080fd5b50610282610ece565b60408051600160a060020a039092168252519081900360200190f35b3480156102aa57600080fd5b50610322600480360360408110156102c157600080fd5b813591908101906040810160208201356401000000008111156102e357600080fd5b8201836020820111156102f557600080fd5b8035906020019184600183028401116401000000008311171561031757600080fd5b509092509050610edd565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035c578181015183820152602001610344565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103a357600080fd5b506103c1600480360360208110156103ba57600080fd5b5035610fd5565b005b3480156103cf57600080fd5b5061032261106e565b3480156103e457600080fd5b506103c1600480360360408110156103fb57600080fd5b50600160a060020a0381351690602001356110a5565b34801561041d57600080fd5b506102826110df565b34801561043257600080fd5b5061043b6110ee565b60408051918252519081900360200190f35b34801561045957600080fd5b506102826110f9565b34801561046e57600080fd5b5061043b600480360360a081101561048557600080fd5b8101906020810181356401000000008111156104a057600080fd5b8201836020820111156104b257600080fd5b803590602001918460018302840111640100000000831117156104d457600080fd5b9193909290916020810190356401000000008111156104f257600080fd5b82018360208201111561050457600080fd5b8035906020019184600183028401116401000000008311171561052657600080fd5b91939092909160208101903564010000000081111561054457600080fd5b82018360208201111561055657600080fd5b8035906020019184600183028401116401000000008311171561057857600080fd5b919350915080359060200135600160a060020a0316611108565b34801561059e57600080fd5b506103c1600480360360608110156105b557600080fd5b50600160a060020a03813581169160208101359091169060400135611232565b3480156105e157600080fd5b506103c1600480360360208110156105f857600080fd5b5035600160a060020a03166112b1565b34801561061457600080fd5b506103c16004803603602081101561062b57600080fd5b5035600160a060020a03166112ff565b34801561064757600080fd5b506103c161134d565b34801561065c57600080fd5b506103c16004803603602081101561067357600080fd5b5035600160a060020a031661139c565b34801561068f57600080fd5b5061043b600480360360208110156106a657600080fd5b50356113ea565b3480156106b957600080fd5b506102106113fd565b3480156106ce57600080fd5b50610282600480360360208110156106e557600080fd5b503561140d565b3480156106f857600080fd5b5061043b6004803603602081101561070f57600080fd5b5035611428565b34801561072257600080fd5b5061043b6004803603602081101561073957600080fd5b5035600160a060020a03166114d3565b34801561075557600080fd5b506103226004803603602081101561076c57600080fd5b5035600160a060020a03166114ee565b34801561078857600080fd5b506107a66004803603602081101561079f57600080fd5b5035611589565b6040518080602001806020018060200188600160a060020a0316600160a060020a0316815260200187815260200186815260200185815260200184810384528b818151815260200191508051906020019080838360005b838110156108155781810151838201526020016107fd565b50505050905090810190601f1680156108425780820380516001836020036101000a031916815260200191505b5084810383528a5181528a516020918201918c019080838360005b8381101561087557818101518382015260200161085d565b50505050905090810190601f1680156108a25780820380516001836020036101000a031916815260200191505b5084810382528951815289516020918201918b019080838360005b838110156108d55781810151838201526020016108bd565b50505050905090810190601f1680156109025780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34801561092457600080fd5b506103c16117ec565b34801561093957600080fd5b506109606004803603602081101561095057600080fd5b5035600160a060020a0316611881565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561099c578181015183820152602001610984565b505050509050019250505060405180910390f35b3480156109bc57600080fd5b506103c161194b565b3480156109d157600080fd5b506103226119e1565b3480156109e657600080fd5b506103c1600480360360408110156109fd57600080fd5b50600160a060020a038135169060200135611a18565b348015610a1f57600080fd5b5061043b60048036036020811015610a3657600080fd5b5035611a40565b348015610a4957600080fd5b50610282611a52565b348015610a5e57600080fd5b5061043b60048036036020811015610a7557600080fd5b5035611a61565b348015610a8857600080fd5b50610282611a73565b6103c160048036036020811015610aa757600080fd5b5035611a82565b348015610aba57600080fd5b5061043b60048036036020811015610ad157600080fd5b5035611c84565b348015610ae457600080fd5b506103c160048036036020811015610afb57600080fd5b5035600160a060020a0316611d1c565b348015610b1757600080fd5b5061028260048036036020811015610b2e57600080fd5b5035611d55565b348015610b4157600080fd5b5061032260048036036020811015610b5857600080fd5b5035600160a060020a0316611d70565b348015610b7457600080fd5b5061021060048036036040811015610b8b57600080fd5b600160a060020a038235169190810190604081016020820135640100000000811115610bb657600080fd5b820183602082011115610bc857600080fd5b80359060200191846001830284011164010000000083111715610bea57600080fd5b509092509050611e30565b348015610c0157600080fd5b506103c160048036036020811015610c1857600080fd5b5035600160a060020a0316611e72565b600080610c3483611a61565b1190505b919050565b604080517f737570706f727473496e74657266616365286279746573342900000000000000815290519081900360190190206000907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1983811691161480610ec85750604080517f746f6b656e4d657461646174612875696e743235362c737472696e67290000008152815190819003601d0181207f746f6b656e734f664f776e657228616464726573732900000000000000000000825282519182900360160182207f7472616e7366657246726f6d28616464726573732c616464726573732c75696e83527f7432353629000000000000000000000000000000000000000000000000000000602084015283519283900360250183207f7472616e7366657228616464726573732c75696e743235362900000000000000845284519384900360190184207f617070726f766528616464726573732c75696e74323536290000000000000000855285519485900360180185207f6f776e65724f662875696e743235362900000000000000000000000000000000865286519586900360100186207f62616c616e63654f662861646472657373290000000000000000000000000000875287519687900360120187207f746f74616c537570706c792829000000000000000000000000000000000000008852885197889003600d0188207f73796d626f6c2829000000000000000000000000000000000000000000000000895289519889900360080189207f6e616d65282900000000000000000000000000000000000000000000000000008a529951988990036006019098207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198c811691909a189098181818181818181891909116145b92915050565b600254600160a060020a031681565b6060610ee76123c0565b600f54604080517fcb4799f2000000000000000000000000000000000000000000000000000000008152600481018881526024820192835260448201879052600093600160a060020a03169263cb4799f2928a928a928a92606401848480828437600083820152604051601f909101601f1916909201965060a09550909350505081840390508186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060a0811015610fb657600080fd5b5060808101519092509050610fcb8282611ec0565b9695505050505050565b600354600160a060020a0316331480610ff85750600054600160a060020a031633145b8061100d5750600254600160a060020a031633145b806110225750600154600160a060020a031633145b151561102d57600080fd5b60008054604051600160a060020a0390911691829184156108fc0291859190818181858888f19350505050158015611069573d6000803e3d6000fd5b505050565b60408051808201909152601381527f43727970746f436f6e7374656c6c6174696f6e00000000000000000000000000602082015281565b60035460a060020a900460ff16156110bc57600080fd5b6110c63382611f0b565b15156110d157600080fd5b6110db8183611f2b565b5050565b600054600160a060020a031681565b600954600019015b90565b600154600160a060020a031681565b60035460009060a060020a900460ff161561112257600080fd5b600354600160a060020a03163314806111455750600054600160a060020a031633145b8061115a5750600254600160a060020a031633145b8061116f5750600154600160a060020a031633145b151561117a57600080fd5b61122589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a908190840183828082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a91508990819084018382808284376000920191909152508992508891506120709050565b9998505050505050505050565b60035460a060020a900460ff161561124957600080fd5b600160a060020a038216151561125e57600080fd5b600160a060020a03821630141561127457600080fd5b3361127e82612249565b600160a060020a03161461129157600080fd5b61129b8382611f0b565b15156112a657600080fd5b611069838383612264565b600054600160a060020a031633146112c857600080fd5b600160a060020a03811615156112dd57600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a0316331461131657600080fd5b600160a060020a038116151561132b57600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a0316331461136457600080fd5b60035460a060020a900460ff16151561137c57600080fd5b6003805474ff000000000000000000000000000000000000000019169055565b600054600160a060020a031633146113b357600080fd5b600160a060020a03811615156113c857600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b6000610ec86113f883611a61565b611c84565b60035460a060020a900460ff1681565b6000908152600a6020526040902054600160a060020a031690565b600060055482101561145d57611456606461144a84600a63ffffffff61232a16565b9063ffffffff61235916565b9050610c38565b60065482101561147d57611456606461144a84600963ffffffff61232a16565b60075482101561149d57611456606461144a84600863ffffffff61232a16565b6008548210156114bd57611456606461144a84600763ffffffff61232a16565b611456606461144a84600663ffffffff61232a16565b600160a060020a03166000908152600b602052604090205490565b60046020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156115815780601f1061155657610100808354040283529160200191611581565b820191906000526020600020905b81548152906001019060200180831161156457829003601f168201915b505050505081565b606080606060008060008061159c6123df565b600980548a9081106115aa57fe5b600091825260209182902060408051600493909302909101805460026001821615610100026000190190911604601f8101859004909402830160a0908101909252608083018481529293909284929091849184018282801561164d5780601f106116225761010080835404028352916020019161164d565b820191906000526020600020905b81548152906001019060200180831161163057829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116ef5780601f106116c4576101008083540402835291602001916116ef565b820191906000526020600020905b8154815290600101906020018083116116d257829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156117815780601f1061175657610100808354040283529160200191611781565b820191906000526020600020905b81548152906001019060200180831161176457829003601f168201915b50505091835250506003919091015467ffffffffffffffff166020918201528151908201516040830151919a509850965090506117bd8961140d565b94506117c889611a40565b93506117d389611a61565b92506117de896113ea565b915050919395979092949650565b600354600160a060020a031633148061180f5750600054600160a060020a031633145b806118245750600254600160a060020a031633145b806118395750600154600160a060020a031633145b151561184457600080fd5b60035460a060020a900460ff161561185b57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a179055565b6060600061188e836114d3565b90508015156118ad575050604080516000815260208101909152610c38565b6060816040519080825280602002602001820160405280156118d9578160200160208202803883390190505b50905060006118e66110ee565b9050600060015b82811161193e576000818152600a6020526040902054600160a060020a03888116911614156119365780848381518110151561192557fe5b602090810290910101526001909101905b6001016118ed565b8395505050505050610c38565b600354600160a060020a031633148061196e5750600054600160a060020a031633145b806119835750600254600160a060020a031633145b806119985750600154600160a060020a031633145b15156119a357600080fd5b60008054604051600160a060020a03909116918291303180156108fc0292909190818181858888f193505050501580156110db573d6000803e3d6000fd5b60408051808201909152600381527f43434c0000000000000000000000000000000000000000000000000000000000602082015281565b611a218161140d565b600160a060020a03163314611a3557600080fd5b6110db338383612264565b6000908152600c602052604090205490565b600354600160a060020a031681565b6000908152600d602052604090205490565b600f54600160a060020a031681565b60035460a060020a900460ff1615611a9957600080fd5b6000611aa482611a61565b11611aae57600080fd5b6000611ab98261140d565b600160a060020a03161415611acd57600080fd5b611ad681611a61565b341015611ae257600080fd5b33611aec8261140d565b600160a060020a03161415611b0057600080fd5b331515611b0c57600080fd5b6000611b178261140d565b9050336000611b2584611a61565b90506000611b39348363ffffffff61237016565b9050611b46848487612264565b611b4f856113ea565b600d60008781526020019081526020016000208190555082600160a060020a0316857fd2728f908c7e0feb83c6278798370fcb86b62f236c9dbf1a3f541096c2159040846040518082815260200191505060405180910390a3604080518381529051600160a060020a0386169187917f66f5cd880edf48cdde6c966e5da0784fcc4c5e85572b8b3b62c4357798d447d79181900360200190a36000611bf383611428565b9050600160a060020a0385166108fc611c12858463ffffffff61237016565b6040518115909202916000818181858888f19350505050158015611c3a573d6000803e3d6000fd5b506000821115611c7c57604051600160a060020a0385169083156108fc029084906000818181858888f19350505050158015611c7a573d6000803e3d6000fd5b505b505050505050565b6000600554821015611ca657611456605f61144a8460c863ffffffff61232a16565b600654821015611cc657611456606061144a84608763ffffffff61232a16565b600754821015611ce657611456606161144a84607d63ffffffff61232a16565b600854821015611d0657611456606161144a84607563ffffffff61232a16565b611456606261144a84607363ffffffff61232a16565b600054600160a060020a03163314611d3357600080fd5b600f8054600160a060020a031916600160a060020a0392909216919091179055565b600a60205260009081526040902054600160a060020a031681565b6060600160a060020a0382161515611d8757600080fd5b600160a060020a03821660009081526004602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015611e245780601f10611df957610100808354040283529160200191611e24565b820191906000526020600020905b815481529060010190602001808311611e0757829003601f168201915b50505050509050919050565b6000600160a060020a0384161515611e4757600080fd5b600160a060020a0384166000908152600460205260409020611e6a908484612412565b509392505050565b600054600160a060020a03163314611e8957600080fd5b600160a060020a0381161515611e9e57600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b606080826040519080825280601f01601f191660200182016040528015611eee576020820181803883390190505b5090506020810184611f01828287612382565b5090949350505050565b6000908152600a6020526040902054600160a060020a0391821691161490565b33600160a060020a0382161415611f4157600080fd5b611f4a82610c28565b1515611f5557600080fd5b33611f5f8361140d565b600160a060020a031614611f7257600080fd5b600160a060020a0381161515612002576000828152600e6020526040902054600160a060020a031615611ffd576000828152600e602090815260408083208054600160a060020a031916905580513381529182019290925280820184905290517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360600190a15b6110db565b6000828152600e60209081526040918290208054600160a060020a038516600160a060020a0319909116811790915582513381529182015280820184905290517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259181900360600190a15050565b60035460009060a060020a900460ff161561208a57600080fd5b600354600160a060020a03163314806120ad5750600054600160a060020a031633145b806120c25750600254600160a060020a031633145b806120d75750600154600160a060020a031633145b15156120e257600080fd5b6120ea6123df565b5060408051608081018252878152602080820188905291810186905267ffffffffffffffff421660608201526009805460018181018084556000938452845180519596949592949193879360049091027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af019261216b928492910190612490565b5060208281015180516121849260018501920190612490565b50604082015180516121a0916002840191602090910190612490565b50606091909101516003909101805467ffffffffffffffff191667ffffffffffffffff90921691909117905503905063ffffffff811681146121e157600080fd5b6000818152600c60209081526040808320889055600d909152808220879055518291600160a060020a038716917fe331ff99631abd6a038660b66ed834044ccdb1443989a2e28b321498e71caa599190a361223e60008583612264565b979650505050505050565b6000908152600e6020526040902054600160a060020a031690565b600160a060020a038083166000818152600b6020908152604080832080546001019055858352600a82528083208054600160a060020a03199081169095179055600e9091529020805490911690558316156122da57600160a060020a0383166000908152600b6020526040902080546000190190555b81600160a060020a031683600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600082151561233b57506000610ec8565b82820282848281151561234a57fe5b041461235257fe5b9392505050565b600080828481151561236757fe5b04949350505050565b60008282111561237c57fe5b50900390565b5b602081106123a2578151835260209283019290910190601f1901612383565b905182516020929092036101000a6000190180199091169116179052565b6080604051908101604052806004906020820280388339509192915050565b608060405190810160405280606081526020016060815260200160608152602001600067ffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124535782800160ff19823516178555612480565b82800160010185558215612480579182015b82811115612480578235825591602001919060010190612465565b5061248c9291506124fe565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124d157805160ff1916838001178555612480565b82800160010185558215612480579182015b828111156124805782518255916020019190600101906124e3565b6110f691905b8082111561248c576000815560010161250456fea165627a7a72305820c6d58c87c2a24b6e0454c12df819ce59af2f325fdbdf5f5673911919103246400029"
}