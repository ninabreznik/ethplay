{
  "address": "0x9d04f1b2763f4ec433591f90380c54fff25e579c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Locker",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\n// File: contracts/math/SafeMath.sol\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\ncontract SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n// File: contracts/token/Controlled.sol\n\npragma solidity ^0.4.18;\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n\n    address public controller;\n\n    constructor() public { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) public onlyController {\n        controller = _newController;\n    }\n}\n\n// File: contracts/token/ERC20Basic.sol\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/token/ERC20.sol\n\npragma solidity ^0.4.18;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/token/SafeERC20.sol\n\npragma solidity ^0.4.18;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n// File: contracts/Locker.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n\ncontract Locker is Controlled, SafeMath {\n  using SafeERC20 for ERC20Basic;\n\n  ERC20Basic public token;\n  address[] public beneficiaries;\n  uint256 public baiastm;\n  uint256 public releasedAmt;\n\n  constructor (address _token, address[] _beneficiaries, uint256 _baias) {\n    require(_token != 0x00);\n    require(_baias != 0x00);\n\n    for (uint i = 0; i < _beneficiaries.length; i++) {\n      require(_beneficiaries[i] != 0x00);\n    }\n\n    token = ERC20Basic(_token);\n    beneficiaries = _beneficiaries;\n    baiastm = _baias;\n  }\n\n  function release() public {\n    require(beneficiaries.length != 0x0);\n\n    uint256 balance = token.balanceOf(address(this));\n    uint256 total = add(balance, releasedAmt);\n\n    uint256 lockTime1 = add(baiastm, 183 days); // 6 months\n    uint256 lockTime2 = add(baiastm, 273 days); // 9 months\n    uint256 lockTime3 = add(baiastm, 365 days); // 1 year\n    uint256 lockTime4 = add(baiastm, 456 days); // 1 year + 3month\n\n    uint256 currentRatio = 0;\n    if (now >= lockTime1) {\n      currentRatio = 25;\n    }\n    if (now >= lockTime2) {\n      currentRatio = 50;  //+25\n    }\n    if (now >= lockTime3) {\n      currentRatio = 75; //+25\n    }\n    if (now >= lockTime4) {\n      currentRatio = 100; //+25\n    }\n    require(currentRatio > 0);\n\n    uint256 totalReleaseAmt = div(mul(total, currentRatio), 100);\n    uint256 grantAmt = sub(totalReleaseAmt, releasedAmt);\n    require(grantAmt > 0);\n    releasedAmt = add(releasedAmt, grantAmt);\n\n    uint256 grantAmountForEach = div(grantAmt, beneficiaries.length);\n    for (uint i = 0; i < beneficiaries.length; i++) {\n        token.safeTransfer(beneficiaries[i], grantAmountForEach);\n    }\n  }\n\n  function setBaias(uint256 _baias) public onlyController {\n    require(_baias != 0x00);\n    baiastm = _baias;\n  }\n\n  function setToken(address newToken) public onlyController {\n    require(newToken != 0x00);\n    token = ERC20Basic(newToken);\n  }\n\n  function getBeneficiaryCount() public view returns(uint256) {\n    return beneficiaries.length;\n  }\n\n  function setBeneficiary(uint256 _i, address _addr) public onlyController {\n    require(_i < beneficiaries.length);\n    beneficiaries[_i] = _addr;\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_i\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baias\",\"type\":\"uint256\"}],\"name\":\"setBaias\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficiaryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baiastm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_baias\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051610d6c380380610d6c8339810180604052810190808051906020019092919080518201929190602001805190602001909291905050506000336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008473ffffffffffffffffffffffffffffffffffffffff16141515156100b257600080fd5b600082141515156100c257600080fd5b600090505b825181101561011a57600083828151811015156100e057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415151561010d57600080fd5b80806001019150506100c7565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260029080519060200190610171929190610182565b50816003819055505050505061024f565b8280548282559060005260206000209081019282156101fb579160200282015b828111156101fa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906101a2565b5b509050610208919061020c565b5090565b61024c91905b8082111561024857600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101610212565b5090565b90565b610b0e8061025e6000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063144fa6d7146100b45780631c846d59146100f75780633cebb8231461014457806384b0d4701461018757806386d1a69f146101b45780639a6e7fd1146101cb578063ba493d52146101f6578063bd25f3a714610221578063efeb5e581461024c578063f77c4791146102b9578063fc0c546a14610310575b600080fd5b3480156100c057600080fd5b506100f5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610367565b005b34801561010357600080fd5b5061014260048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061042c565b005b34801561015057600080fd5b50610185600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104f6565b005b34801561019357600080fd5b506101b260048036038101908080359060200190929190505050610594565b005b3480156101c057600080fd5b506101c9610609565b005b3480156101d757600080fd5b506101e06108d0565b6040518082815260200191505060405180910390f35b34801561020257600080fd5b5061020b6108dd565b6040518082815260200191505060405180910390f35b34801561022d57600080fd5b506102366108e3565b6040518082815260200191505060405180910390f35b34801561025857600080fd5b50610277600480360381019080803590602001909291905050506108e9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c557600080fd5b506102ce610927565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031c57600080fd5b5061032561094c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103c257600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141515156103e857600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561048757600080fd5b6002805490508210151561049a57600080fd5b806002838154811015156104aa57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561055157600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105ef57600080fd5b600081141515156105ff57600080fd5b8060038190555050565b6000806000806000806000806000806000806002805490501415151561062e57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050506040513d602081101561071557600080fd5b81019080805190602001909291905050509a506107348b600454610972565b995061074560035462f14280610972565b9850610757600354630167e980610972565b97506107696003546301e13380610972565b965061077b6003546302592c00610972565b955060009450884210151561078f57601994505b874210151561079d57603294505b86421015156107ab57604b94505b85421015156107b957606494505b6000851115156107c857600080fd5b6107dc6107d58b87610990565b60646109c3565b93506107ea846004546109de565b92506000831115156107fb57600080fd5b61080760045484610972565b60048190555061081c836002805490506109c3565b9150600090505b6002805490508110156108c3576108b660028281548110151561084257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109f79092919063ffffffff16565b8080600101915050610823565b5050505050505050505050565b6000600280549050905090565b60045481565b60035481565b6002818154811015156108f857fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828401905083811015151561098657fe5b8091505092915050565b600080828402905060008414806109b157508284828115156109ae57fe5b04145b15156109b957fe5b8091505092915050565b60008082848115156109d157fe5b0490508091505092915050565b60008282111515156109ec57fe5b818303905092915050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610a9a57600080fd5b505af1158015610aae573d6000803e3d6000fd5b505050506040513d6020811015610ac457600080fd5b81019080805190602001909291905050501515610add57fe5b5050505600a165627a7a723058208122c49863ae8f2b1d4d6ce7d1a5b3e6ef734768bec49cef3f6e369019d134b30029000000000000000000000000f52ea88756b45b5f2c37139186c997db887f895e0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000005cb90f8000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006eb5f272fd806e5064c2682859db5de9822f58c3",
  "constructorArguments": "000000000000000000000000f52ea88756b45b5f2c37139186c997db887f895e0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000005cb90f8000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006eb5f272fd806e5064c2682859db5de9822f58c3"
}