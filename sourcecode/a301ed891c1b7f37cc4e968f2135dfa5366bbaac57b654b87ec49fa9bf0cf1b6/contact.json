{
  "address": "0x01ff50f8b7f74e4f00580d9596cd3d0d6d6e326f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "BNKtotheFuture Token",
  "contractName": "BftToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-06\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n\tuint256 public totalSupply;\n\tfunction balanceOf(address who) public view returns (uint256);\n\tfunction transfer(address to, uint256 value) public returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n\tfunction allowance(address owner, address spender) public view returns (uint256);\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n\tfunction approve(address spender, uint256 value) public returns (bool);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\ncontract DetailedERC20 is ERC20 {\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\n\tfunction DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\t}\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\tusing SafeMath for uint256;\n\n\tmapping(address => uint256) balances;\n\n\t/**\n\t* @dev transfer token for a specified address\n\t* @param _to The address to transfer to.\n\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[msg.sender]);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Gets the balance of the specified address.\n\t* @param _owner The address to query the the balance of.\n\t* @return An uint256 representing the amount owned by the passed address.\n\t*/\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n\tmapping (address => mapping (address => uint256)) internal allowed;\n\n\n\t/**\n\t * @dev Transfer tokens from one address to another\n\t * @param _from address The address which you want to send tokens from\n\t * @param _to address The address which you want to transfer to\n\t * @param _value uint256 the amount of tokens to be transferred\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[_from]);\n\t\trequire(_value <= allowed[_from][msg.sender]);\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\t *\n\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t * @param _spender The address which will spend the funds.\n\t * @param _value The amount of tokens to be spent.\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n\t * @param _owner address The address which owns the funds.\n\t * @param _spender address The address which will spend the funds.\n\t * @return A uint256 specifying the amount of tokens still available for the spender.\n\t */\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\t/**\n\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n\t *\n\t * approve should be called when allowed[_spender] == 0. To increment\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\n\t * the first transaction is mined)\n\t * From MonolithDAO Token.sol\n\t * @param _spender The address which will spend the funds.\n\t * @param _addedValue The amount of tokens to increase the allowance by.\n\t */\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n\t *\n\t * approve should be called when allowed[_spender] == 0. To decrement\n\t * allowed value is better to use this function to avoid 2 calls (and wait until\n\t * the first transaction is mined)\n\t * From MonolithDAO Token.sol\n\t * @param _spender The address which will spend the funds.\n\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n\t */\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\t\tuint oldValue = allowed[msg.sender][_spender];\n\t\tif (_subtractedValue > oldValue) {\n\t\t\tallowed[msg.sender][_spender] = 0;\n\t\t} else {\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t\t}\n\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\taddress public owner;\n\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\t/**\n\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n\t * account.\n\t */\n\tfunction Ownable() public {\n\t\towner = msg.sender;\n\t}\n\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\n\t/**\n\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t * @param newOwner The address to transfer ownership to.\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\trequire(newOwner != address(0));\n\t\tOwnershipTransferred(owner, newOwner);\n\t\towner = newOwner;\n\t}\n\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n\tevent Pause();\n\tevent Unpause();\n\n\tbool public paused = false;\n\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is not paused.\n\t */\n\tmodifier whenNotPaused() {\n\t\trequire(!paused);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Modifier to make a function callable only when the contract is paused.\n\t */\n\tmodifier whenPaused() {\n\t\trequire(paused);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev called by the owner to pause, triggers stopped state\n\t */\n\tfunction pause() onlyOwner whenNotPaused public {\n\t\tpaused = true;\n\t\tPause();\n\t}\n\n\t/**\n\t * @dev called by the owner to unpause, returns to normal state\n\t */\n\tfunction unpause() onlyOwner whenPaused public {\n\t\tpaused = false;\n\t\tUnpause();\n\t}\n}\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n\tevent Mint(address indexed to, uint256 amount);\n\tevent MintFinished();\n\n\tbool public mintingFinished = false;\n\n\n\tmodifier canMint() {\n\t\trequire(!mintingFinished);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Function to mint tokens\n\t * @param _to The address that will receive the minted tokens.\n\t * @param _amount The amount of tokens to mint.\n\t * @return A boolean that indicates if the operation was successful.\n\t */\n\tfunction mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\t\ttotalSupply = totalSupply.add(_amount);\n\t\tbalances[_to] = balances[_to].add(_amount);\n\t\tMint(_to, _amount);\n\t\tTransfer(address(0), _to, _amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Function to stop minting new tokens.\n\t * @return True if the operation was successful.\n\t */\n\tfunction finishMinting() onlyOwner canMint public returns (bool) {\n\t\tmintingFinished = true;\n\t\tMintFinished();\n\t\treturn true;\n\t}\n}\n\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\n\ncontract CappedToken is MintableToken {\n\n\tuint256 public cap;\n\n\tfunction CappedToken(uint256 _cap) public {\n\t\trequire(_cap > 0);\n\t\tcap = _cap;\n\t}\n\n\t/**\n\t * @dev Function to mint tokens\n\t * @param _to The address that will receive the minted tokens.\n\t * @param _amount The amount of tokens to mint.\n\t * @return A boolean that indicates if the operation was successful.\n\t */\n\tfunction mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\t\trequire(totalSupply.add(_amount) <= cap);\n\n\t\treturn super.mint(_to, _amount);\n\t}\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n\tevent Burn(address indexed burner, uint256 value);\n\n\t/**\n\t * @dev Burns a specific amount of tokens.\n\t * @param _value The amount of token to be burned.\n\t */\n\tfunction burn(uint256 _value) public {\n\t\trequire(_value <= balances[msg.sender]);\n\t\t// no need to require value <= totalSupply, since that would imply the\n\t\t// sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\t\taddress burner = msg.sender;\n\t\tbalances[burner] = balances[burner].sub(_value);\n\t\ttotalSupply = totalSupply.sub(_value);\n\t\tBurn(burner, _value);\n\t}\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n\tusing SafeMath for uint256;\n\n\t// The token being sold\n\tMintableToken public token;\n\n\t// start and end timestamps where investments are allowed (both inclusive)\n\tuint256 public startTime;\n\tuint256 public endTime;\n\n\t// address where funds are collected\n\taddress public wallet;\n\n\t// how many token units a buyer gets per wei\n\tuint256 public rate;\n\n\t// amount of raised money in wei\n\tuint256 public weiRaised;\n\n\t/**\n\t * event for token purchase logging\n\t * @param purchaser who paid for the tokens\n\t * @param beneficiary who got the tokens\n\t * @param value weis paid for purchase\n\t * @param amount amount of tokens purchased\n\t */\n\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n\tfunction Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n\t\trequire(_startTime >= now);\n\t\trequire(_endTime >= _startTime);\n\t\trequire(_rate > 0);\n\t\trequire(_wallet != address(0));\n\n\t\ttoken = createTokenContract();\n\t\tstartTime = _startTime;\n\t\tendTime = _endTime;\n\t\trate = _rate;\n\t\twallet = _wallet;\n\t}\n\n\t// creates the token to be sold.\n\t// override this method to have crowdsale of a specific mintable token.\n\tfunction createTokenContract() internal returns (MintableToken) {\n\t\treturn new MintableToken();\n\t}\n\n\n\t// fallback function can be used to buy tokens\n\tfunction () external payable {\n\t\tbuyTokens(msg.sender);\n\t}\n\n\t// low level token purchase function\n\tfunction buyTokens(address beneficiary) public payable {\n\t\trequire(beneficiary != address(0));\n\t\trequire(validPurchase());\n\n\t\tuint256 weiAmount = msg.value;\n\n\t\t// calculate token amount to be created\n\t\tuint256 tokens = weiAmount.mul(rate);\n\n\t\t// update state\n\t\tweiRaised = weiRaised.add(weiAmount);\n\n\t\ttoken.mint(beneficiary, tokens);\n\t\tTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n\t\tforwardFunds();\n\t}\n\n\t// send ether to the fund collection wallet\n\t// override to create custom fund forwarding mechanisms\n\tfunction forwardFunds() internal {\n\t\twallet.transfer(msg.value);\n\t}\n\n\t// @return true if the transaction can buy tokens\n\tfunction validPurchase() internal view returns (bool) {\n\t\tbool withinPeriod = now >= startTime && now <= endTime;\n\t\tbool nonZeroPurchase = msg.value != 0;\n\t\treturn withinPeriod && nonZeroPurchase;\n\t}\n\n\t// @return true if crowdsale event has ended\n\tfunction hasEnded() public view returns (bool) {\n\t\treturn now > endTime;\n\t}\n\n\n}\n\n/**\n * @title CappedCrowdsale\n * @dev Extension of Crowdsale with a max amount of funds raised\n */\ncontract CappedCrowdsale is Crowdsale {\n\tusing SafeMath for uint256;\n\n\tuint256 public cap;\n\n\tfunction CappedCrowdsale(uint256 _cap) public {\n\t\trequire(_cap > 0);\n\t\tcap = _cap;\n\t}\n\n\t// overriding Crowdsale#validPurchase to add extra cap logic\n\t// @return true if investors can buy at the moment\n\tfunction validPurchase() internal view returns (bool) {\n\t\tbool withinCap = weiRaised.add(msg.value) <= cap;\n\t\treturn super.validPurchase() && withinCap;\n\t}\n\n\t// overriding Crowdsale#hasEnded to add cap logic\n\t// @return true if crowdsale event has ended\n\tfunction hasEnded() public view returns (bool) {\n\t\tbool capReached = weiRaised >= cap;\n\t\treturn super.hasEnded() || capReached;\n\t}\n\n}\n\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract BftToken is DetailedERC20, CappedToken, BurnableToken, PausableToken {\n\n\tCappedCrowdsale public crowdsale;\n\n\tfunction BftToken(\n\t\tuint256 _tokenCap,\n\t\tuint8 _decimals,\n\t\tCappedCrowdsale _crowdsale\n\t)\n\t\tDetailedERC20(\"BF Token\", \"BFT\", _decimals)\n\t\tCappedToken(_tokenCap) public {\n\n\t\tcrowdsale = _crowdsale;\n\t}\n\n\t// ----------------------------------------------------------------------------------------------------------------\n\t// the following is the functionality to upgrade this token smart contract to a new one\n\n\tMintableToken public newToken = MintableToken(0x0);\n\tevent LogRedeem(address beneficiary, uint256 amount);\n\n\tmodifier hasUpgrade() {\n\t\trequire(newToken != MintableToken(0x0));\n\t\t_;\n\t}\n\n\tfunction upgrade(MintableToken _newToken) onlyOwner public {\n\t\tnewToken = _newToken;\n\t}\n\n\t// overriding BurnableToken#burn to make disable it for public use\n\tfunction burn(uint256 _value) public {\n\t\trevert();\n\t\t_value = _value; // to silence compiler warning\n\t}\n\n\tfunction redeem() hasUpgrade public {\n\n\t\tvar balance = balanceOf(msg.sender);\n\n\t\t// burn the tokens in this token smart contract\n\t\tsuper.burn(balance);\n\n\t\t// mint tokens in the new token smart contract\n\t\trequire(newToken.mint(msg.sender, balance));\n\t\tLogRedeem(msg.sender, balance);\n\t}\n\n\t// ----------------------------------------------------------------------------------------------------------------\n\t// we override the token transfer functions to block transfers before startTransfersDate timestamp\n\n\tmodifier canDoTransfers() {\n\t\trequire(hasCrowdsaleFinished());\n\t\t_;\n\t}\n\n\tfunction hasCrowdsaleFinished() view public returns(bool) {\n\t\treturn crowdsale.hasEnded();\n\t}\n\n\tfunction transfer(address _to, uint256 _value) public canDoTransfers returns (bool) {\n\t\treturn super.transfer(_to, _value);\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public canDoTransfers returns (bool) {\n\t\treturn super.transferFrom(_from, _to, _value);\n\t}\n\n\tfunction approve(address _spender, uint256 _value) public canDoTransfers returns (bool) {\n\t\treturn super.approve(_spender, _value);\n\t}\n\n\tfunction increaseApproval(address _spender, uint _addedValue) public canDoTransfers returns (bool success) {\n\t\treturn super.increaseApproval(_spender, _addedValue);\n\t}\n\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public canDoTransfers returns (bool success) {\n\t\treturn super.decreaseApproval(_spender, _subtractedValue);\n\t}\n\n\t// ----------------------------------------------------------------------------------------------------------------\n\t// functionality to change the token ticker - in case of conflict\n\n\tfunction changeSymbol(string _symbol) onlyOwner public {\n\t\tsymbol = _symbol;\n\t}\n\n\tfunction changeName(string _name) onlyOwner public {\n\t\tname = _name;\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasCrowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenCap\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526006805460a060020a60ff02191690556008805460ff1916905560098054600160a060020a031916905534156200003a57600080fd5b604051606080620015ee8339810160405280805191906020018051919060200180519150839050604080519081016040908152600882527f424620546f6b656e00000000000000000000000000000000000000000000000060208301528051908101604052600381527f42465400000000000000000000000000000000000000000000000000000000006020820152846001838051620000df92916020019062000167565b506002828051620000f592916020019062000167565b506003805460ff191660ff92909216919091179055505060068054600160a060020a03191633600160a060020a0316179055600081116200013557600080fd5b60075560088054600160a060020a039092166101000261010060a860020a0319909216919091179055506200020c9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001aa57805160ff1916838001178555620001da565b82800160010185558215620001da579182015b82811115620001da578251825591602001919060010190620001bd565b50620001e8929150620001ec565b5090565b6200020991905b80821115620001e85760008155600101620001f3565b90565b6113d2806200021c6000396000f3006060604052600436106101505763ffffffff60e060020a60003504166305d2035b811461015557806306fdde031461017c5780630900f01014610206578063095ea7b31461022757806318160ddd1461024957806323b872dd1461026e578063313ce56714610296578063355274ea146102bf5780633f4ba83a146102d257806340c10f19146102e557806342966c68146103075780635353a2d81461031d5780635c975abb1461036e578063661884631461038157806370a08231146103a35780637d64bcb4146103c25780638456cb59146103d55780638da5cb5b146103e857806395d89b41146104175780639c1e03a01461042a578063a3895fff1461043d578063a9059cbb1461048e578063be040fb0146104b0578063c42bd05a146104c3578063d02d08b2146104d6578063d73dd623146104e9578063dd62ed3e1461050b578063f2fde38b14610530575b600080fd5b341561016057600080fd5b61016861054f565b604051901515815260200160405180910390f35b341561018757600080fd5b61018f61055f565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101cb5780820151838201526020016101b3565b50505050905090810190601f1680156101f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021157600080fd5b610225600160a060020a03600435166105fd565b005b341561023257600080fd5b610168600160a060020a0360043516602435610647565b341561025457600080fd5b61025c61066d565b60405190815260200160405180910390f35b341561027957600080fd5b610168600160a060020a0360043581169060243516604435610673565b34156102a157600080fd5b6102a961069b565b60405160ff909116815260200160405180910390f35b34156102ca57600080fd5b61025c6106a4565b34156102dd57600080fd5b6102256106aa565b34156102f057600080fd5b610168600160a060020a036004351660243561070e565b341561031257600080fd5b610225600435610150565b341561032857600080fd5b61022560046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061076e95505050505050565b341561037957600080fd5b6101686107a0565b341561038c57600080fd5b610168600160a060020a03600435166024356107a9565b34156103ae57600080fd5b61025c600160a060020a03600435166107c8565b34156103cd57600080fd5b6101686107e3565b34156103e057600080fd5b61022561086f565b34156103f357600080fd5b6103fb6108d5565b604051600160a060020a03909116815260200160405180910390f35b341561042257600080fd5b61018f6108e4565b341561043557600080fd5b6103fb61094f565b341561044857600080fd5b61022560046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061096395505050505050565b341561049957600080fd5b610168600160a060020a0360043516602435610991565b34156104bb57600080fd5b6102256109b0565b34156104ce57600080fd5b6103fb610aaa565b34156104e157600080fd5b610168610ab9565b34156104f457600080fd5b610168600160a060020a0360043516602435610b27565b341561051657600080fd5b61025c600160a060020a0360043581169060243516610b46565b341561053b57600080fd5b610225600160a060020a0360043516610b71565b60065460a060020a900460ff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105f55780601f106105ca576101008083540402835291602001916105f5565b820191906000526020600020905b8154815290600101906020018083116105d857829003601f168201915b505050505081565b60065433600160a060020a0390811691161461061857600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000610651610ab9565b151561065c57600080fd5b6106668383610c0c565b9392505050565b60005481565b600061067d610ab9565b151561068857600080fd5b610693848484610c29565b949350505050565b60035460ff1681565b60075481565b60065433600160a060020a039081169116146106c557600080fd5b60085460ff1615156106d657600080fd5b6008805460ff191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60065460009033600160a060020a0390811691161461072c57600080fd5b60065460a060020a900460ff161561074357600080fd5b600754600054610759908463ffffffff610c4716565b111561076457600080fd5b6106668383610c56565b60065433600160a060020a0390811691161461078957600080fd5b600181805161079c92916020019061130e565b5050565b60085460ff1681565b60006107b3610ab9565b15156107be57600080fd5b6106668383610d63565b600160a060020a031660009081526004602052604090205490565b60065460009033600160a060020a0390811691161461080157600080fd5b60065460a060020a900460ff161561081857600080fd5b6006805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b90565b60065433600160a060020a0390811691161461088a57600080fd5b60085460ff161561089a57600080fd5b6008805460ff191660011790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600654600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105f55780601f106105ca576101008083540402835291602001916105f5565b6008546101009004600160a060020a031681565b60065433600160a060020a0390811691161461097e57600080fd5b600281805161079c92916020019061130e565b600061099b610ab9565b15156109a657600080fd5b6106668383610d80565b600954600090600160a060020a031615156109ca57600080fd5b6109d3336107c8565b90506109de81610d9d565b600954600160a060020a03166340c10f19338360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a3d57600080fd5b6102c65a03f11515610a4e57600080fd5b505050604051805190501515610a6357600080fd5b7f8d15a2189c94a743df2a17c8f4cdd87250b7caa8560e57efa74a59352fcee9d23382604051600160a060020a03909216825260208201526040908101905180910390a150565b600954600160a060020a031681565b6008546000906101009004600160a060020a031663ecb70fb782604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610b0857600080fd5b6102c65a03f11515610b1957600080fd5b505050604051805191505090565b6000610b31610ab9565b1515610b3c57600080fd5b6106668383610e58565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60065433600160a060020a03908116911614610b8c57600080fd5b600160a060020a0381161515610ba157600080fd5b600654600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60085460009060ff1615610c1f57600080fd5b6106668383610e75565b60085460009060ff1615610c3c57600080fd5b610693848484610ee1565b60008282018381101561066657fe5b60065460009033600160a060020a03908116911614610c7457600080fd5b60065460a060020a900460ff1615610c8b57600080fd5b600054610c9e908363ffffffff610c4716565b6000908155600160a060020a038416815260046020526040902054610cc9908363ffffffff610c4716565b600160a060020a0384166000818152600460205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b60085460009060ff1615610d7657600080fd5b6106668383611063565b60085460009060ff1615610d9357600080fd5b610666838361115d565b600160a060020a033316600090815260046020526040812054821115610dc257600080fd5b5033600160a060020a038116600090815260046020526040902054610de79083611258565b600160a060020a03821660009081526004602052604081209190915554610e14908363ffffffff61125816565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b60085460009060ff1615610e6b57600080fd5b610666838361126a565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a0383161515610ef857600080fd5b600160a060020a038416600090815260046020526040902054821115610f1d57600080fd5b600160a060020a0380851660009081526005602090815260408083203390941683529290522054821115610f5057600080fd5b600160a060020a038416600090815260046020526040902054610f79908363ffffffff61125816565b600160a060020a038086166000908152600460205260408082209390935590851681522054610fae908363ffffffff610c4716565b600160a060020a03808516600090815260046020908152604080832094909455878316825260058152838220339093168252919091522054610ff6908363ffffffff61125816565b600160a060020a03808616600081815260056020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600160a060020a033381166000908152600560209081526040808320938616835292905290812054808311156110c057600160a060020a0333811660009081526005602090815260408083209388168352929052908120556110f7565b6110d0818463ffffffff61125816565b600160a060020a033381166000908152600560209081526040808320938916835292905220555b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b6000600160a060020a038316151561117457600080fd5b600160a060020a03331660009081526004602052604090205482111561119957600080fd5b600160a060020a0333166000908152600460205260409020546111c2908363ffffffff61125816565b600160a060020a0333811660009081526004602052604080822093909355908516815220546111f7908363ffffffff610c4716565b600160a060020a0380851660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60008282111561126457fe5b50900390565b600160a060020a0333811660009081526005602090815260408083209386168352929052908120546112a2908363ffffffff610c4716565b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061134f57805160ff191683800117855561137c565b8280016001018555821561137c579182015b8281111561137c578251825591602001919060010190611361565b5061138892915061138c565b5090565b61086c91905b8082111561138857600081556001016113925600a165627a7a72305820656060475e112dce48cb3838c4edeab68282c16b24fe745eec1e6996aaf051ab00290000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000048599941665827f9ea5a16c3d7417a43a1ce5df4",
  "constructorArguments": "0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000048599941665827f9ea5a16c3d7417a43a1ce5df4"
}