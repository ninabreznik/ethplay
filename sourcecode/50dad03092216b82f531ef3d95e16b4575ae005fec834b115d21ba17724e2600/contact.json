{
  "address": "0x4b4b1d389d4f4e082b30f75c6319c0ce5acbd619",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HTN_TOKEN",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n/**\n * HEART NUMBER 2019 \n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address payable private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address payable) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(),\"Invalid owner\");\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address payable newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address payable newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 public _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n    \n    mapping (address => bool) public frozenAccount;\n\n    uint256 private _totalSupply;\n    \n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0),\"Check recipient is owner\");\n        // Check if sender is frozen\n        require(!frozenAccount[from],\"Check if sender is frozen\");\n        // Check if recipient is frozen\n        require(!frozenAccount[to],\"Check if recipient is frozen\");\n        \n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0),\"Check recipient is '0x0'\");\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0),\"Check recipient is owner\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    \n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract MinterRole is Ownable {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic.\n */\ncontract ERC20Mintable is ERC20, Ownable {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20,Ownable{\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) onlyOwner public {\n        _burn(msg.sender, value);\n    }\n\n}\n\ncontract PauserRole is Ownable {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n    \n    // modifier onlyPauser() {\n    //     require(isPauser(msg.sender));\n    //     _;\n    // }\n    /**\n     * @return True if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract ERC20Pausable is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n}\n\n\n/**\n * @title Heart Number Token\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `ERC20` functions.\n */\ncontract HTN_TOKEN is ERC20, ERC20Detailed, ERC20Burnable, ERC20Mintable, ERC20Pausable {\n\n    string private constant NAME = \"Heart Number\"; \n    string private constant SYMBOL = \"HTN\"; \n    uint8 private constant DECIMALS = 18; \n    \n    /**\n     * The price of tokenBuy.\n     */\n    uint256 public TokenPerETHBuy = 100000;\n    \n    /**\n     * The price of tokenSell.\n     */\n    uint256 public TokenPerETHSell = 100000;\n    \n    /**\n    * Sell token is enabled\n    */\n    bool public SellTokenAllowed;\n    \n    /**\n    * Buy token is enabled\n    */\n    bool public BuyTokenAllowed;\n    \n    /**\n     * This notifies clients about the new Buy price.\n     */\n    event BuyRateChanged(uint256 oldValue, uint256 newValue);\n    \n    /**\n     * This notifies clients about the new Sell price.\n     */\n    event SellRateChanged(uint256 oldValue, uint256 newValue);\n    \n    /**\n     * This notifies clients about the Buy Token.\n     */\n    event BuyToken(address user, uint256 eth, uint256 token);\n    \n     /**\n     * This notifies clients about the Sell Token.\n     */\n    event SellToken(address user, uint256 eth, uint256 token);\n    \n    /**\n     * This notifies clients about frozen accounts.\n     */\n    event FrozenFunds(address target, bool frozen);    \n    \n    /**\n    * This notifies sell token status.\n    */\n    event SellTokenAllowedEvent(bool isAllowed);\n    \n    /**\n    * This notifies buy token status.\n    */\n    event BuyTokenAllowedEvent(bool isAllowed);\n    \n    uint256 public constant INITIAL_SUPPLY = 10000000000 *(10 ** uint256(DECIMALS));\n\n    \n    /**\n     * Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor () public ERC20Detailed(NAME, SYMBOL, DECIMALS) {\n        _mint(msg.sender, INITIAL_SUPPLY);\n        SellTokenAllowed = false;\n        BuyTokenAllowed = true;\n    }\n    \n    /**\n    * Freeze Account\n    */\n    function freezeAccount(address target, bool freeze) onlyOwner  public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n    \n    /**\n    * Set price function for Buy\n    */\n    function setBuyRate(uint256 value) onlyOwner public {\n        require(value > 0);\n        emit BuyRateChanged(TokenPerETHBuy, value);\n        TokenPerETHBuy = value;\n    }\n    \n    /**\n    * Set price function for Sell\n    */\n    function setSellRate(uint256 value) onlyOwner public {\n        require(value > 0);\n        emit SellRateChanged(TokenPerETHSell, value);\n        TokenPerETHSell = value;\n    }\n    \n    /**\n    *  Function for Buy Token\n    */\n    function buy() payable public returns (uint amount){\n        require(msg.value > 0 , \"Ivalid Ether amount\");\n        require(!frozenAccount[msg.sender], \"Accout is frozen\");                      \n        require(BuyTokenAllowed, \"Buy Token is not allowed\");                         \n        amount = ((msg.value.mul(TokenPerETHBuy)).mul( 10 ** uint256(decimals()))).div(1 ether); \n        \n        _balances[address(this)] = _balances[address(this)].sub(amount);                    \n        _balances[msg.sender] = _balances[msg.sender].add(amount) ;                                           \n        emit Transfer(address(this),msg.sender ,amount);\n        return amount;\n    }\n    \n    /**\n    *  function for Sell Token\n    */\n    function sell(uint amount) public returns (uint revenue){\n        \n        require(_balances[msg.sender] >= amount,\"Checks if the sender has enough to sell\");        \n        require(!frozenAccount[msg.sender],\"Check if sender is frozen\");                            \n        require(SellTokenAllowed);                                                              \n        \n        _balances[address(this)] = _balances[address(this)].add(amount);                          \n        _balances[msg.sender] = _balances[msg.sender].sub(amount);                               \n        \n        revenue = (amount.mul(1 ether)).div(TokenPerETHSell.mul(10 ** uint256(decimals()))) ;\n        \n        msg.sender.transfer(revenue);                                                        \n        emit Transfer(msg.sender, address(this), amount);         \n        return revenue;\n        \n    }\n    \n    /**\n    * Enable Sell Token\n    */\n    function enableSellToken() onlyOwner public {\n        SellTokenAllowed = true;\n        emit SellTokenAllowedEvent (true);\n    }\n\n    /**\n    * Disable Sell Token\n    */\n    function disableSellToken() onlyOwner public {\n        SellTokenAllowed = false;\n        emit SellTokenAllowedEvent (false);\n    }\n    \n    /**\n    * Enable Buy Token\n    */\n    function enableBuyToken() onlyOwner public {\n        BuyTokenAllowed = true;\n        emit BuyTokenAllowedEvent (true);\n    }\n\n    /**\n    * Disable Buy Token\n    */\n    function disableBuyToken() onlyOwner public {\n        BuyTokenAllowed = false;\n        emit BuyTokenAllowedEvent (false);\n    }\n    \n    /**\n    * Withdraw for Ether\n    */\n     function withdraw(uint withdrawAmount) onlyOwner public  {\n        require(withdrawAmount <= address(this).balance); \n        owner().transfer(withdrawAmount);\n        \n    }\n    \n    /**\n    * Withdraw for Token\n    */\n    function withdrawToken(uint tokenAmount) onlyOwner public {\n        require(tokenAmount <= _balances[address(this)]);\n        _transfer(address(this),owner(),tokenAmount);\n    }\n    \n    \n}",
  "bytecode": "6080604052620186a0600955620186a0600a553480156200001f57600080fd5b506040805190810160405280600c81526020017f4865617274204e756d62657200000000000000000000000000000000000000008152506040805190810160405280600381526020017f48544e000000000000000000000000000000000000000000000000000000000081525060128260049080519060200190620000a6929190620005f8565b508160059080519060200190620000bf929190620005f8565b5080600660006101000a81548160ff021916908360ff16021790555050505033600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3620001b63362000236640100000000026401000000009004565b6000600860006101000a81548160ff021916908315150217905550620001fa33601260ff16600a0a6402540be40002620002a0640100000000026401000000009004565b6000600b60006101000a81548160ff0219169083151502179055506001600b60016101000a81548160ff021916908315150217905550620006a7565b6200025a8160076200047e6401000000000262002f3c179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151562000346576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436865636b20726563697069656e74206973202730783027000000000000000081525060200191505060405180910390fd5b6200036b81600354620005416401000000000262002ca5179091906401000000009004565b600381905550620003d2816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054620005416401000000000262002ca5179091906401000000009004565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515620004bb57600080fd5b620004d6828262000563640100000000026401000000009004565b151515620004e357600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008082840190508381101515156200055957600080fd5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620005a157600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200063b57805160ff19168380011785556200066c565b828001600101855582156200066c579182015b828111156200066b5782518255916020019190600101906200064e565b5b5090506200067b91906200067f565b5090565b620006a491905b80821115620006a057600081600090555060010162000686565b5090565b90565b61303f80620006b76000396000f3fe608060405260043610610237576000357c0100000000000000000000000000000000000000000000000000000000900480635c975abb116101405780638f32d59b116100c8578063b414d4b61161008c578063b414d4b614610a6b578063dd62ed3e14610ad4578063e4849b3214610b59578063e724529c14610ba8578063f2fde38b14610c0557610237565b80638f32d59b1461090457806394357c6b1461093357806395d89b411461094a578063a6f2ae3a146109da578063a9059cbb146109f857610237565b80637794de551161010f5780637794de55146108095780638456cb591461082057806385e436bf146108375780638da5cb5b146108725780638e0b017d146108c957610237565b80635c975abb146106f95780636aa737e0146107285780636ebcf6071461073f57806370a08231146107a457610237565b8063313ce567116101c357806342966c681161019257806342966c68146105d857806346fbf68e146106135780634b0d54171461067c57806350baa62214610693578063534f36c5146106ce57610237565b8063313ce567146104ec57806332424aa31461051d5780633f4ba83a1461054e57806340c10f191461056557610237565b80631d0b482f1161020a5780631d0b482f1461039957806323b872dd146103c457806328b93702146104575780632e1a7d4d146104865780632ff2e9dc146104c157610237565b806306fdde031461023c578063095ea7b3146102cc5780630f7ca5771461033f57806318160ddd1461036e575b600080fd5b34801561024857600080fd5b50610251610c56565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610291578082015181840152602081019050610276565b50505050905090810190601f1680156102be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102d857600080fd5b50610325600480360360408110156102ef57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cf8565b604051808215151515815260200191505060405180910390f35b34801561034b57600080fd5b50610354610d28565b604051808215151515815260200191505060405180910390f35b34801561037a57600080fd5b50610383610d3b565b6040518082815260200191505060405180910390f35b3480156103a557600080fd5b506103ae610d45565b6040518082815260200191505060405180910390f35b3480156103d057600080fd5b5061043d600480360360608110156103e757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d4b565b604051808215151515815260200191505060405180910390f35b34801561046357600080fd5b5061046c610d7d565b604051808215151515815260200191505060405180910390f35b34801561049257600080fd5b506104bf600480360360208110156104a957600080fd5b8101908080359060200190929190505050610d90565b005b3480156104cd57600080fd5b506104d6610e83565b6040518082815260200191505060405180910390f35b3480156104f857600080fd5b50610501610e95565b604051808260ff1660ff16815260200191505060405180910390f35b34801561052957600080fd5b50610532610eac565b604051808260ff1660ff16815260200191505060405180910390f35b34801561055a57600080fd5b50610563610ebf565b005b34801561057157600080fd5b506105be6004803603604081101561058857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fd6565b604051808215151515815260200191505060405180910390f35b3480156105e457600080fd5b50610611600480360360208110156105fb57600080fd5b8101908080359060200190929190505050611068565b005b34801561061f57600080fd5b506106626004803603602081101561063657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110f1565b604051808215151515815260200191505060405180910390f35b34801561068857600080fd5b5061069161110e565b005b34801561069f57600080fd5b506106cc600480360360208110156106b657600080fd5b81019080803590602001909291905050506111e3565b005b3480156106da57600080fd5b506106e36112c1565b6040518082815260200191505060405180910390f35b34801561070557600080fd5b5061070e6112c7565b604051808215151515815260200191505060405180910390f35b34801561073457600080fd5b5061073d6112de565b005b34801561074b57600080fd5b5061078e6004803603602081101561076257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113b3565b6040518082815260200191505060405180910390f35b3480156107b057600080fd5b506107f3600480360360208110156107c757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113cb565b6040518082815260200191505060405180910390f35b34801561081557600080fd5b5061081e611413565b005b34801561082c57600080fd5b506108356114e8565b005b34801561084357600080fd5b506108706004803603602081101561085a57600080fd5b8101908080359060200190929190505050611600565b005b34801561087e57600080fd5b506108876116d6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108d557600080fd5b50610902600480360360208110156108ec57600080fd5b8101908080359060200190929190505050611700565b005b34801561091057600080fd5b506109196117d6565b604051808215151515815260200191505060405180910390f35b34801561093f57600080fd5b5061094861182e565b005b34801561095657600080fd5b5061095f611903565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561099f578082015181840152602081019050610984565b50505050905090810190601f1680156109cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6109e26119a5565b6040518082815260200191505060405180910390f35b348015610a0457600080fd5b50610a5160048036036040811015610a1b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d45565b604051808215151515815260200191505060405180910390f35b348015610a7757600080fd5b50610aba60048036036020811015610a8e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d75565b604051808215151515815260200191505060405180910390f35b348015610ae057600080fd5b50610b4360048036036040811015610af757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d95565b6040518082815260200191505060405180910390f35b348015610b6557600080fd5b50610b9260048036036020811015610b7c57600080fd5b8101908080359060200190929190505050611e1c565b6040518082815260200191505060405180910390f35b348015610bb457600080fd5b50610c0360048036036040811015610bcb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506121be565b005b348015610c1157600080fd5b50610c5460048036036020811015610c2857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612304565b005b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cee5780601f10610cc357610100808354040283529160200191610cee565b820191906000526020600020905b815481529060010190602001808311610cd157829003601f168201915b5050505050905090565b6000600860009054906101000a900460ff16151515610d1657600080fd5b610d20838361238c565b905092915050565b600b60019054906101000a900460ff1681565b6000600354905090565b600a5481565b6000600860009054906101000a900460ff16151515610d6957600080fd5b610d748484846123a3565b90509392505050565b600b60009054906101000a900460ff1681565b610d986117d6565b1515610e0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16318111151515610e3257600080fd5b610e3a6116d6565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610e7f573d6000803e3d6000fd5b5050565b601260ff16600a0a6402540be4000281565b6000600660009054906101000a900460ff16905090565b600660009054906101000a900460ff1681565b610ec76117d6565b1515610f3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b600860009054906101000a900460ff161515610f5657600080fd5b6000600860006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000610fe06117d6565b1515611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b61105e8383612454565b6001905092915050565b6110706117d6565b15156110e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b6110ee3382612611565b50565b60006111078260076127ce90919063ffffffff16565b9050919050565b6111166117d6565b151561118a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600b60006101000a81548160ff0219169083151502179055507f1a26afc103797a41cda97337e6bccd6b52abf0b3ca40d8b88c3958d827ec2f976000604051808215151515815260200191505060405180910390a1565b6111eb6117d6565b151561125f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b6000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156112ac57600080fd5b6112be306112b86116d6565b83612862565b50565b60095481565b6000600860009054906101000a900460ff16905090565b6112e66117d6565b151561135a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600b60006101000a81548160ff0219169083151502179055507f1a26afc103797a41cda97337e6bccd6b52abf0b3ca40d8b88c3958d827ec2f976001604051808215151515815260200191505060405180910390a1565b60006020528060005260406000206000915090505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61141b6117d6565b151561148f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600b60016101000a81548160ff0219169083151502179055507f3b5b2c71f43810b5658cc67290694552f6e7aecd6bb56ae2f75661a2929401d66000604051808215151515815260200191505060405180910390a1565b6114f06117d6565b1515611564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b600860009054906101000a900460ff1615151561158057600080fd5b6001600860006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6116086117d6565b151561167c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b60008111151561168b57600080fd5b7fcfa7074b22c98fb9291e698be8caae9fd3391198b3dd068fbe42c6da6b9c9bf560095482604051808381526020018281526020019250505060405180910390a18060098190555050565b6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6117086117d6565b151561177c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b60008111151561178b57600080fd5b7ffa46b8b4ccaecf1d18401d52f6693d32659468c8553f904bf40cbcfd416ac0f6600a5482604051808381526020018281526020019250505060405180910390a180600a8190555050565b6000600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6118366117d6565b15156118aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600b60016101000a81548160ff0219169083151502179055507f3b5b2c71f43810b5658cc67290694552f6e7aecd6bb56ae2f75661a2929401d66001604051808215151515815260200191505060405180910390a1565b606060058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561199b5780601f106119705761010080835404028352916020019161199b565b820191906000526020600020905b81548152906001019060200180831161197e57829003601f168201915b5050505050905090565b60008034111515611a1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4976616c696420457468657220616d6f756e740000000000000000000000000081525060200191505060405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611ae0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f4163636f75742069732066726f7a656e0000000000000000000000000000000081525060200191505060405180910390fd5b600b60019054906101000a900460ff161515611b64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f42757920546f6b656e206973206e6f7420616c6c6f776564000000000000000081525060200191505060405180910390fd5b611bb2670de0b6b3a7640000611ba4611b7b610e95565b60ff16600a0a611b9660095434612c1b90919063ffffffff16565b612c1b90919063ffffffff16565b612c5990919063ffffffff16565b9050611c05816000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c8390919063ffffffff16565b6000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c98816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ca590919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a380905090565b6000600860009054906101000a900460ff16151515611d6357600080fd5b611d6d8383612cc6565b905092915050565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611eb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180612fed6027913960400191505060405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611f79576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436865636b2069662073656e6465722069732066726f7a656e0000000000000081525060200191505060405180910390fd5b600b60009054906101000a900460ff161515611f9457600080fd5b611fe5826000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ca590919063ffffffff16565b6000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612078826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c8390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121086120df6120c8610e95565b60ff16600a0a600a54612c1b90919063ffffffff16565b6120fa670de0b6b3a764000085612c1b90919063ffffffff16565b612c5990919063ffffffff16565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612150573d6000803e3d6000fd5b503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3809050919050565b6121c66117d6565b151561223a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b61230c6117d6565b1515612380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f496e76616c6964206f776e65720000000000000000000000000000000000000081525060200191505060405180910390fd5b61238981612cdd565b50565b6000612399338484612dd9565b6001905092915050565b60006123b0848484612862565b612449843361244485600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c8390919063ffffffff16565b612dd9565b600190509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156124f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436865636b20726563697069656e74206973202730783027000000000000000081525060200191505060405180910390fd5b61250e81600354612ca590919063ffffffff16565b600381905550612565816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ca590919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156126b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436865636b20726563697069656e74206973206f776e6572000000000000000081525060200191505060405180910390fd5b6126cb81600354612c8390919063ffffffff16565b600381905550612722816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c8390919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561280b57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436865636b20726563697069656e74206973206f776e6572000000000000000081525060200191505060405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156129c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f436865636b2069662073656e6465722069732066726f7a656e0000000000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515612a8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f436865636b20696620726563697069656e742069732066726f7a656e0000000081525060200191505060405180910390fd5b612adc816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c8390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612b6f816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ca590919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080831415612c2e5760009050612c53565b60008284029050828482811515612c4157fe5b04141515612c4e57600080fd5b809150505b92915050565b60008082111515612c6957600080fd5b60008284811515612c7657fe5b0490508091505092915050565b6000828211151515612c9457600080fd5b600082840390508091505092915050565b6000808284019050838110151515612cbc57600080fd5b8091505092915050565b6000612cd3338484612862565b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612d1957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612e1557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612e5157600080fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612f7857600080fd5b612f8282826127ce565b151515612f8e57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fe436865636b73206966207468652073656e6465722068617320656e6f75676820746f2073656c6ca165627a7a723058204bed6036a5af5228d2d731ab869778b91e31c64b5c8a73c415d1eec09d025f4d0029"
}