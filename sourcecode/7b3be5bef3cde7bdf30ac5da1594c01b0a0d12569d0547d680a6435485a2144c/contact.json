{
  "address": "0xd46883ddff92cc0474255f2f8134c63f8209171d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Foundation",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-01\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/ownership/OwnableUpdated.sol\n\n/**\n * @title Ownable\n * @notice Implementation by OpenZeppelin\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n */\ncontract OwnableUpdated {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/Foundation.sol\n\n/**\n * @title Foundation contract.\n * @author Talao, Polynomial.\n */\ncontract Foundation is OwnableUpdated {\n\n    // Registered foundation factories.\n    mapping(address => bool) public factories;\n\n    // Owners (EOA) to contract addresses relationships.\n    mapping(address => address) public ownersToContracts;\n\n    // Contract addresses to owners relationships.\n    mapping(address => address) public contractsToOwners;\n\n    // Index of known contract addresses.\n    address[] private contractsIndex;\n\n    // Members (EOA) to contract addresses relationships.\n    // In a Partnership.sol inherited contract, this allows us to create a\n    // modifier for most read functions in this contract that will authorize\n    // any account associated with an authorized Partnership contract.\n    mapping(address => address) public membersToContracts;\n\n    // Index of known members for each contract.\n    // These are EOAs that were added once, even if removed now.\n    mapping(address => address[]) public contractsToKnownMembersIndexes;\n\n    // Events for factories.\n    event FactoryAdded(address _factory);\n    event FactoryRemoved(address _factory);\n\n    /**\n     * @dev Add a factory.\n     */\n    function addFactory(address _factory) external onlyOwner {\n        factories[_factory] = true;\n        emit FactoryAdded(_factory);\n    }\n\n    /**\n     * @dev Remove a factory.\n     */\n    function removeFactory(address _factory) external onlyOwner {\n        factories[_factory] = false;\n        emit FactoryRemoved(_factory);\n    }\n\n    /**\n     * @dev Modifier for factories.\n     */\n    modifier onlyFactory() {\n        require(\n            factories[msg.sender],\n            \"You are not a factory\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Set initial owner of a contract.\n     */\n    function setInitialOwnerInFoundation(\n        address _contract,\n        address _account\n    )\n        external\n        onlyFactory\n    {\n        require(\n            contractsToOwners[_contract] == address(0),\n            \"Contract already has owner\"\n        );\n        require(\n            ownersToContracts[_account] == address(0),\n            \"Account already has contract\"\n        );\n        contractsToOwners[_contract] = _account;\n        contractsIndex.push(_contract);\n        ownersToContracts[_account] = _contract;\n        membersToContracts[_account] = _contract;\n    }\n\n    /**\n     * @dev Transfer a contract to another account.\n     */\n    function transferOwnershipInFoundation(\n        address _contract,\n        address _newAccount\n    )\n        external\n    {\n        require(\n            (\n                ownersToContracts[msg.sender] == _contract &&\n                contractsToOwners[_contract] == msg.sender\n            ),\n            \"You are not the owner\"\n        );\n        ownersToContracts[msg.sender] = address(0);\n        membersToContracts[msg.sender] = address(0);\n        ownersToContracts[_newAccount] = _contract;\n        membersToContracts[_newAccount] = _contract;\n        contractsToOwners[_contract] = _newAccount;\n        // Remark: we do not update the contracts members.\n        // It's the new owner's responsability to remove members, if needed.\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * This is called through the contract.\n     */\n    function renounceOwnershipInFoundation() external returns (bool success) {\n        // Remove members.\n        delete(contractsToKnownMembersIndexes[msg.sender]);\n        // Free the EOA, so he can become owner of a new contract.\n        delete(ownersToContracts[contractsToOwners[msg.sender]]);\n        // Assign the contract to no one.\n        delete(contractsToOwners[msg.sender]);\n        // Return.\n        success = true;\n    }\n\n    /**\n     * @dev Add a member EOA to a contract.\n     */\n    function addMember(address _member) external {\n        require(\n            ownersToContracts[msg.sender] != address(0),\n            \"You own no contract\"\n        );\n        require(\n            membersToContracts[_member] == address(0),\n            \"Address is already member of a contract\"\n        );\n        membersToContracts[_member] = ownersToContracts[msg.sender];\n        contractsToKnownMembersIndexes[ownersToContracts[msg.sender]].push(_member);\n    }\n\n    /**\n     * @dev Remove a member EOA to a contract.\n     */\n    function removeMember(address _member) external {\n        require(\n            ownersToContracts[msg.sender] != address(0),\n            \"You own no contract\"\n        );\n        require(\n            membersToContracts[_member] == ownersToContracts[msg.sender],\n            \"Address is not member of this contract\"\n        );\n        membersToContracts[_member] = address(0);\n        contractsToKnownMembersIndexes[ownersToContracts[msg.sender]].push(_member);\n    }\n\n    /**\n     * @dev Getter for contractsIndex.\n     * The automatic getter can not return array.\n     */\n    function getContractsIndex()\n        external\n        onlyOwner\n        view\n        returns (address[])\n    {\n        return contractsIndex;\n    }\n\n    /**\n     * @dev Prevents accidental sending of ether.\n     */\n    function() public {\n        revert(\"Prevent accidental sending of ether\");\n    }\n}",
  "bytecode": "6080604081905260008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610d77806100576000396000f3006080604052600436106100f05763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b1ca49a81146101735780630caab98e1461019657806329ce1ec5146101d65780632ba06e67146101f7578063400533e1146102185780634b37c73f14610239578063715018a61461025a5780638da5cb5b1461026f5780638f2691cc146102845780638f32d59b146102ad5780639cb2feb2146102c2578063ca6d56dc146102e9578063d5c81a051461030a578063f2fde38b14610331578063f3c67f4814610352578063f3d93e8814610373578063fab52689146103d8575b3480156100fc57600080fd5b506040805160e560020a62461bcd02815260206004820152602360248201527f50726576656e74206163636964656e74616c2073656e64696e67206f6620657460448201527f6865720000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b34801561017f57600080fd5b50610194600160a060020a03600435166103f9565b005b3480156101a257600080fd5b506101ba600160a060020a036004351660243561056a565b60408051600160a060020a039092168252519081900360200190f35b3480156101e257600080fd5b50610194600160a060020a03600435166105a1565b34801561020357600080fd5b506101ba600160a060020a0360043516610610565b34801561022457600080fd5b506101ba600160a060020a036004351661062b565b34801561024557600080fd5b50610194600160a060020a0360043516610646565b34801561026657600080fd5b506101946106b1565b34801561027b57600080fd5b506101ba61070e565b34801561029057600080fd5b5061029961071e565b604080519115158252519081900360200190f35b3480156102b957600080fd5b50610299610780565b3480156102ce57600080fd5b50610194600160a060020a0360043581169060243516610791565b3480156102f557600080fd5b50610194600160a060020a03600435166108a1565b34801561031657600080fd5b50610194600160a060020a0360043581169060243516610a0b565b34801561033d57600080fd5b50610194600160a060020a0360043516610be0565b34801561035e57600080fd5b506101ba600160a060020a0360043516610bff565b34801561037f57600080fd5b50610388610c1a565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103c45781810151838201526020016103ac565b505050509050019250505060405180910390f35b3480156103e457600080fd5b50610299600160a060020a0360043516610c8f565b33600090815260026020526040902054600160a060020a03161515610468576040805160e560020a62461bcd02815260206004820152601360248201527f596f75206f776e206e6f20636f6e747261637400000000000000000000000000604482015290519081900360640190fd5b33600090815260026020908152604080832054600160a060020a0385811685526005909352922054811691161461050f576040805160e560020a62461bcd02815260206004820152602660248201527f41646472657373206973206e6f74206d656d626572206f66207468697320636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0390811660008181526005602090815260408083208054600160a060020a03199081169091553384526002835281842054909516835260068252822080546001810182559083529120018054909216179055565b60066020528160005260406000208181548110151561058557fe5b600091825260209091200154600160a060020a03169150829050565b6105a9610780565b15156105b457600080fd5b600160a060020a038116600081815260016020818152604092839020805460ff1916909217909155815192835290517f6fdc0147105e43e21da80a75b42d0fd464060d5e1a34b0cefbf0b4ccfc2e36a19281900390910190a150565b600360205260009081526040902054600160a060020a031681565b600260205260009081526040902054600160a060020a031681565b61064e610780565b151561065957600080fd5b600160a060020a038116600081815260016020908152604091829020805460ff19169055815192835290517fafa2737b2090fa39c66b7348625f0c03726240f724defbc6216d679506f944419281900390910190a150565b6106b9610780565b15156106c457600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360008054600160a060020a0319169055565b600054600160a060020a03165b90565b3360009081526006602052604081206107379082610d14565b503360008181526003602081815260408084208054600160a060020a03168552600283529084208054600160a060020a0319908116909155949093525280549091169055600190565b600054600160a060020a0316331490565b33600090815260026020526040902054600160a060020a0383811691161480156107d45750600160a060020a038281166000908152600360205260409020541633145b151561082a576040805160e560020a62461bcd02815260206004820152601560248201527f596f7520617265206e6f7420746865206f776e65720000000000000000000000604482015290519081900360640190fd5b3360009081526002602081815260408084208054600160a060020a03199081169091556005808452828620805483169055600160a060020a03968716808752948452828620805498909716978216881790965594825280842080548616871790559483526003905292902080549091169091179055565b33600090815260026020526040902054600160a060020a03161515610910576040805160e560020a62461bcd02815260206004820152601360248201527f596f75206f776e206e6f20636f6e747261637400000000000000000000000000604482015290519081900360640190fd5b600160a060020a0381811660009081526005602052604090205416156109a6576040805160e560020a62461bcd02815260206004820152602760248201527f4164647265737320697320616c7265616479206d656d626572206f662061206360448201527f6f6e747261637400000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b3360009081526002602090815260408083208054600160a060020a03958616808652600585528386208054928816600160a060020a03199384161790559154909516845260068352908320805460018101825590845291909220018054909216179055565b3360009081526001602052604090205460ff161515610a74576040805160e560020a62461bcd02815260206004820152601560248201527f596f7520617265206e6f74206120666163746f72790000000000000000000000604482015290519081900360640190fd5b600160a060020a038281166000908152600360205260409020541615610ae4576040805160e560020a62461bcd02815260206004820152601a60248201527f436f6e747261637420616c726561647920686173206f776e6572000000000000604482015290519081900360640190fd5b600160a060020a038181166000908152600260205260409020541615610b54576040805160e560020a62461bcd02815260206004820152601c60248201527f4163636f756e7420616c72656164792068617320636f6e747261637400000000604482015290519081900360640190fd5b600160a060020a039182166000818152600360209081526040808320805496909516600160a060020a0319968716811790955560048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805487168517905593825260028152838220805486168417905560059052919091208054909216179055565b610be8610780565b1515610bf357600080fd5b610bfc81610ca4565b50565b600560205260009081526040902054600160a060020a031681565b6060610c24610780565b1515610c2f57600080fd5b6004805480602002602001604051908101604052809291908181526020018280548015610c8557602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610c67575b5050505050905090565b60016020526000908152604090205460ff1681565b600160a060020a0381161515610cb957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b5080546000825590600052602060002090810190610bfc919061071b91905b80821115610d475760008155600101610d33565b50905600a165627a7a7230582015bf17098fc5c4a027220489fbaed8646783b25bf310a49744cdb3af321e33170029"
}