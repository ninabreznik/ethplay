{
  "address": "0x4a57e687b9126435a9b19e4a802113e266adebde",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Flexacoin Token",
  "contractName": "Flexacoin",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "500",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-05\n*/\n\npragma solidity 0.4.23;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\n// input  /Users/zacharykilgore/src/flexa/smart-contracts/contracts/Flexacoin.sol\n// flattened :  Saturday, 05-Jan-19 14:38:33 UTC\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract UpgradeAgent {\n\n  uint public originalSupply;\n\n  /** Interface methods */\n  function isUpgradeAgent() public view returns (bool);\n  function upgradeFrom(address _from, uint256 _value) public;\n\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() onlyPendingOwner public {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n    internal\n  {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\ncontract Recoverable is CanReclaimToken, Claimable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Transfer all ether held by the contract to the contract owner.\n   */\n  function reclaimEther() external onlyOwner {\n    owner.transfer(address(this).balance);\n  }\n\n}\n\ncontract UpgradeableToken is StandardToken, Recoverable {\n\n  /** The contract that will handle the upgrading the tokens. */\n  UpgradeAgent public upgradeAgent;\n\n  /** How many tokens have been upgraded. */\n  uint256 public totalUpgraded = 0;\n\n  /**\n   * Upgrade states.\n   *\n   * - `Unknown`: Zero state to prevent erroneous state reporting. Should never be returned\n   * - `NotAllowed`: The child contract has not reached a condition where the upgrade can begin\n   * - `WaitingForAgent`: Allowed to upgrade, but agent has not been set\n   * - `ReadyToUpgrade`: The agent is set, but no tokens has been upgraded yet\n   * - `Upgrading`: Upgrade agent is set, and balance holders are upgrading their tokens\n   */\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n\n  /**\n   * Event to track that a token holder has upgraded some of their tokens.\n   * @param from Address of the token holder\n   * @param to Address of the upgrade agent\n   * @param value Number of tokens upgraded\n   */\n  event Upgrade(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * Event to signal that an upgrade agent contract has been set.\n   * @param upgradeAgent Address of the new upgrade agent\n   */\n  event UpgradeAgentSet(address upgradeAgent);\n\n\n  /**\n   * @notice Allow the token holder to upgrade some of their tokens to the new\n   * contract.\n   * @param _value The amount of tokens to upgrade\n   */\n  function upgrade(uint256 _value) public {\n    UpgradeState _state = getUpgradeState();\n    require(\n      _state == UpgradeState.ReadyToUpgrade || _state == UpgradeState.Upgrading,\n      \"State must be correct for upgrade\"\n    );\n    require(_value > 0, \"Upgrade value must be greater than zero\");\n\n    // Take tokens out of circulation\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n\n    totalUpgraded = totalUpgraded.add(_value);\n\n    // Hand control to upgrade agent to process new tokens for the sender\n    upgradeAgent.upgradeFrom(msg.sender, _value);\n\n    emit Upgrade(msg.sender, upgradeAgent, _value);\n  }\n\n  /**\n   * @notice Set an upgrade agent contract to process the upgrade.\n   * @dev The _upgradeAgent contract address must satisfy the UpgradeAgent\n   * interface.\n   * @param _upgradeAgent The address of the new UpgradeAgent smart contract\n   */\n  function setUpgradeAgent(UpgradeAgent _upgradeAgent) external onlyOwner {\n    require(canUpgrade(), \"Ensure the token is upgradeable in the first place\");\n    require(_upgradeAgent != address(0), \"Ensure upgrade agent address is not blank\");\n    require(getUpgradeState() != UpgradeState.Upgrading, \"Ensure upgrade has not started\");\n\n    upgradeAgent = _upgradeAgent;\n\n    require(upgradeAgent.isUpgradeAgent(), \"New upgradeAgent must be UpgradeAgent\");\n    require(\n      upgradeAgent.originalSupply() == totalSupply_,\n      \"Make sure that token supplies match in source and target token contracts\"\n    );\n\n    emit UpgradeAgentSet(upgradeAgent);\n  }\n\n  /**\n   * @notice Get the state of the token upgrade.\n   */\n  function getUpgradeState() public view returns(UpgradeState) {\n    if(!canUpgrade()) return UpgradeState.NotAllowed;\n    else if(address(upgradeAgent) == address(0)) return UpgradeState.WaitingForAgent;\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n    else return UpgradeState.Upgrading;\n  }\n\n  /**\n   * @notice Can the contract be upgradead?\n   * @dev Child contract must implement and provide the condition when the upgrade\n   * can begin.\n   * @return true if the contract can be upgraded, false if not\n   */\n  function canUpgrade() public view returns(bool);\n\n}\n\ncontract Flexacoin is PausableToken, UpgradeableToken {\n\n  string public constant name = \"Flexacoin\";\n  string public constant symbol = \"FXC\";\n  uint8 public constant decimals = 18;\n\n  uint256 public constant INITIAL_SUPPLY = 100000000000 * (10 ** uint256(decimals));\n\n\n  /**\n    * @notice Flexacoin (ERC20 Token) contract constructor.\n    * @dev Assigns all tokens to contract creator.\n    */\n  constructor() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n  }\n\n  /**\n   * @dev Allow UpgradeableToken functionality only if contract is not paused.\n   */\n  function canUpgrade() public view returns(bool) {\n    return !paused;\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradeAgent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"upgradeAgent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a60ff0219169055600060065534801561002557600080fd5b5060038054600160a060020a03191633600160a060020a03169081179091556c01431e0fae6d7217caa0000000600181905560008281526020818152604080832084905580519384525191927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3611780806100ab6000396000f30060806040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610163578063095ea7b3146101ed57806317ffc3201461022557806318160ddd1461024857806323b872dd1461026f5780632ff2e9dc14610299578063313ce567146102ae5780633f4ba83a146102d957806345977d03146102ee5780634e71e0c8146103065780635c975abb1461031b5780635de4ccb014610330578063661884631461036157806370a08231146103855780638444b391146103a65780638456cb59146103df5780638da5cb5b146103f457806395d89b41146104095780639738968c1461041e5780639f727c2714610433578063a9059cbb14610448578063c752ff621461046c578063d73dd62314610481578063d7e7088a146104a5578063dd62ed3e146104c6578063e30c3978146104ed578063f2fde38b14610502575b600080fd5b34801561016f57600080fd5b50610178610523565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b257818101518382015260200161019a565b50505050905090810190601f1680156101df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f957600080fd5b50610211600160a060020a036004351660243561055a565b604080519115158252519081900360200190f35b34801561023157600080fd5b50610246600160a060020a0360043516610596565b005b34801561025457600080fd5b5061025d61067b565b60408051918252519081900360200190f35b34801561027b57600080fd5b50610211600160a060020a0360043581169060243516604435610682565b3480156102a557600080fd5b5061025d6106c0565b3480156102ba57600080fd5b506102c36106d1565b6040805160ff9092168252519081900360200190f35b3480156102e557600080fd5b506102466106d6565b3480156102fa57600080fd5b50610246600435610763565b34801561031257600080fd5b506102466109d8565b34801561032757600080fd5b50610211610a66565b34801561033c57600080fd5b50610345610a87565b60408051600160a060020a039092168252519081900360200190f35b34801561036d57600080fd5b50610211600160a060020a0360043516602435610a96565b34801561039157600080fd5b5061025d600160a060020a0360043516610acb565b3480156103b257600080fd5b506103bb610ae6565b604051808260048111156103cb57fe5b60ff16815260200191505060405180910390f35b3480156103eb57600080fd5b50610246610b31565b34801561040057600080fd5b50610345610bd4565b34801561041557600080fd5b50610178610be3565b34801561042a57600080fd5b50610211610c1a565b34801561043f57600080fd5b50610246610c3c565b34801561045457600080fd5b50610211600160a060020a0360043516602435610c95565b34801561047857600080fd5b5061025d610cca565b34801561048d57600080fd5b50610211600160a060020a0360043516602435610cd0565b3480156104b157600080fd5b50610246600160a060020a0360043516610d05565b3480156104d257600080fd5b5061025d600160a060020a0360043581169060243516611158565b3480156104f957600080fd5b50610345611183565b34801561050e57600080fd5b50610246600160a060020a0360043516611192565b60408051808201909152600981527f466c657861636f696e0000000000000000000000000000000000000000000000602082015281565b60035460009074010000000000000000000000000000000000000000900460ff161561058557600080fd5b61058f83836111dc565b9392505050565b60035460009033600160a060020a039081169116146105b457600080fd5b81600160a060020a03166370a08231306040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561062857600080fd5b505af115801561063c573d6000803e3d6000fd5b505050506040513d602081101561065257600080fd5b505160035490915061067790600160a060020a0384811691168363ffffffff61124616565b5050565b6001545b90565b60035460009074010000000000000000000000000000000000000000900460ff16156106ad57600080fd5b6106b88484846112fb565b949350505050565b6c01431e0fae6d7217caa000000081565b601281565b60035433600160a060020a039081169116146106f157600080fd5b60035474010000000000000000000000000000000000000000900460ff16151561071a57600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600061076d610ae6565b9050600381600481111561077d57fe5b14806107945750600481600481111561079257fe5b145b15156108155760408051600080516020611735833981519152815260206004820152602160248201527f5374617465206d75737420626520636f727265637420666f722075706772616460448201527f6500000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600082116108985760408051600080516020611735833981519152815260206004820152602760248201527f557067726164652076616c7565206d757374206265206772656174657220746860448201527f616e207a65726f00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0333166000908152602081905260409020546108c1908363ffffffff61147b16565b600160a060020a0333166000908152602081905260409020556001546108ed908363ffffffff61147b16565b600155600654610903908363ffffffff61148d16565b600655600554604080517f753e88e5000000000000000000000000000000000000000000000000000000008152600160a060020a033381166004830152602482018690529151919092169163753e88e591604480830192600092919082900301818387803b15801561097457600080fd5b505af1158015610988573d6000803e3d6000fd5b5050600554604080518681529051600160a060020a0392831694503390921692507f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac919081900360200190a35050565b60045433600160a060020a039081169116146109f357600080fd5b600454600354604051600160a060020a0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600480546003805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b60035474010000000000000000000000000000000000000000900460ff1681565b600554600160a060020a031681565b60035460009074010000000000000000000000000000000000000000900460ff1615610ac157600080fd5b61058f83836114a0565b600160a060020a031660009081526020819052604090205490565b6000610af0610c1a565b1515610afe5750600161067f565b600554600160a060020a03161515610b185750600261067f565b6006541515610b295750600361067f565b50600461067f565b60035433600160a060020a03908116911614610b4c57600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610b7457600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152600381527f4658430000000000000000000000000000000000000000000000000000000000602082015281565b60035474010000000000000000000000000000000000000000900460ff161590565b60035433600160a060020a03908116911614610c5757600080fd5b600354604051600160a060020a039182169130163180156108fc02916000818181858888f19350505050158015610c92573d6000803e3d6000fd5b50565b60035460009074010000000000000000000000000000000000000000900460ff1615610cc057600080fd5b61058f8383611599565b60065481565b60035460009074010000000000000000000000000000000000000000900460ff1615610cfb57600080fd5b61058f8383611692565b60035433600160a060020a03908116911614610d2057600080fd5b610d28610c1a565b1515610da95760408051600080516020611735833981519152815260206004820152603260248201527f456e737572652074686520746f6b656e206973207570677261646561626c652060448201527f696e2074686520666972737420706c6163650000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0381161515610e345760408051600080516020611735833981519152815260206004820152602960248201527f456e737572652075706772616465206167656e7420616464726573732069732060448201527f6e6f7420626c616e6b0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6004610e3e610ae6565b6004811115610e4957fe5b1415610ea45760408051600080516020611735833981519152815260206004820152601e60248201527f456e73757265207570677261646520686173206e6f7420737461727465640000604482015290519081900360640190fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055604080517f61d3d7a6000000000000000000000000000000000000000000000000000000008152905192909116916361d3d7a6916004808201926020929091908290030181600087803b158015610f2857600080fd5b505af1158015610f3c573d6000803e3d6000fd5b505050506040513d6020811015610f5257600080fd5b50511515610fd55760408051600080516020611735833981519152815260206004820152602560248201527f4e657720757067726164654167656e74206d757374206265205570677261646560448201527f4167656e74000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600154600560009054906101000a9004600160a060020a0316600160a060020a0316634b2ba0dd6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561104457600080fd5b505af1158015611058573d6000803e3d6000fd5b505050506040513d602081101561106e57600080fd5b5051146111165760408051600080516020611735833981519152815260206004820152604860248201527f4d616b652073757265207468617420746f6b656e20737570706c696573206d6160448201527f74636820696e20736f7572636520616e642074617267657420746f6b656e206360648201527f6f6e747261637473000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60055460408051600160a060020a039092168252517f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc9181900360200190a150565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600454600160a060020a031681565b60035433600160a060020a039081169116146111ad57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156112c257600080fd5b505af11580156112d6573d6000803e3d6000fd5b505050506040513d60208110156112ec57600080fd5b505115156112f657fe5b505050565b6000600160a060020a038316151561131257600080fd5b600160a060020a03841660009081526020819052604090205482111561133757600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561136a57600080fd5b600160a060020a038416600090815260208190526040902054611393908363ffffffff61147b16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546113c8908363ffffffff61148d16565b600160a060020a038085166000908152602081815260408083209490945587831682526002815283822033909316825291909152205461140e908363ffffffff61147b16565b600160a060020a038086166000818152600260209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60008282111561148757fe5b50900390565b8181018281101561149a57fe5b92915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156114fd57600160a060020a033381166000908152600260209081526040808320938816835292905290812055611534565b61150d818463ffffffff61147b16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b6000600160a060020a03831615156115b057600080fd5b600160a060020a0333166000908152602081905260409020548211156115d557600080fd5b600160a060020a0333166000908152602081905260409020546115fe908363ffffffff61147b16565b600160a060020a033381166000908152602081905260408082209390935590851681522054611633908363ffffffff61148d16565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546116ca908363ffffffff61148d16565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050560008c379a000000000000000000000000000000000000000000000000000000000a165627a7a72305820858d2334797c69e7319d3063fa72cbd95f36ec3c97ad1f0d728fe587f6035bee0029"
}