{
  "address": "0xfd3145e858c0e6a8d79397c29b24e14ee607cd44",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AceCasinoToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-20\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * \n * Author: Ace Casino\n * \n * Token Details:-\n * Name: Ace Casino\n * Symbol: CASI\n * Decimals: 8\n * Total Supply: 2 Billion\n * \n */\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  \n  \n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n   constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner)public onlyOwner {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic is Ownable {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  \n  mapping (address => bool) public frozenAccount;\n\n  /* This generates a public event on the blockchain that will notify clients */\n  event FrozenFunds(address target, bool frozen);\n\n\n    /**\n     * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n     * @param target Address to be frozen\n     * @param freeze either to freeze it or not\n     */\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n    \n   /**\n     * @param addresses Addresses to be frozen\n     * @param freeze either to freeze it or not\n     */\n    function freezeMultipleAccounts(address[] addresses, bool[] freeze) onlyOwner public {\n       for (uint256 i = 0; i < addresses.length; i++) {\n\n        frozenAccount[addresses[i]] = freeze[i];\n        emit FrozenFunds(addresses[i], freeze[i]);\n       }\n    }\n    \n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value)public returns (bool) {\n    require(!frozenAccount[msg.sender]);\n    \n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner)public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(!frozenAccount[_from]);                     // Check if sender is frozen\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract AceCasinoToken is StandardToken {\n\n  string public constant name = \"AceCasinoToken\";\n  string public constant symbol = \"CASI\";\n  uint256 public constant decimals = 8;\n\n  uint256 public constant INITIAL_SUPPLY = 2000000000 * 10**8;\n\n  /**\n   * @dev Contructor that gives msg.sender all of existing tokens.\n   */\n  constructor() public {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n  \n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a0319163390811782556702c68af0bb14000060018190559082526002602052604090912055610b9a806100506000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de5780632a76a169146102085780632ff2e9dc14610298578063313ce567146102ad57806366188463146102c257806370a08231146102e65780638da5cb5b1461030757806395d89b4114610338578063a9059cbb1461034d578063b414d4b614610371578063d73dd62314610392578063dd62ed3e146103b6578063e724529c146103dd578063f2fde38b14610403575b600080fd5b34801561010157600080fd5b5061010a610424565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a036004351660243561045b565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc6104c1565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a03600435811690602435166044356104c7565b34801561021457600080fd5b506040805160206004803580820135838102808601850190965280855261029695369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506106669650505050505050565b005b3480156102a457600080fd5b506101cc61076b565b3480156102b957600080fd5b506101cc610777565b3480156102ce57600080fd5b506101a3600160a060020a036004351660243561077c565b3480156102f257600080fd5b506101cc600160a060020a036004351661086c565b34801561031357600080fd5b5061031c610887565b60408051600160a060020a039092168252519081900360200190f35b34801561034457600080fd5b5061010a610896565b34801561035957600080fd5b506101a3600160a060020a03600435166024356108cd565b34801561037d57600080fd5b506101a3600160a060020a036004351661099a565b34801561039e57600080fd5b506101a3600160a060020a03600435166024356109af565b3480156103c257600080fd5b506101cc600160a060020a0360043581169060243516610a48565b3480156103e957600080fd5b50610296600160a060020a03600435166024351515610a73565b34801561040f57600080fd5b50610296600160a060020a0360043516610aee565b60408051808201909152600e81527f416365436173696e6f546f6b656e000000000000000000000000000000000000602082015281565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015481565b6000600160a060020a03831615156104de57600080fd5b600160a060020a03841660009081526002602052604090205482111561050357600080fd5b600160a060020a038416600090815260046020908152604080832033845290915290205482111561053357600080fd5b600160a060020a03841660009081526003602052604090205460ff161561055957600080fd5b600160a060020a038416600090815260026020526040902054610582908363ffffffff610b4916565b600160a060020a0380861660009081526002602052604080822093909355908516815220546105b7908363ffffffff610b5b16565b600160a060020a0380851660009081526002602090815260408083209490945591871681526004825282812033825290915220546105fb908363ffffffff610b4916565b600160a060020a03808616600081815260046020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60008054600160a060020a0316331461067e57600080fd5b5060005b825181101561076657818181518110151561069957fe5b906020019060200201516003600085848151811015156106b557fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905582517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59084908390811061071757fe5b90602001906020020151838381518110151561072f57fe5b602090810290910181015160408051600160a060020a039094168452901515918301919091528051918290030190a1600101610682565b505050565b6702c68af0bb14000081565b600881565b336000908152600460209081526040808320600160a060020a0386168452909152812054808311156107d157336000908152600460209081526040808320600160a060020a0388168452909152812055610806565b6107e1818463ffffffff610b4916565b336000908152600460209081526040808320600160a060020a03891684529091529020555b336000818152600460209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a031681565b60408051808201909152600481527f4341534900000000000000000000000000000000000000000000000000000000602082015281565b3360009081526003602052604081205460ff16156108ea57600080fd5b3360009081526002602052604090205461090a908363ffffffff610b4916565b3360009081526002602052604080822092909255600160a060020a0385168152205461093c908363ffffffff610b5b16565b600160a060020a0384166000818152600260209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60036020526000908152604090205460ff1681565b336000908152600460209081526040808320600160a060020a03861684529091528120546109e3908363ffffffff610b5b16565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b600054600160a060020a03163314610a8a57600080fd5b600160a060020a038216600081815260036020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a03163314610b0557600080fd5b600160a060020a0381161515610b1a57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610b5557fe5b50900390565b81810182811015610b6857fe5b929150505600a165627a7a72305820217edaebe282ef94e37c8b17ba744a3f4ee0da133fe4fdf47cd5d1ab4a9c0f580029"
}