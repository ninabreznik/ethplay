{
  "address": "0x8e5610ab5e39d26828167640ea29823fe1dd5843",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KanadeCoin",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-20\n*/\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\ncontract KanadeCoin is StandardToken, Ownable {\n    using SafeMath for uint256;\n\n    struct VoteStruct {\n        uint128 number;\n        uint256 amount;\n        address from;\n        uint128 time;\n    }\n\n    struct QuestionStruct {\n        uint8   isStarted;\n        address recipient;\n        uint128 finish;\n        uint    under;\n        VoteStruct[] votes;\n    }\n\n    struct RandomBoxStruct {\n        uint8   isStarted;\n        address recipient;\n        uint64  volume;\n        uint256 amount;\n        uint128 finish;\n    }\n\n    struct RandomItemStruct {\n        mapping(bytes32 => uint256[]) values;\n    }\n\n\n    address public constant addrDevTeam      = 0x4d85FCF252c02FA849258f16c5464aF529ebFA5F; // 1%\n    address public constant addrLockUp       = 0x0101010101010101010101010101010101010101; // 9%\n    address public constant addrBounty       = 0x3CCDb82F43EEF681A39AE854Be37ad1C40446F0d; // 25%\n    address public constant addrDistribution = 0x9D6FB734a716306a9575E3ce971AB8839eDcEdF3; // 10%\n    address public constant addrAirDrop      = 0xD6A4ce07f18619Ec73f91CcDbefcCE53f048AE05; // 55%\n\n    uint public constant atto = 100000000;\n    uint public constant decimals = 8;\n\n    string public constant name   = \"KanadeCoin\";\n    string public constant symbol = \"KNDC\";\n\n    uint public contractStartTime;\n\n    uint64 public constant lockupSeconds = 60 * 60 * 24 * 365 * 3;\n\n    mapping(bytes32 => QuestionStruct) questions;\n    mapping(address => string) saveData;\n    mapping(bytes32 => RandomBoxStruct) randomBoxes;\n    mapping(address => RandomItemStruct) randomItems;\n\n    constructor() public {\n    }\n\n    function initializeContract() onlyOwner public {\n        if (totalSupply_ != 0) return;\n\n        contractStartTime = now;\n\n        balances[addrDevTeam]      = 10000000000 * 0.01 * atto;\n        balances[addrLockUp]       = 10000000000 * 0.09 * atto;\n        balances[addrBounty]       = 10000000000 * 0.25 * atto;\n        balances[addrDistribution] = 10000000000 * 0.10 * atto;\n        balances[addrAirDrop]      = 10000000000 * 0.55 * atto;\n\n        Transfer(0x0, addrDevTeam, balances[addrDevTeam]);\n        Transfer(0x0, addrLockUp, balances[addrLockUp]);\n        Transfer(0x0, addrBounty, balances[addrBounty]);\n        Transfer(0x0, addrDistribution, balances[addrDistribution]);\n        Transfer(0x0, addrAirDrop, balances[addrAirDrop]);\n\n        totalSupply_ = 10000000000 * atto;\n    }\n\n\n    ////////////////////////////////////////////////////////////////////////\n\n    function unLockup() onlyOwner public {\n        require(uint256(now).sub(lockupSeconds) > contractStartTime);\n        uint _amount = balances[addrLockUp];\n        balances[addrLockUp] = balances[addrLockUp].sub(_amount);\n        balances[addrDevTeam] = balances[addrDevTeam].add(_amount);\n        Transfer(addrLockUp, addrDevTeam, _amount);\n    }\n\n\n    ////////////////////////////////////////////////////////////////////////\n\n    function createQuestion(string _id_max32, address _recipient, uint128 _finish, uint _under) public {\n        bytes32 _idByte = keccak256(_id_max32);\n        require(questions[_idByte].isStarted == 0);\n\n        transfer(addrBounty, 5000 * atto);\n\n        questions[_idByte].isStarted = 1;\n        questions[_idByte].recipient = _recipient;\n        questions[_idByte].finish = _finish;\n        questions[_idByte].under = _under;\n    }\n\n    function getQuestion(string _id_max32) constant public returns (uint[4]) {\n        bytes32 _idByte = keccak256(_id_max32);\n        uint[4] values;\n        values[0] = questions[_idByte].isStarted;\n        values[1] = uint(questions[_idByte].recipient);\n        values[2] = questions[_idByte].finish;\n        values[3] = questions[_idByte].under;\n        return values;\n    }\n\n    function vote(string _id_max32, uint128 _number, uint _amount) public {\n        bytes32 _idByte = keccak256(_id_max32);\n        require(\n            questions[_idByte].isStarted == 1 &&\n            questions[_idByte].under <= _amount &&\n            questions[_idByte].finish >= uint128(now));\n\n        if (_amount > 0) {\n            transfer(questions[_idByte].recipient, _amount);\n        }\n\n        questions[_idByte].votes.push(VoteStruct(_number, _amount, msg.sender, uint128(now)));\n    }\n\n    function getQuestionVotesAllCount(string _id_max32) constant public returns (uint) {\n        return questions[keccak256(_id_max32)].votes.length;\n    }\n\n    function getQuestionVote(string _id_max32, uint _position) constant public returns (uint[4]) {\n        bytes32 _idByte = keccak256(_id_max32);\n        uint[4] values;\n        values[0] = questions[_idByte].votes[_position].number;\n        values[1] = questions[_idByte].votes[_position].amount;\n        values[2] = uint(questions[_idByte].votes[_position].from);\n        values[3] = questions[_idByte].votes[_position].time;\n        return values;\n    }\n\n\n    ////////////////////////////////////////////////////////////////////////\n\n    function putSaveData(string _text) public {\n        saveData[msg.sender] = _text;\n    }\n\n    function getSaveData(address _address) constant public returns (string) {\n        return saveData[_address];\n    }\n\n\n    ////////////////////////////////////////////////////////////////////////\n\n    function createRandomBox(string _id_max32, address _recipient, uint64 _volume, uint256 _amount, uint128 _finish) public {\n        require(_volume > 0);\n\n        bytes32 _idByte = keccak256(_id_max32);\n        require(randomBoxes[_idByte].isStarted == 0);\n\n        transfer(addrBounty, 5000 * atto);\n\n        randomBoxes[_idByte].isStarted = 1;\n        randomBoxes[_idByte].recipient = _recipient;\n        randomBoxes[_idByte].volume = _volume;\n        randomBoxes[_idByte].amount = _amount;\n        randomBoxes[_idByte].finish = _finish;\n    }\n\n    function getRandomBox(string _id_max32) constant public returns (uint[5]) {\n        bytes32 _idByte = keccak256(_id_max32);\n        uint[5] values;\n        values[0] = randomBoxes[_idByte].isStarted;\n        values[1] = uint(randomBoxes[_idByte].recipient);\n        values[2] = randomBoxes[_idByte].volume;\n        values[3] = randomBoxes[_idByte].amount;\n        values[4] = randomBoxes[_idByte].finish;\n        return values;\n    }\n\n    function drawRandomItem(string _id_max32, uint _count) public {\n        require(_count > 0 && _count <= 1000);\n\n        bytes32 _idByte = keccak256(_id_max32);\n        uint _totalAmount = randomBoxes[_idByte].amount.mul(_count);\n        require(\n            randomBoxes[_idByte].isStarted == 1 &&\n            randomBoxes[_idByte].finish >= uint128(now));\n\n        transfer(randomBoxes[_idByte].recipient, _totalAmount);\n\n        for (uint i = 0; i < _count; i++) {\n            uint randomVal = uint(\n                keccak256(blockhash(block.number-1), randomItems[msg.sender].values[_idByte].length))\n                % randomBoxes[_idByte].volume;\n            randomItems[msg.sender].values[_idByte].push(randomVal);\n        }\n    }\n\n    function getRandomItems(address _addrss, string _id_max32) constant public returns (uint[]) {\n        return randomItems[_addrss].values[keccak256(_id_max32)];\n    }\n\n\n    ////////////////////////////////////////////////////////////////////////\n\n    function airDrop(address[] _recipients, uint[] _values) onlyOwner public returns (bool) {\n        return distribute(addrAirDrop, _recipients, _values);\n    }\n\n    function rain(address[] _recipients, uint[] _values) public returns (bool) {\n        return distribute(msg.sender, _recipients, _values);\n    }\n\n    function distribute(address _from, address[] _recipients, uint[] _values) internal returns (bool) {\n        require(_recipients.length > 0 && _recipients.length == _values.length);\n\n        uint total = 0;\n        for(uint i = 0; i < _values.length; i++) {\n            total = total.add(_values[i]);\n        }\n        require(total <= balances[_from]);\n\n        for(uint j = 0; j < _recipients.length; j++) {\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\n            Transfer(_from, _recipients[j], _values[j]);\n        }\n\n        balances[_from] = balances[_from].sub(total);\n\n        return true;\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"putSaveData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_volume\",\"type\":\"uint64\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_finish\",\"type\":\"uint128\"}],\"name\":\"createRandomBox\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrLockUp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"atto\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAirDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"}],\"name\":\"getRandomBox\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_finish\",\"type\":\"uint128\"},{\"name\":\"_under\",\"type\":\"uint256\"}],\"name\":\"createQuestion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrDevTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"},{\"name\":\"_position\",\"type\":\"uint256\"}],\"name\":\"getQuestionVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unLockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"drawRandomItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"airDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"}],\"name\":\"getQuestionVotesAllCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockupSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"rain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initializeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addrss\",\"type\":\"address\"},{\"name\":\"_id_max32\",\"type\":\"string\"}],\"name\":\"getRandomItems\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"}],\"name\":\"getQuestion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id_max32\",\"type\":\"string\"},{\"name\":\"_number\",\"type\":\"uint128\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getSaveData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061422e806100616000396000f3006080604052600436106101c2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101c7578063095ea7b3146102575780630c3d5157146102bc57806312795d7f146102e757806318160ddd146103505780631c674fba1461037b57806322bf1a2a1461043e57806323b872dd1461049557806324b94ac61461051a57806327773ba21461054557806329db32561461059c578063313ce567146106415780633c15d28f1461066c5780634493b8a41461071b5780634899e4c61461077257806350ef3bae146107c95780635eecdec014610878578063630bcd991461088f57806365216a411461090257806366188463146109c35780636dd4090514610a2857806370a0823114610aa55780637904922714610afc5780638491b49c14610b3b5780638da5cb5b14610bfc57806395d89b4114610c535780639eb32fdb14610ce3578063a9059cbb14610cfa578063afff972014610d5f578063bc92bea514610db6578063ccb1c0a114610e94578063d73dd62314610f39578063dd62ed3e14610f9e578063e5fe787014611015578063f2fde38b146110a4578063fb867165146110e7575b600080fd5b3480156101d357600080fd5b506101dc6111a3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561021c578082015181840152602081019050610201565b50505050905090810190601f1680156102495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026357600080fd5b506102a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111dc565b604051808215151515815260200191505060405180910390f35b3480156102c857600080fd5b506102d16112ce565b6040518082815260200191505060405180910390f35b3480156102f357600080fd5b5061034e600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506112d4565b005b34801561035c57600080fd5b5061036561132b565b6040518082815260200191505060405180910390f35b34801561038757600080fd5b5061043c600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803567ffffffffffffffff1690602001909291908035906020019092919080356fffffffffffffffffffffffffffffffff169060200190929190505050611335565b005b34801561044a57600080fd5b50610453611572565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104a157600080fd5b50610500600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061158a565b604051808215151515815260200191505060405180910390f35b34801561052657600080fd5b5061052f611944565b6040518082815260200191505060405180910390f35b34801561055157600080fd5b5061055a61194c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105a857600080fd5b50610603600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611964565b6040518082600560200280838360005b8381101561062e578082015181840152602081019050610613565b5050505090500191505060405180910390f35b34801561064d57600080fd5b50610656611bab565b6040518082815260200191505060405180910390f35b34801561067857600080fd5b50610719600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080356fffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611bb0565b005b34801561072757600080fd5b50610730611d8f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561077e57600080fd5b50610787611da7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107d557600080fd5b5061083a600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050611dbf565b6040518082600460200280838360005b8381101561086557808201518184015260208101905061084a565b5050505090500191505060405180910390f35b34801561088457600080fd5b5061088d61204c565b005b34801561089b57600080fd5b50610900600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050612335565b005b34801561090e57600080fd5b506109a9600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061265c565b604051808215151515815260200191505060405180910390f35b3480156109cf57600080fd5b50610a0e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506126e1565b604051808215151515815260200191505060405180910390f35b348015610a3457600080fd5b50610a8f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612972565b6040518082815260200191505060405180910390f35b348015610ab157600080fd5b50610ae6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129ff565b6040518082815260200191505060405180910390f35b348015610b0857600080fd5b50610b11612a47565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b348015610b4757600080fd5b50610be26004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612a4f565b604051808215151515815260200191505060405180910390f35b348015610c0857600080fd5b50610c11612a64565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c5f57600080fd5b50610c68612a8a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ca8578082015181840152602081019050610c8d565b50505050905090810190601f168015610cd55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610cef57600080fd5b50610cf8612ac3565b005b348015610d0657600080fd5b50610d45600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506130bc565b604051808215151515815260200191505060405180910390f35b348015610d6b57600080fd5b50610d746132db565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610dc257600080fd5b50610e3d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506132f3565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610e80578082015181840152602081019050610e65565b505050509050019250505060405180910390f35b348015610ea057600080fd5b50610efb600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613409565b6040518082600460200280838360005b83811015610f26578082015181840152602081019050610f0b565b5050505090500191505060405180910390f35b348015610f4557600080fd5b50610f84600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506135ff565b604051808215151515815260200191505060405180910390f35b348015610faa57600080fd5b50610fff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506137fb565b6040518082815260200191505060405180910390f35b34801561102157600080fd5b506110a2600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080356fffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613882565b005b3480156110b057600080fd5b506110e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613b8a565b005b3480156110f357600080fd5b50611128600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613ce2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561116857808201518184015260208101905061114d565b50505050905090810190601f1680156111955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6040805190810160405280600a81526020017f4b616e616465436f696e0000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60045481565b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190611327929190614117565b5050565b6000600154905090565b6000808467ffffffffffffffff1611151561134f57600080fd5b856040518082805190602001908083835b6020831015156113855780518252602082019150602081019050602083039250611360565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050600060076000836000191660001916815260200190815260200160002060000160009054906101000a900460ff1660ff161415156113f157600080fd5b611417733ccdb82f43eef681a39ae854be37ad1c40446f0d6305f5e100611388026130bc565b50600160076000836000191660001916815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055508460076000836000191660001916815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360076000836000191660001916815260200190815260200160002060000160156101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082600760008360001916600019168152602001908152602001600020600101819055508160076000836000191660001916815260200190815260200160002060020160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505050505050565b73010101010101010101010101010101010101010181565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156115c757600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561161457600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561169f57600080fd5b6116f0826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613dc390919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611783826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ddc90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061185482600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613dc390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6305f5e10081565b73d6a4ce07f18619ec73f91ccdbefcce53f048ae0581565b61196c614197565b600080836040518082805190602001908083835b6020831015156119a55780518252602082019150602081019050602083039250611980565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060076000836000191660001916815260200190815260200160002060000160009054906101000a900460ff1660ff16816000600581101515611a1257fe5b018190555060076000836000191660001916815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16816001600581101515611a7b57fe5b018190555060076000836000191660001916815260200190815260200160002060000160159054906101000a900467ffffffffffffffff1667ffffffffffffffff16816002600581101515611acc57fe5b018190555060076000836000191660001916815260200190815260200160002060010154816003600581101515611aff57fe5b018190555060076000836000191660001916815260200190815260200160002060020160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816004600581101515611b6057fe5b018190555080600580602002604051908101604052809291908260058015611b9d576020028201915b815481526020019060010190808311611b89575b505050505092505050919050565b600881565b6000846040518082805190602001908083835b602083101515611be85780518252602082019150602081019050602083039250611bc3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050600060056000836000191660001916815260200190815260200160002060000160009054906101000a900460ff1660ff16141515611c5457600080fd5b611c7a733ccdb82f43eef681a39ae854be37ad1c40446f0d6305f5e100611388026130bc565b50600160056000836000191660001916815260200190815260200160002060000160006101000a81548160ff021916908360ff1602179055508360056000836000191660001916815260200190815260200160002060000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260056000836000191660001916815260200190815260200160002060010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555081600560008360001916600019168152602001908152602001600020600201819055505050505050565b734d85fcf252c02fa849258f16c5464af529ebfa5f81565b739d6fb734a716306a9575e3ce971ab8839edcedf381565b611dc76141ba565b600080846040518082805190602001908083835b602083101515611e005780518252602082019150602081019050602083039250611ddb565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060056000836000191660001916815260200190815260200160002060030184815481101515611e5a57fe5b906000526020600020906004020160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16816000600481101515611ea957fe5b018190555060056000836000191660001916815260200190815260200160002060030184815481101515611ed957fe5b906000526020600020906004020160010154816001600481101515611efa57fe5b018190555060056000836000191660001916815260200190815260200160002060030184815481101515611f2a57fe5b906000526020600020906004020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16816002600481101515611f8157fe5b018190555060056000836000191660001916815260200190815260200160002060030184815481101515611fb157fe5b906000526020600020906004020160030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681600360048110151561200057fe5b01819055508060048060200260405190810160405280929190826004801561203d576020028201915b815481526020019060010190808311612029575b50505050509250505092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120aa57600080fd5b6004546120ce6305a39a8067ffffffffffffffff1642613dc390919063ffffffff16565b1115156120da57600080fd5b60008073010101010101010101010101010101010101010173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506121948160008073010101010101010101010101010101010101010173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613dc390919063ffffffff16565b60008073010101010101010101010101010101010101010173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061224f81600080734d85fcf252c02fa849258f16c5464af529ebfa5f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ddc90919063ffffffff16565b600080734d85fcf252c02fa849258f16c5464af529ebfa5f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550734d85fcf252c02fa849258f16c5464af529ebfa5f73ffffffffffffffffffffffffffffffffffffffff1673010101010101010101010101010101010101010173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b60008060008060008511801561234d57506103e88511155b151561235857600080fd5b856040518082805190602001908083835b60208310151561238e5780518252602082019150602081019050602083039250612369565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902093506123ee8560076000876000191660001916815260200190815260200160002060010154613dfa90919063ffffffff16565b9250600160076000866000191660001916815260200190815260200160002060000160009054906101000a900460ff1660ff1614801561248c5750426fffffffffffffffffffffffffffffffff1660076000866000191660001916815260200190815260200160002060020160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1610155b151561249757600080fd5b6124df60076000866000191660001916815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846130bc565b50600091505b848210156126545760076000856000191660001916815260200190815260200160002060000160159054906101000a900467ffffffffffffffff1667ffffffffffffffff166001430340600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000876000191660001916815260200190815260200160002080549050604051808360001916600019168152602001828152602001925050506040518091039020600190048115156125bf57fe5b069050600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000856000191660001916815260200190815260200160002081908060018154018082558091505090600182039060005260206000200160009091929091909150555081806001019250506124e5565b505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126ba57600080fd5b6126d973d6a4ce07f18619ec73f91ccdbefcce53f048ae058484613e35565b905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156127f2576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612886565b6128058382613dc390919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600060056000836040518082805190602001908083835b6020831015156129ae5780518252602082019150602081019050602083039250612989565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600019168152602001908152602001600020600301805490509050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6305a39a8081565b6000612a5c338484613e35565b905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f4b4e44430000000000000000000000000000000000000000000000000000000081525081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b1f57600080fd5b6000600154141515612b30576130ba565b426004819055506305f5e1008002600080734d85fcf252c02fa849258f16c5464af529ebfa5f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506305f5e1006335a4e9000260008073010101010101010101010101010101010101010173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506305f5e100639502f90002600080733ccdb82f43eef681a39ae854be37ad1c40446f0d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506305f5e100633b9aca0002600080739d6fb734a716306a9575e3ce971ab8839edcedf373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506305f5e100640147d357000260008073d6a4ce07f18619ec73f91ccdbefcce53f048ae0573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550734d85fcf252c02fa849258f16c5464af529ebfa5f73ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080734d85fcf252c02fa849258f16c5464af529ebfa5f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a373010101010101010101010101010101010101010173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008073010101010101010101010101010101010101010173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3733ccdb82f43eef681a39ae854be37ad1c40446f0d73ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080733ccdb82f43eef681a39ae854be37ad1c40446f0d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3739d6fb734a716306a9575e3ce971ab8839edcedf373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080739d6fb734a716306a9575e3ce971ab8839edcedf373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a373d6a4ce07f18619ec73f91ccdbefcce53f048ae0573ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60008073d6a4ce07f18619ec73f91ccdbefcce53f048ae0573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36305f5e1006402540be400026001819055505b565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156130f957600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561314657600080fd5b613197826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613dc390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061322a826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ddc90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b733ccdb82f43eef681a39ae854be37ad1c40446f0d81565b6060600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000836040518082805190602001908083835b60208310151561336f578051825260208201915060208101905060208303925061334a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000191681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156133fc57602002820191906000526020600020905b8154815260200190600101908083116133e8575b5050505050905092915050565b6134116141ba565b600080836040518082805190602001908083835b60208310151561344a5780518252602082019150602081019050602083039250613425565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060056000836000191660001916815260200190815260200160002060000160009054906101000a900460ff1660ff168160006004811015156134b757fe5b018190555060056000836000191660001916815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681600160048110151561352057fe5b018190555060056000836000191660001916815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681600260048110151561358157fe5b0181905550600560008360001916600019168152602001908152602001600020600201548160036004811015156135b457fe5b0181905550806004806020026040519081016040528092919082600480156135f1576020028201915b8154815260200190600101908083116135dd575b505050505092505050919050565b600061369082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ddc90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000836040518082805190602001908083835b6020831015156138ba5780518252602082019150602081019050602083039250613895565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050600160056000836000191660001916815260200190815260200160002060000160009054906101000a900460ff1660ff161480156139455750816005600083600019166000191681526020019081526020016000206002015411155b80156139af5750426fffffffffffffffffffffffffffffffff1660056000836000191660001916815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1610155b15156139ba57600080fd5b6000821115613a0d57613a0b60056000836000191660001916815260200190815260200160002060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836130bc565b505b600560008260001916600019168152602001908152602001600020600301608060405190810160405280856fffffffffffffffffffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001426fffffffffffffffffffffffffffffffff168152509080600181540180825580915050906001820390600052602060002090600402016000909192909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613be657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613c2257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613db75780601f10613d8c57610100808354040283529160200191613db7565b820191906000526020600020905b815481529060010190602001808311613d9a57829003601f168201915b50505050509050919050565b6000828211151515613dd157fe5b818303905092915050565b6000808284019050838110151515613df057fe5b8091505092915050565b6000806000841415613e0f5760009150613e2e565b8284029050828482811515613e2057fe5b04141515613e2a57fe5b8091505b5092915050565b60008060008060008651118015613e4d575084518651145b1515613e5857600080fd5b60009250600091505b8451821015613ea357613e948583815181101515613e7b57fe5b9060200190602002015184613ddc90919063ffffffff16565b92508180600101925050613e61565b6000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515613ef057600080fd5b600090505b855181101561407657613f7d8582815181101515613f0f57fe5b906020019060200201516000808985815181101515613f2a57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613ddc90919063ffffffff16565b6000808884815181101515613f8e57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581815181101515613fe457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef878481518110151561404a57fe5b906020019060200201516040518082815260200191505060405180910390a38080600101915050613ef5565b6140c7836000808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613dc390919063ffffffff16565b6000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600193505050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061415857805160ff1916838001178555614186565b82800160010185558215614186579182015b8281111561418557825182559160200191906001019061416a565b5b50905061419391906141dd565b5090565b60a060405190810160405280600590602082028038833980820191505090505090565b608060405190810160405280600490602082028038833980820191505090505090565b6141ff91905b808211156141fb5760008160009055506001016141e3565b5090565b905600a165627a7a72305820ff6a30ca35f57674d0675c63bbb7bd049fa0734b4bd88e39159952c48ef4d8ee0029"
}