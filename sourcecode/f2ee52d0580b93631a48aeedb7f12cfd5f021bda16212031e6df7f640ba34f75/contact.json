{
  "address": "0x7b1309c1522afd4e66c31e1e6d0ec1319e1eba5e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bulleon",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-07\n*/\n\npragma solidity ^0.4.18;\n// Â© Bulleon. All Rights Reserved\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract owned {\n    address public owner;\n    address public newOwner;\n\n    function owned() payable {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner {\n        require(owner == msg.sender);\n        _;\n    }\n\n    function changeOwner(address _owner) onlyOwner public {\n        require(_owner != 0);\n        newOwner = _owner;\n    }\n    \n    function confirmOwner() public {\n        require(newOwner == msg.sender);\n        owner = newOwner;\n        delete newOwner;\n    }\n}\n\ncontract StandardToken {\n    using SafeMath for uint256;\n\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping(address => uint256) balances;\n    uint256 public totalSupply;  \n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n      require(_to != address(0));\n\n      // SafeMath.sub will throw if there is not enough balance.\n      balances[msg.sender] = balances[msg.sender].sub(_value);\n      balances[_to] = balances[_to].add(_value);\n      Transfer(msg.sender, _to, _value);\n      return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of. \n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n      return balances[_owner];\n    }\n\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n      require(_to != address(0));\n\n      var _allowance = allowed[_from][msg.sender];\n\n      // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n      // require (_value <= _allowance);\n\n      balances[_from] = balances[_from].sub(_value);\n      balances[_to] = balances[_to].add(_value);\n      allowed[_from][msg.sender] = _allowance.sub(_value);\n      Transfer(_from, _to, _value);\n      return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n\n      // To change the approve amount you first have to reduce the addresses`\n      //  allowance to zero by calling `approve(_spender, 0)` if it is not\n      //  already 0 to mitigate the race condition described here:\n      //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n      require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n      allowed[msg.sender][_spender] = _value;\n      Approval(msg.sender, _spender, _value);\n      return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n    \n    /**\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until \n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    */\n    function increaseApproval (address _spender, uint _addedValue) public\n      returns (bool success) {\n      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public\n      returns (bool success) {\n      uint oldValue = allowed[msg.sender][_spender];\n      if (_subtractedValue > oldValue) {\n        allowed[msg.sender][_spender] = 0;\n      } else {\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n      }\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n    }\n}\n\n\ncontract BulleonICO is owned {\n    using SafeMath for uint256;\n    string public version = \"1.0\";\n    address private WITHDRAW_WALLET;\n    uint256 public totalSold = 0;\n    uint256 public soldOnStage = 0;\n    uint8 public currentStage = 0;\n    Bulleon public rewardToken;\n\n\n    uint256[] tokensRate = [1000,800,600,400,200,100,75,50,25,10,5,1];\n    uint256[] tokensCap = [760000,760000,760000,760000,760000,760000,760000,760000,760000,760000,760000,760000];\n    mapping(address=>uint256) investments;\n    uint256 LIMIT_ON_BENEFICIARY = 1000 * 1 ether;\n\n    function investmentsOf(address beneficiary) public constant returns(uint256) {\n      return investments[beneficiary];\n    }\n  \n    function availableOnStage() public constant returns(uint256) {\n        return tokensCap[currentStage].mul(1 ether).sub(soldOnStage);\n    }\n\n    function createTokenContract() internal returns (Bulleon) {\n      return new Bulleon();\n    }\n\n    function currentStageTokensCap() public constant returns(uint256) {\n      return tokensCap[currentStage];\n    }\n    function currentStageTokensRate() public constant returns(uint256) {\n      return tokensRate[currentStage];\n    }\n\n    function BulleonICO() payable owned() {\n        owner = msg.sender;\n        WITHDRAW_WALLET = msg.sender; \n        rewardToken = createTokenContract();\n    }\n\n    function () payable {\n        buyTokens(msg.sender);\n    }\n\n    function buyTokens(address beneficiary) payable {\n      bool canBuy = investmentsOf(beneficiary) < LIMIT_ON_BENEFICIARY;\n      bool validPurchase = beneficiary != 0x0 && msg.value != 0;\n      uint256 currentTokensAmount = availableTokens();\n      require(canBuy && validPurchase && currentTokensAmount > 0);\n      uint256 boughtTokens;\n      uint256 refundAmount = 0;\n      \n      uint256[2] memory tokensAndRefund = calcMultiStage();\n      boughtTokens = tokensAndRefund[0];\n      refundAmount = tokensAndRefund[1];\n\n      require(boughtTokens < currentTokensAmount);\n\n      totalSold = totalSold.add(boughtTokens);\n      investments[beneficiary] = investments[beneficiary].add(boughtTokens);\n      if( soldOnStage >= tokensCap[currentStage].mul(1 ether)) {\n        toNextStage();\n      } \n      \n      rewardToken.transfer(beneficiary,boughtTokens);\n      if (refundAmount > 0) \n          refundMoney(refundAmount);\n\n      withdrawFunds(this.balance);\n    }\n\n    function forceWithdraw() onlyOwner {\n      withdrawFunds(this.balance);\n    }\n\n    function calcMultiStage() internal returns(uint256[2]) {\n      uint256 stageBoughtTokens;\n      uint256 undistributedAmount = msg.value; \n      uint256 _boughtTokens = 0; \n      uint256 undistributedTokens = availableTokens(); \n\n      while(undistributedAmount > 0 && undistributedTokens > 0) {\n        bool needNextStage = false; \n        \n        stageBoughtTokens = getTokensAmount(undistributedAmount);\n        \n\n        if(totalInvestments(_boughtTokens.add(stageBoughtTokens)) > LIMIT_ON_BENEFICIARY){\n          stageBoughtTokens = LIMIT_ON_BENEFICIARY.sub(_boughtTokens);\n          undistributedTokens = stageBoughtTokens; \n        }\n\n        \n        if (stageBoughtTokens > availableOnStage()) {\n          stageBoughtTokens = availableOnStage();\n          needNextStage = true; \n        }\n        \n        _boughtTokens = _boughtTokens.add(stageBoughtTokens);\n        undistributedTokens = undistributedTokens.sub(stageBoughtTokens); \n        undistributedAmount = undistributedAmount.sub(getTokensCost(stageBoughtTokens)); \n        soldOnStage = soldOnStage.add(stageBoughtTokens);\n        if (needNextStage) \n          toNextStage();\n      }\n      return [_boughtTokens,undistributedAmount];\n    }\n\n\n    function setWithdrawWallet(address addressToWithdraw) public onlyOwner {\n        require(addressToWithdraw != 0x0);\n        WITHDRAW_WALLET = addressToWithdraw;\n    }\n    function totalInvestments(uint additionalAmount) internal returns (uint256) {\n      return investmentsOf(msg.sender).add(additionalAmount);\n    }\n\n    function refundMoney(uint256 refundAmount) internal {\n      msg.sender.transfer(refundAmount);\n    }\n\n    function burnTokens(uint256 amount) public onlyOwner {\n      rewardToken.burn(amount);\n    }\n\n    function getTokensCost(uint256 _tokensAmount) internal constant returns(uint256) {\n      return _tokensAmount.div(tokensRate[currentStage]);\n    } \n\n    function getTokensAmount(uint256 _amountInWei) internal constant returns(uint256) {\n      return _amountInWei.mul(tokensRate[currentStage]);\n    }\n\n    function toNextStage() internal {\n        \n        if(currentStage < tokensRate.length && currentStage < tokensCap.length){\n          currentStage++;\n          soldOnStage = 0;\n        }\n    }\n\n    function availableTokens() public constant returns(uint256) {\n        return rewardToken.balanceOf(address(this));\n    }\n\n    function withdrawFunds(uint256 amount) internal {\n        WITHDRAW_WALLET.transfer(amount);\n    }\n}\n\n\ncontract Bulleon is StandardToken {\n      event Burn(address indexed burner, uint256 value);\n\n      string public constant name = \"Bulleon\";\n      string public constant symbol = \"BLN\";\n      uint8 public constant decimals = 18;\n      string public version = \"1.0\";\n      uint256 public totalSupply  = 9500000 * 1 ether;\n      mapping(address=>uint256) premineOf;\n      address[] private premineWallets = [\n          0xdAB26a04594Ca4EDB276672BE0A0F697e5a24aFb, \n          0xA75E62874Cb25D53e563A269DF4b52d5A28e7A8e, \n          0x6Ff480a30D037B774c6aba935468fa5560d769a4  \n      ];\n\n      function Bulleon() public {\n        balances[msg.sender] = totalSupply;\n        premineOf[premineWallets[0]] = 95000 * 1 ether; \n        premineOf[premineWallets[1]] = 95000 * 1 ether;\n        premineOf[premineWallets[2]] = 190000 * 1 ether;\n        \n        for(uint i = 0; i<premineWallets.length;i++) {\n          transfer(premineWallets[i],premineOf[premineWallets[i]]);\n        }\n      }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n  }",
  "bytecode": "60606040526040805190810160405260038082527f312e30000000000000000000000000000000000000000000000000000000000060208301529080516200004c92916020019062000377565b506a07dbb4082c9ad1798000006004556060604051908101604090815273dab26a04594ca4edb276672be0a0f697e5a24afb825273a75e62874cb25d53e563a269df4b52d5a28e7a8e6020830152736ff480a30d037b774c6aba935468fa5560d769a490820152620000c3906006906003620003fc565b503415620000d057600080fd5b600454600160a060020a0333166000908152600160205260408120919091556006805469141df5d77c6d9d60000091600591849190829081106200011057fe5b6000918252602080832090910154600160a060020a031683528201929092526040018120919091556006805469141df5d77c6d9d60000092600592909160019081106200015957fe5b6000918252602080832090910154600160a060020a031683528201929092526040018120919091556006805469283bebaef8db3ac000009260059290916002908110620001a257fe5b6000918252602080832090910154600160a060020a0316835282019290925260400181209190915590505b6006548110156200025b5762000251600682815481101515620001ec57fe5b600091825260208220015460068054600160a060020a0390921692600592909190869081106200021857fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054640100000000620007766200026282021704565b50600101620001cd565b50620004ab565b6000600160a060020a03831615156200027a57600080fd5b600160a060020a033316600090815260016020526040902054620002ad9083640100000000620009156200034d82021704565b600160a060020a033381166000908152600160205260408082209390935590851681522054620002ec9083640100000000620009276200036082021704565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b6000828211156200035a57fe5b50900390565b6000828201838110156200037057fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003ba57805160ff1916838001178555620003ea565b82800160010185558215620003ea579182015b82811115620003ea578251825591602001919060010190620003cd565b50620003f892915062000464565b5090565b82805482825590600052602060002090810192821562000456579160200282015b82811115620004565782518254600160a060020a031916600160a060020a0391909116178255602092909201916001909101906200041d565b50620003f892915062000484565b6200048191905b80821115620003f857600081556001016200046b565b90565b6200048191905b80821115620003f8578054600160a060020a03191681556001016200048b565b61096980620004bb6000396000f3006060604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461018957806323b872dd146101ae578063313ce567146101d657806342966c68146101ff57806354fd4d5014610217578063661884631461022a57806370a082311461024c57806395d89b411461026b578063a9059cbb1461027e578063d73dd623146102a0578063dd62ed3e146102c2575b600080fd5b34156100d457600080fd5b6100dc6102e7565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610118578082015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015e57600080fd5b610175600160a060020a036004351660243561031e565b604051901515815260200160405180910390f35b341561019457600080fd5b61019c6103c0565b60405190815260200160405180910390f35b34156101b957600080fd5b610175600160a060020a03600435811690602435166044356103c6565b34156101e157600080fd5b6101e96104ec565b60405160ff909116815260200160405180910390f35b341561020a57600080fd5b6102156004356104f1565b005b341561022257600080fd5b6100dc610594565b341561023557600080fd5b610175600160a060020a0360043516602435610632565b341561025757600080fd5b61019c600160a060020a0360043516610724565b341561027657600080fd5b6100dc61073f565b341561028957600080fd5b610175600160a060020a0360043516602435610776565b34156102ab57600080fd5b610175600160a060020a036004351660243561084c565b34156102cd57600080fd5b61019c600160a060020a03600435811690602435166108ec565b60408051908101604052600781527f42756c6c656f6e00000000000000000000000000000000000000000000000000602082015281565b600081158061034e5750600160a060020a0333811660009081526020818152604080832093871683529290522054155b151561035957600080fd5b600160a060020a0333811660008181526020818152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60045481565b600080600160a060020a03841615156103de57600080fd5b50600160a060020a0380851660008181526020818152604080832033909516835293815283822054928252600190529190912054610422908463ffffffff61091516565b600160a060020a038087166000908152600160205260408082209390935590861681522054610457908463ffffffff61092716565b600160a060020a038516600090815260016020526040902055610480818463ffffffff61091516565b600160a060020a0380871660008181526020818152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b601281565b60008082116104ff57600080fd5b5033600160a060020a0381166000908152600160205260409020546105249083610915565b600160a060020a038216600090815260016020526040902055600454610550908363ffffffff61091516565b600455600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561062a5780601f106105ff5761010080835404028352916020019161062a565b820191906000526020600020905b81548152906001019060200180831161060d57829003601f168201915b505050505081565b600160a060020a033381166000908152602081815260408083209386168352929052908120548083111561068b57600160a060020a033381166000908152602081815260408083209388168352929052908120556106c0565b61069b818463ffffffff61091516565b600160a060020a03338116600090815260208181526040808320938916835292905220555b600160a060020a033381166000818152602081815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60408051908101604052600381527f424c4e0000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561078d57600080fd5b600160a060020a0333166000908152600160205260409020546107b6908363ffffffff61091516565b600160a060020a0333811660009081526001602052604080822093909355908516815220546107eb908363ffffffff61092716565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03338116600090815260208181526040808320938616835292905290812054610882908363ffffffff61092716565b600160a060020a033381166000818152602081815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a0391821660009081526020818152604080832093909416825291909152205490565b60008282111561092157fe5b50900390565b60008282018381101561093657fe5b93925050505600a165627a7a723058203f7d0552de59291e81a0673b42c325484ecf1db0aebae252f7e676bd24e931380029"
}