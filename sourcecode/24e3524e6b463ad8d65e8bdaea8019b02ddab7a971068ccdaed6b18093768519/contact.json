{
  "address": "0xfe2b2f134f16d209d7acd92b0b9a628cfded275a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Coinware Token",
  "contractName": "CoinwareToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-12\n*/\n\npragma solidity ^0.4.21;\n\n\n\n// File: contracts/library/SafeMath.sol\n\n/**\n * @title Safe Math\n *\n * @dev Library for safe mathematical operations.\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n\n        return a - b;\n    }\n\n    function plus(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n\n        return c;\n    }\n}\n\n// File: contracts/token/ERC20Token.sol\n\n/**\n * @dev The standard ERC20 Token contract base.\n */\ncontract ERC20Token {\n    uint256 public totalSupply;  /* shorthand for public function and a property */\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n// File: contracts/component/TokenSafe.sol\n\n/**\n * @title TokenSafe\n *\n * @dev Abstract contract that serves as a base for the token safes. It is a multi-group token safe, where each group\n *      has it's own release time and multiple accounts with locked tokens.\n */\ncontract TokenSafe {\n    using SafeMath for uint;\n\n    // The ERC20 token contract.\n    ERC20Token token;\n\n    struct Group {\n        // The release date for the locked tokens\n        // Note: Unix timestamp fits in uint32, however block.timestamp is uint256\n        uint256 releaseTimestamp;\n        // The total remaining tokens in the group.\n        uint256 remaining;\n        // The individual account token balances in the group.\n        mapping (address => uint) balances;\n    }\n\n    // The groups of locked tokens\n    mapping (uint8 => Group) public groups;\n\n    /**\n     * @dev The constructor.\n     *\n     * @param _token The address of the  contract.\n     */\n    constructor(address _token) public {\n        token = ERC20Token(_token);\n    }\n\n    /**\n     * @dev The function initializes a group with a release date.\n     *\n     * @param _id Group identifying number.\n     * @param _releaseTimestamp Unix timestamp of the time after which the tokens can be released\n     */\n    function init(uint8 _id, uint _releaseTimestamp) internal {\n        require(_releaseTimestamp > 0);\n\n        Group storage group = groups[_id];\n        group.releaseTimestamp = _releaseTimestamp;\n    }\n\n    /**\n     * @dev Add new account with locked token balance to the specified group id.\n     *\n     * @param _id Group identifying number.\n     * @param _account The address of the account to be added.\n     * @param _balance The number of tokens to be locked.\n     */\n    function add(uint8 _id, address _account, uint _balance) internal {\n        Group storage group = groups[_id];\n        group.balances[_account] = group.balances[_account].plus(_balance);\n        group.remaining = group.remaining.plus(_balance);\n    }\n\n    /**\n     * @dev Allows an account to be released if it meets the time constraints of the group.\n     *\n     * @param _id Group identifying number.\n     * @param _account The address of the account to be released.\n     */\n    function release(uint8 _id, address _account) public {\n        Group storage group = groups[_id];\n        require(now >= group.releaseTimestamp);\n\n        uint tokens = group.balances[_account];\n        require(tokens > 0);\n\n        group.balances[_account] = 0;\n        group.remaining = group.remaining.minus(tokens);\n\n        if (!token.transfer(_account, tokens)) {\n            revert();\n        }\n    }\n}\n\n\n\n\n\n\n// File: contracts/token/StandardToken.sol\n\n/**\n * @title Standard Token\n *\n * @dev The standard abstract implementation of the ERC20 interface.\n */\ncontract StandardToken is ERC20Token {\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev The constructor assigns the token name, symbols and decimals.\n     */\n    constructor(string _name, string _symbol, uint8 _decimals) internal {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /**\n     * @dev Get the balance of an address.\n     *\n     * @param _address The address which's balance will be checked.\n     *\n     * @return The current balance of the address.\n     */\n    function balanceOf(address _address) public view returns (uint256 balance) {\n        return balances[_address];\n    }\n\n    /**\n     * @dev Checks the amount of tokens that an owner allowed to a spender.\n     *\n     * @param _owner The address which owns the funds allowed for spending by a third-party.\n     * @param _spender The third-party address that is allowed to spend the tokens.\n     *\n     * @return The number of tokens available to `_spender` to be spent.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Give permission to `_spender` to spend `_value` number of tokens on your behalf.\n     * E.g. You place a buy or sell order on an exchange and in that example, the\n     * `_spender` address is the address of the contract the exchange created to add your token to their\n     * website and you are `msg.sender`.\n     *\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     *\n     * @return Whether the approval process was successful or not.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Transfers `_value` number of tokens to the `_to` address.\n     *\n     * @param _to The address of the recipient.\n     * @param _value The number of tokens to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        executeTransfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Allows another contract to spend tokens on behalf of the `_from` address and send them to the `_to` address.\n     *\n     * @param _from The address which approved you to spend tokens on their behalf.\n     * @param _to The address where you want to send tokens.\n     * @param _value The number of tokens to be sent.\n     *\n     * @return Whether the transfer was successful or not.\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\n        executeTransfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /**\n     * @dev Internal function that this reused by the transfer functions\n     */\n    function executeTransfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0));\n        require(_value != 0 && _value <= balances[_from]);\n\n        balances[_from] = balances[_from].minus(_value);\n        balances[_to] = balances[_to].plus(_value);\n\n        emit Transfer(_from, _to, _value);\n    }\n}\n\n\n\n\n\n\n// File: contracts/token/MintableToken.sol\n\n/**\n * @title Mintable Token\n *\n * @dev Allows the creation of new tokens.\n */\ncontract MintableToken is StandardToken {\n    /// @dev The only address allowed to mint coins\n    address public minter;\n\n    /// @dev Indicates whether the token is still mintable.\n    bool public mintingDisabled = false;\n\n    /**\n     * @dev Event fired when minting is no longer allowed.\n     */\n    event MintingDisabled();\n\n    /**\n     * @dev Allows a function to be executed only if minting is still allowed.\n     */\n    modifier canMint() {\n        require(!mintingDisabled);\n        _;\n    }\n\n    /**\n     * @dev Allows a function to be called only by the minter\n     */\n    modifier onlyMinter() {\n        require(msg.sender == minter);\n        _;\n    }\n\n    /**\n     * @dev The constructor assigns the minter which is allowed to mind and disable minting\n     */\n    constructor(address _minter) internal {\n        minter = _minter;\n    }\n\n    /**\n    * @dev Creates new `_value` number of tokens and sends them to the `_to` address.\n    *\n    * @param _to The address which will receive the freshly minted tokens.\n    * @param _value The number of tokens that will be created.\n    */\n    function mint(address _to, uint256 _value) public onlyMinter canMint {\n        totalSupply = totalSupply.plus(_value);\n        balances[_to] = balances[_to].plus(_value);\n\n        emit Transfer(0x0, _to, _value);\n    }\n\n    /**\n    * @dev Disable the minting of new tokens. Cannot be reversed.\n    *\n    * @return Whether or not the process was successful.\n    */\n    function disableMinting() public onlyMinter canMint {\n        mintingDisabled = true;\n\n        emit MintingDisabled();\n    }\n}\n\n// File: contracts/token/BurnableToken.sol\n\n/**\n * @title Burnable Token\n *\n * @dev Allows tokens to be destroyed.\n */\ncontract BurnableToken is StandardToken {\n    /**\n     * @dev Event fired when tokens are burned.\n     *\n     * @param _from The address from which tokens will be removed.\n     * @param _value The number of tokens to be destroyed.\n     */\n    event Burn(address indexed _from, uint256 _value);\n\n    /**\n     * @dev Burnes `_value` number of tokens.\n     *\n     * @param _value The number of tokens that will be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value != 0);\n\n        address burner = msg.sender;\n        require(_value <= balances[burner]);\n\n        balances[burner] = balances[burner].minus(_value);\n        totalSupply = totalSupply.minus(_value);\n\n        emit Burn(burner, _value);\n        emit Transfer(burner, address(0), _value);\n    }\n}\n\n// File: contracts/trait/HasOwner.sol\n\n/**\n * @title HasOwner\n *\n * @dev Allows for exclusive access to certain functionality.\n */\ncontract HasOwner {\n    // The current owner.\n    address public owner;\n\n    // Conditionally the new owner.\n    address public newOwner;\n\n    /**\n     * @dev The constructor.\n     *\n     * @param _owner The address of the owner.\n     */\n    constructor(address _owner) public {\n        owner = _owner;\n    }\n\n    /**\n     * @dev Access control modifier that allows only the current owner to call the function.\n     */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev The event is fired when the current owner is changed.\n     *\n     * @param _oldOwner The address of the previous owner.\n     * @param _newOwner The address of the new owner.\n     */\n    event OwnershipTransfer(address indexed _oldOwner, address indexed _newOwner);\n\n    /**\n     * @dev Transfering the ownership is a two-step process, as we prepare\n     * for the transfer by setting `newOwner` and requiring `newOwner` to accept\n     * the transfer. This prevents accidental lock-out if something goes wrong\n     * when passing the `newOwner` address.\n     *\n     * @param _newOwner The address of the proposed new owner.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    /**\n     * @dev The `newOwner` finishes the ownership transfer process by accepting the\n     * ownership.\n     */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n\n        emit OwnershipTransfer(owner, newOwner);\n\n        owner = newOwner;\n    }\n}\n\n// File: contracts/token/PausableToken.sol\n\n/**\n * @title Pausable Token\n *\n * @dev Allows you to pause/unpause transfers of your token.\n **/\ncontract PausableToken is StandardToken, HasOwner {\n\n    /// Indicates whether the token contract is paused or not.\n    bool public paused = false;\n\n    /**\n     * @dev Event fired when the token contracts gets paused.\n     */\n    event Pause();\n\n    /**\n     * @dev Event fired when the token contracts gets unpaused.\n     */\n    event Unpause();\n\n    /**\n     * @dev Allows a function to be called only when the token contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Pauses the token contract.\n     */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev Unpauses the token contract.\n     */\n    function unpause() public onlyOwner {\n        require(paused);\n\n        paused = false;\n        emit Unpause();\n    }\n\n    /// Overrides of the standard token's functions to add the paused/unpaused functionality.\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n}\n\n\n\n\n\n\n\n\n\n// File: contracts/token/StandardMintableToken.sol\n\ncontract StandardMintableToken is MintableToken {\n    constructor(address _minter, string _name, string _symbol, uint8 _decimals)\n        StandardToken(_name, _symbol, _decimals)\n        MintableToken(_minter)\n        public\n    {\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title CoinwareToken\n */\n\ncontract CoinwareToken is MintableToken, BurnableToken, PausableToken {\n    constructor(address _owner, address _minter)\n        StandardToken(\n            \"CoinwareToken\",   // Token name\n            \"CWT\", // Token symbol\n            18  // Token decimals\n        )\n        HasOwner(_owner)\n        MintableToken(_minter)\n        public\n    {\n    }\n}",
  "bytecode": "60806040526000600660146101000a81548160ff0219169083151502179055506000600860146101000a81548160ff0219169083151502179055503480156200004757600080fd5b50604051604080620019d6833981018060405281019080805190602001909291908051906020019092919050505081816040805190810160405280600d81526020017f436f696e77617265546f6b656e000000000000000000000000000000000000008152506040805190810160405280600381526020017f435754000000000000000000000000000000000000000000000000000000000081525060128260019080519060200190620000fd929190620001c1565b50816002908051906020019062000116929190620001c1565b5080600360006101000a81548160ff021916908360ff16021790555050505080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000270565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020457805160ff191683800117855562000235565b8280016001018555821562000235579182015b828111156200023457825182559160200191906001019062000217565b5b50905062000244919062000248565b5090565b6200026d91905b80821115620002695760008160009055506001016200024f565b5090565b90565b61175680620002806000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012257806307546172146101b2578063095ea7b31461020957806318160ddd1461026e57806321afb5ee1461029957806323b872dd146102c8578063313ce5671461034d5780633f4ba83a1461037e57806340c10f191461039557806342966c68146103e25780635c975abb1461040f57806370a082311461043e57806379ba5097146104955780637e5cd5c1146104ac5780638456cb59146104c35780638da5cb5b146104da57806395d89b4114610531578063a9059cbb146105c1578063d4ee1d9014610626578063dd62ed3e1461067d578063f2fde38b146106f4575b600080fd5b34801561012e57600080fd5b50610137610737565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017757808201518184015260208101905061015c565b50505050905090810190601f1680156101a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101be57600080fd5b506101c76107d5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561021557600080fd5b50610254600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107fb565b604051808215151515815260200191505060405180910390f35b34801561027a57600080fd5b5061028361082b565b6040518082815260200191505060405180910390f35b3480156102a557600080fd5b506102ae610831565b604051808215151515815260200191505060405180910390f35b3480156102d457600080fd5b50610333600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610844565b604051808215151515815260200191505060405180910390f35b34801561035957600080fd5b50610362610876565b604051808260ff1660ff16815260200191505060405180910390f35b34801561038a57600080fd5b50610393610889565b005b3480156103a157600080fd5b506103e0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610949565b005b3480156103ee57600080fd5b5061040d60048036038101908080359060200190929190505050610ac5565b005b34801561041b57600080fd5b50610424610c8f565b604051808215151515815260200191505060405180910390f35b34801561044a57600080fd5b5061047f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ca2565b6040518082815260200191505060405180910390f35b3480156104a157600080fd5b506104aa610ceb565b005b3480156104b857600080fd5b506104c1610e4a565b005b3480156104cf57600080fd5b506104d8610f0b565b005b3480156104e657600080fd5b506104ef610fcc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053d57600080fd5b50610546610ff2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561058657808201518184015260208101905061056b565b50505050905090810190601f1680156105b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105cd57600080fd5b5061060c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611090565b604051808215151515815260200191505060405180910390f35b34801561063257600080fd5b5061063b6110c0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561068957600080fd5b506106de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110e6565b6040518082815260200191505060405180910390f35b34801561070057600080fd5b50610735600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061116d565b005b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107cd5780601f106107a2576101008083540402835291602001916107cd565b820191906000526020600020905b8154815290600101906020018083116107b057829003601f168201915b505050505081565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860149054906101000a900460ff1615151561081957600080fd5b610823838361120d565b905092915050565b60005481565b600660149054906101000a900460ff1681565b6000600860149054906101000a900460ff1615151561086257600080fd5b61086d8484846112ff565b90509392505050565b600360009054906101000a900460ff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108e557600080fd5b600860149054906101000a900460ff16151561090057600080fd5b6000600860146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109a557600080fd5b600660149054906101000a900460ff161515156109c157600080fd5b6109d6816000546114b190919063ffffffff16565b600081905550610a2e81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114b190919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000808214151515610ad657600080fd5b339050600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b2757600080fd5b610b7982600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114cf90919063ffffffff16565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bd1826000546114cf90919063ffffffff16565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b600860149054906101000a900460ff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d4757600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f22500af037c600dd7b720644ab6e358635085601d9ac508ad83eb2d6b2d729ca60405160405180910390a3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ea657600080fd5b600660149054906101000a900460ff16151515610ec257600080fd5b6001600660146101000a81548160ff0219169083151502179055507faf79b4370f6af9d950564bbe6b81f7f0834c003c455db9248f4e55e6bf865eb760405160405180910390a1565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f6757600080fd5b600860149054906101000a900460ff16151515610f8357600080fd5b6001600860146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110885780601f1061105d57610100808354040283529160200191611088565b820191906000526020600020905b81548152906001019060200180831161106b57829003601f168201915b505050505081565b6000600860149054906101000a900460ff161515156110ae57600080fd5b6110b883836114e8565b905092915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111c957600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561138c57600080fd5b61141b82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114cf90919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114a68484846114ff565b600190509392505050565b60008082840190508381101515156114c557fe5b8091505092915050565b60008282111515156114dd57fe5b818303905092915050565b60006114f53384846114ff565b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561153b57600080fd5b6000811415801561158b5750600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111155b151561159657600080fd5b6115e881600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114cf90919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061167d81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114b190919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a72305820089bdf69732a084f0c014a33f16d97bcbc85e017298ce3db9a146a174ae76dde0029000000000000000000000000a81e21cb715db6f3cadd82b69c1df082df85c32f000000000000000000000000a81e21cb715db6f3cadd82b69c1df082df85c32f",
  "constructorArguments": "000000000000000000000000a81e21cb715db6f3cadd82b69c1df082df85c32f000000000000000000000000a81e21cb715db6f3cadd82b69c1df082df85c32f"
}