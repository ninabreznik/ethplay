{
  "address": "0xdf1f0c982e6574c4b89ec49e2636abd9a25a3126",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "HYIP Profit Token",
  "contractName": "HyipProfit",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-15\n*/\n\npragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() public constant returns (uint256 supply);\n    function balanceOf(address who) public constant returns (uint256 value);\n    function allowance(address owner, address spender) public constant returns (uint256 permitted);\n\n    function transfer(address to, uint256 value) public returns (bool ok);\n    function transferFrom(address from, address to, uint256 value) public returns (bool ok);\n    function approve(address spender, uint256 value) public returns (bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract HyipProfit is ERC20 {\n    using SafeMath for uint256;\n    string public constant name = \"HYIP Profit\";\n    string public constant symbol = \"HYIP\";\n    uint8 public constant decimals = 8;\n\n    uint256 initialSupply = 450000000000000;\n\n    uint256 constant preSaleSoftCap = 31250000000000;\n\n    uint256 public preSaleFund = 0;\n    uint256 public spentFunds = 0;\n    uint256 public IcoFund = 0;\n\n    uint256 public soldTokens = 0; //reduces when somebody returns money\n\n    mapping (address => uint256) tokenBalances; //amount of tokens each address holds\n    mapping (address => uint256) preSaleWeiBalances; //amount of Wei, paid for tokens on preSale. Used only before project completed.\n    mapping (address => uint256) weiBalances; //amount of Wei, paid for tokens that smb holds. Used only before project completed.\n\n    uint256 public currentStage = 0;\n    tokenAddressGetter tg;\n\n    bool public isICOfinalized = false;\n\n    address public HyipProfitTokenTeamAddress;\n    address public utilityTokenAddress = 0x0;\n\n    modifier onlyTeam {\n        if (msg.sender == HyipProfitTokenTeamAddress) {\n            _;\n        }\n    }\n\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (uint256 => address) teamAddresses;\n\n    uint256 currentDividendsRound;\n    mapping (uint256 => uint256) dividendsPerTokenPerRound;\n    mapping (uint256 => mapping (address => uint256)) poolBalances;\n    mapping (address => uint256) lastWithdrawal;\n\n    event dividendsReceived (uint256 round, uint256 totalValue, uint256 dividendsPerToken);\n    event dividendsWithdraw (address tokenHolder, uint256 valueInWei);\n    event tokensReceived (address from, uint256 tokensAmount);\n    event tokensWithdrawal (address to, uint256 tokensAmount);\n\n    event StageSubmittedAndEtherPassedToTheTeam(uint256 stage, uint256 when, uint256 weiAmount);\n    event etherWithdrawFromTheContract(address tokenHolder, uint256 numberOfTokensSoldBack, uint256 weiValue);\n    event Burned(address indexed from, uint256 amount);\n\n    // ERC20 interface implementation\n\n    function totalSupply() public constant returns (uint256) {\n        return initialSupply;\n    }\n\n    function balanceOf(address tokenHolder) public view returns (uint256 balance) {\n        return tokenBalances[tokenHolder];\n    }\n\n    function allowance(address owner, address spender) public constant returns (uint256) {\n        return allowed[owner][spender];\n    }\n\n    function transfer(address to, uint256 value) public returns (bool success) {\n        if (tokenBalances[msg.sender] >= value && value > 0) {\n            if (to == address(this)) {\n                if (!isICOfinalized) {\n                    returnAllAvailableFunds();\n                    return true;\n                }\n                else {\n                    passTokensToTheDividendsPool(value);\n                    return true;\n                }\n            }\n            else {\n                return transferTokensAndEtherValue(msg.sender, to, value, getHoldersAverageTokenPrice(msg.sender).mul(value) , getUsersPreSalePercentage(msg.sender));\n            }\n        } else return false;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n        if (tokenBalances[from]>=value && allowed[from][to] >= value && value > 0) {\n            if (transferTokensAndEtherValue(from, to, value, getHoldersAverageTokenPrice(from).mul(value), getUsersPreSalePercentage(from))){\n                allowed[from][to] = allowed[from][to].sub(value);\n                if (from == address(this) && poolBalanceOf(to) >= value) {\n                    if (withdrawDividends(to)) {\n                        poolBalances[currentDividendsRound][to] = poolBalances[currentDividendsRound][to].sub(value);\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n        return false;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool success) {\n        if ((value != 0) && (tokenBalances[msg.sender] >= value)){\n            allowed[msg.sender][spender] = value;\n            emit Approval (msg.sender, spender, value);\n            return true;\n        } else{\n            return false;\n        }\n    }\n\n    // Constructor, fallback, return funds\n\n    constructor () public {\n        HyipProfitTokenTeamAddress = msg.sender;\n        currentDividendsRound = 0;\n        tokenBalances[address(this)] = initialSupply;\n        teamAddresses[0] = HyipProfitTokenTeamAddress;\n        teamAddresses[1] = 0xcC6bCF304d0Ada4Bc7B00Aa1c2c463FBEc263B7e;\n        teamAddresses[2] = 0x1F16BE21574FA46846fCfeae5ef587c29200f93e;\n        teamAddresses[3] = 0x93A10f35Bc5439E419fdDcE04Ea44779B0E1017C;\n        teamAddresses[4] = 0x71bAfdD5bd44D3e1038fE4c0Bc486fb4BB67b806;\n    }\n\n    function () public payable {\n        if (!isICOfinalized) {\n            uint256 currentPrice = getCurrentSellPrice();\n            uint256 valueInWei = 0;\n            uint256 tokensToPass = 0;\n            uint256 preSalePercent = 0;\n\n            require (msg.value >= currentPrice);\n\n            tokensToPass = msg.value.div(currentPrice);\n\n            require (tokenBalances[address(this)]>= tokensToPass);\n\n            valueInWei = tokensToPass.mul(currentPrice);\n            soldTokens = soldTokens.add(tokensToPass);\n\n            if (currentStage == 0) {\n                preSaleWeiBalances [address(this)] = preSaleWeiBalances [address(this)].add(valueInWei);\n                preSalePercent = 100;\n                preSaleFund = preSaleFund.add(msg.value);\n            }\n            else {\n                weiBalances[address(this)] = weiBalances[address(this)].add(valueInWei);\n                preSalePercent = 0;\n                IcoFund = IcoFund.add(msg.value);\n            }\n\n            transferTokensAndEtherValue(address(this), msg.sender, tokensToPass, valueInWei, preSalePercent);\n        }\n        else {\n            require (msg.value >= 10**18);\n            topUpDividends();\n        }\n    }\n\n    function returnAllAvailableFunds() public {\n        require (tokenBalances[msg.sender]>0); //you need to be a tokenHolder\n        require (!isICOfinalized); //you can not return tokens after project is completed\n\n        uint256 preSaleWei = getPreSaleWeiToReturn(msg.sender);\n        uint256 IcoWei = getIcoWeiToReturn(msg.sender);\n        uint256 weiToReturn = preSaleWei.add(IcoWei);\n\n        uint256 amountOfTokensToReturn = tokenBalances[msg.sender];\n\n        require (amountOfTokensToReturn>0);\n\n        uint256 preSalePercentage = getUsersPreSalePercentage(msg.sender);\n\n        transferTokensAndEtherValue(msg.sender, address(this), amountOfTokensToReturn, weiToReturn, preSalePercentage);\n        emit etherWithdrawFromTheContract(msg.sender, amountOfTokensToReturn, IcoWei.add(preSaleWei));\n        preSaleWeiBalances[address(this)] = preSaleWeiBalances[address(this)].sub(preSaleWei);\n        weiBalances[address(this)] = weiBalances[address(this)].sub(IcoWei);\n        soldTokens = soldTokens.sub(amountOfTokensToReturn);\n        msg.sender.transfer(weiToReturn);\n\n        preSaleFund = preSaleFund.sub(preSaleWei);\n        IcoFund = IcoFund.sub(IcoWei);\n    }\n\n    function passTokensToTheDividendsPool(uint256 amount) internal {\n        if (tokenBalances[msg.sender] >= amount) {\n            tokenBalances[address(this)] = tokenBalances[address(this)].add(amount);\n            tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(amount);\n            emit Transfer(msg.sender, address(this), amount);\n\n            allowed[address(this)][msg.sender] = allowed[address(this)][msg.sender].add(amount);\n            emit Approval (address(this), msg.sender, amount);\n\n            if (poolBalanceOf(msg.sender) == 0) lastWithdrawal[msg.sender] = currentDividendsRound;\n            poolBalances[currentDividendsRound][msg.sender] = poolBalances[currentDividendsRound][msg.sender].add(amount);\n            emit tokensReceived(msg.sender, amount);\n        }\n    }\n\n    function topUpDividends() public payable {\n        require (msg.value >= 10**18);\n        uint256 dividends = msg.value;\n        uint256 tokensInPool = balanceOf(address(this));\n        dividendsPerTokenPerRound[currentDividendsRound] = dividends.div(tokensInPool);\n        emit dividendsReceived (currentDividendsRound, dividends, dividendsPerTokenPerRound[currentDividendsRound]);\n        currentDividendsRound = currentDividendsRound.add(1);\n    }\n\n    function withdrawDividends(address holder) public returns (bool success) {\n        require (poolBalanceOf(holder) > 0);\n        uint256 totalDividendsForHolder = dividendsOf(holder);\n        if (totalDividendsForHolder == 0) return true;\n        uint256 holdersTotalTokensInPool = 0;\n\n        for (uint256 i = lastWithdrawal[holder]; i < currentDividendsRound; i = i.add(1)) {\n            holdersTotalTokensInPool = holdersTotalTokensInPool.add(poolBalances[i][holder]);\n            poolBalances[i][holder] = 0;\n        }\n\n        holder.transfer(totalDividendsForHolder);\n        emit dividendsWithdraw (holder, totalDividendsForHolder);\n        poolBalances[currentDividendsRound][holder] = holdersTotalTokensInPool;\n        lastWithdrawal[holder] = currentDividendsRound;\n        return true;\n    } //AnyBody can call\n\n    // View functions\n\n    function dividendsOf(address holder) public view returns (uint256 dividendsAmount) {\n        uint256 dividends = 0;\n        for (uint256 i = lastWithdrawal[holder]; i < currentDividendsRound; i = i.add(1)) {\n            for(uint256 j = lastWithdrawal[holder]; j <= i; j = j.add(1)) {\n                if (poolBalances[j][holder]>0 && dividendsPerTokenPerRound[i] > 0)\n                dividends = dividends.add(poolBalances[j][holder].mul(dividendsPerTokenPerRound[i]));\n            }\n        }\n        return dividends;\n    }\n\n    function icoFinalized() public view returns (bool) {\n        return isICOfinalized;\n    }\n\n    function poolBalanceOf(address holder) public view returns (uint256 balance){\n        uint256 holdersTotalTokensInThePool = 0;\n        for (uint256 i = lastWithdrawal[msg.sender]; i <= currentDividendsRound; i = i.add(1)) {\n            holdersTotalTokensInThePool = holdersTotalTokensInThePool.add(poolBalances[i][holder]);\n        }\n        return holdersTotalTokensInThePool;\n    }\n\n    function getWeiBalance(address a) public view returns (uint256 weiBalance) {\n        return weiBalances[a];\n    }\n\n    function getUsersPreSalePercentage(address a) public view returns (uint256 preSaleTokensPercent) {\n        if (!isICOfinalized && (preSaleWeiBalances[a].add(weiBalances[a]) > 0)) {\n            uint256 result = (preSaleWeiBalances[a].mul(100)).div((preSaleWeiBalances[a].add(weiBalances[a])));\n            require (result<=100);\n            return result;\n        }\n        return 0;\n    }\n\n    function getTotalWeiAvailableToReturn(address a) public view returns (uint256 amount) {\n        return getPreSaleWeiToReturn(a).add(getIcoWeiToReturn(a));\n    }\n\n    function getPreSaleWeiToReturn (address holder) public view returns (uint256 amount) {\n        if (currentStage == 0) return preSaleWeiBalances[holder];\n        if (currentStage == 1) return preSaleWeiBalances[holder].mul(7).div(10);\n        if (currentStage == 2) return preSaleWeiBalances[holder].mul(4).div(10);\n        return 0;\n    }\n\n    function getIcoWeiToReturn (address holder) public view returns (uint256 amount) {\n        if (currentStage <= 3) return weiBalances[holder];\n        if (currentStage == 4) return weiBalances[holder].mul(7).div(10);\n        if (currentStage == 5) return weiBalances[holder].mul(4).div(10);\n        return 0;\n    }\n\n    function getHoldersAverageTokenPrice(address holder) public view returns (uint256 avPriceInWei) {\n        if (!isICOfinalized)\n            return (weiBalances[holder].add(preSaleWeiBalances[holder])).div(tokenBalances[holder]);\n        return 0;\n    }\n\n    function getCurrentSellPrice() public view returns (uint256 priceInWei) {\n        if (isICOfinalized) return 0;\n        if (currentStage == 0) return 10**6 * 8 ; //this is equal to 0.0008 ETH for 1 token\n        if (currentStage == 1) return 10**6 * 16;\n        if (currentStage == 2) return 10**6 * 24;\n        if (currentStage == 3) return 10**6 * 32;\n        return 0;\n    }\n\n    function getAvailableFundsForTheTeam() public view returns (uint256 amount) {\n        if (currentStage == 1) return preSaleFund.mul(3).div(10);\n        if (currentStage == 2) return (preSaleFund.sub(spentFunds)).div(2);\n        if (currentStage == 3) return preSaleFund.sub(spentFunds);\n\n        if (currentStage == 4) return IcoFund.mul(3).div(10);\n        if (currentStage == 5) return (IcoFund.sub(spentFunds)).div(2);\n        if (currentStage == 6) return address(this).balance;\n    }\n\n    function checkIfMissionCompleted() public view returns (bool success) {\n        if (currentStage == 0 && soldTokens >= preSaleSoftCap) return true;\n\n        if (currentStage == 1 && preSaleFund.mul(3).div(5) <= IcoFund) return true;\n        if (currentStage == 2 && preSaleFund.mul(6).div(5) <= IcoFund) return true;\n\n        if (currentStage>=3 &&\n        (utilityTokenAddress == 0x0 || tg.getBeneficiaryAddress() != address(this))) return false;\n\n        if (currentStage == 3 && preSaleFund.mul(2) <= IcoFund) return true;\n\n        if (currentStage == 4 && utilityTokenAddress.balance >= IcoFund.mul(3).div(5)) return true;\n        if (currentStage == 5 && utilityTokenAddress.balance >= IcoFund.mul(6).div(5)) return true;\n        if (currentStage == 6 && utilityTokenAddress.balance >= IcoFund.mul(2)) return true;\n\n        return false;\n    }\n\n    // Team functions\n\n    function setUtilityTokenAddressOnce(address a) public onlyTeam {\n        if (utilityTokenAddress == 0x0) {\n            utilityTokenAddress = a;\n            tg = tokenAddressGetter(a);\n        }\n    }\n\n    function finalizeICO() internal onlyTeam {\n        require(!isICOfinalized); // this function can be called only once\n        passTokensToTheTeam();\n        burnUndistributedTokens(); // undistributed tokens are destroyed\n        isICOfinalized = true;\n    }\n\n    function passTokensToTheTeam() internal returns (uint256 tokenAmount) { //This function passes tokens to the team without weiValue, so the team can not withdraw ether by returning tokens to the contract\n        uint256 tokensForEachMember = soldTokens.div(20); // 4% for each team member\n        uint256 tokensToPass = tokensForEachMember.mul(5);\n\n        for (uint256 i = 0; i< 5; i = i.add(1)) {\n            address teamMember = teamAddresses[i];\n            tokenBalances[teamMember] = tokenBalances[teamMember].add(tokensForEachMember);\n            emit Transfer(address(this), teamMember, tokensForEachMember);\n        }\n\n        soldTokens = soldTokens.add(tokensToPass);\n        return tokensToPass;\n    }\n\n    function submitNextStage() public onlyTeam returns (bool success) {\n        if (!checkIfMissionCompleted()) return false;\n        if (currentStage==3) spentFunds = 0;\n        if (currentStage == 6) finalizeICO();\n\n        currentStage = currentStage.add(1);\n        passEtherToTheTeam();\n\n        return true;\n    }\n\n    function passEtherToTheTeam() internal returns (bool success) {\n        uint256 weiAmount = getAvailableFundsForTheTeam();\n        HyipProfitTokenTeamAddress.transfer(weiAmount);\n        spentFunds = spentFunds.add(weiAmount);\n        emit StageSubmittedAndEtherPassedToTheTeam(currentStage, now, weiAmount);\n        return true;\n    }\n\n    function transferTokensAndEtherValue(address from, address to, uint256 value, uint256 weiValue, uint256 preSalePercent) internal returns (bool success){\n        if (tokenBalances[from] >= value) {\n            tokenBalances[to] = tokenBalances[to].add(value);\n            tokenBalances[from] = tokenBalances[from].sub(value);\n\n            if (!isICOfinalized) {\n                preSaleWeiBalances[from] = preSaleWeiBalances[from].sub(weiValue.mul(preSalePercent).div(100));\n                preSaleWeiBalances[to] = preSaleWeiBalances[to].add(weiValue.mul(preSalePercent).div(100));\n\n                require (preSalePercent<=100);\n\n                weiBalances[from] = weiBalances[from].sub(weiValue.mul(100 - preSalePercent).div(100));\n                weiBalances[to] = weiBalances[to].add(weiValue.mul(100 - preSalePercent).div(100));\n            }\n            emit Transfer(from, to, value);\n            return true;\n        }\n        return false;\n    }\n\n    function burnUndistributedTokens() internal {\n        uint256 toBurn = initialSupply.sub(soldTokens);\n        initialSupply = initialSupply.sub(toBurn);\n        tokenBalances[address(this)] = 0;\n        emit Burned(address(this), toBurn);\n    }\n}\n\ncontract tokenAddressGetter {\n    function getBeneficiaryAddress() public view returns (address);\n}",
  "bytecode": "608060405266019945ca262000600090815560018190556002819055600381905560048190556008556009805460a060020a60ff0219169055600b8054600160a060020a031916905534801561005457600080fd5b50600a8054600160a060020a0319908116331782556000600e81905580543082526005602090815260408320919091559254600d9093527f81955a0a11e65eac625c29e8882660bae4e165a75d72780094acae8ece9a29ee80548316600160a060020a0394909416939093179092557ffd54ff1ed53f34a900b24c5ba64f85761163b5d82d98a47b9bd80e45466993c58054821673cc6bcf304d0ada4bc7b00aa1c2c463fbec263b7e1790557f10a81eed9d63d16face5e76357905348e6253d3394086026bb2bf2145d7cc24980548216731f16be21574fa46846fcfeae5ef587c29200f93e1790557f26b4a10d0f0b04925c23bd4480ee147c916e5e87a7d68206a533dad160ac81e2805482167393a10f35bc5439e419fddce04ea44779b0e1017c17905560049091527fafafe8948a4ed9d478b1e9a5780b119b5edd00ea7d07bc35bef7c814824eb94b80549091167371bafdd5bd44d3e1038fe4c0bc486fb4bb67b806179055611f7f806101cc6000396000f3006080604052600436106101aa5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461031a57806301e04e4e1461034d57806306fdde031461036e578063095ea7b3146103f85780631142d47f1461043057806318160ddd1461044557806323b872dd1461045a578063313ce5671461048457806348650338146104af5780634bb13055146104d05780634f2b0e41146104e75780635bf5d54c146104fc5780635ed9ebfc146105115780636fa98cf81461052657806370a082311461052e578063860814cc1461054f578063877fa800146105705780638913299a1461059157806395d89b41146105c25780639961364d146105d7578063a106320a146105f8578063a9059cbb1461060d578063ad6d2f3a14610631578063af0ac4b714610652578063c1f16bdc14610667578063d26ee06114610688578063d5775f5c1461069d578063dd5e403c146106b2578063dd62ed3e146106c7578063e47ea649146106ee578063e70c327614610703578063ecebbbb014610718578063fd074e8e14610739578063fde98feb1461074e575b600080600080600960149054906101000a900460ff1615156102f7576101ce61076f565b935060009250829150819050348411156101e757600080fd5b6101f7348563ffffffff6107e716565b3060009081526005602052604090205490925082111561021657600080fd5b610226828563ffffffff6107fe16565b60045490935061023c908363ffffffff61082916565b60045560085415156102975730600090815260066020526040902054610268908463ffffffff61082916565b306000908152600660205260409020555060015460649061028f903463ffffffff61082916565b6001556102e4565b306000908152600760205260409020546102b7908463ffffffff61082916565b306000908152600760205260408120919091556003549091506102e0903463ffffffff61082916565b6003555b6102f13033848685610838565b50610314565b670de0b6b3a764000034101561030c57600080fd5b610314610ab8565b50505050005b34801561032657600080fd5b5061033b600160a060020a0360043516610b6a565b60408051918252519081900360200190f35b34801561035957600080fd5b5061033b600160a060020a0360043516610c83565b34801561037a57600080fd5b50610383610cf4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103bd5781810151838201526020016103a5565b50505050905090810190601f1680156103ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040457600080fd5b5061041c600160a060020a0360043516602435610d2b565b604080519115158252519081900360200190f35b34801561043c57600080fd5b5061033b610dc0565b34801561045157600080fd5b5061033b610dc6565b34801561046657600080fd5b5061041c600160a060020a0360043581169060243516604435610dcc565b34801561049057600080fd5b50610499610f5e565b6040805160ff9092168252519081900360200190f35b3480156104bb57600080fd5b5061041c600160a060020a0360043516610f63565b3480156104dc57600080fd5b506104e56110eb565b005b3480156104f357600080fd5b5061033b6112b2565b34801561050857600080fd5b5061033b6112b8565b34801561051d57600080fd5b5061033b6112be565b6104e5610ab8565b34801561053a57600080fd5b5061033b600160a060020a03600435166112c4565b34801561055b57600080fd5b5061033b600160a060020a03600435166112e3565b34801561057c57600080fd5b5061033b600160a060020a03600435166113bd565b34801561059d57600080fd5b506105a66113e0565b60408051600160a060020a039092168252519081900360200190f35b3480156105ce57600080fd5b506103836113ef565b3480156105e357600080fd5b5061033b600160a060020a0360043516611426565b34801561060457600080fd5b5061041c6114d9565b34801561061957600080fd5b5061041c600160a060020a03600435166024356114e9565b34801561063d57600080fd5b506104e5600160a060020a036004351661156d565b34801561065e57600080fd5b5061041c6115ce565b34801561067357600080fd5b5061033b600160a060020a0360043516611645565b34801561069457600080fd5b5061033b611660565b3480156106a957600080fd5b5061033b61076f565b3480156106be57600080fd5b5061033b611735565b3480156106d357600080fd5b5061033b600160a060020a036004358116906024351661173b565b3480156106fa57600080fd5b5061041c611766565b34801561070f57600080fd5b506105a6611776565b34801561072457600080fd5b5061033b600160a060020a0360043516611785565b34801561074557600080fd5b5061041c61182b565b34801561075a57600080fd5b5061033b600160a060020a0360043516611a8a565b60095460009060a060020a900460ff161561078c575060006107e4565b600854151561079f5750627a12006107e4565b600854600114156107b4575062f424006107e4565b600854600214156107ca575063016e36006107e4565b600854600314156107e057506301e848006107e4565b5060005b90565b60008082848115156107f557fe5b04949350505050565b600082820283158061081a575082848281151561081757fe5b04145b151561082257fe5b9392505050565b60008282018381101561082257fe5b600160a060020a0385166000908152600560205260408120548411610aab57600160a060020a038516600090815260056020526040902054610880908563ffffffff61082916565b600160a060020a0380871660009081526005602052604080822093909355908816815220546108b5908563ffffffff611ae116565b600160a060020a03871660009081526005602052604090205560095460a060020a900460ff161515610a585761092a61090560646108f9868663ffffffff6107fe16565b9063ffffffff6107e716565b600160a060020a0388166000908152600660205260409020549063ffffffff611ae116565b600160a060020a03871660009081526006602052604090205561098061095b60646108f9868663ffffffff6107fe16565b600160a060020a0387166000908152600660205260409020549063ffffffff61082916565b600160a060020a03861660009081526006602052604090205560648211156109a757600080fd5b6109e66109c160646108f98686830363ffffffff6107fe16565b600160a060020a0388166000908152600760205260409020549063ffffffff611ae116565b600160a060020a038716600090815260076020526040902055610a3e610a1960646108f98686830363ffffffff6107fe16565b600160a060020a0387166000908152600760205260409020549063ffffffff61082916565b600160a060020a0386166000908152600760205260409020555b84600160a060020a031686600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3506001610aaf565b5060005b95945050505050565b600080670de0b6b3a7640000341015610ad057600080fd5b349150610adc306112c4565b9050610aee828263ffffffff6107e716565b600e80546000908152600f60209081526040808320949094559154808252908390205483519182529181018590528083019190915290517f1f33ef61459517b1dbb05f513fb31203f5f6d584f45bd1764ba99efae7a3b8859181900360600190a1600e54610b6390600163ffffffff61082916565b600e555050565b600160a060020a0381166000908152601160205260408120548190815b600e54821015610c775750600160a060020a0384166000908152601160205260409020545b818111610c5f576000818152601060209081526040808320600160a060020a0389168452909152812054118015610bef57506000828152600f6020526040812054115b15610c47576000828152600f602090815260408083205484845260108352818420600160a060020a038a16855290925290912054610c4491610c37919063ffffffff6107fe16565b849063ffffffff61082916565b92505b610c5881600163ffffffff61082916565b9050610bac565b610c7082600163ffffffff61082916565b9150610b87565b8293505b505050919050565b3360009081526011602052604081205481905b600e548111610ced576000818152601060209081526040808320600160a060020a0388168452909152902054610cd390839063ffffffff61082916565b9150610ce681600163ffffffff61082916565b9050610c96565b5092915050565b60408051808201909152600b81527f485949502050726f666974000000000000000000000000000000000000000000602082015281565b60008115801590610d4b5750336000908152600560205260409020548211155b15610db657336000818152600c60209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a3506001610dba565b5060005b92915050565b60025481565b60005490565b600160a060020a0383166000908152600560205260408120548211801590610e195750600160a060020a038085166000908152600c60209081526040808320938716835292905220548211155b8015610e255750600082115b15610f5457610e57848484610e4986610e3d8a611a8a565b9063ffffffff6107fe16565b610e52896112e3565b610838565b15610f4c57600160a060020a038085166000908152600c6020908152604080832093871683529290522054610e92908363ffffffff611ae116565b600160a060020a038086166000818152600c602090815260408083209489168352939052919091209190915530148015610ed4575081610ed184610c83565b10155b15610f4457610ee283610f63565b15610f4457600e546000908152601060209081526040808320600160a060020a0387168452909152902054610f1d908363ffffffff611ae116565b600e546000908152601060209081526040808320600160a060020a03881684529091529020555b506001610822565b506000610822565b5060009392505050565b600881565b6000806000806000610f7486610c83565b11610f7e57600080fd5b610f8785610b6a565b9250821515610f995760019350610c7b565b5050600160a060020a0383166000908152601160205260408120545b600e54811015611030576000818152601060209081526040808320600160a060020a0389168452909152902054610ff390839063ffffffff61082916565b6000828152601060209081526040808320600160a060020a038a168452909152812055915061102981600163ffffffff61082916565b9050610fb5565b604051600160a060020a0386169084156108fc029085906000818181858888f19350505050158015611066573d6000803e3d6000fd5b5060408051600160a060020a03871681526020810185905281517fed56d273cf606fae7078e01101b204854516d062da034896a13f5a982747b3b2929181900390910190a1600e80546000908152601060209081526040808320600160a060020a038a1684528252808320869055925460119091529190205560019350505050919050565b336000908152600560205260408120548190819081908190811061110e57600080fd5b60095460a060020a900460ff161561112557600080fd5b61112e33611426565b945061113933611785565b935061114b858563ffffffff61082916565b33600090815260056020526040812054919450909250821161116c57600080fd5b611175336112e3565b90506111843330848685610838565b507f6d058c227de9b43d939f3e791a3b651d0ee4530624b51cd8ca7226250bbe865933836111b8878963ffffffff61082916565b60408051600160a060020a039094168452602084019290925282820152519081900360600190a1306000908152600660205260409020546111ff908663ffffffff611ae116565b3060009081526006602090815260408083209390935560079052205461122b908563ffffffff611ae116565b3060009081526007602052604090205560045461124e908363ffffffff611ae116565b600455604051339084156108fc029085906000818181858888f1935050505015801561127e573d6000803e3d6000fd5b50600154611292908663ffffffff611ae116565b6001556003546112a8908563ffffffff611ae116565b6003555050505050565b60015481565b60085481565b60045481565b600160a060020a0381166000908152600560205260409020545b919050565b600954600090819060a060020a900460ff161580156113325750600160a060020a03831660009081526007602090815260408083205460069092528220546113309163ffffffff61082916565b115b156113b257600160a060020a03831660009081526007602090815260408083205460069092529091205461139a91611370919063ffffffff61082916565b600160a060020a0385166000908152600660205260409020546108f990606463ffffffff6107fe16565b905060648111156113aa57600080fd5b8091506113b7565b600091505b50919050565b6000610dba6113cb83611785565b6113d484611426565b9063ffffffff61082916565b600b54600160a060020a031681565b60408051808201909152600481527f4859495000000000000000000000000000000000000000000000000000000000602082015281565b6000600854600014156114525750600160a060020a0381166000908152600660205260409020546112de565b6008546001141561149557600160a060020a03821660009081526006602052604090205461148e90600a906108f990600763ffffffff6107fe16565b90506112de565b600854600214156114d157600160a060020a03821660009081526006602052604090205461148e90600a906108f990600463ffffffff6107fe16565b506000919050565b60095460a060020a900460ff1690565b3360009081526005602052604081205482118015906115085750600082115b15610db657600160a060020a03831630141561154a5760095460a060020a900460ff161515611541576115396110eb565b506001610dba565b61153982611af3565b61156633848461155d86610e3d33611a8a565b610e52336112e3565b9050610dba565b600a54600160a060020a03163314156115cb57600b54600160a060020a031615156115cb57600b8054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1991821681179092556009805490911690911790555b50565b600a54600090600160a060020a03163314156107e4576115ec61182b565b15156115fa575060006107e4565b6008546003141561160b5760006002555b6008546006141561161e5761161e611cc7565b60085461163290600163ffffffff61082916565b60085561163d611d29565b506001905090565b600160a060020a031660009081526007602052604090205490565b60006008546001141561168f57611688600a6108f960036001546107fe90919063ffffffff16565b90506107e4565b600854600214156116b65761168860026108f9600254600154611ae190919063ffffffff16565b600854600314156116d6576002546001546116889163ffffffff611ae116565b600854600414156116fb57611688600a6108f9600380546107fe90919063ffffffff16565b600854600514156117225761168860026108f9600254600354611ae190919063ffffffff16565b600854600614156107e4575030316107e4565b60035481565b600160a060020a039182166000908152600c6020908152604080832093909416825291909152205490565b60095460a060020a900460ff1681565b600a54600160a060020a031681565b600060036008541115156117b25750600160a060020a0381166000908152600760205260409020546112de565b600854600414156117ef57600160a060020a03821660009081526007602081905260409091205461148e91600a916108f99163ffffffff6107fe16565b600854600514156114d157600160a060020a03821660009081526007602052604090205461148e90600a906108f990600463ffffffff6107fe16565b600060085460001480156118475750651c6bf526340060045410155b15611854575060016107e4565b6008546001148015611882575060035461187f60056108f960036001546107fe90919063ffffffff16565b11155b1561188f575060016107e4565b60085460021480156118bd57506003546118ba60056108f960066001546107fe90919063ffffffff16565b11155b156118ca575060016107e4565b6003600854101580156119825750600b54600160a060020a031615806119825750600954604080517fd1eff89500000000000000000000000000000000000000000000000000000000815290513092600160a060020a03169163d1eff8959160048083019260209291908290030181600087803b15801561194a57600080fd5b505af115801561195e573d6000803e3d6000fd5b505050506040513d602081101561197457600080fd5b5051600160a060020a031614155b1561198f575060006107e4565b60085460031480156119b657506003546001546119b390600263ffffffff6107fe16565b11155b156119c3575060016107e4565b60085460041480156119fa57506119ea60056108f9600380546107fe90919063ffffffff16565b600b54600160a060020a03163110155b15611a07575060016107e4565b6008546005148015611a3f5750611a2f60056108f960066003546107fe90919063ffffffff16565b600b54600160a060020a03163110155b15611a4c575060016107e4565b6008546006148015611a7d5750600354611a6d90600263ffffffff6107fe16565b600b54600160a060020a03163110155b156107e0575060016107e4565b60095460009060a060020a900460ff1615156114d157600160a060020a0382166000908152600560209081526040808320546006835281842054600790935292205461148e92916108f9919063ffffffff61082916565b600082821115611aed57fe5b50900390565b3360009081526005602052604090205481116115cb5730600090815260056020526040902054611b29908263ffffffff61082916565b30600090815260056020526040808220929092553381522054611b52908263ffffffff611ae116565b33600081815260056020908152604091829020939093558051848152905130937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a3306000908152600c60209081526040808320338452909152902054611bc5908263ffffffff61082916565b306000818152600c602090815260408083203380855290835292819020949094558351858152935191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a3611c2333610c83565b1515611c3d57600e54336000908152601160205260409020555b600e546000908152601060209081526040808320338452909152902054611c6a908263ffffffff61082916565b600e5460009081526010602090815260408083203380855290835292819020939093558251918252810183905281517f24a756d1a2c8f2c24ad07b6b6c6a46090bce16d2523224ca3aae963753b3622c929181900390910190a150565b600a54600160a060020a0316331415611d275760095460a060020a900460ff1615611cf157600080fd5b611cf9611dcf565b50611d02611ed4565b6009805474ff0000000000000000000000000000000000000000191660a060020a1790555b565b600080611d34611660565b600a54604051919250600160a060020a03169082156108fc029083906000818181858888f19350505050158015611d6f573d6000803e3d6000fd5b50600254611d83908263ffffffff61082916565b60025560085460408051918252426020830152818101839052517fa752eb94d212775e397b28d9b33c2d7b4feba1c85b0bd2a3ff966a09d5d108ad9181900360600190a1600191505090565b6000806000806000611ded60146004546107e790919063ffffffff16565b9350611e0084600563ffffffff6107fe16565b9250600091505b6005821015611eb557506000818152600d6020908152604080832054600160a060020a0316808452600590925290912054611e48908563ffffffff61082916565b600160a060020a0382166000818152600560209081526040918290209390935580518781529051919230927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3611eae82600163ffffffff61082916565b9150611e07565b600454611ec8908463ffffffff61082916565b60045550909392505050565b6000611eed600454600054611ae190919063ffffffff16565b600054909150611f03908263ffffffff611ae116565b600090815530808252600560209081526040808420939093558251848152925191927f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7929081900390910190a2505600a165627a7a72305820f590d34655472276ea83b666d84bb9da4fc331bfcd649e87ff115e34d5b1441f0029"
}