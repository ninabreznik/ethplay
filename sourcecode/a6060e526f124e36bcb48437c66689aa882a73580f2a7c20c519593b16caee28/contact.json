{
  "address": "0xe2514ce8e58fde9db44d3d3a1efc989d32b03ee9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VestingTokenSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-29\n*/\n\npragma solidity 0.4.24;\n \n/**\n * Copyright 2018, The Flowchain Foundation Limited\n *\n * The FlowchainCoin (FLC) Token Sale Contract\n * \n *  - Private Sale A\n *  - Monthly Vest\n */\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ninterface Token {\n    /// @dev Mint an amount of tokens and transfer to the backer\n    /// @param to The address of the backer who will receive the tokens\n    /// @param amount The amount of rewarded tokens\n    /// @return The result of token transfer\n    function mintToken(address to, uint amount) external returns (bool success);  \n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);    \n}\n\ncontract MintableSale {\n    // @notice Create a new mintable sale\n    /// @param vestingAddress The vesting app    \n    /// @param rate The exchange rate\n    /// @param fundingGoalInEthers The funding goal in ethers\n    /// @param durationInMinutes The duration of the sale in minutes\n    /// @return \n    function createMintableSale(address vestingAddress, uint256 rate, uint256 fundingGoalInEthers, uint durationInMinutes) public returns (bool success);\n}\n\ncontract VestingTokenSale is MintableSale {\n    using SafeMath for uint256;\n    uint256 public fundingGoal;\n    uint256 public tokensPerEther;\n    uint public deadline;\n    address public multiSigWallet;\n    uint256 public amountRaised;\n    Token public tokenReward;\n    mapping(address => uint256) public balanceOf;\n    bool fundingGoalReached = false;\n    bool crowdsaleClosed = false;\n    address public creator;\n    address public addressOfTokenUsedAsReward;\n    bool public isFunding = false;\n\n    /* accredited investors */\n    mapping (address => uint256) public accredited;\n\n    event FundTransfer(address backer, uint amount);\n\n    address public addressOfVestingApp;\n    uint256 constant public   VESTING_DURATION    =  31536000; // 1 Year in second\n    uint256 constant public   CLIFF_DURATION      =   2592000; // 1 months (30 days) in second\n\n    /* Constrctor function */\n    function VestingTokenSale(\n        address _addressOfTokenUsedAsReward\n    ) payable {\n        creator = msg.sender;\n        multiSigWallet = 0x9581973c54fce63d0f5c4c706020028af20ff723;\n\n        // Token Contract\n        addressOfTokenUsedAsReward = _addressOfTokenUsedAsReward;\n        tokenReward = Token(addressOfTokenUsedAsReward);\n\n        // Setup accredited investors\n        setupAccreditedAddress(0xec7210E3db72651Ca21DA35309A20561a6F374dd, 1000);\n    }\n\n    // @dev Start a new mintable sale.\n    // @param vestingAddress The vesting app\n    // @param rate The exchange rate in ether, for example 1 ETH = 6400 FLC\n    // @param fundingGoalInEthers\n    // @param durationInMinutes\n    function createMintableSale(address vestingAddrss, uint256 rate, uint256 fundingGoalInEthers, uint durationInMinutes) public returns (bool success) {\n        require(msg.sender == creator);\n        require(isFunding == false);\n        require(rate <= 6400 && rate >= 1);                   // rate must be between 1 and 6400\n        require(fundingGoalInEthers >= 1);        \n        require(durationInMinutes >= 60 minutes);\n\n        addressOfVestingApp = vestingAddrss;\n\n        deadline = now + durationInMinutes * 1 minutes;\n        fundingGoal = amountRaised + fundingGoalInEthers * 1 ether;\n        tokensPerEther = rate;\n        isFunding = true;\n        return true;    \n    }\n\n    modifier afterDeadline() { if (now > deadline) _; }\n    modifier beforeDeadline() { if (now <= deadline) _; }\n\n    /// @param _accredited The address of the accredited investor\n    /// @param _amountInEthers The amount of remaining ethers allowed to invested\n    /// @return Amount of remaining tokens allowed to spent\n    function setupAccreditedAddress(address _accredited, uint _amountInEthers) public returns (bool success) {\n        require(msg.sender == creator);    \n        accredited[_accredited] = _amountInEthers * 1 ether;\n        return true;\n    }\n\n    /// @dev This function returns the amount of remaining ethers allowed to invested\n    /// @return The amount\n    function getAmountAccredited(address _accredited) view returns (uint256) {\n        uint256 amount = accredited[_accredited];\n        return amount;\n    }\n\n    function closeSale() beforeDeadline {\n        require(msg.sender == creator);    \n        isFunding = false;\n    }\n\n    // change creator address\n    function changeCreator(address _creator) external {\n        require(msg.sender == creator);\n        creator = _creator;\n    }\n\n    /// @dev This function returns the current exchange rate during the sale\n    /// @return The address of token creator\n    function getRate() beforeDeadline view returns (uint) {\n        return tokensPerEther;\n    }\n\n    /// @dev This function returns the amount raised in wei\n    /// @return The address of token creator\n    function getAmountRaised() view returns (uint) {\n        return amountRaised;\n    }\n\n    function () payable {\n        // check if we can offer the private sale\n        require(isFunding == true && amountRaised < fundingGoal);\n\n        // the minimum deposit is 1 ETH\n        uint256 amount = msg.value;        \n        require(amount >= 1 ether);\n\n        require(accredited[msg.sender] - amount >= 0); \n\n        multiSigWallet.transfer(amount);      \n        balanceOf[msg.sender] += amount;\n        accredited[msg.sender] -= amount;\n        amountRaised += amount;\n        FundTransfer(msg.sender, amount);\n\n        // total releasable tokens\n        uint256 value = amount.mul(tokensPerEther);\n\n        // Mint tokens and keep it in the contract\n        tokenReward.mintToken(addressOfVestingApp, value);\n    }   \n}",
  "bytecode": "608060408190526007805461ffff191690556008805460a060020a60ff02191690556020806109a08339810160405251600780546201000033026201000060b060020a031990911617905560038054600160a060020a0319908116739581973c54fce63d0f5c4c706020028af20ff7231790915560088054600160a060020a0380851691841691909117918290556005805490931691161790556100c273ec7210e3db72651ca21da35309a20561a6f374dd6103e86401000000006100c9810204565b5050610117565b600754600090620100009004600160a060020a031633146100e957600080fd5b50600160a060020a0382166000908152600960205260409020670de0b6b3a764000082029055600192915050565b61087a806101266000396000f30060806040526004361061011c5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146102de57806313b531531461030f57806329dcb0cf146103385780634b8feb4f1461035f5780634cfc4d3014610374578063679aefce146103895780636d1af0181461039e5780636e66f6e9146103b357806370a08231146103c857806374580e2f146103e95780637a3a0e841461040c5780637b06bc7c146104215780637b3e5e7b1461044257806388adbf8f146104575780639a4d19f81461046c578063b3daa6521461048d578063b507a425146104a2578063da7bfa5b146104cc578063ee55efee146104e1578063f2eea5c1146104f6578063f856d6051461051a575b600080600860149054906101000a900460ff161515600115151480156101455750600054600454105b151561015057600080fd5b349150670de0b6b3a764000082101561016857600080fd5b33600090815260096020526040812054839003101561018657600080fd5b600354604051600160a060020a039091169083156108fc029084906000818181858888f193505050501580156101c0573d6000803e3d6000fd5b5033600081815260066020908152604080832080548701905560098252918290208054869003905560048054860190558151928352820184905280517f97c35397cb6acebd9df368c206404479fc4c80dd6034d1b28943aaf5826318709281900390910190a160015461023a90839063ffffffff61052f16565b600554600a54604080517f79c65068000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519394509116916379c65068916044808201926020929091908290030181600087803b1580156102ae57600080fd5b505af11580156102c2573d6000803e3d6000fd5b505050506040513d60208110156102d857600080fd5b50505050005b3480156102ea57600080fd5b506102f3610568565b60408051600160a060020a039092168252519081900360200190f35b34801561031b57600080fd5b5061032461057d565b604080519115158252519081900360200190f35b34801561034457600080fd5b5061034d61059e565b60408051918252519081900360200190f35b34801561036b57600080fd5b506102f36105a4565b34801561038057600080fd5b5061034d6105b3565b34801561039557600080fd5b5061034d6105bb565b3480156103aa57600080fd5b5061034d6105cf565b3480156103bf57600080fd5b506102f36105d5565b3480156103d457600080fd5b5061034d600160a060020a03600435166105e4565b3480156103f557600080fd5b5061040a600160a060020a03600435166105f6565b005b34801561041857600080fd5b5061034d61064a565b34801561042d57600080fd5b5061034d600160a060020a0360043516610650565b34801561044e57600080fd5b5061034d610662565b34801561046357600080fd5b506102f3610668565b34801561047857600080fd5b5061034d600160a060020a0360043516610677565b34801561049957600080fd5b5061034d610692565b3480156104ae57600080fd5b50610324600160a060020a0360043516602435604435606435610699565b3480156104d857600080fd5b506102f36107a4565b3480156104ed57600080fd5b5061040a6107b3565b34801561050257600080fd5b50610324600160a060020a03600435166024356107fa565b34801561052657600080fd5b5061034d610848565b6000808315156105425760009150610561565b5082820282848281151561055257fe5b041461055d57600080fd5b8091505b5092915050565b600754620100009004600160a060020a031681565b60085474010000000000000000000000000000000000000000900460ff1681565b60025481565b600354600160a060020a031681565b6301e1338081565b60025460009042116105cc57506001545b90565b60045490565b600554600160a060020a031681565b60066020526000908152604090205481565b600754620100009004600160a060020a0316331461061357600080fd5b60078054600160a060020a03909216620100000275ffffffffffffffffffffffffffffffffffffffff000019909216919091179055565b60005481565b60096020526000908152604090205481565b60045481565b600854600160a060020a031681565b600160a060020a031660009081526009602052604090205490565b62278d0081565b600754600090620100009004600160a060020a031633146106b957600080fd5b60085474010000000000000000000000000000000000000000900460ff16156106e157600080fd5b61190084111580156106f4575060018410155b15156106ff57600080fd5b600183101561070d57600080fd5b610e1082101561071c57600080fd5b50600a8054600160a060020a03861673ffffffffffffffffffffffffffffffffffffffff1990911617905542603c820201600255600454670de0b6b3a764000083020160005560018381556008805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055949350505050565b600a54600160a060020a031681565b60025442116107f857600754620100009004600160a060020a031633146107d957600080fd5b6008805474ff0000000000000000000000000000000000000000191690555b565b600754600090620100009004600160a060020a0316331461081a57600080fd5b50600160a060020a0382166000908152600960205260409020670de0b6b3a764000082029055600192915050565b600154815600a165627a7a72305820e39e6fcaf01a013ae0949264c52bba344199a728dd5220123356ac811d8140c000290000000000000000000000005b53f9755f82439cba66007ec7073c59e0da4a7d",
  "constructorArguments": "0000000000000000000000005b53f9755f82439cba66007ec7073c59e0da4a7d"
}