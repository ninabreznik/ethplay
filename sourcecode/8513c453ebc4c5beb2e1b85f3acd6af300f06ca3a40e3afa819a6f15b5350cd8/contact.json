{
  "address": "0x3c2c10e5ecd073d9ee238493d338ec6e3d7281c6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bithereum",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-13\n*/\n\npragma solidity ^0.4.15;\n\ncontract Bithereum {\n\n\t// Keeps track of addresses that have\n\t// provided the Bithereum address for which\n\t// they will be using for redemption\n\tmapping(address => uint256) addressBalances;\n\n\t// Keeps track of block number at the time\n\t// the sending user provided their Bithereum\n\t// address to the smart contract\n\tmapping(address => uint256) addressBlocks;\n\n\t// Event that gets triggered each time a user\n\t// sends a redemption transaction to this smart contract\n\tevent Redemption(address indexed from, uint256 blockNumber, uint256 ethBalance);\n\n\t// Retrieves block number at which\n\t// sender performed redemption\n\tfunction getRedemptionBlockNumber() returns (uint256) {\n\t\t return addressBlocks[msg.sender];\n\t}\n\n\t// Retrieves eth balance of sender\n\t// at the time of redemption\n\tfunction getRedemptionBalance() returns (uint256) {\n\t\t return addressBalances[msg.sender];\n\t}\n\n\n\t// Checks to see if sender is redemption ready\n\t// by verifying that we have a balance and block\n\t// for the sender\n\tfunction isRedemptionReady() returns (bool) {\n\t\t return addressBalances[msg.sender] > 0 && addressBlocks[msg.sender] > 0;\n\t}\n\n\t// Handles incoming transactions\n\tfunction () payable {\n\n\t\t\t// Store the sender's ETH balance\n\t\t\taddressBalances[msg.sender] = msg.sender.balance;\n\n\t\t\t// Store the current block for this sender\n\t\t\taddressBlocks[msg.sender] = block.number;\n\n\t\t\t// Emit redemption event\n\t\t\tRedemption(msg.sender, addressBlocks[msg.sender], addressBalances[msg.sender]);\n\t}\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"getRedemptionBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRedemptionBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isRedemptionReady\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethBalance\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b5b61021b8061001f6000396000f300606060405236156100545763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663143f68c981146100cc57806371bfa03f146100f15780639da19acc14610116575b5b73ffffffffffffffffffffffffffffffffffffffff3316600081815260208181526040808320843181556001835281842043908190559390925290547feebddeddf4ae1ee54a48517af27958e7666d69c7ba2e3e7c2b0ff87ef5f4491e92915191825260208201526040908101905180910390a25b005b34156100d757600080fd5b6100df61013d565b60405190815260200160405180910390f35b34156100fc57600080fd5b6100df610167565b60405190815260200160405180910390f35b341561012157600080fd5b610129610191565b604051901515815260200160405180910390f35b73ffffffffffffffffffffffffffffffffffffffff33166000908152602081905260409020545b90565b73ffffffffffffffffffffffffffffffffffffffff33166000908152600160205260409020545b90565b73ffffffffffffffffffffffffffffffffffffffff331660009081526020819052604081205481901180156101e9575073ffffffffffffffffffffffffffffffffffffffff3316600090815260016020526040812054115b90505b905600a165627a7a723058201f6493c7114bce04ce317d4aeeda2f680b30e00ac981e47e3becea6190207d7f0029"
}