{
  "address": "0x6cee948c9d593c58cba5dfa70482444899d1341c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SpectreSubscriberToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-27\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Math\n * @dev Assorted math operations\n */\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n /*\n * Contract that is working with ERC223 tokens\n * This is an implementation of ContractReceiver provided here:\n * https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/Receiver_Interface.sol\n */\n\n contract ContractReceiver {\n\n    function tokenFallback(address _from, uint _value, bytes _data);\n\n}\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount)\n        returns(bool);\n}\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n\n    address public controller;\n\n    function Controlled() { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) onlyController {\n        controller = _newController;\n    }\n}\n\n/// @title SpecToken - Crowdfunding code for the Spectre.ai Token Sale\n/// @author Parthasarathy Ramanujam\ncontract SpectreSubscriberToken is StandardToken, Pausable, TokenController {\n  using SafeMath for uint;\n\n  string public constant name = \"SPECTRE SUBSCRIBER TOKEN\";\n  string public constant symbol = \"SXS\";\n  uint256 public constant decimals = 18;\n\n  uint256 constant public TOKENS_AVAILABLE             = 240000000 * 10**decimals;\n  uint256 constant public BONUS_SLAB                   = 100000000 * 10**decimals;\n  uint256 constant public MIN_CAP                      = 5000000 * 10**decimals;\n  uint256 constant public MIN_FUND_AMOUNT              = 1 ether;\n  uint256 constant public TOKEN_PRICE                  = 0.0005 ether;\n  uint256 constant public WHITELIST_PERIOD             = 3 days;\n\n  address public specWallet;\n  address public specDWallet;\n  address public specUWallet;\n\n  bool public refundable = false;\n  bool public configured = false;\n  bool public tokenAddressesSet = false;\n  //presale start and end blocks\n  uint256 public presaleStart;\n  uint256 public presaleEnd;\n  //main sale start and end blocks\n  uint256 public saleStart;\n  uint256 public saleEnd;\n  //discount end block for main sale\n  uint256 public discountSaleEnd;\n\n  //whitelisting\n  mapping(address => uint256) public whitelist;\n  uint256 constant D160 = 0x0010000000000000000000000000000000000000000;\n\n  //bonus earned\n  mapping(address => uint256) public bonus;\n\n  event Refund(address indexed _to, uint256 _value);\n  event ContractFunded(address indexed _from, uint256 _value, uint256 _total);\n  event Refundable();\n  event WhiteListSet(address indexed _subscriber, uint256 _value);\n  event OwnerTransfer(address indexed _from, address indexed _to, uint256 _value);\n\n  modifier isRefundable() {\n    require(refundable);\n    _;\n  }\n\n  modifier isNotRefundable() {\n    require(!refundable);\n    _;\n  }\n\n  modifier isTransferable() {\n    require(tokenAddressesSet);\n    require(getNow() > saleEnd);\n    require(totalSupply >= MIN_CAP);\n    _;\n  }\n\n  modifier onlyWalletOrOwner() {\n    require(msg.sender == owner || msg.sender == specWallet);\n    _;\n  }\n\n  //@notice function to initilaize the token contract\n  //@notice _specWallet - The wallet that receives the proceeds from the token sale\n  //@notice _specDWallet - Wallet that would receive tokens chosen for dividend\n  //@notice _specUWallet - Wallet that would receive tokens chosen for utility\n  function SpectreSubscriberToken(address _specWallet) {\n    require(_specWallet != address(0));\n    specWallet = _specWallet;\n    pause();\n  }\n\n  //@notice Fallback function that accepts the ether and allocates tokens to\n  //the msg.sender corresponding to msg.value\n  function() payable whenNotPaused public {\n    require(msg.value >= MIN_FUND_AMOUNT);\n    if(getNow() >= presaleStart && getNow() <= presaleEnd) {\n      purchasePresale();\n    } else if (getNow() >= saleStart && getNow() <= saleEnd) {\n      purchase();\n    } else {\n      revert();\n    }\n  }\n\n  //@notice function to be used for presale purchase\n  function purchasePresale() internal {\n    //Only check whitelist for the first 3 days of presale\n    if (getNow() < (presaleStart + WHITELIST_PERIOD)) {\n      require(whitelist[msg.sender] > 0);\n      //Accept if the subsciber 95% to 120% of whitelisted amount\n      uint256 minAllowed = whitelist[msg.sender].mul(95).div(100);\n      uint256 maxAllowed = whitelist[msg.sender].mul(120).div(100);\n      require(msg.value >= minAllowed && msg.value <= maxAllowed);\n      //remove the address from whitelist\n      whitelist[msg.sender] = 0;\n    }\n\n    uint256 numTokens = msg.value.mul(10**decimals).div(TOKEN_PRICE);\n    uint256 bonusTokens = 0;\n\n    if(totalSupply < BONUS_SLAB) {\n      //Any portion of tokens less than BONUS_SLAB are eligable for 33% bonus, otherwise 22% bonus\n      uint256 remainingBonusSlabTokens = SafeMath.sub(BONUS_SLAB, totalSupply);\n      uint256 bonusSlabTokens = Math.min256(remainingBonusSlabTokens, numTokens);\n      uint256 nonBonusSlabTokens = SafeMath.sub(numTokens, bonusSlabTokens);\n      bonusTokens = bonusSlabTokens.mul(33).div(100);\n      bonusTokens = bonusTokens.add(nonBonusSlabTokens.mul(22).div(100));\n    } else {\n      //calculate 22% bonus for tokens purchased on presale\n      bonusTokens = numTokens.mul(22).div(100);\n    }\n    //\n    numTokens = numTokens.add(bonusTokens);\n    bonus[msg.sender] = bonus[msg.sender].add(bonusTokens);\n\n    //transfer money to Spectre MultisigWallet (could be msg.value)\n    specWallet.transfer(msg.value);\n\n    totalSupply = totalSupply.add(numTokens);\n    require(totalSupply <= TOKENS_AVAILABLE);\n\n    balances[msg.sender] = balances[msg.sender].add(numTokens);\n    //fire the event notifying the transfer of tokens\n    Transfer(0, msg.sender, numTokens);\n\n  }\n\n  //@notice function to be used for mainsale purchase\n  function purchase() internal {\n\n    uint256 numTokens = msg.value.mul(10**decimals).div(TOKEN_PRICE);\n    uint256 bonusTokens = 0;\n\n    if(getNow() <= discountSaleEnd) {\n      //calculate 11% bonus for tokens purchased on discount period\n      bonusTokens = numTokens.mul(11).div(100);\n    }\n\n    numTokens = numTokens.add(bonusTokens);\n    bonus[msg.sender] = bonus[msg.sender].add(bonusTokens);\n\n    //transfer money to Spectre MultisigWallet\n    specWallet.transfer(msg.value);\n\n    totalSupply = totalSupply.add(numTokens);\n\n    require(totalSupply <= TOKENS_AVAILABLE);\n    balances[msg.sender] = balances[msg.sender].add(numTokens);\n    //fire the event notifying the transfer of tokens\n    Transfer(0, msg.sender, numTokens);\n  }\n\n  //@notice Function reports the number of tokens available for sale\n  function numberOfTokensLeft() constant returns (uint256) {\n    return TOKENS_AVAILABLE.sub(totalSupply);\n  }\n\n  //Override unpause function to only allow once configured\n  function unpause() onlyOwner whenPaused public {\n    require(configured);\n    paused = false;\n    Unpause();\n  }\n\n  //@notice Function to configure contract addresses\n  //@param `_specUWallet` - address of Utility contract\n  //@param `_specDWallet` - address of Dividend contract\n  function setTokenAddresses(address _specUWallet, address _specDWallet) onlyOwner public {\n    require(!tokenAddressesSet);\n    require(_specDWallet != address(0));\n    require(_specUWallet != address(0));\n    require(isContract(_specDWallet));\n    require(isContract(_specUWallet));\n    specUWallet = _specUWallet;\n    specDWallet = _specDWallet;\n    tokenAddressesSet = true;\n    if (configured) {\n      unpause();\n    }\n  }\n\n  //@notice Function to configure contract parameters\n  //@param `_startPresaleBlock` - block from when presale begins.\n  //@param `_endPresaleBlock` - block from when presale ends.\n  //@param `_saleStart` - block from when main sale begins.\n  //@param `_saleEnd` - block from when main sale ends.\n  //@param `_discountEnd` - block from when the discounts would end.\n  //@notice Can be called only when funding is not active and only by the owner\n  function configure(uint256 _presaleStart, uint256 _presaleEnd, uint256 _saleStart, uint256 _saleEnd, uint256 _discountSaleEnd) onlyOwner public {\n    require(!configured);\n    require(_presaleStart > getNow());\n    require(_presaleEnd > _presaleStart);\n    require(_saleStart > _presaleEnd);\n    require(_saleEnd > _saleStart);\n    require(_discountSaleEnd > _saleStart && _discountSaleEnd <= _saleEnd);\n    presaleStart = _presaleStart;\n    presaleEnd = _presaleEnd;\n    saleStart = _saleStart;\n    saleEnd = _saleEnd;\n    discountSaleEnd = _discountSaleEnd;\n    configured = true;\n    if (tokenAddressesSet) {\n      unpause();\n    }\n  }\n\n  //@notice Function that can be called by purchasers to refund\n  //@notice Used only in case the ICO isn't successful.\n  function refund() isRefundable public {\n    require(balances[msg.sender] > 0);\n\n    uint256 tokenValue = balances[msg.sender].sub(bonus[msg.sender]);\n    balances[msg.sender] = 0;\n    tokenValue = tokenValue.mul(TOKEN_PRICE).div(10**decimals);\n\n    //transfer to the requesters wallet\n    msg.sender.transfer(tokenValue);\n    Refund(msg.sender, tokenValue);\n  }\n\n  function withdrawEther() public isNotRefundable onlyOwner {\n    //In case ether is sent, even though not refundable\n    msg.sender.transfer(this.balance);\n  }\n\n  //@notice Function used for funding in case of refund.\n  //@notice Can be called only by the Owner or Wallet\n  function fundContract() public payable onlyWalletOrOwner {\n    //does nothing just accepts and stores the ether\n    ContractFunded(msg.sender, msg.value, this.balance);\n  }\n\n  function setRefundable() onlyOwner {\n    require(this.balance > 0);\n    require(getNow() > saleEnd);\n    require(totalSupply < MIN_CAP);\n    Refundable();\n    refundable = true;\n  }\n\n  //@notice Standard function transfer similar to ERC20 transfer with no _data .\n  //@notice Added due to backwards compatibility reasons .\n  function transfer(address _to, uint256 _value) isTransferable returns (bool success) {\n    //standard function transfer similar to ERC20 transfer with no _data\n    //added due to backwards compatibility reasons\n    require(_to == specDWallet || _to == specUWallet);\n    require(isContract(_to));\n    bytes memory empty;\n    return transferToContract(msg.sender, _to, _value, empty);\n  }\n\n  //@notice assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n  function isContract(address _addr) private returns (bool is_contract) {\n    uint256 length;\n    assembly {\n      //retrieve the size of the code on target address, this needs assembly\n      length := extcodesize(_addr)\n    }\n    return (length>0);\n  }\n\n  //@notice function that is called when transaction target is a contract\n  function transferToContract(address _from, address _to, uint256 _value, bytes _data) internal returns (bool success) {\n    require(balanceOf(_from) >= _value);\n    balances[_from] = balanceOf(_from).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n    ContractReceiver receiver = ContractReceiver(_to);\n    receiver.tokenFallback(_from, _value, _data);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another - needed for owner transfers\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public isTransferable returns (bool) {\n    require(_to == specDWallet || _to == specUWallet);\n    require(isContract(_to));\n    //owner can transfer tokens on behalf of users after 28 days\n    if (msg.sender == owner && getNow() > saleEnd + 28 days) {\n      OwnerTransfer(_from, _to, _value);\n    } else {\n      uint256 _allowance = allowed[_from][msg.sender];\n      allowed[_from][msg.sender] = _allowance.sub(_value);\n    }\n\n    //Now make the transfer\n    bytes memory empty;\n    return transferToContract(_from, _to, _value, empty);\n\n  }\n\n  //@notice function that is used for whitelisting an address\n  function setWhiteList(address _subscriber, uint256 _amount) public onlyOwner {\n    require(_subscriber != address(0));\n    require(_amount != 0);\n    whitelist[_subscriber] = _amount;\n    WhiteListSet(_subscriber, _amount);\n  }\n\n  // data is an array of uint256s. Each uint256 represents a address and amount.\n  // The 160 LSB is the address that wants to be added\n  // The 96 MSB is the amount of to be set for the whitelist for that address\n  function multiSetWhiteList(uint256[] data) public onlyOwner {\n    for (uint256 i = 0; i < data.length; i++) {\n      address addr = address(data[i] & (D160 - 1));\n      uint256 amount = data[i] / D160;\n      setWhiteList(addr, amount);\n    }\n  }\n\n  /////////////////\n  // TokenController interface\n  /////////////////\n\n  /// @notice `proxyPayment()` returns false, meaning ether is not accepted at\n  ///  the token address, only the address of FiinuCrowdSale\n  /// @param _owner The address that will hold the newly created tokens\n\n  function proxyPayment(address _owner) payable returns(bool) {\n      return false;\n  }\n\n  /// @notice Notifies the controller about a transfer, for this Campaign all\n  ///  transfers are allowed by default and no extra notifications are needed\n  /// @param _from The origin of the transfer\n  /// @param _to The destination of the transfer\n  /// @param _amount The amount of the transfer\n  /// @return False if the controller does not authorize the transfer\n  function onTransfer(address _from, address _to, uint _amount) returns(bool) {\n      return true;\n  }\n\n  /// @notice Notifies the controller about an approval, for this Campaign all\n  ///  approvals are allowed by default and no extra notifications are needed\n  /// @param _owner The address that calls `approve()`\n  /// @param _spender The spender in the `approve()` call\n  /// @param _amount The amount in the `approve()` call\n  /// @return False if the controller does not authorize the approval\n  function onApprove(address _owner, address _spender, uint _amount)\n      returns(bool)\n  {\n      return true;\n  }\n\n  function getNow() constant internal returns (uint256) {\n    return now;\n  }\n\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000670e095e92aff090fb8475131f7a8a5d98bd0155"
}