{
  "address": "0xd74c628858a4b357cb50218dc5b697d705cb350a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CardioCoin",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-11\n*/\n\npragma solidity >= 0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\ncontract Constants {\n    uint public constant UNLOCK_COUNT = 7;\n}\n\ncontract CardioCoin is ERC20, Ownable, Constants {\n    using SafeMath for uint256;\n\n    uint public constant RESELLER_UNLOCK_TIME = 1559347200; \n    uint public constant UNLOCK_PERIOD = 30 days;\n\n    string public name = \"CardioCoin\";\n    string public symbol = \"CRDC\";\n\n    uint8 public decimals = 18;\n    uint256 internal totalSupply_ = 50000000000 * (10 ** uint256(decimals));\n\n    mapping (address => uint256) internal reselling;\n    uint256 internal resellingAmount = 0;\n\n    struct locker {\n        bool isLocker;\n        string role;\n        uint lockUpPeriod;\n        uint unlockCount;\n        bool isReseller;\n    }\n\n    mapping (address => locker) internal lockerList;\n\n    event AddToLocker(address indexed owner, string role, uint lockUpPeriod, uint unlockCount);\n    event AddToReseller(address indexed owner);\n\n    event ResellingAdded(address indexed seller, uint256 amount);\n    event ResellingSubtracted(address indexed seller, uint256 amount);\n    event Reselled(address indexed seller, address indexed buyer, uint256 amount);\n\n    event TokenLocked(address indexed owner, uint256 amount);\n    event TokenUnlocked(address indexed owner, uint256 amount);\n\n    constructor() public Ownable() {\n        balance memory b;\n\n        b.available = totalSupply_;\n        balances[msg.sender] = b;\n    }\n\n    function addLockedUpTokens(address _owner, uint256 amount, uint lockUpPeriod, uint unlockCount)\n    internal {\n        balance storage b = balances[_owner];\n        lockUp memory l;\n\n        l.amount = amount;\n        l.unlockTimestamp = now + lockUpPeriod;\n        l.unlockCount = unlockCount;\n        b.lockedUp += amount;\n        b.lockUpData[b.lockUpCount] = l;\n        b.lockUpCount += 1;\n        emit TokenLocked(_owner, amount);\n    }\n\n    // Reselling\n\n    function addAddressToResellerList(address _operator)\n    public\n    onlyOwner {\n        locker storage existsLocker = lockerList[_operator];\n\n        require(!existsLocker.isLocker);\n\n        locker memory l;\n\n        l.isLocker = true;\n        l.role = \"Reseller\";\n        l.lockUpPeriod = RESELLER_UNLOCK_TIME;\n        l.unlockCount = UNLOCK_COUNT;\n        l.isReseller = true;\n        lockerList[_operator] = l;\n        emit AddToReseller(_operator);\n    }\n\n    function addResellingAmount(address seller, uint256 amount)\n    public\n    onlyOwner\n    {\n        require(seller != address(0));\n        require(amount > 0);\n        require(balances[seller].available >= amount);\n\n        reselling[seller] = reselling[seller].add(amount);\n        balances[seller].available = balances[seller].available.sub(amount);\n        resellingAmount = resellingAmount.add(amount);\n        emit ResellingAdded(seller, amount);\n    }\n\n    function subtractResellingAmount(address seller, uint256 _amount)\n    public\n    onlyOwner\n    {\n        uint256 amount = reselling[seller];\n\n        require(seller != address(0));\n        require(_amount > 0);\n        require(amount >= _amount);\n\n        reselling[seller] = reselling[seller].sub(_amount);\n        resellingAmount = resellingAmount.sub(_amount);\n        balances[seller].available = balances[seller].available.add(_amount);\n        emit ResellingSubtracted(seller, _amount);\n    }\n\n    function cancelReselling(address seller)\n    public\n    onlyOwner {\n        uint256 amount = reselling[seller];\n\n        require(seller != address(0));\n        require(amount > 0);\n\n        subtractResellingAmount(seller, amount);\n    }\n\n    function resell(address seller, address buyer, uint256 amount)\n    public\n    onlyOwner\n    returns (bool)\n    {\n        require(seller != address(0));\n        require(buyer != address(0));\n        require(amount > 0);\n        require(reselling[seller] >= amount);\n        require(balances[owner()].available >= amount);\n\n        reselling[seller] = reselling[seller].sub(amount);\n        resellingAmount = resellingAmount.sub(amount);\n        addLockedUpTokens(buyer, amount, RESELLER_UNLOCK_TIME - now, UNLOCK_COUNT);\n        emit Reselled(seller, buyer, amount);\n\n        return true;\n    }\n\n    // ERC20 Custom\n\n    struct lockUp {\n        uint256 amount;\n        uint unlockTimestamp;\n        uint unlockedCount;\n        uint unlockCount;\n    }\n\n    struct balance {\n        uint256 available;\n        uint256 lockedUp;\n        mapping (uint => lockUp) lockUpData;\n        uint lockUpCount;\n        uint unlockIndex;\n    }\n\n    mapping(address => balance) internal balances;\n\n    function unlockBalance(address _owner) internal {\n        balance storage b = balances[_owner];\n\n        if (b.lockUpCount > 0 && b.unlockIndex < b.lockUpCount) {\n            for (uint i = b.unlockIndex; i < b.lockUpCount; i++) {\n                lockUp storage l = b.lockUpData[i];\n\n                if (l.unlockTimestamp <= now) {\n                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount, l.unlockCount);\n                    uint256 unlockedAmount = l.amount.mul(count).div(l.unlockCount);\n\n                    if (unlockedAmount > b.lockedUp) {\n                        unlockedAmount = b.lockedUp;\n                        l.unlockedCount = l.unlockCount;\n                    } else {\n                        b.available = b.available.add(unlockedAmount);\n                        b.lockedUp = b.lockedUp.sub(unlockedAmount);\n                        l.unlockedCount += count;\n                    }\n                    emit TokenUnlocked(_owner, unlockedAmount);\n                    if (l.unlockedCount == l.unlockCount) {\n                        lockUp memory tempA = b.lockUpData[i];\n                        lockUp memory tempB = b.lockUpData[b.unlockIndex];\n\n                        b.lockUpData[i] = tempB;\n                        b.lockUpData[b.unlockIndex] = tempA;\n                        b.unlockIndex += 1;\n                    } else {\n                        l.unlockTimestamp += UNLOCK_PERIOD * count;\n                    }\n                }\n            }\n        }\n    }\n\n    function calculateUnlockCount(uint timestamp, uint unlockedCount, uint unlockCount) view internal returns (uint) {\n        uint count = 0;\n        uint nowFixed = now;\n\n        while (timestamp < nowFixed && unlockedCount + count < unlockCount) {\n            count++;\n            timestamp += UNLOCK_PERIOD;\n        }\n\n        return count;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        locker storage l = lockerList[from];\n\n        if (l.isReseller && RESELLER_UNLOCK_TIME < now) {\n            l.isLocker = false;\n            l.isReseller = false;\n\n            uint elapsedPeriod = (now - RESELLER_UNLOCK_TIME) / UNLOCK_PERIOD;\n\n            if (elapsedPeriod < UNLOCK_COUNT) {\n                balance storage b = balances[from];\n                uint256 lockUpAmount = b.available * (UNLOCK_COUNT - elapsedPeriod) / UNLOCK_COUNT;\n\n                b.available = b.available.sub(lockUpAmount);\n                addLockedUpTokens(from, lockUpAmount, RESELLER_UNLOCK_TIME + UNLOCK_PERIOD * (elapsedPeriod + 1) - now, UNLOCK_COUNT - elapsedPeriod);\n            }\n        }\n        unlockBalance(from);\n\n        require(value <= balances[from].available);\n        require(to != address(0));\n        if (l.isLocker) {\n            balances[from].available = balances[from].available.sub(value);\n            if (l.isReseller) {\n                addLockedUpTokens(to, value, RESELLER_UNLOCK_TIME - now, UNLOCK_COUNT);\n            } else {\n                addLockedUpTokens(to, value, l.lockUpPeriod, l.unlockCount);\n            }\n        } else {\n            balances[from].available = balances[from].available.sub(value);\n            balances[to].available = balances[to].available.add(value);\n        }\n        emit Transfer(from, to, value);\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner].available.add(balances[_owner].lockedUp);\n    }\n\n    function lockedUpBalanceOf(address _owner) public view returns (uint256) {\n        balance storage b = balances[_owner];\n        uint256 lockedUpBalance = b.lockedUp;\n\n        if (b.lockUpCount > 0 && b.unlockIndex < b.lockUpCount) {\n            for (uint i = b.unlockIndex; i < b.lockUpCount; i++) {\n                lockUp storage l = b.lockUpData[i];\n\n                if (l.unlockTimestamp <= now) {\n                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount, l.unlockCount);\n                    uint256 unlockedAmount = l.amount.mul(count).div(l.unlockCount);\n\n                    if (unlockedAmount > lockedUpBalance) {\n                        lockedUpBalance = 0;\n                        break;\n                    } else {\n                        lockedUpBalance = lockedUpBalance.sub(unlockedAmount);\n                    }\n                }\n            }\n        }\n\n        return lockedUpBalance;\n    }\n\n    function resellingBalanceOf(address _owner) public view returns (uint256) {\n        return reselling[_owner];\n    }\n\n    function transferWithLockUp(address _to, uint256 _value, uint lockUpPeriod, uint unlockCount)\n    public\n    onlyOwner\n    returns (bool) {\n        require(_value <= balances[owner()].available);\n        require(_to != address(0));\n\n        balances[owner()].available = balances[owner()].available.sub(_value);\n        addLockedUpTokens(_to, _value, lockUpPeriod, unlockCount);\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    // Burnable\n\n    event Burn(address indexed burner, uint256 value);\n\n    function burn(uint256 _value) public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who].available);\n\n        balances[_who].available = balances[_who].available.sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n    // Lockup\n\n    function addAddressToLockerList(address _operator, string memory role, uint lockUpPeriod, uint unlockCount)\n    public\n    onlyOwner {\n        locker storage existsLocker = lockerList[_operator];\n\n        require(!existsLocker.isLocker);\n\n        locker memory l;\n\n        l.isLocker = true;\n        l.role = role;\n        l.lockUpPeriod = lockUpPeriod;\n        l.unlockCount = unlockCount;\n        l.isReseller = false;\n        lockerList[_operator] = l;\n        emit AddToLocker(_operator, role, lockUpPeriod, unlockCount);\n    }\n\n    function lockerInfo(address _operator) public view returns (string memory, uint, uint, bool) {\n        locker memory l = lockerList[_operator];\n\n        return (l.role, l.lockUpPeriod, l.unlockCount, l.isReseller);\n    }\n\n    // Refund\n\n    event RefundRequested(address indexed reuqester, uint256 tokenAmount, uint256 paidAmount);\n    event RefundCanceled(address indexed requester);\n    event RefundAccepted(address indexed requester, address indexed tokenReceiver, uint256 tokenAmount, uint256 paidAmount);\n\n    struct refundRequest {\n        bool active;\n        uint256 tokenAmount;\n        uint256 paidAmount;\n        address buyFrom;\n    }\n\n    mapping (address => refundRequest) internal refundRequests;\n\n    function requestRefund(uint256 paidAmount, address buyFrom) public {\n        require(!refundRequests[msg.sender].active);\n\n        refundRequest memory r;\n\n        r.active = true;\n        r.tokenAmount = balanceOf(msg.sender);\n        r.paidAmount = paidAmount;\n        r.buyFrom = buyFrom;\n        refundRequests[msg.sender] = r;\n\n        emit RefundRequested(msg.sender, r.tokenAmount, r.paidAmount);\n    }\n\n    function cancelRefund() public {\n        require(refundRequests[msg.sender].active);\n        refundRequests[msg.sender].active = false;\n        emit RefundCanceled(msg.sender);\n    }\n\n    function acceptRefundForOwner(address payable requester, address receiver) public payable onlyOwner {\n        require(requester != address(0));\n        require(receiver != address(0));\n\n        refundRequest storage r = refundRequests[requester];\n\n        require(r.active);\n        require(balanceOf(requester) == r.tokenAmount);\n        require(msg.value == r.paidAmount);\n        require(r.buyFrom == owner());\n        requester.transfer(msg.value);\n        transferForRefund(requester, receiver, r.tokenAmount);\n        r.active = false;\n        emit RefundAccepted(requester, receiver, r.tokenAmount, msg.value);\n    }\n\n    function acceptRefundForReseller(address payable requester) public payable {\n        require(requester != address(0));\n\n        locker memory l = lockerList[msg.sender];\n\n        require(l.isReseller);\n\n        refundRequest storage r = refundRequests[requester];\n\n        require(r.active);\n        require(balanceOf(requester) == r.tokenAmount);\n        require(msg.value == r.paidAmount);\n        require(r.buyFrom == msg.sender);\n        requester.transfer(msg.value);\n        transferForRefund(requester, msg.sender, r.tokenAmount);\n        r.active = false;\n        emit RefundAccepted(requester, msg.sender, r.tokenAmount, msg.value);\n    }\n\n    function refundInfo(address requester) public view returns (bool, uint256, uint256) {\n        refundRequest memory r = refundRequests[requester];\n\n        return (r.active, r.tokenAmount, r.paidAmount);\n    }\n\n    function transferForRefund(address from, address to, uint256 amount) internal {\n        require(balanceOf(from) == amount);\n\n        unlockBalance(from);\n\n        balance storage fromBalance = balances[from];\n        balance storage toBalance = balances[to];\n\n        fromBalance.available = 0;\n        fromBalance.lockedUp = 0;\n        fromBalance.unlockIndex = fromBalance.lockUpCount;\n        toBalance.available = toBalance.available.add(amount);\n\n        emit Transfer(from, to, amount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"},{\"name\":\"lockUpPeriod\",\"type\":\"uint256\"},{\"name\":\"unlockCount\",\"type\":\"uint256\"}],\"name\":\"addAddressToLockerList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"resell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"acceptRefundForReseller\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RESELLER_UNLOCK_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"lockerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedUpBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requester\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"acceptRefundForOwner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paidAmount\",\"type\":\"uint256\"},{\"name\":\"buyFrom\",\"type\":\"address\"}],\"name\":\"requestRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToResellerList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"subtractResellingAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"lockUpPeriod\",\"type\":\"uint256\"},{\"name\":\"unlockCount\",\"type\":\"uint256\"}],\"name\":\"transferWithLockUp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addResellingAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"cancelReselling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"resellingBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"refundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"lockUpPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unlockCount\",\"type\":\"uint256\"}],\"name\":\"AddToLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddToReseller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ResellingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ResellingSubtracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reselled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"reuqester\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"RefundRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"RefundCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"RefundAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526040805190810160405280600a81526020017f43617264696f436f696e00000000000000000000000000000000000000000000815250600490805190602001906200005192919062000235565b506040805190810160405280600481526020017f4352444300000000000000000000000000000000000000000000000000000000815250600590805190602001906200009f92919062000235565b506012600660006101000a81548160ff021916908360ff160217905550600660009054906101000a900460ff1660ff16600a0a640ba43b7400026007556000600955348015620000ee57600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3620001b7620002bc565b60075481600001818152505080600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816003015560608201518160040155905050506200030d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027857805160ff1916838001178555620002a9565b82800160010185558215620002a9579182015b82811115620002a85782518255916020019190600101906200028b565b5b509050620002b89190620002e5565b5090565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b6200030a91905b8082111562000306576000816000905550600101620002ec565b5090565b90565b614453806200031d6000396000f3fe6080604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101b1578063095ea7b3146102415780630bb69401146102b457806318160ddd146103b057806323b872dd146103db57806324207e021461046e578063259a28cf146105015780632fca23ac1461052c57806330095f0b14610557578063313ce5671461059b57806331981551146105cc57806338e3de49146105f757806339509351146106da57806342966c681461074d57806356219f9e1461078857806370a08231146107ed578063715018a61461085257806374e31d081461086957806384276d50146108805780638da5cb5b146108e45780638f32d59b1461093b5780638f752de71461096a57806392251791146109c557806395d89b4114610a165780639656fd5714610aa65780639b4a266d14610b01578063a457c2d714610b88578063a9059cbb14610bfb578063b4a5478114610c6e578063bfeaedc314610cc9578063dd62ed3e14610d1a578063dfefe8e714610d9f578063e85f2a1a14610e04578063f2fde38b14610e7b575b600080fd5b3480156101bd57600080fd5b506101c6610ecc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102065780820151818401526020810190506101eb565b50505050905090810190601f1680156102335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024d57600080fd5b5061029a6004803603604081101561026457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f6a565b604051808215151515815260200191505060405180910390f35b3480156102c057600080fd5b506103ae600480360360808110156102d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561031457600080fd5b82018360208201111561032657600080fd5b8035906020019184600183028401116401000000008311171561034857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050611097565b005b3480156103bc57600080fd5b506103c56112d1565b6040518082815260200191505060405180910390f35b3480156103e757600080fd5b50610454600480360360608110156103fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112db565b604051808215151515815260200191505060405180910390f35b34801561047a57600080fd5b506104e76004803603606081101561049157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114e3565b604051808215151515815260200191505060405180910390f35b34801561050d57600080fd5b50610516611758565b6040518082815260200191505060405180910390f35b34801561053857600080fd5b5061054161175f565b6040518082815260200191505060405180910390f35b6105996004803603602081101561056d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611764565b005b3480156105a757600080fd5b506105b0611ac4565b604051808260ff1660ff16815260200191505060405180910390f35b3480156105d857600080fd5b506105e1611ad7565b6040518082815260200191505060405180910390f35b34801561060357600080fd5b506106466004803603602081101561061a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611adf565b604051808060200185815260200184815260200183151515158152602001828103825286818151815260200191508051906020019080838360005b8381101561069c578082015181840152602081019050610681565b50505050905090810190601f1680156106c95780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156106e657600080fd5b50610733600480360360408110156106fd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c4e565b604051808215151515815260200191505060405180910390f35b34801561075957600080fd5b506107866004803603602081101561077057600080fd5b8101908080359060200190929190505050611e85565b005b34801561079457600080fd5b506107d7600480360360208110156107ab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e92565b6040518082815260200191505060405180910390f35b3480156107f957600080fd5b5061083c6004803603602081101561081057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fcd565b6040518082815260200191505060405180910390f35b34801561085e57600080fd5b5061086761206d565b005b34801561087557600080fd5b5061087e612141565b005b6108e26004803603604081101561089657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061223c565b005b3480156108f057600080fd5b506108f96124a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561094757600080fd5b506109506124cb565b604051808215151515815260200191505060405180910390f35b34801561097657600080fd5b506109c36004803603604081101561098d57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612523565b005b3480156109d157600080fd5b50610a14600480360360208110156109e857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061270d565b005b348015610a2257600080fd5b50610a2b6128fe565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a6b578082015181840152602081019050610a50565b50505050905090810190601f168015610a985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ab257600080fd5b50610aff60048036036040811015610ac957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061299c565b005b348015610b0d57600080fd5b50610b6e60048036036080811015610b2457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050612beb565b604051808215151515815260200191505060405180910390f35b348015610b9457600080fd5b50610be160048036036040811015610bab57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612dba565b604051808215151515815260200191505060405180910390f35b348015610c0757600080fd5b50610c5460048036036040811015610c1e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612ff1565b604051808215151515815260200191505060405180910390f35b348015610c7a57600080fd5b50610cc760048036036040811015610c9157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613008565b005b348015610cd557600080fd5b50610d1860048036036020811015610cec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613254565b005b348015610d2657600080fd5b50610d8960048036036040811015610d3d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613304565b6040518082815260200191505060405180910390f35b348015610dab57600080fd5b50610dee60048036036020811015610dc257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061338b565b6040518082815260200191505060405180910390f35b348015610e1057600080fd5b50610e5360048036036020811015610e2757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506133d4565b6040518084151515158152602001838152602001828152602001935050505060405180910390f35b348015610e8757600080fd5b50610eca60048036036020811015610e9e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506134d0565b005b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f625780601f10610f3757610100808354040283529160200191610f62565b820191906000526020600020905b815481529060010190602001808311610f4557829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610fa757600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b61109f6124cb565b15156110aa57600080fd5b6000600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff1615151561110b57600080fd5b6111136142e4565b60018160000190151590811515815250508481602001819052508381604001818152505082816060018181525050600081608001901515908115158152505080600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010190805190602001906111ce929190614318565b50604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050508573ffffffffffffffffffffffffffffffffffffffff167fa6d9befabd290d7508939bd7443f80373d25f6667021c137fc0d258c24e3cba28686866040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b8381101561128d578082015181840152602081019050611272565b50505050905090810190601f1680156112ba5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2505050505050565b6000600754905090565b600061136c82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134ef90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113f7848484613511565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b60006114ed6124cb565b15156114f857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561153457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561157057600080fd5b60008211151561157f57600080fd5b81600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156115cd57600080fd5b81600b60006115da6124a1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015151561162557600080fd5b61167782600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134ef90919063ffffffff16565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116cf826009546134ef90919063ffffffff16565b6009819055506116e8838342635cf1c0000360076139a9565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f384ed25d2ea8110fef485482097000053c977b3b3aeb65da815408b6ff66835f846040518082815260200191505060405180910390a3600190509392505050565b62278d0081565b600781565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156117a057600080fd5b6117a86142e4565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900460ff16151515158152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118a75780601f1061187c576101008083540402835291602001916118a7565b820191906000526020600020905b81548152906001019060200180831161188a57829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050806080015115156118f157600080fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff16151561195157600080fd5b806001015461195f84611fcd565b14151561196b57600080fd5b80600201543414151561197d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119db57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611a21573d6000803e3d6000fd5b50611a3183338360010154613ad4565b60008160000160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f77d88557326329ff3b691e87c8e1d4ad0c6e20ff0cc08083259e80c8ad3431cc836001015434604051808381526020018281526020019250505060405180910390a3505050565b600660009054906101000a900460ff1681565b635cf1c00081565b60606000806000611aee6142e4565b600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a060405190810160405290816000820160009054906101000a900460ff16151515158152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bed5780601f10611bc257610100808354040283529160200191611bed565b820191906000526020600020905b815481529060010190602001808311611bd057829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905080602001518160400151826060015183608001518393509450945094509450509193509193565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611c8b57600080fd5b611d1a82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613c2590919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b611e8f3382613c46565b50565b600080600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010154905060008260030154118015611efa575081600301548260040154105b15611fc3576000826004015490505b8260030154811015611fc15760008360020160008381526020019081526020016000209050428160010154111515611fb3576000611f54826001015483600201548460030154613e05565b90506000611f858360030154611f77848660000154613e4890919063ffffffff16565b613e8690919063ffffffff16565b905084811115611f9b5760009450505050611fc1565b611fae81866134ef90919063ffffffff16565b945050505b508080600101915050611f09565b505b8092505050919050565b6000612066600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154613c2590919063ffffffff16565b9050919050565b6120756124cb565b151561208057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16151561219c57600080fd5b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f1715177e65f487a03d8875d9200f556ae2023cf6d9e59b6a58b2c4ccdd6276a560405160405180910390a2565b6122446124cb565b151561224f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561228b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156122c757600080fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff16151561232757600080fd5b806001015461233584611fcd565b14151561234157600080fd5b80600201543414151561235357600080fd5b61235b6124a1565b73ffffffffffffffffffffffffffffffffffffffff168160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156123b857600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156123fe573d6000803e3d6000fd5b5061240e83838360010154613ad4565b60008160000160006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f77d88557326329ff3b691e87c8e1d4ad0c6e20ff0cc08083259e80c8ad3431cc836001015434604051808381526020018281526020019250505060405180910390a3505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615151561257f57600080fd5b612587614398565b60018160000190151590811515815250506125a133611fcd565b8160200181815250508281604001818152505081816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff167f4c7e7010f4fcf12a6ff2436b38a5e3d0ef3e695830216259fccf95a56b2bb04d82602001518360400151604051808381526020018281526020019250505060405180910390a2505050565b6127156124cb565b151561272057600080fd5b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff1615151561278157600080fd5b6127896142e4565b60018160000190151590811515815250506040805190810160405280600881526020017f526573656c6c65720000000000000000000000000000000000000000000000008152508160200181905250635cf1c0008160400181815250506007816060018181525050600181608001901515908115158152505080600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101908051906020019061287e929190614318565b50604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050508273ffffffffffffffffffffffffffffffffffffffff167ffdee36cbccd611f119c32205b091f639eb47f63a00e0a67ae4fee18631f291b060405160405180910390a2505050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129945780601f1061296957610100808354040283529160200191612994565b820191906000526020600020905b81548152906001019060200180831161297757829003601f168201915b505050505081565b6129a46124cb565b15156129af57600080fd5b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612a2f57600080fd5b600082111515612a3e57600080fd5b818110151515612a4d57600080fd5b612a9f82600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134ef90919063ffffffff16565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612af7826009546134ef90919063ffffffff16565b600981905550612b5282600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154613c2590919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508273ffffffffffffffffffffffffffffffffffffffff167fbd188d3a5762f5bf3811fbeb63dd524c9c935bf8de54463e8d0725cf944c434a836040518082815260200191505060405180910390a2505050565b6000612bf56124cb565b1515612c0057600080fd5b600b6000612c0c6124a1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548411151515612c5857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515612c9457600080fd5b612cf084600b6000612ca46124a1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546134ef90919063ffffffff16565b600b6000612cfc6124a1565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550612d49858585856139a9565b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019050949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612df757600080fd5b612e8682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546134ef90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000612ffe338484613511565b6001905092915050565b6130106124cb565b151561301b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561305757600080fd5b60008111151561306657600080fd5b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154101515156130b757600080fd5b61310981600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613c2590919063ffffffff16565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506131a181600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546134ef90919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506131fc81600954613c2590919063ffffffff16565b6009819055508173ffffffffffffffffffffffffffffffffffffffff167ff7de51a0a07cd08827163191103898b0da35e6b82114bbed7663f86e93101c8b826040518082815260200191505060405180910390a25050565b61325c6124cb565b151561326757600080fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156132e757600080fd5b6000811115156132f657600080fd5b613300828261299c565b5050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060006133e1614398565b600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020608060405190810160405290816000820160009054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050806000015181602001518260400151935093509350509193909250565b6134d86124cb565b15156134e357600080fd5b6134ec81613eb0565b50565b600082821115151561350057600080fd5b600082840390508091505092915050565b6000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060040160009054906101000a900460ff168015613575575042635cf1c000105b156136765760008160000160006101000a81548160ff02191690831515021790555060008160040160006101000a81548160ff021916908315150217905550600062278d00635cf1c00042038115156135ca57fe5b0490506007811015613674576000600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600060078360070383600001540281151561363057fe5b04905061364a8183600001546134ef90919063ffffffff16565b82600001819055506136718782426001870162278d0002635cf1c0000103866007036139a9565b50505b505b61367f84613fac565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015482111515156136d057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561370c57600080fd5b8060000160009054906101000a900460ff16156138075761377882600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546134ef90919063ffffffff16565b600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055508060040160009054906101000a900460ff16156137ed576137e8838342635cf1c0000360076139a9565b613802565b6138018383836002015484600301546139a9565b5b61393e565b61385c82600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546134ef90919063ffffffff16565b600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506138f782600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154613c2590919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b6000600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506139f46143d9565b8481600001818152505083420181602001818152505082816060018181525050848260010160008282540192505081905550808260020160008460030154815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155905050600182600301600082825401925050819055508573ffffffffffffffffffffffffffffffffffffffff167ff9626bca62c59d77fa45a204dc096874ee066a5c5e124aa9ce6c438dbdf7387a866040518082815260200191505060405180910390a2505050505050565b80613ade84611fcd565b141515613aea57600080fd5b613af383613fac565b6000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600082600001819055506000826001018190555081600301548260040181905550613bb1838260000154613c2590919063ffffffff16565b81600001819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35050505050565b6000808284019050838110151515613c3c57600080fd5b8091505092915050565b600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548111151515613c9757600080fd5b613cec81600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546134ef90919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550613d47816007546134ef90919063ffffffff16565b6007819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000806000905060004290505b8086108015613e22575083828601105b15613e3c57818060010192505062278d0086019550613e12565b81925050509392505050565b600080831415613e5b5760009050613e80565b60008284029050828482811515613e6e57fe5b04141515613e7b57600080fd5b809150505b92915050565b60008082111515613e9657600080fd5b60008284811515613ea357fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613eec57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816003015411801561400a575080600301548160040154105b156142e0576000816004015490505b81600301548110156142de57600082600201600083815260200190815260200160002090504281600101541115156142d0576000614064826001015483600201548460030154613e05565b905060006140958360030154614087848660000154613e4890919063ffffffff16565b613e8690919063ffffffff16565b905084600101548111156140bc57846001015490508260030154836002018190555061410d565b6140d3818660000154613c2590919063ffffffff16565b85600001819055506140f28186600101546134ef90919063ffffffff16565b85600101819055508183600201600082825401925050819055505b8573ffffffffffffffffffffffffffffffffffffffff167f613edbda9d1e6bda8af8e869a973f88cccf93854a11f351589038de07e1ab4e3826040518082815260200191505060405180910390a28260030154836002015414156142b5576141736143d9565b8560020160008681526020019081526020016000206080604051908101604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506141c66143d9565b8660020160008860040154815260200190815260200160002060806040519081016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050905080876002016000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508187600201600089600401548152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050506001876004016000828254019250508190555050506142cd565b8162278d000283600101600082825401925050819055505b50505b508080600101915050614019565b505b5050565b60a0604051908101604052806000151581526020016060815260200160008152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061435957805160ff1916838001178555614387565b82800160010185558215614387579182015b8281111561438657825182559160200191906001019061436b565b5b5090506143949190614402565b5090565b6080604051908101604052806000151581526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b608060405190810160405280600081526020016000815260200160008152602001600081525090565b61442491905b80821115614420576000816000905550600101614408565b5090565b9056fea165627a7a72305820554da174247090fd399663b3f655ab7b8b457c9b7025d9943cf30f46f2886b9c0029"
}