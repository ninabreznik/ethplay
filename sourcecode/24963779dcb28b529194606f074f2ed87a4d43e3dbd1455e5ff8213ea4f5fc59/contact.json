{
  "address": "0xa48f73cd855fe8993cf63c50d77dde997f10be3a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Fixed192x64Math",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-23\n*/\n\npragma solidity >=0.4.24 ^0.5.1;\n\n\n/// @title Fixed192x64Math library - Allows calculation of logarithmic and exponential functions\n/// @author Alan Lu - <[email protected]>\n/// @author Stefan George - <[email protected]>\nlibrary Fixed192x64Math {\n\n    enum EstimationMode { LowerBound, UpperBound, Midpoint }\n\n    /*\n     *  Constants\n     */\n    // This is equal to 1 in our calculations\n    uint public constant ONE =  0x10000000000000000;\n    uint public constant LN2 = 0xb17217f7d1cf79ac;\n    uint public constant LOG2_E = 0x171547652b82fe177;\n\n    /*\n     *  Public functions\n     */\n    /// @dev Returns natural exponential function value of given x\n    /// @param x x\n    /// @return e**x\n    function exp(int x)\n        public\n        pure\n        returns (uint)\n    {\n        // revert if x is > MAX_POWER, where\n        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))\n        require(x <= 2454971259878909886679);\n        // return 0 if exp(x) is tiny, using\n        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))\n        if (x <= -818323753292969962227)\n            return 0;\n\n        // Transform so that e^x -> 2^x\n        (uint lower, uint upper) = pow2Bounds(x * int(ONE) / int(LN2));\n        return (upper - lower) / 2 + lower;\n    }\n\n    /// @dev Returns estimate of 2**x given x\n    /// @param x exponent in fixed point\n    /// @param estimationMode whether to return a lower bound, upper bound, or a midpoint\n    /// @return estimate of 2**x in fixed point\n    function pow2(int x, EstimationMode estimationMode)\n        public\n        pure\n        returns (uint)\n    {\n        (uint lower, uint upper) = pow2Bounds(x);\n        if(estimationMode == EstimationMode.LowerBound) {\n            return lower;\n        }\n        if(estimationMode == EstimationMode.UpperBound) {\n            return upper;\n        }\n        if(estimationMode == EstimationMode.Midpoint) {\n            return (upper - lower) / 2 + lower;\n        }\n        revert();\n    }\n\n    /// @dev Returns bounds for value of 2**x given x\n    /// @param x exponent in fixed point\n    /// @return {\n    ///   \"lower\": \"lower bound of 2**x in fixed point\",\n    ///   \"upper\": \"upper bound of 2**x in fixed point\"\n    /// }\n    function pow2Bounds(int x)\n        public\n        pure\n        returns (uint lower, uint upper)\n    {\n        // revert if x is > MAX_POWER, where\n        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE, 2) * ONE))\n        require(x <= 3541774862152233910271);\n        // return 0 if exp(x) is tiny, using\n        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE, 2) * ONE))\n        if (x < -1180591620717411303424)\n            return (0, 1);\n\n        // 2^x = 2^(floor(x)) * 2^(x-floor(x))\n        //       ^^^^^^^^^^^^^^ is a bit shift of ceil(x)\n        // so Taylor expand on z = x-floor(x), z in [0, 1)\n        int shift;\n        int z;\n        if (x >= 0) {\n            shift = x / int(ONE);\n            z = x % int(ONE);\n        }\n        else {\n            shift = (x+1) / int(ONE) - 1;\n            z = x - (int(ONE) * shift);\n        }\n        assert(z >= 0);\n        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...\n        //\n        // Can generate the z coefficients using mpmath and the following lines\n        // >>> from mpmath import mp\n        // >>> mp.dps = 100\n        // >>> coeffs = [mp.log(2)**i / mp.factorial(i) for i in range(1, 21)]\n        // >>> shifts = [64 - int(mp.log(c, 2)) for c in coeffs]\n        // >>> print('\\n'.join(hex(int(c * (1 << s))) + ', ' + str(s) for c, s in zip(coeffs, shifts)))\n        int result = int(ONE) << 64;\n        int zpow = z;\n        result += 0xb17217f7d1cf79ab * zpow;\n        zpow = zpow * z / int(ONE);\n        result += 0xf5fdeffc162c7543 * zpow >> (66 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xe35846b82505fc59 * zpow >> (68 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0x9d955b7dd273b94e * zpow >> (70 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xaec3ff3c53398883 * zpow >> (73 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xa184897c363c3b7a * zpow >> (76 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xffe5fe2c45863435 * zpow >> (80 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xb160111d2e411fec * zpow >> (83 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xda929e9caf3e1ed2 * zpow >> (87 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xf267a8ac5c764fb7 * zpow >> (91 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xf465639a8dd92607 * zpow >> (95 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xe1deb287e14c2f15 * zpow >> (99 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xc0b0c98b3687cb14 * zpow >> (103 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0x98a4b26ac3c54b9f * zpow >> (107 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xe1b7421d82010f33 * zpow >> (112 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0x9c744d73cfc59c91 * zpow >> (116 - 64);\n        zpow = zpow * z / int(ONE);\n        result += 0xcc2225a0e12d3eab * zpow >> (121 - 64);\n        zpow = zpow * z / int(ONE);\n        zpow = 0xfb8bb5eda1b4aeb9 * zpow >> (126 - 64);\n        result += zpow;\n        zpow = int(8 * ONE);\n\n        shift -= 64;\n        if (shift >= 0) {\n            if (result >> (256-shift) == 0) {\n                lower = uint(result) << shift;\n                zpow <<= shift; // todo: is this safe?\n                if (lower + uint(zpow) >= lower)\n                    upper = lower + uint(zpow);\n                else\n                    upper = 2**256-1;\n                return (lower, upper);\n            }\n            else\n                return (2**256-1, 2**256-1);\n        }\n        zpow = (zpow >> (-shift)) + 1;\n        lower = uint(result) >> (-shift);\n        upper = lower + uint(zpow);\n        return (lower, upper);\n    }\n\n    /// @dev Returns natural logarithm value of given x\n    /// @param x x\n    /// @return ln(x)\n    function ln(uint x)\n        public\n        pure\n        returns (int)\n    {\n        (int lower, int upper) = log2Bounds(x);\n        return ((upper - lower) / 2 + lower) * int(ONE) / int(LOG2_E);\n    }\n\n    /// @dev Returns estimate of binaryLog(x) given x\n    /// @param x logarithm argument in fixed point\n    /// @param estimationMode whether to return a lower bound, upper bound, or a midpoint\n    /// @return estimate of binaryLog(x) in fixed point\n    function binaryLog(uint x, EstimationMode estimationMode)\n        public\n        pure\n        returns (int)\n    {\n        (int lower, int upper) = log2Bounds(x);\n        if(estimationMode == EstimationMode.LowerBound) {\n            return lower;\n        }\n        if(estimationMode == EstimationMode.UpperBound) {\n            return upper;\n        }\n        if(estimationMode == EstimationMode.Midpoint) {\n            return (upper - lower) / 2 + lower;\n        }\n        revert();\n    }\n\n    /// @dev Returns bounds for value of binaryLog(x) given x\n    /// @param x logarithm argument in fixed point\n    /// @return {\n    ///   \"lower\": \"lower bound of binaryLog(x) in fixed point\",\n    ///   \"upper\": \"upper bound of binaryLog(x) in fixed point\"\n    /// }\n    function log2Bounds(uint x)\n        public\n        pure\n        returns (int lower, int upper)\n    {\n        require(x > 0);\n        // compute ⌊log₂x⌋\n        lower = floorLog2(x);\n\n        uint y;\n        if (lower < 0)\n            y = x << uint(-lower);\n        else\n            y = x >> uint(lower);\n\n        lower *= int(ONE);\n\n        // y = x * 2^(-⌊log₂x⌋)\n        // so 1 <= y < 2\n        // and log₂x = ⌊log₂x⌋ + log₂y\n        for (int m = 1; m <= 64; m++) {\n            if(y == ONE) {\n                break;\n            }\n            y = y * y / ONE;\n            if(y >= 2 * ONE) {\n                lower += int(ONE >> m);\n                y /= 2;\n            }\n        }\n\n        return (lower, lower + 4);\n    }\n\n    /// @dev Returns base 2 logarithm value of given x\n    /// @param x x\n    /// @return logarithmic value\n    function floorLog2(uint x)\n        public\n        pure\n        returns (int lo)\n    {\n        lo = -64;\n        int hi = 193;\n        // I use a shift here instead of / 2 because it floors instead of rounding towards 0\n        int mid = (hi + lo) >> 1;\n        while((lo + 1) < hi) {\n            if (mid < 0 && x << uint(-mid) < ONE || mid >= 0 && x >> uint(mid) < ONE)\n                hi = mid;\n            else\n                lo = mid;\n            mid = (hi + lo) >> 1;\n        }\n    }\n\n    /// @dev Returns maximum of an array\n    /// @param nums Numbers to look through\n    /// @return Maximum number\n    function max(int[] memory nums)\n        public\n        pure\n        returns (int maxNum)\n    {\n        require(nums.length > 0);\n        maxNum = -2**255;\n        for (uint i = 0; i < nums.length; i++)\n            if (nums[i] > maxNum)\n                maxNum = nums[i];\n    }\n}",
  "bytecode": "610f54610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100c0576000357c01000000000000000000000000000000000000000000000000000000009004806302780677146100c5578063137bf798146100e35780631427f168146101325780631d5801231461017b57806324902e24146101ca57806324d4e90a146101e857806345b8bafc1461022a578063c12662271461026c578063c2ee3a08146102b5578063ccc13814146102d3578063e46751e31461039f575b600080fd5b6100cd6103e1565b6040518082815260200191505060405180910390f35b61011c600480360360408110156100f957600080fd5b8101908080359060200190929190803560ff1690602001909291905050506103ed565b6040518082815260200191505060405180910390f35b61015e6004803603602081101561014857600080fd5b8101908080359060200190929190505050610494565b604051808381526020018281526020019250505060405180910390f35b6101b46004803603604081101561019157600080fd5b8101908080359060200190929190803560ff16906020019092919050505061058f565b6040518082815260200191505060405180910390f35b6101d2610636565b6040518082815260200191505060405180910390f35b610214600480360360208110156101fe57600080fd5b8101908080359060200190929190505050610643565b6040518082815260200191505060405180910390f35b6102566004803603602081101561024057600080fd5b810190808035906020019092919050505061068e565b6040518082815260200191505060405180910390f35b6102986004803603602081101561028257600080fd5b810190808035906020019092919050505061076a565b604051808381526020018281526020019250505060405180910390f35b6102bd610df6565b6040518082815260200191505060405180910390f35b610389600480360360208110156102e957600080fd5b810190808035906020019064010000000081111561030657600080fd5b82018360208201111561031857600080fd5b8035906020019184602083028401116401000000008311171561033a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610e03565b6040518082815260200191505060405180910390f35b6103cb600480360360208110156103b557600080fd5b8101908080359060200190929190505050610e93565b6040518082815260200191505060405180910390f35b67b17217f7d1cf79ac81565b60008060006103fb85610494565b915091506000600281111561040c57fe5b84600281111561041857fe5b141561042857819250505061048e565b6001600281111561043557fe5b84600281111561044157fe5b141561045157809250505061048e565b60028081111561045d57fe5b84600281111561046957fe5b14156104895781600283830381151561047e57fe5b05019250505061048e565b600080fd5b92915050565b6000806000831115156104a657600080fd5b6104af8361068e565b91506000808312156104cc5782600003849060020a0290506104db565b8284908060020a820491505090505b68010000000000000000830292506000600190505b60408113151561057f57680100000000000000008214156105105761057f565b6801000000000000000082830281151561052657fe5b0491506801000000000000000060020282101515610572578068010000000000000000600082121561055457fe5b908060020a82049150508401935060028281151561056e57fe5b0491505b80806001019150506104f0565b5082600484019250925050915091565b600080600061059d8561076a565b91509150600060028111156105ae57fe5b8460028111156105ba57fe5b14156105ca578192505050610630565b600160028111156105d757fe5b8460028111156105e357fe5b14156105f3578092505050610630565b6002808111156105ff57fe5b84600281111561060b57fe5b141561062b5781600283830381151561062057fe5b040192505050610630565b600080fd5b92915050565b680171547652b82fe17781565b600080600061065184610494565b91509150680171547652b82fe1776801000000000000000083600285850381151561067857fe5b05010281151561068457fe5b0592505050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc09050600060c19050600060018383019060008212600003808260020a82851804189250505090505b816001840112156107635760008112801561070557506801000000000000000081600003859060020a02105b8061073057506000811215801561072f5750680100000000000000008185908060020a8204915050105b5b1561073d57809150610741565b8092505b60018383019060008212600003808260020a82851804189250505090506106d9565b5050919050565b60008068bfffffffffffffffff831315151561078557600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffc000000000000000008312156107c0576000600181915080905091509150610df1565b6000806000851215156108005768010000000000000000858115156107e157fe5b05915068010000000000000000858115156107f857fe5b07905061082e565b6001680100000000000000006001870181151561081957fe5b05039150816801000000000000000002850390505b6000811215151561083b57fe5b60006040680100000000000000009060020a02905060008290508067b17217f7d1cf79ab02820191506801000000000000000083820281151561087a57fe5b05905060028167f5fdeffc162c7543029060008212600003808260020a82851804189250505082019150680100000000000000008382028115156108ba57fe5b05905060048167e35846b82505fc59029060008212600003808260020a82851804189250505082019150680100000000000000008382028115156108fa57fe5b059050600681679d955b7dd273b94e029060008212600003808260020a828518041892505050820191506801000000000000000083820281151561093a57fe5b05905060098167aec3ff3c53398883029060008212600003808260020a828518041892505050820191506801000000000000000083820281151561097a57fe5b059050600c8167a184897c363c3b7a029060008212600003808260020a82851804189250505082019150680100000000000000008382028115156109ba57fe5b05905060108167ffe5fe2c45863435029060008212600003808260020a82851804189250505082019150680100000000000000008382028115156109fa57fe5b05905060138167b160111d2e411fec029060008212600003808260020a8285180418925050508201915068010000000000000000838202811515610a3a57fe5b05905060178167da929e9caf3e1ed2029060008212600003808260020a8285180418925050508201915068010000000000000000838202811515610a7a57fe5b059050601b8167f267a8ac5c764fb7029060008212600003808260020a8285180418925050508201915068010000000000000000838202811515610aba57fe5b059050601f8167f465639a8dd92607029060008212600003808260020a8285180418925050508201915068010000000000000000838202811515610afa57fe5b05905060238167e1deb287e14c2f15029060008212600003808260020a8285180418925050508201915068010000000000000000838202811515610b3a57fe5b05905060278167c0b0c98b3687cb14029060008212600003808260020a8285180418925050508201915068010000000000000000838202811515610b7a57fe5b059050602b816798a4b26ac3c54b9f029060008212600003808260020a8285180418925050508201915068010000000000000000838202811515610bba57fe5b05905060308167e1b7421d82010f33029060008212600003808260020a8285180418925050508201915068010000000000000000838202811515610bfa57fe5b059050603481679c744d73cfc59c91029060008212600003808260020a8285180418925050508201915068010000000000000000838202811515610c3a57fe5b05905060398167cc2225a0e12d3eab029060008212600003808260020a8285180418925050508201915068010000000000000000838202811515610c7a57fe5b059050603e8167fb8bb5eda1b4aeb9029060008212600003808260020a82851804189250505090508082019150680100000000000000006008029050604084039350600084121515610d9a5760008461010003836000821215610cd957fe5b9060008212600003808260020a8285180418925050501415610d655783826000821215610d0257fe5b9060020a02955083816000821215610d1657fe5b9060020a02905085818701101515610d32578086019450610d56565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff94505b85859550955050505050610df1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808191508090509550955050505050610df1565b600184600003826000821215610dac57fe5b9060008212600003808260020a82851804189250505001905083600003826000821215610dd557fe5b908060020a820491505095508086019450858595509550505050505b915091565b6801000000000000000081565b6000808251111515610e1457600080fd5b7f8000000000000000000000000000000000000000000000000000000000000000905060008090505b8251811015610e8d57818382815181101515610e5557fe5b906020019060200201511315610e80578281815181101515610e7357fe5b9060200190602002015191505b8080600101915050610e3d565b50919050565b600068851591f9dd5b9b40d78213151515610ead57600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffd3a37a020b8c21950d82131515610edf5760009050610f23565b600080610f0967b17217f7d1cf79ac680100000000000000008602811515610f0357fe5b0561076a565b91509150816002838303811515610f1c57fe5b0401925050505b91905056fea165627a7a723058200e06ddabad19bc74979e7e9957adde2717a6bce8bcdaaacb66f52f4186d726420029"
}