{
  "address": "0xeba49ddea9f59f0a80ecbb1fb7a585ce0bfe5a5e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "STeX Exchange: Token Sale",
  "contractName": "STE",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-30\n*/\n\npragma solidity ^0.4.18;\n\ncontract owned {\n    // Owner's address\n    address public owner;\n\n    // Hardcoded address of super owner (for security reasons)\n    address internal super_owner = 0x630CC4c83fCc1121feD041126227d25Bbeb51959;\n\n    address internal bountyAddr = 0x10945A93914aDb1D68b6eFaAa4A59DfB21Ba9951;\n\n    // Hardcoded addresses of founders for withdraw after gracePeriod is succeed (for security reasons)\n    address[2] internal foundersAddresses = [\n        0x2f072F00328B6176257C21E64925760990561001,\n        0x2640d4b3baF3F6CF9bB5732Fe37fE1a9735a32CE\n    ];\n\n    // Constructor of parent the contract\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    // Modifier for owner's functions of the contract\n    modifier onlyOwner {\n        if ((msg.sender != owner) && (msg.sender != super_owner)) revert();\n        _;\n    }\n\n    // Modifier for super-owner's functions of the contract\n    modifier onlySuperOwner {\n        if (msg.sender != super_owner) revert();\n        _;\n    }\n\n    // Return true if sender is owner or super-owner of the contract\n    function isOwner() internal returns(bool success) {\n        if ((msg.sender == owner) || (msg.sender == super_owner)) return true;\n        return false;\n    }\n\n    // Change the owner of the contract\n    function transferOwnership(address newOwner)  public onlySuperOwner {\n        owner = newOwner;\n    }\n}\n\n\ncontract tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\n\ncontract STE is owned {\n\t// ERC 20 variables\n    string public standard = 'Token 0.1';\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    // ---\n    \n    uint256 public icoRaisedETH; // amount of raised in ETH\n    uint256 public soldedSupply; // total amount of token solded supply         \n\t\n\t// current speed of network\n\tuint256 public blocksPerHour;\n\t\n    /* \n    \tSell/Buy prices in wei \n    \t1 ETH = 10^18 of wei\n    */\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n    \n    // What percent will be returned to Presalers after ICO (in percents from ICO sum)\n    uint32  public percentToPresalersFromICO;\t// in % * 100, example 10% = 1000\n    uint256 public weiToPresalersFromICO;\t\t// in wei\n    \n\t/* preSale params */\n\tuint256 public presaleAmountETH;\n\n    /* Grace period parameters */\n    uint256 public gracePeriodStartBlock;\n    uint256 public gracePeriodStopBlock;\n    uint256 public gracePeriodMinTran;\t\t\t// minimum sum of transaction for ICO in wei\n    uint256 public gracePeriodMaxTarget;\t\t// in STE * 10^8\n    uint256 public gracePeriodAmount;\t\t\t// in STE * 10^8\n    \n    uint256 public burnAfterSoldAmount;\n    \n    bool public icoFinished;\t// ICO is finished ?\n\n    uint32 public percentToFoundersAfterICO; // in % * 100, example 30% = 3000\n\n    bool public allowTransfers; // if true then allow coin transfers\n    mapping (address => bool) public transferFromWhiteList;\n\n    /* Array with all balances */\n    mapping(address => uint256) public balanceOf;\n\n    /* Presale investors list */\n    mapping (address => uint256) public presaleInvestorsETH;\n    mapping (address => uint256) public presaleInvestors;\n\n    /* Ico Investors list */\n    mapping (address => uint256) public icoInvestors;\n\n    // Dividends variables\n    uint32 public dividendsRound; // round number of dividends    \n    uint256 public dividendsSum; // sum for dividends in current round (in wei)\n    uint256 public dividendsBuffer; // sum for dividends in current round (in wei)\n\n    /* Paid dividends */\n    mapping(address => mapping(uint32 => uint256)) public paidDividends;\n\t\n\t/* Trusted accounts list */\n    mapping(address => mapping(address => uint256)) public allowance;\n        \n    /* Events of token */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n\n    /* Token constructor */\n    function STE(string _tokenName, string _tokenSymbol) public {\n        // Initial supply of token\n        // We set only 70m of supply because after ICO was finished, founders get additional 30% of token supply\n        totalSupply = 70000000 * 100000000;\n\n        balanceOf[this] = totalSupply;\n\n        // Initial sum of solded supply during preSale\n        soldedSupply = 1651900191227993;\n        presaleAmountETH = 15017274465709181875863;\n\n        name = _tokenName;\n        symbol = _tokenSymbol;\n        decimals = 8;\n\n        icoRaisedETH = 0;\n        \n        blocksPerHour = 260;\n\n        // % of company cost transfer to founders after ICO * 100, 30% = 3000\n        percentToFoundersAfterICO = 3000;\n\n        // % to presalers after ICO * 100, 10% = 1000\n        percentToPresalersFromICO = 1000;\n\n        // GracePeriod and ICO finished flags\n        icoFinished = false;\n\n        // Allow transfers token BEFORE ICO and PRESALE ends\n        allowTransfers = false;\n\n        // INIT VALUES FOR ICO START\n        buyPrice = 20000000; // 0.002 ETH for 1 STE\n        gracePeriodStartBlock = 4615918;\n        gracePeriodStopBlock = gracePeriodStartBlock + blocksPerHour * 8; // + 8 hours\n        gracePeriodAmount = 0;\n        gracePeriodMaxTarget = 5000000 * 100000000; // 5,000,000 STE for grace period\n        gracePeriodMinTran = 100000000000000000; // 0.1 ETH\n        burnAfterSoldAmount = 30000000;\n        // -----------------------------------------\n    }\n\n    /* Transfer coins */\n    function transfer(address _to, uint256 _value) public {\n        if (_to == 0x0) revert();\n        if (balanceOf[msg.sender] < _value) revert(); // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n        // Cancel transfer transactions before ICO was finished\n        if ((!icoFinished) && (msg.sender != bountyAddr) && (!allowTransfers)) revert();\n        // Calc dividends for _from and for _to addresses\n        uint256 divAmount_from = 0;\n        uint256 divAmount_to = 0;\n        if ((dividendsRound != 0) && (dividendsBuffer > 0)) {\n            divAmount_from = calcDividendsSum(msg.sender);\n            if ((divAmount_from == 0) && (paidDividends[msg.sender][dividendsRound] == 0)) paidDividends[msg.sender][dividendsRound] = 1;\n            divAmount_to = calcDividendsSum(_to);\n            if ((divAmount_to == 0) && (paidDividends[_to][dividendsRound] == 0)) paidDividends[_to][dividendsRound] = 1;\n        }\n        // End of calc dividends\n\n        balanceOf[msg.sender] -= _value; // Subtract from the sender\n        balanceOf[_to] += _value; // Add the same to the recipient\n\n        if (divAmount_from > 0) {\n            if (!msg.sender.send(divAmount_from)) revert();\n        }\n        if (divAmount_to > 0) {\n            if (!_to.send(divAmount_to)) revert();\n        }\n\n        /* Notify anyone listening that this transfer took place */\n        Transfer(msg.sender, _to, _value);\n    }\n\n    /* Allow another contract to spend some tokens */\n    function approve(address _spender, uint256 _value) public returns(bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function calcDividendsSum(address _for) private returns(uint256 dividendsAmount) {\n        if (dividendsRound == 0) return 0;\n        if (dividendsBuffer == 0) return 0;\n        if (balanceOf[_for] == 0) return 0;\n        if (paidDividends[_for][dividendsRound] != 0) return 0;\n        uint256 divAmount = 0;\n        divAmount = (dividendsSum * ((balanceOf[_for] * 10000000000000000) / totalSupply)) / 10000000000000000;\n        // Do not calc dividends less or equal than 0.0001 ETH\n        if (divAmount < 100000000000000) {\n            paidDividends[_for][dividendsRound] = 1;\n            return 0;\n        }\n        if (divAmount > dividendsBuffer) {\n            divAmount = dividendsBuffer;\n            dividendsBuffer = 0;\n        } else dividendsBuffer -= divAmount;\n        paidDividends[_for][dividendsRound] += divAmount;\n        return divAmount;\n    }\n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {\n        if (_to == 0x0) revert();\n        if (balanceOf[_from] < _value) revert(); // Check if the sender has enough\n        if ((balanceOf[_to] + _value) < balanceOf[_to]) revert(); // Check for overflows        \n        if (_value > allowance[_from][msg.sender]) revert(); // Check allowance\n        // Cancel transfer transactions before Ico and gracePeriod was finished\n        if ((!icoFinished) && (_from != bountyAddr) && (!transferFromWhiteList[_from]) && (!allowTransfers)) revert();\n\n        // Calc dividends for _from and for _to addresses\n        uint256 divAmount_from = 0;\n        uint256 divAmount_to = 0;\n        if ((dividendsRound != 0) && (dividendsBuffer > 0)) {\n            divAmount_from = calcDividendsSum(_from);\n            if ((divAmount_from == 0) && (paidDividends[_from][dividendsRound] == 0)) paidDividends[_from][dividendsRound] = 1;\n            divAmount_to = calcDividendsSum(_to);\n            if ((divAmount_to == 0) && (paidDividends[_to][dividendsRound] == 0)) paidDividends[_to][dividendsRound] = 1;\n        }\n        // End of calc dividends\n\n        balanceOf[_from] -= _value; // Subtract from the sender\n        balanceOf[_to] += _value; // Add the same to the recipient\n        allowance[_from][msg.sender] -= _value;\n\n        if (divAmount_from > 0) {\n            if (!_from.send(divAmount_from)) revert();\n        }\n        if (divAmount_to > 0) {\n            if (!_to.send(divAmount_to)) revert();\n        }\n\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    /* Admin function for transfer coins */\n    function transferFromAdmin(address _from, address _to, uint256 _value) public onlyOwner returns(bool success) {\n        if (_to == 0x0) revert();\n        if (balanceOf[_from] < _value) revert(); // Check if the sender has enough\n        if ((balanceOf[_to] + _value) < balanceOf[_to]) revert(); // Check for overflows        \n\n        // Calc dividends for _from and for _to addresses\n        uint256 divAmount_from = 0;\n        uint256 divAmount_to = 0;\n        if ((dividendsRound != 0) && (dividendsBuffer > 0)) {\n            divAmount_from = calcDividendsSum(_from);\n            if ((divAmount_from == 0) && (paidDividends[_from][dividendsRound] == 0)) paidDividends[_from][dividendsRound] = 1;\n            divAmount_to = calcDividendsSum(_to);\n            if ((divAmount_to == 0) && (paidDividends[_to][dividendsRound] == 0)) paidDividends[_to][dividendsRound] = 1;\n        }\n        // End of calc dividends\n\n        balanceOf[_from] -= _value; // Subtract from the sender\n        balanceOf[_to] += _value; // Add the same to the recipient\n\n        if (divAmount_from > 0) {\n            if (!_from.send(divAmount_from)) revert();\n        }\n        if (divAmount_to > 0) {\n            if (!_to.send(divAmount_to)) revert();\n        }\n\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    // This function is called when anyone send ETHs to this token\n    function buy() public payable {\n        if (isOwner()) {\n\n        } else {\n            uint256 amount = 0;\n            amount = msg.value / buyPrice; // calculates the amount of STE\n\n            uint256 amountToPresaleInvestor = 0;\n\n            // GracePeriod if current timestamp between gracePeriodStartBlock and gracePeriodStopBlock\n            if ( (block.number >= gracePeriodStartBlock) && (block.number <= gracePeriodStopBlock) ) {\n                if ( (msg.value < gracePeriodMinTran) || (gracePeriodAmount > gracePeriodMaxTarget) ) revert();\n                gracePeriodAmount += amount;\n                icoRaisedETH += msg.value;\n                icoInvestors[msg.sender] += amount;\n                balanceOf[this] -= amount * 10 / 100;\n                balanceOf[bountyAddr] += amount * 10 / 100;\n                soldedSupply += amount + amount * 10 / 100;\n\n            // Payment to presellers when ICO was finished\n\t        } else if ((icoFinished) && (presaleInvestorsETH[msg.sender] > 0) && (weiToPresalersFromICO > 0)) {\n                amountToPresaleInvestor = msg.value + (presaleInvestorsETH[msg.sender] * 100000000 / presaleAmountETH) * icoRaisedETH * percentToPresalersFromICO / (100000000 * 10000);\n                if (amountToPresaleInvestor > weiToPresalersFromICO) {\n                    amountToPresaleInvestor = weiToPresalersFromICO;\n                    weiToPresalersFromICO = 0;\n                } else {\n                    weiToPresalersFromICO -= amountToPresaleInvestor;\n                }\n            }\n\n\t\t\tif (buyPrice > 0) {\n\t\t\t\tif (balanceOf[this] < amount) revert();\t\t\t\t// checks if it has enough to sell\n\t\t\t\tbalanceOf[this] -= amount;\t\t\t\t\t\t\t// subtracts amount from token balance    \t\t    \n\t\t\t\tbalanceOf[msg.sender] += amount;\t\t\t\t\t// adds the amount to buyer's balance    \t\t    \n\t\t\t} else if ( amountToPresaleInvestor == 0 ) revert();\t// Revert if buyPrice = 0 and b\n\t\t\t\n\t\t\tif (amountToPresaleInvestor > 0) {\n\t\t\t\tpresaleInvestorsETH[msg.sender] = 0;\n\t\t\t\tif ( !msg.sender.send(amountToPresaleInvestor) ) revert(); // Send amountToPresaleInvestor to presaleer after Ico\n\t\t\t}\n\t\t\tTransfer(this, msg.sender, amount);\t\t\t\t\t// execute an event reflecting the change\n        }\n    }\n\n    function sell(uint256 amount) public {\n        if (sellPrice == 0) revert();\n        if (balanceOf[msg.sender] < amount) revert();\t// checks if the sender has enough to sell\n        uint256 ethAmount = amount * sellPrice;\t\t\t// amount of ETH for sell\n        balanceOf[msg.sender] -= amount;\t\t\t\t// subtracts the amount from seller's balance\n        balanceOf[this] += amount;\t\t\t\t\t\t// adds the amount to token balance\n        if (!msg.sender.send(ethAmount)) revert();\t\t// sends ether to the seller.\n        Transfer(msg.sender, this, amount);\n    }\n\n\n    /* \n    \tSet params of ICO\n    \t\n    \t_auctionsStartBlock, _auctionsStopBlock - block number of start and stop of Ico\n    \t_auctionsMinTran - minimum transaction amount for Ico in wei\n    */\n    function setICOParams(uint256 _gracePeriodPrice, uint32 _gracePeriodStartBlock, uint32 _gracePeriodStopBlock, uint256 _gracePeriodMaxTarget, uint256 _gracePeriodMinTran, bool _resetAmount) public onlyOwner {\n    \tgracePeriodStartBlock = _gracePeriodStartBlock;\n        gracePeriodStopBlock = _gracePeriodStopBlock;\n        gracePeriodMaxTarget = _gracePeriodMaxTarget;\n        gracePeriodMinTran = _gracePeriodMinTran;\n        \n        buyPrice = _gracePeriodPrice;    \t\n    \t\n        icoFinished = false;        \n\n        if (_resetAmount) icoRaisedETH = 0;\n    }\n\n    // Initiate dividends round ( owner can transfer ETH to contract and initiate dividends round )\n    // aDividendsRound - is integer value of dividends period such as YYYYMM example 201712 (year 2017, month 12)\n    function setDividends(uint32 _dividendsRound) public payable onlyOwner {\n        if (_dividendsRound > 0) {\n            if (msg.value < 1000000000000000) revert();\n            dividendsSum = msg.value;\n            dividendsBuffer = msg.value;\n        } else {\n            dividendsSum = 0;\n            dividendsBuffer = 0;\n        }\n        dividendsRound = _dividendsRound;\n    }\n\n    // Get dividends\n    function getDividends() public {\n        if (dividendsBuffer == 0) revert();\n        if (balanceOf[msg.sender] == 0) revert();\n        if (paidDividends[msg.sender][dividendsRound] != 0) revert();\n        uint256 divAmount = calcDividendsSum(msg.sender);\n        if (divAmount >= 100000000000000) {\n            if (!msg.sender.send(divAmount)) revert();\n        }\n    }\n\n    // Set sell and buy prices for token\n    function setPrices(uint256 _buyPrice, uint256 _sellPrice) public onlyOwner {\n        buyPrice = _buyPrice;\n        sellPrice = _sellPrice;\n    }\n\n\n    // Set sell and buy prices for token\n    function setAllowTransfers(bool _allowTransfers) public onlyOwner {\n        allowTransfers = _allowTransfers;\n    }\n\n    // Stop gracePeriod\n    function stopGracePeriod() public onlyOwner {\n        gracePeriodStopBlock = block.number;\n        buyPrice = 0;\n        sellPrice = 0;\n    }\n\n    // Stop ICO\n    function stopICO() public onlyOwner {\n        if ( gracePeriodStopBlock > block.number ) gracePeriodStopBlock = block.number;\n        \n        icoFinished = true;\n\n        weiToPresalersFromICO = icoRaisedETH * percentToPresalersFromICO / 10000;\n\n        if (soldedSupply >= (burnAfterSoldAmount * 100000000)) {\n\n            uint256 companyCost = soldedSupply * 1000000 * 10000;\n            companyCost = companyCost / (10000 - percentToFoundersAfterICO) / 1000000;\n            \n            uint256 amountToFounders = companyCost - soldedSupply;\n\n            // Burn extra coins if current balance of token greater than amountToFounders \n            if (balanceOf[this] > amountToFounders) {\n                Burn(this, (balanceOf[this]-amountToFounders));\n                balanceOf[this] = 0;\n                totalSupply = companyCost;\n            } else {\n                totalSupply += amountToFounders - balanceOf[this];\n            }\n\n            balanceOf[owner] += amountToFounders;\n            balanceOf[this] = 0;\n            Transfer(this, owner, amountToFounders);\n        }\n\n        buyPrice = 0;\n        sellPrice = 0;\n    }\n    \n    \n    // Withdraw ETH to founders \n    function withdrawToFounders(uint256 amount) public onlyOwner {\n    \tuint256 amount_to_withdraw = amount * 1000000000000000; // 0.001 ETH\n        if ((this.balance - weiToPresalersFromICO) < amount_to_withdraw) revert();\n        amount_to_withdraw = amount_to_withdraw / foundersAddresses.length;\n        uint8 i = 0;\n        uint8 errors = 0;\n        \n        for (i = 0; i < foundersAddresses.length; i++) {\n\t\t\tif (!foundersAddresses[i].send(amount_to_withdraw)) {\n\t\t\t\terrors++;\n\t\t\t}\n\t\t}\n    }\n    \n    function setBlockPerHour(uint256 _blocksPerHour) public onlyOwner {\n    \tblocksPerHour = _blocksPerHour;\n    }\n    \n    function setBurnAfterSoldAmount(uint256 _burnAfterSoldAmount)  public onlyOwner {\n    \tburnAfterSoldAmount = _burnAfterSoldAmount;\n    }\n    \n    function setTransferFromWhiteList(address _from, bool _allow) public onlyOwner {\n    \ttransferFromWhiteList[_from] = _allow;\n    }\n    \n    function addPresaleInvestor(address _addr, uint256 _amountETH, uint256 _amountSTE ) public onlyOwner {    \t\n\t    presaleInvestors[_addr] += _amountSTE;\n\t    balanceOf[this] -= _amountSTE;\n\t\tbalanceOf[_addr] += _amountSTE;\n\t    \n\t    if ( _amountETH > 0 ) {\n\t    \tpresaleInvestorsETH[_addr] += _amountETH;\n\t\t\tbalanceOf[this] -= _amountSTE / 10;\n\t\t\tbalanceOf[bountyAddr] += _amountSTE / 10;\n\t\t\t//presaleAmountETH += _amountETH;\n\t\t}\n\t\t\n\t    Transfer(this, _addr, _amountSTE);\n    }\n    \n    /**/    \n        \n    // BURN coins in HELL! (sender balance)\n    function burn(uint256 amount) public {\n        if (balanceOf[msg.sender] < amount) revert(); // Check if the sender has enough\n        balanceOf[msg.sender] -= amount; // Subtract from the sender\n        totalSupply -= amount; // Updates totalSupply\n        Burn(msg.sender, amount);\n    }\n\n    // BURN coins of token in HELL!\n    function burnContractCoins(uint256 amount) public onlySuperOwner {\n        if (balanceOf[this] < amount) revert(); // Check if the sender has enough\n        balanceOf[this] -= amount; // Subtract from the contract balance\n        totalSupply -= amount; // Updates totalSupply\n        Burn(this, amount);\n    }\n\n    /* This unnamed function is called whenever someone tries to send ether to it */\n    function() internal payable {\n        buy();\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_buyPrice\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnAfterSoldAmount\",\"type\":\"uint256\"}],\"name\":\"setBurnAfterSoldAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromAdmin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsBuffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gracePeriodMaxTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gracePeriodStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dividendsRound\",\"type\":\"uint32\"}],\"name\":\"setDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentToPresalersFromICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiToPresalersFromICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gracePeriodPrice\",\"type\":\"uint256\"},{\"name\":\"_gracePeriodStartBlock\",\"type\":\"uint32\"},{\"name\":\"_gracePeriodStopBlock\",\"type\":\"uint32\"},{\"name\":\"_gracePeriodMaxTarget\",\"type\":\"uint256\"},{\"name\":\"_gracePeriodMinTran\",\"type\":\"uint256\"},{\"name\":\"_resetAmount\",\"type\":\"bool\"}],\"name\":\"setICOParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferFromWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blocksPerHour\",\"type\":\"uint256\"}],\"name\":\"setBlockPerHour\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentToFoundersAfterICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icoInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAfterSoldAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleAmountETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopGracePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gracePeriodStopBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnContractCoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"paidDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amountETH\",\"type\":\"uint256\"},{\"name\":\"_amountSTE\",\"type\":\"uint256\"}],\"name\":\"addPresaleInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gracePeriodMinTran\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gracePeriodAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleInvestorsETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerHour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allowTransfers\",\"type\":\"bool\"}],\"name\":\"setAllowTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToFounders\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoRaisedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setTransferFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]",
  "bytecode": "606060405273630cc4c83fcc1121fed041126227d25bbeb51959600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507310945a93914adb1d68b6efaaa4a59dfb21ba9951600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280732f072f00328b6176257c21e6492576099056100173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001732640d4b3baf3f6cf9bb5732fe37fe1a9735a32ce73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250600390600262000155929190620003c1565b506040805190810160405280600981526020017f546f6b656e20302e31000000000000000000000000000000000000000000000081525060059080519060200190620001a392919062000443565b503415620001b057600080fd5b60405162004aec38038062004aec83398101604052808051820191906020018051820191905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506618de76816d8000600981905550600954601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506605de64fc1a4059600b8190555069032e168c69a1e3d3b6976011819055508160069080519060200190620002a292919062000443565b508060079080519060200190620002bb92919062000443565b5060088060006101000a81548160ff021916908360ff1602179055506000600a81905550610104600c81905550610bb8601860016101000a81548163ffffffff021916908363ffffffff1602179055506103e8600f60006101000a81548163ffffffff021916908363ffffffff1602179055506000601860006101000a81548160ff0219169083151502179055506000601860056101000a81548160ff0219169083151502179055506301312d00600e8190555062466eee6012819055506008600c54026012540160138190555060006016819055506601c6bf5263400060158190555067016345785d8a00006014819055506301c9c380601781905550505062000538565b826002810192821562000430579160200282015b828111156200042f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620003d5565b5b5090506200043f9190620004ca565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200048657805160ff1916838001178555620004b7565b82800160010185558215620004b7579182015b82811115620004b657825182559160200191906001019062000499565b5b509050620004c6919062000510565b5090565b6200050d91905b808211156200050957600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101620004d1565b5090565b90565b6200053591905b808211156200053157600081600090555060010162000517565b5090565b90565b6145a480620005486000396000f300606060405260043610610293576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305fefda71461029d57806306fdde03146102c957806308b73b3114610357578063095ea7b31461037a5780630d271720146103d45780630d6795311461044d578063111a1fe91461047657806318160ddd1461049f5780631a21c229146104c85780631d05bcb3146104f15780632185810b1461052657806323b872dd14610553578063242aa460146105cc578063313ce56714610619578063356e29271461064857806341461bad1461067557806342966c681461069e57806343ab850b146106c1578063443af072146106df5780634b750334146107145780635a3b7e421461073d57806370a08231146107cb57806371c107781461081857806377f54a82146108415780637e9b98ae1461089f5780638620410b146108f05780638da5cb5b14610919578063951d86a41461096e57806395d89b411461099157806399c20c3414610a1f5780639a95691514610a545780639dd7496414610aa15780639fd5298414610aca578063a08b144714610af3578063a6f2ae3a14610b1c578063a9059cbb14610b26578063b536fa6314610b68578063bb4cbd0b14610b7d578063c1b4aa5114610ba6578063c8e569a814610bc9578063cae9ca5114610bde578063cbd07fd814610c7b578063cc7fe38c14610cd7578063cf2f856e14610d22578063cf509b9d14610d4b578063d0fc899a14610d74578063dbcd258d14610dc1578063dd62ed3e14610dea578063df50afa414610e56578063e37d4fed14610e7b578063e4849b3214610e9e578063ed442e1414610ec1578063f2fde38b14610ed6578063f4a222e914610f0f578063f94d7a1014610f38575b61029b610f7c565b005b34156102a857600080fd5b6102c7600480803590602001909190803590602001909190505061146c565b005b34156102d457600080fd5b6102dc611533565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031c578082015181840152602081019050610301565b50505050905090810190601f1680156103495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036257600080fd5b61037860048080359060200190919050506115d1565b005b341561038557600080fd5b6103ba600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611690565b604051808215151515815260200191505060405180910390f35b34156103df57600080fd5b610433600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061171d565b604051808215151515815260200191505060405180910390f35b341561045857600080fd5b610460611cb3565b6040518082815260200191505060405180910390f35b341561048157600080fd5b610489611cb9565b6040518082815260200191505060405180910390f35b34156104aa57600080fd5b6104b2611cbf565b6040518082815260200191505060405180910390f35b34156104d357600080fd5b6104db611cc5565b6040518082815260200191505060405180910390f35b34156104fc57600080fd5b610504611ccb565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b341561053157600080fd5b610539611ce1565b604051808215151515815260200191505060405180910390f35b341561055e57600080fd5b6105b2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611cf4565b604051808215151515815260200191505060405180910390f35b34156105d757600080fd5b610603600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506123cb565b6040518082815260200191505060405180910390f35b341561062457600080fd5b61062c6123e3565b604051808260ff1660ff16815260200191505060405180910390f35b341561065357600080fd5b61065b6123f6565b604051808215151515815260200191505060405180910390f35b341561068057600080fd5b610688612409565b6040518082815260200191505060405180910390f35b34156106a957600080fd5b6106bf600480803590602001909190505061240f565b005b6106dd600480803563ffffffff16906020019091905050612509565b005b34156106ea57600080fd5b6106f2612629565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b341561071f57600080fd5b61072761263f565b6040518082815260200191505060405180910390f35b341561074857600080fd5b610750612645565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610790578082015181840152602081019050610775565b50505050905090810190601f1680156107bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107d657600080fd5b610802600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506126e3565b6040518082815260200191505060405180910390f35b341561082357600080fd5b61082b6126fb565b6040518082815260200191505060405180910390f35b341561084c57600080fd5b61089d600480803590602001909190803563ffffffff1690602001909190803563ffffffff169060200190919080359060200190919080359060200190919080351515906020019091905050612701565b005b34156108aa57600080fd5b6108d6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612817565b604051808215151515815260200191505060405180910390f35b34156108fb57600080fd5b610903612837565b6040518082815260200191505060405180910390f35b341561092457600080fd5b61092c61283d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561097957600080fd5b61098f6004808035906020019091905050612862565b005b341561099c57600080fd5b6109a4612921565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109e45780820151818401526020810190506109c9565b50505050905090810190601f168015610a115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610a2a57600080fd5b610a326129bf565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b3415610a5f57600080fd5b610a8b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506129d5565b6040518082815260200191505060405180910390f35b3415610aac57600080fd5b610ab46129ed565b6040518082815260200191505060405180910390f35b3415610ad557600080fd5b610add6129f3565b6040518082815260200191505060405180910390f35b3415610afe57600080fd5b610b066129f9565b6040518082815260200191505060405180910390f35b610b24610f7c565b005b3415610b3157600080fd5b610b66600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506129ff565b005b3415610b7357600080fd5b610b7b612f65565b005b3415610b8857600080fd5b610b90613033565b6040518082815260200191505060405180910390f35b3415610bb157600080fd5b610bc76004808035906020019091905050613039565b005b3415610bd457600080fd5b610bdc61318f565b005b3415610be957600080fd5b610c61600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506135cb565b604051808215151515815260200191505060405180910390f35b3415610c8657600080fd5b610cc1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff16906020019091905050613749565b6040518082815260200191505060405180910390f35b3415610ce257600080fd5b610d20600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001909190505061376e565b005b3415610d2d57600080fd5b610d35613a9f565b6040518082815260200191505060405180910390f35b3415610d5657600080fd5b610d5e613aa5565b6040518082815260200191505060405180910390f35b3415610d7f57600080fd5b610dab600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613aab565b6040518082815260200191505060405180910390f35b3415610dcc57600080fd5b610dd4613ac3565b6040518082815260200191505060405180910390f35b3415610df557600080fd5b610e40600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050613ac9565b6040518082815260200191505060405180910390f35b3415610e6157600080fd5b610e7960048080351515906020019091905050613aee565b005b3415610e8657600080fd5b610e9c6004808035906020019091905050613bc0565b005b3415610ea957600080fd5b610ebf6004808035906020019091905050613d60565b005b3415610ecc57600080fd5b610ed4613f07565b005b3415610ee157600080fd5b610f0d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050614040565b005b3415610f1a57600080fd5b610f226140df565b6040518082815260200191505060405180910390f35b3415610f4357600080fd5b610f7a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803515159060200190919050506140e5565b005b600080610f876141f5565b15610f9157611468565b60009150600e5434811515610fa257fe5b049150600090506012544310158015610fbd57506013544311155b1561114c57601454341080610fd55750601554601654115b15610fdf57600080fd5b8160166000828254019250508190555034600a6000828254019250508190555081601d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506064600a830281151561105b57fe5b04601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506064600a83028115156110b757fe5b04601a6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506064600a830281151561113557fe5b048201600b6000828254019250508190555061126e565b601860009054906101000a900460ff1680156111a757506000601b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b80156111b557506000601054115b1561126d5764e8d4a51000600f60009054906101000a900463ffffffff1663ffffffff16600a546011546305f5e100601b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540281151561122e57fe5b04020281151561123a57fe5b043401905060105481111561125b576010549050600060108190555061126c565b806010600082825403925050819055505b5b5b6000600e5411156113645781601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156112c557600080fd5b81601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611373565b600081141561137257600080fd5b5b6000811115611402576000601b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561140157600080fd5b5b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156115175750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561152157600080fd5b81600e8190555080600d819055505050565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115c95780601f1061159e576101008083540402835291602001916115c9565b820191906000526020600020905b8154815290600101906020018083116115ac57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561167c5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561168657600080fd5b8060178190555050565b600081602260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156117cd5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156117d757600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff1614156117fb57600080fd5b83601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561184757600080fd5b601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156118d457600080fd5b60009150600090506000601e60009054906101000a900463ffffffff1663ffffffff161415801561190757506000602054115b15611b1357611915866142b5565b915060008214801561199557506000602160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002054145b15611a0f576001602160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020819055505b611a18856142b5565b9050600081148015611a9857506000602160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002054145b15611b12576001602160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020819055505b5b83601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555083601a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000821115611bf7578573ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515611bf657600080fd5b5b6000811115611c41578473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611c4057600080fd5b5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b600b5481565b60205481565b60095481565b60155481565b601e60009054906101000a900463ffffffff1681565b601860059054906101000a900460ff1681565b6000806000808573ffffffffffffffffffffffffffffffffffffffff161415611d1c57600080fd5b83601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611d6857600080fd5b601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015611df557600080fd5b602260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054841115611e7e57600080fd5b601860009054906101000a900460ff16158015611ee95750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b8015611f3f5750601960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611f585750601860059054906101000a900460ff16155b15611f6257600080fd5b60009150600090506000601e60009054906101000a900463ffffffff1663ffffffff1614158015611f9557506000602054115b156121a157611fa3866142b5565b915060008214801561202357506000602160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002054145b1561209d576001602160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020819055505b6120a6856142b5565b905060008114801561212657506000602160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002054145b156121a0576001602160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020819055505b5b83601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555083601a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555083602260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600082111561230f578573ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561230e57600080fd5b5b6000811115612359578473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561235857600080fd5b5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b601c6020528060005260406000206000915090505481565b600860009054906101000a900460ff1681565b601860009054906101000a900460ff1681565b60125481565b80601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561245b57600080fd5b80601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550806009600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156125b45750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156125be57600080fd5b60008163ffffffff1611156125f45766038d7ea4c680003410156125e157600080fd5b34601f8190555034602081905550612605565b6000601f8190555060006020819055505b80601e60006101000a81548163ffffffff021916908363ffffffff16021790555050565b600f60009054906101000a900463ffffffff1681565b600d5481565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126db5780601f106126b0576101008083540402835291602001916126db565b820191906000526020600020905b8154815290600101906020018083116126be57829003601f168201915b505050505081565b601a6020528060005260406000206000915090505481565b60105481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156127ac5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156127b657600080fd5b8463ffffffff166012819055508363ffffffff16601381905550826015819055508160148190555085600e819055506000601860006101000a81548160ff021916908315150217905550801561280f576000600a819055505b505050505050565b60196020528060005260406000206000915054906101000a900460ff1681565b600e5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561290d5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561291757600080fd5b80600c8190555050565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129b75780601f1061298c576101008083540402835291602001916129b7565b820191906000526020600020905b81548152906001019060200180831161299a57829003601f168201915b505050505081565b601860019054906101000a900463ffffffff1681565b601d6020528060005260406000206000915090505481565b601f5481565b60175481565b60115481565b60008060008473ffffffffffffffffffffffffffffffffffffffff161415612a2657600080fd5b82601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612a7257600080fd5b601a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483601a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015612aff57600080fd5b601860009054906101000a900460ff16158015612b6a5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b8015612b835750601860059054906101000a900460ff16155b15612b8d57600080fd5b60009150600090506000601e60009054906101000a900463ffffffff1663ffffffff1614158015612bc057506000602054115b15612dcc57612bce336142b5565b9150600082148015612c4e57506000602160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002054145b15612cc8576001602160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020819055505b612cd1846142b5565b9050600081148015612d5157506000602160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002054145b15612dcb576001602160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020819055505b5b82601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000821115612eb0573373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515612eaf57600080fd5b5b6000811115612efa578373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515612ef957600080fd5b5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156130105750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561301a57600080fd5b436013819055506000600e819055506000600d81905550565b60135481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561309557600080fd5b80601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156130e157600080fd5b80601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550806009600082825403925050819055503073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a250565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561323d5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561324757600080fd5b43601354111561325957436013819055505b6001601860006101000a81548160ff021916908315150217905550612710600f60009054906101000a900463ffffffff1663ffffffff16600a540281151561329d57fe5b046010819055506305f5e10060175402600b541015156135b757612710620f4240600b5402029150620f4240601860019054906101000a900463ffffffff166127100363ffffffff16838115156132f057fe5b048115156132fa57fe5b049150600b548203905080601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561342b573073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca582601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054036040518082815260200191505060405180910390a26000601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160098190555061347d565b601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481036009600082825401925050819055505b80601a60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b6000600e819055506000600d819055505050565b6000808490506135db8585611690565b15613740578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156136d55780820151818401526020810190506136ba565b50505050905090810190601f1680156137025780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b151561372357600080fd5b6102c65a03f1151561373457600080fd5b50505060019150613741565b5b509392505050565b6021602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156138195750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561382357600080fd5b80601c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080601a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506000821115613a355781601b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600a8181151561396c57fe5b04601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600a818115156139c557fe5b04601a6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60145481565b60165481565b601b6020528060005260406000206000915090505481565b600c5481565b6022602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015613b995750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15613ba357600080fd5b80601860056101000a81548160ff02191690831515021790555050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015613c705750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15613c7a57600080fd5b66038d7ea4c6800084029250826010543073ffffffffffffffffffffffffffffffffffffffff1631031015613cae57600080fd5b600283811515613cba57fe5b0492506000915060009050600091505b60028260ff161015613d5a5760038260ff16600281101515613ce857fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501515613d4d5780806001019150505b8180600101925050613cca565b50505050565b600080600d541415613d7157600080fd5b81601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015613dbd57600080fd5b600d548202905081601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081601a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515613e9e57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b6000806020541415613f1857600080fd5b6000601a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415613f6557600080fd5b6000602160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002054141515613fe257600080fd5b613feb336142b5565b9050655af3107a40008110151561403d573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561403c57600080fd5b5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561409c57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156141905750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561419a57600080fd5b80601960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061429f5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156142ad57600190506142b2565b600090505b90565b6000806000601e60009054906101000a900463ffffffff1663ffffffff1614156142e25760009150614572565b600060205414156142f65760009150614572565b6000601a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156143475760009150614572565b6000602160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020541415156143c85760009150614572565b60009050662386f26fc10000600954662386f26fc10000601a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540281151561442957fe5b04601f540281151561443757fe5b049050655af3107a40008110156144c5576001602160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020019081526020016000208190555060009150614572565b6020548111156144e157602054905060006020819055506144f2565b806020600082825403925050819055505b80602160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000601e60009054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001908152602001600020600082825401925050819055508091505b509190505600a165627a7a72305820f044c3f2596409b90e3482bee906e10a30c39d375a8f91b76605fed729a3c2990029000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000011535465582045786368616e67652049434f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035354450000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000011535465582045786368616e67652049434f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035354450000000000000000000000000000000000000000000000000000000000"
}