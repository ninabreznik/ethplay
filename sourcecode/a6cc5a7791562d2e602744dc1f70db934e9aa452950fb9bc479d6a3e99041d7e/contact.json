{
  "address": "0x923108a439c4e8c2315c4f6521e5ce95b44e9b4c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Devery.io Token",
  "contractName": "BTTSToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-18\n*/\n\npragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contracts that can have tokens approved, and then a function execute\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's Token Teleportation Service Interface v1.00\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\n// ----------------------------------------------------------------------------\ncontract BTTSTokenInterface is ERC20Interface {\n    uint public constant bttsVersion = 100;\n\n    bytes public constant signingPrefix = \"\\x19Ethereum Signed Message:\\n32\";\n    bytes4 public constant signedTransferSig = \"\\x75\\x32\\xea\\xac\";\n    bytes4 public constant signedApproveSig = \"\\xe9\\xaf\\xa7\\xa1\";\n    bytes4 public constant signedTransferFromSig = \"\\x34\\x4b\\xcc\\x7d\";\n    bytes4 public constant signedApproveAndCallSig = \"\\xf1\\x6f\\x9b\\x53\";\n\n    event OwnershipTransferred(address indexed from, address indexed to);\n    event MinterUpdated(address from, address to);\n    event Mint(address indexed tokenOwner, uint tokens, bool lockAccount);\n    event MintingDisabled();\n    event TransfersEnabled();\n    event AccountUnlocked(address indexed tokenOwner);\n\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success);\n\n    // ------------------------------------------------------------------------\n    // signed{X} functions\n    // ------------------------------------------------------------------------\n    function signedTransferHash(address tokenOwner, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\n    function signedTransferCheck(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n    function signedTransfer(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n\n    function signedApproveHash(address tokenOwner, address spender, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\n    function signedApproveCheck(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n    function signedApprove(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n\n    function signedTransferFromHash(address spender, address from, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\n    function signedTransferFromCheck(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n    function signedTransferFrom(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n\n    function signedApproveAndCallHash(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce) public view returns (bytes32 hash);\n    function signedApproveAndCallCheck(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n    function signedApproveAndCall(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n\n    function mint(address tokenOwner, uint tokens, bool lockAccount) public returns (bool success);\n    function unlockAccount(address tokenOwner) public;\n    function disableMinting() public;\n    function enableTransfers() public;\n\n    // ------------------------------------------------------------------------\n    // signed{X}Check return status\n    // ------------------------------------------------------------------------\n    enum CheckResult {\n        Success,                           // 0 Success\n        NotTransferable,                   // 1 Tokens not transferable yet\n        AccountLocked,                     // 2 Account locked\n        SignerMismatch,                    // 3 Mismatch in signing account\n        AlreadyExecuted,                   // 4 Transfer already executed\n        InsufficientApprovedTokens,        // 5 Insufficient approved tokens\n        InsufficientApprovedTokensForFees, // 6 Insufficient approved tokens for fees\n        InsufficientTokens,                // 7 Insufficient tokens\n        InsufficientTokensForFees,         // 8 Insufficient tokens for fees\n        OverflowError                      // 9 Overflow error\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's Token Teleportation Service Library v1.00\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\n// ----------------------------------------------------------------------------\nlibrary BTTSLib {\n    struct Data {\n        // Ownership\n        address owner;\n        address newOwner;\n\n        // Minting and management\n        address minter;\n        bool mintable;\n        bool transferable;\n        mapping(address => bool) accountLocked;\n\n        // Token\n        string symbol;\n        string name;\n        uint8 decimals;\n        uint totalSupply;\n        mapping(address => uint) balances;\n        mapping(address => mapping(address => uint)) allowed;\n        mapping(address => mapping(bytes32 => bool)) executed;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Constants\n    // ------------------------------------------------------------------------\n    uint public constant bttsVersion = 100;\n    bytes public constant signingPrefix = \"\\x19Ethereum Signed Message:\\n32\";\n    bytes4 public constant signedTransferSig = \"\\x75\\x32\\xea\\xac\";\n    bytes4 public constant signedApproveSig = \"\\xe9\\xaf\\xa7\\xa1\";\n    bytes4 public constant signedTransferFromSig = \"\\x34\\x4b\\xcc\\x7d\";\n    bytes4 public constant signedApproveAndCallSig = \"\\xf1\\x6f\\x9b\\x53\";\n\n    // ------------------------------------------------------------------------\n    // Event\n    // ------------------------------------------------------------------------\n    event OwnershipTransferred(address indexed from, address indexed to);\n    event MinterUpdated(address from, address to);\n    event Mint(address indexed tokenOwner, uint tokens, bool lockAccount);\n    event MintingDisabled();\n    event TransfersEnabled();\n    event AccountUnlocked(address indexed tokenOwner);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n\n    // ------------------------------------------------------------------------\n    // Initialisation\n    // ------------------------------------------------------------------------\n    function init(Data storage self, address owner, string symbol, string name, uint8 decimals, uint initialSupply, bool mintable, bool transferable) public {\n        require(self.owner == address(0));\n        self.owner = owner;\n        self.symbol = symbol;\n        self.name = name;\n        self.decimals = decimals;\n        if (initialSupply > 0) {\n            self.balances[owner] = initialSupply;\n            self.totalSupply = initialSupply;\n            Mint(self.owner, initialSupply, false);\n            Transfer(address(0), self.owner, initialSupply);\n        }\n        self.mintable = mintable;\n        self.transferable = transferable;\n    }\n\n    // ------------------------------------------------------------------------\n    // Safe maths\n    // ------------------------------------------------------------------------\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n\n    // ------------------------------------------------------------------------\n    // Ownership\n    // ------------------------------------------------------------------------\n    function transferOwnership(Data storage self, address newOwner) public {\n        require(msg.sender == self.owner);\n        self.newOwner = newOwner;\n    }\n    function acceptOwnership(Data storage self) public {\n        require(msg.sender == self.newOwner);\n        OwnershipTransferred(self.owner, self.newOwner);\n        self.owner = self.newOwner;\n        self.newOwner = address(0);\n    }\n    function transferOwnershipImmediately(Data storage self, address newOwner) public {\n        require(msg.sender == self.owner);\n        OwnershipTransferred(self.owner, newOwner);\n        self.owner = newOwner;\n        self.newOwner = address(0);\n    }\n\n    // ------------------------------------------------------------------------\n    // Minting and management\n    // ------------------------------------------------------------------------\n    function setMinter(Data storage self, address minter) public {\n        require(msg.sender == self.owner);\n        require(self.mintable);\n        MinterUpdated(self.minter, minter);\n        self.minter = minter;\n    }\n    function mint(Data storage self, address tokenOwner, uint tokens, bool lockAccount) public returns (bool success) {\n        require(self.mintable);\n        require(msg.sender == self.minter || msg.sender == self.owner);\n        if (lockAccount) {\n            self.accountLocked[tokenOwner] = true;\n        }\n        self.balances[tokenOwner] = safeAdd(self.balances[tokenOwner], tokens);\n        self.totalSupply = safeAdd(self.totalSupply, tokens);\n        Mint(tokenOwner, tokens, lockAccount);\n        Transfer(address(0), tokenOwner, tokens);\n        return true;\n    }\n    function unlockAccount(Data storage self, address tokenOwner) public {\n        require(msg.sender == self.owner);\n        require(self.accountLocked[tokenOwner]);\n        self.accountLocked[tokenOwner] = false;\n        AccountUnlocked(tokenOwner);\n    }\n    function disableMinting(Data storage self) public {\n        require(self.mintable);\n        require(msg.sender == self.minter || msg.sender == self.owner);\n        self.mintable = false;\n        if (self.minter != address(0)) {\n            MinterUpdated(self.minter, address(0));\n            self.minter = address(0);\n        }\n        MintingDisabled();\n    }\n    function enableTransfers(Data storage self) public {\n        require(msg.sender == self.owner);\n        require(!self.transferable);\n        self.transferable = true;\n        TransfersEnabled();\n    }\n\n    // ------------------------------------------------------------------------\n    // Other functions\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(Data storage self, address tokenAddress, uint tokens) public returns (bool success) {\n        require(msg.sender == self.owner);\n        return ERC20Interface(tokenAddress).transfer(self.owner, tokens);\n    }\n\n    // ------------------------------------------------------------------------\n    // ecrecover from a signature rather than the signature in parts [v, r, s]\n    // The signature format is a compact form {bytes32 r}{bytes32 s}{uint8 v}.\n    // Compact means, uint8 is not padded to 32 bytes.\n    //\n    // An invalid signature results in the address(0) being returned, make\n    // sure that the returned result is checked to be non-zero for validity\n    //\n    // Parts from https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n    // ------------------------------------------------------------------------\n    function ecrecoverFromSig(Data storage /*self*/, bytes32 hash, bytes sig) public pure returns (address recoveredAddress) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (sig.length != 65) return address(0);\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            // Here we are loading the last 32 bytes. We exploit the fact that 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n        }\n        // Albeit non-transactional signatures are not specified by the YP, one would expect it to match the YP range of [27, 28]\n        // geth uses [0, 1] and some clients have followed. This might change, see https://github.com/ethereum/go-ethereum/issues/2053\n        if (v < 27) {\n          v += 27;\n        }\n        if (v != 27 && v != 28) return address(0);\n        return ecrecover(hash, v, r, s);\n    }\n\n    // ------------------------------------------------------------------------\n    // Get CheckResult message\n    // ------------------------------------------------------------------------\n    function getCheckResultMessage(Data storage /*self*/, BTTSTokenInterface.CheckResult result) public pure returns (string) {\n        if (result == BTTSTokenInterface.CheckResult.Success) {\n            return \"Success\";\n        } else if (result == BTTSTokenInterface.CheckResult.NotTransferable) {\n            return \"Tokens not transferable yet\";\n        } else if (result == BTTSTokenInterface.CheckResult.AccountLocked) {\n            return \"Account locked\";\n        } else if (result == BTTSTokenInterface.CheckResult.SignerMismatch) {\n            return \"Mismatch in signing account\";\n        } else if (result == BTTSTokenInterface.CheckResult.AlreadyExecuted) {\n            return \"Transfer already executed\";\n        } else if (result == BTTSTokenInterface.CheckResult.InsufficientApprovedTokens) {\n            return \"Insufficient approved tokens\";\n        } else if (result == BTTSTokenInterface.CheckResult.InsufficientApprovedTokensForFees) {\n            return \"Insufficient approved tokens for fees\";\n        } else if (result == BTTSTokenInterface.CheckResult.InsufficientTokens) {\n            return \"Insufficient tokens\";\n        } else if (result == BTTSTokenInterface.CheckResult.InsufficientTokensForFees) {\n            return \"Insufficient tokens for fees\";\n        } else if (result == BTTSTokenInterface.CheckResult.OverflowError) {\n            return \"Overflow error\";\n        } else {\n            return \"Unknown error\";\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Token functions\n    // ------------------------------------------------------------------------\n    function transfer(Data storage self, address to, uint tokens) public returns (bool success) {\n        // Owner and minter can move tokens before the tokens are transferable \n        require(self.transferable || (self.mintable && (msg.sender == self.owner  || msg.sender == self.minter)));\n        require(!self.accountLocked[msg.sender]);\n        self.balances[msg.sender] = safeSub(self.balances[msg.sender], tokens);\n        self.balances[to] = safeAdd(self.balances[to], tokens);\n        Transfer(msg.sender, to, tokens);\n        return true;\n    }\n    function approve(Data storage self, address spender, uint tokens) public returns (bool success) {\n        require(!self.accountLocked[msg.sender]);\n        self.allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    function transferFrom(Data storage self, address from, address to, uint tokens) public returns (bool success) {\n        require(self.transferable);\n        require(!self.accountLocked[from]);\n        self.balances[from] = safeSub(self.balances[from], tokens);\n        self.allowed[from][msg.sender] = safeSub(self.allowed[from][msg.sender], tokens);\n        self.balances[to] = safeAdd(self.balances[to], tokens);\n        Transfer(from, to, tokens);\n        return true;\n    }\n    function approveAndCall(Data storage self, address tokenContract, address spender, uint tokens, bytes data) public returns (bool success) {\n        require(!self.accountLocked[msg.sender]);\n        self.allowed[msg.sender][spender] = tokens;\n        Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, tokenContract, data);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Signed function\n    // ------------------------------------------------------------------------\n    function signedTransferHash(Data storage /*self*/, address tokenContract, address tokenOwner, address to, uint tokens, uint fee, uint nonce) public pure returns (bytes32 hash) {\n        hash = keccak256(signedTransferSig, tokenContract, tokenOwner, to, tokens, fee, nonce);\n    }\n    function signedTransferCheck(Data storage self, address tokenContract, address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (BTTSTokenInterface.CheckResult result) {\n        if (!self.transferable) return BTTSTokenInterface.CheckResult.NotTransferable;\n        bytes32 hash = signedTransferHash(self, tokenContract, tokenOwner, to, tokens, fee, nonce);\n        if (tokenOwner == address(0) || tokenOwner != ecrecoverFromSig(self, keccak256(signingPrefix, hash), sig)) return BTTSTokenInterface.CheckResult.SignerMismatch;\n        if (self.accountLocked[tokenOwner]) return BTTSTokenInterface.CheckResult.AccountLocked;\n        if (self.executed[tokenOwner][hash]) return BTTSTokenInterface.CheckResult.AlreadyExecuted;\n        uint total = safeAdd(tokens, fee);\n        if (self.balances[tokenOwner] < tokens) return BTTSTokenInterface.CheckResult.InsufficientTokens;\n        if (self.balances[tokenOwner] < total) return BTTSTokenInterface.CheckResult.InsufficientTokensForFees;\n        if (self.balances[to] + tokens < self.balances[to]) return BTTSTokenInterface.CheckResult.OverflowError;\n        if (self.balances[feeAccount] + fee < self.balances[feeAccount]) return BTTSTokenInterface.CheckResult.OverflowError;\n        return BTTSTokenInterface.CheckResult.Success;\n    }\n    function signedTransfer(Data storage self, address tokenContract, address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        require(self.transferable);\n        bytes32 hash = signedTransferHash(self, tokenContract, tokenOwner, to, tokens, fee, nonce);\n        require(tokenOwner != address(0) && tokenOwner == ecrecoverFromSig(self, keccak256(signingPrefix, hash), sig));\n        require(!self.accountLocked[tokenOwner]);\n        require(!self.executed[tokenOwner][hash]);\n        self.executed[tokenOwner][hash] = true;\n        self.balances[tokenOwner] = safeSub(self.balances[tokenOwner], tokens);\n        self.balances[to] = safeAdd(self.balances[to], tokens);\n        Transfer(tokenOwner, to, tokens);\n        self.balances[tokenOwner] = safeSub(self.balances[tokenOwner], fee);\n        self.balances[feeAccount] = safeAdd(self.balances[feeAccount], fee);\n        Transfer(tokenOwner, feeAccount, fee);\n        return true;\n    }\n    function signedApproveHash(Data storage /*self*/, address tokenContract, address tokenOwner, address spender, uint tokens, uint fee, uint nonce) public pure returns (bytes32 hash) {\n        hash = keccak256(signedApproveSig, tokenContract, tokenOwner, spender, tokens, fee, nonce);\n    }\n    function signedApproveCheck(Data storage self, address tokenContract, address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (BTTSTokenInterface.CheckResult result) {\n        if (!self.transferable) return BTTSTokenInterface.CheckResult.NotTransferable;\n        bytes32 hash = signedApproveHash(self, tokenContract, tokenOwner, spender, tokens, fee, nonce);\n        if (tokenOwner == address(0) || tokenOwner != ecrecoverFromSig(self, keccak256(signingPrefix, hash), sig)) return BTTSTokenInterface.CheckResult.SignerMismatch;\n        if (self.accountLocked[tokenOwner]) return BTTSTokenInterface.CheckResult.AccountLocked;\n        if (self.executed[tokenOwner][hash]) return BTTSTokenInterface.CheckResult.AlreadyExecuted;\n        if (self.balances[tokenOwner] < fee) return BTTSTokenInterface.CheckResult.InsufficientTokensForFees;\n        if (self.balances[feeAccount] + fee < self.balances[feeAccount]) return BTTSTokenInterface.CheckResult.OverflowError;\n        return BTTSTokenInterface.CheckResult.Success;\n    }\n    function signedApprove(Data storage self, address tokenContract, address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        require(self.transferable);\n        bytes32 hash = signedApproveHash(self, tokenContract, tokenOwner, spender, tokens, fee, nonce);\n        require(tokenOwner != address(0) && tokenOwner == ecrecoverFromSig(self, keccak256(signingPrefix, hash), sig));\n        require(!self.accountLocked[tokenOwner]);\n        require(!self.executed[tokenOwner][hash]);\n        self.executed[tokenOwner][hash] = true;\n        self.allowed[tokenOwner][spender] = tokens;\n        Approval(tokenOwner, spender, tokens);\n        self.balances[tokenOwner] = safeSub(self.balances[tokenOwner], fee);\n        self.balances[feeAccount] = safeAdd(self.balances[feeAccount], fee);\n        Transfer(tokenOwner, feeAccount, fee);\n        return true;\n    }\n    function signedTransferFromHash(Data storage /*self*/, address tokenContract, address spender, address from, address to, uint tokens, uint fee, uint nonce) public pure returns (bytes32 hash) {\n        hash = keccak256(signedTransferFromSig, tokenContract, spender, from, to, tokens, fee, nonce);\n    }\n    function signedTransferFromCheck(Data storage self, address tokenContract, address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (BTTSTokenInterface.CheckResult result) {\n        if (!self.transferable) return BTTSTokenInterface.CheckResult.NotTransferable;\n        bytes32 hash = signedTransferFromHash(self, tokenContract, spender, from, to, tokens, fee, nonce);\n        if (spender == address(0) || spender != ecrecoverFromSig(self, keccak256(signingPrefix, hash), sig)) return BTTSTokenInterface.CheckResult.SignerMismatch;\n        if (self.accountLocked[from]) return BTTSTokenInterface.CheckResult.AccountLocked;\n        if (self.executed[spender][hash]) return BTTSTokenInterface.CheckResult.AlreadyExecuted;\n        uint total = safeAdd(tokens, fee);\n        if (self.allowed[from][spender] < tokens) return BTTSTokenInterface.CheckResult.InsufficientApprovedTokens;\n        if (self.allowed[from][spender] < total) return BTTSTokenInterface.CheckResult.InsufficientApprovedTokensForFees;\n        if (self.balances[from] < tokens) return BTTSTokenInterface.CheckResult.InsufficientTokens;\n        if (self.balances[from] < total) return BTTSTokenInterface.CheckResult.InsufficientTokensForFees;\n        if (self.balances[to] + tokens < self.balances[to]) return BTTSTokenInterface.CheckResult.OverflowError;\n        if (self.balances[feeAccount] + fee < self.balances[feeAccount]) return BTTSTokenInterface.CheckResult.OverflowError;\n        return BTTSTokenInterface.CheckResult.Success;\n    }\n    function signedTransferFrom(Data storage self, address tokenContract, address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        require(self.transferable);\n        bytes32 hash = signedTransferFromHash(self, tokenContract, spender, from, to, tokens, fee, nonce);\n        require(spender != address(0) && spender == ecrecoverFromSig(self, keccak256(signingPrefix, hash), sig));\n        require(!self.accountLocked[from]);\n        require(!self.executed[spender][hash]);\n        self.executed[spender][hash] = true;\n        self.balances[from] = safeSub(self.balances[from], tokens);\n        self.allowed[from][spender] = safeSub(self.allowed[from][spender], tokens);\n        self.balances[to] = safeAdd(self.balances[to], tokens);\n        Transfer(from, to, tokens);\n        self.balances[from] = safeSub(self.balances[from], fee);\n        self.allowed[from][spender] = safeSub(self.allowed[from][spender], fee);\n        self.balances[feeAccount] = safeAdd(self.balances[feeAccount], fee);\n        Transfer(from, feeAccount, fee);\n        return true;\n    }\n    function signedApproveAndCallHash(Data storage /*self*/, address tokenContract, address tokenOwner, address spender, uint tokens, bytes data, uint fee, uint nonce) public pure returns (bytes32 hash) {\n        hash = keccak256(signedApproveAndCallSig, tokenContract, tokenOwner, spender, tokens, data, fee, nonce);\n    }\n    function signedApproveAndCallCheck(Data storage self, address tokenContract, address tokenOwner, address spender, uint tokens, bytes data, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (BTTSTokenInterface.CheckResult result) {\n        if (!self.transferable) return BTTSTokenInterface.CheckResult.NotTransferable;\n        bytes32 hash = signedApproveAndCallHash(self, tokenContract, tokenOwner, spender, tokens, data, fee, nonce);\n        if (tokenOwner == address(0) || tokenOwner != ecrecoverFromSig(self, keccak256(signingPrefix, hash), sig)) return BTTSTokenInterface.CheckResult.SignerMismatch;\n        if (self.accountLocked[tokenOwner]) return BTTSTokenInterface.CheckResult.AccountLocked;\n        if (self.executed[tokenOwner][hash]) return BTTSTokenInterface.CheckResult.AlreadyExecuted;\n        if (self.balances[tokenOwner] < fee) return BTTSTokenInterface.CheckResult.InsufficientTokensForFees;\n        if (self.balances[feeAccount] + fee < self.balances[feeAccount]) return BTTSTokenInterface.CheckResult.OverflowError;\n        return BTTSTokenInterface.CheckResult.Success;\n    }\n    function signedApproveAndCall(Data storage self, address tokenContract, address tokenOwner, address spender, uint tokens, bytes data, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        require(self.transferable);\n        bytes32 hash = signedApproveAndCallHash(self, tokenContract, tokenOwner, spender, tokens, data, fee, nonce);\n        require(tokenOwner != address(0) && tokenOwner == ecrecoverFromSig(self, keccak256(signingPrefix, hash), sig));\n        require(!self.accountLocked[tokenOwner]);\n        require(!self.executed[tokenOwner][hash]);\n        self.executed[tokenOwner][hash] = true;\n        self.allowed[tokenOwner][spender] = tokens;\n        Approval(tokenOwner, spender, tokens);\n        self.balances[tokenOwner] = safeSub(self.balances[tokenOwner], fee);\n        self.balances[feeAccount] = safeAdd(self.balances[feeAccount], fee);\n        Transfer(tokenOwner, feeAccount, fee);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, tokenContract, data);\n        return true;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's Token Teleportation Service Token Factory v1.00\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\n// ----------------------------------------------------------------------------\ncontract BTTSToken is BTTSTokenInterface {\n    using BTTSLib for BTTSLib.Data;\n\n    BTTSLib.Data data;\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    function BTTSToken(address owner, string symbol, string name, uint8 decimals, uint initialSupply, bool mintable, bool transferable) public {\n        data.init(owner, symbol, name, decimals, initialSupply, mintable, transferable);\n    }\n\n    // ------------------------------------------------------------------------\n    // Ownership\n    // ------------------------------------------------------------------------\n    function owner() public view returns (address) {\n        return data.owner;\n    }\n    function newOwner() public view returns (address) {\n        return data.newOwner;\n    }\n    function transferOwnership(address _newOwner) public {\n        data.transferOwnership(_newOwner);\n    }\n    function acceptOwnership() public {\n        data.acceptOwnership();\n    }\n    function transferOwnershipImmediately(address _newOwner) public {\n        data.transferOwnershipImmediately(_newOwner);\n    }\n\n    // ------------------------------------------------------------------------\n    // Token\n    // ------------------------------------------------------------------------\n    function symbol() public view returns (string) {\n        return data.symbol;\n    }\n    function name() public view returns (string) {\n        return data.name;\n    }\n    function decimals() public view returns (uint8) {\n        return data.decimals;\n    }\n\n    // ------------------------------------------------------------------------\n    // Minting and management\n    // ------------------------------------------------------------------------\n    function minter() public view returns (address) {\n        return data.minter;\n    }\n    function setMinter(address _minter) public {\n        data.setMinter(_minter);\n    }\n    function mint(address tokenOwner, uint tokens, bool lockAccount) public returns (bool success) {\n        return data.mint(tokenOwner, tokens, lockAccount);\n    }\n    function unlockAccount(address tokenOwner) public {\n        return data.unlockAccount(tokenOwner);\n    }\n    function mintable() public view returns (bool) {\n        return data.mintable;\n    }\n    function transferable() public view returns (bool) {\n        return data.transferable;\n    }\n    function disableMinting() public {\n        data.disableMinting();\n    }\n    function enableTransfers() public {\n        data.enableTransfers();\n    }\n\n    // ------------------------------------------------------------------------\n    // Other functions\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {\n        return data.transferAnyERC20Token(tokenAddress, tokens);\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ethers\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n\n    // ------------------------------------------------------------------------\n    // Token functions\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return data.totalSupply - data.balances[address(0)];\n    }\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return data.balances[tokenOwner];\n    }\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return data.allowed[tokenOwner][spender];\n    }\n    function transfer(address to, uint tokens) public returns (bool success) {\n        return data.transfer(to, tokens);\n    }\n    function approve(address spender, uint tokens) public returns (bool success) {\n        return data.approve(spender, tokens);\n    }\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        return data.transferFrom(from, to, tokens);\n    }\n    function approveAndCall(address spender, uint tokens, bytes _data) public returns (bool success) {\n        success = data.approveAndCall(this, spender, tokens, _data);\n    }\n\n    // ------------------------------------------------------------------------\n    // Signed function\n    // ------------------------------------------------------------------------\n    function signedTransferHash(address tokenOwner, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash) {\n        return data.signedTransferHash(address(this), tokenOwner, to, tokens, fee, nonce);\n    }\n    function signedTransferCheck(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result) {\n        return data.signedTransferCheck(address(this), tokenOwner, to, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedTransfer(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        return data.signedTransfer(address(this), tokenOwner, to, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedApproveHash(address tokenOwner, address spender, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash) {\n        return data.signedApproveHash(address(this), tokenOwner, spender, tokens, fee, nonce);\n    }\n    function signedApproveCheck(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result) {\n        return data.signedApproveCheck(address(this), tokenOwner, spender, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedApprove(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        return data.signedApprove(address(this), tokenOwner, spender, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedTransferFromHash(address spender, address from, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash) {\n        return data.signedTransferFromHash(address(this), spender, from, to, tokens, fee, nonce);\n    }\n    function signedTransferFromCheck(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result) {\n        return data.signedTransferFromCheck(address(this), spender, from, to, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedTransferFrom(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        return data.signedTransferFrom(address(this), spender, from, to, tokens, fee, nonce, sig, feeAccount);\n    }\n    function signedApproveAndCallHash(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce) public view returns (bytes32 hash) {\n        return data.signedApproveAndCallHash(address(this), tokenOwner, spender, tokens, _data, fee, nonce);\n    }\n    function signedApproveAndCallCheck(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result) {\n        return data.signedApproveAndCallCheck(address(this), tokenOwner, spender, tokens, _data, fee, nonce, sig, feeAccount);\n    }\n    function signedApproveAndCall(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success) {\n        return data.signedApproveAndCall(address(this), tokenOwner, spender, tokens, _data, fee, nonce, sig, feeAccount);\n    }\n}\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n    function transferOwnershipImmediately(address _newOwner) public onlyOwner {\n        OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// BokkyPooBah's Token Teleportation Service Token Factory v1.00\n//\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\n// ----------------------------------------------------------------------------\ncontract BTTSTokenFactory is Owned {\n\n    // ------------------------------------------------------------------------\n    // Internal data\n    // ------------------------------------------------------------------------\n    mapping(address => bool) _verify;\n\n    // ------------------------------------------------------------------------\n    // Event\n    // ------------------------------------------------------------------------\n    event BTTSTokenListing(address indexed ownerAddress,\n        address indexed bttsTokenAddress, \n        string symbol, string name, uint8 decimals, \n        uint initialSupply, bool mintable, bool transferable);\n\n\n    // ------------------------------------------------------------------------\n    // Anyone can call this method to verify whether the bttsToken contract at\n    // the specified address was deployed using this factory\n    //\n    // Parameters:\n    //   tokenContract  the bttsToken contract address\n    //\n    // Return values:\n    //   valid          did this BTTSTokenFactory create the BTTSToken contract?\n    //   decimals       number of decimal places for the token contract\n    //   initialSupply  the token initial supply\n    //   mintable       is the token mintable after deployment?\n    //   transferable   are the tokens transferable after deployment?\n    // ------------------------------------------------------------------------\n    function verify(address tokenContract) public view returns (\n        bool    valid,\n        address owner,\n        uint    decimals,\n        bool    mintable,\n        bool    transferable\n    ) {\n        valid = _verify[tokenContract];\n        if (valid) {\n            BTTSToken t = BTTSToken(tokenContract);\n            owner        = t.owner();\n            decimals     = t.decimals();\n            mintable     = t.mintable();\n            transferable = t.transferable();\n        }\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Any account can call this method to deploy a new BTTSToken contract.\n    // The owner of the BTTSToken contract will be the calling account\n    //\n    // Parameters:\n    //   symbol         symbol\n    //   name           name\n    //   decimals       number of decimal places for the token contract\n    //   initialSupply  the token initial supply\n    //   mintable       is the token mintable after deployment?\n    //   transferable   are the tokens transferable after deployment?\n    //\n    // For example, deploying a BTTSToken contract with `initialSupply` of\n    // 1,000.000000000000000000 tokens:\n    //   symbol         \"ME\"\n    //   name           \"My Token\"\n    //   decimals       18\n    //   initialSupply  10000000000000000000000 = 1,000.000000000000000000\n    //                  tokens\n    //   mintable       can tokens be minted after deployment?\n    //   transferable   are the tokens transferable after deployment?\n    //\n    // The BTTSTokenListing() event is logged with the following parameters\n    //   owner          the account that execute this transaction\n    //   symbol         symbol\n    //   name           name\n    //   decimals       number of decimal places for the token contract\n    //   initialSupply  the token initial supply\n    //   mintable       can tokens be minted after deployment?\n    //   transferable   are the tokens transferable after deployment?\n    // ------------------------------------------------------------------------\n    function deployBTTSTokenContract(\n        string symbol,\n        string name,\n        uint8 decimals,\n        uint initialSupply,\n        bool mintable,\n        bool transferable\n    ) public returns (address bttsTokenAddress) {\n        bttsTokenAddress = new BTTSToken(\n            msg.sender,\n            symbol,\n            name,\n            decimals,\n            initialSupply,\n            mintable,\n            transferable);\n        // Record that this factory created the trader\n        _verify[bttsTokenAddress] = true;\n        BTTSTokenListing(msg.sender, bttsTokenAddress, symbol, name, decimals, \n            initialSupply, mintable, transferable);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Factory owner can transfer out any accidentally sent ERC20 tokens\n    //\n    // Parameters:\n    //   tokenAddress  contract address of the token contract being withdrawn\n    //                 from\n    //   tokens        number of tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ethers\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signedApproveAndCallHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signedApproveHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signedTransferFromHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signedApproveAndCallSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedTransferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signedTransferSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedTransferCheck\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableMinting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipImmediately\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bttsVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"unlockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedApproveAndCallCheck\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"signedTransferHash\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signedApproveSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signedTransferFromSig\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedApproveCheck\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"lockAccount\",\"type\":\"bool\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signingPrefix\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedApprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedApproveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"sig\",\"type\":\"bytes\"},{\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"signedTransferFromCheck\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"mintable\",\"type\":\"bool\"},{\"name\":\"transferable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MinterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockAccount\",\"type\":\"bool\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransfersEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"AccountUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000f58546f5cde2a7ff5c91afc63b43380f0c198be800000000000000000000000000000000000000000000000000000000000000ee696f0000000000000000000000000000000000000000000000",
  "libraries": [
    {
      "name": "BTTSLib",
      "address": "0x9bb2eae0be24460a1f8292fb2c48c300f5622e64"
    }
  ]
}