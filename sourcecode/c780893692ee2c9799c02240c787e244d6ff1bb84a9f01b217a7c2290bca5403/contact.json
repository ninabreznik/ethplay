{
  "address": "0x07a7ed332c595b53a317afcee50733af571475e7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "eMTV",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-07\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * @title eMTV ERC20 token by Multiversum.\n *\n * @dev Based on OpenZeppelin framework.\n *\n * * ERC20 Standard\n * * total supply: 141000000 (initially given to the contract author).\n * * decimals: 18\n */\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = true;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   * Owner ignores the pause check.\n   */\n  modifier whenNotPaused() {\n    if(msg.sender != owner) {\n      require(!paused);\n    }\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   * Owner ignores the pause check.\n   */\n  modifier whenPaused() {\n    if(msg.sender != owner) {\n      require(paused);\n    }\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic, Pausable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n      require(_value <= balances[msg.sender]);\n      // no need to require value <= totalSupply, since that would imply the\n      // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n      address burner = msg.sender;\n      balances[burner] = balances[burner].sub(_value);\n      totalSupply = totalSupply.sub(_value);\n      Burn(burner, _value);\n  }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract eMTV is BasicToken, BurnableToken, ERC20 {\n\n  string public constant name = \"eMTV: Multiversum ERC20 Token\";\n  string public constant symbol = \"eMTV\";\n  uint8 public constant decimals = 18;\n  string public constant version = \"1.0\";\n\n  uint256 constant INITIAL_SUPPLY_EMTV = 141000000;\n\n  /// @dev whether an address is permitted to perform burn operations.\n  mapping(address => bool) public isBurner;\n\n  /// @dev whether an address is allowed to spend on behalf of another address\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Constructor that:\n   * * gives all of existing tokens to the message sender;\n   * * initializes the burners (also adding the message sender);\n   */\n  function eMTV() public {\n      totalSupply = INITIAL_SUPPLY_EMTV * (10 ** uint256(decimals));\n      balances[msg.sender] = totalSupply;\n\n      isBurner[msg.sender] = true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Grant or remove burn permissions. Only owner can do that!\n   */\n  function grantBurner(address _burner, bool _value) public onlyOwner {\n      isBurner[_burner] = _value;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the burner.\n   */\n  modifier onlyBurner() {\n      require(isBurner[msg.sender]);\n      _;\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * Only an address listed in `isBurner` can do this.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public onlyBurner {\n      super.burn(_value);\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"grantBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526001805460a060020a60ff02191674010000000000000000000000000000000000000000179055341561003657600080fd5b60018054600160a060020a033316600160a060020a0319909116811782556a74a1e950e6dee1ad000000600081815591825260026020908152604080842092909255600390529020805460ff19169091179055610d2f806100986000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a057806318160ddd146101d657806323b872dd146101fb578063313ce567146102235780633f4ba83a1461024c57806342966c68146102615780634334614a1461027757806354fd4d5014610296578063567a03a7146102a95780635c975abb146102cd57806366188463146102e057806370a08231146103025780638456cb59146103215780638da5cb5b1461033457806395d89b4114610363578063a9059cbb14610376578063d73dd62314610398578063dd62ed3e146103ba578063f2fde38b146103df575b600080fd5b341561012157600080fd5b6101296103fe565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016557808201518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ab57600080fd5b6101c2600160a060020a0360043516602435610435565b604051901515815260200160405180910390f35b34156101e157600080fd5b6101e96104a1565b60405190815260200160405180910390f35b341561020657600080fd5b6101c2600160a060020a03600435811690602435166044356104a7565b341561022e57600080fd5b610236610629565b60405160ff909116815260200160405180910390f35b341561025757600080fd5b61025f61062e565b005b341561026c57600080fd5b61025f6004356106c3565b341561028257600080fd5b6101c2600160a060020a03600435166106f6565b34156102a157600080fd5b61012961070b565b34156102b457600080fd5b61025f600160a060020a03600435166024351515610742565b34156102d857600080fd5b6101c2610788565b34156102eb57600080fd5b6101c2600160a060020a0360043516602435610798565b341561030d57600080fd5b6101e9600160a060020a0360043516610892565b341561032c57600080fd5b61025f6108ad565b341561033f57600080fd5b610347610947565b604051600160a060020a03909116815260200160405180910390f35b341561036e57600080fd5b610129610956565b341561038157600080fd5b6101c2600160a060020a036004351660243561098d565b34156103a357600080fd5b6101c2600160a060020a0360043516602435610ab6565b34156103c557600080fd5b6101e9600160a060020a0360043581169060243516610b5a565b34156103ea57600080fd5b61025f600160a060020a0360043516610b85565b60408051908101604052601d81527f654d54563a204d756c746976657273756d20455243323020546f6b656e000000602082015281565b600160a060020a03338116600081815260046020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6000600160a060020a03831615156104be57600080fd5b600160a060020a0384166000908152600260205260409020548211156104e357600080fd5b600160a060020a038085166000908152600460209081526040808320339094168352929052205482111561051657600080fd5b600160a060020a03841660009081526002602052604090205461053f908363ffffffff610c2016565b600160a060020a038086166000908152600260205260408082209390935590851681522054610574908363ffffffff610c3216565b600160a060020a038085166000908152600260209081526040808320949094558783168252600481528382203390931682529190915220546105bc908363ffffffff610c2016565b600160a060020a03808616600081815260046020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b601281565b60015433600160a060020a0390811691161461064957600080fd5b60015433600160a060020a039081169116146106775760015460a060020a900460ff16151561067757600080fd5b6001805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600160a060020a03331660009081526003602052604090205460ff1615156106ea57600080fd5b6106f381610c48565b50565b60036020526000908152604090205460ff1681565b60408051908101604052600381527f312e300000000000000000000000000000000000000000000000000000000000602082015281565b60015433600160a060020a0390811691161461075d57600080fd5b600160a060020a03919091166000908152600360205260409020805460ff1916911515919091179055565b60015460a060020a900460ff1681565b600160a060020a033381166000908152600460209081526040808320938616835292905290812054808311156107f557600160a060020a03338116600090815260046020908152604080832093881683529290529081205561082c565b610805818463ffffffff610c2016565b600160a060020a033381166000908152600460209081526040808320938916835292905220555b600160a060020a0333811660008181526004602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526002602052604090205490565b60015433600160a060020a039081169116146108c857600080fd5b60015433600160a060020a039081169116146108f55760015460a060020a900460ff16156108f557600080fd5b6001805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600154600160a060020a031681565b60408051908101604052600481527f654d545600000000000000000000000000000000000000000000000000000000602082015281565b60015460009033600160a060020a039081169116146109bd5760015460a060020a900460ff16156109bd57600080fd5b600160a060020a03831615156109d257600080fd5b600160a060020a0333166000908152600260205260409020548211156109f757600080fd5b600160a060020a033316600090815260026020526040902054610a20908363ffffffff610c2016565b600160a060020a033381166000908152600260205260408082209390935590851681522054610a55908363ffffffff610c3216565b600160a060020a0380851660008181526002602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600460209081526040808320938616835292905290812054610aee908363ffffffff610c3216565b600160a060020a0333811660008181526004602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60015433600160a060020a03908116911614610ba057600080fd5b600160a060020a0381161515610bb557600080fd5b600154600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610c2c57fe5b50900390565b600082820183811015610c4157fe5b9392505050565b600160a060020a033316600090815260026020526040812054821115610c6d57600080fd5b5033600160a060020a038116600090815260026020526040902054610c929083610c20565b600160a060020a03821660009081526002602052604081209190915554610cbf908363ffffffff610c2016565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a250505600a165627a7a723058209eb1f35ab9497ca985c9f558ba471debb17e274db83c0af2c0c99f3d6ae01db30029"
}