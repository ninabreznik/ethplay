{
  "address": "0xe7cefbe857659690fd0d288752a81c7238a00756",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-06\n*/\n\npragma solidity ^0.4.25;\n\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) public pure  returns (uint256)  {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b)public pure returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b)public pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b)public pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function _assert(bool assertion)public pure {\n    assert(!assertion);\n  }\n}\n\n\ncontract ERC20Interface {\n  string public name;\n  string public symbol;\n  uint8 public  decimals;\n  uint public totalSupply;\n  \n  function transfer(address _to, uint256 _value)public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);\n  function approve(address _spender, uint256 _value)public returns (bool success);\n  function allowance(address _owner, address _spender)public view returns (uint256 remaining);\n  \n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n }\n \ncontract ERC20 is ERC20Interface,SafeMath{\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) allowed;\n\n    constructor(string memory _name) public {\n       name = _name;  \n       symbol = \"bzc\";\n       decimals = 8;\n       totalSupply = 20000000000000000;\n       balanceOf[msg.sender] = totalSupply;\n    }\n\n  function transfer(address _to, uint256 _value)public returns (bool success) {\n      require(_to != address(0));\n      require(balanceOf[msg.sender] >= _value);\n      require(balanceOf[ _to] + _value >= balanceOf[ _to]); \n\n      balanceOf[msg.sender] =SafeMath.safeSub(balanceOf[msg.sender],_value) ;\n      balanceOf[_to] =SafeMath.safeAdd(balanceOf[_to],_value) ;\n\n      emit Transfer(msg.sender, _to, _value);\n\n      return true;\n  }\n\n\n  function transferFrom(address _from, address _to, uint256 _value)public returns (bool success) {\n      require(_to != address(0));\n      require(allowed[_from][msg.sender] >= _value);\n      require(balanceOf[_from] >= _value);\n      require(balanceOf[ _to] + _value >= balanceOf[ _to]);\n\n      balanceOf[_from] =SafeMath.safeSub(balanceOf[_from],_value) ;\n      balanceOf[_to] =SafeMath.safeAdd(balanceOf[_to],_value) ;\n\n      allowed[_from][msg.sender] =SafeMath.safeSub(allowed[_from][msg.sender],_value) ;\n\n      emit Transfer(msg.sender, _to, _value);\n      return true;\n  }\n\n  function approve(address _spender, uint256 _value)public returns (bool success) {\n      allowed[msg.sender][_spender] = _value;\n\n      emit Approval(msg.sender, _spender, _value);\n      return true;\n  }\n\n  function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n  }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405161095e38038061095e83398101604052805101805161003a9060009060208401906100b0565b506040805180820190915260038082527f627a630000000000000000000000000000000000000000000000000000000000602090920191825261007f916001916100b0565b50506002805460ff1916600817905566470de4df82000060038190553360009081526004602052604090205561014b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f157805160ff191683800117855561011e565b8280016001018555821561011e579182015b8281111561011e578251825591602001919060010190610103565b5061012a92915061012e565b5090565b61014891905b8082111561012a5760008155600101610134565b90565b6108048061015a6000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd578063313ce567146101e757806370a082311461021257806395d89b4114610233578063a293d1e814610248578063a9059cbb14610263578063b5931f7c14610287578063cdeda055146102a2578063d05c78da146102be578063dd62ed3e146102d9578063e6cb901314610300575b600080fd5b3480156100e057600080fd5b506100e961031b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a03600435166024356103a9565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab61040f565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a0360043581169060243516604435610415565b3480156101f357600080fd5b506101fc6105a4565b6040805160ff9092168252519081900360200190f35b34801561021e57600080fd5b506101ab600160a060020a03600435166105ad565b34801561023f57600080fd5b506100e96105bf565b34801561025457600080fd5b506101ab600435602435610619565b34801561026f57600080fd5b50610182600160a060020a036004351660243561062b565b34801561029357600080fd5b506101ab600435602435610729565b3480156102ae57600080fd5b506102bc6004351515610764565b005b3480156102ca57600080fd5b506101ab60043560243561076f565b3480156102e557600080fd5b506101ab600160a060020a0360043581169060243516610793565b34801561030c57600080fd5b506101ab6004356024356107be565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103a15780601f10610376576101008083540402835291602001916103a1565b820191906000526020600020905b81548152906001019060200180831161038457829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60035481565b6000600160a060020a038316151561042c57600080fd5b600160a060020a038416600090815260056020908152604080832033845290915290205482111561045c57600080fd5b600160a060020a03841660009081526004602052604090205482111561048157600080fd5b600160a060020a03831660009081526004602052604090205482810110156104a857600080fd5b600160a060020a0384166000908152600460205260409020546104cb9083610619565b600160a060020a0380861660009081526004602052604080822093909355908516815220546104fa90836107be565b600160a060020a0380851660009081526004602090815260408083209490945591871681526005825282812033825290915220546105389083610619565b600160a060020a038086166000908152600560209081526040808320338085529083529281902094909455835186815293519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b60025460ff1681565b60046020526000908152604090205481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103a15780601f10610376576101008083540402835291602001916103a1565b60008282111561062557fe5b50900390565b6000600160a060020a038316151561064257600080fd5b3360009081526004602052604090205482111561065e57600080fd5b600160a060020a038316600090815260046020526040902054828101101561068557600080fd5b3360009081526004602052604090205461069f9083610619565b3360009081526004602052604080822092909255600160a060020a038516815220546106cb90836107be565b600160a060020a0384166000818152600460209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008080831161073557fe5b828481151561074057fe5b049050828481151561074e57fe5b06818402018414151561075d57fe5b9392505050565b801561076c57fe5b50565b600082820283158061078b575082848281151561078857fe5b04145b151561075d57fe5b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600082820183811080159061078b57508281101561075d57fe00a165627a7a723058202440fd9cb09d194360058f66fad961d723f86798508d3a40f8dff40d0421c445002900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000008627a63636861696e000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000008627a63636861696e000000000000000000000000000000000000000000000000"
}