{
  "address": "0x1782165d47e012da09093fb4dc33456bdc36bbc8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TrustWallet",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-24\n*/\n\npragma solidity ^0.4.19;\ncontract TrustWallet {\n\n    struct User {\n        // How many seconds the user has to wait between initiating the\n        // transaction and finalizing the transaction. This cannot be\n        // changed.\n        uint delay;\n\n        address added_by;\n        uint time_added;\n\n        address removed_by;\n        uint time_removed;\n\n        // When this user added another user. (This is to prevent a user from\n        // adding many users too quickly).\n        uint time_added_another_user;\n    }\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n\n        address initiated_by;\n        uint time_initiated;\n\n        address finalized_by;\n        uint time_finalized;\n\n        // True if this trasaction was executed. If false, this means it was canceled.\n        bool is_executed;\n    }\n\n    Transaction[] public transactions;\n    mapping (address => User) public users;\n    address[] public userAddresses;\n\n    modifier onlyActiveUsersAllowed() {\n        require(users[msg.sender].time_added != 0);\n        require(users[msg.sender].time_removed == 0);\n        _;\n    }\n\n    modifier transactionMustBePending() {\n        require(isTransactionPending());\n        _;\n    }\n\n    modifier transactionMustNotBePending() {\n        require(!isTransactionPending());\n        _;\n    }\n\n    // Returns true if there is a transaction pending.\n    function isTransactionPending() internal constant returns (bool) {\n        if (transactions.length == 0) return false;\n        return transactions[transactions.length - 1].time_initiated > 0 &&\n            transactions[transactions.length - 1].time_finalized == 0;\n    }\n\n    // Constructor. Creates the first user.\n    function TrustWallet(address first_user) public {\n        users[first_user] = User({\n            delay: 0,\n            time_added: now,\n            added_by: 0x0,\n            time_removed: 0,\n            removed_by: 0x0,\n            time_added_another_user: now\n        });\n        userAddresses.push(first_user);\n    }\n\n    function () public payable {}\n\n    // Initiates a transaction. There must not be any pending transaction.\n    function initiateTransaction(address _destination, uint _value, bytes _data)\n        public\n        onlyActiveUsersAllowed()\n        transactionMustNotBePending()\n    {\n        transactions.push(Transaction({\n            destination: _destination,\n            value: _value,\n            data: _data,\n            initiated_by: msg.sender,\n            time_initiated: now,\n            finalized_by: 0x0,\n            time_finalized: 0,\n            is_executed: false\n        }));\n    }\n\n    // Executes the transaction. The delay of the the transaction\n    // initiated_by must have passed in order to call this function. Any active\n    // user is able to call this function.\n    function executeTransaction()\n        public\n        onlyActiveUsersAllowed()\n        transactionMustBePending()\n    {\n        Transaction storage transaction = transactions[transactions.length - 1];\n        require(now > transaction.time_initiated + users[transaction.initiated_by].delay);\n        transaction.is_executed = true;\n        transaction.time_finalized = now;\n        transaction.finalized_by = msg.sender;\n        require(transaction.destination.call.value(transaction.value)(transaction.data));\n    }\n\n    // Cancels the transaction. The delay of the user who is trying\n    // to cancel must be lower or equal to the delay of the\n    // transaction initiated_by.\n    function cancelTransaction()\n        public\n        onlyActiveUsersAllowed()\n        transactionMustBePending()\n    {\n        Transaction storage transaction = transactions[transactions.length - 1];\n        // Either the sender is a higher priority user, or twice the waiting time of\n        // the user trying to cancel has passed. This is to prevent transactions from\n        // getting \"stuck\" if the call() fails when trying to execute the transaction.\n        require(users[msg.sender].delay <= users[transaction.initiated_by].delay ||\n            now - transaction.time_initiated > users[msg.sender].delay * 2);\n        transaction.time_finalized = now;\n        transaction.finalized_by = msg.sender;\n    }\n\n    // Adds a user to the wallet. The waiting time of the new user must\n    // be greater or equal to the delay of the sender. A user that\n    // already exists or was removed cannot be added. To prevent spam,\n    // a user must wait delay before adding another user.\n    function addUser(address new_user, uint new_user_time)\n        public\n        onlyActiveUsersAllowed()\n    {\n        require(users[new_user].time_added == 0);\n        require(users[new_user].time_removed == 0);\n\n        User storage sender = users[msg.sender];\n        require(now > sender.delay + sender.time_added_another_user);\n        require(new_user_time >= sender.delay);\n\n        sender.time_added_another_user = now;\n        users[new_user] = User({\n            delay: new_user_time,\n            time_added: now,\n            added_by: msg.sender,\n            time_removed: 0,\n            removed_by: 0x0,\n            // The new user will have to wait one delay before being\n            // able to add a new user.\n            time_added_another_user: now\n        });\n        userAddresses.push(new_user);\n    }\n\n    // Removes a user. The sender must have a lower or equal delay\n    // as the user that she is trying to remove.\n    function removeUser(address userAddr)\n        public\n        onlyActiveUsersAllowed()\n    {\n        require(users[userAddr].time_added != 0);\n        require(users[userAddr].time_removed == 0);\n\n        User storage sender = users[msg.sender];\n        require(sender.delay <= users[userAddr].delay);\n\n        users[userAddr].removed_by = msg.sender;\n        users[userAddr].time_removed = now;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051602080610e5e83398101604052808051915060c0905060405190810160409081526000808352602080840182905242838501819052606085018390526080850183905260a0850152600160a060020a03851682526001905220815181556020820151600182018054600160a060020a031916600160a060020a0392909216919091179055604082015181600201556060820151600382018054600160a060020a031916600160a060020a03929092169190911790556080820151816004015560a08201516005909101555060028054600181016100ef838261011e565b5060009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055610168565b81548183558181151161014257600083815260209020610142918101908301610147565b505050565b61016591905b80821115610161576000815560010161014d565b5090565b90565b610ce7806101776000396000f30060606040526004361061008d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630eb288f1811461008f578063263a6d79146100a2578063502c9bd5146101075780635c8cf75014610139578063985751881461014c5780639ace38c21461016b578063a87430ba1461024c578063d3017193146102b0575b005b341561009a57600080fd5b61008d6102d2565b34156100ad57600080fd5b61008d60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061045995505050505050565b341561011257600080fd5b61011d6004356105ec565b604051600160a060020a03909116815260200160405180910390f35b341561014457600080fd5b61008d610614565b341561015757600080fd5b61008d600160a060020a0360043516610722565b341561017657600080fd5b61018160043561082a565b604051600160a060020a03808a16825260208201899052868116606083015260808201869052841660a082015260c0810183905281151560e0820152610100604082018181528854600260001960018316158502019091160491830182905290610120830190899080156102365780601f1061020b57610100808354040283529160200191610236565b820191906000526020600020905b81548152906001019060200180831161021957829003601f168201915b5050995050505050505050505060405180910390f35b341561025757600080fd5b61026b600160a060020a036004351661088b565b604051958652600160a060020a039485166020870152604080870194909452919093166060850152608084019290925260a083019190915260c0909101905180910390f35b34156102bb57600080fd5b61008d600160a060020a03600435166024356108cd565b600160a060020a03331660009081526001602052604081206002015415156102f957600080fd5b600160a060020a0333166000908152600160205260409020600401541561031f57600080fd5b610327610aa6565b151561033257600080fd5b60008054600019810190811061034457fe5b60009182526020808320600360089093020191820154600160a060020a0316835260019052604090912054600482015491925001421161038357600080fd5b60078101805460ff19166001908117909155426006830155600582018054600160a060020a03338116600160a060020a0319909216919091179091558254918301549116906002830160405180828054600181600116156101000203166002900480156104315780601f1061040657610100808354040283529160200191610431565b820191906000526020600020905b81548152906001019060200180831161041457829003601f168201915b505091505060006040518083038185876187965a03f192505050151561045657600080fd5b50565b600160a060020a033316600090815260016020526040902060020154151561048057600080fd5b600160a060020a033316600090815260016020526040902060040154156104a657600080fd5b6104ae610aa6565b156104b857600080fd5b60008054600181016104ca8382610b14565b916000526020600020906008020160006101006040519081016040908152600160a060020a0380891683526020830188905290820186905233166060820152426080820152600060a0820181905260c0820181905260e082015291905081518154600160a060020a031916600160a060020a039190911617815560208201518160010155604082015181600201908051610568929160200190610b45565b506060820151600382018054600160a060020a031916600160a060020a03929092169190911790556080820151816004015560a0820151600582018054600160a060020a031916600160a060020a039290921691909117905560c0820151816006015560e0820151600791909101805460ff19169115159190911790555050505050565b60028054829081106105fa57fe5b600091825260209091200154600160a060020a0316905081565b600160a060020a033316600090815260016020526040812060020154151561063b57600080fd5b600160a060020a0333166000908152600160205260409020600401541561066157600080fd5b610669610aa6565b151561067457600080fd5b60008054600019810190811061068657fe5b60009182526020808320600360089093020191820154600160a060020a0390811684526001909152604080842054339092168452909220549092501115806106f35750600160a060020a033316600090815260016020526040902054600482015460029091024291909103115b15156106fe57600080fd5b4260068201556005018054600160a060020a03191633600160a060020a0316179055565b600160a060020a033316600090815260016020526040812060020154151561074957600080fd5b600160a060020a0333166000908152600160205260409020600401541561076f57600080fd5b600160a060020a038216600090815260016020526040902060020154151561079657600080fd5b600160a060020a038216600090815260016020526040902060040154156107bc57600080fd5b50600160a060020a033381166000908152600160205260408082209284168252902054815411156107ec57600080fd5b50600160a060020a039081166000908152600160205260409020600381018054600160a060020a031916339093169290921790915542600490910155565b600080548290811061083857fe5b600091825260209091206008909102018054600182015460038301546004840154600585015460068601546007870154600160a060020a0396871698509496600201959384169492939091169160ff1688565b6001602081905260009182526040909120805491810154600282015460038301546004840154600590940154600160a060020a03938416949293909116919086565b600160a060020a03331660009081526001602052604081206002015415156108f457600080fd5b600160a060020a0333166000908152600160205260409020600401541561091a57600080fd5b600160a060020a0383166000908152600160205260409020600201541561094057600080fd5b600160a060020a0383166000908152600160205260409020600401541561096657600080fd5b50600160a060020a03331660009081526001602052604090206005810154815401421161099257600080fd5b80548210156109a057600080fd5b42600582015560c06040519081016040908152838252600160a060020a03338116602080850191909152428385018190526000606086018190526080860181905260a086019190915291871682526001905220815181556020820151600182018054600160a060020a031916600160a060020a0392909216919091179055604082015181600201556060820151600382018054600160a060020a031916600160a060020a03929092169190911790556080820151816004015560a0820151600590910155506002805460018101610a778382610bc3565b5060009182526020909120018054600160a060020a031916600160a060020a0394909416939093179092555050565b600080541515610ab857506000610b11565b6000805481906000198101908110610acc57fe5b906000526020600020906008020160040154118015610b0e5750600080546000198101908110610af857fe5b9060005260206000209060080201600601546000145b90505b90565b815481835581811511610b4057600802816008028360005260206000209182019101610b409190610be7565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b8657805160ff1916838001178555610bb3565b82800160010185558215610bb3579182015b82811115610bb3578251825591602001919060010190610b98565b50610bbf929150610c5d565b5090565b815481835581811511610b4057600083815260209020610b40918101908301610c5d565b610b1191905b80821115610bbf578054600160a060020a0319168155600060018201819055610c196002830182610c77565b50600381018054600160a060020a0319908116909155600060048301819055600583018054909216909155600682015560078101805460ff19169055600801610bed565b610b1191905b80821115610bbf5760008155600101610c63565b50805460018160011615610100020316600290046000825580601f10610c9d5750610456565b601f0160209004906000526020600020908101906104569190610c5d5600a165627a7a72305820ff9514ff8f56e9de1ac9cba6ac51140a49f0721fca595f6794e59903f8ab105f002900000000000000000000000003ecd895db6225f326abffeeb5963462bd8e4ae0",
  "constructorArguments": "00000000000000000000000003ecd895db6225f326abffeeb5963462bd8e4ae0"
}