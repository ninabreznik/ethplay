{
  "address": "0xd8331445543a415cf213314bc6ac5bd710e4288e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OptionsEscrow",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-04\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title ERC20\n * @dev ERC20 token interface\n */\n contract ERC20 {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n }\n\n/**\n * @title OptionsEscrow\n * @dev Escrow that holds tokens for a beneficiary with various vesting schedules and strike prices\n * The contract owner may grant options and reclaim tokens from expired options.\n */\n\ncontract OptionsEscrow is Ownable {\n    using SafeMath for uint;\n\n    struct Option {\n        address beneficiary;\n        uint tokenAmount;\n        uint strikeMultiple;\n        uint128 vestUntil;\n        uint128 expiration;\n    }\n\n    address public token;\n    uint public issuedTokens;\n    uint64 public optionsCount;\n    mapping (address => Option) public grantedOptions;\n\n    event GrantOption(address indexed beneficiary, uint tokenAmount, uint strikeMultiple, uint128 vestUntil, uint128 expiration);\n    event ExerciseOption(address indexed beneficiary, uint exercisedAmount, uint strikeMultiple);\n    event ReclaimOption(address indexed beneficiary);\n\n    /**\n     * @dev Constructor.\n     * @param _token The token for which options are being granted.\n     */\n    constructor(address _token) public {\n        /* require(token != address(0)); */\n\n        token = _token;\n        issuedTokens = 0;\n        optionsCount = 0;\n    }\n\n    /**\n     * @dev Issue an option for a beneficiary with a custom amount, strike price, and vesting schedule\n     *      NOTE: the use of a strike multiple means that the token-to-wei ration must always be positive\n     *            this can be worked around be also adding a strikeDenomination\n     * @param _beneficiary The recipient of the option,\n     * @param _tokenAmount The amount of tokens available to be claimed\n     * @param _strikeMultiple The amount of tokens for each wei provided\n     * @param _vestUntil The timestamp (epoch in seconds) that the option becomes exercisable\n     * @param _expiration The timestamp (epoch in seconds) that the option is no longer exercisable\n     */\n    function issueOption(address _beneficiary,\n                            uint _tokenAmount,\n                            uint _strikeMultiple,\n                         uint128 _vestUntil,\n                         uint128 _expiration) onlyOwner public {\n        uint _issuedTokens = issuedTokens.add(_tokenAmount);\n\n        require(_tokenAmount > 0 &&\n                _expiration > _vestUntil &&\n                _vestUntil > block.timestamp &&\n                ERC20(token).balanceOf(this) > _issuedTokens);\n\n        Option memory option = Option(_beneficiary, _tokenAmount, _strikeMultiple, _vestUntil, _expiration);\n\n        grantedOptions[_beneficiary] = option;\n        optionsCount++;\n        issuedTokens = _issuedTokens;\n\n        emit GrantOption(_beneficiary, _tokenAmount, _strikeMultiple, _vestUntil, _expiration);\n    }\n\n    /**\n     * @dev Allows the beneficiary to exercise a vested option.\n     *      The option can be partially exercised.\n     */\n    function () public payable {\n        Option storage option = grantedOptions[msg.sender];\n\n        require(option.beneficiary == msg.sender &&\n                option.vestUntil <= block.timestamp &&\n                option.expiration > block.timestamp &&\n                option.tokenAmount > 0);\n\n        uint amountExercised = msg.value.mul(option.strikeMultiple);\n        if(amountExercised > option.tokenAmount) {\n            amountExercised = option.tokenAmount;\n        }\n\n        option.tokenAmount = option.tokenAmount.sub(amountExercised);\n        issuedTokens = issuedTokens.sub(amountExercised);\n        require(ERC20(token).transfer(msg.sender, amountExercised));\n\n        emit ExerciseOption(msg.sender, amountExercised, option.strikeMultiple);\n    }\n\n    /**\n     * @dev Allows the owner to reclaim tokens from a list of options that have expired\n     * @param beneficiaries An array of beneficiary addresses\n     */\n    function reclaimExpiredOptionTokens(address[] beneficiaries) public onlyOwner returns (uint reclaimedTokenAmount) {\n        reclaimedTokenAmount = 0;\n        for (uint i=0; i<beneficiaries.length; i++) {\n            Option storage option = grantedOptions[beneficiaries[i]];\n            if (option.expiration <= block.timestamp) {\n                reclaimedTokenAmount = reclaimedTokenAmount.add(option.tokenAmount);\n                option.tokenAmount = 0;\n\n                emit ReclaimOption(beneficiaries[i]);\n            }\n        }\n        issuedTokens = issuedTokens.sub(reclaimedTokenAmount);\n        require(ERC20(token).transfer(owner, reclaimedTokenAmount));\n    }\n\n    /**\n     * @dev Allows the owner to reclaim tokens that have not been issued\n     */\n    function reclaimUnissuedTokens() public onlyOwner returns (uint reclaimedTokenAmount) {\n        reclaimedTokenAmount = ERC20(token).balanceOf(this) - issuedTokens;\n        require(ERC20(token).transfer(owner, reclaimedTokenAmount));\n    }\n\n    /**\n     * @dev Allows the owner to withdraw eth from exercised options\n     */\n    function withdrawEth() public onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Constant getter to see details of an option\n     * @param _beneficiary The address of beneficiary\n     */\n    function getOption(address _beneficiary) public constant returns(address beneficiary,\n                                                          uint tokenAmount,\n                                                          uint strikeMultiple,\n                                                          uint128 vestUntil,\n                                                          uint128 expiration) {\n        Option memory option = grantedOptions[_beneficiary];\n        beneficiary = option.beneficiary;\n        tokenAmount = option.tokenAmount;\n        strikeMultiple = option.strikeMultiple;\n        vestUntil = option.vestUntil;\n        expiration = option.expiration;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"reclaimUnissuedTokens\",\"outputs\":[{\"name\":\"reclaimedTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"optionsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getOption\",\"outputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"strikeMultiple\",\"type\":\"uint256\"},{\"name\":\"vestUntil\",\"type\":\"uint128\"},{\"name\":\"expiration\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"}],\"name\":\"reclaimExpiredOptionTokens\",\"outputs\":[{\"name\":\"reclaimedTokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_strikeMultiple\",\"type\":\"uint256\"},{\"name\":\"_vestUntil\",\"type\":\"uint128\"},{\"name\":\"_expiration\",\"type\":\"uint128\"}],\"name\":\"issueOption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"grantedOptions\",\"outputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"strikeMultiple\",\"type\":\"uint256\"},{\"name\":\"vestUntil\",\"type\":\"uint128\"},{\"name\":\"expiration\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strikeMultiple\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vestUntil\",\"type\":\"uint128\"},{\"indexed\":false,\"name\":\"expiration\",\"type\":\"uint128\"}],\"name\":\"GrantOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"exercisedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strikeMultiple\",\"type\":\"uint256\"}],\"name\":\"ExerciseOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"ReclaimOption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610db7833981016040525160008054600160a060020a03199081163317825560018054600160a060020a0390941693909116929092179091556002556003805467ffffffffffffffff19169055610d44806100736000396000f3006080604052600436106100b95763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663029737c4811461027f5780631a1dbabb146102a65780632c61fb15146102d85780635a9ae4c01461033a578063715018a61461038f5780638da5cb5b146103a6578063a0b5fab3146103d7578063a0ef91df14610410578063b534b5b714610425578063f2fde38b1461043a578063fc0c546a1461045b578063fde6c50d14610470575b33600081815260046020526040812080549092600160a060020a039091161480156100f357506003820154426001608060020a0390911611155b801561012057506003820154427001000000000000000000000000000000009091046001608060020a0316115b8015610130575060008260010154115b151561013b57600080fd5b600282015461015190349063ffffffff61049116565b90508160010154811115610166575060018101545b600182015461017b908263ffffffff6104c016565b6001830155600254610193908263ffffffff6104c016565b600255600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b15801561020357600080fd5b505af1158015610217573d6000803e3d6000fd5b505050506040513d602081101561022d57600080fd5b5051151561023a57600080fd5b6002820154604080518381526020810192909252805133927f330e8c700945f80f5d57be1c0a1aa494ee3d8a1bf374675a74713a1d752f6f1692908290030190a25050005b34801561028b57600080fd5b506102946104d2565b60408051918252519081900360200190f35b3480156102b257600080fd5b506102bb610632565b6040805167ffffffffffffffff9092168252519081900360200190f35b3480156102e457600080fd5b506102f9600160a060020a0360043516610642565b60408051600160a060020a0390961686526020860194909452848401929092526001608060020a039081166060850152166080830152519081900360a00190f35b34801561034657600080fd5b5060408051602060048035808201358381028086018501909652808552610294953695939460249493850192918291850190849080828437509497506106da9650505050505050565b34801561039b57600080fd5b506103a46108ac565b005b3480156103b257600080fd5b506103bb610918565b60408051600160a060020a039092168252519081900360200190f35b3480156103e357600080fd5b506103a4600160a060020a03600435166024356044356001608060020a0360643581169060843516610927565b34801561041c57600080fd5b506103a4610b84565b34801561043157600080fd5b50610294610bd9565b34801561044657600080fd5b506103a4600160a060020a0360043516610bdf565b34801561046757600080fd5b506103bb610bff565b34801561047c57600080fd5b506102f9600160a060020a0360043516610c0e565b60008215156104a2575060006104ba565b508181028183828115156104b257fe5b04146104ba57fe5b92915050565b6000828211156104cc57fe5b50900390565b60008054600160a060020a031633146104ea57600080fd5b600254600154604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505050506040513d602081101561057d57600080fd5b505160015460008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152959094036024860181905293519395509091169263a9059cbb9260448083019360209383900390910190829087803b1580156105f857600080fd5b505af115801561060c573d6000803e3d6000fd5b505050506040513d602081101561062257600080fd5b5051151561062f57600080fd5b90565b60035467ffffffffffffffff1681565b6000806000806000610652610cea565b50505050600160a060020a03928316600090815260046020908152604091829020825160a0810184528154909616808752600182015492870183905260028201549387018490526003909101546001608060020a0380821660608901819052700100000000000000000000000000000000909204166080909701879052909691959294509250565b6000805481908190600160a060020a031633146106f657600080fd5b60009250600091505b83518210156107e25760046000858481518110151561071a57fe5b602090810291909101810151600160a060020a031682528101919091526040016000206003810154909150427001000000000000000000000000000000009091046001608060020a0316116107d757600181015461077f90849063ffffffff610c6016565b60006001830155845190935084908390811061079757fe5b90602001906020020151600160a060020a03167f15a33a6be432010435089fb48859b6bf666a1ab6a8587937f087b6eca6cfeb7e60405160405180910390a25b6001909101906106ff565b6002546107f5908463ffffffff6104c016565b60025560015460008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018890529051919093169263a9059cbb9260448083019360209390929083900390910190829087803b15801561086e57600080fd5b505af1158015610882573d6000803e3d6000fd5b505050506040513d602081101561089857600080fd5b505115156108a557600080fd5b5050919050565b600054600160a060020a031633146108c357600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b6000610931610cea565b600054600160a060020a0316331461094857600080fd5b60025461095b908763ffffffff610c6016565b915060008611801561097e5750836001608060020a0316836001608060020a0316115b8015610992575042846001608060020a0316115b8015610a2c5750600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518492600160a060020a0316916370a082319160248083019260209291908290030181600087803b1580156109fe57600080fd5b505af1158015610a12573d6000803e3d6000fd5b505050506040513d6020811015610a2857600080fd5b5051115b1515610a3757600080fd5b506040805160a081018252600160a060020a0388811680835260208084018a81528486018a81526001608060020a038a811660608089018281528c84166080808c0182815260008b815260048b528e90208d51815473ffffffffffffffffffffffffffffffffffffffff19169d169c909c178c5597516001808d019190915596516002808d0191909155925160039b8c01805499516fffffffffffffffffffffffffffffffff19909a16918816919091178716700100000000000000000000000000000000999097169890980295909517909655885467ffffffffffffffff19811667ffffffffffffffff91821690960116949094179097559189905587518d81529384018c905283880191909152938201529351929390927fcd481a3643475b134a9eac8b1f0252620149c4113bac11ac8ab0fd41721e0da4929181900390910190a250505050505050565b600054600160a060020a03163314610b9b57600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015610bd6573d6000803e3d6000fd5b50565b60025481565b600054600160a060020a03163314610bf657600080fd5b610bd681610c6d565b600154600160a060020a031681565b6004602052600090815260409020805460018201546002830154600390930154600160a060020a039092169290916001608060020a038082169170010000000000000000000000000000000090041685565b818101828110156104ba57fe5b600160a060020a0381161515610c8257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152905600a165627a7a723058204047fb994468a818133b1b517fb63007c24f492cc35d81cd56cf35db0240920e00290000000000000000000000000b6bc42cb9b89259a3aa986363fa37a9cbf03b8e",
  "constructorArguments": "0000000000000000000000000b6bc42cb9b89259a3aa986363fa37a9cbf03b8e"
}