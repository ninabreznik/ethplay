{
  "address": "0xf91254fe7e6e9f5986a0b41da45a8a2549f1871b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FTV",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-16\n*/\n\npragma solidity ^0.4.11;\n\n// File: zeppelin/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/FTV.sol\n\n/*\nImplements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20.\n*/\npragma solidity ^0.4.11;\n\n\ncontract FTV is StandardToken {\n\n    // data structures\n    bool public presaleFinished = false;\n\n    uint256 public soldTokens;\n\n    string public constant name = \"FTV Coin Deluxe\";\n\n    string public constant symbol = \"FTV\";\n\n    uint8 public constant decimals = 18;\n\n    mapping(address => bool) public whitelist;\n\n    mapping(address => address) public referral;\n\n    address public reserves;\n\n    address public stateControl;\n\n    address public whitelistControl;\n\n    address public tokenAssignmentControl;\n\n    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n\n    uint256 public constant maxTotalSupply = 100000000 * pointMultiplier; //100M tokens\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n    function FTV(\n        address _stateControl\n      , address _whitelistControl\n      , address _tokenAssignmentControl\n      , address _reserves\n    ) public\n    {\n        stateControl = _stateControl;\n        whitelistControl = _whitelistControl;\n        tokenAssignmentControl = _tokenAssignmentControl;\n        totalSupply = maxTotalSupply;\n        soldTokens = 0;\n        reserves = _reserves;\n        balances[reserves] = totalSupply;\n        Mint(reserves, totalSupply);\n        Transfer(0x0, reserves, totalSupply);\n        finishMinting();\n    }\n\n    event Whitelisted(address addr);\n\n    event Referred(address parent, address child);\n\n    modifier onlyWhitelist() {\n        require(msg.sender == whitelistControl);\n        _;\n    }\n\n    modifier onlyStateControl() {\n        require(msg.sender == stateControl);\n        _;\n    }\n\n    modifier onlyTokenAssignmentControl() {\n        require(msg.sender == tokenAssignmentControl);\n        _;\n    }\n\n    modifier requirePresale() {\n        require(presaleFinished == false);\n        _;\n    }\n\n    // Make sure this contract cannot receive ETH.\n    function() payable public\n    {\n        revert();\n    }\n\n    function issueTokensToUser(address beneficiary, uint256 amount)\n    internal\n    {\n        uint256 soldTokensAfterInvestment = soldTokens.add(amount);\n        require(soldTokensAfterInvestment <= maxTotalSupply);\n\n        balances[beneficiary] = balances[beneficiary].add(amount);\n        balances[reserves] = balances[reserves].sub(amount);\n        soldTokens = soldTokensAfterInvestment;\n        Transfer(reserves, beneficiary, amount);\n    }\n\n    function issueTokensWithReferral(address beneficiary, uint256 amount)\n    internal\n    {\n        issueTokensToUser(beneficiary, amount);\n        if (referral[beneficiary] != 0x0) {\n            // Send 5% referral bonus to the \"parent\".\n            issueTokensToUser(referral[beneficiary], amount.mul(5).div(100));\n        }\n    }\n\n    function addPresaleAmount(address beneficiary, uint256 amount)\n    public\n    onlyTokenAssignmentControl\n    requirePresale\n    {\n        issueTokensWithReferral(beneficiary, amount);\n    }\n\n    function finishMinting()\n    internal\n    {\n        mintingFinished = true;\n        MintFinished();\n    }\n\n    function finishPresale()\n    public\n    onlyStateControl\n    {\n        presaleFinished = true;\n    }\n\n    function addToWhitelist(address _whitelisted)\n    public\n    onlyWhitelist\n    {\n        whitelist[_whitelisted] = true;\n        Whitelisted(_whitelisted);\n    }\n\n\n    function addReferral(address _parent, address _child)\n    public\n    onlyWhitelist\n    {\n        require(_parent != _child);\n        require(whitelist[_parent] == true && whitelist[_child] == true);\n        require(referral[_child] == 0x0);\n        referral[_child] = _parent;\n        Referred(_parent, _child);\n    }\n\n    //if this contract gets a balance in some other ERC20 contract - or even iself - then we can rescue it.\n    function rescueToken(ERC20Basic _foreignToken, address _to)\n    public\n    onlyTokenAssignmentControl\n    {\n        _foreignToken.transfer(_to, _foreignToken.balanceOf(this));\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000470691bbaa6434fb7b0d5579ca16eed012329c5b000000000000000000000000d855db7cff9093c68d96c9715f582b01a9c3920a000000000000000000000000fac0a2e05af8877e7bf19bf0d875c9ef45b33b83000000000000000000000000fef82184059b4ae1c6c3d16e556428527757a790"
}