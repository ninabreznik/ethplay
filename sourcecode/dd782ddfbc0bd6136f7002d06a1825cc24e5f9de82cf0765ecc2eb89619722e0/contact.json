{
  "address": "0xfcad2859f3e602d4cfb9aca35465a618f9009f7b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Dragonereum: Egg",
  "contractName": "EggStorage",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-29\n*/\n\npragma solidity 0.4.25;\n\nlibrary SafeMath256 {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        if (b == 0) return 1;\n\n        uint256 c = a ** b;\n        assert(c / (a ** (b - 1)) == a);\n        return c;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function _validateAddress(address _addr) internal pure {\n        require(_addr != address(0), \"invalid address\");\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"not a contract owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        _validateAddress(newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract Controllable is Ownable {\n    mapping(address => bool) controllers;\n\n    modifier onlyController {\n        require(_isController(msg.sender), \"no controller rights\");\n        _;\n    }\n\n    function _isController(address _controller) internal view returns (bool) {\n        return controllers[_controller];\n    }\n\n    function _setControllers(address[] _controllers) internal {\n        for (uint256 i = 0; i < _controllers.length; i++) {\n            _validateAddress(_controllers[i]);\n            controllers[_controllers[i]] = true;\n        }\n    }\n}\n\ncontract Upgradable is Controllable {\n    address[] internalDependencies;\n    address[] externalDependencies;\n\n    function getInternalDependencies() public view returns(address[]) {\n        return internalDependencies;\n    }\n\n    function getExternalDependencies() public view returns(address[]) {\n        return externalDependencies;\n    }\n\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\n            _validateAddress(_newDependencies[i]);\n        }\n        internalDependencies = _newDependencies;\n    }\n\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\n        externalDependencies = _newDependencies;\n        _setControllers(_newDependencies);\n    }\n}\n\ncontract ERC721Basic {\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    function balanceOf(address _owner) public view returns (uint256 _balance);\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n    function exists(uint256 _tokenId) public view returns (bool _exists);\n\n    function approve(address _to, uint256 _tokenId) public;\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n    function setApprovalForAll(address _operator, bool _approved) public;\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\n\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool);\n}\n\ncontract ERC721Enumerable is ERC721Basic {\n    function totalSupply() public view returns (uint256);\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n    function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\ncontract ERC721Metadata is ERC721Basic {\n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n    function tokenURI(uint256 _tokenId) public view returns (string);\n}\n\n\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {}\n\ncontract ERC721Receiver {\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes _data\n    )\n        public\n        returns(bytes4);\n}\n\ncontract ERC721BasicToken is ERC721Basic, Upgradable {\n\n    using SafeMath256 for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) internal tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) internal tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => uint256) internal ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n    function _checkRights(bool _has) internal pure {\n        require(_has, \"no rights to manage\");\n    }\n\n    function _validateAddress(address _addr) internal pure {\n        require(_addr != address(0), \"invalid address\");\n    }\n\n    function _checkOwner(uint256 _tokenId, address _owner) internal view {\n        require(ownerOf(_tokenId) == _owner, \"not an owner\");\n    }\n\n    function _checkThatUserHasTokens(bool _has) internal pure {\n        require(_has, \"user has no tokens\");\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        _validateAddress(_owner);\n        return ownedTokensCount[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address) {\n        address owner = tokenOwner[_tokenId];\n        _validateAddress(owner);\n        return owner;\n    }\n\n    function exists(uint256 _tokenId) public view returns (bool) {\n        address owner = tokenOwner[_tokenId];\n        return owner != address(0);\n    }\n\n    function _approve(address _from, address _to, uint256 _tokenId) internal {\n        address owner = ownerOf(_tokenId);\n        require(_to != owner, \"can't be approved to owner\");\n        _checkRights(_from == owner || isApprovedForAll(owner, _from));\n\n        if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n            tokenApprovals[_tokenId] = _to;\n            emit Approval(owner, _to, _tokenId);\n        }\n    }\n\n    function approve(address _to, uint256 _tokenId) public {\n        _approve(msg.sender, _to, _tokenId);\n    }\n\n    function remoteApprove(address _to, uint256 _tokenId) external onlyController {\n        _approve(tx.origin, _to, _tokenId);\n    }\n\n    function getApproved(uint256 _tokenId) public view returns (address) {\n        require(exists(_tokenId), \"token doesn't exist\");\n        return tokenApprovals[_tokenId];\n    }\n\n    function setApprovalForAll(address _to, bool _approved) public {\n        require(_to != msg.sender, \"wrong sender\");\n        operatorApprovals[msg.sender][_to] = _approved;\n        emit ApprovalForAll(msg.sender, _to, _approved);\n    }\n\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n        return operatorApprovals[_owner][_operator];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\n        _checkRights(isApprovedOrOwner(msg.sender, _tokenId));\n        _validateAddress(_from);\n        _validateAddress(_to);\n\n        clearApproval(_from, _tokenId);\n        removeTokenFrom(_from, _tokenId);\n        addTokenTo(_to, _tokenId);\n\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    ) public {\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    ) public {\n        transferFrom(_from, _to, _tokenId);\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data), \"can't make safe transfer\");\n    }\n\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) public view returns (bool) {\n        address owner = ownerOf(_tokenId);\n        return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n    }\n\n    function _mint(address _to, uint256 _tokenId) internal {\n        _validateAddress(_to);\n        addTokenTo(_to, _tokenId);\n        emit Transfer(address(0), _to, _tokenId);\n    }\n\n    function _burn(address _owner, uint256 _tokenId) internal {\n        clearApproval(_owner, _tokenId);\n        removeTokenFrom(_owner, _tokenId);\n        emit Transfer(_owner, address(0), _tokenId);\n    }\n\n    function clearApproval(address _owner, uint256 _tokenId) internal {\n        _checkOwner(_tokenId, _owner);\n        if (tokenApprovals[_tokenId] != address(0)) {\n            tokenApprovals[_tokenId] = address(0);\n            emit Approval(_owner, address(0), _tokenId);\n        }\n    }\n\n    function addTokenTo(address _to, uint256 _tokenId) internal {\n        require(tokenOwner[_tokenId] == address(0), \"token already has an owner\");\n        tokenOwner[_tokenId] = _to;\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n    }\n\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n        _checkOwner(_tokenId, _from);\n        _checkThatUserHasTokens(ownedTokensCount[_from] > 0);\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n        tokenOwner[_tokenId] = address(0);\n    }\n\n    function _isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n\n    function checkAndCallSafeTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    ) internal returns (bool) {\n        if (!_isContract(_to)) {\n            return true;\n        }\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n}\n\ncontract ERC721Token is ERC721, ERC721BasicToken {\n\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = 0x80ac58cd;\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721TokenReceiver = 0xf0b9e5ba;\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = 0x5b5e139f;\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Enumerable = 0x780e9d63;\n\n    string internal name_;\n    string internal symbol_;\n\n    // Mapping from owner to list of owned token IDs\n    mapping (address => uint256[]) internal ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) internal ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] internal allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) internal allTokensIndex;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) internal tokenURIs;\n\n    // The contract owner can change the base URL, in case it becomes necessary. It is needed for Metadata.\n    string public url;\n\n\n    constructor(string _name, string _symbol) public {\n        name_ = _name;\n        symbol_ = _symbol;\n    }\n\n    function name() public view returns (string) {\n        return name_;\n    }\n\n    function symbol() public view returns (string) {\n        return symbol_;\n    }\n\n    function _validateIndex(bool _isValid) internal pure {\n        require(_isValid, \"wrong index\");\n    }\n\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n        _validateIndex(_index < balanceOf(_owner));\n        return ownedTokens[_owner][_index];\n    }\n\n    function tokensOfOwner(address _owner) external view returns (uint256[]) {\n        return ownedTokens[_owner];\n    }\n\n    function getAllTokens() external view returns (uint256[]) {\n        return allTokens;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return allTokens.length;\n    }\n\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\n        _validateIndex(_index < totalSupply());\n        return allTokens[_index];\n    }\n\n    function addTokenTo(address _to, uint256 _tokenId) internal {\n        super.addTokenTo(_to, _tokenId);\n        uint256 length = ownedTokens[_to].length;\n        ownedTokens[_to].push(_tokenId);\n        ownedTokensIndex[_tokenId] = length;\n    }\n\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n        _checkThatUserHasTokens(ownedTokens[_from].length > 0);\n\n        super.removeTokenFrom(_from, _tokenId);\n\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n        ownedTokens[_from][tokenIndex] = lastToken;\n        ownedTokens[_from][lastTokenIndex] = 0;\n\n        ownedTokens[_from].length--;\n        ownedTokensIndex[_tokenId] = 0;\n        ownedTokensIndex[lastToken] = tokenIndex;\n    }\n\n    function _mint(address _to, uint256 _tokenId) internal {\n        super._mint(_to, _tokenId);\n\n        allTokensIndex[_tokenId] = allTokens.length;\n        allTokens.push(_tokenId);\n    }\n\n    function _burn(address _owner, uint256 _tokenId) internal {\n        require(allTokens.length > 0, \"no tokens\");\n\n        super._burn(_owner, _tokenId);\n\n        uint256 tokenIndex = allTokensIndex[_tokenId];\n        uint256 lastTokenIndex = allTokens.length.sub(1);\n        uint256 lastToken = allTokens[lastTokenIndex];\n\n        allTokens[tokenIndex] = lastToken;\n        allTokens[lastTokenIndex] = 0;\n\n        allTokens.length--;\n        allTokensIndex[_tokenId] = 0;\n        allTokensIndex[lastToken] = tokenIndex;\n    }\n\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\n        return (\n            _interfaceID == INTERFACE_SIGNATURE_ERC165 ||\n            _interfaceID == INTERFACE_SIGNATURE_ERC721 ||\n            _interfaceID == INTERFACE_SIGNATURE_ERC721TokenReceiver ||\n            _interfaceID == INTERFACE_SIGNATURE_ERC721Metadata ||\n            _interfaceID == INTERFACE_SIGNATURE_ERC721Enumerable\n        );\n    }\n\n    function tokenURI(uint256 _tokenId) public view returns (string) {\n        require(exists(_tokenId), \"token doesn't exist\");\n        return string(abi.encodePacked(url, _uint2str(_tokenId)));\n    }\n\n    function setUrl(string _url) external onlyOwner {\n        url = _url;\n    }\n\n    function _uint2str(uint _i) internal pure returns (string){\n        if (i == 0) return \"0\";\n        uint i = _i;\n        uint j = _i;\n        uint length;\n        while (j != 0){\n            length++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(length);\n        uint k = length - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n\ncontract EggStorage is ERC721Token {\n    struct Egg {\n        uint256[2] parents;\n        uint8 dragonType; // used for genesis only\n    }\n\n    Egg[] eggs;\n\n    constructor(string _name, string _symbol) public ERC721Token(_name, _symbol) {\n        eggs.length = 1; // to avoid some issues with 0\n    }\n\n    function push(address _sender, uint256[2] _parents, uint8 _dragonType) public onlyController returns (uint256 id) {\n        Egg memory _egg = Egg(_parents, _dragonType);\n        id = eggs.push(_egg).sub(1);\n        _mint(_sender, id);\n    }\n\n    function get(uint256 _id) external view returns (uint256[2], uint8) {\n        return (eggs[_id].parents, eggs[_id].dragonType);\n    }\n\n    function remove(address _owner, uint256 _id) external onlyController {\n        delete eggs[_id];\n        _burn(_owner, _id);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162003cc438038062003cc483398101806040528101908080518201929190602001805182019291905050508181336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600890805190602001906200009a929190620000d0565b508060099080519060200190620000b3929190620000d0565b5050506001601081620000c7919062000157565b5050506200020a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011357805160ff191683800117855562000144565b8280016001018555821562000144579182015b828111156200014357825182559160200191906001019062000126565b5b5090506200015391906200018c565b5090565b8154818355818111156200018757600302816003028360005260206000209182019101620001869190620001b4565b5b505050565b620001b191905b80821115620001ad57600081600090555060010162000193565b5090565b90565b620001f991905b80821115620001f55760008082016000620001d79190620001fc565b6002820160006101000a81549060ff021916905550600301620001bb565b5090565b90565b506000815560010160009055565b613aaa806200021a6000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461019b57806306fdde03146101ff578063081812fc1461028f578063095ea7b3146102fc57806318160ddd1461034957806323b872dd14610374578063252498a2146103e15780632a5c792a1461041c5780632f745c591461048857806342842e0e146104e9578063430c2081146105565780634f558e79146105bb5780634f6ccce7146106005780635600f04f146106415780636352211e146106d157806365fc12531461073e57806369c0ad93146107a457806370a082311461080a5780638462151c146108615780638da5cb5b146108f95780639016dd4b146109505780639507d39a146109e357806395d89b4114610a59578063988b1d8614610ae9578063a22cb46514610b36578063abe7f1ab14610b85578063b75c4f8014610bd2578063b88d4fde14610c3e578063c87b56dd14610cf1578063e6458f6e14610d97578063e985e9c514610e03578063f2fde38b14610e7e575b600080fd5b3480156101a757600080fd5b506101e560048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610ec1565b604051808215151515815260200191505060405180910390f35b34801561020b57600080fd5b506102146110da565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610254578082015181840152602081019050610239565b50505050905090810190601f1680156102815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029b57600080fd5b506102ba6004803603810190808035906020019092919050505061117c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030857600080fd5b50610347600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611236565b005b34801561035557600080fd5b5061035e611245565b6040518082815260200191505060405180910390f35b34801561038057600080fd5b506103df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611252565b005b3480156103ed57600080fd5b5061041a6004803603810190808035906020019082018035906020019190919293919293905050506112f4565b005b34801561042857600080fd5b506104316113ce565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610474578082015181840152602081019050610459565b505050509050019250505060405180910390f35b34801561049457600080fd5b506104d3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611426565b6040518082815260200191505060405180910390f35b3480156104f557600080fd5b50610554600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061149a565b005b34801561056257600080fd5b506105a1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506114bb565b604051808215151515815260200191505060405180910390f35b3480156105c757600080fd5b506105e660048036038101908080359060200190929190505050611550565b604051808215151515815260200191505060405180910390f35b34801561060c57600080fd5b5061062b600480360381019080803590602001909291905050506115c2565b6040518082815260200191505060405180910390f35b34801561064d57600080fd5b506106566115f7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561069657808201518184015260208101905061067b565b50505050905090810190601f1680156106c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106dd57600080fd5b506106fc60048036038101908080359060200190929190505050611695565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561074a57600080fd5b506107a2600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506116e0565b005b3480156107b057600080fd5b50610808600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506117c7565b005b34801561081657600080fd5b5061084b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118e3565b6040518082815260200191505060405180910390f35b34801561086d57600080fd5b506108a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611935565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108e55780820151818401526020810190506108ca565b505050509050019250505060405180910390f35b34801561090557600080fd5b5061090e6119cc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095c57600080fd5b506109cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908060400190600280602002604051908101604052809291908260026020028082843782019150505050509192919290803560ff1690602001909291905050506119f1565b6040518082815260200191505060405180910390f35b3480156109ef57600080fd5b50610a0e60048036038101908080359060200190929190505050611b22565b6040518083600260200280838360005b83811015610a39578082015181840152602081019050610a1e565b505050509050018260ff1660ff1681526020019250505060405180910390f35b348015610a6557600080fd5b50610a6e611bc2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610aae578082015181840152602081019050610a93565b50505050905090810190601f168015610adb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610af557600080fd5b50610b34600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c64565b005b348015610b4257600080fd5b50610b83600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611cf0565b005b348015610b9157600080fd5b50610bd0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e95565b005b348015610bde57600080fd5b50610be7611f64565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610c2a578082015181840152602081019050610c0f565b505050509050019250505060405180910390f35b348015610c4a57600080fd5b50610cef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611ff2565b005b348015610cfd57600080fd5b50610d1c60048036038101908080359060200190929190505050612083565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d5c578082015181840152602081019050610d41565b50505050905090810190601f168015610d895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610da357600080fd5b50610dac6121da565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610def578082015181840152602081019050610dd4565b505050509050019250505060405180910390f35b348015610e0f57600080fd5b50610e64600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612268565b604051808215151515815260200191505060405180910390f35b348015610e8a57600080fd5b50610ebf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122fc565b005b60006301ffc9a77c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610f9257506380ac58cd7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610ffd575063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110685750635b5e139f7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110d3575063780e9d637c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b606060088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111725780601f1061114757610100808354040283529160200191611172565b820191906000526020600020905b81548152906001019060200180831161115557829003601f168201915b5050505050905090565b600061118782611550565b15156111fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f746f6b656e20646f65736e27742065786973740000000000000000000000000081525060200191505060405180910390fd5b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611241338383612487565b5050565b6000600c80549050905090565b61126461125f33836114bb565b6126aa565b61126d83612722565b61127682612722565b61128083826127ca565b61128a83826128f1565b6112948282612b57565b808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f74206120636f6e7472616374206f776e657200000000000000000000000081525060200191505060405180910390fd5b8181600f91906113c992919061382a565b505050565b6060600c80548060200260200160405190810160405280929190818152602001828054801561141c57602002820191906000526020600020905b815481526020019060010190808311611408575b5050505050905090565b600061143b611434846118e3565b8310612c2e565b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561148757fe5b9060005260206000200154905092915050565b6114b68383836020604051908101604052806000815250611ff2565b505050565b6000806114c783611695565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061153657508373ffffffffffffffffffffffffffffffffffffffff1661151e8461117c565b73ffffffffffffffffffffffffffffffffffffffff16145b8061154757506115468185612268565b5b91505092915050565b6000806004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b60006115d66115cf611245565b8310612c2e565b600c828154811015156115e557fe5b90600052602060002001549050919050565b600f8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561168d5780601f106116625761010080835404028352916020019161168d565b820191906000526020600020905b81548152906001019060200180831161167057829003601f168201915b505050505081565b6000806004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506116d781612722565b80915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117a4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f74206120636f6e7472616374206f776e657200000000000000000000000081525060200191505060405180910390fd5b80600390805190602001906117ba9291906138aa565b506117c481612ca6565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f74206120636f6e7472616374206f776e657200000000000000000000000081525060200191505060405180910390fd5b600090505b81518110156118c8576118bb82828151811015156118ac57fe5b90602001906020020151612722565b8080600101915050611892565b81600290805190602001906118de9291906138aa565b505050565b60006118ee82612722565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156119c057602002820191906000526020600020905b8154815260200190600101908083116119ac575b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006119fb613934565b611a0433612d54565b1515611a78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f20636f6e74726f6c6c65722072696768747300000000000000000000000081525060200191505060405180910390fd5b60408051908101604052808581526020018460ff168152509050611b0e600160108390806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001906002611adc929190613958565b5060208201518160020160006101000a81548160ff021916908360ff1602179055505050612daa90919063ffffffff16565b9150611b1a8583612dc3565b509392505050565b611b2a613998565b6000601083815481101515611b3b57fe5b9060005260206000209060030201600001601084815481101515611b5b57fe5b906000526020600020906003020160020160009054906101000a900460ff1681600280602002604051908101604052809291908260028015611bb2576020028201915b815481526020019060010190808311611b9e575b5050505050915091509150915091565b606060098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c5a5780601f10611c2f57610100808354040283529160200191611c5a565b820191906000526020600020905b815481529060010190602001808311611c3d57829003601f168201915b5050505050905090565b611c6d33612d54565b1515611ce1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f20636f6e74726f6c6c65722072696768747300000000000000000000000081525060200191505060405180910390fd5b611cec328383612487565b5050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611d94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e672073656e646572000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b611e9e33612d54565b1515611f12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f20636f6e74726f6c6c65722072696768747300000000000000000000000081525060200191505060405180910390fd5b601081815481101515611f2157fe5b906000526020600020906003020160008082016000611f4091906139ba565b6002820160006101000a81549060ff02191690555050611f608282612e1a565b5050565b60606002805480602002602001604051908101604052809291908181526020018280548015611fe857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f9e575b5050505050905090565b611ffd848484611252565b61200984848484612f7d565b151561207d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f63616e2774206d616b652073616665207472616e73666572000000000000000081525060200191505060405180910390fd5b50505050565b606061208e82611550565b1515612102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f746f6b656e20646f65736e27742065786973740000000000000000000000000081525060200191505060405180910390fd5b600f61210d83613189565b604051602001808380546001816001161561010002031660029004801561216b5780601f1061214957610100808354040283529182019161216b565b820191906000526020600020905b815481529060010190602001808311612157575b505082805190602001908083835b60208310151561219e5780518252602082019150602081019050602083039250612179565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529050919050565b6060600380548060200260200160405190810160405280929190818152602001828054801561225e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612214575b5050505050905090565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f74206120636f6e7472616374206f776e657200000000000000000000000081525060200191505060405180910390fd5b6123c981612722565b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600061249282611695565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515612538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f63616e277420626520617070726f76656420746f206f776e657200000000000081525060200191505060405180910390fd5b6125808173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061257b575061257a8286612268565b5b6126aa565b600073ffffffffffffffffffffffffffffffffffffffff166125a18361117c565b73ffffffffffffffffffffffffffffffffffffffff161415806125f15750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156126a457826005600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b50505050565b80151561271f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f6e6f2072696768747320746f206d616e6167650000000000000000000000000081525060200191505060405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156127c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b50565b6127d481836132e6565b600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156128ed5760006005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b5050565b60008060006129446000600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905011613395565b61294e858561340d565b600b60008581526020019081526020016000205492506129ba6001600a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050612daa90919063ffffffff16565b9150600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515612a0857fe5b9060005260206000200154905080600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515612a6257fe5b90600052602060002001819055506000600a60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515612abe57fe5b9060005260206000200181905550600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003612b1e91906139c8565b506000600b60008681526020019081526020016000208190555082600b6000838152602001908152602001600020819055505050505050565b6000612b63838361354f565b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150555080600b600084815260200190815260200160002081905550505050565b801515612ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f77726f6e6720696e64657800000000000000000000000000000000000000000081525060200191505060405180910390fd5b50565b60008090505b8151811015612d5057612cd58282815181101515612cc657fe5b90602001906020020151612722565b60018060008484815181101515612ce857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050612cac565b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000828211151515612db857fe5b818303905092915050565b612dcd8282613712565b600c80549050600d600083815260200190815260200160002081905550600c8190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600080600080600c80549050111515612e9b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6e6f20746f6b656e73000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b612ea58585613785565b600d6000858152602001908152602001600020549250612ed46001600c80549050612daa90919063ffffffff16565b9150600c82815481101515612ee557fe5b9060005260206000200154905080600c84815481101515612f0257fe5b90600052602060002001819055506000600c83815481101515612f2157fe5b9060005260206000200181905550600c805480919060019003612f4491906139c8565b506000600d60008681526020019081526020016000208190555082600d6000838152602001908152602001600020819055505050505050565b600080612f89856137f9565b1515612f985760019150613180565b8473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561308d578082015181840152602081019050613072565b50505050905090810190601f1680156130ba5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156130dc57600080fd5b505af11580156130f0573d6000803e3d6000fd5b505050506040513d602081101561310657600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b6060600080600060606000808514156131d9576040805190810160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525095506132dc565b8694508693505b600084141515613206578280600101935050600a848115156131fe57fe5b0493506131e0565b826040519080825280601f01601f1916602001820160405280156132395781602001602082028038833980820191505090505b5091506001830390505b6000851415156132d857600a8581151561325957fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561329457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858115156132d057fe5b049450613243565b8195505b5050505050919050565b8073ffffffffffffffffffffffffffffffffffffffff1661330683611695565b73ffffffffffffffffffffffffffffffffffffffff16141515613391576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f6e6f7420616e206f776e6572000000000000000000000000000000000000000081525060200191505060405180910390fd5b5050565b80151561340a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f7573657220686173206e6f20746f6b656e73000000000000000000000000000081525060200191505060405180910390fd5b50565b61341781836132e6565b6134626000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411613395565b6134b56001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612daa90919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f746f6b656e20616c72656164792068617320616e206f776e657200000000000081525060200191505060405180910390fd5b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506136cb6001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461380c90919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b61371b82612722565b6137258282612b57565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b61378f82826127ca565b61379982826128f1565b80600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b600080828401905083811015151561382057fe5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061386b57803560ff1916838001178555613899565b82800160010185558215613899579182015b8281111561389857823582559160200191906001019061387d565b5b5090506138a691906139f4565b5090565b828054828255906000526020600020908101928215613923579160200282015b828111156139225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906138ca565b5b5090506139309190613a19565b5090565b606060405190810160405280613948613a5c565b8152602001600060ff1681525090565b8260028101928215613987579160200282015b8281111561398657825182559160200191906001019061396b565b5b50905061399491906139f4565b5090565b6040805190810160405280600290602082028038833980820191505090505090565b506000815560010160009055565b8154818355818111156139ef578183600052602060002091820191016139ee91906139f4565b5b505050565b613a1691905b80821115613a125760008160009055506001016139fa565b5090565b90565b613a5991905b80821115613a5557600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101613a1f565b5090565b90565b60408051908101604052806002906020820280388339808201915050905050905600a165627a7a72305820dce1a3e9506dff495db30d49398daa6b0619df832fa635d0b0beff4b4cc628c2002900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f447261676f6e657265756d20456767000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034547470000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f447261676f6e657265756d20456767000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034547470000000000000000000000000000000000000000000000000000000000"
}