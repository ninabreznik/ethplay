{
  "address": "0x130995702626e697eee9ebf6405402b647167d94",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HealthyCoins",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-20\n*/\n\npragma solidity ^0.4.11;\n\ncontract Owned {\n\n    address public owner;\n\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setOwner(address _newOwner) onlyOwner {\n\t if(_newOwner == 0x0)revert();\n        owner = _newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function toUINT112(uint256 a) internal constant returns(uint112) {\n    assert(uint112(a) == a);\n    return uint112(a);\n  }\n\n  function toUINT120(uint256 a) internal constant returns(uint120) {\n    assert(uint120(a) == a);\n    return uint120(a);\n  }\n\n  function toUINT128(uint256 a) internal constant returns(uint128) {\n    assert(uint128(a) == a);\n    return uint128(a);\n  }\n}\n\n\n// Abstract contract for the full ERC 20 Token standard\n// https://github.com/ethereum/EIPs/issues/20\n\ncontract Token {\n \n    function totalSupply() public  returns (uint256 supply);\n\t \n    function transfer(address _to, uint256 _value) returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n\n    function approve(address _spender, uint256 _value) returns (bool success);\n  \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n  \n    function burn( uint256 _value) public returns (bool success);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n  \n    event Burn(address indexed from, uint256 value);\n}\n\n\n\ncontract HealthyCoins is Token, Owned {\n    using SafeMath for uint256;\n  \n    uint public  _totalSupply;\n  \n    string public   name;         //The Token's name\n  \n    uint8 public constant decimals = 4;    //Number of decimals of the smallest unit\n  \n    string public  symbol;    //The Token's symbol \n  \n    uint256 public mintCount;\n  \n    uint256 public deleteToken;\n  \n    uint256 public soldToken;\n\n   \n    mapping (address => uint256) public balanceOf;\n\n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping(address => uint256)) allowed;\n\n  \n\n    // Constructor\n    function HealthyCoins(string coinName,string coinSymbol,uint initialSupply) {\n        _totalSupply = initialSupply *10**uint256(decimals);                        // Update total supply\n        balanceOf[msg.sender] = _totalSupply; \n        name = coinName;                                   // Set the name for display purposes\n        symbol =coinSymbol;   \n        \n    }\n\n   function totalSupply()  public  returns (uint256 totalSupply) {\n        return _totalSupply;\n    }\n\t\n    // Send back ether sent to me\n    function () {\n        revert();\n    }\n\n    // Transfer the balance from owner's account to another account\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        // according to AssetToken's total supply, never overflow here\n        if (balanceOf[msg.sender] >= _amount\n            && _amount > 0) {            \n            balanceOf[msg.sender] -= uint112(_amount);\n            balanceOf[_to] = _amount.add(balanceOf[_to]).toUINT112();\n            soldToken = _amount.add(soldToken).toUINT112();\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n   \n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success) {\n        // according to AssetToken's total supply, never overflow here\n        if (balanceOf[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0) {\n            balanceOf[_from] = balanceOf[_from].sub(_amount).toUINT112();\n            allowed[_from][msg.sender] -= _amount;\n            balanceOf[_to] = _amount.add(balanceOf[_to]).toUINT112();\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n   \n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    //Mint tokens and assign to some one\n    function mint(address _owner, uint256 _amount) onlyOwner{\n     \n            balanceOf[_owner] = _amount.add(balanceOf[_owner]).toUINT112();\n            mintCount =  _amount.add(mintCount).toUINT112();\n            _totalSupply = _totalSupply.add(_amount).toUINT112();\n    }\n  //Burn tokens from owner account\n  function burn(uint256 _count) public returns (bool success)\n  {\n          balanceOf[msg.sender] -=uint112( _count);\n          deleteToken = _count.add(deleteToken).toUINT112();\n         _totalSupply = _totalSupply.sub(_count).toUINT112();\n          Burn(msg.sender, _count);\n\t\t  return true;\n    }\n    \n  }",
  "bytecode": "608060405234801561001057600080fd5b50604051610b22380380610b2283398101604090815281516020808401518385015160008054600160a060020a0319163390811782556127108302600181905590825260078552959020949094559184018051909492909201929161007b9160029190860190610098565b50815161008f906003906020850190610098565b50505050610133565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100d957805160ff1916838001178555610106565b82800160010185558215610106579182015b828111156101065782518255916020019190600101906100eb565b50610112929150610116565b5090565b61013091905b80821115610112576000815560010161011c565b90565b6109e0806101426000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610102578063095ea7b31461018c57806313af4035146101c457806318160ddd146101e757806323b872dd1461020e578063313ce567146102385780633eaaf86b1461026357806340c10f19146102785780634123a0ac1461029c57806342966c68146102b15780636769d1f9146102c957806370a08231146102de5780638da5cb5b146102ff57806395d89b41146103305780639659867e14610345578063a9059cbb1461035a578063dd62ed3e1461037e575b3480156100fc57600080fd5b50600080fd5b34801561010e57600080fd5b506101176103a5565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610151578181015183820152602001610139565b50505050905090810190601f16801561017e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019857600080fd5b506101b0600160a060020a0360043516602435610430565b604080519115158252519081900360200190f35b3480156101d057600080fd5b506101e5600160a060020a0360043516610497565b005b3480156101f357600080fd5b506101fc6104f2565b60408051918252519081900360200190f35b34801561021a57600080fd5b506101b0600160a060020a03600435811690602435166044356104f8565b34801561024457600080fd5b5061024d61065b565b6040805160ff9092168252519081900360200190f35b34801561026f57600080fd5b506101fc610660565b34801561028457600080fd5b506101e5600160a060020a0360043516602435610666565b3480156102a857600080fd5b506101fc61071c565b3480156102bd57600080fd5b506101b0600435610722565b3480156102d557600080fd5b506101fc6107c6565b3480156102ea57600080fd5b506101fc600160a060020a03600435166107cc565b34801561030b57600080fd5b506103146107de565b60408051600160a060020a039092168252519081900360200190f35b34801561033c57600080fd5b506101176107ed565b34801561035157600080fd5b506101fc610848565b34801561036657600080fd5b506101b0600160a060020a036004351660243561084e565b34801561038a57600080fd5b506101fc600160a060020a0360043581169060243516610950565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104285780601f106103fd57610100808354040283529160200191610428565b820191906000526020600020905b81548152906001019060200180831161040b57829003601f168201915b505050505081565b336000818152600860209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600054600160a060020a031633146104ae57600080fd5b600160a060020a03811615156104c357600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60015490565b600160a060020a03831660009081526007602052604081205482118015906105435750600160a060020a03841660009081526008602090815260408083203384529091529020548211155b801561054f5750600082115b1561065057600160a060020a03841660009081526007602052604090205461058690610581908463ffffffff61097b16565b61098d565b600160a060020a0380861660009081526007602081815260408084206001607060020a039690961690955560088152848320338452815284832080548890039055928716825290915220546105e69061058190849063ffffffff6109a516565b600160a060020a038085166000818152600760209081526040918290206001607060020a0395909516909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001610654565b5060005b9392505050565b600481565b60015481565b600054600160a060020a0316331461067d57600080fd5b600160a060020a0382166000908152600760205260409020546106ab9061058190839063ffffffff6109a516565b600160a060020a03831660009081526007602052604090206001607060020a039190911690556004546106e99061058190839063ffffffff6109a516565b6001607060020a031660045560015461070c90610581908363ffffffff6109a516565b6001607060020a03166001555050565b60055481565b33600090815260076020526040812080546001607060020a038416900390556005546107599061058190849063ffffffff6109a516565b6001607060020a031660055560015461077c90610581908463ffffffff61097b16565b6001607060020a031660015560408051838152905133917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2506001919050565b60065481565b60076020526000908152604090205481565b600054600160a060020a031681565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104285780601f106103fd57610100808354040283529160200191610428565b60045481565b33600090815260076020526040812054821180159061086d5750600082115b15610948573360009081526007602052604080822080546001607060020a03861690039055600160a060020a03851682529020546108b69061058190849063ffffffff6109a516565b600160a060020a03841660009081526007602052604090206001607060020a039190911690556006546108f49061058190849063ffffffff6109a516565b6001607060020a0316600655604080518381529051600160a060020a0385169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001610491565b506000610491565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b60008282111561098757fe5b50900390565b60006001607060020a03821682146109a157fe5b5090565b60008282018381101561065457fe00a165627a7a7230582070a745393102c85b8577877c1950c0bba95f82a7d947184c2f0aa0f9d155e8fe0029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000017d7840000000000000000000000000000000000000000000000000000000000000000c4865616c746879436f696e7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004484c545900000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000017d7840000000000000000000000000000000000000000000000000000000000000000c4865616c746879436f696e7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004484c545900000000000000000000000000000000000000000000000000000000"
}