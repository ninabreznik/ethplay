{
  "address": "0xed3c9ca0d0f47280d1c04547ac991335b8b8eb67",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GanaTokenLocker",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-02\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract Releasable is Ownable {\n\n  event Release();\n\n  bool public released = false;\n\n  modifier afterReleased() {\n    require(released);\n    _;\n  }\n\n  function release() onlyOwner public {\n    require(!released);\n    released = true;\n    Release();\n  }\n\n}\n\n\ncontract Managed is Releasable {\n\n  mapping (address => bool) public manager;\n  event SetManager(address _addr);\n  event UnsetManager(address _addr);\n\n  function Managed() public {\n    manager[msg.sender] = true;\n  }\n\n  modifier onlyManager() {\n    require(manager[msg.sender]);\n    _;\n  }\n\n  function setManager(address _addr) public onlyOwner {\n    require(_addr != address(0) && manager[_addr] == false);\n    manager[_addr] = true;\n\n    SetManager(_addr);\n  }\n\n  function unsetManager(address _addr) public onlyOwner {\n    require(_addr != address(0) && manager[_addr] == true);\n    manager[_addr] = false;\n\n    UnsetManager(_addr);\n  }\n\n}\n\n\ncontract ReleasableToken is StandardToken, Managed {\n\n  function transfer(address _to, uint256 _value) public afterReleased returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function saleTransfer(address _to, uint256 _value) public onlyManager returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public afterReleased returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public afterReleased returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public afterReleased returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public afterReleased returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n\n}\n\n\ncontract BurnableToken is ReleasableToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) onlyManager public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= tota0lSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n}\n\n\n/**\n  *  GanaToken\n  */\ncontract GanaToken is BurnableToken {\n\n  string public constant name = \"GANA\";\n  string public constant symbol = \"GANA\";\n  uint8 public constant decimals = 18;\n\n  event ClaimedTokens(address manager, address _token, uint256 claimedBalance);\n\n  function GanaToken() public {\n    totalSupply = 2400000000 * 1 ether;\n    balances[msg.sender] = totalSupply;\n  }\n\n  function claimTokens(address _token, uint256 _claimedBalance) public onlyManager afterReleased {\n    ERC20Basic token = ERC20Basic(_token);\n    uint256 tokenBalance = token.balanceOf(this);\n    require(tokenBalance >= _claimedBalance);\n\n    address manager = msg.sender;\n    token.transfer(manager, _claimedBalance);\n    ClaimedTokens(manager, _token, _claimedBalance);\n  }\n\n}\n\n\n/**\n  *  GanaToken LOCKER\n  */\ncontract GanaTokenLocker {\n  GanaToken gana;\n  uint256 public releaseTime = 1554076800; //UTC 04/01/2019 12:00am\n  address public owner;\n\n  event Unlock();\n\n  function GanaTokenLocker(address _gana, address _owner) public {\n    require(_owner != address(0));\n    owner = _owner;\n    gana = GanaToken(_gana);\n  }\n\n  function unlock() public {\n    require(msg.sender == owner);\n    require(releaseTime < now);\n    uint256 unlockGana = gana.balanceOf(this);\n    gana.transfer(owner, unlockGana);\n    Unlock();\n  }\n\n}",
  "bytecode": "6060604052635ca15480600155341561001757600080fd5b6040516040806102ca8339810160405280805191906020018051915050600160a060020a038116151561004957600080fd5b60028054600160a060020a03928316600160a060020a03199182161790915560008054939092169216919091179055610243806100876000396000f30060606040526004361061003d5763ffffffff60e060020a6000350416638da5cb5b8114610042578063a69df4b514610071578063b91d400114610086575b600080fd5b341561004d57600080fd5b6100556100ab565b604051600160a060020a03909116815260200160405180910390f35b341561007c57600080fd5b6100846100ba565b005b341561009157600080fd5b610099610211565b60405190815260200160405180910390f35b600254600160a060020a031681565b60025460009033600160a060020a039081169116146100d857600080fd5b6001544290106100e757600080fd5b60008054600160a060020a0316906370a082319030906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561014257600080fd5b6102c65a03f1151561015357600080fd5b505050604051805160008054600254929450600160a060020a03908116935063a9059cbb92169084906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156101c657600080fd5b6102c65a03f115156101d757600080fd5b50505060405180519050507f70e3fffea7bbb557facdee48ed7f7af5179030adef9ad0c876df039a718f359e60405160405180910390a150565b600154815600a165627a7a72305820decac5240cc66a3848082e67d1d84eaa9a0a908351b7c69dc4f7a4d46a6124f80029000000000000000000000000c0ea6306f6360fe7dcab65d16bf1a3af92c79aa2000000000000000000000000df1429808a484403396a14cb1dcb867c0cd89854",
  "constructorArguments": "000000000000000000000000c0ea6306f6360fe7dcab65d16bf1a3af92c79aa2000000000000000000000000df1429808a484403396a14cb1dcb867c0cd89854"
}