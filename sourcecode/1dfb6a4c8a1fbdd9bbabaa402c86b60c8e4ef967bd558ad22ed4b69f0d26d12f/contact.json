{
  "address": "0xe64b47931f28f89cc7a0c6965ecf89eadb4975f5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LudosToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-10\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n      address indexed previousOwner,\n      address indexed newOwner\n    );\n\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n    * @dev Allows the current owner to relinquish control of the contract.\n    */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    *\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n          allowed[msg.sender][_spender] = 0;\n        } else {\n          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\n\ncontract CappedToken is MintableToken {\n\n    uint256 public cap;\n\n    constructor(uint256 _cap) public {\n        require(_cap > 0);\n        cap = _cap;\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        require(totalSupply_.add(_amount) <= cap);\n        return super.mint(_to, _amount);\n    }\n\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n    \n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        require(!frozenAccount[msg.sender]);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        require(!frozenAccount[_from]);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n  \n  \n    /**\n    * @dev Function to batch send tokens\n    * @param _receivers The addresses that will receive the tokens.\n    * @param _value The amount of tokens to send.\n    */\n    function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {\n        require(!frozenAccount[msg.sender]);\n        uint cnt = _receivers.length;\n        uint256 amount = uint256(cnt).mul(_value);\n        require(cnt > 0 && cnt <= 500);\n        require(_value > 0 && balances[msg.sender] >= amount);\n    \n        balances[msg.sender] = balances[msg.sender].sub(amount);\n        for (uint i = 0; i < cnt; i++) {\n            require (_receivers[i] != 0x0);\n            balances[_receivers[i]] = balances[_receivers[i]].add(_value);\n            emit Transfer(msg.sender, _receivers[i], _value);\n        }\n        return true;\n    }\n    \n    /**\n    * @dev Function to batch send tokens\n    * @param _receivers The addresses that will receive the tokens.\n    * @param _values The array of amount to send.\n    */\n    function batchTransferValues(address[] _receivers, uint256[] _values) public whenNotPaused returns (bool) {\n        require(!frozenAccount[msg.sender]);\n        uint cnt = _receivers.length;\n        require(cnt == _values.length);\n        require(cnt > 0 && cnt <= 500);\n        \n        uint256 amount = 0;\n        for (uint i = 0; i < cnt; i++) {\n            require (_values[i] != 0);\n            amount = amount.add(_values[i]);\n        }\n        \n        require(balances[msg.sender] >= amount);\n    \n        balances[msg.sender] = balances[msg.sender].sub(amount);\n        for (uint j = 0; j < cnt; j++) {\n            require (_receivers[j] != 0x0);\n            balances[_receivers[j]] = balances[_receivers[j]].add(_values[j]);\n            emit Transfer(msg.sender, _receivers[j], _values[j]);\n        }\n        return true;\n    }\n  \n    /**\n    * @dev Function to batch freeze accounts\n    * @param _addresses The addresses that will be frozen/unfrozen.\n    * @param _freeze To freeze or not.\n    */\n    function batchFreeze(address[] _addresses, bool _freeze) onlyOwner public {\n        for (uint i = 0; i < _addresses.length; i++) {\n            frozenAccount[_addresses[i]] = _freeze;\n            emit FrozenFunds(_addresses[i], _freeze);\n        }\n    }\n}\n\ncontract LudosToken is CappedToken, PausableToken {\n    string public constant name = \"Ludos Protocol\";\n    string public constant symbol = \"LUD\";\n    uint8 public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 0;\n    uint256 public constant MAX_SUPPLY = 100 * 10000 * 10000 * (10 ** uint256(decimals));\n\n    /**\n    * @dev Constructor that gives msg.sender all of existing tokens.\n    */\n    constructor() CappedToken(MAX_SUPPLY) public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) onlyOwner canMint whenNotPaused public returns (bool) {\n        return super.mint(_to, _amount);\n    }\n\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() onlyOwner canMint whenNotPaused public returns (bool) {\n        return super.finishMinting();\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) onlyOwner whenNotPaused public {\n        super.transferOwnership(newOwner);\n    }\n\n    /**\n    * The fallback function.\n    */\n    function() payable public {\n        revert();\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferValues\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"batchFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040526003805460a060020a60ff02191690556005805460ff1916905534801561002a57600080fd5b5060038054600160a060020a03191633600160a060020a03169081179091556b204fce5e3e250261100000006004556000600181905581815260208181526040808320839055805183815290517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a36116e9806100b16000396000f30060806040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461016357806306fdde031461018c578063095ea7b31461021657806318160ddd1461023a57806323b872dd146102615780632ff2e9dc1461028b578063313ce567146102a057806332cb6b0c146102cb578063355274ea146102e05780633f4ba83a146102f557806340c10f191461030c5780635c975abb14610330578063661884631461034557806370a0823114610369578063715018a61461038a5780637d64bcb41461039f57806383f12fec146103b45780638456cb591461040b5780638da5cb5b1461042057806395d89b4114610451578063a65ac96114610466578063a9059cbb146104f4578063ae13efe014610518578063b414d4b614610571578063d73dd62314610592578063dd62ed3e146105b6578063f2fde38b146105dd575b600080fd5b34801561016f57600080fd5b506101786105fe565b604080519115158252519081900360200190f35b34801561019857600080fd5b506101a161060e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101db5781810151838201526020016101c3565b50505050905090810190601f1680156102085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561022257600080fd5b50610178600160a060020a0360043516602435610645565b34801561024657600080fd5b5061024f6106a6565b60408051918252519081900360200190f35b34801561026d57600080fd5b50610178600160a060020a03600435811690602435166044356106ac565b34801561029757600080fd5b5061024f6106f8565b3480156102ac57600080fd5b506102b56106fd565b6040805160ff9092168252519081900360200190f35b3480156102d757600080fd5b5061024f610702565b3480156102ec57600080fd5b5061024f610712565b34801561030157600080fd5b5061030a610718565b005b34801561031857600080fd5b50610178600160a060020a0360043516602435610779565b34801561033c57600080fd5b506101786107c8565b34801561035157600080fd5b50610178600160a060020a03600435166024356107d1565b34801561037557600080fd5b5061024f600160a060020a03600435166107ee565b34801561039657600080fd5b5061030a610809565b3480156103ab57600080fd5b5061017861087b565b3480156103c057600080fd5b50604080516020600480358082013583810280860185019096528085526101789536959394602494938501929182918501908490808284375094975050933594506108cd9350505050565b34801561041757600080fd5b5061030a610aca565b34801561042c57600080fd5b50610435610b2d565b60408051600160a060020a039092168252519081900360200190f35b34801561045d57600080fd5b506101a1610b3c565b34801561047257600080fd5b506040805160206004803580820135838102808601850190965280855261017895369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610b739650505050505050565b34801561050057600080fd5b50610178600160a060020a0360043516602435610dc9565b34801561052457600080fd5b506040805160206004803580820135838102808601850190965280855261030a95369593946024949385019291829185019084908082843750949750505050913515159250610e0c915050565b34801561057d57600080fd5b50610178600160a060020a0360043516610eea565b34801561059e57600080fd5b50610178600160a060020a0360043516602435610eff565b3480156105c257600080fd5b5061024f600160a060020a0360043581169060243516610f1c565b3480156105e957600080fd5b5061030a600160a060020a0360043516610f47565b60035460a060020a900460ff1681565b60408051808201909152600e81527f4c75646f732050726f746f636f6c000000000000000000000000000000000000602082015281565b60055460009060ff161561065857600080fd5b8115806106885750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561069357600080fd5b61069d8383610f7e565b90505b92915050565b60015490565b60055460009060ff16156106bf57600080fd5b600160a060020a03841660009081526006602052604090205460ff16156106e557600080fd5b6106f0848484610fe8565b949350505050565b600081565b601281565b6b204fce5e3e2502611000000081565b60045481565b60035433600160a060020a0390811691161461073357600080fd5b60055460ff16151561074457600080fd5b6005805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60035460009033600160a060020a0390811691161461079757600080fd5b60035460a060020a900460ff16156107ae57600080fd5b60055460ff16156107be57600080fd5b61069d8383611156565b60055460ff1681565b60055460009060ff16156107e457600080fd5b61069d83836111b6565b600160a060020a031660009081526020819052604090205490565b60035433600160a060020a0390811691161461082457600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b60035460009033600160a060020a0390811691161461089957600080fd5b60035460a060020a900460ff16156108b057600080fd5b60055460ff16156108c057600080fd5b6108c86112af565b905090565b60055460009081908190819060ff16156108e657600080fd5b600160a060020a03331660009081526006602052604090205460ff161561090c57600080fd5b85519250610920838663ffffffff61133716565b915060008311801561093457506101f48311155b151561093f57600080fd5b6000851180156109675750600160a060020a0333166000908152602081905260409020548211155b151561097257600080fd5b600160a060020a03331660009081526020819052604090205461099b908363ffffffff61136016565b600160a060020a03331660009081526020819052604081209190915590505b82811015610abe5785818151811015156109d057fe5b60209081029091010151600160a060020a031615156109ee57600080fd5b610a32856000808985815181101515610a0357fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff61137216565b6000808884815181101515610a4357fe5b6020908102909101810151600160a060020a03168252810191909152604001600020558551869082908110610a7457fe5b90602001906020020151600160a060020a031633600160a060020a031660008051602061169e833981519152876040518082815260200191505060405180910390a36001016109ba565b50600195945050505050565b60035433600160a060020a03908116911614610ae557600080fd5b60055460ff1615610af557600080fd5b6005805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60408051808201909152600381527f4c55440000000000000000000000000000000000000000000000000000000000602082015281565b600554600090819081908190819060ff1615610b8e57600080fd5b600160a060020a03331660009081526006602052604090205460ff1615610bb457600080fd5b865186519094508414610bc657600080fd5b600084118015610bd857506101f48411155b1515610be357600080fd5b60009250600091505b83821015610c4c578582815181101515610c0257fe5b602090810290910101511515610c1757600080fd5b610c3f8683815181101515610c2857fe5b60209081029091010151849063ffffffff61137216565b9250600190910190610bec565b600160a060020a033316600090815260208190526040902054831115610c7157600080fd5b600160a060020a033316600090815260208190526040902054610c9a908463ffffffff61136016565b600160a060020a03331660009081526020819052604081209190915590505b83811015610dbc578681815181101515610ccf57fe5b60209081029091010151600160a060020a03161515610ced57600080fd5b610d198682815181101515610cfe57fe5b906020019060200201516000808a85815181101515610a0357fe5b6000808984815181101515610d2a57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020558651879082908110610d5b57fe5b90602001906020020151600160a060020a031633600160a060020a031660008051602061169e8339815191528884815181101515610d9557fe5b906020019060200201516040518082815260200191505060405180910390a3600101610cb9565b5060019695505050505050565b60055460009060ff1615610ddc57600080fd5b600160a060020a03331660009081526006602052604090205460ff1615610e0257600080fd5b61069d838361137f565b60035460009033600160a060020a03908116911614610e2a57600080fd5b5060005b8251811015610ee55781600660008584815181101515610e4a57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905582517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a590849083908110610eac57fe5b602090810290910181015160408051600160a060020a0390921682528515159282019290925281519081900390910190a1600101610e2e565b505050565b60066020526000908152604090205460ff1681565b60055460009060ff1615610f1257600080fd5b61069d8383611466565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610f6257600080fd5b60055460ff1615610f7257600080fd5b610f7b81611508565b50565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6000600160a060020a0383161515610fff57600080fd5b600160a060020a03841660009081526020819052604090205482111561102457600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561105757600080fd5b600160a060020a038416600090815260208190526040902054611080908363ffffffff61136016565b600160a060020a0380861660009081526020819052604080822093909355908516815220546110b5908363ffffffff61137216565b600160a060020a03808516600090815260208181526040808320949094558783168252600281528382203390931682529190915220546110fb908363ffffffff61136016565b600160a060020a0380861660008181526002602090815260408083203386168452825291829020949094558051868152905192871693919260008051602061169e833981519152929181900390910190a35060019392505050565b60035460009033600160a060020a0390811691161461117457600080fd5b60035460a060020a900460ff161561118b57600080fd5b6004546001546111a1908463ffffffff61137216565b11156111ac57600080fd5b61069d83836115a1565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561121357600160a060020a03338116600090815260026020908152604080832093881683529290529081205561124a565b611223818463ffffffff61136016565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b60035460009033600160a060020a039081169116146112cd57600080fd5b60035460a060020a900460ff16156112e457600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b6000821515611348575060006106a0565b5081810281838281151561135857fe5b04146106a057fe5b60008282111561136c57fe5b50900390565b818101828110156106a057fe5b6000600160a060020a038316151561139657600080fd5b600160a060020a0333166000908152602081905260409020548211156113bb57600080fd5b600160a060020a0333166000908152602081905260409020546113e4908363ffffffff61136016565b600160a060020a033381166000908152602081905260408082209390935590851681522054611419908363ffffffff61137216565b600160a060020a038085166000818152602081815260409182902094909455805186815290519193339093169260008051602061169e83398151915292918290030190a350600192915050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461149e908363ffffffff61137216565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b60035433600160a060020a0390811691161461152357600080fd5b600160a060020a038116151561153857600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60035460009033600160a060020a039081169116146115bf57600080fd5b60035460a060020a900460ff16156115d657600080fd5b6001546115e9908363ffffffff61137216565b600155600160a060020a038316600090815260208190526040902054611615908363ffffffff61137216565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a0385169160009160008051602061169e8339815191529181900360200190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820c8ef067e6b06cf3e7ae79da967464ee98fc848c69c611b4ebddbe0281daca2d30029"
}