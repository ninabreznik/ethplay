{
  "address": "0x59c3ba7a0a4c26955037710654f60d368303b3e1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Zenome Token",
  "contractName": "ZNA",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-16\n*/\n\npragma solidity ^0.4.19;\n\n/*************************************************************************\n * import \"../node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/*************************************************************************\n * import \"../node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"../node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/*************************************************************************\n * import \"../node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"../node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\" : start\n *************************************************************************/\n\n/*************************************************************************\n * import \"./StandardToken.sol\" : start\n *************************************************************************/\n\n/*************************************************************************\n * import \"./BasicToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./ERC20Basic.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/*************************************************************************\n * import \"./ERC20Basic.sol\" : end\n *************************************************************************/\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n/*************************************************************************\n * import \"./BasicToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./ERC20.sol\" : start\n *************************************************************************/\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/*************************************************************************\n * import \"./ERC20.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n/*************************************************************************\n * import \"./StandardToken.sol\" : end\n *************************************************************************/\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n/*************************************************************************\n * import \"../node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\" : end\n *************************************************************************/\n\n/*************************************************************************\n * import \"../node_modules/zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"../../lifecycle/Pausable.sol\" : start\n *************************************************************************/\n\n\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n/*************************************************************************\n * import \"../../lifecycle/Pausable.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n/*************************************************************************\n * import \"../node_modules/zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"../node_modules/zeppelin-solidity/contracts/ownership/CanReclaimToken.sol\" : start\n *************************************************************************/\n\n\n\n/*************************************************************************\n * import \"../token/ERC20/SafeERC20.sol\" : start\n *************************************************************************/\n\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n/*************************************************************************\n * import \"../token/ERC20/SafeERC20.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n/*************************************************************************\n * import \"../node_modules/zeppelin-solidity/contracts/ownership/CanReclaimToken.sol\" : end\n *************************************************************************/\n\n\ncontract CanReclaimEther is Ownable {\n  function claim() public onlyOwner {\n    owner.transfer(this.balance);\n  }\n}\n\n\ncontract ZNA is StandardToken, Ownable, PausableToken {\n\n    using SafeMath for uint256;\n\n    uint256 public MAX_TOTAL;\n\n    function ZNA (uint256 maxAmount) public {\n      MAX_TOTAL = maxAmount;\n    }\n\n   /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n   function mint(address _to, uint256 _amount)\n   public onlyOwner returns (bool) {\n     totalSupply_ = totalSupply_.add(_amount);\n     require(totalSupply_ <= MAX_TOTAL);\n     balances[_to] = balances[_to].add(_amount);\n     emit Transfer(address(0), _to, _amount);\n     return true;\n   }\n\n   string public name = \"ZNA Token\";\n   string public symbol = \"ZNA\";\n   uint8  public decimals = 18;\n}\n\n\ncontract ZenomeCrowdsale is Ownable, CanReclaimToken, CanReclaimEther {\n\n  using SafeMath for uint256;\n\n  struct TokenPool {\n    address minter;\n    uint256 amount;\n    uint256 safecap;\n    uint256 total;\n  }\n\n  ZNA public token;\n\n  TokenPool public for_sale;\n  TokenPool public for_rewards;\n  TokenPool public for_longterm;\n  /* solhint-disable */\n  /* solhint-enable */\n\n  function ZenomeCrowdsale () public {\n    for_sale.total = 1575*10**22;\n    for_rewards.total = 1050*10**22;\n    for_longterm.total = 875*10**22;\n\n    uint256 MAX_TOTAL = for_sale.total\n      .add(for_rewards.total)\n      .add(for_longterm.total);\n\n    token = new ZNA(MAX_TOTAL);\n  }\n\n /**\n  *  Setting Minter interface\n  */\n  function setSaleMinter (address minter, uint safecap) public onlyOwner { setMinter(for_sale, minter, safecap); }\n\n  function setRewardMinter (address minter, uint safecap) public onlyOwner {\n    require(safecap <= for_sale.amount);\n    setMinter(for_rewards, minter, safecap);\n  }\n\n  function setLongtermMinter (address minter, uint safecap) public onlyOwner {\n    require(for_sale.amount > 1400*10**22);\n    setMinter(for_longterm, minter, safecap);\n  }\n\n  function transferTokenOwnership (address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    token.transferOwnership(newOwner);\n  }\n\n  function pauseToken() public onlyOwner { token.pause(); }\n  function unpauseToken() public onlyOwner { token.unpause(); }\n\n  /**\n   *  Minter's interface\n   */\n  function mintSoldTokens (address to, uint256 amount) public {\n    mintTokens(for_sale, to, amount);\n  }\n\n  function mintRewardTokens (address to, uint256 amount) public {\n    mintTokens(for_rewards, to, amount);\n  }\n\n  function mintLongTermTokens (address to, uint256 amount) public {\n    mintTokens(for_longterm, to, amount);\n  }\n\n  /**\n   * INTERNAL FUNCTIONS\n\n   \"Of course, calls to internal functions use the internal calling convention,\n    which means that all internal types can be passed and memory types will be\n    passed by reference and not copied.\"\n\n    https://solidity.readthedocs.io/en/develop/contracts.html#libraries\n  */\n  /**\n   *  Set minter and a safe cap in a single call.\n   *  IT MUST NOT BE VIEW!\n   */\n  function setMinter (TokenPool storage pool, address minter, uint256 safecap)\n  internal onlyOwner {\n    require(safecap <= pool.total);\n    pool.minter = minter;\n    pool.safecap = safecap;\n  }\n\n  /**\n   *\n   */\n  function mintTokens (TokenPool storage pool, address to, uint256 amount )\n  internal {\n    require(msg.sender == pool.minter);\n    uint256 new_amount = pool.amount.add(amount);\n    require(new_amount <= pool.safecap);\n\n    pool.amount = new_amount;\n    token.mint(to, amount);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_TOTAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060409081526003805460a060020a60ff02191690558051908101604052600981527f5a4e4120546f6b656e00000000000000000000000000000000000000000000006020820152600590805161005b9291602001906100f5565b5060408051908101604052600381527f5a4e410000000000000000000000000000000000000000000000000000000000602082015260069080516100a39291602001906100f5565b506007805460ff1916601217905534156100bc57600080fd5b604051602080610ee78339810160405280805160038054600160a060020a03191633600160a060020a0316179055600455506101909050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013657805160ff1916838001178555610163565b82800160010185558215610163579182015b82811115610163578251825591602001919060010190610148565b5061016f929150610173565b5090565b61018d91905b8082111561016f5760008155600101610179565b90565b610d488061019f6000396000f3006060604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610100578063095ea7b31461018a57806318160ddd146101c057806323b872dd146101e5578063313ce5671461020d5780633f4ba83a1461023657806340c10f191461024b5780635c975abb1461026d578063661884631461028057806370a08231146102a25780638456cb59146102c15780638da5cb5b146102d457806395d89b4114610303578063a9059cbb14610316578063cd60fe3514610338578063d73dd6231461034b578063dd62ed3e1461036d578063f2fde38b14610392575b600080fd5b341561010b57600080fd5b6101136103b1565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014f578082015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019557600080fd5b6101ac600160a060020a036004351660243561044f565b604051901515815260200160405180910390f35b34156101cb57600080fd5b6101d361047a565b60405190815260200160405180910390f35b34156101f057600080fd5b6101ac600160a060020a0360043581169060243516604435610480565b341561021857600080fd5b6102206104ad565b60405160ff909116815260200160405180910390f35b341561024157600080fd5b6102496104b6565b005b341561025657600080fd5b6101ac600160a060020a0360043516602435610535565b341561027857600080fd5b6101ac6105fe565b341561028b57600080fd5b6101ac600160a060020a036004351660243561060e565b34156102ad57600080fd5b6101d3600160a060020a0360043516610632565b34156102cc57600080fd5b61024961064d565b34156102df57600080fd5b6102e76106d1565b604051600160a060020a03909116815260200160405180910390f35b341561030e57600080fd5b6101136106e0565b341561032157600080fd5b6101ac600160a060020a036004351660243561074b565b341561034357600080fd5b6101d361076f565b341561035657600080fd5b6101ac600160a060020a0360043516602435610775565b341561037857600080fd5b6101d3600160a060020a0360043581169060243516610799565b341561039d57600080fd5b610249600160a060020a03600435166107c4565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104475780601f1061041c57610100808354040283529160200191610447565b820191906000526020600020905b81548152906001019060200180831161042a57829003601f168201915b505050505081565b60035460009060a060020a900460ff161561046957600080fd5b610473838361085f565b9392505050565b60015490565b60035460009060a060020a900460ff161561049a57600080fd5b6104a58484846108cb565b949350505050565b60075460ff1681565b60035433600160a060020a039081169116146104d157600080fd5b60035460a060020a900460ff1615156104e957600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60035460009033600160a060020a0390811691161461055357600080fd5b600154610566908363ffffffff610a4b16565b600181905560045490111561057a57600080fd5b600160a060020a0383166000908152602081905260409020546105a3908363ffffffff610a4b16565b600160a060020a0384166000818152602081905260408082209390935590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff161561062857600080fd5b6104738383610a5a565b600160a060020a031660009081526020819052604090205490565b60035433600160a060020a0390811691161461066857600080fd5b60035460a060020a900460ff161561067f57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600354600160a060020a031681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104475780601f1061041c57610100808354040283529160200191610447565b60035460009060a060020a900460ff161561076557600080fd5b6104738383610b54565b60045481565b60035460009060a060020a900460ff161561078f57600080fd5b6104738383610c66565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a039081169116146107df57600080fd5b600160a060020a03811615156107f457600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a03831615156108e257600080fd5b600160a060020a03841660009081526020819052604090205482111561090757600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561093a57600080fd5b600160a060020a038416600090815260208190526040902054610963908363ffffffff610d0a16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610998908363ffffffff610a4b16565b600160a060020a03808516600090815260208181526040808320949094558783168252600281528382203390931682529190915220546109de908363ffffffff610d0a16565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60008282018381101561047357fe5b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610ab757600160a060020a033381166000908152600260209081526040808320938816835292905290812055610aee565b610ac7818463ffffffff610d0a16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b6000600160a060020a0383161515610b6b57600080fd5b600160a060020a033316600090815260208190526040902054821115610b9057600080fd5b600160a060020a033316600090815260208190526040902054610bb9908363ffffffff610d0a16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610bee908363ffffffff610a4b16565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610c9e908363ffffffff610a4b16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600082821115610d1657fe5b509003905600a165627a7a72305820d45be2c418a6edbf83ccc988316086594531d2cfcded88d8e771b09c3b07d20d00290000000000000000000000000000000000000000001cf389cd46047d03000000",
  "constructorArguments": "0000000000000000000000000000000000000000001cf389cd46047d03000000"
}