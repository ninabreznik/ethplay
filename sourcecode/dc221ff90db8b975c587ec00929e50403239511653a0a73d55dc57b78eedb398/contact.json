{
  "address": "0x3227bb83f3f230c15f8ee4a78a655f06c8004cad",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LTLNN",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-14\n*/\n\npragma solidity ^0.5.8;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address payable private _owner;\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns(address payable) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender);\n        _;\n    }\n}\n\n\n\n/**\n * @title ERC20 interface\n */\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address tokenOwner, address spender) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed tokenOwner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract LTLNN is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    string public name = \"Lawtest Token\";\n    string public symbol =\"LTLNN\";\n    uint8  public decimals = 2;\n\n    uint256 initialSupply = 5000000;\n    uint256 saleBeginTime = 1557824400; // 14 May 2019, 9:00:00 GMT\n    uint256 saleEndTime = 1557835200;   // 14 May 2019, 12:00:00 GMT\n    uint256 tokensDestructTime = 1711929599;  // 31 March 2024, 23:59:59 GMT\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping(address => uint)) _allowed;\n    uint256 private _totalSupply;\n    uint256 private _amountForSale;\n\n    event Mint(address indexed to, uint256 amount, uint256 amountForSale);\n    event TokensDestroyed();\n\n    constructor() public {\n        _balances[address(this)] = initialSupply;\n        _amountForSale = initialSupply;\n        _totalSupply = initialSupply;\n    }\n\n    /**\n\t\t* @dev Total number of tokens in existence\n\t\t*/\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function amountForSale() public view returns (uint256) {\n        return _amountForSale;\n    }\n\n    /**\n\t\t* @dev Gets the balance of the specified address.\n\t\t* @param owner The address to query the balance of.\n\t\t* @return An uint256 representing the amount owned by the passed address.\n\t\t*/\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n\t\t* @dev Transfer token for a specified address\n\t\t* @param to The address to transfer to.\n\t\t* @param amount The amount to be transferred.\n\t\t*/\n    function transfer(address to, uint256 amount) external returns (bool) {\n        require(block.timestamp < tokensDestructTime);\n        require(block.timestamp > saleEndTime);\n        _transfer(msg.sender, to, amount);\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /**\n        * Token owner can approve for `spender` to transferFrom(...) `value`\n        * from the token owner's account\n        *\n        * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n        * recommends that there are no checks for the approval double-spend attack\n        * as this should be implemented in user interfaces\n        */\n    function approve(address spender, uint256 value) external returns (bool) {\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n        * Transfer `tokens` from the `from` account to the `to` account\n        *\n        * The calling account must already have sufficient tokens approve(...)-d\n        * for spending from the `from` account and\n        * - From account must have sufficient balance to transfer\n        * - Spender must have sufficient allowance to transfer\n        * - 0 value transfers are allowed\n        */\n    function transferFrom(address from, address to, uint256 value) external returns (bool) {\n        require(to != address(0));\n        require(value <= _balances[from]);\n        require(value <= _allowed[from][msg.sender]);\n        _balances[from] = _balances[from].sub(value);\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    /**\n        * Returns the amount of tokens approved by the owner that can be\n        * transferred to the spender's account\n        */\n    function allowance(address tokenOwner, address spender) external view returns (uint256) {\n        return _allowed[tokenOwner][spender];\n    }\n\n    /**\n\t\t * @dev External function that mints an amount of the token and assigns it to\n\t\t * an account. This encapsulates the modification of balances such that the\n\t\t * proper events are emitted.\n\t\t * @param account The account that will receive the created tokens.\n\t\t * @param amount The amount that will be created.\n\t\t */\n    function mint(address account, uint256 amount) external onlyOwner {\n        require(saleBeginTime < block.timestamp);\n        require(saleEndTime > block.timestamp);\n        _transfer(address(this),  account, amount);\n        emit Mint(account, amount, _amountForSale);\n    }\n\n    /**\n        *@dev This sends all the funds to owner's address and destroys the contract.\n    **/\n\n    function destructContract() external onlyOwner {\n        selfdestruct(owner());\n    }\n\n    /**\n        * @dev Internal function that transfers an amount of the token\n        * from `from` to `to`\n        * This encapsulates the modification of balances such that the\n        * proper events are emitted.\n        * @param from The account tokens are transferred from.\n        * @param to The account tokens are transferred to.\n        * @param amount The amount that will be created.\n    */\n    function _transfer(address from, address to, uint256 amount) internal {\n        require(amount <= _balances[from]);\n        require(to != address(0));\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n        if(saleEndTime > block.timestamp)\n            _amountForSale = _balances[address(this)];\n    }\n\n    function hasSaleBeginTimeCome() public view returns(bool) {\n        return (block.timestamp > saleBeginTime);\n    }\n\n    function hasSaleEndTimeCome() public view returns(bool) {\n        return (block.timestamp > saleEndTime);\n    }\n\n    function hasTokensDestructTimeCome() public view returns(bool) {\n        return (block.timestamp > tokensDestructTime);\n    }\n\n}",
  "bytecode": "60c0604052600d60808190527f4c61777465737420546f6b656e0000000000000000000000000000000000000060a090815261003e91600191906100ef565b506040805180820190915260058082527f4c544c4e4e0000000000000000000000000000000000000000000000000000006020909201918252610083916002916100ef565b506003805460ff19166002179055624c4b40600455635cda8390600555635cdaadc0600655636609f8ff6007553480156100bc57600080fd5b50600080546001600160a01b0319163317815560045430825260086020526040909120819055600b819055600a5561018a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013057805160ff191683800117855561015d565b8280016001018555821561015d579182015b8281111561015d578251825591602001919060010190610142565b5061016992915061016d565b5090565b61018791905b808211156101695760008155600101610173565b90565b6108c6806101996000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637d67092f1161009757806395d89b411161006657806395d89b41146102c8578063a9059cbb146102d0578063be7a544c146102fc578063dd62ed3e1461030457610100565b80637d67092f1461028c5780638473e55f146102945780638da5cb5b1461029c5780639499e018146102c057610100565b8063313ce567116100d3578063313ce5671461021257806340c10f1914610230578063444802751461025e57806370a082311461026657610100565b806306fdde0314610105578063095ea7b31461018257806318160ddd146101c257806323b872dd146101dc575b600080fd5b61010d610332565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014757818101518382015260200161012f565b50505050905090810190601f1680156101745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ae6004803603604081101561019857600080fd5b506001600160a01b0381351690602001356103bf565b604080519115158252519081900360200190f35b6101ca610425565b60408051918252519081900360200190f35b6101ae600480360360608110156101f257600080fd5b506001600160a01b0381358116916020810135909116906040013561042b565b61021a6105a0565b6040805160ff9092168252519081900360200190f35b61025c6004803603604081101561024657600080fd5b506001600160a01b0381351690602001356105a9565b005b6101ae610633565b6101ca6004803603602081101561027c57600080fd5b50356001600160a01b031661063b565b6101ae610656565b6101ca61065e565b6102a4610664565b604080516001600160a01b039092168252519081900360200190f35b61025c610673565b61010d61069d565b6101ae600480360360408110156102e657600080fd5b506001600160a01b0381351690602001356106f5565b6101ae610767565b6101ca6004803603604081101561031a57600080fd5b506001600160a01b038135811691602001351661076f565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103b75780601f1061038c576101008083540402835291602001916103b7565b820191906000526020600020905b81548152906001019060200180831161039a57829003601f168201915b505050505081565b3360008181526009602090815260408083206001600160a01b038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600a5490565b60006001600160a01b03831661044057600080fd5b6001600160a01b03841660009081526008602052604090205482111561046557600080fd5b6001600160a01b038416600090815260096020908152604080832033845290915290205482111561049557600080fd5b6001600160a01b0384166000908152600860205260409020546104be908363ffffffff61079a16565b6001600160a01b03851660009081526008602090815260408083209390935560098152828220338352905220546104fb908363ffffffff61079a16565b6001600160a01b03808616600090815260096020908152604080832033845282528083209490945591861681526008909152205461053f908363ffffffff6107af16565b6001600160a01b0380851660008181526008602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60035460ff1681565b6000546001600160a01b031633146105c057600080fd5b42600554106105ce57600080fd5b42600654116105dc57600080fd5b6105e73083836107c8565b600b5460408051838152602081019290925280516001600160a01b038516927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f92908290030190a25050565b600654421190565b6001600160a01b031660009081526008602052604090205490565b600554421190565b600b5490565b6000546001600160a01b031690565b6000546001600160a01b0316331461068a57600080fd5b610692610664565b6001600160a01b0316ff5b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103b75780601f1061038c576101008083540402835291602001916103b7565b6000600754421061070557600080fd5b600654421161071357600080fd5b61071e3384846107c8565b6040805183815290516001600160a01b0385169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b600754421190565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205490565b6000828211156107a957600080fd5b50900390565b6000828201838110156107c157600080fd5b9392505050565b6001600160a01b0383166000908152600860205260409020548111156107ed57600080fd5b6001600160a01b03821661080057600080fd5b6001600160a01b038316600090815260086020526040902054610829908263ffffffff61079a16565b6001600160a01b03808516600090815260086020526040808220939093559084168152205461085e908263ffffffff6107af16565b6001600160a01b0383166000908152600860205260409020556006544210156108955730600090815260086020526040902054600b555b50505056fea165627a7a72305820beb2671d4831fdad51d3d7d0db086b9197225e4ba7b54fc7578466b2802ec2c10029"
}