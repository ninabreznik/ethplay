{
  "address": "0xcbeabd17c4545e6ae5a3b40d49c8c1b896688d85",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Ubricoin: Old Token",
  "contractName": "Ubricoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-31\n*/\n\npragma solidity 0.4.24;\n\ncontract Ownable {\n    address public owner=0x28970854Bfa61C0d6fE56Cc9daAAe5271CEaEC09;\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor()public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n}\ncontract PricingStrategy {\n\n  /** Interface declaration. */\n  function isPricingStrategy() public pure  returns (bool) {\n    return true;\n  }\n\n  /** Self check if all references are correctly set.\n   *\n   * Checks that pricing strategy matches crowdsale parameters.\n   */\n  function isSane() public pure returns (bool) {\n    return true;\n  }\n\n  /**\n   * @dev Pricing tells if this is a presale purchase or not.\n     @param purchaser Address of the purchaser\n     @return False by default, true if a presale purchaser\n   */\n  function isPresalePurchase(address purchaser) public pure returns (bool) {\n    return false;\n  }\n\n  /**\n   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\n   *\n   *\n   * @param value - What is the value of the transaction send in as wei\n   * @param tokensSold - how much tokens have been sold this far\n   * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale\n   * @param msgSender - who is the investor of this transaction\n   * @param decimals - how many decimal units the token has\n   * @return Amount of tokens the investor receives\n   */\n  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public pure returns (uint tokenAmount){\n      \n  }\n  \n}\ncontract FinalizeAgent {\n\n  function isFinalizeAgent() public pure returns(bool) {\n    return true;\n  }\n\n  /** Return true if we can run finalizeCrowdsale() properly.\n   *\n   * This is a safety check function that doesn't allow crowdsale to begin\n   * unless the finalizer has been set up properly.\n   */\n  function isSane() public pure returns (bool){\n      return true;\n}\n  /** Called once by crowdsale finalize() if the sale was success. */\n  function finalizeCrowdsale() pure public{\n     \n  }\n  \n\n}\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\ncontract UbricoinPresale {\n\n    /*/\n     *  Token state\n    /*/\n\n    enum Phase {\n        Created,\n        Running,\n        Paused,\n        Migrating,\n        Migrated\n    }\n\n    Phase public currentPhase = Phase.Created;\n    uint public totalSupply = 0; // amount of tokens already sold\n    \n\n    // Token manager has exclusive priveleges to call administrative\n    // functions on this contract.\n    address public tokenManager=0xAC762012330350DDd97Cc64B133536F8E32193a8;\n\n    // Gathered funds can be withdrawn only to escrow's address.\n    address public escrow=0x28970854Bfa61C0d6fE56Cc9daAAe5271CEaEC09;\n\n    // Crowdsale manager has exclusive priveleges to burn presale tokens.\n    address public crowdsaleManager=0x9888375f4663891770DaaaF9286d97d44FeFC82E;\n\n    mapping (address => uint256) private balance;\n\n\n    modifier onlyTokenManager()     { if(msg.sender != tokenManager) revert(); _; }\n    modifier onlyCrowdsaleManager() { if(msg.sender != crowdsaleManager) revert(); _; }\n\n\n    /*/\n     *  Events\n    /*/\n\n    event LogBuy(address indexed owner, uint256 value);\n    event LogBurn(address indexed owner, uint256 value);\n    event LogPhaseSwitch(Phase newPhase);\n\n\n    /*/\n     *  Public functions\n    /*/\n\n \n    /// @dev Returns number of tokens owned by given address.\n    /// @param _owner Address of token owner.\n    function burnTokens(address _owner) public\n        onlyCrowdsaleManager\n    {\n        // Available only during migration phase\n        if(currentPhase != Phase.Migrating) revert();\n\n        uint256 tokens = balance[_owner];\n        if(tokens == 0) revert();\n        balance[_owner] = 0;\n        \n        emit LogBurn(_owner, tokens);\n\n        // Automatically switch phase when migration is done.\n       \n    }\n\n    /*/\n     *  Administrative functions\n    /*/\n\n    function setPresalePhase(Phase _nextPhase) public\n        onlyTokenManager\n    {\n        bool canSwitchPhase\n            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\n            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\n                // switch to migration phase only if crowdsale manager is set\n            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\n                && _nextPhase == Phase.Migrating\n                && crowdsaleManager != 0x0)\n            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\n                // switch to migrated only if everyting is migrated\n            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\n                && totalSupply == 0);\n\n        if(!canSwitchPhase) revert();\n        currentPhase = _nextPhase;\n        emit LogPhaseSwitch(_nextPhase); \n           \n    }\n\n\n    function withdrawEther() public\n        onlyTokenManager\n    {\n        // Available at any phase.\n        if(address(this).balance > 0) {\n            if(!escrow.send(address(this).balance)) revert();\n        }\n    }\n\n\n    function setCrowdsaleManager(address _mgr) public\n        onlyTokenManager\n    {\n        // You can't change crowdsale contract when migration is in progress.\n        if(currentPhase == Phase.Migrating) revert();\n        crowdsaleManager = _mgr;\n    }\n}\ncontract Haltable is Ownable  {\n    \n  bool public halted;\n  \n   modifier stopInEmergency {\n    if (halted) revert();\n    _;\n  }\n\n  modifier stopNonOwnersInEmergency {\n    if (halted && msg.sender != owner) revert();\n    _;\n  }\n\n  modifier onlyInEmergency {\n    if (!halted) revert();\n    _;\n  }\n\n  // called by the owner on emergency, triggers stopped state\n  function halt() external onlyOwner {\n    halted = true;\n  }\n\n  // called by the owner on end of emergency, returns to normal state\n  function unhalt() external onlyOwner onlyInEmergency {\n    halted = false;\n  }\n\n}\ncontract WhitelistedCrowdsale is Ownable {\n\n  mapping(address => bool) public whitelist;\n\n  /**\n   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n   */\n  modifier isWhitelisted(address _beneficiary) {\n    require(whitelist[_beneficiary]);\n    _;\n  }\n  \n  /**\n   * @dev Adds single address to whitelist.\n   * @param _beneficiary Address to be added to the whitelist\n   */\n  function addToWhitelist(address _beneficiary) onlyOwner public  {\n    whitelist[_beneficiary] = true;\n  }\n\n  /**\n   * @dev Adds list of addresses to whitelist. \n   * @param _beneficiaries Addresses to be added to the whitelist\n   */\n  function addManyToWhitelist(address[] _beneficiaries) onlyOwner public {\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n      whitelist[_beneficiaries[i]] = true;\n    }\n  }\n\n  /**\n   * @dev Removes single address from whitelist.\n   * @param _beneficiary Address to be removed to the whitelist\n   */\n  function removeFromWhitelist(address _beneficiary)onlyOwner public {\n    whitelist[_beneficiary] = false;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n   * @param _beneficiary Token beneficiary\n   * @param _weiAmount Amount of wei contributed\n   */\n  \n}\n\n   contract UbricoinCrowdsale is FinalizeAgent,WhitelistedCrowdsale {\n    using SafeMath for uint256;\n    address public beneficiary=0x28970854Bfa61C0d6fE56Cc9daAAe5271CEaEC09;\n    uint256 public fundingGoal;\n    uint256 public amountRaised;\n    uint256 public deadline;\n       \n    mapping(address => uint256) public balanceOf;\n    bool fundingGoalReached = false;\n    bool crowdsaleClosed = false;\n    uint256 public investorCount = 0;\n    \n    bool public requiredSignedAddress;\n    bool public requireCustomerId;\n    \n\n    bool public paused = false;\n\n    \n    event GoalReached(address recipient, uint256 totalAmountRaised);\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\n    \n    // A new investment was made\n    event Invested(address investor, uint256 weiAmount, uint256 tokenAmount, uint256 customerId);\n\n  // The rules were changed what kind of investments we accept\n    event InvestmentPolicyChanged(bool requireCustomerId, bool requiredSignedAddress, address signerAddress);\n    event Pause();\n    event Unpause();\n \n     \n \n    modifier afterDeadline() { if (now >= deadline) _; }\n    \n\n    /**\n     * Check if goal was reached\n     *\n     * Checks if the goal or time limit has been reached and ends the campaign\n     */\n     \n    function invest(address ) public payable {\n    if(requireCustomerId) revert(); // Crowdsale needs to track partipants for thank you email\n    if(requiredSignedAddress) revert(); // Crowdsale allows only server-side signed participants\n   \n  }\n     \n    function investWithCustomerId(address , uint256 customerId) public payable {\n    if(requiredSignedAddress) revert(); // Crowdsale allows only server-side signed participants\n    if(customerId == 0)revert();  // UUIDv4 sanity check\n\n  }\n  \n    function buyWithCustomerId(uint256 customerId) public payable {\n    investWithCustomerId(msg.sender, customerId);\n  }\n     \n     \n    function checkGoalReached() afterDeadline public {\n        if (amountRaised >= fundingGoal){\n            fundingGoalReached = true;\n            emit GoalReached(beneficiary, amountRaised);\n        }\n        crowdsaleClosed = true;\n    }\n\n   \n\n    /**\n     * Withdraw the funds\n     *\n     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n     * the amount they contributed.\n     */\n    function safeWithdrawal() afterDeadline public {\n        if (!fundingGoalReached) {\n            uint256 amount = balanceOf[msg.sender];\n            balanceOf[msg.sender] = 0;\n            if (amount > 0) {\n                if (msg.sender.send(amount)) {\n                emit FundTransfer(beneficiary,amountRaised,false);\n                } else {\n                    balanceOf[msg.sender] = amount;\n                }\n            }\n        }\n\n        if  (fundingGoalReached && beneficiary == msg.sender) {\n            if (beneficiary.send(amountRaised)) {\n               emit FundTransfer(beneficiary,amountRaised,false);\n            } else {\n                //If we fail to send the funds to beneficiary, unlock funders balance\n                fundingGoalReached = false;\n            }\n        }\n    }\n    \n     /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public returns (bool) {\n    paused = true;\n    emit Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public returns (bool) {\n    paused = false;\n    emit Unpause();\n    return true;\n  }\n\n}\ncontract Upgradeable {\n    mapping(bytes4=>uint32) _sizes;\n    address _dest;\n\n    /**\n     * This function is called using delegatecall from the dispatcher when the\n     * target contract is first initialized. It should use this opportunity to\n     * insert any return data sizes in _sizes, and perform any other upgrades\n     * necessary to change over from the old contract implementation (if any).\n     * \n     * Implementers of this function should either perform strictly harmless,\n     * idempotent operations like setting return sizes, or use some form of\n     * access control, to prevent outside callers.\n     */\n    function initialize() public{\n        \n    }\n    \n    /**\n     * Performs a handover to a new implementing contract.\n     */\n    function replace(address target) internal {\n        _dest = target;\n        require(target.delegatecall(bytes4(keccak256(\"initialize()\"))));\n    }\n}\n/**\n * The dispatcher is a minimal 'shim' that dispatches calls to a targeted\n * contract. Calls are made using 'delegatecall', meaning all storage and value\n * is kept on the dispatcher. As a result, when the target is updated, the new\n * contract inherits all the stored data and value from the old contract.\n */\ncontract Dispatcher is Upgradeable {\n    \n    constructor (address target) public {\n        replace(target);\n    }\n    \n    function initialize() public {\n        // Should only be called by on target contracts, not on the dispatcher\n        revert();\n    }\n\n    function() public {\n        uint len;\n        address target;\n        bytes4 sig;\n        assembly { sig := calldataload(0) }\n        len = _sizes[sig];\n        target = _dest;\n        \n        bool ret;\n        assembly {\n            // return _dest.delegatecall(msg.data)\n            calldatacopy(0x0, 0x0, calldatasize)\n            ret:=delegatecall(sub(gas, 10000), target, 0x0, calldatasize, 0, len)\n            return(0, len)\n        }\n        if (!ret) revert();\n    }\n}\ncontract Example is Upgradeable {\n    uint _value;\n    \n    function initialize() public {\n        _sizes[bytes4(keccak256(\"getUint()\"))] = 32;\n    }\n    \n    function getUint() public view returns (uint) {\n        return _value;\n    }\n    \n    function setUint(uint value) public {\n        _value = value;\n    }\n}\ninterface tokenRecipient { \n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData)external;\n    \n}\n\n /**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\n\ncontract Ubricoin is UbricoinPresale,Ownable,Haltable, UbricoinCrowdsale,Upgradeable {\n    \n    using SafeMath for uint256;\n    \n    // Public variables of the token\n    string public name ='Ubricoin';\n    string public symbol ='UBN';\n    string public version= \"1.0\";\n    uint public decimals=18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint public totalSupply = 10000000000;\n    uint256 public constant RATE = 1000;\n    uint256 initialSupply;\n\n    \n    \n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    \n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n    \n    uint256 public AVAILABLE_AIRDROP_SUPPLY = 100000000; // 100% Released at Token distribution\n    uint256 public grandTotalClaimed = 1;\n    uint256 public startTime;\n    \n    struct Allocation {\n    uint8 AllocationSupply; // Type of allocation\n    uint256 totalAllocated; // Total tokens allocated\n    uint256 amountClaimed;  // Total tokens claimed\n}\n    \n    \n    mapping (address => Allocation) public allocations;\n\n    // List of admins\n    mapping (address => bool) public airdropAdmins;\n\n    // Keeps track of whether or not an Ubricoin airdrop has been made to a particular address\n    mapping (address => bool) public airdrops;\n\n  modifier onlyOwnerOrAdmin() {\n    require(msg.sender == owner || airdropAdmins[msg.sender]);\n    _;\n}\n    \n    \n    \n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n        bytes32 public currentChallenge;                         // The coin starts with a challenge\n        uint256 public timeOfLastProof;                             // Variable to keep track of when rewards were given\n        uint256 public difficulty = 10**32;                         // Difficulty starts reasonably low\n\n     \n    function proofOfWork(uint256 nonce) public{\n        bytes8 n = bytes8(keccak256(abi.encodePacked(nonce, currentChallenge)));    // Generate a random hash based on input\n        require(n >= bytes8(difficulty));                   // Check if it's under the difficulty\n\n        uint256 timeSinceLastProof = (now - timeOfLastProof);  // Calculate time since last reward was given\n        require(timeSinceLastProof >=  5 seconds);         // Rewards cannot be given too quickly\n        balanceOf[msg.sender] += timeSinceLastProof / 60 seconds;  // The reward to the winner grows by the minute\n\n        difficulty = difficulty * 10 minutes / timeSinceLastProof + 1;  // Adjusts the difficulty\n\n        timeOfLastProof = now;                              // Reset the counter\n        currentChallenge = keccak256(abi.encodePacked(nonce, currentChallenge, blockhash(block.number - 1)));  // Save a hash that will be used as the next proof\n    }\n\n\n   function () payable public whenNotPaused {\n        require(msg.value > 0);\n        uint256 tokens = msg.value.mul(RATE);\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(tokens);\n        totalSupply = totalSupply.add(tokens);\n        owner.transfer(msg.value);\n}\n    \n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n     function transfer(address _to, uint256 _value) public {\n\t\tbalanceOf[msg.sender] -= _value;\n\t\tbalanceOf[_to] += _value;\n\t}\n     \n   function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\n        return balanceOf[tokenOwner];\n        \n}\n\n   function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {\n        return allowance[tokenOwner][spender];\n}\n   \n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n  \n    function mintToken(address target, uint256 mintedAmount)private onlyOwner {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(0, owner, mintedAmount);\n        emit Transfer(owner, target, mintedAmount);\n    }\n\n    function validPurchase() internal returns (bool) {\n    bool lessThanMaxInvestment = msg.value <= 1000 ether; // change the value to whatever you need\n    return validPurchase() && lessThanMaxInvestment;\n}\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n    \n   /**\n    * @dev Add an airdrop admin\n    */\n  function setAirdropAdmin(address _admin, bool _isAdmin) public onlyOwner {\n    airdropAdmins[_admin] = _isAdmin;\n  }\n\n  /**\n    * @dev perform a transfer of allocations\n    * @param _recipient is a list of recipients\n    */\n  function airdropTokens(address[] _recipient) public onlyOwnerOrAdmin {\n    \n    uint airdropped;\n    for(uint256 i = 0; i< _recipient.length; i++)\n    {\n        if (!airdrops[_recipient[i]]) {\n          airdrops[_recipient[i]] = true;\n          Ubricoin.transfer(_recipient[i], 1 * decimals);\n          airdropped = airdropped.add(1 * decimals);\n        }\n    }\n    AVAILABLE_AIRDROP_SUPPLY = AVAILABLE_AIRDROP_SUPPLY.sub(airdropped);\n    totalSupply = totalSupply.sub(airdropped);\n    grandTotalClaimed = grandTotalClaimed.add(airdropped);\n}\n    \n}",
  "bytecode": "6000805460ff19168155600181905560028054600160a060020a031990811673ac762012330350ddd97cc64b133536f8e32193a8179091556003805482167328970854bfa61c0d6fe56cc9daaae5271ceaec09908117909155600480548316739888375f4663891770daaaf9286d97d44fefc82e1790556006805483168217905560088054909216178155600d805461ffff19169055600e91909155600f805462ff00001916905560c060405260808190527f55627269636f696e00000000000000000000000000000000000000000000000060a0908152620000e69160129190620001ba565b506040805180820190915260038082527f55424e000000000000000000000000000000000000000000000000000000000060209092019182526200012d91601391620001ba565b506040805180820190915260038082527f312e30000000000000000000000000000000000000000000000000000000000060209092019182526200017491601491620001ba565b5060126015556402540be4006016556305f5e100601a556001601b556d04ee2d6d415b85acef810000000060225560068054600160a060020a031916331790556200025f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001fd57805160ff19168380011785556200022d565b828001600101855582156200022d579182015b828111156200022d57825182559160200191906001019062000210565b506200023b9291506200023f565b5090565b6200025c91905b808211156200023b576000815560010162000246565b90565b611e64806200026f6000396000f3006080604052600436106102df5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301cb3b20811461039d57806303ca0eed146103b457806303f9c793146103dd578063055ad42e146103f1578063068365ec1461042a57806306fdde0314610435578063095ea7b3146104bf5780630a137a4c146104e35780630bf318a3146104fa57806310e823841461050f578063162cbefe1461053057806318160ddd1461055757806319cae4621461056c5780631ca2e94a1461058157806323b872dd1461059c57806329dcb0cf146105c65780632a709b14146105db578063313ce5671461060c578063341176d61461062157806338af3eed146106365780633f4ba83a1461064b57806342966c68146106605780634defd1bf146106785780634ee51a271461069957806351bdd585146106ee57806352a9039c1461070357806354fd4d50146107465780635c10fe081461075b5780635c975abb146107735780635ed7ca5b14610788578063614cb9041461079d578063664e9704146107b257806370a08231146107c75780637362377b146107e857806378e97925146107fd57806379aa024e1461081257806379cc6790146108385780637a3a0e841461085c5780637b3e5e7b146108715780638129fc1c146104fa57806381c8149d1461088657806382771c8e1461079d5780638456cb591461089b5780638ab1d681146108b05780638c10671c146108d15780638c86f0a7146109265780638da5cb5b146109475780639377530f1461095c57806395d89b41146109715780639b19251a14610986578063a9059cbb146109a7578063b237f7d4146109cb578063b9b8af0b146109ec578063cae9ca5114610a01578063cb3e64fd14610a6a578063d222dc0414610a7f578063d7e64c0014610a94578063dd62ed3e14610aa9578063e2fdcc1714610ad0578063e43252d714610ae5578063f2fde38b14610b06578063fd6b7ef814610b27575b600f5460009062010000900460ff16156102f857600080fd5b6000341161030557600080fd5b610317346103e863ffffffff610b3c16565b3360009081526018602052604090205490915061033a908263ffffffff610b7216565b3360009081526018602052604090205560165461035d908263ffffffff610b7216565b601655600654604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610399573d6000803e3d6000fd5b5050005b3480156103a957600080fd5b506103b2610b81565b005b3480156103c057600080fd5b506103c9610c00565b604080519115158252519081900360200190f35b6103b2600160a060020a0360043516610c0e565b3480156103fd57600080fd5b50610406610c36565b6040518082600481111561041657fe5b60ff16815260200191505060405180910390f35b6103b2600435610c3f565b34801561044157600080fd5b5061044a610c49565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561048457818101518382015260200161046c565b50505050905090810190601f1680156104b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104cb57600080fd5b506103c9600160a060020a0360043516602435610cd7565b6103b2600160a060020a0360043516602435610d04565b34801561050657600080fd5b506103b2610bfe565b34801561051b57600080fd5b506103c9600160a060020a0360043516610d24565b34801561053c57600080fd5b50610545610d39565b60408051918252519081900360200190f35b34801561056357600080fd5b50610545610d3f565b34801561057857600080fd5b50610545610d45565b34801561058d57600080fd5b506103b260ff60043516610d4b565b3480156105a857600080fd5b506103c9600160a060020a0360043581169060243516604435610f05565b3480156105d257600080fd5b50610545610f74565b3480156105e757600080fd5b506105f0610f7a565b60408051600160a060020a039092168252519081900360200190f35b34801561061857600080fd5b50610545610f89565b34801561062d57600080fd5b506105f0610f8f565b34801561064257600080fd5b506105f0610f9e565b34801561065757600080fd5b506103c9610fad565b34801561066c57600080fd5b506103c9600435611019565b34801561068457600080fd5b506103b2600160a060020a0360043516611091565b3480156106a557600080fd5b50604080516020600480358082013583810280860185019096528085526103b2953695939460249493850192918291850190849080828437509497506110f59650505050505050565b3480156106fa57600080fd5b50610545611248565b34801561070f57600080fd5b50610724600160a060020a036004351661124e565b6040805160ff9094168452602084019290925282820152519081900360600190f35b34801561075257600080fd5b5061044a611273565b34801561076757600080fd5b506103b26004356112ce565b34801561077f57600080fd5b506103c9611496565b34801561079457600080fd5b506103b26114a5565b3480156107a957600080fd5b506103c96114f3565b3480156107be57600080fd5b506105456114f8565b3480156107d357600080fd5b50610545600160a060020a03600435166114fe565b3480156107f457600080fd5b506103b2611519565b34801561080957600080fd5b5061054561156e565b34801561081e57600080fd5b506103b2600160a060020a03600435166024351515611574565b34801561084457600080fd5b506103c9600160a060020a03600435166024356115b6565b34801561086857600080fd5b50610545611687565b34801561087d57600080fd5b5061054561168d565b34801561089257600080fd5b50610545611693565b3480156108a757600080fd5b506103c9611699565b3480156108bc57600080fd5b506103b2600160a060020a0360043516611709565b3480156108dd57600080fd5b50604080516020600480358082013583810280860185019096528085526103b2953695939460249493850192918291850190849080828437509497506117419650505050505050565b34801561093257600080fd5b506103c9600160a060020a03600435166117b6565b34801561095357600080fd5b506105f06117cb565b34801561096857600080fd5b506105456117da565b34801561097d57600080fd5b5061044a6117e0565b34801561099257600080fd5b506103c9600160a060020a036004351661183b565b3480156109b357600080fd5b506103b2600160a060020a0360043516602435611850565b3480156109d757600080fd5b506103b2600160a060020a0360043516611882565b3480156109f857600080fd5b506103c9611933565b348015610a0d57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526103c9948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506119549650505050505050565b348015610a7657600080fd5b506103b2611a6d565b348015610a8b57600080fd5b506103c9611acd565b348015610aa057600080fd5b50610545611ad6565b348015610ab557600080fd5b50610545600160a060020a0360043581169060243516611adc565b348015610adc57600080fd5b506105f0611b07565b348015610af157600080fd5b506103b2600160a060020a0360043516611b16565b348015610b1257600080fd5b506103b2600160a060020a0360043516611b51565b348015610b3357600080fd5b506103b2611bac565b600080831515610b4f5760009150610b6b565b50828202828482811515610b5f57fe5b0414610b6757fe5b8091505b5092915050565b600082820183811015610b6757fe5b600b544210610bfe57600954600a5410610bee57600d805460ff19166001179055600854600a5460408051600160a060020a039093168352602083019190915280517fec3f991caf7857d61663fd1bba1739e04abd4781238508cde554bb849d790c859281900390910190a15b600d805461ff0019166101001790555b565b600f54610100900460ff1681565b600f54610100900460ff1615610c2357600080fd5b600f5460ff1615610c3357600080fd5b50565b60005460ff1681565b610c333382610d04565b6012805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ccf5780601f10610ca457610100808354040283529160200191610ccf565b820191906000526020600020905b815481529060010190602001808311610cb257829003601f168201915b505050505081565b336000908152601960209081526040808320600160a060020a039590951683529390529190912055600190565b600f5460ff1615610d1457600080fd5b801515610d2057600080fd5b5050565b601e6020526000908152604090205460ff1681565b601a5481565b60165481565b60225481565b600254600090600160a060020a03163314610d6557600080fd5b6000805460ff166004811115610d7757fe5b148015610d8f57506001826004811115610d8d57fe5b145b80610dc05750600160005460ff166004811115610da857fe5b148015610dc057506002826004811115610dbe57fe5b145b80610e225750600160005460ff166004811115610dd957fe5b1480610df55750600260005460ff166004811115610df357fe5b145b8015610e0c57506003826004811115610e0a57fe5b145b8015610e225750600454600160a060020a031615155b80610e535750600260005460ff166004811115610e3b57fe5b148015610e5357506001826004811115610e5157fe5b145b80610e905750600360005460ff166004811115610e6c57fe5b148015610e8457506004826004811115610e8257fe5b145b8015610e905750600154155b9050801515610e9e57600080fd5b6000805483919060ff19166001836004811115610eb757fe5b02179055507f8d9efa3fab1bd6476defa44f520afbf9337886a4947021fd7f2775e0efaf45718260405180826004811115610eee57fe5b60ff16815260200191505060405180910390a15050565b600160a060020a0383166000908152601960209081526040808320338452909152812054821115610f3557600080fd5b600160a060020a0384166000908152601960209081526040808320338452909152902080548390039055610f6a848484611d1e565b5060019392505050565b600b5481565b600254600160a060020a031681565b60155481565b600454600160a060020a031681565b600854600160a060020a031681565b600654600090600160a060020a03163314610fc757600080fd5b600f5462010000900460ff161515610fde57600080fd5b600f805462ff0000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a150600190565b3360009081526018602052604081205482111561103557600080fd5b3360008181526018602090815260409182902080548690039055601680548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a2506001919050565b600254600160a060020a031633146110a857600080fd5b600360005460ff1660048111156110bb57fe5b14156110c657600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6006546000908190600160a060020a03163314806111225750336000908152601e602052604090205460ff165b151561112d57600080fd5b5060005b825181101561120157601f6000848381518110151561114c57fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff1615156111f9576001601f6000858481518110151561118c57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905582516111e2908490839081106111d057fe5b60209081029091010151601554611850565b6015546111f690839063ffffffff610b7216565b91505b600101611131565b601a54611214908363ffffffff611e2616565b601a5560165461122a908363ffffffff611e2616565b601655601b54611240908363ffffffff610b7216565b601b55505050565b60205481565b601d6020526000908152604090208054600182015460029092015460ff909116919083565b6014805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ccf5780601f10610ca457610100808354040283529160200191610ccf565b60208054604080518084018590528082019290925280518083038201815260609092019081905281516000938493929182918401908083835b602083106113265780518252601f199092019160209182019101611307565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020915060225478010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff19168277ffffffffffffffffffffffffffffffffffffffffffffffff1916101515156113b757600080fd5b50602154420360058110156113cb57600080fd5b3360009081526018602052604090208054603c83040190556022548190610258028115156113f557fe5b04600101602255426021556020805460408051808401879052808201929092524360001901406060808401919091528151808403909101815260809092019081905281519192909182918401908083835b602083106114655780518252601f199092019160209182019101611446565b51815160209384036101000a6000190180199092169116179052604051919093018190039020909155505050505050565b600f5462010000900460ff1681565b600654600160a060020a031633146114bc57600080fd5b6006805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600190565b6103e881565b600160a060020a031660009081526018602052604090205490565b600254600160a060020a0316331461153057600080fd5b600030311115610bfe57600354604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501515610bfe57600080fd5b601c5481565b600654600160a060020a0316331461158b57600080fd5b600160a060020a03919091166000908152601e60205260409020805460ff1916911515919091179055565b600160a060020a0382166000908152601860205260408120548211156115db57600080fd5b600160a060020a038316600090815260196020908152604080832033845290915290205482111561160b57600080fd5b600160a060020a0383166000818152601860209081526040808320805487900390556019825280832033845282529182902080548690039055601680548690039055815185815291517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a250600192915050565b60095481565b600a5481565b60215481565b600654600090600160a060020a031633146116b357600080fd5b600f5462010000900460ff16156116c957600080fd5b600f805462ff00001916620100001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a150600190565b600654600160a060020a0316331461172057600080fd5b600160a060020a03166000908152600760205260409020805460ff19169055565b600654600090600160a060020a0316331461175b57600080fd5b5060005b8151811015610d2057600160076000848481518110151561177c57fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905560010161175f565b601f6020526000908152604090205460ff1681565b600654600160a060020a031681565b601b5481565b6013805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ccf5780601f10610ca457610100808354040283529160200191610ccf565b60076020526000908152604090205460ff1681565b3360009081526018602052604080822080548490039055600160a060020a039390931681529190912080549091019055565b600454600090600160a060020a0316331461189c57600080fd5b600360005460ff1660048111156118af57fe5b146118b957600080fd5b50600160a060020a0381166000908152600560205260409020548015156118df57600080fd5b600160a060020a038216600081815260056020908152604080832092909255815184815291517f38d762ef507761291a578e921acfe29c1af31a7331ea03e391cf16cfc4d4f5819281900390910190a25050565b60065474010000000000000000000000000000000000000000900460ff1681565b6000836119618185610cd7565b15611a65576040517f8f4ffcb10000000000000000000000000000000000000000000000000000000081523360048201818152602483018790523060448401819052608060648501908152875160848601528751600160a060020a03871695638f4ffcb195948b94938b939192909160a490910190602085019080838360005b838110156119f95781810151838201526020016119e1565b50505050905090810190601f168015611a265780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015611a4857600080fd5b505af1158015611a5c573d6000803e3d6000fd5b50505050600191505b509392505050565b600654600160a060020a03163314611a8457600080fd5b60065474010000000000000000000000000000000000000000900460ff161515611aad57600080fd5b6006805474ff000000000000000000000000000000000000000019169055565b600f5460ff1681565b600e5481565b600160a060020a03918216600090815260196020908152604080832093909416825291909152205490565b600354600160a060020a031681565b600654600160a060020a03163314611b2d57600080fd5b600160a060020a03166000908152600760205260409020805460ff19166001179055565b600654600160a060020a03163314611b6857600080fd5b600160a060020a0381161515611b7d57600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600b546000904210610c3357600d5460ff161515611c6b5750336000908152600c6020526040812080549082905590811115611c6b57604051339082156108fc029083906000818181858888f1935050505015611c5857600854600a5460408051600160a060020a0390931683526020830191909152600082820152517fe842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf69181900360600190a1611c6b565b336000908152600c602052604090208190555b600d5460ff168015611c875750600854600160a060020a031633145b15610c3357600854600a54604051600160a060020a039092169181156108fc0291906000818181858888f1935050505015611d1157600854600a5460408051600160a060020a0390931683526020830191909152600082820152517fe842aea7a5f1b01049d752008c53c52890b1a6daf660cf39e8eec506112bbdf69181900360600190a1610c33565b600d805460ff1916905550565b6000600160a060020a0383161515611d3557600080fd5b600160a060020a038416600090815260186020526040902054821115611d5a57600080fd5b600160a060020a0383166000908152601860205260409020548281011015611d8157600080fd5b50600160a060020a038083166000818152601860209081526040808320805495891680855282852080548981039091559486905281548801909155815187815291519390950194927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600160a060020a03808416600090815260186020526040808220549287168252902054018114611e2057fe5b50505050565b600082821115611e3257fe5b509003905600a165627a7a7230582090c033d1bbca8bcf2f043412d55fd72b5340825bdd2cb51cf6861ca1d730415a0029"
}