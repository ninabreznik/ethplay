{
  "address": "0xc6dad66305545ae3111ba7000289ab3426cf02a2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DatCoin",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-22\n*/\n\npragma solidity ^0.4.11;\n\ncontract ERC20Interface {\n    // Get the total token supply\n    function totalSupply() constant returns (uint256);\n \n    // Get the account balance of another account with address _owner\n    function balanceOf(address _owner) constant returns (uint256 balance);\n \n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _value) returns (bool success);\n \n    // Send _value amount of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    // this function is required for some DEX functionality\n    function approve(address _spender, uint256 _value) returns (bool success);\n \n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n \n    // Triggered when tokens are transferred.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n \n    // Triggered whenever approve(address _spender, uint256 _value) is called.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n \ncontract DatCoin is ERC20Interface {\n    uint8 public constant decimals = 5;\n    string public constant symbol = \"DTC\";\n    string public constant name = \"DatCoin\";\n\n    uint public _totalSupply = 10 ** 14;\n    uint public _originalBuyPrice = 10 ** 10;\n    uint public _minimumBuyAmount = 10 ** 17;\n    uint public _thresholdOne = 9 * (10 ** 13);\n    uint public _thresholdTwo = 85 * (10 ** 12);\n   \n    // Owner of this contract\n    address public owner;\n \n    // Balances for each account\n    mapping(address => uint256) balances;\n \n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) allowed;\n\n    // Functions with this modifier can only be executed by the owner\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n        _;\n    }\n\n    modifier thresholdTwo() {\n        if (msg.value < _minimumBuyAmount || balances[owner] <= _thresholdTwo) {\n            revert();\n        }\n        _;\n    }\n \n    // Constructor\n    function DatCoin() {\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n    }\n \n    function totalSupply() constant returns (uint256) {\n        return _totalSupply;\n    }\n \n    // What is the balance of a particular account?\n    function balanceOf(address _owner) constant returns (uint256) {\n        return balances[_owner];\n    }\n \n    // Transfer the balance from sender's account to another account\n    function transfer(address _to, uint256 _amount) returns (bool) {\n        if (balances[msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool) {\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _amount) returns (bool) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n    \n    // Buy DatCoin by sending Ether\n    function buy() payable thresholdTwo returns (uint256 amount) {\n        uint value = msg.value;\n        amount = value / _originalBuyPrice;\n        \n        if (balances[owner] <= _thresholdOne + amount) {\n            uint temp = 0;\n            if (balances[owner] > _thresholdOne)\n                temp = balances[owner] - _thresholdOne;\n            amount = temp + (amount - temp) * 10 / 13;\n            if (balances[owner] < amount) {\n                temp = (amount - balances[owner]) * (_originalBuyPrice * 13 / 10);\n                msg.sender.transfer(temp);\n                amount = balances[owner];\n                value -= temp;\n            }\n        }\n\n        owner.transfer(value);\n        balances[msg.sender] += amount;\n        balances[owner] -= amount;\n        Transfer(owner, msg.sender, amount);\n        return amount;\n    }\n    \n    // Owner withdraws Ether in contract\n    function withdraw() onlyOwner returns (bool) {\n        return owner.send(this.balance);\n    }\n}",
  "bytecode": "6060604052655af3107a40006000556402540be40060015567016345785d8a00006002556551dac207a000600355654d4e9ace5000600455341561004257600080fd5b5b60058054600160a060020a03191633600160a060020a03908116919091179182905560008054929091168152600660205260409020555b5b610a7a8061008a6000396000f300606060405236156100ee5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f3578063095ea7b31461017e57806318160ddd146101b457806323b872dd146101d9578063313ce567146102155780633ccfd60b1461023e5780633eaaf86b146102655780636b9cf5341461028a57806370a08231146102af57806378f2144b146102e05780638da5cb5b1461030557806395d89b41146103345780639d94a8fa146103bf578063a6f2ae3a146103e4578063a9059cbb146103fe578063b081cfc514610434578063dd62ed3e14610459575b600080fd5b34156100fe57600080fd5b610106610490565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018957600080fd5b6101a0600160a060020a03600435166024356104c7565b604051901515815260200160405180910390f35b34156101bf57600080fd5b6101c7610534565b60405190815260200160405180910390f35b34156101e457600080fd5b6101a0600160a060020a036004358116906024351660443561053b565b604051901515815260200160405180910390f35b341561022057600080fd5b610228610657565b60405160ff909116815260200160405180910390f35b341561024957600080fd5b6101a061065c565b604051901515815260200160405180910390f35b341561027057600080fd5b6101c76106ae565b60405190815260200160405180910390f35b341561029557600080fd5b6101c76106b4565b60405190815260200160405180910390f35b34156102ba57600080fd5b6101c7600160a060020a03600435166106ba565b60405190815260200160405180910390f35b34156102eb57600080fd5b6101c76106d9565b60405190815260200160405180910390f35b341561031057600080fd5b6103186106df565b604051600160a060020a03909116815260200160405180910390f35b341561033f57600080fd5b6101066106ee565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101435780820151818401525b60200161012a565b50505050905090810190601f1680156101705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ca57600080fd5b6101c7610725565b60405190815260200160405180910390f35b6101c761072b565b60405190815260200160405180910390f35b341561040957600080fd5b6101a0600160a060020a036004351660243561094c565b604051901515815260200160405180910390f35b341561043f57600080fd5b6101c7610a1b565b60405190815260200160405180910390f35b341561046457600080fd5b6101c7600160a060020a0360043581169060243516610a21565b60405190815260200160405180910390f35b60408051908101604052600781527f446174436f696e00000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260076020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b6000545b90565b600160a060020a03831660009081526006602052604081205482901080159061058b5750600160a060020a0380851660009081526007602090815260408083203390941683529290522054829010155b80156105975750600082115b80156105bc5750600160a060020a038316600090815260066020526040902054828101115b1561064b57600160a060020a0380851660008181526006602081815260408084208054899003905560078252808420338716855282528084208054899003905594881680845291905290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600161064f565b5060005b5b9392505050565b600581565b60055460009033600160a060020a0390811691161461067a57600080fd5b600554600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19450505050505b5b90565b60005481565b60025481565b600160a060020a0381166000908152600660205260409020545b919050565b60015481565b600554600160a060020a031681565b60408051908101604052600381527f4454430000000000000000000000000000000000000000000000000000000000602082015281565b60045481565b600080600060025434108061075c5750600454600554600160a060020a031660009081526006602052604090205411155b1561076657600080fd5b3491506001548281151561077657fe5b600354600554600160a060020a0316600090815260066020526040902054929091049450840190116108a25750600354600554600160a060020a031660009081526006602052604081205490919011156107eb5750600354600554600160a060020a0316600090815260066020526040902054035b600d600a828503025b600554600160a060020a031660009081526006602052604090205491900482019350839010156108a257600154600a90600d025b600554600160a060020a039081166000908152600660205260409081902054870393909204929092029250339091169082156108fc0290839051600060405180830381858888f19350505050151561087f57600080fd5b600554600160a060020a0316600090815260066020526040902054925090819003905b5b600554600160a060020a031682156108fc0283604051600060405180830381858888f1935050505015156108d657600080fd5b600160a060020a03338116600081815260066020526040808220805488019055600580548516835291819020805488900390559054919291909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35b5b505090565b600160a060020a0333166000908152600660205260408120548290108015906109755750600082115b801561099a5750600160a060020a038316600090815260066020526040902054828101115b15610a0c57600160a060020a033381166000818152600660205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600161052e565b50600061052e565b5b92915050565b60035481565b600160a060020a038083166000908152600760209081526040808320938516835292905220545b929150505600a165627a7a7230582096476f25d8edebd1727fa162a360a352c7b0245259ad69dc9f945cfe89ccaafc0029"
}