{
  "address": "0x67e0556a940c148dffaaebffc26ba99aba45a5e9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Registry",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-28\n*/\n\npragma solidity ^0.4.21;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n// END OF library SafeMath\n\ncontract Roles {\n    // Master Key access, always ONE and ONE ONLY \n    address public superAdmin ;\n\n    address public canary ; \n\n\n    // initiators and validators can be many\n    mapping (address => bool) public initiators ; \n    mapping (address => bool) public validators ;  \n    address[] validatorsAcct ; \n\n    // keep track of the current qty. of initiators around \n    uint public qtyInitiators ; \n\n    // hard-code the max amount of validators/voters in the system \n    // this is required to initialize the storage for each new proposal \n    uint constant public maxValidators = 20 ; \n\n    // keep track of the current qty. of active validators around \n    uint public qtyValidators ; \n\n    event superAdminOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event initiatorAdded(address indexed newInitiator);\n    event validatorAdded(address indexed newValidator);\n    event initiatorRemoved(address indexed removedInitiator);\n    event validatorRemoved(address indexed addedValidator);\n    event canaryOwnershipTransferred(address indexed previousOwner, address indexed newOwner) ; \n\n\n    \n    constructor() public \n    { \n      superAdmin = msg.sender ;\n      \n    }\n\n    modifier onlySuperAdmin {\n        require( msg.sender == superAdmin );\n        _;\n    }\n\n    modifier onlyCanary {\n        require( msg.sender == canary );\n        _;\n    }\n\n    modifier onlyInitiators {\n        require( initiators[msg.sender] );\n        _;\n    }\n    \n    modifier onlyValidators {\n        require( validators[msg.sender] );\n        _;\n    }\n    \n\nfunction transferSuperAdminOwnership(address newOwner) public onlySuperAdmin \n{\n  require(newOwner != address(0)) ;\n  superAdmin = newOwner ;\n  emit superAdminOwnershipTransferred(superAdmin, newOwner) ;  \n}\n\nfunction transferCanaryOwnership(address newOwner) public onlySuperAdmin \n{\n  require(newOwner != address(0)) ;\n  canary = newOwner ;\n  emit canaryOwnershipTransferred(canary, newOwner) ;  \n}\n\n\nfunction addValidator(address _validatorAddr) public onlySuperAdmin \n{\n  require(_validatorAddr != address(0));\n  require(!validators[_validatorAddr]) ; \n  validators[_validatorAddr] = true ; \n  validatorsAcct.push(_validatorAddr) ; \n  qtyValidators++ ; \n  emit validatorAdded(_validatorAddr) ;  \n}\n\nfunction revokeValidator(address _validatorAddr) public onlySuperAdmin\n{\n  require(_validatorAddr != address(0));\n  require(validators[_validatorAddr]) ; \n  validators[_validatorAddr] = false ; \n  \n  for(uint i = 0 ; i < qtyValidators ; i++ ) \n    {\n      if (validatorsAcct[i] == _validatorAddr)\n         validatorsAcct[i] = address(0) ; \n    }\n  qtyValidators-- ; \n  emit validatorRemoved(_validatorAddr) ;  \n}\n\nfunction addInitiator(address _initiatorAddr) public onlySuperAdmin\n{\n  require(_initiatorAddr != address(0));\n  require(!initiators[_initiatorAddr]) ;\n  initiators[_initiatorAddr] = true ; \n  qtyInitiators++ ; \n  emit initiatorAdded(_initiatorAddr) ; \n}\n\nfunction revokeInitiator(address _initiatorAddr) public onlySuperAdmin\n{\n  require(_initiatorAddr != address(0));\n  require(initiators[_initiatorAddr]) ; \n  initiators[_initiatorAddr] = false ;\n  qtyInitiators-- ; \n  emit initiatorRemoved(_initiatorAddr) ; \n}\n  \n\n} // END OF Roles contract \n\n\ncontract Storage {\n\n  // We store here the whole storage implementation, decoupling the logic \n  // which will be defined in FKXIdentitiesV1, FKXIdentitiesV2..., FKXIdentitiesV1n\n\nuint scoringThreshold ; \n\nstruct Proposal \n  {\n    string ipfsAddress ; \n    uint timestamp ; \n    uint totalAffirmativeVotes ; \n    uint totalNegativeVotes ; \n    uint totalVoters ; \n    address[] votersAcct ; \n    mapping (address => uint) votes ; \n  }\n\n// storage to keep track of all the proposals \nmapping (bytes32 => Proposal) public proposals ; \nuint256 totalProposals ; \n\n// helper array to keep track of all rootHashes proposals\nbytes32[] rootHashesProposals ; \n\n\n// storage records the final && immutable ipfsAddresses validated by majority consensus of validators\nmapping (bytes32 => string) public ipfsAddresses ; \n\n// Helper vector to track all keys (rootHasshes) added to ipfsAddresses\nbytes32[] ipfsAddressesAcct ;\n\n}\n\n\ncontract Registry is Storage, Roles {\n\n    address public logic_contract;\n\n    function setLogicContract(address _c) public onlySuperAdmin returns (bool success){\n        logic_contract = _c;\n        return true;\n    }\n\n    function () payable public {\n        address target = logic_contract;\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize)\n            let result := delegatecall(gas, target, ptr, calldatasize, 0, 0)\n            let size := returndatasize\n            returndatacopy(ptr, 0, size)\n            switch result\n            case 0 { revert(ptr, size) }\n            case 1 { return(ptr, size) }\n        }\n    }\n}\n\n\ncontract FKXIdentitiesV1 is Storage, Roles {\n\nusing SafeMath for uint256;\n\nevent newProposalLogged(address indexed initiator, bytes32 rootHash, string ipfsAddress ) ; \nevent newVoteLogged(address indexed voter, bool vote) ;\nevent newIpfsAddressAdded(bytes32 rootHash, string ipfsAddress ) ; \n\n\nconstructor() public \n{\n  qtyInitiators = 0 ; \n  qtyValidators = 0 ; \n  scoringThreshold = 10 ;\n}\n\n// Set the score parameter that once reached would eliminate/revoke\n// validators with scores greater than _scoreMax from the list of authorized validators\nfunction setScoringThreshold(uint _scoreMax) public onlySuperAdmin\n{\n  scoringThreshold = _scoreMax ; \n}\n\n\n// An initiator writes a new proposal in the proposal storage area \n\nfunction propose(bytes32 _rootHash, string _ipfsAddress) public onlyInitiators\n{\n  // proposal should not be present already, i.e timestamp has to be in an uninitialized state, i.e. zero \n  require(proposals[_rootHash].timestamp == 0 ) ;\n\n  // writes the proposal for the _ipfsAddress, timestamp it 'now' and set the qty to zero (i.e. no votes yet)\n  address[] memory newVoterAcct = new address[](maxValidators) ; \n  Proposal memory newProposal = Proposal( _ipfsAddress , now, 0, 0, 0, newVoterAcct ) ; \n  proposals[_rootHash] = newProposal ; \n  emit newProposalLogged(msg.sender, _rootHash, _ipfsAddress ) ; \n  rootHashesProposals.push(_rootHash) ; \n  totalProposals++ ; \n}\n\n\n// obtain, for a given rootHash, the definitive immutable stored _ipfsAddress \nfunction getIpfsAddress(bytes32 _rootHash) constant public returns (string _ipfsAddress)\n{\n  return ipfsAddresses[_rootHash] ; \n}\n\n// obtain, for a given rootHash, the proposed (not definitively voted yet) _ipfsAddress\nfunction getProposedIpfs(bytes32 _rootHash) constant public returns (string _ipfsAddress)\n{\n  return proposals[_rootHash].ipfsAddress ; \n}\n\n// how many voters have voted for a given proposal? \nfunction howManyVoters(bytes32 _rootHash) constant public returns (uint)\n{\n  return proposals[_rootHash].totalVoters ; \n}\n\n// Validator casts one vote to the proposed ipfsAddress stored in the _rootHash key in the proposals storage area \n// if _vote == true means voting affirmatively, else if _vote == false, means voting negatively\nfunction vote(bytes32 _rootHash, bool _vote) public onlyValidators\n{\n  // if timestamp == 0 it means such proposal does not exist, i.e. was never timestamped hence \n  //  contains the 'zero' uninitialized value\n  require(proposals[_rootHash].timestamp > 0) ;\n\n  // checks this validator have not already voted for this proposal\n  // 0 no voted yet\n  // 1 voted affirmatively\n  // 2 voted negatively \n\n  require(proposals[_rootHash].votes[msg.sender]==0) ; \n\n  // add this validator address to the array of voters. \n  proposals[_rootHash].votersAcct.push(msg.sender) ; \n\n  if (_vote ) \n    { \n      proposals[_rootHash].votes[msg.sender] = 1 ; // 1 means votes affirmatively\n      proposals[_rootHash].totalAffirmativeVotes++ ; \n    } \n       else \n        { proposals[_rootHash].votes[msg.sender] = 2 ; // 2 means votes negatively\n          proposals[_rootHash].totalNegativeVotes++ ; \n        } \n\n  emit newVoteLogged(msg.sender, _vote) ;\n  proposals[_rootHash].totalVoters++ ; \n\n  // check if a majority consensus was obtained and if so, it records the final result in the definitive \n  // immutable storage area: ipfsAddresses \n  if ( isConsensusObtained(proposals[_rootHash].totalAffirmativeVotes) )\n  {\n  // need to make sure the consensuated vote had not already been written to the storage area ipfsAddresses\n  // so we don't write duplicate info again, just to save some gas :) and also b/c it's the right thing to do \n  // to minimize entropy in the universe... hence, we need to check for an empty string\n    bytes memory tempEmptyString = bytes(ipfsAddresses[_rootHash]) ; \n    if ( tempEmptyString.length == 0 ) \n      { \n        ipfsAddresses[_rootHash] = proposals[_rootHash].ipfsAddress ;  \n        emit newIpfsAddressAdded(_rootHash, ipfsAddresses[_rootHash] ) ;\n        ipfsAddressesAcct.push(_rootHash) ; \n\n      } \n\n  }\n\n} \n\n\n// returns the total number of ipfsAddresses ever stored in the definitive immutable storage 'ipfsAddresses'\nfunction getTotalQtyIpfsAddresses() constant public returns (uint)\n{ \n  return ipfsAddressesAcct.length ; \n}\n\n// returns one rootHash which is stored at a specific _index position\nfunction getOneByOneRootHash(uint _index) constant public returns (bytes32 _rootHash )\n{\n  require( _index <= (getTotalQtyIpfsAddresses()-1) ) ; \n  return ipfsAddressesAcct[_index] ; \n}\n\n// consensus obtained it is true if and only if n+1 validators voted affirmatively for a proposal \n// where n == the total qty. of validators (qtyValidators)\nfunction isConsensusObtained(uint _totalAffirmativeVotes) constant public returns (bool)\n{\n // multiplying by 10000 (10 thousand) for decimal precision management\n // note: This scales up to 9999 validators only\n\n require (qtyValidators > 0) ; // prevents division by zero \n uint dTotalVotes = _totalAffirmativeVotes * 10000 ; \n return (dTotalVotes / qtyValidators > 5000 ) ;\n\n}\n\n\n// Validators:\n// returns one proposal (the first one) greater than, STRICTLY GREATER THAN the given _timestampFrom \n// timestamp > _timestampFrom \nfunction getProposals(uint _timestampFrom) constant public returns (bytes32 _rootHash)\n{\n   // returns the first rootHash corresponding to a timestamp greater than the parameter \n   uint max = rootHashesProposals.length ; \n\n   for(uint i = 0 ; i < max ; i++ ) \n    {\n      if (proposals[rootHashesProposals[i]].timestamp > _timestampFrom)\n         return rootHashesProposals[i] ; \n    }\n\n}\n\n// returns, for one proposal \n// identified by a rootHash, the timestamp UNIX epoch time associated with it\n\nfunction getTimestampProposal(bytes32 _rootHash) constant public returns (uint _timeStamp) \n{\n  return proposals[_rootHash].timestamp ; \n}\n\n\n\n// returns the total quantity of active validators\n// only 'active' ones quantity  \nfunction getQtyValidators() constant public returns (uint)\n{\n  return qtyValidators ; \n}\n\n// It returns the address of an active validator in the specific '_t' vector position of active validators \n// vector positions start at zero and ends at 'getQtyValidators - 1' so in order to get all vaidators \n// you have to iterate one by one from 0 to ' getQtyValidators -1 '\nfunction getValidatorAddress(int _t) constant public returns (address _validatorAddr)\n{\n   int x = -1 ; \n   uint size = validatorsAcct.length ; \n\n   for ( uint i = 0 ; i < size ; i++ )\n   {\n\n      if ( validators[validatorsAcct[i]] ) x++ ; \n      if ( x == _t ) return (validatorsAcct[i]) ;  \n   }\n}\n \n// returns true if the rootHash was impacted, i.e. it's available and exists in the ipfsAddresses array\n// and false if otherwise\n\nfunction getStatusForRootHash(bytes32 _rootHash) constant public returns (bool)\n{\n bytes memory tempEmptyStringTest = bytes(ipfsAddresses[_rootHash]); // Uses memory\n if (tempEmptyStringTest.length == 0) {\n    // emptyStringTest is an empty string, hence the _rootHash was not impacted there so does not exist\n    return false ; \n} else {\n    // emptyStringTest is not an empty string\n    return true ; \n}\n\n} \n\n} // END OF FKXIdentities contract \n\n\n// DEBUG info below IGNORE \n// rootHash examples below, always 32 bytes in the format:\n// 0x12207D5A99F603F231D53A4F39D1521F98D2E8BB279CF29BEBFD0687DC98458E\n// 0x12207D5A99F603F231D53A4F39D1521F98D2E8BB279CF29BEBFD0687DC98458F\n// ipfs address, string: \"whatever here\",\n\n// JUN-5 v1 contract deployed at https://rinkeby.etherscan.io/address/0xbe2ee825339c25749fb8ff8f6621d304fb2e2be5\n// JUN-5 v1 contract deployed at https://ropsten.etherscan.io/address/0xbe2ee825339c25749fb8ff8f6621d304fb2e2be5\n\n// SuperOwner account is: 0xFA8f851b63E3742Eb5909C0735017C75b999B043 (macbook chrome)\n\n\n// returns the vote status for a given proposal for a specific validator Address \n// 0 no voted yet / blank vote \n// 1 voted affirmatively\n// 2 voted negatively \n// function getVoterStatus(bytes32 _rootHash, address _validatorAddr) constant public returns (uint _voteStatus)\n// {\n\n // proposals[_rootHash].votes[_validatorAddr] ; \n\n// }",
  "bytecode": "608060405233600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611481806100546000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063047564b71461015357806304ee54d21461019657806308ac5256146101d95780630b9c0c00146102045780631c624a60146102ae5780632591432d146102d957806329575f6a1461033057806332ed5b12146103875780634d238c8e1461044d5780634de94320146104905780635aa4470f146104e75780637d8fcfb41461054257806396de6caa14610585578063ac800b32146105b0578063b4210257146105f3578063bdbfccee14610636578063fa52c7d814610691575b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060405136600082376000803683855af43d806000843e816000811461014457600181146101485761014c565b8184fd5b8184f35b5050505050005b34801561015f57600080fd5b50610194600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106ec565b005b3480156101a257600080fd5b506101d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610973565b005b3480156101e557600080fd5b506101ee610b14565b6040518082815260200191505060405180910390f35b34801561021057600080fd5b506102336004803603810190808035600019169060200190929190505050610b19565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610273578082015181840152602081019050610258565b50505050905090810190601f1680156102a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102ba57600080fd5b506102c3610bc9565b6040518082815260200191505060405180910390f35b3480156102e557600080fd5b506102ee610bcf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033c57600080fd5b50610345610bf5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039357600080fd5b506103b66004803603810190808035600019169060200190929190505050610c1b565b6040518080602001868152602001858152602001848152602001838152602001828103825287818151815260200191508051906020019080838360005b8381101561040e5780820151818401526020810190506103f3565b50505050905090810190601f16801561043b5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561045957600080fd5b5061048e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ce9565b005b34801561049c57600080fd5b506104a5610ef0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f357600080fd5b50610528600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f16565b604051808215151515815260200191505060405180910390f35b34801561054e57600080fd5b50610583600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbe565b005b34801561059157600080fd5b5061059a611116565b6040518082815260200191505060405180910390f35b3480156105bc57600080fd5b506105f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061111c565b005b3480156105ff57600080fd5b50610634600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611274565b005b34801561064257600080fd5b50610677600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611415565b604051808215151515815260200191505060405180910390f35b34801561069d57600080fd5b506106d2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611435565b604051808215151515815260200191505060405180910390f35b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561074a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561078657600080fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156107de57600080fd5b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b600c54811015610919578173ffffffffffffffffffffffffffffffffffffffff16600a8281548110151561086b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561090c576000600a828154811015156108c357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b808060010191505061083b565b600c60008154809291906001900391905055508173ffffffffffffffffffffffffffffffffffffffff167fa959a9870268d9b0e72d62575c4485b2d251b7fa6f2e6d651ab34a942e4b6a6d60405160405180910390a25050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109cf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a0b57600080fd5b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610a6357600080fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600b60008154809291906001900391905055508073ffffffffffffffffffffffffffffffffffffffff167f89a892711b872ae4055f22a8c1db09f4627d0b8265e61f706fe613d5cab6d8cd60405160405180910390a250565b601481565b60046020528060005260406000206000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc15780601f10610b9657610100808354040283529160200191610bc1565b820191906000526020600020905b815481529060010190602001808311610ba457829003601f168201915b505050505081565b600b5481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b5050505050908060010154908060020154908060030154908060040154905085565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d4557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d8157600080fd5b600960008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610dda57600080fd5b6001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600a8190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600c600081548092919060010191905055508073ffffffffffffffffffffffffffffffffffffffff167fb22239a9652195d5b31b2310e28b0be7f64f67805a98b45cdd03000d79ac751960405160405180910390a250565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f7457600080fd5b81600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561101a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561105657600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f4037d6cac8c237e6cffa8d27b8392dc09106236cab592a842bc00169fdcefd6460405160405180910390a350565b600c5481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561117857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111b457600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fca59ea8c0fa9019e0dd68a79567220768a9d8a73c55bb53f56c7c26943084c9c60405160405180910390a350565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112d057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561130c57600080fd5b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561136557600080fd5b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600b600081548092919060010191905055508073ffffffffffffffffffffffffffffffffffffffff167f349824b93839e3179e5c74e80e7267c1842e6bc9e05cf01cb45e28e70c27a41e60405160405180910390a250565b60086020528060005260406000206000915054906101000a900460ff1681565b60096020528060005260406000206000915054906101000a900460ff16815600a165627a7a7230582061cd91b308dabb730e2f19650347c5eedca3a93dde129d3608f18db7e858dad00029"
}