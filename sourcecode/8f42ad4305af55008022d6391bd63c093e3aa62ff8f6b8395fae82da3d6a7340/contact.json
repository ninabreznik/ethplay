{
  "address": "0xf6a6e8dbfdaf43a372c703f02f12cb91d105d537",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BZxProxy",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-23\n*/\n\n/**\n * Copyright 2017–2018, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n \npragma solidity 0.5.2;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n  /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n  uint256 private constant REENTRANCY_GUARD_FREE = 1;\n\n  /// @dev Constant for locked guard state\n  uint256 private constant REENTRANCY_GUARD_LOCKED = 2;\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  uint256 private reentrancyLock = REENTRANCY_GUARD_FREE;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one `nonReentrant` function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and an `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(reentrancyLock == REENTRANCY_GUARD_FREE);\n    reentrancyLock = REENTRANCY_GUARD_LOCKED;\n    _;\n    reentrancyLock = REENTRANCY_GUARD_FREE;\n  }\n\n}\n\ncontract GasTracker {\n\n    uint256 internal gasUsed;\n\n    modifier tracksGas() {\n        // tx call 21k gas\n        gasUsed = gasleft() + 21000;\n\n        _; // modified function body inserted here\n\n        gasUsed = 0; // zero out the storage so we don't persist anything\n    }\n}\n\ncontract BZxObjects {\n\n    struct ListIndex {\n        uint256 index;\n        bool isSet;\n    }\n\n    struct LoanOrder {\n        address loanTokenAddress;\n        address interestTokenAddress;\n        address collateralTokenAddress;\n        address oracleAddress;\n        uint256 loanTokenAmount;\n        uint256 interestAmount;\n        uint256 initialMarginAmount;\n        uint256 maintenanceMarginAmount;\n        uint256 maxDurationUnixTimestampSec;\n        bytes32 loanOrderHash;\n    }\n\n    struct LoanOrderAux {\n        address makerAddress;\n        address takerAddress;\n        address feeRecipientAddress;\n        address tradeTokenToFillAddress;\n        uint256 lenderRelayFee;\n        uint256 traderRelayFee;\n        uint256 makerRole;\n        uint256 expirationUnixTimestampSec;\n        bool withdrawOnOpen;\n        string description;\n    }\n\n    struct LoanPosition {\n        address trader;\n        address collateralTokenAddressFilled;\n        address positionTokenAddressFilled;\n        uint256 loanTokenAmountFilled;\n        uint256 loanTokenAmountUsed;\n        uint256 collateralTokenAmountFilled;\n        uint256 positionTokenAmountFilled;\n        uint256 loanStartUnixTimestampSec;\n        uint256 loanEndUnixTimestampSec;\n        bool active;\n        uint256 positionId;\n    }\n\n    struct PositionRef {\n        bytes32 loanOrderHash;\n        uint256 positionId;\n    }\n\n    struct LenderInterest {\n        uint256 interestOwedPerDay;\n        uint256 interestPaid;\n        uint256 interestPaidDate;\n    }\n\n    struct TraderInterest {\n        uint256 interestOwedPerDay;\n        uint256 interestPaid;\n        uint256 interestDepositTotal;\n        uint256 interestUpdatedDate;\n    }\n}\n\ncontract BZxEvents {\n\n    event LogLoanAdded (\n        bytes32 indexed loanOrderHash,\n        address adderAddress,\n        address indexed makerAddress,\n        address indexed feeRecipientAddress,\n        uint256 lenderRelayFee,\n        uint256 traderRelayFee,\n        uint256 maxDuration,\n        uint256 makerRole\n    );\n\n    event LogLoanTaken (\n        address indexed lender,\n        address indexed trader,\n        address loanTokenAddress,\n        address collateralTokenAddress,\n        uint256 loanTokenAmount,\n        uint256 collateralTokenAmount,\n        uint256 loanEndUnixTimestampSec,\n        bool firstFill,\n        bytes32 indexed loanOrderHash,\n        uint256 positionId\n    );\n\n    event LogLoanCancelled(\n        address indexed makerAddress,\n        uint256 cancelLoanTokenAmount,\n        uint256 remainingLoanTokenAmount,\n        bytes32 indexed loanOrderHash\n    );\n\n    event LogLoanClosed(\n        address indexed lender,\n        address indexed trader,\n        address loanCloser,\n        bool isLiquidation,\n        bytes32 indexed loanOrderHash,\n        uint256 positionId\n    );\n\n    event LogPositionTraded(\n        bytes32 indexed loanOrderHash,\n        address indexed trader,\n        address sourceTokenAddress,\n        address destTokenAddress,\n        uint256 sourceTokenAmount,\n        uint256 destTokenAmount,\n        uint256 positionId\n    );\n\n    event LogWithdrawPosition(\n        bytes32 indexed loanOrderHash,\n        address indexed trader,\n        uint256 positionAmount,\n        uint256 remainingPosition,\n        uint256 positionId\n    );\n\n    event LogPayInterestForOracle(\n        address indexed lender,\n        address indexed oracleAddress,\n        address indexed interestTokenAddress,\n        uint256 amountPaid,\n        uint256 totalAccrued\n    );\n\n    event LogPayInterestForOrder(\n        bytes32 indexed loanOrderHash,\n        address indexed lender,\n        address indexed interestTokenAddress,\n        uint256 amountPaid,\n        uint256 totalAccrued,\n        uint256 loanCount\n    );\n\n    event LogChangeTraderOwnership(\n        bytes32 indexed loanOrderHash,\n        address indexed oldOwner,\n        address indexed newOwner\n    );\n\n    event LogChangeLenderOwnership(\n        bytes32 indexed loanOrderHash,\n        address indexed oldOwner,\n        address indexed newOwner\n    );\n\n    event LogUpdateLoanAsLender(\n        bytes32 indexed loanOrderHash,\n        address indexed lender,\n        uint256 loanTokenAmountAdded,\n        uint256 loanTokenAmountFillable,\n        uint256 expirationUnixTimestampSec\n    );\n}\n\ncontract BZxStorage is BZxObjects, BZxEvents, ReentrancyGuard, Ownable, GasTracker {\n    uint256 internal constant MAX_UINT = 2**256 - 1;\n\n    address public bZRxTokenContract;\n    address public bZxEtherContract;\n    address public wethContract;\n    address payable public vaultContract;\n    address public oracleRegistryContract;\n    address public bZxTo0xContract;\n    address public bZxTo0xV2Contract;\n    bool public DEBUG_MODE = false;\n\n    // Loan Orders\n    mapping (bytes32 => LoanOrder) public orders; // mapping of loanOrderHash to on chain loanOrders\n    mapping (bytes32 => LoanOrderAux) public orderAux; // mapping of loanOrderHash to on chain loanOrder auxiliary parameters\n    mapping (bytes32 => uint256) public orderFilledAmounts; // mapping of loanOrderHash to loanTokenAmount filled\n    mapping (bytes32 => uint256) public orderCancelledAmounts; // mapping of loanOrderHash to loanTokenAmount cancelled\n    mapping (bytes32 => address) public orderLender; // mapping of loanOrderHash to lender (only one lender per order)\n\n    // Loan Positions\n    mapping (uint256 => LoanPosition) public loanPositions; // mapping of position ids to loanPositions\n    mapping (bytes32 => mapping (address => uint256)) public loanPositionsIds; // mapping of loanOrderHash to mapping of trader address to position id\n\n    // Lists\n    mapping (address => bytes32[]) public orderList; // mapping of lenders and trader addresses to array of loanOrderHashes\n    mapping (bytes32 => mapping (address => ListIndex)) public orderListIndex; // mapping of loanOrderHash to mapping of lenders and trader addresses to ListIndex objects\n\n    mapping (bytes32 => uint256[]) public orderPositionList; // mapping of loanOrderHash to array of order position ids\n\n    PositionRef[] public positionList; // array of loans that need to be checked for liquidation or expiration\n    mapping (uint256 => ListIndex) public positionListIndex; // mapping of position ids to ListIndex objects\n\n    // Interest\n    mapping (address => mapping (address => uint256)) public tokenInterestPaid; // mapping of lender address to mapping of interest token address to amount of interest that has ever been paid to a lender\n    mapping (address => mapping (address => mapping (address => LenderInterest))) public lenderOracleInterest; // mapping of lender address to mapping of oracle to mapping of interest token to LenderInterest objects\n    mapping (bytes32 => LenderInterest) public lenderOrderInterest; // mapping of loanOrderHash to LenderInterest objects\n    mapping (uint256 => TraderInterest) public traderLoanInterest; // mapping of position ids to TraderInterest objects\n\n    // Other Storage\n    mapping (address => address) public oracleAddresses; // mapping of oracles to their current logic contract\n    mapping (bytes32 => mapping (address => bool)) public preSigned; // mapping of hash => signer => signed\n    mapping (address => mapping (address => bool)) public allowedValidators; // mapping of signer => validator => approved\n    mapping (bytes => bytes) internal db; // general use storage container\n    mapping (bytes => bytes[]) internal dbArray; // general use storage array container\n}\n\ncontract BZxProxiable {\n    mapping (bytes4 => address) public targets;\n\n    mapping (bytes4 => bool) public targetIsPaused;\n\n    function initialize(address _target) public;\n}\n\ncontract BZxProxy is BZxStorage, BZxProxiable {\n    \n    constructor(\n        address _settings) \n        public\n    {\n        (bool result,) = _settings.delegatecall.gas(gasleft())(abi.encodeWithSignature(\"initialize(address)\", _settings));\n        require(result, \"BZxProxy::constructor: failed\");\n    }\n    \n    function() \n        external\n        payable \n    {\n        require(!targetIsPaused[msg.sig], \"BZxProxy::Function temporarily paused\");\n\n        address target = targets[msg.sig];\n        require(target != address(0), \"BZxProxy::Target not found\");\n\n        bytes memory data = msg.data;\n        assembly {\n            let result := delegatecall(gas, target, add(data, 0x20), mload(data), 0, 0)\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n\n    function initialize(\n        address)\n        public\n    {\n        revert();\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000120d0b8383938796d0623a05a1b85cb08da54cff"
}