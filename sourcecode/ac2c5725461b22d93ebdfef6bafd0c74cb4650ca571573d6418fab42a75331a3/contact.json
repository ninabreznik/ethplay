{
  "address": "0x99e0326245460cc89c72fd8ef5d35bc446725cb6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Valorem",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-22\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n    address public owner;\n  \n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused, \"Contract Paused. Events/Transaction Paused until Further Notice\");\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused, \"Contract Functionality Resumed\");\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract StandardToken is Pausable {\n\n    using SafeMath for uint256;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 supply;\n    uint256 public initialSupply;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    mapping (address => uint256) public balanceOf;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() public {\n        name = \"Valorem\";\n        symbol = \"VLR\";\n        decimals = 18;\n        supply = 200000000;\n        \n        initialSupply = supply * (10 ** uint256(decimals));\n        totalSupply = initialSupply;\n        balances[owner] = totalSupply;\n        balanceOf[msg.sender] = initialSupply;\n        bountyTransfers();\n    }\n\n    function bountyTransfers() internal {\n\n        address reserveAccount;\n        address bountyAccount;\n\n        uint256 reserveToken;\n        uint256 bountyToken;\n\n\n        reserveAccount = 0x000f1505CdAEb27197FB652FB2b1fef51cdc524e;\n        bountyAccount = 0x00892214999FdE327D81250407e96Afc76D89CB9;\n\n        reserveToken = ( totalSupply * 25 ) / 100;\n        bountyToken = ( reserveToken * 7 ) / 100;\n\n        balanceOf[msg.sender] = totalSupply - reserveToken;\n        balanceOf[bountyAccount] = bountyToken;\n        reserveToken = reserveToken - bountyToken;\n        balanceOf[reserveAccount] = reserveToken;\n\n        emit Transfer(msg.sender,reserveAccount,reserveToken);\n        emit Transfer(msg.sender,bountyAccount,bountyToken);\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        require(_value <= balances[msg.sender]);\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view whenNotPaused returns (uint256) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) {\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(_to != address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(address _owner, address _spender) public view whenNotPaused returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval( address _spender, uint256 _addedValue ) public whenNotPaused returns (bool) {\n        allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval( address _spender, uint256 _subtractedValue ) public whenNotPaused returns (bool) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract Valorem is StandardToken {\n\n    using SafeMath for uint256;\n\n    mapping (address => uint256) public freezed;\n\n    event Burn(address indexed burner, uint256 value);\n    event Mint(address indexed to, uint256 amount);\n    event Withdraw(address indexed _from, address indexed _to, uint256 _value);\n    event Freeze(address indexed from, uint256 value);\n    event Unfreeze(address indexed from, uint256 value);\n\n    /**\n    * @dev Burns a specific amount of tokens.\n    * @param _value The amount of token to be burned.\n    */\n    function burn(uint256 _value) public onlyOwner whenNotPaused {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n    function burnFrom(address _from, uint256 _value) public onlyOwner whenNotPaused {\n        require(_value <= allowed[_from][msg.sender]);\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        _burn(_from, _value);\n    }\n\n    /**\n    * @dev Function to mint tokens\n    * @param _to The address that will receive the minted tokens.\n    * @param _amount The amount of tokens to mint.\n    * @return A boolean that indicates if the operation was successful.\n    */\n    function mint(address _to, uint256 _amount) public onlyOwner whenNotPaused returns (bool) {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        return true;\n    }\n\n    function freeze(address _spender,uint256 _value) public onlyOwner whenNotPaused returns (bool success) {\n        require(_value < balances[_spender]);\n        require(_value >= 0); \n        balances[_spender] = balances[_spender].sub(_value);                     \n        freezed[_spender] = freezed[_spender].add(_value);                               \n        emit Freeze(_spender, _value);\n        return true;\n    }\n\t\n    function unfreeze(address _spender,uint256 _value) public onlyOwner whenNotPaused returns (bool success) {\n        require(freezed[_spender] < _value);\n        require(_value <= 0); \n        freezed[_spender] = freezed[_spender].sub(_value);                      \n        balances[_spender] = balances[_spender].add(_value);\n        emit Unfreeze(_spender, _value);\n        return true;\n    }\n    \n    function withdrawEther(address _account) public onlyOwner whenNotPaused payable returns (bool success) {\n        _account.transfer(address(this).balance);\n\n        emit Withdraw(this, _account, address(this).balance);\n        return true;\n    }\n    \n    function newTokens(address _owner, uint256 _value) onlyOwner public{\n        balanceOf[_owner] = balanceOf[_owner].add(_value);\n        totalSupply = totalSupply.add(_value);\n        emit Transfer(this, _owner, _value);\n    }\n\n    function() public payable {\n        \n    }\n}",
  "bytecode": "60008054600160a860020a0319163317905560c0604052600760808190527f56616c6f72656d0000000000000000000000000000000000000000000000000060a09081526200005291600191906200020a565b506040805180820190915260038082527f564c520000000000000000000000000000000000000000000000000000000000602090920191825262000099916002916200020a565b506003805460ff191660121790819055630bebc200600481905560ff91909116600a0a026005819055600681905560008054600160a060020a0316815260076020908152604080832084905533835260099091529020556200010364010000000062000109810204565b620002af565b6006543360008181526009602090815260408083206064601987028190049687900390915560078602047fd1905026523c65c0503cf3c4ae03d8cf2c2d5a468c6ecff9976981bd23bacd94819055720f1505cdaeb27197fb652fb2b1fef51cdc524e93849052948590037f864ee90ae8b482fb72aa2a8475d0f8a884be6250164534ca882d5cb1194ffcef81905581518181529151939572892214999fde327d81250407e96afc76d89cb99591949093879360008051602062001a5a833981519152929081900390910190a3604080518281529051600160a060020a03851691339160008051602062001a5a8339815191529181900360200190a350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024d57805160ff19168380011785556200027d565b828001600101855582156200027d579182015b828111156200027d57825182559160200191906001019062000260565b506200028b9291506200028f565b5090565b620002ac91905b808211156200028b576000815560010162000296565b90565b61179b80620002bf6000396000f30060806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461013f578063095ea7b3146101c957806318160ddd1461020157806323b872dd1461022857806324bce60c14610252578063313ce56714610276578063378dc3dc146102a15780633f4ba83a146102b6578063406f11f5146102cb57806340c10f19146102ec57806342966c68146103105780634c985dfb146103285780635c975abb1461034c578063661884631461036157806370a082311461038557806379cc6790146103a65780637b46b80b146103ca5780638456cb59146103ee5780638da5cb5b1461040357806395d89b4114610434578063a9059cbb14610449578063af933b571461046d578063d73dd62314610481578063dd62ed3e146104a5575b005b34801561014b57600080fd5b506101546104cc565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018e578181015183820152602001610176565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d557600080fd5b506101ed600160a060020a0360043516602435610559565b604080519115158252519081900360200190f35b34801561020d57600080fd5b50610216610625565b60408051918252519081900360200190f35b34801561023457600080fd5b506101ed600160a060020a036004358116906024351660443561062b565b34801561025e57600080fd5b506101ed600160a060020a03600435166024356107f5565b34801561028257600080fd5b5061028b61095c565b6040805160ff9092168252519081900360200190f35b3480156102ad57600080fd5b50610216610965565b3480156102c257600080fd5b5061013d61096b565b3480156102d757600080fd5b50610216600160a060020a0360043516610a2c565b3480156102f857600080fd5b506101ed600160a060020a0360043516602435610a3e565b34801561031c57600080fd5b5061013d600435610b83565b34801561033457600080fd5b5061013d600160a060020a0360043516602435610c0b565b34801561035857600080fd5b506101ed610cac565b34801561036d57600080fd5b506101ed600160a060020a0360043516602435610cbc565b34801561039157600080fd5b50610216600160a060020a0360043516610e13565b3480156103b257600080fd5b5061013d600160a060020a0360043516602435610e94565b3480156103d657600080fd5b506101ed600160a060020a0360043516602435610fa5565b3480156103fa57600080fd5b5061013d61110c565b34801561040f57600080fd5b506104186111d4565b60408051600160a060020a039092168252519081900360200190f35b34801561044057600080fd5b506101546111e3565b34801561045557600080fd5b506101ed600160a060020a036004351660243561123b565b6101ed600160a060020a036004351661136f565b34801561048d57600080fd5b506101ed600160a060020a036004351660243561146c565b3480156104b157600080fd5b50610216600160a060020a036004358116906024351661156a565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105515780601f1061052657610100808354040283529160200191610551565b820191906000526020600020905b81548152906001019060200180831161053457829003601f168201915b505050505081565b6000805460a060020a900460ff16156105be576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b336000818152600860209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60065481565b6000805460a060020a900460ff1615610690576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b600160a060020a0384166000908152600760205260409020548211156106b557600080fd5b600160a060020a03841660009081526008602090815260408083203384529091529020548211156106e557600080fd5b600160a060020a03831615156106fa57600080fd5b600160a060020a038416600090815260076020526040902054610723908363ffffffff6115fb16565b600160a060020a038086166000908152600760205260408082209390935590851681522054610758908363ffffffff61160d16565b600160a060020a03808516600090815260076020908152604080832094909455918716815260088252828120338252909152205461079c908363ffffffff6115fb16565b600160a060020a0380861660008181526008602090815260408083203384528252918290209490945580518681529051928716939192600080516020611730833981519152929181900390910190a35060019392505050565b60008054600160a060020a0316331461080d57600080fd5b60005460a060020a900460ff1615610871576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b600160a060020a038316600090815260076020526040902054821061089557600080fd5b60008210156108a357600080fd5b600160a060020a0383166000908152600760205260409020546108cc908363ffffffff6115fb16565b600160a060020a038416600090815260076020908152604080832093909355600a90522054610901908363ffffffff61160d16565b600160a060020a0384166000818152600a6020908152604091829020939093558051858152905191927ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e092918290030190a250600192915050565b60035460ff1681565b60055481565b600054600160a060020a0316331461098257600080fd5b60005460a060020a900460ff1615156109e5576040805160e560020a62461bcd02815260206004820152601e60248201527f436f6e74726163742046756e6374696f6e616c69747920526573756d65640000604482015290519081900360640190fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b600a6020526000908152604090205481565b60008054600160a060020a03163314610a5657600080fd5b60005460a060020a900460ff1615610aba576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b600654610acd908363ffffffff61160d16565b600655600160a060020a038316600090815260076020526040902054610af9908363ffffffff61160d16565b600160a060020a038416600081815260076020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206117308339815191529181900360200190a350600192915050565b600054600160a060020a03163314610b9a57600080fd5b60005460a060020a900460ff1615610bfe576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b610c083382611620565b50565b600054600160a060020a03163314610c2257600080fd5b600160a060020a038216600090815260096020526040902054610c4b908263ffffffff61160d16565b600160a060020a038316600090815260096020526040902055600654610c77908263ffffffff61160d16565b600655604080518281529051600160a060020a0384169130916000805160206117308339815191529181900360200190a35050565b60005460a060020a900460ff1681565b60008054819060a060020a900460ff1615610d23576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b50336000908152600860209081526040808320600160a060020a0387168452909152902054808310610d7857336000908152600860209081526040808320600160a060020a0388168452909152812055610dad565b610d88818463ffffffff6115fb16565b336000908152600860209081526040808320600160a060020a03891684529091529020555b336000818152600860209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000805460a060020a900460ff1615610e78576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b50600160a060020a031660009081526007602052604090205490565b600054600160a060020a03163314610eab57600080fd5b60005460a060020a900460ff1615610f0f576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b600160a060020a0382166000908152600860209081526040808320338452909152902054811115610f3f57600080fd5b600160a060020a0382166000908152600860209081526040808320338452909152902054610f73908263ffffffff6115fb16565b600160a060020a0383166000908152600860209081526040808320338452909152902055610fa18282611620565b5050565b60008054600160a060020a03163314610fbd57600080fd5b60005460a060020a900460ff1615611021576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b600160a060020a0383166000908152600a6020526040902054821161104557600080fd5b600082111561105357600080fd5b600160a060020a0383166000908152600a602052604090205461107c908363ffffffff6115fb16565b600160a060020a0384166000908152600a60209081526040808320939093556007905220546110b1908363ffffffff61160d16565b600160a060020a038416600081815260076020908152604091829020939093558051858152905191927f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f92918290030190a250600192915050565b600054600160a060020a0316331461112357600080fd5b60005460a060020a900460ff1615611187576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105515780601f1061052657610100808354040283529160200191610551565b6000805460a060020a900460ff16156112a0576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b336000908152600760205260409020548211156112bc57600080fd5b600160a060020a03831615156112d157600080fd5b336000908152600760205260409020546112f1908363ffffffff6115fb16565b3360009081526007602052604080822092909255600160a060020a03851681522054611323908363ffffffff61160d16565b600160a060020a0384166000818152600760209081526040918290209390935580518581529051919233926000805160206117308339815191529281900390910190a350600192915050565b60008054600160a060020a0316331461138757600080fd5b60005460a060020a900460ff16156113eb576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b604051600160a060020a03831690303180156108fc02916000818181858888f19350505050158015611421573d6000803e3d6000fd5b506040805130803182529151600160a060020a03851692917f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb919081900360200190a3506001919050565b6000805460a060020a900460ff16156114d1576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b336000908152600860209081526040808320600160a060020a0387168452909152902054611505908363ffffffff61160d16565b336000818152600860209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000805460a060020a900460ff16156115cf576040805160e560020a62461bcd02815260206004820152603f60248201526000805160206117508339815191526044820152600080516020611710833981519152606482015290519081900360840190fd5b50600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b60008282111561160757fe5b50900390565b8181018281101561161a57fe5b92915050565b600160a060020a03821660009081526007602052604090205481111561164557600080fd5b600160a060020a03821660009081526007602052604090205461166e908263ffffffff6115fb16565b600160a060020a03831660009081526007602052604090205560065461169a908263ffffffff6115fb16565b600655604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206117308339815191529181900360200190a350505600696f6e2050617573656420756e74696c2046757274686572204e6f7469636500ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef436f6e7472616374205061757365642e204576656e74732f5472616e73616374a165627a7a72305820bf1ffb87fe283a30066998e9e27e25689826e09e22a55d908c5032cc02878f0e0029ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}