{
  "address": "0x9238bfb781a55eacc3cf05f7df94038c198cd9b9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Cremit",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-07\n*/\n\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\n\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\ncontract ParentToken {\n\n     /* library used for calculations */\n    using SafeMath for uint256; \n\n    /* Public variables of the token */\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address=>uint)) allowance;        \n\n\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function ParentToken(uint256 currentSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol){\n            \n       balances[msg.sender] =  currentSupply;    // Give the creator all initial tokens  \n       totalSupply = currentSupply;              // Update total supply \n       name = tokenName;                         // Set the name for display purposes\n       decimals = decimalUnits;                  // Decimals for the tokens\n       symbol = tokenSymbol;\t\t\t\t\t// Set the symbol for display purposes\t\n    }\n    \n    \n\n   ///@notice Transfer tokens to the beneficiary account\n   ///@param  to The beneficiary account\n   ///@param  value The amount of tokens to be transfered  \n       function transfer(address to, uint value) returns (bool success){\n        require(\n            balances[msg.sender] >= value \n            && value > 0 \n            );\n            balances[msg.sender] = balances[msg.sender].sub(value);    \n            balances[to] = balances[to].add(value);\n            return true;\n    }\n    \n\t///@notice Allow another contract to spend some tokens in your behalf\n\t///@param  spender The address authorized to spend \n\t///@param  value The amount to be approved \n    function approve(address spender, uint256 value)\n        returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        return true;\n    }\n\n    ///@notice Approve and then communicate the approved contract in a single tx\n\t///@param  spender The address authorized to spend \n\t///@param  value The amount to be approved \n    function approveAndCall(address spender, uint256 value, bytes extraData)\n        returns (bool success) {    \n        tokenRecipient recSpender = tokenRecipient(spender);\n        if (approve(spender, value)) {\n            recSpender.receiveApproval(msg.sender, value, this, extraData);\n            return true;\n        }\n    }\n\n\n\n   ///@notice Transfer tokens between accounts\n   ///@param  from The benefactor/sender account.\n   ///@param  to The beneficiary account\n   ///@param  value The amount to be transfered  \n    function transferFrom(address from, address to, uint value) returns (bool success){\n        \n        require(\n            allowance[from][msg.sender] >= value\n            &&balances[from] >= value\n            && value > 0\n            );\n            \n            balances[from] = balances[from].sub(value);\n            balances[to] =  balances[to].add(value);\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n            return true;\n        }\n        \n}\n\n\ncontract Cremit is owned,ParentToken{\n\n     /* library used for calculations */\n    using SafeMath for uint256; \n\n     /* Public variables of the token */\n    string public standard = 'Token 0.1';  \n    uint256 public currentSupply= 21000000000000000;\n    string public constant symbol = \"CRMT\";\n    string public constant tokenName = \"Cremit\";\n    uint8 public constant decimals = 8;\n\n    \n\n    mapping (address => bool) public frozenAccount;\n\n\n  ///@notice Default function used for any payments made.\n    function () payable {\n        acceptPayment();    \n    }\n   \n\n   ///@notice Accept payment and transfer to owner account. \n    function acceptPayment() payable {\n        require(msg.value>0);\n        \n        owner.transfer(msg.value);\n    }\n\n\n\n    function Cremit()ParentToken(currentSupply,tokenName,decimals,symbol){}\n\n\n   ///@notice Provides balance of the account requested \n   ///@param  add Address of the account for which balance is being enquired\n    function balanceOf(address add) constant returns (uint balance){\n       return balances[add];\n    }\n    \n    \n    \n   ///@notice Transfer tokens to the beneficiary account\n   ///@param  to The beneficiary account\n   ///@param  value The amount of tokens to be transfered \n        function transfer(address to, uint value) returns (bool success){\n        require(\n            balances[msg.sender] >= value \n            && value > 0 \n            && (!frozenAccount[msg.sender]) \t\t\t\t\t\t\t\t\t\t// Allow transfer only if account is not frozen\n            );\n            balances[msg.sender] = balances[msg.sender].sub(value);                 \n            balances[to] = balances[to].add(value);                               // Update the balance of beneficiary account\n\t\t\tTransfer(msg.sender,to,value);\n            return true;\n    }\n    \n    \n\n   ///@notice Transfer tokens between accounts\n   ///@param  from The benefactor/sender account.\n   ///@param  to The beneficiary account\n   ///@param  value The amount to be transfered  \n        function transferFrom(address from, address to, uint value) returns (bool success){\n        \n            require(\n            allowance[from][msg.sender] >= value\n            &&balances[from] >= value                                                 //Check if the benefactor has sufficient balance\n            && value > 0 \n            && (!frozenAccount[msg.sender])                                           // Allow transfer only if account is not frozen\n            );\n            \n            balances[from] = balances[from].sub(value);                               // Deduct from the benefactor account\n            balances[to] =  balances[to].add(value);                                  // Update the balance of beneficiary account\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n            Transfer(from,to,value);\n            return true;\n        }\n        \n    \n\n   ///@notice Increase the number of coins\n   ///@param  target The address of the account where the coins would be added.\n   ///@param  mintedAmount The amount of coins to be added\n        function mintToken(address target, uint256 mintedAmount) onlyOwner {\n        balances[target] = balances[target].add(mintedAmount);      //Add the amount of coins to be increased to the balance\n        currentSupply = currentSupply.add(mintedAmount);            //Add the amount of coins to be increased to the supply\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n   ///@notice Freeze the account at the target address\n   ///@param  target The address of the account to be frozen\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        require(freeze);                                             //Check if account has to be freezed\n        frozenAccount[target] = freeze;                              //Freeze the account  \n        FrozenFunds(target, freeze);\n    }\n\n\n   /// @notice Remove tokens from the system irreversibly\n    /// @param value The amount of money to burn\n    function burn(uint256 value) onlyOwner returns (bool success)  {\n        require (balances[msg.sender] > value && value>0);            // Check if the sender has enough balance\n        balances[msg.sender] = balances[msg.sender].sub(value);       // Deduct from the sender\n        currentSupply = currentSupply.sub(value);                     // Update currentSupply\n        Burn(msg.sender, value);\n        return true;\n    }\n\n    function burnFrom(address from, uint256 value) onlyOwner returns (bool success) {\n        require(balances[from] >= value);                                         // Check if the targeted balance is enough\n        require(value <= allowance[from][msg.sender]);                            // Check allowance\n        balances[from] = balances[from].sub(value);                               // Deduct from the targeted balance\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);     // Deduct from the sender's allowance\n        currentSupply = currentSupply.sub(value);                                 // Update currentSupply\n        Burn(from, value);\n        return true;\n    }\n\n\n\n  /* This notifies clients about the amount transfered */\n\tevent Transfer(address indexed _from, address indexed _to,uint256 _value);     \n\n  /* This notifies clients about the amount approved */\n\tevent Approval(address indexed _owner, address indexed _spender,uint256 _value);\n\n  /* This notifies clients about the account freeze */\n\tevent FrozenFunds(address target, bool frozen);\n    \n  /* This notifies clients about the amount burnt */\n   event Burn(address indexed from, uint256 value);\n\n}\n\ncontract IERC20 {\n    \n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60606040526040805190810160405280600981526020017f546f6b656e20302e3100000000000000000000000000000000000000000000008152506007908051906020019062000051929190620001c2565b50664a9b638448800060085534156200006957600080fd5b5b6008546040805190810160405280600681526020017f4372656d6974000000000000000000000000000000000000000000000000000081525060086040805190810160405280600481526020017f43524d54000000000000000000000000000000000000000000000000000000008152505b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b83600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600481905550826001908051906020019062000181929190620001c2565b5081600360006101000a81548160ff021916908360ff1602179055508060029080519060200190620001b5929190620001c2565b505b505050505b62000271565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020557805160ff191683800117855562000236565b8280016001018555821562000236579182015b828111156200023557825182559160200191906001019062000218565b5b50905062000245919062000249565b5090565b6200026e91905b808211156200026a57600081600090555060010162000250565b5090565b90565b611bfe80620002816000396000f30060606040523615610110576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461011c578063095ea7b3146101ab57806318160ddd1461020557806323b872dd1461022e578063313ce567146102a757806342966c68146102d65780635a3b7e42146103115780636c02a931146103a057806370a082311461042f578063771282f61461047c57806379c65068146104a557806379cc6790146104e75780638da5cb5b1461054157806395d89b4114610596578063a9059cbb14610625578063ae0aba8c1461067f578063b414d4b614610689578063cae9ca51146106da578063e724529c14610777578063f2fde38b146107bb575b5b6101196107f4565b5b005b341561012757600080fd5b61012f610867565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101705780820151818401525b602081019050610154565b50505050905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b657600080fd5b6101eb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610905565b604051808215151515815260200191505060405180910390f35b341561021057600080fd5b610218610993565b6040518082815260200191505060405180910390f35b341561023957600080fd5b61028d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610999565b604051808215151515815260200191505060405180910390f35b34156102b257600080fd5b6102ba610d7d565b604051808260ff1660ff16815260200191505060405180910390f35b34156102e157600080fd5b6102f76004808035906020019091905050610d82565b604051808215151515815260200191505060405180910390f35b341561031c57600080fd5b610324610f41565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103655780820151818401525b602081019050610349565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ab57600080fd5b6103b3610fdf565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f45780820151818401525b6020810190506103d8565b50505050905090810190601f1680156104215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043a57600080fd5b610466600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611018565b6040518082815260200191505060405180910390f35b341561048757600080fd5b61048f611062565b6040518082815260200191505060405180910390f35b34156104b057600080fd5b6104e5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611068565b005b34156104f257600080fd5b610527600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061122e565b604051808215151515815260200191505060405180910390f35b341561054c57600080fd5b61055461157d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105a157600080fd5b6105a96115a2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105ea5780820151818401525b6020810190506105ce565b50505050905090810190601f1680156106175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561063057600080fd5b610665600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506115db565b604051808215151515815260200191505060405180910390f35b6106876107f4565b005b341561069457600080fd5b6106c0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611827565b604051808215151515815260200191505060405180910390f35b34156106e557600080fd5b61075d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611847565b604051808215151515815260200191505060405180910390f35b341561078257600080fd5b6107b9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803515159060200190919050506119c6565b005b34156107c657600080fd5b6107f2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611af9565b005b60003411151561080357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561086457600080fd5b5b565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108fd5780601f106108d2576101008083540402835291602001916108fd565b820191906000526020600020905b8154815290600101906020018083116108e057829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60045481565b600081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610a66575081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610a725750600082115b8015610ac85750600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1515610ad357600080fd5b610b2582600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b9990919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bba82600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bb390919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c8c82600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b9990919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600881565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ddf57600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118015610e2d5750600082115b1515610e3857600080fd5b610e8a82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b9990919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ee282600854611b9990919063ffffffff16565b6008819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b5b919050565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fd75780601f10610fac57610100808354040283529160200191610fd7565b820191906000526020600020905b815481529060010190602001808311610fba57829003601f168201915b505050505081565b6040805190810160405280600681526020017f4372656d6974000000000000000000000000000000000000000000000000000081525081565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110c357600080fd5b61111581600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bb390919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061116d81600854611bb390919063ffffffff16565b6008819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a38173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128b57600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156112d957600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561136457600080fd5b6113b682600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b9990919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061148882600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b9990919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061151d82600854611b9990919063ffffffff16565b6008819055508273ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f43524d540000000000000000000000000000000000000000000000000000000081525081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561162c5750600082115b80156116825750600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b151561168d57600080fd5b6116df82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b9990919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061177482600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bb390919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b60096020528060005260406000206000915054906101000a900460ff1681565b6000808490506118578585610905565b156119bd578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156119525780820151818401525b602081019050611936565b50505050905090810190601f16801561197f5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156119a057600080fd5b6102c65a03f115156119b157600080fd5b505050600191506119be565b5b509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a2157600080fd5b801515611a2d57600080fd5b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b5457600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b6000828211151515611ba757fe5b81830390505b92915050565b6000808284019050838110151515611bc757fe5b8091505b50929150505600a165627a7a7230582077f5ce657ddab275d5b63d98e43a09ffe5b49030b94fdbce1f9e8515865101880029"
}