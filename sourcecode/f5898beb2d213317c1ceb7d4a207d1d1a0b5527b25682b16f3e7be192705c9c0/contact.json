{
  "address": "0x13281dfbcbb17c6ae2c84796443ee46c51a93e3a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WallieInvest",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-21\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * \n *                                  ╔╗╔╗╔╗╔══╗╔╗──╔╗──╔══╗╔═══╗──╔╗──╔╗╔═══╗\n *                                  ║║║║║║║╔╗║║║──║║──╚╗╔╝║╔══╝──║║──║║║╔══╝\n *                                  ║║║║║║║╚╝║║║──║║───║║─║╚══╗──║╚╗╔╝║║╚══╗\n *                                  ║║║║║║║╔╗║║║──║║───║║─║╔══╝──║╔╗╔╗║║╔══╝\n *                                  ║╚╝╚╝║║║║║║╚═╗║╚═╗╔╝╚╗║╚══╗╔╗║║╚╝║║║╚══╗\n *                                  ╚═╝╚═╝╚╝╚╝╚══╝╚══╝╚══╝╚═══╝╚╝╚╝──╚╝╚═══╝\n *                                  ┌──────────────────────────────────────┐  \n *                                  │      Website:  http://wallie.me      │\n *                                  │                                      │  \n *                                  │  CN Telegram: https://t.me/WallieCH  │\n *                                  │  RU Telegram: https://t.me/wallieRU  |\n *                                  │  *  Telegram: https://t.me/WallieNews|\n *                                  |Twitter: https://twitter.com/WalliemeO|\n *                                  └──────────────────────────────────────┘ \n *                    | Youtube – https://www.youtube.com/channel/UC1q3sPOlXsaJGrT8k-BZuyw |\n *\n *                                     * WALLIE - distribution contract *\n * \n *  - Growth of 1.44% in 24 hours (every 5900 blocks)\n * \n * Distribution: *\n *      dividends  =  1.44%\n *   adm comission =  1%\n *   ref bonus     =  1%\n *   ref cashback  =  3%\n * \n * \n * \n *\n * Usage rules *\n *  Holding:\n *   1. Send any amount of ether but not less than 0.01 THD to make a contribution.\n *   2. Send 0 ETH at any time to get profit from the Deposit.\n *  \n *  - You can make a profit at any time. Consider your transaction costs (GAS).\n *  \n * Affiliate program *\n * - You have access to a single-level referral system for additional profit (10% of the referral's contribution).\n * - * - Affiliate fees will come from each referral's Deposit as long as it doesn't change your wallet address Ethereum on the other.\n * 1. The depositor in the transfer of funds indicates the DATA in your e-wallet Ethereum.\n * 2. After successful transfer you will be charged 10% of the amount of his Deposit.\n * * 3. Your partner receives a \"Refback bonus\" in the amount of 3% of his contribution.\n * \n *  \n * \n *\n * RECOMMENDED GAS LIMIT: 250000\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n *\n * The contract has been tested for vulnerabilities!\n *\n */ \n\ncontract WallieInvest{\n\n    mapping (address => uint256) public invested;\n\n    mapping (address => uint256) public payments; \n     \n    mapping (address => address) public investedRef;\n    \n    mapping (address => uint256) public atBlock;\n    \n    mapping (address => uint256) public cashBack;\n    \n    mapping (address => uint256) public cashRef;\n    \n    mapping (address => uint256) public admComiss;\n    \n    using SafeMath for uint;\n    using ToAddress for *;\n    using Zero for *;\n    \n    address private adm_addr; //NB!\n    uint256 private start_block;\n    uint256 private constant dividends = 144;           // 1.44%\n    uint256 private constant adm_comission = 1;        // 3%\n    uint256 private constant ref_bonus = 1;            // 3%\n    uint256 private constant ref_cashback = 3;          // 3%\n    uint256 private constant block_of_24h = 5900;       // ~24 hour\n    uint256 private constant min_invesment = 10 finney; // 0.01 eth\n    \n    //Statistics\n    uint256 private all_invest_users_count = 0;\n    uint256 private all_invest = 0;\n    uint256 private all_payments = 0;\n    uint256 private all_cash_back_payments = 0;\n    uint256 private all_ref_payments = 0;\n    uint256 private all_adm_payments = 0;\n    uint256 private all_reinvest = 0;\n    address private last_invest_addr = 0;\n    uint256 private last_invest_amount = 0;\n    uint256 private last_invest_block = 0;\n    \n    constructor() public {\n    adm_addr = msg.sender;\n    start_block = block.number;\n    }\n    \n    // this function called every time anyone sends a transaction to this contract\n    function() public payable {\n        \n        uint256 amount = 0;\n        \n        // if sender is invested more than 0 ether\n        if (invested[msg.sender] != 0) {\n            \n            // calculate profit:\n            //amount = (amount invested) * 1.44% * (blocks since last transaction) / 5900\n            //amount = invested[msg.sender] * dividends / 10000 * (block.number - atBlock[msg.sender]) / block_of_24h;\n            amount = invested[msg.sender].mul(dividends).div(10000).mul(block.number.sub(atBlock[msg.sender])).div(block_of_24h);\n        }\n        \n\n        if (msg.value == 0) {\n           \n            // Commission payment\n            if (admComiss[adm_addr] != 0 && msg.sender == adm_addr){\n                amount = amount.add(admComiss[adm_addr]);\n                admComiss[adm_addr] = 0;\n                all_adm_payments += amount;\n               }\n           \n            // Payment of referral fees\n            if (cashRef[msg.sender] != 0){\n                amount = amount.add(cashRef[msg.sender]);\n                cashRef[msg.sender] = 0;\n                all_ref_payments += amount;\n            }\n            \n            // Payment of cashback\n            if (cashBack[msg.sender] != 0){\n                amount = amount.add(cashBack[msg.sender]);\n                cashBack[msg.sender] = 0;\n                all_cash_back_payments += amount;\n               }\n           }\n        else\n           {\n            \n            // Minimum payment\n            require(msg.value >= min_invesment, \"msg.value must be >= 0.01 ether (10 finney)\");\n               \n            // Enrollment fees\n            admComiss[adm_addr] += msg.value.mul(adm_comission).div(100);\n             \n            address ref_addr = msg.data.toAddr();\n            \n              if (ref_addr.notZero()) {\n                  \n                 //Anti-Cheat mode\n                 require(msg.sender != ref_addr, \"referal must be != msg.sender\");\n                  \n                 // Referral enrollment\n                 cashRef[ref_addr] += msg.value.mul(ref_bonus).div(100);\n                 \n                 // Securing the referral for the investor\n                 investedRef[msg.sender] = ref_addr;\n                 \n                 // Cashback Enrollment\n                 if (invested[msg.sender] == 0)\n                     cashBack[msg.sender] += msg.value.mul(ref_cashback).div(100);\n                 \n                 }\n                 else\n                 {\n                 // Referral enrollment\n                   if (investedRef[msg.sender].notZero())\n                      cashRef[investedRef[msg.sender]] += msg.value.mul(ref_bonus).div(100);    \n                 }\n                 \n                 \n            if (invested[msg.sender] == 0) all_invest_users_count++;   \n               \n            // investment accounting\n            invested[msg.sender] += msg.value;\n            \n            atBlock[msg.sender] = block.number;\n            \n            // statistics\n            all_invest += msg.value;\n            if (invested[msg.sender] > 0) all_reinvest += msg.value;\n            last_invest_addr = msg.sender;\n            last_invest_amount = msg.value;\n            last_invest_block = block.number;\n            \n           }\n           \n         // record block number and invested amount (msg.value) of this transaction\n         atBlock[msg.sender] = block.number;    \n           \n         if (amount != 0)\n            {\n            // send calculated amount of ether directly to sender (aka YOU)\n            address sender = msg.sender;\n            \n            all_payments += amount;\n            payments[sender] += amount;\n            \n            sender.transfer(amount);\n            }\n   }\n   \n    \n    //Stat\n    //getFundStatsMap\n    function getFundStatsMap() public view returns (uint256[7]){\n    uint256[7] memory stateMap; \n    stateMap[0] = all_invest_users_count;\n    stateMap[1] = all_invest;\n    stateMap[2] = all_payments;\n    stateMap[3] = all_cash_back_payments;\n    stateMap[4] = all_ref_payments;\n    stateMap[5] = all_adm_payments;\n    stateMap[6] = all_reinvest;\n    return (stateMap); \n    }\n    \n    //getUserStats\n    function getUserStats(address addr) public view returns (uint256,uint256,uint256,uint256,uint256,uint256,address){\n    return (invested[addr],cashBack[addr],cashRef[addr],atBlock[addr],block.number,payments[addr],investedRef[addr]); \n    }\n    \n    //getWebStats\n    function getWebStats() public view returns (uint256,uint256,uint256,uint256,address,uint256,uint256){\n    return (all_invest_users_count,address(this).balance,all_invest,all_payments,last_invest_addr,last_invest_amount,last_invest_block); \n    }\n  \n}   \n    \n\nlibrary SafeMath {\n \n\n/**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\nlibrary ToAddress {\n  function toAddr(uint source) internal pure returns(address) {\n    return address(source);\n  }\n\n  function toAddr(bytes source) internal pure returns(address addr) {\n    assembly { addr := mload(add(source,0x14)) }\n    return addr;\n  }\n}\n\nlibrary Zero {\n  function requireNotZero(uint a) internal pure {\n    require(a != 0, \"require not zero\");\n  }\n\n  function requireNotZero(address addr) internal pure {\n    require(addr != address(0), \"require not zero address\");\n  }\n\n  function notZero(address addr) internal pure returns(bool) {\n    return !(addr == address(0));\n  }\n\n  function isZero(address addr) internal pure returns(bool) {\n    return addr == address(0);\n  }\n}",
  "bytecode": "608060405260006009819055600a819055600b819055600c819055600d819055600e819055600f81905560108054600160a060020a0319169055601181905560125534801561004d57600080fd5b5060078054600160a060020a0319163317905543600855610a46806100736000396000f3006080604052600436106100a35763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663481ea47381146105fa5780634e43603a1461063757806366b3f6bf146106995780638aac1362146106cc57806397b1b2b7146106ed57806397fc93ab1461073a578063b920d0b41461075b578063ce5dbc0b1461077c578063e2982c211461079d578063f831e962146107be575b33600090815260208190526040812054819081901561012d573360009081526003602052604090205461012a9061170c90610112906100e990439063ffffffff61081416565b3360009081526020819052604090205461011e906127109061011290609063ffffffff61083216565b9063ffffffff61086716565b9063ffffffff61083216565b92505b34151561026557600754600160a060020a0316600090815260066020526040902054158015906101675750600754600160a060020a031633145b156101be57600754600160a060020a031660009081526006602052604090205461019890849063ffffffff61088a16565b600754600160a060020a0316600090815260066020526040812055600e80548201905592505b336000908152600560205260409020541561020f57336000908152600560205260409020546101f490849063ffffffff61088a16565b33600090815260056020526040812055600d80548201905592505b3360009081526004602052604090205415610260573360009081526004602052604090205461024590849063ffffffff61088a16565b33600090815260046020526040812055600c80548201905592505b610593565b662386f26fc1000034101561030157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f6d73672e76616c7565206d757374206265203e3d20302e30312065746865722060448201527f2831302066696e6e657929000000000000000000000000000000000000000000606482015290519081900360840190fd5b610317606461011234600163ffffffff61083216565b600754600160a060020a0316600090815260066020908152604080832080549094019093558251601f3690810183900483028201830190945283815261037093909291819084018382808284375061089c945050505050565b915061038482600160a060020a03166108a3565b156104a15733600160a060020a038316141561040157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f7265666572616c206d75737420626520213d206d73672e73656e646572000000604482015290519081900360640190fd5b610417606461011234600163ffffffff61083216565b600160a060020a0383166000818152600560209081526040808320805490950190945533825260028152838220805473ffffffffffffffffffffffffffffffffffffffff1916909317909255908190522054151561049c57610485606461011234600363ffffffff61083216565b336000908152600460205260409020805490910190555b61050b565b336000908152600260205260409020546104c390600160a060020a03166108a3565b1561050b576104de606461011234600163ffffffff61083216565b33600090815260026020908152604080832054600160a060020a0316835260059091529020805490910190555b33600090815260208190526040902054151561052b576009805460010190555b33600090815260208181526040808320805434908101825560038452918420439055600a80549092019091559082905254111561056b57600f8054340190555b6010805473ffffffffffffffffffffffffffffffffffffffff19163317905534601155436012555b33600090815260036020526040902043905582156105f55750600b8054830190553360008181526001602052604080822080548601905551829185156108fc02918691818181858888f193505050501580156105f3573d6000803e3d6000fd5b505b505050005b34801561060657600080fd5b5061061b600160a060020a03600435166108b1565b60408051600160a060020a039092168252519081900360200190f35b34801561064357600080fd5b50610658600160a060020a03600435166108cc565b604080519788526020880196909652868601949094526060860192909252608085015260a0840152600160a060020a031660c0830152519081900360e00190f35b3480156106a557600080fd5b506106ba600160a060020a036004351661091f565b60408051918252519081900360200190f35b3480156106d857600080fd5b506106ba600160a060020a0360043516610931565b3480156106f957600080fd5b50610702610943565b604051808260e080838360005b8381101561072757818101518382015260200161070f565b5050505090500191505060405180910390f35b34801561074657600080fd5b506106ba600160a060020a036004351661098d565b34801561076757600080fd5b506106ba600160a060020a036004351661099f565b34801561078857600080fd5b506106ba600160a060020a03600435166109b1565b3480156107a957600080fd5b506106ba600160a060020a03600435166109c3565b3480156107ca57600080fd5b506107d36109d5565b604080519788526020880196909652868601949094526060860192909252600160a060020a0316608085015260a084015260c0830152519081900360e00190f35b6000808383111561082457600080fd5b5050808203805b5092915050565b600080831515610845576000915061082b565b5082820282848281151561085557fe5b041461086057600080fd5b9392505050565b60008080831161087657600080fd5b828481151561088157fe5b04949350505050565b60008282018381101561086057600080fd5b6014015190565b600160a060020a0316151590565b600260205260009081526040902054600160a060020a031681565b600160a060020a0390811660009081526020818152604080832054600483528184205460058452828520546003855283862054600186528487205460029096529390952054919690959293439390921690565b60006020819052908152604090205481565b60036020526000908152604090205481565b61094b6109fb565b6109536109fb565b6009548152600a546020820152600b546040820152600c546060820152600d546080820152600e5460a0820152600f5460c0820152919050565b60046020526000908152604090205481565b60056020526000908152604090205481565b60066020526000908152604090205481565b60016020526000908152604090205481565b600954600a54600b546010546011546012549495303195600160a060020a039093169290565b60e06040519081016040528060079060208202803883395091929150505600a165627a7a723058204a88ce38a4222fe8de1c094f499ca4d40a61009f366289be04ff0794fcb022740029"
}