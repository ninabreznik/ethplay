{
  "address": "0xb3af30d208f55076039e059be536d87955a54c6f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DINAR",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-07\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n    // ERC20 Token Smart Contract\n    contract DINAR {\n        \n        string public constant name = \"DINAR\";\n        string public constant symbol = \"DNR\";\n        uint8 public constant decimals = 4;\n        uint public _totalSupply = 100000000000;\n        uint256 public RATE = 1;\n        bool public isMinting = true;\n        string public constant generatedBy  = \"Togen.io by Proof Suite\";\n        \n        using SafeMath for uint256;\n        address public owner;\n        \n         // Functions with this modifier can only be executed by the owner\n         modifier onlyOwner() {\n            if (msg.sender != owner) {\n                throw;\n            }\n             _;\n         }\n     \n        // Balances for each account\n        mapping(address => uint256) balances;\n        // Owner of account approves the transfer of an amount to another account\n        mapping(address => mapping(address=>uint256)) allowed;\n\n        // Its a payable function works as a token factory.\n        function () payable{\n            createTokens();\n        }\n\n        // Constructor\n        constructor() public {\n            owner = 0x3728362768fbdefff5edfc7a051d4d3b7ff298ef; \n            balances[owner] = _totalSupply;\n        }\n\n        //allows owner to burn tokens that are not sold in a crowdsale\n        function burnTokens(uint256 _value) onlyOwner {\n\n             require(balances[msg.sender] >= _value && _value > 0 );\n             _totalSupply = _totalSupply.sub(_value);\n             balances[msg.sender] = balances[msg.sender].sub(_value);\n             \n        }\n\n\n\n        // This function creates Tokens  \n         function createTokens() payable {\n            if(isMinting == true){\n                require(msg.value > 0);\n                uint256  tokens = msg.value.div(100000000000000).mul(RATE);\n                balances[msg.sender] = balances[msg.sender].add(tokens);\n                _totalSupply = _totalSupply.add(tokens);\n                owner.transfer(msg.value);\n            }\n            else{\n                throw;\n            }\n        }\n\n\n        function endCrowdsale() onlyOwner {\n            isMinting = false;\n        }\n\n        function changeCrowdsaleRate(uint256 _value) onlyOwner {\n            RATE = _value;\n        }\n\n\n        \n        function totalSupply() constant returns(uint256){\n            return _totalSupply;\n        }\n        // What is the balance of a particular account?\n        function balanceOf(address _owner) constant returns(uint256){\n            return balances[_owner];\n        }\n\n         // Transfer the balance from owner's account to another account   \n        function transfer(address _to, uint256 _value)  returns(bool) {\n            require(balances[msg.sender] >= _value && _value > 0 );\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(address _from, address _to, uint256 _value)  returns(bool) {\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _value) returns(bool){\n        allowed[msg.sender][_spender] = _value; \n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns(uint256){\n        return allowed[_owner][_spender];\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "608060405264174876e800600055600180556001600260006101000a81548160ff02191690831515021790555034801561003857600080fd5b50733728362768fbdefff5edfc7a051d4d3b7ff298ef600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005460036000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611369806101056000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610106578063095ea7b3146101965780630ced8c69146101fb57806318160ddd1461028b5780632095f2d4146102b657806323b872dd146102cd5780632a8092df14610352578063313ce567146103815780633eaaf86b146103b25780635c07ac94146103dd578063664e97041461040a5780636d1b229d1461043557806370a08231146104625780638da5cb5b146104b957806395d89b4114610510578063a9059cbb146105a0578063b442726314610605578063dd62ed3e1461060f575b610104610686565b005b34801561011257600080fd5b5061011b610808565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015b578082015181840152602081019050610140565b50505050905090810190601f1680156101885780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a257600080fd5b506101e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610841565b604051808215151515815260200191505060405180910390f35b34801561020757600080fd5b50610210610933565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610250578082015181840152602081019050610235565b50505050905090810190601f16801561027d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029757600080fd5b506102a061096c565b6040518082815260200191505060405180910390f35b3480156102c257600080fd5b506102cb610975565b005b3480156102d957600080fd5b50610338600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109ee565b604051808215151515815260200191505060405180910390f35b34801561035e57600080fd5b50610367610d7b565b604051808215151515815260200191505060405180910390f35b34801561038d57600080fd5b50610396610d8e565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103be57600080fd5b506103c7610d93565b6040518082815260200191505060405180910390f35b3480156103e957600080fd5b5061040860048036038101908080359060200190929190505050610d99565b005b34801561041657600080fd5b5061041f610dff565b6040518082815260200191505060405180910390f35b34801561044157600080fd5b5061046060048036038101908080359060200190929190505050610e05565b005b34801561046e57600080fd5b506104a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f6e565b6040518082815260200191505060405180910390f35b3480156104c557600080fd5b506104ce610fb7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561051c57600080fd5b50610525610fdd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561056557808201518184015260208101905061054a565b50505050905090810190601f1680156105925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105ac57600080fd5b506105eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611016565b604051808215151515815260200191505060405180910390f35b61060d610686565b005b34801561061b57600080fd5b50610670600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061120b565b6040518082815260200191505060405180910390f35b600060011515600260009054906101000a900460ff1615151415610800576000341115156106b357600080fd5b6106e06001546106d2655af3107a40003461129290919063ffffffff16565b6112d390919063ffffffff16565b905061073481600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461130690919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061078c8160005461130690919063ffffffff16565b600081905550600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156107fa573d6000803e3d6000fd5b50610805565b600080fd5b50565b6040805190810160405280600581526020017f44494e415200000000000000000000000000000000000000000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6040805190810160405280601781526020017f546f67656e2e696f2062792050726f6f6620537569746500000000000000000081525081565b60008054905090565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109d157600080fd5b6000600260006101000a81548160ff021916908315150217905550565b600081600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610abb575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610ac75750600082115b1515610ad257600080fd5b610b2482600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461132490919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bb982600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461130690919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c8b82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461132490919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600260009054906101000a900460ff1681565b600481565b60005481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610df557600080fd5b8060018190555050565b60015481565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6157600080fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610eb05750600081115b1515610ebb57600080fd5b610ed08160005461132490919063ffffffff16565b600081905550610f2881600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461132490919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f444e52000000000000000000000000000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156110675750600082115b151561107257600080fd5b6110c482600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461132490919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061115982600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461130690919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000831115156112a157fe5b82848115156112ac57fe5b04905082848115156112ba57fe5b0681840201841415156112c957fe5b8091505092915050565b600080828402905060008414806112f457508284828115156112f157fe5b04145b15156112fc57fe5b8091505092915050565b600080828401905083811015151561131a57fe5b8091505092915050565b600082821115151561133257fe5b8183039050929150505600a165627a7a72305820f392e3b8a5875aa60b17dbc23947e50b930c3e5185c45697c2d103ed56c5f93b0029"
}