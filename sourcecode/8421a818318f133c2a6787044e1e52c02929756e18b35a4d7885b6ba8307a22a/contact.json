{
  "address": "0xbdaed67214641b7eda3bf8d7431c3ae5fc46f466",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "CryptoAtoms Token",
  "contractName": "CryptoAtomsToken",
  "compilerVersion": "v0.4.24-nightly.2018.5.16+commit.7f965c86",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-03\n*/\n\npragma solidity ^0.4.19;\n\ncontract ADM312 {\n\n  address public COO;\n  address public CTO;\n  address public CFO;\n  address private coreAddress;\n  address public logicAddress;\n  address public superAddress;\n\n  modifier onlyAdmin() {\n    require(msg.sender == COO || msg.sender == CTO || msg.sender == CFO);\n    _;\n  }\n  \n  modifier onlyContract() {\n    require(msg.sender == coreAddress || msg.sender == logicAddress || msg.sender == superAddress);\n    _;\n  }\n    \n  modifier onlyContractAdmin() {\n    require(msg.sender == coreAddress || msg.sender == logicAddress || msg.sender == superAddress || msg.sender == COO || msg.sender == CTO || msg.sender == CFO);\n     _;\n  }\n  \n  function transferAdmin(address _newAdminAddress1, address _newAdminAddress2) public onlyAdmin {\n    if(msg.sender == COO)\n    {\n        CTO = _newAdminAddress1;\n        CFO = _newAdminAddress2;\n    }\n    if(msg.sender == CTO)\n    {\n        COO = _newAdminAddress1;\n        CFO = _newAdminAddress2;\n    }\n    if(msg.sender == CFO)\n    {\n        COO = _newAdminAddress1;\n        CTO = _newAdminAddress2;\n    }\n  }\n  \n  function transferContract(address _newCoreAddress, address _newLogicAddress, address _newSuperAddress) external onlyAdmin {\n    coreAddress  = _newCoreAddress;\n    logicAddress = _newLogicAddress;\n    superAddress = _newSuperAddress;\n    SetCoreInterface(_newLogicAddress).setCoreContract(_newCoreAddress);\n    SetCoreInterface(_newSuperAddress).setCoreContract(_newCoreAddress);\n  }\n\n\n}\n\ncontract ERC721 {\n    \n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n  function totalSupply() public view returns (uint256 total);\n  function balanceOf(address _owner) public view returns (uint256 balance);\n  function ownerOf(uint256 _tokenId) public view returns (address owner);\n  function transfer(address _to, uint256 _tokenId) public;\n  function approve(address _to, uint256 _tokenId) public;\n  function takeOwnership(uint256 _tokenId) public;\n  \n}\n\ncontract SetCoreInterface {\n   function setCoreContract(address _neWCoreAddress) external; \n}\n\ncontract CaData is ADM312, ERC721 {\n    \n    function CaData() public {\n        COO = msg.sender;\n        CTO = msg.sender;\n        CFO = msg.sender;\n        createCustomAtom(0,0,4,0,0,0,0);\n    }\n    \n    function kill() external\n\t{\n\t    require(msg.sender == COO);\n\t\tselfdestruct(msg.sender);\n\t}\n    \n    function() public payable{}\n    \n    uint public randNonce  = 0;\n    \n    struct Atom \n    {\n      uint64   dna;\n      uint8    gen;\n      uint8    lev;\n      uint8    cool;\n      uint32   sons;\n      uint64   fath;\n\t  uint64   moth;\n\t  uint128  isRent;\n\t  uint128  isBuy;\n\t  uint32   isReady;\n    }\n    \n    Atom[] public atoms;\n    \n    mapping (uint64  => bool) public dnaExist;\n    mapping (address => bool) public bonusReceived;\n    mapping (address => uint) public ownerAtomsCount;\n    mapping (uint => address) public atomOwner;\n    \n    event NewWithdraw(address sender, uint balance);\n    \n    function createCustomAtom(uint64 _dna, uint8 _gen, uint8 _lev, uint8 _cool, uint128 _isRent, uint128 _isBuy, uint32 _isReady) public onlyAdmin {\n        require(dnaExist[_dna]==false && _cool+_lev>=4);\n        Atom memory newAtom = Atom(_dna, _gen, _lev, _cool, 0, 2**50, 2**50, _isRent, _isBuy, _isReady);\n        uint id = atoms.push(newAtom) - 1;\n        atomOwner[id] = msg.sender;\n        ownerAtomsCount[msg.sender]++;\n        dnaExist[_dna] = true;\n    }\n    \n    function withdrawBalance() public payable onlyAdmin {\n\t\tNewWithdraw(msg.sender, address(this).balance);\n        CFO.transfer(address(this).balance);\n    }\n        \n    function incRandNonce() external onlyContract {\n        randNonce++;\n    }\n    \n    function setDnaExist(uint64 _dna, bool _newDnaLocking) external onlyContractAdmin {\n        dnaExist[_dna] = _newDnaLocking;\n    }\n    \n    function setBonusReceived(address _add, bool _newBonusLocking) external onlyContractAdmin {\n        bonusReceived[_add] = _newBonusLocking;\n    }\n    \n    function setOwnerAtomsCount(address _owner, uint _newCount) external onlyContract {\n        ownerAtomsCount[_owner] = _newCount;\n    }\n    \n    function setAtomOwner(uint _atomId, address _owner) external onlyContract {\n        atomOwner[_atomId] = _owner;\n    }\n        \n    function pushAtom(uint64 _dna, uint8 _gen, uint8 _lev, uint8 _cool, uint32 _sons, uint64 _fathId, uint64 _mothId, uint128 _isRent, uint128 _isBuy, uint32 _isReady) external onlyContract returns (uint id) {\n        Atom memory newAtom = Atom(_dna, _gen, _lev, _cool, _sons, _fathId, _mothId, _isRent, _isBuy, _isReady);\n        id = atoms.push(newAtom) -1;\n    }\n\t\n\tfunction setAtomDna(uint _atomId, uint64 _dna) external onlyAdmin {\n        atoms[_atomId].dna = _dna;\n    }\n\t\n\tfunction setAtomGen(uint _atomId, uint8 _gen) external onlyAdmin {\n        atoms[_atomId].gen = _gen;\n    }\n    \n    function setAtomLev(uint _atomId, uint8 _lev) external onlyContract {\n        atoms[_atomId].lev = _lev;\n    }\n    \n    function setAtomCool(uint _atomId, uint8 _cool) external onlyContract {\n        atoms[_atomId].cool = _cool;\n    }\n    \n    function setAtomSons(uint _atomId, uint32 _sons) external onlyContract {\n        atoms[_atomId].sons = _sons;\n    }\n    \n    function setAtomFath(uint _atomId, uint64 _fath) external onlyContract {\n        atoms[_atomId].fath = _fath;\n    }\n    \n    function setAtomMoth(uint _atomId, uint64 _moth) external onlyContract {\n        atoms[_atomId].moth = _moth;\n    }\n    \n    function setAtomIsRent(uint _atomId, uint128 _isRent) external onlyContract {\n        atoms[_atomId].isRent = _isRent;\n    }\n    \n    function setAtomIsBuy(uint _atomId, uint128 _isBuy) external onlyContract {\n        atoms[_atomId].isBuy = _isBuy;\n    }\n    \n    function setAtomIsReady(uint _atomId, uint32 _isReady) external onlyContractAdmin {\n        atoms[_atomId].isReady = _isReady;\n    }\n    \n    //ERC721\n    \n    mapping (uint => address) tokenApprovals;\n    \n    function totalSupply() public view returns (uint256 total){\n  \t    return atoms.length;\n  \t}\n  \t\n  \tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownerAtomsCount[_owner];\n    }\n    \n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        return atomOwner[_tokenId];\n    }\n      \n    function _transfer(address _from, address _to, uint256 _tokenId) private {\n        atoms[_tokenId].isBuy  = 0;\n        atoms[_tokenId].isRent = 0;\n        ownerAtomsCount[_to]++;\n        ownerAtomsCount[_from]--;\n        atomOwner[_tokenId] = _to;\n        Transfer(_from, _to, _tokenId);\n    }\n  \n    function transfer(address _to, uint256 _tokenId) public {\n        require(msg.sender == atomOwner[_tokenId]);\n        _transfer(msg.sender, _to, _tokenId);\n    }\n    \n    function approve(address _to, uint256 _tokenId) public {\n        require(msg.sender == atomOwner[_tokenId]);\n        tokenApprovals[_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n    \n    function takeOwnership(uint256 _tokenId) public {\n        require(tokenApprovals[_tokenId] == msg.sender);\n        _transfer(ownerOf(_tokenId), msg.sender, _tokenId);\n    }\n    \n}\n\ncontract Ownable {\n    \n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface ERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\ninterface ERC721TokenReceiver {\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\n}\n\ninterface ERC721Metadata {\n    function name() external view returns (string _name);\n    function symbol() external view returns (string _symbol);\n    function tokenURI(uint256 _tokenId) external view returns (string);\n}\n\ninterface ERC721Enumerable {\n    function totalSupply() external view returns (uint256);\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n          \ncontract CryptoAtomsToken is Ownable {\n    \n    address public CaDataAddress = 0x9b3554E6FC4F81531F6D43b611258bd1058ef6D5;\n    CaData public CaDataContract = CaData(CaDataAddress);\n\n    function kill() external\n\t{\n\t    require(msg.sender == CaDataContract.COO());\n\t\tselfdestruct(msg.sender);\n\t}\n    \n    function() public payable{}\n    \n    function withdrawBalance() public payable {\n        require(msg.sender == CaDataContract.COO() || msg.sender == CaDataContract.CTO() || msg.sender == CaDataContract.CFO());\n        CaDataContract.CFO().transfer(address(this).balance);\n    }\n    \n    mapping (address => bool) transferEmittables;\n    \n    function setTransferEmittables(address _addr, bool _bool) external {\n        require(msg.sender == CaDataContract.COO() || msg.sender == CaDataContract.CTO() || msg.sender == CaDataContract.CFO());\n        transferEmittables[_addr] = _bool;\n    }\n    \n    function emitTransfer(address _from, address _to, uint256 _tokenId) external{\n        require(transferEmittables[msg.sender]);\n        Transfer(_from, _to, _tokenId);\n    }\n    \n    //ERC721\n    \n        event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n        event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n        event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    \n        mapping (uint => address) tokenApprovals;\n        mapping (uint => address) tokenOperators;\n        mapping (address => mapping (address => bool)) ownerOperators;\n    \n        function _transfer(address _from, address _to, uint256 _tokenId) private {\n            CaDataContract.setAtomIsBuy(_tokenId,0);\n            CaDataContract.setAtomIsRent(_tokenId,0);\n            CaDataContract.setOwnerAtomsCount(_to,CaDataContract.ownerAtomsCount(_to)+1);\n            CaDataContract.setOwnerAtomsCount(_from,CaDataContract.ownerAtomsCount(_from)-1);\n            CaDataContract.setAtomOwner(_tokenId,_to);\n            Transfer(_from, _to, _tokenId);\n        }\n        \n        function _isContract(address _addr) private returns (bool check) {\n            uint size;\n            assembly { size := extcodesize(_addr) }\n            return size > 0;\n        }\n        \n      \tfunction balanceOf(address _owner) external view returns (uint256 balance) {\n            return CaDataContract.balanceOf(_owner);\n        }\n    \n        function ownerOf(uint256 _tokenId) external view returns (address owner) {\n            return CaDataContract.ownerOf(_tokenId);\n        }\n        \n        /// @notice Transfers the ownership of an NFT from one address to another address\n        /// @dev Throws unless `msg.sender` is the current owner, an authorized\n        ///  operator, or the approved address for this NFT. Throws if `_from` is\n        ///  not the current owner. Throws if `_to` is the zero address. Throws if\n        ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n        ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n        ///  `onERC721Received` on `_to` and throws if the return value is not\n        ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n        /// @param _from The current owner of the NFT\n        /// @param _to The new owner\n        /// @param _tokenId The NFT to transfer\n        /// @param _data Additional data with no specified format, sent in call to `_to`\n        function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external payable{\n            require(msg.sender == CaDataContract.ownerOf(_tokenId) || ownerOperators[CaDataContract.atomOwner(_tokenId)][msg.sender] == true || msg.sender == tokenApprovals[_tokenId]);\n            require(_from == CaDataContract.ownerOf(_tokenId) && _to != 0x0);\n            require(_tokenId < totalSupply());\n            _transfer(_from, _to, _tokenId);\n            if(_isContract(_to))\n            {\n                require(ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) == ERC721_RECEIVED);\n            }\n        }\n    \n        /// @notice Transfers the ownership of an NFT from one address to another address\n        /// @dev This works identically to the other function with an extra data parameter,\n        ///  except this function just sets data to \"\"\n        /// @param _from The current owner of the NFT\n        /// @param _to The new owner\n        /// @param _tokenId The NFT to transfer\n        function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable{\n            require(msg.sender == CaDataContract.ownerOf(_tokenId) || ownerOperators[CaDataContract.atomOwner(_tokenId)][msg.sender] == true || msg.sender == tokenApprovals[_tokenId]);\n            require(_from == CaDataContract.ownerOf(_tokenId) && _to != 0x0);\n            require(_tokenId < totalSupply());\n            _transfer(_from, _to, _tokenId);\n            if(_isContract(_to))\n            {\n                require(ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, \"\") == ERC721_RECEIVED);\n            }\n        }\n        \n        \n        /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n        ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n        ///  THEY MAY BE PERMANENTLY LOST\n        /// @dev Throws unless `msg.sender` is the current owner, an authorized\n        ///  operator, or the approved address for this NFT. Throws if `_from` is\n        ///  not the current owner. Throws if `_to` is the zero address. Throws if\n        ///  `_tokenId` is not a valid NFT.\n        /// @param _from The current owner of the NFT\n        /// @param _to The new owner\n        /// @param _tokenId The NFT to transfer\n        function transferFrom(address _from, address _to, uint256 _tokenId) external payable{\n            require(msg.sender == CaDataContract.ownerOf(_tokenId) || ownerOperators[CaDataContract.atomOwner(_tokenId)][msg.sender] == true || msg.sender == tokenApprovals[_tokenId]);\n            require(_from == CaDataContract.ownerOf(_tokenId) && _to != 0x0);\n            require(_tokenId < totalSupply());\n            _transfer(_from, _to, _tokenId);\n        }\n        \n        \n        /// @notice Set or reaffirm the approved address for an NFT\n        /// @dev The zero address indicates there is no approved address.\n        /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\n        ///  operator of the current owner.\n        /// @param _approved The new approved NFT controller\n        /// @param _tokenId The NFT to approve\n        function approve(address _approved, uint256 _tokenId) external payable {\n            require(msg.sender == CaDataContract.atomOwner(_tokenId) || ownerOperators[CaDataContract.atomOwner(_tokenId)][msg.sender]);\n            tokenApprovals[_tokenId] = _approved;\n            Approval(CaDataContract.atomOwner(_tokenId), _approved, _tokenId);\n        }\n        \n        /// @notice Enable or disable approval for a third party (\"operator\") to manage\n        ///  all of `msg.sender`'s assets.\n        /// @dev Emits the ApprovalForAll event. The contract MUST allow\n        ///  multiple operators per owner.\n        /// @param _operator Address to add to the set of authorized operators.\n        /// @param _approved True if the operator is approved, false to revoke approval\n        function setApprovalForAll(address _operator, bool _approved) external {\n            ownerOperators[msg.sender][_operator] = _approved;\n            ApprovalForAll(msg.sender, _operator, _approved);\n        }\n    \n        /// @notice Get the approved address for a single NFT\n        /// @dev Throws if `_tokenId` is not a valid NFT\n        /// @param _tokenId The NFT to find the approved address for\n        /// @return The approved address for this NFT, or the zero address if there is none\n        function getApproved(uint256 _tokenId) external view returns (address) {\n            return tokenApprovals[_tokenId];\n        }\n    \n        /// @notice Query if an address is an authorized operator for another address\n        /// @param _owner The address that owns the NFTs\n        /// @param _operator The address that acts on behalf of the owner\n        /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n        function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n            return ownerOperators[_owner][_operator];\n        }\n    \n    //ERC165\n\n        bytes4 constant Sign_ERC165 =\n            bytes4(keccak256('supportsInterface(bytes4)'));\n        \n        bytes4 constant Sign_ERC721 =\n            bytes4(keccak256('balanceOf(address)')) ^\n            bytes4(keccak256('ownerOf(uint256)')) ^\n            bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) ^\n            bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n            bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n            bytes4(keccak256('approve(address,uint256)')) ^\n            bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n            bytes4(keccak256('getApproved(uint256)')) ^\n            bytes4(keccak256('isApprovedForAll(address,address)'));\n            \n        function supportsInterface(bytes4 interfaceID) external view returns (bool)\n        {\n            return ((interfaceID == Sign_ERC165) || (interfaceID == Sign_ERC721));\n        }\n    \n    //ERC721TokenReceiver\n    \n        /// @notice Handle the receipt of an NFT\n        /// @dev The ERC721 smart contract calls this function on the\n        /// recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\n        /// of other than the magic value MUST result in the transaction being reverted.\n        /// @notice The contract address is always the message sender. \n        /// @param _operator The address which called `safeTransferFrom` function\n        /// @param _from The address which previously owned the token\n        /// @param _tokenId The NFT identifier which is being transferred\n        /// @param _data Additional data with no specified format\n        /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n        /// unless throwing \n        \n        bytes4 constant ERC721_RECEIVED = bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n        \n        function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4){\n            return ERC721_RECEIVED;\n        }\n    \n    //ERC721MetaData\n    \n        string baseUri = \"https://www.cryptoatoms.org/cres/uri/\";\n    \n        function name() external view returns (string _name) {\n            return \"Atom\";\n        }\n    \n        function symbol() external view returns (string _symbol){\n            return \"ATH\";\n        }\n    \n        /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n        /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n        ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\n        ///  Metadata JSON Schema\".\n        function tokenURI(uint256 _tokenId) external view returns (string){\n            require(_tokenId < totalSupply());\n            uint256 uid;\n            bytes32 bid;\n            uid = _tokenId;\n            if (uid == 0) \n            {\n                bid = '0';\n            }\n            else \n            {\n                while (uid > 0) \n                {\n                    bid = bytes32(uint(bid) / (2 ** 8));\n                    bid |= bytes32(((uid % 10) + 48) * 2 ** (8 * 31));\n                    uid /= 10;\n                }\n            }\n            return string(abi.encodePacked(baseUri, bid));\n        }\n        \n        function setBaseUri (string _newBaseUri) external {\n            require(msg.sender == CaDataContract.COO() || msg.sender == CaDataContract.CTO() || msg.sender == CaDataContract.CFO());\n            baseUri = _newBaseUri;\n        }\n    \n    //ERC721Enumerable\n        \n        function totalSupply() public view returns (uint256 total){\n      \t    return CaDataContract.totalSupply();\n      \t}\n      \t   \n      \t/// @notice Enumerate valid NFTs\n        /// @dev Throws if `_index` >= `totalSupply()`.\n        /// @param _index A counter less than `totalSupply()`\n        /// @return The token identifier for the `_index`th NFT,\n        ///  (sort order not specified)\n        function tokenByIndex(uint256 _index) external view returns (uint256){\n            require(_index < totalSupply());\n            return _index;\n        }\n    \n        /// @notice Enumerate NFTs assigned to an owner\n        /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n        ///  `_owner` is the zero address, representing invalid NFTs.\n        /// @param _owner An address where we are interested in NFTs owned by them\n        /// @param _index A counter less than `balanceOf(_owner)`\n        /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\n        ///   (sort order not specified)\n        function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256){\n            require(_index < CaDataContract.balanceOf(_owner));\n            uint64 counter = 0;\n            for (uint64 i = 0; i < CaDataContract.totalSupply(); i++)\n            {\n                if (CaDataContract.atomOwner(i) == _owner) {\n                    if(counter == _index)\n                    {\n                        uint256 result = i;\n                        i = uint64(CaDataContract.totalSupply());\n                    }\n                    else\n                    {\n                        counter++;\n                    }\n                }\n            }\n            return result;\n        }\n    \n    \n    //ERC20\n        \n        function decimals() external view returns (uint8 _decimals){\n            return 0;\n        }\n        \n        function implementsERC721() public pure returns (bool){\n            return true;\n        }\n        \n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setTransferEmittables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CaDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CaDataAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBaseUri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60018054600160a060020a0319908116739b3554e6fc4f81531f6d43b611258bd1058ef6d5179182905560028054909116600160a060020a039290921691909117905560e0604052602560808190527f68747470733a2f2f7777772e63727970746f61746f6d732e6f72672f6372657360a09081527f2f7572692f00000000000000000000000000000000000000000000000000000060c052620000a79160079190620000f7565b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36200019c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013a57805160ff19168380011785556200016a565b828001600101855582156200016a579182015b828111156200016a5782518255916020019190600101906200014d565b50620001789291506200017c565b5090565b6200019991905b8082111562000178576000815560010162000183565b90565b61272480620001ac6000396000f3006080604052600436106101665763ffffffff60e060020a60003504166301ffc9a7811461016857806306fdde031461019e578063081812fc14610228578063095ea7b31461025c5780631051db3414610273578063150b7a021461028857806318160ddd146102de57806323b872dd1461030557806323de6651146103225780632f745c591461034c578063313ce5671461037057806341c0e1b51461039b57806342842e0e146103b05780634f6ccce7146103cd57806354cc702d146103e55780635fd8c7101461040b5780636352211e146104135780636432e3cd1461042b578063703f5e8a1461044057806370a0823114610455578063715018a6146104765780638da5cb5b1461048b5780638f32d59b146104a057806395d89b41146104b5578063a0bcfc7f146104ca578063a22cb465146104ea578063b88d4fde14610510578063c87b56dd1461053c578063e985e9c514610554578063f2fde38b1461057b575b005b34801561017457600080fd5b5061018a600160e060020a03196004351661059c565b604080519115158252519081900360200190f35b3480156101aa57600080fd5b506101b3610823565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ed5781810151838201526020016101d5565b50505050905090810190601f16801561021a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023457600080fd5b5061024060043561085b565b60408051600160a060020a039092168252519081900360200190f35b610166600160a060020a0360043516602435610876565b34801561027f57600080fd5b5061018a610aa4565b34801561029457600080fd5b506102c1600160a060020a0360048035821691602480359091169160443591606435908101910135610aa9565b60408051600160e060020a03199092168252519081900360200190f35b3480156102ea57600080fd5b506102f3610af8565b60408051918252519081900360200190f35b610166600160a060020a0360043581169060243516604435610b88565b34801561032e57600080fd5b50610166600160a060020a0360043581169060243516604435610dc1565b34801561035857600080fd5b506102f3600160a060020a0360043516602435610e25565b34801561037c57600080fd5b506103856110c5565b6040805160ff9092168252519081900360200190f35b3480156103a757600080fd5b506101666110ca565b610166600160a060020a0360043581169060243516604435611160565b3480156103d957600080fd5b506102f36004356114b5565b3480156103f157600080fd5b50610166600160a060020a036004351660243515156114ce565b6101666116b0565b34801561041f57600080fd5b50610240600435611920565b34801561043757600080fd5b506102406119a2565b34801561044c57600080fd5b506102406119b1565b34801561046157600080fd5b506102f3600160a060020a03600435166119c0565b34801561048257600080fd5b50610166611a2b565b34801561049757600080fd5b50610240611a95565b3480156104ac57600080fd5b5061018a611aa4565b3480156104c157600080fd5b506101b3611ab5565b3480156104d657600080fd5b506101666004803560248101910135611aec565b3480156104f657600080fd5b50610166600160a060020a03600435166024351515611caf565b610166600160a060020a0360048035821691602480359091169160443591606435908101910135611d1d565b34801561054857600080fd5b506101b3600435612091565b34801561056057600080fd5b5061018a600160a060020a036004358116906024351661219f565b34801561058757600080fd5b50610166600160a060020a03600435166121cd565b604080517f737570706f727473496e7465726661636528627974657334290000000000000081529051908190036019019020600090600160e060020a03198381169116148061081d5750604080517f6973417070726f766564466f72416c6c28616464726573732c6164647265737381527f290000000000000000000000000000000000000000000000000000000000000060208083019190915282519182900360210182207f676574417070726f7665642875696e7432353629000000000000000000000000835283519283900360140183207f736574417070726f76616c466f72416c6c28616464726573732c626f6f6c29008452845193849003601f0184207f617070726f766528616464726573732c75696e74323536290000000000000000855285519485900360180185207f7472616e7366657246726f6d28616464726573732c616464726573732c75696e86527f74323536290000000000000000000000000000000000000000000000000000008686015286519586900360250186207f736166655472616e7366657246726f6d28616464726573732c616464726573738088527f2c75696e743235362900000000000000000000000000000000000000000000008888015288519788900360290188209088526000805160206126d983398151915296880196909652875196879003602f0187207f6f776e65724f662875696e743235362900000000000000000000000000000000885288519788900360100188207f62616c616e63654f6628616464726573732900000000000000000000000000008952985197889003601201909720600160e060020a03198b8116919099189097189095189094189093189092189091181891909116145b92915050565b60408051808201909152600481527f41746f6d0000000000000000000000000000000000000000000000000000000060208201525b90565b600090815260046020526040902054600160a060020a031690565b6002546040805160e060020a635b92292f028152600481018490529051600160a060020a0390921691635b92292f916024808201926020929091908290030181600087803b1580156108c757600080fd5b505af11580156108db573d6000803e3d6000fd5b505050506040513d60208110156108f157600080fd5b5051600160a060020a03163314806109b157506002546040805160e060020a635b92292f028152600481018490529051600692600092600160a060020a0390911691635b92292f9160248082019260209290919082900301818787803b15801561095a57600080fd5b505af115801561096e573d6000803e3d6000fd5b505050506040513d602081101561098457600080fd5b5051600160a060020a031681526020818101929092526040908101600090812033825290925290205460ff165b15156109bc57600080fd5b6000818152600460208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03888116918217909255600254835160e060020a635b92292f0281529586018890529251879691959390921693635b92292f936024808201949293918390030190829087803b158015610a3f57600080fd5b505af1158015610a53573d6000803e3d6000fd5b505050506040513d6020811015610a6957600080fd5b5051604051600160a060020a03909116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590600090a45050565b600190565b604080517f6f6e455243373231526563656976656428616464726573732c6164647265737381526000805160206126d98339815191526020820152905190819003602f01902095945050505050565b600254604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916318160ddd91600480830192602092919082900301818787803b158015610b5757600080fd5b505af1158015610b6b573d6000803e3d6000fd5b505050506040513d6020811015610b8157600080fd5b5051905090565b6002546040805160e160020a6331a9108f028152600481018490529051600160a060020a0390921691636352211e916024808201926020929091908290030181600087803b158015610bd957600080fd5b505af1158015610bed573d6000803e3d6000fd5b505050506040513d6020811015610c0357600080fd5b5051600160a060020a0316331480610cc857506002546040805160e060020a635b92292f028152600481018490529051600692600092600160a060020a0390911691635b92292f9160248082019260209290919082900301818787803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d6020811015610c9657600080fd5b5051600160a060020a031681526020818101929092526040908101600090812033825290925290205460ff1615156001145b80610ce95750600081815260046020526040902054600160a060020a031633145b1515610cf457600080fd5b6002546040805160e160020a6331a9108f028152600481018490529051600160a060020a0390921691636352211e916024808201926020929091908290030181600087803b158015610d4557600080fd5b505af1158015610d59573d6000803e3d6000fd5b505050506040513d6020811015610d6f57600080fd5b5051600160a060020a038481169116148015610d935750600160a060020a03821615155b1515610d9e57600080fd5b610da6610af8565b8110610db157600080fd5b610dbc8383836121e9565b505050565b3360009081526003602052604090205460ff161515610ddf57600080fd5b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152915160009384938493849391909216916370a0823191602480830192602092919082900301818787803b158015610e9557600080fd5b505af1158015610ea9573d6000803e3d6000fd5b505050506040513d6020811015610ebf57600080fd5b50518510610ecc57600080fd5b60009250600091505b600260009054906101000a9004600160a060020a0316600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f2857600080fd5b505af1158015610f3c573d6000803e3d6000fd5b505050506040513d6020811015610f5257600080fd5b505167ffffffffffffffff831610156110bc576002546040805160e060020a635b92292f02815267ffffffffffffffff851660048201529051600160a060020a03808a16931691635b92292f9160248083019260209291908290030181600087803b158015610fc057600080fd5b505af1158015610fd4573d6000803e3d6000fd5b505050506040513d6020811015610fea57600080fd5b5051600160a060020a031614156110b157848367ffffffffffffffff1614156110aa5750600254604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905167ffffffffffffffff841692600160a060020a0316916318160ddd9160048083019260209291908290030181600087803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b505050506040513d60208110156110a157600080fd5b505191506110b1565b6001909201915b600190910190610ed5565b95945050505050565b600090565b600260009054906101000a9004600160a060020a0316600160a060020a031663e1b27e6b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561111d57600080fd5b505af1158015611131573d6000803e3d6000fd5b505050506040513d602081101561114757600080fd5b5051600160a060020a0316331461115d57600080fd5b33ff5b6002546040805160e160020a6331a9108f028152600481018490529051600160a060020a0390921691636352211e916024808201926020929091908290030181600087803b1580156111b157600080fd5b505af11580156111c5573d6000803e3d6000fd5b505050506040513d60208110156111db57600080fd5b5051600160a060020a03163314806112a057506002546040805160e060020a635b92292f028152600481018490529051600692600092600160a060020a0390911691635b92292f9160248082019260209290919082900301818787803b15801561124457600080fd5b505af1158015611258573d6000803e3d6000fd5b505050506040513d602081101561126e57600080fd5b5051600160a060020a031681526020818101929092526040908101600090812033825290925290205460ff1615156001145b806112c15750600081815260046020526040902054600160a060020a031633145b15156112cc57600080fd5b6002546040805160e160020a6331a9108f028152600481018490529051600160a060020a0390921691636352211e916024808201926020929091908290030181600087803b15801561131d57600080fd5b505af1158015611331573d6000803e3d6000fd5b505050506040513d602081101561134757600080fd5b5051600160a060020a03848116911614801561136b5750600160a060020a03821615155b151561137657600080fd5b61137e610af8565b811061138957600080fd5b6113948383836121e9565b61139d826125c5565b15610dbc57604080517f6f6e455243373231526563656976656428616464726573732c6164647265737381526000805160206126d9833981519152602080830191909152825191829003602f0182207f150b7a02000000000000000000000000000000000000000000000000000000008352336004840152600160a060020a03878116602485015260448401869052608060648501526000608485018190529451600160e060020a0319909216949087169363150b7a029360c480830194919391928390030190829087803b15801561147557600080fd5b505af1158015611489573d6000803e3d6000fd5b505050506040513d602081101561149f57600080fd5b5051600160e060020a03191614610dbc57600080fd5b60006114bf610af8565b82106114ca57600080fd5b5090565b600260009054906101000a9004600160a060020a0316600160a060020a031663e1b27e6b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561152157600080fd5b505af1158015611535573d6000803e3d6000fd5b505050506040513d602081101561154b57600080fd5b5051600160a060020a03163314806115e95750600260009054906101000a9004600160a060020a0316600160a060020a0316633d01bdec6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156115b157600080fd5b505af11580156115c5573d6000803e3d6000fd5b505050506040513d60208110156115db57600080fd5b5051600160a060020a031633145b8061167a5750600260009054906101000a9004600160a060020a0316600160a060020a03166330d500bf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561164257600080fd5b505af1158015611656573d6000803e3d6000fd5b505050506040513d602081101561166c57600080fd5b5051600160a060020a031633145b151561168557600080fd5b600160a060020a03919091166000908152600360205260409020805460ff1916911515919091179055565b600260009054906101000a9004600160a060020a0316600160a060020a031663e1b27e6b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561170357600080fd5b505af1158015611717573d6000803e3d6000fd5b505050506040513d602081101561172d57600080fd5b5051600160a060020a03163314806117cb5750600260009054906101000a9004600160a060020a0316600160a060020a0316633d01bdec6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561179357600080fd5b505af11580156117a7573d6000803e3d6000fd5b505050506040513d60208110156117bd57600080fd5b5051600160a060020a031633145b8061185c5750600260009054906101000a9004600160a060020a0316600160a060020a03166330d500bf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561182457600080fd5b505af1158015611838573d6000803e3d6000fd5b505050506040513d602081101561184e57600080fd5b5051600160a060020a031633145b151561186757600080fd5b600260009054906101000a9004600160a060020a0316600160a060020a03166330d500bf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156118ba57600080fd5b505af11580156118ce573d6000803e3d6000fd5b505050506040513d60208110156118e457600080fd5b5051604051600160a060020a0390911690303180156108fc02916000818181858888f1935050505015801561191d573d6000803e3d6000fd5b50565b6002546040805160e160020a6331a9108f028152600481018490529051600092600160a060020a031691636352211e91602480830192602092919082900301818787803b15801561197057600080fd5b505af1158015611984573d6000803e3d6000fd5b505050506040513d602081101561199a57600080fd5b505192915050565b600254600160a060020a031681565b600154600160a060020a031681565b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915160009392909216916370a082319160248082019260209290919082900301818787803b15801561197057600080fd5b611a33611aa4565b1515611a3e57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031690565b600054600160a060020a0316331490565b60408051808201909152600381527f4154480000000000000000000000000000000000000000000000000000000000602082015290565b600260009054906101000a9004600160a060020a0316600160a060020a031663e1b27e6b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611b3f57600080fd5b505af1158015611b53573d6000803e3d6000fd5b505050506040513d6020811015611b6957600080fd5b5051600160a060020a0316331480611c075750600260009054906101000a9004600160a060020a0316600160a060020a0316633d01bdec6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611bcf57600080fd5b505af1158015611be3573d6000803e3d6000fd5b505050506040513d6020811015611bf957600080fd5b5051600160a060020a031633145b80611c985750600260009054906101000a9004600160a060020a0316600160a060020a03166330d500bf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611c6057600080fd5b505af1158015611c74573d6000803e3d6000fd5b505050506040513d6020811015611c8a57600080fd5b5051600160a060020a031633145b1515611ca357600080fd5b610dbc6007838361264a565b336000818152600660209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6002546040805160e160020a6331a9108f028152600481018690529051600160a060020a0390921691636352211e916024808201926020929091908290030181600087803b158015611d6e57600080fd5b505af1158015611d82573d6000803e3d6000fd5b505050506040513d6020811015611d9857600080fd5b5051600160a060020a0316331480611e5d57506002546040805160e060020a635b92292f028152600481018690529051600692600092600160a060020a0390911691635b92292f9160248082019260209290919082900301818787803b158015611e0157600080fd5b505af1158015611e15573d6000803e3d6000fd5b505050506040513d6020811015611e2b57600080fd5b5051600160a060020a031681526020818101929092526040908101600090812033825290925290205460ff1615156001145b80611e7e5750600083815260046020526040902054600160a060020a031633145b1515611e8957600080fd5b6002546040805160e160020a6331a9108f028152600481018690529051600160a060020a0390921691636352211e916024808201926020929091908290030181600087803b158015611eda57600080fd5b505af1158015611eee573d6000803e3d6000fd5b505050506040513d6020811015611f0457600080fd5b5051600160a060020a038681169116148015611f285750600160a060020a03841615155b1515611f3357600080fd5b611f3b610af8565b8310611f4657600080fd5b611f518585856121e9565b611f5a846125c5565b1561208a57604080517f6f6e455243373231526563656976656428616464726573732c6164647265737381526000805160206126d98339815191526020820152905190819003602f0181207f150b7a020000000000000000000000000000000000000000000000000000000082523360048301818152600160a060020a0389811660248601526044850188905260806064860190815260848601879052600160e060020a0319909416949089169363150b7a0293928b928a928a928a9290919060a40184848082843782019150509650505050505050602060405180830381600087803b15801561204a57600080fd5b505af115801561205e573d6000803e3d6000fd5b505050506040513d602081101561207457600080fd5b5051600160e060020a0319161461208a57600080fd5b5050505050565b606060008061209e610af8565b84106120a957600080fd5b8391508115156120da57507f300000000000000000000000000000000000000000000000000000000000000061211f565b600082111561211f5761010081049050600a82066030017f01000000000000000000000000000000000000000000000000000000000000000217600a820491506120da565b60078160405160200180838054600181600116156101000203166002900480156121805780601f1061215e576101008083540402835291820191612180565b820191906000526020600020905b81548152906001019060200180831161216c575b5050918252506040805180830381526020909201905295945050505050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6121d5611aa4565b15156121e057600080fd5b61191d816125cd565b600254604080517f41354590000000000000000000000000000000000000000000000000000000008152600481018490526000602482018190529151600160a060020a039093169263413545909260448084019391929182900301818387803b15801561225557600080fd5b505af1158015612269573d6000803e3d6000fd5b5050600254604080517ff630a468000000000000000000000000000000000000000000000000000000008152600481018690526000602482018190529151600160a060020a03909316945063f630a46893506044808201939182900301818387803b1580156122d757600080fd5b505af11580156122eb573d6000803e3d6000fd5b5050600254604080517fefbd63a9000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151919092169350631cf91bf292508591849163efbd63a9916024808201926020929091908290030181600087803b15801561236257600080fd5b505af1158015612376573d6000803e3d6000fd5b505050506040513d602081101561238c57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a0390931660048401526001909101602483015251604480830192600092919082900301818387803b1580156123dc57600080fd5b505af11580156123f0573d6000803e3d6000fd5b5050600254604080517fefbd63a9000000000000000000000000000000000000000000000000000000008152600160a060020a0388811660048301529151919092169350631cf91bf292508691600191859163efbd63a99160248083019260209291908290030181600087803b15801561246957600080fd5b505af115801561247d573d6000803e3d6000fd5b505050506040513d602081101561249357600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a039094166004850152919003602483015251604480830192600092919082900301818387803b1580156124e157600080fd5b505af11580156124f5573d6000803e3d6000fd5b5050600254604080517f35d1f86900000000000000000000000000000000000000000000000000000000815260048101869052600160a060020a03878116602483015291519190921693506335d1f8699250604480830192600092919082900301818387803b15801561256757600080fd5b505af115801561257b573d6000803e3d6000fd5b505050508082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000903b1190565b600160a060020a03811615156125e257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061268b5782800160ff198235161785556126b8565b828001600101855582156126b8579182015b828111156126b857823582559160200191906001019061269d565b506114ca926108589250905b808211156114ca57600081556001016126c456002c75696e743235362c6279746573290000000000000000000000000000000000a165627a7a72305820008a0d11f9b4dbf810ac043abccc430755c7a3f30dfe4b519b4ac974d1fbc7aa0029"
}