{
  "address": "0x945f171de4ea81a213dcc7a1e8c4f6feb3b4b806",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ECP_Token",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-10\n*/\n\npragma solidity ^0.4.20;\ncontract tokenRecipient\n  {\n  function receiveApproval(address from, uint256 value, address token, bytes extraData) public; \n  }\ncontract ECP_Token // ECP Smart Contract Start\n  {\n     /* Variables For Contract */\n    string  public name;                                                        // Variable To Store Name\n    string  public symbol;                                                      // Variable To Store Symbol\n    uint8   public decimals;                                                    // Variable To Store Decimals\n    uint256 public totalSupply;                                                 // Variable To Store Total Supply Of Tokens\n    uint256 public remaining;                                                   // Variable To Store Smart Remaining Tokens\n    address public owner;                                                       // Variable To Store Smart Contract Owner\n    uint    public icoStatus;                                                   // Variable To Store Smart Contract Status ( Enable / Disabled )\n    address public benAddress;                                                  // Variable To Store Ben Address\n    address public bkaddress;                                                   // Variable To Store Backup Ben Address\n    uint    public allowTransferToken;                                          // Variable To Store If Transfer Is Enable Or Disabled\n\n     /* Array For Contract*/\n    mapping (address => uint256) public balanceOf;                              // Arrary To Store Ether Addresses\n    mapping (address => mapping (address => uint256)) public allowance;         // Arrary To Store Ether Addresses For Allowance\n    mapping (address => bool) public frozenAccount;                             // Arrary To Store Ether Addresses For Frozen Account\n\n    /* Events For Contract  */\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    event TokenTransferEvent(address indexed from, address indexed to, uint256 value, string typex);\n\n\n     /* Initialize Smart Contract */\n    function ECP_Token() public\n    {\n      totalSupply = 15000000000000000000000000000;                              // Total Supply 15 Billion Tokens\n      owner =  msg.sender;                                                      // Smart Contract Owner\n      balanceOf[owner] = totalSupply;                                           // Credit Tokens To Owner\n      name = \"ECP Token\";                                                       // Set Name Of Token\n      symbol = \"ECP\";                                                           // Set Symbol Of Token\n      decimals = 18;                                                            // Set Decimals\n      remaining = totalSupply;                                                  // Set How Many Tokens Left\n      icoStatus = 1;                                                            // Set ICO Status As Active At Beginning\n      benAddress = 0xe4a7a715bE044186a3ac5C60c7Df7dD1215f7419;\n      bkaddress  = 0x44e00602e4B8F546f76983de2489d636CB443722;\n      allowTransferToken = 1;                                                   // Default Set Allow Transfer To Active\n    }\n\n   modifier onlyOwner()                                                         // Create Modifier\n    {\n        require((msg.sender == owner) || (msg.sender ==  bkaddress));\n        _;\n    }\n\n\n    function () public payable                                                  // Default Function\n    {\n    }\n\n    function sendToMultipleAccount (address[] dests, uint256[] values) public onlyOwner returns (uint256) // Function To Send Token To Multiple Account At A Time\n    {\n        uint256 i = 0;\n        while (i < dests.length) {\n\n                if(remaining > 0)\n                {\n                     _transfer(owner, dests[i], values[i]);  // Transfer Token Via Internal Transfer Function\n                     TokenTransferEvent(owner, dests[i], values[i],'MultipleAccount'); // Raise Event After Transfer\n                }\n                else\n                {\n                    revert();\n                }\n\n            i += 1;\n        }\n        return(i);\n    }\n\n\n    function sendTokenToSingleAccount(address receiversAddress ,uint256 amountToTransfer) public onlyOwner  // Function To Send Token To Single Account At A Time\n    {\n        if (remaining > 0)\n        {\n                     _transfer(owner, receiversAddress, amountToTransfer);  // Transfer Token Via Internal Transfer Function\n                     TokenTransferEvent(owner, receiversAddress, amountToTransfer,'SingleAccount'); // Raise Event After Transfer\n        }\n        else\n        {\n            revert();\n        }\n    }\n\n\n    function setTransferStatus (uint st) public  onlyOwner                      // Set Transfer Status\n    {\n        allowTransferToken = st;\n    }\n\n    function changeIcoStatus (uint8 st)  public onlyOwner                       // Change ICO Status\n    {\n        icoStatus = st;\n    }\n\n\n    function withdraw(uint amountWith) public onlyOwner                         // Withdraw Funds From Contract\n        {\n            if((msg.sender == owner) || (msg.sender ==  bkaddress))\n            {\n                benAddress.transfer(amountWith);\n            }\n            else\n            {\n                revert();\n            }\n        }\n\n    function withdraw_all() public onlyOwner                                    // Withdraw All Funds From Contract\n        {\n            if((msg.sender == owner) || (msg.sender ==  bkaddress) )\n            {\n                var amountWith = this.balance - 10000000000000000;\n                benAddress.transfer(amountWith);\n            }\n            else\n            {\n                revert();\n            }\n        }\n\n    function mintToken(uint256 tokensToMint) public onlyOwner                   // Mint Tokens\n        {\n            if(tokensToMint > 0)\n            {\n                var totalTokenToMint = tokensToMint * (10 ** 18);               // Calculate Tokens To Mint\n                balanceOf[owner] += totalTokenToMint;                           // Credit To Owners Account\n                totalSupply += totalTokenToMint;                                // Update Total Supply\n                remaining += totalTokenToMint;                                  // Update Remaining\n                Transfer(0, owner, totalTokenToMint);                           // Raise The Event\n            }\n        }\n\n\n\t function adm_trasfer(address _from,address _to, uint256 _value)  public onlyOwner // Admin Transfer Tokens\n\t\t  {\n\t\t\t  _transfer(_from, _to, _value);\n\t\t  }\n\n\n    function freezeAccount(address target, bool freeze) public onlyOwner        // Freeze Account\n        {\n            frozenAccount[target] = freeze;\n            FrozenFunds(target, freeze);\n        }\n\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) // ERC20 Function Implementation To Show Account Balance\n        {\n            return balanceOf[_owner];\n        }\n\n    function totalSupply() private constant returns (uint256 tsupply)           // ERC20 Function Implementation To Show Total Supply\n        {\n            tsupply = totalSupply;\n        }\n\n\n    function transferOwnership(address newOwner) public onlyOwner               // Function Implementation To Transfer Ownership\n        {\n            balanceOf[owner] = 0;\n            balanceOf[newOwner] = remaining;\n            owner = newOwner;\n        }\n\n  function _transfer(address _from, address _to, uint _value) internal          // Internal Function To Transfer Tokens\n      {\n          if(allowTransferToken == 1 || _from == owner )\n          {\n              require(!frozenAccount[_from]);                                   // Prevent Transfer From Frozenfunds\n              require (_to != 0x0);                                             // Prevent Transfer To 0x0 Address.\n              require (balanceOf[_from] > _value);                              // Check If The Sender Has Enough Tokens To Transfer\n              require (balanceOf[_to] + _value > balanceOf[_to]);               // Check For Overflows\n              balanceOf[_from] -= _value;                                       // Subtract From The Sender\n              balanceOf[_to] += _value;                                         // Add To The Recipient\n              Transfer(_from, _to, _value);                                     // Raise Event After Transfer\n          }\n          else\n          {\n               revert();\n          }\n      }\n\n  function transfer(address _to, uint256 _value)  public                        // ERC20 Function Implementation To Transfer Tokens\n      {\n          _transfer(msg.sender, _to, _value);\n      }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) // ERC20 Function Implementation Of Transfer From\n      {\n          require (_value < allowance[_from][msg.sender]);                      // Check Has Permission To Transfer\n          allowance[_from][msg.sender] -= _value;                               // Minus From Available\n          _transfer(_from, _to, _value);                                        // Credit To Receiver\n          return true;\n      }\n\n  function approve(address _spender, uint256 _value) public returns (bool success) // ERC20 Function Implementation Of Approve\n      {\n          allowance[msg.sender][_spender] = _value;\n          return true;\n      }\n\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) // ERC20 Function Implementation Of Approve & Call\n      {\n          tokenRecipient spender = tokenRecipient(_spender);\n          if (approve(_spender, _value)) {\n              spender.receiveApproval(msg.sender, _value, this, _extraData);\n              return true;\n          }\n      }\n\n  function burn(uint256 _value) public returns (bool success)                   // ERC20 Function Implementation Of Burn\n      {\n          require (balanceOf[msg.sender] > _value);                             // Check If The Sender Has Enough Balance\n          balanceOf[msg.sender] -= _value;                                      // Subtract From The Sender\n          totalSupply -= _value;                                                // Updates TotalSupply\n          remaining -= _value;                                                  // Update Remaining Tokens\n          Burn(msg.sender, _value);                                             // Raise Event\n          return true;\n      }\n\n  function burnFrom(address _from, uint256 _value) public returns (bool success) // ERC20 Function Implementation Of Burn From\n      {\n          require(balanceOf[_from] >= _value);                                  // Check If The Target Has Enough Balance\n          require(_value <= allowance[_from][msg.sender]);                      // Check Allowance\n          balanceOf[_from] -= _value;                                           // Subtract From The Targeted Balance\n          allowance[_from][msg.sender] -= _value;                               // Subtract From The Sender's Allowance\n          totalSupply -= _value;                                                // Update TotalSupply\n          remaining -= _value;                                                  // Update Remaining\n          Burn(_from, _value);\n          return true;\n      }\n} //  ECP Smart Contract End",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"st\",\"type\":\"uint8\"}],\"name\":\"changeIcoStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountWith\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"sendToMultipleAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bkaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"adm_trasfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiversAddress\",\"type\":\"address\"},{\"name\":\"amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"sendTokenToSingleAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensToMint\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"st\",\"type\":\"uint256\"}],\"name\":\"setTransferStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"benAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowTransferToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"typex\",\"type\":\"string\"}],\"name\":\"TokenTransferEvent\",\"type\":\"event\"}]",
  "bytecode": "606060405234156200001057600080fd5b6b3077b58d5d37839198000000600381905560058054600160a060020a03191633600160a060020a039081169190911791829055166000908152600a602052604090819020919091558051908101604052600981527f45435020546f6b656e000000000000000000000000000000000000000000000060208201526000908051620000a092916020019062000156565b5060408051908101604052600381527f454350000000000000000000000000000000000000000000000000000000000060208201526001908051620000ea92916020019062000156565b506002805460ff191660121790556003546004556001600681905560078054600160a060020a031990811673e4a7a715be044186a3ac5c60c7df7dd1215f741917909155600880549091167344e00602e4b8f546f76983de2489d636cb443722179055600955620001fb565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019957805160ff1916838001178555620001c9565b82800160010185558215620001c9579182015b82811115620001c9578251825591602001919060010190620001ac565b50620001d7929150620001db565b5090565b620001f891905b80821115620001d75760008155600101620001e2565b90565b611256806200020b6000396000f3006060604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610176578063095ea7b31461020057806311d414af1461023657806318160ddd1461024f57806323b872dd146102745780632e1a7d4d1461029c578063313ce567146102b257806342966c68146102db57806344773a6c146102f157806355234ec01461038057806362d216021461039357806370a08231146103c257806379cc6790146103e157806388af883b146104035780638da5cb5b1461042b57806395d89b411461043e578063998be0d714610451578063a9059cbb14610473578063b414d4b614610495578063c634d032146104b4578063cae9ca51146104ca578063d6e89cf01461052f578063d96e1f7614610545578063dd473d2b14610558578063dd62ed3e1461056b578063e724529c14610590578063ea4dfce9146105b4578063ef6a676d146105c7578063f2fde38b146105da575b005b341561018157600080fd5b6101896105f9565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101c55780820151838201526020016101ad565b50505050905090810190601f1680156101f25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561020b57600080fd5b610222600160a060020a0360043516602435610697565b604051901515815260200160405180910390f35b341561024157600080fd5b61017460ff600435166106c7565b341561025a57600080fd5b610262610705565b60405190815260200160405180910390f35b341561027f57600080fd5b610222600160a060020a036004358116906024351660443561070b565b34156102a757600080fd5b610174600435610781565b34156102bd57600080fd5b6102c5610827565b60405160ff909116815260200160405180910390f35b34156102e657600080fd5b610222600435610830565b34156102fc57600080fd5b6102626004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506108c395505050505050565b341561038b57600080fd5b610262610a0a565b341561039e57600080fd5b6103a6610a10565b604051600160a060020a03909116815260200160405180910390f35b34156103cd57600080fd5b610262600160a060020a0360043516610a1f565b34156103ec57600080fd5b610222600160a060020a0360043516602435610a3a565b341561040e57600080fd5b610174600160a060020a0360043581169060243516604435610b1f565b341561043657600080fd5b6103a6610b65565b341561044957600080fd5b610189610b74565b341561045c57600080fd5b610174600160a060020a0360043516602435610bdf565b341561047e57600080fd5b610174600160a060020a0360043516602435610cb5565b34156104a057600080fd5b610222600160a060020a0360043516610cc0565b34156104bf57600080fd5b610174600435610cd5565b34156104d557600080fd5b61022260048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610d9695505050505050565b341561053a57600080fd5b610174600435610ec8565b341561055057600080fd5b610262610f03565b341561056357600080fd5b610174610f09565b341561057657600080fd5b610262600160a060020a0360043581169060243516610fb6565b341561059b57600080fd5b610174600160a060020a03600435166024351515610fd3565b34156105bf57600080fd5b6103a661107a565b34156105d257600080fd5b610262611089565b34156105e557600080fd5b610174600160a060020a036004351661108f565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561068f5780601f106106645761010080835404028352916020019161068f565b820191906000526020600020905b81548152906001019060200180831161067257829003601f168201915b505050505081565b600160a060020a033381166000908152600b60209081526040808320938616835292905220819055600192915050565b60055433600160a060020a03908116911614806106f2575060085433600160a060020a039081169116145b15156106fd57600080fd5b60ff16600655565b60035481565b600160a060020a038084166000908152600b6020908152604080832033909416835292905290812054821061073f57600080fd5b600160a060020a038085166000908152600b602090815260408083203390941683529290522080548390039055610777848484611117565b5060019392505050565b60055433600160a060020a03908116911614806107ac575060085433600160a060020a039081169116145b15156107b757600080fd5b60055433600160a060020a03908116911614806107e2575060085433600160a060020a039081169116145b1561081f57600754600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561081a57600080fd5b610824565b600080fd5b50565b60025460ff1681565b600160a060020a0333166000908152600a602052604081205482901161085557600080fd5b600160a060020a0333166000818152600a602052604090819020805485900390556003805485900390556004805485900390557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b600554600090819033600160a060020a03908116911614806108f3575060085433600160a060020a039081169116145b15156108fe57600080fd5b5060005b8351811015610a03576000600454111561081f5760055461095790600160a060020a031685838151811061093257fe5b9060200190602002015185848151811061094857fe5b90602001906020020151611117565b83818151811061096357fe5b90602001906020020151600554600160a060020a0391821691167fdfb131a860fb9d1ff0a89ca8ef70185fcf47bb93145f565163140015448d4a798584815181106109aa57fe5b90602001906020020151604051908152604060208201819052600f818301527f4d756c7469706c654163636f756e74000000000000000000000000000000000060608301526080909101905180910390a3600101610902565b9392505050565b60045481565b600854600160a060020a031681565b600160a060020a03166000908152600a602052604090205490565b600160a060020a0382166000908152600a602052604081205482901015610a6057600080fd5b600160a060020a038084166000908152600b602090815260408083203390941683529290522054821115610a9357600080fd5b600160a060020a038084166000818152600a6020908152604080832080548890039055600b825280832033909516835293905282902080548590039055600380548590039055600480548590039055907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a250600192915050565b60055433600160a060020a0390811691161480610b4a575060085433600160a060020a039081169116145b1515610b5557600080fd5b610b60838383611117565b505050565b600554600160a060020a031681565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561068f5780601f106106645761010080835404028352916020019161068f565b60055433600160a060020a0390811691161480610c0a575060085433600160a060020a039081169116145b1515610c1557600080fd5b6000600454111561081f57600554610c3790600160a060020a03168383611117565b600554600160a060020a0380841691167fdfb131a860fb9d1ff0a89ca8ef70185fcf47bb93145f565163140015448d4a7983604051908152604060208201819052600d818301527f53696e676c654163636f756e740000000000000000000000000000000000000060608301526080909101905180910390a35b5050565b610cb1338383611117565b600c6020526000908152604090205460ff1681565b60055460009033600160a060020a0390811691161480610d03575060085433600160a060020a039081169116145b1515610d0e57600080fd5b6000821115610cb1575060058054600160a060020a039081166000908152600a60205260408082208054670de0b6b3a76400008702908101909155600380548201905560048054820190559354909216917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050565b600083610da38185610697565b15610ec05780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e59578082015183820152602001610e41565b50505050905090810190601f168015610e865780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610ea757600080fd5b6102c65a03f11515610eb857600080fd5b505050600191505b509392505050565b60055433600160a060020a0390811691161480610ef3575060085433600160a060020a039081169116145b1515610efe57600080fd5b600955565b60065481565b60055460009033600160a060020a0390811691161480610f37575060085433600160a060020a039081169116145b1515610f4257600080fd5b60055433600160a060020a0390811691161480610f6d575060085433600160a060020a039081169116145b1561081f575060075430600160a060020a0390811631662386f26fc0ffff190191166108fc82150282604051600060405180830381858888f19350505050151561081a57600080fd5b600b60209081526000928352604080842090915290825290205481565b60055433600160a060020a0390811691161480610ffe575060085433600160a060020a039081169116145b151561100957600080fd5b600160a060020a0382166000908152600c602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b600754600160a060020a031681565b60095481565b60055433600160a060020a03908116911614806110ba575060085433600160a060020a039081169116145b15156110c557600080fd5b60058054600160a060020a039081166000908152600a60205260408082208290556004549490921680825291902092909255805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b600954600114806111355750600554600160a060020a038481169116145b1561081f57600160a060020a0383166000908152600c602052604090205460ff161561116057600080fd5b600160a060020a038216151561117557600080fd5b600160a060020a0383166000908152600a602052604090205481901161119a57600080fd5b600160a060020a0382166000908152600a6020526040902054818101116111c057600080fd5b600160a060020a038084166000818152600a60205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a3610b605600a165627a7a7230582072e51d8fd94e76c82cd174c8cadac520812704d1e3dcb771fa474dda7df93c390029"
}