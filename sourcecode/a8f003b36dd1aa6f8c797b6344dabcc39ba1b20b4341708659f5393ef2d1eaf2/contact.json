{
  "address": "0x8e306b005773bee6ba6a6e8972bc79d766cc15c8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MerkleMine",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-30\n*/\n\npragma solidity 0.4.18;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/*\n * @title MerkleProof\n * @dev Merkle proof verification\n * @note Based on https://github.com/ameensol/merkle-tree-solidity/blob/master/src/MerkleProof.sol\n */\nlibrary MerkleProof {\n  /*\n   * @dev Verifies a Merkle proof proving the existence of a leaf in a Merkle tree. Assumes that each pair of leaves\n   * and each pair of pre-images is sorted.\n   * @param _proof Merkle proof containing sibling hashes on the branch from the leaf to the root of the Merkle tree\n   * @param _root Merkle root\n   * @param _leaf Leaf of Merkle tree\n   */\n  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n    // Check if proof length is a multiple of 32\n    if (_proof.length % 32 != 0) return false;\n\n    bytes32 proofElement;\n    bytes32 computedHash = _leaf;\n\n    for (uint256 i = 32; i <= _proof.length; i += 32) {\n      assembly {\n        // Load the current element of the proof\n        proofElement := mload(add(_proof, i))\n      }\n\n      if (computedHash < proofElement) {\n        // Hash(current computed hash + current element of the proof)\n        computedHash = keccak256(computedHash, proofElement);\n      } else {\n        // Hash(current element of the proof + current computed hash)\n        computedHash = keccak256(proofElement, computedHash);\n      }\n    }\n\n    // Check if the computed hash (root) is equal to the provided root\n    return computedHash == _root;\n  }\n}\n\n/**\n * @title MerkleMine\n * @dev Token distribution based on providing Merkle proofs of inclusion in genesis state to generate allocation\n */\ncontract MerkleMine {\n    using SafeMath for uint256;\n\n    // ERC20 token being distributed\n    ERC20 public token;\n    // Merkle root representing genesis state which encodes token recipients\n    bytes32 public genesisRoot;\n    // Total amount of tokens that can be generated\n    uint256 public totalGenesisTokens;\n    // Total number of recipients included in genesis state\n    uint256 public totalGenesisRecipients;\n    // Amount of tokens per recipient allocation. Equal to `totalGenesisTokens` / `totalGenesisRecipients`\n    uint256 public tokensPerAllocation;\n    // Minimum ETH balance threshold for recipients included in genesis state\n    uint256 public balanceThreshold;\n    // Block number of genesis - used to determine which ETH accounts are included in the genesis state\n    uint256 public genesisBlock;\n    // Start block where a third party caller (not the recipient) can generate and split the allocation with the recipient\n    // As the current block gets closer to `callerAllocationEndBlock`, the caller receives a larger precentage of the allocation\n    uint256 public callerAllocationStartBlock;\n    // From this block onwards, a third party caller (not the recipient) can generate and claim the recipient's full allocation\n    uint256 public callerAllocationEndBlock;\n    // Number of blocks in the caller allocation period as defined by `callerAllocationEndBlock` - `callerAllocationStartBlock`\n    uint256 public callerAllocationPeriod;\n\n    // Track if the generation process is started\n    bool public started;\n\n    // Track the already generated allocations for recipients\n    mapping (address => bool) public generated;\n\n    // Check that a recipient's allocation has not been generated\n    modifier notGenerated(address _recipient) {\n        require(!generated[_recipient]);\n        _;\n    }\n\n    // Check that the generation period is started\n    modifier isStarted() {\n        require(started);\n        _;\n    }\n\n    // Check that the generation period is not started\n    modifier isNotStarted() {\n        require(!started);\n        _;\n    }\n\n    event Generate(address indexed _recipient, address indexed _caller, uint256 _recipientTokenAmount, uint256 _callerTokenAmount, uint256 _block);\n\n    /**\n     * @dev MerkleMine constructor\n     * @param _token ERC20 token being distributed\n     * @param _genesisRoot Merkle root representing genesis state which encodes token recipients\n     * @param _totalGenesisTokens Total amount of tokens that can be generated\n     * @param _totalGenesisRecipients Total number of recipients included in genesis state\n     * @param _balanceThreshold Minimum ETH balance threshold for recipients included in genesis state\n     * @param _genesisBlock Block number of genesis - used to determine which ETH accounts are included in the genesis state\n     * @param _callerAllocationStartBlock Start block where a third party caller (not the recipient) can generate and split the allocation with the recipient\n     * @param _callerAllocationEndBlock From this block onwards, a third party caller (not the recipient) can generate and claim the recipient's full allocation\n     */\n    function MerkleMine(\n        address _token,\n        bytes32 _genesisRoot,\n        uint256 _totalGenesisTokens,\n        uint256 _totalGenesisRecipients,\n        uint256 _balanceThreshold,\n        uint256 _genesisBlock,\n        uint256 _callerAllocationStartBlock,\n        uint256 _callerAllocationEndBlock\n    )\n        public\n    {\n        // Address of token contract must not be null\n        require(_token != address(0));\n        // Number of recipients must be non-zero\n        require(_totalGenesisRecipients > 0);\n        // Genesis block must be at or before the current block\n        require(_genesisBlock <= block.number);\n        // Start block for caller allocation must be after current block\n        require(_callerAllocationStartBlock > block.number);\n        // End block for caller allocation must be after caller allocation start block\n        require(_callerAllocationEndBlock > _callerAllocationStartBlock);\n\n        token = ERC20(_token);\n        genesisRoot = _genesisRoot;\n        totalGenesisTokens = _totalGenesisTokens;\n        totalGenesisRecipients = _totalGenesisRecipients;\n        tokensPerAllocation = _totalGenesisTokens.div(_totalGenesisRecipients);\n        balanceThreshold = _balanceThreshold;\n        genesisBlock = _genesisBlock;\n        callerAllocationStartBlock = _callerAllocationStartBlock;\n        callerAllocationEndBlock = _callerAllocationEndBlock;\n        callerAllocationPeriod = _callerAllocationEndBlock.sub(_callerAllocationStartBlock);\n    }\n\n    /**\n     * @dev Start the generation period - first checks that this contract's balance is equal to `totalGenesisTokens`\n     * The generation period must not already be started\n     */\n    function start() external isNotStarted {\n        // Check that this contract has a sufficient balance for the generation period\n        require(token.balanceOf(this) >= totalGenesisTokens);\n\n        started = true;\n    }\n\n    /**\n     * @dev Generate a recipient's token allocation. Generation period must be started. Starting from `callerAllocationStartBlock`\n     * a third party caller (not the recipient) can invoke this function to generate the recipient's token\n     * allocation and claim a percentage of it. The percentage of the allocation claimed by the\n     * third party caller is determined by how many blocks have elapsed since `callerAllocationStartBlock`.\n     * After `callerAllocationEndBlock`, a third party caller can claim the full allocation\n     * @param _recipient Recipient of token allocation\n     * @param _merkleProof Proof of recipient's inclusion in genesis state Merkle root\n     */\n    function generate(address _recipient, bytes _merkleProof) external isStarted notGenerated(_recipient) {\n        // Check the Merkle proof\n        bytes32 leaf = keccak256(_recipient);\n        // _merkleProof must prove inclusion of _recipient in the genesis state root\n        require(MerkleProof.verifyProof(_merkleProof, genesisRoot, leaf));\n\n        generated[_recipient] = true;\n\n        address caller = msg.sender;\n\n        if (caller == _recipient) {\n            // If the caller is the recipient, transfer the full allocation to the caller/recipient\n            require(token.transfer(_recipient, tokensPerAllocation));\n\n            Generate(_recipient, _recipient, tokensPerAllocation, 0, block.number);\n        } else {\n            // If the caller is not the recipient, the token allocation generation\n            // can only take place if we are in the caller allocation period\n            require(block.number >= callerAllocationStartBlock);\n\n            uint256 callerTokenAmount = callerTokenAmountAtBlock(block.number);\n            uint256 recipientTokenAmount = tokensPerAllocation.sub(callerTokenAmount);\n\n            if (callerTokenAmount > 0) {\n                require(token.transfer(caller, callerTokenAmount));\n            }\n\n            if (recipientTokenAmount > 0) {\n                require(token.transfer(_recipient, recipientTokenAmount));\n            }\n\n            Generate(_recipient, caller, recipientTokenAmount, callerTokenAmount, block.number);\n        }\n    }\n\n    /**\n     * @dev Return the amount of tokens claimable by a third party caller when generating a recipient's token allocation at a given block\n     * @param _blockNumber Block at which to compute the amount of tokens claimable by a third party caller\n     */\n    function callerTokenAmountAtBlock(uint256 _blockNumber) public view returns (uint256) {\n        if (_blockNumber < callerAllocationStartBlock) {\n            // If the block is before the start of the caller allocation period, the third party caller can claim nothing\n            return 0;\n        } else if (_blockNumber >= callerAllocationEndBlock) {\n            // If the block is at or after the end block of the caller allocation period, the third party caller can claim everything\n            return tokensPerAllocation;\n        } else {\n            // During the caller allocation period, the third party caller can claim an increasing percentage\n            // of the recipient's allocation based on a linear curve - as more blocks pass in the caller allocation\n            // period, the amount claimable by the third party caller increases linearly\n            uint256 blocksSinceCallerAllocationStartBlock = _blockNumber.sub(callerAllocationStartBlock);\n            return tokensPerAllocation.mul(blocksSinceCallerAllocationStartBlock).div(callerAllocationPeriod);\n        }\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6040516101008061099a8339810160405280805191906020018051919060200180519190602001805191906020018051919060200180519190602001805191906020018051915050600160a060020a038816151561006c57600080fd5b6000851161007957600080fd5b4383111561008657600080fd5b43821161009257600080fd5b81811161009e57600080fd5b60008054600160a060020a031916600160a060020a038a161790556001879055600286905560038590556100df868664010000000061011e81026108011704565b600455600584905560068390556007829055600881905561010d81836401000000006107b961013582021704565b600955506101479650505050505050565b600080828481151561012c57fe5b04949350505050565b60008282111561014157fe5b50900390565b610844806101566000396000f3006060604052600436106100c15763ffffffff60e060020a6000350416631f2698ab81146100c65780632c84bfa6146100ed5780634cdc9c631461011a57806362bea2951461013f57806378d8e17b1461015e578063ba88544614610171578063be9a655514610184578063c317377414610197578063c7033721146101aa578063de0cf58b146101bd578063dfc10ea8146101d0578063e4cfe9eb146101e3578063f61cd7de146101f6578063fc0c546a1461020c578063fda962d31461023b575b600080fd5b34156100d157600080fd5b6100d961024e565b604051901515815260200160405180910390f35b34156100f857600080fd5b61011860048035600160a060020a03169060248035908101910135610257565b005b341561012557600080fd5b61012d61064b565b60405190815260200160405180910390f35b341561014a57600080fd5b6100d9600160a060020a0360043516610651565b341561016957600080fd5b61012d610666565b341561017c57600080fd5b61012d61066c565b341561018f57600080fd5b610118610672565b34156101a257600080fd5b61012d610717565b34156101b557600080fd5b61012d61071d565b34156101c857600080fd5b61012d610723565b34156101db57600080fd5b61012d610729565b34156101ee57600080fd5b61012d61072f565b341561020157600080fd5b61012d600435610735565b341561021757600080fd5b61021f6107a4565b604051600160a060020a03909116815260200160405180910390f35b341561024657600080fd5b61012d6107b3565b600a5460ff1681565b600a5460009081908190819060ff16151561027157600080fd5b600160a060020a0387166000908152600b6020526040902054879060ff161561029957600080fd5b87604051600160a060020a03919091166c010000000000000000000000000281526014016040518091039020945073289ba1701c2f088cf0faf8b3705246331cb8a83963101f13e288886001548960006040516020015260405160e060020a63ffffffff871602815260248101839052604481018290526060600482019081526064820185905290819060840186868082843782019150509550505050505060206040518083038186803b151561034f57600080fd5b6102c65a03f4151561036057600080fd5b50505060405180519050151561037557600080fd5b600160a060020a038089166000818152600b60205260409020805460ff1916600117905533955090851614156104935760008054600454600160a060020a039091169163a9059cbb918b916040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561040a57600080fd5b6102c65a03f1151561041b57600080fd5b50505060405180519050151561043057600080fd5b87600160a060020a031688600160a060020a03167f5a85ed1ee645c51ffdeeb66ec8978efd1c03d5069a212315c8b430756d848d6960045460004360405180848152602001838152602001828152602001935050505060405180910390a3610641565b6007544310156104a257600080fd5b6104ab43610735565b6004549093506104c1908463ffffffff6107b916565b915060008311156105545760008054600160a060020a03169063a9059cbb90869086906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561052e57600080fd5b6102c65a03f1151561053f57600080fd5b50505060405180519050151561055457600080fd5b60008211156105e55760008054600160a060020a03169063a9059cbb908a9085906040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156105bf57600080fd5b6102c65a03f115156105d057600080fd5b5050506040518051905015156105e557600080fd5b83600160a060020a031688600160a060020a03167f5a85ed1ee645c51ffdeeb66ec8978efd1c03d5069a212315c8b430756d848d6984864360405180848152602001838152602001828152602001935050505060405180910390a35b5050505050505050565b60065481565b600b6020526000908152604090205460ff1681565b60025481565b60045481565b600a5460ff161561068257600080fd5b60025460008054600160a060020a0316906370a082319030906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156106e057600080fd5b6102c65a03f115156106f157600080fd5b505050604051805190501015151561070857600080fd5b600a805460ff19166001179055565b60055481565b60015481565b60075481565b60085481565b60095481565b60008060075483101561074b576000915061079e565b600854831061075e57600454915061079e565b60075461077290849063ffffffff6107b916565b905061079b60095461078f836004546107cb90919063ffffffff16565b9063ffffffff61080116565b91505b50919050565b600054600160a060020a031681565b60035481565b6000828211156107c557fe5b50900390565b6000808315156107de57600091506107fa565b508282028284828115156107ee57fe5b04146107f657fe5b8091505b5092915050565b600080828481151561080f57fe5b049493505050505600a165627a7a723058205d35076b8b058765077c4b44ba0e998f34f5dd270b87b2ee61142443fb50b8620029000000000000000000000000ecb81b96e169882b8d6276b87a19cb47efbd1c4a53f35a304a1e1e20d6648e09bb3073ccd44a5bf1638a01355897a71e801879f8000000000000000000000000000000000000000000053f54aa8434ecc3d00000000000000000000000000000000000000000000000000000000000000027a4b7000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000050538900000000000000000000000000000000000000000000000000000000005c0f1700000000000000000000000000000000000000000000000000000000008234b7",
  "constructorArguments": "000000000000000000000000ecb81b96e169882b8d6276b87a19cb47efbd1c4a53f35a304a1e1e20d6648e09bb3073ccd44a5bf1638a01355897a71e801879f8000000000000000000000000000000000000000000053f54aa8434ecc3d00000000000000000000000000000000000000000000000000000000000000027a4b7000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000050538900000000000000000000000000000000000000000000000000000000005c0f1700000000000000000000000000000000000000000000000000000000008234b7"
}