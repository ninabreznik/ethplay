{
  "address": "0x9c9dfc7d43eff21fff9183a860d391a856f0ecfe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bussiness",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-17\n*/\n\npragma solidity ^0.5.8;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\ncontract IERC721 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n}\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20BasicInterface {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    uint8 public decimals;\n}\n\ncontract Bussiness is Ownable {\n\n    using SafeMath for uint256;\n    address public ceoAddress = address(0xFce92D4163AA532AA096DE8a3C4fEf9f875Bc55F);\n    IERC721 public erc721Address = IERC721(0x5D00d312e171Be5342067c09BaE883f9Bcb2003B);\n    ERC20BasicInterface public hbwalletToken = ERC20BasicInterface(0xEc7ba74789694d0d03D458965370Dc7cF2FE75Ba);\n    uint256 public ETHFee = 0; // 25 = 2,5 %\n    uint256 public Percen = 1000;\n    uint256 public HBWALLETExchange = 21;\n    // cong thuc hbFee = ETHFee / Percen * HBWALLETExchange / 2\n    uint256 public limitETHFee = 0;\n    uint256 public limitHBWALLETFee = 0;\n    uint256 public hightLightFee = 30000000000000000;\n    constructor() public {}\n    struct Price {\n        address payable tokenOwner;\n        uint256 price;\n        uint256 fee;\n        uint256 hbfee;\n        bool isHightlight;\n    }\n\n    uint256[] public arrayTokenIdSale;\n    mapping(uint256 => Price) public prices;\n\n    /**\n     * @dev Throws if called by any account other than the ceo address.\n     */\n    modifier onlyCeoAddress() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n    modifier isOwnerOf(uint256 _tokenId) {\n        require(erc721Address.ownerOf(_tokenId) == msg.sender);\n        _;\n    }\n    // Move the last element to the deleted spot.\n    // Delete the last element, then correct the length.\n    function _burnArrayTokenIdSale(uint8 index)  internal {\n        if (index >= arrayTokenIdSale.length) return;\n\n        for (uint i = index; i<arrayTokenIdSale.length-1; i++){\n            arrayTokenIdSale[i] = arrayTokenIdSale[i+1];\n        }\n        delete arrayTokenIdSale[arrayTokenIdSale.length-1];\n        arrayTokenIdSale.length--;\n    }\n\n    function _burnArrayTokenIdSaleByArr(uint8[] memory arr) internal {\n        for(uint8 i; i<arr.length; i++){\n            _burnArrayTokenIdSale(i);\n        }\n\n    }\n    function ownerOf(uint256 _tokenId) public view returns (address){\n        return erc721Address.ownerOf(_tokenId);\n    }\n\n    function balanceOf() public view returns (uint256){\n        return address(this).balance;\n    }\n\n    function getApproved(uint256 _tokenId) public view returns (address){\n        return erc721Address.getApproved(_tokenId);\n    }\n\n    function setPrice(uint256 _tokenId, uint256 _ethPrice, uint256 _ethfee, uint _hbfee, bool _isHightLight) internal {\n        prices[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight);\n        arrayTokenIdSale.push(_tokenId);\n    }\n\n    function calPriceFeeEth(uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public view returns(uint256, uint256) {\n        uint256 ethfee;\n        uint256 _hightLightFee = 0;\n        uint256 ethNeed;\n        if (_isHightLight == 1 && (prices[_tokenId].price == 0 || !prices[_tokenId].isHightlight)) {\n            _hightLightFee = hightLightFee;\n        }\n        if (prices[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(prices[_tokenId].price).mul(ETHFee).div(Percen);\n            if(prices[_tokenId].price == 0) {\n                if (ethfee >= limitETHFee) {\n                    ethNeed = ethfee.add(_hightLightFee);\n                } else {\n                    ethNeed = limitETHFee.add(_hightLightFee);\n                }\n            }\n\n        }\n        return (ethNeed, _hightLightFee);\n    }\n    function setPriceFeeEth(uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public payable isOwnerOf(_tokenId) {\n        require(prices[_tokenId].price != _ethPrice);\n        uint256 ethfee;\n        uint256 _hightLightFee = 0;\n        if (_isHightLight == 1 && (prices[_tokenId].price == 0 || !prices[_tokenId].isHightlight)) {\n            _hightLightFee = hightLightFee;\n        }\n        if (prices[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(prices[_tokenId].price).mul(ETHFee).div(Percen);\n            if(prices[_tokenId].price == 0) {\n                if (ethfee >= limitETHFee) {\n                    require(msg.value == ethfee.add(_hightLightFee));\n                } else {\n                    require(msg.value == limitETHFee.add(_hightLightFee));\n                    ethfee = limitETHFee;\n                }\n            }\n            ethfee = ethfee.add(prices[_tokenId].fee);\n        } else ethfee = _ethPrice.mul(ETHFee).div(Percen);\n\n        setPrice(_tokenId, _ethPrice, ethfee, 0, _isHightLight == 1);\n    }\n    function calPriceFeeHBWALLET(uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public view returns (uint256){\n        uint fee;\n        uint256 ethfee;\n        uint _hightLightFee = 0;\n        uint hbNeed;\n        if (_isHightLight == 1 && (prices[_tokenId].price == 0 || !prices[_tokenId].isHightlight)) {\n            // _hightLightFee = hightLightFee * HBWALLETExchange / 2 / (10 ** 16);\n            _hightLightFee = hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n        }\n        if (prices[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(prices[_tokenId].price).mul(ETHFee).div(Percen);\n            fee = ethfee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n            // ethfee * HBWALLETExchange / 2 * (10 ** 2) / (10 ** 18)\n            if(prices[_tokenId].price == 0) {\n                if (fee >= limitHBWALLETFee) {\n                    hbNeed = fee.add(_hightLightFee);\n                } else {\n                    hbNeed = limitHBWALLETFee.add(_hightLightFee);\n                }\n            }\n        }\n        return hbNeed;\n    }\n    function setPriceFeeHBWALLET(uint256 _tokenId, uint256 _ethPrice, uint _isHightLight) public isOwnerOf(_tokenId) {\n        require(prices[_tokenId].price != _ethPrice);\n        uint fee;\n        uint256 ethfee;\n        uint _hightLightFee = 0;\n        if (_isHightLight == 1 && (prices[_tokenId].price == 0 || !prices[_tokenId].isHightlight)) {\n            _hightLightFee = hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n        }\n        if (prices[_tokenId].price < _ethPrice) {\n            ethfee = _ethPrice.sub(prices[_tokenId].price).mul(ETHFee).div(Percen);\n            fee = ethfee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n            // ethfee * HBWALLETExchange / 2 * (10 ** 2) / (10 ** 18)\n            if(prices[_tokenId].price == 0) {\n                if (fee >= limitHBWALLETFee) {\n                    require(hbwalletToken.transferFrom(msg.sender, address(this), fee.add(_hightLightFee)));\n                } else {\n                    require(hbwalletToken.transferFrom(msg.sender, address(this), limitHBWALLETFee.add(_hightLightFee)));\n                    fee = limitHBWALLETFee;\n                }\n            }\n            fee = fee.add(prices[_tokenId].hbfee);\n        } else {\n            ethfee = _ethPrice.mul(ETHFee).div(Percen);\n            fee = ethfee.mul(HBWALLETExchange).div(2).div(10 ** 16);\n        }\n\n        setPrice(_tokenId, _ethPrice, 0, fee, _isHightLight == 1);\n    }\n\n    function removePrice(uint256 _tokenId) public isOwnerOf(_tokenId) returns (uint256){\n        if (prices[_tokenId].fee > 0) msg.sender.transfer(prices[_tokenId].fee);\n        else if (prices[_tokenId].hbfee > 0) hbwalletToken.transfer(msg.sender, prices[_tokenId].hbfee);\n        resetPrice(_tokenId);\n        return prices[_tokenId].price;\n    }\n\n    function setFee(uint256 _ethFee, uint _HBWALLETExchange, uint256 _hightLightFee) public onlyOwner returns (uint256, uint, uint256){\n        require(_ethFee >= 0 && _HBWALLETExchange >= 1 && _hightLightFee >= 0);\n        ETHFee = _ethFee;\n        HBWALLETExchange = _HBWALLETExchange;\n        hightLightFee = _hightLightFee;\n        return (ETHFee, HBWALLETExchange, hightLightFee);\n    }\n\n    function setLimitFee(uint256 _ethlimitFee, uint _hbWalletlimitFee) public onlyOwner returns (uint256, uint){\n        require(_ethlimitFee >= 0 && _hbWalletlimitFee >= 0);\n        limitETHFee = _ethlimitFee;\n        limitHBWALLETFee = _hbWalletlimitFee;\n        return (limitETHFee, limitHBWALLETFee);\n    }\n\n    function _withdraw(uint256 amount, uint256 _amountHB) internal {\n        require(address(this).balance >= amount && hbwalletToken.balanceOf(address(this)) >= _amountHB);\n        if(amount > 0) {\n            msg.sender.transfer(amount);\n        }\n        if(_amountHB > 0) {\n            hbwalletToken.transfer(msg.sender, _amountHB);\n        }\n    }\n    function withdraw(uint256 amount, uint8 _amountHB) public onlyCeoAddress {\n        _withdraw(amount, _amountHB);\n    }\n    function cancelBussiness() public onlyCeoAddress {\n        uint256[] memory arr = arrayTokenIdSale;\n        uint length = arrayTokenIdSale.length;\n        for (uint i = 0; i < length; i++) {\n            if (prices[arr[i]].tokenOwner == erc721Address.ownerOf(arr[i])) {\n                if (prices[arr[i]].fee > 0) {\n                    uint256 eth = prices[arr[i]].fee;\n                    if(prices[arr[i]].isHightlight) eth = eth.add(hightLightFee);\n                    if(address(this).balance >= eth) {\n                        prices[arr[i]].tokenOwner.transfer(eth);\n                    }\n                }\n                else if (prices[arr[i]].hbfee > 0) {\n                    uint hb = prices[arr[i]].hbfee;\n                    if(prices[arr[i]].isHightlight) hb = hb.add(hightLightFee.mul(HBWALLETExchange).div(2).div(10 ** 16));\n                    if(hbwalletToken.balanceOf(address(this)) >= hb) {\n                        hbwalletToken.transfer(prices[arr[i]].tokenOwner, hb);\n                    }\n                }\n                resetPrice(arr[i]);\n            }\n        }\n        _withdraw(address(this).balance, hbwalletToken.balanceOf(address(this)));\n    }\n\n    function revenue() public view returns (uint256, uint){\n        uint256 ethfee = 0;\n        uint hbfee = 0;\n        for (uint i = 0; i < arrayTokenIdSale.length; i++) {\n            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {\n                if (prices[arrayTokenIdSale[i]].fee > 0) {\n                    ethfee = ethfee.add(prices[arrayTokenIdSale[i]].fee);\n                }\n                else if (prices[arrayTokenIdSale[i]].hbfee > 0) {\n                    hbfee = hbfee.add(prices[arrayTokenIdSale[i]].hbfee);\n                }\n            }\n        }\n        uint256 eth = address(this).balance.sub(ethfee);\n        uint hb = hbwalletToken.balanceOf(address(this)).sub(hbfee);\n        return (eth, hb);\n    }\n\n    function changeCeo(address _address) public onlyCeoAddress {\n        require(_address != address(0));\n        ceoAddress = _address;\n\n    }\n\n    function buy(uint256 tokenId) public payable {\n        require(getApproved(tokenId) == address(this));\n        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);\n        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);\n        prices[tokenId].tokenOwner.transfer(msg.value);\n        resetPrice(tokenId);\n    }\n\n    function buyWithoutCheckApproved(uint256 tokenId) public payable {\n        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);\n        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);\n        prices[tokenId].tokenOwner.transfer(msg.value);\n        resetPrice(tokenId);\n    }\n\n    function resetPrice(uint256 tokenId) private {\n        prices[tokenId] = Price(address(0), 0, 0, 0, false);\n        for (uint8 i = 0; i < arrayTokenIdSale.length; i++) {\n            if (arrayTokenIdSale[i] == tokenId) {\n                _burnArrayTokenIdSale(i);\n            }\n        }\n    }\n}",
  "bytecode": "608060405273fce92d4163aa532aa096de8a3c4fef9f875bc55f600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550735d00d312e171be5342067c09bae883f9bcb2003b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ec7ba74789694d0d03d458965370dc7cf2fe75ba600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006004556103e8600555601560065560006007556000600855666a94d74f43000060095534801561013457600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506134d6806101846000396000f3fe6080604052600436106101c25760003560e01c80638da5cb5b116100f7578063bc31c1c111610095578063ebc4c0cb11610064578063ebc4c0cb14610900578063f095f0811461096a578063f2fde38b14610995578063f91d4fd9146109e6576101c2565b8063bc31c1c1146107cf578063c8a616981461086a578063d96a094a146108bb578063db83b4c0146108e9576101c2565b806398208a83116100d157806398208a83146106a35780639cd0726a146106f25780639ed7a06814610741578063a453f5c11461076f576101c2565b80638da5cb5b146105c2578063903d429614610619578063966c17b814610661576101c2565b80632619ba7f116101645780635b65b9ab1161013e5780635b65b9ab146104805780636352211e146104f15780636adeecb11461056c578063722713f714610597576101c2565b80632619ba7f146103c05780633e9491a2146103eb5780635a79f63d1461041d576101c2565b80630eb0ef13116101a05780630eb0ef13146102c457806315171444146102ef5780631f3752a91461033e5780632352a86414610369576101c2565b8063081812fc146101c75780630864f448146102425780630a0f81681461026d575b600080fd5b3480156101d357600080fd5b50610200600480360360208110156101ea57600080fd5b8101908080359060200190929190505050610a3d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561024e57600080fd5b50610257610af4565b6040518082815260200191505060405180910390f35b34801561027957600080fd5b50610282610afa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102d057600080fd5b506102d9610b20565b6040518082815260200191505060405180910390f35b3480156102fb57600080fd5b5061033c6004803603606081101561031257600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050610b26565b005b34801561034a57600080fd5b506103536110dd565b6040518082815260200191505060405180910390f35b34801561037557600080fd5b5061037e6110e3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103cc57600080fd5b506103d5611109565b6040518082815260200191505060405180910390f35b3480156103f757600080fd5b5061040061110f565b604051808381526020018281526020019250505060405180910390f35b34801561042957600080fd5b5061046a6004803603606081101561044057600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506114a6565b6040518082815260200191505060405180910390f35b34801561048c57600080fd5b506104cd600480360360608110156104a357600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061166d565b60405180848152602001838152602001828152602001935050505060405180910390f35b3480156104fd57600080fd5b5061052a6004803603602081101561051457600080fd5b8101908080359060200190929190505050611720565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057857600080fd5b506105816117d7565b6040518082815260200191505060405180910390f35b3480156105a357600080fd5b506105ac6117dd565b6040518082815260200191505060405180910390f35b3480156105ce57600080fd5b506105d76117fc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561062557600080fd5b5061065f6004803603604081101561063c57600080fd5b8101908080359060200190929190803560ff169060200190929190505050611821565b005b6106a16004803603606081101561067757600080fd5b8101908080359060200190929190803590602001909291908035906020019092919050505061188c565b005b3480156106af57600080fd5b506106dc600480360360208110156106c657600080fd5b8101908080359060200190929190505050611b51565b6040518082815260200191505060405180910390f35b3480156106fe57600080fd5b5061072b6004803603602081101561071557600080fd5b8101908080359060200190929190505050611b72565b6040518082815260200191505060405180910390f35b61076d6004803603602081101561075757600080fd5b8101908080359060200190929190505050611e1f565b005b34801561077b57600080fd5b506107b26004803603604081101561079257600080fd5b810190808035906020019092919080359060200190929190505050612017565b604051808381526020018281526020019250505060405180910390f35b3480156107db57600080fd5b50610808600480360360208110156107f257600080fd5b81019080803590602001909291905050506120ad565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001821515151581526020019550505050505060405180910390f35b34801561087657600080fd5b506108b96004803603602081101561088d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612110565b005b6108e7600480360360208110156108d157600080fd5b81019080803590602001909291905050506121e8565b005b3480156108f557600080fd5b506108fe612420565b005b34801561090c57600080fd5b5061094d6004803603606081101561092357600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050612bbc565b604051808381526020018281526020019250505060405180910390f35b34801561097657600080fd5b5061097f612d03565b6040518082815260200191505060405180910390f35b3480156109a157600080fd5b506109e4600480360360208110156109b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d09565b005b3480156109f257600080fd5b506109fb612e5a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081812fc836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610ab257600080fd5b505afa158015610ac6573d6000803e3d6000fd5b505050506040513d6020811015610adc57600080fd5b81019080805190602001909291905050509050919050565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b823373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610bb157600080fd5b505afa158015610bc5573d6000803e3d6000fd5b505050506040513d6020811015610bdb57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614610c0c57600080fd5b82600b6000868152602001908152602001600020600101541415610c2f57600080fd5b6000806000809050600185148015610c8957506000600b6000898152602001908152602001600020600101541480610c885750600b600088815260200190815260200160002060040160009054906101000a900460ff16155b5b15610cd457610cd1662386f26fc10000610cc36002610cb5600654600954612e8090919063ffffffff16565b612eba90919063ffffffff16565b612eba90919063ffffffff16565b90505b85600b600089815260200190815260200160002060010154101561105457610d43600554610d35600454610d27600b60008d8152602001908152602001600020600101548b612ee090919063ffffffff16565b612e8090919063ffffffff16565b612eba90919063ffffffff16565b9150610d86662386f26fc10000610d786002610d6a60065487612e8090919063ffffffff16565b612eba90919063ffffffff16565b612eba90919063ffffffff16565b92506000600b6000898152602001908152602001600020600101541415611024576008548310610ee857600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330610e038588612f0090919063ffffffff16565b6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610e9f57600080fd5b505af1158015610eb3573d6000803e3d6000fd5b505050506040513d6020811015610ec957600080fd5b8101908080519060200190929190505050610ee357600080fd5b611023565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330610f3d85600854612f0090919063ffffffff16565b6040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610fd957600080fd5b505af1158015610fed573d6000803e3d6000fd5b505050506040513d602081101561100357600080fd5b810190808051906020019092919050505061101d57600080fd5b60085492505b5b61104d600b60008981526020019081526020016000206003015484612f0090919063ffffffff16565b92506110c3565b61107d60055461106f60045489612e8090919063ffffffff16565b612eba90919063ffffffff16565b91506110c0662386f26fc100006110b260026110a460065487612e8090919063ffffffff16565b612eba90919063ffffffff16565b612eba90919063ffffffff16565b92505b6110d4878760008660018a14612f1f565b50505050505050565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b6000806000809050600080905060008090505b600a8054905081101561137957600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e600a838154811061117a57fe5b90600052602060002001546040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d60208110156111e357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600b6000600a848154811061121b57fe5b9060005260206000200154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561136c576000600b6000600a848154811061128757fe5b906000526020600020015481526020019081526020016000206002015411156112f1576112ea600b6000600a84815481106112be57fe5b906000526020600020015481526020019081526020016000206002015484612f0090919063ffffffff16565b925061136b565b6000600b6000600a848154811061130457fe5b9060005260206000200154815260200190815260200160002060030154111561136a57611367600b6000600a848154811061133b57fe5b906000526020600020015481526020019081526020016000206003015483612f0090919063ffffffff16565b91505b5b5b8080600101915050611122565b5060006113a6833073ffffffffffffffffffffffffffffffffffffffff1631612ee090919063ffffffff16565b9050600061149683600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561144d57600080fd5b505afa158015611461573d6000803e3d6000fd5b505050506040513d602081101561147757600080fd5b8101908080519060200190929190505050612ee090919063ffffffff16565b9050818195509550505050509091565b60008060008060009050600060018614801561150457506000600b60008a81526020019081526020016000206001015414806115035750600b600089815260200190815260200160002060040160009054906101000a900460ff16155b5b1561154f5761154c662386f26fc1000061153e6002611530600654600954612e8090919063ffffffff16565b612eba90919063ffffffff16565b612eba90919063ffffffff16565b91505b86600b60008a815260200190815260200160002060010154101561165f576115be6005546115b06004546115a2600b60008e8152602001908152602001600020600101548c612ee090919063ffffffff16565b612e8090919063ffffffff16565b612eba90919063ffffffff16565b9250611601662386f26fc100006115f360026115e560065488612e8090919063ffffffff16565b612eba90919063ffffffff16565b612eba90919063ffffffff16565b93506000600b60008a815260200190815260200160002060010154141561165e5760085484106116455761163e8285612f0090919063ffffffff16565b905061165d565b61165a82600854612f0090919063ffffffff16565b90505b5b5b809450505050509392505050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116cb57600080fd5b600086101580156116dd575060018510155b80156116ea575060008410155b6116f357600080fd5b85600481905550846006819055508360098190555060045460065460095492509250925093509350939050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561179557600080fd5b505afa1580156117a9573d6000803e3d6000fd5b505050506040513d60208110156117bf57600080fd5b81019080805190602001909291905050509050919050565b60055481565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461187b57600080fd5b611888828260ff1661302c565b5050565b823373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561191757600080fd5b505afa15801561192b573d6000803e3d6000fd5b505050506040513d602081101561194157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461197257600080fd5b82600b600086815260200190815260200160002060010154141561199557600080fd5b600080600090506001841480156119ee57506000600b60008881526020019081526020016000206001015414806119ed5750600b600087815260200190815260200160002060040160009054906101000a900460ff16155b5b156119f95760095490505b84600b6000888152602001908152602001600020600101541015611b0c57611a68600554611a5a600454611a4c600b60008c8152602001908152602001600020600101548a612ee090919063ffffffff16565b612e8090919063ffffffff16565b612eba90919063ffffffff16565b91506000600b6000888152602001908152602001600020600101541415611adc576007548210611ab557611aa58183612f0090919063ffffffff16565b3414611ab057600080fd5b611adb565b611aca81600754612f0090919063ffffffff16565b3414611ad557600080fd5b60075491505b5b611b05600b60008881526020019081526020016000206002015483612f0090919063ffffffff16565b9150611b38565b611b35600554611b2760045488612e8090919063ffffffff16565b612eba90919063ffffffff16565b91505b611b49868684600060018914612f1f565b505050505050565b600a8181548110611b5e57fe5b906000526020600020016000915090505481565b6000813373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611bff57600080fd5b505afa158015611c13573d6000803e3d6000fd5b505050506040513d6020811015611c2957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611c5a57600080fd5b6000600b6000858152602001908152602001600020600201541115611cdb573373ffffffffffffffffffffffffffffffffffffffff166108fc600b6000868152602001908152602001600020600201549081150290604051600060405180830381858888f19350505050158015611cd5573d6000803e3d6000fd5b50611df7565b6000600b6000858152602001908152602001600020600301541115611df657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600b6000878152602001908152602001600020600301546040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611db957600080fd5b505af1158015611dcd573d6000803e3d6000fd5b505050506040513d6020811015611de357600080fd5b8101908080519060200190929190505050505b5b611e0083613279565b600b600084815260200190815260200160002060010154915050919050565b6000600b600083815260200190815260200160002060010154118015611e5a575034600b600083815260200190815260200160002060010154145b611e6357600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600b600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015611f7657600080fd5b505af1158015611f8a573d6000803e3d6000fd5b50505050600b600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561200a573d6000803e3d6000fd5b5061201481613279565b50565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461207357600080fd5b60008410158015612085575060008310155b61208e57600080fd5b8360078190555082600881905550600754600854915091509250929050565b600b6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040160009054906101000a900460ff16905085565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461216a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121a457600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3073ffffffffffffffffffffffffffffffffffffffff1661220882610a3d565b73ffffffffffffffffffffffffffffffffffffffff161461222857600080fd5b6000600b600083815260200190815260200160002060010154118015612263575034600b600083815260200190815260200160002060010154145b61226c57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd600b600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561237f57600080fd5b505af1158015612393573d6000803e3d6000fd5b50505050600b600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015612413573d6000803e3d6000fd5b5061241d81613279565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461247a57600080fd5b6060600a8054806020026020016040519081016040528092919081815260200182805480156124c857602002820191906000526020600020905b8154815260200190600101908083116124b4575b505050505090506000600a80549050905060008090505b81811015612abd57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e84838151811061253157fe5b60200260200101516040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561256d57600080fd5b505afa158015612581573d6000803e3d6000fd5b505050506040513d602081101561259757600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16600b60008584815181106125ce57fe5b6020026020010151815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612ab0576000600b600085848151811061263657fe5b6020026020010151815260200190815260200160002060020154111561278d576000600b600085848151811061266857fe5b60200260200101518152602001908152602001600020600201549050600b600085848151811061269457fe5b6020026020010151815260200190815260200160002060040160009054906101000a900460ff16156126d8576126d560095482612f0090919063ffffffff16565b90505b803073ffffffffffffffffffffffffffffffffffffffff16311061278757600b600085848151811061270657fe5b6020026020010151815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612785573d6000803e3d6000fd5b505b50612a93565b6000600b600085848151811061279f57fe5b60200260200101518152602001908152602001600020600301541115612a92576000600b60008584815181106127d157fe5b60200260200101518152602001908152602001600020600301549050600b60008584815181106127fd57fe5b6020026020010151815260200190815260200160002060040160009054906101000a900460ff16156128815761287e61286f662386f26fc100006128616002612853600654600954612e8090919063ffffffff16565b612eba90919063ffffffff16565b612eba90919063ffffffff16565b82612f0090919063ffffffff16565b90505b80600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561292157600080fd5b505afa158015612935573d6000803e3d6000fd5b505050506040513d602081101561294b57600080fd5b810190808051906020019092919050505010612a9057600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600b60008786815181106129af57fe5b6020026020010151815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612a5357600080fd5b505af1158015612a67573d6000803e3d6000fd5b505050506040513d6020811015612a7d57600080fd5b8101908080519060200190929190505050505b505b5b612aaf838281518110612aa257fe5b6020026020010151613279565b5b80806001019150506124df565b50612bb83073ffffffffffffffffffffffffffffffffffffffff1631600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612b7857600080fd5b505afa158015612b8c573d6000803e3d6000fd5b505050506040513d6020811015612ba257600080fd5b810190808051906020019092919050505061302c565b5050565b600080600080600090506000600186148015612c1a57506000600b60008a8152602001908152602001600020600101541480612c195750600b600089815260200190815260200160002060040160009054906101000a900460ff16155b5b15612c255760095491505b86600b60008a8152602001908152602001600020600101541015612cf257612c94600554612c86600454612c78600b60008e8152602001908152602001600020600101548c612ee090919063ffffffff16565b612e8090919063ffffffff16565b612eba90919063ffffffff16565b92506000600b60008a8152602001908152602001600020600101541415612cf1576007548310612cd857612cd18284612f0090919063ffffffff16565b9050612cf0565b612ced82600754612f0090919063ffffffff16565b90505b5b5b808294509450505050935093915050565b60075481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d6257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612d9c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080831415612e935760009050612eb4565b6000828402905082848281612ea457fe5b0414612eaf57600080fd5b809150505b92915050565b6000808211612ec857600080fd5b6000828481612ed357fe5b0490508091505092915050565b600082821115612eef57600080fd5b600082840390508091505092915050565b600080828401905083811015612f1557600080fd5b8091505092915050565b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001838152602001821515815250600b600087815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff021916908315150217905550905050600a8590806001815401808255809150509060018203906000526020600020016000909192909190915055505050505050565b813073ffffffffffffffffffffffffffffffffffffffff16311015801561312c575080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156130ee57600080fd5b505afa158015613102573d6000803e3d6000fd5b505050506040513d602081101561311857600080fd5b810190808051906020019092919050505010155b61313557600080fd5b6000821115613186573373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015613184573d6000803e3d6000fd5b505b600081111561327557600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561323857600080fd5b505af115801561324c573d6000803e3d6000fd5b505050506040513d602081101561326257600080fd5b8101908080519060200190929190505050505b5050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160001515815250600b600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555090505060008090505b600a805490508160ff1610156133a75781600a8260ff168154811061337f57fe5b9060005260206000200154141561339a57613399816133ab565b5b808060010191505061335e565b5050565b600a805490508160ff16106133bf57613456565b60008160ff1690505b6001600a805490500381101561341b57600a60018201815481106133e857fe5b9060005260206000200154600a828154811061340057fe5b906000526020600020018190555080806001019150506133c8565b50600a6001600a80549050038154811061343157fe5b9060005260206000200160009055600a8054809190600190036134549190613459565b505b50565b8154818355818111156134805781836000526020600020918201910161347f9190613485565b5b505050565b6134a791905b808211156134a357600081600090555060010161348b565b5090565b9056fea165627a7a723058204d26196edf34256a3b280b98d6040d2cc8b2d6fc490f227a6142269cefd46d230029"
}