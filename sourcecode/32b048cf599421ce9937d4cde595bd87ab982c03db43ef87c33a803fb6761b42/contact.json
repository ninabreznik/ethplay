{
  "address": "0xd7b4a7d2bb0ffa29a7d2f17cd6b7e176c48060a6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OathForge",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "{{\n  \"sources\": {\n    \"IERC721.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ncontract IERC721 is IERC165 {\\n\\n  event Transfer(\\n    address indexed from,\\n    address indexed to,\\n    uint256 indexed tokenId\\n  );\\n  event Approval(\\n    address indexed owner,\\n    address indexed approved,\\n    uint256 indexed tokenId\\n  );\\n  event ApprovalForAll(\\n    address indexed owner,\\n    address indexed operator,\\n    bool approved\\n  );\\n\\n  function balanceOf(address owner) public view returns (uint256 balance);\\n  function ownerOf(uint256 tokenId) public view returns (address owner);\\n\\n  function approve(address to, uint256 tokenId) public;\\n  function getApproved(uint256 tokenId)\\n    public view returns (address operator);\\n\\n  function setApprovalForAll(address operator, bool _approved) public;\\n  function isApprovedForAll(address owner, address operator)\\n    public view returns (bool);\\n\\n  function transferFrom(address from, address to, uint256 tokenId) public;\\n  function safeTransferFrom(address from, address to, uint256 tokenId)\\n    public;\\n\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes data\\n  )\\n    public;\\n}\\n\"\n    },\n    \"IERC721Receiver.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ncontract IERC721Receiver {\\n  /**\\n   * @notice Handle the receipt of an NFT\\n   * @dev The ERC721 smart contract calls this function on the recipient\\n   * after a `safeTransfer`. This function MUST return the function selector,\\n   * otherwise the caller will revert the transaction. The selector to be\\n   * returned can be obtained as `this.onERC721Received.selector`. This\\n   * function MAY throw to revert and reject the transfer.\\n   * Note: the ERC721 contract address is always the message sender.\\n   * @param operator The address which called `safeTransferFrom` function\\n   * @param from The address which previously owned the token\\n   * @param tokenId The NFT identifier which is being transferred\\n   * @param data Additional data with no specified format\\n   * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n   */\\n  function onERC721Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes data\\n  )\\n    public\\n    returns(bytes4);\\n}\\n\"\n    },\n    \"math/SafeMath.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, reverts on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, reverts on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a);\\n\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n  * reverts when dividing by zero.\\n  */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0);\\n    return a % b;\\n  }\\n}\\n\"\n    },\n    \"utils/Address.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n\\n  /**\\n   * Returns whether the target address is a contract\\n   * @dev This function will return false if invoked during the constructor of a contract,\\n   * as the code is not actually created until after the constructor finishes.\\n   * @param account address of the account to check\\n   * @return whether the target address is a contract\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    uint256 size;\\n    // XXX Currently there is no better way to check if there is a contract in an address\\n    // than to check the size of the code at that address.\\n    // See https://ethereum.stackexchange.com/a/14016/36603\\n    // for more details about how this works.\\n    // TODO Check this again before the Serenity release, because all addresses will be\\n    // contracts then.\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly { size := extcodesize(account) }\\n    return size > 0;\\n  }\\n\\n}\\n\"\n    },\n    \"introspection/IERC165.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/**\\n * @title IERC165\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\n */\\ninterface IERC165 {\\n\\n  /**\\n   * @notice Query if a contract implements an interface\\n   * @param interfaceId The interface identifier, as specified in ERC-165\\n   * @dev Interface identification is specified in ERC-165. This function\\n   * uses less than 30,000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    external\\n    view\\n    returns (bool);\\n}\\n\"\n    },\n    \"introspection/ERC165.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title ERC165\\n * @author Matt Condon (@shrugs)\\n * @dev Implements ERC165 using a lookup table.\\n */\\ncontract ERC165 is IERC165 {\\n\\n  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\\n  /**\\n   * 0x01ffc9a7 ===\\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\\n   */\\n\\n  /**\\n   * @dev a mapping of interface id to whether or not it's supported\\n   */\\n  mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n  /**\\n   * @dev A contract implementing SupportsInterfaceWithLookup\\n   * implement ERC165 itself\\n   */\\n  constructor()\\n    internal\\n  {\\n    _registerInterface(_InterfaceId_ERC165);\\n  }\\n\\n  /**\\n   * @dev implement supportsInterface(bytes4) using a lookup table\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    external\\n    view\\n    returns (bool)\\n  {\\n    return _supportedInterfaces[interfaceId];\\n  }\\n\\n  /**\\n   * @dev internal method for registering an interface\\n   */\\n  function _registerInterface(bytes4 interfaceId)\\n    internal\\n  {\\n    require(interfaceId != 0xffffffff);\\n    _supportedInterfaces[interfaceId] = true;\\n  }\\n}\\n\"\n    },\n    \"IERC721Metadata.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ncontract IERC721Metadata is IERC721 {\\n  function name() external view returns (string);\\n  function symbol() external view returns (string);\\n  function tokenURI(uint256 tokenId) external view returns (string);\\n}\\n\"\n    },\n    \"ERC721Metadata.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\nimport \\\"./ERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\ncontract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\\n  // Token name\\n  string private _name;\\n\\n  // Token symbol\\n  string private _symbol;\\n\\n  // Optional mapping for token URIs\\n  mapping(uint256 => string) private _tokenURIs;\\n\\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\\n  /**\\n   * 0x5b5e139f ===\\n   *   bytes4(keccak256('name()')) ^\\n   *   bytes4(keccak256('symbol()')) ^\\n   *   bytes4(keccak256('tokenURI(uint256)'))\\n   */\\n\\n  /**\\n   * @dev Constructor function\\n   */\\n  constructor(string name, string symbol) public {\\n    _name = name;\\n    _symbol = symbol;\\n\\n    // register the supported interfaces to conform to ERC721 via ERC165\\n    _registerInterface(InterfaceId_ERC721Metadata);\\n  }\\n\\n  /**\\n   * @dev Gets the token name\\n   * @return string representing the token name\\n   */\\n  function name() external view returns (string) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Gets the token symbol\\n   * @return string representing the token symbol\\n   */\\n  function symbol() external view returns (string) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns an URI for a given token ID\\n   * Throws if the token ID does not exist. May return an empty string.\\n   * @param tokenId uint256 ID of the token to query\\n   */\\n  function tokenURI(uint256 tokenId) external view returns (string) {\\n    require(_exists(tokenId));\\n    return _tokenURIs[tokenId];\\n  }\\n\\n  /**\\n   * @dev Internal function to set the token URI for a given token\\n   * Reverts if the token ID does not exist\\n   * @param tokenId uint256 ID of the token to set its URI\\n   * @param uri string URI to assign\\n   */\\n  function _setTokenURI(uint256 tokenId, string uri) internal {\\n    require(_exists(tokenId));\\n    _tokenURIs[tokenId] = uri;\\n  }\\n\\n  /**\\n   * @dev Internal function to burn a specific token\\n   * Reverts if the token does not exist\\n   * @param owner owner of the token to burn\\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\\n   */\\n  function _burn(address owner, uint256 tokenId) internal {\\n    super._burn(owner, tokenId);\\n\\n    // Clear metadata (if any)\\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\\n      delete _tokenURIs[tokenId];\\n    }\\n  }\\n}\\n\"\n    },\n    \"ERC721.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ncontract ERC721 is ERC165, IERC721 {\\n\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n  // Mapping from token ID to owner\\n  mapping (uint256 => address) private _tokenOwner;\\n\\n  // Mapping from token ID to approved address\\n  mapping (uint256 => address) private _tokenApprovals;\\n\\n  // Mapping from owner to number of owned token\\n  mapping (address => uint256) private _ownedTokensCount;\\n\\n  // Mapping from owner to operator approvals\\n  mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\\n  /*\\n   * 0x80ac58cd ===\\n   *   bytes4(keccak256('balanceOf(address)')) ^\\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\\n   *   bytes4(keccak256('approve(address,uint256)')) ^\\n   *   bytes4(keccak256('getApproved(uint256)')) ^\\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\\n   */\\n\\n  constructor()\\n    public\\n  {\\n    // register the supported interfaces to conform to ERC721 via ERC165\\n    _registerInterface(_InterfaceId_ERC721);\\n  }\\n\\n  /**\\n   * @dev Gets the balance of the specified address\\n   * @param owner address to query the balance of\\n   * @return uint256 representing the amount owned by the passed address\\n   */\\n  function balanceOf(address owner) public view returns (uint256) {\\n    require(owner != address(0));\\n    return _ownedTokensCount[owner];\\n  }\\n\\n  /**\\n   * @dev Gets the owner of the specified token ID\\n   * @param tokenId uint256 ID of the token to query the owner of\\n   * @return owner address currently marked as the owner of the given token ID\\n   */\\n  function ownerOf(uint256 tokenId) public view returns (address) {\\n    address owner = _tokenOwner[tokenId];\\n    require(owner != address(0));\\n    return owner;\\n  }\\n\\n  /**\\n   * @dev Approves another address to transfer the given token ID\\n   * The zero address indicates there is no approved address.\\n   * There can only be one approved address per token at a given time.\\n   * Can only be called by the token owner or an approved operator.\\n   * @param to address to be approved for the given token ID\\n   * @param tokenId uint256 ID of the token to be approved\\n   */\\n  function approve(address to, uint256 tokenId) public {\\n    address owner = ownerOf(tokenId);\\n    require(to != owner);\\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\\n\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(owner, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Gets the approved address for a token ID, or zero if no address set\\n   * Reverts if the token ID does not exist.\\n   * @param tokenId uint256 ID of the token to query the approval of\\n   * @return address currently approved for the given token ID\\n   */\\n  function getApproved(uint256 tokenId) public view returns (address) {\\n    require(_exists(tokenId));\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev Sets or unsets the approval of a given operator\\n   * An operator is allowed to transfer all tokens of the sender on their behalf\\n   * @param to operator address to set the approval\\n   * @param approved representing the status of the approval to be set\\n   */\\n  function setApprovalForAll(address to, bool approved) public {\\n    require(to != msg.sender);\\n    _operatorApprovals[msg.sender][to] = approved;\\n    emit ApprovalForAll(msg.sender, to, approved);\\n  }\\n\\n  /**\\n   * @dev Tells whether an operator is approved by a given owner\\n   * @param owner owner address which you want to query the approval of\\n   * @param operator operator address which you want to query the approval of\\n   * @return bool whether the given operator is approved by the given owner\\n   */\\n  function isApprovedForAll(\\n    address owner,\\n    address operator\\n  )\\n    public\\n    view\\n    returns (bool)\\n  {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev Transfers the ownership of a given token ID to another address\\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\\n   * Requires the msg sender to be the owner, approved, or operator\\n   * @param from current owner of the token\\n   * @param to address to receive the ownership of the given token ID\\n   * @param tokenId uint256 ID of the token to be transferred\\n  */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  )\\n    public\\n  {\\n    require(_isApprovedOrOwner(msg.sender, tokenId));\\n    require(to != address(0));\\n\\n    _clearApproval(from, tokenId);\\n    _removeTokenFrom(from, tokenId);\\n    _addTokenTo(to, tokenId);\\n\\n    emit Transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Safely transfers the ownership of a given token ID to another address\\n   * If the target address is a contract, it must implement `onERC721Received`,\\n   * which is called upon a safe transfer, and return the magic value\\n   * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n   * the transfer is reverted.\\n   *\\n   * Requires the msg sender to be the owner, approved, or operator\\n   * @param from current owner of the token\\n   * @param to address to receive the ownership of the given token ID\\n   * @param tokenId uint256 ID of the token to be transferred\\n  */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  )\\n    public\\n  {\\n    // solium-disable-next-line arg-overflow\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev Safely transfers the ownership of a given token ID to another address\\n   * If the target address is a contract, it must implement `onERC721Received`,\\n   * which is called upon a safe transfer, and return the magic value\\n   * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n   * the transfer is reverted.\\n   * Requires the msg sender to be the owner, approved, or operator\\n   * @param from current owner of the token\\n   * @param to address to receive the ownership of the given token ID\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes data to send along with a safe transfer check\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes _data\\n  )\\n    public\\n  {\\n    transferFrom(from, to, tokenId);\\n    // solium-disable-next-line arg-overflow\\n    require(_checkOnERC721Received(from, to, tokenId, _data));\\n  }\\n\\n  /**\\n   * @dev Returns whether the specified token exists\\n   * @param tokenId uint256 ID of the token to query the existence of\\n   * @return whether the token exists\\n   */\\n  function _exists(uint256 tokenId) internal view returns (bool) {\\n    address owner = _tokenOwner[tokenId];\\n    return owner != address(0);\\n  }\\n\\n  /**\\n   * @dev Returns whether the given spender can transfer a given token ID\\n   * @param spender address of the spender to query\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @return bool whether the msg.sender is approved for the given token ID,\\n   *  is an operator of the owner, or is the owner of the token\\n   */\\n  function _isApprovedOrOwner(\\n    address spender,\\n    uint256 tokenId\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    address owner = ownerOf(tokenId);\\n    // Disable solium check because of\\n    // https://github.com/duaraghav8/Solium/issues/175\\n    // solium-disable-next-line operator-whitespace\\n    return (\\n      spender == owner ||\\n      getApproved(tokenId) == spender ||\\n      isApprovedForAll(owner, spender)\\n    );\\n  }\\n\\n  /**\\n   * @dev Internal function to mint a new token\\n   * Reverts if the given token ID already exists\\n   * @param to The address that will own the minted token\\n   * @param tokenId uint256 ID of the token to be minted by the msg.sender\\n   */\\n  function _mint(address to, uint256 tokenId) internal {\\n    require(to != address(0));\\n    _addTokenTo(to, tokenId);\\n    emit Transfer(address(0), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to burn a specific token\\n   * Reverts if the token does not exist\\n   * @param tokenId uint256 ID of the token being burned by the msg.sender\\n   */\\n  function _burn(address owner, uint256 tokenId) internal {\\n    _clearApproval(owner, tokenId);\\n    _removeTokenFrom(owner, tokenId);\\n    emit Transfer(owner, address(0), tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to add a token ID to the list of a given address\\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\\n   * @param to address representing the new owner of the given token ID\\n   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n   */\\n  function _addTokenTo(address to, uint256 tokenId) internal {\\n    require(_tokenOwner[tokenId] == address(0));\\n    _tokenOwner[tokenId] = to;\\n    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\\n  }\\n\\n  /**\\n   * @dev Internal function to remove a token ID from the list of a given address\\n   * Note that this function is left internal to make ERC721Enumerable possible, but is not\\n   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\\n   * and doesn't clear approvals.\\n   * @param from address representing the previous owner of the given token ID\\n   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n   */\\n  function _removeTokenFrom(address from, uint256 tokenId) internal {\\n    require(ownerOf(tokenId) == from);\\n    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\\n    _tokenOwner[tokenId] = address(0);\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke `onERC721Received` on a target address\\n   * The call is not executed if the target address is not a contract\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param tokenId uint256 ID of the token to be transferred\\n   * @param _data bytes optional data to send along with the call\\n   * @return whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes _data\\n  )\\n    internal\\n    returns (bool)\\n  {\\n    if (!to.isContract()) {\\n      return true;\\n    }\\n    bytes4 retval = IERC721Receiver(to).onERC721Received(\\n      msg.sender, from, tokenId, _data);\\n    return (retval == _ERC721_RECEIVED);\\n  }\\n\\n  /**\\n   * @dev Private function to clear current approval of a given token ID\\n   * Reverts if the given address is not indeed the owner of the token\\n   * @param owner owner of the token\\n   * @param tokenId uint256 ID of the token to be transferred\\n   */\\n  function _clearApproval(address owner, uint256 tokenId) private {\\n    require(ownerOf(tokenId) == owner);\\n    if (_tokenApprovals[tokenId] != address(0)) {\\n      _tokenApprovals[tokenId] = address(0);\\n    }\\n  }\\n}\\n\"\n    },\n    \"ownership/Ownable.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n  address private _owner;\\n\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  /**\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n   * account.\\n   */\\n  constructor() internal {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n   * @return the address of the owner.\\n   */\\n  function owner() public view returns(address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(isOwner());\\n    _;\\n  }\\n\\n  /**\\n   * @return true if `msg.sender` is the owner of the contract.\\n   */\\n  function isOwner() public view returns(bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to relinquish control of the contract.\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n   * It will not be possible to call the functions with the `onlyOwner`\\n   * modifier anymore.\\n   */\\n  function renounceOwnership() public onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers control of the contract to a newOwner.\\n   * @param newOwner The address to transfer ownership to.\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0));\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\n    },\n    \"OathForge.sol\": {\n      \"content\": \"pragma solidity ^0.4.24;\\n\\nimport \\\"ERC721.sol\\\";\\nimport \\\"ERC721Metadata.sol\\\";\\nimport \\\"math/SafeMath.sol\\\";\\nimport \\\"ownership/Ownable.sol\\\";\\n\\n/// @title OathForge: NFT Registry\\n/// @author GuildCrypt\\ncontract OathForge is ERC721, ERC721Metadata, Ownable {\\n\\n  using SafeMath for uint256;\\n\\n  uint256 private _totalSupply;\\n  uint256 private _nextTokenId;\\n  mapping(uint256 => uint256) private _sunsetInitiatedAt;\\n  mapping(uint256 => uint256) private _sunsetLength;\\n  mapping(uint256 => uint256) private _redemptionCodeHashSubmittedAt;\\n  mapping(uint256 => bytes32) private _redemptionCodeHash;\\n  mapping(address => bool) private _isBlacklisted;\\n\\n  /// @param name The ERC721 Metadata name\\n  /// @param symbol The ERC721 Metadata symbol\\n  constructor(string name, string symbol) ERC721Metadata(name, symbol) public {}\\n\\n  /// @dev Emits when a sunset has been initiated\\n  /// @param tokenId The token id\\n  event SunsetInitiated(uint256 indexed tokenId);\\n\\n  /// @dev Emits when a redemption code hash has been submitted\\n  /// @param tokenId The token id\\n  /// @param redemptionCodeHash The redemption code hash\\n  event RedemptionCodeHashSubmitted(uint256 indexed tokenId, bytes32 redemptionCodeHash);\\n\\n  /// @dev Returns the total number of tokens (minted - burned) registered\\n  function totalSupply() external view returns(uint256){\\n    return _totalSupply;\\n  }\\n\\n  /// @dev Returns the token id of the next minted token\\n  function nextTokenId() external view returns(uint256){\\n    return _nextTokenId;\\n  }\\n\\n  /// @dev Returns if an address is blacklisted\\n  /// @param to The address to check\\n  function isBlacklisted(address to) external view returns(bool){\\n    return _isBlacklisted[to];\\n  }\\n\\n  /// @dev Returns the timestamp at which a token's sunset was initated. Returns 0 if no sunset has been initated.\\n  /// @param tokenId The token id\\n  function sunsetInitiatedAt(uint256 tokenId) external view returns(uint256){\\n    return _sunsetInitiatedAt[tokenId];\\n  }\\n\\n  /// @dev Returns the sunset length of a token\\n  /// @param tokenId The token id\\n  function sunsetLength(uint256 tokenId) external view returns(uint256){\\n    return _sunsetLength[tokenId];\\n  }\\n\\n  /// @dev Returns the redemption code hash submitted for a token\\n  /// @param tokenId The token id\\n  function redemptionCodeHash(uint256 tokenId) external view returns(bytes32){\\n    return _redemptionCodeHash[tokenId];\\n  }\\n\\n  /// @dev Returns the timestamp at which a redemption code hash was submitted\\n  /// @param tokenId The token id\\n  function redemptionCodeHashSubmittedAt(uint256 tokenId) external view returns(uint256){\\n    return _redemptionCodeHashSubmittedAt[tokenId];\\n  }\\n\\n  /// @dev Mint a token. Only `owner` may call this function.\\n  /// @param to The receiver of the token\\n  /// @param tokenURI The tokenURI of the the tokenURI\\n  /// @param __sunsetLength The length (in seconds) that a sunset period can last\\n  function mint(address to, string tokenURI, uint256 __sunsetLength) public onlyOwner {\\n    _mint(to, _nextTokenId);\\n    _sunsetLength[_nextTokenId] = __sunsetLength;\\n    _setTokenURI(_nextTokenId, tokenURI);\\n    _nextTokenId = _nextTokenId.add(1);\\n    _totalSupply = _totalSupply.add(1);\\n  }\\n\\n  /// @dev Initiate a sunset. Sets `sunsetInitiatedAt` to current timestamp. Only `owner` may call this function.\\n  /// @param tokenId The id of the token\\n  function initiateSunset(uint256 tokenId) external onlyOwner {\\n    require(tokenId < _nextTokenId);\\n    require(_sunsetInitiatedAt[tokenId] == 0);\\n    _sunsetInitiatedAt[tokenId] = now;\\n    emit SunsetInitiated(tokenId);\\n  }\\n\\n  /// @dev Submit a redemption code hash for a specific token. Burns the token. Sets `redemptionCodeHashSubmittedAt` to current timestamp. Decreases `totalSupply` by 1.\\n  /// @param tokenId The id of the token\\n  /// @param __redemptionCodeHash The redemption code hash\\n  function submitRedemptionCodeHash(uint256 tokenId, bytes32 __redemptionCodeHash) external {\\n    _burn(msg.sender, tokenId);\\n    _redemptionCodeHashSubmittedAt[tokenId] = now;\\n    _redemptionCodeHash[tokenId] = __redemptionCodeHash;\\n    _totalSupply = _totalSupply.sub(1);\\n    emit RedemptionCodeHashSubmitted(tokenId, __redemptionCodeHash);\\n  }\\n\\n  /// @dev Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg sender to be the owner, approved, or operator\\n  /// @param from current owner of the token\\n  /// @param to address to receive the ownership of the given token ID\\n  /// @param tokenId uint256 ID of the token to be transferred\\n  function transferFrom(address from, address to, uint256 tokenId) public {\\n    require(!_isBlacklisted[to]);\\n    if (_sunsetInitiatedAt[tokenId] > 0) {\\n      require(now <= _sunsetInitiatedAt[tokenId].add(_sunsetLength[tokenId]));\\n    }\\n    super.transferFrom(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Approves another address to transfer the given token ID\\n   * The zero address indicates there is no approved address.\\n   * There can only be one approved address per token at a given time.\\n   * Can only be called by the token owner or an approved operator.\\n   * @param to address to be approved for the given token ID\\n   * @param tokenId uint256 ID of the token to be approved\\n   */\\n  function approve(address to, uint256 tokenId) public {\\n    require(!_isBlacklisted[to]);\\n    super.approve(to, tokenId);\\n  }\\n\\n  /**\\n    * @dev Sets or unsets the approval of a given operator\\n    * An operator is allowed to transfer all tokens of the sender on their behalf\\n    * @param to operator address to set the approval\\n    * @param approved representing the status of the approval to be set\\n    */\\n  function setApprovalForAll(address to, bool approved) public {\\n    require(!_isBlacklisted[to]);\\n    super.setApprovalForAll(to, approved);\\n  }\\n\\n  /// @dev Set `tokenUri`. Only `owner` may do this.\\n  /// @param tokenId The id of the token\\n  /// @param tokenURI The token URI\\n  function setTokenURI(uint256 tokenId, string tokenURI) external onlyOwner {\\n    _setTokenURI(tokenId, tokenURI);\\n  }\\n\\n  /// @dev Set if an address is blacklisted\\n  /// @param to The address to change\\n  /// @param __isBlacklisted True if the address should be blacklisted, false otherwise\\n  function setIsBlacklisted(address to, bool __isBlacklisted) external onlyOwner {\\n    _isBlacklisted[to] = __isBlacklisted;\\n  }\\n\\n}\\n\"\n    }\n  },\n  \"language\": \"Solidity\",\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"abi\"\n        ]\n      }\n    }\n  }\n}}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"sunsetInitiatedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"sunsetLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"initiateSunset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"__isBlacklisted\",\"type\":\"bool\"}],\"name\":\"setIsBlacklisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenURI\",\"type\":\"string\"},{\"name\":\"__sunsetLength\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"__redemptionCodeHash\",\"type\":\"bytes32\"}],\"name\":\"submitRedemptionCodeHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redemptionCodeHashSubmittedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redemptionCodeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"SunsetInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"redemptionCodeHash\",\"type\":\"bytes32\"}],\"name\":\"RedemptionCodeHashSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506040516200179e3803806200179e833981016040528051602082015190820191018181620000697f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000062000153810204565b6200009d7f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000062000153810204565b8151620000b2906005906020850190620001c0565b508051620000c8906006906020840190620001c0565b50620000fd7f5b5e139f0000000000000000000000000000000000000000000000000000000064010000000062000153810204565b505060088054600160a060020a031916331790819055604051600160a060020a0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3505062000265565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200018357600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020357805160ff191683800117855562000233565b8280016001018555821562000233579182015b828111156200023357825182559160200191906001019062000216565b506200024192915062000245565b5090565b6200026291905b808211156200024157600081556001016200024c565b90565b61152980620002756000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461017957806306fdde03146101c4578063081812fc1461024e578063095ea7b314610282578063162094c4146102a857806318160ddd146102cc578063205f2367146102f357806323b872dd1461030b57806342842e0e146103355780636352211e1461035f57806370a0823114610377578063715018a61461039857806375794a3c146103ad5780637f267355146103c25780638da5cb5b146103da5780638e0f8e76146103ef5780638f32d59b1461040757806395d89b411461041c578063a0e3849214610431578063a22cb46514610457578063b88d4fde1461047d578063ba7aef43146104ec578063c87b56dd14610555578063e985e9c51461056d578063f047d34014610594578063f1c744db146105af578063f2fde38b146105c7578063fd68df8f146105e8578063fe575a8714610600575b600080fd5b34801561018557600080fd5b506101b07bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610621565b604080519115158252519081900360200190f35b3480156101d057600080fd5b506101d9610655565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102135781810151838201526020016101fb565b50505050905090810190601f1680156102405780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025a57600080fd5b506102666004356106ec565b60408051600160a060020a039092168252519081900360200190f35b34801561028e57600080fd5b506102a6600160a060020a036004351660243561071e565b005b3480156102b457600080fd5b506102a6600480359060248035908101910135610752565b3480156102d857600080fd5b506102e16107a4565b60408051918252519081900360200190f35b3480156102ff57600080fd5b506102e16004356107aa565b34801561031757600080fd5b506102a6600160a060020a03600435811690602435166044356107bc565b34801561034157600080fd5b506102a6600160a060020a0360043581169060243516604435610838565b34801561036b57600080fd5b50610266600435610854565b34801561038357600080fd5b506102e1600160a060020a036004351661087e565b3480156103a457600080fd5b506102a66108b1565b3480156103b957600080fd5b506102e161091b565b3480156103ce57600080fd5b506102e1600435610921565b3480156103e657600080fd5b50610266610933565b3480156103fb57600080fd5b506102a6600435610942565b34801561041357600080fd5b506101b06109b7565b34801561042857600080fd5b506101d96109c8565b34801561043d57600080fd5b506102a6600160a060020a03600435166024351515610a29565b34801561046357600080fd5b506102a6600160a060020a03600435166024351515610a67565b34801561048957600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102a694600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750610a979650505050505050565b3480156104f857600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102a6958335600160a060020a03169536956044949193909101919081908401838280828437509497505093359450610abf9350505050565b34801561056157600080fd5b506101d9600435610b31565b34801561057957600080fd5b506101b0600160a060020a0360043581169060243516610be6565b3480156105a057600080fd5b506102a6600435602435610c14565b3480156105bb57600080fd5b506102e1600435610c8d565b3480156105d357600080fd5b506102a6600160a060020a0360043516610c9f565b3480156105f457600080fd5b506102e1600435610cbe565b34801561060c57600080fd5b506101b0600160a060020a0360043516610cd0565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106e15780601f106106b6576101008083540402835291602001916106e1565b820191906000526020600020905b8154815290600101906020018083116106c457829003601f168201915b505050505090505b90565b60006106f782610cee565b151561070257600080fd5b50600090815260026020526040902054600160a060020a031690565b600160a060020a0382166000908152600f602052604090205460ff161561074457600080fd5b61074e8282610d0b565b5050565b61075a6109b7565b151561076557600080fd5b61079f8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843750610dc1945050505050565b505050565b60095490565b6000908152600b602052604090205490565b600160a060020a0382166000908152600f602052604090205460ff16156107e257600080fd5b6000818152600b6020526040812054111561082d576000818152600c6020908152604080832054600b909252909120546108219163ffffffff610df416565b42111561082d57600080fd5b61079f838383610e0d565b61079f8383836020604051908101604052806000815250610a97565b600081815260016020526040812054600160a060020a031680151561087857600080fd5b92915050565b6000600160a060020a038216151561089557600080fd5b50600160a060020a031660009081526003602052604090205490565b6108b96109b7565b15156108c457600080fd5b600854604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36008805473ffffffffffffffffffffffffffffffffffffffff19169055565b600a5490565b6000908152600c602052604090205490565b600854600160a060020a031690565b61094a6109b7565b151561095557600080fd5b600a54811061096357600080fd5b6000818152600b60205260409020541561097c57600080fd5b6000818152600b60205260408082204290555182917f5b4581c5cf2ee35f18b3324e5fc196753fd9d0d59e7428651242044ce77f304191a250565b600854600160a060020a0316331490565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106e15780601f106106b6576101008083540402835291602001916106e1565b610a316109b7565b1515610a3c57600080fd5b600160a060020a03919091166000908152600f60205260409020805460ff1916911515919091179055565b600160a060020a0382166000908152600f602052604090205460ff1615610a8d57600080fd5b61074e8282610e9b565b610aa28484846107bc565b610aae84848484610f1f565b1515610ab957600080fd5b50505050565b610ac76109b7565b1515610ad257600080fd5b610ade83600a546110a1565b600a80546000908152600c6020526040902082905554610afe9083610dc1565b600a54610b1290600163ffffffff610df416565b600a55600954610b2990600163ffffffff610df416565b600955505050565b6060610b3c82610cee565b1515610b4757600080fd5b60008281526007602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610bda5780601f10610baf57610100808354040283529160200191610bda565b820191906000526020600020905b815481529060010190602001808311610bbd57829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b610c1e33836110fc565b6000828152600d60209081526040808320429055600e9091529020819055600954610c5090600163ffffffff61114416565b60095560408051828152905183917f6456afd40b2dfdc87d54958d4f8036f0f1c2a994e5dcacf6f308960dc67a6997919081900360200190a25050565b6000908152600d602052604090205490565b610ca76109b7565b1515610cb257600080fd5b610cbb8161115b565b50565b6000908152600e602052604090205490565b600160a060020a03166000908152600f602052604090205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b6000610d1682610854565b9050600160a060020a038381169082161415610d3157600080fd5b33600160a060020a0382161480610d4d5750610d4d8133610be6565b1515610d5857600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610dca82610cee565b1515610dd557600080fd5b6000828152600760209081526040909120825161079f92840190611425565b600082820183811015610e0657600080fd5b9392505050565b610e1733826111d9565b1515610e2257600080fd5b600160a060020a0382161515610e3757600080fd5b610e418382611238565b610e4b83826112a7565b610e55828261133d565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600160a060020a038216331415610eb157600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600080610f3485600160a060020a03166113cd565b1515610f435760019150611098565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015610fd6578181015183820152602001610fbe565b50505050905090810190601f1680156110035780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561102557600080fd5b505af1158015611039573d6000803e3d6000fd5b505050506040513d602081101561104f57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600160a060020a03821615156110b657600080fd5b6110c0828261133d565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b61110682826113d5565b600081815260076020526040902054600260001961010060018416150201909116041561074e57600081815260076020526040812061074e916114a3565b6000808383111561115457600080fd5b5050900390565b600160a060020a038116151561117057600080fd5b600854604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000806111e583610854565b905080600160a060020a031684600160a060020a03161480611220575083600160a060020a0316611215846106ec565b600160a060020a0316145b8061123057506112308185610be6565b949350505050565b81600160a060020a031661124b82610854565b600160a060020a03161461125e57600080fd5b600081815260026020526040902054600160a060020a03161561074e576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905550565b81600160a060020a03166112ba82610854565b600160a060020a0316146112cd57600080fd5b600160a060020a0382166000908152600360205260409020546112f790600163ffffffff61114416565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260016020526040902054600160a060020a03161561135f57600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915584526003909152909120546113ad91610df4565b600160a060020a0390921660009081526003602052604090209190915550565b6000903b1190565b6113df8282611238565b6113e982826112a7565b6040518190600090600160a060020a038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061146657805160ff1916838001178555611493565b82800160010185558215611493579182015b82811115611493578251825591602001919060010190611478565b5061149f9291506114e3565b5090565b50805460018160011615610100020316600290046000825580601f106114c95750610cbb565b601f016020900490600052602060002090810190610cbb91905b6106e991905b8082111561149f57600081556001016114e95600a165627a7a72305820a61fc15b682e69aaaee06be7bea0fe72c8d379b5bfab42aacbf3f89c3ba2b08a002900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a4775696c6443727970740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024743000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a4775696c6443727970740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024743000000000000000000000000000000000000000000000000000000000000"
}