{
  "address": "0x6704ba24b8640bccee6bf2fd276a6a1b8edf4ade",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ERC20Impl",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-10\n*/\n\npragma solidity ^0.4.21;\n\n/** @title  A contract for generating unique identifiers\n  *\n  * @notice  A contract that provides a identifier generation scheme,\n  * guaranteeing uniqueness across all contracts that inherit from it,\n  * as well as unpredictability of future identifiers.\n  *\n  * @dev  This contract is intended to be inherited by any contract that\n  * implements the callback software pattern for cooperative custodianship.\n  *\n  * @author  Gemini Trust Company, LLC\n  */\ncontract LockRequestable {\n\n    // MEMBERS\n    /// @notice  the count of all invocations of `generateLockId`.\n    uint256 public lockRequestCount;\n\n    // CONSTRUCTOR\n    function LockRequestable() public {\n        lockRequestCount = 0;\n    }\n\n    // FUNCTIONS\n    /** @notice  Returns a fresh unique identifier.\n      *\n      * @dev the generation scheme uses three components.\n      * First, the blockhash of the previous block.\n      * Second, the deployed address.\n      * Third, the next value of the counter.\n      * This ensure that identifiers are unique across all contracts\n      * following this scheme, and that future identifiers are\n      * unpredictable.\n      *\n      * @return a 32-byte unique identifier.\n      */\n    function generateLockId() internal returns (bytes32 lockId) {\n        return keccak256(block.blockhash(block.number - 1), address(this), ++lockRequestCount);\n    }\n}\n\n\n/** @title  A contract to inherit upgradeable custodianship.\n  *\n  * @notice  A contract that provides re-usable code for upgradeable\n  * custodianship. That custodian may be an account or another contract.\n  *\n  * @dev  This contract is intended to be inherited by any contract\n  * requiring a custodian to control some aspect of its functionality.\n  * This contract provides the mechanism for that custodianship to be\n  * passed from one custodian to the next.\n  *\n  * @author  Gemini Trust Company, LLC\n  */\ncontract CustodianUpgradeable is LockRequestable {\n\n    // TYPES\n    /// @dev  The struct type for pending custodian changes.\n    struct CustodianChangeRequest {\n        address proposedNew;\n    }\n\n    // MEMBERS\n    /// @dev  The address of the account or contract that acts as the custodian.\n    address public custodian;\n\n    /// @dev  The map of lock ids to pending custodian changes.\n    mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\n\n    // CONSTRUCTOR\n    function CustodianUpgradeable(\n        address _custodian\n    )\n      LockRequestable()\n      public\n    {\n        custodian = _custodian;\n    }\n\n    // MODIFIERS\n    modifier onlyCustodian {\n        require(msg.sender == custodian);\n        _;\n    }\n\n    // PUBLIC FUNCTIONS\n    // (UPGRADE)\n\n    /** @notice  Requests a change of the custodian associated with this contract.\n      *\n      * @dev  Returns a unique lock id associated with the request.\n      * Anyone can call this function, but confirming the request is authorized\n      * by the custodian.\n      *\n      * @param  _proposedCustodian  The address of the new custodian.\n      * @return  lockId  A unique identifier for this request.\n      */\n    function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\n        require(_proposedCustodian != address(0));\n\n        lockId = generateLockId();\n\n        custodianChangeReqs[lockId] = CustodianChangeRequest({\n            proposedNew: _proposedCustodian\n        });\n\n        emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\n    }\n\n    /** @notice  Confirms a pending change of the custodian associated with this contract.\n      *\n      * @dev  When called by the current custodian with a lock id associated with a\n      * pending custodian change, the `address custodian` member will be updated with the\n      * requested address.\n      *\n      * @param  _lockId  The identifier of a pending change request.\n      */\n    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\n        custodian = getCustodianChangeReq(_lockId);\n\n        delete custodianChangeReqs[_lockId];\n\n        emit CustodianChangeConfirmed(_lockId, custodian);\n    }\n\n    // PRIVATE FUNCTIONS\n    function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\n        CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\n\n        // reject ‘null’ results from the map lookup\n        // this can only be the case if an unknown `_lockId` is received\n        require(changeRequest.proposedNew != 0);\n\n        return changeRequest.proposedNew;\n    }\n\n    /// @dev  Emitted by successful `requestCustodianChange` calls.\n    event CustodianChangeRequested(\n        bytes32 _lockId,\n        address _msgSender,\n        address _proposedCustodian\n    );\n\n    /// @dev Emitted by successful `confirmCustodianChange` calls.\n    event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\n}\n\n\n/** @title  A contract to inherit upgradeable token implementations.\n  *\n  * @notice  A contract that provides re-usable code for upgradeable\n  * token implementations. It itself inherits from `CustodianUpgradable`\n  * as the upgrade process is controlled by the custodian.\n  *\n  * @dev  This contract is intended to be inherited by any contract\n  * requiring a reference to the active token implementation, either\n  * to delegate calls to it, or authorize calls from it. This contract\n  * provides the mechanism for that implementation to be be replaced,\n  * which constitutes an implementation upgrade.\n  *\n  * @author Gemini Trust Company, LLC\n  */\ncontract ERC20ImplUpgradeable is CustodianUpgradeable  {\n\n    // TYPES\n    /// @dev  The struct type for pending implementation changes.\n    struct ImplChangeRequest {\n        address proposedNew;\n    }\n\n    // MEMBERS\n    // @dev  The reference to the active token implementation.\n    ERC20Impl public erc20Impl;\n\n    /// @dev  The map of lock ids to pending implementation changes.\n    mapping (bytes32 => ImplChangeRequest) public implChangeReqs;\n\n    // CONSTRUCTOR\n    function ERC20ImplUpgradeable(address _custodian) CustodianUpgradeable(_custodian) public {\n        erc20Impl = ERC20Impl(0x0);\n    }\n\n    // MODIFIERS\n    modifier onlyImpl {\n        require(msg.sender == address(erc20Impl));\n        _;\n    }\n\n    // PUBLIC FUNCTIONS\n    // (UPGRADE)\n    /** @notice  Requests a change of the active implementation associated\n      * with this contract.\n      *\n      * @dev  Returns a unique lock id associated with the request.\n      * Anyone can call this function, but confirming the request is authorized\n      * by the custodian.\n      *\n      * @param  _proposedImpl  The address of the new active implementation.\n      * @return  lockId  A unique identifier for this request.\n      */\n    function requestImplChange(address _proposedImpl) public returns (bytes32 lockId) {\n        require(_proposedImpl != address(0));\n\n        lockId = generateLockId();\n\n        implChangeReqs[lockId] = ImplChangeRequest({\n            proposedNew: _proposedImpl\n        });\n\n        emit ImplChangeRequested(lockId, msg.sender, _proposedImpl);\n    }\n\n    /** @notice  Confirms a pending change of the active implementation\n      * associated with this contract.\n      *\n      * @dev  When called by the custodian with a lock id associated with a\n      * pending change, the `ERC20Impl erc20Impl` member will be updated\n      * with the requested address.\n      *\n      * @param  _lockId  The identifier of a pending change request.\n      */\n    function confirmImplChange(bytes32 _lockId) public onlyCustodian {\n        erc20Impl = getImplChangeReq(_lockId);\n\n        delete implChangeReqs[_lockId];\n\n        emit ImplChangeConfirmed(_lockId, address(erc20Impl));\n    }\n\n    // PRIVATE FUNCTIONS\n    function getImplChangeReq(bytes32 _lockId) private view returns (ERC20Impl _proposedNew) {\n        ImplChangeRequest storage changeRequest = implChangeReqs[_lockId];\n\n        // reject ‘null’ results from the map lookup\n        // this can only be the case if an unknown `_lockId` is received\n        require(changeRequest.proposedNew != address(0));\n\n        return ERC20Impl(changeRequest.proposedNew);\n    }\n\n    /// @dev  Emitted by successful `requestImplChange` calls.\n    event ImplChangeRequested(\n        bytes32 _lockId,\n        address _msgSender,\n        address _proposedImpl\n    );\n\n    /// @dev Emitted by successful `confirmImplChange` calls.\n    event ImplChangeConfirmed(bytes32 _lockId, address _newImpl);\n}\n\n\ncontract ERC20Interface {\n  // METHODS\n\n  // NOTE:\n  //   public getter functions are not currently recognised as an\n  //   implementation of the matching abstract function by the compiler.\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#name\n  // function name() public view returns (string);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#symbol\n  // function symbol() public view returns (string);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\n  // function decimals() public view returns (uint8);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#totalsupply\n  function totalSupply() public view returns (uint256);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#balanceof\n  function balanceOf(address _owner) public view returns (uint256 balance);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer\n  function transfer(address _to, uint256 _value) public returns (bool success);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transferfrom\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approve\n  function approve(address _spender, uint256 _value) public returns (bool success);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#allowance\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n  // EVENTS\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer-1\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approval\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n/** @title  Public interface to ERC20 compliant token.\n  *\n  * @notice  This contract is a permanent entry point to an ERC20 compliant\n  * system of contracts.\n  *\n  * @dev  This contract contains no business logic and instead\n  * delegates to an instance of ERC20Impl. This contract also has no storage\n  * that constitutes the operational state of the token. This contract is\n  * upgradeable in the sense that the `custodian` can update the\n  * `erc20Impl` address, thus redirecting the delegation of business logic.\n  * The `custodian` is also authorized to pass custodianship.\n  *\n  * @author  Gemini Trust Company, LLC\n  */\ncontract ERC20Proxy is ERC20Interface, ERC20ImplUpgradeable {\n\n    // MEMBERS\n    /// @notice  Returns the name of the token.\n    string public name;\n\n    /// @notice  Returns the symbol of the token.\n    string public symbol;\n\n    /// @notice  Returns the number of decimals the token uses.\n    uint8 public decimals;\n\n    // CONSTRUCTOR\n    function ERC20Proxy(\n        string _name,\n        string _symbol,\n        uint8 _decimals,\n        address _custodian\n    )\n        ERC20ImplUpgradeable(_custodian)\n        public\n    {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    // PUBLIC FUNCTIONS\n    // (ERC20Interface)\n    /** @notice  Returns the total token supply.\n      *\n      * @return  the total token supply.\n      */\n    function totalSupply() public view returns (uint256) {\n        return erc20Impl.totalSupply();\n    }\n\n    /** @notice  Returns the account balance of another account with address\n      * `_owner`.\n      *\n      * @return  balance  the balance of account with address `_owner`.\n      */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return erc20Impl.balanceOf(_owner);\n    }\n\n    /** @dev Internal use only.\n      */\n    function emitTransfer(address _from, address _to, uint256 _value) public onlyImpl {\n        emit Transfer(_from, _to, _value);\n    }\n\n    /** @notice  Transfers `_value` amount of tokens to address `_to`.\n      *\n      * @dev Will fire the `Transfer` event. Will revert if the `_from`\n      * account balance does not have enough tokens to spend.\n      *\n      * @return  success  true if transfer completes.\n      */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        return erc20Impl.transferWithSender(msg.sender, _to, _value);\n    }\n\n    /** @notice  Transfers `_value` amount of tokens from address `_from`\n      * to address `_to`.\n      *\n      * @dev  Will fire the `Transfer` event. Will revert unless the `_from`\n      * account has deliberately authorized the sender of the message\n      * via some mechanism.\n      *\n      * @return  success  true if transfer completes.\n      */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);\n    }\n\n    /** @dev Internal use only.\n      */\n    function emitApproval(address _owner, address _spender, uint256 _value) public onlyImpl {\n        emit Approval(_owner, _spender, _value);\n    }\n\n    /** @notice  Allows `_spender` to withdraw from your account multiple times,\n      * up to the `_value` amount. If this function is called again it\n      * overwrites the current allowance with _value.\n      *\n      * @dev  Will fire the `Approval` event.\n      *\n      * @return  success  true if approval completes.\n      */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        return erc20Impl.approveWithSender(msg.sender, _spender, _value);\n    }\n\n    /** @notice Increases the amount `_spender` is allowed to withdraw from\n      * your account.\n      * This function is implemented to avoid the race condition in standard\n      * ERC20 contracts surrounding the `approve` method.\n      *\n      * @dev  Will fire the `Approval` event. This function should be used instead of\n      * `approve`.\n      *\n      * @return  success  true if approval completes.\n      */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\n        return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);\n    }\n\n    /** @notice  Decreases the amount `_spender` is allowed to withdraw from\n      * your account. This function is implemented to avoid the race\n      * condition in standard ERC20 contracts surrounding the `approve` method.\n      *\n      * @dev  Will fire the `Approval` event. This function should be used\n      * instead of `approve`.\n      *\n      * @return  success  true if approval completes.\n      */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\n        return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);\n    }\n\n    /** @notice  Returns how much `_spender` is currently allowed to spend from\n      * `_owner`'s balance.\n      *\n      * @return  remaining  the remaining allowance.\n      */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return erc20Impl.allowance(_owner, _spender);\n    }\n}\n\n\n/** @title  ERC20 compliant token intermediary contract holding core logic.\n  *\n  * @notice  This contract serves as an intermediary between the exposed ERC20\n  * interface in ERC20Proxy and the store of balances in ERC20Store. This\n  * contract contains core logic that the proxy can delegate to\n  * and that the store is called by.\n  *\n  * @dev  This contract contains the core logic to implement the\n  * ERC20 specification as well as several extensions.\n  * 1. Changes to the token supply.\n  * 2. Batched transfers.\n  * 3. Relative changes to spending approvals.\n  * 4. Delegated transfer control ('sweeping').\n  *\n  * @author  Gemini Trust Company, LLC\n  */\ncontract ERC20Impl is CustodianUpgradeable {\n\n    // TYPES\n    /// @dev  The struct type for pending increases to the token supply (print).\n    struct PendingPrint {\n        address receiver;\n        uint256 value;\n    }\n\n    // MEMBERS\n    /// @dev  The reference to the proxy.\n    ERC20Proxy public erc20Proxy;\n\n    /// @dev  The reference to the store.\n    ERC20Store public erc20Store;\n\n    /// @dev  The sole authorized caller of delegated transfer control ('sweeping').\n    address public sweeper;\n\n    /** @dev  The static message to be signed by an external account that\n      * signifies their permission to forward their balance to any arbitrary\n      * address. This is used to consolidate the control of all accounts\n      * backed by a shared keychain into the control of a single key.\n      * Initialized as the concatenation of the address of this contract\n      * and the word \"sweep\". This concatenation is done to prevent a replay\n      * attack in a subsequent contract, where the sweep message could\n      * potentially be replayed to re-enable sweeping ability.\n      */\n    bytes32 public sweepMsg;\n\n    /** @dev  The mapping that stores whether the address in question has\n      * enabled sweeping its contents to another account or not.\n      * If an address maps to \"true\", it has already enabled sweeping,\n      * and thus does not need to re-sign the `sweepMsg` to enact the sweep.\n      */\n    mapping (address => bool) public sweptSet;\n\n    /// @dev  The map of lock ids to pending token increases.\n    mapping (bytes32 => PendingPrint) public pendingPrintMap;\n\n    // CONSTRUCTOR\n    function ERC20Impl(\n          address _erc20Proxy,\n          address _erc20Store,\n          address _custodian,\n          address _sweeper\n    )\n        CustodianUpgradeable(_custodian)\n        public\n    {\n        require(_sweeper != 0);\n        erc20Proxy = ERC20Proxy(_erc20Proxy);\n        erc20Store = ERC20Store(_erc20Store);\n\n        sweeper = _sweeper;\n        sweepMsg = keccak256(address(this), \"sweep\");\n    }\n\n    // MODIFIERS\n    modifier onlyProxy {\n        require(msg.sender == address(erc20Proxy));\n        _;\n    }\n    modifier onlySweeper {\n        require(msg.sender == sweeper);\n        _;\n    }\n\n\n    /** @notice  Core logic of the ERC20 `approve` function.\n      *\n      * @dev  This function can only be called by the referenced proxy,\n      * which has an `approve` function.\n      * Every argument passed to that function as well as the original\n      * `msg.sender` gets passed to this function.\n      * NOTE: approvals for the zero address (unspendable) are disallowed.\n      *\n      * @param  _sender  The address initiating the approval in proxy.\n      */\n    function approveWithSender(\n        address _sender,\n        address _spender,\n        uint256 _value\n    )\n        public\n        onlyProxy\n        returns (bool success)\n    {\n        require(_spender != address(0)); // disallow unspendable approvals\n        erc20Store.setAllowance(_sender, _spender, _value);\n        erc20Proxy.emitApproval(_sender, _spender, _value);\n        return true;\n    }\n\n    /** @notice  Core logic of the `increaseApproval` function.\n      *\n      * @dev  This function can only be called by the referenced proxy,\n      * which has an `increaseApproval` function.\n      * Every argument passed to that function as well as the original\n      * `msg.sender` gets passed to this function.\n      * NOTE: approvals for the zero address (unspendable) are disallowed.\n      *\n      * @param  _sender  The address initiating the approval.\n      */\n    function increaseApprovalWithSender(\n        address _sender,\n        address _spender,\n        uint256 _addedValue\n    )\n        public\n        onlyProxy\n        returns (bool success)\n    {\n        require(_spender != address(0)); // disallow unspendable approvals\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\n        uint256 newAllowance = currentAllowance + _addedValue;\n\n        require(newAllowance >= currentAllowance);\n\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\n        return true;\n    }\n\n    /** @notice  Core logic of the `decreaseApproval` function.\n      *\n      * @dev  This function can only be called by the referenced proxy,\n      * which has a `decreaseApproval` function.\n      * Every argument passed to that function as well as the original\n      * `msg.sender` gets passed to this function.\n      * NOTE: approvals for the zero address (unspendable) are disallowed.\n      *\n      * @param  _sender  The address initiating the approval.\n      */\n    function decreaseApprovalWithSender(\n        address _sender,\n        address _spender,\n        uint256 _subtractedValue\n    )\n        public\n        onlyProxy\n        returns (bool success)\n    {\n        require(_spender != address(0)); // disallow unspendable approvals\n        uint256 currentAllowance = erc20Store.allowed(_sender, _spender);\n        uint256 newAllowance = currentAllowance - _subtractedValue;\n\n        require(newAllowance <= currentAllowance);\n\n        erc20Store.setAllowance(_sender, _spender, newAllowance);\n        erc20Proxy.emitApproval(_sender, _spender, newAllowance);\n        return true;\n    }\n\n    /** @notice  Requests an increase in the token supply, with the newly created\n      * tokens to be added to the balance of the specified account.\n      *\n      * @dev  Returns a unique lock id associated with the request.\n      * Anyone can call this function, but confirming the request is authorized\n      * by the custodian.\n      * NOTE: printing to the zero address is disallowed.\n      *\n      * @param  _receiver  The receiving address of the print, if confirmed.\n      * @param  _value  The number of tokens to add to the total supply and the\n      * balance of the receiving address, if confirmed.\n      *\n      * @return  lockId  A unique identifier for this request.\n      */\n    function requestPrint(address _receiver, uint256 _value) public returns (bytes32 lockId) {\n        require(_receiver != address(0));\n\n        lockId = generateLockId();\n\n        pendingPrintMap[lockId] = PendingPrint({\n            receiver: _receiver,\n            value: _value\n        });\n\n        emit PrintingLocked(lockId, _receiver, _value);\n    }\n\n    /** @notice  Confirms a pending increase in the token supply.\n      *\n      * @dev  When called by the custodian with a lock id associated with a\n      * pending increase, the amount requested to be printed in the print request\n      * is printed to the receiving address specified in that same request.\n      * NOTE: this function will not execute any print that would overflow the\n      * total supply, but it will not revert either.\n      *\n      * @param  _lockId  The identifier of a pending print request.\n      */\n    function confirmPrint(bytes32 _lockId) public onlyCustodian {\n        PendingPrint storage print = pendingPrintMap[_lockId];\n\n        // reject ‘null’ results from the map lookup\n        // this can only be the case if an unknown `_lockId` is received\n        address receiver = print.receiver;\n        require (receiver != address(0));\n        uint256 value = print.value;\n\n        delete pendingPrintMap[_lockId];\n\n        uint256 supply = erc20Store.totalSupply();\n        uint256 newSupply = supply + value;\n        if (newSupply >= supply) {\n          erc20Store.setTotalSupply(newSupply);\n          erc20Store.addBalance(receiver, value);\n\n          emit PrintingConfirmed(_lockId, receiver, value);\n          erc20Proxy.emitTransfer(address(0), receiver, value);\n        }\n    }\n\n    /** @notice  Burns the specified value from the sender's balance.\n      *\n      * @dev  Sender's balanced is subtracted by the amount they wish to burn.\n      *\n      * @param  _value  The amount to burn.\n      *\n      * @return  success  true if the burn succeeded.\n      */\n    function burn(uint256 _value) public returns (bool success) {\n        uint256 balanceOfSender = erc20Store.balances(msg.sender);\n        require(_value <= balanceOfSender);\n\n        erc20Store.setBalance(msg.sender, balanceOfSender - _value);\n        erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);\n\n        erc20Proxy.emitTransfer(msg.sender, address(0), _value);\n\n        return true;\n    }\n\n    /** @notice  A function for a sender to issue multiple transfers to multiple\n      * different addresses at once. This function is implemented for gas\n      * considerations when someone wishes to transfer, as one transaction is\n      * cheaper than issuing several distinct individual `transfer` transactions.\n      *\n      * @dev  By specifying a set of destination addresses and values, the\n      * sender can issue one transaction to transfer multiple amounts to\n      * distinct addresses, rather than issuing each as a separate\n      * transaction. The `_tos` and `_values` arrays must be equal length, and\n      * an index in one array corresponds to the same index in the other array\n      * (e.g. `_tos[0]` will receive `_values[0]`, `_tos[1]` will receive\n      * `_values[1]`, and so on.)\n      * NOTE: transfers to the zero address are disallowed.\n      *\n      * @param  _tos  The destination addresses to receive the transfers.\n      * @param  _values  The values for each destination address.\n      * @return  success  If transfers succeeded.\n      */\n    function batchTransfer(address[] _tos, uint256[] _values) public returns (bool success) {\n        require(_tos.length == _values.length);\n\n        uint256 numTransfers = _tos.length;\n        uint256 senderBalance = erc20Store.balances(msg.sender);\n\n        for (uint256 i = 0; i < numTransfers; i++) {\n          address to = _tos[i];\n          require(to != address(0));\n          uint256 v = _values[i];\n          require(senderBalance >= v);\n\n          if (msg.sender != to) {\n            senderBalance -= v;\n            erc20Store.addBalance(to, v);\n          }\n          erc20Proxy.emitTransfer(msg.sender, to, v);\n        }\n\n        erc20Store.setBalance(msg.sender, senderBalance);\n\n        return true;\n    }\n\n    /** @notice  Enables the delegation of transfer control for many\n      * accounts to the sweeper account, transferring any balances\n      * as well to the given destination.\n      *\n      * @dev  An account delegates transfer control by signing the\n      * value of `sweepMsg`. The sweeper account is the only authorized\n      * caller of this function, so it must relay signatures on behalf\n      * of accounts that delegate transfer control to it. Enabling\n      * delegation is idempotent and permanent. If the account has a\n      * balance at the time of enabling delegation, its balance is\n      * also transfered to the given destination account `_to`.\n      * NOTE: transfers to the zero address are disallowed.\n      *\n      * @param  _vs  The array of recovery byte components of the ECDSA signatures.\n      * @param  _rs  The array of 'R' components of the ECDSA signatures.\n      * @param  _ss  The array of 'S' components of the ECDSA signatures.\n      * @param  _to  The destination for swept balances.\n      */\n    function enableSweep(uint8[] _vs, bytes32[] _rs, bytes32[] _ss, address _to) public onlySweeper {\n        require(_to != address(0));\n        require((_vs.length == _rs.length) && (_vs.length == _ss.length));\n\n        uint256 numSignatures = _vs.length;\n        uint256 sweptBalance = 0;\n\n        for (uint256 i=0; i<numSignatures; ++i) {\n          address from = ecrecover(sweepMsg, _vs[i], _rs[i], _ss[i]);\n\n          // ecrecover returns 0 on malformed input\n          if (from != address(0)) {\n            sweptSet[from] = true;\n\n            uint256 fromBalance = erc20Store.balances(from);\n\n            if (fromBalance > 0) {\n              sweptBalance += fromBalance;\n\n              erc20Store.setBalance(from, 0);\n\n              erc20Proxy.emitTransfer(from, _to, fromBalance);\n            }\n          }\n        }\n\n        if (sweptBalance > 0) {\n          erc20Store.addBalance(_to, sweptBalance);\n        }\n    }\n\n    /** @notice  For accounts that have delegated, transfer control\n      * to the sweeper, this function transfers their balances to the given\n      * destination.\n      *\n      * @dev The sweeper account is the only authorized caller of\n      * this function. This function accepts an array of addresses to have their\n      * balances transferred for gas efficiency purposes.\n      * NOTE: any address for an account that has not been previously enabled\n      * will be ignored.\n      * NOTE: transfers to the zero address are disallowed.\n      *\n      * @param  _froms  The addresses to have their balances swept.\n      * @param  _to  The destination address of all these transfers.\n      */\n    function replaySweep(address[] _froms, address _to) public onlySweeper {\n        require(_to != address(0));\n        uint256 lenFroms = _froms.length;\n        uint256 sweptBalance = 0;\n\n        for (uint256 i=0; i<lenFroms; ++i) {\n            address from = _froms[i];\n\n            if (sweptSet[from]) {\n                uint256 fromBalance = erc20Store.balances(from);\n\n                if (fromBalance > 0) {\n                    sweptBalance += fromBalance;\n\n                    erc20Store.setBalance(from, 0);\n\n                    erc20Proxy.emitTransfer(from, _to, fromBalance);\n                }\n            }\n        }\n\n        if (sweptBalance > 0) {\n            erc20Store.addBalance(_to, sweptBalance);\n        }\n    }\n\n    /** @notice  Core logic of the ERC20 `transferFrom` function.\n      *\n      * @dev  This function can only be called by the referenced proxy,\n      * which has a `transferFrom` function.\n      * Every argument passed to that function as well as the original\n      * `msg.sender` gets passed to this function.\n      * NOTE: transfers to the zero address are disallowed.\n      *\n      * @param  _sender  The address initiating the transfer in proxy.\n      */\n    function transferFromWithSender(\n        address _sender,\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        public\n        onlyProxy\n        returns (bool success)\n    {\n        require(_to != address(0)); // ensure burn is the cannonical transfer to 0x0\n\n        uint256 balanceOfFrom = erc20Store.balances(_from);\n        require(_value <= balanceOfFrom);\n\n        uint256 senderAllowance = erc20Store.allowed(_from, _sender);\n        require(_value <= senderAllowance);\n\n        erc20Store.setBalance(_from, balanceOfFrom - _value);\n        erc20Store.addBalance(_to, _value);\n\n        erc20Store.setAllowance(_from, _sender, senderAllowance - _value);\n\n        erc20Proxy.emitTransfer(_from, _to, _value);\n\n        return true;\n    }\n\n    /** @notice  Core logic of the ERC20 `transfer` function.\n      *\n      * @dev  This function can only be called by the referenced proxy,\n      * which has a `transfer` function.\n      * Every argument passed to that function as well as the original\n      * `msg.sender` gets passed to this function.\n      * NOTE: transfers to the zero address are disallowed.\n      *\n      * @param  _sender  The address initiating the transfer in proxy.\n      */\n    function transferWithSender(\n        address _sender,\n        address _to,\n        uint256 _value\n    )\n        public\n        onlyProxy\n        returns (bool success)\n    {\n        require(_to != address(0)); // ensure burn is the cannonical transfer to 0x0\n\n        uint256 balanceOfSender = erc20Store.balances(_sender);\n        require(_value <= balanceOfSender);\n\n        erc20Store.setBalance(_sender, balanceOfSender - _value);\n        erc20Store.addBalance(_to, _value);\n\n        erc20Proxy.emitTransfer(_sender, _to, _value);\n\n        return true;\n    }\n\n    // METHODS (ERC20 sub interface impl.)\n    /// @notice  Core logic of the ERC20 `totalSupply` function.\n    function totalSupply() public view returns (uint256) {\n        return erc20Store.totalSupply();\n    }\n\n    /// @notice  Core logic of the ERC20 `balanceOf` function.\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return erc20Store.balances(_owner);\n    }\n\n    /// @notice  Core logic of the ERC20 `allowance` function.\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return erc20Store.allowed(_owner, _spender);\n    }\n\n    // EVENTS\n    /// @dev  Emitted by successful `requestPrint` calls.\n    event PrintingLocked(bytes32 _lockId, address _receiver, uint256 _value);\n    /// @dev Emitted by successful `confirmPrint` calls.\n    event PrintingConfirmed(bytes32 _lockId, address _receiver, uint256 _value);\n}\n\n\n/** @title  ERC20 compliant token balance store.\n  *\n  * @notice  This contract serves as the store of balances, allowances, and\n  * supply for the ERC20 compliant token. No business logic exists here.\n  *\n  * @dev  This contract contains no business logic and instead\n  * is the final destination for any change in balances, allowances, or token\n  * supply. This contract is upgradeable in the sense that its custodian can\n  * update the `erc20Impl` address, thus redirecting the source of logic that\n  * determines how the balances will be updated.\n  *\n  * @author  Gemini Trust Company, LLC\n  */\ncontract ERC20Store is ERC20ImplUpgradeable {\n\n    // MEMBERS\n    /// @dev  The total token supply.\n    uint256 public totalSupply;\n\n    /// @dev  The mapping of balances.\n    mapping (address => uint256) public balances;\n\n    /// @dev  The mapping of allowances.\n    mapping (address => mapping (address => uint256)) public allowed;\n\n    // CONSTRUCTOR\n    function ERC20Store(address _custodian) ERC20ImplUpgradeable(_custodian) public {\n        totalSupply = 0;\n    }\n\n\n    // PUBLIC FUNCTIONS\n    // (ERC20 Ledger)\n\n    /** @notice  The function to set the total supply of tokens.\n      *\n      * @dev  Intended for use by token implementation functions\n      * that update the total supply. The only authorized caller\n      * is the active implementation.\n      *\n      * @param _newTotalSupply the value to set as the new total supply\n      */\n    function setTotalSupply(\n        uint256 _newTotalSupply\n    )\n        public\n        onlyImpl\n    {\n        totalSupply = _newTotalSupply;\n    }\n\n    /** @notice  Sets how much `_owner` allows `_spender` to transfer on behalf\n      * of `_owner`.\n      *\n      * @dev  Intended for use by token implementation functions\n      * that update spending allowances. The only authorized caller\n      * is the active implementation.\n      *\n      * @param  _owner  The account that will allow an on-behalf-of spend.\n      * @param  _spender  The account that will spend on behalf of the owner.\n      * @param  _value  The limit of what can be spent.\n      */\n    function setAllowance(\n        address _owner,\n        address _spender,\n        uint256 _value\n    )\n        public\n        onlyImpl\n    {\n        allowed[_owner][_spender] = _value;\n    }\n\n    /** @notice  Sets the balance of `_owner` to `_newBalance`.\n      *\n      * @dev  Intended for use by token implementation functions\n      * that update balances. The only authorized caller\n      * is the active implementation.\n      *\n      * @param  _owner  The account that will hold a new balance.\n      * @param  _newBalance  The balance to set.\n      */\n    function setBalance(\n        address _owner,\n        uint256 _newBalance\n    )\n        public\n        onlyImpl\n    {\n        balances[_owner] = _newBalance;\n    }\n\n    /** @notice Adds `_balanceIncrease` to `_owner`'s balance.\n      *\n      * @dev  Intended for use by token implementation functions\n      * that update balances. The only authorized caller\n      * is the active implementation.\n      * WARNING: the caller is responsible for preventing overflow.\n      *\n      * @param  _owner  The account that will hold a new balance.\n      * @param  _balanceIncrease  The balance to add.\n      */\n    function addBalance(\n        address _owner,\n        uint256 _balanceIncrease\n    )\n        public\n        onlyImpl\n    {\n        balances[_owner] = balances[_owner] + _balanceIncrease;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingPrintMap\",\"outputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApprovalWithSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmPrint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromWithSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApprovalWithSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveWithSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sweeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vs\",\"type\":\"uint8[]\"},{\"name\":\"_rs\",\"type\":\"bytes32[]\"},{\"name\":\"_ss\",\"type\":\"bytes32[]\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"enableSweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"requestPrint\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sweepMsg\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferWithSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sweptSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_froms\",\"type\":\"address[]\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"replaySweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20Store\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_erc20Proxy\",\"type\":\"address\"},{\"name\":\"_erc20Store\",\"type\":\"address\"},{\"name\":\"_custodian\",\"type\":\"address\"},{\"name\":\"_sweeper\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PrintingLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"PrintingConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b60405160808061206a833981016040528080519190602001805191906020018051919060200180516000805560018054600160a060020a031916600160a060020a038681169190911790915590925082161515905061006d57600080fd5b60038054600160a060020a03808716600160a060020a03199283161790925560048054868416908316179055600580549284169290911691909117905530604051600160a060020a03919091166c010000000000000000000000000281527f7377656570000000000000000000000000000000000000000000000000000000601482015260190160405190819003902060065550505050611f57806101136000396000f30060606040526004361061012f5763ffffffff60e060020a60003504166304ff7d3f811461013457806315b210821461016c57806318160ddd1461019d5780632e0179b5146101b0578063375b74c3146101ec578063380ba30c1461021b5780633a8343ee1461023357806342966c68146102495780635d5e22cd1461025f57806361e1077d1461028d57806370a08231146102b55780637f555b03146102d457806388d695b2146102e757806389064fd2146103765780639189a59e1461039e578063b7279ca6146103b1578063be23d2911461048b578063cb81fecf146104ad578063cf6e4488146104c0578063dd62ed3e146104d6578063de5007ff146104fb578063dfe0f0ca1461050e578063ea5fbfd514610536578063eb55b2a314610555578063f602c312146105af575b600080fd5b341561013f57600080fd5b61014a6004356105c2565b604051600160a060020a03909216825260208201526040908101905180910390f35b341561017757600080fd5b61018b600160a060020a03600435166105e7565b60405190815260200160405180910390f35b34156101a857600080fd5b61018b6106ac565b34156101bb57600080fd5b6101d8600160a060020a0360043581169060243516604435610709565b604051901515815260200160405180910390f35b34156101f757600080fd5b6101ff6108b4565b604051600160a060020a03909116815260200160405180910390f35b341561022657600080fd5b6102316004356108c3565b005b341561023e57600080fd5b610231600435610b37565b341561025457600080fd5b6101d8600435610be8565b341561026a57600080fd5b6101d8600160a060020a0360043581169060243581169060443516606435610ded565b341561029857600080fd5b6101d8600160a060020a03600435811690602435166044356110dc565b34156102c057600080fd5b61018b600160a060020a0360043516611194565b34156102df57600080fd5b6101ff611203565b34156102f257600080fd5b6101d860046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061121295505050505050565b341561038157600080fd5b6101d8600160a060020a036004358116906024351660443561146e565b34156103a957600080fd5b6101ff611592565b34156103bc57600080fd5b6102316004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965050509235600160a060020a031692506115a1915050565b341561049657600080fd5b61018b600160a060020a03600435166024356118b8565b34156104b857600080fd5b61018b61198f565b34156104cb57600080fd5b6101ff600435611995565b34156104e157600080fd5b61018b600160a060020a03600435811690602435166119b0565b341561050657600080fd5b61018b611a28565b341561051957600080fd5b6101d8600160a060020a0360043581169060243516604435611a2e565b341561054157600080fd5b6101d8600160a060020a0360043516611c26565b341561056057600080fd5b610231600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050509235600160a060020a03169250611c3b915050565b34156105ba57600080fd5b6101ff611e9a565b60086020526000908152604090208054600190910154600160a060020a039091169082565b6000600160a060020a03821615156105fe57600080fd5b610606611ea9565b905060206040519081016040908152600160a060020a038416825260008381526002602052208151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0391909116179055507fd76fc900a7e1a6fcf11d54b7ba943918df6c53a3128140658c389b3da1e997ba813384604051928352600160a060020a039182166020840152166040808301919091526060909101905180910390a1919050565b600454600090600160a060020a03166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156106ee57600080fd5b5af115156106fb57600080fd5b505050604051805191505090565b6003546000908190819033600160a060020a0390811691161461072b57600080fd5b600160a060020a038516151561074057600080fd5b600454600160a060020a0316635c658165878760405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561079857600080fd5b5af115156107a557600080fd5b505050604051805192505050828101818110156107c157600080fd5b600454600160a060020a031663da46098c87878460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561082457600080fd5b5af1151561083157600080fd5b5050600354600160a060020a03169050635687f2b887878460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561089857600080fd5b5af115156108a557600080fd5b50600198975050505050505050565b600154600160a060020a031681565b600154600090819081908190819033600160a060020a039081169116146108e957600080fd5b60008681526008602052604090208054909550600160a060020a0316935083151561091357600080fd5b600180860154600088815260086020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916815590930155600454909450600160a060020a0316906318160ddd90518163ffffffff1660e060020a028152600401602060405180830381600087803b151561098957600080fd5b5af1151561099657600080fd5b505050604051805192505050818101818110610b2f57600454600160a060020a031663f7ea7a3d8260405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b15156109f457600080fd5b5af11515610a0157600080fd5b5050600454600160a060020a031690506321e5383a858560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610a5b57600080fd5b5af11515610a6857600080fd5b5050507f1445852a2ef41b86fd81f90a02261a68635ceb02cdbc73f9c5f690af8288f360868585604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a1600354600160a060020a03166323de66516000868660405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515610b1e57600080fd5b5af11515610b2b57600080fd5b5050505b505050505050565b60015433600160a060020a03908116911614610b5257600080fd5b610b5b81611ef7565b60018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff1991821617825560008481526002602052604090819020805490921690915590547f9a99272c0f6b7a30ef9e76e684a7cd408bfd4f11a72f36a8e276253c920e442d92849291169051918252600160a060020a031660208201526040908101905180910390a150565b6004546000908190600160a060020a03166327e235e33360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c3d57600080fd5b5af11515610c4a57600080fd5b505050604051805191505080831115610c6257600080fd5b600454600160a060020a031663e30443bc3385840360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610cba57600080fd5b5af11515610cc757600080fd5b5050600454600160a060020a0316905063f7ea7a3d84826318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610d1157600080fd5b5af11515610d1e57600080fd5b505050604051805190500360405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b1515610d5f57600080fd5b5af11515610d6c57600080fd5b5050600354600160a060020a031690506323de66513360008660405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515610dd457600080fd5b5af11515610de157600080fd5b50600195945050505050565b6003546000908190819033600160a060020a03908116911614610e0f57600080fd5b600160a060020a0385161515610e2457600080fd5b600454600160a060020a03166327e235e38760405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610e7457600080fd5b5af11515610e8157600080fd5b505050604051805192505081841115610e9957600080fd5b600454600160a060020a0316635c658165878960405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b1515610ef157600080fd5b5af11515610efe57600080fd5b505050604051805191505080841115610f1657600080fd5b600454600160a060020a031663e30443bc8786850360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610f6e57600080fd5b5af11515610f7b57600080fd5b5050600454600160a060020a031690506321e5383a868660405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610fd557600080fd5b5af11515610fe257600080fd5b5050600454600160a060020a0316905063da46098c878987850360405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561104b57600080fd5b5af1151561105857600080fd5b5050600354600160a060020a031690506323de665187878760405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b15156110bf57600080fd5b5af115156110cc57600080fd5b5060019998505050505050505050565b6003546000908190819033600160a060020a039081169116146110fe57600080fd5b600160a060020a038516151561111357600080fd5b600454600160a060020a0316635c658165878760405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b151561116b57600080fd5b5af1151561117857600080fd5b505050604051805192505050828103818111156107c157600080fd5b600454600090600160a060020a03166327e235e38360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156111e757600080fd5b5af115156111f457600080fd5b50505060405180519392505050565b600354600160a060020a031681565b600080600080600080865188511461122957600080fd5b8751600454909550600160a060020a03166327e235e33360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561127e57600080fd5b5af1151561128b57600080fd5b5050506040518051945060009350505b848310156113fa578783815181106112af57fe5b906020019060200201519150600160a060020a03821615156112d057600080fd5b8683815181106112dc57fe5b906020019060200201519050808410156112f557600080fd5b81600160a060020a031633600160a060020a031614151561137c576004549381900393600160a060020a03166321e5383a838360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561136b57600080fd5b5af1151561137857600080fd5b5050505b600354600160a060020a03166323de665133848460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b15156113df57600080fd5b5af115156113ec57600080fd5b50506001909301925061129b565b600454600160a060020a031663e30443bc338660405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561145057600080fd5b5af1151561145d57600080fd5b5060019a9950505050505050505050565b60035460009033600160a060020a0390811691161461148c57600080fd5b600160a060020a03831615156114a157600080fd5b600454600160a060020a031663da46098c85858560405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561150457600080fd5b5af1151561151157600080fd5b5050600354600160a060020a03169050635687f2b885858560405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561157857600080fd5b5af1151561158557600080fd5b5060019695505050505050565b600554600160a060020a031681565b600554600090819081908190819033600160a060020a039081169116146115c757600080fd5b600160a060020a03861615156115dc57600080fd5b875189511480156115ee575086518951145b15156115f957600080fd5b8851945060009350600092505b8483101561183e5760016006548a858151811061161f57fe5b906020019060200201518a868151811061163557fe5b906020019060200201518a878151811061164b57fe5b906020019060200201516040516000815260200160405260405193845260ff9092166020808501919091526040808501929092526060840192909252608090920191516020810390808403906000865af115156116a757600080fd5b5050602060405103519150600160a060020a0382161561183357600160a060020a0380831660009081526007602052604090819020805460ff19166001179055600454909116906327e235e39084905160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561173257600080fd5b5af1151561173f57600080fd5b505050604051805191505060008111156118335760045493810193600160a060020a031663e30443bc83600060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156117ae57600080fd5b5af115156117bb57600080fd5b5050600354600160a060020a031690506323de665183888460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b151561182257600080fd5b5af1151561182f57600080fd5b5050505b826001019250611606565b6000841115610b2b57600454600160a060020a03166321e5383a878660405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b151561189d57600080fd5b5af115156118aa57600080fd5b505050505050505050505050565b6000600160a060020a03831615156118cf57600080fd5b6118d7611ea9565b9050604080519081016040908152600160a060020a0385168252602080830185905260008481526008909152208151815473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03919091161781556020820151600190910155507f021724c3943709b5b29b9cdcfb21e18e7355b036e07d869b4a69bd8a13ec45e8818484604051928352600160a060020a0390911660208301526040808301919091526060909101905180910390a192915050565b60005481565b600260205260009081526040902054600160a060020a031681565b600454600090600160a060020a0316635c658165848460405160e060020a63ffffffff8516028152600160a060020a03928316600482015291166024820152604401602060405180830381600087803b1515611a0b57600080fd5b5af11515611a1857600080fd5b5050506040518051949350505050565b60065481565b600354600090819033600160a060020a03908116911614611a4e57600080fd5b600160a060020a0384161515611a6357600080fd5b600454600160a060020a03166327e235e38660405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611ab357600080fd5b5af11515611ac057600080fd5b505050604051805191505080831115611ad857600080fd5b600454600160a060020a031663e30443bc8685840360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515611b3057600080fd5b5af11515611b3d57600080fd5b5050600454600160a060020a031690506321e5383a858560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515611b9757600080fd5b5af11515611ba457600080fd5b5050600354600160a060020a031690506323de665186868660405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515611c0b57600080fd5b5af11515611c1857600080fd5b506001979650505050505050565b60076020526000908152604090205460ff1681565b600554600090819081908190819033600160a060020a03908116911614611c6157600080fd5b600160a060020a0386161515611c7657600080fd5b8651945060009350600092505b84831015611e2157868381518110611c9757fe5b90602001906020020151600160a060020a03811660009081526007602052604090205490925060ff1615611e1657600454600160a060020a03166327e235e38360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611d1557600080fd5b5af11515611d2257600080fd5b50505060405180519150506000811115611e165760045493810193600160a060020a031663e30443bc83600060405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515611d9157600080fd5b5af11515611d9e57600080fd5b5050600354600160a060020a031690506323de665183888460405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401600060405180830381600087803b1515611e0557600080fd5b5af11515611e1257600080fd5b5050505b826001019250611c83565b6000841115611e9157600454600160a060020a03166321e5383a878660405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515611e8057600080fd5b5af11515611e8d57600080fd5b5050505b50505050505050565b600454600160a060020a031681565b60008054600101808255600019430140903090604051928352600160a060020a03919091166c0100000000000000000000000002602083015260348201526054016040518091039020905090565b60008181526002602052604081208054600160a060020a03161515611f1b57600080fd5b54600160a060020a0316929150505600a165627a7a72305820bb3d79ad80497ce403b23be2406a462aecf8911032b9bc5d433691332b9b2e810029000000000000000000000000056fd409e1d7a124bd7017459dfea2f387b6d5cd000000000000000000000000c42b14e49744538e3c239f8ae48a1eaaf35e68a0000000000000000000000000dffc66191baf5047866033d2fe400907af4038a8000000000000000000000000d24400ae8bfebb18ca49be86258a3c749cf46853",
  "constructorArguments": "000000000000000000000000056fd409e1d7a124bd7017459dfea2f387b6d5cd000000000000000000000000c42b14e49744538e3c239f8ae48a1eaaf35e68a0000000000000000000000000dffc66191baf5047866033d2fe400907af4038a8000000000000000000000000d24400ae8bfebb18ca49be86258a3c749cf46853"
}