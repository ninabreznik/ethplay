{
  "address": "0x3d2c1a6f5f6ad142df6090d0789414e2e1df5e0f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Ticket",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\npragma solidity ^0.4.24;\n// pragma experimental ABIEncoderV2;\n\ninterface CitizenInterface {\n    function addEarlyIncome(address _sender) external payable;\n    function pushTicketRefIncome(address _sender) external payable;\n    function addTicketEthSpend(address _citizen, uint256 _value) external payable;\n    function addWinIncome(address _citizen, uint256 _value) external;\n    function pushEarlyIncome() external payable;\n    function getRef(address _address) external view returns(address);\n    function isCitizen(address _address) external view returns(bool);\n}\n\ninterface DAAInterface {\n    function pushDividend() external payable;\n}\n\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\nlibrary Helper {\n    using SafeMath for uint256;\n    \n        \n    function bytes32ToUint(bytes32 n) \n        public\n        pure\n        returns (uint256) \n    {\n        return uint256(n);\n    }\n    \n    function stringToBytes32(string memory source) \n        public\n        pure\n        returns (bytes32 result) \n    {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n    \n    function stringToUint(string memory source) \n        public\n        pure\n        returns (uint256)\n    {\n        return bytes32ToUint(stringToBytes32(source));\n    }\n    \n    function validUsername(string _username)\n        public\n        pure\n        returns(bool)\n    {\n        uint256 len = bytes(_username).length;\n        // Im Raum [4, 18]\n        if ((len < 4) || (len > 18)) return false;\n        // Letzte Char != ' '\n        if (bytes(_username)[len-1] == 32) return false;\n        // Erste Char != '0'\n        return uint256(bytes(_username)[0]) != 48;\n    }   \n    \n    function getRandom(uint256 _seed, uint256 _range)\n        public\n        pure\n        returns(uint256)\n    {\n        if (_range == 0) return _seed;\n        return (_seed % _range) + 1;\n    }\n\n}\n\ncontract Ticket {\n    using SafeMath for uint256;\n    \n    modifier buyable() {\n        require(block.timestamp > round[currentRound].startRound, \"Not start, back later please\");\n        require(block.timestamp < round[currentRound].endRoundByClock1&&(round[currentRound].endRoundByClock2==0 ||block.timestamp < round[currentRound].endRoundByClock2), \"round over\");\n        _;\n    }\n    \n    modifier onlyAdmin() {\n        require(msg.sender == devTeam1, \"admin required\");\n        _;\n    }\n    \n    modifier registered(){\n        require(citizenContract.isCitizen(msg.sender), \"must be a citizen\");\n        _;\n    }\n        \n    modifier onlyCoreContract() {\n        require(isCoreContract[msg.sender], \"admin required\");\n        _;\n    }\n    \n    event BuyATicket(\n        address indexed buyer,\n        uint256 ticketFrom,\n        uint256 ticketTo,\n        uint256 creationDate\n    );\n\n    address devTeam1;\n    address devTeam2;\n    address devTeam3;\n    address devTeam4;\n    \n    uint256 TICKET_PRICE = 2*10**15; // 3 demical 0.002\n    \n    uint256 constant public ZOOM = 1000;\n    uint256 constant public PBASE = 24;\n    uint256 constant public RDIVIDER = 50000;\n    uint256 constant public PMULTI = 48;\n    \n    // percent\n    uint256 constant public EARLY_PERCENT = 20;\n    uint256 constant public EARLY_PERCENT_FOR_CURRENT = 70;\n    uint256 constant public EARLY_PERCENT_FOR_PREVIOUS = 30;\n    uint256 constant public REVENUE_PERCENT = 17;\n    uint256 constant public DEV_PERCENT = 3;\n    uint256 constant public DIVIDEND_PERCENT = 10;\n    uint256 constant public REWARD_PERCENT = 50;\n    \n    //  reward part\n    uint256 constant public LAST_BUY_PERCENT = 20;\n    uint8[6] public JACKPOT_PERCENT = [uint8(25),5,5,5,5,5];\n    uint256 constant public MOST_SPENDER_PERCENT = 5;\n    uint256 constant public MOST_F1_EARNED_PERCENT = 4;\n    uint8[5] public DRAW_PERCENT = [uint8(6),1,1,1,1]; // 3 demicel 0.2%\n    uint256 constant public NEXTROUND_PERCENT = 20;\n    \n    uint256 constant public F1_LIMIT = 1 ether;\n    \n    // clock\n    uint8 constant public MULTI_TICKET = 3;\n    uint256 constant public LIMMIT_CLOCK_2_ETH = 300 ether;\n    uint256 constant public ONE_MIN = 60;\n    uint256 constant public ONE_HOUR = 3600; \n    uint256 constant public ONE_DAY = 24 * ONE_HOUR;\n    \n    // contract\n    CitizenInterface public citizenContract;\n    DAAInterface public DAAContract;\n    mapping (address => bool) public isCoreContract;\n    uint256 public coreContractSum;\n    address[] public coreContracts;\n    \n    struct Round {\n        uint256 priviousTicketSum;\n        uint256 ticketSum;\n        uint256 totalEth;\n        uint256 totalEthRoundSpend;\n\n        address[] participant;\n        mapping(address => uint256) participantTicketAmount;\n        mapping(address => uint256) citizenTicketSpend;\n        mapping(address => uint256) RefF1Sum;\n        mapping(uint256 => Slot) ticketSlot; // from 1\n        uint256 ticketSlotSum;              // last\n        mapping( address => uint256[]) pSlot;\n        \n        uint256 earlyIncomeMarkSum;\n        mapping(address => uint256) earlyIncomeMark;\n        \n        uint256 startRound;\n        uint256 endRoundByClock1;\n        uint256 endRoundByClock2;\n        uint256 endRound;\n        uint8 numberClaimed;\n        \n        \n        bool is_running_clock2;\n    }\n    uint256 public totalEthSpendTicket;\n    uint256 public ticketSum;\n    mapping(address => uint256) public ticketSumByAddress;\n    mapping(uint256=> Round) public round;\n    uint256 public currentRound=0;\n    mapping(address => uint256) earlyIncomeRoundPulled;\n    address[4] mostSpender;\n    address[4] mostF1Earnerd;\n    mapping(address => uint256) mostF1EarnerdId;\n    mapping(address => uint256) mostSpenderId;\n    mapping(uint256 => address[])  roundWinner;\n        \n    struct Slot {\n        address buyer;\n        uint256 ticketFrom;\n        uint256 ticketTo;\n    }\n    \n    \n\n    constructor (address[4] _devTeam)\n        public\n    {\n        devTeam1 = _devTeam[0]; \n        devTeam2 = _devTeam[1]; \n        devTeam3 = _devTeam[2]; \n        devTeam4 = _devTeam[3]; \n        currentRound=0;\n        round[currentRound].startRound = 1560693600;\n        round[currentRound].endRoundByClock1 = round[currentRound].startRound.add(48*ONE_HOUR);\n        round[currentRound].endRound = round[currentRound].endRoundByClock1;\n    }\n    \n       // DAAContract, TicketContract, CitizenContract \n    function joinNetwork(address[3] _contract)\n        public\n    {\n        require(address(citizenContract) == 0x0,\"already setup\");\n        citizenContract = CitizenInterface(_contract[2]);\n        DAAContract = DAAInterface(_contract[0]);\n        for(uint256 i =0; i<3; i++){\n            isCoreContract[_contract[i]]=true;\n            coreContracts.push(_contract[i]);\n        }\n        coreContractSum = 3;\n    }\n    \n    function addCoreContract(address _address) public  // [dev1]\n        onlyAdmin()\n    {\n        require(_address!=0x0,\"Invalid address\");\n        isCoreContract[_address] = true;\n        coreContracts.push(_address);\n        coreContractSum+=1;\n    }\n    \n    function getRestHour() private view returns(uint256){\n        uint256 tempCurrentRound;\n        if (now>round[currentRound].startRound){\n            tempCurrentRound=currentRound;\n        }\n        else{\n            tempCurrentRound=currentRound-1;\n        }\n        if (now>round[tempCurrentRound].endRound) return 0;\n        return round[tempCurrentRound].endRound.sub(now);\n    }\n    \n    function getRestHourClock2() private view returns(uint256){\n        if (round[currentRound].is_running_clock2){\n            if ((round[currentRound].endRoundByClock2.sub(now)).div(ONE_HOUR)>0){\n                return (round[currentRound].endRoundByClock2.sub(now)).div(ONE_HOUR);\n            }\n            return 0;\n        }\n        return 48;\n    }\n    \n    function getTicketPrice() public view returns(uint256){\n        if (round[currentRound].is_running_clock2){\n            return TICKET_PRICE + TICKET_PRICE*(50-getRestHourClock2())*4/100;\n        }\n        return TICKET_PRICE;\n    }\n    \n    function softMostF1(address _ref) private {\n        uint256 citizen_spender = round[currentRound].RefF1Sum[_ref];\n        uint256 i=1;\n        while (i<4) {\n            if (mostF1Earnerd[i]==0x0||(mostF1Earnerd[i]!=0x0&&round[currentRound].RefF1Sum[mostF1Earnerd[i]]<citizen_spender)){\n                if (mostF1EarnerdId[_ref]!=0&&mostF1EarnerdId[_ref]<i){\n                    break;\n                }\n                if (mostF1EarnerdId[_ref]!=0){\n                    mostF1Earnerd[mostF1EarnerdId[_ref]]=0x0;\n                }\n                address temp1 = mostF1Earnerd[i];\n                address temp2;\n                uint256 j=i+1;\n                while (j<4&&temp1!=0x0){\n                    temp2 = mostF1Earnerd[j];\n                    mostF1Earnerd[j]=temp1;\n                    mostF1EarnerdId[temp1]=j;\n                    temp1 = temp2;\n                    j++;\n                }\n                mostF1Earnerd[i]=_ref;\n                mostF1EarnerdId[_ref]=i;\n                break;\n            }\n            i++;\n        }\n    } \n    \n\n    function softMostSpender(address _ref) private {\n        uint256 citizen_spender = round[currentRound].citizenTicketSpend[_ref];\n        uint256 i=1;\n        while (i<4) {\n            if (mostSpender[i]==0x0||(mostSpender[i]!=0x0&&round[currentRound].citizenTicketSpend[mostSpender[i]]<citizen_spender)){\n                if (mostSpenderId[_ref]!=0&&mostSpenderId[_ref]<i){\n                    break;\n                }\n                if (mostSpenderId[_ref]!=0){\n                    mostSpender[mostSpenderId[_ref]]=0x0;\n                }\n                address temp1 = mostSpender[i];\n                address temp2;\n                uint256 j=i+1;\n                while (j<4&&temp1!=0x0){\n                    temp2 = mostSpender[j];\n                    mostSpender[j]=temp1;\n                    mostSpenderId[temp1]=j;\n                    temp1 = temp2;\n                    j++;\n                }\n                mostSpender[i]=_ref;\n                mostSpenderId[_ref]=i;\n                break;\n            }\n            i++;\n        }\n    } \n    \n    function addTicketEthSpend(address _sender,uint256 _value) private{\n        citizenContract.addTicketEthSpend(_sender,_value);\n        \n        address refAdress = citizenContract.getRef(_sender);\n        if (refAdress != devTeam3 && round[currentRound].citizenTicketSpend[_sender]<F1_LIMIT){ // devTeam3 cannot receiver this arward.\n            uint256 valueFromF1;\n            \n            //  limmit at 1 ether\n            if (round[currentRound].citizenTicketSpend[_sender].add(_value)>F1_LIMIT){\n                uint256 temp = round[currentRound].citizenTicketSpend[_sender].add(_value).sub(F1_LIMIT);\n                valueFromF1 = _value.sub(temp);\n            } else {\n                valueFromF1 = _value;\n            }\n            \n            // sum f1 deposit\n            round[currentRound].RefF1Sum[refAdress] = round[currentRound].RefF1Sum[refAdress].add(valueFromF1);\n            \n            //  find max mostF1Earnerd\n            softMostF1(refAdress);\n            \n        }\n        \n        round[currentRound].citizenTicketSpend[_sender] = round[currentRound].citizenTicketSpend[_sender].add(_value);\n        \n        // find max mostSpender\n        softMostSpender(_sender);\n        \n        // calculate total\n        totalEthSpendTicket = totalEthSpendTicket.add(_value);\n    }\n    \n    \n    function isAddressTicket(uint256 _round,uint256 _slot, uint256 _ticket) private view returns(bool){\n        Slot storage temp = round[_round].ticketSlot[_slot];\n        if (temp.ticketFrom<=_ticket&&_ticket<=temp.ticketTo) return true;\n        return false;\n    }\n    \n    function getAddressTicket(uint256 _round, uint256 _ticket) public view returns(address){\n        uint256 _from = 0;\n        uint256 _to = round[_round].ticketSlotSum;\n        uint256 _mid;\n        \n        while(_from<=_to){\n            _mid = (_from+_to).div(2);\n            if (isAddressTicket(_round,_mid,_ticket)) return round[_round].ticketSlot[_mid].buyer;\n            if (_ticket<round[_round].ticketSlot[_mid].ticketFrom){\n                _to = _mid-1;\n            }\n            else {\n                _from = _mid+1;\n            }\n        }\n        \n        // if errors\n        return round[_round].ticketSlot[_mid].buyer;\n    }\n    \n    function drawWinner() public registered() {\n        // require(round[currentRound].participantTicketAmount[msg.sender] > 0, \"must buy at least 1 ticket\");\n        require(round[currentRound].endRound.add(ONE_MIN)<now);\n        \n        // address lastbuy = getAddressTicket(currentRound, round[currentRound].ticketSum-1);\n        address lastbuy = round[currentRound].ticketSlot[round[currentRound].ticketSlotSum].buyer;\n        roundWinner[currentRound].push(lastbuy);\n        uint256 arward_last_buy = round[currentRound].totalEth*LAST_BUY_PERCENT/100;\n        lastbuy.transfer(arward_last_buy);\n        citizenContract.addWinIncome(lastbuy,arward_last_buy);\n        \n        mostSpender[1].transfer(round[currentRound].totalEth*MOST_SPENDER_PERCENT/100);\n        citizenContract.addWinIncome(mostSpender[1],round[currentRound].totalEth*MOST_SPENDER_PERCENT/100);\n        mostF1Earnerd[1].transfer(round[currentRound].totalEth*MOST_F1_EARNED_PERCENT/100);\n        citizenContract.addWinIncome(mostF1Earnerd[1],round[currentRound].totalEth*MOST_F1_EARNED_PERCENT/100);\n        roundWinner[currentRound].push(mostSpender[1]);\n        roundWinner[currentRound].push(mostF1Earnerd[1]);\n        \n        uint256 _seed = getSeed();\n        for (uint256 i = 0; i < 6; i++){\n            uint256 winNumber = Helper.getRandom(_seed, round[currentRound].ticketSum);\n            if (winNumber==0) winNumber= round[currentRound].ticketSum;\n            address winCitizen = getAddressTicket(currentRound,winNumber);\n            winCitizen.transfer(round[currentRound].totalEth.mul(JACKPOT_PERCENT[i]).div(100));\n            citizenContract.addWinIncome(winCitizen,round[currentRound].totalEth.mul(JACKPOT_PERCENT[i]).div(100));\n            roundWinner[currentRound].push(winCitizen);\n            _seed = _seed + (_seed / 10);\n        }\n        \n        \n        uint256 totalEthLastRound = round[currentRound].totalEth*NEXTROUND_PERCENT/100;\n        // Next Round\n        delete mostSpender;\n        delete mostF1Earnerd;\n        currentRound = currentRound+1;\n        round[currentRound].startRound = now.add(12*ONE_HOUR);\n        round[currentRound].totalEth = totalEthLastRound;\n        round[currentRound].endRoundByClock1 = now.add(60*ONE_HOUR); //12+48\n        round[currentRound].endRound = round[currentRound].endRoundByClock1;\n        claim();\n    }\n    \n    function claim() public registered() {\n        // require drawed winner\n        require(currentRound>0&&round[currentRound].ticketSum==0);\n        uint256 lastRound = currentRound-1;\n        // require 5 citizen can draw\n        require(round[lastRound].numberClaimed<5);\n        // require time;\n        require(round[lastRound].endRound.add(ONE_MIN)<now);\n        address _sender = msg.sender;\n        roundWinner[lastRound].push(_sender);\n        uint256 numberClaimed = round[lastRound].numberClaimed;\n        uint256 _arward = round[currentRound-1].totalEth*DRAW_PERCENT[numberClaimed]/1000;\n        _sender.transfer(_arward);\n        citizenContract.addWinIncome(_sender,_arward);\n        round[lastRound].numberClaimed = round[lastRound].numberClaimed+1;\n        round[lastRound].endRound = now.add(5*ONE_MIN);\n    }\n    \n    function getEarlyIncomeMark(uint256 _ticketSum) public pure returns(uint256){\n        uint256 base = _ticketSum * ZOOM / RDIVIDER;\n        uint256 expo = base.mul(base).mul(base); //^3\n        expo = expo.mul(expo).mul(PMULTI); \n        expo =  expo.div(ZOOM**5);\n        return (1 + PBASE*ZOOM / (1*ZOOM + expo));\n    }\n\n    function buyTicket(uint256 _quantity) payable public registered() buyable() returns(bool) {\n        uint256 ethDeposit = msg.value;\n        address _sender = msg.sender;\n        require(_quantity*getTicketPrice()==ethDeposit,\"Not enough eth for current quantity\");\n        \n        // after one day sale  | extra time\n        if (now>=round[currentRound].startRound.add(ONE_DAY)){\n            uint256 extraTime = _quantity.mul(30);\n            if (round[currentRound].endRoundByClock1.add(extraTime)>now.add(ONE_DAY)){\n                round[currentRound].endRoundByClock1 = now.add(ONE_DAY);\n            } else {\n                round[currentRound].endRoundByClock1 = round[currentRound].endRoundByClock1.add(extraTime);\n            }\n        }\n        \n        // F1, most spender\n        addTicketEthSpend(_sender, ethDeposit);\n        \n        \n        if (round[currentRound].participantTicketAmount[_sender]==0){\n            round[currentRound].participant.push(_sender);\n        }\n        // //  Occupied Slot\n        if(round[currentRound].is_running_clock2){\n            _quantity=_quantity.mul(MULTI_TICKET);\n        }\n        \n        uint256 ticketSlotSumTemp = round[currentRound].ticketSlotSum.add(1);\n        round[currentRound].ticketSlotSum = ticketSlotSumTemp;\n        round[currentRound].ticketSlot[ticketSlotSumTemp].buyer = _sender;\n        round[currentRound].ticketSlot[ticketSlotSumTemp].ticketFrom = round[currentRound].ticketSum+1;\n        \n        // 20% Early Income Mark\n        uint256 earlyIncomeMark = getEarlyIncomeMark(round[currentRound].ticketSum);\n        earlyIncomeMark = earlyIncomeMark.mul(_quantity);\n        round[currentRound].earlyIncomeMarkSum = earlyIncomeMark.add(round[currentRound].earlyIncomeMarkSum);\n        round[currentRound].earlyIncomeMark[_sender] = earlyIncomeMark.add(round[currentRound].earlyIncomeMark[_sender]);\n        \n        round[currentRound].ticketSum = round[currentRound].ticketSum.add(_quantity);\n        ticketSum = ticketSum.add(_quantity);\n        ticketSumByAddress[_sender] = ticketSumByAddress[_sender].add(_quantity);\n        round[currentRound].ticketSlot[ticketSlotSumTemp].ticketTo = round[currentRound].ticketSum;\n        round[currentRound].participantTicketAmount[_sender] = round[currentRound].participantTicketAmount[_sender].add(_quantity);\n        round[currentRound].pSlot[_sender].push(ticketSlotSumTemp);\n        emit BuyATicket(_sender, round[currentRound].ticketSlot[ticketSlotSumTemp].ticketFrom, round[currentRound].ticketSlot[ticketSlotSumTemp].ticketTo, now);\n            \n        // 20% EarlyIncome\n        uint256 earlyIncome=  ethDeposit*EARLY_PERCENT/100;\n        citizenContract.pushEarlyIncome.value(earlyIncome)();\n        \n        // 17% Revenue\n        uint256 revenue =  ethDeposit*REVENUE_PERCENT/100;\n        citizenContract.pushTicketRefIncome.value(revenue)(_sender);\n        \n        // 10% Devidend\n        uint256 devidend =  ethDeposit*DIVIDEND_PERCENT/100;\n        DAAContract.pushDividend.value(devidend)();\n        \n        // 3% devTeam\n        uint256 devTeamPaid = ethDeposit*DEV_PERCENT/100;\n        devTeam1.transfer(devTeamPaid);\n        \n        // 50% reward\n        uint256 rewardPaid = ethDeposit*REWARD_PERCENT/100;\n        round[currentRound].totalEth = rewardPaid.add(round[currentRound].totalEth);\n        \n        round[currentRound].totalEthRoundSpend = ethDeposit.add(round[currentRound].totalEthRoundSpend);\n        \n        // Run clock 2\n        if (round[currentRound].is_running_clock2==false&&((currentRound==0 && round[currentRound].totalEth>=LIMMIT_CLOCK_2_ETH)||(currentRound>0&&round[currentRound].totalEth>round[currentRound-1].totalEth))){\n            round[currentRound].is_running_clock2=true;\n            round[currentRound].endRoundByClock2 = now.add(48*ONE_HOUR);\n        }\n        uint256 tempEndRound = round[currentRound].endRoundByClock2;\n        // update endround Time\n        if (round[currentRound].endRoundByClock2>round[currentRound].endRoundByClock1||round[currentRound].endRoundByClock2==0){\n            tempEndRound = round[currentRound].endRoundByClock1;\n        }\n        round[currentRound].endRound = tempEndRound;\n        \n        return true;\n    }\n    \n    // early income real time display\n    function getEarlyIncomeView(address _sender, bool _current) public view returns(uint256){\n        uint256 _last_round = earlyIncomeRoundPulled[_sender];\n        uint256 _currentRound = currentRound;\n        if (_current) {\n            _currentRound = _currentRound.add(1);\n        }\n        if (_last_round + 100 < _currentRound) _last_round = _currentRound - 100;\n\n        uint256 _sum;\n        for (uint256 i = _last_round;i<_currentRound;i++){\n            _sum = _sum.add(getEarlyIncomeByRound(_sender, i));\n        }\n        return _sum;\n    }\n    \n    //  early income pull\n    function getEarlyIncomePull(address _sender) onlyCoreContract() public returns(uint256){\n        uint256 _last_round = earlyIncomeRoundPulled[_sender];\n        if (_last_round + 100 < currentRound) _last_round = currentRound - 100;\n        uint256 _sum;\n        for (uint256 i = _last_round;i<currentRound;i++){\n            _sum = _sum.add(getEarlyIncomeByRound(_sender, i));\n        }\n        earlyIncomeRoundPulled[_sender] = currentRound;\n        return _sum;\n    }\n    \n    function getEarlyIncomeByRound(address _buyer, uint256 _round) public view returns(uint256){\n        uint256 _previous_round;\n        _previous_round = _round-1;\n            if (_round==0) _previous_round = 0;\n        uint256 _sum=0;\n        uint256 _totalEth = round[_round].totalEthRoundSpend*EARLY_PERCENT/100;\n        uint256 _currentAmount = _totalEth*EARLY_PERCENT_FOR_CURRENT/100;\n        uint256 _previousAmount = _totalEth*EARLY_PERCENT_FOR_PREVIOUS/100;\n        \n        if (round[_round].earlyIncomeMarkSum>0){\n             _sum = round[_round].earlyIncomeMark[_buyer].mul(_currentAmount).div(round[_round].earlyIncomeMarkSum);\n        }\n        if (round[_previous_round].earlyIncomeMarkSum>0){\n            _sum = _sum.add(round[_previous_round].earlyIncomeMark[_buyer].mul(_previousAmount).div(round[_previous_round].earlyIncomeMarkSum));\n        }\n        return _sum;\n    }\n\n    function getSeed()\n        public\n        view\n        returns (uint64)\n    {\n        return uint64(keccak256(block.timestamp, block.difficulty));\n    }\n    \n    function sendTotalEth() onlyAdmin() public {\n        DAAContract.pushDividend.value(address(this).balance)();\n        round[currentRound].totalEth=0;\n    }\n    \n    function getMostSpender() public view returns(address[4]){\n        return mostSpender;\n    }\n    \n    function getMostF1Earnerd() public view returns(address[4]){\n        return mostF1Earnerd;\n    }\n    \n    function getResultWinner(uint256 _round) public view returns(address[]){\n        require(_round<currentRound);\n        return roundWinner[_round];\n    }\n    \n    function getCitizenTicketSpend(uint256 _round, address _sender) public view returns(uint256){\n        return round[_round].citizenTicketSpend[_sender];\n    }\n    \n    function getCititzenTicketSum(uint256 _round) public view returns(uint256){\n        address _sender =msg.sender;\n        return round[_round].participantTicketAmount[_sender];\n    }\n    \n    function getRefF1Sum(uint256 _round, address _sender) public view returns(uint256){\n        return round[_round].RefF1Sum[_sender];\n    }\n    \n    function getLastBuy(uint256 _round) public view returns(address){\n        return round[_round].ticketSlot[round[_round].ticketSlotSum].buyer;\n    }\n    \n    function getCitizenSumSlot(uint256 _round) public view returns(uint256){\n        address _sender = msg.sender;\n        return round[_round].pSlot[_sender].length;\n    }\n    \n    function getCitizenSlotId(uint256 _round, uint256 _id) public view returns(uint256){\n        address _sender = msg.sender;\n        return round[_round].pSlot[_sender][_id];\n    }\n    \n    function getCitizenSlot(uint256 _round, uint256 _slotId) public view returns(address, uint256, uint256){\n        Slot memory _slot = round[_round].ticketSlot[_slotId];\n        return (_slot.buyer,_slot.ticketFrom,_slot.ticketTo);\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"PMULTI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REWARD_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_current\",\"type\":\"bool\"}],\"name\":\"getEarlyIncomeView\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REVENUE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_HOUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DAAContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEV_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMostSpender\",\"outputs\":[{\"name\":\"\",\"type\":\"address[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getRefF1Sum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MOST_F1_EARNED_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address[3]\"}],\"name\":\"joinNetwork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round\",\"outputs\":[{\"name\":\"priviousTicketSum\",\"type\":\"uint256\"},{\"name\":\"ticketSum\",\"type\":\"uint256\"},{\"name\":\"totalEth\",\"type\":\"uint256\"},{\"name\":\"totalEthRoundSpend\",\"type\":\"uint256\"},{\"name\":\"ticketSlotSum\",\"type\":\"uint256\"},{\"name\":\"earlyIncomeMarkSum\",\"type\":\"uint256\"},{\"name\":\"startRound\",\"type\":\"uint256\"},{\"name\":\"endRoundByClock1\",\"type\":\"uint256\"},{\"name\":\"endRoundByClock2\",\"type\":\"uint256\"},{\"name\":\"endRound\",\"type\":\"uint256\"},{\"name\":\"numberClaimed\",\"type\":\"uint8\"},{\"name\":\"is_running_clock2\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSeed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getCitizenTicketSpend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZOOM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_PERCENT_FOR_PREVIOUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_slotId\",\"type\":\"uint256\"}],\"name\":\"getCitizenSlot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getLastBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coreContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMostF1Earnerd\",\"outputs\":[{\"name\":\"\",\"type\":\"address[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addCoreContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIMMIT_CLOCK_2_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getCitizenSumSlot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEXTROUND_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getEarlyIncomeByRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTicketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"F1_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MOST_SPENDER_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketSumByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ticketSum\",\"type\":\"uint256\"}],\"name\":\"getEarlyIncomeMark\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getCititzenTicketSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"JACKPOT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_BUY_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PBASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCitizenSlotId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drawWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RDIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendTotalEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_PERCENT_FOR_CURRENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"citizenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_ticket\",\"type\":\"uint256\"}],\"name\":\"getAddressTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCoreContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getEarlyIncomePull\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getResultWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthSpendTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTI_TICKET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coreContractSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DIVIDEND_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DRAW_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_devTeam\",\"type\":\"address[4]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ticketFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ticketTo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creationDate\",\"type\":\"uint256\"}],\"name\":\"BuyATicket\",\"type\":\"event\"}]",
  "bytecode": "608060405266071afd498d000060045560c060405190810160405280601960ff1660ff168152602001600560ff168152602001600560ff168152602001600560ff168152602001600560ff168152602001600560ff1681525060059060066200006a92919062000320565b5060a060405190810160405280600660ff1660ff168152602001600160ff168152602001600160ff168152602001600160ff168152602001600160ff168152506006906005620000bc929190620003c1565b506000601055348015620000cf57600080fd5b5060405160808062005e1d83398101806040528101908091905050806000600481101515620000fa57fe5b60200201516000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060016004811015156200014e57fe5b6020020151600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002600481101515620001a357fe5b6020020151600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003600481101515620001f857fe5b6020020151600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000601081905550635d064b60600f60006010548152602001908152602001600020600d0181905550620002a6610e10603002600f60006010548152602001908152602001600020600d0154620002fe64010000000002620047a4179091906401000000009004565b600f60006010548152602001908152602001600020600e0181905550600f60006010548152602001908152602001600020600e0154600f60006010548152602001908152602001600020601001819055505062000495565b60008082840190508381101515156200031657600080fd5b8091505092915050565b826006601f01602090048101928215620003ae5791602002820160005b838211156200037d57835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026200033d565b8015620003ac5782816101000a81549060ff02191690556001016020816000010492830192600103026200037d565b505b509050620003bd919062000462565b5090565b826005601f016020900481019282156200044f5791602002820160005b838211156200041e57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302620003de565b80156200044d5782816101000a81549060ff02191690556001016020816000010492830192600103026200041e565b505b5090506200045e919062000462565b5090565b6200049291905b808211156200048e57600081816101000a81549060ff02191690555060010162000469565b5090565b90565b61597880620004a56000396000f30060806040526004361061029e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306de62f3146102a357806306fbedbe146102ce57806310313e67146102f957806312e4d3e71461035c578063165035e21461038757806325e0b053146103b257806327532d27146104095780632a6f4623146104345780632cc56efc146104875780632fb893c6146104e85780633187b8711461051357806334d5f37b1461056557806339e7357c146105fd5780634c25c83d1461063c5780634e71d92d1461069d57806358e5bc88146106b457806367594172146106df57806367dd74ca1461070a5780636bf37893146107425780636d6564f6146107c75780637021c15d14610834578063713a9660146108a15780637b71b384146108f45780637bd401b1146109375780638176afda1461096257806384b4144c146109a3578063863e76db146109ce578063878f1e47146109f957806387bb7ae014610a5a5780638a19c8bc14610a855780638cea216314610ab05780639979a28c14610adb5780639a5d381514610b065780639ad01ec814610b5d5780639fe0173814610b9e578063a4650c6c14610bdf578063a4f27d4214610c26578063a6f470ba14610c51578063abc870e814610c7c578063ad2e4a7b14610ca7578063b2185bb114610cf2578063b9e7284714610d09578063c915f0ce14610d34578063c960a3d614610d4b578063cac4977214610d76578063cbcd9c2314610dcd578063d22a20cd14610e44578063d6edb65014610e9f578063db0ddace14610ef6578063de9893c614610f21578063e2ccceb814610fa3578063ede72c1114610fce578063ee5023e514610fff578063ef9952601461102a578063f88c0aa214611055578063fcb38bbc14611080575b600080fd5b3480156102af57600080fd5b506102b86110c7565b6040518082815260200191505060405180910390f35b3480156102da57600080fd5b506102e36110cc565b6040518082815260200191505060405180910390f35b34801561030557600080fd5b50610346600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506110d1565b6040518082815260200191505060405180910390f35b34801561036857600080fd5b50610371611193565b6040518082815260200191505060405180910390f35b34801561039357600080fd5b5061039c611198565b6040518082815260200191505060405180910390f35b3480156103be57600080fd5b506103c761119e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041557600080fd5b5061041e6111c4565b6040518082815260200191505060405180910390f35b34801561044057600080fd5b506104496111c9565b6040518082600460200280838360005b83811015610474578082015181840152602081019050610459565b5050505090500191505060405180910390f35b34801561049357600080fd5b506104d260048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061124a565b6040518082815260200191505060405180910390f35b3480156104f457600080fd5b506104fd6112a8565b6040518082815260200191505060405180910390f35b34801561051f57600080fd5b5061056360048036038101908080606001906003806020026040519081016040528092919082600360200280828437820191505050505091929192905050506112ad565b005b34801561057157600080fd5b506105906004803603810190808035906020019092919050505061150f565b604051808d81526020018c81526020018b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018360ff1660ff168152602001821515151581526020019c5050505050505050505050505060405180910390f35b34801561060957600080fd5b50610612611589565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b34801561064857600080fd5b5061068760048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115b2565b6040518082815260200191505060405180910390f35b3480156106a957600080fd5b506106b2611610565b005b3480156106c057600080fd5b506106c9611ad2565b6040518082815260200191505060405180910390f35b3480156106eb57600080fd5b506106f4611ad8565b6040518082815260200191505060405180910390f35b61072860048036038101908080359060200190929190505050611add565b604051808215151515815260200191505060405180910390f35b34801561074e57600080fd5b506107776004803603810190808035906020019092919080359060200190929190505050612b6b565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b3480156107d357600080fd5b506107f260048036038101908080359060200190929190505050612c34565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561084057600080fd5b5061085f60048036038101908080359060200190929190505050612c9e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108ad57600080fd5b506108b6612cdc565b6040518082600460200280838360005b838110156108e15780820151818401526020810190506108c6565b5050505090500191505060405180910390f35b34801561090057600080fd5b50610935600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d5d565b005b34801561094357600080fd5b5061094c612f82565b6040518082815260200191505060405180910390f35b34801561096e57600080fd5b5061098d60048036038101908080359060200190929190505050612f8f565b6040518082815260200191505060405180910390f35b3480156109af57600080fd5b506109b8612ff4565b6040518082815260200191505060405180910390f35b3480156109da57600080fd5b506109e3612ff9565b6040518082815260200191505060405180910390f35b348015610a0557600080fd5b50610a44600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613002565b6040518082815260200191505060405180910390f35b348015610a6657600080fd5b50610a6f6131ef565b6040518082815260200191505060405180910390f35b348015610a9157600080fd5b50610a9a61324e565b6040518082815260200191505060405180910390f35b348015610abc57600080fd5b50610ac5613254565b6040518082815260200191505060405180910390f35b348015610ae757600080fd5b50610af0613260565b6040518082815260200191505060405180910390f35b348015610b1257600080fd5b50610b47600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613265565b6040518082815260200191505060405180910390f35b348015610b6957600080fd5b50610b886004803603810190808035906020019092919050505061327d565b6040518082815260200191505060405180910390f35b348015610baa57600080fd5b50610bc960048036038101908080359060200190929190505050613323565b6040518082815260200191505060405180910390f35b348015610beb57600080fd5b50610c0a60048036038101908080359060200190929190505050613385565b604051808260ff1660ff16815260200191505060405180910390f35b348015610c3257600080fd5b50610c3b6133ae565b6040518082815260200191505060405180910390f35b348015610c5d57600080fd5b50610c666133b3565b6040518082815260200191505060405180910390f35b348015610c8857600080fd5b50610c916133b8565b6040518082815260200191505060405180910390f35b348015610cb357600080fd5b50610cdc60048036038101908080359060200190929190803590602001909291905050506133bd565b6040518082815260200191505060405180910390f35b348015610cfe57600080fd5b50610d07613437565b005b348015610d1557600080fd5b50610d1e6141ce565b6040518082815260200191505060405180910390f35b348015610d4057600080fd5b50610d496141d4565b005b348015610d5757600080fd5b50610d6061436e565b6040518082815260200191505060405180910390f35b348015610d8257600080fd5b50610d8b614373565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610dd957600080fd5b50610e026004803603810190808035906020019092919080359060200190929190505050614399565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e5057600080fd5b50610e85600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506144e0565b604051808215151515815260200191505060405180910390f35b348015610eab57600080fd5b50610ee0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614500565b6040518082815260200191505060405180910390f35b348015610f0257600080fd5b50610f0b6146a9565b6040518082815260200191505060405180910390f35b348015610f2d57600080fd5b50610f4c600480360381019080803590602001909291905050506146af565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610f8f578082015181840152602081019050610f74565b505050509050019250505060405180910390f35b348015610faf57600080fd5b50610fb8614760565b6040518082815260200191505060405180910390f35b348015610fda57600080fd5b50610fe3614766565b604051808260ff1660ff16815260200191505060405180910390f35b34801561100b57600080fd5b5061101461476b565b6040518082815260200191505060405180910390f35b34801561103657600080fd5b5061103f614771565b6040518082815260200191505060405180910390f35b34801561106157600080fd5b5061106a614776565b6040518082815260200191505060405180910390f35b34801561108c57600080fd5b506110ab6004803603810190808035906020019092919050505061477b565b604051808260ff1660ff16815260200191505060405180910390f35b603081565b603281565b6000806000806000601160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493506010549250851561113d5761113a6001846147a490919063ffffffff16565b92505b8260648501101561114f576064830393505b8390505b82811015611186576111776111688883613002565b836147a490919063ffffffff16565b91508080600101915050611153565b8194505050505092915050565b601181565b610e1081565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600381565b6111d16158d5565b6012600480602002604051908101604052809291908260048015611240576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116111f6575b5050505050905090565b6000600f600084815260200190815260200160002060070160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600481565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561135e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f616c72656164792073657475700000000000000000000000000000000000000081525060200191505060405180910390fd5b81600260038110151561136d57fe5b6020020151600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160006003811015156113c157fe5b6020020151600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600090505b600381101561150357600160096000848460038110151561142857fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600b828260038110151561148e57fe5b602002015190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050808060010191505061140b565b6003600a819055505050565b600f60205280600052604060002060009150905080600001549080600101549080600201549080600301549080600901549080600b01549080600d01549080600e01549080600f0154908060100154908060110160009054906101000a900460ff16908060110160019054906101000a900460ff1690508c565b600042446040518083815260200182815260200192505050604051809103902060019004905090565b6000600f600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3caad03336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156116d357600080fd5b505af11580156116e7573d6000803e3d6000fd5b505050506040513d60208110156116fd57600080fd5b81019080805190602001909291905050501515611782576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6d757374206265206120636974697a656e00000000000000000000000000000081525060200191505060405180910390fd5b60006010541180156117ac57506000600f6000601054815260200190815260200160002060010154145b15156117b757600080fd5b60016010540393506005600f600086815260200190815260200160002060110160009054906101000a900460ff1660ff161015156117f457600080fd5b4261181f603c600f6000888152602001908152602001600020601001546147a490919063ffffffff16565b10151561182b57600080fd5b339250601c60008581526020019081526020016000208390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600f600085815260200190815260200160002060110160009054906101000a900460ff1660ff1691506103e86006836005811015156118e057fe5b602091828204019190069054906101000a900460ff1660ff16600f60006001601054038152602001908152602001600020600201540281151561191f57fe5b0490508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611968573d6000803e3d6000fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a56baf2b84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611a2e57600080fd5b505af1158015611a42573d6000803e3d6000fd5b505050506001600f600086815260200190815260200160002060110160009054906101000a900460ff1601600f600086815260200190815260200160002060110160006101000a81548160ff021916908360ff160217905550611ab2603c600502426147a490919063ffffffff16565b600f60008681526020019081526020016000206010018190555050505050565b6103e881565b601e81565b600080600080600080600080600080600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3caad03336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611bac57600080fd5b505af1158015611bc0573d6000803e3d6000fd5b505050506040513d6020811015611bd657600080fd5b81019080805190602001909291905050501515611c5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6d757374206265206120636974697a656e00000000000000000000000000000081525060200191505060405180910390fd5b600f60006010548152602001908152602001600020600d015442111515611cea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4e6f742073746172742c206261636b206c6174657220706c656173650000000081525060200191505060405180910390fd5b600f60006010548152602001908152602001600020600e015442108015611d4b57506000600f60006010548152602001908152602001600020600f01541480611d4a5750600f60006010548152602001908152602001600020600f015442105b5b1515611dbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f726f756e64206f7665720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b349a503399508a611dce6131ef565b8e02141515611e6b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f4e6f7420656e6f7567682065746820666f722063757272656e74207175616e7481526020017f697479000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611e9b610e10601802600f60006010548152602001908152602001600020600d01546147a490919063ffffffff16565b42101515611f8457611eb7601e8e6147c590919063ffffffff16565b9850611ed1610e10601802426147a490919063ffffffff16565b611efc8a600f60006010548152602001908152602001600020600e01546147a490919063ffffffff16565b1115611f3b57611f1a610e10601802426147a490919063ffffffff16565b600f60006010548152602001908152602001600020600e0181905550611f83565b611f6689600f60006010548152602001908152602001600020600e01546147a490919063ffffffff16565b600f60006010548152602001908152602001600020600e01819055505b5b611f8e8a8c614803565b6000600f6000601054815260200190815260200160002060050160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561206957600f600060105481526020019081526020016000206004018a90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b600f6000601054815260200190815260200160002060110160019054906101000a900460ff16156120ae576120ab600360ff168e6147c590919063ffffffff16565b9c505b6120da6001600f60006010548152602001908152602001600020600901546147a490919063ffffffff16565b975087600f600060105481526020019081526020016000206009018190555089600f6000601054815260200190815260200160002060080160008a815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600f600060105481526020019081526020016000206001015401600f6000601054815260200190815260200160002060080160008a8152602001908152602001600020600101819055506121d1600f600060105481526020019081526020016000206001015461327d565b96506121e68d886147c590919063ffffffff16565b9650612213600f60006010548152602001908152602001600020600b0154886147a490919063ffffffff16565b600f60006010548152602001908152602001600020600b0181905550612297600f60006010548152602001908152602001600020600c0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054886147a490919063ffffffff16565b600f60006010548152602001908152602001600020600c0160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061231b8d600f60006010548152602001908152602001600020600101546147a490919063ffffffff16565b600f600060105481526020019081526020016000206001018190555061234c8d600d546147a490919063ffffffff16565b600d819055506123a48d600e60008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546147a490919063ffffffff16565b600e60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f6000601054815260200190815260200160002060010154600f6000601054815260200190815260200160002060080160008a8152602001908152602001600020600201819055506124988d600f6000601054815260200190815260200160002060050160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546147a490919063ffffffff16565b600f6000601054815260200190815260200160002060050160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600f60006010548152602001908152602001600020600a0160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208890806001815401808255809150509060018203906000526020600020016000909192909190915055508973ffffffffffffffffffffffffffffffffffffffff167f4313b3bbdd04270dfa566c8c2fb1c66cf00b7a99b609187a72e060b32c5da279600f6000601054815260200190815260200160002060080160008b815260200190815260200160002060010154600f6000601054815260200190815260200160002060080160008c8152602001908152602001600020600201544260405180848152602001838152602001828152602001935050505060405180910390a2606460148c0281151561263557fe5b049550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d21c5f1876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b1580156126be57600080fd5b505af11580156126d2573d6000803e3d6000fd5b5050505050606460118c028115156126e657fe5b049450600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ad3dc60868c6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b1580156127a657600080fd5b505af11580156127ba573d6000803e3d6000fd5b50505050506064600a8c028115156127ce57fe5b049350600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba604da6856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561285757600080fd5b505af115801561286b573d6000803e3d6000fd5b5050505050606460038c0281151561287f57fe5b0492506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f193505050501580156128e9573d6000803e3d6000fd5b50606460328c028115156128f957fe5b049150612927600f6000601054815260200190815260200160002060020154836147a490919063ffffffff16565b600f600060105481526020019081526020016000206002018190555061296e600f60006010548152602001908152602001600020600301548c6147a490919063ffffffff16565b600f600060105481526020019081526020016000206003018190555060001515600f6000601054815260200190815260200160002060110160019054906101000a900460ff161515148015612a3d575060006010541480156129f15750681043561a8829300000600f600060105481526020019081526020016000206002015410155b80612a3c57506000601054118015612a3b5750600f6000600160105403815260200190815260200160002060020154600f6000601054815260200190815260200160002060020154115b5b5b15612aa8576001600f6000601054815260200190815260200160002060110160016101000a81548160ff021916908315150217905550612a8b610e10603002426147a490919063ffffffff16565b600f60006010548152602001908152602001600020600f01819055505b600f60006010548152602001908152602001600020600f01549050600f60006010548152602001908152602001600020600e0154600f60006010548152602001908152602001600020600f01541180612b1957506000600f60006010548152602001908152602001600020600f0154145b15612b3a57600f60006010548152602001908152602001600020600e015490505b80600f600060105481526020019081526020016000206010018190555060019b505050505050505050505050919050565b6000806000612b786158f8565b600f60008781526020019081526020016000206008016000868152602001908152602001600020606060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b6000600f60008381526020019081526020016000206008016000600f600085815260200190815260200160002060090154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600b81815481101515612cad57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612ce46158d5565b6016600480602002604051908101604052809291908260048015612d53576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612d09575b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646d696e20726571756972656400000000000000000000000000000000000081525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515612eb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b6001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600b8190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600a6000828254019250508190555050565b681043561a882930000081565b600080339050600f6000848152602001908152602001600020600a0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050915050919050565b601481565b610e1060180281565b600080600080600080600187039450600087141561301f57600094505b6000935060646014600f60008a8152602001908152602001600020600301540281151561304857fe5b04925060646046840281151561305a57fe5b0491506064601e840281151561306c57fe5b0490506000600f6000898152602001908152602001600020600b0154111561311f5761311c600f6000898152602001908152602001600020600b015461310e84600f60008c8152602001908152602001600020600c0160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546147c590919063ffffffff16565b614d6e90919063ffffffff16565b93505b6000600f6000878152602001908152602001600020600b015411156131e1576131de6131cf600f6000888152602001908152602001600020600b01546131c184600f60008b8152602001908152602001600020600c0160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546147c590919063ffffffff16565b614d6e90919063ffffffff16565b856147a490919063ffffffff16565b93505b839550505050505092915050565b6000600f6000601054815260200190815260200160002060110160019054906101000a900460ff16156132455760646004613228614d98565b603203600454020281151561323957fe5b0460045401905061324b565b60045490505b90565b60105481565b670de0b6b3a764000081565b600581565b600e6020528060005260406000206000915090505481565b600080600061c3506103e8850281151561329357fe5b0491506132bb826132ad84856147c590919063ffffffff16565b6147c590919063ffffffff16565b90506132e360306132d583846147c590919063ffffffff16565b6147c590919063ffffffff16565b90506132fd60056103e80a82614d6e90919063ffffffff16565b9050806103e8600102016103e860180281151561331657fe5b0460010192505050919050565b600080339050600f600084815260200190815260200160002060050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b60058160068110151561339457fe5b60209182820401919006915054906101000a900460ff1681565b601481565b601481565b601881565b600080339050600f6000858152602001908152602001600020600a0160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561342357fe5b906000526020600020015491505092915050565b6000806000806000806000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3caad03336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156134ff57600080fd5b505af1158015613513573d6000803e3d6000fd5b505050506040513d602081101561352957600080fd5b810190808051906020019092919050505015156135ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f6d757374206265206120636974697a656e00000000000000000000000000000081525060200191505060405180910390fd5b426135db603c600f60006010548152602001908152602001600020601001546147a490919063ffffffff16565b1015156135e757600080fd5b600f600060105481526020019081526020016000206008016000600f6000601054815260200190815260200160002060090154815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169650601c600060105481526020019081526020016000208790806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060646014600f6000601054815260200190815260200160002060020154028115156136ee57fe5b0495508673ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015613737573d6000803e3d6000fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a56baf2b88886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156137fd57600080fd5b505af1158015613811573d6000803e3d6000fd5b505050506012600160048110151561382557fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60646005600f60006010548152602001908152602001600020600201540281151561388757fe5b049081150290604051600060405180830381858888f193505050501580156138b3573d6000803e3d6000fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a56baf2b6012600160048110151561390257fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646005600f60006010548152602001908152602001600020600201540281151561394b57fe5b046040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156139d157600080fd5b505af11580156139e5573d6000803e3d6000fd5b50505050601660016004811015156139f957fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60646004600f600060105481526020019081526020016000206002015402811515613a5b57fe5b049081150290604051600060405180830381858888f19350505050158015613a87573d6000803e3d6000fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a56baf2b60166001600481101515613ad657fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646004600f600060105481526020019081526020016000206002015402811515613b1f57fe5b046040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015613ba557600080fd5b505af1158015613bb9573d6000803e3d6000fd5b50505050601c6000601054815260200190815260200160002060126001600481101515613be257fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050601c6000601054815260200190815260200160002060166001600481101515613c8c57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050613d19611589565b67ffffffffffffffff169450600093505b60068410156140b1577382026b6597901af122681f098bdc895028860fd163655b08eb86600f60006010548152602001908152602001600020600101546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b158015613dbe57600080fd5b505af4158015613dd2573d6000803e3d6000fd5b505050506040513d6020811015613de857600080fd5b810190808051906020019092919050505092506000831415613e2057600f600060105481526020019081526020016000206001015492505b613e2c60105484614399565b91508173ffffffffffffffffffffffffffffffffffffffff166108fc613ead6064613e9f600589600681101515613e5f57fe5b602091828204019190069054906101000a900460ff1660ff16600f60006010548152602001908152602001600020600201546147c590919063ffffffff16565b614d6e90919063ffffffff16565b9081150290604051600060405180830381858888f19350505050158015613ed8573d6000803e3d6000fd5b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a56baf2b83613f7d6064613f6f60058a600681101515613f2f57fe5b602091828204019190069054906101000a900460ff1660ff16600f60006010548152602001908152602001600020600201546147c590919063ffffffff16565b614d6e90919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561400257600080fd5b505af1158015614016573d6000803e3d6000fd5b50505050601c600060105481526020019081526020016000208290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600a8581151561409f57fe5b04850194508380600101945050613d2a565b60646014600f6000601054815260200190815260200160002060020154028115156140d857fe5b049050601260006140e99190615930565b601660006140f79190615930565b60016010540160108190555061411b610e10600c02426147a490919063ffffffff16565b600f60006010548152602001908152602001600020600d018190555080600f600060105481526020019081526020016000206002018190555061416c610e10603c02426147a490919063ffffffff16565b600f60006010548152602001908152602001600020600e0181905550600f60006010548152602001908152602001600020600e0154600f60006010548152602001908152602001600020601001819055506141c5611610565b50505050505050565b61c35081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515614298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646d696e20726571756972656400000000000000000000000000000000000081525060200191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ba604da63073ffffffffffffffffffffffffffffffffffffffff16316040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561433557600080fd5b505af1158015614349573d6000803e3d6000fd5b50505050506000600f6000601054815260200190815260200160002060020181905550565b604681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060009250600f60008781526020019081526020016000206009015491505b8183111515614489576143dc6002838501614d6e90919063ffffffff16565b90506143e9868287614e63565b1561444057600f6000878152602001908152602001600020600801600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693506144d7565b600f600087815260200190815260200160002060080160008281526020019081526020016000206001015485101561447d57600181039150614484565b6001810192505b6143bd565b600f6000878152602001908152602001600020600801600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693505b50505092915050565b60096020528060005260406000206000915054906101000a900460ff1681565b600080600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615156145c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f61646d696e20726571756972656400000000000000000000000000000000000081525060200191505060405180910390fd5b601160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054925060105460648401101561461f5760646010540392505b8290505b6010548110156146585761464961463a8683613002565b836147a490919063ffffffff16565b91508080600101915050614623565b601054601160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550819350505050919050565b600d5481565b6060601054821015156146c157600080fd5b601c600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561475457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161470a575b50505050509050919050565b600c5481565b600381565b600a5481565b600a81565b603c81565b60068160058110151561478a57fe5b60209182820401919006915054906101000a900460ff1681565b60008082840190508381101515156147bb57600080fd5b8091505092915050565b60008060008414156147da57600091506147fc565b82840290508284828115156147eb57fe5b041415156147f857600080fd5b8091505b5092915050565b6000806000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639566587386866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156148cd57600080fd5b505af11580156148e1573d6000803e3d6000fd5b50505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635a7db533866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156149a257600080fd5b505af11580156149b6573d6000803e3d6000fd5b505050506040513d60208110156149cc57600080fd5b81019080805190602001909291905050509250600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015614a995750670de0b6b3a7640000600f6000601054815260200190815260200160002060060160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b15614c8257670de0b6b3a7640000614b0f85600f6000601054815260200190815260200160002060060160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546147a490919063ffffffff16565b1115614bb357614b97670de0b6b3a7640000614b8986600f6000601054815260200190815260200160002060060160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546147a490919063ffffffff16565b614ec290919063ffffffff16565b9050614bac8185614ec290919063ffffffff16565b9150614bb7565b8391505b614c1f82600f6000601054815260200190815260200160002060070160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546147a490919063ffffffff16565b600f6000601054815260200190815260200160002060070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614c8183614ee3565b5b614cea84600f6000601054815260200190815260200160002060060160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546147a490919063ffffffff16565b600f6000601054815260200190815260200160002060060160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614d4c856153dc565b614d6184600c546147a490919063ffffffff16565b600c819055505050505050565b600080600083111515614d8057600080fd5b8284811515614d8b57fe5b0490508091505092915050565b6000600f6000601054815260200190815260200160002060110160019054906101000a900460ff1615614e5b576000614e06610e10614df842600f60006010548152602001908152602001600020600f0154614ec290919063ffffffff16565b614d6e90919063ffffffff16565b1115614e5257614e4b610e10614e3d42600f60006010548152602001908152602001600020600f0154614ec290919063ffffffff16565b614d6e90919063ffffffff16565b9050614e60565b60009050614e60565b603090505b90565b600080600f60008681526020019081526020016000206008016000858152602001908152602001600020905082816001015411158015614ea7575080600201548311155b15614eb55760019150614eba565b600091505b509392505050565b600080838311151515614ed457600080fd5b82840390508091505092915050565b6000806000806000600f6000601054815260200190815260200160002060070160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549450600193505b60048410156153d4576000601685600481101515614f6257fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061507d57506000601685600481101515614fb257fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561507c575084600f60006010548152602001908152602001600020600701600060168760048110151561501d57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b5b156153c7576000601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414158015615110575083601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b1561511a576153d4565b6000601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156151f35760006016601a60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546004811015156151b357fe5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60168460048110151561520257fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506001840190505b600481108015615254575060008373ffffffffffffffffffffffffffffffffffffffff1614155b1561532f5760168160048110151561526857fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508260168260048110151561529c57fe5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550819250808060010191505061522d565b8560168560048110151561533f57fe5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083601a60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506153d4565b8380600101945050614f48565b505050505050565b6000806000806000600f6000601054815260200190815260200160002060060160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549450600193505b60048410156158cd57600060128560048110151561545b57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480615576575060006012856004811015156154ab57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015615575575084600f60006010548152602001908152602001600020600601600060128760048110151561551657fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b5b156158c0576000601b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414158015615609575083601b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b15615613576158cd565b6000601b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156156ec5760006012601b60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546004811015156156ac57fe5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6012846004811015156156fb57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506001840190505b60048110801561574d575060008373ffffffffffffffffffffffffffffffffffffffff1614155b156158285760128160048110151561576157fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508260128260048110151561579557fe5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508192508080600101915050615726565b8560128560048110151561583857fe5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083601b60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506158cd565b8380600101945050615441565b505050505050565b608060405190810160405280600490602082028038833980820191505090505090565b606060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b50600081556001016000815560010160008155600101600090555600a165627a7a723058208abc689ac215815cf961f8ef8708b0e5c01493f1f2805831747fb2fd70da6f92002900000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab78500000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab785000000000000000000000000a06cd23aa37c39095d8cfe3a0fd2654331e631230000000000000000000000001bdf504b2ecf7a43c3ec5847ae950292ca2883c1",
  "constructorArguments": "00000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab78500000000000000000000000062dcd99f4a4439223e1735f4290f55852e1ab785000000000000000000000000a06cd23aa37c39095d8cfe3a0fd2654331e631230000000000000000000000001bdf504b2ecf7a43c3ec5847ae950292ca2883c1",
  "libraries": [
    {
      "name": "Helper",
      "address": "0x82026b6597901af122681f098bdc895028860fd1"
    }
  ]
}