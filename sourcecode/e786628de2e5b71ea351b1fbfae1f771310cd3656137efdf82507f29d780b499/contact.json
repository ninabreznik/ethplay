{
  "address": "0x0a6460ee3a05ea700e77d63dbb19528fbaab0d4f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HlorToken",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-30\n*/\n\npragma solidity ^0.5.6;\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n}\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole, ERC20 {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract PausableToken is ERC20, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from,address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseAllowance(spender, addedValue);\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseAllowance(spender, subtractedValue);\n    }\n}\n\n\n/**\n * @title MintableToken\n * @dev ERC20 minting logic\n */\ncontract MintableToken is PausableToken, MinterRole {\n    event MintFinished();\n    bool public mintingFinished = false;\n\n    modifier canMint() {\n        require(!mintingFinished);\n        _;\n    } \n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused canMint returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n    /**\n    * @dev Function to stop minting new tokens.\n    * @return True if the operation was successful.\n    */\n    function finishMinting() onlyMinter public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\n\ncontract HlorToken is MintableToken {\n    string public constant name = \"HLOR\";\n    string public constant symbol = \"HLOR\";\n    uint32 public constant decimals = 18;\n}\n\n// Copyright (C) 2017  MixBytes, LLC\n\n// Licensed under the Apache License, Version 2.0 (the \"License\").\n// You may not use this file except in compliance with the License.\n\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\n\n// Code taken from https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol\n// Audit, refactoring and improvements by github.com/Eenae\n\n// @authors:\n// Gav Wood <[email protected]>\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\n// single, or, crucially, each of a number of, designated owners.\n// usage:\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\n// interior is executed.\n\n/// note: during any ownership changes all pending operations (waiting for more signatures) are cancelled\ncontract multiowned {\n\n    // TYPES\n\n    // struct for the status of a pending operation.\n    struct MultiOwnedOperationPendingState {\n        // count of confirmations needed\n        uint yetNeeded;\n\n        // bitmap of confirmations where owner #ownerIndex's decision corresponds to 2**ownerIndex bit\n        uint ownersDone;\n\n        // position of this operation key in m_multiOwnedPendingIndex\n        uint index;\n    }\n\n    // EVENTS\n\n    event Confirmation(address owner, bytes32 operation);\n    event Revoke(address owner, bytes32 operation);\n    event FinalConfirmation(address owner, bytes32 operation);\n\n    // some others are in the case of an owner changing.\n    event OwnerChanged(address oldOwner, address newOwner);\n    event OwnerAdded(address newOwner);\n    event OwnerRemoved(address oldOwner);\n\n    // the last one is emitted if the required signatures change\n    event RequirementChanged(uint newRequirement);\n\n    // MODIFIERS\n\n    // simple single-sig function modifier.\n    modifier onlyowner {\n        require(isOwner(msg.sender));\n        _;\n    }\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\n    // that later attempts can be realised as the same underlying operation and\n    // thus count as confirmations.\n    modifier onlymanyowners(bytes32 _operation) {\n        if (confirmAndCheck(_operation)) {\n            _;\n        }\n        // Even if required number of confirmations has't been collected yet,\n        // we can't throw here - because changes to the state have to be preserved.\n        // But, confirmAndCheck itself will throw in case sender is not an owner.\n    }\n\n    modifier validNumOwners(uint _numOwners) {\n        require(_numOwners > 0 && _numOwners <= c_maxOwners);\n        _;\n    }\n\n    modifier multiOwnedValidRequirement(uint _required, uint _numOwners) {\n        require(_required > 0 && _required <= _numOwners);\n        _;\n    }\n\n    modifier ownerExists(address _address) {\n        require(isOwner(_address));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address _address) {\n        require(!isOwner(_address));\n        _;\n    }\n\n    modifier multiOwnedOperationIsActive(bytes32 _operation) {\n        require(isOperationActive(_operation));\n        _;\n    }\n\n    // METHODS\n\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\n    // as well as the selection of addresses capable of confirming them (msg.sender is not added to the owners!).\n    constructor(address[] memory _owners, uint _required)\n        public\n        validNumOwners(_owners.length)\n        multiOwnedValidRequirement(_required, _owners.length)\n    {\n        assert(c_maxOwners <= 255);\n\n        m_numOwners = _owners.length;\n        m_multiOwnedRequired = _required;\n\n        for (uint i = 0; i < _owners.length; ++i)\n        {\n            address owner = _owners[i];\n            // invalid and duplicate addresses are not allowed\n            require(address(0) != owner && !isOwner(owner) /* not isOwner yet! */);\n\n            uint currentOwnerIndex = checkOwnerIndex(i + 1 /* first slot is unused */);\n            m_owners[currentOwnerIndex] = owner;\n            m_ownerIndex[owner] = currentOwnerIndex;\n        }\n\n        assertOwnersAreConsistent();\n    }\n\n    /// @notice replaces an owner `_from` with another `_to`.\n    /// @param _from address of owner to replace\n    /// @param _to address of new owner\n    // All pending operations will be canceled!\n    function changeOwner(address _from, address _to)\n        external\n        ownerExists(_from)\n        ownerDoesNotExist(_to)\n        onlymanyowners(keccak256(msg.data))\n    {\n        assertOwnersAreConsistent();\n\n        clearPending();\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_from]);\n        m_owners[ownerIndex] = _to;\n        m_ownerIndex[_from] = 0;\n        m_ownerIndex[_to] = ownerIndex;\n\n        assertOwnersAreConsistent();\n        emit OwnerChanged(_from, _to);\n    }\n\n    /// @notice adds an owner\n    /// @param _owner address of new owner\n    // All pending operations will be canceled!\n    function addOwner(address _owner)\n        external\n        ownerDoesNotExist(_owner)\n        validNumOwners(m_numOwners + 1)\n        onlymanyowners(keccak256(msg.data))\n    {\n        assertOwnersAreConsistent();\n\n        clearPending();\n        m_numOwners++;\n        m_owners[m_numOwners] = _owner;\n        m_ownerIndex[_owner] = checkOwnerIndex(m_numOwners);\n\n        assertOwnersAreConsistent();\n        emit OwnerAdded(_owner);\n    }\n\n    /// @notice removes an owner\n    /// @param _owner address of owner to remove\n    // All pending operations will be canceled!\n    function removeOwner(address _owner)\n        external\n        ownerExists(_owner)\n        validNumOwners(m_numOwners - 1)\n        multiOwnedValidRequirement(m_multiOwnedRequired, m_numOwners - 1)\n        onlymanyowners(keccak256(msg.data))\n    {\n        assertOwnersAreConsistent();\n\n        clearPending();\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[_owner]);\n        m_owners[ownerIndex] = address(0);\n        m_ownerIndex[_owner] = 0;\n        //make sure m_numOwners is equal to the number of owners and always points to the last owner\n        reorganizeOwners();\n\n        assertOwnersAreConsistent();\n        emit OwnerRemoved(_owner);\n    }\n\n    /// @notice changes the required number of owner signatures\n    /// @param _newRequired new number of signatures required\n    // All pending operations will be canceled!\n    function changeRequirement(uint _newRequired)\n        external\n        multiOwnedValidRequirement(_newRequired, m_numOwners)\n        onlymanyowners(keccak256(msg.data))\n    {\n        m_multiOwnedRequired = _newRequired;\n        clearPending();\n        emit RequirementChanged(_newRequired);\n    }\n\n    /// @notice Gets an owner by 0-indexed position\n    /// @param ownerIndex 0-indexed owner position\n    function getOwner(uint ownerIndex) public view returns (address) {\n        return m_owners[ownerIndex + 1];\n    }\n\n    /// @notice Gets owners\n    /// @return memory array of owners\n    function getOwners() public view returns (address[] memory) {\n        address[] memory result = new address[](m_numOwners);\n        for (uint i = 0; i < m_numOwners; i++)\n            result[i] = getOwner(i);\n\n        return result;\n    }\n\n    /// @notice checks if provided address is an owner address\n    /// @param _addr address to check\n    /// @return true if it's an owner\n    function isOwner(address _addr) public view returns (bool) {\n        return m_ownerIndex[_addr] > 0;\n    }\n\n    /// @notice Tests ownership of the current caller.\n    /// @return true if it's an owner\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\n    // addOwner/changeOwner and to isOwner.\n    function amIOwner() external view onlyowner returns (bool) {\n        return true;\n    }\n\n    /// @notice Revokes a prior confirmation of the given operation\n    /// @param _operation operation value, typically keccak256(msg.data)\n    function revoke(bytes32 _operation)\n        external\n        multiOwnedOperationIsActive(_operation)\n        onlyowner\n    {\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\n        MultiOwnedOperationPendingState memory pending = m_multiOwnedPending[_operation];\n        require(pending.ownersDone & ownerIndexBit > 0);\n\n        assertOperationIsConsistent(_operation);\n\n        pending.yetNeeded++;\n        pending.ownersDone -= ownerIndexBit;\n\n        assertOperationIsConsistent(_operation);\n        emit Revoke(msg.sender, _operation);\n    }\n\n    /// @notice Checks if owner confirmed given operation\n    /// @param _operation operation value, typically keccak256(msg.data)\n    /// @param _owner an owner address\n    function hasConfirmed(bytes32 _operation, address _owner)\n        external\n        view\n        multiOwnedOperationIsActive(_operation)\n        ownerExists(_owner)\n        returns (bool)\n    {\n        return !(m_multiOwnedPending[_operation].ownersDone & makeOwnerBitmapBit(_owner) == 0);\n    }\n\n    // INTERNAL METHODS\n\n    function confirmAndCheck(bytes32 _operation)\n        private\n        onlyowner\n        returns (bool)\n    {\n        if (512 == m_multiOwnedPendingIndex.length)\n            // In case m_multiOwnedPendingIndex grows too much we have to shrink it: otherwise at some point\n            // we won't be able to do it because of block gas limit.\n            // Yes, pending confirmations will be lost. Dont see any security or stability implications.\n            // TODO use more graceful approach like compact or removal of clearPending completely\n            clearPending();\n\n        MultiOwnedOperationPendingState memory pending = m_multiOwnedPending[_operation];\n\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\n        if (! isOperationActive(_operation)) {\n            // reset count of confirmations needed.\n            pending.yetNeeded = m_multiOwnedRequired;\n            // reset which owners have confirmed (none) - set our bitmap to 0.\n            pending.ownersDone = 0;\n            pending.index = m_multiOwnedPendingIndex.length++;\n            m_multiOwnedPendingIndex[pending.index] = _operation;\n            assertOperationIsConsistent(_operation);\n        }\n\n        // determine the bit to set for this owner.\n        uint ownerIndexBit = makeOwnerBitmapBit(msg.sender);\n        // make sure we (the message sender) haven't confirmed this operation previously.\n        if (pending.ownersDone & ownerIndexBit == 0) {\n            // ok - check if count is enough to go ahead.\n            assert(pending.yetNeeded > 0);\n            if (pending.yetNeeded == 1) {\n                // enough confirmations: reset and run interior.\n                delete m_multiOwnedPendingIndex[m_multiOwnedPending[_operation].index];\n                delete m_multiOwnedPending[_operation];\n                emit FinalConfirmation(msg.sender, _operation);\n                return true;\n            }\n            else\n            {\n                // not enough: record that this owner in particular confirmed.\n                pending.yetNeeded--;\n                pending.ownersDone |= ownerIndexBit;\n                assertOperationIsConsistent(_operation);\n                emit Confirmation(msg.sender, _operation);\n            }\n        }\n    }\n\n    // Reclaims free slots between valid owners in m_owners.\n    // TODO given that its called after each removal, it could be simplified.\n    function reorganizeOwners() private {\n        uint free = 1;\n        while (free < m_numOwners)\n        {\n            // iterating to the first free slot from the beginning\n            while (free < m_numOwners && m_owners[free] != address(0)) free++;\n\n            // iterating to the first occupied slot from the end\n            while (m_numOwners > 1 && m_owners[m_numOwners] == address(0)) m_numOwners--;\n\n            // swap, if possible, so free slot is located at the end after the swap\n            if (free < m_numOwners && m_owners[m_numOwners] != address(0) && m_owners[free] == address(0))\n            {\n                // owners between swapped slots should't be renumbered - that saves a lot of gas\n                m_owners[free] = m_owners[m_numOwners];\n                m_ownerIndex[m_owners[free]] = free;\n                m_owners[m_numOwners] = address(0);\n            }\n        }\n    }\n\n    function clearPending() private onlyowner {\n        uint length = m_multiOwnedPendingIndex.length;\n        // TODO block gas limit\n        for (uint i = 0; i < length; ++i) {\n            if (m_multiOwnedPendingIndex[i] != 0)\n                delete m_multiOwnedPending[m_multiOwnedPendingIndex[i]];\n        }\n        delete m_multiOwnedPendingIndex;\n    }\n\n    function checkOwnerIndex(uint ownerIndex) private pure returns (uint) {\n        assert(0 != ownerIndex && ownerIndex <= c_maxOwners);\n        return ownerIndex;\n    }\n\n    function makeOwnerBitmapBit(address owner) private view returns (uint) {\n        uint ownerIndex = checkOwnerIndex(m_ownerIndex[owner]);\n        return 2 ** ownerIndex;\n    }\n\n    function isOperationActive(bytes32 _operation) private view returns (bool) {\n        return 0 != m_multiOwnedPending[_operation].yetNeeded;\n    }\n\n\n    function assertOwnersAreConsistent() private view {\n        assert(m_numOwners > 0);\n        assert(m_numOwners <= c_maxOwners);\n        assert(m_owners[0] == address(0));\n        assert(0 != m_multiOwnedRequired && m_multiOwnedRequired <= m_numOwners);\n    }\n\n    function assertOperationIsConsistent(bytes32 _operation) private view {\n        MultiOwnedOperationPendingState memory pending = m_multiOwnedPending[_operation];\n        assert(0 != pending.yetNeeded);\n        assert(m_multiOwnedPendingIndex[pending.index] == _operation);\n        assert(pending.yetNeeded <= m_multiOwnedRequired);\n    }\n\n\n    // FIELDS\n\n    uint constant c_maxOwners = 250;\n\n    // the number of owners that must confirm the same operation before it is run.\n    uint256 public m_multiOwnedRequired;\n\n\n    // pointer used to find a free slot in m_owners\n    uint public m_numOwners;\n\n    // list of owners (addresses),\n    // slot 0 is unused so there are no owner which index is 0.\n    // TODO could we save space at the end of the array for the common case of <10 owners? and should we?\n    address[256] internal m_owners;\n\n    // index on the list of owners to allow reverse lookup: owner address => index in m_owners\n    mapping(address => uint) internal m_ownerIndex;\n\n\n    // the ongoing operations.\n    mapping(bytes32 => MultiOwnedOperationPendingState) internal m_multiOwnedPending;\n    bytes32[] internal m_multiOwnedPendingIndex;\n}\n\n\n// The TokenController is a proxy contract for implementation of multiowned control under token.\ncontract TokenController is multiowned {\n\n    HlorToken public token;\n\n    constructor(address[] memory _owners, uint _required, address _tokenAddress) \n    multiowned(_owners, _required) public {\n        token = HlorToken(_tokenAddress);\n    }\n \n    function mint(address _to, uint256 _amount) onlyowner public returns (bool)\n    {   \n        return token.mint(_to, _amount);\n    }\n\n    function pause() onlymanyowners(keccak256(msg.data)) public {\n        token.pause();\n    }\n\n    function unpause() onlymanyowners(keccak256(msg.data)) public {\n        token.unpause();\n    }\n\n    function addMinter(address account) onlymanyowners(keccak256(msg.data)) public {\n        token.addMinter(account);\n    }\n\n    function addPauser(address account) onlymanyowners(keccak256(msg.data)) public {\n       token.addPauser(account);\n    }\n\n    function finishMinting() onlymanyowners(keccak256(msg.data)) public returns (bool) {\n        token.finishMinting();\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600660006101000a81548160ff02191690831515021790555062000030336200006260201b60201c565b6000600460006101000a81548160ff0219169083151502179055506200005c33620000c360201b60201c565b6200026d565b6200007d8160006200012460201b62001a801790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b620000de8160056200012460201b62001a801790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200015f57600080fd5b620001718282620001da60201b60201c565b156200017c57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200021657600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b58806200027d6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80636ef8d66d116100c3578063983b2d561161007c578063983b2d56146105d45780639865027514610618578063a457c2d714610622578063a9059cbb14610688578063aa271e1a146106ee578063dd62ed3e1461074a5761014d565b80636ef8d66d1461047f57806370a08231146104895780637d64bcb4146104e157806382dc1ec4146105035780638456cb591461054757806395d89b41146105515761014d565b8063313ce56711610115578063313ce56714610301578063395093511461032b5780633f4ba83a1461039157806340c10f191461039b57806346fbf68e146104015780635c975abb1461045d5761014d565b806305d2035b1461015257806306fdde0314610174578063095ea7b3146101f757806318160ddd1461025d57806323b872dd1461027b575b600080fd5b61015a6107c2565b604051808215151515815260200191505060405180910390f35b61017c6107d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101bc5780820151818401526020810190506101a1565b50505050905090810190601f1680156101e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102436004803603604081101561020d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061080e565b604051808215151515815260200191505060405180910390f35b61026561083c565b6040518082815260200191505060405180910390f35b6102e76004803603606081101561029157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610846565b604051808215151515815260200191505060405180910390f35b610309610876565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b6103776004803603604081101561034157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061087b565b604051808215151515815260200191505060405180910390f35b6103996108a9565b005b6103e7600480360360408110156103b157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610954565b604051808215151515815260200191505060405180910390f35b6104436004803603602081101561041757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109b0565b604051808215151515815260200191505060405180910390f35b6104656109cd565b604051808215151515815260200191505060405180910390f35b6104876109e4565b005b6104cb6004803603602081101561049f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109ef565b6040518082815260200191505060405180910390f35b6104e9610a38565b604051808215151515815260200191505060405180910390f35b6105456004803603602081101561051957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a9a565b005b61054f610ab8565b005b610559610b64565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561059957808201518184015260208101905061057e565b50505050905090810190601f1680156105c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610616600480360360208110156105ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b9d565b005b610620610bbb565b005b61066e6004803603604081101561063857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bc6565b604051808215151515815260200191505060405180910390f35b6106d46004803603604081101561069e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bf4565b604051808215151515815260200191505060405180910390f35b6107306004803603602081101561070457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c22565b604051808215151515815260200191505060405180910390f35b6107ac6004803603604081101561076057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c3f565b6040518082815260200191505060405180910390f35b600660009054906101000a900460ff1681565b6040518060400160405280600481526020017f484c4f520000000000000000000000000000000000000000000000000000000081525081565b6000600460009054906101000a900460ff161561082a57600080fd5b6108348383610cc6565b905092915050565b6000600354905090565b6000600460009054906101000a900460ff161561086257600080fd5b61086d848484610df1565b90509392505050565b601281565b6000600460009054906101000a900460ff161561089757600080fd5b6108a18383610ff9565b905092915050565b6108b2336109b0565b6108bb57600080fd5b600460009054906101000a900460ff166108d457600080fd5b6000600460006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600061095f33610c22565b61096857600080fd5b600460009054906101000a900460ff161561098257600080fd5b600660009054906101000a900460ff161561099c57600080fd5b6109a6838361122e565b6001905092915050565b60006109c682600061138290919063ffffffff16565b9050919050565b6000600460009054906101000a900460ff16905090565b6109ed33611414565b565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610a4333610c22565b610a4c57600080fd5b6001600660006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b610aa3336109b0565b610aac57600080fd5b610ab58161146e565b50565b610ac1336109b0565b610aca57600080fd5b600460009054906101000a900460ff1615610ae457600080fd5b6001600460006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6040518060400160405280600481526020017f484c4f520000000000000000000000000000000000000000000000000000000081525081565b610ba633610c22565b610baf57600080fd5b610bb8816114c8565b50565b610bc433611522565b565b6000600460009054906101000a900460ff1615610be257600080fd5b610bec838361157c565b905092915050565b6000600460009054906101000a900460ff1615610c1057600080fd5b610c1a83836117b1565b905092915050565b6000610c3882600561138290919063ffffffff16565b9050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d0157600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000610e8282600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117c890919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f0d8484846117e8565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561103457600080fd5b6110c382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119b690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561126857600080fd5b61127d816003546119b690919063ffffffff16565b6003819055506112d581600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119b690919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113bd57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6114288160006119d590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b611482816000611a8090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6114dc816005611a8090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6115368160056119d590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115b757600080fd5b61164682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117c890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60006117be3384846117e8565b6001905092915050565b6000828211156117d757600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561182257600080fd5b61187481600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117c890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061190981600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119b690919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000808284019050838110156119cb57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a0f57600080fd5b611a198282611382565b611a2257600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611aba57600080fd5b611ac48282611382565b15611ace57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505056fea165627a7a72305820088ac88ddecea41788fda30a9e1bde1a29afb0a52aab42e5f4cdcf15d1d533340029"
}