{
  "address": "0xdaf70f060dd0fe95d203bb620193d6283e6bf859",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Nutrilife OU Token",
  "contractName": "NLCToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\n//\npragma solidity 0.4.23;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal balances;\n\n    uint256 internal totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        assert(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        assert(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        assert(token.approve(spender, value));\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\ncontract NLCToken is StandardToken {\n    ///\n    using SafeMath for uint256;\n\n    ///\n    string public constant name = \"Nutrilife OU\";\n    string public constant symbol = \"NLC\";\n    uint8 public constant decimals = 18;  \n    \n    /// The owner of this address will distrbute the locked and vested tokens\n    address public nlcAdminAddress;\n    uint256 public weiRaised;\n    uint256 public rate;\n\n    modifier onlyAdmin {\n        require(msg.sender == nlcAdminAddress);\n        _;\n    }\n    \n    /**\n    * Event for token purchase logging\n    * @param investor invest into the token\n    * @param value weis paid for purchase\n    */\n    event Investment(address indexed investor, uint256 value);\n    event TokenPurchaseRequestFromInvestment(address indexed investor, uint256 token);\n    event ApproveTokenPurchaseRequest(address indexed investor, uint256 token);\n    \n    /// Initial tokens to be allocated (500 million)\n    uint256 public constant INITIAL_SUPPLY = 500000000 * 10**uint256(decimals);\n    mapping(address => uint256) public _investorsVault;\n    mapping(address => uint256) public _investorsInvestmentInToken;\n\n    ///\n    constructor(address _nlcAdminAddress, uint256 _rate) public {\n        require(_nlcAdminAddress != address(0));\n        \n        nlcAdminAddress = _nlcAdminAddress;\n        totalSupply_ = INITIAL_SUPPLY;\n        rate = _rate;\n\n        balances[_nlcAdminAddress] = totalSupply_;\n    }\n\n\n    /**\n    * @dev fallback function ***DO NOT OVERRIDE***\n    */\n    function () external payable {\n        investFund(msg.sender);\n    }\n\n    /**\n      * @dev low level token purchase ***DO NOT OVERRIDE***\n      * @param _investor Address performing the token purchase\n      */\n    function investFund(address _investor) public payable {\n        //\n        uint256 weiAmount = msg.value;\n        \n        _preValidatePurchase(_investor, weiAmount);\n        \n        weiRaised = weiRaised.add(weiAmount);\n        \n        _trackVault(_investor, weiAmount);\n        \n        _forwardFunds();\n\n        emit Investment(_investor, weiAmount);\n    }\n    \n    /**\n    * @dev Gets the invested fund specified address.\n    * @param _investor The address to query the the balance of invested amount.\n    * @return An uint256 representing the invested amount by the passed address.\n    */\n    function investmentOf(address _investor) public view returns (uint256) {\n        return _investorsVault[_investor];\n    }\n\n    /**\n    * @dev token request from invested ETH.\n    * @param _ethInWei investor want to invest ether amount.\n    * @return An uint256 representing the invested amount by the passed address.\n    */\n    function purchaseTokenFromInvestment(uint256 _ethInWei) public {\n            ///\n            require(_investorsVault[msg.sender] != 0);\n\n            ///\n            uint256 _token = _getTokenAmount(_ethInWei);\n            \n            _investorsVault[msg.sender] = _investorsVault[msg.sender].sub(_ethInWei);\n\n            _investorsInvestmentInToken[msg.sender] = _investorsInvestmentInToken[msg.sender].add(_token);\n            \n            emit TokenPurchaseRequestFromInvestment(msg.sender, _token);\n    }\n\n    /**\n    * @dev Gets the investment token request for token.\n    * @param _investor The address to query the the balance of invested amount.\n    * @return An uint256 representing the invested amount by the passed address.\n    */\n    function tokenInvestmentRequest(address _investor) public view returns (uint256) {\n        return _investorsInvestmentInToken[_investor];\n    }\n\n    /**\n    * @dev Gets the invested fund specified address.\n    * @param _investor The address to query the the balance of invested amount.\n    * @return An uint256 representing the invested amount by the passed address.\n    */\n    function approveTokenInvestmentRequest(address _investor) public onlyAdmin {\n        //\n        uint256 token = _investorsInvestmentInToken[_investor];\n        require(token != 0);\n        //\n        super.transfer(_investor, _investorsInvestmentInToken[_investor]);\n        \n        _investorsInvestmentInToken[_investor] = _investorsInvestmentInToken[_investor].sub(token);\n        \n        emit ApproveTokenPurchaseRequest(_investor, token);\n    }\n\n   /**\n    * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n    * @param _beneficiary Address performing the token purchase\n    * @param _weiAmount Value in wei involved in the purchase\n    */\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\n        require(_beneficiary != address(0));\n        require(_weiAmount != 0);\n        \n        // must be greater than 1/2 ETH.\n        require(_weiAmount >= 0.5 ether);\n    }\n\n   /**\n    * @dev tracing of incoming fund from investors.\n    * @param _investor Address performing the token purchase\n    * @param _weiAmount Value in wei involved in the purchase\n    */\n    function _trackVault(address _investor, uint256 _weiAmount) internal {\n        _investorsVault[_investor] = _investorsVault[_investor].add(_weiAmount);\n    }\n\n    /**\n    * @dev Determines how ETH is stored/forwarded on investment.\n    */\n    function _forwardFunds() internal {\n        nlcAdminAddress.transfer(msg.value);\n    }\n\n    /**\n    * @dev Override to extend the way in which ether is converted to tokens.\n    * @param _weiAmount Value in wei to be converted into tokens\n    * @return Number of tokens that can be purchased with the specified _weiAmount\n    */\n    function _getTokenAmount(uint256 _weiAmount)\n        internal view returns (uint256)\n    {\n        return _weiAmount.mul(rate).div(1 ether);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051604080611dea8339810180604052810190808051906020019092919080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561007957600080fd5b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260ff16600a0a631dcd650002600181905550806005819055506001546000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050611cbf8061012b6000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610133578063095ea7b3146101c357806315b8daf61461022857806318160ddd1461025e5780632330162b1461028957806323b872dd146102e05780632c4e722e146103655780632e00ce4b146103905780632ff2e9dc146103bd578063313ce567146103e85780634042b66f146104195780634428c2401461044457806358308fbf1461049b57806366188463146104f257806370a082311461055757806395c08f92146105ae57806395d89b41146106055780639ff456ce14610695578063a9059cbb146106ec578063b787aef714610751578063d73dd62314610794578063dd62ed3e146107f9575b61013133610870565b005b34801561013f57600080fd5b506101486108fe565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018857808201518184015260208101905061016d565b50505050905090810190601f1680156101b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101cf57600080fd5b5061020e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610937565b604051808215151515815260200191505060405180910390f35b61025c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610870565b005b34801561026a57600080fd5b50610273610a29565b6040518082815260200191505060405180910390f35b34801561029557600080fd5b506102ca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a33565b6040518082815260200191505060405180910390f35b3480156102ec57600080fd5b5061034b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a7c565b604051808215151515815260200191505060405180910390f35b34801561037157600080fd5b5061037a610e36565b6040518082815260200191505060405180910390f35b34801561039c57600080fd5b506103bb60048036038101908080359060200190929190505050610e3c565b005b3480156103c957600080fd5b506103d2611013565b6040518082815260200191505060405180910390f35b3480156103f457600080fd5b506103fd611024565b604051808260ff1660ff16815260200191505060405180910390f35b34801561042557600080fd5b5061042e611029565b6040518082815260200191505060405180910390f35b34801561045057600080fd5b50610485600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061102f565b6040518082815260200191505060405180910390f35b3480156104a757600080fd5b506104b0611047565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104fe57600080fd5b5061053d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061106d565b604051808215151515815260200191505060405180910390f35b34801561056357600080fd5b50610598600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112fe565b6040518082815260200191505060405180910390f35b3480156105ba57600080fd5b506105ef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611346565b6040518082815260200191505060405180910390f35b34801561061157600080fd5b5061061a61138f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561065a57808201518184015260208101905061063f565b50505050905090810190601f1680156106875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106a157600080fd5b506106d6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113c8565b6040518082815260200191505060405180910390f35b3480156106f857600080fd5b50610737600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113e0565b604051808215151515815260200191505060405180910390f35b34801561075d57600080fd5b50610792600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115ff565b005b3480156107a057600080fd5b506107df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117e0565b604051808215151515815260200191505060405180910390f35b34801561080557600080fd5b5061085a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119dc565b6040518082815260200191505060405180910390f35b600034905061087f8282611a63565b61089481600454611aca90919063ffffffff16565b6004819055506108a48282611ae8565b6108ac611b81565b8173ffffffffffffffffffffffffffffffffffffffff167ffe123a1efb6782dccd20e9790951adcfab3cd0e11b85a6f06d8b9222d299a0a3826040518082815260200191505060405180910390a25050565b6040805190810160405280600c81526020017f4e757472696c696665204f55000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610ab957600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b0657600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b9157600080fd5b610be2826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bec90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c75826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aca90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d4682600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bec90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60055481565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515610e8c57600080fd5b610e9582611c05565b9050610ee982600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bec90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f7e81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aca90919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f4d747e6f787e600d1e2f7bfdac318c005ee8611d9815aa1148cce759aaec07ea826040518082815260200191505060405180910390a25050565b601260ff16600a0a631dcd65000281565b601281565b60045481565b60066020528060005260406000206000915090505481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083111561117e576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611212565b6111918382611bec90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f4e4c43000000000000000000000000000000000000000000000000000000000081525081565b60076020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561141d57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561146a57600080fd5b6114bb826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bec90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061154e826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aca90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561165d57600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141515156116af57600080fd5b6116f882600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113e0565b5061174b81600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bec90919063ffffffff16565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f266414f11ef897d81d30af838253ad1674cd9298db9f5cd0ffc4fc23f878fcda826040518082815260200191505060405180910390a25050565b600061187182600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aca90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611a9f57600080fd5b60008114151515611aaf57600080fd5b6706f05b59d3b200008110151515611ac657600080fd5b5050565b6000808284019050838110151515611ade57fe5b8091505092915050565b611b3a81600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aca90919063ffffffff16565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611be9573d6000803e3d6000fd5b50565b6000828211151515611bfa57fe5b818303905092915050565b6000611c36670de0b6b3a7640000611c2860055485611c3d90919063ffffffff16565b611c7890919063ffffffff16565b9050919050565b6000806000841415611c525760009150611c71565b8284029050828482811515611c6357fe5b04141515611c6d57fe5b8091505b5092915050565b6000808284811515611c8657fe5b04905080915050929150505600a165627a7a723058201adf49f415b047d091aaa906f23fd65fc82e6e0bdfbec32fca612dc09b09e52700290000000000000000000000007a6dd2d7938cc22b9931a1759d74920be170913b00000000000000000000000000000000000000000000014542ba12a337c00000",
  "constructorArguments": "0000000000000000000000007a6dd2d7938cc22b9931a1759d74920be170913b00000000000000000000000000000000000000000000014542ba12a337c00000"
}