{
  "address": "0x63c339fd5aec526d6d2fb6acbec1d5847f704fa2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FieldCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-26\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/**\n* @title Crowdsale\n* @dev Crowdsale is a base contract for managing a token crowdsale\n* behavior.\n*/\ncontract Crowdsale is Ownable{\n  using SafeMath for uint256;\n\n  // Address where funds are collected\n  address public wallet;\n\n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  bool public isFinalized = false;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  event Finalized();\n\n  /**\n  * Event for token purchase logging\n  * @param purchaser who paid for the tokens\n  * @param beneficiary who got the tokens\n  * @param value weis paid for purchase\n  * @param amount amount of tokens purchased\n  */\n  event TokenPurchase(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n  * @dev Reverts if not in crowdsale time range.\n  */\n  modifier onlyWhileOpen {\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n    _;\n  }\n  \n  /**\n  * @param _wallet Address where collected funds will be forwarded to\n  * @param _openingTime Crowdsale opening time\n  * @param _closingTime Crowdsale closing time\n  */\n  constructor(address _wallet, uint256 _openingTime, uint256 _closingTime) public {\n    require(_wallet != address(0));\n    require(_openingTime >= block.timestamp);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n\n    wallet = _wallet;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n  * @dev fallback function ***DO NOT OVERRIDE***\n  */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n  * @dev low level token purchase ***DO NOT OVERRIDE***\n  * @param _beneficiary Address performing the token purchase\n  */\n  function buyTokens(address _beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(\n      msg.sender,\n      _beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _forwardFunds();\n  }\n\n  /**\n  * @dev Must be called after crowdsale ends, to do some extra finalization\n  * work. Calls the contract's finalization function.\n  */\n  function finalize() public onlyOwner {\n    require(!isFinalized);\n    require(hasClosed());\n\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n  * @dev Validation of an incoming purchase.\n  * @param _beneficiary Address performing the token purchase\n  * @param _weiAmount Value in wei involved in the purchase\n  */\n  function _preValidatePurchase(\n    address _beneficiary,\n    uint256 _weiAmount\n  )\n    internal view\n    onlyWhileOpen\n  {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n  }\n\n  /**\n  * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n  * @param _beneficiary Address performing the token purchase\n  * @param _tokenAmount Number of tokens to be emitted\n  */\n   function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal;\n\n  /**\n  * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n  * @param _beneficiary Address receiving the tokens\n  * @param _tokenAmount Number of tokens to be purchased\n  */\n  function _processPurchase(\n    address _beneficiary,\n    uint256 _tokenAmount\n  )\n    internal\n  {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n  * @dev Determines how ETH is stored/forwarded on purchases.\n  */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  /**\n  * @dev Override to extend the way in which ether is converted to tokens.\n  * @param weiAmount Value in wei to be converted into tokens\n  * @return Number of tokens that can be purchased with the specified _weiAmount\n  */\n  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256);\n\n  /**\n  * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n  * @return Whether crowdsale period has elapsed\n  */\n  function hasClosed() public view returns (bool) {\n    return block.timestamp > closingTime;\n  }\n\n}\n\ncontract FieldCoin is MintableToken, BurnableToken{\n\n    using SafeMath for uint256;\n    \n    //name of token\n    string public name;\n    //token symbol\n    string public symbol;\n    //decimals in token\n    uint8 public decimals;\n    //address of bounty wallet\n    address public bountyWallet;\n    //address of team wallet\n    address public teamWallet;\n    //flag to set token release true=> token is ready for transfer\n    bool public transferEnabled;\n    //token available for offering\n    uint256 public TOKEN_OFFERING_ALLOWANCE = 770e6 * 10 **18;//770 million(sale+bonus)\n    // Address of token offering\n    address public tokenOfferingAddr;\n    //address to collect tokens when land is transferred\n    address public landCollectorAddr;\n\n    mapping(address => bool) public transferAgents;\n    //mapping for blacklisted address\n    mapping(address => bool) private blacklist;\n\n    /**\n    * Check if transfer is allowed\n    *\n    * Permissions:\n    *                                                       Owner  OffeirngContract    Others\n    * transfer (before transferEnabled is true)               y            n              n\n    * transferFrom (before transferEnabled is true)           y            y              y\n    * transfer/transferFrom after transferEnabled is true     y            n              y\n    */    \n    modifier canTransfer(address sender) {\n        require(transferEnabled || transferAgents[sender], \"transfer is not enabled or sender is not allowed\");\n          _;\n    }\n\n    /**\n    * Check if token offering address is set or not\n    */\n    modifier onlyTokenOfferingAddrNotSet() {\n        require(tokenOfferingAddr == address(0x0), \"token offering address is already set\");\n        _;\n    }\n\n    /**\n    * Check if land collector address is set or not\n    */\n    modifier onlyWhenLandCollectporAddressIsSet() {\n        require(landCollectorAddr != address(0x0), \"land collector address is not set\");\n        _;\n    }\n\n\n    /**\n    * Check if address is a valid destination to transfer tokens to\n    * - must not be zero address\n    * - must not be the token address\n    * - must not be the owner's address\n    * - must not be the token offering contract address\n    */\n    modifier validDestination(address to) {\n        require(to != address(0x0), \"receiver can't be zero address\");\n        require(to != address(this), \"receiver can't be token address\");\n        require(to != owner, \"receiver can't be owner\");\n        require(to != address(tokenOfferingAddr), \"receiver can't be token offering address\");\n        _;\n    }\n\n    /**\n    * @dev Constuctor of the contract\n    *\n    */\n    constructor () public {\n        name    =   \"Fieldcoin\";\n        symbol  =   \"FLC\";\n        decimals    =   18;  \n        totalSupply_ =   1000e6 * 10  **  uint256(decimals); //1000 million\n        owner   =   msg.sender;\n        balances[owner] = totalSupply_;\n    }\n\n    /**\n    * @dev set bounty wallet\n    * @param _bountyWallet address of bounty wallet.\n    *\n    */\n    function setBountyWallet (address _bountyWallet) public onlyOwner returns (bool) {\n        require(_bountyWallet != address(0x0), \"bounty address can't be zero\");\n        if(bountyWallet == address(0x0)){  \n            bountyWallet = _bountyWallet;\n            balances[bountyWallet] = 20e6 * 10   **  uint256(decimals); //20 million\n            balances[owner] = balances[owner].sub(20e6 * 10   **  uint256(decimals));\n        }else{\n            address oldBountyWallet = bountyWallet;\n            bountyWallet = _bountyWallet;\n            balances[bountyWallet] = balances[oldBountyWallet];\n        }\n        return true;\n    }\n\n    /**\n    * @dev set team wallet\n    * @param _teamWallet address of bounty wallet.\n    *\n    */\n    function setTeamWallet (address _teamWallet) public onlyOwner returns (bool) {\n        require(_teamWallet != address(0x0), \"team address can't be zero\");\n        if(teamWallet == address(0x0)){  \n            teamWallet = _teamWallet;\n            balances[teamWallet] = 90e6 * 10   **  uint256(decimals); //90 million\n            balances[owner] = balances[owner].sub(90e6 * 10   **  uint256(decimals));\n        }else{\n            address oldTeamWallet = teamWallet;\n            teamWallet = _teamWallet;\n            balances[teamWallet] = balances[oldTeamWallet];\n        }\n        return true;\n    }\n\n    /**\n    * @dev transfer token to a specified address (written due to backward compatibility)\n    * @param to address to which token is transferred\n    * @param value amount of tokens to transfer\n    * return bool true=> transfer is succesful\n    */\n    function transfer(address to, uint256 value) canTransfer(msg.sender) validDestination(to) public returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param from address from which token is transferred \n    * @param to address to which token is transferred\n    * @param value amount of tokens to transfer\n    * @return bool true=> transfer is succesful\n    */\n    function transferFrom(address from, address to, uint256 value) canTransfer(msg.sender) validDestination(to) public returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    /**\n    * @dev add addresses to the blacklist\n    * @return true if address was added to the blacklist,\n    * false if address were already in the blacklist\n    */\n    function addBlacklistAddress(address addr) public onlyOwner {\n        require(!isBlacklisted(addr), \"address is already blacklisted\");\n        require(addr != address(0x0), \"blacklisting address can't be zero\");\n        // blacklisted so they can withdraw\n        blacklist[addr] = true;\n    }\n\n    /**\n    * @dev Set token offering to approve allowance for offering contract to distribute tokens\n    *\n    * @param offeringAddr Address of token offerng contract i.e., fieldcoinsale contract\n    * @param amountForSale Amount of tokens for sale, set 0 to max out\n    */\n    function setTokenOffering(address offeringAddr, uint256 amountForSale) external onlyOwner onlyTokenOfferingAddrNotSet {\n        require (offeringAddr != address(0x0), \"offering address can't be zero\");\n        require(!transferEnabled, \"transfer should be diabled\");\n\n        uint256 amount = (amountForSale == 0) ? TOKEN_OFFERING_ALLOWANCE : amountForSale;\n        require(amount <= TOKEN_OFFERING_ALLOWANCE);\n\n        approve(offeringAddr, amount);\n        tokenOfferingAddr = offeringAddr;\n        //start the transfer for offeringAddr\n        setTransferAgent(tokenOfferingAddr, true);\n\n    }\n\n    /**\n    * @dev set land collector address\n    *\n    */\n    function setLandCollector(address collectorAddr) public onlyOwner {\n        require (collectorAddr != address(0x0), \"land collecting address can't be set to zero\");\n        require(!transferEnabled,  \"transfer should be diabled\");\n        landCollectorAddr = collectorAddr;\n    }\n\n\n    /**\n    * @dev release tokens for transfer\n    *\n    */\n    function enableTransfer() public onlyOwner {\n        transferEnabled = true;\n        // End the offering\n        approve(tokenOfferingAddr, 0);\n        //stop the transfer for offeringAddr\n        setTransferAgent(tokenOfferingAddr, false);\n    }\n\n    /**\n    * @dev Set transfer agent to true for transfer tokens for private investor and exchange\n    * @param _addr who will be allowd for transfer\n    * @param _allowTransfer true=>allowed\n    *\n    */\n    function setTransferAgent(address _addr, bool _allowTransfer) public onlyOwner {\n        transferAgents[_addr] = _allowTransfer;\n    }\n\n    /**\n    * @dev withdraw if KYC not verified\n    * @param _investor investor whose tokens are to be withdrawn\n    * @param _tokens amount of tokens to be withdrawn\n    */\n    function _withdraw(address _investor, uint256 _tokens) external{\n        require (msg.sender == tokenOfferingAddr, \"sender must be offering address\");\n        require (isBlacklisted(_investor), \"address is not whitelisted\");\n        balances[owner] = balances[owner].add(_tokens);\n        balances[_investor] = balances[_investor].sub(_tokens);\n        balances[_investor] = 0;\n    }\n\n    /**\n    * @dev buy land during ICO\n    * @param _investor investor whose tokens are to be transferred\n    * @param _tokens amount of tokens to be transferred\n    */\n    function _buyLand(address _investor, uint256 _tokens) external onlyWhenLandCollectporAddressIsSet{\n        require (!transferEnabled, \"transfer should be diabled\");\n        require (msg.sender == tokenOfferingAddr, \"sender must be offering address\");\n        balances[landCollectorAddr] = balances[landCollectorAddr].add(_tokens);\n        balances[_investor] = balances[_investor].sub(_tokens);\n    }\n\n   /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n    function burn(uint256 _value) public {\n        require(transferEnabled || msg.sender == owner, \"transfer is not enabled or sender is not owner\");\n        super.burn(_value);\n    }\n\n    /**\n    * @dev check address is blacklisted or not\n    * @param _addr who will be checked\n    * @return true=> if blacklisted, false=> if not\n    *\n    */\n    function isBlacklisted(address _addr) public view returns(bool){\n        return blacklist[_addr];\n    }\n\n}\n\ncontract FieldCoinSale is Crowdsale, Pausable{\n\n    using SafeMath for uint256;\n\n    //To store tokens supplied during CrowdSale\n    uint256 public totalSaleSupply = 600000000 *10 **18; // 600 million tokens\n    //price of token in cents\n    uint256 public tokenCost = 5; //5 cents i.e., .5$\n    //1 eth = usd in cents, eg: 1 eth = 107.91$ so, 1 eth = =107,91 cents\n    uint256 public ETH_USD;\n    //min contribution \n    uint256 public minContribution = 10000; //100,00 cents i.e., 100$\n    //max contribution \n    uint256 public maxContribution = 100000000; //100 million cents i.e., 1 million dollar\n    //count for bonus\n    uint256 public milestoneCount;\n    //flag to check bonus is initialized or not\n    bool public initialized = false;\n    //total number of bonus tokens\n    uint256 public bonusTokens = 170e6 * 10 ** 18; //170 millions\n    //tokens for sale\n    uint256 public tokensSold = 0;\n    //object of FieldCoin\n    FieldCoin private objFieldCoin;\n\n    struct Milestone {\n        uint256 bonus;\n        uint256 total;\n    }\n\n    Milestone[6] public milestones;\n    \n    //Structure to store token sent and wei received by the buyer of tokens\n    struct Investor {\n        uint256 weiReceived;\n        uint256 tokenSent;\n        uint256 bonusSent;\n    }\n\n    //investors indexed by their ETH address\n    mapping(address => Investor) public investors;\n\n    //event triggered when tokens are withdrawn\n    event Withdrawn();\n\n    /**\n    * @dev Constuctor of the contract\n    *\n    */\n    constructor (uint256 _openingTime, uint256 _closingTime, address _wallet, address _token, uint256 _ETH_USD, uint256 _minContribution, uint256 _maxContribution) public\n    Crowdsale(_wallet, _openingTime, _closingTime) {\n        require(_ETH_USD > 0, \"ETH USD rate should be greater than 0\");\n        minContribution = (_minContribution == 0) ? minContribution : _minContribution;\n        maxContribution = (_maxContribution == 0) ? maxContribution : _maxContribution;\n        ETH_USD = _ETH_USD;\n        objFieldCoin = FieldCoin(_token);\n    }\n\n    /**\n    * @dev Set eth usd rate\n    * @param _ETH_USD stores ether value in cents\n    *       i.e., 1 ETH = 107.01 $ so, 1 ETH = 10701 cents\n    *\n    */\n    function setETH_USDRate(uint256 _ETH_USD) public onlyOwner{\n        require(_ETH_USD > 0, \"ETH USD rate should be greater than 0\");\n        ETH_USD = _ETH_USD;\n    }\n\n    /**\n    * @dev Set new coinbase(wallet) address\n    * @param _newWallet wallet address\n    *\n    */\n    function setNewWallet(address _newWallet) onlyOwner public {\n        wallet = _newWallet;\n    }\n\n    /**\n    * @dev Set new minimum contribution\n    * @param _minContribution minimum contribution in cents\n    *\n    */\n    function changeMinContribution(uint256 _minContribution) public onlyOwner {\n        require(_minContribution > 0, \"min contribution should be greater than 0\");\n        minContribution = _minContribution;\n    }\n\n    /**\n    * @dev Set new maximum contribution\n    * @param _maxContribution maximum contribution in cents\n    *\n    */\n    function changeMaxContribution(uint256 _maxContribution) public onlyOwner {\n        require(_maxContribution > 0, \"max contribution should be greater than 0\");\n        maxContribution = _maxContribution;\n    }\n\n    /**\n    * @dev Set new token cost\n    * @param _tokenCost price of 1 token in cents\n    */\n    function changeTokenCost(uint256 _tokenCost) public onlyOwner {\n        require(_tokenCost > 0, \"token cost can not be zero\");\n        tokenCost = _tokenCost;\n    }\n\n    /**\n    * @dev Set new opening time\n    * @param _openingTime time in UTX\n    *\n    */\n    function changeOpeningTIme(uint256 _openingTime) public onlyOwner {\n        require(_openingTime >= block.timestamp, \"opening time is less than current time\");\n        openingTime = _openingTime;\n    }\n\n    /**\n    * @dev Set new closing time\n    * @param _closingTime time in UTX\n    *\n    */\n    function changeClosingTime(uint256 _closingTime) public onlyOwner {\n        require(_closingTime >= openingTime, \"closing time is less than opening time\");\n        closingTime = _closingTime;\n    }\n\n    /**\n    * @dev initialize bonuses\n    * @param _bonus tokens bonus in array depends on their slab\n    * @param _total slab of tokens bonuses in array\n    */\n    function initializeMilestones(uint256[] _bonus, uint256[] _total) public onlyOwner {\n        require(_bonus.length > 0 && _bonus.length == _total.length);\n        for(uint256 i = 0; i < _bonus.length; i++) {\n            milestones[i] = Milestone({ total: _total[i], bonus: _bonus[i] });\n        }\n        milestoneCount = _bonus.length;\n        initialized = true;\n    }\n\n    /**\n    * @dev function processing tokens and bonuses\n    * will over ride the function in Crowdsale.sol\n    * @param _beneficiary who will receive tokens\n    * @param _tokenAmount amount of tokens to send without bonus\n    *\n    */\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n        require(tokensRemaining() >= _tokenAmount, \"token need to be transferred is more than the available token\");\n        uint256 _bonusTokens = _processBonus(_tokenAmount);\n        bonusTokens = bonusTokens.sub(_bonusTokens);\n        tokensSold = tokensSold.add(_tokenAmount);\n        // accumulate total token to be given\n        uint256 totalNumberOfTokenTransferred = _tokenAmount.add(_bonusTokens);\n        //initializing structure for the address of the beneficiary\n        Investor storage _investor = investors[_beneficiary];\n        //Update investor's balance\n        _investor.tokenSent = _investor.tokenSent.add(totalNumberOfTokenTransferred);\n        _investor.weiReceived = _investor.weiReceived.add(msg.value);\n        _investor.bonusSent = _investor.bonusSent.add(_bonusTokens);\n        super._processPurchase(_beneficiary, totalNumberOfTokenTransferred);\n    }\n\n     /**\n    * @dev send token manually to people who invest other than ether\n    * @param _beneficiary Address performing the token purchase\n    * @param weiAmount amount of wei invested\n    */\n    function createTokenManually(address _beneficiary, uint256 weiAmount) external onlyOwner {\n        // calculate token amount to be created\n        uint256 tokens = _getTokenAmount(weiAmount);\n        \n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n    \n        _processPurchase(_beneficiary, tokens);\n        emit TokenPurchase(\n          msg.sender,\n          _beneficiary,\n          weiAmount,\n          tokens\n        );\n    }\n\n    /**\n    * @dev Source of tokens.\n    * @param _beneficiary Address performing the token purchase\n    * @param _tokenAmount Number of tokens to be emitted\n    */\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n        if(!objFieldCoin.transferFrom(objFieldCoin.owner(), _beneficiary, _tokenAmount)){\n            revert(\"token delivery failed\");\n        }\n    }\n\n    /**\n    * @dev withdraw if KYC not verified\n    */\n    function withdraw() external{\n        Investor storage _investor = investors[msg.sender];\n        //transfer investor's balance to owner\n        objFieldCoin._withdraw(msg.sender, _investor.tokenSent);\n        //return the ether to the investor balance\n        msg.sender.transfer(_investor.weiReceived);\n        //set everything to zero after transfer successful\n        _investor.weiReceived = 0;\n        _investor.tokenSent = 0;\n        _investor.bonusSent = 0;\n        emit Withdrawn();\n    }\n\n    /**\n    * @dev buy land during ICO\n    * @param _tokens amount of tokens to be transferred\n    */\n    function buyLand(uint256 _tokens) external{\n        Investor memory _investor = investors[msg.sender];\n        require (_tokens <= objFieldCoin.balanceOf(msg.sender).sub(_investor.bonusSent), \"token to buy land is more than the available number of tokens\");\n        //transfer investor's balance to land collector\n        objFieldCoin._buyLand(msg.sender, _tokens);\n    }\n\n    /*\n    * @dev Function to add Ether in the contract \n    */\n    function fundContractForWithdraw()external payable{\n    }\n\n    /**\n    * @dev increase bonus allowance if exhausted\n    * @param _value amount of token bonus to increase in 18 decimal places\n    *\n    */\n    function increaseBonusAllowance(uint256 _value) public onlyOwner {\n        bonusTokens = bonusTokens.add(_value);\n    }\n    \n    // -----------------------------------------\n    // Getter interface\n    // -----------------------------------------\n\n    /**\n    * @dev Validation of an incoming purchase.\n    * @param _beneficiary Address performing the token purchase\n    * @param _weiAmount Value in wei involved in the purchase\n    */\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) whenNotPaused internal view{\n        require (!hasClosed(), \"Sale has been ended\");\n        require(initialized, \"Bonus is not initialized\");\n        require(_weiAmount >= getMinContributionInWei(), \"amount is less than min contribution\");\n        require(_weiAmount <= getMaxContributionInWei(), \"amount is more than max contribution\");\n        super._preValidatePurchase(_beneficiary, _weiAmount);\n    }\n\n    function _processBonus(uint256 _tokenAmount) internal view returns(uint256){\n        uint256 currentMilestoneIndex = getCurrentMilestoneIndex();\n        uint256 _bonusTokens = 0;\n        //get bonus tier\n        Milestone memory _currentMilestone = milestones[currentMilestoneIndex];\n        if(bonusTokens > 0 && _currentMilestone.bonus > 0) {\n          _bonusTokens = _tokenAmount.mul(_currentMilestone.bonus).div(100);\n          _bonusTokens = bonusTokens < _bonusTokens ? bonusTokens : _bonusTokens;\n        }\n        return _bonusTokens;\n    }\n\n    /**\n    * @dev check whether tokens are remaining are not\n    *\n    */\n    function tokensRemaining() public view returns(uint256) {\n        return totalSaleSupply.sub(tokensSold);\n    }\n\n    /**\n    * @dev gives the bonus milestone index for bonus colculation\n    * @return the bonus milestones index\n    *\n    */\n    function getCurrentMilestoneIndex() public view returns (uint256) {\n        for(uint256 i = 0; i < milestoneCount; i++) {\n            if(tokensSold < milestones[i].total) {\n                return i;\n            }\n        }\n    }\n\n    /**\n    * @dev gives the token price w.r.t to wei sent \n    * @return the amount of tokens to be given based on wei received\n    *\n    */\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n        return _weiAmount.mul(ETH_USD).div(tokenCost);\n    }\n\n    /**\n    * @dev check whether token is left or sale is ended\n    * @return true=> sale ended or false=> not ended\n    *\n    */\n    function hasClosed() public view returns (bool) {\n        uint256 tokensLeft = tokensRemaining();\n        return tokensLeft <= 1e18 || super.hasClosed();\n    }\n\n    /**\n    * @dev gives minimum contribution in wei\n    * @return the min contribution value in wei\n    *\n    */\n    function getMinContributionInWei() public view returns(uint256){\n        return (minContribution.mul(1e18)).div(ETH_USD);\n    }\n\n    /**\n    * @dev gives max contribution in wei\n    * @return the max contribution value in wei\n    *\n    */\n    function getMaxContributionInWei() public view returns(uint256){\n        return (maxContribution.mul(1e18)).div(ETH_USD);\n    }\n\n    /**\n    * @dev gives usd raised based on wei raised\n    * @return the usd value in cents\n    *\n    */\n    function usdRaised() public view returns (uint256) {\n        return weiRaised.mul(ETH_USD).div(1e18);\n    }\n    \n}",
  "bytecode": "60806040526000600360146101000a81548160ff0219169083151502179055506b027cedd7a40462be420000006008553480156200003c57600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600981526020017f4669656c64636f696e000000000000000000000000000000000000000000000081525060049080519060200190620000cb92919062000206565b506040805190810160405280600381526020017f464c430000000000000000000000000000000000000000000000000000000000815250600590805190602001906200011992919062000206565b506012600660006101000a81548160ff021916908360ff160217905550600660009054906101000a900460ff1660ff16600a0a633b9aca000260018190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600154600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620002b5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024957805160ff19168380011785556200027a565b828001600101855582156200027a579182015b82811115620002795782518255916020019190600101906200025c565b5b5090506200028991906200028d565b5090565b620002b291905b80821115620002ae57600081600090555060010162000294565b5090565b90565b61437b80620002c56000396000f3006080604052600436106101b7576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302f652a3146101bc57806305d2035b1461020b57806306fdde031461023a578063095ea7b3146102ca5780631525ff7d1461032f57806318160ddd1461038a5780631db37766146103b557806323b872dd146103f8578063313ce5671461047d57806340c10f19146104ae57806342966c68146105135780634cd412d5146105405780634d2c29a01461056f57806359927044146105c6578063661884631461061d57806369068acf1461068257806370a08231146106d9578063715018a614610730578063726f63f6146107475780637d64bcb414610794578063867c2857146107c35780638a9d38391461081e5780638da5cb5b14610879578063900ce6ba146108d0578063934b0dc01461091357806395d89b4114610960578063a9059cbb146109f0578063b790a77b14610a55578063d73dd62314610aa2578063dd62ed3e14610b07578063e576052014610b7e578063f0d4753e14610bd5578063f1b50c1d14610c00578063f2fde38b14610c17578063fe575a8714610c5a575b600080fd5b3480156101c857600080fd5b50610209600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610cb5565b005b34801561021757600080fd5b50610220610d6c565b604051808215151515815260200191505060405180910390f35b34801561024657600080fd5b5061024f610d7f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561028f578082015181840152602081019050610274565b50505050905090810190601f1680156102bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102d657600080fd5b50610315600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e1d565b604051808215151515815260200191505060405180910390f35b34801561033b57600080fd5b50610370600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f0f565b604051808215151515815260200191505060405180910390f35b34801561039657600080fd5b5061039f611336565b6040518082815260200191505060405180910390f35b3480156103c157600080fd5b506103f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611340565b005b34801561040457600080fd5b50610463600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611530565b604051808215151515815260200191505060405180910390f35b34801561048957600080fd5b50610492611943565b604051808260ff1660ff16815260200191505060405180910390f35b3480156104ba57600080fd5b506104f9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611956565b604051808215151515815260200191505060405180910390f35b34801561051f57600080fd5b5061053e60048036038101908080359060200190929190505050611b3c565b005b34801561054c57600080fd5b50610555611c4a565b604051808215151515815260200191505060405180910390f35b34801561057b57600080fd5b50610584611c5d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d257600080fd5b506105db611c83565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561062957600080fd5b50610668600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ca9565b604051808215151515815260200191505060405180910390f35b34801561068e57600080fd5b50610697611f3b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106e557600080fd5b5061071a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f61565b6040518082815260200191505060405180910390f35b34801561073c57600080fd5b50610745611fa9565b005b34801561075357600080fd5b50610792600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506120ae565b005b3480156107a057600080fd5b506107a96123c5565b604051808215151515815260200191505060405180910390f35b3480156107cf57600080fd5b50610804600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061248d565b604051808215151515815260200191505060405180910390f35b34801561082a57600080fd5b5061085f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124ad565b604051808215151515815260200191505060405180910390f35b34801561088557600080fd5b5061088e6128d4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108dc57600080fd5b50610911600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128fa565b005b34801561091f57600080fd5b5061095e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612afa565b005b34801561096c57600080fd5b50610975612e9f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109b557808201518184015260208101905061099a565b50505050905090810190601f1680156109e25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109fc57600080fd5b50610a3b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612f3d565b604051808215151515815260200191505060405180910390f35b348015610a6157600080fd5b50610aa0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061334e565b005b348015610aae57600080fd5b50610aed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613642565b604051808215151515815260200191505060405180910390f35b348015610b1357600080fd5b50610b68600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061383e565b6040518082815260200191505060405180910390f35b348015610b8a57600080fd5b50610b936138c5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610be157600080fd5b50610bea6138eb565b6040518082815260200191505060405180910390f35b348015610c0c57600080fd5b50610c156138f1565b005b348015610c2357600080fd5b50610c58600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506139c5565b005b348015610c6657600080fd5b50610c9b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613a2d565b604051808215151515815260200191505060405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d1157600080fd5b80600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600360149054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e155780601f10610dea57610100808354040283529160200191610e15565b820191906000526020600020905b815481529060010190602001808311610df857829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f6e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611013576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7465616d20616464726573732063616e2774206265207a65726f00000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156112225782600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900460ff1660ff16600a0a63055d4a8002600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111b9600660009054906101000a900460ff1660ff16600a0a63055d4a8002600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a8390919063ffffffff16565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061132c565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6001915050919050565b6000600154905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561139c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611467576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f6c616e6420636f6c6c656374696e6720616464726573732063616e277420626581526020017f2073657420746f207a65726f000000000000000000000000000000000000000081525060400191505060405180910390fd5b600760149054906101000a900460ff161515156114ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7472616e736665722073686f756c6420626520646961626c656400000000000081525060200191505060405180910390fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033600760149054906101000a900460ff16806115975750600b60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515611631576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f7472616e73666572206973206e6f7420656e61626c6564206f722073656e646581526020017f72206973206e6f7420616c6c6f7765640000000000000000000000000000000081525060400191505060405180910390fd5b83600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f72656365697665722063616e2774206265207a65726f2061646472657373000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561177b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f72656365697665722063616e277420626520746f6b656e20616464726573730081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611841576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f72656365697665722063616e2774206265206f776e657200000000000000000081525060200191505060405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561192d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f72656365697665722063616e277420626520746f6b656e206f66666572696e6781526020017f206164647265737300000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b611938868686613a9c565b925050509392505050565b600660009054906101000a900460ff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119b457600080fd5b600360149054906101000a900460ff161515156119d057600080fd5b6119e582600154613e5790919063ffffffff16565b600181905550611a3c826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e5790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600760149054906101000a900460ff1680611ba45750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611c3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f7472616e73666572206973206e6f7420656e61626c6564206f722073656e646581526020017f72206973206e6f74206f776e657200000000000000000000000000000000000081525060400191505060405180910390fd5b611c4781613e73565b50565b600760149054906101000a900460ff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083101515611dbb576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611e4f565b611dce8382613a8390919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561200557600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561210c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156121f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f746f6b656e206f66666572696e67206164647265737320697320616c7265616481526020017f792073657400000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561229d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6f66666572696e6720616464726573732063616e2774206265207a65726f000081525060200191505060405180910390fd5b600760149054906101000a900460ff16151515612322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7472616e736665722073686f756c6420626520646961626c656400000000000081525060200191505060405180910390fd5b600082146123305781612334565b6008545b9050600854811115151561234757600080fd5b6123518382610e1d565b5082600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506123c0600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001610cb5565b505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561242357600080fd5b600360149054906101000a900460ff1615151561243f57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600b6020528060005260406000206000915054906101000a900460ff1681565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561250c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156125b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f626f756e747920616464726573732063616e2774206265207a65726f0000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156127c05782600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900460ff1660ff16600a0a6301312d0002600080600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612757600660009054906101000a900460ff1660ff16600a0a6301312d0002600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a8390919063ffffffff16565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506128ca565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600080600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6001915050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561295657600080fd5b61295f81613a2d565b1515156129d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6164647265737320697320616c726561647920626c61636b6c6973746564000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612a9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f626c61636b6c697374696e6720616464726573732063616e2774206265207a6581526020017f726f00000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6001600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612be7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f6c616e6420636f6c6c6563746f722061646472657373206973206e6f7420736581526020017f740000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600760149054906101000a900460ff16151515612c6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f7472616e736665722073686f756c6420626520646961626c656400000000000081525060200191505060405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f73656e646572206d757374206265206f66666572696e6720616464726573730081525060200191505060405180910390fd5b612da481600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e5790919063ffffffff16565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612e59816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a8390919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612f355780601f10612f0a57610100808354040283529160200191612f35565b820191906000526020600020905b815481529060010190602001808311612f1857829003601f168201915b505050505081565b600033600760149054906101000a900460ff1680612fa45750600b60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561303e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f7472616e73666572206973206e6f7420656e61626c6564206f722073656e646581526020017f72206973206e6f7420616c6c6f7765640000000000000000000000000000000081525060400191505060405180910390fd5b83600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156130e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f72656365697665722063616e2774206265207a65726f2061646472657373000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515613188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f72656365697665722063616e277420626520746f6b656e20616464726573730081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561324e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f72656365697665722063616e2774206265206f776e657200000000000000000081525060200191505060405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561333a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f72656365697665722063616e277420626520746f6b656e206f66666572696e6781526020017f206164647265737300000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6133448585613e80565b9250505092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f73656e646572206d757374206265206f66666572696e6720616464726573730081525060200191505060405180910390fd5b61341c82613a2d565b1515613490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f61646472657373206973206e6f742077686974656c697374656400000000000081525060200191505060405180910390fd5b61350381600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e5790919063ffffffff16565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506135b8816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a8390919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60006136d382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e5790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561394d57600080fd5b6001600760146101000a81548160ff021916908315150217905550613995600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000610e1d565b506139c3600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000610cb5565b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613a2157600080fd5b613a2a816140a0565b50565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000828211151515613a9157fe5b818303905092915050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515613aeb57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515613b7657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515613bb257600080fd5b613c03826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a8390919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613c96826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e5790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613d6782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a8390919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008183019050828110151515613e6a57fe5b80905092915050565b613e7d338261419c565b50565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515613ecf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515613f0b57600080fd5b613f5c826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a8390919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613fef826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613e5790919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156140dc57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111515156141e957600080fd5b61423a816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a8390919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061429181600154613a8390919063ffffffff16565b6001819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a723058208769bcf359a96d78e55ef60de59f8befe8b04b4f184c9e08a0c0e895d47ccf440029"
}