{
  "address": "0xe17dbb844ba602e189889d941d1297184ce63664",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InstantTrade",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-18\n*/\n\npragma solidity ^0.4.19;\n\n// ERC20 token protocol, see more details at\n// https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n// And also https://github.com/ethereum/eips/issues/20\n\ncontract Token {\n\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  function totalSupply() constant returns (uint256 supply);\n  function balanceOf(address _owner) constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n  function approve(address _spender, uint256 _value) returns (bool success);\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// Safe mathematics to make the code more readable\n\ncontract SafeMath {\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n}\n\n// Ownable interface to simplify owner checks\n\ncontract Ownable {\n  address public owner;\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address _newOwner) onlyOwner {\n    require(_newOwner != address(0));\n    owner = _newOwner;\n  }\n}\n\n// Interface for trading discounts and rebates for specific accounts\n\ncontract AccountModifiersInterface {\n  function accountModifiers(address _user) constant returns(uint takeFeeDiscount, uint rebatePercentage);\n  function tradeModifiers(address _maker, address _taker) constant returns(uint takeFeeDiscount, uint rebatePercentage);\n}\n\n// Interface for trade tacker\n\ncontract TradeTrackerInterface {\n  function tradeComplete(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, address _get, address _give, uint _takerFee, uint _makerRebate);\n}\n\n// Exchange contract\n\ncontract TokenStore is SafeMath, Ownable {\n\n  // The account that will receive fees\n  address feeAccount;\n\n  // The account that stores fee discounts/rebates\n  address accountModifiers;\n\n  // Trade tracker account\n  address tradeTracker;\n\n  // We charge only the takers and this is the fee, percentage times 1 ether\n  uint public fee;\n\n  // Mapping of token addresses to mapping of account balances (token 0 means Ether)\n  mapping (address => mapping (address => uint)) public tokens;\n\n  // Mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\n  mapping (address => mapping (bytes32 => uint)) public orderFills;\n\n  // Address of a next and previous versions of the contract, also status of the contract\n  // can be used for user-triggered fund migrations\n  address public successor;\n  address public predecessor;\n  bool public deprecated;\n  uint16 public version;\n\n  // Logging events\n  // Note: Order creation is handled off-chain, see explanation further below\n  event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);\n  event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint nonce);\n  event Deposit(address token, address user, uint amount, uint balance);\n  event Withdraw(address token, address user, uint amount, uint balance);\n  event FundsMigrated(address user);\n\n  function TokenStore(uint _fee, address _predecessor) {\n    feeAccount = owner;\n    fee = _fee;\n    predecessor = _predecessor;\n    deprecated = false;\n    if (predecessor != address(0)) {\n      version = TokenStore(predecessor).version() + 1;\n    } else {\n      version = 1;\n    }\n  }\n\n  // Throw on default handler to prevent direct transactions of Ether\n  function() {\n    revert();\n  }\n\n  modifier deprecable() {\n    require(!deprecated);\n    _;\n  }\n\n  function deprecate(bool _deprecated, address _successor) onlyOwner {\n    deprecated = _deprecated;\n    successor = _successor;\n  }\n\n  function changeFeeAccount(address _feeAccount) onlyOwner {\n    require(_feeAccount != address(0));\n    feeAccount = _feeAccount;\n  }\n\n  function changeAccountModifiers(address _accountModifiers) onlyOwner {\n    accountModifiers = _accountModifiers;\n  }\n\n  function changeTradeTracker(address _tradeTracker) onlyOwner {\n    tradeTracker = _tradeTracker;\n  }\n\n  // Fee can only be decreased!\n  function changeFee(uint _fee) onlyOwner {\n    require(_fee <= fee);\n    fee = _fee;\n  }\n\n  // Allows a user to get her current discount/rebate\n  function getAccountModifiers() constant returns(uint takeFeeDiscount, uint rebatePercentage) {\n    if (accountModifiers != address(0)) {\n      return AccountModifiersInterface(accountModifiers).accountModifiers(msg.sender);\n    } else {\n      return (0, 0);\n    }\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Deposits, withdrawals, balances\n  ////////////////////////////////////////////////////////////////////////////////\n\n  function deposit() payable deprecable {\n    tokens[0][msg.sender] = safeAdd(tokens[0][msg.sender], msg.value);\n    Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\n  }\n\n  function withdraw(uint _amount) {\n    require(tokens[0][msg.sender] >= _amount);\n    tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], _amount);\n    if (!msg.sender.call.value(_amount)()) {\n      revert();\n    }\n    Withdraw(0, msg.sender, _amount, tokens[0][msg.sender]);\n  }\n\n  function depositToken(address _token, uint _amount) deprecable {\n    // Note that Token(_token).approve(this, _amount) needs to be called\n    // first or this contract will not be able to do the transfer.\n    require(_token != 0);\n    if (!Token(_token).transferFrom(msg.sender, this, _amount)) {\n      revert();\n    }\n    tokens[_token][msg.sender] = safeAdd(tokens[_token][msg.sender], _amount);\n    Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n  }\n\n  function withdrawToken(address _token, uint _amount) {\n    require(_token != 0);\n    require(tokens[_token][msg.sender] >= _amount);\n    tokens[_token][msg.sender] = safeSub(tokens[_token][msg.sender], _amount);\n    if (!Token(_token).transfer(msg.sender, _amount)) {\n      revert();\n    }\n    Withdraw(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n  }\n\n  function balanceOf(address _token, address _user) constant returns (uint) {\n    return tokens[_token][_user];\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Trading\n  ////////////////////////////////////////////////////////////////////////////////\n\n  // Note: Order creation happens off-chain but the orders are signed by creators,\n  // we validate the contents and the creator address in the logic below\n\n  function trade(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive,\n      uint _expires, uint _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s, uint _amount) {\n    bytes32 hash = sha256(this, _tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce);\n    // Check order signatures and expiration, also check if not fulfilled yet\n\t\tif (ecrecover(sha3(\"\\x19Ethereum Signed Message:\\n32\", hash), _v, _r, _s) != _user ||\n      block.number > _expires ||\n      safeAdd(orderFills[_user][hash], _amount) > _amountGet) {\n      revert();\n    }\n    tradeBalances(_tokenGet, _amountGet, _tokenGive, _amountGive, _user, msg.sender, _amount);\n    orderFills[_user][hash] = safeAdd(orderFills[_user][hash], _amount);\n    Trade(_tokenGet, _amount, _tokenGive, _amountGive * _amount / _amountGet, _user, msg.sender, _nonce);\n  }\n\n  function tradeBalances(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive,\n      address _user, address _caller, uint _amount) private {\n\n    uint feeTakeValue = safeMul(_amount, fee) / (1 ether);\n    uint rebateValue = 0;\n    uint tokenGiveValue = safeMul(_amountGive, _amount) / _amountGet; // Proportionate to request ratio\n\n    // Apply modifiers\n    if (accountModifiers != address(0)) {\n      var (feeTakeDiscount, rebatePercentage) = AccountModifiersInterface(accountModifiers).tradeModifiers(_user, _caller);\n      // Check that the discounts/rebates are never higher then 100%\n      if (feeTakeDiscount > 100) {\n        feeTakeDiscount = 0;\n      }\n      if (rebatePercentage > 100) {\n        rebatePercentage = 0;\n      }\n      feeTakeValue = safeMul(feeTakeValue, 100 - feeTakeDiscount) / 100;  // discounted fee\n      rebateValue = safeMul(rebatePercentage, feeTakeValue) / 100;        // % of actual taker fee\n    }\n\n    tokens[_tokenGet][_user] = safeAdd(tokens[_tokenGet][_user], safeAdd(_amount, rebateValue));\n    tokens[_tokenGet][_caller] = safeSub(tokens[_tokenGet][_caller], safeAdd(_amount, feeTakeValue));\n    tokens[_tokenGive][_user] = safeSub(tokens[_tokenGive][_user], tokenGiveValue);\n    tokens[_tokenGive][_caller] = safeAdd(tokens[_tokenGive][_caller], tokenGiveValue);\n    tokens[_tokenGet][feeAccount] = safeAdd(tokens[_tokenGet][feeAccount], safeSub(feeTakeValue, rebateValue));\n\n    if (tradeTracker != address(0)) {\n      TradeTrackerInterface(tradeTracker).tradeComplete(_tokenGet, _amount, _tokenGive, tokenGiveValue, _user, _caller, feeTakeValue, rebateValue);\n    }\n  }\n\n  function testTrade(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires,\n      uint _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s, uint _amount, address _sender) constant returns(bool) {\n    if (tokens[_tokenGet][_sender] < _amount ||\n      availableVolume(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _user, _v, _r, _s) < _amount) {\n      return false;\n    }\n    return true;\n  }\n\n  function availableVolume(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires,\n      uint _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s) constant returns(uint) {\n    bytes32 hash = sha256(this, _tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce);\n    if (ecrecover(sha3(\"\\x19Ethereum Signed Message:\\n32\", hash), _v, _r, _s) != _user ||\n      block.number > _expires) {\n      return 0;\n    }\n    uint available1 = safeSub(_amountGet, orderFills[_user][hash]);\n    uint available2 = safeMul(tokens[_tokenGive][_user], _amountGet) / _amountGive;\n    if (available1 < available2) return available1;\n    return available2;\n  }\n\n  function amountFilled(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires,\n      uint _nonce, address _user) constant returns(uint) {\n    bytes32 hash = sha256(this, _tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce);\n    return orderFills[_user][hash];\n  }\n\n  function cancelOrder(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive, uint _expires,\n      uint _nonce, uint8 _v, bytes32 _r, bytes32 _s) {\n    bytes32 hash = sha256(this, _tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce);\n    if (!(ecrecover(sha3(\"\\x19Ethereum Signed Message:\\n32\", hash), _v, _r, _s) == msg.sender)) {\n      revert();\n    }\n    orderFills[msg.sender][hash] = _amountGet;\n    Cancel(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, msg.sender, _v, _r, _s);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Migrations\n  ////////////////////////////////////////////////////////////////////////////////\n\n  // User-triggered (!) fund migrations in case contract got updated\n  // Similar to withdraw but we use a successor account instead\n  // As we don't store user tokens list on chain, it has to be passed from the outside\n  function migrateFunds(address[] _tokens) {\n\n    // Get the latest successor in the chain\n    require(successor != address(0));\n    TokenStore newExchange = TokenStore(successor);\n    for (uint16 n = 0; n < 20; n++) {  // We will look past 20 contracts in the future\n      address nextSuccessor = newExchange.successor();\n      if (nextSuccessor == address(this)) {  // Circular succession\n        revert();\n      }\n      if (nextSuccessor == address(0)) { // We reached the newest, stop\n        break;\n      }\n      newExchange = TokenStore(nextSuccessor);\n    }\n\n    // Ether\n    uint etherAmount = tokens[0][msg.sender];\n    if (etherAmount > 0) {\n      tokens[0][msg.sender] = 0;\n      newExchange.depositForUser.value(etherAmount)(msg.sender);\n    }\n\n    // Tokens\n    for (n = 0; n < _tokens.length; n++) {\n      address token = _tokens[n];\n      require(token != address(0)); // 0 = Ether, we handle it above\n      uint tokenAmount = tokens[token][msg.sender];\n      if (tokenAmount == 0) {\n        continue;\n      }\n      if (!Token(token).approve(newExchange, tokenAmount)) {\n        revert();\n      }\n      tokens[token][msg.sender] = 0;\n      newExchange.depositTokenForUser(token, tokenAmount, msg.sender);\n    }\n\n    FundsMigrated(msg.sender);\n  }\n\n  // This is used for migrations only. To be called by previous exchange only,\n  // user-triggered, on behalf of the user called the migrateFunds method.\n  // Note that it does exactly the same as depositToken, but as this is called\n  // by a previous generation of exchange itself, we credit internally not the\n  // previous exchange, but the user it was called for.\n  function depositForUser(address _user) payable deprecable {\n    require(_user != address(0));\n    require(msg.value > 0);\n    TokenStore caller = TokenStore(msg.sender);\n    require(caller.version() > 0); // Make sure it's an exchange account\n    tokens[0][_user] = safeAdd(tokens[0][_user], msg.value);\n  }\n\n  function depositTokenForUser(address _token, uint _amount, address _user) deprecable {\n    require(_token != address(0));\n    require(_user != address(0));\n    require(_amount > 0);\n    TokenStore caller = TokenStore(msg.sender);\n    require(caller.version() > 0); // Make sure it's an exchange account\n    if (!Token(_token).transferFrom(msg.sender, this, _amount)) {\n      revert();\n    }\n    tokens[_token][_user] = safeAdd(tokens[_token][_user], _amount);\n  }\n}\n\ncontract InstantTrade is SafeMath, Ownable {\n\n  // This is needed so we can withdraw funds from other smart contracts\n  function() payable {\n  }\n  \n  // End to end trading in a single call\n  function instantTrade(address _tokenGet, uint _amountGet, address _tokenGive, uint _amountGive,\n      uint _expires, uint _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s, uint _amount, address _store) payable {\n    \n    // Fix max fee (0.4%) and always reserve it\n    uint totalValue = safeMul(_amount, 1004) / 1000;\n    \n    // Paying with Ethereum or token? Deposit to the actual store\n    if (_tokenGet == address(0)) {\n      // Check amount of ether sent to make sure it's correct\n      if (msg.value != totalValue) {\n        revert();\n      }\n      TokenStore(_store).deposit.value(totalValue)();\n    } else {\n      // Assuming user already approved transfer, transfer first to this contract\n      if (!Token(_tokenGet).transferFrom(msg.sender, this, totalValue)) {\n        revert();\n      }\n      // Allow now actual store to deposit\n      if (!Token(_tokenGet).approve(_store, totalValue)) {\n        revert();\n      }\n      TokenStore(_store).depositToken(_tokenGet, totalValue);\n    }\n    \n    // Trade\n    TokenStore(_store).trade(_tokenGet, _amountGet, _tokenGive, _amountGive,\n      _expires, _nonce, _user, _v, _r, _s, _amount);\n    \n    // Check how much did we get and how much should we send back\n    totalValue = TokenStore(_store).balanceOf(_tokenGive, this);\n    uint customerValue = safeMul(_amountGive, _amount) / _amountGet;\n    \n    // Now withdraw all the funds into this contract and then pass to the user\n    if (_tokenGive == address(0)) {\n      TokenStore(_store).withdraw(totalValue);\n      msg.sender.transfer(customerValue);\n    } else {\n      TokenStore(_store).withdrawToken(_tokenGive, totalValue);\n      if (!Token(_tokenGive).transfer(msg.sender, customerValue)) {\n        revert();\n      }\n    }\n  }\n  \n  function withdrawFees(address _token) onlyOwner {\n    if (_token == address(0)) {\n      msg.sender.transfer(this.balance);\n    } else {\n      uint amount = Token(_token).balanceOf(this);\n      if (!Token(_token).transfer(msg.sender, amount)) {\n        revert();\n      }\n    }\n  }  \n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenGet\",\"type\":\"address\"},{\"name\":\"_amountGet\",\"type\":\"uint256\"},{\"name\":\"_tokenGive\",\"type\":\"address\"},{\"name\":\"_amountGive\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"instantTrade\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f41806100536000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308e05b8514610064578063164e68de146101555780638da5cb5b14610198578063f2fde38b146101ef575b005b610153600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035600019169060200190929190803560001916906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610232565b005b34801561016157600080fd5b50610196600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b28565b005b3480156101a457600080fd5b506101ad610de3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101fb57600080fd5b50610230600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e08565b005b6000806103e8610244856103ec610ee2565b81151561024d57fe5b049150600073ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff16141561031557813414151561029357600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b50505050506105d7565b8d73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156103ec57600080fd5b505af1158015610400573d6000803e3d6000fd5b505050506040513d602081101561041657600080fd5b8101908080519060200190929190505050151561043257600080fd5b8d73ffffffffffffffffffffffffffffffffffffffff1663095ea7b384846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156104d557600080fd5b505af11580156104e9573d6000803e3d6000fd5b505050506040513d60208110156104ff57600080fd5b8101908080519060200190929190505050151561051b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663338b5dea8f846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156105be57600080fd5b505af11580156105d2573d6000803e3d6000fd5b505050505b8273ffffffffffffffffffffffffffffffffffffffff16630a19b14a8f8f8f8f8f8f8f8f8f8f8f6040518c63ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018560ff1660ff168152602001846000191660001916815260200183600019166000191681526020018281526020019b505050505050505050505050600060405180830381600087803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff1663f7888aec8d306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561081757600080fd5b505af115801561082b573d6000803e3d6000fd5b505050506040513d602081101561084157600080fd5b810190808051906020019092919050505091508c61085f8c86610ee2565b81151561086857fe5b049050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161415610973578273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561090f57600080fd5b505af1158015610923573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561096d573d6000803e3d6000fd5b50610b18565b8273ffffffffffffffffffffffffffffffffffffffff16639e281a988d846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610a1657600080fd5b505af1158015610a2a573d6000803e3d6000fd5b505050508b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b505050506040513d6020811015610afb57600080fd5b81019080805190602001909291905050501515610b1757600080fd5b5b5050505050505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b8557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c1d573373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610c17573d6000803e3d6000fd5b50610ddf565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610cb857600080fd5b505af1158015610ccc573d6000803e3d6000fd5b505050506040513d6020811015610ce257600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d9857600080fd5b505af1158015610dac573d6000803e3d6000fd5b505050506040513d6020811015610dc257600080fd5b81019080805190602001909291905050501515610dde57600080fd5b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e9f57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008082840290506000841480610f035750828482811515610f0057fe5b04145b1515610f0b57fe5b80915050929150505600a165627a7a7230582081a354272428a9b8d3f961d3793825f26e08c07debe709d8815e1c110f5698c20029"
}