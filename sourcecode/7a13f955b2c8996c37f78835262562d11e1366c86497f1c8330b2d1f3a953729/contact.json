{
  "address": "0xcced5b8288086be8c38e23567e684c3740be4d48",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SmartRoulette Token",
  "contractName": "SmartRouletteToken",
  "compilerVersion": "v0.4.8+commit.60cc1668",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-04-06\n*/\n\npragma solidity ^0.4.8;\n\ncontract OldSmartRouletteToken\n{\n\tfunction balanceOf( address who ) external constant returns (uint256);\n\tfunction totalSupply() constant returns (uint supply);\n\tfunction tempTokensBalanceOf( address who ) external constant returns (uint256);\n\tfunction tempTokensPeriodOf( address who ) external constant returns (uint256);\n\tfunction getCountHolders() external constant returns(uint256);\n\tfunction getCountTempHolders() external constant returns(uint256);\n\tfunction getItemHolders(uint256 index) external constant returns(address);\n\tfunction getItemTempHolders(uint256 index) external constant returns(address);\n\tfunction isOperationBlocked() external constant returns (bool);\n}\n\ncontract SmartRouletteToken {\n\tstring public standard = 'ERC20';\n    string public name; // token name\n    string public symbol; // token symbol\n    uint8 public decimals; // a number of symbols after comma\n\n\tstruct holderData {\n\t\t/**\n\t\t*\tToken holders details\n\t\t*/\n\t\tuint256 tokens_count;\n\t\tbool init;\n\t}\n\n\tstruct tempHolderData {\n\t\t/**\n\t\t*\tTemporary token holders details\n\t\t*/\n\t\tuint256 tokens_count;\n\t\tuint256 start_date;\n\t\tuint256 end_date;\n\t\tbool init;\n\t}\n\n\taddress[] listAddrHolders; // permanent token holders list\n\n\tmapping( address => holderData ) _balances; // token ownership\n\tmapping( address => tempHolderData ) _temp_balance; // temporary token ownership\n\tmapping( address => mapping( address => uint256 ) ) _approvals; // token transfer right\n\n\tbool stop_operation; // transaction stop\n\t\n\tuint256 _supply; // total amount of tokens\n\tuint256 _init_count_tokens; // initial amount of tokens\n\tuint256 public costOfOneToken; // token price equivalent to wei\n\t\n\taddress wallet_ICO;\n\tbool enableICO; // ico status (launched or not)\n\tuint256 min_value_buyToken; //in wei\n\tuint256 max_value_buyToken; //in wei\n\n\taddress fond_wallet;\n\taddress developer_wallet;\n\n\taddress divident_contract = address(0x0);\n\t\n\tevent TokenBuy(address buyer, uint256 amountOfTokens);\n\n\t// emission limits\n\tuint256 max_value_bet; // maximum size of bet for emission\n\tuint256 max_coef_player; // maximum size of emission coefficient for a player\n\tuint256 max_coef_partner; // maximum size of emission coefficient for an affiliate\n\n\n\taddress developer; // developer's address\n\taddress manager; // contract managing address (management can be made from the smart contract)\n\n\tstruct gamesData {\n\t\tbool init;\n\t}\n\n\tmapping( address => gamesData) listGames; // List of allowed games\n\taddress[] addrGames;\n\n\t//old token contract for data restorage\n\tOldSmartRouletteToken oldSmartToken;\n\n\tuint256 countHoldersTransferredFromOldContract; //amount of permanent token holders whose balance has been restored\n\tuint256 countHoldersTempTransferredFromOldContract; //amount of temporary token holders whose balance has been restored\n\n\tfunction SmartRouletteToken()\n\t{\n\t\t_init_count_tokens = 100000000000000000;\n\t\tdeveloper_wallet = address(0x8521E1f9220A251dE0ab78f6a2E8754Ca9E75242);\n\t\twallet_ICO = address(0x2dff87f8892d65f7a97b1287e795405098ae7b7f);\n\t\tfond_wallet = address(0x3501DD2B515EDC1920f9007782Da5ac018922502);\n\n        name = 'Roulette Token';                                   \n        symbol = 'RLT';                               \n        decimals = 10;\n        costOfOneToken = 1500000000000000;\n\n\t\tmax_value_bet = 2560000000000000000;\n\t\tmax_coef_player = 300;\n\t\tmax_coef_partner = 50;\n\n\t\tdeveloper = msg.sender;\n\t\tmanager = msg.sender;\t\t\n\t\t\n\t\tenableICO = false;\n\t\tmin_value_buyToken = 150000000000000000;\n\t\tmax_value_buyToken = 500000000000000000000;\n\n\t\tstop_operation = false;\n\n\t\toldSmartToken = OldSmartRouletteToken(0x2a650356bd894370cc1d6aba71b36c0ad6b3dc18);\n\t\tcountHoldersTransferredFromOldContract= 0;\n\t\tcountHoldersTempTransferredFromOldContract = 0;\n\t}\n\n\tmodifier isDeveloper(){\n\t\tif (msg.sender!=developer) throw;\n\t\t_;\n\t}\n\n\tmodifier isManager(){\n\t\tif (msg.sender!=manager) throw;\n\t\t_;\n\t}\n\n\tmodifier isAccessStopOperation(){\n\t\tif (msg.sender!=manager && msg.sender!=developer && (msg.sender!=divident_contract || divident_contract==address(0x0))) throw;\n\t\t_;\n\t}\n\n\tfunction IsTransferFromOldContractDone() constant returns(bool)\n\t{\n\t\treturn countHoldersTransferredFromOldContract == oldSmartToken.getCountHolders();\n\t}\n\n\t/**\n    *\trestoreAllPersistentTokens() - function of restoring the balance of permanent token holders. Once the function has been completed,\n    *\tblockchain saves the index with which token holders addresses will start being received during the following function operation.\n    *\n    *\t@param limit - amount of token holders addresses requiring the balance restorage.\n    *\n    **/\n\tfunction restoreAllPersistentTokens(uint256 limit)\n\t{\n\t\tif(oldSmartToken.isOperationBlocked() && this.isOperationBlocked())\n\t\t{\n\t\t\tuint256 len = oldSmartToken.getCountHolders();\n\t\t\tuint256 i = countHoldersTransferredFromOldContract;\n\t\t\tfor(; i < len; i++)\n\t\t\t{\n\t\t\t\taddress holder = oldSmartToken.getItemHolders(i);\n\t\t\t\tuint256 count_tokens = oldSmartToken.balanceOf(holder);\n\t\t\t\tif(holder == address(0x2a650356bd894370cc1d6aba71b36c0ad6b3dc18)) {\n\t\t\t\t\tif(!_balances[fond_wallet].init){\n\t\t\t\t\t\taddUserToList(fond_wallet);\n\t\t\t\t\t\t_balances[fond_wallet] = holderData(count_tokens, true);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t_balances[fond_wallet].tokens_count += count_tokens;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\taddUserToList(holder);\n\t\t\t\t\t_balances[holder] = holderData(count_tokens, true);\n\t\t\t\t}\n\n\t\t\t\t_supply += count_tokens;\n\n\t\t\t\tif (limit - 1 == 0) break;\n\t\t\t\tlimit--;\n\t\t\t}\n\t\t\tcountHoldersTransferredFromOldContract = i;\n\t\t}\n\t}\n\n\tfunction IsTransferTempFromOldContractDone() constant returns(bool)\n\t{\n\t\treturn countHoldersTempTransferredFromOldContract == oldSmartToken.getCountTempHolders();\n\t}\n\n\t/**\n    *\trestoreAllTempTokens() - function of temnporary token balance restorage. Once the function has been completed,\n    *\tblockchain saves the index with which temporary token holders addresses will start being received during the following function operation.\n    *\n    *\t@param limit - amount of token holders addresses requiring the balance restorage.\n    *\n    **/\n\tfunction restoreAllTempTokens(uint256 limit)\n\t{\n\t\tif(oldSmartToken.isOperationBlocked() && this.isOperationBlocked())\n\t\t{\n\t\t\tuint256 len = oldSmartToken.getCountTempHolders();\n\t\t\tuint256 i = countHoldersTempTransferredFromOldContract;\n\t\t\tfor(; i < len; i++)\n\t\t\t{\n\t\t\t\taddress holder = oldSmartToken.getItemTempHolders(i);\n\t\t\t\tuint256 count_tokens = oldSmartToken.tempTokensBalanceOf(holder);\n\n\t\t\t\tif(holder == address(0x2a650356bd894370cc1d6aba71b36c0ad6b3dc18)) {\n\t\t\t\t\tif(!_balances[fond_wallet].init){\n\t\t\t\t\t\t_balances[fond_wallet] = holderData(count_tokens, true);\n\t\t\t\t\t\taddUserToList(fond_wallet);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t_balances[fond_wallet].tokens_count += count_tokens;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlistAddrTempHolders.push(holder);\n\t\t\t\t\tuint256 end_date = oldSmartToken.tempTokensPeriodOf(holder);\n\t\t\t\t\t_temp_balance[holder] = tempHolderData(count_tokens, now, end_date, true);\n\t\t\t\t}\n\n\t\t\t\t_supply += count_tokens;\n\n\t\t\t\tif (limit - 1 == 0) break;\n\t\t\t\tlimit--;\n\t\t\t}\n\t\t\tcountHoldersTempTransferredFromOldContract = i;\n\t\t}\n\t}\n\n\n\tfunction changeDeveloper(address new_developer) isDeveloper\n\t{\n\t\tif(new_developer == address(0x0)) throw;\n\t\tdeveloper = new_developer;\n\t}\n\n\tfunction changeManager(address new_manager) isManager external\n\t{\n\t\tif(new_manager == address(0x0)) throw;\n\t\tmanager = new_manager;\n\t}\n\n\tfunction changeMaxValueBetForEmission(uint256 new_value) isManager external\n\t{\n\t\tif(new_value == 0) throw;\n\t\tmax_value_bet = new_value;\n\t}\n\n\tfunction changeMaxCoefPlayerForEmission(uint256 new_value) isManager external\n\t{\n\t\tif(new_value > 1000) throw;\n\t\tmax_coef_player = new_value;\n\t}\n\n\tfunction changeMaxCoefPartnerForEmission(uint256 new_value) isManager external\n\t{\n\t\tif(new_value > 1000) throw;\n\t\tmax_coef_partner = new_value;\n\t}\n\n\tfunction changeDividentContract(address new_contract) isManager external\n\t{\n\t\tif(new_contract!=address(0x0)) throw;\n\t\tdivident_contract = new_contract;\n\t}\n\n\tfunction newCostToken(uint256 new_cost)\tisManager external\n\t{\n\t\tif(new_cost == 0) throw;\n\t\tcostOfOneToken = new_cost;\n\t}\n\n\tfunction getCostToken() external constant returns(uint256)\n\t{\n\t\treturn costOfOneToken;\n\t}\n\n\tfunction addNewGame(address new_game) isManager external\n\t{\n\t\tif(new_game == address(0x0)) throw;\n\t\tlistGames[new_game] = gamesData(true);\n\t\taddrGames.push(new_game);\n\t}\n\n\tfunction deleteGame(address game) isManager external\n\t{\n\t\tif(game == address(0x0)) throw;\n\t\tif(listGames[game].init){\n\t\t\tlistGames[game].init = false;\n\t\t}\n\t}\n\n\tfunction addUserToList(address user) internal {\n\t\tif(!_balances[user].init){\n\t\t\tlistAddrHolders.push(user);\n\t\t}\n\t}\n\n    function getListAddressHolders() constant returns(address[]){\n        return listAddrHolders;\n    }\n\n    function getCountHolders() external constant returns(uint256){\n        return listAddrHolders.length;\n    }\n\n    function getItemHolders(uint256 index) external constant returns(address){\n        if(index >= listAddrHolders.length) return address(0x0);\n        else return listAddrHolders[index];\n    }\n\n\tfunction gameListOf( address who ) external constant returns (bool value) {\n\t\tgamesData game_data = listGames[who];\n\t\treturn game_data.init;\n\t}\n\n\t//------------------------------------\n\t// Tokens Functions\n\t//------------------------------------\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function stopOperation() isManager external {\n\t\tstop_operation = true;\n\t}\n\n\tfunction startOperation() isManager external {\n\t\tstop_operation = false;\n\t}\n\n\tfunction isOperationBlocked() external constant returns (bool){\n\t\treturn stop_operation;\n\t}\n\n\tfunction isOperationAllowed() external constant returns (bool){\n\t\treturn !stop_operation;\n\t}\n\n\tfunction runICO() isManager external {\n\t\tenableICO = true;\n\t\tstop_operation = true;\n\t}\n\n\tfunction stopICO() isManager external {\n\t\tenableICO = false;\n\t\tstop_operation = false;\n\t}\n\n\tfunction infoICO() constant returns (bool){\n\t\treturn enableICO;\n\t}\n\n\tfunction totalSupply() external constant returns (uint256 supply) {\n\t\treturn _supply;\n\t}\n\n\tfunction initCountTokens() external constant returns (uint256 init_count) {\n\t\treturn _init_count_tokens;\n\t}\n\n\t/**\n    *  balanceOf() - constant function check concrete tokens balance\n    *\n    *  @param who - account owner\n    *\n    *  @return the value of balance\n    */\n\tfunction balanceOf( address who ) external constant returns (uint256 value) {\n\t\treturn _balances[who].tokens_count;\n\t}\n\n\t/**\n    *\n    * allowance() - constant function to check how much is\n    *               permitted to spend to 3rd person from owner balance\n    *\n    *  @param owner   - owner of the balance\n    *  @param spender - permitted to spend from this balance person\n    *\n    *  @return - remaining right to spend\n    *\n    */\n\tfunction allowance(address owner, address spender) constant returns (uint256 _allowance) {\n\t\treturn _approvals[owner][spender];\n\t}\n\n\n\tfunction safeToAdd(uint256 a, uint256 b) internal returns (bool) {\n\t\t// overflow check\n\t\treturn (a + b >= a && a + b >= b);\n\t}\n\n\t/**\n    * transfer() - transfer tokens from msg.sender balance\n    *              to requested account\n    *\n    *  @param to    - target address to transfer tokens\n    *  @param value - ammount of tokens to transfer\n    *\n    *  @return - success / failure of the transaction\n    */\n\tfunction transfer( address to, uint256 value) returns (bool ok) {\n\t\tif(this.isOperationBlocked()) throw;\n\n\t\tif( _balances[msg.sender].tokens_count < value ) {\n\t\t    throw;\n\t\t}\n\t\tif( !safeToAdd(_balances[to].tokens_count, value) ) {\n\t\t    throw;\n\t\t}\n\n\t\t_balances[msg.sender].tokens_count -= value;\n\t\tif(_balances[to].init){\n\t\t\t_balances[to].tokens_count += value;\n\t\t}\n\t\telse{\n\t\t\taddUserToList(to);\n\t\t\t_balances[to] = holderData(value, true);\n\t\t}\n\n\t\tTransfer( msg.sender, to, value );\n\t\treturn true;\n\t}\n\n\t/**\n    * transferFrom() - used to move allowed funds from other owner\n    *                  account\n    *\n    *  @param from  - move funds from account\n    *  @param to    - move funds to account\n    *  @param value - move the value\n    *\n    *  @return - return true on success false otherwise\n    */\n\tfunction transferFrom( address from, address to, uint256 value) returns (bool ok) \n\t{\n\t\tif(this.isOperationBlocked()) throw;\n\n\t\tif( _balances[from].tokens_count < value ) {\n\t\t    throw;\n\t\t}\n\t\t\n\t\tif( _approvals[from][msg.sender] < value ) {\n\t\t    throw;\n\t\t}\n\t\tif( !safeToAdd(_balances[to].tokens_count, value) ) {\n\t\t    throw;\n\t\t}\n\t\t// transfer and return true\n\t\t_approvals[from][msg.sender] -= value;\n\t\t_balances[from].tokens_count -= value;\n\t\tif(_balances[to].init){\n\t\t\t_balances[to].tokens_count += value;\n\t\t}\n\t\telse{\n\t\t\taddUserToList(to);\n\t\t\t_balances[to] = holderData(value, true);\n\t\t}\t\t\n\t\t\n\t\tTransfer( from, to, value );\n\t\treturn true;\n\t}\n\n\t/**\n     *\n     * approve() - function approves to a person to spend some tokens from\n     *           owner balance.\n     *\n     *  @param spender - person whom this right been granted.\n     *  @param value   - value to spend.\n     *\n     *  @return true in case of success, otherwise failure\n     *\n     */\n\tfunction approve(address spender, uint256 value) returns (bool ok) \n\t{\n\t\tif(this.isOperationBlocked()) throw;\n\n\t\t_approvals[msg.sender][spender] = value;\n\t\tApproval( msg.sender, spender, value );\n\t\treturn true;\n\t}\n\n\tevent Emission(address indexed to, uint256 value, uint256 bet, uint256 coef, uint256 decimals, uint256 cost_token);\n\n\t/**\n    *\n    *  emission() - emission of tokens initiated by the game contract.\n    *\n    *  @param player       - player's address.\n    *  @param partner      - affiliate's address.\n    *  @param value_bet    - player's bet value.\n    *  @param coef_player  - player's coefficient emission.\n    *  @param coef_partner - affiliate's coefficient emission.\n    *\n    *  @return (true, 0) in case of success, otherwise (False, error_code)\n    *\n    *\n    *  Error code 1 - operation stoped\n    *  Error code 2 - sender address is not in games list\n    *  Error code 3 - incorrect player's address\n    *  Error code 4 - incorrect value bet\n    *  Error code 5 - incorrect emission coefficient\n    */\n\tfunction emission(address player, address partner, uint256 value_bet, uint256 coef_player, uint256 coef_partner) external returns(uint256, uint8) {\n        if(this.isOperationBlocked()) return (0, 1);\n\n        if(listGames[msg.sender].init == false) return (0, 2);\n        if(player == address(0x0)) return (0, 3);\n        if(value_bet == 0 || value_bet > max_value_bet) return (0, 4);\n        if(coef_player > max_coef_player || coef_partner > max_coef_partner) return (0, 5);\n\n\t\tuint256 decimals_token = 10**uint256(decimals);\n\n\t\tuint256 player_token = ((value_bet*coef_player*decimals_token)/10000)/costOfOneToken;\n\t\tif(_balances[player].init){\n\t\t\t_balances[player].tokens_count += player_token;\n\t\t}\n\t\telse{\n\t\t\taddUserToList(player);\n\t\t\t_balances[player] = holderData(player_token, true);\n\t\t}\n\t\tEmission(player, player_token, value_bet, coef_player, decimals_token, costOfOneToken);\n\n\t\tuint256 partner_token = 0;\n\t\tif(partner != address(0x0)){\n\t\t\tpartner_token = ((value_bet*coef_partner*decimals_token)/10000)/costOfOneToken;\n\t\t\tif(_balances[partner].init){\n\t\t\t\t_balances[partner].tokens_count += partner_token;\n\t\t\t}\n\t\t\telse{\n\t\t\t\taddUserToList(partner);\n\t\t\t\t_balances[partner] = holderData(partner_token, true);\n\t\t\t}\n\t\t\tEmission(partner, partner_token, value_bet, coef_partner, decimals_token, costOfOneToken);\n\t\t}\n\n\t\t_supply += (player_token+partner_token);\n\n\t\treturn (player_token, 0);\n\t}\n\n\t//------------------------------------\n\t// Temporary Tokens\n\t//------------------------------------\n\taddress[] listAddrTempHolders;\n\tevent TempTokensSend(address indexed recipient, uint256 count, uint256 start, uint256 end);\n\n\t/**\n     *\n     *  sendTempTokens() - sending temporary tokens to address.\n     *\n     *  @param recipient - recipient's address.\n     *  @param count     - temporary tokens amount.\n     *  @param period    - period of possession of the tokens in seconds.\n     *\n     */\n\tfunction sendTempTokens(address recipient, uint256 count, uint256 period) isDeveloper {\n\t\tif(this.isOperationBlocked()) throw;\n\n\t\tif(count==0 || period==0) throw;\n\t\t\n\t\tuint256 decimals_token = 10**uint256(decimals);\n\t\tcount = count*decimals_token;\n\n\t\tif(_balances[fond_wallet].tokens_count < count) throw;\n\t\tif(_temp_balance[recipient].tokens_count > 0) throw;\n\n\t\tif(!_temp_balance[recipient].init){\n\t\t\t_temp_balance[recipient] = tempHolderData(count, now, now + period, true);\n\t\t\tlistAddrTempHolders.push(recipient);\n\t\t}\n\t\telse{\n\t\t\t_temp_balance[recipient].tokens_count = count;\n\t\t\t_temp_balance[recipient].start_date = now;\n\t\t\t_temp_balance[recipient].end_date = now + period;\n\t\t}\n\t\t_balances[fond_wallet].tokens_count -= count;\n\t\tTempTokensSend(recipient, count, _temp_balance[recipient].start_date, _temp_balance[recipient].end_date);\n\t}\n\n\tfunction tempTokensBalanceOf( address who ) external constant returns (uint256) {\n\t\tif(_temp_balance[who].end_date < now) return 0;\n\t\telse return _temp_balance[who].tokens_count;\n\t}\n\n\tfunction tempTokensPeriodOf( address who ) external constant returns (uint256) {\n\t\tif(_temp_balance[who].end_date < now) return 0;\n\t\telse return _temp_balance[who].end_date;\n\t}\n\n\t/**\n     *\n     *  returnTempTokens() - return of temporary tokens after the expiration of possession time.\n     *\n     *  @param recipient - temporary token holder address.\n     *\n     */\n\tfunction returnTempTokens(address recipient) isDeveloper {\n\t\tif(this.isOperationBlocked()) throw;\n\t\t\n\t\tif(_temp_balance[recipient].tokens_count == 0) throw;\n\n\t\t_balances[fond_wallet].tokens_count += _temp_balance[recipient].tokens_count;\n\t\t_temp_balance[recipient].tokens_count = 0;\n\t\t_temp_balance[recipient].start_date = 0;\n\t\t_temp_balance[recipient].end_date = 0;\n\t}\n\n\tfunction getListTempHolders() constant returns(address[]){\n\t\treturn listAddrTempHolders;\n\t}\n\n\tfunction getCountTempHolders() external constant returns(uint256){\n\t\treturn listAddrTempHolders.length;\n\t}\n\n\tfunction getItemTempHolders(uint256 index) external constant returns(address){\n\t\tif(index >= listAddrTempHolders.length) return address(0x0);\n\t\telse return listAddrTempHolders[index];\n\t}\n\n\t//------------------------------------\n\t// Invest Functions\n\t//------------------------------------\n\n\tfunction() payable\n\t{\t\n\t\tif(this.isOperationBlocked()) throw;\n\t\tif(msg.sender == developer) throw;\n\t\tif(msg.sender == manager) throw;\n\t\tif(msg.sender == developer_wallet) throw;\n\t\tif(msg.sender == wallet_ICO) throw;\n\t\tif(msg.sender == fond_wallet) throw;\n\n\t\tif(listGames[msg.sender].init) throw;\n\n\t\tif(enableICO == false) throw;\n\t\t\t\n\t\tif(msg.value < min_value_buyToken) throw;\n\t\t\n\t\tuint256 value_send = msg.value;\n\t\tif(value_send > max_value_buyToken){\n\t\t\tvalue_send = max_value_buyToken;\n\t\t\tif(msg.sender.send(msg.value-max_value_buyToken)==false) throw;\n\t\t}\n\n\t\tuint256 decimals_token = 10**uint256(decimals);\n\t\t\n\t\tuint256 count_tokens = (value_send*decimals_token)/costOfOneToken;\n\t\t\n\t\tif(count_tokens >_balances[wallet_ICO].tokens_count ){\n\t\t\tcount_tokens = _balances[wallet_ICO].tokens_count;\n\t\t}\n\t\tif(value_send > (count_tokens*costOfOneToken)/decimals_token){\t\t\t\t\n\t\t\tif(msg.sender.send(value_send-((count_tokens*costOfOneToken)/decimals_token))==false) throw;\n\t\t\tvalue_send = (count_tokens*costOfOneToken)/decimals_token;\n\t\t}\n\n\t\tif(!_balances[msg.sender].init){\n\t\t\tif (_balances[wallet_ICO].tokens_count < count_tokens) throw;\n\t\t\taddUserToList(msg.sender);\n\t\t\t_balances[wallet_ICO].tokens_count -= count_tokens;\n\t\t\t_balances[msg.sender] = holderData(count_tokens, true);\n\t\t}\n\t\telse{\n\t\t\tif(((_balances[msg.sender].tokens_count*costOfOneToken)/decimals_token)+((count_tokens*costOfOneToken)/decimals_token)>max_value_buyToken) {\n\t\t\t\tcount_tokens = ((max_value_buyToken*decimals_token)/costOfOneToken)-_balances[msg.sender].tokens_count;\t\t\t\t\t\n\t\t\t\tif(msg.sender.send(value_send-((count_tokens*costOfOneToken)/decimals_token))==false) throw;\n\t\t\t\tvalue_send = (count_tokens*costOfOneToken)/decimals_token;\n\t\t\t}\n\n\t\t\tif (_balances[wallet_ICO].tokens_count < count_tokens) throw;\n\t\t\t_balances[wallet_ICO].tokens_count -= count_tokens;\n\t\t\t_balances[msg.sender].tokens_count += count_tokens;\n\t\t}\n\n\t\tif(value_send>0){\n\t\t\tif(wallet_ICO.send(value_send)==false) throw;\n\t\t}\n\n\t\tif(count_tokens>0){\n\t\t\tTokenBuy(msg.sender, count_tokens);\n\t\t}\n\n\t\tif(_balances[wallet_ICO].tokens_count == 0){\n\t\t\tenableICO = false;\n\t\t}\n\t}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"tempTokensBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getListAddressHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"partner\",\"type\":\"address\"},{\"name\":\"value_bet\",\"type\":\"uint256\"},{\"name\":\"coef_player\",\"type\":\"uint256\"},{\"name\":\"coef_partner\",\"type\":\"uint256\"}],\"name\":\"emission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"sendTempTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOperationBlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"tempTokensPeriodOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsTransferFromOldContractDone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_developer\",\"type\":\"address\"}],\"name\":\"changeDeveloper\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"changeMaxValueBetForEmission\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"infoICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsTransferTempFromOldContractDone\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_cost\",\"type\":\"uint256\"}],\"name\":\"newCostToken\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_contract\",\"type\":\"address\"}],\"name\":\"changeDividentContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"game\",\"type\":\"address\"}],\"name\":\"deleteGame\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getItemTempHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"costOfOneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"returnTempTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_manager\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOperationAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopOperation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"restoreAllPersistentTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"changeMaxCoefPlayerForEmission\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"runICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getItemHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startOperation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"restoreAllTempTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountTempHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"_allowance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCostToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_value\",\"type\":\"uint256\"}],\"name\":\"changeMaxCoefPartnerForEmission\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"gameListOf\",\"outputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initCountTokens\",\"outputs\":[{\"name\":\"init_count\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getListTempHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_game\",\"type\":\"address\"}],\"name\":\"addNewGame\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"TokenBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coef\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"decimals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cost_token\",\"type\":\"uint256\"}],\"name\":\"Emission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"TempTokensSend\",\"type\":\"event\"}]",
  "bytecode": ""
}