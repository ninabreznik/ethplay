{
  "address": "0x1c9db47ee8abad20d28f9bbe2363ca0c8c9ab9b8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Bitsense",
  "compilerVersion": "v0.4.20-nightly.2018.1.19+commit.eba46a65",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-24\n*/\n\npragma solidity ^0.4.0;\n\ninterface ERC20 {\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n    function approve(address _spender, uint _value) public returns (bool);\n    function allowance(address _owner, address _spender) public constant returns (uint);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface ERC223 {\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract BitsenseToken {\n    string internal _symbol;\n    string internal _name;\n    uint8 internal _decimals;\n    uint internal _totalSupply = 1000000000000000;\n    mapping (address => uint) _balanceOf;\n    mapping (address => mapping (address => uint)) internal _allowances;\n\n    function BitsenseToken(string symbol, string name, uint8 decimals, uint totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n    }\n\n    function name() public constant returns (string) {\n        return _name;\n    }\n\n    function symbol() public constant returns (string) {\n        return _symbol;\n    }\n\n    function decimals() public constant returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _addr) public constant returns (uint);\n    function transfer(address _to, uint _value) public returns (bool);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Bitsense is BitsenseToken(\"BINS\", \"Bitsense\", 8, 1000000000000000), ERC20, ERC223 {\n    address private _owner;\n    struct LockAccount{\n        uint status;\n    }\n    \n    struct Reward{\n        uint amount;\n    }\n    \n    mapping (address => LockAccount) lockAccounts;\n    address[] public AllLockAccounts;\n    \n    mapping (address => Reward) rewards;\n    address[] public rewardsAccounts;\n    \n    using SafeMath for uint;\n    \n \n    \n    function Bitsense() public {\n        _balanceOf[msg.sender] = _totalSupply;\n        _owner = msg.sender;\n    }\n   \n    \n       function setLockAccount(address _addr) public{\n        require(msg.sender == _owner);\n        var lock_account = lockAccounts[_addr];\n        lock_account.status = 1;\n        AllLockAccounts.push(_addr) -1;\n    }\n    \n        function setReward(address _addr, uint _amount) public{\n        require(msg.sender == _owner);\n        var reward = rewards[_addr];\n        reward.amount +=  _amount;\n        rewardsAccounts.push(_addr) -1;\n    }\n  \n    function claimReward(address _addr) public returns (bool){\n        var addressTo = _addr;\n        uint amount = rewards[_addr].amount;\n       \n     \n          if (amount > 0 &&\n            amount <= _balanceOf[_owner] &&\n            !isContract(addressTo)) {\n            _balanceOf[_owner] = _balanceOf[_owner].sub(amount);\n            _balanceOf[addressTo] = _balanceOf[addressTo].add(amount);\n            Transfer(msg.sender, addressTo, amount);\n            return true;\n        }\n          rewards[_addr].amount = 0;\n        \n    }\n    \n    function getLockAccounts() view public returns (address[]){\n        return AllLockAccounts;\n    }\n    \n     function getLockAccount(address _addr) view public returns (uint){\n        return lockAccounts[_addr].status;\n    }\n    \n    function getReward(address _addr) view public returns (uint){\n        return rewards[_addr].amount;\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _addr) public constant returns (uint) {\n        return _balanceOf[_addr];\n    }\n\n    function transfer(address _to, uint _value) public returns (bool) {\n        if (_value > 0 &&\n            _value <= _balanceOf[msg.sender] &&\n            !isContract(_to) && !isLock(msg.sender)) {\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    \n\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n        if (_value > 0 &&\n            _value <= _balanceOf[msg.sender] &&\n            isContract(_to) && !isLock(msg.sender)) {\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n            _contract.tokenFallback(msg.sender, _value, _data);\n            Transfer(msg.sender, _to, _value, _data);\n            return true;\n        }\n        return false;\n    }\n    \n    function unLockAccount(address _addr) public {\n        require(msg.sender == _owner);\n       lockAccounts[_addr].status = 0;\n       \n    }\n    function isLock (address _addr) private constant returns(bool){\n        var lS = lockAccounts[_addr].status;\n        \n        if(lS == 1){\n            return true;\n        }\n        \n        return false;\n    }\n\n    function isContract(address _addr) private constant returns (bool) {\n        uint codeSize;\n        assembly {\n            codeSize := extcodesize(_addr)\n        }\n        return codeSize > 0;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n        if (_allowances[_from][msg.sender] > 0 &&\n            _value > 0 &&\n            _allowances[_from][msg.sender] >= _value &&\n            _balanceOf[_from] >= _value) {\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n            Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n\n   \n    function approve(address _spender, uint _value) public returns (bool) {\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint) {\n        return _allowances[_owner][_spender];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLockAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AllLockAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unLockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLockAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setLockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405266038d7ea4c6800060035534156200001b57600080fd5b604080519081016040908152600482527f42494e53000000000000000000000000000000000000000000000000000000006020830152805190810160405260088082527f42697473656e7365000000000000000000000000000000000000000000000000602083015266038d7ea4c680006000848051620000a19291602001906200010a565b506001838051620000b79291602001906200010a565b506002805460ff191660ff9390931692909217909155600381905533600160a060020a031660008181526004602052604090209190915560068054600160a060020a031916909117905550620001af9050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014d57805160ff19168380011785556200017d565b828001600101855582156200017d579182015b828111156200017d57825182559160200191906001019062000160565b506200018b9291506200018f565b5090565b620001ac91905b808211156200018b576000815560010162000196565b90565b61102880620001bf6000396000f3006060604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b31461019557806316b21dfb146101cb57806318160ddd146101fc5780631a859db81461020f5780631bfe78311461024157806323b872dd14610257578063313ce5671461027f5780633c512900146102a857806370a08231146102c957806395d89b41146102e8578063a9059cbb146102fb578063b2369f121461031d578063be45fd6214610383578063c00007b0146103e8578063d279c19114610407578063dd62ed3e14610426578063eacccaf01461044b578063fc01987b1461046d575b600080fd5b341561011657600080fd5b61011e61048c565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015a578082015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a057600080fd5b6101b7600160a060020a0360043516602435610535565b604051901515815260200160405180910390f35b34156101d657600080fd5b6101ea600160a060020a03600435166105da565b60405190815260200160405180910390f35b341561020757600080fd5b6101ea6105f5565b341561021a57600080fd5b6102256004356105fb565b604051600160a060020a03909116815260200160405180910390f35b341561024c57600080fd5b610225600435610623565b341561026257600080fd5b6101b7600160a060020a0360043581169060243516604435610631565b341561028a57600080fd5b6102926107e2565b60405160ff909116815260200160405180910390f35b34156102b357600080fd5b6102c7600160a060020a03600435166107eb565b005b34156102d457600080fd5b6101ea600160a060020a0360043516610820565b34156102f357600080fd5b61011e61083b565b341561030657600080fd5b6101b7600160a060020a03600435166024356108ae565b341561032857600080fd5b6103306109c7565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561036f578082015183820152602001610357565b505050509050019250505060405180910390f35b341561038e57600080fd5b6101b760048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610a2e95505050505050565b34156103f357600080fd5b6101ea600160a060020a0360043516610caa565b341561041257600080fd5b6101b7600160a060020a0360043516610cc5565b341561043157600080fd5b6101ea600160a060020a0360043581169060243516610e05565b341561045657600080fd5b6102c7600160a060020a0360043516602435610e30565b341561047857600080fd5b6102c7600160a060020a0360043516610ebf565b610494610fa3565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561052a5780601f106104ff5761010080835404028352916020019161052a565b820191906000526020600020905b81548152906001019060200180831161050d57829003601f168201915b505050505090505b90565b600160a060020a03338116600090815260056020908152604080832093861683529290529081205461056d908363ffffffff610f4816565b600160a060020a03338116600081815260056020908152604080832094891680845294909152908190209390935590917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600160a060020a031660009081526007602052604090205490565b60035490565b600a80548290811061060957fe5b600091825260209091200154600160a060020a0316905081565b600880548290811061060957fe5b600160a060020a0380841660009081526005602090815260408083203390941683529290529081205481901180156106695750600082115b801561069c5750600160a060020a0380851660009081526005602090815260408083203390941683529290522054829010155b80156106c15750600160a060020a038416600090815260046020526040902054829010155b156107d757600160a060020a0384166000908152600460205260409020546106ef908363ffffffff610f5716565b600160a060020a038086166000908152600460205260408082209390935590851681522054610724908363ffffffff610f4816565b600160a060020a0380851660009081526004602090815260408083209490945587831682526005815283822033909316825291909152205461076c908363ffffffff610f5716565b600160a060020a03808616600081815260056020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016107db565b5060005b9392505050565b60025460ff1690565b60065433600160a060020a0390811691161461080657600080fd5b600160a060020a0316600090815260076020526040812055565b600160a060020a031660009081526004602052604090205490565b610843610fa3565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561052a5780601f106104ff5761010080835404028352916020019161052a565b600080821180156108d75750600160a060020a0333166000908152600460205260409020548211155b80156108e957506108e783610f69565b155b80156108fb57506108f933610f78565b155b156109be57600160a060020a033316600090815260046020526040902054610929908363ffffffff610f5716565b600160a060020a03338116600090815260046020526040808220939093559085168152205461095e908363ffffffff610f4816565b600160a060020a0380851660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016105d4565b50600092915050565b6109cf610fa3565b600880548060200260200160405190810160405280929190818152602001828054801561052a57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610a07575050505050905090565b600080600084118015610a595750600160a060020a0333166000908152600460205260409020548411155b8015610a695750610a6985610f69565b8015610a7b5750610a7933610f78565b155b15610c9d57600160a060020a033316600090815260046020526040902054610aa9908563ffffffff610f5716565b600160a060020a033381166000908152600460205260408082209390935590871681522054610ade908563ffffffff610f4816565b600160a060020a03861660008181526004602052604090819020929092558692509063c0ee0b8a90339087908790518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b90578082015183820152602001610b78565b50505050905090810190601f168015610bbd5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610bdd57600080fd5b6102c65a03f11515610bee57600080fd5b505050826040518082805190602001908083835b60208310610c215780518252601f199092019160209182019101610c02565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902085600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c168760405190815260200160405180910390a460019150610ca2565b600091505b509392505050565b600160a060020a031660009081526009602052604090205490565b600160a060020a03811660009081526009602052604081205482908281118015610d095750600654600160a060020a03166000908152600460205260409020548111155b8015610d1b5750610d1982610f69565b155b15610de457600654600160a060020a0316600090815260046020526040902054610d4b908263ffffffff610f5716565b600654600160a060020a039081166000908152600460205260408082209390935590841681522054610d83908263ffffffff610f4816565b600160a060020a0380841660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a360019250610dfe565b600160a060020a0384166000908152600960205260408120555b5050919050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60065460009033600160a060020a03908116911614610e4e57600080fd5b50600160a060020a0382166000908152600960205260409020805482018155600a805460019190808301610e828382610fb5565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039590951694909417909355505050565b60065460009033600160a060020a03908116911614610edd57600080fd5b50600160a060020a0381166000908152600760205260409020600180825560088054808301610f0c8382610fb5565b506000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0394909416939093179092555050565b6000828201838110156107db57fe5b600082821115610f6357fe5b50900390565b6000813b908111905b50919050565b600160a060020a03811660009081526007602052604081205460018114156109be5760019150610f72565b60206040519081016040526000815290565b815481835581811511610fd957600083815260209020610fd9918101908301610fde565b505050565b61053291905b80821115610ff85760008155600101610fe4565b50905600a165627a7a723058203dc5eec9bc71696cb6fae225da9bd41df0af1e4da06de3991850dae5e108ee1b0029"
}