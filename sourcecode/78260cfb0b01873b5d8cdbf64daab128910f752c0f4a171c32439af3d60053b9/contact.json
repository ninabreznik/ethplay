{
  "address": "0x16d9306c93a37ae3954efe211262ab6e7579acc0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "C3Coin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-08\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC223\n * @dev Interface for ERC223\n */\ninterface ERC223 {\n\n    // functions\n    function balanceOf(address _owner) external constant returns (uint256);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n\n\n\n    // Getters\n    function name() external constant returns  (string _name);\n    function symbol() external constant returns  (string _symbol);\n    function decimals() external constant returns (uint8 _decimals);\n    function totalSupply() external constant returns (uint256 _totalSupply);\n\n\n    // Events\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n    event Burn(address indexed burner, uint256 value);\n}\n\n\n/**\n * @notice A contract will throw tokens if it does not inherit this\n * @title ERC223ReceivingContract\n * @dev Contract for ERC223 token fallback\n */\ncontract ERC223ReceivingContract {\n\n    TKN internal fallback;\n\n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n\n    function tokenFallback(address _from, uint256 _value, bytes _data) external pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n\n        /*\n         * tkn variable is analogue of msg variable of Ether transaction\n         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n         * tkn.value the number of tokens that were sent   (analogue of msg.value)\n         * tkn.data is data of token transaction   (analogue of msg.data)\n         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\n         */\n\n\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n    \n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(\n      address indexed previousOwner,\n      address indexed newOwner\n    );\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\n\n/**\n * @title C3Coin\n * @dev C3Coin is an ERC223 Token with ERC20 functions and events\n *      Fully backward compatible with ERC20\n */\ncontract C3Coin is ERC223, Ownable {\n    using SafeMath for uint;\n\n\n    string public name = \"C3coin\";\n    string public symbol = \"CCC\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply = 10e10 * 1e18;\n\n\n    constructor() public {\n        balances[msg.sender] = totalSupply; \n    }\n\n\n    mapping (address => uint256) public balances;\n\n    mapping(address => mapping (address => uint256)) public allowance;\n\n\n    /**\n     * @dev Getters\n     */\n    // Function to access name of token .\n    function name() external constant returns (string _name) {\n        return name;\n    }\n    // Function to access symbol of token .\n    function symbol() external constant returns (string _symbol) {\n        return symbol;\n    }\n    // Function to access decimals of token .\n    function decimals() external constant returns (uint8 _decimals) {\n        return decimals;\n    }\n    // Function to access total supply of tokens .\n    function totalSupply() external constant returns (uint256 _totalSupply) {\n        return totalSupply;\n    }\n\n\n    /**\n     * @dev Get balance of a token owner\n     * @param _owner The address which one owns tokens\n     */\n    function balanceOf(address _owner) external constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n\n    /**\n     * @notice This function is modified for erc223 standard\n     * @dev ERC20 transfer function added for backward compatibility.\n     * @param _to Address of token receiver\n     * @param _value Number of tokens to send\n     */\n    function transfer(address _to, uint _value) public returns (bool success) {\n        bytes memory empty = hex\"00000000\";\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        } else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n\n    /**\n     * @dev ERC223 transfer function\n     * @param _to Address of token receiver\n     * @param _value Number of tokens to send\n     * @param _data Data equivalent to tx.data from ethereum transaction\n     */\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n\n        if (isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        } else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length > 0);\n    }\n\n\n    // function which is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit ERC223Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    // function which is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        emit ERC223Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     *      Added due to backwards compatibility with ERC20\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 The amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) external returns (bool success) {\n        allowance[msg.sender][_spender] = 0; // mitigate the race condition\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner Address The address which owns the funds.\n     * @param _spender Address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n\n\n    /**\n     * @dev Function to distribute tokens to the list of addresses by the provided uniform amount\n     * @param _addresses List of addresses\n     * @param _amount Uniform amount of tokens\n     */\n    function multiTransfer(address[] _addresses, uint256 _amount) public returns (bool) {\n\n        uint256 totalAmount = _amount.mul(_addresses.length);\n        require(balances[msg.sender] >= totalAmount);\n\n        for (uint j = 0; j < _addresses.length; j++) {\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\n            balances[_addresses[j]] = balances[_addresses[j]].add(_amount);\n            emit Transfer(msg.sender, _addresses[j], _amount);\n        }\n        return true;\n    }\n\n\n    /**\n     * @dev Function to distribute tokens to the list of addresses by the provided various amount\n     * @param _addresses List of addresses\n     * @param _amounts List of token amounts\n     */\n    function multiTransfer(address[] _addresses, uint256[] _amounts) public returns (bool) {\n\n        uint256 totalAmount = 0;\n\n        for(uint j = 0; j < _addresses.length; j++){\n\n            totalAmount = totalAmount.add(_amounts[j]);\n        }\n        require(balances[msg.sender] >= totalAmount);\n\n        for (j = 0; j < _addresses.length; j++) {\n            balances[msg.sender] = balances[msg.sender].sub(_amounts[j]);\n            balances[_addresses[j]] = balances[_addresses[j]].add(_amounts[j]);\n            emit Transfer(msg.sender, _addresses[j], _amounts[j]);\n        }\n        return true;\n    }\n\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) onlyOwner public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _owner, uint256 _value) internal {\n        require(_value <= balances[_owner]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        balances[_owner] = balances[_owner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(_owner, _value);\n        emit Transfer(_owner, address(0), _value);\n    }\n\n    /**\n     * @dev Default payable function executed after receiving ether\n     */\n    function () public payable {\n        // does not accept ether\n    }\n}",
  "bytecode": "60c0604052600660808190527f4333636f696e000000000000000000000000000000000000000000000000000060a0908152620000409160019190620000df565b506040805180820190915260038082527f434343000000000000000000000000000000000000000000000000000000000060209092019182526200008791600291620000df565b506003805460ff191660121790556c01431e0fae6d7217caa0000000600455348015620000b357600080fd5b5060008054600160a060020a031916339081178255600454908252600560205260409091205562000184565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012257805160ff191683800117855562000152565b8280016001018555821562000152579182015b828111156200015257825182559160200191906001019062000135565b506200016092915062000164565b5090565b6200018191905b808211156200016057600081556001016200016b565b90565b6110cf80620001946000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e7578063095ea7b31461017157806318160ddd146101a95780631e89d545146101d057806323b872dd1461025e57806327e235e314610288578063313ce567146102a957806342966c68146102d457806370a08231146102ec5780638da5cb5b1461030d57806395d89b411461033e578063a16a317914610353578063a9059cbb146103aa578063be45fd62146103ce578063dd62ed3e14610437578063f2fde38b1461045e575b005b3480156100f357600080fd5b506100fc61047f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013657818101518382015260200161011e565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017d57600080fd5b50610195600160a060020a0360043516602435610514565b604080519115158252519081900360200190f35b3480156101b557600080fd5b506101be61057b565b60408051918252519081900360200190f35b3480156101dc57600080fd5b506040805160206004803580820135838102808601850190965280855261019595369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506105819650505050505050565b34801561026a57600080fd5b50610195600160a060020a036004358116906024351660443561073f565b34801561029457600080fd5b506101be600160a060020a036004351661083b565b3480156102b557600080fd5b506102be61084d565b6040805160ff9092168252519081900360200190f35b3480156102e057600080fd5b506100e5600435610856565b3480156102f857600080fd5b506101be600160a060020a036004351661087a565b34801561031957600080fd5b50610322610895565b60408051600160a060020a039092168252519081900360200190f35b34801561034a57600080fd5b506100fc6108a4565b34801561035f57600080fd5b50604080516020600480358082013583810280860185019096528085526101959536959394602494938501929182918501908490808284375094975050933594506109029350505050565b3480156103b657600080fd5b50610195600160a060020a0360043516602435610a1f565b3480156103da57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610195948235600160a060020a0316946024803595369594606494920191908190840183828082843750949750610a699650505050505050565b34801561044357600080fd5b506101be600160a060020a0360043581169060243516610a96565b34801561046a57600080fd5b506100e5600160a060020a0360043516610ac1565b60018054604080516020601f6002600019610100878916150201909516949094049384018190048102820181019092528281526060939092909183018282801561050a5780601f106104df5761010080835404028352916020019161050a565b820191906000526020600020905b8154815290600101906020018083116104ed57829003601f168201915b5050505050905090565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60045490565b600080805b84518110156105c1576105b784828151811015156105a057fe5b60209081029091010151839063ffffffff610ae116565b9150600101610586565b336000908152600560205260409020548211156105dd57600080fd5b5060005b84518110156107345761062384828151811015156105fb57fe5b602090810290910181015133600090815260059092526040909120549063ffffffff610aee16565b3360009081526005602052604090205583516106909085908390811061064557fe5b9060200190602002015160056000888581518110151561066157fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff610ae116565b6005600087848151811015156106a257fe5b6020908102909101810151600160a060020a031682528101919091526040016000205584518590829081106106d357fe5b90602001906020020151600160a060020a031633600160a060020a0316600080516020611084833981519152868481518110151561070d57fe5b906020019060200201516040518082815260200191505060405180910390a36001016105e1565b506001949350505050565b600160a060020a038316600090815260056020526040812054610768908363ffffffff610aee16565b600160a060020a03808616600090815260056020526040808220939093559085168152205461079d908363ffffffff610ae116565b600160a060020a0380851660009081526005602090815260408083209490945591871681526006825282812033825290915220546107e1908363ffffffff610aee16565b600160a060020a0380861660008181526006602090815260408083203384528252918290209490945580518681529051928716939192600080516020611084833981519152929181900390910190a35060015b9392505050565b60056020526000908152604090205481565b60035460ff1690565b600054600160a060020a0316331461086d57600080fd5b6108773382610b00565b50565b600160a060020a031660009081526005602052604090205490565b600054600160a060020a031681565b60028054604080516020601f600019610100600187161502019094168590049384018190048102820181019092528281526060939092909183018282801561050a5780601f106104df5761010080835404028352916020019161050a565b600080600061091b855185610bef90919063ffffffff16565b3360009081526005602052604090205490925082111561093a57600080fd5b5060005b84518110156107345733600090815260056020526040902054610967908563ffffffff610aee16565b3360009081526005602081905260408220929092558651610992928792909189908690811061066157fe5b6005600087848151811015156109a457fe5b6020908102909101810151600160a060020a031682528101919091526040016000205584518590829081106109d557fe5b90602001906020020151600160a060020a031633600160a060020a0316600080516020611084833981519152866040518082815260200191505060405180910390a360010161093e565b604080518082019091526004815260006020820181905290610a4084610c18565b15610a5757610a50848483610c20565b9150610a62565b610a50848483610e82565b5092915050565b6000610a7484610c18565b15610a8b57610a84848484610c20565b9050610834565b610a84848484610e82565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600054600160a060020a03163314610ad857600080fd5b61087781611006565b8181018281101561057557fe5b600082821115610afa57fe5b50900390565b600160a060020a038216600090815260056020526040902054811115610b2557600080fd5b600160a060020a038216600090815260056020526040902054610b4e908263ffffffff610aee16565b600160a060020a038316600090815260056020526040902055600454610b7a908263ffffffff610aee16565b600455604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206110848339815191529181900360200190a35050565b6000821515610c0057506000610575565b50818102818382811515610c1057fe5b041461057557fe5b6000903b1190565b336000908152600560205260408120548190841115610c3e57600080fd5b33600090815260056020526040902054610c5e908563ffffffff610aee16565b3360009081526005602052604080822092909255600160a060020a03871681522054610c90908563ffffffff610ae116565b600160a060020a03861660008181526005602090815260408083209490945592517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018a90526060604484019081528951606485015289518c9850959663c0ee0b8a9693958c958c956084909101928601918190849084905b83811015610d2e578181015183820152602001610d16565b50505050905090810190601f168015610d5b5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610d7c57600080fd5b505af1158015610d90573d6000803e3d6000fd5b5050505084600160a060020a031633600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd186866040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e0e578181015183820152602001610df6565b50505050905090810190601f168015610e3b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3604080518581529051600160a060020a0387169133916000805160206110848339815191529181900360200190a3506001949350505050565b33600090815260056020526040812054831115610e9e57600080fd5b33600090815260056020526040902054610ebe908463ffffffff610aee16565b3360009081526005602052604080822092909255600160a060020a03861681522054610ef0908463ffffffff610ae116565b6005600086600160a060020a0316600160a060020a031681526020019081526020016000208190555083600160a060020a031633600160a060020a03167f9bfafdc2ae8835972d7b64ef3f8f307165ac22ceffde4a742c52da5487f45fd185856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f93578181015183820152602001610f7b565b50505050905090810190601f168015610fc05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3604080518481529051600160a060020a0386169133916000805160206110848339815191529181900360200190a35060019392505050565b600160a060020a038116151561101b57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582060990af8f41f96004eb5be247ccab08ce78a68448690aba234fb4027ebef06a20029"
}