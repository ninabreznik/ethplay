{
  "address": "0xb440cf08bc2c78c33f3d29726d6c8ba5cbaa4b91",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FSBook",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-09\n*/\n\npragma solidity 0.4.25;\n\n\ninterface FSForwarderInterface {\n    function deposit() external payable returns(bool);\n}\n\n\n/// @title Contract for managing player names and affiliate payments.\n/// @notice This contract manages player names and affiliate payments\n/// from registered games. Players can buy multiple names and select\n/// which name to be used. Players who buy affiliate memberships can\n/// receive affiliate payments from registered games.\n/// Players can withdraw affiliate payments at any time.\n/// @dev The address of the forwarder is hardcoded. Check 'TODO' before\n/// deploy.\ncontract FSBook {\n    using NameFilter for string;\n    using SafeMath for uint256;\n\n    // TODO : CHECK THE ADDRESS!!!\n    FSForwarderInterface constant private FSKingCorp = FSForwarderInterface(0x3a2321DDC991c50518969B93d2C6B76bf5309790);\n\n    // data    \n    uint256 public registrationFee_ = 10 finney;            // price to register a name\n    uint256 public affiliateFee_ = 500 finney;              // price to become an affiliate\n    uint256 public pID_;        // total number of players\n\n    // (addr => pID) returns player id by address\n    mapping (address => uint256) public pIDxAddr_;\n    // (name => pID) returns player id by name\n    mapping (bytes32 => uint256) public pIDxName_;\n    // (pID => data) player data\n    mapping (uint256 => Player) public plyr_;\n    // (pID => name => bool) list of names a player owns.  (used so you can change your display name amoungst any name you own)\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_;\n    // (pID => nameNum => name) list of names a player owns\n    mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_;\n    // registered games\n    mapping (address => bool) public registeredGames_;\n\n\n    struct Player {\n        address addr;\n        bytes32 name;\n        bool hasAff;\n\n        uint256 aff;\n        uint256 withdrawnAff;\n\n        uint256 laff;\n        uint256 affT2;\n        uint256 names;\n    }\n\n\n    // constructor\n    constructor()\n        public\n    {\n        // premine the dev names (sorry not sorry)\n        // No keys are purchased with this method, it's simply locking our addresses,\n        // PID's and names for referral codes.\n        plyr_[1].addr = 0xe0b005384df8f4d80e9a69b6210ec1929a935d97;\n        plyr_[1].name = \"sportking\";\n        plyr_[1].hasAff = true;\n        plyr_[1].names = 1;\n        pIDxAddr_[0xe0b005384df8f4d80e9a69b6210ec1929a935d97] = 1;\n        pIDxName_[\"sportking\"] = 1;\n        plyrNames_[1][\"sportking\"] = true;\n        plyrNameList_[1][1] = \"sportking\";\n\n        pID_ = 1;\n    }\n\n    // modifiers\n    \n    /// @dev prevents contracts from interacting with fsbook\n    modifier isHuman() {\n        address _addr = msg.sender;\n        require (_addr == tx.origin, \"Human only\");\n\n        uint256 _codeLength;\n        assembly { _codeLength := extcodesize(_addr) }\n        require(_codeLength == 0, \"Human only\");\n        _;\n    }\n    \n\n    // TODO: Check address!!!\n    /// @dev Check if caller is one of the owner(s).\n    modifier onlyDevs() \n    {\n        // TODO : CHECK THE ADDRESS!!!\n        require(msg.sender == 0xe0b005384df8f4d80e9a69b6210ec1929a935d97 ||\n            msg.sender == 0xe3ff68fb79fee1989fb67eb04e196e361ecaec3e ||\n            msg.sender == 0xb914843d2e56722a2c133eff956d1f99b820d468 ||\n            msg.sender == 0xc52FA2C9411fCd4f58be2d6725094689C46242f2, \"msg sender is not a dev\");\n        _;\n    }\n\n\n    /// @dev Check if caller is registered.\n    modifier isRegisteredGame() {\n        require(registeredGames_[msg.sender] == true, \"sender is not registered\");\n        _;\n    }\n    \n    // events\n\n    event onNewName\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        bool isNewPlayer,\n        uint256 affiliateID,\n        address affiliateAddress,\n        bytes32 affiliateName,\n        uint256 amountPaid,\n        uint256 timestamp\n    );\n\n    event onNewAffiliate\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        uint256 amountPaid,\n        uint256 timestamp\n    );\n\n    event onUseOldName\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        uint256 timestamp\n    );\n\n    event onGameRegistered\n    (\n        address indexed gameAddress,\n        bool enabled,\n        uint256 timestamp\n    );\n\n    event onWithdraw\n    (\n        uint256 indexed playerID,\n        address indexed playerAddress,\n        bytes32 indexed playerName,\n        uint256 amount,\n        uint256 timestamp  \n    );\n\n    // getters:\n    function checkIfNameValid(string _nameStr)\n        public\n        view\n        returns(bool)\n    {\n        bytes32 _name = _nameStr.nameFilter();\n        if (pIDxName_[_name] == 0)\n            return (true);\n        else \n            return (false);\n    }\n\n    // public functions:\n    /**\n     * @dev registers a name.  UI will always display the last name you registered.\n     * but you will still own all previously registered names to use as affiliate \n     * links.\n     * - must pay a registration fee.\n     * - name must be unique\n     * - names will be converted to lowercase\n     * - name cannot start or end with a space \n     * - cannot have more than 1 space in a row\n     * - cannot be only numbers\n     * - cannot start with 0x \n     * - name must be at least 1 char\n     * - max length of 32 characters long\n     * - allowed characters: a-z, 0-9, and space\n     * -functionhash- 0x921dec21 (using ID for affiliate)\n     * -functionhash- 0x3ddd4698 (using address for affiliate)\n     * -functionhash- 0x685ffd83 (using name for affiliate)\n     * @param _nameString players desired name\n     * @param _affCode affiliate ID, address, or name of who refered you\n     * (this might cost a lot of gas)\n     */\n\n    function registerNameXID(string _nameString, uint256 _affCode)\n        external\n        payable \n        isHuman()\n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\n        \n        // filter name + condition checks\n        bytes32 _name = NameFilter.nameFilter(_nameString);\n        \n        // set up address \n        address _addr = msg.sender;\n        \n        // set up our tx event data and determine if player is new or not\n        bool _isNewPlayer = determinePID(_addr);\n        \n        // fetch player id\n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // manage affiliate residuals\n        // if no affiliate code was given, no new affiliate code was given, or the \n        // player tried to use their own pID as an affiliate code, lolz\n        uint256 _affID = _affCode;\n        if (_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID) \n        {\n            // update last affiliate \n            plyr_[_pID].laff = _affCode;\n        } else if (_affCode == _pID) {\n            _affID = 0;\n        }\n        \n        // register name \n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer);\n    }\n    \n\n    function registerNameXaddr(string _nameString, address _affCode)\n        external\n        payable \n        isHuman()\n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\n        \n        // filter name + condition checks\n        bytes32 _name = NameFilter.nameFilter(_nameString);\n        \n        // set up address \n        address _addr = msg.sender;\n        \n        // set up our tx event data and determine if player is new or not\n        bool _isNewPlayer = determinePID(_addr);\n        \n        // fetch player id\n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        uint256 _affID;\n        if (_affCode != address(0) && _affCode != _addr)\n        {\n            // get affiliate ID from aff Code \n            _affID = pIDxAddr_[_affCode];\n            \n            // if affID is not the same as previously stored \n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        \n        // register name \n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer);\n    }\n    \n\n    function registerNameXname(string _nameString, bytes32 _affCode)\n        external\n        payable \n        isHuman()\n    {\n        // make sure name fees paid\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\n        \n        // filter name + condition checks\n        bytes32 _name = NameFilter.nameFilter(_nameString);\n        \n        // set up address \n        address _addr = msg.sender;\n        \n        // set up our tx event data and determine if player is new or not\n        bool _isNewPlayer = determinePID(_addr);\n        \n        // fetch player id\n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        uint256 _affID;\n        if (_affCode != \"\" && _affCode != _name)\n        {\n            // get affiliate ID from aff Code \n            _affID = pIDxName_[_affCode];\n            \n            // if affID is not the same as previously stored \n            if (_affID != plyr_[_pID].laff)\n            {\n                // update last affiliate\n                plyr_[_pID].laff = _affID;\n            }\n        }\n        \n        // register name \n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer);\n    }\n\n\n    function registerAffiliate()\n        external\n        payable\n        isHuman()\n    {\n        // make sure name fees paid\n        require (msg.value >= affiliateFee_, \"umm.....  you have to pay the name fee\");\n\n        // set up address \n        address _addr = msg.sender;\n        uint256 _pID = pIDxAddr_[_addr];\n\n        require (_pID > 0, \"you need to be registered\");\n        require (plyr_[_pID].hasAff == false, \"already registered as affiliate\");\n\n        FSKingCorp.deposit.value(msg.value)();\n        plyr_[_pID].hasAff = true;\n\n        bytes32 _name = plyr_[_pID].name;\n\n        // fire event\n        emit onNewAffiliate(_pID, _addr, _name, msg.value, now);\n    }\n\n\n    function registerGame(address _contract, bool _enable)\n        external\n        isHuman()\n        onlyDevs()\n    {\n        registeredGames_[_contract] = _enable;\n\n        emit onGameRegistered(_contract, _enable, now);\n    }\n    \n    /**\n     * @dev players use this to change back to one of your old names.  tip, you'll\n     * still need to push that info to existing games.\n     * -functionhash- 0xb9291296\n     * @param _nameString the name you want to use \n     */\n    function useMyOldName(string _nameString)\n        external\n        isHuman()\n    {\n        // filter name, and get pID\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _pID = pIDxAddr_[_addr];\n        \n        // make sure they own the name \n        require(plyrNames_[_pID][_name] == true, \"umm... thats not a name you own\");\n        \n        // update their current name \n        plyr_[_pID].name = _name;\n\n        emit onUseOldName(_pID, _addr, _name, now);\n    }\n\n    // deposit affiliate to a code\n    function depositAffiliate(uint256 _pID)\n        external\n        payable\n        isRegisteredGame()\n    {\n        require(plyr_[_pID].hasAff == true, \"Not registered as affiliate\");\n\n        uint256 value = msg.value;\n        plyr_[_pID].aff = value.add(plyr_[_pID].aff);\n    }\n\n    // withdraw money\n    function withdraw()\n        external\n        isHuman()\n    {\n        address _addr = msg.sender;\n        uint256 _pID = pIDxAddr_[_addr];\n        bytes32 _name = plyr_[_pID].name;\n        require(_pID != 0, \"need to be registered\");\n\n        uint256 _remainValue = (plyr_[_pID].aff).sub(plyr_[_pID].withdrawnAff);\n        if (_remainValue > 0) {\n            plyr_[_pID].withdrawnAff = plyr_[_pID].aff;\n            address(msg.sender).transfer(_remainValue);\n        }\n\n        emit onWithdraw(_pID, _addr, _name, _remainValue, now);\n    }\n    \n    // core logics:\n    function registerNameCore(uint256 _pID, address _addr, uint256 _affID, bytes32 _name, bool _isNewPlayer)\n        private\n    {\n        // if names already has been used, require that current msg sender owns the name\n        if (pIDxName_[_name] != 0)\n            require(plyrNames_[_pID][_name] == true, \"sorry that names already taken\");\n        \n        // add name to player profile, registry, and name book\n        plyr_[_pID].name = _name;\n        plyr_[_pID].affT2 = _affID;\n        pIDxName_[_name] = _pID;\n        if (plyrNames_[_pID][_name] == false)\n        {\n            plyrNames_[_pID][_name] = true;\n            plyr_[_pID].names++;\n            plyrNameList_[_pID][plyr_[_pID].names] = _name;\n        }\n        \n        // TODO: MODIFY THIS\n        // registration fee goes directly to community rewards\n        //FSKingCorp.deposit.value(address(this).balance)();\n        FSKingCorp.deposit.value(msg.value)();\n        \n        // fire event\n        emit onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, msg.value, now);\n    }\n\n    function determinePID(address _addr)\n        private\n        returns (bool)\n    {\n        if (pIDxAddr_[_addr] == 0)\n        {\n            pID_++;\n            pIDxAddr_[_addr] = pID_;\n            plyr_[pID_].addr = _addr;\n            \n            // set the new player bool to true\n            return (true);\n        } else {\n            return (false);\n        }\n    }\n\n    // external calls:\n    function getPlayerID(address _addr)\n        external\n        isRegisteredGame()\n        returns (uint256)\n    {\n        determinePID(_addr);\n        return (pIDxAddr_[_addr]);\n    }\n\n    function getPlayerName(uint256 _pID)\n        external\n        view\n        returns (bytes32)\n    {\n        return (plyr_[_pID].name);\n    }\n\n    function getPlayerLAff(uint256 _pID)\n        external\n        view\n        returns (uint256)\n    {\n        return (plyr_[_pID].laff);\n    }\n\n    function setPlayerLAff(uint256 _pID, uint256 _lAff)\n        external\n        isRegisteredGame()\n    {\n        if (_pID != _lAff && plyr_[_pID].laff != _lAff) {\n            plyr_[_pID].laff = _lAff;\n        }\n    }\n\n    function getPlayerAffT2(uint256 _pID)\n        external\n        view\n        returns (uint256)\n    {\n        return (plyr_[_pID].affT2);\n    }\n\n    function getPlayerAddr(uint256 _pID)\n        external\n        view\n        returns (address)\n    {\n        return (plyr_[_pID].addr);\n    }\n\n    function getPlayerHasAff(uint256 _pID)\n        external\n        view\n        returns (bool)\n    {\n        return (plyr_[_pID].hasAff);\n    }\n\n    function getNameFee()\n        external\n        view\n        returns (uint256)\n    {\n        return(registrationFee_);\n    }\n\n    function getAffiliateFee()\n        external\n        view\n        returns (uint256)\n    {\n        return (affiliateFee_);\n    }\n    \n    function setRegistrationFee(uint256 _fee)\n        external\n        onlyDevs()\n    {\n        registrationFee_ = _fee;\n    }\n\n    function setAffiliateFee(uint256 _fee)\n        external\n        onlyDevs()\n    {\n        affiliateFee_ = _fee;\n    }\n\n} \n\nlibrary NameFilter {\n    \n    /**\n     * @dev filters name strings\n     * -converts uppercase to lower case.  \n     * -makes sure it does not start/end with a space\n     * -makes sure it does not contain multiple spaces in a row\n     * -cannot be only numbers\n     * -cannot start with 0x \n     * -restricts characters to A-Z, a-z, 0-9, and space.\n     * @return reprocessed string in bytes32 format\n     */\n    function nameFilter(string _input)\n        internal\n        pure\n        returns(bytes32)\n    {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n        \n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\n        // make sure it doesnt start with or end with space\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\n        }\n        \n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n        \n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint(_temp[i]) + 32);\n                \n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                    // require character is a space\n                    _temp[i] == 0x20 || \n                    // OR lowercase a-z\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                    // or 0-9\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\n                    \"string contains invalid characters\"\n                );\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20)\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\n                \n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;    \n            }\n        }\n        \n        require(_hasNonNumber == true, \"string cannot be only numbers\");\n        \n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n}\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr \n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n    \n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) \n        internal \n        pure \n        returns (uint256 c) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256) \n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c) \n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n    \n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y) \n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y) \n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n    \n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n    \n    /**\n     * @dev x to the power of y \n     */\n    function pwr(uint256 x, uint256 y)\n        internal \n        pure \n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else \n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}",
  "bytecode": ""
}