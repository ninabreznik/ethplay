{
  "address": "0xa042c9143c8758d2ad5a3fcc08dec39f6964453e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DAO",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-05\n*/\n\npragma solidity ^0.5.9;\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165Checker.sol\n\n/**\n * @dev Library used to query support of an interface declared via `IERC165`.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Returns true if `account` supports the `IERC165` interface,\n     */\n    function _supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for `IERC165` itself is queried automatically.\n     *\n     * See `IERC165.supportsInterface`.\n     */\n    function _supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return _supportsERC165(account) &&\n            _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for `IERC165` itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * `IERC165` support.\n     *\n     * See `IERC165.supportsInterface`.\n     */\n    function _supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!_supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with the `supportsERC165` method in this library.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        // success determines whether the staticcall succeeded and result determines\n        // whether the contract at account indicates support of _interfaceId\n        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n\n        return (success && result);\n    }\n\n    /**\n     * @notice Calls the function with selector 0x01ffc9a7 (ERC165) and suppresses throw\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return success true if the STATICCALL succeeded, false otherwise\n     * @return result true if the STATICCALL succeeded and the contract at account\n     * indicates support of the interface with identifier interfaceId, false otherwise\n     */\n    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n        private\n        view\n        returns (bool success, bool result)\n    {\n        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let encodedParams_data := add(0x20, encodedParams)\n            let encodedParams_size := mload(encodedParams)\n\n            let output := mload(0x40)    // Find empty storage location using \"free memory pointer\"\n            mstore(output, 0x0)\n\n            success := staticcall(\n                30000,                   // 30k gas\n                account,                 // To addr\n                encodedParams_data,\n                encodedParams_size,\n                output,\n                0x20                     // Outputs are 32 bytes long\n            )\n\n            result := mload(output)      // Load the result\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others (`ERC165Checker`).\n *\n * For an implementation, see `ERC165`.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n\n/**\n * @dev Implementation of the `IERC165` interface.\n *\n * Contracts may inherit from this and call `_registerInterface` to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See `IERC165.supportsInterface`.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See `IERC165.supportsInterface`.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363.sol\n\n/**\n * @title IERC1363 Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for a Payable Token contract as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract IERC1363 is IERC20, ERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x4bbee2df.\n     * 0x4bbee2df ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n     */\n\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xfb9ec8ce.\n     * 0xfb9ec8ce ===\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferAndCall(address to, uint256 value) public returns (bool);\n\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `to`\n     * @return true unless throwing\n     */\n    function transferAndCall(address to, uint256 value, bytes memory data) public returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferFromAndCall(address from, address to, uint256 value) public returns (bool);\n\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `to`\n     * @return true unless throwing\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes memory data) public returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param value uint256 The amount of tokens to be spent\n     */\n    function approveAndCall(address spender, uint256 value) public returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\n     */\n    function approveAndCall(address spender, uint256 value, bytes memory data) public returns (bool);\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol\n\n/**\n * @title IERC1363Receiver Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n *  from ERC1363 token contracts as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract IERC1363Receiver {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\n     * 0x88a7ca5c === bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))\n     */\n\n    /**\n     * @notice Handle the receipt of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n     * transfer. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param from address The address which are token transferred from\n     * @param value uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`\n     *  unless throwing\n     */\n    function onTransferReceived(address operator, address from, uint256 value, bytes memory data) public returns (bytes4); // solhint-disable-line  max-line-length\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol\n\n/**\n * @title IERC1363Spender Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support approveAndCall\n *  from ERC1363 token contracts as defined in\n *  https://github.com/ethereum/EIPs/issues/1363\n */\ncontract IERC1363Spender {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\n     * 0x7b04a2d0 === bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))\n     */\n\n    /**\n     * @notice Handle the approval of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after an `approve`. This function MAY throw to revert and reject the\n     * approval. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param owner address The address which called `approveAndCall` function\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`\n     *  unless throwing\n     */\n    function onApprovalReceived(address owner, uint256 value, bytes memory data) public returns (bytes4);\n}\n\n// File: erc-payable-token/contracts/payment/ERC1363Payable.sol\n\n/**\n * @title ERC1363Payable\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation proposal of a contract that wants to accept ERC1363 payments\n */\ncontract ERC1363Payable is IERC1363Receiver, IERC1363Spender, ERC165 {\n    using ERC165Checker for address;\n\n    /**\n     * @dev Magic value to be returned upon successful reception of ERC1363 tokens\n     *  Equals to `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))`,\n     *  which can be also obtained as `IERC1363Receiver(0).onTransferReceived.selector`\n     */\n    bytes4 internal constant _INTERFACE_ID_ERC1363_RECEIVER = 0x88a7ca5c;\n\n    /**\n     * @dev Magic value to be returned upon successful approval of ERC1363 tokens.\n     * Equals to `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))`,\n     * which can be also obtained as `IERC1363Spender(0).onApprovalReceived.selector`\n     */\n    bytes4 internal constant _INTERFACE_ID_ERC1363_SPENDER = 0x7b04a2d0;\n\n    /*\n     * Note: the ERC-165 identifier for the ERC1363 token transfer\n     * 0x4bbee2df ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)'))\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1363_TRANSFER = 0x4bbee2df;\n\n    /*\n     * Note: the ERC-165 identifier for the ERC1363 token approval\n     * 0xfb9ec8ce ===\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n    bytes4 private constant _INTERFACE_ID_ERC1363_APPROVE = 0xfb9ec8ce;\n\n    event TokensReceived(\n        address indexed operator,\n        address indexed from,\n        uint256 value,\n        bytes data\n    );\n\n    event TokensApproved(\n        address indexed owner,\n        uint256 value,\n        bytes data\n    );\n\n    // The ERC1363 token accepted\n    IERC1363 private _acceptedToken;\n\n    /**\n     * @param acceptedToken Address of the token being accepted\n     */\n    constructor(IERC1363 acceptedToken) public {\n        require(address(acceptedToken) != address(0));\n        require(\n            acceptedToken.supportsInterface(_INTERFACE_ID_ERC1363_TRANSFER) &&\n            acceptedToken.supportsInterface(_INTERFACE_ID_ERC1363_APPROVE)\n        );\n\n        _acceptedToken = acceptedToken;\n\n        // register the supported interface to conform to IERC1363Receiver and IERC1363Spender via ERC165\n        _registerInterface(_INTERFACE_ID_ERC1363_RECEIVER);\n        _registerInterface(_INTERFACE_ID_ERC1363_SPENDER);\n    }\n\n    /*\n     * @dev Note: remember that the token contract address is always the message sender.\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param from address The address which are token transferred from\n     * @param value uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     */\n    function onTransferReceived(address operator, address from, uint256 value, bytes memory data) public returns (bytes4) { // solhint-disable-line  max-line-length\n        require(msg.sender == address(_acceptedToken));\n\n        emit TokensReceived(operator, from, value, data);\n\n        _transferReceived(operator, from, value, data);\n\n        return _INTERFACE_ID_ERC1363_RECEIVER;\n    }\n\n    /*\n     * @dev Note: remember that the token contract address is always the message sender.\n     * @param owner address The address which called `approveAndCall` function\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     */\n    function onApprovalReceived(address owner, uint256 value, bytes memory data) public returns (bytes4) {\n        require(msg.sender == address(_acceptedToken));\n\n        emit TokensApproved(owner, value, data);\n\n        _approvalReceived(owner, value, data);\n\n        return _INTERFACE_ID_ERC1363_SPENDER;\n    }\n\n    /**\n     * @dev The ERC1363 token accepted\n     */\n    function acceptedToken() public view returns (IERC1363) {\n        return _acceptedToken;\n    }\n\n    /**\n     * @dev Called after validating a `onTransferReceived`. Override this method to\n     * make your stuffs within your contract.\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param from address The address which are token transferred from\n     * @param value uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     */\n    function _transferReceived(address operator, address from, uint256 value, bytes memory data) internal {\n        // solhint-disable-previous-line no-empty-blocks\n\n        // optional override\n    }\n\n    /**\n     * @dev Called after validating a `onApprovalReceived`. Override this method to\n     * make your stuffs within your contract.\n     * @param owner address The address which called `approveAndCall` function\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     */\n    function _approvalReceived(address owner, uint256 value, bytes memory data) internal {\n        // solhint-disable-previous-line no-empty-blocks\n\n        // optional override\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * > Note: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n\n// File: contracts/access/roles/DAORoles.sol\n\n/**\n * @title DAORoles\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev It identifies the DAO roles\n */\ncontract DAORoles is Ownable {\n    using Roles for Roles.Role;\n\n    event OperatorAdded(address indexed account);\n    event OperatorRemoved(address indexed account);\n\n    event DappAdded(address indexed account);\n    event DappRemoved(address indexed account);\n\n    Roles.Role private _operators;\n    Roles.Role private _dapps;\n\n    constructor () internal {} // solhint-disable-line no-empty-blocks\n\n    modifier onlyOperator() {\n        require(isOperator(msg.sender));\n        _;\n    }\n\n    modifier onlyDapp() {\n        require(isDapp(msg.sender));\n        _;\n    }\n\n    /**\n     * @dev Check if an address has the `operator` role\n     * @param account Address you want to check\n     */\n    function isOperator(address account) public view returns (bool) {\n        return _operators.has(account);\n    }\n\n    /**\n     * @dev Check if an address has the `dapp` role\n     * @param account Address you want to check\n     */\n    function isDapp(address account) public view returns (bool) {\n        return _dapps.has(account);\n    }\n\n    /**\n     * @dev Add the `operator` role from address\n     * @param account Address you want to add role\n     */\n    function addOperator(address account) public onlyOwner {\n        _addOperator(account);\n    }\n\n    /**\n     * @dev Add the `dapp` role from address\n     * @param account Address you want to add role\n     */\n    function addDapp(address account) public onlyOperator {\n        _addDapp(account);\n    }\n\n    /**\n     * @dev Remove the `operator` role from address\n     * @param account Address you want to remove role\n     */\n    function removeOperator(address account) public onlyOwner {\n        _removeOperator(account);\n    }\n\n    /**\n     * @dev Remove the `operator` role from address\n     * @param account Address you want to remove role\n     */\n    function removeDapp(address account) public onlyOperator {\n        _removeDapp(account);\n    }\n\n    function _addOperator(address account) internal {\n        _operators.add(account);\n        emit OperatorAdded(account);\n    }\n\n    function _addDapp(address account) internal {\n        _dapps.add(account);\n        emit DappAdded(account);\n    }\n\n    function _removeOperator(address account) internal {\n        _operators.remove(account);\n        emit OperatorRemoved(account);\n    }\n\n    function _removeDapp(address account) internal {\n        _dapps.remove(account);\n        emit DappRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n// File: contracts/dao/Organization.sol\n\n/**\n * @title Organization\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Library for managing organization\n */\nlibrary Organization {\n    using SafeMath for uint256;\n\n    // structure defining a member\n    struct Member {\n        uint256 id;\n        address account;\n        bytes9 fingerprint;\n        uint256 creationDate;\n        uint256 stakedTokens;\n        uint256 usedTokens;\n        bytes32 data;\n        bool approved;\n    }\n\n    // structure defining members status\n    struct Members {\n        uint256 count;\n        uint256 totalStakedTokens;\n        uint256 totalUsedTokens;\n        mapping(address => uint256) addressMap;\n        mapping(uint256 => Member) list;\n    }\n\n    /**\n     * @dev Returns if an address is member or not\n     * @param members Current members struct\n     * @param account Address of the member you are looking for\n     * @return bool\n     */\n    function isMember(Members storage members, address account) internal view returns (bool) {\n        return members.addressMap[account] != 0;\n    }\n\n    /**\n     * @dev Get creation date of a member\n     * @param members Current members struct\n     * @param account Address you want to check\n     * @return uint256 Member creation date, zero otherwise\n     */\n    function creationDateOf(Members storage members, address account) internal view returns (uint256) {\n        Member storage member = members.list[members.addressMap[account]];\n\n        return member.creationDate;\n    }\n\n    /**\n     * @dev Check how many tokens staked for given address\n     * @param members Current members struct\n     * @param account Address you want to check\n     * @return uint256 Member staked tokens\n     */\n    function stakedTokensOf(Members storage members, address account) internal view returns (uint256) {\n        Member storage member = members.list[members.addressMap[account]];\n\n        return member.stakedTokens;\n    }\n\n    /**\n     * @dev Check how many tokens used for given address\n     * @param members Current members struct\n     * @param account Address you want to check\n     * @return uint256 Member used tokens\n     */\n    function usedTokensOf(Members storage members, address account) internal view returns (uint256) {\n        Member storage member = members.list[members.addressMap[account]];\n\n        return member.usedTokens;\n    }\n\n    /**\n     * @dev Check if an address has been approved\n     * @param members Current members struct\n     * @param account Address you want to check\n     * @return bool\n     */\n    function isApproved(Members storage members, address account) internal view returns (bool) {\n        Member storage member = members.list[members.addressMap[account]];\n\n        return member.approved;\n    }\n\n    /**\n     * @dev Returns the member structure\n     * @param members Current members struct\n     * @param memberId Id of the member you are looking for\n     * @return Member\n     */\n    function getMember(Members storage members, uint256 memberId) internal view returns (Member storage) {\n        Member storage structure = members.list[memberId];\n\n        require(structure.account != address(0));\n\n        return structure;\n    }\n\n    /**\n     * @dev Generate a new member and the member structure\n     * @param members Current members struct\n     * @param account Address you want to make member\n     * @return uint256 The new member id\n     */\n    function addMember(Members storage members, address account) internal returns (uint256) {\n        require(account != address(0));\n        require(!isMember(members, account));\n\n        uint256 memberId = members.count.add(1);\n        bytes9 fingerprint = getFingerprint(account, memberId);\n\n        members.addressMap[account] = memberId;\n        members.list[memberId] = Member(\n            memberId,\n            account,\n            fingerprint,\n            block.timestamp, // solhint-disable-line not-rely-on-time\n            0,\n            0,\n            \"\",\n            false\n        );\n\n        members.count = memberId;\n\n        return memberId;\n    }\n\n    /**\n     * @dev Add tokens to member stack\n     * @param members Current members struct\n     * @param account Address you want to stake tokens\n     * @param amount Number of tokens to stake\n     */\n    function stake(Members storage members, address account, uint256 amount) internal {\n        require(isMember(members, account));\n\n        Member storage member = members.list[members.addressMap[account]];\n\n        member.stakedTokens = member.stakedTokens.add(amount);\n        members.totalStakedTokens = members.totalStakedTokens.add(amount);\n    }\n\n    /**\n     * @dev Remove tokens from member stack\n     * @param members Current members struct\n     * @param account Address you want to unstake tokens\n     * @param amount Number of tokens to unstake\n     */\n    function unstake(Members storage members, address account, uint256 amount) internal {\n        require(isMember(members, account));\n\n        Member storage member = members.list[members.addressMap[account]];\n\n        require(member.stakedTokens >= amount);\n\n        member.stakedTokens = member.stakedTokens.sub(amount);\n        members.totalStakedTokens = members.totalStakedTokens.sub(amount);\n    }\n\n    /**\n     * @dev Use tokens from member stack\n     * @param members Current members struct\n     * @param account Address you want to use tokens\n     * @param amount Number of tokens to use\n     */\n    function use(Members storage members, address account, uint256 amount) internal {\n        require(isMember(members, account));\n\n        Member storage member = members.list[members.addressMap[account]];\n\n        require(member.stakedTokens >= amount);\n\n        member.stakedTokens = member.stakedTokens.sub(amount);\n        members.totalStakedTokens = members.totalStakedTokens.sub(amount);\n\n        member.usedTokens = member.usedTokens.add(amount);\n        members.totalUsedTokens = members.totalUsedTokens.add(amount);\n    }\n\n    /**\n     * @dev Set the approved status for a member\n     * @param members Current members struct\n     * @param account Address you want to update\n     * @param status Bool the new status for approved\n     */\n    function setApproved(Members storage members, address account, bool status) internal {\n        require(isMember(members, account));\n\n        Member storage member = members.list[members.addressMap[account]];\n\n        member.approved = status;\n    }\n\n    /**\n     * @dev Set data for a member\n     * @param members Current members struct\n     * @param account Address you want to update\n     * @param data bytes32 updated data\n     */\n    function setData(Members storage members, address account, bytes32 data) internal {\n        require(isMember(members, account));\n\n        Member storage member = members.list[members.addressMap[account]];\n\n        member.data = data;\n    }\n\n    /**\n     * @dev Generate a member fingerprint\n     * @param account Address you want to make member\n     * @param memberId The member id\n     * @return bytes9 It represents member fingerprint\n     */\n    function getFingerprint(address account, uint256 memberId) private pure returns (bytes9) {\n        return bytes9(keccak256(abi.encodePacked(account, memberId)));\n    }\n}\n\n// File: contracts/dao/DAO.sol\n\n/**\n * @title DAO\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev It identifies the DAO and Organization logic\n */\ncontract DAO is ERC1363Payable, DAORoles {\n    using SafeMath for uint256;\n\n    using Organization for Organization.Members;\n    using Organization for Organization.Member;\n\n    event MemberAdded(\n        address indexed account,\n        uint256 id\n    );\n\n    event MemberStatusChanged(\n        address indexed account,\n        bool approved\n    );\n\n    event TokensStaked(\n        address indexed account,\n        uint256 value\n    );\n\n    event TokensUnstaked(\n        address indexed account,\n        uint256 value\n    );\n\n    event TokensUsed(\n        address indexed account,\n        address indexed dapp,\n        uint256 value\n    );\n\n    Organization.Members private _members;\n\n    constructor (IERC1363 acceptedToken) public ERC1363Payable(acceptedToken) {} // solhint-disable-line no-empty-blocks\n\n    /**\n     * @dev fallback. This function will create a new member\n     */\n    function () external payable { // solhint-disable-line no-complex-fallback\n        require(msg.value == 0);\n\n        _newMember(msg.sender);\n    }\n\n    /**\n     * @dev Generate a new member and the member structure\n     */\n    function join() external {\n        _newMember(msg.sender);\n    }\n\n    /**\n     * @dev Generate a new member and the member structure\n     * @param account Address you want to make member\n     */\n    function newMember(address account) external onlyOperator {\n        _newMember(account);\n    }\n\n    /**\n     * @dev Set the approved status for a member\n     * @param account Address you want to update\n     * @param status Bool the new status for approved\n     */\n    function setApproved(address account, bool status) external onlyOperator {\n        _members.setApproved(account, status);\n\n        emit MemberStatusChanged(account, status);\n    }\n\n    /**\n     * @dev Set data for a member\n     * @param account Address you want to update\n     * @param data bytes32 updated data\n     */\n    function setData(address account, bytes32 data) external onlyOperator {\n        _members.setData(account, data);\n    }\n\n    /**\n     * @dev Use tokens from a specific account\n     * @param account Address to use the tokens from\n     * @param amount Number of tokens to use\n     */\n    function use(address account, uint256 amount) external onlyDapp {\n        _members.use(account, amount);\n\n        IERC20(acceptedToken()).transfer(msg.sender, amount);\n\n        emit TokensUsed(account, msg.sender, amount);\n    }\n\n    /**\n     * @dev Remove tokens from member stack\n     * @param amount Number of tokens to unstake\n     */\n    function unstake(uint256 amount) public {\n        _members.unstake(msg.sender, amount);\n\n        IERC20(acceptedToken()).transfer(msg.sender, amount);\n\n        emit TokensUnstaked(msg.sender, amount);\n    }\n\n    /**\n     * @dev Returns the members number\n     * @return uint256\n     */\n    function membersNumber() public view returns (uint256) {\n        return _members.count;\n    }\n\n    /**\n     * @dev Returns the total staked tokens number\n     * @return uint256\n     */\n    function totalStakedTokens() public view returns (uint256) {\n        return _members.totalStakedTokens;\n    }\n\n    /**\n     * @dev Returns the total used tokens number\n     * @return uint256\n     */\n    function totalUsedTokens() public view returns (uint256) {\n        return _members.totalUsedTokens;\n    }\n\n    /**\n     * @dev Returns if an address is member or not\n     * @param account Address of the member you are looking for\n     * @return bool\n     */\n    function isMember(address account) public view returns (bool) {\n        return _members.isMember(account);\n    }\n\n    /**\n     * @dev Get creation date of a member\n     * @param account Address you want to check\n     * @return uint256 Member creation date, zero otherwise\n     */\n    function creationDateOf(address account) public view returns (uint256) {\n        return _members.creationDateOf(account);\n    }\n\n    /**\n     * @dev Check how many tokens staked for given address\n     * @param account Address you want to check\n     * @return uint256 Member staked tokens\n     */\n    function stakedTokensOf(address account) public view returns (uint256) {\n        return _members.stakedTokensOf(account);\n    }\n\n    /**\n     * @dev Check how many tokens used for given address\n     * @param account Address you want to check\n     * @return uint256 Member used tokens\n     */\n    function usedTokensOf(address account) public view returns (uint256) {\n        return _members.usedTokensOf(account);\n    }\n\n    /**\n     * @dev Check if an address has been approved\n     * @param account Address you want to check\n     * @return bool\n     */\n    function isApproved(address account) public view returns (bool) {\n        return _members.isApproved(account);\n    }\n\n    /**\n     * @dev Returns the member structure\n     * @param memberAddress Address of the member you are looking for\n     * @return array\n     */\n    function getMemberByAddress(address memberAddress)\n        public\n        view\n        returns (\n            uint256 id,\n            address account,\n            bytes9 fingerprint,\n            uint256 creationDate,\n            uint256 stakedTokens,\n            uint256 usedTokens,\n            bytes32 data,\n            bool approved\n        )\n    {\n        return getMemberById(_members.addressMap[memberAddress]);\n    }\n\n    /**\n     * @dev Returns the member structure\n     * @param memberId Id of the member you are looking for\n     * @return array\n     */\n    function getMemberById(uint256 memberId)\n        public\n        view\n        returns (\n            uint256 id,\n            address account,\n            bytes9 fingerprint,\n            uint256 creationDate,\n            uint256 stakedTokens,\n            uint256 usedTokens,\n            bytes32 data,\n            bool approved\n        )\n    {\n        Organization.Member storage structure = _members.getMember(memberId);\n\n        id = structure.id;\n        account = structure.account;\n        fingerprint = structure.fingerprint;\n        creationDate = structure.creationDate;\n        stakedTokens = structure.stakedTokens;\n        usedTokens = structure.usedTokens;\n        data = structure.data;\n        approved = structure.approved;\n    }\n\n    /**\n     * @dev Allow to recover tokens from contract\n     * @param tokenAddress address The token contract address\n     * @param tokenAmount uint256 Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n        if (tokenAddress == address(acceptedToken())) {\n            uint256 currentBalance = IERC20(acceptedToken()).balanceOf(address(this));\n            require(currentBalance.sub(_members.totalStakedTokens) >= tokenAmount);\n        }\n\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n    }\n\n    /**\n     * @dev Called after validating a `onTransferReceived`\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param from address The address which are token transferred from\n     * @param value uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     */\n    function _transferReceived(\n        address operator, // solhint-disable-line no-unused-vars\n        address from,\n        uint256 value,\n        bytes memory data // solhint-disable-line no-unused-vars\n    )\n        internal\n    {\n        _stake(from, value);\n    }\n\n    /**\n     * @dev Called after validating a `onApprovalReceived`\n     * @param owner address The address which called `approveAndCall` function\n     * @param value uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     */\n    function _approvalReceived(\n        address owner,\n        uint256 value,\n        bytes memory data // solhint-disable-line no-unused-vars\n    )\n        internal\n    {\n        IERC20(acceptedToken()).transferFrom(owner, address(this), value);\n\n        _stake(owner, value);\n    }\n\n    /**\n     * @dev Generate a new member and the member structure\n     * @param account Address you want to make member\n     * @return uint256 The new member id\n     */\n    function _newMember(address account) internal {\n        uint256 memberId = _members.addMember(account);\n\n        emit MemberAdded(account, memberId);\n    }\n\n    /**\n     * @dev Add tokens to member stack\n     * @param account Address you want to stake tokens\n     * @param amount Number of tokens to stake\n     */\n    function _stake(address account, uint256 amount) internal {\n        if (!isMember(account)) {\n            _newMember(account);\n        }\n\n        _members.stake(account, amount);\n\n        emit TokensStaked(account, amount);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040516200218438038062002184833981810160405260208110156200003757600080fd5b5051806200006e7f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03620002bf16565b6001600160a01b0381166200008257600080fd5b604080517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f4bbee2df00000000000000000000000000000000000000000000000000000000600482015290516001600160a01b038316916301ffc9a7916024808301926020929190829003018186803b1580156200010257600080fd5b505afa15801562000117573d6000803e3d6000fd5b505050506040513d60208110156200012e57600080fd5b50518015620001e75750604080517f01ffc9a70000000000000000000000000000000000000000000000000000000081527ffb9ec8ce00000000000000000000000000000000000000000000000000000000600482015290516001600160a01b038316916301ffc9a7916024808301926020929190829003018186803b158015620001b857600080fd5b505afa158015620001cd573d6000803e3d6000fd5b505050506040513d6020811015620001e457600080fd5b50515b620001f157600080fd5b600180546001600160a01b0319166001600160a01b038316179055620002377f88a7ca5c00000000000000000000000000000000000000000000000000000000620002bf565b6200026b7f7b04a2d0000000000000000000000000000000000000000000000000000000006001600160e01b03620002bf16565b50600280546001600160a01b0319163317908190556040516001600160a01b0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506200038e565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200035157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015290519081900360640190fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b611de6806200039e6000396000f3fe6080604052600436106101d85760003560e01c806384cfb68011610102578063ab08d4fc11610095578063d658197511610064578063d658197514610850578063e52c355814610883578063f2fde38b146108b6578063f7bad6c2146108e9576101d8565b8063ab08d4fc146107c0578063ac8a584a146107f3578063ad63a46914610826578063b688a3631461083b576101d8565b80638da5cb5b116100d15780638da5cb5b146107305780638f32d59b146107455780639870d7fe1461075a578063a230c5241461078d576101d8565b806384cfb680146105d457806388a7ca5c1461060f5780638980f11f146106e25780638a4fe8ac1461071b576101d8565b80635cafbafb1161017a5780636d70f7ae116101495780636d70f7ae1461047d5780636f80886c146104b0578063715018a6146104da5780637b04a2d0146104ef576101d8565b80635cafbafb146103ab578063627c55f6146103de578063673448dd1461041157806369fb2a2014610444576101d8565b80633ae73259116101b65780633ae73259146102935780633c0c10a2146102ba5780633dd9899f146102f3578063451c3d801461037a576101d8565b806301ffc9a7146101ee57806327b7ca5f146102365780632e17de7814610269575b34156101e357600080fd5b6101ec3361091c565b005b3480156101fa57600080fd5b506102226004803603602081101561021157600080fd5b50356001600160e01b031916610974565b604080519115158252519081900360200190f35b34801561024257600080fd5b506101ec6004803603602081101561025957600080fd5b50356001600160a01b0316610993565b34801561027557600080fd5b506101ec6004803603602081101561028c57600080fd5b50356109b1565b34801561029f57600080fd5b506102a8610a8f565b60408051918252519081900360200190f35b3480156102c657600080fd5b506101ec600480360360408110156102dd57600080fd5b506001600160a01b038135169060200135610a95565b3480156102ff57600080fd5b506103266004803603602081101561031657600080fd5b50356001600160a01b0316610abd565b604080519889526001600160a01b0390971660208901526001600160b81b0319909516878701526060870193909352608086019190915260a085015260c0840152151560e083015251908190036101000190f35b34801561038657600080fd5b5061038f610b15565b604080516001600160a01b039092168252519081900360200190f35b3480156103b757600080fd5b506101ec600480360360208110156103ce57600080fd5b50356001600160a01b0316610b24565b3480156103ea57600080fd5b506101ec6004803603602081101561040157600080fd5b50356001600160a01b0316610b3f565b34801561041d57600080fd5b506102226004803603602081101561043457600080fd5b50356001600160a01b0316610b5a565b34801561045057600080fd5b506101ec6004803603604081101561046757600080fd5b506001600160a01b038135169060200135610b73565b34801561048957600080fd5b50610222600480360360208110156104a057600080fd5b50356001600160a01b0316610c6e565b3480156104bc57600080fd5b50610326600480360360208110156104d357600080fd5b5035610c81565b3480156104e657600080fd5b506101ec610d0f565b3480156104fb57600080fd5b506105b76004803603606081101561051257600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561054257600080fd5b82018360208201111561055457600080fd5b8035906020019184600183028401116401000000008311171561057657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610da0945050505050565b604080516001600160e01b03199092168252519081900360200190f35b3480156105e057600080fd5b506101ec600480360360408110156105f757600080fd5b506001600160a01b0381351690602001351515610e80565b34801561061b57600080fd5b506105b76004803603608081101561063257600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561066d57600080fd5b82018360208201111561067f57600080fd5b803590602001918460018302840111640100000000831117156106a157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ee9945050505050565b3480156106ee57600080fd5b506101ec6004803603604081101561070557600080fd5b506001600160a01b038135169060200135610fd5565b34801561072757600080fd5b506102a8611185565b34801561073c57600080fd5b5061038f61118b565b34801561075157600080fd5b5061022261119a565b34801561076657600080fd5b506101ec6004803603602081101561077d57600080fd5b50356001600160a01b03166111ab565b34801561079957600080fd5b50610222600480360360208110156107b057600080fd5b50356001600160a01b03166111fb565b3480156107cc57600080fd5b506102a8600480360360208110156107e357600080fd5b50356001600160a01b031661120e565b3480156107ff57600080fd5b506101ec6004803603602081101561081657600080fd5b50356001600160a01b0316611221565b34801561083257600080fd5b506102a8611271565b34801561084757600080fd5b506101ec611277565b34801561085c57600080fd5b506102a86004803603602081101561087357600080fd5b50356001600160a01b0316611282565b34801561088f57600080fd5b50610222600480360360208110156108a657600080fd5b50356001600160a01b0316611295565b3480156108c257600080fd5b506101ec600480360360208110156108d957600080fd5b50356001600160a01b03166112a8565b3480156108f557600080fd5b506102a86004803603602081101561090c57600080fd5b50356001600160a01b03166112f8565b600061092f60058363ffffffff61130b16565b6040805182815290519192506001600160a01b038416917fede8eed4383e9241982619b94dd83e488b274cced0fd07b8c0092a393defd52f9181900360200190a25050565b6001600160e01b03191660009081526020819052604090205460ff1690565b61099c33610c6e565b6109a557600080fd5b6109ae816114b0565b50565b6109c36005338363ffffffff6114f816565b6109cb610b15565b6001600160a01b031663a9059cbb33836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b505050506040513d6020811015610a5457600080fd5b505060408051828152905133917f9845e367b683334e5c0b12d7b81721ac518e649376fa65e3d68324e8f34f2679919081900360200190a250565b60065490565b610a9e33610c6e565b610aa757600080fd5b610ab96005838363ffffffff61158316565b5050565b600080600080600080600080610afa600560030160008b6001600160a01b03166001600160a01b0316815260200190815260200160002054610c81565b97509750975097509750975097509750919395975091939597565b6001546001600160a01b031690565b610b2d33610c6e565b610b3657600080fd5b6109ae8161091c565b610b4833610c6e565b610b5157600080fd5b6109ae816115c8565b6000610b6d60058363ffffffff61161016565b92915050565b610b7c33611295565b610b8557600080fd5b610b976005838363ffffffff61164116565b610b9f610b15565b6001600160a01b031663a9059cbb33836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610bfe57600080fd5b505af1158015610c12573d6000803e3d6000fd5b505050506040513d6020811015610c2857600080fd5b505060408051828152905133916001600160a01b038516917f87becb63265cd5357feae86dabd7e41e1ee5b3a6aeb0f3773cd90163aca2903e9181900360200190a35050565b6000610b6d60038363ffffffff61170016565b60008080808080808080610c9c60058b63ffffffff61176716565b9050806000015498508060010160009054906101000a90046001600160a01b031697508060010160149054906101000a900460b81b9650806002015495508060030154945080600401549350806005015492508060060160009054906101000a900460ff16915050919395975091939597565b610d1761119a565b610d56576040805162461bcd60e51b81526020600482018190526024820152600080516020611d70833981519152604482015290519081900360640190fd5b6002546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600280546001600160a01b0319169055565b6001546000906001600160a01b03163314610dba57600080fd5b836001600160a01b03167ffc47604465ac19edea172256bab2469184c3a6770701541635cf84241c2f24b484846040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e2a578181015183820152602001610e12565b50505050905090810190601f168015610e575780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2610e70848484611795565b506307b04a2d60e41b9392505050565b610e8933610c6e565b610e9257600080fd5b610ea46005838363ffffffff61183316565b60408051821515815290516001600160a01b038416917f9d8cdca8cf33ffd41d5701b74dd0c90ab5d45ce6f87f7835bd22d6f1c5374f92919081900360200190a25050565b6001546000906001600160a01b03163314610f0357600080fd5b836001600160a01b0316856001600160a01b03167f01db5e58326b109682dc160b2e51aa7bf7e8d8ccf74bc242a3c502179378905585856040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f7d578181015183820152602001610f65565b50505050905090810190601f168015610faa5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3610fc485858585611887565b50632229f29760e21b949350505050565b610fdd61119a565b61101c576040805162461bcd60e51b81526020600482018190526024820152600080516020611d70833981519152604482015290519081900360640190fd5b611024610b15565b6001600160a01b0316826001600160a01b031614156110ee576000611047610b15565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561109c57600080fd5b505afa1580156110b0573d6000803e3d6000fd5b505050506040513d60208110156110c657600080fd5b505160065490915082906110e190839063ffffffff61189116565b10156110ec57600080fd5b505b816001600160a01b031663a9059cbb61110561118b565b836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561115557600080fd5b505af1158015611169573d6000803e3d6000fd5b505050506040513d602081101561117f57600080fd5b50505050565b60055490565b6002546001600160a01b031690565b6002546001600160a01b0316331490565b6111b361119a565b6111f2576040805162461bcd60e51b81526020600482018190526024820152600080516020611d70833981519152604482015290519081900360640190fd5b6109ae816118ee565b6000610b6d60058363ffffffff61193616565b6000610b6d60058363ffffffff61195716565b61122961119a565b611268576040805162461bcd60e51b81526020600482018190526024820152600080516020611d70833981519152604482015290519081900360640190fd5b6109ae81611986565b60075490565b6112803361091c565b565b6000610b6d60058363ffffffff6119ce16565b6000610b6d60048363ffffffff61170016565b6112b061119a565b6112ef576040805162461bcd60e51b81526020600482018190526024820152600080516020611d70833981519152604482015290519081900360640190fd5b6109ae816119fc565b6000610b6d60058363ffffffff611a9d16565b60006001600160a01b03821661132057600080fd5b61132a8383611936565b1561133457600080fd5b825460009061134a90600163ffffffff611acb16565b905060006113588483611b25565b905081856003016000866001600160a01b03166001600160a01b0316815260200190815260200160002081905550604051806101000160405280838152602001856001600160a01b03168152602001826001600160b81b0319168152602001428152602001600081526020016000815260200160008019168152602001600015158152508560040160008481526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548168ffffffffffffffffff021916908360b81c0217905550606082015181600201556080820151816003015560a0820151816004015560c0820151816005015560e08201518160060160006101000a81548160ff021916908315150217905550905050818560000181905550819250505092915050565b6114c160048263ffffffff611b6916565b6040516001600160a01b038216907f34db09e115b593d4a96c3047ffae8bfd18efd935fd73d76338af3f4a8593295090600090a250565b6115028383611936565b61150b57600080fd5b6001600160a01b0382166000908152600380850160209081526040808420548452600487019091529091209081015482111561154657600080fd5b600381015461155b908363ffffffff61189116565b60038201556001840154611575908363ffffffff61189116565b846001018190555050505050565b61158d8383611936565b61159657600080fd5b6001600160a01b0390911660009081526003830160209081526040808320548352600490940190529190912060050155565b6115d960048263ffffffff611bea16565b6040516001600160a01b038216907f1822aa3e32733968fade457518e58efe85994da84bac3654f2f88b957ad29c6590600090a250565b6001600160a01b03166000908152600382016020908152604080832054835260049093019052206006015460ff1690565b61164b8383611936565b61165457600080fd5b6001600160a01b0382166000908152600380850160209081526040808420548452600487019091529091209081015482111561168f57600080fd5b60038101546116a4908363ffffffff61189116565b600382015560018401546116be908363ffffffff61189116565b600185015560048101546116d8908363ffffffff611acb16565b600482015560028401546116f2908363ffffffff611acb16565b846002018190555050505050565b60006001600160a01b0382166117475760405162461bcd60e51b8152600401808060200182810382526022815260200180611d906022913960400191505060405180910390fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6000818152600483016020526040812060018101546001600160a01b031661178e57600080fd5b9392505050565b61179d610b15565b604080516323b872dd60e01b81526001600160a01b03868116600483015230602483015260448201869052915192909116916323b872dd916064808201926020929091908290030181600087803b1580156117f757600080fd5b505af115801561180b573d6000803e3d6000fd5b505050506040513d602081101561182157600080fd5b5061182e90508383611c51565b505050565b61183d8383611936565b61184657600080fd5b6001600160a01b0391909116600090815260038301602090815260408083205483526004909401905291909120600601805460ff1916911515919091179055565b61117f8383611c51565b6000828211156118e8576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6118ff60038263ffffffff611b6916565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6001600160a01b031660009081526003919091016020526040902054151590565b6001600160a01b0316600090815260038281016020908152604080842054845260049094019052919020015490565b61199760038263ffffffff611bea16565b6040516001600160a01b038216907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a250565b6001600160a01b03166000908152600382016020908152604080832054835260049384019091529020015490565b6001600160a01b038116611a415760405162461bcd60e51b8152600401808060200182810382526026815260200180611d296026913960400191505060405180910390fd5b6002546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03166000908152600382016020908152604080832054835260049093019052206002015490565b60008282018381101561178e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040805160609390931b6bffffffffffffffffffffffff19166020808501919091526034808501939093528151808503909301835260549093019052805191012090565b611b738282611700565b15611bc5576040805162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500604482015290519081900360640190fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b611bf48282611700565b611c2f5760405162461bcd60e51b8152600401808060200182810382526021815260200180611d4f6021913960400191505060405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b611c5a826111fb565b611c6757611c678261091c565b611c796005838363ffffffff611cbc16565b6040805182815290516001600160a01b038416917fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef919081900360200190a25050565b611cc68383611936565b611ccf57600080fd5b6001600160a01b03821660009081526003808501602090815260408084205484526004870190915290912090810154611d0e908363ffffffff611acb16565b60038201556001840154611575908363ffffffff611acb1656fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373a265627a7a723058201cbe232ebc2586f3ded2dbd2e0438df3a4e6cf4c97227109faeb493e210c2ec964736f6c6343000509003200000000000000000000000093a7174dafd31d13400cd9fa01f4e5b5baa00d39",
  "constructorArguments": "00000000000000000000000093a7174dafd31d13400cd9fa01f4e5b5baa00d39"
}