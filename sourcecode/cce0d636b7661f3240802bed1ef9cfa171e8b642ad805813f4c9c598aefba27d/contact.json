{
  "address": "0x099764910a38190bbd317857e635e6f461b11119",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "IronHands",
  "compilerVersion": "v0.4.22+commit.4cb486ee",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-19\n*/\n\npragma solidity ^0.4.21;\n\n/**\n * \n *            _       ____  ___      _ _   _       _ _           \n *           (_)     (_)  \\/  |     | | | (_)     | (_)          \n *  _ __ ___  _ _ __  _| .  . |_   _| | |_ _ _ __ | |_  ___ _ __ \n * | '_ ` _ \\| | '_ \\| | |\\/| | | | | | __| | '_ \\| | |/ _ \\ '__|\n * | | | | | | | | | | | |  | | |_| | | |_| | |_) | | |  __/ |   \n * |_| |_| |_|_|_| |_|_\\_|  |_/\\__,_|_|\\__|_| .__/|_|_|\\___|_|   \n *                                        | |                  \n *                                        |_|  \n * - 150% return, 0.005 ETH max deposit\n * - Code from BoomerangLiquidyFund: https://gist.github.com/TSavo/2401671fbfdb6ac384a556914934c64f\n * - Original BLF Doubler contract: 0xE58b65d1c0C8e8b2a0e3A3AcEC633271531084ED\n * \n * - Why? So the chain moves fast and you have some funny shit to buy when you're watching charts all day\n *      - Plus it provides micro volume to P3D so the contract balance isn't stagnant for long periods\n * \n *      - In addition, if this contract ever gains a good amount of P3D tokens it will very easily 1.5x people's 0.005 ETH :)\n * \n *\n * ATTENTION!\n * \n * This code? IS NOT DESIGNED FOR ACTUAL USE.\n * \n * The author of this code really wishes you wouldn't send your ETH to it.\n * \n * No, seriously. It's probablly illegal anyway. So don't do it.\n * \n * Let me repeat that: Don't actually send money to this contract. You are \n * likely breaking several local and national laws in doing so.\n * \n * This code is intended to educate. Nothing else. If you use it, expect S.W.A.T \n * teams at your door. I wrote this code because I wanted to experiment\n * with smart contracts, and I think code should be open source. So consider\n * it public domain, No Rights Reserved. Participating in pyramid schemes\n * is genuinely illegal so just don't even think about going beyond\n * reading the code and understanding how it works.\n * \n * Seriously. I'm not kidding. It's probablly broken in some critical way anyway\n * and will suck all your money out your wallet, install a virus on your computer\n * sleep with your wife, kidnap your children and sell them into slavery,\n * make you forget to file your taxes, and give you cancer.\n * \n * So.... tl;dr: This contract sucks, don't send money to it.\n * \n * What it does:\n * \n * It takes 50% of the ETH in it and buys tokens.\n * It takes 50% of the ETH in it and pays back depositors.\n * Depositors get in line and are paid out in order of deposit, plus the deposit\n * percent.\n * The tokens collect dividends, which in turn pay into the payout pool\n * to be split 50/50.\n * \n * If your seeing this contract in it's initial configuration, it should be\n * set to 200% (double deposits), and pointed at PoWH:\n * 0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe\n * \n * But you should verify this for yourself.\n *  \n *  \n */\n\ncontract ERC20Interface {\n    function transfer(address to, uint256 tokens) public returns (bool success);\n}\n\ncontract POWH {\n    \n    function buy(address) public payable returns(uint256);\n    function withdraw() public;\n    function myTokens() public view returns(uint256);\n    function myDividends(bool) public view returns(uint256);\n}\n\ncontract Owned {\n    address public owner;\n    address public ownerCandidate;\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function changeOwner(address _newOwner) public onlyOwner {\n        ownerCandidate = _newOwner;\n    }\n    \n    function acceptOwnership() public {\n        require(msg.sender == ownerCandidate);  \n        owner = ownerCandidate;\n    }\n    \n}\n\ncontract IronHands is Owned {\n    \n    /**\n     * Modifiers\n     */\n     \n    /**\n     * Only owners are allowed.\n     */\n    modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n    \n    /**\n     * The tokens can never be stolen.\n     */\n    modifier notPowh(address aContract){\n        require(aContract != address(weak_hands));\n        _;\n    }\n   \n    /**\n     * Events\n     */\n    event Deposit(uint256 amount, address depositer);\n    event Purchase(uint256 amountSpent, uint256 tokensReceived);\n    event Payout(uint256 amount, address creditor);\n    event Dividends(uint256 amount);\n    event Donation(uint256 amount, address donator);\n    event ContinuityBreak(uint256 position, address skipped, uint256 amount);\n    event ContinuityAppeal(uint256 oldPosition, uint256 newPosition, address appealer);\n\n    /**\n     * Structs\n     */\n    struct Participant {\n        address etherAddress;\n        uint256 payout;\n    }\n\n    //Total ETH managed over the lifetime of the contract\n    uint256 throughput;\n    //Total ETH received from dividends\n    uint256 dividends;\n    //The percent to return to depositers. 100 for 00%, 200 to double, etc.\n    uint256 public multiplier;\n    //Where in the line we are with creditors\n    uint256 public payoutOrder = 0;\n    //How much is owed to people\n    uint256 public backlog = 0;\n    //The creditor line\n    Participant[] public participants;\n    //How much each person is owed\n    mapping(address => uint256) public creditRemaining;\n    //What we will be buying\n    POWH weak_hands;\n\n    /**\n     * Constructor\n     */\n    function IronHands(uint multiplierPercent, address powh) public {\n        multiplier = multiplierPercent;\n        weak_hands = POWH(powh);\n    }\n    \n    \n    /**\n     * Fallback function allows anyone to send money for the cost of gas which\n     * goes into the pool. Used by withdraw/dividend payouts so it has to be cheap.\n     */\n    function() payable public {\n    }\n    \n    /**\n     * Deposit ETH to get in line to be credited back the multiplier as a percent,\n     * add that ETH to the pool, get the dividends and put them in the pool,\n     * then pay out who we owe and buy more tokens.\n     */ \n    function deposit() payable public {\n        //You have to send more than 1000000 wei and <= 0.005 ETH\n        require(msg.value > 1000000 && msg.value <= 5000000000000000);\n        //Compute how much to pay them\n        uint256 amountCredited = (msg.value * multiplier) / 100;\n        //Get in line to be paid back.\n        participants.push(Participant(msg.sender, amountCredited));\n        //Increase the backlog by the amount owed\n        backlog += amountCredited;\n        //Increase the amount owed to this address\n        creditRemaining[msg.sender] += amountCredited;\n        //Emit a deposit event.\n        emit Deposit(msg.value, msg.sender);\n        //If I have dividends\n        if(myDividends() > 0){\n            //Withdraw dividends\n            withdraw();\n        }\n        //Pay people out and buy more tokens.\n        payout();\n    }\n    \n    /**\n     * Take 50% of the money and spend it on tokens, which will pay dividends later.\n     * Take the other 50%, and use it to pay off depositors.\n     */\n    function payout() public {\n        //Take everything in the pool\n        uint balance = address(this).balance;\n        //It needs to be something worth splitting up\n        require(balance > 1);\n        //Increase our total throughput\n        throughput += balance;\n        //Split it into two parts\n        uint investment = balance / 2;\n        //Take away the amount we are investing from the amount to send\n        balance -= investment;\n        //Invest it in more tokens.\n        uint256 tokens = weak_hands.buy.value(investment).gas(1000000)(msg.sender);\n        //Record that tokens were purchased\n        emit Purchase(investment, tokens);\n        //While we still have money to send\n        while (balance > 0) {\n            //Either pay them what they are owed or however much we have, whichever is lower.\n            uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\n            //if we have something to pay them\n            if(payoutToSend > 0){\n                //subtract how much we've spent\n                balance -= payoutToSend;\n                //subtract the amount paid from the amount owed\n                backlog -= payoutToSend;\n                //subtract the amount remaining they are owed\n                creditRemaining[participants[payoutOrder].etherAddress] -= payoutToSend;\n                //credit their account the amount they are being paid\n                participants[payoutOrder].payout -= payoutToSend;\n                //Try and pay them, making best effort. But if we fail? Run out of gas? That's not our problem any more.\n                if(participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)()){\n                    //Record that they were paid\n                    emit Payout(payoutToSend, participants[payoutOrder].etherAddress);\n                }else{\n                    //undo the accounting, they are being skipped because they are not payable.\n                    balance += payoutToSend;\n                    backlog += payoutToSend;\n                    creditRemaining[participants[payoutOrder].etherAddress] += payoutToSend;\n                    participants[payoutOrder].payout += payoutToSend;\n                }\n\n            }\n            //If we still have balance left over\n            if(balance > 0){\n                // go to the next person in line\n                payoutOrder += 1;\n            }\n            //If we've run out of people to pay, stop\n            if(payoutOrder >= participants.length){\n                return;\n            }\n        }\n    }\n    \n    /**\n     * Number of tokens the contract owns.\n     */\n    function myTokens() public view returns(uint256){\n        return weak_hands.myTokens();\n    }\n    \n    /**\n     * Number of dividends owed to the contract.\n     */\n    function myDividends() public view returns(uint256){\n        return weak_hands.myDividends(true);\n    }\n    \n    /**\n     * Number of dividends received by the contract.\n     */\n    function totalDividends() public view returns(uint256){\n        return dividends;\n    }\n    \n    \n    /**\n     * Request dividends be paid out and added to the pool.\n     */\n    function withdraw() public {\n        uint256 balance = address(this).balance;\n        weak_hands.withdraw.gas(1000000)();\n        uint256 dividendsPaid = address(this).balance - balance;\n        dividends += dividendsPaid;\n        emit Dividends(dividendsPaid);\n    }\n    \n    /**\n     * A charitible contribution will be added to the pool.\n     */\n    function donate() payable public {\n        emit Donation(msg.value, msg.sender);\n    }\n    \n    /**\n     * Number of participants who are still owed.\n     */\n    function backlogLength() public view returns (uint256){\n        return participants.length - payoutOrder;\n    }\n    \n    /**\n     * Total amount still owed in credit to depositors.\n     */\n    function backlogAmount() public view returns (uint256){\n        return backlog;\n    } \n    \n    /**\n     * Total number of deposits in the lifetime of the contract.\n     */\n    function totalParticipants() public view returns (uint256){\n        return participants.length;\n    }\n    \n    /**\n     * Total amount of ETH that the contract has delt with so far.\n     */\n    function totalSpent() public view returns (uint256){\n        return throughput;\n    }\n    \n    /**\n     * Amount still owed to an individual address\n     */\n    function amountOwed(address anAddress) public view returns (uint256) {\n        return creditRemaining[anAddress];\n    }\n     \n     /**\n      * Amount owed to this person.\n      */\n    function amountIAmOwed() public view returns (uint256){\n        return amountOwed(msg.sender);\n    }\n    \n    /**\n     * A trap door for when someone sends tokens other than the intended ones so the overseers can decide where to send them.\n     */\n    function transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) public onlyOwner notPowh(tokenAddress) returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n    }\n    \n}",
  "bytecode": "60806040526000600555600060065534801561001a57600080fd5b50604051604080610d3f83398101604052805160209091015160008054600160a060020a03338116600160a060020a03199283161790925560049390935560098054919092169216919091179055610cc8806100776000396000f3006080604052600436106101325763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630a44b9cf81146101345780631b3ed7221461015b5780633151ecfc1461017057806335c1d3491461018557806339af0513146101c05780633ccfd60b146101d55780633febb070146101ea5780635f504a82146101ff57806363bd1d4a146102305780636cff6f9d1461024557806379ba50971461025a5780638da5cb5b1461026f578063949e8acd14610284578063997664d714610299578063a0ca0a57146102ae578063a26dbf26146102c3578063a6f9dae1146102d8578063d0e30db0146102f9578063d493b9ac14610301578063e5cf22971461033f578063ed88c68e14610360578063fb346eab14610368578063ff5d18ca1461037d575b005b34801561014057600080fd5b5061014961039e565b60408051918252519081900360200190f35b34801561016757600080fd5b506101496103ae565b34801561017c57600080fd5b506101496103b4565b34801561019157600080fd5b5061019d60043561044b565b60408051600160a060020a03909316835260208301919091528051918290030190f35b3480156101cc57600080fd5b50610149610481565b3480156101e157600080fd5b50610132610487565b3480156101f657600080fd5b5061014961055c565b34801561020b57600080fd5b50610214610562565b60408051600160a060020a039092168252519081900360200190f35b34801561023c57600080fd5b50610132610571565b34801561025157600080fd5b506101496108cf565b34801561026657600080fd5b506101326108d5565b34801561027b57600080fd5b50610214610921565b34801561029057600080fd5b50610149610930565b3480156102a557600080fd5b5061014961098f565b3480156102ba57600080fd5b50610149610995565b3480156102cf57600080fd5b5061014961099f565b3480156102e457600080fd5b50610132600160a060020a03600435166109a5565b6101326109ef565b34801561030d57600080fd5b5061032b600160a060020a0360043581169060243516604435610b3a565b604080519115158252519081900360200190f35b34801561034b57600080fd5b50610149600160a060020a0360043516610c24565b610132610c3f565b34801561037457600080fd5b50610149610c84565b34801561038957600080fd5b50610149600160a060020a0360043516610c8a565b60006103a933610c24565b905090565b60045481565b600954604080517f688abbf7000000000000000000000000000000000000000000000000000000008152600160048201529051600092600160a060020a03169163688abbf791602480830192602092919082900301818787803b15801561041a57600080fd5b505af115801561042e573d6000803e3d6000fd5b505050506040513d602081101561044457600080fd5b5051905090565b600780548290811061045957fe5b600091825260209091206002909102018054600190910154600160a060020a03909116915082565b60065481565b600954604080517f3ccfd60b0000000000000000000000000000000000000000000000000000000081529051600160a060020a033081163193600093911691633ccfd60b91620f4240916004808301928792919082900301818388803b1580156104f057600080fd5b5087f1158015610504573d6000803e3d6000fd5b505060038054600160a060020a033016318790039081019091556040805182815290519195507fd7cefab74b4b11d01e168f9d1e2a28e7bf8263c3acf9b9fdb802fa666a49455b945081900360200192509050a15050565b60065490565b600154600160a060020a031681565b600160a060020a03301631600080806001841161058d57600080fd5b600280548501815584600954604080517ff088d547000000000000000000000000000000000000000000000000000000008152600160a060020a03338116600483015291519490930497889003979650169163f088d54791620f424091879160248082019260209290919082900301818589803b15801561060d57600080fd5b5088f1158015610621573d6000803e3d6000fd5b5050505050506040513d602081101561063957600080fd5b5051604080518581526020810183905281519294507f350df6fcc944b226b77efc36902e19b43c566d75173622086e809d46dfbc2220929081900390910190a15b60008411156108c957600760055481548110151561069457fe5b90600052602060002090600202016001015484106106d45760076005548154811015156106bd57fe5b9060005260206000209060020201600101546106d6565b835b905060008111156108a1576006805482900390556005546007805495839003958392600892600092909190811061070957fe5b60009182526020808320600290920290910154600160a060020a031683528201929092526040019020805491909103905560055460078054839290811061074c57fe5b906000526020600020906002020160010160008282540392505081905550600760055481548110151561077b57fe5b60009182526020822060029091020154604051600160a060020a0390911691620f4240918491818181858888f193505050501561081e577f9b5d1a613fa5f0790b36b13103706e31fca06b229d87e9915b29fc20c1d764908160076005548154811015156107e557fe5b60009182526020918290206002909102015460408051938452600160a060020a03909116918301919091528051918290030190a16108a1565b600680548201905560055460078054958301958392600892600092909190811061084457fe5b60009182526020808320600290920290910154600160a060020a0316835282019290925260400190208054909101905560055460078054839290811061088657fe5b60009182526020909120600160029092020101805490910190555b60008411156108b4576005805460010190555b600754600554106108c4576108c9565b61067a565b50505050565b60055481565b60015433600160a060020a039081169116146108f057600080fd5b6001546000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b600054600160a060020a031681565b600954604080517f949e8acd0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163949e8acd91600480830192602092919082900301818787803b15801561041a57600080fd5b60035490565b6005546007540390565b60075490565b60005433600160a060020a039081169116146109c057600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000620f424034118015610a0a57506611c37937e080003411155b1515610a1557600080fd5b600454606490340260408051808201825233600160a060020a0390811680835294909304602080830182815260078054600181018255600091825294517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6886002909602958601805473ffffffffffffffffffffffffffffffffffffffff19169190981617909655517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c689909301929092556006805482019055848452600882529282902080548401905581513481529081019390935280519193507f4bcc17093cdf51079c755de089be5a85e70fa374ec656c194480fbdcda224a53928290030190a16000610b216103b4565b1115610b2f57610b2f610487565b610b37610571565b50565b6000805433600160a060020a03908116911614610b5657600080fd5b6009548490600160a060020a0380831691161415610b7357600080fd5b84600160a060020a031663a9059cbb85856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610bef57600080fd5b505af1158015610c03573d6000803e3d6000fd5b505050506040513d6020811015610c1957600080fd5b505195945050505050565b600160a060020a031660009081526008602052604090205490565b60408051348152600160a060020a033316602082015281517f82add2011d2b1a1fad8fc5ffd954181c064e8f5198c9fcd5caa9749911ed18b9929181900390910190a1565b60025490565b600860205260009081526040902054815600a165627a7a723058207efea0032cb54e52a210f9aa0fce7bf1fcbccca65868bc1e97714e68172f1f6a00290000000000000000000000000000000000000000000000000000000000000096000000000000000000000000b3775fb83f7d12a36e0475abdd1fca35c091efbe",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000096000000000000000000000000b3775fb83f7d12a36e0475abdd1fca35c091efbe"
}