{
  "address": "0x98bdbc858822415c626c13267594fbc205182a1f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Millionaire",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-09\n*/\n\npragma solidity ^0.4.24;\n\ninterface MilAuthInterface {\n    function requiredSignatures() external view returns(uint256);\n    function requiredDevSignatures() external view returns(uint256);\n    function adminCount() external view returns(uint256);\n    function devCount() external view returns(uint256);\n    function adminName(address _who) external view returns(bytes32);\n    function isAdmin(address _who) external view returns(bool);\n    function isDev(address _who) external view returns(bool);\n    function checkGameRegiester(address _gameAddr) external view returns(bool);\n    function checkGameClosed(address _gameAddr) external view returns(bool);\n}\ninterface MillionaireInterface {\n    function invest(address _addr, uint256 _affID, uint256 _mfCoin, uint256 _general) external payable;\n    function updateGenVaultAndMask(address _addr, uint256 _affID) external payable;\n    function clearGenVaultAndMask(address _addr, uint256 _affID, uint256 _eth, uint256 _milFee) external;\n    function assign(address _addr) external payable;\n    function splitPot() external payable;   \n}\ninterface MilFoldInterface {\n    function addPot() external payable;\n    function activate() external;    \n}\n\ncontract Milevents {\n\n    // fired whenever a player registers\n    event onNewPlayer\n    (\n        address indexed playerAddress,\n        uint256 playerID,\n        uint256 timeStamp\n    );\n\n    // fired at end of buy or reload\n    event onEndTx\n    (\n        uint256 rid,                    //current round id\n        address indexed buyerAddress,   //buyer address\n        uint256 compressData,           //action << 96 | time << 64 | drawCode << 32 | txAction << 8 | roundState\n        uint256 eth,                    //buy amount\n        uint256 totalPot,               //current total pot\n        uint256 tickets,                //buy tickets\n        uint256 timeStamp               //buy time\n    );\n\n    // fired at end of buy or reload\n    event onGameClose\n    (\n        address indexed gameAddr,       //game address\n        uint256 amount,                 //split eth amount\n        uint256 timeStamp               //close time\n    );\n\n    // fired at time who satisfy the reward condition\n    event onReward\n    (\n        address indexed         rewardAddr,     //reward address\n        Mildatasets.RewardType  rewardType,     //rewardType\n        uint256 amount                          //reward amount\n    );\n\n\t// fired whenever theres a withdraw\n    event onWithdraw\n    (\n        address indexed playerAddress,\n        uint256 ethOut,\n        uint256 timeStamp\n    );\n\n    event onAffiliatePayout\n    (\n        address indexed affiliateAddress,\n        address indexed buyerAddress,\n        uint256 eth,\n        uint256 timeStamp\n    );\n\n    // fired at every ico\n    event onICO\n    (\n        address indexed buyerAddress,   //user address who buy ico\n        uint256 buyAmount,              //buy ico amount\n        uint256 buyMf,                  //eth exchange mfcoin amount\n        uint256 totalIco,               //now total ico amount\n        bool    ended                   //is ico ended\n    );\n\n    // fired whenever an player win the playround\n    event onPlayerWin(\n        address indexed addr,\n        uint256 roundID,\n        uint256 winAmount,\n        uint256 winNums\n    );\n\n    event onClaimWinner(\n        address indexed addr,\n        uint256 winnerNum,\n        uint256 totalNum\n    );\n\n    event onBuyMFCoins(\n        address indexed addr,\n        uint256 ethAmount,\n        uint256 mfAmount,\n        uint256 timeStamp\n    );\n\n    event onSellMFCoins(\n        address indexed addr,\n        uint256 ethAmount,\n        uint256 mfAmount,\n        uint256 timeStamp\n    );\n\n    event onUpdateGenVault(\n        address indexed addr,\n        uint256 mfAmount,\n        uint256 genAmount,\n        uint256 ethAmount\n    );\n}\n\ncontract Millionaire is MillionaireInterface,Milevents {\n    using SafeMath for *;\n    using MFCoinsCalc for uint256;\n\n//==============================================================================\n//     _ _  _  |`. _     _ _ |_ | _  _  .\n//    (_(_)| |~|~|(_||_|| (_||_)|(/__\\  .  (game settings)\n//=================_|===========================================================\n    string  constant private    name_ = \"Millionaire Official\";\n    uint256 constant private    icoRndMax_ = 2 weeks;        // ico max period\n    uint256 private             icoEndtime_;                    // ico end time\n    uint256 private             icoAmount_;                     // ico eth amount;\n    uint256 private             sequence_;                      // affiliate id sequence\n    bool    private             activated_;                     // mark contract is activated;\n    bool    private             icoEnd_;                        // is ico ended;\n\n    MilFoldInterface     public          milFold_;                       // milFold contract\n    MilAuthInterface constant private milAuth_ = MilAuthInterface(0xf856f6a413f7756FfaF423aa2101b37E2B3aFFD9);\n\n    uint256     public          globalMask_;                    // use to calc player gen\n    uint256     public          mfCoinPool_;                    // MFCoin Pool\n    uint256     public          totalSupply_;                   // MFCoin current supply\n\n    address constant private fundAddr_ = 0xB0c7Dc00E8A74c9dEc8688EFb98CcB2e24584E3B; // foundation address\n    uint256 constant private REGISTER_FEE = 0.01 ether;         // register affiliate fees\n    uint256 constant private MAX_ICO_AMOUNT = 3000 ether;       // max tickets you can buy one time\n\n    mapping(address => uint256) private balance_;               // player coin balance\n    mapping(uint256 => address) private plyrAddr_;             // (id => address) returns player id by address\n    mapping(address => Mildatasets.Player) private plyr_;      // (addr => data) player data\n\n//==============================================================================\n//     _ _  _  _|. |`. _  _ _  .\n//    | | |(_)(_||~|~|(/_| _\\  .  (these are safety checks)\n//==============================================================================\n    /**\n     * @dev used to make sure no one can interact with contract until it has\n     * been activated.\n     */\n    modifier isActivated() {\n        require(activated_ == true, \"its not ready start\");\n        _;\n    }\n\n    /**\n     * @dev prevents contracts from interacting with Millionare\n     */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    /**\n     * @dev sets boundaries for incoming tx\n     */\n    modifier isWithinLimits(uint256 _eth) {\n        require(_eth >= 0.1 ether, \"must > 0.1 ether\");\n        _;\n    }\n\n    /**\n     * @dev check sender must be devs\n     */\n    modifier onlyDevs()\n    {\n        require(milAuth_.isDev(msg.sender) == true, \"msg sender is not a dev\");\n        _;\n    }\n\n    /**\n     * @dev default buy set to ico\n     */\n    function()\n        public\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        payable\n    {\n        icoCore(msg.value);\n    }\n\n    /**\n     * @dev buy MFCoin use eth in ico phase\n     */\n    function buyICO()\n        public\n        isActivated()\n        isHuman()\n        isWithinLimits(msg.value)\n        payable\n    {\n        icoCore(msg.value);\n    }\n\n    function icoCore(uint256 _eth) private {\n        if (icoEnd_) {\n            plyr_[msg.sender].eth = plyr_[msg.sender].eth.add(_eth);\n        } else {\n            if (block.timestamp > icoEndtime_ || icoAmount_ >= MAX_ICO_AMOUNT) {\n                plyr_[msg.sender].eth = plyr_[msg.sender].eth.add(_eth);\n                icoEnd_ = true;\n\n                milFold_.activate();\n                emit onICO(msg.sender, 0, 0, MAX_ICO_AMOUNT, icoEnd_);\n            } else {\n                uint256 ethAmount = _eth;\n                if (ethAmount + icoAmount_ > MAX_ICO_AMOUNT) {\n                    ethAmount = MAX_ICO_AMOUNT.sub(icoAmount_);\n                    plyr_[msg.sender].eth = _eth.sub(ethAmount);\n                }\n                icoAmount_ = icoAmount_.add(ethAmount);\n\n                uint256 converts = ethAmount.mul(65)/100;\n                uint256 pot = ethAmount.sub(converts);\n\n                //65% of your eth use to convert MFCoin\n                uint256 buytMf = buyMFCoins(msg.sender, converts);\n\n                //35% of your eth use to pot\n                milFold_.addPot.value(pot)();\n\n                if (icoAmount_ >= MAX_ICO_AMOUNT) {\n                    icoEnd_ = true;\n\n                    milFold_.activate();\n                }\n                emit onICO(msg.sender, ethAmount, buytMf, icoAmount_, icoEnd_);\n            }\n        }\n    }\n\n    /**\n     * @dev withdraw all you earnings to your address\n     */\n    function withdraw()\n        public\n        isActivated()\n        isHuman()\n    {\n        updateGenVault(msg.sender);\n        if (plyr_[msg.sender].eth > 0) {\n            uint256 amount = plyr_[msg.sender].eth;\n            plyr_[msg.sender].eth = 0;\n            msg.sender.transfer(amount);\n            emit onWithdraw(\n                msg.sender,\n                amount,\n                block.timestamp\n            );\n        }\n    }\n\n    /**\n     * @dev register as a affiliate\n     */\n    function registerAff()\n        public\n        isHuman()\n        payable\n    {\n        require (msg.value >= REGISTER_FEE, \"register affiliate fees must >= 0.01 ether\");\n        require (plyr_[msg.sender].playerID == 0, \"you already register!\");\n        plyrAddr_[++sequence_] = msg.sender;\n        plyr_[msg.sender].playerID = sequence_;\n        fundAddr_.transfer(msg.value);\n        emit onNewPlayer(msg.sender,sequence_, block.timestamp);\n    }\n\n    function setMilFold(address _milFoldAddr)\n        public\n        onlyDevs\n    {\n        require(address(milFold_) == 0, \"milFold has been set\");\n        require(_milFoldAddr != 0, \"milFold is invalid\");\n\n        milFold_ = MilFoldInterface(_milFoldAddr);\n    }\n\n    function activate()\n        public\n        onlyDevs\n    {\n        require(address(milFold_) != 0, \"milFold has not been set\");\n        require(activated_ == false, \"ICO already activated\");\n\n        // activate the ico\n        activated_ = true;\n        icoEndtime_ = block.timestamp + icoRndMax_;\n    }\n\n    /**\n     * @dev external contracts interact with Millionare via investing MF Coin\n     * @param _addr player's address\n     * @param _affID affiliate ID\n     * @param _mfCoin eth amount to buy MF Coin\n     * @param _general eth amount assign to general\n     */\n    function invest(address _addr, uint256 _affID, uint256 _mfCoin, uint256 _general)\n        external\n        isActivated()\n        payable\n    {\n        require(milAuth_.checkGameRegiester(msg.sender), \"game no register\");\n        require(_mfCoin.add(_general) <= msg.value, \"account is insufficient\");\n\n        if (msg.value > 0) {\n            uint256 tmpAffID = 0;\n            if (_affID == 0 || plyrAddr_[_affID] == _addr) {\n                tmpAffID = plyr_[_addr].laff;\n            } else if (plyr_[_addr].laff == 0 && plyrAddr_[_affID] != address(0)) {\n                plyr_[_addr].laff = _affID;\n                tmpAffID = _affID;\n            }\n            \n            // if affiliate not exist, assign affiliate to general, i.e. set affiliate to zero\n            uint256 _affiliate = msg.value.sub(_mfCoin).sub(_general);\n            if (tmpAffID > 0 && _affiliate > 0) {\n                address affAddr = plyrAddr_[tmpAffID];\n                plyr_[affAddr].affTotal = plyr_[affAddr].affTotal.add(_affiliate);\n                plyr_[affAddr].eth = plyr_[affAddr].eth.add(_affiliate);\n                emit onAffiliatePayout(affAddr, _addr, _affiliate, block.timestamp);\n            }\n\n            if (totalSupply_ > 0) {\n                uint256 delta = _general.mul(1 ether).div(totalSupply_);\n                globalMask_ = globalMask_.add(delta);\n            } else {\n                //if nobody hold MFCoin,so nobody get general,it will give foundation\n                fundAddr_.transfer(_general);\n            }\n\n            updateGenVault(_addr);\n            \n            buyMFCoins(_addr, _mfCoin);\n\n            emit onUpdateGenVault(_addr, balance_[_addr], plyr_[_addr].genTotal, plyr_[_addr].eth);\n        }\n    }\n\n    /**\n     * @dev calculates unmasked earnings (just calculates, does not update mask)\n     * @return earnings in wei format\n     */\n    function calcUnMaskedEarnings(address _addr)\n        private\n        view\n        returns(uint256)\n    {\n        uint256 diffMask = globalMask_.sub(plyr_[_addr].mask);\n        if (diffMask > 0) {\n            return diffMask.mul(balance_[_addr]).div(1 ether);\n        }\n    }\n\n    /**\n     * @dev updates masks for round and player when keys are bought\n     */\n    function updateGenVaultAndMask(address _addr, uint256 _affID)\n        external\n        payable\n    {\n        require(msg.sender == address(milFold_), \"no authrity\");\n\n        if (msg.value > 0) {\n            /**\n             * 50/80 use to convert MFCoin\n             * 10/80 use to affiliate\n             * 20/80 use to general\n             */\n            uint256 converts = msg.value.mul(50).div(80);\n\n            uint256 tmpAffID = 0;\n            if (_affID == 0 || plyrAddr_[_affID] == _addr) {\n                tmpAffID = plyr_[_addr].laff;\n            } else if (plyr_[_addr].laff == 0 && plyrAddr_[_affID] != address(0)) {\n                plyr_[_addr].laff = _affID;\n                tmpAffID = _affID;\n            }\n            uint256 affAmount = 0;\n            if (tmpAffID > 0) {\n                affAmount = msg.value.mul(10).div(80);\n                address affAddr = plyrAddr_[tmpAffID];\n                plyr_[affAddr].affTotal = plyr_[affAddr].affTotal.add(affAmount);\n                plyr_[affAddr].eth = plyr_[affAddr].eth.add(affAmount);\n                emit onAffiliatePayout(affAddr, _addr, affAmount, block.timestamp);\n            }\n            if (totalSupply_ > 0) {\n                uint256 delta = msg.value.sub(converts).sub(affAmount).mul(1 ether).div(totalSupply_);\n                globalMask_ = globalMask_.add(delta);\n            } else {\n                //if nobody hold MFCoin,so nobody get general,it will give foundation\n                fundAddr_.transfer(msg.value.sub(converts).sub(affAmount));\n            }\n            \n            updateGenVault(_addr);\n            \n            buyMFCoins(_addr, converts);\n\n            emit onUpdateGenVault(_addr, balance_[_addr], plyr_[_addr].genTotal, plyr_[_addr].eth);\n        }\n    }\n\n    /**\n     * @dev game contract has been paid 20% amount for Millionaire and paid back now\n     */\n    function clearGenVaultAndMask(address _addr, uint256 _affID, uint256 _eth, uint256 _milFee)\n        external\n    {\n        require(msg.sender == address(milFold_), \"no authrity\");\n\n        //check player eth balance is enough pay for\n        uint256 _earnings = calcUnMaskedEarnings(_addr);\n        require(plyr_[_addr].eth.add(_earnings) >= _eth, \"eth balance not enough\");\n        \n        /**\n         * 50/80 use to convert MFCoin\n         * 10/80 use to affiliate\n         * 20/80 use to general\n         */\n        uint256 converts = _milFee.mul(50).div(80);\n        \n        uint256 tmpAffID = 0;\n        if (_affID == 0 || plyrAddr_[_affID] == _addr) {\n            tmpAffID = plyr_[_addr].laff;\n        } else if (plyr_[_addr].laff == 0 && plyrAddr_[_affID] != address(0)) {\n            plyr_[_addr].laff = _affID;\n            tmpAffID = _affID;\n        }\n        \n        uint256 affAmount = 0;\n        if (tmpAffID > 0) {\n            affAmount = _milFee.mul(10).div(80);\n            address affAddr = plyrAddr_[tmpAffID];\n            plyr_[affAddr].affTotal = plyr_[affAddr].affTotal.add(affAmount);\n            plyr_[affAddr].eth = plyr_[affAddr].eth.add(affAmount);\n\n            emit onAffiliatePayout(affAddr, _addr, affAmount, block.timestamp);\n        }\n        if (totalSupply_ > 0) {\n            uint256 delta = _milFee.sub(converts).sub(affAmount).mul(1 ether).div(totalSupply_);\n            globalMask_ = globalMask_.add(delta);\n        } else {\n            //if nobody hold MFCoin,so nobody get general,it will give foundation\n            fundAddr_.transfer(_milFee.sub(converts).sub(affAmount));\n        }\n\n        updateGenVault(_addr);\n        \n        buyMFCoins(_addr,converts);\n\n        plyr_[_addr].eth = plyr_[_addr].eth.sub(_eth);\n        milFold_.addPot.value(_eth.sub(_milFee))();\n\n        emit onUpdateGenVault(_addr, balance_[_addr], plyr_[_addr].genTotal, plyr_[_addr].eth);\n    }\n\n\n    /**\n     * @dev moves any unmasked earnings to gen vault.  updates earnings mask\n     */\n    function updateGenVault(address _addr) private\n    {\n        uint256 _earnings = calcUnMaskedEarnings(_addr);\n        if (_earnings > 0) {\n            plyr_[_addr].mask = globalMask_;\n            plyr_[_addr].genTotal = plyr_[_addr].genTotal.add(_earnings);\n            plyr_[_addr].eth = plyr_[_addr].eth.add(_earnings);\n        } else if (globalMask_ > plyr_[_addr].mask) {\n            plyr_[_addr].mask = globalMask_;\n        }\n        \n    }\n    \n    /**\n     * @dev convert eth to coin\n     * @param _addr user address\n     * @return return back coins\n     */\n    function buyMFCoins(address _addr, uint256 _eth) private returns(uint256) {\n        uint256 _coins = calcCoinsReceived(_eth);\n        mfCoinPool_ = mfCoinPool_.add(_eth);\n        totalSupply_ = totalSupply_.add(_coins);\n        balance_[_addr] = balance_[_addr].add(_coins);\n\n        emit onBuyMFCoins(_addr, _eth, _coins, now);\n        return _coins;\n    }\n\n    /**\n     * @dev sell coin to eth\n     * @param _coins sell coins\n     * @return return back eth\n     */\n    function sellMFCoins(uint256 _coins) public {\n        require(icoEnd_, \"ico phase not end\");\n        require(balance_[msg.sender] >= _coins, \"coins amount is out of range\");\n\n        updateGenVault(msg.sender);\n        \n        uint256 _eth = totalSupply_.ethRec(_coins);\n        mfCoinPool_ = mfCoinPool_.sub(_eth);\n        totalSupply_ = totalSupply_.sub(_coins);\n        balance_[msg.sender] = balance_[msg.sender].sub(_coins);\n\n        if (milAuth_.checkGameClosed(address(milFold_))) {\n            plyr_[msg.sender].eth = plyr_[msg.sender].eth.add(_eth);\n        } else {\n            /**\n             * 10/100 transfer to pot\n             * 90/100 transfer to owner\n             */\n            uint256 earnAmount = _eth.mul(90).div(100);\n            plyr_[msg.sender].eth = plyr_[msg.sender].eth.add(earnAmount);\n    \n            milFold_.addPot.value(_eth.sub(earnAmount))();\n        }\n        \n        emit onSellMFCoins(msg.sender, earnAmount, _coins, now);\n    }\n\n    /**\n     * @dev anyone winner of milfold will call this function\n     * @param _addr winner address\n     */\n    function assign(address _addr)\n        external\n        payable\n    {\n        require(msg.sender == address(milFold_), \"no authrity\");\n\n        plyr_[_addr].eth = plyr_[_addr].eth.add(msg.value);\n    }\n\n    /**\n     * @dev If unfortunate the game has problem or has no winner at long time, we'll end the game and divide the pot equally among all MF users\n     */\n    function splitPot()\n        external\n        payable\n    {\n        require(milAuth_.checkGameClosed(msg.sender), \"game has not been closed\");\n        \n        uint256 delta = msg.value.mul(1 ether).div(totalSupply_);\n        globalMask_ = globalMask_.add(delta);\n        emit onGameClose(msg.sender, msg.value, now);\n    }\n\n    /**\n     * @dev returns ico info\n     * @return ico end time\n     * @return already ico summary\n     * @return ico phase is end\n     */\n    function getIcoInfo()\n        public\n        view\n        returns(uint256, uint256, bool) {\n        return (icoAmount_, icoEndtime_, icoEnd_);\n    }\n\n    /**\n     * @dev returns player info based on address\n     * @param _addr address of the player you want to lookup\n     * @return player ID\n     * @return player eth balance\n     * @return player MFCoin\n     * @return general vault\n     * @return affiliate vault\n     */\n    function getPlayerAccount(address _addr)\n        public\n        isActivated()\n        view\n        returns(uint256, uint256, uint256, uint256, uint256)\n    {\n        uint256 genAmount = calcUnMaskedEarnings(_addr);\n        return (\n            plyr_[_addr].playerID,\n            plyr_[_addr].eth.add(genAmount),\n            balance_[_addr],\n            plyr_[_addr].genTotal.add(genAmount),\n            plyr_[_addr].affTotal\n        );\n    }\n\n    /**\n     * @dev give _eth can convert how much MFCoin\n     * @param _eth eth i will give\n     * @return MFCoin will return back\n     */\n    function calcCoinsReceived(uint256 _eth)\n        public\n        view\n        returns(uint256)\n    {\n        return mfCoinPool_.keysRec(_eth);\n    }\n\n    /**\n     * @dev returns current eth price for X coins.\n     * @param _coins number of coins desired (in 18 decimal format)\n     * @return amount of eth needed to send\n     */\n    function calcEthReceived(uint256 _coins)\n        public\n        view\n        returns(uint256)\n    {\n        if (totalSupply_ < _coins) {\n            return 0;\n        }\n        return totalSupply_.ethRec(_coins);\n    }\n\n    function getMFBalance(address _addr)\n        public\n        view\n        returns(uint256) {\n        return balance_[_addr];\n    }\n\n}\n\n//==============================================================================\n//   __|_ _    __|_ _  .\n//  _\\ | | |_|(_ | _\\  .\n//==============================================================================\nlibrary Mildatasets {\n\n    // between `DRAWN' and `ASSIGNED', someone need to claim winners.\n    enum RoundState {\n        UNKNOWN,        // aim to differ from normal states\n        STARTED,        // start current round\n        STOPPED,        // stop current round\n        DRAWN,          // draw code\n        ASSIGNED        // assign to foundation, winners, and migrate the rest to the next round\n    }\n\n    // MilFold Transaction Action.\n    enum TxAction {\n        UNKNOWN,        // default\n        BUY,            // buy or reload tickets and so on \n        DRAW,           // draw code of game \n        ASSIGN,         // assign to winners\n        ENDROUND        // end game and start new round\n    }\n\n    // RewardType\n    enum RewardType {\n        UNKNOWN,        // default\n        DRAW,           // draw code\n        ASSIGN,         // assign winner\n        END,            // end game\n        CLIAM           // winner cliam\n    }\n\n    struct Player {\n        uint256 playerID;       // Player id(use to affiliate other player)\n        uint256 eth;            // player eth balance\n        uint256 mask;           // player mask\n        uint256 genTotal;       // general total vault\n        uint256 affTotal;       // affiliate total vault\n        uint256 laff;           // last affiliate id used\n    }\n\n    struct Round {\n        uint256                         roundDeadline;      // deadline to end round\n        uint256                         claimDeadline;      // deadline to claim winners\n        uint256                         pot;                // pot\n        uint256                         blockNumber;        // draw block number(last one)\n        RoundState                      state;              // round state\n        uint256                         drawCode;           // draw code\n        uint256                         totalNum;           // total number\n        mapping (address => uint256)    winnerNum;          // winners' number\n        address[]                       winners;            // winners\n    }\n\n}\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr\n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else\n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n}\n\n//==============================================================================\n//  |  _      _ _ | _  .\n//  |<(/_\\/  (_(_||(_  .\n//=======/======================================================================\nlibrary MFCoinsCalc {\n    using SafeMath for *;\n    /**\n     * @dev calculates number of keys received given X eth\n     * @param _curEth current amount of eth in contract\n     * @param _newEth eth being spent\n     * @return amount of ticket purchased\n     */\n    function keysRec(uint256 _curEth, uint256 _newEth)\n        internal\n        pure\n        returns (uint256)\n    {\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\n    }\n\n    /**\n     * @dev calculates amount of eth received if you sold X keys\n     * @param _curKeys current amount of keys that exist\n     * @param _sellKeys amount of keys you wish to sell\n     * @return amount of eth received\n     */\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\n        internal\n        pure\n        returns (uint256)\n    {\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\n    }\n\n    /**\n     * @dev calculates how many keys would exist with given an amount of eth\n     * @param _eth eth \"in contract\"\n     * @return number of keys that would exist\n     */\n    function keys(uint256 _eth)\n        internal\n        pure\n        returns(uint256)\n    {\n        return (((((_eth).mul(1000000000000000000).mul(2000000000000000000000000000)).add(39999800000250000000000000000000000000000000000000000000000000000)).sqrt()).sub(199999500000000000000000000000000)) / (1000000000);\n    }\n\n    /**\n     * @dev calculates how much eth would be in contract given a number of keys\n     * @param _keys number of keys \"in contract\"\n     * @return eth that would exists\n     */\n    function eth(uint256 _keys)\n        internal\n        pure\n        returns(uint256)\n    {\n        return ((500000000).mul(_keys.sq()).add(((399999000000000).mul(_keys.mul(1000000000000000000))) / (2) )) / ((1000000000000000000).sq());\n    }\n}",
  "bytecode": ""
}