{
  "address": "0x3dc0501c32bee0cc1e629d590302a4b909797474",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "TrueVND Token",
  "contractName": "TrueVND",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\npragma solidity ^0.4.24;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoContracts.sol\n\n/**\n * @title Contracts that should not own Contracts\n * @author Remco Bloemen <[email protected]π.com>\n * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n * of this contract to reclaim ownership of the contracts.\n */\ncontract HasNoContracts is Ownable{\n    /**\n     * @dev Reclaim ownership of Ownable contracts\n     * @param contractAddr The address of the Ownable to be reclaimed.\n     */\n    function reclaimContract(address contractAddr) external onlyOwner {\n        Ownable contractInst = Ownable(contractAddr);\n        contractInst.transferOwnership(owner);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\n\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this Ether.\n * @notice Ether can still be sent to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n */\ncontract HasNoEther is Ownable {\n    /**\n    * @dev Constructor that rejects incoming Ether\n    * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n    * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n    * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n    * we could use assembly to access msg.value.\n    */\n    constructor() public payable {\n        require(msg.value == 0);\n    }\n\n    /**\n     * @dev Disallows direct send by setting a default function without the `payable` flag.\n     */\n    function() external {\n    }\n\n    /**\n     * @dev Transfer all Ether held by the contract to the owner.\n     */\n    function reclaimEther() external onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n        assert(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n        assert(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n        assert(token.approve(spender, value));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n    using SafeERC20 for ERC20Basic;\n\n    /**\n     * @dev Reclaim all ERC20Basic compatible tokens\n     * @param token ERC20Basic The address of the token contract\n     */\n    function reclaimToken(ERC20Basic token) external onlyOwner {\n        uint256 balance = token.balanceOf(this);\n        token.safeTransfer(owner, balance);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/HasNoTokens.sol\n\n/**\n * @title Contracts that should not own Tokens\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n * owner to reclaim the tokens.\n */\ncontract HasNoTokens is CanReclaimToken {\n    /**\n     * @dev Reject all ERC223 compatible tokens\n     * @param _from address The address that is transferring the tokens\n     * @param _value uint256 the amount of the specified token\n     * @param _data Bytes The data passed from the caller.\n     */\n    function tokenFallback(address _from, uint256 _value, bytes _data) external pure {\n        _from;\n        _value;\n        _data;\n        revert();\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/NoOwner.sol\n\n/**\n * @title Base contract for contracts that should not own things.\n * @author Remco Bloemen <[email protected]π.com>\n * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\n * Owned contracts. See respective base contracts for details.\n */\ncontract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n    address public pendingOwner;\n\n    /**\n     * @dev Modifier throws if called by any account other than the pendingOwner.\n     */\n    modifier onlyPendingOwner() {\n        require(msg.sender == pendingOwner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to set the pendingOwner address.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        pendingOwner = newOwner;\n    }\n\n    /**\n     * @dev Allows the pendingOwner address to finalize the transfer.\n     */\n    function claimOwnership() onlyPendingOwner public {\n        emit OwnershipTransferred(owner, pendingOwner);\n        owner = pendingOwner;\n        pendingOwner = address(0);\n    }\n}\n\n// File: contracts/BalanceSheet.sol\n\n// A wrapper around the balanceOf mapping.\ncontract BalanceSheet is Claimable {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public balanceOf;\n\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\n        balanceOf[_addr] = balanceOf[_addr].add(_value);\n    }\n\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\n        balanceOf[_addr] = balanceOf[_addr].sub(_value);\n    }\n\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\n        balanceOf[_addr] = _value;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic, Claimable {\n    using SafeMath for uint256;\n\n    BalanceSheet public balances;\n\n    uint256 totalSupply_;\n\n    function setBalanceSheet(address sheet) external onlyOwner {\n        balances = BalanceSheet(sheet);\n        balances.claimOwnership();\n    }\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        transferAllArgsNoAllowance(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferAllArgsNoAllowance(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0));\n        require(_from != address(0));\n        require(_value <= balances.balanceOf(_from));\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances.subBalance(_from, _value);\n        balances.addBalance(_to, _value);\n        emit Transfer(_from, _to, _value);\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances.balanceOf(_owner);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken{\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances.balanceOf(msg.sender));\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances.subBalance(burner, _value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n        emit Transfer(burner, address(0), _value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n// File: contracts/AllowanceSheet.sol\n\n// A wrapper around the allowanceOf mapping.\ncontract AllowanceSheet is Claimable {\n    using SafeMath for uint256;\n\n    mapping(address => mapping(address => uint256)) public allowanceOf;\n\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);\n    }\n\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);\n    }\n\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\n        allowanceOf[_tokenHolder][_spender] = _value;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\ncontract StandardToken is ERC20, BasicToken {\n    AllowanceSheet public allowances;\n\n    function setAllowanceSheet(address sheet) external onlyOwner {\n        allowances = AllowanceSheet(sheet);\n        allowances.claimOwnership();\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        transferAllArgsYesAllowance(_from, _to, _value, msg.sender);\n        return true;\n    }\n\n    function transferAllArgsYesAllowance(address _from, address _to, uint256 _value, address spender) internal {\n        require(_value <= allowances.allowanceOf(_from, spender));\n\n        allowances.subAllowance(_from, spender, _value);\n        transferAllArgsNoAllowance(_from, _to, _value);\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        approveAllArgs(_spender, _value, msg.sender);\n        return true;\n    }\n\n    function approveAllArgs(address _spender, uint256 _value, address _tokenHolder) internal {\n        allowances.setAllowance(_tokenHolder, _spender, _value);\n        emit Approval(_tokenHolder, _spender, _value);\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowances.allowanceOf(_owner, _spender);\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        increaseApprovalAllArgs(_spender, _addedValue, msg.sender);\n        return true;\n    }\n\n    function increaseApprovalAllArgs(address _spender, uint _addedValue, address tokenHolder) internal {\n        allowances.addAllowance(tokenHolder, _spender, _addedValue);\n        emit Approval(tokenHolder, _spender, allowances.allowanceOf(tokenHolder, _spender));\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);\n        return true;\n    }\n\n    function decreaseApprovalAllArgs(address _spender, uint _subtractedValue, address tokenHolder) internal {\n        uint oldValue = allowances.allowanceOf(tokenHolder, _spender);\n        if (_subtractedValue > oldValue) {\n            allowances.setAllowance(tokenHolder, _spender, 0);\n        } else {\n            allowances.subAllowance(tokenHolder, _spender, _subtractedValue);\n        }\n        emit Approval(tokenHolder, _spender, allowances.allowanceOf(tokenHolder, _spender));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n\n/**\n * @title Pausable token\n * @dev StandardToken modified with pausable transfers.\n **/\ncontract PausableToken is StandardToken, Pausable{\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n\n// File: contracts/AddressList.sol\n\ncontract AddressList is Claimable {\n    string public name;\n    mapping(address => bool) public onList;\n\n    constructor(string _name, bool nullValue) public {\n        name = _name;\n        onList[0x0] = nullValue;\n    }\n\n    event ChangeWhiteList(address indexed to, bool onList);\n\n    // Set whether _to is on the list or not. Whether 0x0 is on the list\n    // or not cannot be set here - it is set once and for all by the constructor.\n    function changeList(address _to, bool _onList) onlyOwner public {\n        require(_to != 0x0);\n        if (onList[_to] != _onList) {\n            onList[_to] = _onList;\n            emit ChangeWhiteList(_to, _onList);\n        }\n    }\n}\n\n// File: contracts/DelegateERC20.sol\n\ncontract DelegateERC20 {\n    function delegateTotalSupply() public view returns (uint256);\n\n    function delegateBalanceOf(address who) public view returns (uint256);\n\n    function delegateTransfer(address to, uint256 value, address origSender) public returns (bool);\n\n    function delegateAllowance(address owner, address spender) public view returns (uint256);\n\n    function delegateTransferFrom(address from, address to, uint256 value, address origSender) public returns (bool);\n\n    function delegateApprove(address spender, uint256 value, address origSender) public returns (bool);\n\n    function delegateIncreaseApproval(address spender, uint addedValue, address origSender) public returns (bool);\n\n    function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) public returns (bool);\n}\n\n// File: contracts/CanDelegate.sol\n\ncontract CanDelegate is StandardToken {\n    // If this contract needs to be upgraded, the new contract will be stored\n    // in 'delegate' and any ERC20 calls to this contract will be delegated to that one.\n    DelegateERC20 public delegate;\n\n    event DelegateToNewContract(address indexed newContract);\n\n    // Can undelegate by passing in newContract = address(0)\n    function delegateToNewContract(DelegateERC20 newContract) public onlyOwner {\n        delegate = newContract;\n        emit DelegateToNewContract(newContract);\n    }\n\n    // If a delegate has been designated, all ERC20 calls are forwarded to it\n    function transfer(address to, uint256 value) public returns (bool) {\n        if (delegate == address(0)) {\n            return super.transfer(to, value);\n        } else {\n            return delegate.delegateTransfer(to, value, msg.sender);\n        }\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        if (delegate == address(0)) {\n            return super.transferFrom(from, to, value);\n        } else {\n            return delegate.delegateTransferFrom(from, to, value, msg.sender);\n        }\n    }\n\n    function balanceOf(address who) public view returns (uint256) {\n        if (delegate == address(0)) {\n            return super.balanceOf(who);\n        } else {\n            return delegate.delegateBalanceOf(who);\n        }\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        if (delegate == address(0)) {\n            return super.approve(spender, value);\n        } else {\n            return delegate.delegateApprove(spender, value, msg.sender);\n        }\n    }\n\n    function allowance(address _owner, address spender) public view returns (uint256) {\n        if (delegate == address(0)) {\n            return super.allowance(_owner, spender);\n        } else {\n            return delegate.delegateAllowance(_owner, spender);\n        }\n    }\n\n    function totalSupply() public view returns (uint256) {\n        if (delegate == address(0)) {\n            return super.totalSupply();\n        } else {\n            return delegate.delegateTotalSupply();\n        }\n    }\n\n    function increaseApproval(address spender, uint addedValue) public returns (bool) {\n        if (delegate == address(0)) {\n            return super.increaseApproval(spender, addedValue);\n        } else {\n            return delegate.delegateIncreaseApproval(spender, addedValue, msg.sender);\n        }\n    }\n\n    function decreaseApproval(address spender, uint subtractedValue) public returns (bool) {\n        if (delegate == address(0)) {\n            return super.decreaseApproval(spender, subtractedValue);\n        } else {\n            return delegate.delegateDecreaseApproval(spender, subtractedValue, msg.sender);\n        }\n    }\n}\n\n// File: contracts/StandardDelegate.sol\n\ncontract StandardDelegate is StandardToken, DelegateERC20 {\n    address public delegatedFrom;\n\n    modifier onlySender(address source) {\n        require(msg.sender == source);\n        _;\n    }\n\n    function setDelegatedFrom(address addr) onlyOwner public {\n        delegatedFrom = addr;\n    }\n\n    // All delegate ERC20 functions are forwarded to corresponding normal functions\n    function delegateTotalSupply() public view returns (uint256) {\n        return totalSupply();\n    }\n\n    function delegateBalanceOf(address who) public view returns (uint256) {\n        return balanceOf(who);\n    }\n\n    function delegateTransfer(address to, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\n        transferAllArgsNoAllowance(origSender, to, value);\n        return true;\n    }\n\n    function delegateAllowance(address owner, address spender) public view returns (uint256) {\n        return allowance(owner, spender);\n    }\n\n    function delegateTransferFrom(address from, address to, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\n        transferAllArgsYesAllowance(from, to, value, origSender);\n        return true;\n    }\n\n    function delegateApprove(address spender, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\n        approveAllArgs(spender, value, origSender);\n        return true;\n    }\n\n    function delegateIncreaseApproval(address spender, uint addedValue, address origSender) onlySender(delegatedFrom) public returns (bool) {\n        increaseApprovalAllArgs(spender, addedValue, origSender);\n        return true;\n    }\n\n    function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) onlySender(delegatedFrom) public returns (bool) {\n        decreaseApprovalAllArgs(spender, subtractedValue, origSender);\n        return true;\n    }\n}\n\n// File: contracts/TrueVND.sol\n\ncontract TrueVND is NoOwner, BurnableToken, CanDelegate, StandardDelegate, PausableToken {\n    string public name = \"TrueVND\";\n    string public symbol = \"TVND\";\n    uint8 public constant decimals = 18;\n\n    AddressList public canReceiveMintWhiteList;\n    AddressList public canBurnWhiteList;\n    AddressList public blackList;\n    AddressList public noFeesList;\n    address public staker;\n\n    uint256 public burnMin = 1000 * 10 ** uint256(decimals);\n    uint256 public burnMax = 20000000 * 10 ** uint256(decimals);\n\n    uint80 public transferFeeNumerator = 8;\n    uint80 public transferFeeDenominator = 10000;\n    uint80 public mintFeeNumerator = 0;\n    uint80 public mintFeeDenominator = 10000;\n    uint256 public mintFeeFlat = 0;\n    uint80 public burnFeeNumerator = 0;\n    uint80 public burnFeeDenominator = 10000;\n    uint256 public burnFeeFlat = 0;\n\n    event ChangeBurnBoundsEvent(uint256 newMin, uint256 newMax);\n    event Mint(address indexed to, uint256 amount);\n    event WipedAccount(address indexed account, uint256 balance);\n\n    constructor() public {\n        totalSupply_ = 0;\n        staker = msg.sender;\n    }\n\n    function setLists(AddressList _canReceiveMintWhiteList, AddressList _canBurnWhiteList, AddressList _blackList, AddressList _noFeesList) onlyOwner public {\n        canReceiveMintWhiteList = _canReceiveMintWhiteList;\n        canBurnWhiteList = _canBurnWhiteList;\n        blackList = _blackList;\n        noFeesList = _noFeesList;\n    }\n\n    function changeName(string _name, string _symbol) onlyOwner public {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    // Burning functions as withdrawing money from the system. The platform will keep track of who burns coins,\n    // and will send them back the equivalent amount of money (rounded down to the nearest cent).\n    function burn(uint256 _value) public {\n        require(canBurnWhiteList.onList(msg.sender));\n        require(_value >= burnMin);\n        require(_value <= burnMax);\n        uint256 fee = payStakingFee(msg.sender, _value, burnFeeNumerator, burnFeeDenominator, burnFeeFlat, 0x0);\n        uint256 remaining = _value.sub(fee);\n        super.burn(remaining);\n    }\n\n    // Create _amount new tokens and transfer them to _to.\n    // Based on code by OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/MintableToken.sol\n    function mint(address _to, uint256 _amount) onlyOwner public {\n        require(canReceiveMintWhiteList.onList(_to));\n        totalSupply_ = totalSupply_.add(_amount);\n        balances.addBalance(_to, _amount);\n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n        payStakingFee(_to, _amount, mintFeeNumerator, mintFeeDenominator, mintFeeFlat, 0x0);\n    }\n\n    // Change the minimum and maximum amount that can be burned at once. Burning\n    // may be disabled by setting both to 0 (this will not be done under normal\n    // operation, but we can't add checks to disallow it without losing a lot of\n    // flexibility since burning could also be as good as disabled\n    // by setting the minimum extremely high, and we don't want to lock\n    // in any particular cap for the minimum)\n    function changeBurnBounds(uint newMin, uint newMax) onlyOwner public {\n        require(newMin <= newMax);\n        burnMin = newMin;\n        burnMax = newMax;\n        emit ChangeBurnBoundsEvent(newMin, newMax);\n    }\n\n    // A blacklisted address can't call transferFrom\n    function transferAllArgsYesAllowance(address _from, address _to, uint256 _value, address spender) internal {\n        require(!blackList.onList(spender));\n        super.transferAllArgsYesAllowance(_from, _to, _value, spender);\n    }\n\n    // transfer and transferFrom both ultimately call this function, so we\n    // check blacklist and pay staking fee here.\n    function transferAllArgsNoAllowance(address _from, address _to, uint256 _value) internal {\n        require(!blackList.onList(_from));\n        require(!blackList.onList(_to));\n        super.transferAllArgsNoAllowance(_from, _to, _value);\n        payStakingFee(_to, _value, transferFeeNumerator, transferFeeDenominator, burnFeeFlat, _from);\n    }\n\n    function wipeBlacklistedAccount(address account) public onlyOwner {\n        require(blackList.onList(account));\n        uint256 oldValue = balanceOf(account);\n        balances.setBalance(account, 0);\n        totalSupply_ = totalSupply_.sub(oldValue);\n        emit WipedAccount(account, oldValue);\n    }\n\n    function payStakingFee(address payer, uint256 value, uint80 numerator, uint80 denominator, uint256 flatRate, address otherParticipant) private returns (uint256) {\n        if (noFeesList.onList(payer) || noFeesList.onList(otherParticipant)) {\n            return 0;\n        }\n        uint256 stakingFee = value.mul(numerator).div(denominator).add(flatRate);\n        if (stakingFee > 0) {\n            super.transferAllArgsNoAllowance(payer, staker, stakingFee);\n        }\n        return stakingFee;\n    }\n\n    function changeStakingFees(uint80 _transferFeeNumerator,\n        uint80 _transferFeeDenominator,\n        uint80 _mintFeeNumerator,\n        uint80 _mintFeeDenominator,\n        uint256 _mintFeeFlat,\n        uint80 _burnFeeNumerator,\n        uint80 _burnFeeDenominator,\n        uint256 _burnFeeFlat) public onlyOwner {\n        require(_transferFeeDenominator != 0);\n        require(_mintFeeDenominator != 0);\n        require(_burnFeeDenominator != 0);\n        transferFeeNumerator = _transferFeeNumerator;\n        transferFeeDenominator = _transferFeeDenominator;\n        mintFeeNumerator = _mintFeeNumerator;\n        mintFeeDenominator = _mintFeeDenominator;\n        mintFeeFlat = _mintFeeFlat;\n        burnFeeNumerator = _burnFeeNumerator;\n        burnFeeDenominator = _burnFeeDenominator;\n        burnFeeFlat = _burnFeeFlat;\n    }\n\n    function changeStaker(address newStaker) public onlyOwner {\n        require(newStaker != address(0));\n        staker = newStaker;\n    }\n}",
  "bytecode": "60806040526000600660146101000a81548160ff0219169083151502179055506040805190810160405280600781526020017f54727565564e4400000000000000000000000000000000000000000000000000815250600790805190602001906200006c929190620002a9565b506040805190810160405280600481526020017f54564e440000000000000000000000000000000000000000000000000000000081525060089080519060200190620000ba929190620002a9565b50601260ff16600a0a6103e802600e55601260ff16600a0a6301312d0002600f556008601060006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055506127106010600a6101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055506000601060146101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550612710601160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555060006012556000601360006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055506127106013600a6101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555060006014553480156200020957600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000341415156200025a57600080fd5b600060038190555033600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000358565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002ec57805160ff19168380011785556200031d565b828001600101855582156200031d579182015b828111156200031c578251825591602001919060010190620002ff565b5b5090506200032c919062000330565b5090565b6200035591905b808211156200035157600081600090555060010162000337565b5090565b90565b615ff680620003686000396000f3006080604052600436106102d5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d3fdc9146102e457806306fdde031461030f578063095ea7b31461039f57806309ab8bba146104045780630b8e845a1461047b5780630ce51179146104a657806317ffc3201461054957806318160ddd1461058c5780631d2d8400146105b75780631db8cb3f146105fa5780631f7af1df146106b557806323b872dd1461070c57806326fe995114610791578063296f4000146107e85780632aed7f3f1461086d578063313ce567146108b05780633ed10b92146108e15780633f4ba83a1461093857806340c10f191461094f57806342966c681461099c57806343a468c8146109c95780634df6b45d14610a205780634e71e0c814610ac557806354f78dad14610adc578063554249b314610b1f57806356e1c40d14610ba45780635a44413914610be75780635c131d7014610c3e5780635c975abb14610c695780635db07aee14610c985780635ebaf1db14610cdb57806361927adb14610d325780636618846314610d755780636d4717fe14610dda57806370a0823114610e3157806370df42e114610e8857806376e71dd814610ebf5780637bb98a6814610eea5780638456cb5914610f4157806386575e4014610f585780638d93eac2146110075780638da5cb5b1461104a5780638f98ce8f146110a157806393d3173a146110e457806395d89b41146111695780639cd1a121146111f95780639f727c271461127e578063a9059cbb14611295578063ab55979d146112fa578063bd7243f61461133d578063c0ee0b8a14611380578063c18f4831146113e5578063c89e436114611428578063cdab73b51461147f578063d42cfc41146114d6578063d63a138914611519578063d73dd62314611544578063dd62ed3e146115a9578063e30c397814611620578063edc1e4f914611677578063f2fde38b146116ba575b3480156102e157600080fd5b50005b3480156102f057600080fd5b506102f96116fd565b6040518082815260200191505060405180910390f35b34801561031b57600080fd5b50610324611703565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610364578082015181840152602081019050610349565b50505050905090810190601f1680156103915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103ab57600080fd5b506103ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506117a1565b604051808215151515815260200191505060405180910390f35b34801561041057600080fd5b50610465600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117d1565b6040518082815260200191505060405180910390f35b34801561048757600080fd5b506104906117e5565b6040518082815260200191505060405180910390f35b3480156104b257600080fd5b50610547600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117eb565b005b34801561055557600080fd5b5061058a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611950565b005b34801561059857600080fd5b506105a1611ad5565b6040518082815260200191505060405180910390f35b3480156105c357600080fd5b506105f8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c03565b005b34801561060657600080fd5b506106b3600480360381019080803569ffffffffffffffffffff169060200190929190803569ffffffffffffffffffff169060200190929190803569ffffffffffffffffffff169060200190929190803569ffffffffffffffffffff16906020019092919080359060200190929190803569ffffffffffffffffffff169060200190929190803569ffffffffffffffffffff16906020019092919080359060200190929190505050611ce5565b005b3480156106c157600080fd5b506106ca611eba565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561071857600080fd5b50610777600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ee0565b604051808215151515815260200191505060405180910390f35b34801561079d57600080fd5b506107a6611f12565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107f457600080fd5b50610853600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f38565b604051808215151515815260200191505060405180910390f35b34801561087957600080fd5b506108ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fae565b005b3480156108bc57600080fd5b506108c56120e6565b604051808260ff1660ff16815260200191505060405180910390f35b3480156108ed57600080fd5b506108f66120eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561094457600080fd5b5061094d612111565b005b34801561095b57600080fd5b5061099a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506121d0565b005b3480156109a857600080fd5b506109c760048036038101908080359060200190929190505050612520565b005b3480156109d557600080fd5b50610a0a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126ae565b6040518082815260200191505060405180910390f35b348015610a2c57600080fd5b50610aab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126c0565b604051808215151515815260200191505060405180910390f35b348015610ad157600080fd5b50610ada612738565b005b348015610ae857600080fd5b50610b1d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128d7565b005b348015610b2b57600080fd5b50610b8a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a14565b604051808215151515815260200191505060405180910390f35b348015610bb057600080fd5b50610bb9612a8a565b604051808269ffffffffffffffffffff1669ffffffffffffffffffff16815260200191505060405180910390f35b348015610bf357600080fd5b50610bfc612aa6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610c4a57600080fd5b50610c53612acc565b6040518082815260200191505060405180910390f35b348015610c7557600080fd5b50610c7e612ad2565b604051808215151515815260200191505060405180910390f35b348015610ca457600080fd5b50610cad612ae5565b604051808269ffffffffffffffffffff1669ffffffffffffffffffff16815260200191505060405180910390f35b348015610ce757600080fd5b50610cf0612b01565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d3e57600080fd5b50610d73600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b27565b005b348015610d8157600080fd5b50610dc0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612bc6565b604051808215151515815260200191505060405180910390f35b348015610de657600080fd5b50610def612bf6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610e3d57600080fd5b50610e72600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c1c565b6040518082815260200191505060405180910390f35b348015610e9457600080fd5b50610ebd6004803603810190808035906020019092919080359060200190929190505050612d84565b005b348015610ecb57600080fd5b50610ed4612e3f565b6040518082815260200191505060405180910390f35b348015610ef657600080fd5b50610eff612e4e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f4d57600080fd5b50610f56612e74565b005b348015610f6457600080fd5b50611005600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612f34565b005b34801561101357600080fd5b5061101c612fc1565b604051808269ffffffffffffffffffff1669ffffffffffffffffffff16815260200191505060405180910390f35b34801561105657600080fd5b5061105f612fdd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156110ad57600080fd5b506110b6613002565b604051808269ffffffffffffffffffff1669ffffffffffffffffffff16815260200191505060405180910390f35b3480156110f057600080fd5b5061114f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061301e565b604051808215151515815260200191505060405180910390f35b34801561117557600080fd5b5061117e613094565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156111be5780820151818401526020810190506111a3565b50505050905090810190601f1680156111eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561120557600080fd5b50611264600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613132565b604051808215151515815260200191505060405180910390f35b34801561128a57600080fd5b506112936131a8565b005b3480156112a157600080fd5b506112e0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613284565b604051808215151515815260200191505060405180910390f35b34801561130657600080fd5b5061133b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132b4565b005b34801561134957600080fd5b5061137e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061338f565b005b34801561138c57600080fd5b506113e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050613645565b005b3480156113f157600080fd5b506113fa61364a565b604051808269ffffffffffffffffffff1669ffffffffffffffffffff16815260200191505060405180910390f35b34801561143457600080fd5b5061143d613666565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561148b57600080fd5b5061149461368c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156114e257600080fd5b506114eb6136b2565b604051808269ffffffffffffffffffff1669ffffffffffffffffffff16815260200191505060405180910390f35b34801561152557600080fd5b5061152e6136ce565b6040518082815260200191505060405180910390f35b34801561155057600080fd5b5061158f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506136d4565b604051808215151515815260200191505060405180910390f35b3480156115b557600080fd5b5061160a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613704565b6040518082815260200191505060405180910390f35b34801561162c57600080fd5b506116356138a2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561168357600080fd5b506116b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506138c8565b005b3480156116c657600080fd5b506116fb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613a05565b005b600e5481565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117995780601f1061176e57610100808354040283529160200191611799565b820191906000526020600020905b81548152906001019060200180831161177c57829003601f168201915b505050505081565b6000600660149054906101000a900460ff161515156117bf57600080fd5b6117c98383613aa4565b905092915050565b60006117dd8383613704565b905092915050565b60145481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561184657600080fd5b83600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119ad57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611a4857600080fd5b505af1158015611a5c573d6000803e3d6000fd5b505050506040513d6020811015611a7257600080fd5b81019080805190602001909291905050509050611ad16000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff16613c4a9092919063ffffffff16565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611b3c57611b35613d35565b9050611c00565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166376e71dd86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611bc257600080fd5b505af1158015611bd6573d6000803e3d6000fd5b505050506040513d6020811015611bec57600080fd5b810190808051906020019092919050505090505b90565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c5e57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f376b7ed8bfb3c86aceee48f830ab5c007b4aa3ea522fb8784caeb5e33d535b4f60405160405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d4057600080fd5b60008769ffffffffffffffffffff1614151515611d5c57600080fd5b60008569ffffffffffffffffffff1614151515611d7857600080fd5b60008269ffffffffffffffffffff1614151515611d9457600080fd5b87601060006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550866010600a6101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555085601060146101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555084601160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055508360128190555082601360006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550816013600a6101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550806014819055505050505050505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660149054906101000a900460ff16151515611efe57600080fd5b611f09848484613d3f565b90509392505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f9757600080fd5b611fa2858585613f1b565b60019150509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561200b57600080fd5b8190508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156120ca57600080fd5b505af11580156120de573d6000803e3d6000fd5b505050505050565b601281565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561216c57600080fd5b600660149054906101000a900460ff16151561218757600080fd5b6000600660146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561222b57600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f626eb3836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156122e857600080fd5b505af11580156122fc573d6000803e3d6000fd5b505050506040513d602081101561231257600080fd5b8101908080519060200190929190505050151561232e57600080fd5b6123438160035461409690919063ffffffff16565b600381905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321e5383a83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561240e57600080fd5b505af1158015612422573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885826040518082815260200191505060405180910390a28173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a361251b8282601060149054906101000a900469ffffffffffffffffffff16601160009054906101000a900469ffffffffffffffffffff1660125460006140b4565b505050565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f626eb3336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156125e057600080fd5b505af11580156125f4573d6000803e3d6000fd5b505050506040513d602081101561260a57600080fd5b8101908080519060200190929190505050151561262657600080fd5b600e54831015151561263757600080fd5b600f54831115151561264857600080fd5b6126893384601360009054906101000a900469ffffffffffffffffffff166013600a9054906101000a900469ffffffffffffffffffff1660145460006140b4565b915061269e828461435390919063ffffffff16565b90506126a98161436c565b505050565b60006126b982612c1c565b9050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561271f57600080fd5b61272b86868686614627565b6001915050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561279457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561293257600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e71e0c86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156129f957600080fd5b505af1158015612a0d573d6000803e3d6000fd5b5050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a7357600080fd5b612a7e85858561473d565b60019150509392505050565b601360009054906101000a900469ffffffffffffffffffff1681565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b600660149054906101000a900460ff1681565b601160009054906101000a900469ffffffffffffffffffff1681565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b8257600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600660149054906101000a900460ff16151515612be457600080fd5b612bee83836149e3565b905092915050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612c8457612c7d82614b89565b9050612d7f565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166343a468c8836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015612d4157600080fd5b505af1158015612d55573d6000803e3d6000fd5b505050506040513d6020811015612d6b57600080fd5b810190808051906020019092919050505090505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ddf57600080fd5b808211151515612dee57600080fd5b81600e8190555080600f819055507ff8f7312d8aa9257dcfe43287f24cacc0f267875658809b6c7953b277565625228282604051808381526020018281526020019250505060405180910390a15050565b6000612e49611ad5565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ecf57600080fd5b600660149054906101000a900460ff16151515612eeb57600080fd5b6001600660146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f8f57600080fd5b8160079080519060200190612fa5929190615f25565b508060089080519060200190612fbc929190615f25565b505050565b601060149054906101000a900469ffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900469ffffffffffffffffffff1681565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561307d57600080fd5b613088858585614c8a565b60019150509392505050565b60088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561312a5780601f106130ff5761010080835404028352916020019161312a565b820191906000526020600020905b81548152906001019060200180831161310d57829003601f168201915b505050505081565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561319157600080fd5b61319c838686615181565b60019150509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561320357600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015613281573d6000803e3d6000fd5b50565b6000600660149054906101000a900460ff161515156132a257600080fd5b6132ac83836153da565b905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561330f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561334b57600080fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156133ec57600080fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f626eb3836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156134a957600080fd5b505af11580156134bd573d6000803e3d6000fd5b505050506040513d60208110156134d357600080fd5b810190808051906020019092919050505015156134ef57600080fd5b6134f882612c1c565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e30443bc8360006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156135c057600080fd5b505af11580156135d4573d6000803e3d6000fd5b505050506135ed8160035461435390919063ffffffff16565b6003819055508173ffffffffffffffffffffffffffffffffffffffff167fdf58d2368c06216a398f05a7a88c8edc64a25c33f33fd2bd8b56fbc8822c02d8826040518082815260200191505060405180910390a25050565b600080fd5b6013600a9054906101000a900469ffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6010600a9054906101000a900469ffffffffffffffffffff1681565b60125481565b6000600660149054906101000a900460ff161515156136f257600080fd5b6136fc8383615580565b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561376d576137668383615726565b905061389c565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309ab8bba84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561385e57600080fd5b505af1158015613872573d6000803e3d6000fd5b505050506040513d602081101561388857600080fd5b810190808051906020019092919050505090505b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561392357600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e71e0c86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156139ea57600080fd5b505af11580156139fe573d6000803e3d6000fd5b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613a6057600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613b0d57613b06838361585c565b9050613c44565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663296f40008484336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b158015613c0657600080fd5b505af1158015613c1a573d6000803e3d6000fd5b505050506040513d6020811015613c3057600080fd5b810190808051906020019092919050505090505b92915050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015613ced57600080fd5b505af1158015613d01573d6000803e3d6000fd5b505050506040513d6020811015613d1757600080fd5b81019080805190602001909291905050501515613d3057fe5b505050565b6000600354905090565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613da957613da2848484615873565b9050613f14565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634df6b45d858585336040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050602060405180830381600087803b158015613ed657600080fd5b505af1158015613eea573d6000803e3d6000fd5b505050506040513d6020811015613f0057600080fd5b810190808051906020019092919050505090505b9392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da46098c8285856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561401457600080fd5b505af1158015614028573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3505050565b60008082840190508381101515156140aa57fe5b8091505092915050565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f626eb3896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561417457600080fd5b505af1158015614188573d6000803e3d6000fd5b505050506040513d602081101561419e57600080fd5b8101908080519060200190929190505050806142ae5750600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f626eb3846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561427257600080fd5b505af1158015614286573d6000803e3d6000fd5b505050506040513d602081101561429c57600080fd5b81019080805190602001909291905050505b156142bc5760009150614348565b61430b846142fd8769ffffffffffffffffffff166142ef8a69ffffffffffffffffffff168c61588c90919063ffffffff16565b6158c790919063ffffffff16565b61409690919063ffffffff16565b905060008111156143445761434388600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836158e2565b5b8091505b509695505050505050565b600082821115151561436157fe5b818303905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561442b57600080fd5b505af115801561443f573d6000803e3d6000fd5b505050506040513d602081101561445557600080fd5b8101908080519060200190929190505050821115151561447457600080fd5b339050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf8eeb7e82846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561453c57600080fd5b505af1158015614550573d6000803e3d6000fd5b505050506145698260035461435390919063ffffffff16565b6003819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f626eb3826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156146e457600080fd5b505af11580156146f8573d6000803e3d6000fd5b505050506040513d602081101561470e57600080fd5b810190808051906020019092919050505015151561472b57600080fd5b61473784848484615c84565b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fd72d168285856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561483657600080fd5b505af115801561484a573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a46ec8285886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561498e57600080fd5b505af11580156149a2573d6000803e3d6000fd5b505050506040513d60208110156149b857600080fd5b81019080805190602001909291905050506040518082815260200191505060405180910390a3505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614a4c57614a458383615ee0565b9050614b83565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393d3173a8484336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b158015614b4557600080fd5b505af1158015614b59573d6000803e3d6000fd5b505050506040513d6020811015614b6f57600080fd5b810190808051906020019092919050505090505b92915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015614c4857600080fd5b505af1158015614c5c573d6000803e3d6000fd5b505050506040513d6020811015614c7257600080fd5b81019080805190602001909291905050509050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a46ec8283866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015614d7d57600080fd5b505af1158015614d91573d6000803e3d6000fd5b505050506040513d6020811015614da757600080fd5b8101908080519060200190929190505050905080831115614ed957600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da46098c838660006040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015614ebc57600080fd5b505af1158015614ed0573d6000803e3d6000fd5b50505050614feb565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397d88cd28386866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015614fd257600080fd5b505af1158015614fe6573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a46ec8286896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561512b57600080fd5b505af115801561513f573d6000803e3d6000fd5b505050506040513d602081101561515557600080fd5b81019080805190602001909291905050506040518082815260200191505060405180910390a350505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f626eb3846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561523e57600080fd5b505af1158015615252573d6000803e3d6000fd5b505050506040513d602081101561526857600080fd5b810190808051906020019092919050505015151561528557600080fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f626eb3836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561534257600080fd5b505af1158015615356573d6000803e3d6000fd5b505050506040513d602081101561536c57600080fd5b810190808051906020019092919050505015151561538957600080fd5b6153948383836158e2565b6153d48282601060009054906101000a900469ffffffffffffffffffff166010600a9054906101000a900469ffffffffffffffffffff16601454886140b4565b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156154435761543c8383615ef7565b905061557a565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cd1a1218484336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b15801561553c57600080fd5b505af1158015615550573d6000803e3d6000fd5b505050506040513d602081101561556657600080fd5b810190808051906020019092919050505090505b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156155e9576155e28383615f0e565b9050615720565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663554249b38484336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b1580156156e257600080fd5b505af11580156156f6573d6000803e3d6000fd5b505050506040513d602081101561570c57600080fd5b810190808051906020019092919050505090505b92915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a46ec8284846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561581957600080fd5b505af115801561582d573d6000803e3d6000fd5b505050506040513d602081101561584357600080fd5b8101908080519060200190929190505050905092915050565b6000615869838333613f1b565b6001905092915050565b600061588184848433614627565b600190509392505050565b60008060008414156158a157600091506158c0565b82840290508284828115156158b257fe5b041415156158bc57fe5b8091505b5092915050565b60008082848115156158d557fe5b0490508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561591e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561595a57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015615a1757600080fd5b505af1158015615a2b573d6000803e3d6000fd5b505050506040513d6020811015615a4157600080fd5b81019080805190602001909291905050508111151515615a6057600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf8eeb7e84836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015615b2557600080fd5b505af1158015615b39573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166321e5383a83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015615c0257600080fd5b505af1158015615c16573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a46ec8285836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015615d7557600080fd5b505af1158015615d89573d6000803e3d6000fd5b505050506040513d6020811015615d9f57600080fd5b81019080805190602001909291905050508211151515615dbe57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397d88cd28583856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015615eb757600080fd5b505af1158015615ecb573d6000803e3d6000fd5b50505050615eda848484615181565b50505050565b6000615eed838333614c8a565b6001905092915050565b6000615f04338484615181565b6001905092915050565b6000615f1b83833361473d565b6001905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615f6657805160ff1916838001178555615f94565b82800160010185558215615f94579182015b82811115615f93578251825591602001919060010190615f78565b5b509050615fa19190615fa5565b5090565b615fc791905b80821115615fc3576000816000905550600101615fab565b5090565b905600a165627a7a723058206eee5f073d8a7fb670f9b3d0ba80c40384c3e595a6c97298d0eef90a7505b8530029"
}