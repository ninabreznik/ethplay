{
  "address": "0x186e20c062529d65bff63bf4adb56665923d4dd2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GSCP",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-05\n*/\n\npragma solidity 0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\n\nlibrary SafeMath \n{\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n\n  function mul(uint256 a, uint256 b) internal pure returns(uint256 c) \n  {\n     if (a == 0) \n     {\n     \treturn 0;\n     }\n     c = a * b;\n     require(c / a == b);\n     return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n\n  function div(uint256 a, uint256 b) internal pure returns(uint256) \n  {\n     return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) \n  {\n     require(b <= a);\n     return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n\n  function add(uint256 a, uint256 b) internal pure returns(uint256 c) \n  {\n     c = a + b;\n     require(c >= a);\n     return c;\n  }\n}\n\ncontract ERC20\n{\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address _who) public view returns (uint256);\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function allowance(address _owner, address _spender) public view returns (uint256);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\n/**\n * @title Basic token\n */\n\ncontract GSCP is ERC20\n{\n    using SafeMath for uint256;\n   \n    uint256 constant public TOKEN_DECIMALS = 10 ** 18;\n    string public constant name            = \"Genesis Supply Chain Platform\";\n    string public constant symbol          = \"GSCP\";\n    uint256 public constant totalTokens    = 999999999;\n    uint256 public totalTokenSupply        = totalTokens.mul(TOKEN_DECIMALS);\n    uint8 public constant decimals         = 18;\n    address public owner;\n\n    struct AdvClaimLimit \n    {\n        uint256     time_limit_epoch;\n        uint256     last_claim_time;\n        uint256[3]  tokens;\n        uint8       round;\n        bool        limitSet;\n    }\n\n    struct TeamClaimLimit \n    {\n        uint256     time_limit_epoch;\n        uint256     last_claim_time;\n        uint256[4]  tokens;\n        uint8       round;\n        bool        limitSet;\n    }\n\n    struct ClaimLimit \n    {\n       uint256 time_limit_epoch;\n       uint256 last_claim_time;\n       uint256 tokens;\n       bool    limitSet;\n    }\n\n    event Burn(address indexed _burner, uint256 _value);\n\n    /** mappings **/ \n    mapping(address => uint256) public  balances;\n    mapping(address => mapping(address => uint256)) internal  allowed;\n    mapping(address => AdvClaimLimit)  advClaimLimits;\n    mapping(address => TeamClaimLimit) teamClaimLimits;\n    mapping(address => ClaimLimit) claimLimits;\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n\n    modifier onlyOwner() \n    {\n       require(msg.sender == owner);\n       _;\n    }\n    \n    /** constructor **/\n\n    constructor() public\n    {\n       owner = msg.sender;\n       balances[address(this)] = totalTokenSupply;\n       emit Transfer(address(0x0), address(this), balances[address(this)]);\n    }\n\n    /**\n     * @dev Burn specified number of GSCP tokens\n     * This function will be called once after all remaining tokens are transferred from\n     * smartcontract to owner wallet\n     */\n\n     function burn(uint256 _value) onlyOwner public returns (bool) \n     {\n        require(_value <= balances[msg.sender]);\n\n        address burner = msg.sender;\n\n        balances[burner] = balances[burner].sub(_value);\n        totalTokenSupply = totalTokenSupply.sub(_value);\n\n        emit Burn(burner, _value);\n        return true;\n     }     \n\n     /**\n      * @dev total number of tokens in existence\n      */\n\n     function totalSupply() public view returns(uint256 _totalSupply) \n     {\n        _totalSupply = totalTokenSupply;\n        return _totalSupply;\n     }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of. \n     * @return An uint256 representing the amount owned by the passed address.\n     */\n\n    function balanceOf(address _owner) public view returns (uint256) \n    {\n       return balances[_owner];\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amout of tokens to be transfered\n     */\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)     \n    {\n       if (_value == 0) \n       {\n           emit Transfer(_from, _to, _value);  // Follow the spec to launch the event when value is equal to 0\n           return;\n       }\n\n       require(!advClaimLimits[msg.sender].limitSet, \"Limit is set and use advClaim\");\n       require(!teamClaimLimits[msg.sender].limitSet, \"Limit is set and use teamClaim\");\n       require(!claimLimits[msg.sender].limitSet, \"Limit is set and use claim\");\n       require(_to != address(0x0));\n       require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value >= 0);\n\n       balances[_from] = balances[_from].sub(_value);\n       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n       balances[_to] = balances[_to].add(_value);\n       emit Transfer(_from, _to, _value);\n       return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    *\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _tokens The amount of tokens to be spent.\n    */\n\n    function approve(address _spender, uint256 _tokens) public returns(bool)\n    {\n       require(_spender != address(0x0));\n\n       allowed[msg.sender][_spender] = _tokens;\n       emit Approval(msg.sender, _spender, _tokens);\n       return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n     */\n\n    function allowance(address _owner, address _spender) public view returns(uint256)\n    {\n       require(_owner != address(0x0) && _spender != address(0x0));\n\n       return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _address The address to transfer to.\n    * @param _tokens The amount to be transferred.\n    */\n\n    function transfer(address _address, uint256 _tokens) public returns(bool)\n    {\n       if (_tokens == 0) \n       {\n           emit Transfer(msg.sender, _address, _tokens);  // Follow the spec to launch the event when tokens are equal to 0\n           return;\n       }\n\n       require(!advClaimLimits[msg.sender].limitSet, \"Limit is set and use advClaim\");\n       require(!teamClaimLimits[msg.sender].limitSet, \"Limit is set and use teamClaim\");\n       require(!claimLimits[msg.sender].limitSet, \"Limit is set and use claim\");\n       require(_address != address(0x0));\n       require(balances[msg.sender] >= _tokens);\n\n       balances[msg.sender] = (balances[msg.sender]).sub(_tokens);\n       balances[_address] = (balances[_address]).add(_tokens);\n       emit Transfer(msg.sender, _address, _tokens);\n       return true;\n    }\n    \n    /**\n    * @dev transfer token from smart contract to another account, only by owner\n    * @param _address The address to transfer to.\n    * @param _tokens The amount to be transferred.\n    */\n\n    function transferTo(address _address, uint256 _tokens) external onlyOwner returns(bool) \n    {\n       require( _address != address(0x0)); \n       require( balances[address(this)] >= _tokens.mul(TOKEN_DECIMALS) && _tokens.mul(TOKEN_DECIMALS) > 0);\n\n       balances[address(this)] = ( balances[address(this)]).sub(_tokens.mul(TOKEN_DECIMALS));\n       balances[_address] = (balances[_address]).add(_tokens.mul(TOKEN_DECIMALS));\n       emit Transfer(address(this), _address, _tokens.mul(TOKEN_DECIMALS));\n       return true;\n    }\n\t\n    /**\n    * @dev transfer ownership of this contract, only by owner\n    * @param _newOwner The address of the new owner to transfer ownership\n    */\n\n    function transferOwnership(address _newOwner)public onlyOwner\n    {\n       require( _newOwner != address(0x0));\n\n       balances[_newOwner] = (balances[_newOwner]).add(balances[owner]);\n       balances[owner] = 0;\n       owner = _newOwner;\n       emit Transfer(msg.sender, _newOwner, balances[_newOwner]);\n   }\n\n   /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender\n   */\n\n   function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) \n   {\n      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n   }\n\n   /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender\n   */\n\n   function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) \n   {\n      uint256 oldValue = allowed[msg.sender][_spender];\n\n      if (_subtractedValue > oldValue) \n      {\n         allowed[msg.sender][_spender] = 0;\n      }\n      else \n      {\n         allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n      }\n      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n   }\n\n   /**\n    * @dev Transfer adviser tokens to another account, time and percent limit apply.\n    */\n\n   function adviserClaim(address _recipient) public\n   {\n      require(_recipient != address(0x0), \"Invalid recipient\");\n      require(msg.sender != _recipient, \"Self transfer\");\n      require(advClaimLimits[msg.sender].limitSet, \"Limit not set\");\n      require(advClaimLimits[msg.sender].round < 3, \"Claims are over for this adviser wallet\");\n      \n      if (advClaimLimits[msg.sender].last_claim_time > 0) {\n        require (now > ((advClaimLimits[msg.sender].last_claim_time).add \n           (advClaimLimits[msg.sender].time_limit_epoch)), \"Time limit\");\n      }\n       \n       uint256 tokens = advClaimLimits[msg.sender].tokens[advClaimLimits[msg.sender].round];\n       if (balances[msg.sender] < tokens)\n            tokens = balances[msg.sender];\n        \n       if (tokens == 0) {\n           emit Transfer(msg.sender, _recipient, tokens);\n           return;\n       }\n       \n       balances[msg.sender] = (balances[msg.sender]).sub(tokens);\n       balances[_recipient] = (balances[_recipient]).add(tokens);\n       \n       // update last claim time\n       advClaimLimits[msg.sender].last_claim_time = now;\n       advClaimLimits[msg.sender].round++;\n       emit Transfer(msg.sender, _recipient, tokens);\n   }\n \n   /**\n    * @dev Set limit on a claim per adviser address\n    */\n\n   function setAdviserClaimLimit(address _addr) public onlyOwner\n   {\n      uint256 num_days  = 90;  // 3 Months lock-in\n      uint256 percent   = 25;  \n      uint256 percent1  = 25;  \n      uint256 percent2  = 50;  \n\n      require(_addr != address(0x0), \"Invalid address\");\n\n      advClaimLimits[_addr].time_limit_epoch = (now.add(((num_days).mul(1 minutes)))).sub(now);\n      advClaimLimits[_addr].last_claim_time  = 0;\n\n      if (balances[_addr] > 0) \n      {\n          advClaimLimits[_addr].tokens[0] = ((balances[_addr]).mul(percent)).div(100);\n          advClaimLimits[_addr].tokens[1] = ((balances[_addr]).mul(percent1)).div(100);\n          advClaimLimits[_addr].tokens[2] = ((balances[_addr]).mul(percent2)).div(100);\n      }    \n      else \n      {\n          advClaimLimits[_addr].tokens[0] = 0;\n   \t  advClaimLimits[_addr].tokens[1] = 0;\n   \t  advClaimLimits[_addr].tokens[2] = 0;\n      }    \n      \n      advClaimLimits[_addr].round = 0;\n      advClaimLimits[_addr].limitSet = true;\n   }\n\n   /**\n    * @dev Transfer team tokens to another account, time and percent limit apply.\n    */\n\n   function teamClaim(address _recipient) public\n   {\n      require(_recipient != address(0x0), \"Invalid recipient\");\n      require(msg.sender != _recipient, \"Self transfer\");\n      require(teamClaimLimits[msg.sender].limitSet, \"Limit not set\");\n      require(teamClaimLimits[msg.sender].round < 4, \"Claims are over for this team wallet\");\n      \n      if (teamClaimLimits[msg.sender].last_claim_time > 0) {\n        require (now > ((teamClaimLimits[msg.sender].last_claim_time).add \n           (teamClaimLimits[msg.sender].time_limit_epoch)), \"Time limit\");\n      }\n       \n       uint256 tokens = teamClaimLimits[msg.sender].tokens[teamClaimLimits[msg.sender].round];\n       if (balances[msg.sender] < tokens)\n            tokens = balances[msg.sender];\n        \n       if (tokens == 0) {\n           emit Transfer(msg.sender, _recipient, tokens);\n           return;\n       }\n       \n       balances[msg.sender] = (balances[msg.sender]).sub(tokens);\n       balances[_recipient] = (balances[_recipient]).add(tokens);\n       \n       // update last claim time\n       teamClaimLimits[msg.sender].last_claim_time = now;\n       teamClaimLimits[msg.sender].round++;\n       emit Transfer(msg.sender, _recipient, tokens);\n   }\n \n   /**\n    * @dev Set limit on a claim per team member address\n    */\n\n   function setTeamClaimLimit(address _addr) public onlyOwner\n   {\n      uint256 num_days  = 180;  // 6 Months lock-in\n      uint256 percent   = 10;  \n      uint256 percent1  = 15;  \n      uint256 percent2  = 35;  \n      uint256 percent3  = 40;  \n\n      require(_addr != address(0x0), \"Invalid address\");\n\n      teamClaimLimits[_addr].time_limit_epoch = (now.add(((num_days).mul(1 minutes)))).sub(now);\n      teamClaimLimits[_addr].last_claim_time  = 0;\n\n      if (balances[_addr] > 0) \n      {\n          teamClaimLimits[_addr].tokens[0] = ((balances[_addr]).mul(percent)).div(100);\n          teamClaimLimits[_addr].tokens[1] = ((balances[_addr]).mul(percent1)).div(100);\n          teamClaimLimits[_addr].tokens[2] = ((balances[_addr]).mul(percent2)).div(100);\n          teamClaimLimits[_addr].tokens[3] = ((balances[_addr]).mul(percent3)).div(100);\n      }    \n      else \n      {\n          teamClaimLimits[_addr].tokens[0] = 0;\n   \t      teamClaimLimits[_addr].tokens[1] = 0;\n   \t      teamClaimLimits[_addr].tokens[2] = 0;\n   \t      teamClaimLimits[_addr].tokens[3] = 0;\n      }    \n      \n      teamClaimLimits[_addr].round = 0;\n      teamClaimLimits[_addr].limitSet = true;\n    }\n\n    /**\n    * @dev Transfer tokens to another account, time and percent limit apply\n    */\n\n    function claim(address _recipient) public\n    {\n       require(_recipient != address(0x0), \"Invalid recipient\");\n       require(msg.sender != _recipient, \"Self transfer\");\n       require(claimLimits[msg.sender].limitSet, \"Limit not set\");\n       \n       if (claimLimits[msg.sender].last_claim_time > 0) \n       {\n          require (now > ((claimLimits[msg.sender].last_claim_time).\n            add(claimLimits[msg.sender].time_limit_epoch)), \"Time limit\");\n       }\n       \n       uint256 tokens = claimLimits[msg.sender].tokens;\n\n       if (balances[msg.sender] < tokens)\n            tokens = balances[msg.sender];\n        \n       if (tokens == 0) \n       {\n            emit Transfer(msg.sender, _recipient, tokens);\n            return;\n       }\n       \n       balances[msg.sender] = (balances[msg.sender]).sub(tokens);\n       balances[_recipient] = (balances[_recipient]).add(tokens);\n       \n       // update last claim time\n       claimLimits[msg.sender].last_claim_time = now;\n       \n       emit Transfer(msg.sender, _recipient, tokens);\n    }\n \n\n    /**\n    * @dev Set limit on a claim per address\n    */\n\n    function setClaimLimit(address _address, uint256 _days, uint256 _percent) public onlyOwner\n    {\n       require(_percent <= 100, \"Invalid percent\");\n\n       claimLimits[_address].time_limit_epoch = (now.add(((_days).mul(1 minutes)))).sub(now);\n       claimLimits[_address].last_claim_time  = 0;\n   \t\t\n       if (balances[_address] > 0)\n   \t      claimLimits[_address].tokens = ((balances[_address]).mul(_percent)).div(100);\n       else\n   \t      claimLimits[_address].tokens = 0;\n   \t\t    \n       claimLimits[_address].limitSet = true;\n    }\n\n   \n\n}",
  "bytecode": "608060405262000033670de0b6b3a7640000633b9ac9ff620001766401000000000262004c3a179091906401000000009004565b6000553480156200004357600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600054600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3620001b5565b6000808314156200018b5760009050620001af565b81830290508183828115156200019d57fe5b04141515620001ab57600080fd5b8090505b92915050565b614cb780620001c56000396000f300608060405260043610610149576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461014e578063095ea7b3146101de57806318160ddd146102435780631ca8b6cb1461026e5780631e83409a1461029957806323b872dd146102dc57806327e235e31461036157806328f5bdbf146103b85780632ccb1b30146103fb578063313ce5671461046057806342966c68146104915780635b7f415c146104d6578063661884631461050157806370a08231146105665780637e1c0c09146105bd5780638da5cb5b146105e857806395d89b411461063f5780639949f0dd146106cf578063a9059cbb14610712578063abb548a214610777578063adbbf8fb146107ce578063d73dd62314610811578063dd62ed3e14610876578063e7db0be9146108ed578063f2fde38b14610930575b600080fd5b34801561015a57600080fd5b50610163610973565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a3578082015181840152602081019050610188565b50505050905090810190601f1680156101d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ea57600080fd5b50610229600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109ac565b604051808215151515815260200191505060405180910390f35b34801561024f57600080fd5b50610258610ad9565b6040518082815260200191505060405180910390f35b34801561027a57600080fd5b50610283610ae5565b6040518082815260200191505060405180910390f35b3480156102a557600080fd5b506102da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aeb565b005b3480156102e857600080fd5b50610347600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061116f565b604051808215151515815260200191505060405180910390f35b34801561036d57600080fd5b506103a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117fb565b6040518082815260200191505060405180910390f35b3480156103c457600080fd5b506103f9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611813565b005b34801561040757600080fd5b50610446600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e2f565b604051808215151515815260200191505060405180910390f35b34801561046c57600080fd5b5061047561213e565b604051808260ff1660ff16815260200191505060405180910390f35b34801561049d57600080fd5b506104bc60048036038101908080359060200190929190505050612143565b604051808215151515815260200191505060405180910390f35b3480156104e257600080fd5b506104eb6122fb565b6040518082815260200191505060405180910390f35b34801561050d57600080fd5b5061054c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612307565b604051808215151515815260200191505060405180910390f35b34801561057257600080fd5b506105a7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612598565b6040518082815260200191505060405180910390f35b3480156105c957600080fd5b506105d26125e1565b6040518082815260200191505060405180910390f35b3480156105f457600080fd5b506105fd6125e9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064b57600080fd5b5061065461260f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610694578082015181840152602081019050610679565b50505050905090810190601f1680156106c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106db57600080fd5b50610710600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612648565b005b34801561071e57600080fd5b5061075d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612e8e565b604051808215151515815260200191505060405180910390f35b34801561078357600080fd5b506107cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050613375565b005b3480156107da57600080fd5b5061080f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506136b1565b005b34801561081d57600080fd5b5061085c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613de5565b604051808215151515815260200191505060405180910390f35b34801561088257600080fd5b506108d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613fe1565b6040518082815260200191505060405180910390f35b3480156108f957600080fd5b5061092e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506140dc565b005b34801561093c57600080fd5b50610971600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614922565b005b6040805190810160405280601d81526020017f47656e6573697320537570706c7920436861696e20506c6174666f726d00000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156109e957600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905080905090565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610b91576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c696420726563697069656e7400000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610c35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f53656c66207472616e736665720000000000000000000000000000000000000081525060200191505060405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff161515610cf9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4c696d6974206e6f74207365740000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541115610e5257610ddb600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154614bff90919063ffffffff16565b42111515610e51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f54696d65206c696d69740000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610f2157600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b6000811415610f94578173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a361116b565b610fe681600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c1e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061107b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614bff90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b6000808214156111e3578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36117f4565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff161515156112a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4c696d69742069732073657420616e642075736520616476436c61696d00000081525060200191505060405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160019054906101000a900460ff1615151561136d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4c696d69742069732073657420616e6420757365207465616d436c61696d000081525060200191505060405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16151515611432576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4c696d69742069732073657420616e642075736520636c61696d00000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561146e57600080fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611539575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015611546575060008210155b151561155157600080fd5b6115a382600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c1e90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061167582600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c1e90919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061174782600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614bff90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b60026020528060005260406000206000915090505481565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561187557600080fd5b605a9350601992506019915060329050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415151561192a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b61196242611954611945603c88614c3a90919063ffffffff16565b42614bff90919063ffffffff16565b614c1e90919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611c6b57611a9d6064611a8f85600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c3a90919063ffffffff16565b614c7590919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000600381101515611aed57fe5b0181905550611b576064611b4984600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c3a90919063ffffffff16565b614c7590919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016001600381101515611ba757fe5b0181905550611c116064611c0383600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c3a90919063ffffffff16565b614c7590919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016002600381101515611c6157fe5b0181905550611d71565b6000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000600381101515611cbd57fe5b01819055506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016001600381101515611d1457fe5b01819055506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016002600381101515611d6b57fe5b01819055505b6000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160006101000a81548160ff021916908360ff1602179055506001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160016101000a81548160ff0219169083151502179055505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e8d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611ec957600080fd5b611ee4670de0b6b3a764000083614c3a90919063ffffffff16565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611f4c57506000611f4a670de0b6b3a764000084614c3a90919063ffffffff16565b115b1515611f5757600080fd5b611fc3611f75670de0b6b3a764000084614c3a90919063ffffffff16565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c1e90919063ffffffff16565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612072612024670de0b6b3a764000084614c3a90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614bff90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61211f670de0b6b3a764000086614c3a90919063ffffffff16565b6040518082815260200191505060405180910390a36001905092915050565b601281565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121a257600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156121f057600080fd5b33905061224583600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c1e90919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061229d83600054614c1e90919063ffffffff16565b6000819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5846040518082815260200191505060405180910390a26001915050919050565b670de0b6b3a764000081565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115612418576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506124ac565b61242b8382614c1e90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b633b9ac9ff81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600481526020017f475343500000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156126ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c696420726563697069656e7400000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515612792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f53656c66207472616e736665720000000000000000000000000000000000000081525060200191505060405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff161515612856576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4c696d6974206e6f74207365740000000000000000000000000000000000000081525060200191505060405180910390fd5b6003600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff1660ff16101515612946576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f436c61696d7320617265206f76657220666f722074686973206164766973657281526020017f2077616c6c65740000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541115612a9f57612a28600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154614bff90919063ffffffff16565b42111515612a9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f54696d65206c696d69740000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff1660ff16600381101515612b4057fe5b0154905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612bce57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b6000811415612c41578173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3612e8a565b612c9381600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c1e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d2881600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614bff90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b600080821415612f02578273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a361336f565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160019054906101000a900460ff16151515612fc7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4c696d69742069732073657420616e642075736520616476436c61696d00000081525060200191505060405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160019054906101000a900460ff1615151561308c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4c696d69742069732073657420616e6420757365207465616d436c61696d000081525060200191505060405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16151515613151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4c696d69742069732073657420616e642075736520636c61696d00000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561318d57600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156131db57600080fd5b61322d82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c1e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506132c282600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614bff90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156133d157600080fd5b6064811115151561344a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e76616c69642070657263656e74000000000000000000000000000000000081525060200191505060405180910390fd5b61348242613474613465603c86614c3a90919063ffffffff16565b42614bff90919063ffffffff16565b614c1e90919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115613608576135bd60646135af83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c3a90919063ffffffff16565b614c7590919063ffffffff16565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550613651565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505b6001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff021916908315150217905550505050565b6000806000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561371557600080fd5b60b49450600a9350600f92506023915060289050600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156137ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b613806426137f86137e9603c89614c3a90919063ffffffff16565b42614bff90919063ffffffff16565b614c1e90919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115613bc957613941606461393386600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c3a90919063ffffffff16565b614c7590919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600060048110151561399157fe5b01819055506139fb60646139ed85600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c3a90919063ffffffff16565b614c7590919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016001600481101515613a4b57fe5b0181905550613ab56064613aa784600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c3a90919063ffffffff16565b614c7590919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016002600481101515613b0557fe5b0181905550613b6f6064613b6183600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c3a90919063ffffffff16565b614c7590919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016003600481101515613bbf57fe5b0181905550613d26565b6000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000600481101515613c1b57fe5b01819055506000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016001600481101515613c7257fe5b01819055506000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016002600481101515613cc957fe5b01819055506000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016003600481101515613d2057fe5b01819055505b6000600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160006101000a81548160ff021916908360ff1602179055506001600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160016101000a81548160ff021916908315150217905550505050505050565b6000613e7682600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614bff90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561404c5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b151561405757600080fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515614182576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c696420726563697069656e7400000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515614226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f53656c66207472616e736665720000000000000000000000000000000000000081525060200191505060405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160019054906101000a900460ff1615156142ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f4c696d6974206e6f74207365740000000000000000000000000000000000000081525060200191505060405180910390fd5b6004600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160009054906101000a900460ff1660ff161015156143da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f436c61696d7320617265206f76657220666f722074686973207465616d20776181526020017f6c6c65740000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541115614533576144bc600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154614bff90919063ffffffff16565b42111515614532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f54696d65206c696d69740000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160009054906101000a900460ff1660ff166004811015156145d457fe5b0154905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561466257600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b60008114156146d5578173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a361491e565b61472781600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614c1e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506147bc81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614bff90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601600081819054906101000a900460ff168092919060010191906101000a81548160ff021916908360ff160217905550508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561497e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156149ba57600080fd5b614a6d60026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614bff90919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b60008183019050828110151515614c1557600080fd5b80905092915050565b6000828211151515614c2f57600080fd5b818303905092915050565b600080831415614c4d5760009050614c6f565b8183029050818382811515614c5e57fe5b04141515614c6b57600080fd5b8090505b92915050565b60008183811515614c8257fe5b049050929150505600a165627a7a723058201a6c5f4651835d5a542b1e487810b01109ed9226b01dc1c744d95848705bc29f0029"
}