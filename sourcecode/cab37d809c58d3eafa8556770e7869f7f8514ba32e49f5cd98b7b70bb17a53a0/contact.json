{
  "address": "0xe15afbffadd3e4606fcf41492c60b99be1c30ceb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "customIcoToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-29\n*/\n\npragma solidity 0.4.24;\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract customIcoToken{\n    using SafeMath for uint256;\n\n    /* Events */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event LogRefund(address indexed _to, uint256 _value);\n    event CreateToken(address indexed _to, uint256 _value);\n\n    // metadata\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n\n    // contracts\n    address public ethFundDeposit;      // deposit address for ETH\n    address public tokenFundDeposit;\n\n    // crowdsale parameters\n    bool public isFinalized;              // switched to true in operational state\n    uint256 public fundingStartBlock;\n    uint256 public fundingEndBlock;\n    uint256 public tokenFund;\n    uint256 public tokenExchangeRate;\n    uint256 public tokenCreationCap;\n    uint256 public tokenCreationMin;\n\n    /* Storage */\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    uint256 public totalSupply;\n\n    /* Getters */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /* Methods */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n  }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n    }\n\n    /* Crowdsale methods */\n\n    /// @dev Accepts ether and creates new tokens.\n    function createTokens() payable external {\n      require (isFinalized == false);\n      require(block.number > fundingStartBlock);\n      require(block.number < fundingEndBlock);\n      require(msg.value > 0);\n\n      uint256 tokens = msg.value.mul(tokenExchangeRate);\n      uint256 checkedSupply = totalSupply.add(tokens);\n\n      // return money if something goes wrong\n      require(tokenCreationCap >= checkedSupply); // odd fractions won't be found\n\n      totalSupply = checkedSupply;\n      balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\n      emit CreateToken(msg.sender, tokens);  // logs token creation\n    }\n\n    /// @dev Ends the funding period and sends the ETH home\n    function finalize() external {\n      require(isFinalized == false);\n      require(msg.sender == ethFundDeposit);\n      require(totalSupply > tokenCreationMin); // have to sell minimum to move to operational\n      require(block.number > fundingEndBlock || totalSupply == tokenCreationCap);\n      // move to operational\n      isFinalized = true;\n      assert(ethFundDeposit.send(address(this).balance)); // send the eth\n    }\n\n    /// @dev Allows contributors to recover their ether in the case of a failed funding campaign.\n    function refund() external {\n      require(isFinalized == false);                       // prevents refund if operational\n      require(block.number > fundingEndBlock); // prevents refund until sale period is over\n      require(totalSupply < tokenCreationMin); // no refunds if we sold enough\n      require(msg.sender != tokenFundDeposit);    // team not entitled to a refund\n      uint256 tokenVal = balances[msg.sender];\n      require(tokenVal > 0);\n      balances[msg.sender] = 0;\n      totalSupply = totalSupply.sub(tokenVal); // extra safe\n      uint256 ethVal = tokenVal / tokenExchangeRate; // should be safe; previous throws covers edges\n      emit LogRefund(msg.sender, ethVal); // log it\n      assert(msg.sender.send(ethVal)); // if you're using a contract; make sure it works with .send gas limits\n    }\n\n    constructor(\n        string _name,\n        string _symbol,\n        uint8 _decimals,\n        address _ethFundDeposit,\n        address _tokenFundDeposit,\n        uint256 _tokenFund,\n        uint256 _tokenExchangeRate,\n        uint256 _tokenCreationCap,\n        uint256 _tokenCreationMin,\n        uint256 _fundingStartBlock,\n        uint256 _fundingEndBlock) public\n    {\n      name = _name;\n      symbol = _symbol;\n      decimals = _decimals;\n      isFinalized = false;                   //controls pre through crowdsale state\n      ethFundDeposit = _ethFundDeposit;\n      tokenFundDeposit = _tokenFundDeposit;\n      tokenFund = _tokenFund*10**decimals;\n      tokenExchangeRate = _tokenExchangeRate;\n      tokenCreationCap = _tokenCreationCap*10**decimals;\n      tokenCreationMin = _tokenCreationMin*10**decimals;\n      fundingStartBlock = _fundingStartBlock;\n      fundingEndBlock = _fundingEndBlock;\n      totalSupply = tokenFund;\n      balances[tokenFundDeposit] = tokenFund;\n      emit CreateToken(tokenFundDeposit, tokenFund);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051610f2a380380610f2a8339810160409081528151602080840151928401516060850151608086015160a087015160c088015160e08901516101008a01516101208b01516101408c0151998c018051909c9b909b019a97999698959794969395929491939092909161008b91600091908e0190610169565b50895161009f9060019060208d0190610169565b5060ff891660028190556004805460038054600160a060020a031916600160a060020a038d811691909117909155600160a860020a03199091168a821617808355600a93840a8a8102600781905560088b905589820260095590880290945560058690556006859055600d84905581166000908152600b60209081526040918290208590559254815194855290519116927fb378e89b40ac5bbe0e2241b596fbe1adc3cf1fb7c982aa1b4560165cf264ee9392908290030190a25050505050505050505050610204565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101aa57805160ff19168380011785556101d7565b828001600101855582156101d7579182015b828111156101d75782518255916020019190600101906101bc565b506101e39291506101e7565b5090565b61020191905b808211156101e357600081556001016101ed565b90565b610d17806102136000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610137578063095ea7b3146101c157806318160ddd146101f957806323b872dd14610220578063313ce5671461024a5780633d2d82631461025f5780634172d080146102745780634bb278f314610289578063590e1ae3146102a057806366188463146102b55780636f7920fd146102d957806370a08231146102ee5780638d4e40831461030f57806391b43d131461032457806395d89b41146103395780639a0750d51461034e578063a81c3bdf1461037f578063a9059cbb14610394578063b4427263146103b8578063c039daf6146103c0578063d648a647146103d5578063d73dd623146103ea578063dd62ed3e1461040e575b600080fd5b34801561014357600080fd5b5061014c610435565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018657818101518382015260200161016e565b50505050905090810190601f1680156101b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101cd57600080fd5b506101e5600160a060020a03600435166024356104c3565b604080519115158252519081900360200190f35b34801561020557600080fd5b5061020e61052a565b60408051918252519081900360200190f35b34801561022c57600080fd5b506101e5600160a060020a0360043581169060243516604435610530565b34801561025657600080fd5b5061020e6106a9565b34801561026b57600080fd5b5061020e6106af565b34801561028057600080fd5b5061020e6106b5565b34801561029557600080fd5b5061029e6106bb565b005b3480156102ac57600080fd5b5061029e61076e565b3480156102c157600080fd5b506101e5600160a060020a036004351660243561087c565b3480156102e557600080fd5b5061020e61096c565b3480156102fa57600080fd5b5061020e600160a060020a0360043516610972565b34801561031b57600080fd5b506101e561098d565b34801561033057600080fd5b5061020e61099d565b34801561034557600080fd5b5061014c6109a3565b34801561035a57600080fd5b506103636109fd565b60408051600160a060020a039092168252519081900360200190f35b34801561038b57600080fd5b50610363610a0c565b3480156103a057600080fd5b506101e5600160a060020a0360043516602435610a1b565b61029e610afe565b3480156103cc57600080fd5b5061020e610bd3565b3480156103e157600080fd5b5061020e610bd9565b3480156103f657600080fd5b506101e5600160a060020a0360043516602435610bdf565b34801561041a57600080fd5b5061020e600160a060020a0360043581169060243516610c78565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104bb5780601f10610490576101008083540402835291602001916104bb565b820191906000526020600020905b81548152906001019060200180831161049e57829003601f168201915b505050505081565b336000818152600c60209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b600d5490565b6000600160a060020a038316151561054757600080fd5b600160a060020a0384166000908152600b602052604090205482111561056c57600080fd5b600160a060020a0384166000908152600c6020908152604080832033845290915290205482111561059c57600080fd5b600160a060020a0384166000908152600b60205260409020546105c5908363ffffffff610ca316565b600160a060020a038086166000908152600b602052604080822093909355908516815220546105fa908363ffffffff610cb516565b600160a060020a038085166000908152600b60209081526040808320949094559187168152600c8252828120338252909152205461063e908363ffffffff610ca316565b600160a060020a038086166000818152600c6020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60025481565b60075481565b60085481565b60045460a060020a900460ff16156106d257600080fd5b600354600160a060020a031633146106e957600080fd5b600a54600d54116106f957600080fd5b60065443118061070c5750600954600d54145b151561071757600080fd5b6004805474ff0000000000000000000000000000000000000000191660a060020a179055600354604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050151561076c57fe5b565b600454600090819060a060020a900460ff161561078a57600080fd5b600654431161079857600080fd5b600a54600d54106107a857600080fd5b600454600160a060020a03163314156107c057600080fd5b336000908152600b6020526040812054925082116107dd57600080fd5b336000908152600b6020526040812055600d54610800908363ffffffff610ca316565b600d556008548281151561081057fe5b04905033600160a060020a03167fb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7826040518082815260200191505060405180910390a2604051339082156108fc029083906000818181858888f19350505050151561087857fe5b5050565b336000908152600c60209081526040808320600160a060020a0386168452909152812054808311156108d157336000908152600c60209081526040808320600160a060020a0388168452909152812055610906565b6108e1818463ffffffff610ca316565b336000908152600c60209081526040808320600160a060020a03891684529091529020555b336000818152600c60209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60095481565b600160a060020a03166000908152600b602052604090205490565b60045460a060020a900460ff1681565b60065481565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104bb5780601f10610490576101008083540402835291602001916104bb565b600454600160a060020a031681565b600354600160a060020a031681565b6000600160a060020a0383161515610a3257600080fd5b336000908152600b6020526040902054821115610a4e57600080fd5b336000908152600b6020526040902054610a6e908363ffffffff610ca316565b336000908152600b602052604080822092909255600160a060020a03851681522054610aa0908363ffffffff610cb516565b600160a060020a0384166000818152600b60209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600454600090819060a060020a900460ff1615610b1a57600080fd5b6005544311610b2857600080fd5b6006544310610b3657600080fd5b60003411610b4357600080fd5b600854610b5790349063ffffffff610cc216565b600d54909250610b6d908363ffffffff610cb516565b90508060095410151515610b8057600080fd5b600d819055336000818152600b6020908152604091829020805486019055815185815291517fb378e89b40ac5bbe0e2241b596fbe1adc3cf1fb7c982aa1b4560165cf264ee939281900390910190a25050565b600a5481565b60055481565b336000908152600c60209081526040808320600160a060020a0386168452909152812054610c13908363ffffffff610cb516565b336000818152600c60209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a039182166000908152600c6020908152604080832093909416825291909152205490565b600082821115610caf57fe5b50900390565b8181018281101561052457fe5b6000821515610cd357506000610524565b50818102818382811515610ce357fe5b041461052457fe00a165627a7a723058203539fcd7906779bebfa61dec4b6fa5bdfe2ec2b47d0e75d571daaa5b895f04320029000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000c7ae6cf62b398e29859df8c80dd0471ba4c882430000000000000000000000003edc3087e5960ba137b0a5abb7ffb76999c26cc90000000000000000000000000000000000000000000000000000000011e1a30000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000006d2e81000000000000000000000000000000000000000000000000000000000081b320000000000000000000000000000000000000000000000000000000000000000943727970746c6f697400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434c455800000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000c7ae6cf62b398e29859df8c80dd0471ba4c882430000000000000000000000003edc3087e5960ba137b0a5abb7ffb76999c26cc90000000000000000000000000000000000000000000000000000000011e1a30000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000000000006d2e81000000000000000000000000000000000000000000000000000000000081b320000000000000000000000000000000000000000000000000000000000000000943727970746c6f697400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434c455800000000000000000000000000000000000000000000000000000000"
}