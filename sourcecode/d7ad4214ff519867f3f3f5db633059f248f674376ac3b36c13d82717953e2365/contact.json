{
  "address": "0x3f2b9e1ae008aa43e68b882f8d0440d25432c7e4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WIACToken",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-20\n*/\n\npragma solidity ^0.5.1;\n\ncontract SafeMath {\n    // Overflow protected math functions\n\n    /**\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x + _y;\n        require(z >= _x);        //assert(z >= _x);\n        return z;\n    }\n\n    /**\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        require(_x >= _y);        //assert(_x >= _y);\n        return _x - _y;\n    }\n\n    /**\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x * _y;\n        require(_x == 0 || z / _x == _y);        //assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n\t\n\tfunction safeDiv(uint256 _x, uint256 _y)internal pure returns (uint256){\n\t    // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return _x / _y;\n\t}\n\t\n\tfunction ceilDiv(uint256 _x, uint256 _y)internal pure returns (uint256){\n\t\treturn (_x + _y - 1) / _y;\n\t}\n}\n\n\ncontract Sqrt {\n\tfunction sqrt(uint x)public pure returns(uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\ncontract WIACToken is SafeMath {\n\tmapping (address => uint256) balances;\n\taddress public owner = 0x9E94c8B22a4b60e8c017a245CDEb48b66497C4CB;\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n\t// total amount of tokens\n    uint256 public totalSupply;\n    \n\t// `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    constructor() public {\n        uint256 initialSupply = 360000000;\n        \n        totalSupply = initialSupply * 10 ** uint256(decimals);\n        balances[owner] = totalSupply;\n        name = \"WaldenGoton International Asset Chain\";\n        symbol = \"WIAC\";\n    }\n\t\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n\t\t return balances[_owner];\n\t}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n\t    require(_value > 0 );                                          // Check send token value > 0;\n\t\trequire(balances[msg.sender] >= _value);                       // Check if the sender has enough\n        require(balances[_to] + _value > balances[_to]);               // Check for overflows\t\t\t\t\t\t\t\t\t\t\t\n    \tbalances[msg.sender] = safeSub(balances[msg.sender], _value);  // Subtract from the sender\n\t\tbalances[_to]  = safeAdd(balances[_to], _value);               // Add the same to the recipient                       \n\t\n\t\temit Transfer(msg.sender, _to, _value); \t\t\t       // Notify anyone listening that this transfer took place\n\t\treturn true;      \n\t}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t  \n\t    require(balances[_from] >= _value);                 // Check if the sender has enough\n        require(balances[_to] + _value >= balances[_to]);   // Check for overflows\n        require(_value <= allowed[_from][msg.sender]);      // Check allowance\n        balances[_from] = safeSub(balances[_from], _value);  // Subtract from the sender\n        balances[_to] = safeAdd(balances[_to], _value);      // Add the same to the recipient\n       \n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n        \n        emit Transfer(_from, _to, _value);\n        return true;\n\t}\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n\t\trequire(balances[msg.sender] >= _value);\n\t\tallowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t\n\t}\n\t\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n\t}\n\t\n\t/* This unnamed function is called whenever someone tries to send ether to it */\n    function () external {\n        revert();     // Prevents accidental sending of ether\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
  "bytecode": "6080604052739e94c8b22a4b60e8c017a245cdeb48b66497c4cb600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600460006101000a81548160ff021916908360ff1602179055503480156200008257600080fd5b5060006315752a009050600460009054906101000a900460ff1660ff16600a0a8102600581905550600554600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550606060405190810160405280602581526020017f57616c64656e476f746f6e20496e7465726e6174696f6e616c2041737365742081526020017f436861696e0000000000000000000000000000000000000000000000000000008152506002908051906020019062000185929190620001db565b506040805190810160405280600481526020017f574941430000000000000000000000000000000000000000000000000000000081525060039080519060200190620001d3929190620001db565b50506200028a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200021e57805160ff19168380011785556200024f565b828001600101855582156200024f579182015b828111156200024e57825182559160200191906001019062000231565b5b5090506200025e919062000262565b5090565b6200028791905b808211156200028357600081600090555060010162000269565b5090565b90565b610f35806200029a6000396000f3fe60806040526004361061009e576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde03146100b0578063095ea7b31461014057806318160ddd146101b357806323b872dd146101de578063313ce5671461027157806370a08231146102a25780638da5cb5b1461030757806395d89b411461035e578063a9059cbb146103ee578063dd62ed3e14610461575b3480156100aa57600080fd5b50600080fd5b3480156100bc57600080fd5b506100c56104e6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101055780820151818401526020810190506100ea565b50505050905090810190601f1680156101325780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014c57600080fd5b506101996004803603604081101561016357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610584565b604051808215151515815260200191505060405180910390f35b3480156101bf57600080fd5b506101c86106c3565b6040518082815260200191505060405180910390f35b3480156101ea57600080fd5b506102576004803603606081101561020157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106c9565b604051808215151515815260200191505060405180910390f35b34801561027d57600080fd5b50610286610aba565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102ae57600080fd5b506102f1600480360360208110156102c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610acd565b6040518082815260200191505060405180910390f35b34801561031357600080fd5b5061031c610b15565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036a57600080fd5b50610373610b3b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b3578082015181840152602081019050610398565b50505050905090810190601f1680156103e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103fa57600080fd5b506104476004803603604081101561041157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610bd9565b604051808215151515815260200191505060405180910390f35b34801561046d57600080fd5b506104d06004803603604081101561048457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e45565b6040518082815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561057c5780601f106105515761010080835404028352916020019161057c565b820191906000526020600020905b81548152906001019060200180831161055f57829003601f168201915b505050505081565b6000816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156105d357600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60055481565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561071857600080fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101515156107a557600080fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561083057600080fd5b6108786000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610ecc565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109026000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610ee8565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109ca600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610ecc565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600460009054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bd15780601f10610ba657610100808354040283529160200191610bd1565b820191906000526020600020905b815481529060010190602001808311610bb457829003601f168201915b505050505081565b60008082111515610be957600080fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610c3657600080fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610cc257600080fd5b610d0a6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610ecc565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d946000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610ee8565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000818310151515610edd57600080fd5b818303905092915050565b6000808284019050838110151515610eff57600080fd5b809150509291505056fea165627a7a7230582040cdc10846ca38b10fe06983e60f946898cd6f8c0b678cc52a11e07341a7243b0029"
}