{
  "address": "0x35a4e77ae040afc9743157911d39d1451cf2f05d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TWDTToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-20\n*/\n\npragma solidity ^0.4.24;\n\n//*************** SafeMath ***************\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n//*************** Ownable *************** \n\ncontract Ownable {\n    address public owner;\n    address public admin;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyOwnerAdmin() {\n        require(msg.sender == owner || msg.sender == admin);\n        _;\n    }\n\n    function transferOwnership(address newOwner)public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n    function setAdmin(address _admin)public onlyOwner {\n        admin = _admin;\n    }\n\n}\n\n//************* ERC20 *************** \n\ncontract ERC20 {\n  \n    function balanceOf(address who)public view returns (uint256);\n    function transfer(address to, uint256 value)public returns (bool);\n    function transferFrom(address from, address to, uint256 value)public returns (bool);\n    function allowance(address owner, address spender)public view returns (uint256);\n    function approve(address spender, uint256 value)public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n//************* BlackList *************\ncontract BlackList is Ownable {\n\n    function getBlackListStatus(address _address) external view returns (bool) {\n        return isBlackListed[_address];\n    }\n\n    mapping (address => bool) public isBlackListed;\n    \n    function addBlackList(address _evilUser) public onlyOwnerAdmin {\n        isBlackListed[_evilUser] = true;\n        emit AddedBlackList(_evilUser);\n    }\n\n    function removeBlackList (address _clearedUser) public onlyOwnerAdmin {\n        isBlackListed[_clearedUser] = false;\n        emit RemovedBlackList(_clearedUser);\n    }\n\n    event AddedBlackList(address _user);\n    event RemovedBlackList(address _user);\n\n}\n\n//************* WhiteList *************\n// White list of free-of-fee.\n\ncontract WhiteList is Ownable {\n\n    function getWhiteListStatus(address _address) external view returns (bool) {\n        return isWhiteListed[_address];\n    }\n\n    mapping (address => bool) public isWhiteListed;\n    \n    function addWhiteList(address _User) public onlyOwnerAdmin {\n        isWhiteListed[_User] = true;\n        emit AddedWhiteList(_User);\n    }\n\n    function removeWhiteList(address _User) public onlyOwnerAdmin {\n        isWhiteListed[_User] = false;\n        emit RemovedWhiteList(_User);\n    }\n\n    event AddedWhiteList(address _user);\n    event RemovedWhiteList(address _user);\n\n}\n\n//************* KYC ********************\n\ncontract KYC is Ownable {\n    bool public needVerified = false;\n\n    mapping (address => bool) public verifiedAccount;\n\n    event VerifiedAccount(address target, bool Verified);\n    event Error_No_Binding_Address(address _from, address _to);\n    event OpenKYC();\n    event CloseKYC();\n\n    function openKYC() onlyOwnerAdmin public {\n        needVerified = true;\n        emit OpenKYC();\n    }\n\n    function closeKYC() onlyOwnerAdmin public {\n        needVerified = false;\n        emit CloseKYC();\n    }\n\n    function verifyAccount(address _target, bool _Verify) onlyOwnerAdmin public {\n        require(_target != address(0));\n        verifiedAccount[_target] = _Verify;\n        emit VerifiedAccount(_target, _Verify);\n    }\n\n    function checkIsKYC(address _from, address _to)public view returns (bool) {\n        return (!needVerified || (needVerified && verifiedAccount[_from] && verifiedAccount[_to]));\n    }\n}\n\n//************* TWDT Token *************\n\ncontract TWDTToken is ERC20,Ownable,KYC,BlackList,WhiteList {\n    using SafeMath for uint256;\n\n\t// Token Info.\n    string public name;\n    string public symbol;\n    uint256 public totalSupply;\n    uint256 public constant decimals = 6;\n\n    //Wallet address.\n    address public blackFundsWallet;\n    address public redeemWallet;\n    address public feeWallet;\n\n    //Transaction fees.\n    uint256 public feeRate = 0;\n    uint256 public minimumFee = 0;\n    uint256 public maximumFee = 0;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) public frozenAccountSend;\n\n    event FrozenFunds(address target, bool frozen);\n    event FrozenFundsSend(address target, bool frozen);\n    event Logs(string log);\n\n    event TransferredBlackFunds(address _blackListedUser, uint256 _balance);\n    event Redeem(uint256 amount);\n\n    event Fee(uint256 feeRate, uint256 minFee, uint256 maxFee);\n\n    constructor() public {\n        name = \"Taiwan Digital Token\";\n        symbol = \"TWDT-ETH\";\n        totalSupply = 100000000000*(10**decimals);\n        balanceOf[msg.sender] = totalSupply;\t\n    }\n\n    function balanceOf(address _who) public view returns (uint256 balance) {\n        return balanceOf[_who];\n    }\n\n    function _transferFrom(address _from, address _to, uint256 _value) internal returns (bool) {\n        require(_from != address(0));\n        require(_to != address(0));\n        // require(balanceOf[_from] >= _value);\n        // require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(!frozenAccount[_from]);                  \n        require(!frozenAccount[_to]); \n        require(!frozenAccountSend[_from]);\n        require(!isBlackListed[_from]);\n        if(checkIsKYC(_from, _to)){\n            //Round down.\n            uint256 fee = (((_value.mul(feeRate)).div(10000)).div(10**(decimals))).mul(10**(decimals));\n            if(isWhiteListed[_from] || isWhiteListed[_to]){\n                fee = 0;\n            }else if(fee != 0){\n                if (fee > maximumFee) {\n                    fee = maximumFee;\n                } else if (fee < minimumFee){\n                    fee = minimumFee;\n                }\n            }\n            \n            //_value must be equal to or larger than minimumFee, otherwise it will fail.\n            uint256 sendAmount = _value.sub(fee);\n            balanceOf[_from] = balanceOf[_from].sub(_value);\n            balanceOf[_to] = balanceOf[_to].add(sendAmount);\n            if (fee > 0) {\n                balanceOf[feeWallet] = balanceOf[feeWallet].add(fee);\n                emit Transfer(_from, feeWallet, fee);\n            }\n            emit Transfer(_from, _to, sendAmount);\n            return true;\n        } else {\n            //If not pass KYC, throw the event.\n            emit Error_No_Binding_Address(_from, _to);\n            return false;\n        }\n    }\n\t\n    function transfer(address _to, uint256 _value) public returns (bool){\t    \n        return _transferFrom(msg.sender,_to,_value);\n    }\n    function transferLog(address _to, uint256 _value,string logs) public returns (bool){\n        bool _status = _transferFrom(msg.sender,_to,_value);\n        emit Logs(logs);\n        return _status;\n    }\n\t\n    function () public {\n        revert();\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        require(_spender != address(0));\n        return allowed[_owner][_spender];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        require(_spender != address(0));\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\t\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_from != address(0));\n        require(_to != address(0));\n        require(_value > 0);\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require(allowed[_from][msg.sender] >= _value);\n        // require(balanceOf[_from] >= _value);\n        // require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(!frozenAccount[_from]);\n        require(!frozenAccount[_to]);\n        require(!frozenAccountSend[_from]);\n        require(!isBlackListed[_from]); \n        if(checkIsKYC(_from, _to)){\n            //Round down.\n            uint256 fee = (((_value.mul(feeRate)).div(10000)).div(10**(decimals))).mul(10**(decimals));\n            if(isWhiteListed[_from] || isWhiteListed[_to]){\n                fee = 0;\n            }else if(fee != 0){\n                if (fee > maximumFee) {\n                    fee = maximumFee;\n                } else if (fee < minimumFee){\n                    fee = minimumFee;\n                }\n            }\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n            //_value must be equal to or larger than minimumFee, otherwise it will fail.\n            uint256 sendAmount = _value.sub(fee);\n\n            balanceOf[_from] = balanceOf[_from].sub(_value);\n            balanceOf[_to] = balanceOf[_to].add(sendAmount);\n            if (fee > 0) {\n                balanceOf[feeWallet] = balanceOf[feeWallet].add(fee);\n                emit Transfer(_from, feeWallet, fee);\n            }\n            emit Transfer(_from, _to, sendAmount);\n            return true;\n        } else {\n            // If not pass KYC, throw the event.\n            emit Error_No_Binding_Address(_from, _to);\n            return false;\n        }\n    }\n        \n    function freezeAccount(address _target, bool _freeze) onlyOwnerAdmin public {\n        require(_target != address(0));\n        frozenAccount[_target] = _freeze;\n        emit FrozenFunds(_target, _freeze);\n    }\n\n    function freezeAccountSend(address _target, bool _freeze) onlyOwnerAdmin public {\n        require(_target != address(0));\n        frozenAccountSend[_target] = _freeze;\n        emit FrozenFundsSend(_target, _freeze);\n    }\n\n    // Transfer of illegal funds.\n    // It can transfer tokens to blackFundsWallet only.\n    function transferBlackFunds(address _blackListedUser) public onlyOwnerAdmin {\n        require(blackFundsWallet != address(0));\n        require(isBlackListed[_blackListedUser]);\n        uint256 dirtyFunds = balanceOf[_blackListedUser];\n        balanceOf[_blackListedUser] = 0;\n        balanceOf[blackFundsWallet] = balanceOf[blackFundsWallet].add(dirtyFunds);\n        emit Transfer(_blackListedUser, blackFundsWallet, dirtyFunds);\n        emit TransferredBlackFunds(_blackListedUser, dirtyFunds);\n    }\n\n    // Burn tokens when user stops rent.\n    // It can burn tokens from redeemWallet only.\n    function redeem(uint256 amount) public onlyOwnerAdmin {\n        require(redeemWallet != address(0));\n        require(totalSupply >= amount);\n        require(balanceOf[redeemWallet] >= amount);\n\n        totalSupply = totalSupply.sub(amount);\n        balanceOf[redeemWallet] = balanceOf[redeemWallet].sub(amount);\n        emit Transfer(redeemWallet, address(0), amount);\n        emit Redeem(amount);\n    }\n\n    // Mint a new amount of tokens.\n    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public {\n        require(_target != address(0));\n        require(_mintedAmount > 0);\n        require(!frozenAccount[_target]);\n        // require(totalSupply + _mintedAmount > totalSupply);\n        // require(balanceOf[_target] + _mintedAmount > balanceOf[_target]);\n        balanceOf[_target] = balanceOf[_target].add(_mintedAmount);\n        totalSupply = totalSupply.add(_mintedAmount);\n        emit Transfer(address(0), this, _mintedAmount);\n        emit Transfer(this, _target, _mintedAmount);\n    }\n\n    // Set the illegal fund wallet.\n    function setBlackFundsWallet(address _target) onlyOwner public {\n        blackFundsWallet = _target;\n    }\n\n    // Set the redeem wallet.\n    function setRedeemWallet(address _target) onlyOwner public {\n        redeemWallet = _target;\n    }\n\n    // Set the fee wallet.\n    function setFeeWallet(address _target) onlyOwner public {\n        feeWallet = _target;\n    }\n\n    // Set the token transfer fee.\n    // The maximum of feeRate is 0.1%.\n    // The maximum of fee is 100 TWDT.\n    function setFee(uint256 _feeRate, uint256 _minimumFee, uint256 _maximumFee) onlyOwner public {\n        require(_feeRate <= 10);\n        require(_maximumFee <= 100);\n        require(_minimumFee <= _maximumFee);\n\n        feeRate = _feeRate;\n        minimumFee = _minimumFee.mul(10**decimals);\n        maximumFee = _maximumFee.mul(10**decimals);\n\n        emit Fee(feeRate, minimumFee, maximumFee);\n    }\n}",
  "bytecode": "60806040526001805460a060020a60ff02191690556000600b819055600c819055600d553480156200003057600080fd5b5060008054600160a060020a031916331790556040805180820190915260148082527f54616977616e204469676974616c20546f6b656e00000000000000000000000060209092019182526200008991600591620000f5565b506040805180820190915260088082527f545744542d4554480000000000000000000000000000000000000000000000006020909201918252620000d091600691620000f5565b5067016345785d8a00006007819055336000908152600e60205260409020556200019a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013857805160ff191683800117855562000168565b8280016001018555821562000168579182015b82811115620001685782518255916020019190600101906200014b565b50620001769291506200017a565b5090565b6200019791905b8082111562000176576000815560010162000181565b90565b611d4e80620001aa6000396000f3006080604052600436106102245763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663052f7d11811461023657806306d6e5131461025e57806306fdde0314610299578063095ea7b3146103235780630ecb93c01461034757806318160ddd146103685780631a7626e71461038f5780631bada3c0146103a45780632042e5c2146103b957806323b872dd146103da578063313ce5671461040457806335390714146104195780635448d4251461042e57806359bf1abe1461044f5780635b65b9ab146104705780635b66cc841461048e578063669b8f20146104f75780636f9170f614610518578063704b6c021461053957806370a082311461055a57806379c650681461057b5780638da5cb5b1461059f57806390d49b9d146105d057806395d89b41146105f1578063978bbdb914610606578063a9059cbb1461061b578063b06f8d341461063f578063b414d4b614610654578063b52ae3fc14610675578063c5c00ac614610696578063ce419871146106ab578063ce444209146106c0578063cf314b6a146106e1578063da42eea514610707578063db006a7514610728578063dd62ed3e14610740578063e0a2173914610767578063e47d606014610788578063e4997dc5146107a9578063e724529c146107ca578063e7cd4a04146107f0578063eb78a26d14610811578063f25f4b5614610826578063f2fde38b1461083b578063f851a4401461085c575b34801561023057600080fd5b50600080fd5b34801561024257600080fd5b5061025c600160a060020a03600435166024351515610871565b005b34801561026a57600080fd5b50610285600160a060020a0360043581169060243516610918565b604080519115158252519081900360200190f35b3480156102a557600080fd5b506102ae6109af565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102e85781810151838201526020016102d0565b50505050905090810190601f1680156103155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032f57600080fd5b50610285600160a060020a0360043516602435610a3d565b34801561035357600080fd5b5061025c600160a060020a0360043516610abb565b34801561037457600080fd5b5061037d610b44565b60408051918252519081900360200190f35b34801561039b57600080fd5b5061037d610b4a565b3480156103b057600080fd5b5061025c610b50565b3480156103c557600080fd5b5061025c600160a060020a0360043516610bc7565b3480156103e657600080fd5b50610285600160a060020a0360043581169060243516604435610c4d565b34801561041057600080fd5b5061037d610fe6565b34801561042557600080fd5b5061037d610feb565b34801561043a57600080fd5b50610285600160a060020a0360043516610ff1565b34801561045b57600080fd5b50610285600160a060020a0360043516611006565b34801561047c57600080fd5b5061025c600435602435604435611024565b34801561049a57600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610285948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506110e49650505050505050565b34801561050357600080fd5b50610285600160a060020a0360043516611195565b34801561052457600080fd5b50610285600160a060020a03600435166111b3565b34801561054557600080fd5b5061025c600160a060020a03600435166111c8565b34801561056657600080fd5b5061037d600160a060020a036004351661120e565b34801561058757600080fd5b5061025c600160a060020a0360043516602435611229565b3480156105ab57600080fd5b506105b4611338565b60408051600160a060020a039092168252519081900360200190f35b3480156105dc57600080fd5b5061025c600160a060020a0360043516611347565b3480156105fd57600080fd5b506102ae61138d565b34801561061257600080fd5b5061037d6113e8565b34801561062757600080fd5b50610285600160a060020a03600435166024356113ee565b34801561064b57600080fd5b506105b46113fb565b34801561066057600080fd5b50610285600160a060020a036004351661140a565b34801561068157600080fd5b5061025c600160a060020a036004351661141f565b3480156106a257600080fd5b5061028561155d565b3480156106b757600080fd5b5061025c61157e565b3480156106cc57600080fd5b50610285600160a060020a036004351661160c565b3480156106ed57600080fd5b5061025c600160a060020a03600435166024351515611621565b34801561071357600080fd5b5061025c600160a060020a03600435166116c8565b34801561073457600080fd5b5061025c60043561170e565b34801561074c57600080fd5b5061037d600160a060020a0360043581169060243516611848565b34801561077357600080fd5b5061025c600160a060020a036004351661188b565b34801561079457600080fd5b50610285600160a060020a03600435166118d1565b3480156107b557600080fd5b5061025c600160a060020a03600435166118e6565b3480156107d657600080fd5b5061025c600160a060020a0360043516602435151561196c565b3480156107fc57600080fd5b5061025c600160a060020a0360043516611a13565b34801561081d57600080fd5b506105b4611a9c565b34801561083257600080fd5b506105b4611aab565b34801561084757600080fd5b5061025c600160a060020a0360043516611aba565b34801561086857600080fd5b506105b4611b0c565b600054600160a060020a03163314806108945750600154600160a060020a031633145b151561089f57600080fd5b600160a060020a03821615156108b457600080fd5b600160a060020a038216600081815260116020908152604091829020805460ff191685151590811790915582519384529083015280517f0d9b56518d074f1c1ad130909f8ed3faec9e408271086b44553451122555c2789281900390910190a15050565b60015460009074010000000000000000000000000000000000000000900460ff1615806109a6575060015474010000000000000000000000000000000000000000900460ff1680156109825750600160a060020a03831660009081526002602052604090205460ff165b80156109a65750600160a060020a03821660009081526002602052604090205460ff165b90505b92915050565b6005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a355780601f10610a0a57610100808354040283529160200191610a35565b820191906000526020600020905b815481529060010190602001808311610a1857829003601f168201915b505050505081565b6000600160a060020a0383161515610a5457600080fd5b336000818152600f60209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600054600160a060020a0316331480610ade5750600154600160a060020a031633145b1515610ae957600080fd5b600160a060020a038116600081815260036020908152604091829020805460ff19166001179055815192835290517f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc9281900390910190a150565b60075481565b600c5481565b600054600160a060020a0316331480610b735750600154600160a060020a031633145b1515610b7e57600080fd5b6001805474ff0000000000000000000000000000000000000000191690556040517f39856f31e246a68d332f4c60747159f18f8534ec5f86ab5a1272cfac9b320f5690600090a1565b600054600160a060020a0316331480610bea5750600154600160a060020a031633145b1515610bf557600080fd5b600160a060020a038116600081815260046020908152604091829020805460ff19169055815192835290517f9ff0fe46bde692ffa123229beb5debd1c068a183c3b74be4f2d749f628203d3a9281900390910190a150565b60008080600160a060020a0386161515610c6657600080fd5b600160a060020a0385161515610c7b57600080fd5b60008411610c8857600080fd5b600160a060020a03861660009081526010602052604090205460ff1615610cae57600080fd5b600160a060020a03851660009081526010602052604090205460ff1615610cd457600080fd5b600160a060020a03861660009081526011602052604090205460ff1615610cfa57600080fd5b600160a060020a03861660009081526003602052604090205460ff1615610d2057600080fd5b610d2a8686610918565b15610f9357610d726006600a0a610d666006600a0a610d5a612710610d5a600b548b611b1b90919063ffffffff16565b9063ffffffff611b4416565b9063ffffffff611b1b16565b600160a060020a03871660009081526004602052604090205490925060ff1680610db45750600160a060020a03851660009081526004602052604090205460ff165b15610dc25760009150610dec565b8115610dec57600d54821115610ddc57600d549150610dec565b600c54821015610dec57600c5491505b600160a060020a0386166000908152600f60209081526040808320338452909152902054610e20908563ffffffff611b5916565b600160a060020a0387166000908152600f60209081526040808320338452909152902055610e54848363ffffffff611b5916565b600160a060020a0387166000908152600e6020526040902054909150610e80908563ffffffff611b5916565b600160a060020a038088166000908152600e60205260408082209390935590871681522054610eb5908263ffffffff611b6b16565b600160a060020a0386166000908152600e6020526040812091909155821115610f5157600a54600160a060020a03166000908152600e6020526040902054610f03908363ffffffff611b6b16565b600a8054600160a060020a039081166000908152600e60209081526040918290209490945591548251868152925190821693918a1692600080516020611d0383398151915292908290030190a35b84600160a060020a031686600160a060020a0316600080516020611d03833981519152836040518082815260200191505060405180910390a360019250610fdd565b60408051600160a060020a0380891682528716602082015281517f9e8c7c8abb0b6e040ca463b93c5dfed433d5fdee0f4e4029a975d3e36053f23a929181900390910190a1600092505b50509392505050565b600681565b600d5481565b60026020526000908152604090205460ff1681565b600160a060020a031660009081526003602052604090205460ff1690565b600054600160a060020a0316331461103b57600080fd5b600a83111561104957600080fd5b606481111561105757600080fd5b8082111561106457600080fd5b600b83905561107c82620f424063ffffffff611b1b16565b600c5561109281620f424063ffffffff611b1b16565b600d819055600b54600c546040805192835260208301919091528181019290925290517f7db2709f6e7adf14b75ac6a4bc01b5f3ff9000017f9648c2b70f6ca8616d8f579181900360600190a1505050565b6000806110f2338686611b78565b90507fdf615b3983b7b70e51c03bc3d383f109d6e0c31b6feac9342844de59386c382e836040518080602001828103825283818151815260200191508051906020019080838360005b8381101561115357818101518382015260200161113b565b50505050905090810190601f1680156111805780820380516001836020036101000a031916815260200191505b509250505060405180910390a1949350505050565b600160a060020a031660009081526004602052604090205460ff1690565b60046020526000908152604090205460ff1681565b600054600160a060020a031633146111df57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03166000908152600e602052604090205490565b600054600160a060020a0316331461124057600080fd5b600160a060020a038216151561125557600080fd5b6000811161126257600080fd5b600160a060020a03821660009081526010602052604090205460ff161561128857600080fd5b600160a060020a0382166000908152600e60205260409020546112b1908263ffffffff611b6b16565b600160a060020a0383166000908152600e60205260409020556007546112dd908263ffffffff611b6b16565b6007556040805182815290513091600091600080516020611d038339815191529181900360200190a3604080518281529051600160a060020a038416913091600080516020611d038339815191529181900360200190a35050565b600054600160a060020a031681565b600054600160a060020a0316331461135e57600080fd5b600a805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a355780601f10610a0a57610100808354040283529160200191610a35565b600b5481565b60006109a6338484611b78565b600954600160a060020a031681565b60106020526000908152604090205460ff1681565b60008054600160a060020a03163314806114435750600154600160a060020a031633145b151561144e57600080fd5b600854600160a060020a0316151561146557600080fd5b600160a060020a03821660009081526003602052604090205460ff16151561148c57600080fd5b50600160a060020a038082166000908152600e602052604080822080549083905560085490931682529020546114c8908263ffffffff611b6b16565b60088054600160a060020a039081166000908152600e6020908152604091829020949094559154825185815292519082169391861692600080516020611d0383398151915292908290030190a360408051600160a060020a03841681526020810183905281517f1be32549cb14b0867ff723f714178de68308243dafe73ab66d06cb6de4f38f10929181900390910190a15050565b60015474010000000000000000000000000000000000000000900460ff1681565b600054600160a060020a03163314806115a15750600154600160a060020a031633145b15156115ac57600080fd5b6001805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517f2b7c9e8bd3e70076d2cf0d3ec392eee80b102aa839d1c225aae1d24909b0b50290600090a1565b60116020526000908152604090205460ff1681565b600054600160a060020a03163314806116445750600154600160a060020a031633145b151561164f57600080fd5b600160a060020a038216151561166457600080fd5b600160a060020a038216600081815260026020908152604091829020805460ff191685151590811790915582519384529083015280517fddd6e175a3eca755bcade367a228d9a3251ee99ffa78881c924f8696dc5e14a99281900390910190a15050565b600054600160a060020a031633146116df57600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314806117315750600154600160a060020a031633145b151561173c57600080fd5b600954600160a060020a0316151561175357600080fd5b60075481111561176257600080fd5b600954600160a060020a03166000908152600e602052604090205481111561178957600080fd5b60075461179c908263ffffffff611b5916565b600755600954600160a060020a03166000908152600e60205260409020546117ca908263ffffffff611b5916565b60098054600160a060020a039081166000908152600e60209081526040808320959095559254845186815294519194921692600080516020611d03833981519152928290030190a36040805182815290517f702d5967f45f6513a38ffc42d6ba9bf230bd40e8f53b16363c7eb4fd2deb9a449181900360200190a150565b6000600160a060020a038216151561185f57600080fd5b50600160a060020a039182166000908152600f6020908152604080832093909416825291909152205490565b600054600160a060020a031633146118a257600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60036020526000908152604090205460ff1681565b600054600160a060020a03163314806119095750600154600160a060020a031633145b151561191457600080fd5b600160a060020a038116600081815260036020908152604091829020805460ff19169055815192835290517fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c9281900390910190a150565b600054600160a060020a031633148061198f5750600154600160a060020a031633145b151561199a57600080fd5b600160a060020a03821615156119af57600080fd5b600160a060020a038216600081815260106020908152604091829020805460ff191685151590811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a15050565b600054600160a060020a0316331480611a365750600154600160a060020a031633145b1515611a4157600080fd5b600160a060020a038116600081815260046020908152604091829020805460ff19166001179055815192835290517f64fd21439447139bed5a374a0f62ecc0fbd38cf2687d4ed5d587cb55dfbd42589281900390910190a150565b600854600160a060020a031681565b600a54600160a060020a031681565b600054600160a060020a03163314611ad157600080fd5b600160a060020a03811615611b09576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b600154600160a060020a031681565b6000821515611b2c575060006109a9565b50818102818382811515611b3c57fe5b04146109a957fe5b60008183811515611b5157fe5b049392505050565b600082821115611b6557fe5b50900390565b818101828110156109a957fe5b60008080600160a060020a0386161515611b9157600080fd5b600160a060020a0385161515611ba657600080fd5b600160a060020a03861660009081526010602052604090205460ff1615611bcc57600080fd5b600160a060020a03851660009081526010602052604090205460ff1615611bf257600080fd5b600160a060020a03861660009081526011602052604090205460ff1615611c1857600080fd5b600160a060020a03861660009081526003602052604090205460ff1615611c3e57600080fd5b611c488686610918565b15610f9357611c786006600a0a610d666006600a0a610d5a612710610d5a600b548b611b1b90919063ffffffff16565b600160a060020a03871660009081526004602052604090205490925060ff1680611cba5750600160a060020a03851660009081526004602052604090205460ff165b15611cc85760009150611cf2565b8115611cf257600d54821115611ce257600d549150611cf2565b600c54821015611cf257600c5491505b610e54848363ffffffff611b59165600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820ee25078d89444bd96ae8cb975024c3637df74256ab0d304974a1290d6c8093690029"
}