{
  "address": "0xea642206310400cda4c1c5b8e7945314aa96b8a7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Mineable",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-14\n*/\n\npragma solidity ^0.4.11;\n\ncontract Mineable {\n    string public name = 'MINT';\n    string public symbol = 'MINT';\n    uint8 public decimals = 18;\n    uint256 public totalSupply = 1000000000000000000000000000;\n    uint public miningReward = 1000000000000000000;\n    uint private divider;\n    \n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => uint256) public successesOf;\n    mapping (address => uint256) public failsOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    \n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function Mineable() {\n        balanceOf[msg.sender] = totalSupply;\n        divider -= 1;\n        divider /= 1000000000;\n    }\n    \n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n    \n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        _transfer(msg.sender, _to, _value);\n    }\n    \n    /* Transfer tokens from other address */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n    \n    /* Set allowance for other address */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n    \n    function () payable {\n        if (msg.value == 0) {\n            uint minedAtBlock = uint(block.blockhash(block.number - 1));\n            uint minedHashRel = uint(sha256(minedAtBlock + uint(msg.sender))) / divider;\n            uint balanceRel = balanceOf[msg.sender] * 1000000000 / totalSupply;\n            if (balanceRel >= 100000) {\n                uint k = balanceRel / 100000;\n                if (k > 255) {\n                    k = 255;\n                }\n                k = 2 ** k;\n                balanceRel = 500000000 / k;\n                balanceRel = 500000000 - balanceRel;\n                if (minedHashRel < balanceRel) {\n                    uint reward = miningReward + minedHashRel * 100000000000000;\n                    balanceOf[msg.sender] += reward;\n                    totalSupply += reward;\n                    Transfer(0, this, reward);\n                    Transfer(this, msg.sender, reward);\n                    successesOf[msg.sender]++;\n                } else {\n                    failsOf[msg.sender]++;\n                }\n            } else {\n                revert();\n            }\n        } else {\n            revert();\n        }\n    }\n}",
  "bytecode": "6060604052604060405190810160405280600481526020017f4d494e5400000000000000000000000000000000000000000000000000000000815250600090805190602001906200005292919062000160565b50604060405190810160405280600481526020017f4d494e540000000000000000000000000000000000000000000000000000000081525060019080519060200190620000a192919062000160565b506012600260006101000a81548160ff021916908360ff1602179055506b033b2e3c9fd0803ce8000000600355670de0b6b3a76400006004553415620000e357fe5b5b600354600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600560008282540392505081905550633b9aca00600560008282548115156200015157fe5b04925050819055505b6200020f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a357805160ff1916838001178555620001d4565b82800160010185558215620001d4579182015b82811115620001d3578251825591602001919060010190620001b6565b5b509050620001e39190620001e7565b5090565b6200020c91905b8082111562000208576000816000905550600101620001ee565b5090565b90565b610ea8806200021f6000396000f300606060405236156100b8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146103cf578063095ea7b31461046857806318160ddd146104bf57806323b872dd146104e5578063313ce5671461055b5780634ac2d1031461058757806370a08231146105ad578063753ded15146105f757806395d89b4114610641578063a9059cbb146106da578063cd9354e414610719578063dd62ed3e14610763575b6103cd5b6000600060006000600060003414156103bf57600143034060019004945060055460023373ffffffffffffffffffffffffffffffffffffffff1687016000604051602001526040518082815260200191505060206040518083038160008661646e5a03f1151561012857fe5b5050604051805190506001900481151561013e57fe5b049350600354633b9aca00600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540281151561019357fe5b049250620186a0831015156103b457620186a0838115156101b057fe5b04915060ff8211156101c15760ff91505b8160020a915081631dcd65008115156101d657fe5b04925082631dcd65000392508284101561035f57655af3107a4000840260045401905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806003600082825401925050819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a33373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055506103af565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055505b6103ba565b60006000fd5b6103c5565b60006000fd5b5b5050505050565b005b34156103d757fe5b6103df6107cc565b604051808060200182810382528381815181526020019150805190602001908083836000831461042e575b80518252602083111561042e5760208201915060208101905060208303925061040a565b505050905090810190601f16801561045a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047057fe5b6104a5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061086a565b604051808215151515815260200191505060405180910390f35b34156104c757fe5b6104cf6108f8565b6040518082815260200191505060405180910390f35b34156104ed57fe5b610541600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108fe565b604051808215151515815260200191505060405180910390f35b341561056357fe5b61056b610a2d565b604051808260ff1660ff16815260200191505060405180910390f35b341561058f57fe5b610597610a40565b6040518082815260200191505060405180910390f35b34156105b557fe5b6105e1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a46565b6040518082815260200191505060405180910390f35b34156105ff57fe5b61062b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a5e565b6040518082815260200191505060405180910390f35b341561064957fe5b610651610a76565b60405180806020018281038252838181518152602001915080519060200190808383600083146106a0575b8051825260208311156106a05760208201915060208101905060208303925061067c565b505050905090810190601f1680156106cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106e257fe5b610717600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b14565b005b341561072157fe5b61074d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b24565b6040518082815260200191505060405180910390f35b341561076b57fe5b6107b6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b3c565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108625780601f1061083757610100808354040283529160200191610862565b820191906000526020600020905b81548152906001019060200180831161084557829003601f168201915b505050505081565b600081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60035481565b6000600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561098c5760006000fd5b81600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610a21848484610b61565b600190505b9392505050565b600260009054906101000a900460ff1681565b60045481565b60066020528060005260406000206000915090505481565b60086020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b505050505081565b610b1f338383610b61565b5b5050565b60076020528060005260406000206000915090505481565b6009602052816000526040600020602052806000526040600020600091509150505481565b600060008373ffffffffffffffffffffffffffffffffffffffff1614151515610b8a5760006000fd5b81600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610bd95760006000fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401111515610c685760006000fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401905081600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a380600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401141515610e7557fe5b5b505050505600a165627a7a723058200dfb3590ef1580db07f4bfedbbbc57a4de9e678879030632fbc1780bea35b3ff0029"
}