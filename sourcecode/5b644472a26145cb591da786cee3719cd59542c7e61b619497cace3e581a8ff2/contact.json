{
  "address": "0xc8d2485654ba543ebc1a43660e39d0f7467ab5ad",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Fortune777",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-04\n*/\n\npragma solidity 0.4.25;\n\n/**\n*\n* Get your 7,77% every day profit with Fortune 777 Contract!\n* GitHub https://github.com/fortune333/fortune777\n* Site https://fortune333.online/\n*\n*/\n\n\nlibrary Math {\nfunction min(uint a, uint b) internal pure returns(uint) {\nif (a > b) {\nreturn b;\n}\nreturn a;\n}\n}\n\n\nlibrary Zero {\nfunction requireNotZero(address addr) internal pure {\nrequire(addr != address(0), \"require not zero address\");\n}\n\nfunction requireNotZero(uint val) internal pure {\nrequire(val != 0, \"require not zero value\");\n}\n\nfunction notZero(address addr) internal pure returns(bool) {\nreturn !(addr == address(0));\n}\n\nfunction isZero(address addr) internal pure returns(bool) {\nreturn addr == address(0);\n}\n\nfunction isZero(uint a) internal pure returns(bool) {\nreturn a == 0;\n}\n\nfunction notZero(uint a) internal pure returns(bool) {\nreturn a != 0;\n}\n}\n\n\nlibrary Percent {\nstruct percent {\nuint num;\nuint den;\n}\n\nfunction mul(percent storage p, uint a) internal view returns (uint) {\nif (a == 0) {\nreturn 0;\n}\nreturn a*p.num/p.den;\n}\n\nfunction div(percent storage p, uint a) internal view returns (uint) {\nreturn a/p.num*p.den;\n}\n\nfunction sub(percent storage p, uint a) internal view returns (uint) {\nuint b = mul(p, a);\nif (b >= a) {\nreturn 0;\n}\nreturn a - b;\n}\n\nfunction add(percent storage p, uint a) internal view returns (uint) {\nreturn a + mul(p, a);\n}\n\nfunction toMemory(percent storage p) internal view returns (Percent.percent memory) {\nreturn Percent.percent(p.num, p.den);\n}\n\nfunction mmul(percent memory p, uint a) internal pure returns (uint) {\nif (a == 0) {\nreturn 0;\n}\nreturn a*p.num/p.den;\n}\n\nfunction mdiv(percent memory p, uint a) internal pure returns (uint) {\nreturn a/p.num*p.den;\n}\n\nfunction msub(percent memory p, uint a) internal pure returns (uint) {\nuint b = mmul(p, a);\nif (b >= a) {\nreturn 0;\n}\nreturn a - b;\n}\n\nfunction madd(percent memory p, uint a) internal pure returns (uint) {\nreturn a + mmul(p, a);\n}\n}\n\n\nlibrary Address {\nfunction toAddress(bytes source) internal pure returns(address addr) {\nassembly { addr := mload(add(source,0x14)) }\nreturn addr;\n}\n\nfunction isNotContract(address addr) internal view returns(bool) {\nuint length;\nassembly { length := extcodesize(addr) }\nreturn length == 0;\n}\n}\n\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that revert on error\n*/\nlibrary SafeMath {\n\n/**\n* @dev Multiplies two numbers, reverts on overflow.\n*/\nfunction mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\nif (_a == 0) {\nreturn 0;\n}\n\nuint256 c = _a * _b;\nrequire(c / _a == _b);\n\nreturn c;\n}\n\n/**\n* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n*/\nfunction div(uint256 _a, uint256 _b) internal pure returns (uint256) {\nrequire(_b > 0); // Solidity only automatically asserts when dividing by 0\nuint256 c = _a / _b;\n// assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\nreturn c;\n}\n\n/**\n* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n*/\nfunction sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\nrequire(_b <= _a);\nuint256 c = _a - _b;\n\nreturn c;\n}\n\n/**\n* @dev Adds two numbers, reverts on overflow.\n*/\nfunction add(uint256 _a, uint256 _b) internal pure returns (uint256) {\nuint256 c = _a + _b;\nrequire(c >= _a);\n\nreturn c;\n}\n\n/**\n* @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n* reverts when dividing by zero.\n*/\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\nrequire(b != 0);\nreturn a % b;\n}\n}\n\n\ncontract Accessibility {\naddress private owner;\nmodifier onlyOwner() {\nrequire(msg.sender == owner, \"access denied\");\n_;\n}\n\nconstructor() public {\nowner = msg.sender;\n}\n\nfunction disown() internal {\ndelete owner;\n}\n}\n\n\ncontract Rev1Storage {\nfunction investorShortInfo(address addr) public view returns(uint value, uint refBonus);\n}\n\n\ncontract Rev2Storage {\nfunction investorInfo(address addr) public view returns(uint investment, uint paymentTime);\n}\n\n\nlibrary PrivateEntrance {\nusing PrivateEntrance for privateEntrance;\nusing Math for uint;\nstruct privateEntrance {\nRev1Storage rev1Storage;\nRev2Storage rev2Storage;\nuint investorMaxInvestment;\nuint endTimestamp;\nmapping(address=>bool) hasAccess;\n}\n\nfunction isActive(privateEntrance storage pe) internal view returns(bool) {\nreturn pe.endTimestamp > now;\n}\n\nfunction maxInvestmentFor(privateEntrance storage pe, address investorAddr) internal view returns(uint) {\nif (!pe.hasAccess[investorAddr]) {\nreturn 0;\n}\n\n(uint maxInvestment, ) = pe.rev1Storage.investorShortInfo(investorAddr);\nif (maxInvestment == 0) {\nreturn 0;\n}\nmaxInvestment = Math.min(maxInvestment, pe.investorMaxInvestment);\n\n(uint currInvestment, ) = pe.rev2Storage.investorInfo(investorAddr);\n\nif (currInvestment >= maxInvestment) {\nreturn 0;\n}\n\nreturn maxInvestment-currInvestment;\n}\n\nfunction provideAccessFor(privateEntrance storage pe, address[] addrs) internal {\nfor (uint16 i; i < addrs.length; i++) {\npe.hasAccess[addrs[i]] = true;\n}\n}\n}\n\n\ncontract InvestorsStorage is Accessibility {\nstruct Investor {\nuint investment;\nuint paymentTime;\n}\nuint public size;\n\nmapping (address => Investor) private investors;\n\nfunction isInvestor(address addr) public view returns (bool) {\nreturn investors[addr].investment > 0;\n}\n\nfunction investorInfo(address addr) public view returns(uint investment, uint paymentTime) {\ninvestment = investors[addr].investment;\npaymentTime = investors[addr].paymentTime;\n}\n\nfunction newInvestor(address addr, uint investment, uint paymentTime) public onlyOwner returns (bool) {\nInvestor storage inv = investors[addr];\nif (inv.investment != 0 || investment == 0) {\nreturn false;\n}\ninv.investment = investment;\ninv.paymentTime = paymentTime;\nsize++;\nreturn true;\n}\n\nfunction addInvestment(address addr, uint investment) public onlyOwner returns (bool) {\nif (investors[addr].investment == 0) {\nreturn false;\n}\ninvestors[addr].investment += investment;\nreturn true;\n}\n\nfunction setPaymentTime(address addr, uint paymentTime) public onlyOwner returns (bool) {\nif (investors[addr].investment == 0) {\nreturn false;\n}\ninvestors[addr].paymentTime = paymentTime;\nreturn true;\n}\n\nfunction disqalify(address addr) public onlyOwner returns (bool) {\nif (isInvestor(addr)) {\ninvestors[addr].investment = 0;\n}\n}\n}\n\n\nlibrary RapidGrowthProtection {\nusing RapidGrowthProtection for rapidGrowthProtection;\n\nstruct rapidGrowthProtection {\nuint startTimestamp;\nuint maxDailyTotalInvestment;\nuint8 activityDays;\nmapping(uint8 => uint) dailyTotalInvestment;\n}\n\nfunction maxInvestmentAtNow(rapidGrowthProtection storage rgp) internal view returns(uint) {\nuint day = rgp.currDay();\nif (day == 0 || day > rgp.activityDays) {\nreturn 0;\n}\nif (rgp.dailyTotalInvestment[uint8(day)] >= rgp.maxDailyTotalInvestment) {\nreturn 0;\n}\nreturn rgp.maxDailyTotalInvestment - rgp.dailyTotalInvestment[uint8(day)];\n}\n\nfunction isActive(rapidGrowthProtection storage rgp) internal view returns(bool) {\nuint day = rgp.currDay();\nreturn day != 0 && day <= rgp.activityDays;\n}\n\nfunction saveInvestment(rapidGrowthProtection storage rgp, uint investment) internal returns(bool) {\nuint day = rgp.currDay();\nif (day == 0 || day > rgp.activityDays) {\nreturn false;\n}\nif (rgp.dailyTotalInvestment[uint8(day)] + investment > rgp.maxDailyTotalInvestment) {\nreturn false;\n}\nrgp.dailyTotalInvestment[uint8(day)] += investment;\nreturn true;\n}\n\nfunction startAt(rapidGrowthProtection storage rgp, uint timestamp) internal {\nrgp.startTimestamp = timestamp;\n\n// restart\nfor (uint8 i = 1; i <= rgp.activityDays; i++) {\nif (rgp.dailyTotalInvestment[i] != 0) {\ndelete rgp.dailyTotalInvestment[i];\n}\n}\n}\n\nfunction currDay(rapidGrowthProtection storage rgp) internal view returns(uint day) {\nif (rgp.startTimestamp > now) {\nreturn 0;\n}\nday = (now - rgp.startTimestamp) / 24 hours + 1;\n}\n}\n\ncontract Fortune777 is Accessibility {\nusing RapidGrowthProtection for RapidGrowthProtection.rapidGrowthProtection;\nusing PrivateEntrance for PrivateEntrance.privateEntrance;\nusing Percent for Percent.percent;\nusing SafeMath for uint;\nusing Math for uint;\n\n// easy read for investors\nusing Address for *;\nusing Zero for *;\n\nRapidGrowthProtection.rapidGrowthProtection private m_rgp;\nPrivateEntrance.privateEntrance private m_privEnter;\nmapping(address => bool) private m_referrals;\nInvestorsStorage private m_investors;\n\n// automatically generates getters\nuint public constant minInvesment = 10 finney;\nuint public constant maxBalance = 333e5 ether;\naddress public advertisingAddress;\naddress public adminsAddress;\nuint public investmentsNumber;\nuint public waveStartup;\n\n// percents\nPercent.percent private m_1_percent = Percent.percent(111,10000);            // 111/10000 *100% = 1.11%\nPercent.percent private m_5_percent = Percent.percent(555,10000);            // 555/10000 *100% = 5.55%\nPercent.percent private m_7_percent = Percent.percent(777,10000);            // 777/10000 *100% = 7.77%\nPercent.percent private m_8_percent = Percent.percent(888,10000);            // 888/10000 *100% = 8.88%\nPercent.percent private m_9_percent = Percent.percent(999,100);              // 999/10000 *100% = 9.99%\nPercent.percent private m_10_percent = Percent.percent(10,100);            // 10/100 *100% = 10%\nPercent.percent private m_11_percent = Percent.percent(11,100);            // 11/100 *100% = 11%\nPercent.percent private m_12_percent = Percent.percent(12,100);            // 12/100 *100% = 12%\nPercent.percent private m_referal_percent = Percent.percent(777,10000);        // 777/10000 *100% = 7.77%\nPercent.percent private m_referrer_percent = Percent.percent(777,10000);       // 777/10000 *100% = 7.77%\nPercent.percent private m_referrer_percentMax = Percent.percent(10,100);       // 10/100 *100% = 10%\nPercent.percent private m_adminsPercent = Percent.percent(5,100);          //  5/100 *100% = 5.0%\nPercent.percent private m_advertisingPercent = Percent.percent(10,100);    // 10/100 *100% = 10.0%\n\n// more events for easy read from blockchain\nevent LogPEInit(uint when, address rev1Storage, address rev2Storage, uint investorMaxInvestment, uint endTimestamp);\nevent LogSendExcessOfEther(address indexed addr, uint when, uint value, uint investment, uint excess);\nevent LogNewReferral(address indexed addr, address indexed referrerAddr, uint when, uint refBonus);\nevent LogRGPInit(uint when, uint startTimestamp, uint maxDailyTotalInvestment, uint activityDays);\nevent LogRGPInvestment(address indexed addr, uint when, uint investment, uint indexed day);\nevent LogNewInvesment(address indexed addr, uint when, uint investment, uint value);\nevent LogAutomaticReinvest(address indexed addr, uint when, uint investment);\nevent LogPayDividends(address indexed addr, uint when, uint dividends);\nevent LogNewInvestor(address indexed addr, uint when);\nevent LogBalanceChanged(uint when, uint balance);\nevent LogNextWave(uint when);\nevent LogDisown(uint when);\n\n\nmodifier balanceChanged {\n_;\nemit LogBalanceChanged(now, address(this).balance);\n}\n\nmodifier notFromContract() {\nrequire(msg.sender.isNotContract(), \"only externally accounts\");\n_;\n}\n\nconstructor() public {\nadminsAddress = msg.sender;\nadvertisingAddress = msg.sender;\nnextWave();\n}\n\nfunction() public payable {\n// investor get him dividends\nif (msg.value.isZero()) {\ngetMyDividends();\nreturn;\n}\n\n// sender do invest\ndoInvest(msg.data.toAddress());\n}\n\nfunction disqualifyAddress(address addr) public onlyOwner {\nm_investors.disqalify(addr);\n}\n\nfunction doDisown() public onlyOwner {\ndisown();\nemit LogDisown(now);\n}\n\nfunction init(address rev1StorageAddr, uint timestamp) public onlyOwner {\n// init Rapid Growth Protection\nm_rgp.startTimestamp = timestamp + 1;\nm_rgp.maxDailyTotalInvestment = 500 ether;\nm_rgp.activityDays = 21;\nemit LogRGPInit(\nnow,\nm_rgp.startTimestamp,\nm_rgp.maxDailyTotalInvestment,\nm_rgp.activityDays\n);\n\n\n// init Private Entrance\nm_privEnter.rev1Storage = Rev1Storage(rev1StorageAddr);\nm_privEnter.rev2Storage = Rev2Storage(address(m_investors));\nm_privEnter.investorMaxInvestment = 50 ether;\nm_privEnter.endTimestamp = timestamp;\nemit LogPEInit(\nnow,\naddress(m_privEnter.rev1Storage),\naddress(m_privEnter.rev2Storage),\nm_privEnter.investorMaxInvestment,\nm_privEnter.endTimestamp\n);\n}\n\nfunction setAdvertisingAddress(address addr) public onlyOwner {\naddr.requireNotZero();\nadvertisingAddress = addr;\n}\n\nfunction setAdminsAddress(address addr) public onlyOwner {\naddr.requireNotZero();\nadminsAddress = addr;\n}\n\nfunction privateEntranceProvideAccessFor(address[] addrs) public onlyOwner {\nm_privEnter.provideAccessFor(addrs);\n}\n\nfunction rapidGrowthProtectionmMaxInvestmentAtNow() public view returns(uint investment) {\ninvestment = m_rgp.maxInvestmentAtNow();\n}\n\nfunction investorsNumber() public view returns(uint) {\nreturn m_investors.size();\n}\n\nfunction balanceETH() public view returns(uint) {\nreturn address(this).balance;\n}\n\nfunction advertisingPercent() public view returns(uint numerator, uint denominator) {\n(numerator, denominator) = (m_advertisingPercent.num, m_advertisingPercent.den);\n}\n\nfunction adminsPercent() public view returns(uint numerator, uint denominator) {\n(numerator, denominator) = (m_adminsPercent.num, m_adminsPercent.den);\n}\n\nfunction investorInfo(address investorAddr) public view returns(uint investment, uint paymentTime, bool isReferral) {\n(investment, paymentTime) = m_investors.investorInfo(investorAddr);\nisReferral = m_referrals[investorAddr];\n}\n\nfunction investorDividendsAtNow(address investorAddr) public view returns(uint dividends) {\ndividends = calcDividends(investorAddr);\n}\n\nfunction dailyPercentAtNow() public view returns(uint numerator, uint denominator) {\nPercent.percent memory p = dailyPercent();\n(numerator, denominator) = (p.num, p.den);\n}\n\nfunction getMyDividends() public notFromContract balanceChanged {\n// calculate dividends\n\n//check if 1 day passed after last payment\nrequire(now.sub(getMemInvestor(msg.sender).paymentTime) > 24 hours);\n\nuint dividends = calcDividends(msg.sender);\nrequire (dividends.notZero(), \"cannot to pay zero dividends\");\n\n// update investor payment timestamp\nassert(m_investors.setPaymentTime(msg.sender, now));\n\n// check enough eth - goto next wave if needed\nif (address(this).balance <= dividends) {\nnextWave();\ndividends = address(this).balance;\n}\n\n// transfer dividends to investor\nmsg.sender.transfer(dividends);\nemit LogPayDividends(msg.sender, now, dividends);\n}\n\nfunction doInvest(address referrerAddr) public payable notFromContract balanceChanged {\nuint investment = msg.value;\nuint receivedEther = msg.value;\nrequire(investment >= minInvesment, \"investment must be >= minInvesment\");\nrequire(address(this).balance <= maxBalance, \"the contract eth balance limit\");\n\nif (m_rgp.isActive()) {\n// use Rapid Growth Protection if needed\nuint rpgMaxInvest = m_rgp.maxInvestmentAtNow();\nrpgMaxInvest.requireNotZero();\ninvestment = Math.min(investment, rpgMaxInvest);\nassert(m_rgp.saveInvestment(investment));\nemit LogRGPInvestment(msg.sender, now, investment, m_rgp.currDay());\n\n} else if (m_privEnter.isActive()) {\n// use Private Entrance if needed\nuint peMaxInvest = m_privEnter.maxInvestmentFor(msg.sender);\npeMaxInvest.requireNotZero();\ninvestment = Math.min(investment, peMaxInvest);\n}\n\n// send excess of ether if needed\nif (receivedEther > investment) {\nuint excess = receivedEther - investment;\nmsg.sender.transfer(excess);\nreceivedEther = investment;\nemit LogSendExcessOfEther(msg.sender, now, msg.value, investment, excess);\n}\n\n// commission\nadvertisingAddress.transfer(m_advertisingPercent.mul(receivedEther));\nadminsAddress.transfer(m_adminsPercent.mul(receivedEther));\n\nbool senderIsInvestor = m_investors.isInvestor(msg.sender);\n\n// ref system works only once and only on first invest\nif (referrerAddr.notZero() && !senderIsInvestor && !m_referrals[msg.sender] &&\nreferrerAddr != msg.sender && m_investors.isInvestor(referrerAddr)) {\n\nm_referrals[msg.sender] = true;\n// add referral bonus to investor`s and referral`s investments\nuint referrerBonus = m_referrer_percent.mmul(investment);\nif (investment > 10 ether) {\nreferrerBonus = m_referrer_percentMax.mmul(investment);\n}\n\nuint referalBonus = m_referal_percent.mmul(investment);\nassert(m_investors.addInvestment(referrerAddr, referrerBonus)); // add referrer bonus\ninvestment += referalBonus;                                    // add referral bonus\nemit LogNewReferral(msg.sender, referrerAddr, now, referalBonus);\n}\n\n// automatic reinvest - prevent burning dividends\nuint dividends = calcDividends(msg.sender);\nif (senderIsInvestor && dividends.notZero()) {\ninvestment += dividends;\nemit LogAutomaticReinvest(msg.sender, now, dividends);\n}\n\nif (senderIsInvestor) {\n// update existing investor\nassert(m_investors.addInvestment(msg.sender, investment));\nassert(m_investors.setPaymentTime(msg.sender, now));\n} else {\n// create new investor\nassert(m_investors.newInvestor(msg.sender, investment, now));\nemit LogNewInvestor(msg.sender, now);\n}\n\ninvestmentsNumber++;\nemit LogNewInvesment(msg.sender, now, investment, receivedEther);\n}\n\nfunction getMemInvestor(address investorAddr) internal view returns(InvestorsStorage.Investor memory) {\n(uint investment, uint paymentTime) = m_investors.investorInfo(investorAddr);\nreturn InvestorsStorage.Investor(investment, paymentTime);\n}\n\nfunction calcDividends(address investorAddr) internal view returns(uint dividends) {\nInvestorsStorage.Investor memory investor = getMemInvestor(investorAddr);\n\n// safe gas if dividends will be 0\nif (investor.investment.isZero() || now.sub(investor.paymentTime) < 10 minutes) {\nreturn 0;\n}\n\n// for prevent burning daily dividends if 24h did not pass - calculate it per 10 min interval\nPercent.percent memory p = dailyPercent();\ndividends = (now.sub(investor.paymentTime) / 10 minutes) * p.mmul(investor.investment) / 144;\n}\n\nfunction dailyPercent() internal view returns(Percent.percent memory p) {\nuint balance = address(this).balance;\n\nif (balance < 500 ether) {\np = m_7_percent.toMemory();\n} else if ( 500 ether <= balance && balance <= 1500 ether) {\np = m_8_percent.toMemory();\n} else if ( 1500 ether <= balance && balance <= 5000 ether) {\np = m_8_percent.toMemory();\n} else if ( 5000 ether <= balance && balance <= 10000 ether) {\np = m_10_percent.toMemory();\n} else if ( 10000 ether <= balance && balance <= 20000 ether) {\np = m_12_percent.toMemory();\n}\n}\n\nfunction nextWave() private {\nm_investors = new InvestorsStorage();\ninvestmentsNumber = 0;\nwaveStartup = now;\nm_rgp.startAt(now);\nemit LogRGPInit(now , m_rgp.startTimestamp, m_rgp.maxDailyTotalInvestment, m_rgp.activityDays);\nemit LogNextWave(now);\n}\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"privateEntranceProvideAccessFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"disqualifyAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rev1StorageAddr\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvesment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddr\",\"type\":\"address\"}],\"name\":\"investorDividendsAtNow\",\"outputs\":[{\"name\":\"dividends\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rapidGrowthProtectionmMaxInvestmentAtNow\",\"outputs\":[{\"name\":\"investment\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisingPercent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminsPercent\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdminsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentsNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyPercentAtNow\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdvertisingAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMyDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"doInvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddr\",\"type\":\"address\"}],\"name\":\"investorInfo\",\"outputs\":[{\"name\":\"investment\",\"type\":\"uint256\"},{\"name\":\"paymentTime\",\"type\":\"uint256\"},{\"name\":\"isReferral\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waveStartup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doDisown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rev1Storage\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rev2Storage\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"investorMaxInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"LogPEInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"excess\",\"type\":\"uint256\"}],\"name\":\"LogSendExcessOfEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refBonus\",\"type\":\"uint256\"}],\"name\":\"LogNewReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxDailyTotalInvestment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"activityDays\",\"type\":\"uint256\"}],\"name\":\"LogRGPInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"LogRGPInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogNewInvesment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"LogAutomaticReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividends\",\"type\":\"uint256\"}],\"name\":\"LogPayDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"LogNewInvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"LogNextWave\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"LogDisown\",\"type\":\"event\"}]",
  "bytecode": "606f608081905261271060a0819052601091909155601181905561022b60c081905260e082905260125560138190556103096101008190526101208290526014819055601582905561037861014081905261016083905260165560178290556103e761018081905260646101a08190526018919091556019819055600a6101c08190526101e0829052601a819055601b829055600b610200819052610220839052601c55601d829055600c610240819052610260839052601e55601f8290556102808390526102a0849052602083905560218490556102c08390526102e084905260229290925560239290925561030081905261032082905260248190556025829055600561034081905261036083905260265560278290556103c06040526103808190526103a08290526028556029553480156200013d57600080fd5b506000805433600160a060020a03199182168117909255600d8054821683179055600c805490911690911790556200017d64010000000062000183810204565b620002e2565b6200018d620002d1565b604051809103906000f080158015620001aa573d6000803e3d6000fd5b50600b8054600160a060020a031916600160a060020a03929092169190911790556000600e5542600f819055620001f29060019064010000000062000279810262001e981704565b6001546002546003546040805142815260208101949094528381019290925260ff166060830152517f16171a4e996b33ebb6320397242a4168f60c16e87fbd8b58f1744d68c4179caf9181900360800190a16040805142815290517fc66870ef5f6257a76295d443e9221488043ec691f830f6c6128755c3518e3c759181900360200190a1565b80825560015b600283015460ff90811690821611620002cc5760ff8116600090815260038401602052604090205415620002c35760ff811660009081526003840160205260408120555b6001016200027f565b505050565b6040516104c6806200273883390190565b61244680620002f26000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306127a11811461018657806315aa6833146101db5780631686531a146101fc578063399ae7241461022d5780633d7ac9f81461025157806362d2c55514610278578063653c31741461028d57806373ad468a146102a2578063900334b1146102b757806390b0636f146102d85780639396df32146102ed57806395a23c3a1461031b578063984d4a93146103305780639ec6e05414610351578063b8fde2a414610366578063cb192f2c1461037b578063d50030ad1461039c578063d82fa3f1146103b1578063dbcbaca4146103c5578063eafecc7a14610406578063ecbdbb321461041b578063fc7c41af14610430575b61013034610445565b156101425761013d61044d565b610184565b61018461017f6000368080601f0160208091040260200160405190810160405280939291908181526020018383808284375061069d945050505050565b6106a4565b005b34801561019257600080fd5b5060408051602060048035808201358381028086018501909652808552610184953695939460249493850192918291850190849080828437509497506110169650505050505050565b3480156101e757600080fd5b50610184600160a060020a036004351661107a565b34801561020857600080fd5b50610211611161565b60408051600160a060020a039092168252519081900360200190f35b34801561023957600080fd5b50610184600160a060020a0360043516602435611170565b34801561025d57600080fd5b506102666112d5565b60408051918252519081900360200190f35b34801561028457600080fd5b506102116112e0565b34801561029957600080fd5b506102666112ef565b3480156102ae57600080fd5b5061026661137f565b3480156102c357600080fd5b50610266600160a060020a036004351661138e565b3480156102e457600080fd5b5061026661139f565b3480156102f957600080fd5b506103026113b0565b6040805192835260208301919091528051918290030190f35b34801561032757600080fd5b506103026113ba565b34801561033c57600080fd5b50610184600160a060020a03600435166113c4565b34801561035d57600080fd5b50610266611455565b34801561037257600080fd5b5061030261145b565b34801561038757600080fd5b50610184600160a060020a0360043516611480565b3480156103a857600080fd5b5061018461044d565b610184600160a060020a03600435166106a4565b3480156103d157600080fd5b506103e6600160a060020a0360043516611511565b604080519384526020840192909252151582820152519081900360600190f35b34801561041257600080fd5b506102666115d7565b34801561042757600080fd5b506102666115dd565b34801561043c57600080fd5b506101846115e2565b80155b919050565b60006104583361166f565b15156104ae576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c792065787465726e616c6c79206163636f756e74730000000000000000604482015290519081900360640190fd5b620151806104cf6104be3361167b565b60200151429063ffffffff61173f16565b116104d957600080fd5b6104e23361175d565b90506104ed8161180f565b1515610543576040805160e560020a62461bcd02815260206004820152601c60248201527f63616e6e6f7420746f20706179207a65726f206469766964656e647300000000604482015290519081900360640190fd5b600b54604080517f440135850000000000000000000000000000000000000000000000000000000081523360048201524260248201529051600160a060020a03909216916344013585916044808201926020929091908290030181600087803b1580156105af57600080fd5b505af11580156105c3573d6000803e3d6000fd5b505050506040513d60208110156105d957600080fd5b505115156105e357fe5b303181106105f7576105f3611814565b5030315b604051339082156108fc029083906000818181858888f19350505050158015610624573d6000803e3d6000fd5b506040805142815260208101839052815133927f6710e0cad56444677ac916513b384a4acc6501cfb5219f59657ad4ddffef9d60928290030190a2604080514281523031602082015281517f32367fddaa1baa1c6a0fc5c3e8284df724bacc7b50e847c32c9f9765f9f96137929181900390910190a150565b6014015190565b600080808080808080806106b73361166f565b151561070d576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c792065787465726e616c6c79206163636f756e74730000000000000000604482015290519081900360640190fd5b349850889750662386f26fc10000881015610798576040805160e560020a62461bcd02815260206004820152602260248201527f696e766573746d656e74206d757374206265203e3d206d696e496e7665736d6560448201527f6e74000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6a1b8b8c9e000e82a4800000303111156107fc576040805160e560020a62461bcd02815260206004820152601e60248201527f74686520636f6e7472616374206574682062616c616e6365206c696d69740000604482015290519081900360640190fd5b6108066001611904565b1561088e57610815600161192f565b9650610820876119a9565b61082a8988611a00565b985061083d60018a63ffffffff611a1816565b151561084557fe5b61084f6001611a95565b60408051428152602081018c9052815133927f21cd51cc98547f9914bc0b314a40e645408acad21d1289eecb4dfb534fda7cfc928290030190a36108c6565b6108986005611abf565b156108c6576108ae60053363ffffffff611ac816565b95506108b9866119a9565b6108c38987611a00565b98505b8888111561094e576040518989039550339086156108fc029087906000818181858888f19350505050158015610900573d6000803e3d6000fd5b50604080514281523460208201528082018b90526060810187905290518a995033917faac472d912a7451062b64c942775db41d65cce271603099e1c4760e072050951919081900360800190a25b600c54600160a060020a03166108fc61096e60288b63ffffffff611c5d16565b6040518115909202916000818181858888f19350505050158015610996573d6000803e3d6000fd5b50600d54600160a060020a03166108fc6109b760268b63ffffffff611c5d16565b6040518115909202916000818181858888f193505050501580156109df573d6000803e3d6000fd5b50600b54604080517fcee2a9cf0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163cee2a9cf916024808201926020929091908290030181600087803b158015610a4657600080fd5b505af1158015610a5a573d6000803e3d6000fd5b505050506040513d6020811015610a7057600080fd5b50519350610a86600160a060020a038b16611c88565b8015610a90575083155b8015610aac5750336000908152600a602052604090205460ff16155b8015610ac15750600160a060020a038a163314155b8015610b5d5750600b54604080517fcee2a9cf000000000000000000000000000000000000000000000000000000008152600160a060020a038d811660048301529151919092169163cee2a9cf9160248083019260209291908290030181600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b505050506040513d6020811015610b5a57600080fd5b50515b15610cf957336000908152600a6020908152604091829020805460ff191660011790558151808301909252602254825260235490820152610ba4908a63ffffffff611c9616565b9250678ac7230489e80000891115610be0576040805180820190915260245481526025546020820152610bdd908a63ffffffff611c9616565b92505b6040805180820190915260208054825260215490820152610c07908a63ffffffff611c9616565b600b54604080517f20987e64000000000000000000000000000000000000000000000000000000008152600160a060020a038e811660048301526024820188905291519395509116916320987e64916044808201926020929091908290030181600087803b158015610c7857600080fd5b505af1158015610c8c573d6000803e3d6000fd5b505050506040513d6020811015610ca257600080fd5b50511515610cac57fe5b604080514281526020810184905281519a84019a600160a060020a038d169233927fc04fb14bddd876003a335c37b1fe6524ac1dbf74eb64dd08cd085fba4b97d592929081900390910190a35b610d023361175d565b9050838015610d155750610d158161180f565b15610d5957604080514281526020810183905281519a83019a33927f149822e3a65d38c9b6f40e835864c61ef5ca0866219afc2db638e3f85ae78866928290030190a25b8315610ea557600b54604080517f20987e64000000000000000000000000000000000000000000000000000000008152336004820152602481018c90529051600160a060020a03909216916320987e64916044808201926020929091908290030181600087803b158015610dcc57600080fd5b505af1158015610de0573d6000803e3d6000fd5b505050506040513d6020811015610df657600080fd5b50511515610e0057fe5b600b54604080517f440135850000000000000000000000000000000000000000000000000000000081523360048201524260248201529051600160a060020a03909216916344013585916044808201926020929091908290030181600087803b158015610e6c57600080fd5b505af1158015610e80573d6000803e3d6000fd5b505050506040513d6020811015610e9657600080fd5b50511515610ea057fe5b610f83565b600b54604080517f41b2121c000000000000000000000000000000000000000000000000000000008152336004820152602481018c90524260448201529051600160a060020a03909216916341b2121c916064808201926020929091908290030181600087803b158015610f1857600080fd5b505af1158015610f2c573d6000803e3d6000fd5b505050506040513d6020811015610f4257600080fd5b50511515610f4c57fe5b60408051428152905133917fc8616cf56c542aa2540734215ee474180fc3b9cc7c2fad288000504632cacf18919081900360200190a25b600e8054600101905560408051428152602081018b90528082018a9052905133917fd5a986028ae9e04f72859f7d3c1d8ae8b649c26be5b99d4c2d98ca4a19a0502e919081900360600190a2604080514281523031602082015281517f32367fddaa1baa1c6a0fc5c3e8284df724bacc7b50e847c32c9f9765f9f96137929181900390910190a150505050505050505050565b600054600160a060020a03163314611066576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206123fb833981519152604482015290519081900360640190fd5b61107760058263ffffffff611cb916565b50565b600054600160a060020a031633146110ca576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206123fb833981519152604482015290519081900360640190fd5b600b54604080517fd597d06f000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529151919092169163d597d06f9160248083019260209291908290030181600087803b15801561113257600080fd5b505af1158015611146573d6000803e3d6000fd5b505050506040513d602081101561115c57600080fd5b505050565b600c54600160a060020a031681565b600054600160a060020a031633146111c0576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206123fb833981519152604482015290519081900360640190fd5b600180820190819055681b1ae4d6e2ef50000060028190556003805460ff1916601517908190556040805142815260208101949094528381019290925260ff166060830152517f16171a4e996b33ebb6320397242a4168f60c16e87fbd8b58f1744d68c4179caf9181900360800190a160058054600160a060020a0380851673ffffffffffffffffffffffffffffffffffffffff199283161792839055600b546006805490931690821617918290556802b5e3af16b1880000600781905560088590556040805142815294831660208601529290911683830152606083015260808201839052517f7e13d111fea1199cb6fb21cb38766240cfad970317820e8e5713da7a708285309181900360a00190a15050565b662386f26fc1000081565b600d54600160a060020a031681565b600b54604080517f949d225d0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163949d225d91600480830192602092919082900301818787803b15801561134e57600080fd5b505af1158015611362573d6000803e3d6000fd5b505050506040513d602081101561137857600080fd5b5051905090565b6a1b8b8c9e000e82a480000081565b60006113998261175d565b92915050565b60006113ab600161192f565b905090565b6028546029549091565b6026546027549091565b600054600160a060020a03163314611414576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206123fb833981519152604482015290519081900360640190fd5b61142681600160a060020a0316611d1d565b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600e5481565b600080611466611f0d565b61146e611d7d565b80516020909101519094909350915050565b600054600160a060020a031633146114d0576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206123fb833981519152604482015290519081900360640190fd5b6114e281600160a060020a0316611d1d565b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600b54604080517fdbcbaca4000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152825160009485948594939091169263dbcbaca4926024808301939282900301818787803b15801561157b57600080fd5b505af115801561158f573d6000803e3d6000fd5b505050506040513d60408110156115a557600080fd5b508051602091820151600160a060020a039096166000908152600a909252604090912054909560ff9091169350915050565b600f5481565b303190565b600054600160a060020a03163314611632576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206123fb833981519152604482015290519081900360640190fd5b61163a611e79565b6040805142815290517f5189687a7ec9d4aebe2f548f952ffbbad19e4cd545c4a05b5e2369cd272dd5519181900360200190a1565b803b8015905b50919050565b611683611f0d565b600b54604080517fdbcbaca4000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301528251600094859492169263dbcbaca492602480830193919282900301818787803b1580156116ea57600080fd5b505af11580156116fe573d6000803e3d6000fd5b505050506040513d604081101561171457600080fd5b50805160209182015160408051808201909152828152928301819052919450925090505b5050919050565b6000808383111561174f57600080fd5b5050808203805b5092915050565b6000611767611f0d565b61176f611f0d565b6117788461167b565b91506117878260000151610445565b806117a957506102586117a783602001514261173f90919063ffffffff16565b105b156117b75760009250611738565b6117bf611d7d565b82519091506090906117d890839063ffffffff611c9616565b6102586117f285602001514261173f90919063ffffffff16565b8115156117fb57fe5b040281151561180657fe5b04949350505050565b151590565b61181c611f24565b604051809103906000f080158015611838573d6000803e3d6000fd5b50600b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556000600e5542600f81905561187d90600190611e98565b6001546002546003546040805142815260208101949094528381019290925260ff166060830152517f16171a4e996b33ebb6320397242a4168f60c16e87fbd8b58f1744d68c4179caf9181900360800190a16040805142815290517fc66870ef5f6257a76295d443e9221488043ec691f830f6c6128755c3518e3c759181900360200190a1565b60008061191083611a95565b905080158015906119285750600283015460ff168111155b9392505050565b60008061193b83611a95565b90508015806119505750600283015460ff1681115b1561195e5760009150611675565b600183015460ff82166000908152600385016020526040902054106119865760009150611675565b60ff81166000908152600384016020526040902054600184015403915050919050565b801515611077576040805160e560020a62461bcd02815260206004820152601660248201527f72657175697265206e6f74207a65726f2076616c756500000000000000000000604482015290519081900360640190fd5b600081831115611a11575080611399565b5090919050565b600080611a2484611a95565b9050801580611a395750600284015460ff1681115b15611a475760009150611756565b600184015460ff8216600090815260038601602052604090205484011115611a725760009150611756565b60ff16600090815260039390930160205250604090912080549091019055600190565b60004282600001541115611aab57506000610448565b815462015180904203046001019050919050565b60030154421090565b600160a060020a03811660009081526004830160205260408120548190819060ff161515611af95760009250611c55565b8454604080517f993d3489000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152825193169263993d3489926024808401939192918290030181600087803b158015611b5c57600080fd5b505af1158015611b70573d6000803e3d6000fd5b505050506040513d6040811015611b8657600080fd5b50519150811515611b9a5760009250611c55565b611ba8828660020154611a00565b6001860154604080517fdbcbaca4000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015282519496509092169263dbcbaca49260248082019392918290030181600087803b158015611c1157600080fd5b505af1158015611c25573d6000803e3d6000fd5b505050506040513d6040811015611c3b57600080fd5b50519050818110611c4f5760009250611c55565b80820392505b505092915050565b6000811515611c6e57506000611399565b600183015483548302811515611c8057fe5b049392505050565b600160a060020a0316151590565b6000811515611ca757506000611399565b602083015183518302811515611c8057fe5b60005b81518161ffff16101561115c576001836004016000848461ffff16815181101515611ce357fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff1916911515919091179055600101611cbc565b600160a060020a0381161515611077576040805160e560020a62461bcd02815260206004820152601860248201527f72657175697265206e6f74207a65726f20616464726573730000000000000000604482015290519081900360640190fd5b611d85611f0d565b3031681b1ae4d6e2ef500000811015611da957611da26014611ee8565b9150611e75565b80681b1ae4d6e2ef50000011158015611dcb5750685150ae84a8cdf000008111155b15611dda57611da26016611ee8565b80685150ae84a8cdf0000011158015611dfd575069010f0cf064dd592000008111155b15611e0c57611da26016611ee8565b8069010f0cf064dd5920000011158015611e30575069021e19e0c9bab24000008111155b15611e3f57611da2601a611ee8565b8069021e19e0c9bab240000011158015611e63575069043c33c19375648000008111155b15611e7557611e72601e611ee8565b91505b5090565b6000805473ffffffffffffffffffffffffffffffffffffffff19169055565b80825560015b600283015460ff9081169082161161115c5760ff8116600090815260038401602052604090205415611ee05760ff811660009081526003840160205260408120555b600101611e9e565b611ef0611f0d565b506040805180820190915281548152600190910154602082015290565b604080518082019091526000808252602082015290565b6040516104c680611f35833901905600608060405260008054600160a060020a031916331790556104a1806100256000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166320987e64811461008757806341b2121c146100bf57806344013585146100e6578063949d225d1461010a578063cee2a9cf14610131578063d597d06f14610152578063dbcbaca414610173575b600080fd5b34801561009357600080fd5b506100ab600160a060020a03600435166024356101ad565b604080519115158252519081900360200190f35b3480156100cb57600080fd5b506100ab600160a060020a036004351660243560443561024d565b3480156100f257600080fd5b506100ab600160a060020a03600435166024356102f0565b34801561011657600080fd5b5061011f61038f565b60408051918252519081900360200190f35b34801561013d57600080fd5b506100ab600160a060020a0360043516610395565b34801561015e57600080fd5b506100ab600160a060020a03600435166103b5565b34801561017f57600080fd5b50610194600160a060020a0360043516610432565b6040805192835260208301919091528051918290030190f35b60008054600160a060020a031633146101fe576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610456833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054151561022557506000610247565b50600160a060020a038216600090815260026020526040902080548201905560015b92915050565b600080548190600160a060020a031633146102a0576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610456833981519152604482015290519081900360640190fd5b50600160a060020a038416600090815260026020526040902080541515806102c6575083155b156102d457600091506102e8565b838155600180820184905580548101815591505b509392505050565b60008054600160a060020a03163314610341576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610456833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054151561036857506000610247565b50600160a060020a0382166000908152600260205260409020600190810182905592915050565b60015481565b600160a060020a038116600090815260026020526040812054115b919050565b60008054600160a060020a03163314610406576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610456833981519152604482015290519081900360640190fd5b61040f82610395565b156103b057600160a060020a038216600090815260026020526040812055919050565b600160a060020a031660009081526002602052604090208054600190910154909156006163636573732064656e69656400000000000000000000000000000000000000a165627a7a72305820cb7c46fe8c043de110a611037699fda75a7ff371a63f3283acc35774bb3523f200296163636573732064656e69656400000000000000000000000000000000000000a165627a7a72305820713fb24654dddacbe69bd9a8363ebd71296da26d49d120d049583f900569e0c50029608060405260008054600160a060020a031916331790556104a1806100256000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166320987e64811461008757806341b2121c146100bf57806344013585146100e6578063949d225d1461010a578063cee2a9cf14610131578063d597d06f14610152578063dbcbaca414610173575b600080fd5b34801561009357600080fd5b506100ab600160a060020a03600435166024356101ad565b604080519115158252519081900360200190f35b3480156100cb57600080fd5b506100ab600160a060020a036004351660243560443561024d565b3480156100f257600080fd5b506100ab600160a060020a03600435166024356102f0565b34801561011657600080fd5b5061011f61038f565b60408051918252519081900360200190f35b34801561013d57600080fd5b506100ab600160a060020a0360043516610395565b34801561015e57600080fd5b506100ab600160a060020a03600435166103b5565b34801561017f57600080fd5b50610194600160a060020a0360043516610432565b6040805192835260208301919091528051918290030190f35b60008054600160a060020a031633146101fe576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610456833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054151561022557506000610247565b50600160a060020a038216600090815260026020526040902080548201905560015b92915050565b600080548190600160a060020a031633146102a0576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610456833981519152604482015290519081900360640190fd5b50600160a060020a038416600090815260026020526040902080541515806102c6575083155b156102d457600091506102e8565b838155600180820184905580548101815591505b509392505050565b60008054600160a060020a03163314610341576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610456833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054151561036857506000610247565b50600160a060020a0382166000908152600260205260409020600190810182905592915050565b60015481565b600160a060020a038116600090815260026020526040812054115b919050565b60008054600160a060020a03163314610406576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020610456833981519152604482015290519081900360640190fd5b61040f82610395565b156103b057600160a060020a038216600090815260026020526040812055919050565b600160a060020a031660009081526002602052604090208054600190910154909156006163636573732064656e69656400000000000000000000000000000000000000a165627a7a72305820cb7c46fe8c043de110a611037699fda75a7ff371a63f3283acc35774bb3523f20029"
}