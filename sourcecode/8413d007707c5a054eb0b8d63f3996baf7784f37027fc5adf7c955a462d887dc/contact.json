{
  "address": "0x0a9a9ce600d08bf9b76f49fa4e7b38a67ebeb1e6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GrowToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-05\n*/\n\npragma solidity ^0.4.18;\ninterface tokenRecipient{\n    function receiveApproval(address _from,uint256 _value,address _token,bytes _extraData) external ;\n}\ncontract GrowToken{\n    //public var\n    address public owner;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    uint256 public sellPrice; //grow to wei not eth!\n    uint256 public buyPrice;\n    bool public sellOpen;\n    bool public buyOpen;\n    \n    //store token data set\n    mapping(address => uint256) public balanceOf;\n    //transition limite\n    mapping(address => mapping(address => uint256)) public allowance;\n    //freeze account \n    mapping(address=>bool) public frozenAccount;\n    \n    //event for transition\n    event Transfer(address indexed from,address indexed to , uint256 value);\n    //event for allowance\n    event Approval(address indexed owner,address indexed spender,uint256 value);\n    //event for freeze/unfreeze Account \n    event FrozenFunds(address target,bool freeze);\n    //TODO event for sell token , do't need it now\n    event SellToken(address seller,uint256 sellPrice, uint256 amount,uint256 getEth);\n    //TODO event for buy token , do't need it now \n    event BuyToken(address buyer,uint256 buyPrice,uint256 amount,uint256 spendEth);\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    //func constructor\n    function GrowToken() public {\n        owner = 0x757D7FbB9822b5033a6BBD4e17F95714942f921f;\n        name = \"GROWCHAIN\";\n        symbol = \"GROW\";\n        decimals = 8;\n        totalSupply = 5000000000 * 10 ** uint256(8);\n        \n        //init totalSupply to map(db)\n        balanceOf[owner] = totalSupply;\n    }\n    \n function () public payable {  \n     if(msg.sender!=owner){\n         _buy();    \n     }\n }\n \n    // public functions\n    // 1 Transfer tokens \n    function transfer(address _to,uint256 _value) public{\n        require(!frozenAccount[msg.sender]);\n        if(_to == address(this)){\n          _sell(msg.sender,_value);\n        }else{\n            _transfer(msg.sender,_to,_value);\n        }\n    }\n    \n    // 2 Transfer Other's tokens ,who had approve some token to me \n    function transferFrom(address _from,address _to,uint256 _value) public returns (bool success){\n        //validate the allowance \n        require(!frozenAccount[_from]&&!frozenAccount[msg.sender]);\n        require(_value<=allowance[_from][msg.sender]);\n        //do action :sub allowance and do transfer \n        allowance[_from][msg.sender] -= _value;\n        if(_to == address(this)){\n            _sell(_from,_value);\n        }else\n        {\n            _transfer(_from,_to,_value);\n        }\n        \n        return true;\n    }\n    //A is msg.sender or i \n    //B is the person who has approve me to use his token or _from \n    //C is the receipient or _to\n    \n    // 3 set allowance for other address,like B approve A(_spender) to use his token\n    function approve(address _spender,uint256 _value) public returns (bool success){\n        require(!frozenAccount[msg.sender]);\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n    // 4 allowance and notify the receipient/spender \n    function approveAndCall(address _spender,uint256 _value,bytes _extraData)\n    public returns (bool success){\n        require(!frozenAccount[msg.sender]);\n        tokenRecipient spender = tokenRecipient(_spender);\n        if(approve(_spender,_value)){\n            spender.receiveApproval(msg.sender,_value,this,_extraData);\n            return true;\n        }\n    }\n    \n    // onlyOwner function \n    // 11 freeze or unfreeze account \n    function freezeAccount(address target,bool freeze)  onlyOwner public{\n        require(target!=owner);\n        frozenAccount[target] = freeze;\n        FrozenFunds(target,freeze);\n    }\n    // 12 transfer contract  Ownership to newOwner and transfer all balanceOf oldOwner to newOwner\n    function transferOwnership(address newOwner) onlyOwner public{\n        _transfer(owner,newOwner,balanceOf[owner]);\n        owner = newOwner;\n    }\n    // 13 set prices for sellPrice or buyPrice\n    function setPrices(uint256 newSellPrice,uint256 newBuyPrice) onlyOwner public{\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n    // 14 open/close user to  buy token \n    function setBuyOpen(bool newBuyOpen) onlyOwner public{\n        require(buyPrice>0);\n        buyOpen = newBuyOpen;\n    }\n    // 15 open/close user to  sell token \n    function setSellOpen(bool newSellOpen) onlyOwner public{\n        require(sellPrice>0);\n        sellOpen = newSellOpen;\n    }\n    // 16 transfer eth back to owner \n    function transferEth(uint256 amount) onlyOwner public{\n        msg.sender.transfer(amount*10**uint256(18));\n    }\n    \n    //internal transfer function\n // 1 _transfer\n    function _transfer(address _from,address _to, uint256 _value) internal {\n        //validate input and other internal limites\n        require(_to != 0x0);//check to address\n        require(balanceOf[_from] >= _value);//check from address has enough balance \n        require(balanceOf[_to] + _value >balanceOf[_to]);//after transfer the balance of _to address is ok ,no overflow\n        uint256 previousBalances = balanceOf[_from]+balanceOf[_to];//store it for add asset to power the security\n        //do transfer:sub from _from address,and add to the _to address\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        //after transfer: emit transfer event,and add asset for security\n        Transfer(_from,_to,_value);\n        assert(balanceOf[_from]+balanceOf[_to] == previousBalances);\n    }\n // 2 _buy \n    function _buy() internal returns (uint256 amount){\n        require(buyOpen);\n        require(buyPrice>0);\n        require(msg.value>0);\n        amount = msg.value / buyPrice;                    // calculates the amount\n        _transfer(owner,msg.sender,amount);\n        BuyToken(msg.sender,buyPrice,amount,msg.value);\n        return amount;                                    // ends function and returns\n    }\n    \n    // 3 _sell \n    function _sell(address _from,uint256 amount) internal returns (uint256 revenue){\n        require(sellOpen);\n        require(!frozenAccount[_from]);\n        require(amount>0);\n        require(sellPrice>0);\n        require(_from!=owner);\n        _transfer(_from,owner,amount);\n        revenue = amount * sellPrice;\n        _from.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        SellToken(_from,sellPrice,amount,revenue);\n        return revenue;                                   // ends function and returns\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSellOpen\",\"type\":\"bool\"}],\"name\":\"setSellOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyOpen\",\"type\":\"bool\"}],\"name\":\"setBuyOpen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"getEth\",\"type\":\"uint256\"}],\"name\":\"SellToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"spendEth\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"}]",
  "bytecode": ""
}