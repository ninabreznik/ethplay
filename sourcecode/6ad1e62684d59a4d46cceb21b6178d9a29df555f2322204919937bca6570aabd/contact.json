{
  "address": "0x21ba33aa471aa8a4f4cb916048bf60a96990c256",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DoubleProfit",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-11\n*/\n\npragma solidity ^0.4.24;\n\n\ncontract DoubleProfit {\n    using SafeMath for uint256;\n    struct Investor {\n        uint256 deposit;\n        uint256 paymentTime;\n        uint256 withdrawals;\n        bool insured;\n    }\n    uint public countOfInvestors;\n    mapping (address => Investor) public investors;\n\n    uint256 public minimum = 0.01 ether;\n    uint step = 5 minutes;\n    uint ownerPercent = 2;\n    uint promotionPercent = 8;\n    uint insurancePercent = 2;\n    bool public closed = false;\n\n    address public ownerAddress = 0x8462372F80b8f1230E2de9e29D173607b8EE6F99;\n    address public promotionAddress = 0xefa08884C1e9f7A4A3F87F5134E9D8fe5309Fb59;\n    address public insuranceFundAddress;\n\n    DPInsuranceFund IFContract;\n\n    event Invest(address indexed investor, uint256 amount);\n    event Withdraw(address indexed investor, uint256 amount);\n    event UserDelete(address indexed investor);\n    event ReturnOfDeposit(address indexed investor, uint256 difference);\n\n    /**\n    * @dev Modifier for access from the InsuranceFund\n    */\n    modifier onlyIF() {\n        require(insuranceFundAddress == msg.sender, \"access denied\");\n        _;\n    }\n\n    /**\n    * @dev  Setter the InsuranceFund address. Address can be set only once.\n    * @param _insuranceFundAddress Address of the InsuranceFund\n    */\n    function setInsuranceFundAddress(address _insuranceFundAddress) public{\n        require(insuranceFundAddress == address(0x0));\n        insuranceFundAddress = _insuranceFundAddress;\n        IFContract = DPInsuranceFund(insuranceFundAddress);\n    }\n\n    /**\n    * @dev  Set insured from the InsuranceFund.\n    * @param _address Investor's address\n    * @return Object of investor's information\n    */\n    function setInsured(address _address) public onlyIF returns(uint256, uint256, bool){\n        Investor storage investor = investors[_address];\n        investor.insured = true;\n        return (investor.deposit, investor.withdrawals, investor.insured);\n    }\n\n    /**\n    * @dev  Function for close entrance.\n    */\n    function closeEntrance() public {\n        require(address(this).balance < 0.1 ether && !closed);\n        closed = true;\n    }\n\n    /**\n    * @dev Get percent depends on balance of contract\n    * @return Percent\n    */\n    function getPhasePercent() view public returns (uint){\n        uint contractBalance = address(this).balance;\n\n        if (contractBalance >= 5000 ether) {\n            return(88);\n        }\n        if (contractBalance >= 2500 ether) {\n            return(75);\n        }\n        if (contractBalance >= 1000 ether) {\n            return(60);\n        }\n        if (contractBalance >= 500 ether) {\n            return(50);\n        }\n        if (contractBalance >= 100 ether) {\n            return(42);\n        } else {\n            return(35);\n        }\n\n    }\n\n    /**\n    * @dev Allocation budgets\n    */\n    function allocation() private{\n        ownerAddress.transfer(msg.value.mul(ownerPercent).div(100));\n        promotionAddress.transfer(msg.value.mul(promotionPercent).div(100));\n        insuranceFundAddress.transfer(msg.value.mul(insurancePercent).div(100));\n    }\n\n    /**\n    * @dev Evaluate current balance\n    * @param _address Address of investor\n    * @return Payout amount\n    */\n    function getUserBalance(address _address) view public returns (uint256) {\n        Investor storage investor = investors[_address];\n        uint percent = getPhasePercent();\n        uint256 differentTime = now.sub(investor.paymentTime).div(step);\n        uint256 differentPercent = investor.deposit.mul(percent).div(1000);\n        uint256 payout = differentPercent.mul(differentTime).div(288);\n\n        return payout;\n    }\n\n    /**\n    * @dev Withdraw profit from contract. Investor will be deleted if he will try withdraw after received x2\n    */\n    function withdraw() private {\n        Investor storage investor = investors[msg.sender];\n        uint256 balance = getUserBalance(msg.sender);\n        if (investor.deposit > 0 && address(this).balance > balance && balance > 0) {\n            uint256 tempWithdrawals = investor.withdrawals;\n\n            investor.withdrawals = investor.withdrawals.add(balance);\n            investor.paymentTime = now;\n\n            if (investor.withdrawals >= investor.deposit.mul(2)){\n                investor.deposit = 0;\n                investor.paymentTime = 0;\n                investor.withdrawals = 0;\n                countOfInvestors--;\n                if (investor.insured)\n                    IFContract.deleteInsured(msg.sender);\n                investor.insured = false;\n                emit UserDelete(msg.sender);\n            } else {\n                if (investor.insured && tempWithdrawals < investor.deposit){\n                    IFContract.setInfo(msg.sender, investor.deposit, investor.withdrawals);\n                }\n            }\n            msg.sender.transfer(balance);\n            emit Withdraw(msg.sender, balance);\n        }\n\n    }\n\n    /**\n    * @dev  Payable function for\n    * - receive funds (send minimum 0.01 ETH),\n    * - calm your profit (send 0 ETH)\n    * - withdraw deposit (send 0.00000112 ether)\n    */\n    function () external payable {\n        require(!closed);\n        Investor storage investor = investors[msg.sender];\n        if (msg.value >= minimum){\n\n            if (investor.deposit == 0){\n                countOfInvestors++;\n            } else {\n                withdraw();\n            }\n\n            investor.deposit = investor.deposit.add(msg.value);\n            investor.paymentTime = now;\n\n            if (investor.insured){\n                IFContract.setInfo(msg.sender, investor.deposit, investor.withdrawals);\n            }\n            allocation();\n            emit Invest(msg.sender, msg.value);\n        } else if (msg.value == 0.00000112 ether) {\n            returnDeposit();\n        } else {\n            withdraw();\n        }\n    }\n\n    /**\n    * @dev  Withdraw your deposit from the project\n    */\n    function returnDeposit() private {\n        Investor storage investor = investors[msg.sender];\n        require(investor.deposit > 0);\n        withdraw();\n        uint withdrawalAmount = investor.deposit.sub(investor.withdrawals).sub(investor.deposit.mul(ownerPercent + promotionPercent + insurancePercent).div(100));\n        investor.deposit = 0;\n        investor.paymentTime = 0;\n        investor.withdrawals = 0;\n        countOfInvestors--;\n        if (investor.insured)\n            IFContract.deleteInsured(msg.sender);\n        investor.insured = false;\n        emit UserDelete(msg.sender);\n        msg.sender.transfer(withdrawalAmount);\n        emit ReturnOfDeposit(msg.sender, withdrawalAmount);\n    }\n}\n\n\n/**\n * Math operations with safety checks\n */\n library SafeMath {\n\n     function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n         if (_a == 0) {\n             return 0;\n         }\n\n         uint256 c = _a * _b;\n         require(c / _a == _b);\n\n         return c;\n     }\n\n     function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n         require(_b > 0);\n         uint256 c = _a / _b;\n\n         return c;\n     }\n\n     function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n         require(_b <= _a);\n         uint256 c = _a - _b;\n\n         return c;\n     }\n\n     function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n         uint256 c = _a + _b;\n         require(c >= _a);\n\n         return c;\n     }\n\n     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n         require(b != 0);\n         return a % b;\n     }\n }\n\n\n/**\n* It is insurance smart-contract for the DoubleProfit.\n* You can buy insurance for 10% and if you do not take 100% profit when balance of\n* the DoubleProfit will be lesser then 0.01 you can receive part of insurance fund depend on your not received money.\n*\n* To buy insurance:\n* Send to the contract address 10% of your deposit, and you will be accounted to.\n*\n* To receive insurance payout:\n* Send to the contract address 0 ETH, and you will receive part of insurance depend on your not received money.\n* If you already received 100% from your deposit, you will take error.\n*/\ncontract DPInsuranceFund {\n    using SafeMath for uint256;\n\n    /**\n    * @dev Structure for evaluating payout\n    * @param deposit Duplicated from DoubleProfit deposit\n    * @param withdrawals Duplicated from DoubleProfit withdrawals\n    * @param insured Flag for available payout\n    */\n    struct Investor {\n        uint256 deposit;\n        uint256 withdrawals;\n        bool insured;\n    }\n    mapping (address => Investor) public investors;\n    uint public countOfInvestors;\n\n    bool public startOfPayments = false;\n    uint256 public totalSupply;\n\n    uint256 public totalNotReceived;\n    address public DPAddress;\n\n    DoubleProfit DPContract;\n\n    event Paid(address investor, uint256 amount, uint256  notRecieve, uint256  partOfNotReceived);\n    event SetInfo(address investor, uint256  notRecieve, uint256 deposit, uint256 withdrawals);\n\n    /**\n    * @dev  Modifier for access from the DoubleProfit\n    */\n    modifier onlyDP() {\n        require(msg.sender == DPAddress, \"access denied\");\n        _;\n    }\n\n    /**\n    * @dev  Setter the DoubleProfit address. Address can be set only once.\n    * @param _DPAddress Address of the DoubleProfit\n    */\n    function setDPAddress(address _DPAddress) public {\n        require(DPAddress == address(0x0));\n        DPAddress = _DPAddress;\n        DPContract = DoubleProfit(DPAddress);\n    }\n\n    /**\n    * @dev  Private setter info about investor. Can be call if payouts not started.\n    * Needing for evaluating not received total amount without loops.\n    * @param _address Investor's address\n    * @param deposit Investor's deposit\n    * @param withdrawals Investor's withdrawals\n    */\n    function privateSetInfo(address _address, uint256 deposit, uint256 withdrawals) private{\n        if (!startOfPayments) {\n            Investor storage investor = investors[_address];\n\n            if (investor.deposit != deposit){\n                totalNotReceived = totalNotReceived.add(deposit.sub(investor.deposit));\n                investor.deposit = deposit;\n            }\n\n            if (investor.withdrawals != withdrawals){\n                uint256 different;\n\n                if (investor.deposit <= withdrawals){\n                    different = investor.deposit.sub(investor.withdrawals);\n                    if (totalNotReceived >= different && different != 0)\n                        totalNotReceived = totalNotReceived.sub(different);\n                    else\n                        totalNotReceived = 0;\n                    withdrawals = investor.deposit;\n                } else {\n                    different = withdrawals.sub(investor.withdrawals);\n                    if (totalNotReceived >= different)\n                        totalNotReceived = totalNotReceived.sub(different);\n                    else\n                        totalNotReceived = 0;\n\n                }\n            }\n            investor.withdrawals = withdrawals;\n            emit SetInfo(_address, totalNotReceived, investor.deposit, investor.withdrawals);\n        }\n    }\n\n    /**\n    * @dev  Setter info about investor from the DoubleProfit.\n    * @param _address Investor's address\n    * @param deposit Investor's deposit\n    * @param withdrawals Investor's withdrawals\n    */\n    function setInfo(address _address, uint256 deposit, uint256 withdrawals) public onlyDP {\n        privateSetInfo(_address, deposit, withdrawals);\n    }\n\n    /**\n    * @dev  Delete insured from the DoubleProfit.\n    * @param _address Investor's address\n    */\n    function deleteInsured(address _address) public onlyDP {\n        Investor storage investor = investors[_address];\n        investor.deposit = 0;\n        investor.withdrawals = 0;\n        investor.insured = false;\n        countOfInvestors--;\n    }\n\n    /**\n    * @dev  Function for starting payouts and stopping receive funds.\n    */\n    function beginOfPayments() public {\n        require(address(DPAddress).balance < 0.1 ether && !startOfPayments);\n        startOfPayments = true;\n        totalSupply = address(this).balance;\n    }\n\n    /**\n    * @dev  Payable function for receive funds, buying insurance and receive insurance payouts .\n    */\n    function () external payable {\n        Investor storage investor = investors[msg.sender];\n        if (msg.value > 0){\n            require(!startOfPayments);\n            if (msg.sender != DPAddress && msg.value >= 0.1 ether) {\n                require(countOfInvestors.add(1) <= DPContract.countOfInvestors().mul(32).div(100));\n                uint256 deposit;\n                uint256 withdrawals;\n                (deposit, withdrawals, investor.insured) = DPContract.setInsured(msg.sender);\n                require(msg.value >= deposit.div(10) && deposit > 0);\n                if (msg.value > deposit.div(10)) {\n                    msg.sender.transfer(msg.value - deposit.div(10));\n                }\n                countOfInvestors++;\n                privateSetInfo(msg.sender, deposit, withdrawals);\n            }\n        } else if (msg.value == 0){\n            uint256 notReceived = investor.deposit.sub(investor.withdrawals);\n            uint256 partOfNotReceived = notReceived.mul(100).div(totalNotReceived);\n            uint256 payAmount = totalSupply.div(100).mul(partOfNotReceived);\n            require(startOfPayments && investor.insured && notReceived > 0);\n            investor.insured = false;\n            msg.sender.transfer(payAmount);\n            emit Paid(msg.sender, payAmount, notReceived, partOfNotReceived);\n        }\n    }\n}",
  "bytecode": "6080604052662386f26fc10000600290815561012c60035560048190556008600581905560069190915560078054748462372f80b8f1230e2de9e29d173607b8ee6f9900600160a860020a03199091161790558054600160a060020a03191673efa08884c1e9f7a4a3f87f5134e9d8fe5309fb5917905534801561008257600080fd5b50610cb0806100926000396000f3006080604052600436106100b95763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab09fd581146102275780631c729b091461023e57806329dc49281461026557806347734892146102a657806352d6804d146102c757806356685770146102dc578063597e1fb5146102fd5780636f7bc9be146103265780638f84aa091461036f578063b54ba9d9146103a0578063e7c398f5146103b5578063f3f7d633146103ca575b60075460009060ff16156100cc57600080fd5b50336000908152600160205260409020600254341061020157805415156100fb57600080546001019055610103565b6101036103df565b8054610115903463ffffffff61065a16565b8155426001820155600381015460ff16156101be57600a5481546002830154604080517ff9bb86870000000000000000000000000000000000000000000000000000000081523360048201526024810193909352604483019190915251600160a060020a039092169163f9bb86879160648082019260009290919082900301818387803b1580156101a557600080fd5b505af11580156101b9573d6000803e3d6000fd5b505050505b6101c6610677565b60408051348152905133917fd90d253a9de34d2fdd5a75ae49ea17fcb43af32fc8ea08cc6d2341991dd3872e919081900360200190a2610224565b34650104c533c000141561021c57610217610798565b610224565b6102246103df565b50005b34801561023357600080fd5b5061023c610952565b005b34801561024a57600080fd5b50610253610987565b60408051918252519081900360200190f35b34801561027157600080fd5b50610286600160a060020a0360043516610a12565b604080519384526020840192909252151582820152519081900360600190f35b3480156102b257600080fd5b50610253600160a060020a0360043516610ad5565b3480156102d357600080fd5b50610253610b58565b3480156102e857600080fd5b5061023c600160a060020a0360043516610b5e565b34801561030957600080fd5b50610312610bb0565b604080519115158252519081900360200190f35b34801561033257600080fd5b50610347600160a060020a0360043516610bb9565b6040805194855260208501939093528383019190915215156060830152519081900360800190f35b34801561037b57600080fd5b50610384610be4565b60408051600160a060020a039092168252519081900360200190f35b3480156103ac57600080fd5b50610384610bf8565b3480156103c157600080fd5b50610384610c07565b3480156103d657600080fd5b50610253610c16565b3360008181526001602052604081209181906103fa90610ad5565b9150600083600001541180156104105750303182105b801561041c5750600082115b1561065557506002820154610437818363ffffffff61065a16565b60028085019190915542600185015583546104579163ffffffff610c1c16565b60028401541061054357600080845560018401819055600284018190558054600019019055600383015460ff161561050757600a54604080517f40a1bad60000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916340a1bad69160248082019260009290919082900301818387803b1580156104ee57600080fd5b505af1158015610502573d6000803e3d6000fd5b505050505b60038301805460ff1916905560405133907f4735ab4590702f37dab0350e961fbfa30c5c66cda49f02be5d26e7dc5390c4a890600090a26105f0565b600383015460ff1680156105575750825481105b156105f057600a5483546002850154604080517ff9bb86870000000000000000000000000000000000000000000000000000000081523360048201526024810193909352604483019190915251600160a060020a039092169163f9bb86879160648082019260009290919082900301818387803b1580156105d757600080fd5b505af11580156105eb573d6000803e3d6000fd5b505050505b604051339083156108fc029084906000818181858888f1935050505015801561061d573d6000803e3d6000fd5b5060408051838152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a25b505050565b60008282018381101561066c57600080fd5b8091505b5092915050565b600760019054906101000a9004600160a060020a0316600160a060020a03166108fc6106bf60646106b360045434610c1c90919063ffffffff16565b9063ffffffff610c4a16565b6040518115909202916000818181858888f193505050501580156106e7573d6000803e3d6000fd5b50600854600554600160a060020a03909116906108fc90610716906064906106b390349063ffffffff610c1c16565b6040518115909202916000818181858888f1935050505015801561073e573d6000803e3d6000fd5b50600954600654600160a060020a03909116906108fc9061076d906064906106b390349063ffffffff610c1c16565b6040518115909202916000818181858888f19350505050158015610795573d6000803e3d6000fd5b50565b336000908152600160205260408120805490919081106107b757600080fd5b6107bf6103df565b61080a6107e860646106b360065460055460045401018660000154610c1c90919063ffffffff16565b600284015484546107fe9163ffffffff610c6d16565b9063ffffffff610c6d16565b600080845560018401819055600284018190558054600019019055600383015490915060ff16156108b357600a54604080517f40a1bad60000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916340a1bad69160248082019260009290919082900301818387803b15801561089a57600080fd5b505af11580156108ae573d6000803e3d6000fd5b505050505b60038201805460ff1916905560405133907f4735ab4590702f37dab0350e961fbfa30c5c66cda49f02be5d26e7dc5390c4a890600090a2604051339082156108fc029083906000818181858888f19350505050158015610917573d6000803e3d6000fd5b5060408051828152905133917f9d52f30842f9703ea87ae79d2c5fa55b259711a1e497df7e68b663fbf54003d3919081900360200190a25050565b67016345785d8a0000303110801561096d575060075460ff16155b151561097857600080fd5b6007805460ff19166001179055565b6000303169010f0cf064dd5920000081106109a55760589150610a0e565b68878678326eac90000081106109be57604b9150610a0e565b683635c9adc5dea0000081106109d757603c9150610a0e565b681b1ae4d6e2ef50000081106109f05760329150610a0e565b68056bc75e2d631000008110610a0957602a9150610a0e565b602391505b5090565b600954600090819081908190600160a060020a03163314610a9457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6163636573732064656e69656400000000000000000000000000000000000000604482015290519081900360640190fd5b50505050600160a060020a0316600090815260016020819052604090912060038101805460ff19169092179182905580546002909101549092909160ff1690565b600160a060020a038116600090815260016020526040812081808080610af9610987565b9350610b186003546106b3876001015442610c6d90919063ffffffff16565b8554909350610b35906103e8906106b3908763ffffffff610c1c16565b9150610b4d6101206106b3848663ffffffff610c1c16565b979650505050505050565b60025481565b600954600160a060020a031615610b7457600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a039384161791829055600a8054929093169116179055565b60075460ff1681565b6001602081905260009182526040909120805491810154600282015460039092015490919060ff1684565b6007546101009004600160a060020a031681565b600854600160a060020a031681565b600954600160a060020a031681565b60005481565b600080831515610c2f5760009150610670565b50828202828482811515610c3f57fe5b041461066c57600080fd5b600080808311610c5957600080fd5b8284811515610c6457fe5b04949350505050565b60008083831115610c7d57600080fd5b50509003905600a165627a7a72305820abdf48f03a3df0672d1745a5aac5707f3f1edd6de30e85a2ee190c34d5b7afe90029"
}