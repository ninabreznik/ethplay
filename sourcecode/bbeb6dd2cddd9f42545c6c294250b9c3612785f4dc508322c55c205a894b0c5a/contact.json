{
  "address": "0x671077c16f819d629c5ddcc23d730a4a5ab928cd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GFC",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-10\n*/\n\npragma solidity ^0.4.18;\n\n\ncontract Owned {\n    address public owner;\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n\ncontract GFC is Owned {\n\n    string public name;\n    string public symbol;\n    uint8  public decimals;\n    uint256 public totalSupply;\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n    uint minBalanceForAccounts;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => bool) public frozenAccount;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FrozenFunds(address target, bool frozen);\n\n    function GFC(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits, address centralMinter) public {\n        balanceOf[msg.sender] = initialSupply;\n        totalSupply = initialSupply;\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n        if (centralMinter != 0) {owner = centralMinter;}\n    }\n\n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner public {\n        minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n    /* Internal transfer, can only be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);                // Check if the sender has enough\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n    function transfer(address _to, uint256 _value) public {\n        require(!frozenAccount[msg.sender]);\n        if (msg.sender.balance<minBalanceForAccounts) {\n            sell((minBalanceForAccounts-msg.sender.balance)/sellPrice);\n        }\n        _transfer(msg.sender, _to, _value);\n    }\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(0, owner, mintedAmount);\n        emit Transfer(owner, target, mintedAmount);\n    }\n\n\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n\n    function buy() payable public returns (uint amount) {\n        amount = msg.value / buyPrice;\n        require(balanceOf[this] >= amount);\n        balanceOf[msg.sender] += amount;\n        balanceOf[this] -= amount;\n        emit Transfer(this, msg.sender, amount);\n        return amount;\n    }\n\n    function sell(uint amount) public returns (uint revenue) {\n        require(balanceOf[msg.sender] >= amount);\n        balanceOf[this] += amount;\n        balanceOf[msg.sender] -= amount;\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);\n        emit Transfer(msg.sender, this, amount);\n        return revenue;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051610b1c380380610b1c83398101604052808051919060200180518201919060200180518201919060200180519190602001805160008054600160a060020a03191633600160a060020a031690811782558152600860205260409020879055600487905591506001905084805161008c9291602001906100e5565b5060028380516100a09291602001906100e5565b506003805460ff191660ff8416179055600160a060020a038116156100db5760008054600160a060020a031916600160a060020a0383161790555b5050505050610180565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012657805160ff1916838001178555610153565b82800160010185558215610153579182015b82811115610153578251825591602001919060010190610138565b5061015f929150610163565b5090565b61017d91905b8082111561015f5760008155600101610169565b90565b61098d8061018f6000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305fefda781146100f557806306fdde031461011057806318160ddd1461019a578063313ce567146101bf5780634b750334146101e857806370a08231146101fb57806379c650681461021a5780638620410b1461023c5780638da5cb5b1461024f57806395d89b411461027e578063a6f2ae3a14610291578063a9059cbb14610299578063b414d4b6146102bb578063c91d956c146102ee578063e4849b3214610304578063e724529c1461031a578063f2fde38b1461033e575b600080fd5b341561010057600080fd5b61010e60043560243561035d565b005b341561011b57600080fd5b610123610383565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561015f578082015183820152602001610147565b50505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a557600080fd5b6101ad610421565b60405190815260200160405180910390f35b34156101ca57600080fd5b6101d2610427565b60405160ff909116815260200160405180910390f35b34156101f357600080fd5b6101ad610430565b341561020657600080fd5b6101ad600160a060020a0360043516610436565b341561022557600080fd5b61010e600160a060020a0360043516602435610448565b341561024757600080fd5b6101ad6104e7565b341561025a57600080fd5b6102626104ed565b604051600160a060020a03909116815260200160405180910390f35b341561028957600080fd5b6101236104fc565b6101ad610567565b34156102a457600080fd5b61010e600160a060020a03600435166024356105f9565b34156102c657600080fd5b6102da600160a060020a0360043516610668565b604051901515815260200160405180910390f35b34156102f957600080fd5b61010e60043561067d565b341561030f57600080fd5b6101ad6004356106a6565b341561032557600080fd5b61010e600160a060020a03600435166024351515610766565b341561034957600080fd5b61010e600160a060020a03600435166107f2565b60005433600160a060020a0390811691161461037857600080fd5b600591909155600655565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104195780601f106103ee57610100808354040283529160200191610419565b820191906000526020600020905b8154815290600101906020018083116103fc57829003601f168201915b505050505081565b60045481565b60035460ff1681565b60055481565b60086020526000908152604090205481565b60005433600160a060020a0390811691161461046357600080fd5b600160a060020a0380831660009081526008602052604080822080548501905560048054850190558154909216916000805160206109428339815191529084905190815260200160405180910390a3600054600160a060020a0380841691166000805160206109428339815191528360405190815260200160405180910390a35050565b60065481565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104195780601f106103ee57610100808354040283529160200191610419565b60006006543481151561057657fe5b600160a060020a0330166000908152600860205260409020549190049150819010156105a157600080fd5b600160a060020a0333811660008181526008602052604080822080548601905530909316808252908390208054859003905590916000805160206109428339815191529084905190815260200160405180910390a390565b600160a060020a03331660009081526009602052604090205460ff161561061f57600080fd5b60075433600160a060020a03163110156106595761065760055433600160a060020a0316316007540381151561065157fe5b046106a6565b505b61066433838361083c565b5050565b60096020526000908152604090205460ff1681565b60005433600160a060020a0390811691161461069857600080fd5b66038d7ea4c6800002600755565b600160a060020a033316600090815260086020526040812054829010156106cc57600080fd5b50600160a060020a0330811660009081526008602052604080822080548501905533909216808252908290208054849003905560055483029182156108fc0290839051600060405180830381858888f19350505050151561072c57600080fd5b30600160a060020a031633600160a060020a03166000805160206109428339815191528460405190815260200160405180910390a3919050565b60005433600160a060020a0390811691161461078157600080fd5b600160a060020a03821660009081526009602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a0390811691161461080d57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038216151561085157600080fd5b600160a060020a0383166000908152600860205260409020548190101561087757600080fd5b600160a060020a0382166000908152600860205260409020548181011161089d57600080fd5b600160a060020a03831660009081526009602052604090205460ff16156108c357600080fd5b600160a060020a03821660009081526009602052604090205460ff16156108e957600080fd5b600160a060020a038084166000818152600860205260408082208054869003905592851680825290839020805485019055916000805160206109428339815191529084905190815260200160405180910390a35050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058208fe21d7f23f14150c5e50265cf23c4b0ce8bd8855ffc514cc4b44af3dcf184c600290000000000000000000000000000000000000000204fce5e3e2502611000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000065cba79aaf3620fec30d43c1c964f45b52ab62f10000000000000000000000000000000000000000000000000000000000000013476f6c64656e20466f7274756e6520436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034746430000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000204fce5e3e2502611000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000065cba79aaf3620fec30d43c1c964f45b52ab62f10000000000000000000000000000000000000000000000000000000000000013476f6c64656e20466f7274756e6520436f696e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034746430000000000000000000000000000000000000000000000000000000000"
}