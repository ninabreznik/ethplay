{
  "address": "0x240f9f86b1465bf1b8eb29bc88cbf65573dfdd97",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Polymath: Security Token Registry Proxy",
  "contractName": "SecurityTokenRegistryProxy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-10\n*/\n\npragma solidity ^0.4.24;\n\ncontract EternalStorage {\n\n    /// @notice Internal mappings used to store all kinds on data into the contract\n    mapping(bytes32 => uint256) internal uintStorage;\n    mapping(bytes32 => string) internal stringStorage;\n    mapping(bytes32 => address) internal addressStorage;\n    mapping(bytes32 => bytes) internal bytesStorage;\n    mapping(bytes32 => bool) internal boolStorage;\n    mapping(bytes32 => int256) internal intStorage;\n    mapping(bytes32 => bytes32) internal bytes32Storage;\n\n    /// @notice Internal mappings used to store arrays of different data types\n    mapping(bytes32 => bytes32[]) internal bytes32ArrayStorage;\n    mapping(bytes32 => uint256[]) internal uintArrayStorage;\n    mapping(bytes32 => address[]) internal addressArrayStorage;\n    mapping(bytes32 => string[]) internal stringArrayStorage;\n\n    //////////////////\n    //// set functions\n    //////////////////\n    /// @notice Set the key values using the Overloaded `set` functions\n    /// Ex- string version = \"0.0.1\"; replace to\n    /// set(keccak256(abi.encodePacked(\"version\"), \"0.0.1\");\n    /// same for the other variables as well some more example listed below\n    /// ex1 - address securityTokenAddress = 0x123; replace to\n    /// set(keccak256(abi.encodePacked(\"securityTokenAddress\"), 0x123);\n    /// ex2 - bytes32 tokenDetails = \"I am ST20\"; replace to\n    /// set(keccak256(abi.encodePacked(\"tokenDetails\"), \"I am ST20\");\n    /// ex3 - mapping(string => address) ownedToken;\n    /// set(keccak256(abi.encodePacked(\"ownedToken\", \"Chris\")), 0x123);\n    /// ex4 - mapping(string => uint) tokenIndex;\n    /// tokenIndex[\"TOKEN\"] = 1; replace to set(keccak256(abi.encodePacked(\"tokenIndex\", \"TOKEN\"), 1);\n    /// ex5 - mapping(string => SymbolDetails) registeredSymbols; where SymbolDetails is the structure having different type of values as\n    /// {uint256 date, string name, address owner} etc.\n    /// registeredSymbols[\"TOKEN\"].name = \"MyFristToken\"; replace to set(keccak256(abi.encodePacked(\"registeredSymbols_name\", \"TOKEN\"), \"MyFirstToken\");\n    /// More generalized- set(keccak256(abi.encodePacked(\"registeredSymbols_<struct variable>\", \"keyname\"), \"value\");\n\n    function set(bytes32 _key, uint256 _value) internal {\n        uintStorage[_key] = _value;\n    }\n\n    function set(bytes32 _key, address _value) internal {\n        addressStorage[_key] = _value;\n    }\n\n    function set(bytes32 _key, bool _value) internal {\n        boolStorage[_key] = _value;\n    }\n\n    function set(bytes32 _key, bytes32 _value) internal {\n        bytes32Storage[_key] = _value;\n    }\n\n    function set(bytes32 _key, string _value) internal {\n        stringStorage[_key] = _value;\n    }\n\n    ////////////////////\n    /// get functions\n    ////////////////////\n    /// @notice Get function use to get the value of the singleton state variables\n    /// Ex1- string public version = \"0.0.1\";\n    /// string _version = getString(keccak256(abi.encodePacked(\"version\"));\n    /// Ex2 - assert(temp1 == temp2); replace to\n    /// assert(getUint(keccak256(abi.encodePacked(temp1)) == getUint(keccak256(abi.encodePacked(temp2));\n    /// Ex3 - mapping(string => SymbolDetails) registeredSymbols; where SymbolDetails is the structure having different type of values as\n    /// {uint256 date, string name, address owner} etc.\n    /// string _name = getString(keccak256(abi.encodePacked(\"registeredSymbols_name\", \"TOKEN\"));\n\n    function getBool(bytes32 _key) internal view returns (bool) {\n        return boolStorage[_key];\n    }\n\n    function getUint(bytes32 _key) internal view returns (uint256) {\n        return uintStorage[_key];\n    }\n\n    function getAddress(bytes32 _key) internal view returns (address) {\n        return addressStorage[_key];\n    }\n\n    function getString(bytes32 _key) internal view returns (string) {\n        return stringStorage[_key];\n    }\n\n    function getBytes32(bytes32 _key) internal view returns (bytes32) {\n        return bytes32Storage[_key];\n    }\n\n\n    ////////////////////////////\n    // deleteArray functions\n    ////////////////////////////\n    /// @notice Function used to delete the array element.\n    /// Ex1- mapping(address => bytes32[]) tokensOwnedByOwner;\n    /// For deleting the item from array developers needs to create a funtion for that similarly\n    /// in this case we have the helper function deleteArrayBytes32() which will do it for us\n    /// deleteArrayBytes32(keccak256(abi.encodePacked(\"tokensOwnedByOwner\", 0x1), 3); -- it will delete the index 3\n\n\n    //Deletes from mapping (bytes32 => array[]) at index _index\n    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n        address[] storage array = addressArrayStorage[_key];\n        require(_index < array.length, \"Index should less than length of the array\");\n        array[_index] = array[array.length - 1];\n        array.length = array.length - 1;\n    }\n\n    //Deletes from mapping (bytes32 => bytes32[]) at index _index\n    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n        bytes32[] storage array = bytes32ArrayStorage[_key];\n        require(_index < array.length, \"Index should less than length of the array\");\n        array[_index] = array[array.length - 1];\n        array.length = array.length - 1;\n    }\n\n    //Deletes from mapping (bytes32 => uint[]) at index _index\n    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n        uint256[] storage array = uintArrayStorage[_key];\n        require(_index < array.length, \"Index should less than length of the array\");\n        array[_index] = array[array.length - 1];\n        array.length = array.length - 1;\n    }\n\n    //Deletes from mapping (bytes32 => string[]) at index _index\n    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n        string[] storage array = stringArrayStorage[_key];\n        require(_index < array.length, \"Index should less than length of the array\");\n        array[_index] = array[array.length - 1];\n        array.length = array.length - 1;\n    }\n\n    ////////////////////////////\n    //// pushArray functions\n    ///////////////////////////\n    /// @notice Below are the helper functions to facilitate storing arrays of different data types.\n    /// Ex1- mapping(address => bytes32[]) tokensOwnedByTicker;\n    /// tokensOwnedByTicker[owner] = tokensOwnedByTicker[owner].push(\"xyz\"); replace with\n    /// pushArray(keccak256(abi.encodePacked(\"tokensOwnedByTicker\", owner), \"xyz\");\n\n    /// @notice use to store the values for the array\n    /// @param _key bytes32 type\n    /// @param _value [uint256, string, bytes32, address] any of the data type in array\n    function pushArray(bytes32 _key, address _value) internal {\n        addressArrayStorage[_key].push(_value);\n    }\n\n    function pushArray(bytes32 _key, bytes32 _value) internal {\n        bytes32ArrayStorage[_key].push(_value);\n    }\n\n    function pushArray(bytes32 _key, string _value) internal {\n        stringArrayStorage[_key].push(_value);\n    }\n\n    function pushArray(bytes32 _key, uint256 _value) internal {\n        uintArrayStorage[_key].push(_value);\n    }\n\n    /////////////////////////\n    //// Set Array functions\n    ////////////////////////\n    /// @notice used to intialize the array\n    /// Ex1- mapping (address => address[]) public reputation;\n    /// reputation[0x1] = new address[](0); It can be replaced as\n    /// setArray(hash('reputation', 0x1), new address[](0)); \n    \n    function setArray(bytes32 _key, address[] _value) internal {\n        addressArrayStorage[_key] = _value;\n    }\n\n    function setArray(bytes32 _key, uint256[] _value) internal {\n        uintArrayStorage[_key] = _value;\n    }\n\n    function setArray(bytes32 _key, bytes32[] _value) internal {\n        bytes32ArrayStorage[_key] = _value;\n    }\n\n    function setArray(bytes32 _key, string[] _value) internal {\n        stringArrayStorage[_key] = _value;\n    }\n\n    /////////////////////////\n    /// getArray functions\n    /////////////////////////\n    /// @notice Get functions to get the array of the required data type\n    /// Ex1- mapping(address => bytes32[]) tokensOwnedByOwner;\n    /// getArrayBytes32(keccak256(abi.encodePacked(\"tokensOwnedByOwner\", 0x1)); It return the bytes32 array\n    /// Ex2- uint256 _len =  tokensOwnedByOwner[0x1].length; replace with\n    /// getArrayBytes32(keccak256(abi.encodePacked(\"tokensOwnedByOwner\", 0x1)).length;\n\n    function getArrayAddress(bytes32 _key) internal view returns(address[]) {\n        return addressArrayStorage[_key];\n    }\n\n    function getArrayBytes32(bytes32 _key) internal view returns(bytes32[]) {\n        return bytes32ArrayStorage[_key];\n    }\n\n    function getArrayString(bytes32 _key) internal view returns(string[]) {\n        return stringArrayStorage[_key];\n    }\n\n    function getArrayUint(bytes32 _key) internal view returns(uint[]) {\n        return uintArrayStorage[_key];\n    }\n\n    ///////////////////////////////////\n    /// setArrayIndexValue() functions\n    ///////////////////////////////////\n    /// @notice set the value of particular index of the address array\n    /// Ex1- mapping(bytes32 => address[]) moduleList;\n    /// general way is -- moduleList[moduleType][index] = temp; \n    /// It can be re-write as -- setArrayIndexValue(keccak256(abi.encodePacked('moduleList', moduleType)), index, temp); \n\n    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n        addressArrayStorage[_key][_index] = _value;\n    }\n\n    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n        uintArrayStorage[_key][_index] = _value;\n    }\n\n    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n        bytes32ArrayStorage[_key][_index] = _value;\n    }\n\n    function setArrayIndexValue(bytes32 _key, uint256 _index, string _value) internal {\n        stringArrayStorage[_key][_index] = _value;\n    }\n\n        /////////////////////////////\n        /// Public getters functions\n        /////////////////////////////\n\n    function getUintValues(bytes32 _variable) public view returns(uint256) {\n        return uintStorage[_variable];\n    }\n\n    function getBoolValues(bytes32 _variable) public view returns(bool) {\n        return boolStorage[_variable];\n    }\n\n    function getStringValues(bytes32 _variable) public view returns(string) {\n        return stringStorage[_variable];\n    }\n\n    function getAddressValues(bytes32 _variable) public view returns(address) {\n        return addressStorage[_variable];\n    }\n\n    function getBytes32Values(bytes32 _variable) public view returns(bytes32) {\n        return bytes32Storage[_variable];\n    }\n\n    function getBytesValues(bytes32 _variable) public view returns(bytes) {\n        return bytesStorage[_variable];\n    }\n\n}\n\n/**\n * @title Proxy\n * @dev Gives the possibility to delegate any call to a foreign implementation.\n */\ncontract Proxy {\n\n    /**\n    * @dev Tells the address of the implementation where every call will be delegated.\n    * @return address of the implementation to which it will be delegated\n    */\n    function _implementation() internal view returns (address);\n\n    /**\n    * @dev Fallback function.\n    * Implemented entirely in `_fallback`.\n    */\n    function _fallback() internal {\n        _delegate(_implementation());\n    }\n\n    /**\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n    * This function will return whatever the implementation call returns\n    */\n    function _delegate(address implementation) internal {\n        /*solium-disable-next-line security/no-inline-assembly*/\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize)\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize) }\n            default { return(0, returndatasize) }\n        }\n    }\n\n    function () public payable {\n        _fallback();\n    }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   *  as the code is not actually created until after the constructor finishes.\n   * @param addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n\n}\n\n/**\n * @title UpgradeabilityProxy\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\n */\ncontract UpgradeabilityProxy is Proxy {\n\n    // Version name of the current implementation\n    string internal __version;\n\n    // Address of the current implementation\n    address internal __implementation;\n\n    /**\n    * @dev This event will be emitted every time the implementation gets upgraded\n    * @param _newVersion representing the version name of the upgraded implementation\n    * @param _newImplementation representing the address of the upgraded implementation\n    */\n    event Upgraded(string _newVersion, address indexed _newImplementation);\n\n    /**\n    * @dev Upgrades the implementation address\n    * @param _newVersion representing the version name of the new implementation to be set\n    * @param _newImplementation representing the address of the new implementation to be set\n    */\n    function _upgradeTo(string _newVersion, address _newImplementation) internal {\n        require(\n            __implementation != _newImplementation && _newImplementation != address(0),\n            \"Old address is not allowed and implementation address should not be 0x\"\n        );\n        require(AddressUtils.isContract(_newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n        require(bytes(_newVersion).length > 0, \"Version should not be empty string\");\n        require(keccak256(abi.encodePacked(__version)) != keccak256(abi.encodePacked(_newVersion)), \"New version equals to current\");\n        __version = _newVersion;\n        __implementation = _newImplementation;\n        emit Upgraded(_newVersion, _newImplementation);\n    }\n\n}\n\n/**\n * @title OwnedUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n */\ncontract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\n\n    // Owner of the contract\n    address private __upgradeabilityOwner;\n\n    /**\n    * @dev Event to show ownership has been transferred\n    * @param _previousOwner representing the address of the previous owner\n    * @param _newOwner representing the address of the new owner\n    */\n    event ProxyOwnershipTransferred(address _previousOwner, address _newOwner);\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier ifOwner() {\n        if (msg.sender == _upgradeabilityOwner()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n    * @dev the constructor sets the original owner of the contract to the sender account.\n    */\n    constructor() public {\n        _setUpgradeabilityOwner(msg.sender);\n    }\n\n    /**\n    * @dev Tells the address of the owner\n    * @return the address of the owner\n    */\n    function _upgradeabilityOwner() internal view returns (address) {\n        return __upgradeabilityOwner;\n    }\n\n    /**\n    * @dev Sets the address of the owner\n    */\n    function _setUpgradeabilityOwner(address _newUpgradeabilityOwner) internal {\n        require(_newUpgradeabilityOwner != address(0), \"Address should not be 0x\");\n        __upgradeabilityOwner = _newUpgradeabilityOwner;\n    }\n\n    /**\n    * @notice Internal function to provide the address of the implementation contract\n    */\n    function _implementation() internal view returns (address) {\n        return __implementation;\n    }\n\n    /**\n    * @dev Tells the address of the proxy owner\n    * @return the address of the proxy owner\n    */\n    function proxyOwner() external ifOwner returns (address) {\n        return _upgradeabilityOwner();\n    }\n\n    /**\n    * @dev Tells the version name of the current implementation\n    * @return string representing the name of the current version\n    */\n    function version() external ifOwner returns (string) {\n        return __version;\n    }\n\n    /**\n    * @dev Tells the address of the current implementation\n    * @return address of the current implementation\n    */\n    function implementation() external ifOwner returns (address) {\n        return _implementation();\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param _newOwner The address to transfer ownership to.\n    */\n    function transferProxyOwnership(address _newOwner) external ifOwner {\n        require(_newOwner != address(0), \"Address should not be 0x\");\n        emit ProxyOwnershipTransferred(_upgradeabilityOwner(), _newOwner);\n        _setUpgradeabilityOwner(_newOwner);\n    }\n\n    /**\n    * @dev Allows the upgradeability owner to upgrade the current version of the proxy.\n    * @param _newVersion representing the version name of the new implementation to be set.\n    * @param _newImplementation representing the address of the new implementation to be set.\n    */\n    function upgradeTo(string _newVersion, address _newImplementation) external ifOwner {\n        _upgradeTo(_newVersion, _newImplementation);\n    }\n\n    /**\n    * @dev Allows the upgradeability owner to upgrade the current version of the proxy and call the new implementation\n    * to initialize whatever is needed through a low level call.\n    * @param _newVersion representing the version name of the new implementation to be set.\n    * @param _newImplementation representing the address of the new implementation to be set.\n    * @param _data represents the msg.data to bet sent in the low level call. This parameter may include the function\n    * signature of the implementation to be called with the needed payload\n    */\n    function upgradeToAndCall(string _newVersion, address _newImplementation, bytes _data) external payable ifOwner {\n        _upgradeTo(_newVersion, _newImplementation);\n        /*solium-disable-next-line security/no-call-value*/\n        require(address(this).call.value(msg.value)(_data), \"Fail in executing the function of implementation contract\");\n    }\n\n}\n\n/**\n * @title SecurityTokenRegistryProxy\n * @dev This proxy holds the storage of the SecurityTokenRegistry contract and delegates every call to the current implementation set.\n * Besides, it allows to upgrade the SecurityTokenRegistry's behaviour towards further implementations, and provides basic\n * authorization control functionalities\n */\n/*solium-disable-next-line no-empty-blocks*/\ncontract SecurityTokenRegistryProxy is EternalStorage, OwnedUpgradeabilityProxy {\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getBoolValues\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getUintValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"string\"},{\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getStringValues\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"string\"},{\"name\":\"_newImplementation\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getBytes32Values\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getAddressValues\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_variable\",\"type\":\"bytes32\"}],\"name\":\"getBytesValues\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newVersion\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}]",
  "bytecode": "60806040526100163364010000000061001b810204565b6100b4565b600160a060020a038116151561009257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416464726573732073686f756c64206e6f742062652030780000000000000000604482015290519081900360640190fd5b600d8054600160a060020a031916600160a060020a0392909216919091179055565b610dfb806100c36000396000f3006080604052600436106100b95763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663025313a281146100c35780631d8acf1b146100f457806326839e531461012057806354fd4d501461014a5780635a8b1a9f146101d45780635c60da1b1461020257806369ba0fe914610217578063958a41dd1461022f578063b3447ac91461025b578063baed8bb114610273578063c6cb7ab81461028b578063f1739cae146102a3575b6100c16102c4565b005b3480156100cf57600080fd5b506100d86102d6565b60408051600160a060020a039092168252519081900360200190f35b34801561010057600080fd5b5061010c600435610313565b604080519115158252519081900360200190f35b34801561012c57600080fd5b50610138600435610328565b60408051918252519081900360200190f35b34801561015657600080fd5b5061015f61033a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610199578181015183820152602001610181565b50505050905090810190601f1680156101c65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e057600080fd5b506100c16024600480358281019291013590600160a060020a039035166103ef565b34801561020e57600080fd5b506100d861045d565b34801561022357600080fd5b5061015f600435610488565b6100c1602460048035828101929082013591600160a060020a038235169160443590810191013561052b565b34801561026757600080fd5b50610138600435610648565b34801561027f57600080fd5b506100d860043561065a565b34801561029757600080fd5b5061015f600435610675565b3480156102af57600080fd5b506100c1600160a060020a03600435166106df565b6102d46102cf6107c4565b6107d3565b565b60006102e06107f7565b600160a060020a031633600160a060020a03161415610308576103016107f7565b9050610310565b6103106102c4565b90565b60009081526004602052604090205460ff1690565b60009081526020819052604090205490565b60606103446107f7565b600160a060020a031633600160a060020a0316141561030857600b805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103e35780601f106103b8576101008083540402835291602001916103e3565b820191906000526020600020905b8154815290600101906020018083116103c657829003601f168201915b50505050509050610310565b6103f76107f7565b600160a060020a031633600160a060020a031614156104505761044b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437508794506108069350505050565b610458565b6104586102c4565b505050565b60006104676107f7565b600160a060020a031633600160a060020a03161415610308576103016107c4565b60008181526001602081815260409283902080548451600260001995831615610100029590950190911693909304601f8101839004830284018301909452838352606093909183018282801561051f5780601f106104f45761010080835404028352916020019161051f565b820191906000526020600020905b81548152906001019060200180831161050257829003601f168201915b50505050509050919050565b6105336107f7565b600160a060020a031633600160a060020a031614156106395761058785858080601f016020809104026020016040519081016040528093929190818152602001838380828437508994506108069350505050565b30600160a060020a03163483836040518083838082843782019150509250505060006040518083038185875af1925050501515610634576040805160e560020a62461bcd02815260206004820152603960248201527f4661696c20696e20657865637574696e67207468652066756e6374696f6e206f60448201527f6620696d706c656d656e746174696f6e20636f6e747261637400000000000000606482015290519081900360840190fd5b610641565b6106416102c4565b5050505050565b60009081526006602052604090205490565b600090815260026020526040902054600160a060020a031690565b60008181526003602090815260409182902080548351601f600261010060018516150260001901909316929092049182018490048402810184019094528084526060939283018282801561051f5780601f106104f45761010080835404028352916020019161051f565b6106e76107f7565b600160a060020a031633600160a060020a031614156107b957600160a060020a0381161515610760576040805160e560020a62461bcd02815260206004820152601860248201527f416464726573732073686f756c64206e6f742062652030780000000000000000604482015290519081900360640190fd5b7f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd96107896107f7565b60408051600160a060020a03928316815291841660208301528051918290030190a16107b481610ca0565b6107c1565b6107c16102c4565b50565b600c54600160a060020a031690565b3660008037600080366000845af43d6000803e8080156107f2573d6000f35b3d6000fd5b600d54600160a060020a031690565b600c54600160a060020a0382811691161480159061082c5750600160a060020a03811615155b15156108ce576040805160e560020a62461bcd02815260206004820152604660248201527f4f6c642061646472657373206973206e6f7420616c6c6f77656420616e64206960448201527f6d706c656d656e746174696f6e20616464726573732073686f756c64206e6f7460648201527f2062652030780000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6108d781610d2f565b1515610953576040805160e560020a62461bcd02815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e747261637420616464726573730000000000606482015290519081900360840190fd5b81516000106109d2576040805160e560020a62461bcd02815260206004820152602260248201527f56657273696f6e2073686f756c64206e6f7420626520656d707479207374726960448201527f6e67000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b816040516020018082805190602001908083835b60208310610a055780518252601f1990920191602091820191016109e6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310610a685780518252601f199092019160209182019101610a49565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600b6040516020018082805460018160011615610100020316600290048015610af95780601f10610ad7576101008083540402835291820191610af9565b820191906000526020600020905b815481529060010190602001808311610ae5575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310610b3c5780518252601f199092019160209182019101610b1d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151515610bc5576040805160e560020a62461bcd02815260206004820152601d60248201527f4e65772076657273696f6e20657175616c7320746f2063757272656e74000000604482015290519081900360640190fd5b8151610bd890600b906020850190610d37565b50600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831690811790915560408051602080825285518183015285517f8e05e0e35ff592971ca8b477d4285a33a61ded208d644042667b78693a472f5e938793928392918301919085019080838360005b83811015610c62578181015183820152602001610c4a565b50505050905090810190601f168015610c8f5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b600160a060020a0381161515610d00576040805160e560020a62461bcd02815260206004820152601860248201527f416464726573732073686f756c64206e6f742062652030780000000000000000604482015290519081900360640190fd5b600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000903b1190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d7857805160ff1916838001178555610da5565b82800160010185558215610da5579182015b82811115610da5578251825591602001919060010190610d8a565b50610db1929150610db5565b5090565b61031091905b80821115610db15760008155600101610dbb5600a165627a7a72305820c0157b60606c5025d2f13e3c90534f739ccb0b39bef31a59c3158218e9fdf7d50029"
}