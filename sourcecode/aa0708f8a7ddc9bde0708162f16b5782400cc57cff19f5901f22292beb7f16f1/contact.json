{
  "address": "0xe5a7c12972f3bbfe70ed29521c8949b8af6a0970",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DaaToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-18\n*/\n\npragma solidity ^0.4.10;\n\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\n/// @title ICONOMI Daa token\ncontract DaaToken {\n  //\n  // events\n  //\n  // ERC20 events\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  // mint/burn events\n  event Mint(address indexed _to, uint256 _amount, uint256 _newTotalSupply);\n  event Burn(address indexed _from, uint256 _amount, uint256 _newTotalSupply);\n\n  // admin events\n  event BlockLockSet(uint256 _value);\n  event NewOwner(address _newOwner);\n  event NewMinter(address _minter);\n\n  modifier onlyOwner {\n    if (msg.sender == owner) {\n      _;\n    }\n  }\n\n  modifier minterOrOwner {\n    if (msg.sender == minter || msg.sender == owner) {\n      _;\n    }\n  }\n\n  modifier blockLock(address _sender) {\n    if (!isLocked() || _sender == owner) {\n      _;\n    }\n  }\n\n  modifier validTransfer(address _from, address _to, uint256 _amount) {\n    if (isTransferValid(_from, _to, _amount)) {\n      _;\n    }\n  }\n\n  uint256 public totalSupply;\n  string public name;\n  uint8 public decimals;\n  string public symbol;\n  string public version = '0.0.1';\n  address public owner;\n  address public minter;\n  uint256 public lockedUntilBlock;\n\n  function DaaToken(\n      string _tokenName,\n      uint8 _decimalUnits,\n      string _tokenSymbol,\n      uint256 _lockedUntilBlock\n  ) {\n\n    name = _tokenName;\n    decimals = _decimalUnits;\n    symbol = _tokenSymbol;\n    lockedUntilBlock = _lockedUntilBlock;\n    owner = msg.sender;\n  }\n\n  function transfer(address _to, uint256 _value)\n      public\n      blockLock(msg.sender)\n      validTransfer(msg.sender, _to, _value)\n      returns (bool success)\n  {\n\n    // transfer tokens\n    balances[msg.sender] -= _value;\n    balances[_to] += _value;\n\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value)\n      public\n      returns (bool success)\n  {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value)\n      public\n      blockLock(_from)\n      validTransfer(_from, _to, _value)\n      returns (bool success)\n  {\n\n    // check sufficient allowance\n    if (_value > allowed[_from][msg.sender]) {\n      return false;\n    }\n\n    // transfer tokens\n    balances[_from] -= _value;\n    balances[_to] += _value;\n    allowed[_from][msg.sender] -= _value;\n\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n      public\n      returns (bool success)\n  {\n    if (approve(_spender, _value)) {\n      tokenRecipient(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n      return true;\n    }\n  }\n\n  /// @notice Mint new tokens. Can only be called by minter or owner\n  function mint(address _to, uint256 _value)\n      public\n      minterOrOwner\n      blockLock(msg.sender)\n      returns (bool success)\n  {\n    // ensure _value is greater than zero and\n    // doesn't overflow\n    if (totalSupply + _value <= totalSupply) {\n      return false;\n    }\n\n    balances[_to] += _value;\n    totalSupply += _value;\n\n    Mint(_to, _value, totalSupply);\n    Transfer(0x0, _to, _value);\n\n    return true;\n  }\n\n  /// @notice Burn tokens. Can be called by any account\n  function burn(uint256 _value)\n      public\n      blockLock(msg.sender)\n      returns (bool success)\n  {\n    if (_value == 0 || _value > balances[msg.sender]) {\n      return false;\n    }\n\n    balances[msg.sender] -= _value;\n    totalSupply -= _value;\n\n    Burn(msg.sender, _value, totalSupply);\n    Transfer(msg.sender, 0x0, _value);\n\n    return true;\n  }\n\n  /// @notice Set block lock. Until that block (exclusive) transfers are disallowed\n  function setBlockLock(uint256 _lockedUntilBlock)\n      public\n      onlyOwner\n      returns (bool success)\n  {\n    lockedUntilBlock = _lockedUntilBlock;\n    BlockLockSet(_lockedUntilBlock);\n    return true;\n  }\n\n  /// @notice Replace current owner with new one\n  function replaceOwner(address _newOwner)\n      public\n      onlyOwner\n      returns (bool success)\n  {\n    owner = _newOwner;\n    NewOwner(_newOwner);\n    return true;\n  }\n\n  /// @notice Set account that can mint new tokens\n  function setMinter(address _newMinter)\n      public\n      onlyOwner\n      returns (bool success)\n  {\n    minter = _newMinter;\n    NewMinter(_newMinter);\n    return true;\n  }\n\n  function balanceOf(address _owner)\n      public\n      constant\n      returns (uint256 balance)\n  {\n    return balances[_owner];\n  }\n\n  function allowance(address _owner, address _spender)\n      public\n      constant\n      returns (uint256 remaining)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /// @notice Are transfers currently disallowed\n  function isLocked()\n      public\n      constant\n      returns (bool success)\n  {\n    return lockedUntilBlock > block.number;\n  }\n\n  /// @dev Checks if transfer parameters are valid\n  function isTransferValid(address _from, address _to, uint256 _amount)\n      private\n      constant\n      returns (bool isValid)\n  {\n    return  balances[_from] >= _amount &&  // sufficient balance\n            _amount > 0 &&                 // amount is positive\n            _to != address(this) &&        // prevent sending tokens to contract\n            _to != 0x0                     // prevent sending token to 0x0 address\n    ;\n  }\n\n  mapping (address => uint256) balances;\n  mapping (address => mapping (address => uint256)) allowed;\n}",
  "bytecode": "606060405260408051908101604052600581527f302e302e31000000000000000000000000000000000000000000000000000000602082015260049080516200004d929160200190620000f5565b5034156200005a57600080fd5b604051620011963803806200119683398101604052808051820191906020018051919060200180518201919060200180519150505b6001848051620000a4929160200190620000f5565b506002805460ff191660ff85161790556003828051620000c9929160200190620000f5565b50600781905560058054600160a060020a03191633600160a060020a03161790555b505050506200019f565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200013857805160ff191683800117855562000168565b8280016001018555821562000168579182015b82811115620001685782518255916020019190600101906200014b565b5b50620001779291506200017b565b5090565b6200019c91905b8082111562000177576000815560010162000182565b5090565b90565b610fe780620001af6000396000f3006060604052361561010f5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610114578063075461721461019f578063095ea7b3146101ce57806318160ddd1461020457806323b872dd14610229578063313ce56714610265578063366a68dc1461028e57806340c10f19146102b857806342966c68146102ee57806354fd4d501461031857806370a08231146103a35780638da5cb5b146103d457806395d89b4114610403578063a39a45b71461048e578063a4e2d634146104c1578063a9059cbb146104e8578063cae9ca511461051e578063d8162db714610597578063dd62ed3e146105bc578063fca3b5aa146105f3575b600080fd5b341561011f57600080fd5b610127610626565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101645780820151818401525b60200161014b565b50505050905090810190601f1680156101915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101aa57600080fd5b6101b26106c4565b604051600160a060020a03909116815260200160405180910390f35b34156101d957600080fd5b6101f0600160a060020a03600435166024356106d3565b604051901515815260200160405180910390f35b341561020f57600080fd5b610217610740565b60405190815260200160405180910390f35b341561023457600080fd5b6101f0600160a060020a0360043581169060243516604435610746565b604051901515815260200160405180910390f35b341561027057600080fd5b61027861083f565b60405160ff909116815260200160405180910390f35b341561029957600080fd5b6101f0600435610848565b604051901515815260200160405180910390f35b34156102c357600080fd5b6101f0600160a060020a03600435166024356108a5565b604051901515815260200160405180910390f35b34156102f957600080fd5b6101f06004356109b0565b604051901515815260200160405180910390f35b341561032357600080fd5b610127610aa7565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101645780820151818401525b60200161014b565b50505050905090810190601f1680156101915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ae57600080fd5b610217600160a060020a0360043516610b45565b60405190815260200160405180910390f35b34156103df57600080fd5b6101b2610b64565b604051600160a060020a03909116815260200160405180910390f35b341561040e57600080fd5b610127610b73565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101645780820151818401525b60200161014b565b50505050905090810190601f1680156101915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049957600080fd5b6101f0600160a060020a0360043516610c11565b604051901515815260200160405180910390f35b34156104cc57600080fd5b6101f0610c9b565b604051901515815260200160405180910390f35b34156104f357600080fd5b6101f0600160a060020a0360043516602435610ca5565b604051901515815260200160405180910390f35b341561052957600080fd5b6101f060048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610d4795505050505050565b604051901515815260200160405180910390f35b34156105a257600080fd5b610217610e79565b60405190815260200160405180910390f35b34156105c757600080fd5b610217600160a060020a0360043581169060243516610e7f565b60405190815260200160405180910390f35b34156105fe57600080fd5b6101f0600160a060020a0360043516610eac565b604051901515815260200160405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106bc5780601f10610691576101008083540402835291602001916106bc565b820191906000526020600020905b81548152906001019060200180831161069f57829003601f168201915b505050505081565b600654600160a060020a031681565b600160a060020a03338116600081815260096020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600083610751610c9b565b158061076a5750600554600160a060020a038281169116145b156108365784848461077d838383610f36565b1561083057600160a060020a03808916600090815260096020908152604080832033909416835292905220548611156107b95760009450610830565b600160a060020a03808916600081815260086020908152604080832080548c900390558b851680845281842080548d01905584845260098352818420339096168452949091529081902080548a90039055600080516020610f9c8339815191529089905190815260200160405180910390a3600194505b5b5b5050505b5b509392505050565b60025460ff1681565b60055460009033600160a060020a039081169116141561089e5760078290557f6c04066f6ede40cc1642c211ba9d18f1a096ccc84fb8d11be28ea6c3c6f68b368260405190815260200160405180910390a15060015b5b5b919050565b60065460009033600160a060020a03908116911614806108d3575060055433600160a060020a039081169116145b1561073a57336108e1610c9b565b15806108fa5750600554600160a060020a038281169116145b156109a5576000548381011161091357600091506109a5565b600160a060020a03841660008181526008602052604080822080548701905581548601918290557f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f9186915191825260208201526040908101905180910390a283600160a060020a03166000600080516020610f9c8339815191528560405190815260200160405180910390a3600191505b5b5b505b5b92915050565b6000336109bb610c9b565b15806109d45750600554600160a060020a038281169116145b15610a9f578215806109fd5750600160a060020a03331660009081526008602052604090205483115b15610a0b5760009150610a9f565b600160a060020a033316600081815260086020526040808220805487900390558154869003918290557f49995e5dd6158cf69ad3e9777c46755a1a826a446c6416992167462dad033b2a9186915191825260208201526040908101905180910390a2600033600160a060020a0316600080516020610f9c8339815191528560405190815260200160405180910390a3600191505b5b5b50919050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106bc5780601f10610691576101008083540402835291602001916106bc565b820191906000526020600020905b81548152906001019060200180831161069f57829003601f168201915b505050505081565b600160a060020a0381166000908152600860205260409020545b919050565b600554600160a060020a031681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106bc5780601f10610691576101008083540402835291602001916106bc565b820191906000526020600020905b81548152906001019060200180831161069f57829003601f168201915b505050505081565b60055460009033600160a060020a039081169116141561089e576005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790557f3edd90e7770f06fafde38004653b33870066c33bfc923ff6102acd601f85dfbc82604051600160a060020a03909116815260200160405180910390a15060015b5b5b919050565b6007544390115b90565b600033610cb0610c9b565b1580610cc95750600554600160a060020a038281169116145b156109a557338484610cdc838383610f36565b15610d3957600160a060020a0333811660008181526008602052604080822080548b90039055928a168082529083902080548a01905591600080516020610f9c8339815191529089905190815260200160405180910390a3600194505b5b5b5050505b5b5092915050565b6000610d5384846106d3565b15610e715783600160a060020a0316638f4ffcb1338530866040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e0a5780820151818401525b602001610df1565b50505050905090810190601f168015610e375780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610e5857600080fd5b6102c65a03f11515610e6957600080fd5b505050600190505b5b9392505050565b60075481565b600160a060020a038083166000908152600960209081526040808320938516835292905220545b92915050565b60055460009033600160a060020a039081169116141561089e576006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790557f6adffd5c93085d835dac6f3b40adf7c242ca4b3284048d20c3d8a501748dc97382604051600160a060020a03909116815260200160405180910390a15060015b5b5b919050565b600160a060020a038316600090815260086020526040812054829010801590610f5f5750600082115b8015610f7d575030600160a060020a031683600160a060020a031614155b8015610f915750600160a060020a03831615155b90505b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820873557e49263ebed3bba9e716c7aa751c799cae3a53089798e29b748aeac5ea500290000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010426c6f636b636861696e20496e646578000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003424c580000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010426c6f636b636861696e20496e646578000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003424c580000000000000000000000000000000000000000000000000000000000"
}