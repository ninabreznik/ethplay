{
  "address": "0xc47d7d42e44b2e04c83a45cf45898e597a0c2311",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "GU: Legendary Pack Four",
  "contractName": "LegendaryPackFour",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-16\n*/\n\npragma solidity 0.4.24;\n\ncontract Ownable {\n\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address _owner) public onlyOwner {\n        owner = _owner;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n}\n\ncontract Vault is Ownable { \n\n    function () public payable {\n\n    }\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function withdraw(uint amount) public onlyOwner {\n        require(address(this).balance >= amount);\n        owner.transfer(amount);\n    }\n\n    function withdrawAll() public onlyOwner {\n        withdraw(address(this).balance);\n    }\n}\n\ncontract ERC20 {\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    function allowance(address owner, address spender) public view returns (uint256);\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address who) public view returns (uint256);\n    \n    function transfer(address to, uint256 value) public returns (bool);\n    \n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract TournamentPass is ERC20, Ownable {\n\n    using SafeMath for uint256;\n\n    Vault vault;\n\n    constructor(Vault _vault) public {\n        vault = _vault;\n    }\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    address[] public minters;\n    uint256 supply;\n    uint mintLimit = 20000;\n    \n    function name() public view returns (string){\n        return \"GU Tournament Passes\";\n    }\n\n    function symbol() public view returns (string) {\n        return \"PASS\";\n    }\n\n    function addMinter(address minter) public onlyOwner {\n        minters.push(minter);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return supply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function isMinter(address test) internal view returns (bool) {\n        for (uint i = 0; i < minters.length; i++) {\n            if (minters[i] == test) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function mint(address to, uint amount) public returns (bool) {\n        require(isMinter(msg.sender));\n        if (amount.add(supply) > mintLimit) {\n            return false;\n        } \n        supply = supply.add(amount);\n        balances[to] = balances[to].add(amount);\n        emit Transfer(address(0), to, amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function increaseApproval(address spender, uint256 addedValue) public returns (bool) {\n        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {\n        uint256 oldValue = allowed[msg.sender][spender];\n        if (subtractedValue > oldValue) {\n            allowed[msg.sender][spender] = 0;\n        } else {\n            allowed[msg.sender][spender] = oldValue.sub(subtractedValue);\n        }\n        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    uint public price = 250 finney;\n\n    function purchase(uint amount) public payable {\n        \n        require(msg.value >= price.mul(amount));\n        require(supply.add(amount) <= mintLimit);\n\n        supply = supply.add(amount);\n        balances[msg.sender] = balances[msg.sender].add(amount);\n        emit Transfer(address(0), msg.sender, amount);\n\n        address(vault).transfer(msg.value);\n    }\n\n}\n\ncontract CappedVault is Vault { \n\n    uint public limit;\n    uint withdrawn = 0;\n\n    constructor() public {\n        limit = 33333 ether;\n    }\n\n    function () public payable {\n        require(total() + msg.value <= limit);\n    }\n\n    function total() public view returns(uint) {\n        return getBalance() + withdrawn;\n    }\n\n    function withdraw(uint amount) public onlyOwner {\n        require(address(this).balance >= amount);\n        owner.transfer(amount);\n        withdrawn += amount;\n    }\n\n}\n\n\ncontract PreviousInterface {\n\n    function ownerOf(uint id) public view returns (address);\n\n    function getCard(uint id) public view returns (uint16, uint16);\n\n    function totalSupply() public view returns (uint);\n\n    function burnCount() public view returns (uint);\n\n}\n\ncontract Pausable is Ownable {\n    \n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract Governable {\n\n    event Pause();\n    event Unpause();\n\n    address public governor;\n    bool public paused = false;\n\n    constructor() public {\n        governor = msg.sender;\n    }\n\n    function setGovernor(address _gov) public onlyGovernor {\n        governor = _gov;\n    }\n\n    modifier onlyGovernor {\n        require(msg.sender == governor);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyGovernor whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyGovernor whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n\n}\n\ncontract CardBase is Governable {\n\n\n    struct Card {\n        uint16 proto;\n        uint16 purity;\n    }\n\n    function getCard(uint id) public view returns (uint16 proto, uint16 purity) {\n        Card memory card = cards[id];\n        return (card.proto, card.purity);\n    }\n\n    function getShine(uint16 purity) public pure returns (uint8) {\n        return uint8(purity / 1000);\n    }\n\n    Card[] public cards;\n    \n}\n\ncontract CardProto is CardBase {\n\n    event NewProtoCard(\n        uint16 id, uint8 season, uint8 god, \n        Rarity rarity, uint8 mana, uint8 attack, \n        uint8 health, uint8 cardType, uint8 tribe, bool packable\n    );\n\n    struct Limit {\n        uint64 limit;\n        bool exists;\n    }\n\n    // limits for mythic cards\n    mapping(uint16 => Limit) public limits;\n\n    // can only set limits once\n    function setLimit(uint16 id, uint64 limit) public onlyGovernor {\n        Limit memory l = limits[id];\n        require(!l.exists);\n        limits[id] = Limit({\n            limit: limit,\n            exists: true\n        });\n    }\n\n    function getLimit(uint16 id) public view returns (uint64 limit, bool set) {\n        Limit memory l = limits[id];\n        return (l.limit, l.exists);\n    }\n\n    // could make these arrays to save gas\n    // not really necessary - will be update a very limited no of times\n    mapping(uint8 => bool) public seasonTradable;\n    mapping(uint8 => bool) public seasonTradabilityLocked;\n    uint8 public currentSeason;\n\n    function makeTradable(uint8 season) public onlyGovernor {\n        seasonTradable[season] = true;\n    }\n\n    function makeUntradable(uint8 season) public onlyGovernor {\n        require(!seasonTradabilityLocked[season]);\n        seasonTradable[season] = false;\n    }\n\n    function makePermanantlyTradable(uint8 season) public onlyGovernor {\n        require(seasonTradable[season]);\n        seasonTradabilityLocked[season] = true;\n    }\n\n    function isTradable(uint16 proto) public view returns (bool) {\n        return seasonTradable[protos[proto].season];\n    }\n\n    function nextSeason() public onlyGovernor {\n        //Seasons shouldn't go to 0 if there is more than the uint8 should hold, the governor should know this ¯\\_(ツ)_/¯ -M\n        require(currentSeason <= 255); \n\n        currentSeason++;\n        mythic.length = 0;\n        legendary.length = 0;\n        epic.length = 0;\n        rare.length = 0;\n        common.length = 0;\n    }\n\n    enum Rarity {\n        Common,\n        Rare,\n        Epic,\n        Legendary, \n        Mythic\n    }\n\n    uint8 constant SPELL = 1;\n    uint8 constant MINION = 2;\n    uint8 constant WEAPON = 3;\n    uint8 constant HERO = 4;\n\n    struct ProtoCard {\n        bool exists;\n        uint8 god;\n        uint8 season;\n        uint8 cardType;\n        Rarity rarity;\n        uint8 mana;\n        uint8 attack;\n        uint8 health;\n        uint8 tribe;\n    }\n\n    // there is a particular design decision driving this:\n    // need to be able to iterate over mythics only for card generation\n    // don't store 5 different arrays: have to use 2 ids\n    // better to bear this cost (2 bytes per proto card)\n    // rather than 1 byte per instance\n\n    uint16 public protoCount;\n    \n    mapping(uint16 => ProtoCard) protos;\n\n    uint16[] public mythic;\n    uint16[] public legendary;\n    uint16[] public epic;\n    uint16[] public rare;\n    uint16[] public common;\n\n    function addProtos(\n        uint16[] externalIDs, uint8[] gods, Rarity[] rarities, uint8[] manas, uint8[] attacks, \n        uint8[] healths, uint8[] cardTypes, uint8[] tribes, bool[] packable\n    ) public onlyGovernor returns(uint16) {\n\n        for (uint i = 0; i < externalIDs.length; i++) {\n\n            ProtoCard memory card = ProtoCard({\n                exists: true,\n                god: gods[i],\n                season: currentSeason,\n                cardType: cardTypes[i],\n                rarity: rarities[i],\n                mana: manas[i],\n                attack: attacks[i],\n                health: healths[i],\n                tribe: tribes[i]\n            });\n\n            _addProto(externalIDs[i], card, packable[i]);\n        }\n        \n    }\n\n    function addProto(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 cardType, uint8 tribe, bool packable\n    ) public onlyGovernor returns(uint16) {\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: cardType,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addWeapon(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 durability, bool packable\n    ) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: WEAPON,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: durability,\n            tribe: 0\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addSpell(uint16 externalID, uint8 god, Rarity rarity, uint8 mana, bool packable) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: SPELL,\n            rarity: rarity,\n            mana: mana,\n            attack: 0,\n            health: 0,\n            tribe: 0\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function addMinion(\n        uint16 externalID, uint8 god, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe, bool packable\n    ) public onlyGovernor returns(uint16) {\n\n        ProtoCard memory card = ProtoCard({\n            exists: true,\n            god: god,\n            season: currentSeason,\n            cardType: MINION,\n            rarity: rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n\n        _addProto(externalID, card, packable);\n    }\n\n    function _addProto(uint16 externalID, ProtoCard memory card, bool packable) internal {\n\n        require(!protos[externalID].exists);\n\n        card.exists = true;\n\n        protos[externalID] = card;\n\n        protoCount++;\n\n        emit NewProtoCard(\n            externalID, currentSeason, card.god, \n            card.rarity, card.mana, card.attack, \n            card.health, card.cardType, card.tribe, packable\n        );\n\n        if (packable) {\n            Rarity rarity = card.rarity;\n            if (rarity == Rarity.Common) {\n                common.push(externalID);\n            } else if (rarity == Rarity.Rare) {\n                rare.push(externalID);\n            } else if (rarity == Rarity.Epic) {\n                epic.push(externalID);\n            } else if (rarity == Rarity.Legendary) {\n                legendary.push(externalID);\n            } else if (rarity == Rarity.Mythic) {\n                mythic.push(externalID);\n            } else {\n                require(false);\n            }\n        }\n    }\n\n    function getProto(uint16 id) public view returns(\n        bool exists, uint8 god, uint8 season, uint8 cardType, Rarity rarity, uint8 mana, uint8 attack, uint8 health, uint8 tribe\n    ) {\n        ProtoCard memory proto = protos[id];\n        return (\n            proto.exists,\n            proto.god,\n            proto.season,\n            proto.cardType,\n            proto.rarity,\n            proto.mana,\n            proto.attack,\n            proto.health,\n            proto.tribe\n        );\n    }\n\n    function getRandomCard(Rarity rarity, uint16 random) public view returns (uint16) {\n        // modulo bias is fine - creates rarity tiers etc\n        // will obviously revert is there are no cards of that type: this is expected - should never happen\n        if (rarity == Rarity.Common) {\n            return common[random % common.length];\n        } else if (rarity == Rarity.Rare) {\n            return rare[random % rare.length];\n        } else if (rarity == Rarity.Epic) {\n            return epic[random % epic.length];\n        } else if (rarity == Rarity.Legendary) {\n            return legendary[random % legendary.length];\n        } else if (rarity == Rarity.Mythic) {\n            // make sure a mythic is available\n            uint16 id;\n            uint64 limit;\n            bool set;\n            for (uint i = 0; i < mythic.length; i++) {\n                id = mythic[(random + i) % mythic.length];\n                (limit, set) = getLimit(id);\n                if (set && limit > 0){\n                    return id;\n                }\n            }\n            // if not, they get a legendary :(\n            return legendary[random % legendary.length];\n        }\n        require(false);\n        return 0;\n    }\n\n    // can never adjust tradable cards\n    // each season gets a 'balancing beta'\n    // totally immutable: season, rarity\n    function replaceProto(\n        uint16 index, uint8 god, uint8 cardType, uint8 mana, uint8 attack, uint8 health, uint8 tribe\n    ) public onlyGovernor {\n        ProtoCard memory pc = protos[index];\n        require(!seasonTradable[pc.season]);\n        protos[index] = ProtoCard({\n            exists: true,\n            god: god,\n            season: pc.season,\n            cardType: cardType,\n            rarity: pc.rarity,\n            mana: mana,\n            attack: attack,\n            health: health,\n            tribe: tribe\n        });\n    }\n\n}\n\ncontract MigrationInterface {\n\n    function createCard(address user, uint16 proto, uint16 purity) public returns (uint);\n\n    function getRandomCard(CardProto.Rarity rarity, uint16 random) public view returns (uint16);\n\n    function migrate(uint id) public;\n\n}\ncontract CardPackFour {\n\n    MigrationInterface public migration;\n    uint public creationBlock;\n\n    constructor(MigrationInterface _core) public payable {\n        migration = _core;\n        creationBlock = 5939061 + 2000; // set to creation block of first contracts + 8 hours for down time\n    }\n\n    event Referral(address indexed referrer, uint value, address purchaser);\n\n    /**\n    * purchase 'count' of this type of pack\n    */\n    function purchase(uint16 packCount, address referrer) public payable;\n\n    // store purity and shine as one number to save users gas\n    function _getPurity(uint16 randOne, uint16 randTwo) internal pure returns (uint16) {\n        if (randOne >= 998) {\n            return 3000 + randTwo;\n        } else if (randOne >= 988) {\n            return 2000 + randTwo;\n        } else if (randOne >= 938) {\n            return 1000 + randTwo;\n        } else {\n            return randTwo;\n        }\n    }\n\n}\n\ncontract FirstPheonix is Pausable {\n\n    MigrationInterface core;\n\n    constructor(MigrationInterface _core) public {\n        core = _core;\n    }\n\n    address[] public approved;\n\n    uint16 PHEONIX_PROTO = 380;\n\n    mapping(address => bool) public claimed;\n\n    function approvePack(address toApprove) public onlyOwner {\n        approved.push(toApprove);\n    }\n\n    function isApproved(address test) public view returns (bool) {\n        for (uint i = 0; i < approved.length; i++) {\n            if (approved[i] == test) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // pause once cards become tradable\n    function claimPheonix(address user) public returns (bool){\n\n        require(isApproved(msg.sender));\n\n        if (claimed[user] || paused){\n            return false;\n        }\n\n        claimed[user] = true;\n\n        core.createCard(user, PHEONIX_PROTO, 0);\n\n        return true;\n    }\n\n}\n\ncontract PresalePackFour is CardPackFour, Pausable {\n\n    CappedVault public vault;\n\n    Purchase[] public purchases;\n\n    function getPurchaseCount() public view returns (uint) {\n        return purchases.length;\n    }\n\n    struct Purchase {\n        uint16 current;\n        uint16 count;\n        address user;\n        uint randomness;\n        uint64 commit;\n    }\n\n    event PacksPurchased(uint indexed id, address indexed user, uint16 count);\n    event PackOpened(uint indexed id, uint16 startIndex, address indexed user, uint[] cardIDs);\n    event RandomnessReceived(uint indexed id, address indexed user, uint16 count, uint randomness);\n    event Recommit(uint indexed id);\n\n    constructor(MigrationInterface _core, CappedVault _vault) public payable CardPackFour(_core) {\n        vault = _vault;\n    }\n\n    function basePrice() public returns (uint);\n    function getCardDetails(uint16 packIndex, uint8 cardIndex, uint result) public view returns (uint16 proto, uint16 purity);\n    \n    function packSize() public view returns (uint8) {\n        return 5;\n    }\n\n    uint16 public perClaim = 15;\n\n    function setPacksPerClaim(uint16 _perClaim) public onlyOwner {\n        perClaim = _perClaim;\n    }\n\n    function packsPerClaim() public view returns (uint16) {\n        return perClaim;\n    }\n\n    // start in bytes, length in bytes\n    function extract(uint num, uint length, uint start) internal pure returns (uint) {\n        return (((1 << (length * 8)) - 1) & (num >> ((start * 8) - 1)));\n    }\n\n    function purchaseFor(address user, uint16 packCount, address referrer) whenNotPaused public payable {\n        _purchase(user, packCount, referrer);\n    }\n\n    function purchase(uint16 packCount, address referrer) whenNotPaused public payable {\n        _purchase(msg.sender, packCount, referrer);\n    }\n\n    function _purchase(address user, uint16 packCount, address referrer) internal {\n        require(packCount > 0);\n        require(referrer != user);\n\n        uint price = calculatePrice(basePrice(), packCount);\n\n        require(msg.value >= price);\n\n        Purchase memory p = Purchase({\n            user: user,\n            count: packCount,\n            commit: uint64(block.number),\n            randomness: 0,\n            current: 0\n        });\n\n        uint id = purchases.push(p) - 1;\n\n        emit PacksPurchased(id, user, packCount);\n\n        if (referrer != address(0)) {\n            uint commission = price / 10;\n            referrer.transfer(commission);\n            price -= commission;\n            emit Referral(referrer, commission, user);\n        }\n        \n        address(vault).transfer(price);\n    }\n\n    // can recommit\n    // this gives you more chances\n    // if no-one else sends the callback (should never happen)\n    // still only get a random extra chance\n    function recommit(uint id) public {\n\n        Purchase storage p = purchases[id];\n\n        require(p.randomness == 0);\n\n        require(block.number >= p.commit + 256);\n\n        p.commit = uint64(block.number);\n\n        emit Recommit(id);\n    }\n\n    // can be called by anybody\n    // can miners withhold blocks --> not really\n    // giving up block reward for extra chance --> still really low\n    function callback(uint id) public {\n\n        Purchase storage p = purchases[id];\n\n        require(p.randomness == 0);\n\n        // must be within last 256 blocks, otherwise recommit\n        require(block.number - 256 < p.commit);\n\n        // can't callback on the original block\n        require(uint64(block.number) != p.commit);\n\n        bytes32 bhash = blockhash(p.commit);\n        // will get the same on every block\n        // only use properties which can't be altered by the user\n        uint random = uint(keccak256(abi.encodePacked(bhash, p.user, address(this), p.count)));\n\n        require(uint(bhash) != 0);\n\n        p.randomness = random;\n\n        emit RandomnessReceived(id, p.user, p.count, p.randomness);\n    }\n\n    function claim(uint id) public {\n        \n        Purchase storage p = purchases[id];\n\n        require(canClaim);\n\n        uint16 proto;\n        uint16 purity;\n        uint16 count = p.count;\n        uint result = p.randomness;\n        uint8 size = packSize();\n\n        address user = p.user;\n        uint16 current = p.current;\n\n        require(result != 0); // have to wait for the callback\n        // require(user == msg.sender); // not needed\n        require(count > 0);\n\n        uint[] memory ids = new uint[](size);\n\n        uint16 end = current + packsPerClaim() > count ? count : current + packsPerClaim();\n\n        require(end > current);\n\n        for (uint16 i = current; i < end; i++) {\n            for (uint8 j = 0; j < size; j++) {\n                (proto, purity) = getCardDetails(i, j, result);\n                ids[j] = migration.createCard(user, proto, purity);\n            }\n            emit PackOpened(id, (i * size), user, ids);\n        }\n        p.current += (end - current);\n    }\n\n    function predictPacks(uint id) external view returns (uint16[] protos, uint16[] purities) {\n\n        Purchase memory p = purchases[id];\n\n        uint16 proto;\n        uint16 purity;\n        uint16 count = p.count;\n        uint result = p.randomness;\n        uint8 size = packSize();\n\n        purities = new uint16[](size * count);\n        protos = new uint16[](size * count);\n\n        for (uint16 i = 0; i < count; i++) {\n            for (uint8 j = 0; j < size; j++) {\n                (proto, purity) = getCardDetails(i, j, result);\n                purities[(i * size) + j] = purity;\n                protos[(i * size) + j] = proto;\n            }\n        }\n        return (protos, purities);\n    }\n\n    function calculatePrice(uint base, uint16 packCount) public view returns (uint) {\n        // roughly 6k blocks per day\n        uint difference = block.number - creationBlock;\n        uint numDays = difference / 6000;\n        if (20 > numDays) {\n            return (base - (((20 - numDays) * base) / 100)) * packCount;\n        }\n        return base * packCount;\n    }\n\n    function _getCommonPlusRarity(uint32 rand) internal pure returns (CardProto.Rarity) {\n        if (rand == 999999) {\n            return CardProto.Rarity.Mythic;\n        } else if (rand >= 998345) {\n            return CardProto.Rarity.Legendary;\n        } else if (rand >= 986765) {\n            return CardProto.Rarity.Epic;\n        } else if (rand >= 924890) {\n            return CardProto.Rarity.Rare;\n        } else {\n            return CardProto.Rarity.Common;\n        }\n    }\n\n    function _getRarePlusRarity(uint32 rand) internal pure returns (CardProto.Rarity) {\n        if (rand == 999999) {\n            return CardProto.Rarity.Mythic;\n        } else if (rand >= 981615) {\n            return CardProto.Rarity.Legendary;\n        } else if (rand >= 852940) {\n            return CardProto.Rarity.Epic;\n        } else {\n            return CardProto.Rarity.Rare;\n        } \n    }\n\n    function _getEpicPlusRarity(uint32 rand) internal pure returns (CardProto.Rarity) {\n        if (rand == 999999) {\n            return CardProto.Rarity.Mythic;\n        } else if (rand >= 981615) {\n            return CardProto.Rarity.Legendary;\n        } else {\n            return CardProto.Rarity.Epic;\n        }\n    }\n\n    function _getLegendaryPlusRarity(uint32 rand) internal pure returns (CardProto.Rarity) {\n        if (rand == 999999) {\n            return CardProto.Rarity.Mythic;\n        } else {\n            return CardProto.Rarity.Legendary;\n        } \n    }\n\n    bool public canClaim = true;\n\n    function setCanClaim(bool claim) public onlyOwner {\n        canClaim = claim;\n    }\n\n    function getComponents(\n        uint16 i, uint8 j, uint rand\n    ) internal returns (\n        uint random, uint32 rarityRandom, uint16 purityOne, uint16 purityTwo, uint16 protoRandom\n    ) {\n        random = uint(keccak256(abi.encodePacked(i, rand, j)));\n        rarityRandom = uint32(extract(random, 4, 10) % 1000000);\n        purityOne = uint16(extract(random, 2, 4) % 1000);\n        purityTwo = uint16(extract(random, 2, 6) % 1000);\n        protoRandom = uint16(extract(random, 2, 8) % (2**16-1));\n        return (random, rarityRandom, purityOne, purityTwo, protoRandom);\n    }\n\n    function withdraw() public onlyOwner {\n        owner.transfer(address(this).balance);\n    }\n\n}\n\ncontract PackFourMultiplier is PresalePackFour {\n\n    address[] public packs;\n    uint16 public multiplier = 3;\n    FirstPheonix pheonix;\n    PreviousInterface old;\n\n    uint16 public packLimit = 5;\n\n    constructor(PreviousInterface _old, address[] _packs, MigrationInterface _core, CappedVault vault, FirstPheonix _pheonix) \n        public PresalePackFour(_core, vault) \n    {\n        packs = _packs;\n        pheonix = _pheonix;\n        old = _old;\n    }\n\n    function getCardCount() internal view returns (uint) {\n        return old.totalSupply() + old.burnCount();\n    }\n\n    function isPriorPack(address test) public view returns(bool) {\n        for (uint i = 0; i < packs.length; i++) {\n            if (packs[i] == test) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    event Status(uint before, uint aft);\n\n    function claimMultiple(address pack, uint purchaseID) public returns (uint16, address) {\n\n        require(isPriorPack(pack));\n\n        uint length = getCardCount();\n\n        PresalePackFour(pack).claim(purchaseID);\n\n        uint lengthAfter = getCardCount();\n\n        require(lengthAfter > length);\n\n        uint16 cardDifference = uint16(lengthAfter - length);\n\n        require(cardDifference % 5 == 0);\n\n        uint16 packCount = cardDifference / 5;\n\n        uint16 extra = packCount * multiplier;\n\n        address lastCardOwner = old.ownerOf(lengthAfter - 1);\n\n        Purchase memory p = Purchase({\n            user: lastCardOwner,\n            count: extra,\n            commit: uint64(block.number),\n            randomness: 0,\n            current: 0\n        });\n\n        uint id = purchases.push(p) - 1;\n\n        emit PacksPurchased(id, lastCardOwner, extra);\n\n        // try to give them a first pheonix\n        pheonix.claimPheonix(lastCardOwner);\n\n        emit Status(length, lengthAfter);\n\n\n        if (packCount <= packLimit) {\n            for (uint i = 0; i < cardDifference; i++) {\n                migration.migrate(lengthAfter - 1 - i);\n            }\n        }\n\n        return (extra, lastCardOwner);\n    }\n\n    function setPackLimit(uint16 limit) public onlyOwner {\n        packLimit = limit;\n    }\n\n\n}\n\ncontract LegendaryPackFour is PackFourMultiplier {\n    \n    function basePrice() public returns (uint) {\n        return 112 finney;\n    }\n\n    TournamentPass public tournament;\n\n    constructor(PreviousInterface _old, address[] _packs, MigrationInterface _core, CappedVault vault, TournamentPass _tournament, FirstPheonix _pheonix) \n        public PackFourMultiplier(_old, _packs, _core, vault, _pheonix) {\n        \n        tournament = _tournament;\n    }\n\n    function purchase(uint16 packCount, address referrer) public payable {\n        super.purchase(packCount, referrer);\n        tournament.mint(msg.sender, packCount);\n    }\n\n    function claimMultiple(address pack, uint purchaseID) public returns (uint16, address) {\n        uint16 extra;\n        address user;\n        (extra, user) = super.claimMultiple(pack, purchaseID);\n        tournament.mint(user, extra);\n    }\n\n    function getCardDetails(uint16 packIndex, uint8 cardIndex, uint result) public view returns (uint16 proto, uint16 purity) {\n        uint random;\n        uint32 rarityRandom;\n        uint16 protoRandom;\n        uint16 purityOne;\n        uint16 purityTwo;\n\n        CardProto.Rarity rarity;\n\n        (random, rarityRandom, purityOne, purityTwo, protoRandom) = getComponents(packIndex, cardIndex, result);\n\n        if (cardIndex == 4) {\n            rarity = _getLegendaryPlusRarity(rarityRandom);\n        } else if (cardIndex == 3) {\n            rarity = _getRarePlusRarity(rarityRandom);\n        } else {\n            rarity = _getCommonPlusRarity(rarityRandom);\n        }\n\n        purity = _getPurity(purityOne, purityTwo);\n    \n        proto = migration.getRandomCard(rarity, protoRandom);\n\n        return (proto, purity);\n    } \n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"packSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tournament\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"packCount\",\"type\":\"uint16\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"recommit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pack\",\"type\":\"address\"},{\"name\":\"purchaseID\",\"type\":\"uint256\"}],\"name\":\"claimMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"name\":\"current\",\"type\":\"uint16\"},{\"name\":\"count\",\"type\":\"uint16\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"randomness\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"packsPerClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_perClaim\",\"type\":\"uint16\"}],\"name\":\"setPacksPerClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"packCount\",\"type\":\"uint16\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"purchaseFor\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"test\",\"type\":\"address\"}],\"name\":\"isPriorPack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPurchaseCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"packIndex\",\"type\":\"uint16\"},{\"name\":\"cardIndex\",\"type\":\"uint8\"},{\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"getCardDetails\",\"outputs\":[{\"name\":\"proto\",\"type\":\"uint16\"},{\"name\":\"purity\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"setCanClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"predictPacks\",\"outputs\":[{\"name\":\"protos\",\"type\":\"uint16[]\"},{\"name\":\"purities\",\"type\":\"uint16[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"limit\",\"type\":\"uint16\"}],\"name\":\"setPackLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"uint256\"},{\"name\":\"packCount\",\"type\":\"uint16\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"packLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_old\",\"type\":\"address\"},{\"name\":\"_packs\",\"type\":\"address[]\"},{\"name\":\"_core\",\"type\":\"address\"},{\"name\":\"vault\",\"type\":\"address\"},{\"name\":\"_tournament\",\"type\":\"address\"},{\"name\":\"_pheonix\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"before\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"aft\",\"type\":\"uint256\"}],\"name\":\"Status\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint16\"}],\"name\":\"PacksPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cardIDs\",\"type\":\"uint256[]\"}],\"name\":\"PackOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"RandomnessReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Recommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchaser\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"}]",
  "bytecode": "60806040526002805460a060020a60ff02191690556005805462ff00001961ffff19918216600f17166201000017909155600780549091166003179055600880547405000000000000000000000000000000000000000060a060020a61ffff02199091161790553480156200007357600080fd5b50604051620021dc380380620021dc8339810160409081528151602080840151928401516060850151608086015160a087015160008054600160a060020a03808716600160a060020a031992831617909255625aa74560015560028054821633179055600380549286169290911691909117905595909601805194969095929491939092918791879187918791869162000113916006918701906200016f565b50600780546201000060b060020a03191662010000600160a060020a039384160217905560088054600160a060020a03199081169683169690961790556009805490951696169590951790925550620002039650505050505050565b828054828255906000526020600020908101928215620001c7579160200282015b82811115620001c75782518254600160a060020a031916600160a060020a0390911617825560209092019160019091019062000190565b50620001d5929150620001d9565b5090565b6200020091905b80821115620001d5578054600160a060020a0319168155600101620001e0565b90565b611fc980620002136000396000f3006080604052600436106101875763ffffffff60e060020a60003504166306a628d4811461018c57806313af4035146101b75780631705a3bd146101da578063176345141461020b5780631b3ed722146102325780631e0197e21461025e578063379607f514610273578063396c82281461028b5780633ccfd60b146102a65780633f4ba83a146102bb57806345d63b66146102d05780635c975abb146102e85780635f9602e8146103115780636bc3e4a8146103265780636dc7a627146103705780638392fe31146103855780638456cb59146103e15780638be4339b146103f65780638da5cb5b1461040b5780639a1f6a0f14610420578063b01d5b631461043c578063b84c13921461045e578063bd6cac4f14610476578063becd283f14610497578063c2f0bb29146104ac578063c503101e146104f2578063c7876ea41461050c578063ca2bf04714610521578063d42a5011146105d2578063e3f7faaf146105ee578063eb1098b81461060d578063fbfa77cf14610622578063ff585caf14610637575b600080fd5b34801561019857600080fd5b506101a161064f565b6040805160ff9092168252519081900360200190f35b3480156101c357600080fd5b506101d8600160a060020a0360043516610654565b005b3480156101e657600080fd5b506101ef61069a565b60408051600160a060020a039092168252519081900360200190f35b34801561021757600080fd5b506102206106a9565b60408051918252519081900360200190f35b34801561023e57600080fd5b506102476106af565b6040805161ffff9092168252519081900360200190f35b34801561026a57600080fd5b506101ef6106b9565b34801561027f57600080fd5b506101d86004356106c8565b6101d861ffff60043516600160a060020a03602435166109ba565b3480156102b257600080fd5b506101d8610a64565b3480156102c757600080fd5b506101d8610ab8565b3480156102dc57600080fd5b506101d8600435610b30565b3480156102f457600080fd5b506102fd610bd4565b604080519115158252519081900360200190f35b34801561031d57600080fd5b50610247610be4565b34801561033257600080fd5b5061034a600160a060020a0360043516602435610bee565b6040805161ffff9093168352600160a060020a0390911660208301528051918290030190f35b34801561037c57600080fd5b506102fd610cac565b34801561039157600080fd5b5061039d600435610cbb565b6040805161ffff9687168152949095166020850152600160a060020a0390921683850152606083015267ffffffffffffffff16608082015290519081900360a00190f35b3480156103ed57600080fd5b506101d8610d17565b34801561040257600080fd5b50610247610d94565b34801561041757600080fd5b506101ef610d9e565b34801561042c57600080fd5b506101d861ffff60043516610dad565b6101d8600160a060020a0360043581169061ffff602435169060443516610ddc565b34801561046a57600080fd5b506101ef600435610e03565b34801561048257600080fd5b506102fd600160a060020a0360043516610e2b565b3480156104a357600080fd5b50610220610e89565b3480156104b857600080fd5b506104d161ffff6004351660ff60243516604435610e8f565b6040805161ffff938416815291909216602082015281519081900390910190f35b3480156104fe57600080fd5b506101d86004351515610fbe565b34801561051857600080fd5b50610220610ff1565b34801561052d57600080fd5b50610539600435610ffd565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561057d578181015183820152602001610565565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105bc5781810151838201526020016105a4565b5050505090500194505050505060405180910390f35b3480156105de57600080fd5b506101d861ffff600435166111c2565b3480156105fa57600080fd5b5061022060043561ffff6024351661120c565b34801561061957600080fd5b5061024761124d565b34801561062e57600080fd5b506101ef61125e565b34801561064357600080fd5b506101d860043561126d565b600590565b600254600160a060020a0316331461066b57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031681565b60015481565b60075461ffff1681565b600954600160a060020a031681565b6000806000806000806000806060600080600060048d8154811015156106ea57fe5b90600052602060002090600302019b50600560029054906101000a900460ff16151561071557600080fd5b8b5460018d01546201000090910461ffff169950975061073361064f565b8c54909750600160a060020a03640100000000820416965061ffff16945087151561075d57600080fd5b600061ffff8a161161076e57600080fd5b8660ff1660405190808252806020026020018201604052801561079b578160200160208202803883390190505b5093508861ffff166107ab610d94565b860161ffff16116107c5576107be610d94565b85016107c7565b885b925061ffff808616908416116107dc57600080fd5b8491505b8261ffff168261ffff161015610993575060005b8660ff168160ff1610156108f35761080d82828a610e8f565b809b50819c5050506000809054906101000a9004600160a060020a0316600160a060020a031663fb36eba1878d8d6040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018361ffff1661ffff1681526020018261ffff1661ffff1681526020019350505050602060405180830381600087803b1580156108a457600080fd5b505af11580156108b8573d6000803e3d6000fd5b505050506040513d60208110156108ce57600080fd5b50518451859060ff84169081106108e157fe5b602090810290910101526001016107f4565b85600160a060020a03168d7f69ac64af86d3ef40c9def928534f6a6a9e12d85ec3af2948bd66b802afcc10468960ff16850287604051808361ffff1661ffff16815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561097457818101518382015260200161095c565b50505050905001935050505060405180910390a36001909101906107e0565b5050895461ffff1981169390910361ffff9182160116919091179097555050505050505050565b6109c48282611442565b600954604080517f40c10f1900000000000000000000000000000000000000000000000000000000815233600482015261ffff851660248201529051600160a060020a03909216916340c10f19916044808201926020929091908290030181600087803b158015610a3457600080fd5b505af1158015610a48573d6000803e3d6000fd5b505050506040513d6020811015610a5e57600080fd5b50505050565b600254600160a060020a03163314610a7b57600080fd5b600254604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610ab5573d6000803e3d6000fd5b50565b600254600160a060020a03163314610acf57600080fd5b60025460a060020a900460ff161515610ae757600080fd5b6002805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6000600482815481101515610b4157fe5b9060005260206000209060030201905080600101546000141515610b6457600080fd5b600281015467ffffffffffffffff9081166101000116431015610b8657600080fd5b60028101805467ffffffffffffffff19164367ffffffffffffffff1617905560405182907f29ef13d2827ff333d3fde4646988c3a7db16de1210f0c0b613fd0ac9773e4e7b90600090a25050565b60025460a060020a900460ff1681565b60055461ffff1681565b600080600080610bfe8686611468565b600954604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03808516600483015261ffff86166024830152915194965092945016916340c10f19916044808201926020929091908290030181600087803b158015610c7457600080fd5b505af1158015610c88573d6000803e3d6000fd5b505050506040513d6020811015610c9e57600080fd5b509396929550919350505050565b60055462010000900460ff1681565b6004805482908110610cc957fe5b600091825260209091206003909102018054600182015460029092015461ffff80831694506201000083041692640100000000909204600160a060020a0316919067ffffffffffffffff1685565b600254600160a060020a03163314610d2e57600080fd5b60025460a060020a900460ff1615610d4557600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b60055461ffff1690565b600254600160a060020a031681565b600254600160a060020a03163314610dc457600080fd5b6005805461ffff191661ffff92909216919091179055565b60025460a060020a900460ff1615610df357600080fd5b610dfe8383836118ef565b505050565b6006805482908110610e1157fe5b600091825260209091200154600160a060020a0316905081565b6000805b600654811015610e7e5782600160a060020a0316600682815481101515610e5257fe5b600091825260209091200154600160a060020a03161415610e765760019150610e83565b600101610e2f565b600091505b50919050565b60045490565b600080600080600080600080610ea68b8b8b611b96565b9399509197509195509093509150600460ff8b161415610ed057610ec985611cfd565b9050610ef1565b8960ff1660031415610ee557610ec985611d21565b610eee85611d74565b90505b610efb8383611ddf565b6000546040517fcaa19168000000000000000000000000000000000000000000000000000000008152919850600160a060020a03169063caa19168908390879060049081019081908490811115610f4e57fe5b60ff1681526020018261ffff1661ffff16815260200192505050602060405180830381600087803b158015610f8257600080fd5b505af1158015610f96573d6000803e3d6000fd5b505050506040513d6020811015610fac57600080fd5b50519750505050505050935093915050565b600254600160a060020a03163314610fd557600080fd5b60058054911515620100000262ff000019909216919091179055565b67018de76816d8000090565b606080611008611f6f565b600080600080600080600060048b81548110151561102257fe5b60009182526020918290206040805160a0810182526003909302909101805461ffff808216855262010000820416948401859052600160a060020a03640100000000909104169183019190915260018101546060830181905260029091015467ffffffffffffffff16608083015290995090955093506110a061064f565b9250848360ff160261ffff166040519080825280602002602001820160405280156110d5578160200160208202803883390190505b509850848360ff160261ffff1660405190808252806020026020018201604052801561110b578160200160208202803883390190505b509950600091505b8461ffff168261ffff1610156111b5575060005b8260ff168160ff1610156111aa57611140828286610e8f565b8a51919850965086908a9061ffff60ff8781168702908616011690811061116357fe5b61ffff928316602091820290920101528a5188918c9160ff87811687029086160190911690811061119057fe5b61ffff909216602092830290910190910152600101611127565b600190910190611113565b5050505050505050915091565b600254600160a060020a031633146111d957600080fd5b6008805461ffff90921660a060020a0275ffff000000000000000000000000000000000000000019909216919091179055565b60015460009043036117708104601481101561123b5761ffff8416606460148390038702048603029250611245565b8361ffff16850292505b505092915050565b60085460a060020a900461ffff1681565b600354600160a060020a031681565b600080600060048481548110151561128157fe5b90600052602060002090600302019250826001015460001415156112a457600080fd5b600283015467ffffffffffffffff1660ff194301106112c257600080fd5b60028301544367ffffffffffffffff908116911614156112e157600080fd5b600283015483546040805167ffffffffffffffff9093164060208085018290526401000000008404600160a060020a03166c0100000000000000000000000090810286850152300260548601526201000090930461ffff167e010000000000000000000000000000000000000000000000000000000000000260688501528151808503604a018152606a90940191829052835190955090918291908401908083835b602083106113a25780518252601f199092019160209182019101611383565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209350505082151590506113dd57600080fd5b6001830181905582546040805162010000830461ffff168152602081018490528151640100000000909304600160a060020a03169287927fedb5ce4012b6e9c5904afa2ffad9811d5c2e91e6bca8914cf7e3ffc28e630c57928290030190a350505050565b60025460a060020a900460ff161561145957600080fd5b6114643383836118ef565b5050565b60008060008060008060008061147c611f6f565b6000806114888d610e2b565b151561149357600080fd5b61149b611e32565b98508c600160a060020a031663379607f58d6040518263ffffffff1660e060020a02815260040180828152602001915050600060405180830381600087803b1580156114e657600080fd5b505af11580156114fa573d6000803e3d6000fd5b50505050611506611e32565b975088881161151457600080fd5b8888039650600561ffff88160661ffff161561152f57600080fd5b600561ffff8816600754600854604080517f6352211e0000000000000000000000000000000000000000000000000000000081526000198e016004820152905194909304995061ffff90911689029750600160a060020a031691636352211e916024808201926020929091908290030181600087803b1580156115b157600080fd5b505af11580156115c5573d6000803e3d6000fd5b505050506040513d60208110156115db57600080fd5b50516040805160a081018252600080825261ffff8981166020848101828152600160a060020a038089168789018181526060890188815267ffffffffffffffff43811660808c01908152600480546001810182559b528b5160038c027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b81018054995196519098166401000000000277ffffffffffffffffffffffffffffffffffffffff0000000019968d16620100000263ffff00001993909d1661ffff19909a1699909917919091169a909a17939093169590951790935591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c87015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d90950180549590921667ffffffffffffffff19909516949094179055855191825294519599509297509095509285927f861fd6f8fe14603acc05fa404f8cca86371619cac8a65a92edf687f81b9bafbd928290030190a3600754604080517ff88218e0000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151620100009093049091169163f88218e0916024808201926020929091908290030181600087803b1580156117c357600080fd5b505af11580156117d7573d6000803e3d6000fd5b505050506040513d60208110156117ed57600080fd5b5050604080518a8152602081018a905281517f31a1adb447f9b6b89f24bf104f0b7a06975ad9f35670dbfaf7ce29190ec54762929181900390910190a160085461ffff60a060020a9091048116908716116118dc575060005b8661ffff168110156118dc5760008054604080517f454b0608000000000000000000000000000000000000000000000000000000008152848c036000190160048201529051600160a060020a039092169263454b06089260248084019382900301818387803b1580156118b857600080fd5b505af11580156118cc573d6000803e3d6000fd5b5050600190920191506118469050565b50929b919a509098505050505050505050565b60006118f9611f6f565b60008061ffff8616811061190c57600080fd5b600160a060020a03858116908816141561192557600080fd5b611936611930610ff1565b8761120c565b93503484111561194557600080fd5b6040805160a081018252600080825261ffff8981166020808501828152600160a060020a03808f168789018181526060890188815267ffffffffffffffff43811660808c01908152600480546001810182559b528b5160038c027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b81018054995196519098166401000000000277ffffffffffffffffffffffffffffffffffffffff0000000019968d16620100000263ffff00001993909d1661ffff19909a1699909917919091169a909a17939093169590951790935591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c87015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d90950180549590921667ffffffffffffffff19909516949094179055855191825294519397509195509285927f861fd6f8fe14603acc05fa404f8cca86371619cac8a65a92edf687f81b9bafbd9281900390910190a3600160a060020a03851615611b525750604051600a840490600160a060020a0386169082156108fc029083906000818181858888f19350505050158015611b06573d6000803e3d6000fd5b5060408051828152600160a060020a03898116602083015282519684900396908816927f13aa7090696e2a1d666cfc6046f2f72f1c4e0290649b47bab28d1b370ad73783928290030190a25b600354604051600160a060020a039091169085156108fc029086906000818181858888f19350505050158015611b8c573d6000803e3d6000fd5b5050505050505050565b6000806000806000878688604051602001808461ffff1661ffff167e010000000000000000000000000000000000000000000000000000000000000281526002018381526020018260ff1660ff167f010000000000000000000000000000000000000000000000000000000000000002815260010193505050506040516020818303038152906040526040518082805190602001908083835b60208310611c4e5780518252601f199092019160209182019101611c2f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600190049450620f4240611c92866004600a611f4f565b811515611c9b57fe5b0693506103e8611cae8660026004611f4f565b811515611cb757fe5b0692506103e8611cca8660026006611f4f565b811515611cd357fe5b06915061ffff611ce68660026008611f4f565b811515611cef57fe5b069050939792965093509350565b60008163ffffffff16620f423f1415611d1857506004611d1c565b5060035b919050565b60008163ffffffff16620f423f1415611d3c57506004611d1c565b620efa6f63ffffffff831610611d5457506003611d1c565b620d03cc63ffffffff831610611d6c57506002611d1c565b506001611d1c565b60008163ffffffff16620f423f1415611d8f57506004611d1c565b620f3bc963ffffffff831610611da757506003611d1c565b620f0e8d63ffffffff831610611dbf57506002611d1c565b620e1cda63ffffffff831610611dd757506001611d1c565b506000611d1c565b60006103e661ffff841610611df95750610bb88101611e2c565b6103dc61ffff841610611e1157506107d08101611e2c565b6103aa61ffff841610611e2957506103e88101611e2c565b50805b92915050565b600854604080517f524773ce0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163524773ce91600480830192602092919082900301818787803b158015611e9157600080fd5b505af1158015611ea5573d6000803e3d6000fd5b505050506040513d6020811015611ebb57600080fd5b5051600854604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916318160ddd916004808201926020929091908290030181600087803b158015611f1d57600080fd5b505af1158015611f31573d6000803e3d6000fd5b505050506040513d6020811015611f4757600080fd5b505101905090565b6008828102600290810a60001990810192840201900a8404169392505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152905600a165627a7a723058202bb0e18af9d3c4ac3fe49e0c26b611e7ba7ef487404bab268739ab50d17908fe0029000000000000000000000000512fbd15bde6570ff09e4438af27ede60402451500000000000000000000000000000000000000000000000000000000000000c00000000000000000000000006ebeaf8e8e946f0716e6533a6f2cefc83f60e8ab00000000000000000000000091b9d2835ad914bc1dcfe09bd1816febd04fd68900000000000000000000000022365168c8705e95b2d08876c23a8c13e3ad72e2000000000000000000000000657c8982d63f58ddd6a54c75591a572d4180cec800000000000000000000000000000000000000000000000000000000000000020000000000000000000000006c5dc1dcda3d309a6e919e6d0965f197e0fc19130000000000000000000000005789e2b5460cae9329d93a78511e2ac49f98a1f6",
  "constructorArguments": "000000000000000000000000512fbd15bde6570ff09e4438af27ede60402451500000000000000000000000000000000000000000000000000000000000000c00000000000000000000000006ebeaf8e8e946f0716e6533a6f2cefc83f60e8ab00000000000000000000000091b9d2835ad914bc1dcfe09bd1816febd04fd68900000000000000000000000022365168c8705e95b2d08876c23a8c13e3ad72e2000000000000000000000000657c8982d63f58ddd6a54c75591a572d4180cec800000000000000000000000000000000000000000000000000000000000000020000000000000000000000006c5dc1dcda3d309a6e919e6d0965f197e0fc19130000000000000000000000005789e2b5460cae9329d93a78511e2ac49f98a1f6"
}