{
  "address": "0x63cef38c75d9805a36d92fa291bae781b41861e1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "R1Exchange",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-04\n*/\n\n///auto-generated single file for verifying contract on etherscan\npragma solidity ^0.4.20;\n\ncontract SafeMath {\n\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n}\n\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract Token {\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\ncontract R1Exchange is SafeMath, Ownable {\n    mapping(address => bool) public admins;\n    mapping(address => bool) public feeAccounts;\n    // mapping(token address => mapping(owner address => mapping(channelId uint => uint256))) public tokenList;\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public tokenList;\n    // mapping(owner address =>  mapping(orderHash bytes32 => uint256)) public tokenList;\n    mapping(address => mapping(bytes32 => uint256)) public orderFilled;//tokens filled\n    mapping(bytes32 => bool) public withdrawn;\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public withdrawAllowance;\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public applyList;//withdraw apply list\n    mapping(address => mapping(address => mapping(uint256 => uint))) public latestApply;//save the latest apply timestamp\n    // mapping(owner address => mapping(channelId uint => nonce uint256))) public canceled;\n    mapping(address => mapping(uint256 => uint)) public canceled;\n    string public constant version = '2.0.0';\n    uint public applyWait = 1 days;\n    uint public feeRate = 10;\n    bool public withdrawEnabled = false;\n    bool public stop = false;\n    uint256 private DEFAULT_CHANNEL_ID = 0;\n    bool public depositToEnabled = true;\n    bool public transferEnabled = false;\n    bool public changeChannelEnabled = false;\n    event Deposit(address indexed token, address indexed user, uint256 amount, uint256 balance, uint256 channelId);\n    event DepositTo(address indexed token, address indexed from, address indexed user, uint256 amount, uint256 balance, uint256 channelId);\n    event Withdraw(address indexed token, address indexed user, uint256 amount, uint256 balance, uint256 channelId);\n    event ApplyWithdraw(address indexed token, address indexed user, uint256 amount, uint256 time, uint256 channelId);\n    event ApproveWithdraw(address indexed token, address indexed user, uint256 channelId);\n    event Trade(address indexed maker, address indexed taker, uint256 amount, uint256 makerFee, uint256 takerFee, uint256 makerNonce, uint256 takerNonce);\n    event InnerTransfer(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 balance, uint256 channelId);\n    event ChangeChannel(address indexed token, address indexed user, uint256 amount, uint256 fromChannelId, uint256 toChannelId);\n    event BatchCancel(uint256 count, uint256 channelId);\n    modifier onlyAdmin {\n        require(admins[msg.sender]);\n        _;\n    }\n    modifier isWithdrawEnabled {\n        require(withdrawEnabled);\n        _;\n    }\n    modifier isFeeAccount(address fa) {\n        require(feeAccounts[fa]);\n        _;\n    }\n    modifier notStop() {\n        require(!stop);\n        _;\n    }\n    modifier isDepositToEnabled() {\n        require(depositToEnabled);\n        _;\n    }\n    modifier isTransferEnabled() {\n        require(transferEnabled);\n        _;\n    }\n    modifier isChangeChannelEnabled() {\n        require(changeChannelEnabled);\n        _;\n    }\n    function() public {\n        revert();\n    }\n    function setAdmin(address admin, bool isAdmin) public onlyOwner {\n        require(admin != 0);\n        admins[admin] = isAdmin;\n    }\n    function setFeeAccount(address acc, bool asFee) public onlyOwner {\n        require(acc != 0);\n        feeAccounts[acc] = asFee;\n    }\n    function enableWithdraw(bool enabled) public onlyOwner {\n        withdrawEnabled = enabled;\n    }\n    function enableDepositTo(bool enabled) public onlyOwner {\n        depositToEnabled = enabled;\n    }\n    function enableTransfer(bool enabled) public onlyOwner {\n        transferEnabled = enabled;\n    }\n    function enableChangeChannel(bool enabled) public onlyOwner {\n        changeChannelEnabled = enabled;\n    }\n    function changeLockTime(uint lock) public onlyOwner {\n        require(lock <= 7 days);\n        applyWait = lock;\n    }\n    function changeFeeRate(uint fr) public onlyOwner {\n        //max fee rate MUST <=10%\n        require(fr >= 10);\n        feeRate = fr;\n    }\n    function stopTrade() public onlyOwner {\n        stop = true;\n    }\n    /**\n    * cancel the order that before nonce.\n    **/\n    function batchCancel(address[] users, uint256[] nonces, uint256 channelId) public onlyAdmin {\n        require(users.length == nonces.length);\n        uint256 count = 0;\n        for (uint i = 0; i < users.length; i++) {\n            require(nonces[i] >= canceled[users[i]][channelId]);\n            canceled[users[i]][channelId] = nonces[i];\n            count++;\n        }\n        BatchCancel(count, channelId);\n    }\n    function deposit(uint256 channelId) public payable {\n        tokenList[0][msg.sender][channelId] = safeAdd(tokenList[0][msg.sender][channelId], msg.value);\n        Deposit(0, msg.sender, msg.value, tokenList[0][msg.sender][channelId], channelId);\n    }\n    function depositToken(address token, uint256 amount, uint256 channelId) public {\n        require(token != 0);\n        tokenList[token][msg.sender][channelId] = safeAdd(tokenList[token][msg.sender][channelId], amount);\n        require(Token(token).transferFrom(msg.sender, this, amount));\n        Deposit(token, msg.sender, amount, tokenList[token][msg.sender][channelId], channelId);\n    }\n    function depositTo(address to, uint256 channelId) public payable isDepositToEnabled {\n        require(to != 0 && msg.value > 0);\n        tokenList[0][to][channelId] = safeAdd(tokenList[0][to][channelId], msg.value);\n        DepositTo(0, msg.sender, to, msg.value, tokenList[0][to][channelId], channelId);\n    }\n    function depositTokenTo(address token, address to, uint256 amount, uint256 channelId) public isDepositToEnabled {\n        require(token != 0 && to != 0 && amount > 0);\n        tokenList[token][to][channelId] = safeAdd(tokenList[token][to][channelId], amount);\n        require(Token(token).transferFrom(msg.sender, this, amount));\n        DepositTo(token, msg.sender, to, amount, tokenList[token][to][channelId], channelId);\n    }\n    function batchDepositTokenTo(address[] token, address[] to, uint256[] amount, uint256 channelId) public isDepositToEnabled {\n        require(to.length == amount.length && to.length <= 200);\n        for (uint i = 0; i < to.length; i++) {\n            depositTokenTo(token[i], to[i], amount[i], channelId);\n        }\n    }\n    function innerTransfer(address token, address to, uint256 amount, uint256 channelId) public isTransferEnabled {\n        require(to != 0);\n        require(amount <= tokenList[token][msg.sender][channelId]);\n        tokenList[token][msg.sender][channelId] = safeSub(tokenList[token][msg.sender][channelId], amount);\n        tokenList[token][to][channelId] = safeAdd(tokenList[token][to][channelId], amount);\n        InnerTransfer(token, msg.sender, to, amount, tokenList[token][msg.sender][channelId], channelId);\n    }\n    function batchInnerTransfer(address[] token, address[] to, uint256[] amount, uint256 channelId) public isTransferEnabled {\n        require(to.length == amount.length && to.length <= 200);\n        for (uint i = 0; i < to.length; i++) {\n            innerTransfer(token[i], to[i], amount[i], channelId);\n        }\n    }\n    function changeChannel(address token, uint256 amount, uint256 fromChannelId, uint256 toChannelId) public isChangeChannelEnabled {\n        require(amount <= tokenList[token][msg.sender][fromChannelId]);\n        tokenList[token][msg.sender][fromChannelId] = safeSub(tokenList[token][msg.sender][fromChannelId], amount);\n        tokenList[token][msg.sender][toChannelId] = safeAdd(tokenList[token][msg.sender][toChannelId], amount);\n        ChangeChannel(token, msg.sender, amount, fromChannelId, toChannelId);\n    }\n    function batchChangeChannel(address[] token, uint256[] amount, uint256 fromChannelId, uint256 toChannelId) public isChangeChannelEnabled {\n        require(token.length == amount.length && amount.length <= 200);\n        for (uint i = 0; i < amount.length; i++) {\n            changeChannel(token[i], amount[i], fromChannelId, toChannelId);\n        }\n    }\n    function applyWithdraw(address token, uint256 amount, uint256 channelId) public {\n        uint256 apply = safeAdd(applyList[token][msg.sender][channelId], amount);\n        require(safeAdd(apply, withdrawAllowance[token][msg.sender][channelId]) <= tokenList[token][msg.sender][channelId]);\n        applyList[token][msg.sender][channelId] = apply;\n        latestApply[token][msg.sender][channelId] = block.timestamp;\n        ApplyWithdraw(token, msg.sender, amount, block.timestamp, channelId);\n    }\n    /**\n    * approve user's withdraw application\n    **/\n    function approveWithdraw(address token, address user, uint256 channelId) public onlyAdmin {\n        withdrawAllowance[token][user][channelId] = safeAdd(withdrawAllowance[token][user][channelId], applyList[token][user][channelId]);\n        applyList[token][user][channelId] = 0;\n        latestApply[token][user][channelId] = 0;\n        ApproveWithdraw(token, user, channelId);\n    }\n    /**\n    * user's withdraw will success in two cases:\n    *    1. when the admin calls the approveWithdraw function;\n    * or 2. when the lock time has passed since the application;\n    **/\n    function withdraw(address token, uint256 amount, uint256 channelId) public {\n        require(amount <= tokenList[token][msg.sender][channelId]);\n        if (amount > withdrawAllowance[token][msg.sender][channelId]) {\n            //withdraw wait over time\n            require(latestApply[token][msg.sender][channelId] != 0 && safeSub(block.timestamp, latestApply[token][msg.sender][channelId]) > applyWait);\n            withdrawAllowance[token][msg.sender][channelId] = safeAdd(withdrawAllowance[token][msg.sender][channelId], applyList[token][msg.sender][channelId]);\n            applyList[token][msg.sender][channelId] = 0;\n        }\n        require(amount <= withdrawAllowance[token][msg.sender][channelId]);\n        withdrawAllowance[token][msg.sender][channelId] = safeSub(withdrawAllowance[token][msg.sender][channelId], amount);\n        tokenList[token][msg.sender][channelId] = safeSub(tokenList[token][msg.sender][channelId], amount);\n        latestApply[token][msg.sender][channelId] = 0;\n        if (token == 0) {//withdraw ether\n            require(msg.sender.send(amount));\n        } else {//withdraw token\n            require(Token(token).transfer(msg.sender, amount));\n        }\n        Withdraw(token, msg.sender, amount, tokenList[token][msg.sender][channelId], channelId);\n    }\n    /**\n    * withdraw directly when withdrawEnabled=true\n    **/\n    function withdrawNoLimit(address token, uint256 amount, uint256 channelId) public isWithdrawEnabled {\n        require(amount <= tokenList[token][msg.sender][channelId]);\n        tokenList[token][msg.sender][channelId] = safeSub(tokenList[token][msg.sender][channelId], amount);\n        if (token == 0) {//withdraw ether\n            require(msg.sender.send(amount));\n        } else {//withdraw token\n            require(Token(token).transfer(msg.sender, amount));\n        }\n        Withdraw(token, msg.sender, amount, tokenList[token][msg.sender][channelId], channelId);\n    }\n    struct AdminWithdrawParam {\n        address user;\n        address token;\n        address feeAccount;\n        address channelFeeAccount;\n        uint256 amount;\n        uint256 nonce;\n        uint256 fee;\n        uint256 channelFee;\n        uint256 channelId;\n    }\n    /**\n    * admin withdraw according to user's signed withdraw info\n    * PARAMS:\n    * addresses:\n    * [0] user\n    * [1] token\n    * [2] feeAccount\n    * [3] channelFeeAccount\n    * values:\n    * [0] amount\n    * [1] nonce\n    * [2] fee\n    * [3] channelFee\n    * [4] channelId\n    **/\n    function adminWithdraw(address[4] addresses, uint256[5] values, uint8 v, bytes32 r, bytes32 s)\n    public\n    onlyAdmin\n    isFeeAccount(addresses[2])\n    {\n        AdminWithdrawParam memory param = AdminWithdrawParam({\n            user : addresses[0],\n            token : addresses[1],\n            feeAccount : addresses[2],\n            channelFeeAccount : addresses[3],\n            amount : values[0],\n            nonce : values[1],\n            fee : values[2],\n            channelFee : values[3],\n            channelId : values[4]\n            });\n        require(param.amount <= tokenList[param.token][param.user][param.channelId]);\n        param.fee = checkFee(param.amount, param.fee);\n        param.channelFee = checkFee(param.amount, param.channelFee);\n        bytes32 hash = keccak256(this, param.user, param.token, param.amount, param.nonce, param.channelFeeAccount, param.channelId);\n        require(!withdrawn[hash]);\n        withdrawn[hash] = true;\n        require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash), v, r, s) == param.user);\n        tokenList[param.token][param.user][param.channelId] = safeSub(tokenList[param.token][param.user][param.channelId], param.amount);\n        tokenList[param.token][param.feeAccount][DEFAULT_CHANNEL_ID] = safeAdd(tokenList[param.token][param.feeAccount][DEFAULT_CHANNEL_ID], param.fee);\n        tokenList[param.token][param.channelFeeAccount][param.channelId] = safeAdd(tokenList[param.token][param.channelFeeAccount][param.channelId], param.channelFee);\n        param.amount = safeSub(param.amount, param.fee);\n        param.amount = safeSub(param.amount, param.channelFee);\n        if (param.token == 0) {//withdraw ether\n            require(param.user.send(param.amount));\n        } else {//withdraw token\n            require(Token(param.token).transfer(param.user, param.amount));\n        }\n        Withdraw(param.token, param.user, param.amount, tokenList[param.token][param.user][param.channelId], param.channelId);\n    }\n    function checkFee(uint256 amount, uint256 fee) private returns (uint256){\n        uint256 maxFee = fee;\n        if (safeMul(fee, feeRate) > amount) {\n            maxFee = amount / feeRate;\n        }\n        return maxFee;\n    }\n    function getOrderHash(address tokenBuy, uint256 amountBuy, address tokenSell, uint256 amountSell, address base, uint256 expires, uint256 nonce, address feeToken, address channelFeeAccount, uint256 channelId) public view returns (bytes32) {\n        return keccak256(this, tokenBuy, amountBuy, tokenSell, amountSell, base, expires, nonce, feeToken, channelFeeAccount, channelId);\n    }\n    function balanceOf(address token, address user, uint256 channelId) public constant returns (uint256) {\n        return tokenList[token][user][channelId];\n    }\n    struct Order {\n        address tokenBuy;\n        address tokenSell;\n        uint256 amountBuy;\n        uint256 amountSell;\n        address user;\n        uint256 fee;\n        uint256 expires;\n        uint256 nonce;\n        bytes32 orderHash;\n        address baseToken;\n        address feeToken;//0:default;others:payed with erc-20 token\n        address channelFeeAccount;\n        uint256 channelFee;\n        uint256 channelId;\n    }\n    /**\n    * swap maker and taker's tokens according to their signed order info.\n    *\n    * PARAMS:\n    * addresses:\n    * [0]:maker tokenBuy\n    * [1]:taker tokenBuy\n    * [2]:maker tokenSell\n    * [3]:taker tokenSell\n    * [4]:maker user\n    * [5]:taker user\n    * [6]:maker baseTokenAddr .default:0 ,then baseToken is ETH\n    * [7]:taker baseTokenAddr .default:0 ,then baseToken is ETH\n    * [8]:maker feeToken .\n    * [9]:taker feeToken .\n    * [10]:feeAccount\n    * [11]:makerChannelAccount\n    * [12]:takerChannelAccount\n    * values:\n    * [0]:maker amountBuy\n    * [1]:taker amountBuy\n    * [2]:maker amountSell\n    * [3]:taker amountSell\n    * [4]:maker fee\n    * [5]:taker fee\n    * [6]:maker expires\n    * [7]:taker expires\n    * [8]:maker nonce\n    * [9]:taker nonce\n    * [10]:tradeAmount of token\n    * [11]:makerChannelFee\n    * [12]:takerChannelFee\n    * [13]:makerChannelId\n    * [14]:takerChannelId\n    * v,r,s:maker and taker's signature\n    **/\n    function trade(\n        address[13] addresses,\n        uint256[15] values,\n        uint8[2] v,\n        bytes32[2] r,\n        bytes32[2] s\n    ) public\n    onlyAdmin\n    isFeeAccount(addresses[10])\n    notStop\n    {\n        Order memory makerOrder = Order({\n            tokenBuy : addresses[0],\n            tokenSell : addresses[2],\n            user : addresses[4],\n            amountBuy : values[0],\n            amountSell : values[2],\n            fee : values[4],\n            expires : values[6],\n            nonce : values[8],\n            orderHash : 0,\n            baseToken : addresses[6],\n            feeToken : addresses[8],\n            channelFeeAccount : addresses[11],\n            channelFee : values[11],\n            channelId : values[13]\n            });\n        Order memory takerOrder = Order({\n            tokenBuy : addresses[1],\n            tokenSell : addresses[3],\n            user : addresses[5],\n            amountBuy : values[1],\n            amountSell : values[3],\n            fee : values[5],\n            expires : values[7],\n            nonce : values[9],\n            orderHash : 0,\n            baseToken : addresses[7],\n            feeToken : addresses[9],\n            channelFeeAccount : addresses[12],\n            channelFee : values[12],\n            channelId : values[14]\n            });\n        uint256 tradeAmount = values[10];\n        //check expires\n        require(makerOrder.expires >= block.number && takerOrder.expires >= block.number);\n        //check order nonce canceled\n        require(makerOrder.nonce >= canceled[makerOrder.user][makerOrder.channelId] && takerOrder.nonce >= canceled[takerOrder.user][takerOrder.channelId]);\n        //make sure both is the same trade pair\n        require(makerOrder.baseToken == takerOrder.baseToken && makerOrder.tokenBuy == takerOrder.tokenSell && makerOrder.tokenSell == takerOrder.tokenBuy);\n        require(takerOrder.baseToken == takerOrder.tokenBuy || takerOrder.baseToken == takerOrder.tokenSell);\n        makerOrder.orderHash = getOrderHash(makerOrder.tokenBuy, makerOrder.amountBuy, makerOrder.tokenSell, makerOrder.amountSell, makerOrder.baseToken, makerOrder.expires, makerOrder.nonce, makerOrder.feeToken, makerOrder.channelFeeAccount, makerOrder.channelId);\n        takerOrder.orderHash = getOrderHash(takerOrder.tokenBuy, takerOrder.amountBuy, takerOrder.tokenSell, takerOrder.amountSell, takerOrder.baseToken, takerOrder.expires, takerOrder.nonce, takerOrder.feeToken, takerOrder.channelFeeAccount, takerOrder.channelId);\n        require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", makerOrder.orderHash), v[0], r[0], s[0]) == makerOrder.user);\n        require(ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", takerOrder.orderHash), v[1], r[1], s[1]) == takerOrder.user);\n        balance(makerOrder, takerOrder, addresses[10], tradeAmount);\n        //event\n        Trade(makerOrder.user, takerOrder.user, tradeAmount, makerOrder.fee, takerOrder.fee, makerOrder.nonce, takerOrder.nonce);\n    }\n    function balance(Order makerOrder, Order takerOrder, address feeAccount, uint256 tradeAmount) internal {\n        ///check the price meets the condition.\n        ///match condition: (makerOrder.amountSell*takerOrder.amountSell)/(makerOrder.amountBuy*takerOrder.amountBuy) >=1\n        require(safeMul(makerOrder.amountSell, takerOrder.amountSell) >= safeMul(makerOrder.amountBuy, takerOrder.amountBuy));\n        ///If the price is ok,always use maker's price first!\n        uint256 takerBuy = 0;\n        uint256 takerSell = 0;\n        if (takerOrder.baseToken == takerOrder.tokenBuy) {\n            //taker sell tokens\n            uint256 makerAmount = safeSub(makerOrder.amountBuy, orderFilled[makerOrder.user][makerOrder.orderHash]);\n            uint256 takerAmount = safeSub(takerOrder.amountSell, orderFilled[takerOrder.user][takerOrder.orderHash]);\n            require(tradeAmount > 0 && tradeAmount <= makerAmount && tradeAmount <= takerAmount);\n            takerSell = tradeAmount;\n            takerBuy = safeMul(makerOrder.amountSell, takerSell) / makerOrder.amountBuy;\n            orderFilled[takerOrder.user][takerOrder.orderHash] = safeAdd(orderFilled[takerOrder.user][takerOrder.orderHash], takerSell);\n            orderFilled[makerOrder.user][makerOrder.orderHash] = safeAdd(orderFilled[makerOrder.user][makerOrder.orderHash], takerSell);\n        } else {\n            // taker buy tokens\n            takerAmount = safeSub(takerOrder.amountBuy, orderFilled[takerOrder.user][takerOrder.orderHash]);\n            makerAmount = safeSub(makerOrder.amountSell, orderFilled[makerOrder.user][makerOrder.orderHash]);\n            require(tradeAmount > 0 && tradeAmount <= makerAmount && tradeAmount <= takerAmount);\n            takerBuy = tradeAmount;\n            takerSell = safeMul(makerOrder.amountBuy, takerBuy) / makerOrder.amountSell;\n            orderFilled[takerOrder.user][takerOrder.orderHash] = safeAdd(orderFilled[takerOrder.user][takerOrder.orderHash], takerBuy);\n            orderFilled[makerOrder.user][makerOrder.orderHash] = safeAdd(orderFilled[makerOrder.user][makerOrder.orderHash], takerBuy);\n        }\n        //taker give tokens\n        tokenList[takerOrder.tokenSell][takerOrder.user][takerOrder.channelId] = safeSub(tokenList[takerOrder.tokenSell][takerOrder.user][takerOrder.channelId], takerSell);\n        //taker get tokens\n        tokenList[takerOrder.tokenBuy][takerOrder.user][takerOrder.channelId] = safeAdd(tokenList[takerOrder.tokenBuy][takerOrder.user][takerOrder.channelId], takerBuy);\n        //maker give tokens\n        tokenList[makerOrder.tokenSell][makerOrder.user][makerOrder.channelId] = safeSub(tokenList[makerOrder.tokenSell][makerOrder.user][makerOrder.channelId], takerBuy);\n        //maker get tokens\n        tokenList[makerOrder.tokenBuy][makerOrder.user][makerOrder.channelId] = safeAdd(tokenList[makerOrder.tokenBuy][makerOrder.user][makerOrder.channelId], takerSell);\n        chargeFee(makerOrder, feeAccount, takerSell);\n        chargeFee(takerOrder, feeAccount, takerBuy);\n    }\n    ///charge fees.fee can be payed as other erc20 token or the tokens that user get\n    ///returns:fees to reduce from the user's tokenBuy\n    function chargeFee(Order order, address feeAccount, uint256 amountBuy) internal returns (uint256){\n        uint256 totalFee = 0;\n        if (order.feeToken != 0) {\n            ///use erc-20 token as fee .\n            //make sure the user has enough tokens\n            totalFee = safeAdd(order.fee, order.channelFee);\n            require(totalFee <= tokenList[order.feeToken][order.user][order.channelId]);\n            tokenList[order.feeToken][feeAccount][DEFAULT_CHANNEL_ID] = safeAdd(tokenList[order.feeToken][feeAccount][DEFAULT_CHANNEL_ID], order.fee);\n            tokenList[order.feeToken][order.channelFeeAccount][order.channelId] = safeAdd(tokenList[order.feeToken][order.channelFeeAccount][order.channelId], order.channelFee);\n            tokenList[order.feeToken][order.user][order.channelId] = safeSub(tokenList[order.feeToken][order.user][order.channelId], totalFee);\n        } else {\n            order.fee = checkFee(amountBuy, order.fee);\n            order.channelFee = checkFee(amountBuy, order.channelFee);\n            totalFee = safeAdd(order.fee, order.channelFee);\n            tokenList[order.tokenBuy][feeAccount][DEFAULT_CHANNEL_ID] = safeAdd(tokenList[order.tokenBuy][feeAccount][DEFAULT_CHANNEL_ID], order.fee);\n            tokenList[order.tokenBuy][order.channelFeeAccount][order.channelId] = safeAdd(tokenList[order.tokenBuy][order.channelFeeAccount][order.channelId], order.channelFee);\n            tokenList[order.tokenBuy][order.user][order.channelId] = safeSub(tokenList[order.tokenBuy][order.user][order.channelId], totalFee);\n        }\n    }\n    function batchTrade(\n        address[13][] addresses,\n        uint256[15][] values,\n        uint8[2][] v,\n        bytes32[2][] r,\n        bytes32[2][] s\n    ) public onlyAdmin {\n        for (uint i = 0; i < addresses.length; i++) {\n            trade(addresses[i], values[i], v[i], r[i], s[i]);\n        }\n    }\n    ///help to refund token to users.this method is called when contract needs updating\n    function refund(address user, address[] tokens, uint256[] channelIds) public onlyAdmin {\n        for (uint i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            for (uint j = 0; j < channelIds.length; j++) {\n                uint256 channelId = channelIds[j];\n                uint256 amount = tokenList[token][user][channelId];\n                if (amount > 0) {\n                    tokenList[token][user][channelId] = 0;\n                    if (token == 0) {//withdraw ether\n                        require(user.send(amount));\n                    } else {//withdraw token\n                        require(Token(token).transfer(user, amount));\n                    }\n                    Withdraw(token, user, amount, tokenList[token][user][channelId], channelId);\n                }\n            }\n        }\n    }\n}",
  "bytecode": "606060405262015180600a908155600b55600c805461ffff191690556000600d819055600e805460ff191660011762ffff00191690558054600160a060020a03191633600160a060020a03161781556145e890819061005e90396000f30060606040526004361061022c5763ffffffff60e060020a60003504166307da68f5811461023c5780630f4665aa146102635780631d793e9a146102c15780632066b2e4146103595780632287e96a146103815780632c8668d4146103945780632e08c6f4146103b95780633823d66c146103e157806339dd48da146103f7578063411927881461040a578063429b62e5146104a75780634b0bddd2146104c65780634cd412d5146104ea57806354fd4d50146104fd5780635601da3d14610587578063560b3cba146105b257806359a13c4d146105d45780635c8b94e7146105e7578063610043641461060c5780636bf9b3e71461063757806377922e571461065f578063839affc3146106f05780638baeefce146107c15780638da5cb5b146107d457806392e33d141461080357806396cf52271461081b578063978bbdb91461083157806399c6d2de14610844578063a4de3c1914610869578063a5609ab51461088d578063a95bc9a7146108a5578063adf96752146108cd578063af857a84146109b7578063affca93214610c0a578063b0fff5d214610c20578063b42220ad14610c42578063b5c5f67214610c5a578063b6b55f2514610c7f578063bdd9f4e714610c8a578063dcfddcbb14610d5b578063e2e71f9314610d83578063e3ed7bb114610da2578063e93119d914610dca578063ef7ac0e514610df2578063f2eaee0214610e0a578063f2fde38b14610e1d578063fcf3276914610e3c578063ffaad6a514610eab575b341561023757600080fd5b600080fd5b341561024757600080fd5b61024f610ec2565b604051901515815260200160405180910390f35b341561026e57600080fd5b6102af600160a060020a03600435811690602435906044358116906064359060843581169060a4359060c4359060e435811690610104351661012435610ed0565b60405190815260200160405180910390f35b34156102cc57600080fd5b61035760046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965050843594602001359350610f7092505050565b005b341561036457600080fd5b6102af600160a060020a0360043581169060243516604435610ffa565b341561038c57600080fd5b61024f61101d565b341561039f57600080fd5b610357600160a060020a0360043516602435604435611026565b34156103c457600080fd5b6102af600160a060020a0360043581169060243516604435611220565b34156103ec57600080fd5b61024f600435611243565b341561040257600080fd5b61024f611258565b341561041557600080fd5b61035760048035600160a060020a03169060446024803590810190830135806020808202016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061126195505050505050565b34156104b257600080fd5b61024f600160a060020a03600435166114a5565b34156104d157600080fd5b610357600160a060020a036004351660243515156114ba565b34156104f557600080fd5b61024f611515565b341561050857600080fd5b610510611523565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561054c578082015183820152602001610534565b50505050905090810190601f1680156105795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561059257600080fd5b610357600160a060020a036004358116906024351660443560643561155a565b34156105bd57600080fd5b6102af600160a060020a03600435166024356116e4565b34156105df57600080fd5b61024f611701565b34156105f257600080fd5b610357600160a060020a0360043516602435604435611710565b341561061757600080fd5b610357600160a060020a0360043581169060243516604435606435611857565b341561064257600080fd5b610357600160a060020a0360043581169060243516604435611a18565b341561066a57600080fd5b6103576004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496505093359350611b3d92505050565b34156106fb57600080fd5b610357600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496505093359350611c9592505050565b34156107cc57600080fd5b610357611d27565b34156107df57600080fd5b6107e7611d53565b604051600160a060020a03909116815260200160405180910390f35b341561080e57600080fd5b6103576004351515611d62565b341561082657600080fd5b610357600435611d90565b341561083c57600080fd5b6102af611dc0565b341561084f57600080fd5b610357600160a060020a0360043516602435604435611dc6565b341561087457600080fd5b610357600160a060020a03600435166024351515611f51565b341561089857600080fd5b6103576004351515611fac565b34156108b057600080fd5b610357600160a060020a0360043516602435604435606435611fda565b34156108d857600080fd5b61035760046101a481600d6101a0604051908101604052919082826101a08082843782019150505050509190806101e00190600f80602002604051908101604052919082826101e08082843782019150505050509190806040019060028060200260405190810160405280929190826002602002808284378201915050505050919080604001906002806020026040519081016040528092919082600260200280828437820191505050505091908060400190600280602002604051908101604052809291908260026020028082843750939550612131945050505050565b34156109c257600080fd5b61035760046024813581810190830135806020818102016040519081016040528181529291906000602085015b82821015610a2d576101a0808302860190600d90604051908101604052919082826101a08082843750505091835250506001909101906020016109ef565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b82821015610aa0576101e0808302860190600f90604051908101604052919082826101e0808284375050509183525050600190910190602001610a62565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b82821015610b14576040808302860190600290805190810160405280929190826002602002808284375050509183525050600190910190602001610ad5565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b82821015610b88576040808302860190600290805190810160405280929190826002602002808284375050509183525050600190910190602001610b49565b505050505091908035906020019082018035906020019080806020026020016040519081016040528181529291906000602085015b82821015610bfc576040808302860190600290805190810160405280929190826002602002808284375050509183525050600190910190602001610bbd565b505050505091905050612798565b3415610c1557600080fd5b610357600435612852565b3415610c2b57600080fd5b6102af600160a060020a0360043516602435612880565b3415610c4d57600080fd5b610357600435151561289d565b3415610c6557600080fd5b610357600160a060020a03600435166024356044356128d4565b610357600435612bc8565b3415610c9557600080fd5b610357600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496505093359350612c8592505050565b3415610d6657600080fd5b6102af600160a060020a0360043581169060243516604435612d1c565b3415610d8e57600080fd5b61024f600160a060020a0360043516612d3f565b3415610dad57600080fd5b6102af600160a060020a0360043581169060243516604435612d54565b3415610dd557600080fd5b6102af600160a060020a0360043581169060243516604435612d77565b3415610dfd57600080fd5b6103576004351515612da9565b3415610e1557600080fd5b6102af612dde565b3415610e2857600080fd5b610357600160a060020a0360043516612de4565b3415610e4757600080fd5b610357600460848180608060405190810160405291908282608080828437820191505050505091908060a001906005806020026040519081016040529190828260a080828437509395505050823560ff169260208101359250604001359050612e7f565b610357600160a060020a03600435166024356135fc565b600c54610100900460ff1681565b6000308b8b8b8b8b8b8b8b8b8b6040516c01000000000000000000000000600160a060020a039c8d16810282529a8c168b0260148201526028810199909952968a1689026048890152605c8801959095529288168702607c870152609086019190915260b08501528516840260d084015290931690910260e482015260f881019190915261011801604051809103902090509a9950505050505050505050565b600e5460009062010000900460ff161515610f8a57600080fd5b83518551148015610f9d575060c8845111155b1515610fa857600080fd5b5060005b8351811015610ff357610feb858281518110610fc457fe5b90602001906020020151858381518110610fda57fe5b906020019060200201518585611fda565b600101610fac565b5050505050565b600760209081526000938452604080852082529284528284209052825290205481565b600c5460ff1681565b600c5460ff16151561103757600080fd5b600160a060020a0380841660009081526003602090815260408083203390941683529281528282208483529052205482111561107257600080fd5b600160a060020a038084166000908152600360209081526040808320339094168352928152828220848352905220546110ab90836136f4565b600160a060020a03808516600081815260036020908152604080832033909516835293815283822086835290529190912091909155151561111c57600160a060020a03331682156108fc0283604051600060405180830381858888f19350505050151561111757600080fd5b61119f565b82600160a060020a031663a9059cbb338460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561117957600080fd5b6102c65a03f1151561118a57600080fd5b50505060405180519050151561119f57600080fd5b600160a060020a0383811660008181526003602090815260408083203390951680845294825280832086845290915290819020547febff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f9186919086905180848152602001838152602001828152602001935050505060405180910390a3505050565b600360209081526000938452604080852082529284528284209052825290205481565b60056020526000908152604090205460ff1681565b600e5460ff1681565b600160a060020a033316600090815260016020526040812054819081908190819060ff16151561129057600080fd5b600094505b865185101561149b578685815181106112aa57fe5b906020019060200201519350600092505b8551831015611490578583815181106112d057fe5b90602001906020020151600160a060020a038086166000908152600360209081526040808320938d16835292815282822084835290529081205491935090915081111561148557600160a060020a038085166000818152600360209081526040808320948d168352938152838220868352905291822091909155151561138657600160a060020a03881681156108fc0282604051600060405180830381858888f19350505050151561138157600080fd5b611409565b83600160a060020a031663a9059cbb898360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156113e357600080fd5b6102c65a03f115156113f457600080fd5b50505060405180519050151561140957600080fd5b600160a060020a038481166000818152600360209081526040808320948d1680845294825280832087845290915290819020547febff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f9185919087905180848152602001838152602001828152602001935050505060405180910390a35b6001909201916112bb565b600190940193611295565b5050505050505050565b60016020526000908152604090205460ff1681565b60005433600160a060020a039081169116146114d557600080fd5b600160a060020a03821615156114ea57600080fd5b600160a060020a03919091166000908152600160205260409020805460ff1916911515919091179055565b600e54610100900460ff1681565b60408051908101604052600581527f322e302e30000000000000000000000000000000000000000000000000000000602082015281565b600e54610100900460ff16151561157057600080fd5b600160a060020a038316151561158557600080fd5b600160a060020a038085166000908152600360209081526040808320339094168352928152828220848352905220548211156115c057600080fd5b600160a060020a038085166000908152600360209081526040808320339094168352928152828220848352905220546115f990836136f4565b600160a060020a0380861660009081526003602090815260408083203385168452808352818420878552835281842095909555928716825292835281812084825290925290205461164a9083613706565b600160a060020a0380861660008181526003602090815260408083208986168085528184528285208986528452828520979097553390951680845294825280832087845290915290819020547f6e878aff7e74cbd83d8c07e128ce4635ed1f7d59d65d1f42d465bee84eb3460e9187919087905180848152602001838152602001828152602001935050505060405180910390a450505050565b600460209081526000928352604080842090915290825290205481565b600e5462010000900460ff1681565b600160a060020a03808416600090815260076020908152604080832033909416835292815282822084835290529081205461174b9084613706565b600160a060020a038086166000818152600360209081526040808320339095168084529482528083208884528252808320549383526006825280832094835293815283822087835290529190912054919250906117a9908390613706565b11156117b457600080fd5b600160a060020a0380851660008181526007602090815260408083203390951680845294825280832087845282528083208690558383526008825280832085845282528083208784529091529081902042908190557f062f8db33ce66010d5d335b9de2c68f7a59521142597b70f81220b3e97f4c9939187919087905180848152602001838152602001828152602001935050505060405180910390a350505050565b600e5460ff16151561186857600080fd5b600160a060020a038416158015906118885750600160a060020a03831615155b80156118945750600082115b151561189f57600080fd5b600160a060020a0380851660009081526003602090815260408083209387168352928152828220848352905220546118d79083613706565b600160a060020a0380861660008181526003602090815260408083209489168352938152838220868352905282812093909355916323b872dd9133913091879190516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561196c57600080fd5b6102c65a03f1151561197d57600080fd5b50505060405180519050151561199257600080fd5b600160a060020a03848116600081815260036020908152604080832085891680855290835281842087855290925291829020549093331692917fb8549480a740327017d760034cf7d1b112890eb0948c99dbd7da38738096f75991879187905180848152602001838152602001828152602001935050505060405180910390a450505050565b600160a060020a03331660009081526001602052604090205460ff161515611a3f57600080fd5b600160a060020a0380841660008181526006602090815260408083209487168084529482528083208684528252808320549383526007825280832094835293815283822085835290529190912054611a979190613706565b600160a060020a038085166000818152600660209081526040808320948816808452948252808320878452825280832095909555828252600781528482208483528152848220868352815284822082905582825260088152848220848352815284822086835290528381205590917f1c6434ded5c8badcab3e8bb92e5cc66d78f4d88ff5e81846bd329f2f81d0d2749084905190815260200160405180910390a3505050565b600160a060020a033316600090815260016020526040812054819060ff161515611b6657600080fd5b8351855114611b7457600080fd5b5060009050805b8451811015611c545760096000868381518110611b9457fe5b90602001906020020151600160a060020a0316600160a060020a03168152602001908152602001600020600084815260200190815260200160002054848281518110611bdc57fe5b906020019060200201511015611bf157600080fd5b838181518110611bfd57fe5b9060200190602002015160096000878481518110611c1757fe5b90602001906020020151600160a060020a031681526020808201929092526040908101600090812087825290925290205560019182019101611b7b565b7feeea1444156f4442f9b8876353b17a5efc18632b2d1e773930c1a3303d5cba9e828460405191825260208201526040908101905180910390a15050505050565b600e5460009060ff161515611ca957600080fd5b82518451148015611cbc575060c8845111155b1515611cc757600080fd5b5060005b8351811015610ff357611d1f858281518110611ce357fe5b90602001906020020151858381518110611cf957fe5b90602001906020020151858481518110611d0f57fe5b9060200190602002015185611857565b600101611ccb565b60005433600160a060020a03908116911614611d4257600080fd5b600c805461ff001916610100179055565b600054600160a060020a031681565b60005433600160a060020a03908116911614611d7d57600080fd5b600c805460ff1916911515919091179055565b60005433600160a060020a03908116911614611dab57600080fd5b62093a80811115611dbb57600080fd5b600a55565b600b5481565b600160a060020a0383161515611ddb57600080fd5b600160a060020a03808416600090815260036020908152604080832033909416835292815282822084835290522054611e149083613706565b600160a060020a03808516600081815260036020908152604080832033958616845282528083208784529091528082209490945590926323b872dd92913091879190516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515611eaa57600080fd5b6102c65a03f11515611ebb57600080fd5b505050604051805190501515611ed057600080fd5b600160a060020a0383811660008181526003602090815260408083203390951680845294825280832086845290915290819020547f4e2ca0515ed1aef1395f66b5303bb5d6f1bf9d61a353fa53f73f8ac9973fa9f69186919086905180848152602001838152602001828152602001935050505060405180910390a3505050565b60005433600160a060020a03908116911614611f6c57600080fd5b600160a060020a0382161515611f8157600080fd5b600160a060020a03919091166000908152600260205260409020805460ff1916911515919091179055565b60005433600160a060020a03908116911614611fc757600080fd5b600e805460ff1916911515919091179055565b600e5462010000900460ff161515611ff157600080fd5b600160a060020a0380851660009081526003602090815260408083203390941683529281528282208583529052205483111561202c57600080fd5b600160a060020a0380851660009081526003602090815260408083203390941683529281528282208583529052205461206590846136f4565b600160a060020a0385811660009081526003602090815260408083203390941683529281528282208683529052818120929092558282529020546120a99084613706565b600160a060020a03808616600081815260036020908152604080832033909516808452948252808320878452909152908190209390935590917fbb69f2324604d3dc028e651782c9bc2152cb34213ecb64bb5c2312ab3dabf696908690869086905180848152602001838152602001828152602001935050505060405180910390a350505050565b6121396144dc565b6121416144dc565b600160a060020a03331660009081526001602052604081205460ff16151561216857600080fd5b610140880151600160a060020a03811660009081526002602052604090205460ff16151561219557600080fd5b600c54610100900460ff16156121aa57600080fd5b6101c0604051908101604052808a51600160a060020a0316815260200160408b0151600160a060020a031681526020018951815260200160408a0151815260200160808b0151600160a060020a0316815260200160808a0151815260200160c08a015181526020016101008a015181526000602082015260400160c08b0151600160a060020a031681526020016101008b0151600160a060020a031681526020016101608b0151600160a060020a031681526020016101608a015181526020016101a08a0151905293506101c06040519081016040528060208b0151600160a060020a0316815260200160608b0151600160a060020a031681526020018960016020020151815260200160608a0151815260200160a08b0151600160a060020a0316815260200160a08a0151815260200160e08a015181526020016101208a015181526000602082015260400160e08b0151600160a060020a031681526020016101208b0151600160a060020a031681526020016101808b0151600160a060020a031681526020016101808a015181526020016101c08a0151905292506101408801519150438460c00151101580156123675750438360c0015110155b151561237257600080fd5b600960008560800151600160a060020a0316600160a060020a031681526020019081526020016000206000856101a001518152602001908152602001600020548460e00151101580156124085750600960008460800151600160a060020a0316600160a060020a031681526020019081526020016000206000846101a001518152602001908152602001600020548360e0015110155b151561241357600080fd5b826101200151600160a060020a0316846101200151600160a060020a031614801561245457508260200151600160a060020a03168451600160a060020a0316145b801561247657508251600160a060020a03168460200151600160a060020a0316145b151561248157600080fd5b8251600160a060020a0316836101200151600160a060020a031614806124c157508260200151600160a060020a0316836101200151600160a060020a0316145b15156124cc57600080fd5b61250784518560400151866020015187606001518861012001518960c001518a60e001518b61014001518c61016001518d6101a00151610ed0565b61010085015261254883518460400151856020015186606001518761012001518860c001518960e001518a61014001518b61016001518c6101a00151610ed0565b6101008401526080840151600160a060020a031660018561010001516040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c016040519081900390208951895189516040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f1151561260357600080fd5b505060206040510351600160a060020a03161461261f57600080fd5b8260800151600160a060020a031660018461010001516040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0160405190819003902060208a015160208a015160208a01516040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f115156126dd57600080fd5b505060206040510351600160a060020a0316146126f957600080fd5b61270a84846101408c01518561371c565b8260800151600160a060020a03168460800151600160a060020a03167f01f5d7c359dba416997ea6c723ea4663e9ad524f956ed8bb3b5234e6475a7285848760a001518760a001518960e001518960e00151604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a3505050505050505050565b600160a060020a03331660009081526001602052604081205460ff1615156127bf57600080fd5b5060005b855181101561284a576128428682815181106127db57fe5b906020019060200201518683815181106127f157fe5b9060200190602002015186848151811061280757fe5b9060200190602002015186858151811061281d57fe5b9060200190602002015186868151811061283357fe5b90602001906020020151612131565b6001016127c3565b505050505050565b60005433600160a060020a0390811691161461286d57600080fd5b600a81101561287b57600080fd5b600b55565b600960209081526000928352604080842090915290825290205481565b60005433600160a060020a039081169116146128b857600080fd5b600e8054911515620100000262ff000019909216919091179055565b600160a060020a0380841660009081526003602090815260408083203390941683529281528282208483529052205482111561290f57600080fd5b600160a060020a03808416600090815260066020908152604080832033909416835292815282822084835290522054821115612a7257600160a060020a03808416600090815260086020908152604080832033909416835292815282822084835290522054158015906129bc5750600a54600160a060020a038085166000908152600860209081526040808320339094168352928152828220858352905220546129ba9042906136f4565b115b15156129c757600080fd5b600160a060020a038084166000818152600660209081526040808320339095168084529482528083208684528252808320549383526007825280832094835293815283822085835290529190912054612a209190613706565b600160a060020a03808516600081815260066020908152604080832033909516808452948252808320878452825280832095909555918152600782528381209281529181528282208483529052908120555b600160a060020a03808416600090815260066020908152604080832033909416835292815282822084835290522054821115612aad57600080fd5b600160a060020a03808416600090815260066020908152604080832033909416835292815282822084835290522054612ae690836136f4565b600160a060020a038085166000818152600660209081526040808320339095168084529482528083208784528252808320959095559181526003825283812092815291815282822084835290522054612b3f90836136f4565b600160a060020a038085166000818152600360209081526040808320339095168084529482528083208784528252808320959095558282526008815284822093825292835283812085825290925291812055151561111c57600160a060020a03331682156108fc0283604051600060405180830381858888f19350505050151561111757600080fd5b33600160a060020a0316600090815260008051602061459d83398151915260209081526040808320848452909152902054612c039034613706565b600160a060020a033316600081815260008051602061459d83398151915260209081526040808320868452909152808220849055919290917f4e2ca0515ed1aef1395f66b5303bb5d6f1bf9d61a353fa53f73f8ac9973fa9f691349186905180848152602001838152602001828152602001935050505060405180910390a350565b600e54600090610100900460ff161515612c9e57600080fd5b82518451148015612cb1575060c8845111155b1515612cbc57600080fd5b5060005b8351811015610ff357612d14858281518110612cd857fe5b90602001906020020151858381518110612cee57fe5b90602001906020020151858481518110612d0457fe5b906020019060200201518561155a565b600101612cc0565b600860209081526000938452604080852082529284528284209052825290205481565b60026020526000908152604090205460ff1681565b600660209081526000938452604080852082529284528284209052825290205481565b600160a060020a0392831660009081526003602090815260408083209490951682529283528381209181529152205490565b60005433600160a060020a03908116911614612dc457600080fd5b600e80549115156101000261ff0019909216919091179055565b600a5481565b60005433600160a060020a03908116911614612dff57600080fd5b600160a060020a0381161515612e1457600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b612e87614550565b600160a060020a03331660009081526001602052604081205460ff161515612eae57600080fd5b6040870151600160a060020a03811660009081526002602052604090205460ff161515612eda57600080fd5b610120604051908101604052808951600160a060020a031681526020018960016020020151600160a060020a0316815260200160408a0151600160a060020a0316815260200160608a0151600160a060020a0316815260200188518152602001886001602002015181526020016040890151815260200160608901518152602001608089015190529250600360006020850151600160a060020a0316600160a060020a0316815260200190815260200160002060008460000151600160a060020a0316600160a060020a03168152602001908152602001600020600084610100015181526020019081526020016000205483608001511115612fdb57600080fd5b612fed83608001518460c00151613f15565b60c084015261300460808401518460e00151613f15565b60e0840152308351846020015185608001518660a0015187606001518861010001516040516c01000000000000000000000000600160a060020a03988916810282529688168702601482015294871686026028860152603c850193909352605c840191909152909316909102607c820152609081019190915260b00160405190819003902060008181526005602052604090205490925060ff16156130a857600080fd5b6000828152600560205260409020805460ff191660011790558251600160a060020a03166001836040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0160405180910390208888886040516000815260200160405260006040516020015260405193845260ff90921660208085019190915260408085019290925260608401929092526080909201915160208103908084039060008661646e5a03f1151561316a57600080fd5b505060206040510351600160a060020a03161461318657600080fd5b6131fa600360008560200151600160a060020a0316600160a060020a0316815260200190815260200160002060008560000151600160a060020a0316600160a060020a03168152602001908152602001600020600085610100015181526020019081526020016000205484608001516136f4565b600360008560200151600160a060020a0316600160a060020a0316815260200190815260200160002060008560000151600160a060020a0316600160a060020a0316815260200190815260200160002060008561010001518152602001908152602001600020819055506132d5600360008560200151600160a060020a0316600160a060020a0316815260200190815260200160002060008560400151600160a060020a0316600160a060020a031681526020019081526020016000206000600d548152602001908152602001600020548460c00151613706565b600360008560200151600160a060020a0316600160a060020a0316815260200190815260200160002060008560400151600160a060020a0316600160a060020a031681526020019081526020016000206000600d548152602001908152602001600020819055506133b0600360008560200151600160a060020a0316600160a060020a0316815260200190815260200160002060008560600151600160a060020a0316600160a060020a0316815260200190815260200160002060008561010001518152602001908152602001600020548460e00151613706565b600360008560200151600160a060020a0316600160a060020a0316815260200190815260200160002060008560600151600160a060020a0316600160a060020a031681526020019081526020016000206000856101000151815260208101919091526040016000205561342b60808401518460c001516136f4565b6080840190815261344190518460e001516136f4565b60808401526020830151600160a060020a03161515613497578251600160a060020a03166108fc84608001519081150290604051600060405180830381858888f19350505050151561349257600080fd5b613523565b8260200151600160a060020a031663a9059cbb8451856080015160006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156134fd57600080fd5b6102c65a03f1151561350e57600080fd5b50505060405180519050151561352357600080fd5b8251600160a060020a03168360200151600160a060020a03167febff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f8560800151600360008860200151600160a060020a0316600160a060020a0316815260200190815260200160002060008860000151600160a060020a0316600160a060020a03168152602001908152602001600020600088610100015181526020019081526020016000205487610100015160405180848152602001838152602001828152602001935050505060405180910390a35050505050505050565b600e5460ff16151561360d57600080fd5b600160a060020a038216158015906136255750600034115b151561363057600080fd5b600160a060020a038216600090815260008051602061459d8339815191526020908152604080832084845290915290205461366b9034613706565b600160a060020a03838116600081815260008051602061459d833981519152602090815260408083208784529091528082208590559193339093169290917fb8549480a740327017d760034cf7d1b112890eb0948c99dbd7da38738096f75991349187905180848152602001838152602001828152602001935050505060405180910390a45050565b60008183101561370057fe5b50900390565b60008282018381101561371557fe5b9392505050565b60008060008061373488604001518860400151613f44565b61374689606001518960600151613f44565b101561375157600080fd5b600093508392508651600160a060020a0316876101200151600160a060020a03161415613987576137c78860400151600460008b60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008b610100015181526020810191909152604001600020546136f4565b91506138188760600151600460008a60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008a610100015181526020810191909152604001600020546136f4565b905060008511801561382a5750818511155b80156138365750808511155b151561384157600080fd5b8492508760400151613857896060015185613f44565b81151561386057fe5b0493506138ae600460008960800151600160a060020a0316600160a060020a031681526020019081526020016000206000896101000151815260208101919091526040016000205484613706565b600460008960800151600160a060020a0316600160a060020a031681526020019081526020016000206000896101000151815260208101919091526040016000908120919091556139409060049060808b0151600160a060020a0316600160a060020a0316815260200190815260200160002060008a6101000151815260208101919091526040016000205484613706565b600460008a60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008a61010001518152602081019190915260400160002055613b92565b6139d68760400151600460008a60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008a610100015181526020810191909152604001600020546136f4565b9050613a278860600151600460008b60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008b610100015181526020810191909152604001600020546136f4565b9150600085118015613a395750818511155b8015613a455750808511155b1515613a5057600080fd5b8493508760600151613a66896040015186613f44565b811515613a6f57fe5b049250613abd600460008960800151600160a060020a0316600160a060020a031681526020019081526020016000206000896101000151815260208101919091526040016000205485613706565b600460008960800151600160a060020a0316600160a060020a03168152602001908152602001600020600089610100015181526020810191909152604001600090812091909155613b4f9060049060808b0151600160a060020a0316600160a060020a0316815260200190815260200160002060008a6101000151815260208101919091526040016000205485613706565b600460008a60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008a610100015181526020810191909152604001600020555b613c02600360008960200151600160a060020a0316600160a060020a0316815260200190815260200160002060008960800151600160a060020a0316600160a060020a031681526020019081526020016000206000896101a00151815260200190815260200160002054846136f4565b600360008960200151600160a060020a0316600160a060020a0316815260200190815260200160002060008960800151600160a060020a0316600160a060020a031681526020019081526020016000206000896101a00151815260200190815260200160002081905550613cdc600360008960000151600160a060020a0316600160a060020a0316815260200190815260200160002060008960800151600160a060020a0316600160a060020a031681526020019081526020016000206000896101a0015181526020019081526020016000205485613706565b600360008951600160a060020a0316600160a060020a0316815260200190815260200160002060008960800151600160a060020a0316600160a060020a031681526020019081526020016000206000896101a00151815260200190815260200160002081905550613db3600360008a60200151600160a060020a0316600160a060020a0316815260200190815260200160002060008a60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008a6101a00151815260200190815260200160002054856136f4565b600360008a60200151600160a060020a0316600160a060020a0316815260200190815260200160002060008a60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008a6101a00151815260200190815260200160002081905550613e8d600360008a60000151600160a060020a0316600160a060020a0316815260200190815260200160002060008a60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008a6101a0015181526020019081526020016000205484613706565b600360008a51600160a060020a0316600160a060020a0316815260200190815260200160002060008a60800151600160a060020a0316600160a060020a0316815260200190815260200160002060008a6101a001518152602081019190915260400160002055613efe888785613f68565b50613f0a878786613f68565b505050505050505050565b60008082905083613f2884600b54613f44565b111561371557600b5484811515613f3b57fe5b04949350505050565b6000828202831580613f605750828482811515613f5d57fe5b04145b151561371557fe5b600080610140850151600160a060020a03161561425d57613f928560a00151866101800151613706565b905060036000866101400151600160a060020a0316600160a060020a0316815260200190815260200160002060008660800151600160a060020a0316600160a060020a031681526020019081526020016000206000866101a00151815260200190815260200160002054811115151561400a57600080fd5b61405760036000876101400151600160a060020a039081168252602080830193909352604091820160009081209189168152908352818120600d54825290925290205460a0870151613706565b60036000876101400151600160a060020a039081168252602080830193909352604091820160009081209189168152908352818120600d54825290925281209190915561411190600390610140880151600160a060020a0316600160a060020a031681526020019081526020016000206000876101600151600160a060020a0316600160a060020a031681526020019081526020016000206000876101a00151815260200190815260200160002054866101800151613706565b60036000876101400151600160a060020a0316600160a060020a031681526020019081526020016000206000876101600151600160a060020a0316600160a060020a031681526020019081526020016000206000876101a001518152602001908152602001600020819055506141ee60036000876101400151600160a060020a0316600160a060020a0316815260200190815260200160002060008760800151600160a060020a0316600160a060020a031681526020019081526020016000206000876101a00151815260200190815260200160002054826136f4565b60036000876101400151600160a060020a0316600160a060020a0316815260200190815260200160002060008760800151600160a060020a0316600160a060020a031681526020019081526020016000206000876101a0015181526020810191909152604001600020556144d4565b61426b838660a00151613f15565b60a086015261427f83610180870151613f15565b61018086015261429860a0860151866101800151613706565b90506142e3600360008751600160a060020a039081168252602080830193909352604091820160009081209189168152908352818120600d54825290925290205460a0870151613706565b600360008751600160a060020a039081168252602080830193909352604091820160009081209189168152908352818120600d548252909252812091909155614395906003908751600160a060020a0316600160a060020a031681526020019081526020016000206000876101600151600160a060020a0316600160a060020a031681526020019081526020016000206000876101a00151815260200190815260200160002054866101800151613706565b600360008751600160a060020a0316600160a060020a031681526020019081526020016000206000876101600151600160a060020a0316600160a060020a031681526020019081526020016000206000876101a0015181526020019081526020016000208190555061446d600360008760000151600160a060020a0316600160a060020a0316815260200190815260200160002060008760800151600160a060020a0316600160a060020a031681526020019081526020016000206000876101a00151815260200190815260200160002054826136f4565b600360008751600160a060020a0316600160a060020a0316815260200190815260200160002060008760800151600160a060020a0316600160a060020a031681526020019081526020016000206000876101a0015181526020810191909152604001600020555b509392505050565b6101c06040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082018190526101a082015290565b6101206040519081016040908152600080835260208301819052908201819052606082018190526080820181905260a0820181905260c0820181905260e082018190526101008201529056003617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92effa165627a7a723058200d1225673238323992ca55afee13200a0daef9e7ac34865282ae9922677b1c6c0029"
}