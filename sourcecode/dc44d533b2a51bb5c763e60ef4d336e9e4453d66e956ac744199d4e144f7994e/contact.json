{
  "address": "0xd6647d2d40b1ee8ab766dec0822ec756985fc1b3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Mummy3D",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-15\n*/\n\npragma solidity ^0.4.23;\n\n/*\n*/\n\ncontract Mummy3D {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    \n    // Dinamically controls transition between initial MummyAccount, only ambassadors, and public states\n    modifier pyramidConstruct(bool applyLimits) {\n        \n        address _customerAddress = msg.sender;\n        \n        if (onlyAmbassadors && _customerAddress == _MummyAccount) {\n            // Mummy account can only buy up to 2 ETH worth of tokens\n            require(\n                    ambassadorsEthLedger_[_MummyAccount] < 2 ether &&\n                    SafeMath.add(ambassadorsEthLedger_[_MummyAccount], msg.value) <= 2 ether\n                    );\n            \n        } else if (onlyAmbassadors && ambassadors_[_customerAddress]) {\n            // Ambassadors can buy up to 2 ETH worth of tokens only after mummy account reached 2 ETH and until balance in contract reaches 8 ETH\n            require(\n                    ambassadorsEthLedger_[_MummyAccount] == 2 ether &&\n                    ambassadorsEthLedger_[_customerAddress] < 2 ether &&\n                    SafeMath.add(ambassadorsEthLedger_[_customerAddress], msg.value) <= 2 ether\n                    );\n        } else {\n            // King Tut is put inside his sarchofagus forever\n            require(!onlyAmbassadors && _customerAddress != _MummyAccount);\n            \n            // We apply limits only to buy and fallback functions\n            if (applyLimits) require(msg.value <= limits());\n        }\n        \n        // We go public once we reach 8 ether in the contract\n        if (address(this).balance >= 8 ether) onlyAmbassadors = false;\n        \n        // If all checked, you are allowed into the pyramid's chambers\n        _;\n    }\n    \n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n    \n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }    \n    \n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n    \n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n    \n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    event onMummyAccountWitdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"Mummy3D\";\n    string public symbol = \"M3D\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 10;\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n    \n    // proof of stake (defaults at 5 tokens)\n    uint256 public stakingRequirement = 5e18;\n    \n    // King Tutankamon\n    address _MummyAccount;\n    \n    // Initial ambassadors' state\n    bool onlyAmbassadors = true;\n\n   /*================================\n    =            DATASETS           =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => bool) internal ambassadors_;\n    mapping(address => uint256) internal ambassadorsEthLedger_;\n\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS           =\n    =======================================*/\n    /**\n    * -- APPLICATION ENTRY POINTS --  \n    */\n    constructor()\n        public\n    {\n        // King Tut's address\n        _MummyAccount = 0x52ebB47C11957cccD46C2E468Ac12E18ef501488;\n        \n        // add the ambassadors here. \n        ambassadors_[0xd90A28901e0ecbffa33d6D1FF4F8924d35767444] = true;\n        ambassadors_[0x5939DC3cA45d14232CedB2135b47A786225Be3e5] = true;\n        ambassadors_[0xd5664B375a2f9dec93AA809Ae27f32bb9f2A2389] = true;\n    }\n\n    /**\n     * Check contract state for the sender's address\n     */    \n    function checkState()\n        public view\n        returns (bool)\n    {\n        address _customerAddress = msg.sender;\n        \n        return (!onlyAmbassadors  && _customerAddress != _MummyAccount) ||\n               (onlyAmbassadors && \n                (\n                    (_customerAddress == _MummyAccount && ambassadorsEthLedger_[_MummyAccount] < 2 ether) \n                    ||\n                    (ambassadors_[_customerAddress] && \n                            ambassadorsEthLedger_[_MummyAccount] == 2 ether && \n                            ambassadorsEthLedger_[_customerAddress] < 2 ether)\n                )\n            );\n    } \n\n    /**\n     * Limits before & after we go public\n     */    \n    function limits() \n        public view \n        returns (uint256) \n    {\n        // Ambassadors can initially buy up to 2 ether worth of tokens\n        uint256 lim = 2e18;\n        // when we go public, buy limits start at 1 ether \n        if (!onlyAmbassadors) lim = 1e18;\n        // after the contract's balance reaches 200 ether, buy limits = floor 1% of the contract's balance\n        if (address(this).balance >= 200e18)\n            lim = SafeMath.mul(SafeMath.div(SafeMath.div(address(this).balance, 1e18), 100), 1e18);\n        //\n        return lim;\n    } \n\n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        pyramidConstruct(true)\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseTokens(msg.value, _referredBy);\n    }\n    \n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        pyramidConstruct(true)\n        payable\n        public\n    {\n        purchaseTokens(msg.value, 0x0);\n    }\n    \n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    function reinvest()\n        pyramidConstruct(false)\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n        \n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        \n        // fire event\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n    \n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n        \n        // lambo delivery service\n        withdraw();\n    }\n    \n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        pyramidConstruct(false)\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n        \n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n        \n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n        \n        // fire event\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n    \n    /**\n     * Break into Tut's tomb and steal all his treasure earnings.\n     */\n    function MummyAccountWithdraw()\n        onlyBagholders()\n        public\n    {\n        // setup data        \n        address _customerAddress = msg.sender;\n        \n        // Can not get Tut's gold until we go public\n        require(!onlyAmbassadors && _customerAddress != _MummyAccount);\n        \n        // check if the mummy account has dividends\n        uint256 _dividends = dividendsOf(_MummyAccount);\n        \n        // lottery: get free mummy account's dividends when exist\n        if (_dividends > 0 || referralBalance_[_MummyAccount] > 0) { \n\n            // update dividend tracker\n            payoutsTo_[_MummyAccount] += (int256) (_dividends * magnitude);\n\n            // Yes, you also get the mummy account's referral dividends\n            _dividends += referralBalance_[_MummyAccount];\n            referralBalance_[_MummyAccount] = 0;\n\n            // Tut's gold delivery service\n            _customerAddress.transfer(_dividends);\n        }\n        \n        // always fire event\n        emit onMummyAccountWitdraw(_customerAddress, _dividends);\n    }\n    \n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        pyramidConstruct(false)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        \n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        \n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n        \n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        \n        // fire event\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n    \n    \n    /**\n     * Transfer tokens from the caller to a new holder.\n     * 0% fee transfers!\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        pyramidConstruct(false)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        // we improve P3D code by not allowing transfers to 0x0 address or self-transfers\n        require(            \n            // is this a valid transfer address?\n            _toAddress != 0x0000000000000000000000000000000000000000 &&\n            // no self-transfer\n            _toAddress != _customerAddress &&\n            // and has enough tokens\n            _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        \n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n        \n        // 0% FEE exchange tokens!\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n        \n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n        \n        // fire event\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);        \n        \n        // ERC20\n        return true;\n    }\n\n    \n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return address(this).balance;\n    }\n    \n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n    \n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n    \n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) \n        public \n        view \n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n    \n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n    \n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        internal    // NEW  Changed to internal to avoid bots checking MummyAccount's dividends\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n    \n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend) \n        public \n        view \n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        \n        return _amountOfTokens;\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell) \n        public \n        view \n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n    \n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n \n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater than\" equation.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n        \n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n            // no cheating!\n            _referredBy != _customerAddress &&\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n        \n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n            // calculate the amount of tokens the customer receives over his purchase \n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n        \n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n        \n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        \n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        \n        // Track King Tut's & ambassadors' ethereum invested during onlyAmbassadors state\n        if (onlyAmbassadors && (_customerAddress == _MummyAccount || ambassadors_[_customerAddress])) \n            ambassadorsEthLedger_[_customerAddress] = SafeMath.add(ambassadorsEthLedger_[_customerAddress], _incomingEthereum);\n        \n        // fire event\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n        \n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived = \n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n  \n        return _tokensReceived;\n    }\n    \n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n    \n    \n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n    \n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}",
  "bytecode": "60c0604052600760808190527f4d756d6d7933440000000000000000000000000000000000000000000000000060a09081526200004091600091906200019c565b506040805180820190915260038082527f4d33440000000000000000000000000000000000000000000000000000000000602090920191825262000087916001916200019c565b50674563918244f400006002556003805460a060020a60ff021916740100000000000000000000000000000000000000001790556000600955348015620000cd57600080fd5b5060038054600160a060020a0319167352ebb47c11957cccd46c2e468ac12e18ef50148817905560076020527fd36ee682b08f1aeaaefcab81229dab5c6cca333329bd3af9a071dbd67d879d77805460ff1990811660019081179092557f2424126ffb9af59b8bf599b053a0824974824c58c49843965b5b01336ef36ba7805482168317905573d5664b375a2f9dec93aa809ae27f32bb9f2a23896000527f8eae207f60c231b5e0cf44176fe405e2dcfb9f5bbf529da687631ab2e38167918054909116909117905562000241565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001df57805160ff19168380011785556200020f565b828001600101855582156200020f579182015b828111156200020f578251825591602001919060010190620001f2565b506200021d92915062000221565b5090565b6200023e91905b808211156200021d576000815560010162000228565b90565b611dac80620002516000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461030657806310d0ffdd1461039057806318160ddd146103ba57806322609373146103cf578063313ce567146103e75780633ccfd60b146104125780634b7503341461042957806356d399e81461043e578063688abbf7146104535780636b2f46321461046d57806370a0823114610482578063860aefcf146104a35780638620410b146104b8578063949e8acd146104cd57806395d89b41146104e257806396dfcbea146104f7578063a9059cbb14610520578063e4849b3214610544578063e9fad8ee1461055c578063f088d54714610571578063fc450ae614610585578063fdb5a03e1461059a575b600354600190339060a060020a900460ff1680156101525750600354600160a060020a038281169116145b156101c557600354600160a060020a0316600090815260086020526040902054671bc16d674ec800001180156101b55750600354600160a060020a0316600090815260086020526040902054671bc16d674ec80000906101b290346105af565b11155b15156101c057600080fd5b6102cc565b60035460a060020a900460ff1680156101f65750600160a060020a03811660009081526007602052604090205460ff165b1561027f57600354600160a060020a0316600090815260086020526040902054671bc16d674ec8000014801561024b5750600160a060020a038116600090815260086020526040902054671bc16d674ec80000115b80156101b55750600160a060020a038116600090815260086020526040902054671bc16d674ec80000906101b290346105af565b60035460a060020a900460ff161580156102a75750600354600160a060020a03828116911614155b15156102b257600080fd5b81156102cc576102c06105c9565b3411156102cc57600080fd5b676f05b59d3b200000600160a060020a03301631106102f6576003805460a060020a60ff02191690555b61030134600061064d565b505050005b34801561031257600080fd5b5061031b61092b565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035557818101518382015260200161033d565b50505050905090810190601f1680156103825780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039c57600080fd5b506103a86004356109b9565b60408051918252519081900360200190f35b3480156103c657600080fd5b506103a86109ee565b3480156103db57600080fd5b506103a86004356109f4565b3480156103f357600080fd5b506103fc610a2d565b6040805160ff9092168252519081900360200190f35b34801561041e57600080fd5b50610427610a32565b005b34801561043557600080fd5b506103a8610cd7565b34801561044a57600080fd5b506103a8610d2b565b34801561045f57600080fd5b506103a86004351515610d31565b34801561047957600080fd5b506103a8610d74565b34801561048e57600080fd5b506103a8600160a060020a0360043516610d82565b3480156104af57600080fd5b506103a86105c9565b3480156104c457600080fd5b506103a8610d9d565b3480156104d957600080fd5b506103a8610de5565b3480156104ee57600080fd5b5061031b610df7565b34801561050357600080fd5b5061050c610e51565b604080519115158252519081900360200190f35b34801561052c57600080fd5b5061050c600160a060020a0360043516602435610f53565b34801561055057600080fd5b50610427600435611291565b34801561056857600080fd5b506104276115c7565b6103a8600160a060020a03600435166115fe565b34801561059157600080fd5b506104276117da565b3480156105a657600080fd5b50610427611925565b6000828201838110156105be57fe5b8091505b5092915050565b600354600090671bc16d674ec800009060a060020a900460ff1615156105f45750670de0b6b3a76400005b680ad78ebc5ac6200000600160a060020a03301631106106485761064561063761063030600160a060020a031631670de0b6b3a7640000611bb8565b6064611bb8565b670de0b6b3a7640000611bcf565b90505b919050565b600033818080808080806106628b600a611bb8565b965061066f876003611bb8565b955061067b8787611bfa565b94506106878b88611bfa565b935061069284611c0c565b925068010000000000000000850291506000831180156106bc57506009546106ba84826105af565b115b15156106c757600080fd5b600160a060020a038a16158015906106f1575087600160a060020a03168a600160a060020a031614155b80156107175750600254600160a060020a038b1660009081526004602052604090205410155b1561075d57600160a060020a038a1660009081526005602052604090205461073f90876105af565b600160a060020a038b16600090815260056020526040902055610778565b61076785876105af565b945068010000000000000000850291505b600060095411156107dc5761078f600954846105af565b60098190556801000000000000000086028115156107a957fe5b600a80549290910490910190556009546801000000000000000086028115156107ce57fe5b0483028203820391506107e2565b60098390555b600160a060020a03881660009081526004602052604090205461080590846105af565b600160a060020a038916600090815260046020908152604080832093909355600a5460069091529190208054918502849003918201905560035490915060a060020a900460ff1680156108875750600354600160a060020a03898116911614806108875750600160a060020a03881660009081526007602052604090205460ff165b156108c957600160a060020a0388166000908152600860205260409020546108af908c6105af565b600160a060020a0389166000908152600860205260409020555b89600160a060020a031688600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58d86604051808381526020018281526020019250505060405180910390a350909998505050505050505050565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109b15780601f10610986576101008083540402835291602001916109b1565b820191906000526020600020905b81548152906001019060200180831161099457829003601f168201915b505050505081565b60008080806109c985600a611bb8565b92506109d58584611bfa565b91506109e082611c0c565b90508093505b505050919050565b60095490565b6000806000806009548511151515610a0b57600080fd5b610a1485611ca4565b9250610a2183600a611bb8565b91506109e08383611bfa565b601281565b60035460009081908190339060a060020a900460ff168015610a615750600354600160a060020a038281169116145b15610ad457600354600160a060020a0316600090815260086020526040902054671bc16d674ec80000118015610ac45750600354600160a060020a0316600090815260086020526040902054671bc16d674ec8000090610ac190346105af565b11155b1515610acf57600080fd5b610bdb565b60035460a060020a900460ff168015610b055750600160a060020a03811660009081526007602052604090205460ff165b15610b8e57600354600160a060020a0316600090815260086020526040902054671bc16d674ec80000148015610b5a5750600160a060020a038116600090815260086020526040902054671bc16d674ec80000115b8015610ac45750600160a060020a038116600090815260086020526040902054671bc16d674ec8000090610ac190346105af565b60035460a060020a900460ff16158015610bb65750600354600160a060020a03828116911614155b1515610bc157600080fd5b8115610bdb57610bcf6105c9565b341115610bdb57600080fd5b676f05b59d3b200000600160a060020a0330163110610c05576003805460a060020a60ff02191690555b6000610c116001610d31565b11610c1b57600080fd5b339350610c286000610d31565b600160a060020a038516600081815260066020908152604080832080546801000000000000000087020190556005909152808220805490839055905193019550909185156108fc0291869190818181858888f19350505050158015610c91573d6000803e3d6000fd5b50604080518481529051600160a060020a038616917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a250505050565b60008060008060095460001415610cf5576414f46b04009350610d25565b610d06670de0b6b3a7640000611ca4565b9250610d1383600a611bb8565b9150610d1f8383611bfa565b90508093505b50505090565b60025481565b60003382610d4757610d4281611d10565b610d6b565b600160a060020a038116600090815260056020526040902054610d6982611d10565b015b91505b50919050565b600160a060020a0330163190565b600160a060020a031660009081526004602052604090205490565b60008060008060095460001415610dbb5764199c82cc009350610d25565b610dcc670de0b6b3a7640000611ca4565b9250610dd983600a611bb8565b9150610d1f83836105af565b600033610df181610d82565b91505090565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109b15780601f10610986576101008083540402835291602001916109b1565b600354600090339060a060020a900460ff16158015610e7e5750600354600160a060020a03828116911614155b80610df1575060035460a060020a900460ff168015610df15750600354600160a060020a038281169116148015610ed65750600354600160a060020a0316600090815260086020526040902054671bc16d674ec80000115b80610df15750600160a060020a03811660009081526007602052604090205460ff168015610f255750600354600160a060020a0316600090815260086020526040902054671bc16d674ec80000145b8015610df15750600160a060020a0316600090815260086020526040902054671bc16d674ec8000011919050565b60035460009081908190339060a060020a900460ff168015610f825750600354600160a060020a038281169116145b15610ff557600354600160a060020a0316600090815260086020526040902054671bc16d674ec80000118015610fe55750600354600160a060020a0316600090815260086020526040902054671bc16d674ec8000090610fe290346105af565b11155b1515610ff057600080fd5b6110fc565b60035460a060020a900460ff1680156110265750600160a060020a03811660009081526007602052604090205460ff165b156110af57600354600160a060020a0316600090815260086020526040902054671bc16d674ec8000014801561107b5750600160a060020a038116600090815260086020526040902054671bc16d674ec80000115b8015610fe55750600160a060020a038116600090815260086020526040902054671bc16d674ec8000090610fe290346105af565b60035460a060020a900460ff161580156110d75750600354600160a060020a03828116911614155b15156110e257600080fd5b81156110fc576110f06105c9565b3411156110fc57600080fd5b676f05b59d3b200000600160a060020a0330163110611126576003805460a060020a60ff02191690555b6000611130610de5565b1161113a57600080fd5b339250600160a060020a03861615801590611167575082600160a060020a031686600160a060020a031614155b801561118b5750600160a060020a0383166000908152600460205260409020548511155b151561119657600080fd5b60006111a26001610d31565b11156111b0576111b0610a32565b600160a060020a0383166000908152600460205260409020546111d39086611bfa565b600160a060020a03808516600090815260046020526040808220939093559088168152205461120290866105af565b600160a060020a03878116600081815260046020908152604080832095909555600a8054948916808452600683528684208054968d0290960390955554838352918590208054928b029092019091558351898152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a350600195945050505050565b600080600080600080600080339050600360149054906101000a900460ff1680156112c95750600354600160a060020a038281169116145b1561133c57600354600160a060020a0316600090815260086020526040902054671bc16d674ec8000011801561132c5750600354600160a060020a0316600090815260086020526040902054671bc16d674ec800009061132990346105af565b11155b151561133757600080fd5b611443565b60035460a060020a900460ff16801561136d5750600160a060020a03811660009081526007602052604090205460ff165b156113f657600354600160a060020a0316600090815260086020526040902054671bc16d674ec800001480156113c25750600160a060020a038116600090815260086020526040902054671bc16d674ec80000115b801561132c5750600160a060020a038116600090815260086020526040902054671bc16d674ec800009061132990346105af565b60035460a060020a900460ff1615801561141e5750600354600160a060020a03828116911614155b151561142957600080fd5b8115611443576114376105c9565b34111561144357600080fd5b676f05b59d3b200000600160a060020a033016311061146d576003805460a060020a60ff02191690555b6000611477610de5565b1161148157600080fd5b33600160a060020a0381166000908152600460205260409020549098508911156114aa57600080fd5b8896506114b687611ca4565b95506114c386600a611bb8565b94506114cf8686611bfa565b93506114dd60095488611bfa565b600955600160a060020a0388166000908152600460205260409020546115039088611bfa565b600160a060020a038916600090815260046020908152604080832093909355600a5460069091529181208054928a0268010000000000000000880201928390039055600954919450101561157957611575600a5460095468010000000000000000880281151561156f57fe5b046105af565b600a555b60408051888152602081018690528151600160a060020a038b16927fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139928290030190a2505050505050505050565b33600160a060020a038116600090815260046020526040812054908111156115f2576115f281611291565b6115fa610a32565b5050565b600354600090600190339060a060020a900460ff16801561162c5750600354600160a060020a038281169116145b1561169f57600354600160a060020a0316600090815260086020526040902054671bc16d674ec8000011801561168f5750600354600160a060020a0316600090815260086020526040902054671bc16d674ec800009061168c90346105af565b11155b151561169a57600080fd5b6117a6565b60035460a060020a900460ff1680156116d05750600160a060020a03811660009081526007602052604090205460ff165b1561175957600354600160a060020a0316600090815260086020526040902054671bc16d674ec800001480156117255750600160a060020a038116600090815260086020526040902054671bc16d674ec80000115b801561168f5750600160a060020a038116600090815260086020526040902054671bc16d674ec800009061168c90346105af565b60035460a060020a900460ff161580156117815750600354600160a060020a03828116911614155b151561178c57600080fd5b81156117a65761179a6105c9565b3411156117a657600080fd5b676f05b59d3b200000600160a060020a03301631106117d0576003805460a060020a60ff02191690555b6109e6348561064d565b60008060006117e7610de5565b116117f157600080fd5b60035433925060a060020a900460ff1615801561181c5750600354600160a060020a03838116911614155b151561182757600080fd5b60035461183c90600160a060020a0316611d10565b905060008111806118655750600354600160a060020a0316600090815260056020526040812054115b156118e25760038054600160a060020a039081166000908152600660209081526040808320805468010000000000000000880201905593548316825260059052828120805490829055925192909301929084169183156108fc0291849190818181858888f193505050501580156118e0573d6000803e3d6000fd5b505b604080518281529051600160a060020a038416917fdafd658090165981342207cbd9f7a9c6c3db6c5b5ed0a3edc882b36d91d19c76919081900360200190a25050565b600354600090819081908190339060a060020a900460ff1680156119565750600354600160a060020a038281169116145b156119c957600354600160a060020a0316600090815260086020526040902054671bc16d674ec800001180156119b95750600354600160a060020a0316600090815260086020526040902054671bc16d674ec80000906119b690346105af565b11155b15156119c457600080fd5b611ad0565b60035460a060020a900460ff1680156119fa5750600160a060020a03811660009081526007602052604090205460ff165b15611a8357600354600160a060020a0316600090815260086020526040902054671bc16d674ec80000148015611a4f5750600160a060020a038116600090815260086020526040902054671bc16d674ec80000115b80156119b95750600160a060020a038116600090815260086020526040902054671bc16d674ec80000906119b690346105af565b60035460a060020a900460ff16158015611aab5750600354600160a060020a03828116911614155b1515611ab657600080fd5b8115611ad057611ac46105c9565b341115611ad057600080fd5b676f05b59d3b200000600160a060020a0330163110611afa576003805460a060020a60ff02191690555b6000611b066001610d31565b11611b1057600080fd5b611b1a6000610d31565b33600160a060020a038116600090815260066020908152604080832080546801000000000000000087020190556005909152812080549082905590920196509450611b6690869061064d565b925083600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588685604051808381526020018281526020019250505060405180910390a25050505050565b6000808284811515611bc657fe5b04949350505050565b600080831515611be257600091506105c2565b50828202828482811515611bf257fe5b04146105be57fe5b600082821115611c0657fe5b50900390565b6009546000906c01431e0fae6d7217caa00000009082906402540be400611c91611c8b730380d4bd8a8678c1bb542c80deb4800000000000880268056bc75e2d631000006002860a02017005e0a1fd2712875988becaad0000000000850201780197d4df19d605767337e9f14d3eec8920e40000000000000001611d4b565b85611bfa565b811515611c9a57fe5b0403949350505050565b600954600090670de0b6b3a7640000838101918101908390611cfd6414f46b04008285046402540be40002018702600283670de0b6b3a763ffff1982890a8b900301046402540be40002811515611cf757fe5b04611bfa565b811515611d0657fe5b0495945050505050565b600160a060020a0316600090815260066020908152604080832054600490925290912054600a54680100000000000000009102919091030490565b80600260018201045b81811015610d6e578091506002818285811515611d6d57fe5b0401811515611d7857fe5b049050611d545600a165627a7a72305820fdb4691d14264f9eadda9208cd951db5504d6d2fa6e678ed42f6ed0b5ce0d5650029"
}