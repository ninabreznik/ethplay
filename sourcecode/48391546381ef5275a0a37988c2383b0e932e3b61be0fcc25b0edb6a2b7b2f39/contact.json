{
  "address": "0x97282a7a15f9beadc854e8793aae43b089f14b4e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Congress",
  "compilerVersion": "v0.4.9+commit.364da425",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-05-11\n*/\n\npragma solidity ^0.4.4;\n\n/**\n * @title Contract for object that have an owner\n */\ncontract Owned {\n    /**\n     * Contract owner address\n     */\n    address public owner;\n\n    /**\n     * @dev Delegate contract to another person\n     * @param _owner New owner address \n     */\n    function setOwner(address _owner) onlyOwner\n    { owner = _owner; }\n\n    /**\n     * @dev Owner check modifier\n     */\n    modifier onlyOwner { if (msg.sender != owner) throw; _; }\n}\n\n/**\n * @title Common pattern for destroyable contracts \n */\ncontract Destroyable {\n    address public hammer;\n\n    /**\n     * @dev Hammer setter\n     * @param _hammer New hammer address\n     */\n    function setHammer(address _hammer) onlyHammer\n    { hammer = _hammer; }\n\n    /**\n     * @dev Destroy contract and scrub a data\n     * @notice Only hammer can call it \n     */\n    function destroy() onlyHammer\n    { suicide(msg.sender); }\n\n    /**\n     * @dev Hammer check modifier\n     */\n    modifier onlyHammer { if (msg.sender != hammer) throw; _; }\n}\n\n/**\n * @title Generic owned destroyable contract\n */\ncontract Object is Owned, Destroyable {\n    function Object() {\n        owner  = msg.sender;\n        hammer = msg.sender;\n    }\n}\n\n// Standard token interface (ERC 20)\n// https://github.com/ethereum/EIPs/issues/20\ncontract ERC20 \n{\n// Functions:\n    /// @return total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256);\n\n// Events:\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * @title Asset recipient interface\n */\ncontract Recipient {\n    /**\n     * @dev On received ethers\n     * @param sender Ether sender\n     * @param amount Ether value\n     */\n    event ReceivedEther(address indexed sender,\n                        uint256 indexed amount);\n\n    /**\n     * @dev On received custom ERC20 tokens\n     * @param from Token sender\n     * @param value Token value\n     * @param token Token contract address\n     * @param extraData Custom additional data\n     */\n    event ReceivedTokens(address indexed from,\n                         uint256 indexed value,\n                         address indexed token,\n                         bytes extraData);\n\n    /**\n     * @dev Receive approved ERC20 tokens\n     * @param _from Spender address\n     * @param _value Transaction value\n     * @param _token ERC20 token contract address\n     * @param _extraData Custom additional data\n     */\n    function receiveApproval(address _from, uint256 _value,\n                             ERC20 _token, bytes _extraData) {\n        if (!_token.transferFrom(_from, this, _value)) throw;\n        ReceivedTokens(_from, _value, _token, _extraData);\n    }\n\n    /**\n     * @dev Catch sended to contract ethers\n     */\n    function () payable\n    { ReceivedEther(msg.sender, msg.value); }\n}\n\n/**\n * @title Improved congress contract by Ethereum Foundation\n * @dev https://www.ethereum.org/dao#the-blockchain-congress \n */\ncontract Congress is Object, Recipient {\n    /**\n     * @dev Minimal quorum value\n     */\n    uint256 public minimumQuorum;\n\n    /**\n     * @dev Duration of debates\n     */\n    uint256 public debatingPeriodInMinutes;\n\n    /**\n     * @dev Majority margin is used in voting procedure \n     */\n    int256 public majorityMargin;\n\n    /**\n     * @dev Archive of all member proposals \n     */\n    Proposal[] public proposals;\n\n    /**\n     * @dev Count of proposals in archive \n     */\n    function numProposals() constant returns (uint256)\n    { return proposals.length; }\n\n    /**\n     * @dev Congress members list\n     */\n    Member[] public members;\n\n    /**\n     * @dev Get member identifier by account address\n     */\n    mapping(address => uint256) public memberId;\n\n    /**\n     * @dev On proposal added \n     * @param proposal Proposal identifier\n     * @param recipient Ether recipient\n     * @param amount Amount of wei to transfer\n     */\n    event ProposalAdded(uint256 indexed proposal,\n                        address indexed recipient,\n                        uint256 indexed amount,\n                        string description);\n\n    /**\n     * @dev On vote by member accepted\n     * @param proposal Proposal identifier\n     * @param position Is proposal accepted by memeber\n     * @param voter Congress memeber account address\n     * @param justification Member comment\n     */\n    event Voted(uint256 indexed proposal,\n                bool    indexed position,\n                address indexed voter,\n                string justification);\n\n    /**\n     * @dev On Proposal closed\n     * @param proposal Proposal identifier\n     * @param quorum Number of votes \n     * @param active Is proposal passed\n     */\n    event ProposalTallied(uint256 indexed proposal,\n                          uint256 indexed quorum,\n                          bool    indexed active);\n\n    /**\n     * @dev On changed membership\n     * @param member Account address \n     * @param isMember Is account member now\n     */\n    event MembershipChanged(address indexed member,\n                            bool    indexed isMember);\n\n    /**\n     * @dev On voting rules changed\n     * @param minimumQuorum New minimal count of votes\n     * @param debatingPeriodInMinutes New debating duration\n     * @param majorityMargin New majority margin value\n     */\n    event ChangeOfRules(uint256 indexed minimumQuorum,\n                        uint256 indexed debatingPeriodInMinutes,\n                        int256  indexed majorityMargin);\n\n    struct Proposal {\n        address recipient;\n        uint256 amount;\n        string  description;\n        uint256 votingDeadline;\n        bool    executed;\n        bool    proposalPassed;\n        uint256 numberOfVotes;\n        int256  currentResult;\n        bytes32 proposalHash;\n        Vote[]  votes;\n        mapping(address => bool) voted;\n    }\n\n    struct Member {\n        address member;\n        string  name;\n        uint256 memberSince;\n    }\n\n    struct Vote {\n        bool    inSupport;\n        address voter;\n        string  justification;\n    }\n\n    /**\n     * @dev Modifier that allows only shareholders to vote and create new proposals\n     */\n    modifier onlyMembers {\n        if (memberId[msg.sender] == 0) throw;\n        _;\n    }\n\n    /**\n     * @dev First time setup\n     */\n    function Congress(\n        uint256 minimumQuorumForProposals,\n        uint256 minutesForDebate,\n        int256  marginOfVotesForMajority,\n        address congressLeader\n    ) {\n        changeVotingRules(minimumQuorumForProposals, minutesForDebate, marginOfVotesForMajority);\n        // Itâ€™s necessary to add an empty first member\n        addMember(0, ''); // and let's add the founder, to save a step later\n        if (congressLeader != 0)\n            addMember(congressLeader, 'The Founder');\n    }\n\n    /**\n     * @dev Append new congress member \n     * @param targetMember Member account address\n     * @param memberName Member full name\n     */\n    function addMember(address targetMember, string memberName) onlyOwner {\n        if (memberId[targetMember] != 0) throw;\n\n        memberId[targetMember] = members.length;\n        members.push(Member({member:      targetMember,\n                             memberSince: now,\n                             name:        memberName}));\n\n        MembershipChanged(targetMember, true);\n    }\n\n    /**\n     * @dev Remove congress member\n     * @param targetMember Member account address\n     */\n    function removeMember(address targetMember) onlyOwner {\n        if (memberId[targetMember] == 0) throw;\n\n        uint256 targetId = memberId[targetMember];\n        uint256 lastId   = members.length - 1;\n\n        // Move last member to removed position\n        Member memory moved    = members[lastId];\n        members[targetId]      = moved; \n        memberId[moved.member] = targetId;\n\n        // Clean up\n        memberId[targetMember] = 0;\n        delete members[lastId];\n        --members.length;\n\n        MembershipChanged(targetMember, false);\n    }\n\n    /**\n     * @dev Change rules of voting\n     * @param minimumQuorumForProposals Minimal count of votes\n     * @param minutesForDebate Debate deadline in minutes\n     * @param marginOfVotesForMajority Majority margin value\n     */\n    function changeVotingRules(\n        uint256 minimumQuorumForProposals,\n        uint256 minutesForDebate,\n        int256  marginOfVotesForMajority\n    )\n        onlyOwner\n    {\n        minimumQuorum           = minimumQuorumForProposals;\n        debatingPeriodInMinutes = minutesForDebate;\n        majorityMargin          = marginOfVotesForMajority;\n\n        ChangeOfRules(minimumQuorum, debatingPeriodInMinutes, majorityMargin);\n    }\n\n    /**\n     * @dev Create a new proposal\n     * @param beneficiary Beneficiary account address\n     * @param amount Transaction value in Wei \n     * @param jobDescription Job description string\n     * @param transactionBytecode Bytecode of transaction\n     */\n    function newProposal(\n        address beneficiary,\n        uint256 amount,\n        string  jobDescription,\n        bytes   transactionBytecode\n    )\n        onlyMembers\n        returns (uint256 id)\n    {\n        id               = proposals.length++;\n        Proposal p       = proposals[id];\n        p.recipient      = beneficiary;\n        p.amount         = amount;\n        p.description    = jobDescription;\n        p.proposalHash   = sha3(beneficiary, amount, transactionBytecode);\n        p.votingDeadline = now + debatingPeriodInMinutes * 1 minutes;\n        p.executed       = false;\n        p.proposalPassed = false;\n        p.numberOfVotes  = 0;\n        ProposalAdded(id, beneficiary, amount, jobDescription);\n    }\n\n    /**\n     * @dev Check if a proposal code matches\n     * @param id Proposal identifier\n     * @param beneficiary Beneficiary account address\n     * @param amount Transaction value in Wei \n     * @param transactionBytecode Bytecode of transaction\n     */\n    function checkProposalCode(\n        uint256 id,\n        address beneficiary,\n        uint256 amount,\n        bytes   transactionBytecode\n    )\n        constant\n        returns (bool codeChecksOut)\n    {\n        return proposals[id].proposalHash\n            == sha3(beneficiary, amount, transactionBytecode);\n    }\n\n    /**\n     * @dev Proposal voting\n     * @param id Proposal identifier\n     * @param supportsProposal Is proposal supported\n     * @param justificationText Member comment\n     */\n    function vote(\n        uint256 id,\n        bool    supportsProposal,\n        string  justificationText\n    )\n        onlyMembers\n        returns (uint256 vote)\n    {\n        Proposal p = proposals[id];             // Get the proposal\n        if (p.voted[msg.sender] == true) throw; // If has already voted, cancel\n        p.voted[msg.sender] = true;             // Set this voter as having voted\n        p.numberOfVotes++;                      // Increase the number of votes\n        if (supportsProposal) {                 // If they support the proposal\n            p.currentResult++;                  // Increase score\n        } else {                                // If they don't\n            p.currentResult--;                  // Decrease the score\n        }\n        // Create a log of this event\n        Voted(id,  supportsProposal, msg.sender, justificationText);\n    }\n\n    /**\n     * @dev Try to execute proposal\n     * @param id Proposal identifier\n     * @param transactionBytecode Transaction data\n     */\n    function executeProposal(\n        uint256 id,\n        bytes   transactionBytecode\n    )\n        onlyMembers\n    {\n        Proposal p = proposals[id];\n        /* Check if the proposal can be executed:\n           - Has the voting deadline arrived?\n           - Has it been already executed or is it being executed?\n           - Does the transaction code match the proposal?\n           - Has a minimum quorum?\n        */\n\n        if (now < p.votingDeadline\n            || p.executed\n            || p.proposalHash != sha3(p.recipient, p.amount, transactionBytecode)\n            || p.numberOfVotes < minimumQuorum)\n            throw;\n\n        /* execute result */\n        /* If difference between support and opposition is larger than margin */\n        if (p.currentResult > majorityMargin) {\n            // Avoid recursive calling\n\n            p.executed = true;\n            if (!p.recipient.call.value(p.amount)(transactionBytecode))\n                throw;\n\n            p.proposalPassed = true;\n        } else {\n            p.proposalPassed = false;\n        }\n        // Fire Events\n        ProposalTallied(id, p.numberOfVotes, p.proposalPassed);\n    }\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006efba8fb2ac5b6730729a972ec224426a287c3ad"
}