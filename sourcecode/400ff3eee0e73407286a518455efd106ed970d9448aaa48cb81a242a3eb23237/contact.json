{
  "address": "0x840507196d587f9fb0f9f345267a967d52a998ee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PaymentProcessor",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-29\n*/\n\npragma solidity ^0.4.24;\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Destructible.sol\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n  function Destructible() payable { }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {\n    selfdestruct(_recipient);\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\n\n/**\n * @title Contactable token\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n * contact information.\n */\ncontract Contactable is Ownable{\n\n    string public contactInformation;\n\n    /**\n     * @dev Allows the owner to set a string with their contact information.\n     * @param info The contact information to attach to the contract.\n     */\n    function setContactInformation(string info) onlyOwner public {\n         contactInformation = info;\n     }\n}\n\n// File: contracts/Restricted.sol\n\n/** @title Restricted\n *  Exposes onlyMonetha modifier\n */\ncontract Restricted is Ownable {\n\n    //MonethaAddress set event\n    event MonethaAddressSet(\n        address _address,\n        bool _isMonethaAddress\n    );\n\n    mapping (address => bool) public isMonethaAddress;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n     */\n    modifier onlyMonetha() {\n        require(isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  Allows owner to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        MonethaAddressSet(_address, _isMonethaAddress);\n    }\n}\n\n// File: contracts/ERC20.sol\n\n/**\n* @title ERC20 interface\n*/\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n\n    function decimals() public view returns(uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function allowance(address _owner, address _spender)\n        public view returns (uint256);\n        \n    // Return type not defined intentionally since not all ERC20 tokens return proper result type\n    function transfer(address _to, uint256 _value) public;\n\n    function approve(address _spender, uint256 _value)\n        public returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n// File: contracts/MonethaGateway.sol\n\n/**\n *  @title MonethaGateway\n *\n *  MonethaGateway forward funds from order payment to merchant's wallet and collects Monetha fee.\n */\ncontract MonethaGateway is Pausable, Contactable, Destructible, Restricted {\n\n    using SafeMath for uint256;\n    \n    string constant VERSION = \"0.5\";\n\n    /**\n     *  Fee permille of Monetha fee.\n     *  1 permille (‰) = 0.1 percent (%)\n     *  15‰ = 1.5%\n     */\n    uint public constant FEE_PERMILLE = 15;\n    \n    /**\n     *  Address of Monetha Vault for fee collection\n     */\n    address public monethaVault;\n\n    /**\n     *  Account for permissions managing\n     */\n    address public admin;\n\n    event PaymentProcessedEther(address merchantWallet, uint merchantIncome, uint monethaIncome);\n    event PaymentProcessedToken(address tokenAddress, address merchantWallet, uint merchantIncome, uint monethaIncome);\n\n    /**\n     *  @param _monethaVault Address of Monetha Vault\n     */\n    constructor(address _monethaVault, address _admin) public {\n        require(_monethaVault != 0x0);\n        monethaVault = _monethaVault;\n        \n        setAdmin(_admin);\n    }\n    \n    /**\n     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\n     *      and collects Monetha fee.\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\n     *  @param _monethaFee is a fee collected by Monetha\n     */\n    function acceptPayment(address _merchantWallet, uint _monethaFee) external payable onlyMonetha whenNotPaused {\n        require(_merchantWallet != 0x0);\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(msg.value).div(1000)); // Monetha fee cannot be greater than 1.5% of payment\n        \n        uint merchantIncome = msg.value.sub(_monethaFee);\n\n        _merchantWallet.transfer(merchantIncome);\n        monethaVault.transfer(_monethaFee);\n\n        emit PaymentProcessedEther(_merchantWallet, merchantIncome, _monethaFee);\n    }\n\n    /**\n     *  acceptTokenPayment accept token payment from PaymentAcceptor, forwards it to merchant's wallet\n     *      and collects Monetha fee.\n     *  @param _merchantWallet address of merchant's wallet for fund transfer\n     *  @param _monethaFee is a fee collected by Monetha\n     *  @param _tokenAddress is the token address\n     *  @param _value is the order value\n     */\n    function acceptTokenPayment(\n        address _merchantWallet,\n        uint _monethaFee,\n        address _tokenAddress,\n        uint _value\n    )\n        external onlyMonetha whenNotPaused\n    {\n        require(_merchantWallet != 0x0);\n\n        // Monetha fee cannot be greater than 1.5% of payment\n        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(_value).div(1000));\n\n        uint merchantIncome = _value.sub(_monethaFee);\n        \n        ERC20(_tokenAddress).transfer(_merchantWallet, merchantIncome);\n        ERC20(_tokenAddress).transfer(monethaVault, _monethaFee);\n        \n        emit PaymentProcessedToken(_tokenAddress, _merchantWallet, merchantIncome, _monethaFee);\n    }\n\n    /**\n     *  changeMonethaVault allows owner to change address of Monetha Vault.\n     *  @param newVault New address of Monetha Vault\n     */\n    function changeMonethaVault(address newVault) external onlyOwner whenNotPaused {\n        monethaVault = newVault;\n    }\n\n    /**\n     *  Allows other monetha account or contract to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) public {\n        require(msg.sender == admin || msg.sender == owner);\n\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        emit MonethaAddressSet(_address, _isMonethaAddress);\n    }\n\n    /**\n     *  setAdmin allows owner to change address of admin.\n     *  @param _admin New address of admin\n     */\n    function setAdmin(address _admin) public onlyOwner {\n        require(_admin != 0x0);\n        admin = _admin;\n    }\n}\n\n// File: contracts/MerchantDealsHistory.sol\n\n/**\n *  @title MerchantDealsHistory\n *  Contract stores hash of Deals conditions together with parties reputation for each deal\n *  This history enables to see evolution of trust rating for both parties\n */\ncontract MerchantDealsHistory is Contactable, Restricted {\n\n    string constant VERSION = \"0.3\";\n\n    ///  Merchant identifier hash\n    bytes32 public merchantIdHash;\n    \n    //Deal event\n    event DealCompleted(\n        uint orderId,\n        address clientAddress,\n        uint32 clientReputation,\n        uint32 merchantReputation,\n        bool successful,\n        uint dealHash\n    );\n\n    //Deal cancellation event\n    event DealCancelationReason(\n        uint orderId,\n        address clientAddress,\n        uint32 clientReputation,\n        uint32 merchantReputation,\n        uint dealHash,\n        string cancelReason\n    );\n\n    //Deal refund event\n    event DealRefundReason(\n        uint orderId,\n        address clientAddress,\n        uint32 clientReputation,\n        uint32 merchantReputation,\n        uint dealHash,\n        string refundReason\n    );\n\n    /**\n     *  @param _merchantId Merchant of the acceptor\n     */\n    function MerchantDealsHistory(string _merchantId) public {\n        require(bytes(_merchantId).length > 0);\n        merchantIdHash = keccak256(_merchantId);\n    }\n\n    /**\n     *  recordDeal creates an event of completed deal\n     *  @param _orderId Identifier of deal's order\n     *  @param _clientAddress Address of client's account\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _isSuccess Identifies whether deal was successful or not\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     */\n    function recordDeal(\n        uint _orderId,\n        address _clientAddress,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        bool _isSuccess,\n        uint _dealHash)\n        external onlyMonetha\n    {\n        DealCompleted(\n            _orderId,\n            _clientAddress,\n            _clientReputation,\n            _merchantReputation,\n            _isSuccess,\n            _dealHash\n        );\n    }\n\n    /**\n     *  recordDealCancelReason creates an event of not paid deal that was cancelled \n     *  @param _orderId Identifier of deal's order\n     *  @param _clientAddress Address of client's account\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     *  @param _cancelReason deal cancelation reason (text)\n     */\n    function recordDealCancelReason(\n        uint _orderId,\n        address _clientAddress,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        uint _dealHash,\n        string _cancelReason)\n        external onlyMonetha\n    {\n        DealCancelationReason(\n            _orderId,\n            _clientAddress,\n            _clientReputation,\n            _merchantReputation,\n            _dealHash,\n            _cancelReason\n        );\n    }\n\n/**\n     *  recordDealRefundReason creates an event of not paid deal that was cancelled \n     *  @param _orderId Identifier of deal's order\n     *  @param _clientAddress Address of client's account\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     *  @param _refundReason deal refund reason (text)\n     */\n    function recordDealRefundReason(\n        uint _orderId,\n        address _clientAddress,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        uint _dealHash,\n        string _refundReason)\n        external onlyMonetha\n    {\n        DealRefundReason(\n            _orderId,\n            _clientAddress,\n            _clientReputation,\n            _merchantReputation,\n            _dealHash,\n            _refundReason\n        );\n    }\n}\n\n// File: contracts/SafeDestructible.sol\n\n/**\n * @title SafeDestructible\n * Base contract that can be destroyed by owner.\n * Can be destructed if there are no funds on contract balance.\n */\ncontract SafeDestructible is Ownable {\n    function destroy() onlyOwner public {\n        require(this.balance == 0);\n        selfdestruct(owner);\n    }\n}\n\n// File: contracts/MerchantWallet.sol\n\n/**\n *  @title MerchantWallet\n *  Serves as a public Merchant profile with merchant profile info,\n *      payment settings and latest reputation value.\n *  Also MerchantWallet accepts payments for orders.\n */\n\ncontract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\n\n    string constant VERSION = \"0.5\";\n\n    /// Address of merchant's account, that can withdraw from wallet\n    address public merchantAccount;\n\n    /// Address of merchant's fund address.\n    address public merchantFundAddress;\n\n    /// Unique Merchant identifier hash\n    bytes32 public merchantIdHash;\n\n    /// profileMap stores general information about the merchant\n    mapping (string=>string) profileMap;\n\n    /// paymentSettingsMap stores payment and order settings for the merchant\n    mapping (string=>string) paymentSettingsMap;\n\n    /// compositeReputationMap stores composite reputation, that compraises from several metrics\n    mapping (string=>uint32) compositeReputationMap;\n\n    /// number of last digits in compositeReputation for fractional part\n    uint8 public constant REPUTATION_DECIMALS = 4;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by merchant account.\n     */\n    modifier onlyMerchant() {\n        require(msg.sender == merchantAccount);\n        _;\n    }\n\n    /**\n     *  Fund Address should always be Externally Owned Account and not a contract.\n     */\n    modifier isEOA(address _fundAddress) {\n        uint256 _codeLength;\n        assembly {_codeLength := extcodesize(_fundAddress)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by merchant account or by monethaAddress account.\n     */\n    modifier onlyMerchantOrMonetha() {\n        require(msg.sender == merchantAccount || isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  @param _merchantAccount Address of merchant's account, that can withdraw from wallet\n     *  @param _merchantId Merchant identifier\n     *  @param _fundAddress Merchant's fund address, where amount will be transferred.\n     */\n    constructor(address _merchantAccount, string _merchantId, address _fundAddress) public isEOA(_fundAddress) {\n        require(_merchantAccount != 0x0);\n        require(bytes(_merchantId).length > 0);\n\n        merchantAccount = _merchantAccount;\n        merchantIdHash = keccak256(_merchantId);\n\n        merchantFundAddress = _fundAddress;\n    }\n\n    /**\n     *  Accept payment from MonethaGateway\n     */\n    function () external payable {\n    }\n\n    /**\n     *  @return profile info by string key\n     */\n    function profile(string key) external constant returns (string) {\n        return profileMap[key];\n    }\n\n    /**\n     *  @return payment setting by string key\n     */\n    function paymentSettings(string key) external constant returns (string) {\n        return paymentSettingsMap[key];\n    }\n\n    /**\n     *  @return composite reputation value by string key\n     */\n    function compositeReputation(string key) external constant returns (uint32) {\n        return compositeReputationMap[key];\n    }\n\n    /**\n     *  Set profile info by string key\n     */\n    function setProfile(\n        string profileKey,\n        string profileValue,\n        string repKey,\n        uint32 repValue\n    )\n        external onlyOwner\n    {\n        profileMap[profileKey] = profileValue;\n\n        if (bytes(repKey).length != 0) {\n            compositeReputationMap[repKey] = repValue;\n        }\n    }\n\n    /**\n     *  Set payment setting by string key\n     */\n    function setPaymentSettings(string key, string value) external onlyOwner {\n        paymentSettingsMap[key] = value;\n    }\n\n    /**\n     *  Set composite reputation value by string key\n     */\n    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\n        compositeReputationMap[key] = value;\n    }\n\n    /**\n     *  Allows withdrawal of funds to beneficiary address\n     */\n    function doWithdrawal(address beneficiary, uint amount) private {\n        require(beneficiary != 0x0);\n        beneficiary.transfer(amount);\n    }\n\n    /**\n     *  Allows merchant to withdraw funds to beneficiary address\n     */\n    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\n        doWithdrawal(beneficiary, amount);\n    }\n\n    /**\n     *  Allows merchant to withdraw funds to it's own account\n     */\n    function withdraw(uint amount) external onlyMerchant {\n        withdrawTo(msg.sender, amount);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing funds to deposit address of the exchange\n     */\n    function withdrawToExchange(address depositAccount, uint amount) external onlyMerchantOrMonetha whenNotPaused {\n        doWithdrawal(depositAccount, amount);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing all funds to deposit address of the exchange\n     */\n    function withdrawAllToExchange(address depositAccount, uint min_amount) external onlyMerchantOrMonetha whenNotPaused {\n        require (address(this).balance >= min_amount);\n        doWithdrawal(depositAccount, address(this).balance);\n    }\n\n    /**\n     *  Allows merchant or Monetha to initiate exchange of tokens by withdrawing all tokens to deposit address of the exchange\n     */\n    function withdrawAllTokensToExchange(address _tokenAddress, address _depositAccount, uint _minAmount) external onlyMerchantOrMonetha whenNotPaused {\n        require(_tokenAddress != address(0));\n        \n        uint balance = ERC20(_tokenAddress).balanceOf(address(this));\n        \n        require(balance >= _minAmount);\n        \n        ERC20(_tokenAddress).transfer(_depositAccount, balance);\n    }\n\n    /**\n     *  Allows merchant to change it's account address\n     */\n    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\n        merchantAccount = newAccount;\n    }\n\n    /**\n     *  Allows merchant to change it's fund address.\n     */\n    function changeFundAddress(address newFundAddress) external onlyMerchant isEOA(newFundAddress) {\n        merchantFundAddress = newFundAddress;\n    }\n}\n\n// File: contracts/PaymentProcessor.sol\n\n/**\n *  @title PaymentProcessor\n *  Each Merchant has one PaymentProcessor that ensure payment and order processing with Trust and Reputation\n *\n *  Payment Processor State Transitions:\n *  Null -(addOrder) -> Created\n *  Created -(securePay) -> Paid\n *  Created -(cancelOrder) -> Cancelled\n *  Paid -(refundPayment) -> Refunding\n *  Paid -(processPayment) -> Finalized\n *  Refunding -(withdrawRefund) -> Refunded\n */\n\n\ncontract PaymentProcessor is Pausable, Destructible, Contactable, Restricted {\n\n    using SafeMath for uint256;\n\n    string constant VERSION = \"0.6\";\n\n    /**\n     *  Fee permille of Monetha fee.\n     *  1 permille = 0.1 %\n     *  15 permille = 1.5%\n     */\n    uint public constant FEE_PERMILLE = 15;\n\n    /// MonethaGateway contract for payment processing\n    MonethaGateway public monethaGateway;\n\n    /// MerchantDealsHistory contract of acceptor's merchant\n    MerchantDealsHistory public merchantHistory;\n\n    /// Address of MerchantWallet, where merchant reputation and funds are stored\n    MerchantWallet public merchantWallet;\n\n    /// Merchant identifier hash, that associates with the acceptor\n    bytes32 public merchantIdHash;\n\n    enum State {Null, Created, Paid, Finalized, Refunding, Refunded, Cancelled}\n\n    struct Order {\n        State state;\n        uint price;\n        uint fee;\n        address paymentAcceptor;\n        address originAddress;\n        address tokenAddress;\n    }\n\n    mapping (uint=>Order) public orders;\n\n    /**\n     *  Asserts current state.\n     *  @param _state Expected state\n     *  @param _orderId Order Id\n     */\n    modifier atState(uint _orderId, State _state) {\n        require(_state == orders[_orderId].state);\n        _;\n    }\n\n    /**\n     *  Performs a transition after function execution.\n     *  @param _state Next state\n     *  @param _orderId Order Id\n     */\n    modifier transition(uint _orderId, State _state) {\n        _;\n        orders[_orderId].state = _state;\n    }\n\n    /**\n     *  payment Processor sets Monetha Gateway\n     *  @param _merchantId Merchant of the acceptor\n     *  @param _merchantHistory Address of MerchantDealsHistory contract of acceptor's merchant\n     *  @param _monethaGateway Address of MonethaGateway contract for payment processing\n     *  @param _merchantWallet Address of MerchantWallet, where merchant reputation and funds are stored\n     */\n    constructor(\n        string _merchantId,\n        MerchantDealsHistory _merchantHistory,\n        MonethaGateway _monethaGateway,\n        MerchantWallet _merchantWallet\n    )\n        public\n    {\n        require(bytes(_merchantId).length > 0);\n\n        merchantIdHash = keccak256(_merchantId);\n\n        setMonethaGateway(_monethaGateway);\n        setMerchantWallet(_merchantWallet);\n        setMerchantDealsHistory(_merchantHistory);\n    }\n\n    /**\n     *  Assigns the acceptor to the order (when client initiates order).\n     *  @param _orderId Identifier of the order\n     *  @param _price Price of the order \n     *  @param _paymentAcceptor order payment acceptor\n     *  @param _originAddress buyer address\n     *  @param _fee Monetha fee\n     */\n    function addOrder(\n        uint _orderId,\n        uint _price,\n        address _paymentAcceptor,\n        address _originAddress,\n        uint _fee,\n        address _tokenAddress\n    ) external whenNotPaused atState(_orderId, State.Null)\n    {\n        require(_orderId > 0);\n        require(_price > 0);\n        require(_fee >= 0 && _fee <= FEE_PERMILLE.mul(_price).div(1000)); // Monetha fee cannot be greater than 1.5% of price\n        require(_paymentAcceptor != address(0));\n        require(_originAddress != address(0));\n        require(orders[_orderId].price == 0  && orders[_orderId].fee == 0);\n\n        orders[_orderId] = Order({\n            state: State.Created,\n            price: _price,\n            fee: _fee,\n            paymentAcceptor: _paymentAcceptor,\n            originAddress: _originAddress,\n            tokenAddress: _tokenAddress\n        });\n    }\n\n    /**\n     *  securePay can be used by client if he wants to securely set client address for refund together with payment.\n     *  This function require more gas, then fallback function.\n     *  @param _orderId Identifier of the order\n     */\n    function securePay(uint _orderId)\n        external payable whenNotPaused\n        atState(_orderId, State.Created) transition(_orderId, State.Paid)\n    {\n        Order storage order = orders[_orderId];\n\n        require(msg.sender == order.paymentAcceptor);\n        require(msg.value == order.price);\n    }\n\n    /**\n     *  secureTokenPay can be used by client if he wants to securely set client address for token refund together with token payment.\n     *  This call requires that token's approve method has been called prior to this.\n     *  @param _orderId Identifier of the order\n     */\n    function secureTokenPay(uint _orderId)\n        external whenNotPaused\n        atState(_orderId, State.Created) transition(_orderId, State.Paid)\n    {\n        Order storage order = orders[_orderId];\n\n        require(msg.sender == order.paymentAcceptor);\n        require(order.tokenAddress != address(0));\n        \n        ERC20(order.tokenAddress).transferFrom(msg.sender, address(this), order.price);\n    }\n\n    /**\n     *  cancelOrder is used when client doesn't pay and order need to be cancelled.\n     *  @param _orderId Identifier of the order\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     *  @param _cancelReason Order cancel reason\n     */\n    function cancelOrder(\n        uint _orderId,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        uint _dealHash,\n        string _cancelReason\n    )\n        external onlyMonetha whenNotPaused\n        atState(_orderId, State.Created) transition(_orderId, State.Cancelled)\n    {\n        require(bytes(_cancelReason).length > 0);\n\n        Order storage order = orders[_orderId];\n\n        updateDealConditions(\n            _orderId,\n            _clientReputation,\n            _merchantReputation,\n            false,\n            _dealHash\n        );\n\n        merchantHistory.recordDealCancelReason(\n            _orderId,\n            order.originAddress,\n            _clientReputation,\n            _merchantReputation,\n            _dealHash,\n            _cancelReason\n        );\n    }\n\n    /**\n     *  refundPayment used in case order cannot be processed.\n     *  This function initiate process of funds refunding to the client.\n     *  @param _orderId Identifier of the order\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     *  @param _refundReason Order refund reason, order will be moved to State Cancelled after Client withdraws money\n     */\n    function refundPayment(\n        uint _orderId,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        uint _dealHash,\n        string _refundReason\n    )   \n        external onlyMonetha whenNotPaused\n        atState(_orderId, State.Paid) transition(_orderId, State.Refunding)\n    {\n        require(bytes(_refundReason).length > 0);\n\n        Order storage order = orders[_orderId];\n\n        updateDealConditions(\n            _orderId,\n            _clientReputation,\n            _merchantReputation,\n            false,\n            _dealHash\n        );\n\n        merchantHistory.recordDealRefundReason(\n            _orderId,\n            order.originAddress,\n            _clientReputation,\n            _merchantReputation,\n            _dealHash,\n            _refundReason\n        );\n    }\n\n    /**\n     *  withdrawRefund performs fund transfer to the client's account.\n     *  @param _orderId Identifier of the order\n     */\n    function withdrawRefund(uint _orderId) \n        external whenNotPaused\n        atState(_orderId, State.Refunding) transition(_orderId, State.Refunded) \n    {\n        Order storage order = orders[_orderId];\n        order.originAddress.transfer(order.price);\n    }\n\n    /**\n     *  withdrawTokenRefund performs token transfer to the client's account.\n     *  @param _orderId Identifier of the order\n     */\n    function withdrawTokenRefund(uint _orderId)\n        external whenNotPaused\n        atState(_orderId, State.Refunding) transition(_orderId, State.Refunded)\n    {\n        require(orders[_orderId].tokenAddress != address(0));\n        \n        ERC20(orders[_orderId].tokenAddress).transfer(orders[_orderId].originAddress, orders[_orderId].price);\n    }\n\n    /**\n     *  processPayment transfer funds/tokens to MonethaGateway and completes the order.\n     *  @param _orderId Identifier of the order\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     */\n    function processPayment(\n        uint _orderId,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        uint _dealHash\n    )\n        external onlyMonetha whenNotPaused\n        atState(_orderId, State.Paid) transition(_orderId, State.Finalized)\n    {\n        address fundAddress;\n        fundAddress = merchantWallet.merchantFundAddress();\n\n        if (orders[_orderId].tokenAddress != address(0)) {\n            if (fundAddress != address(0)) {\n                ERC20(orders[_orderId].tokenAddress).transfer(address(monethaGateway), orders[_orderId].price);\n                monethaGateway.acceptTokenPayment(fundAddress, orders[_orderId].fee, orders[_orderId].tokenAddress, orders[_orderId].price);\n            } else {\n                ERC20(orders[_orderId].tokenAddress).transfer(address(monethaGateway), orders[_orderId].price);\n                monethaGateway.acceptTokenPayment(merchantWallet, orders[_orderId].fee, orders[_orderId].tokenAddress, orders[_orderId].price);\n            }\n        } else {\n            if (fundAddress != address(0)) {\n                monethaGateway.acceptPayment.value(orders[_orderId].price)(fundAddress, orders[_orderId].fee);\n            } else {\n                monethaGateway.acceptPayment.value(orders[_orderId].price)(merchantWallet, orders[_orderId].fee);\n            }\n        }\n        \n        updateDealConditions(\n            _orderId,\n            _clientReputation,\n            _merchantReputation,\n            true,\n            _dealHash\n        );\n    }\n\n    /**\n     *  setMonethaGateway allows owner to change address of MonethaGateway.\n     *  @param _newGateway Address of new MonethaGateway contract\n     */\n    function setMonethaGateway(MonethaGateway _newGateway) public onlyOwner {\n        require(address(_newGateway) != 0x0);\n\n        monethaGateway = _newGateway;\n    }\n\n    /**\n     *  setMerchantWallet allows owner to change address of MerchantWallet.\n     *  @param _newWallet Address of new MerchantWallet contract\n     */\n    function setMerchantWallet(MerchantWallet _newWallet) public onlyOwner {\n        require(address(_newWallet) != 0x0);\n        require(_newWallet.merchantIdHash() == merchantIdHash);\n\n        merchantWallet = _newWallet;\n    }\n\n    /**\n     *  setMerchantDealsHistory allows owner to change address of MerchantDealsHistory.\n     *  @param _merchantHistory Address of new MerchantDealsHistory contract\n     */\n    function setMerchantDealsHistory(MerchantDealsHistory _merchantHistory) public onlyOwner {\n        require(address(_merchantHistory) != 0x0);\n        require(_merchantHistory.merchantIdHash() == merchantIdHash);\n\n        merchantHistory = _merchantHistory;\n    }\n\n    /**\n     *  updateDealConditions record finalized deal and updates merchant reputation\n     *  in future: update Client reputation\n     *  @param _orderId Identifier of the order\n     *  @param _clientReputation Updated reputation of the client\n     *  @param _merchantReputation Updated reputation of the merchant\n     *  @param _isSuccess Identifies whether deal was successful or not\n     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n     */\n    function updateDealConditions(\n        uint _orderId,\n        uint32 _clientReputation,\n        uint32 _merchantReputation,\n        bool _isSuccess,\n        uint _dealHash\n    )\n        internal\n    {\n        merchantHistory.recordDeal(\n            _orderId,\n            orders[_orderId].originAddress,\n            _clientReputation,\n            _merchantReputation,\n            _isSuccess,\n            _dealHash\n        );\n\n        //update parties Reputation\n        merchantWallet.setCompositeReputation(\"total\", _merchantReputation);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMonethaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merchantHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"securePay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_merchantHistory\",\"type\":\"address\"}],\"name\":\"setMerchantDealsHistory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monethaGateway\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_clientReputation\",\"type\":\"uint32\"},{\"name\":\"_merchantReputation\",\"type\":\"uint32\"},{\"name\":\"_dealHash\",\"type\":\"uint256\"},{\"name\":\"_refundReason\",\"type\":\"string\"}],\"name\":\"refundPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"secureTokenPay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_paymentAcceptor\",\"type\":\"address\"},{\"name\":\"_originAddress\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"withdrawRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"paymentAcceptor\",\"type\":\"address\"},{\"name\":\"originAddress\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_clientReputation\",\"type\":\"uint32\"},{\"name\":\"_merchantReputation\",\"type\":\"uint32\"},{\"name\":\"_dealHash\",\"type\":\"uint256\"}],\"name\":\"processPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"},{\"name\":\"_clientReputation\",\"type\":\"uint32\"},{\"name\":\"_merchantReputation\",\"type\":\"uint32\"},{\"name\":\"_dealHash\",\"type\":\"uint256\"},{\"name\":\"_cancelReason\",\"type\":\"string\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newGateway\",\"type\":\"address\"}],\"name\":\"setMonethaGateway\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merchantWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"setMonethaAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setMerchantWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_PERMILLE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merchantIdHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_merchantId\",\"type\":\"string\"},{\"name\":\"_merchantHistory\",\"type\":\"address\"},{\"name\":\"_monethaGateway\",\"type\":\"address\"},{\"name\":\"_merchantWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isMonethaAddress\",\"type\":\"bool\"}],\"name\":\"MonethaAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000cbdec1068921b3b216a0acb1097ba3023ea7c390000000000000000000000000b79a44dd77859170f33af4639f0fe1e31973b757000000000000000000000000cb124295f7a25b8b042590f3f1959912b696a8ad00000000000000000000000000000000000000000000000000000000000000194c6561746865722048616e646d6164652050726f647563747300000000000000"
}