{
  "address": "0xdf72b12a5f7f5a02e9949c475a8d90694d10f198",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Exchange",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-12\n*/\n\npragma solidity ^0.4.15;\n\n/**\n * @title Log Various Error Types\n * @author Adam Lemmon <[email protected]>\n * @dev Inherit this contract and your may now log errors easily\n * To support various error types, params, etc.\n */\ncontract LoggingErrors {\n  /**\n  * Events\n  */\n  event LogErrorString(string errorString);\n\n  /**\n  * Error cases\n  */\n\n  /**\n   * @dev Default error to simply log the error message and return\n   * @param _errorMessage The error message to log\n   * @return ALWAYS false\n   */\n  function error(string _errorMessage) internal returns(bool) {\n    LogErrorString(_errorMessage);\n    return false;\n  }\n}\n\n/**\n * @title Wallet Connector\n * @dev Connect the wallet contract to the correct Wallet Logic version\n */\ncontract WalletConnector is LoggingErrors {\n  /**\n   * Storage\n   */\n  address public owner_;\n  address public latestLogic_;\n  uint256 public latestVersion_;\n  mapping(uint256 => address) public logicVersions_;\n  uint256 public birthBlock_;\n\n  /**\n   * Events\n   */\n  event LogLogicVersionAdded(uint256 version);\n  event LogLogicVersionRemoved(uint256 version);\n\n  /**\n   * @dev Constructor to set the latest logic address\n   * @param _latestVersion Latest version of the wallet logic\n   * @param _latestLogic Latest address of the wallet logic contract\n   */\n  function WalletConnector (\n    uint256 _latestVersion,\n    address _latestLogic\n  ) public {\n    owner_ = msg.sender;\n    latestLogic_ = _latestLogic;\n    latestVersion_ = _latestVersion;\n    logicVersions_[_latestVersion] = _latestLogic;\n    birthBlock_ = block.number;\n  }\n\n  /**\n   * Add a new version of the logic contract\n   * @param _version The version to be associated with the new contract.\n   * @param _logic New logic contract.\n   * @return Success of the transaction.\n   */\n  function addLogicVersion (\n    uint256 _version,\n    address _logic\n  ) external\n    returns(bool)\n  {\n    if (msg.sender != owner_)\n      return error('msg.sender != owner, WalletConnector.addLogicVersion()');\n\n    if (logicVersions_[_version] != 0)\n      return error('Version already exists, WalletConnector.addLogicVersion()');\n\n    // Update latest if this is the latest version\n    if (_version > latestVersion_) {\n      latestLogic_ = _logic;\n      latestVersion_ = _version;\n    }\n\n    logicVersions_[_version] = _logic;\n    LogLogicVersionAdded(_version);\n\n    return true;\n  }\n\n  /**\n   * @dev Remove a version. Cannot remove the latest version.\n   * @param  _version The version to remove.\n   */\n  function removeLogicVersion(uint256 _version) external {\n    require(msg.sender == owner_);\n    require(_version != latestVersion_);\n    delete logicVersions_[_version];\n    LogLogicVersionRemoved(_version);\n  }\n\n  /**\n   * Constants\n   */\n\n  /**\n   * Called from user wallets in order to upgrade their logic.\n   * @param _version The version to upgrade to. NOTE pass in 0 to upgrade to latest.\n   * @return The address of the logic contract to upgrade to.\n   */\n  function getLogic(uint256 _version)\n    external\n    constant\n    returns(address)\n  {\n    if (_version == 0)\n      return latestLogic_;\n    else\n      return logicVersions_[_version];\n  }\n}\n\n/**\n * @title Wallet to hold and trade ERC20 tokens and ether\n * @author Adam Lemmon <[email protected]>\n * @dev User wallet to interact with the exchange.\n * all tokens and ether held in this wallet, 1 to 1 mapping to user EOAs.\n */\ncontract Wallet is LoggingErrors {\n  /**\n   * Storage\n   */\n  // Vars included in wallet logic \"lib\", the order must match between Wallet and Logic\n  address public owner_;\n  address public exchange_;\n  mapping(address => uint256) public tokenBalances_;\n\n  address public logic_; // storage location 0x3 loaded for delegatecalls so this var must remain at index 3\n  uint256 public birthBlock_;\n\n  // Address updated at deploy time\n  WalletConnector private connector_ = WalletConnector(0x03d6e7b2f48120fd57a89ff0bbd56e9ec39af21c);\n\n  /**\n   * Events\n   */\n  event LogDeposit(address token, uint256 amount, uint256 balance);\n  event LogWithdrawal(address token, uint256 amount, uint256 balance);\n\n  /**\n   * @dev Contract consturtor. Set user as owner and connector address.\n   * @param _owner The address of the user's EOA, wallets created from the exchange\n   * so must past in the owner address, msg.sender == exchange.\n   */\n  function Wallet(address _owner) public {\n    owner_ = _owner;\n    exchange_ = msg.sender;\n    logic_ = connector_.latestLogic_();\n    birthBlock_ = block.number;\n  }\n\n  /**\n   * @dev Fallback - Only enable funds to be sent from the exchange.\n   * Ensures balances will be consistent.\n   */\n  function () external payable {\n    require(msg.sender == exchange_);\n  }\n\n  /**\n  * External\n  */\n\n  /**\n   * @dev Deposit ether into this wallet, default to address 0 for consistent token lookup.\n   */\n  function depositEther()\n    external\n    payable\n  {\n    require(logic_.delegatecall(bytes4(sha3('deposit(address,uint256)')), 0, msg.value));\n  }\n\n  /**\n   * @dev Deposit any ERC20 token into this wallet.\n   * @param _token The address of the existing token contract.\n   * @param _amount The amount of tokens to deposit.\n   * @return Bool if the deposit was successful.\n   */\n  function depositERC20Token (\n    address _token,\n    uint256 _amount\n  ) external\n    returns(bool)\n  {\n    // ether\n    if (_token == 0)\n      return error('Cannot deposit ether via depositERC20, Wallet.depositERC20Token()');\n\n    require(logic_.delegatecall(bytes4(sha3('deposit(address,uint256)')), _token, _amount));\n    return true;\n  }\n\n  /**\n   * @dev The result of an order, update the balance of this wallet.\n   * @param _token The address of the token balance to update.\n   * @param _amount The amount to update the balance by.\n   * @param _subtractionFlag If true then subtract the token amount else add.\n   * @return Bool if the update was successful.\n   */\n  function updateBalance (\n    address _token,\n    uint256 _amount,\n    bool _subtractionFlag\n  ) external\n    returns(bool)\n  {\n    assembly {\n      calldatacopy(0x40, 0, calldatasize)\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\n      return(0, 32)\n      pop\n    }\n  }\n\n  /**\n   * User may update to the latest version of the exchange contract.\n   * Note that multiple versions are NOT supported at this time and therefore if a\n   * user does not wish to update they will no longer be able to use the exchange.\n   * @param _exchange The new exchange.\n   * @return Success of this transaction.\n   */\n  function updateExchange(address _exchange)\n    external\n    returns(bool)\n  {\n    if (msg.sender != owner_)\n      return error('msg.sender != owner_, Wallet.updateExchange()');\n\n    // If subsequent messages are not sent from this address all orders will fail\n    exchange_ = _exchange;\n\n    return true;\n  }\n\n  /**\n   * User may update to a new or older version of the logic contract.\n   * @param _version The versin to update to.\n   * @return Success of this transaction.\n   */\n  function updateLogic(uint256 _version)\n    external\n    returns(bool)\n  {\n    if (msg.sender != owner_)\n      return error('msg.sender != owner_, Wallet.updateLogic()');\n\n    address newVersion = connector_.getLogic(_version);\n\n    // Invalid version as defined by connector\n    if (newVersion == 0)\n      return error('Invalid version, Wallet.updateLogic()');\n\n    logic_ = newVersion;\n    return true;\n  }\n\n  /**\n   * @dev Verify an order that the Exchange has received involving this wallet.\n   * Internal checks and then authorize the exchange to move the tokens.\n   * If sending ether will transfer to the exchange to broker the trade.\n   * @param _token The address of the token contract being sold.\n   * @param _amount The amount of tokens the order is for.\n   * @param _fee The fee for the current trade.\n   * @param _feeToken The token of which the fee is to be paid in.\n   * @return If the order was verified or not.\n   */\n  function verifyOrder (\n    address _token,\n    uint256 _amount,\n    uint256 _fee,\n    address _feeToken\n  ) external\n    returns(bool)\n  {\n    assembly {\n      calldatacopy(0x40, 0, calldatasize)\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\n      return(0, 32)\n      pop\n    }\n  }\n\n  /**\n   * @dev Withdraw any token, including ether from this wallet to an EOA.\n   * @param _token The address of the token to withdraw.\n   * @param _amount The amount to withdraw.\n   * @return Success of the withdrawal.\n   */\n  function withdraw(address _token, uint256 _amount)\n    external\n    returns(bool)\n  {\n    if(msg.sender != owner_)\n      return error('msg.sender != owner, Wallet.withdraw()');\n\n    assembly {\n      calldatacopy(0x40, 0, calldatasize)\n      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\n      return(0, 32)\n      pop\n    }\n  }\n\n  /**\n   * Constants\n   */\n\n  /**\n   * @dev Get the balance for a specific token.\n   * @param _token The address of the token contract to retrieve the balance of.\n   * @return The current balance within this contract.\n   */\n  function balanceOf(address _token)\n    public\n    constant\n    returns(uint)\n  {\n    return tokenBalances_[_token];\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract Token {\n  /// @return total amount of tokens\n  function totalSupply() constant returns (uint256 supply) {}\n\n  /// @param _owner The address from which the balance will be retrieved\n  /// @return The balance\n  function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n  /// @notice send `_value` token to `_to` from `msg.sender`\n  /// @param _to The address of the recipient\n  /// @param _value The amount of token to be transferred\n  /// @return Whether the transfer was successful or not\n  function transfer(address _to, uint256 _value) returns (bool success) {}\n\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n  /// @param _from The address of the sender\n  /// @param _to The address of the recipient\n  /// @param _value The amount of token to be transferred\n  /// @return Whether the transfer was successful or not\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @param _value The amount of wei to be approved for transfer\n  /// @return Whether the approval was successful or not\n  function approve(address _spender, uint256 _value) returns (bool success) {}\n\n  /// @param _owner The address of the account owning tokens\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @return Amount of remaining tokens allowed to spent\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  uint public decimals;\n  string public name;\n}\n\n\n/**\n * @title Decentralized exchange for ether and ERC20 tokens.\n * @author Adam Lemmon <[email protected]>\n * @dev All trades brokered by this contract.\n * Orders submitted by off chain order book and this contract handles\n * verification and execution of orders.\n * All value between parties is transferred via this exchange.\n * Methods arranged by visibility; external, public, internal, private and alphabatized within.\n */\ncontract Exchange is LoggingErrors {\n\n  using SafeMath for uint256;\n\n  /**\n   * Data Structures\n   */\n  struct Order {\n    bool active_;  // True: active, False: filled or cancelled\n    address offerToken_;\n    uint256 offerTokenTotal_;\n    uint256 offerTokenRemaining_;  // Amount left to give\n    address wantToken_;\n    uint256 wantTokenTotal_;\n    uint256 wantTokenReceived_;  // Amount received, note this may exceed want total\n  }\n\n  /**\n   * Storage\n   */\n  address private orderBookAccount_;\n  address private owner_;\n  uint256 public minOrderEthAmount_;\n  uint256 public birthBlock_;\n  address public edoToken_;\n  uint256 public edoPerWei_;\n  uint256 public edoPerWeiDecimals_;\n  address public eidooWallet_;\n  mapping(bytes32 => Order) public orders_; // Map order hashes to order data struct\n  mapping(address => address) public userAccountToWallet_; // User EOA to wallet addresses\n\n  /**\n   * Events\n   */\n  event LogEdoRateSet(uint256 rate);\n  event LogOrderExecutionSuccess();\n  event LogOrderFilled(bytes32 indexed orderId, uint256 fillAmount, uint256 fillRemaining);\n  event LogUserAdded(address indexed user, address walletAddress);\n  event LogWalletDeposit(address indexed walletAddress, address token, uint256 amount, uint256 balance);\n  event LogWalletWithdrawal(address indexed walletAddress, address token, uint256 amount, uint256 balance);\n\n  /**\n   * @dev Contract constructor - CONFIRM matches contract name.  Set owner and addr of order book.\n   * @param _bookAccount The EOA address for the order book, will submit ALL orders.\n   * @param _minOrderEthAmount Minimum amount of ether that each order must contain.\n   * @param _edoToken Deployed edo token.\n   * @param _edoPerWei Rate of edo tokens per wei.\n   * @param _edoPerWeiDecimals Decimlas carried in edo rate.\n   * @param _eidooWallet Wallet to pay fees to.\n   */\n  function Exchange(\n    address _bookAccount,\n    uint256 _minOrderEthAmount,\n    address _edoToken,\n    uint256 _edoPerWei,\n    uint256 _edoPerWeiDecimals,\n    address _eidooWallet\n  ) public {\n    orderBookAccount_ = _bookAccount;\n    minOrderEthAmount_ = _minOrderEthAmount;\n    owner_ = msg.sender;\n    birthBlock_ = block.number;\n    edoToken_ = _edoToken;\n    edoPerWei_ = _edoPerWei;\n    edoPerWeiDecimals_ = _edoPerWeiDecimals;\n    eidooWallet_ = _eidooWallet;\n  }\n\n  /**\n   * @dev Fallback. wallets utilize to send ether in order to broker trade.\n   */\n  function () external payable { }\n\n  /**\n   * External\n   */\n\n  /**\n   * @dev Add a new user to the exchange, create a wallet for them.\n   * Map their account address to the wallet contract for lookup.\n   * @param _userAccount The address of the user's EOA.\n   * @return Success of the transaction, false if error condition met.\n   */\n  function addNewUser(address _userAccount)\n    external\n    returns (bool)\n  {\n    if (userAccountToWallet_[_userAccount] != address(0))\n      return error('User already exists, Exchange.addNewUser()');\n\n    // Pass the userAccount address to wallet constructor so owner is not the exchange contract\n    address userWallet = new Wallet(_userAccount);\n\n    userAccountToWallet_[_userAccount] = userWallet;\n\n    LogUserAdded(_userAccount, userWallet);\n\n    return true;\n  }\n\n  /**\n   * Execute orders in batches.\n   * @param  _token_and_EOA_Addresses Tokan and user addresses.\n   * @param  _amountsExpirationAndSalt Offer and want token amount and expiration and salt values.\n   * @param _sig_v All order signature v values.\n   * @param _sig_r_and_s All order signature r and r values.\n   * @return The success of this transaction.\n   */\n  function batchExecuteOrder(\n    address[4][] _token_and_EOA_Addresses,\n    uint256[8][] _amountsExpirationAndSalt, // Packing to save stack size\n    uint8[2][] _sig_v,\n    bytes32[4][] _sig_r_and_s\n  ) external\n    returns(bool)\n  {\n    for (uint256 i = 0; i < _amountsExpirationAndSalt.length; i++) {\n      require(executeOrder(\n        _token_and_EOA_Addresses[i],\n        _amountsExpirationAndSalt[i],\n        _sig_v[i],\n        _sig_r_and_s[i]\n      ));\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Execute an order that was submitted by the external order book server.\n   * The order book server believes it to be a match.\n   * There are components for both orders, maker and taker, 2 signatures as well.\n   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n   * @param _amountsExpirationAndSalt The amount of tokens, [makerOffer, makerWant, takerOffer, takerWant].\n   * and the block number at which this order expires\n   * and a random number to mitigate replay. [makerExpiry, makerSalt, takerExpiry, takerSalt]\n   * @param _sig_v ECDSA signature parameter v, maker 0 and taker 1.\n   * @param _sig_r_and_s ECDSA signature parameters r ans s, maker 0, 1 and taker 2, 3.\n   * @return Success of the transaction, false if error condition met.\n   * Like types grouped to eliminate stack depth error\n   */\n  function executeOrder (\n    address[4] _token_and_EOA_Addresses,\n    uint256[8] _amountsExpirationAndSalt, // Packing to save stack size\n    uint8[2] _sig_v,\n    bytes32[4] _sig_r_and_s\n  ) public\n    returns(bool)\n  {\n    // Only read wallet addresses from storage once\n    // Need one more stack slot so squashing into array\n    Wallet[2] memory wallets = [\n      Wallet(userAccountToWallet_[_token_and_EOA_Addresses[0]]), // maker\n      Wallet(userAccountToWallet_[_token_and_EOA_Addresses[2]]) // taker\n    ];\n\n    // Basic pre-conditions, return if any input data is invalid\n    if(!__executeOrderInputIsValid__(\n      _token_and_EOA_Addresses,\n      _amountsExpirationAndSalt,\n      wallets[0],\n      wallets[1]\n    ))\n      return error('Input is invalid, Exchange.executeOrder()');\n\n    // Verify Maker and Taker signatures\n    bytes32 makerOrderHash;\n    bytes32 takerOrderHash;\n    (makerOrderHash, takerOrderHash) = __generateOrderHashes__(_token_and_EOA_Addresses, _amountsExpirationAndSalt);\n\n    if (!__signatureIsValid__(\n      _token_and_EOA_Addresses[0],\n      makerOrderHash,\n      _sig_v[0],\n      _sig_r_and_s[0],\n      _sig_r_and_s[1]\n    ))\n      return error('Maker signature is invalid, Exchange.executeOrder()');\n\n    if (!__signatureIsValid__(\n      _token_and_EOA_Addresses[2],\n      takerOrderHash,\n      _sig_v[1],\n      _sig_r_and_s[2],\n      _sig_r_and_s[3]\n    ))\n      return error('Taker signature is invalid, Exchange.executeOrder()');\n\n    // Exchange Order Verification and matching.\n    Order memory makerOrder = orders_[makerOrderHash];\n    Order memory takerOrder = orders_[takerOrderHash];\n\n    if (makerOrder.wantTokenTotal_ == 0) {  // Check for existence\n      makerOrder.active_ = true;\n      makerOrder.offerToken_ = _token_and_EOA_Addresses[1];\n      makerOrder.offerTokenTotal_ = _amountsExpirationAndSalt[0];\n      makerOrder.offerTokenRemaining_ = _amountsExpirationAndSalt[0]; // Amount to give\n      makerOrder.wantToken_ = _token_and_EOA_Addresses[3];\n      makerOrder.wantTokenTotal_ = _amountsExpirationAndSalt[1];\n      makerOrder.wantTokenReceived_ = 0; // Amount received\n    }\n\n    if (takerOrder.wantTokenTotal_ == 0) {  // Check for existence\n      takerOrder.active_ = true;\n      takerOrder.offerToken_ = _token_and_EOA_Addresses[3];\n      takerOrder.offerTokenTotal_ = _amountsExpirationAndSalt[2];\n      takerOrder.offerTokenRemaining_ = _amountsExpirationAndSalt[2];  // Amount to give\n      takerOrder.wantToken_ = _token_and_EOA_Addresses[1];\n      takerOrder.wantTokenTotal_ = _amountsExpirationAndSalt[3];\n      takerOrder.wantTokenReceived_ = 0; // Amount received\n    }\n\n    if (!__ordersMatch_and_AreVaild__(makerOrder, takerOrder))\n      return error('Orders do not match, Exchange.executeOrder()');\n\n    // Trade amounts\n    uint256 toTakerAmount;\n    uint256 toMakerAmount;\n    (toTakerAmount, toMakerAmount) = __getTradeAmounts__(makerOrder, takerOrder);\n\n    // TODO consider removing. Can this condition be met?\n    if (toTakerAmount < 1 || toMakerAmount < 1)\n      return error('Token amount < 1, price ratio is invalid! Token value < 1, Exchange.executeOrder()');\n\n    // Taker is offering edo tokens so ensure sufficient balance in order to offer edo and pay fee in edo\n    if (\n        takerOrder.offerToken_ == edoToken_ &&\n        Token(edoToken_).balanceOf(wallets[1]) < __calculateFee__(makerOrder, toTakerAmount, toMakerAmount).add(toMakerAmount)\n      ) {\n        return error('Taker has an insufficient EDO token balance to cover the fee AND the offer, Exchange.executeOrder()');\n    // Taker has sufficent EDO token balance to pay the fee\n    } else if (Token(edoToken_).balanceOf(wallets[1]) < __calculateFee__(makerOrder, toTakerAmount, toMakerAmount))\n      return error('Taker has an insufficient EDO token balance to cover the fee, Exchange.executeOrder()');\n\n    // Wallet Order Verification, reach out to the maker and taker wallets.\n    if (!__ordersVerifiedByWallets__(\n        _token_and_EOA_Addresses,\n        toMakerAmount,\n        toTakerAmount,\n        wallets[0],\n        wallets[1],\n        __calculateFee__(makerOrder, toTakerAmount, toMakerAmount)\n      ))\n      return error('Order could not be verified by wallets, Exchange.executeOrder()');\n\n    // Order Execution, Order Fully Verified by this point, time to execute!\n    // Local order structs\n    __updateOrders__(makerOrder, takerOrder, toTakerAmount, toMakerAmount);\n\n    // Write to storage then external calls\n    //  Update orders active flag if filled\n    if (makerOrder.offerTokenRemaining_ == 0)\n      makerOrder.active_ = false;\n\n    if (takerOrder.offerTokenRemaining_ == 0)\n      takerOrder.active_ = false;\n\n    // Finally write orders to storage\n    orders_[makerOrderHash] = makerOrder;\n    orders_[takerOrderHash] = takerOrder;\n\n    // Transfer the external value, ether <> tokens\n    require(\n      __executeTokenTransfer__(\n        _token_and_EOA_Addresses,\n        toTakerAmount,\n        toMakerAmount,\n        __calculateFee__(makerOrder, toTakerAmount, toMakerAmount),\n        wallets[0],\n        wallets[1]\n      )\n    );\n\n    // Log the order id(hash), amount of offer given, amount of offer remaining\n    LogOrderFilled(makerOrderHash, toTakerAmount, makerOrder.offerTokenRemaining_);\n    LogOrderFilled(takerOrderHash, toMakerAmount, takerOrder.offerTokenRemaining_);\n\n    LogOrderExecutionSuccess();\n\n    return true;\n  }\n\n  /**\n   * @dev Set the rate of wei per edo token in or to calculate edo fee\n   * @param _edoPerWei Rate of edo tokens per wei.\n   * @return Success of the transaction.\n   */\n  function setEdoRate(\n    uint256 _edoPerWei\n  ) external\n    returns(bool)\n  {\n    if (msg.sender != owner_)\n      return error('msg.sender != owner, Exchange.setEdoRate()');\n\n    edoPerWei_ = _edoPerWei;\n\n    LogEdoRateSet(edoPerWei_);\n\n    return true;\n  }\n\n  /**\n   * @dev Set the wallet for fees to be paid to.\n   * @param _eidooWallet Wallet to pay fees to.\n   * @return Success of the transaction.\n   */\n  function setEidooWallet(\n    address _eidooWallet\n  ) external\n    returns(bool)\n  {\n    if (msg.sender != owner_)\n      return error('msg.sender != owner, Exchange.setEidooWallet()');\n\n    eidooWallet_ = _eidooWallet;\n\n    return true;\n  }\n\n  /**\n   * @dev Set the minimum amount of ether required per order.\n   * @param _minOrderEthAmount Min amount of ether required per order.\n   * @return Success of the transaction.\n   */\n  function setMinOrderEthAmount (\n    uint256 _minOrderEthAmount\n  ) external\n    returns(bool)\n  {\n    if (msg.sender != owner_)\n      return error('msg.sender != owner, Exchange.setMinOrderEtherAmount()');\n\n    minOrderEthAmount_ = _minOrderEthAmount;\n\n    return true;\n  }\n\n  /**\n   * @dev Set a new order book account.\n   * @param _account The new order book account.\n   */\n  function setOrderBookAcount (\n    address _account\n  ) external\n    returns(bool)\n  {\n    if (msg.sender != owner_)\n      return error('msg.sender != owner, Exchange.setOrderBookAcount()');\n\n    orderBookAccount_ = _account;\n    return true;\n  }\n\n  /*\n   Methods to catch events from external contracts, user wallets primarily\n   */\n\n  /**\n   * @dev Simply log the event to track wallet interaction off-chain\n   * @param _token The address of the token that was deposited.\n   * @param _amount The amount of the token that was deposited.\n   * @param _walletBalance The updated balance of the wallet after deposit.\n   */\n  function walletDeposit(\n    address _token,\n    uint256 _amount,\n    uint256 _walletBalance\n  ) external\n  {\n    LogWalletDeposit(msg.sender, _token, _amount, _walletBalance);\n  }\n\n  /**\n   * @dev Simply log the event to track wallet interaction off-chain\n   * @param _token The address of the token that was deposited.\n   * @param _amount The amount of the token that was deposited.\n   * @param _walletBalance The updated balance of the wallet after deposit.\n   */\n  function walletWithdrawal(\n    address _token,\n    uint256 _amount,\n    uint256 _walletBalance\n  ) external\n  {\n    LogWalletWithdrawal(msg.sender, _token, _amount, _walletBalance);\n  }\n\n  /**\n   * Private\n   */\n\n  /**\n   * Calculate the fee for the given trade. Calculated as the set % of the wei amount\n   * converted into EDO tokens using the manually set conversion ratio.\n   * @param _makerOrder The maker order object.\n   * @param _toTaker The amount of tokens going to the taker.\n   * @param _toMaker The amount of tokens going to the maker.\n   * @return The total fee to be paid in EDO tokens.\n   */\n  function __calculateFee__(\n    Order _makerOrder,\n    uint256 _toTaker,\n    uint256 _toMaker\n  ) private\n    constant\n    returns(uint256)\n  {\n    // weiAmount * (fee %) * (EDO/Wei) / (decimals in edo/wei) / (decimals in percentage)\n    if (_makerOrder.offerToken_ == address(0)) {\n      return _toTaker.mul(edoPerWei_).div(10**edoPerWeiDecimals_);\n    } else {\n      return _toMaker.mul(edoPerWei_).div(10**edoPerWeiDecimals_);\n    }\n  }\n\n  /**\n   * @dev Verify the input to order execution is valid.\n   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n   * @param _amountsExpirationAndSalt The amount of tokens, [makerOffer, makerWant, takerOffer, takerWant].\n   * as well as The block number at which this order expires, maker[4] and taker[6].\n   * @return Success if all checks pass.\n   */\n  function __executeOrderInputIsValid__(\n    address[4] _token_and_EOA_Addresses,\n    uint256[8] _amountsExpirationAndSalt,\n    address _makerWallet,\n    address _takerWallet\n  ) private\n    constant\n    returns(bool)\n  {\n    if (msg.sender != orderBookAccount_)\n      return error('msg.sender != orderBookAccount, Exchange.__executeOrderInputIsValid__()');\n\n    if (block.number > _amountsExpirationAndSalt[4])\n      return error('Maker order has expired, Exchange.__executeOrderInputIsValid__()');\n\n    if (block.number > _amountsExpirationAndSalt[6])\n      return error('Taker order has expired, Exchange.__executeOrderInputIsValid__()');\n\n    // Wallets\n    if (_makerWallet == address(0))\n      return error('Maker wallet does not exist, Exchange.__executeOrderInputIsValid__()');\n\n    if (_takerWallet == address(0))\n      return error('Taker wallet does not exist, Exchange.__executeOrderInputIsValid__()');\n\n    // Tokens, addresses and amounts, ether exists\n    if (_token_and_EOA_Addresses[1] != address(0) && _token_and_EOA_Addresses[3] != address(0))\n      return error('Ether omitted! Is not offered by either the Taker or Maker, Exchange.__executeOrderInputIsValid__()');\n\n    if (_token_and_EOA_Addresses[1] == address(0) && _token_and_EOA_Addresses[3] == address(0))\n      return error('Taker and Maker offer token are both ether, Exchange.__executeOrderInputIsValid__()');\n\n    if (\n        _amountsExpirationAndSalt[0] == 0 ||\n        _amountsExpirationAndSalt[1] == 0 ||\n        _amountsExpirationAndSalt[2] == 0 ||\n        _amountsExpirationAndSalt[3] == 0\n      )\n      return error('May not execute an order where token amount == 0, Exchange.__executeOrderInputIsValid__()');\n\n    // Confirm order ether amount >= min amount\n    // Maker\n    uint256 minOrderEthAmount = minOrderEthAmount_; // Single storage read\n    if (_token_and_EOA_Addresses[1] == 0 && _amountsExpirationAndSalt[0] < minOrderEthAmount)\n      return error('Maker order does not meet the minOrderEthAmount_ of ether, Exchange.__executeOrderInputIsValid__()');\n\n    // Taker\n    if (_token_and_EOA_Addresses[3] == 0 && _amountsExpirationAndSalt[2] < minOrderEthAmount)\n      return error('Taker order does not meet the minOrderEthAmount_ of ether, Exchange.__executeOrderInputIsValid__()');\n\n    return true;\n  }\n\n  /**\n   * @dev Execute the external transfer of tokens.\n   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n   * @param _toTakerAmount The amount of tokens to transfer to the taker.\n   * @param _toMakerAmount The amount of tokens to transfer to the maker.\n   * @return Success if both wallets verify the order.\n   */\n  function __executeTokenTransfer__(\n    address[4] _token_and_EOA_Addresses,\n    uint256 _toTakerAmount,\n    uint256 _toMakerAmount,\n    uint256 _fee,\n    Wallet _makerWallet,\n    Wallet _takerWallet\n  ) private\n    returns (bool)\n  {\n    // Wallet mapping balances\n    address makerOfferToken = _token_and_EOA_Addresses[1];\n    address takerOfferToken = _token_and_EOA_Addresses[3];\n\n    // Taker to pay fee before trading\n    require(_takerWallet.updateBalance(edoToken_, _fee, true));  // Subtraction flag\n    require(Token(edoToken_).transferFrom(_takerWallet, eidooWallet_, _fee));\n\n    // Move the toTakerAmount from the maker to the taker\n    require(_makerWallet.updateBalance(makerOfferToken, _toTakerAmount, true));  // Subtraction flag\n      /*return error('Unable to subtract maker token from maker wallet, Exchange.__executeTokenTransfer__()');*/\n\n    require(_takerWallet.updateBalance(makerOfferToken, _toTakerAmount, false));\n      /*return error('Unable to add maker token to taker wallet, Exchange.__executeTokenTransfer__()');*/\n\n    // Move the toMakerAmount from the taker to the maker\n    require(_takerWallet.updateBalance(takerOfferToken, _toMakerAmount, true));  // Subtraction flag\n      /*return error('Unable to subtract taker token from taker wallet, Exchange.__executeTokenTransfer__()');*/\n\n    require(_makerWallet.updateBalance(takerOfferToken, _toMakerAmount, false));\n      /*return error('Unable to add taker token to maker wallet, Exchange.__executeTokenTransfer__()');*/\n\n    // Contract ether balances and token contract balances\n    // Ether to the taker and tokens to the maker\n    if (makerOfferToken == address(0)) {\n      _takerWallet.transfer(_toTakerAmount);\n      require(\n        Token(takerOfferToken).transferFrom(_takerWallet, _makerWallet, _toMakerAmount)\n      );\n      assert(\n        __tokenAndWalletBalancesMatch__(_makerWallet, _takerWallet, takerOfferToken)\n      );\n\n    // Ether to the maker and tokens to the taker\n    } else if (takerOfferToken == address(0)) {\n      _makerWallet.transfer(_toMakerAmount);\n      require(\n        Token(makerOfferToken).transferFrom(_makerWallet, _takerWallet, _toTakerAmount)\n      );\n      assert(\n        __tokenAndWalletBalancesMatch__(_makerWallet, _takerWallet, makerOfferToken)\n      );\n\n    // Something went wrong one had to have been ether\n    } else revert();\n\n    return true;\n  }\n\n  /**\n   * @dev compute the log10 of a given number, takes the floor, ie. 2.5 = 2\n   * @param _number The number to compute the log 10 of.\n   * @return The floored log 10.\n   */\n  function __flooredLog10__(uint _number)\n    public\n    constant\n    returns (uint256)\n  {\n    uint unit = 0;\n    while (_number / (10**unit) >= 10)\n      unit++;\n    return unit;\n  }\n\n  /**\n   * @dev Calculates Keccak-256 hash of order with specified parameters.\n   * @param _token_and_EOA_Addresses The addresses of the order, [makerEOA, makerOfferToken, makerWantToken].\n   * @param _amountsExpirationAndSalt The amount of tokens as well as\n   * the block number at which this order expires and random salt number.\n   * @return Keccak-256 hash of each order.\n   */\n  function __generateOrderHashes__(\n    address[4] _token_and_EOA_Addresses,\n    uint256[8] _amountsExpirationAndSalt\n  ) private\n    constant\n    returns (bytes32, bytes32)\n  {\n    bytes32 makerOrderHash = keccak256(\n      address(this),\n      _token_and_EOA_Addresses[0], // _makerEOA\n      _token_and_EOA_Addresses[1], // offerToken\n      _amountsExpirationAndSalt[0],  // offerTokenAmount\n      _token_and_EOA_Addresses[3], // wantToken\n      _amountsExpirationAndSalt[1],  // wantTokenAmount\n      _amountsExpirationAndSalt[4], // expiry\n      _amountsExpirationAndSalt[5] // salt\n    );\n\n\n    bytes32 takerOrderHash = keccak256(\n      address(this),\n      _token_and_EOA_Addresses[2], // _makerEOA\n      _token_and_EOA_Addresses[3], // offerToken\n      _amountsExpirationAndSalt[2],  // offerTokenAmount\n      _token_and_EOA_Addresses[1], // wantToken\n      _amountsExpirationAndSalt[3],  // wantTokenAmount\n      _amountsExpirationAndSalt[6], // expiry\n      _amountsExpirationAndSalt[7] // salt\n    );\n\n    return (makerOrderHash, takerOrderHash);\n  }\n\n  /**\n   * @dev Returns the price ratio for this order.\n   * The ratio is calculated with the largest value as the numerator, this aids\n   * to significantly reduce rounding errors.\n   * @param _makerOrder The maker order data structure.\n   * @return The ratio to `_decimals` decimal places.\n   */\n  function __getOrderPriceRatio__(Order _makerOrder, uint256 _decimals)\n    private\n    constant\n    returns (uint256 orderPriceRatio)\n  {\n    if (_makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\n      orderPriceRatio = _makerOrder.offerTokenTotal_.mul(10**_decimals).div(_makerOrder.wantTokenTotal_);\n    } else {\n      orderPriceRatio = _makerOrder.wantTokenTotal_.mul(10**_decimals).div(_makerOrder.offerTokenTotal_);\n    }\n  }\n\n  /**\n   * @dev Compute the tradeable amounts of the two verified orders.\n   * Token amount is the min remaining between want and offer of the two orders that isn't ether.\n   * Ether amount is then: etherAmount = tokenAmount * priceRatio, as ratio = eth / token.\n   * @param _makerOrder The maker order data structure.\n   * @param _takerOrder The taker order data structure.\n   * @return The amount moving from makerOfferRemaining to takerWantRemaining and vice versa.\n   * TODO: consider rounding errors, etc\n   */\n  function __getTradeAmounts__(\n    Order _makerOrder,\n    Order _takerOrder\n  ) private\n    constant\n    returns (uint256 toTakerAmount, uint256 toMakerAmount)\n  {\n    bool ratioIsWeiPerTok = __ratioIsWeiPerTok__(_makerOrder);\n    uint256 decimals = __flooredLog10__(__max__(_makerOrder.offerTokenTotal_, _makerOrder.wantTokenTotal_)) + 1;\n    uint256 priceRatio = __getOrderPriceRatio__(_makerOrder, decimals);\n\n    // Amount left for order to receive\n    uint256 makerAmountLeftToReceive = _makerOrder.wantTokenTotal_.sub(_makerOrder.wantTokenReceived_);\n    uint256 takerAmountLeftToReceive = _takerOrder.wantTokenTotal_.sub(_takerOrder.wantTokenReceived_);\n\n    // wei/tok and taker receiving wei or tok/wei and taker receiving tok\n    if (\n        ratioIsWeiPerTok && _takerOrder.wantToken_ == address(0) ||\n        !ratioIsWeiPerTok && _takerOrder.wantToken_ != address(0)\n    ) {\n      // In the case that the maker is offering more than the taker wants for the same quantity being offered\n      // For example: maker offer 20 wei for 10 tokens but taker offers 10 tokens for 10 wei\n      // Taker receives 20 wei for the 10 tokens, both orders filled\n      if (\n        _makerOrder.offerTokenRemaining_ > takerAmountLeftToReceive &&\n        makerAmountLeftToReceive <= _takerOrder.offerTokenRemaining_\n      ) {\n        toTakerAmount = __max__(_makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\n      } else {\n        toTakerAmount = __min__(_makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\n      }\n\n      toMakerAmount = toTakerAmount.mul(10**decimals).div(priceRatio);\n\n    // wei/tok and maker receiving wei or tok/wei and maker receiving tok\n    } else {\n      toMakerAmount = __min__(_takerOrder.offerTokenRemaining_, makerAmountLeftToReceive);\n      toTakerAmount = toMakerAmount.mul(10**decimals).div(priceRatio);\n    }\n  }\n\n  /**\n   * @dev Return the maximum of two uints\n   * @param _a Uint 1\n   * @param _b Uint 2\n   * @return The grater value or a if equal\n   */\n  function __max__(uint256 _a, uint256 _b)\n    private\n    constant\n    returns (uint256)\n  {\n    return _a < _b ? _b : _a;\n  }\n\n  /**\n   * @dev Return the minimum of two uints\n   * @param _a Uint 1\n   * @param _b Uint 2\n   * @return The smallest value or b if equal\n   */\n  function __min__(uint256 _a, uint256 _b)\n    private\n    constant\n    returns (uint256)\n  {\n    return _a < _b ? _a : _b;\n  }\n\n  /**\n   * @dev Define if the ratio to be used is wei/tok to tok/wei. Largest uint will\n   * always act as the numerator.\n   * @param _makerOrder The maker order object.\n   * @return If the ratio is wei/tok or not.\n   */\n  function __ratioIsWeiPerTok__(Order _makerOrder)\n    private\n    constant\n    returns (bool)\n  {\n    bool offerIsWei = _makerOrder.offerToken_ == address(0) ? true : false;\n\n    // wei/tok\n    if (offerIsWei && _makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\n      return true;\n\n    } else if (!offerIsWei && _makerOrder.wantTokenTotal_ >= _makerOrder.offerTokenTotal_) {\n      return true;\n\n    // tok/wei. otherwise wanting wei && offer > want, OR offer wei && want > offer\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Confirm that the orders do match and are valid.\n   * @param _makerOrder The maker order data structure.\n   * @param _takerOrder The taker order data structure.\n   * @return Bool if the orders passes all checks.\n   */\n  function __ordersMatch_and_AreVaild__(\n    Order _makerOrder,\n    Order _takerOrder\n  ) private\n    constant\n    returns (bool)\n  {\n    // Orders still active\n    if (!_makerOrder.active_)\n      return error('Maker order is inactive, Exchange.__ordersMatch_and_AreVaild__()');\n\n    if (!_takerOrder.active_)\n      return error('Taker order is inactive, Exchange.__ordersMatch_and_AreVaild__()');\n\n    // Confirm tokens match\n    // NOTE potentially omit as matching handled upstream?\n    if (_makerOrder.wantToken_ != _takerOrder.offerToken_)\n      return error('Maker wanted token does not match taker offer token, Exchange.__ordersMatch_and_AreVaild__()');\n\n    if (_makerOrder.offerToken_ != _takerOrder.wantToken_)\n      return error('Maker offer token does not match taker wanted token, Exchange.__ordersMatch_and_AreVaild__()');\n\n    // Price Ratios, to x decimal places hence * decimals, dependent on the size of the denominator.\n    // Ratios are relative to eth, amount of ether for a single token, ie. ETH / GNO == 0.2 Ether per 1 Gnosis\n    uint256 orderPrice;  // The price the maker is willing to accept\n    uint256 offeredPrice; // The offer the taker has given\n    uint256 decimals = _makerOrder.offerToken_ == address(0) ? __flooredLog10__(_makerOrder.wantTokenTotal_) : __flooredLog10__(_makerOrder.offerTokenTotal_);\n\n    // Ratio = larger amount / smaller amount\n    if (_makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\n      orderPrice = _makerOrder.offerTokenTotal_.mul(10**decimals).div(_makerOrder.wantTokenTotal_);\n      offeredPrice = _takerOrder.wantTokenTotal_.mul(10**decimals).div(_takerOrder.offerTokenTotal_);\n\n      // ie. Maker is offering 10 ETH for 100 GNO but taker is offering 100 GNO for 20 ETH, no match!\n      // The taker wants more ether than the maker is offering.\n      if (orderPrice < offeredPrice)\n        return error('Taker price is greater than maker price, Exchange.__ordersMatch_and_AreVaild__()');\n\n    } else {\n      orderPrice = _makerOrder.wantTokenTotal_.mul(10**decimals).div(_makerOrder.offerTokenTotal_);\n      offeredPrice = _takerOrder.offerTokenTotal_.mul(10**decimals).div(_takerOrder.wantTokenTotal_);\n\n      // ie. Maker is offering 100 GNO for 10 ETH but taker is offering 5 ETH for 100 GNO, no match!\n      // The taker is not offering enough ether for the maker\n      if (orderPrice > offeredPrice)\n        return error('Taker price is less than maker price, Exchange.__ordersMatch_and_AreVaild__()');\n\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Ask each wallet to verify this order.\n   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n   * @param _toMakerAmount The amount of tokens to be sent to the maker.\n   * @param _toTakerAmount The amount of tokens to be sent to the taker.\n   * @param _makerWallet The maker's wallet contract.\n   * @param _takerWallet The taker's wallet contract.\n   * @param _fee The fee to be paid for this trade, paid in full by taker.\n   * @return Success if both wallets verify the order.\n   */\n  function __ordersVerifiedByWallets__(\n    address[4] _token_and_EOA_Addresses,\n    uint256 _toMakerAmount,\n    uint256 _toTakerAmount,\n    Wallet _makerWallet,\n    Wallet _takerWallet,\n    uint256 _fee\n  ) private\n    constant\n    returns (bool)\n  {\n    // Have the transaction verified by both maker and taker wallets\n    // confirm sufficient balance to transfer, offerToken and offerTokenAmount\n    if(!_makerWallet.verifyOrder(_token_and_EOA_Addresses[1], _toTakerAmount, 0, 0))\n      return error('Maker wallet could not verify the order, Exchange.__ordersVerifiedByWallets__()');\n\n    if(!_takerWallet.verifyOrder(_token_and_EOA_Addresses[3], _toMakerAmount, _fee, edoToken_))\n      return error('Taker wallet could not verify the order, Exchange.__ordersVerifiedByWallets__()');\n\n    return true;\n  }\n\n  /**\n   * @dev On chain verification of an ECDSA ethereum signature.\n   * @param _signer The EOA address of the account that supposedly signed the message.\n   * @param _orderHash The on-chain generated hash for the order.\n   * @param _v ECDSA signature parameter v.\n   * @param _r ECDSA signature parameter r.\n   * @param _s ECDSA signature parameter s.\n   * @return Bool if the signature is valid or not.\n   */\n  function __signatureIsValid__(\n    address _signer,\n    bytes32 _orderHash,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) private\n    constant\n    returns (bool)\n  {\n    address recoveredAddr = ecrecover(\n      keccak256('\\x19Ethereum Signed Message:\\n32', _orderHash),\n      _v, _r, _s\n    );\n\n    return recoveredAddr == _signer;\n  }\n\n  /**\n   * @dev Confirm wallet local balances and token balances match.\n   * @param _makerWallet  Maker wallet address.\n   * @param _takerWallet  Taker wallet address.\n   * @param _token  Token address to confirm balances match.\n   * @return If the balances do match.\n   */\n  function __tokenAndWalletBalancesMatch__(\n    address _makerWallet,\n    address _takerWallet,\n    address _token\n  ) private\n    constant\n    returns(bool)\n  {\n    if (Token(_token).balanceOf(_makerWallet) != Wallet(_makerWallet).balanceOf(_token))\n      return false;\n\n    if (Token(_token).balanceOf(_takerWallet) != Wallet(_takerWallet).balanceOf(_token))\n      return false;\n\n    return true;\n  }\n\n  /**\n   * @dev Update the order structs.\n   * @param _makerOrder The maker order data structure.\n   * @param _takerOrder The taker order data structure.\n   * @param _toTakerAmount The amount of tokens to be moved to the taker.\n   * @param _toTakerAmount The amount of tokens to be moved to the maker.\n   * @return Success if the update succeeds.\n   */\n  function __updateOrders__(\n    Order _makerOrder,\n    Order _takerOrder,\n    uint256 _toTakerAmount,\n    uint256 _toMakerAmount\n  ) private\n  {\n    // taker => maker\n    _makerOrder.wantTokenReceived_ = _makerOrder.wantTokenReceived_.add(_toMakerAmount);\n    _takerOrder.offerTokenRemaining_ = _takerOrder.offerTokenRemaining_.sub(_toMakerAmount);\n\n    // maker => taker\n    _takerOrder.wantTokenReceived_ = _takerOrder.wantTokenReceived_.add(_toTakerAmount);\n    _makerOrder.offerTokenRemaining_ = _makerOrder.offerTokenRemaining_.sub(_toTakerAmount);\n  }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_eidooWallet\",\"type\":\"address\"}],\"name\":\"setEidooWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"edoPerWeiDecimals_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_and_EOA_Addresses\",\"type\":\"address[4][]\"},{\"name\":\"_amountsExpirationAndSalt\",\"type\":\"uint256[8][]\"},{\"name\":\"_sig_v\",\"type\":\"uint8[2][]\"},{\"name\":\"_sig_r_and_s\",\"type\":\"bytes32[4][]\"}],\"name\":\"batchExecuteOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setOrderBookAcount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_walletBalance\",\"type\":\"uint256\"}],\"name\":\"walletWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"edoToken_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"birthBlock_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders_\",\"outputs\":[{\"name\":\"active_\",\"type\":\"bool\"},{\"name\":\"offerToken_\",\"type\":\"address\"},{\"name\":\"offerTokenTotal_\",\"type\":\"uint256\"},{\"name\":\"offerTokenRemaining_\",\"type\":\"uint256\"},{\"name\":\"wantToken_\",\"type\":\"address\"},{\"name\":\"wantTokenTotal_\",\"type\":\"uint256\"},{\"name\":\"wantTokenReceived_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"__flooredLog10__\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_edoPerWei\",\"type\":\"uint256\"}],\"name\":\"setEdoRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAccountToWallet_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eidooWallet_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAccount\",\"type\":\"address\"}],\"name\":\"addNewUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_and_EOA_Addresses\",\"type\":\"address[4]\"},{\"name\":\"_amountsExpirationAndSalt\",\"type\":\"uint256[8]\"},{\"name\":\"_sig_v\",\"type\":\"uint8[2]\"},{\"name\":\"_sig_r_and_s\",\"type\":\"bytes32[4]\"}],\"name\":\"executeOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_walletBalance\",\"type\":\"uint256\"}],\"name\":\"walletDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minOrderEthAmount\",\"type\":\"uint256\"}],\"name\":\"setMinOrderEthAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minOrderEthAmount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"edoPerWei_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bookAccount\",\"type\":\"address\"},{\"name\":\"_minOrderEthAmount\",\"type\":\"uint256\"},{\"name\":\"_edoToken\",\"type\":\"address\"},{\"name\":\"_edoPerWei\",\"type\":\"uint256\"},{\"name\":\"_edoPerWeiDecimals\",\"type\":\"uint256\"},{\"name\":\"_eidooWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LogEdoRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogOrderExecutionSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"fillAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fillRemaining\",\"type\":\"uint256\"}],\"name\":\"LogOrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"LogUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogWalletDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogWalletWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"errorString\",\"type\":\"string\"}],\"name\":\"LogErrorString\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405160c080613e1c83398101604090815281516020830151918301516060840151608085015160a09095015160008054600160a060020a03958616600160a060020a0319918216179091556002959095556001805486163317905543600355600480549385169386169390931790925560055560069390935560078054919093169116179055613d75806100a76000396000f300608060405260043610620000f55763ffffffff60e060020a6000350416631d2627bb8114620000f757806332b28b95146200012f5780634983542e14620001595780634a8ef4bd14620001a057806357b394bf14620001c457806363a3d38314620001ee57806369820a8014620002225780636e3706f4146200023a57806384f1b0b8146200029f5780638e5919b614620002ba578063b5f9b5cc14620002d5578063bd09f11714620002f9578063c1d5e84f1462000311578063c825ec971462000335578063cfbe2cb314620003ea578063e7cf514d1462000414578063ef3cbc39146200042f578063f673745a1462000447575b005b3480156200010457600080fd5b506200011b600160a060020a03600435166200045f565b604080519115158252519081900360200190f35b3480156200013c57600080fd5b506200014762000504565b60408051918252519081900360200190f35b3480156200016657600080fd5b506200011b60246004803582810192908201359181358083019290820135916044358083019290820135916064359182019101356200050a565b348015620001ad57600080fd5b506200011b600160a060020a036004351662000625565b348015620001d157600080fd5b50620000f5600160a060020a0360043516602435604435620006c3565b348015620001fb57600080fd5b506200020662000714565b60408051600160a060020a039092168252519081900360200190f35b3480156200022f57600080fd5b506200014762000723565b3480156200024757600080fd5b506200025560043562000729565b604080519715158852600160a060020a0396871660208901528781019590955260608701939093529316608085015260a084019290925260c0830191909152519081900360e00190f35b348015620002ac57600080fd5b506200014760043562000771565b348015620002c757600080fd5b506200011b600435620007a0565b348015620002e257600080fd5b5062000206600160a060020a03600435166200084c565b3480156200030657600080fd5b506200020662000867565b3480156200031e57600080fd5b506200011b600160a060020a036004351662000876565b3480156200034257600080fd5b506040805160808181019092526200011b913691600491608491908390819083908290808284375050604080516101008181019092529497969581810195945092506008915083908390808284375050604080518082018252949796958181019594509250600291508390839080828437505060408051608081810190925294979695818101959450925060049150839083908082843750939650620009c195505050505050565b348015620003f757600080fd5b50620000f5600160a060020a036004351660243560443562001538565b3480156200042157600080fd5b506200011b60043562001589565b3480156200043c57600080fd5b5062000147620015fe565b3480156200045457600080fd5b506200014762001604565b600154600090600160a060020a03163314620004d357620004cb606060405190810160405280602e815260200160008051602062003d2a83398151915281526020017f744569646f6f57616c6c657428290000000000000000000000000000000000008152506200160a565b9050620004ff565b506007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905560015b919050565b60065481565b6000805b868110156200061557620006008a8a838181106200052857fe5b9050608002016004806020026040519081016040528092919082600460200280828437508d93508c9250869150508181106200056057fe5b905061010002016008806020026040519081016040528092919082600860200280828437508c93508b9250879150508181106200059957fe5b9050604002016002806020026040519081016040528092919082600260200280828437508b93508a925088915050818110620005d157fe5b905060800201600480602002604051908101604052809291908260046020028082843750620009c19350505050565b15156200060c57600080fd5b6001016200050e565b5060019998505050505050505050565b600154600090600160a060020a031633146200069157620004cb6060604051908101604052806032815260200160008051602062003d2a83398151915281526020017f744f72646572426f6f6b41636f756e74282900000000000000000000000000008152506200160a565b5060008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60408051600160a060020a038516815260208101849052808201839052905133917fe8d885fd2147a6ac7d644cd3c3a5f2413dbd8e515b61702b1cc1551188176b3c919081900360600190a2505050565b600454600160a060020a031681565b60035481565b60086020526000908152604090208054600182015460028301546003840154600485015460059095015460ff851695610100909504600160a060020a03908116959216919087565b6000805b600a81600a0a848115156200078657fe5b0410620007965760010162000775565b8091505b50919050565b600154600090600160a060020a031633146200080c57620004cb606060405190810160405280602a815260200160008051602062003d2a83398151915281526020017f7445646f526174652829000000000000000000000000000000000000000000008152506200160a565b60058290556040805183815290517f70d645acf6601ac71e11cc9eb4a144e5cbd8f3a9aaa6ce5a83bb1d74cba182359181900360200190a1506001919050565b600960205260009081526040902054600160a060020a031681565b600754600160a060020a031681565b600160a060020a038181166000908152600960205260408120549091829116156200090a5762000902606060405190810160405280602a81526020017f5573657220616c7265616479206578697374732c2045786368616e67652e616481526020017f644e6577557365722829000000000000000000000000000000000000000000008152506200160a565b91506200079a565b8262000915620032fc565b600160a060020a03909116815260405190819003602001906000f08015801562000943573d6000803e3d6000fd5b50600160a060020a03848116600081815260096020908152604091829020805473ffffffffffffffffffffffffffffffffffffffff191694861694851790558151938452905193945090927f341c3eb6378732c9923fd02ea04564f599626c0f9b3fc49526dfd712d7cf7a549281900390910190a250600192915050565b6000620009cd6200330d565b600080620009da62003328565b620009e462003328565b6040805180820182528b51600160a060020a0390811660009081526009602081815285832054841685528f8601518416835290815293812054909116928201839052815191975091829162000a3d918e918e91620016b0565b151562000ab35762000aab606060405190810160405280602981526020017f496e70757420697320696e76616c69642c2045786368616e67652e657865637581526020017f74654f72646572282900000000000000000000000000000000000000000000008152506200160a565b975062001529565b62000abf8c8c62001d9a565b8d518c518c5193995091975062000ae392909189918d60015b602002015162001efb565b151562000b515762000aab606060405190810160405280603381526020017f4d616b6572207369676e617475726520697320696e76616c69642c204578636881526020017f616e67652e657865637574654f726465722829000000000000000000000000008152506200160a565b6040808d015160208c0151918b015162000b709288918d600362000ad8565b151562000bde5762000aab606060405190810160405280603381526020017f54616b6572207369676e617475726520697320696e76616c69642c204578636881526020017f616e67652e657865637574654f726465722829000000000000000000000000008152506200160a565b60086000876000191660001916815260200190815260200160002060e060405190810160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815260200160018201548152602001600282015481526020016003820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815260200160048201548152602001600582015481525050935060086000866000191660001916815260200190815260200160002060e060405190810160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815260200160018201548152602001600282015481526020016003820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016004820154815260200160058201548152505092508360a001516000141562000dc457600184526020808d0151600160a060020a03908116828701528c5160408701528c516060808801919091528e01511660808601528b015160a0850152600060c08501525b60a0830151151562000e1a57600183526060808d0151600160a060020a0390811660208087019190915260408e810180519188019190915251838701528e01511660808501528b015160a0840152600060c08401525b62000e26848462001fb4565b151562000e945762000aab606060405190810160405280602c81526020017f4f726465727320646f206e6f74206d617463682c2045786368616e67652e657881526020017f65637574654f72646572282900000000000000000000000000000000000000008152506200160a565b62000ea084846200243c565b9092509050600182108062000eb55750600181105b1562000f485762000aab608060405190810160405280605281526020017f546f6b656e20616d6f756e74203c20312c20707269636520726174696f20697381526020017f20696e76616c69642120546f6b656e2076616c7565203c20312c20457863686181526020017f6e67652e657865637574654f72646572282900000000000000000000000000008152506200160a565b6004546020840151600160a060020a0390811691161480156200101a575062000f858162000f78868585620025ac565b9063ffffffff6200261516565b600454600160a060020a03166370a0823189600160200201516040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801562000fea57600080fd5b505af115801562000fff573d6000803e3d6000fd5b505050506040513d60208110156200101657600080fd5b5051105b15620010d35762000aab60a060405190810160405280606381526020017f54616b65722068617320616e20696e73756666696369656e742045444f20746f81526020017f6b656e2062616c616e636520746f20636f766572207468652066656520414e4481526020017f20746865206f666665722c2045786368616e67652e657865637574654f72646581526020017f72282900000000000000000000000000000000000000000000000000000000008152506200160a565b620010e0848383620025ac565b600454600160a060020a03166370a0823189600160200201516040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156200114557600080fd5b505af11580156200115a573d6000803e3d6000fd5b505050506040513d60208110156200117157600080fd5b50511015620012075762000aab608060405190810160405280605581526020017f54616b65722068617320616e20696e73756666696369656e742045444f20746f81526020017f6b656e2062616c616e636520746f20636f76657220746865206665652c20457881526020017f6368616e67652e657865637574654f72646572282900000000000000000000008152506200160a565b865160208801516200122c918e9184918691620012268a8486620025ac565b62002625565b15156200129a5762000aab606060405190810160405280603f81526020017f4f7264657220636f756c64206e6f74206265207665726966696564206279207781526020017f616c6c6574732c2045786368616e67652e657865637574654f726465722829008152506200160a565b620012a884848484620028c3565b60608401511515620012b957600084525b60608301511515620012ca57600083525b8360086000886000191660001916815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a815481600160a060020a030219169083600160a060020a03160217905550604082015181600101556060820151816002015560808201518160030160006101000a815481600160a060020a030219169083600160a060020a0316021790555060a0820151816004015560c082015181600501559050508260086000876000191660001916815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a815481600160a060020a030219169083600160a060020a03160217905550604082015181600101556060820151816002015560808201518160030160006101000a815481600160a060020a030219169083600160a060020a0316021790555060a0820151816004015560c082015181600501559050506200146d8c838362001460888787620025ac565b8b5160208d01516200293c565b15156200147957600080fd5b6060840151604080518481526020810192909252805188927fbc99ec61d80589c90dda14a2b09b9d0ddcdd61292e3745b9967c10bdd131d95292908290030190a26060830151604080518381526020810192909252805187927fbc99ec61d80589c90dda14a2b09b9d0ddcdd61292e3745b9967c10bdd131d95292908290030190a26040517f8fd15f06b064f611e00c3a037950e48f8c637e2a0aab2afca053325afd3e859490600090a1600197505b50505050505050949350505050565b60408051600160a060020a038516815260208101849052808201839052905133917f0ecba04e3ac59da620bc63359f7754b6504cf198bac1987a1ac5123c47cf2a36919081900360600190a2505050565b600154600090600160a060020a03163314620015f557620004cb6060604051908101604052806036815260200160008051602062003d2a83398151915281526020017f744d696e4f726465724574686572416d6f756e742829000000000000000000008152506200160a565b50600255600190565b60025481565b60055481565b60007f551303dd5f39cbfe6daba6b3e27754b8a7d72f519756a2cde2b92c2bbde159a7826040518080602001828103825283818151815260200191508051906020019080838360005b838110156200166d57818101518382015260200162001653565b50505050905090810190601f1680156200169b5780820380516001836020036101000a031916815260200191505b509250505060405180910390a1506000919050565b600080548190600160a060020a031633146200175b5762001753608060405190810160405280604781526020017f6d73672e73656e64657220213d206f72646572426f6f6b4163636f756e742c2081526020017f45786368616e67652e5f5f657865637574654f72646572496e7075744973566181526020017f6c69645f5f2829000000000000000000000000000000000000000000000000008152506200160a565b915062001d91565b6080850151431115620017cf5762001753606060405190810160405280604081526020017f4d616b6572206f726465722068617320657870697265642c2045786368616e6781526020017f652e5f5f657865637574654f72646572496e707574497356616c69645f5f28298152506200160a565b60c0850151431115620018435762001753606060405190810160405280604081526020017f54616b6572206f726465722068617320657870697265642c2045786368616e6781526020017f652e5f5f657865637574654f72646572496e707574497356616c69645f5f28298152506200160a565b600160a060020a0384161515620018e15762001753608060405190810160405280604481526020017f4d616b65722077616c6c657420646f6573206e6f742065786973742c2045786381526020017f68616e67652e5f5f657865637574654f72646572496e707574497356616c696481526020017f5f5f2829000000000000000000000000000000000000000000000000000000008152506200160a565b600160a060020a03831615156200197f5762001753608060405190810160405280604481526020017f54616b65722077616c6c657420646f6573206e6f742065786973742c2045786381526020017f68616e67652e5f5f657865637574654f72646572496e707574497356616c696481526020017f5f5f2829000000000000000000000000000000000000000000000000000000008152506200160a565b6020860151600160a060020a031615801590620019a857506060860151600160a060020a031615155b1562001a61576200175360a060405190810160405280606381526020017f4574686572206f6d697474656421204973206e6f74206f66666572656420627981526020017f20656974686572207468652054616b6572206f72204d616b65722c204578636881526020017f616e67652e5f5f657865637574654f72646572496e707574497356616c69645f81526020017f5f282900000000000000000000000000000000000000000000000000000000008152506200160a565b6020860151600160a060020a031615801562001a8857506060860151600160a060020a0316155b1562001b1b5762001753608060405190810160405280605381526020017f54616b657220616e64204d616b6572206f6666657220746f6b656e206172652081526020017f626f74682065746865722c2045786368616e67652e5f5f657865637574654f7281526020017f646572496e707574497356616c69645f5f2829000000000000000000000000008152506200160a565b8451158062001b2c57506020850151155b8062001b3a57506040850151155b8062001b4857506060850151155b1562001bdb5762001753608060405190810160405280605981526020017f4d6179206e6f74206578656375746520616e206f72646572207768657265207481526020017f6f6b656e20616d6f756e74203d3d20302c2045786368616e67652e5f5f65786581526020017f637574654f72646572496e707574497356616c69645f5f2829000000000000008152506200160a565b506002546020860151600160a060020a031615801562001bfb5750845181115b1562001cb4576200175360a060405190810160405280606281526020017f4d616b6572206f7264657220646f6573206e6f74206d65657420746865206d6981526020017f6e4f72646572457468416d6f756e745f206f662065746865722c20457863686181526020017f6e67652e5f5f657865637574654f72646572496e707574497356616c69645f5f81526020017f28290000000000000000000000000000000000000000000000000000000000008152506200160a565b6060860151600160a060020a031615801562001cd35750604085015181115b1562001d8c576200175360a060405190810160405280606281526020017f54616b6572206f7264657220646f6573206e6f74206d65657420746865206d6981526020017f6e4f72646572457468416d6f756e745f206f662065746865722c20457863686181526020017f6e67652e5f5f657865637574654f72646572496e707574497356616c69645f5f81526020017f28290000000000000000000000000000000000000000000000000000000000008152506200160a565b600191505b50949350505050565b6000808080308682602002015187600160200201518760006020020151896003602002015189600160200201518a600460200201518b60056020020151604080516c01000000000000000000000000600160a060020a039a8b1681028252988a168902601482015296891688026028880152603c87019590955292909616909402605c8401526070830193909352609082019390935260b081019190915290519081900360d0019020915030866002602002015187600360200201518760026020020151896001602002015189600360200201518a600660200201518b60076020020151604080516c01000000000000000000000000600160a060020a039a8b1681028252988a168902601482015296891688026028880152603c87019590955292909616909402605c8401526070830193909352609082019390935260b081019190915290519081900360d0019020919350909150829050509250929050565b604080517f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c8101869052815190819003603c018120600080835260208381018086529290925260ff87168385015260608301869052608083018590529251839260019260a0808301939192601f19830192908190039091019086865af115801562001f8e573d6000803e3d6000fd5b5050604051601f190151600160a060020a03908116981697909714979650505050505050565b6000806000808560000151151562002035576200202d606060405190810160405280604081526020017f4d616b6572206f7264657220697320696e6163746976652c2045786368616e6781526020017f652e5f5f6f72646572734d617463685f616e645f4172655661696c645f5f28298152506200160a565b935062002433565b84511515620020a5576200202d606060405190810160405280604081526020017f54616b6572206f7264657220697320696e6163746976652c2045786368616e6781526020017f652e5f5f6f72646572734d617463685f616e645f4172655661696c645f5f28298152506200160a565b8460200151600160a060020a03168660800151600160a060020a031614151562002156576200202d608060405190810160405280605c81526020017f4d616b65722077616e74656420746f6b656e20646f6573206e6f74206d61746381526020017f682074616b6572206f6666657220746f6b656e2c2045786368616e67652e5f5f81526020017f6f72646572734d617463685f616e645f4172655661696c645f5f2829000000008152506200160a565b8460800151600160a060020a03168660200151600160a060020a031614151562002207576200202d608060405190810160405280605c81526020017f4d616b6572206f6666657220746f6b656e20646f6573206e6f74206d6174636881526020017f2074616b65722077616e74656420746f6b656e2c2045786368616e67652e5f5f81526020017f6f72646572734d617463685f616e645f4172655661696c645f5f2829000000008152506200160a565b6020860151600160a060020a03161562002230576200222a866040015162000771565b6200223f565b6200223f8660a0015162000771565b90508560a0015186604001511015156200234a57620022858660a001516200227883600a0a896040015162002f2d90919063ffffffff16565b9063ffffffff62002f5416565b9250620022ac85604001516200227883600a0a8860a0015162002f2d90919063ffffffff16565b91508183101562002344576200202d608060405190810160405280605081526020017f54616b65722070726963652069732067726561746572207468616e206d616b6581526020017f722070726963652c2045786368616e67652e5f5f6f72646572734d617463685f81526020017f616e645f4172655661696c645f5f2829000000000000000000000000000000008152506200160a565b6200242e565b6200236f86604001516200227883600a0a8960a0015162002f2d90919063ffffffff16565b9250620023968560a001516200227883600a0a886040015162002f2d90919063ffffffff16565b9150818311156200242e576200202d608060405190810160405280604d81526020017f54616b6572207072696365206973206c657373207468616e206d616b6572207081526020017f726963652c2045786368616e67652e5f5f6f72646572734d617463685f616e6481526020017f5f4172655661696c645f5f2829000000000000000000000000000000000000008152506200160a565b600193505b50505092915050565b6000806000806000806000620024528962002f6c565b9450620024726200246c8a604001518b60a0015162002fe9565b62000771565b600101935062002483898562003005565b9250620024a28960c001518a60a001516200306b90919063ffffffff16565b9150620024c18860c001518960a001516200306b90919063ffffffff16565b9050848015620024dc57506080880151600160a060020a0316155b80620024fe575084158015620024fe57506080880151600160a060020a031615155b1562002570578089606001511180156200251c575087606001518211155b156200253a576200253289606001518262002fe9565b96506200254d565b6200254a8960600151826200307e565b96505b62002568836200227889600a88900a63ffffffff62002f2d16565b9550620025a0565b620025808860600151836200307e565b95506200259d836200227888600a88900a63ffffffff62002f2d16565b96505b50505050509250929050565b6020830151600090600160a060020a03161515620025ed57620025e5600654600a0a620022786005548662002f2d90919063ffffffff16565b90506200260e565b620025e5600654600a0a620022786005548562002f2d90919063ffffffff16565b9392505050565b6000828201838110156200260e57fe5b602080870151604080517f4e7343ea000000000000000000000000000000000000000000000000000000008152600160a060020a03928316600482015260248101889052600060448201819052606482018190529151919392871692634e7343ea9260848084019382900301818787803b158015620026a357600080fd5b505af1158015620026b8573d6000803e3d6000fd5b505050506040513d6020811015620026cf57600080fd5b505115156200276d5762002765608060405190810160405280604f81526020017f4d616b65722077616c6c657420636f756c64206e6f742076657269667920746881526020017f65206f726465722c2045786368616e67652e5f5f6f726465727356657269666981526020017f6564427957616c6c6574735f5f282900000000000000000000000000000000008152506200160a565b9050620028b9565b606087015160048054604080517f4e7343ea000000000000000000000000000000000000000000000000000000008152600160a060020a0394851693810193909352602483018a90526044830186905290831660648301525191851691634e7343ea916084808201926020929091908290030181600087803b158015620027f357600080fd5b505af115801562002808573d6000803e3d6000fd5b505050506040513d60208110156200281f57600080fd5b50511515620028b55762002765608060405190810160405280604f81526020017f54616b65722077616c6c657420636f756c64206e6f742076657269667920746881526020017f65206f726465722c2045786368616e67652e5f5f6f726465727356657269666981526020017f6564427957616c6c6574735f5f282900000000000000000000000000000000008152506200160a565b5060015b9695505050505050565b60c0840151620028da908263ffffffff6200261516565b60c08501526060830151620028f6908263ffffffff6200306b16565b606084015260c083015162002912908363ffffffff6200261516565b60c084015260608401516200292e908363ffffffff6200306b16565b606090940193909352505050565b6020808701516060880151600480546040805160e060020a6341228803028152600160a060020a039283169381019390935260248301899052600160448401525160009591871692634122880392606480830193919282900301818987803b158015620029a857600080fd5b505af1158015620029bd573d6000803e3d6000fd5b505050506040513d6020811015620029d457600080fd5b50511515620029e257600080fd5b60048054600754604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03898116958201959095529184166024830152604482018a90525192909116916323b872dd916064808201926020929091908290030181600087803b15801562002a6057600080fd5b505af115801562002a75573d6000803e3d6000fd5b505050506040513d602081101562002a8c57600080fd5b5051151562002a9a57600080fd5b6040805160e060020a6341228803028152600160a060020a038481166004830152602482018b9052600160448301529151918716916341228803916064808201926020929091908290030181600087803b15801562002af857600080fd5b505af115801562002b0d573d6000803e3d6000fd5b505050506040513d602081101562002b2457600080fd5b5051151562002b3257600080fd5b6040805160e060020a6341228803028152600160a060020a038481166004830152602482018b9052600060448301819052925190871692634122880392606480820193602093909283900390910190829087803b15801562002b9357600080fd5b505af115801562002ba8573d6000803e3d6000fd5b505050506040513d602081101562002bbf57600080fd5b5051151562002bcd57600080fd5b6040805160e060020a6341228803028152600160a060020a038381166004830152602482018a9052600160448301529151918616916341228803916064808201926020929091908290030181600087803b15801562002c2b57600080fd5b505af115801562002c40573d6000803e3d6000fd5b505050506040513d602081101562002c5757600080fd5b5051151562002c6557600080fd5b6040805160e060020a6341228803028152600160a060020a038381166004830152602482018a9052600060448301819052925190881692634122880392606480820193602093909283900390910190829087803b15801562002cc657600080fd5b505af115801562002cdb573d6000803e3d6000fd5b505050506040513d602081101562002cf257600080fd5b5051151562002d0057600080fd5b600160a060020a038216151562002e1457604051600160a060020a0385169089156108fc02908a906000818181858888f1935050505015801562002d48573d6000803e3d6000fd5b50604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301528781166024830152604482018a90529151918316916323b872dd916064808201926020929091908290030181600087803b15801562002dbe57600080fd5b505af115801562002dd3573d6000803e3d6000fd5b505050506040513d602081101562002dea57600080fd5b5051151562002df857600080fd5b62002e0585858362003096565b151562002e0e57fe5b62002f1e565b600160a060020a038116151562002f1957604051600160a060020a0386169088156108fc029089906000818181858888f1935050505015801562002e5c573d6000803e3d6000fd5b50604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301528681166024830152604482018b90529151918416916323b872dd916064808201926020929091908290030181600087803b15801562002ed257600080fd5b505af115801562002ee7573d6000803e3d6000fd5b505050506040513d602081101562002efe57600080fd5b5051151562002f0c57600080fd5b62002e0585858462003096565b600080fd5b50600198975050505050505050565b600082820283158062002f4b575082848281151562002f4857fe5b04145b15156200260e57fe5b600080828481151562002f6357fe5b04949350505050565b60208101516000908190600160a060020a03161562002f8d57600062002f90565b60015b905080801562002fa857508260a00151836040015110155b1562002fb857600191506200079a565b8015801562002fcf575082604001518360a0015110155b1562002fdf57600191506200079a565b600091506200079a565b600081831062002ffa578262002ffc565b815b90505b92915050565b60008260a00151836040015110151562003046576200303e8360a001516200227884600a0a866040015162002f2d90919063ffffffff16565b905062002fff565b62002ffc83604001516200227884600a0a8660a0015162002f2d90919063ffffffff16565b6000828211156200307857fe5b50900390565b60008183106200308f578162002ffc565b5090919050565b600083600160a060020a03166370a08231836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015620030f457600080fd5b505af115801562003109573d6000803e3d6000fd5b505050506040513d60208110156200312057600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151918516916370a08231916024808201926020929091908290030181600087803b1580156200318857600080fd5b505af11580156200319d573d6000803e3d6000fd5b505050506040513d6020811015620031b457600080fd5b505114620031c5575060006200260e565b82600160a060020a03166370a08231836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156200322157600080fd5b505af115801562003236573d6000803e3d6000fd5b505050506040513d60208110156200324d57600080fd5b5051604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301529151918516916370a08231916024808201926020929091908290030181600087803b158015620032b557600080fd5b505af1158015620032ca573d6000803e3d6000fd5b505050506040513d6020811015620032e157600080fd5b505114620032f2575060006200260e565b5060019392505050565b6040516109af806200337b83390190565b60408051808201825290600290829080388339509192915050565b60e0604051908101604052806000151581526020016000600160a060020a0316815260200160008152602001600081526020016000600160a060020a03168152602001600081526020016000815250905600608060405260058054600160a060020a0319167303d6e7b2f48120fd57a89ff0bbd56e9ec39af21c17905534801561003657600080fd5b506040516020806109af833981016040818152915160008054600160a060020a03808416600160a060020a03199283161783556001805490921633179091556005547facfdd2c500000000000000000000000000000000000000000000000000000000855294519294169263acfdd2c59260048083019360209383900390910190829087803b1580156100c857600080fd5b505af11580156100dc573d6000803e3d6000fd5b505050506040513d60208110156100f257600080fd5b505160038054600160a060020a031916600160a060020a039092169190911790555043600455610888806101276000396000f3006080604052600436106100ab5763ffffffff60e060020a6000350416632039d9fd81146100c457806322d40b13146100fc578063412288031461012d5780634e7343ea14610156578063648a0c911461018557806369820a80146101a657806370a08231146101cd57806398ea5fca146101ee578063c0668179146101f6578063d767ee4d1461020b578063e766307914610223578063f3fef3a314610238578063f6b1b18b1461025c575b600154600160a060020a031633146100c257600080fd5b005b3480156100d057600080fd5b506100e8600160a060020a036004351660243561027d565b604080519115158252519081900360200190f35b34801561010857600080fd5b506101116103b7565b60408051600160a060020a039092168252519081900360200190f35b34801561013957600080fd5b506100e8600160a060020a036004351660243560443515156103c6565b34801561016257600080fd5b506100e8600160a060020a036004358116906024359060443590606435166103c6565b34801561019157600080fd5b506100e8600160a060020a03600435166103e0565b3480156101b257600080fd5b506101bb61048e565b60408051918252519081900360200190f35b3480156101d957600080fd5b506101bb600160a060020a0360043516610494565b6100c26104af565b34801561020257600080fd5b5061011161053b565b34801561021757600080fd5b506100e860043561054a565b34801561022f57600080fd5b50610111610708565b34801561024457600080fd5b506100e8600160a060020a0360043516602435610717565b34801561026857600080fd5b506101bb600160a060020a03600435166107a7565b6000600160a060020a03831615156103215761031a608060405190810160405280604181526020017f43616e6e6f74206465706f73697420657468657220766961206465706f73697481526020017f45524332302c2057616c6c65742e6465706f7369744552433230546f6b656e2881526020017f29000000000000000000000000000000000000000000000000000000000000008152506107b9565b90506103b1565b600354604080517f6465706f73697428616464726573732c75696e743235362900000000000000008152815190819003601801812063ffffffff60e060020a918290049081169091028252600160a060020a03878116600484015260248301879052925192909316929160448083019260009291908290030181865af49250505015156103ad57600080fd5b5060015b92915050565b600354600160a060020a031681565b6000366000604037602060003660406003545af460206000f35b60008054600160a060020a0316331461045f57610458606060405190810160405280602d81526020017f6d73672e73656e64657220213d206f776e65725f2c2057616c6c65742e75706481526020017f61746545786368616e67652829000000000000000000000000000000000000008152506107b9565b9050610489565b506001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161781555b919050565b60045481565b600160a060020a031660009081526002602052604090205490565b600354604080517f6465706f73697428616464726573732c75696e743235362900000000000000008152815190819003601801812063ffffffff60e060020a9182900490811690910282526000600483018190523460248401529251600160a060020a039094169390926044808401939192918290030181865af492505050151561053957600080fd5b565b600154600160a060020a031681565b600080548190600160a060020a031633146105cb576105c4606060405190810160405280602a81526020017f6d73672e73656e64657220213d206f776e65725f2c2057616c6c65742e75706481526020017f6174654c6f6769632829000000000000000000000000000000000000000000008152506107b9565b9150610702565b600554604080517fd526d332000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163d526d332916024808201926020929091908290030181600087803b15801561063257600080fd5b505af1158015610646573d6000803e3d6000fd5b505050506040513d602081101561065c57600080fd5b50519050600160a060020a03811615156106d5576105c4606060405190810160405280602581526020017f496e76616c69642076657273696f6e2c2057616c6c65742e7570646174654c6f81526020017f67696328290000000000000000000000000000000000000000000000000000008152506107b9565b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038316179055600191505b50919050565b600054600160a060020a031681565b60008054600160a060020a0316331461078f5761031a606060405190810160405280602681526020017f6d73672e73656e64657220213d206f776e65722c2057616c6c65742e7769746881526020017f64726177282900000000000000000000000000000000000000000000000000008152506107b9565b366000604037602060003660406003545af460206000f35b60026020526000908152604090205481565b60007f551303dd5f39cbfe6daba6b3e27754b8a7d72f519756a2cde2b92c2bbde159a7826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561081a578181015183820152602001610802565b50505050905090810190601f1680156108475780820380516001836020036101000a031916815260200191505b509250505060405180910390a15060009190505600a165627a7a7230582091ab9932f462dc19180e8d269e9c4a96d60c0eb6d96e71ec4fa9987efb568c4600296d73672e73656e64657220213d206f776e65722c2045786368616e67652e7365a165627a7a723058202e8c6def4e35dc85b2d888a268ec9f9557905ed2377f4c87603dd2b758eea80200290000000000000000000000008725e59eef18409273fa50662e7c1b671e368a8600000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000ced4e93198734ddaff8492d525bd258d49eb388e00000000000000000000000000000000000000000000000000000000001e8480000000000000000000000000000000000000000000000000000000000000000600000000000000000000000006504d6f4cb6ec9cff5675c515212ebd17c3d83f",
  "constructorArguments": "0000000000000000000000008725e59eef18409273fa50662e7c1b671e368a8600000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000ced4e93198734ddaff8492d525bd258d49eb388e00000000000000000000000000000000000000000000000000000000001e8480000000000000000000000000000000000000000000000000000000000000000600000000000000000000000006504d6f4cb6ec9cff5675c515212ebd17c3d83f"
}