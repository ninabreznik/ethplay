{
  "address": "0xffd883e94f7a3700aaf81a411bd164ad27acc656",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BiLinkLoan",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-31\n*/\n\npragma solidity ^0.4.13;\n\ncontract IToken {\n\n\n\n  /// @notice send `_value` token to `_to` from `msg.sender`\n\n  /// @param _to The address of the recipient\n\n  /// @param _value The amount of token to be transferred\n\n  /// @return Whether the transfer was successful or not\n\n  function transfer(address _to, uint256 _value) public returns (bool success);\n\n\n\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n\n  /// @param _from The address of the sender\n\n  /// @param _to The address of the recipient\n\n  /// @param _value The amount of token to be transferred\n\n  /// @return Whether the transfer was successful or not\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n\n\n  function approve(address _spender, uint256 _value) public returns (bool success);\n\n\n\n}\n\nlibrary SafeMath {\n\n\n\n  /**\n\n  * @dev Multiplies two numbers, throws on overflow.\n\n  */\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\n    if (a == 0) {\n\n      return 0;\n\n    }\n\n    uint256 c = a * b;\n\n    require(c / a == b);\n\n    return c;\n\n  }\n\n\n\n  /**\n\n  * @dev Integer division of two numbers, truncating the quotient.\n\n  */\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n\n    require(b > 0); // Solidity automatically throws when dividing by 0\n\n    uint256 c = a / b;\n\n    return c;\n\n  }\n\n\n\n  /**\n\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\n  */\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\n    require(b <= a);\n\n    return a - b;\n\n  }\n\n\n\n  /**\n\n  * @dev Adds two numbers, throws on overflow.\n\n  */\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n\n    uint256 c = a + b;\n\n    require(c >= a);\n\n    return c;\n\n  }\n\n}\n\ncontract Ownable \n\n{\n\n  address public owner;\n\n \n\n  constructor(address _owner) public \n\n  {\n\n    owner = _owner;\n\n  }\n\n \n\n  modifier onlyOwner() \n\n  {\n\n    require(msg.sender == owner);\n\n    _;\n\n  }\n\n \n\n  function transferOwnership(address newOwner) onlyOwner \n\n  {\n\n    require(newOwner != address(0));      \n\n    owner = newOwner;\n\n  }\n\n}\n\ncontract BiLinkLoan is Ownable {\n\n\tusing SafeMath for uint256;\n\n\n\n\taddress public contractLoanLogic;\n\n\taddress public contractBalance;\n\n\taddress public contractMarketData;\n\n\taddress public accountCost;\n\n\tuint256 public commissionRatio;//percentage\n\n\t\n\n\tmapping (address => mapping ( bytes32 => uint256)) public account2Order2TradeAmount;\n\n\t\n\n\tmapping (address => mapping (address => uint16)) public tokenPledgeRatio;//pledge 2 borrow percentage\n\n\tbool public isLegacy;//if true, not allow new trade,new deposit\n\n\n\n\tevent OnTrade(bytes32 guid,address tokenPledge, address tokenBorrow, address borrower, address lender, uint256 amountPledge, uint256 amountInterest, uint256 amountBorrow, uint256 timestamp);\n\n\tevent OnUserRepay(uint256 id, address tokenPledge, address tokenBorrow, address borrower, address lender, uint256 amountPledge, uint256 amountOriginInterest, uint256 amountActualInterest\n\n\t\t, uint256 amountRepaied, uint256 amountRepaiedPledgeToken, uint256 timestamp);\n\n\tevent OnForceRepay(uint256 id, address tokenPledge, address tokenBorrow, address borrower, address lender, uint256 amountPledge, uint256 amountOriginInterest, uint256 amountActualInterest\n\n\t\t, uint256 amountRepaied, uint256 amountRepaiedPledgeToken, uint256 timestamp);\n\n\tevent OnLossCompensated(address tokenPledge, address tokenBorrow, address borrower, address lender, uint256 amountLoss, uint256 amountCompensated, uint256 timestamp);\n\n\tevent OnLossCompensatedByAssurance(address tokenPledge, address tokenBorrow, address borrower, address lender, uint256 amountLoss, uint256 amountCompensated, uint256 timestamp);\n\n\t\t\n\n\tconstructor(address _owner, address _accountCost, address _contractLoanLogic, address _contractMarketData, uint256 _commissionRatio) public Ownable(_owner) {\n\n\t\tcontractLoanLogic= _contractLoanLogic;\n\n\t\tcontractMarketData= _contractMarketData;\n\n\t\tisLegacy= false;\n\n\t\tcommissionRatio= _commissionRatio;\n\n\t\taccountCost= _accountCost;\n\n\t}\n\n\t\n\n\tfunction setTokenPledgeRatio(address[] _pledgeTokens, address[] _borrowTokens, uint16[] _ratioPledges) public onlyOwner {\n\n\t\tfor(uint256 i= 0; i< _pledgeTokens.length; i++) {\n\n\t\t\ttokenPledgeRatio[_pledgeTokens[i]][_borrowTokens[i]]= _ratioPledges[i];\n\n\t\t}\n\n\t}\n\n\n\n\tfunction setThisContractAsLegacy() public onlyOwner {\n\n\t\tisLegacy= true;\n\n\t}\n\n\n\n\tfunction setBalanceContract(address _contractBalance) public onlyOwner {\n\n\t\tcontractBalance= _contractBalance;\n\n\t}\n\n\n\n\t//_arr1:tokenPledge,tokenBorrow,borrower,lender\n\n\t//_arr2:amountOrigin,amountInterest,periodDays,expireTime,amountTake\n\n\t//_arr3:rMaker,sMaker\n\n\tfunction trade(address[] _arr1, uint256[] _arr2, bool _borrowOrLend, bytes32 _guid, uint8 _vMaker, bytes32[] _arr3) public {\n\n\t\trequire(isLegacy== false&& _arr2[4]<= _arr2[0]&& verifyInput( _arr1, _arr2, _borrowOrLend, _vMaker, _arr3)&& tokenPledgeRatio[_arr1[0]][_arr1[1]]> 0);\n\n\t\tif(_borrowOrLend)\n\n\t\t\trequire(msg.sender== _arr1[2]);\n\n\t\telse\n\n\t\t\trequire(msg.sender== _arr1[3]);\n\n\n\n\t\tuint256 amountPledge= ILoanLogic(contractLoanLogic).getPledgeAmount(_arr1[0], _arr1[1], _arr2[4], tokenPledgeRatio[_arr1[0]][_arr1[1]]);\n\n\t\trequire(amountPledge!= 0);\n\n\n\n\t\tuint256 amountInterest = amountPledge.mul(_arr2[1]).mul(_arr2[2]).mul(100).div(tokenPledgeRatio[_arr1[0]][_arr1[1]]).div(100000);\n\n\t\trequire(amountPledge.add(amountInterest)<= IBalance(contractBalance).getAvailableBalance(_arr1[0], _arr1[2])&&_arr2[4]<= IBalance(contractBalance).getAvailableBalance(_arr1[1], _arr1[3]));\n\n\n\n\t\tIBalance(contractBalance).modifyBalance(_arr1[3], _arr1[1], _arr2[4], false); \n\n\t\tIBalance(contractBalance).modifyBalance(_arr1[2], _arr1[1], _arr2[4], true); \n\n\n\n\t\trequire(ILoanLogic(contractLoanLogic).updateDataAfterTrade(_arr1[0], _arr1[1], _arr1[2], _arr1[3], _arr2[4], amountPledge, amountInterest, _arr2[2]));\n\n\t\t\n\n\t\temit OnTrade(_guid, _arr1[0], _arr1[1], _arr1[2], _arr1[3], amountPledge, amountInterest, _arr2[4], now);\n\n\t}\n\n\n\n\tfunction verifyInput( address[] _arr1, uint256[] _arr2, bool _borrowOrLend, uint8 _vMaker, bytes32[] _arr3) private returns (bool) {\n\n\t\trequire(now <= _arr2[3]);\n\n\t\taddress _accountPledgeAssurance= IBalance(contractBalance).getTokenAssuranceAccount(_arr1[0]);\n\n\t\taddress _accountBorrowAssurance= IBalance(contractBalance).getTokenAssuranceAccount(_arr1[1]);\n\n\t\trequire(_accountPledgeAssurance!= _arr1[2]&& _accountPledgeAssurance!= _arr1[3]&& _accountBorrowAssurance!= _arr1[2]&& _accountBorrowAssurance!= _arr1[3]);\n\n\n\n\t\tbytes32 _hash= keccak256(abi.encodePacked(this, _arr1[0], _arr1[1], _arr2[1], _arr2[2], _arr2[3]));\n\n\t\trequire(ecrecover(_hash, _vMaker, _arr3[0], _arr3[1]) == (_borrowOrLend? _arr1[3] : _arr1[2]));\n\n\t\t\n\n\t\tif(_borrowOrLend) {\n\n\t\t\trequire(account2Order2TradeAmount[_arr1[3]][_hash].add(_arr2[4])<= _arr2[0]);\n\n\t\t\taccount2Order2TradeAmount[_arr1[3]][_hash]= account2Order2TradeAmount[_arr1[3]][_hash].add(_arr2[4]);\n\n\t\t}\n\n\t\telse {\n\n\t\t\trequire(account2Order2TradeAmount[_arr1[2]][_hash].add(_arr2[4])<= _arr2[0]);\n\n\t\t\taccount2Order2TradeAmount[_arr1[2]][_hash]= account2Order2TradeAmount[_arr1[2]][_hash].add(_arr2[4]);\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\n\n\tfunction getNeedRepayPledgeTokenAmount(uint256 _amountUnRepaiedPledgeTokenAmount, address _pledgeToken, address _borrowToken) private returns (uint256) {\n\n\t\treturn _amountUnRepaiedPledgeTokenAmount.mul((tokenPledgeRatio[_pledgeToken][_borrowToken] - 100)/4 + 100).div(100);\n\n\t}\n\n\n\n\tfunction doRepay(uint256 _id, bool _userOrForce) private {\n\n\t\tvar (_tokenPledge,_tokenBorrow,_borrower,_lender)= ILoanLogic(contractLoanLogic).getLoanDataPart(_id);\n\n\t\trequire(_borrower!= address(0));\n\n\t\t \n\n\t\tuint256 _available= IBalance(contractBalance).getAvailableBalance(_tokenBorrow, _borrower);\n\n\t\tvar (_amount, _amountOriginInterest, _amountActualInterest,_amountUnRepaiedAmount, _amountPledge)= ILoanLogic(contractLoanLogic).updateDataAfterRepay(_id, _available);\n\n\t\trequire(_amount!= 0);\n\n\n\n\t\tuint256 _amountUnRepaiedPledgeToken= tryCompensateLossByAssurance(_tokenPledge, _tokenBorrow, _borrower, _lender, _amountPledge, _amountUnRepaiedAmount);\n\n\n\n\t\t_available= IBalance(contractBalance).getAvailableBalance(_tokenBorrow, _borrower);\n\n\t\tuint256 _amountRepaiedPledgeToken= getNeedRepayPledgeTokenAmount(_amountUnRepaiedPledgeToken, _tokenPledge, _tokenBorrow);\n\n\t\tadjustBalancesAfterRepay(_tokenPledge, _tokenBorrow, _borrower, _lender, _amountActualInterest, (_amountRepaiedPledgeToken< _amountPledge? _amountRepaiedPledgeToken: _amountPledge), (_available> _amount? _amount: _available)\n\n\t\t\t, (_amountUnRepaiedPledgeToken > _amountPledge? _amountUnRepaiedPledgeToken - _amountPledge: 0));\n\n\n\n\t\tif(_userOrForce)\n\n\t\t\temit OnUserRepay(_id, _tokenPledge, _tokenBorrow, _borrower, _lender, _amountPledge, _amountOriginInterest, _amountActualInterest, _amount, _amountRepaiedPledgeToken, now);\n\n\t\telse\n\n\t\t\temit OnForceRepay(_id, _tokenPledge, _tokenBorrow, _borrower, _lender, _amountPledge, _amountOriginInterest, _amountActualInterest, _amount, _amountRepaiedPledgeToken, now);\n\n\t}\n\n\n\n\tfunction tryCompensateLossByAssurance(address _tokenPledge, address _tokenBorrow, address _borrower, address _lender, uint256 _amountPledge, uint256 _amountUnRepaiedAmount) private returns (uint256) {\n\n\t\tuint256 _amountUnRepaiedPledgeToken= 0;\n\n\t\taddress _accountAssurance= IBalance(contractBalance).getTokenAssuranceAccount(_tokenBorrow);\n\n\t\tuint256 _available= IBalance(contractBalance).getAvailableBalance(_tokenBorrow, _accountAssurance);\n\n\t\t(uint256 _num, uint256 _denom)= IMarketData(contractMarketData).getTokenExchangeRatio(_tokenPledge, _tokenBorrow);\n\n\t\tuint256 _equalAmount= _amountPledge.mul(_denom).div(_num);\n\n\n\n\t\tif(_amountUnRepaiedAmount > _equalAmount&& _available> 0) {\n\n\t\t\tuint256 _actualCompensatedAmountByAssurance= _amountUnRepaiedAmount.sub(_equalAmount);\n\n\t\t\tif(_available< _amountUnRepaiedAmount)\n\n\t\t\t\t_actualCompensatedAmountByAssurance= _available;\n\n\t\t\tIBalance(contractBalance).modifyBalance(_accountAssurance, _tokenBorrow, _actualCompensatedAmountByAssurance, false); \n\n\t\t\tIBalance(contractBalance).modifyBalance(_borrower, _tokenBorrow, _actualCompensatedAmountByAssurance, true); \n\n\t\t\t\n\n\t\t\temit OnLossCompensatedByAssurance(_tokenPledge, _tokenBorrow, _borrower, _lender, _amountUnRepaiedAmount, _actualCompensatedAmountByAssurance, now);\n\n\t\t\t_amountUnRepaiedAmount= _amountUnRepaiedAmount.sub(_actualCompensatedAmountByAssurance);\n\n\t\t}\n\n\n\n\t\t_amountUnRepaiedPledgeToken= _amountUnRepaiedAmount.mul(_num).div(_denom);\n\n\n\n\t\treturn _amountUnRepaiedPledgeToken;\n\n\t}\n\n\n\n\tfunction userRepay(uint256 _id) public {\n\n\t\tvar (_tokenPledge, _tokenBorrow, _borrower, _lender)= ILoanLogic(contractLoanLogic).getLoanDataPart(_id);\n\n\t\trequire(msg.sender == _borrower);\n\n\t\t \n\n\t\tdoRepay(_id, true);\n\n\t}\n\n\n\n\tfunction forceRepay(uint256[] _arr) public onlyOwner {\n\n\t\tfor(uint256 i= 0; i< _arr.length; i++) {\n\n\t\t\tif(ILoanLogic(contractLoanLogic).needForceClose(_arr[i])) {\n\n\t\t\t\tdoRepay(_arr[i], false);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\n\tfunction adjustBalancesAfterRepay(address _tokenPledge, address _tokenBorrow, address _borrower, address _lender, uint256 _amountActualInterest, uint256 _amountRepaiedPeldgeToken, uint256 _amountRepaiedBorrowToken, uint256 _amountLoss) private {\n\n\t\tuint256 _amountProfit= (_amountActualInterest.mul(commissionRatio))/ 100;\n\n\t\tIBalance(contractBalance).modifyBalance(_borrower, _tokenPledge, _amountRepaiedPeldgeToken.add(_amountActualInterest), false); \n\n\t\tIBalance(contractBalance).modifyBalance(_lender, _tokenPledge, _amountActualInterest.sub(_amountProfit), true);\n\n\t\t \t\t \n\n\t\tif(_amountRepaiedBorrowToken> 0) {\n\n\t\t\tIBalance(contractBalance).modifyBalance(_borrower, _tokenBorrow, _amountRepaiedBorrowToken, false);\n\n\t\t\tIBalance(contractBalance).modifyBalance(_lender, _tokenBorrow, _amountRepaiedBorrowToken, true);\n\n\t\t}\n\n\n\n\t\tif(_amountLoss> 0) {\n\n\t\t\tif(IBalance(contractBalance).getAvailableBalance(_tokenPledge, accountCost)/ 10> _amountLoss) {\n\n\t\t\t\tIBalance(contractBalance).modifyBalance(accountCost, _tokenPledge, _amountLoss, false); \n\n\t\t\t\tIBalance(contractBalance).modifyBalance(_lender, _tokenPledge, _amountLoss, true); \n\n\t\t\t\temit OnLossCompensated(_tokenPledge, _tokenBorrow, _borrower, _lender, _amountLoss, _amountLoss, now);\n\n\t\t\t}\n\n\t\t\telse {\n\n\t\t\t\tuint256 uActualPaiedLoss= IBalance(contractBalance).getAvailableBalance(_tokenPledge, accountCost)/ 10;\n\n\t\t\t\tIBalance(contractBalance).modifyBalance(accountCost, _tokenPledge, uActualPaiedLoss, false); \n\n\t\t\t\tIBalance(contractBalance).modifyBalance(_lender, _tokenPledge, uActualPaiedLoss, true); \n\n\t\t\t\temit OnLossCompensated(_tokenPledge, _tokenBorrow, _borrower, _lender, _amountLoss, uActualPaiedLoss, now);\n\n\t\t\t}\n\n\t\t}\n\n\n\n\t\tIBalance(contractBalance).modifyBalance(_lender, _tokenPledge, _amountRepaiedPeldgeToken, true);\n\n\n\n\t\tif(_tokenPledge== address(0)) {\n\n\t\t\tIBalance(contractBalance).distributeEthProfit(_lender, _amountProfit);\n\n\t\t}\n\n\t\telse {\n\n\t\t\tIBalance(contractBalance).distributeTokenProfit(_lender, _tokenPledge, _amountProfit);\n\n\t\t}\n\n\t}\n\n}\n\ncontract ILoanLogic {  \n\n\tfunction setTokenExchangeRatio(address[] tokenPledge, address[] tokenBorrow, uint256[] amountDenom, uint256[] amountNum) public returns (bool);\n\n\tfunction getPledgeAmount(address tokenPledge, address tokenBorrow, uint256 amount,uint16 ratioPledge) public constant returns (uint256);\n\n\tfunction updateDataAfterTrade(address tokenPledge, address tokenBorrow, address borrower, address lender,\n\n\t\tuint256 amountPledge, uint256 amount, uint256 amountInterest, uint256 periodDays) public returns(bool);\n\n\tfunction updateDataAfterRepay(uint256 id, uint256 uBorrowerAvailableAmount) public returns (uint256, uint256, uint256, uint256, uint256);\n\n\tfunction getLoanDataPart(uint256 id) public constant returns (address, address, address, address);\n\n\tfunction needForceClose(uint256 id) public constant returns (bool);\n\n}\n\ncontract IMarketData {\n\n\tfunction getTokenExchangeRatio(address _tokenNum, address _tokenDenom) public returns (uint256 num, uint256 denom);\n\n}\n\ncontract IBalance {\n\n\tfunction distributeEthProfit(address profitMaker, uint256 amount) public ;\n\n\tfunction distributeTokenProfit (address profitMaker, address token, uint256 amount) public ;\n\n\tfunction modifyBalance(address _account, address _token, uint256 _amount, bool _addOrSub) public;\n\n\tfunction getAvailableBalance(address _token, address _account) public constant returns (uint256);\n\n\tfunction getTokenAssuranceAccount(address _token) public constant returns (address);\n\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000e4e3627034a97b75d899ee7525d446bf2d42ad6600000000000000000000000019350aa51f45965b783ec8e40538d4b88d24698a000000000000000000000000aea870ca4ad2ee820050124a7580e78176d9c806000000000000000000000000611ce695290729805e138c9c14dbddf132e76de3000000000000000000000000000000000000000000000000000000000000000a"
}