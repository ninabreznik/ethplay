{
  "address": "0x41cd7bbab5758b3b675281f3ead24e666f2b1f0e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DailyDivs",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-01\n*/\n\npragma solidity ^0.4.21;\n\n/*\n******************** DailyDivs.com *********************\n*\n*  ____        _ _       ____  _                                \n* |  _ \\  __ _(_) |_   _|  _ \\(_)_   _____   ___ ___  _ __ ___  \n* | | | |/ _` | | | | | | | | | \\ \\ / / __| / __/ _ \\| '_ ` _ \\ \n* | |_| | (_| | | | |_| | |_| | |\\ V /\\__ \\| (_| (_) | | | | | |\n* |____/ \\__,_|_|_|\\__, |____/|_| \\_/ |___(_)___\\___/|_| |_| |_|\n*                  |___/                                        \n*\n******************** DailyDivs.com *********************\n*\n*\n* [x] 0% TRANSFER FEES\n* [x] 20% DIVIDENDS AND MASTERNODES\n* [x] Multi-tier Masternode system 50% 1st ref 30% 2nd ref 20% 3rd ref\n* [x] 5% FEE ON EACH BUY AND SELL GO TO Smart Contract Fund 0xF34340Ba65f37320B25F9f6F3978D02DDc13283b\n*     5% Split -> 70% to Earn Game / 30% to Dev Fund For Future Development Costs\n* [x] DailyDivs Token can be used for future games\n*\n* Official Website: https://dailydivs.com/ \n* Official Discord: https://discord.gg/J4Bvu32\n* Official Telegram: https://t.me/dailydivs\n*/\n\n\n/**\n * Definition of contract accepting DailyDivs tokens\n * Games, casinos, anything can reuse this contract to support DailyDivs tokens\n */\ncontract AcceptsDailyDivs {\n    DailyDivs public tokenContract;\n\n    function AcceptsDailyDivs(address _tokenContract) public {\n        tokenContract = DailyDivs(_tokenContract);\n    }\n\n    modifier onlyTokenContract {\n        require(msg.sender == address(tokenContract));\n        _;\n    }\n\n    /**\n    * @dev Standard ERC677 function that will handle incoming token transfers.\n    *\n    * @param _from  Token sender address.\n    * @param _value Amount of tokens.\n    * @param _data  Transaction metadata.\n    */\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n}\n\n\ncontract DailyDivs {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n\n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    modifier notContract() {\n      require (msg.sender == tx.origin);\n      _;\n    }\n\n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n    \n    uint ACTIVATION_TIME = 1535835600;\n\n\n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n        \n        if (now >= ACTIVATION_TIME) {\n            onlyAmbassadors = false;\n        }\n\n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol\n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[_customerAddress] == true &&\n\n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n\n            );\n\n            // updated the accumulated quota\n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n\n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = false;\n            _;\n        }\n\n    }\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"DailyDivs\";\n    string public symbol = \"DDT\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 20; // 20% dividend fee on each buy and sell\n    uint8 constant internal fundFee_ = 5; // 5% investment fund fee on each buy and sell\n    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n    uint256 constant internal magnitude = 2**64;\n\n    // Address to send the 5% Fee\n    //  70% to Earn Game / 30% to Dev Fund\n    // https://etherscan.io/address/0xF34340Ba65f37320B25F9f6F3978D02DDc13283b\n    address constant public giveEthFundAddress = 0xF34340Ba65f37320B25F9f6F3978D02DDc13283b;\n    uint256 public totalEthFundRecieved; // total ETH charity recieved from this contract\n    uint256 public totalEthFundCollected; // total ETH charity collected in this contract\n\n    // proof of stake (defaults at 100 tokens)\n    uint256 public stakingRequirement = 25e18;\n\n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 2.5 ether;\n    uint256 constant internal ambassadorQuota_ = 2.5 ether;\n\n\n\n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n\n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n\n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n\n    // Special DailyDivs Platform control from scam game contracts on DailyDivs platform\n    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept DailyDivs tokens\n\n    mapping(address => address) public stickyRef;\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --\n    */\n    function DailyDivs()\n        public\n    {\n        // add administrators here\n        administrators[0x5e4edd4b711eCe01400067dc3Ec564aed42Ed5b5] = true;\n\n        // add the ambassadors here - Tokens will be distributed to these addresses from main premine\n        ambassadors_[0x5e4edd4b711eCe01400067dc3Ec564aed42Ed5b5] = true;\n        // add the ambassadors here - Tokens will be distributed to these addresses from main premine\n        ambassadors_[0x12b353d1a2842d2272ab5a18c6814d69f4296873] = true;\n       // add the ambassadors here - Tokens will be distributed to these addresses from main premine\n        ambassadors_[0x87A7e71D145187eE9aAdc86954d39cf0e9446751] = true;\n        // add the ambassadors here - Tokens will be distributed to these addresses from main premine\n        ambassadors_[0x41FE3738B503cBaFD01C1Fd8DD66b7fE6Ec11b01] = true;\n        // add the ambassadors here - Tokens will be distributed to these addresses from main premine\n        ambassadors_[0x5632ca98e5788eddb2397757aa82d1ed6171e5ad] = true;\n        // add the ambassadors here - Tokens will be distributed to these addresses from main premine\n        ambassadors_[0x0A49857F69919AEcddbA77136364Bb19108B4891] = true;\n        // add the ambassadors here - Tokens will be distributed to these addresses from main premine\n            ambassadors_[0xdb59f29f7242989a3eda271483b89e1f74353ffa] = true;\n        \n    }\n\n\n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n        \n        require(tx.gasprice <= 0.05 szabo);\n        purchaseTokens(msg.value, _referredBy);\n    }\n\n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        \n        require(tx.gasprice <= 0.05 szabo);\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    /**\n     * Sends FUND money to the 70/30 Contract\n     * The address is here https://etherscan.io/address/0xF34340Ba65f37320B25F9f6F3978D02DDc13283b\n     */\n    function payFund() payable public {\n      uint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n      require(ethToPay > 1);\n      totalEthFundRecieved = SafeMath.add(totalEthFundRecieved, ethToPay);\n      if(!giveEthFundAddress.call.value(ethToPay).gas(400000)()) {\n         totalEthFundRecieved = SafeMath.sub(totalEthFundRecieved, ethToPay);\n      }\n    }\n\n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n\n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n\n        // lambo delivery service\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n\n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n        uint256 _refPayout = _dividends / 3;\n        _dividends = SafeMath.sub(_dividends, _refPayout);\n        (_dividends,) = handleRef(stickyRef[msg.sender], _refPayout, _dividends, 0);\n\n        // Take out dividends and then _fundPayout\n        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n\n        // Add ethereum to send to fund\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n\n\n    /**\n     * Transfer tokens from the caller to a new holder.\n     * REMEMBER THIS IS 0% TRANSFER FEE\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n\n\n        // fire event\n        Transfer(_customerAddress, _toAddress, _amountOfTokens);\n\n        // ERC20\n        return true;\n    }\n\n    /**\n    * Transfer token to a specified address and forward the data to recipient\n    * ERC-677 standard\n    * https://github.com/ethereum/EIPs/issues/677\n    * @param _to    Receiver address.\n    * @param _value Amount of tokens that will be transferred.\n    * @param _data  Transaction metadata.\n    */\n    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\n      require(_to != address(0));\n      require(canAcceptTokens_[_to] == true); // security check that contract approved by DailyDivs platform\n      require(transfer(_to, _value)); // do a normal token transfer to the contract\n\n      if (isContract(_to)) {\n        AcceptsDailyDivs receiver = AcceptsDailyDivs(_to);\n        require(receiver.tokenFallback(msg.sender, _value, _data));\n      }\n\n      return true;\n    }\n\n    /**\n     * Additional check that the game address we are sending tokens to is a contract\n     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n     */\n     function isContract(address _addr) private constant returns (bool is_contract) {\n       // retrieve the size of the code on target address, this needs assembly\n       uint length;\n       assembly { length := extcodesize(_addr) }\n       return length > 0;\n     }\n\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    //function disableInitialStage()\n    //    onlyAdministrator()\n    //    public\n    //{\n    //    onlyAmbassadors = false;\n    //}\n\n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n\n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n\n    /**\n     * Add or remove game contract, which can accept DailyDivs tokens\n     */\n    function setCanAcceptTokens(address _address, bool _value)\n      onlyAdministrator()\n      public\n    {\n      canAcceptTokens_[_address] = _value;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n\n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n\n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n\n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus)\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _fundPayout);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, fundFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _fundPayout);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        return _amountOfTokens;\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell)\n        public\n        view\n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n        return _taxedEthereum;\n    }\n\n    /**\n     * Function for the frontend to show ether waiting to be send to fund in contract\n     */\n    function etherToSendFund()\n        public\n        view\n        returns(uint256) {\n        return SafeMath.sub(totalEthFundCollected, totalEthFundRecieved);\n    }\n\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    // Make sure we will send back excess if user sends more then 5 ether before 100 ETH in contract\n    function purchaseInternal(uint256 _incomingEthereum, address _referredBy)\n      notContract()// no contracts allowed\n      internal\n      returns(uint256) {\n\n      uint256 purchaseEthereum = _incomingEthereum;\n      uint256 excess;\n      if(purchaseEthereum > 2.5 ether) { // check if the transaction is over 2.5 ether\n          if (SafeMath.sub(address(this).balance, purchaseEthereum) <= 100 ether) { // if so check the contract is less then 100 ether\n              purchaseEthereum = 2.5 ether;\n              excess = SafeMath.sub(_incomingEthereum, purchaseEthereum);\n          }\n      }\n\n      purchaseTokens(purchaseEthereum, _referredBy);\n\n      if (excess > 0) {\n        msg.sender.transfer(excess);\n      }\n    }\n\n    function handleRef(address _ref, uint _referralBonus, uint _currentDividends, uint _currentFee) internal returns (uint, uint){\n        uint _dividends = _currentDividends;\n        uint _fee = _currentFee;\n        address _referredBy = stickyRef[msg.sender];\n        if (_referredBy == address(0x0)){\n            _referredBy = _ref;\n        }\n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != msg.sender &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            if (stickyRef[msg.sender] == address(0x0)){\n                stickyRef[msg.sender] = _referredBy;\n            }\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus/2);\n            address currentRef = stickyRef[_referredBy];\n            if (currentRef != address(0x0) && tokenBalanceLedger_[currentRef] >= stakingRequirement){\n                referralBalance_[currentRef] = SafeMath.add(referralBalance_[currentRef], (_referralBonus/10)*3);\n                currentRef = stickyRef[currentRef];\n                if (currentRef != address(0x0) && tokenBalanceLedger_[currentRef] >= stakingRequirement){\n                    referralBalance_[currentRef] = SafeMath.add(referralBalance_[currentRef], (_referralBonus/10)*2);\n                }\n                else{\n                    _dividends = SafeMath.add(_dividends, _referralBonus - _referralBonus/2 - (_referralBonus/10)*3);\n                    _fee = _dividends * magnitude;\n                }\n            }\n            else{\n                _dividends = SafeMath.add(_dividends, _referralBonus - _referralBonus/2);\n                _fee = _dividends * magnitude;\n            }\n            \n            \n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n        return (_dividends, _fee);\n    }\n\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _fee;\n        (_dividends, _fee) = handleRef(_referredBy, _referralBonus, _dividends, _fee);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _dividends), _fundPayout);\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n\n\n\n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n \n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[msg.sender] += _updatedPayouts;\n\n        // fire event\n        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\n\n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n\n        return _tokensReceived;\n    }\n\n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n\n\n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "635b8afdd060005560c0604052600960808190527f4461696c7944697673000000000000000000000000000000000000000000000060a090815262000048916001919062000231565b506040805180820190915260038082527f444454000000000000000000000000000000000000000000000000000000000060209092019182526200008f9160029162000231565b5068015af1d78b58c400006005556000600b55600e805460ff19166001179055348015620000bc57600080fd5b507f2a70b90af1ad4c8edc5822af00956c5ac8c2127712b9c2148ec630636642a1238054600160ff19918216811790925560066020527f5c2bb47d64924cfdafc4d5ec35f07845ebc04b13f655d300842d4baa391df20e80548216831790557f048bce517742968f02dee8d48053d3d41a4709737d7fddce1f37c0b0246c53a180548216831790557f8c825e9eda5f3977f54e5990323220da772913b3a799aca7e62222dbc137112080548216831790557f8b5a4c5c6c7308b912ba9497c26291134116881de2a44a474318a28212f041b080548216831790557ff03c30f47e2462d1051ee192497b31a62b309947772ab596c57b3c62ad9776ca80548216831790557f8a787b99b692f094ed0997b51ecb104e99ddd710fc3fa492fca933f5360b2a39805482168317905573db59f29f7242989a3eda271483b89e1f74353ffa6000527f83c2d2f1548ac27b3498edf4ce886b8f86d242f6944ba596e2c6e608af2540ab80549091169091179055620002d6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027457805160ff1916838001178555620002a4565b82800160010185558215620002a4579182015b82811115620002a457825182559160200191906001019062000287565b50620002b2929150620002b6565b5090565b620002d391905b80821115620002b25760008155600101620002bd565b90565b611b7b80620002e66000396000f3006080604052600436106101b55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b81146101d557806306fdde03146102085780630f34dc161461029257806310d0ffdd146102c757806318160ddd146102df57806322609373146102f457806327defa1f1461030c578063294205b414610321578063313ce567146103495780633ccfd60b146103745780634000aea0146103895780634b750334146103ba5780634d6352e5146103cf57806356d399e81461040c5780635e079aa51461042157806366042e7a14610436578063688abbf71461044b5780636b2f46321461046557806370a082311461047a57806376be15851461049b5780637ff276bd146104bc5780638328b610146104d15780638620410b146104e957806387c95058146104fe5780638974372d14610524578063949e8acd1461052c57806395d89b4114610541578063a4d5568614610556578063a9059cbb1461056b578063b84c82461461058f578063c47f0027146105e8578063e4849b3214610641578063e9fad8ee14610659578063f088d5471461066e578063fdb5a03e14610682575b640ba43b74003a11156101c757600080fd5b6101d2346000610697565b50005b3480156101e157600080fd5b506101f6600160a060020a0360043516610b5b565b60408051918252519081900360200190f35b34801561021457600080fd5b5061021d610b96565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025757818101518382015260200161023f565b50505050905090810190601f1680156102845780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029e57600080fd5b506102b3600160a060020a0360043516610c23565b604080519115158252519081900360200190f35b3480156102d357600080fd5b506101f6600435610c38565b3480156102eb57600080fd5b506101f6610c86565b34801561030057600080fd5b506101f6600435610c8d565b34801561031857600080fd5b506102b3610ce4565b34801561032d57600080fd5b50610347600160a060020a03600435166024351515610ced565b005b34801561035557600080fd5b5061035e610d37565b6040805160ff9092168252519081900360200190f35b34801561038057600080fd5b50610347610d3c565b34801561039557600080fd5b506102b360048035600160a060020a0316906024803591604435918201910135610e0f565b3480156103c657600080fd5b506101f6610f49565b3480156103db57600080fd5b506103f0600160a060020a0360043516610fb6565b60408051600160a060020a039092168252519081900360200190f35b34801561041857600080fd5b506101f6610fd1565b34801561042d57600080fd5b506103f0610fd7565b34801561044257600080fd5b506101f6610fef565b34801561045757600080fd5b506101f66004351515611004565b34801561047157600080fd5b506101f6611047565b34801561048657600080fd5b506101f6600160a060020a036004351661104c565b3480156104a757600080fd5b506102b3600160a060020a0360043516611067565b3480156104c857600080fd5b506101f661107c565b3480156104dd57600080fd5b50610347600435611082565b3480156104f557600080fd5b506101f66110a6565b34801561050a57600080fd5b50610347600160a060020a0360043516602435151561110c565b610347611156565b34801561053857600080fd5b506101f66111cb565b34801561054d57600080fd5b5061021d6111de565b34801561056257600080fd5b506101f6611236565b34801561057757600080fd5b506102b3600160a060020a036004351660243561123c565b34801561059b57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261034794369492936024939284019190819084018382808284375094975061136b9650505050505050565b3480156105f457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103479436949293602493928401919081908401838280828437509497506113a19650505050505050565b34801561064d57600080fd5b506103476004356113d2565b34801561066557600080fd5b50610347611597565b6101f6600160a060020a03600435166115c4565b34801561068e57600080fd5b506103476115e2565b60008060008060008060008060008a6000339050600054421015156106c157600e805460ff191690555b600e5460ff1680156106e457506722b1c8c1227a0000826106e0611047565b0311155b1561096957600160a060020a03811660009081526006602052604090205460ff16151560011480156107395750600160a060020a0381166000908152600a60205260409020546722b1c8c1227a000090830111155b151561074457600080fd5b600160a060020a0381166000908152600a60205260409020546107679083611698565b600160a060020a0382166000908152600a602052604090205561079561078e8e60146116ae565b60646116d9565b99506107a28a60036116d9565b98506107b261078e8e60056116ae565b97506107be8a8a6116f0565b96506107cc8c8a8989611702565b90975095506107e46107de8e896116f0565b896116f0565b94506107f260045489611698565b6004556107fe8561198e565b935060008411801561081a5750600b546108188582611698565b115b151561082557600080fd5b6000600b5411156108895761083c600b5485611698565b600b81905568010000000000000000880281151561085657fe5b600c8054929091049091019055600b5468010000000000000000880281151561087b57fe5b04840286038603955061088f565b600b8490555b336000908152600760205260409020546108a99085611698565b6007600033600160a060020a0316600160a060020a03168152602001908152602001600020819055508584600c5402039250826009600033600160a060020a0316600160a060020a03168152602001908152602001600020600082825401925050819055508b600160a060020a031633600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f87604051808381526020018281526020019250505060405180910390a3839a50610b4b565b600e805460ff1916905561098161078e8e60146116ae565b995061098e8a60036116d9565b985061099e61078e8e60056116ae565b97506109aa8a8a6116f0565b96506109b88c8a8989611702565b90975095506109ca6107de8e896116f0565b94506109d860045489611698565b6004556109e48561198e565b9350600084118015610a005750600b546109fe8582611698565b115b1515610a0b57600080fd5b6000600b541115610a6f57610a22600b5485611698565b600b819055680100000000000000008802811515610a3c57fe5b600c8054929091049091019055600b54680100000000000000008802811515610a6157fe5b048402860386039550610a75565b600b8490555b33600090815260076020526040902054610a8f9085611698565b6007600033600160a060020a0316600160a060020a03168152602001908152602001600020819055508584600c5402039250826009600033600160a060020a0316600160a060020a03168152602001908152602001600020600082825401925050819055508b600160a060020a031633600160a060020a03167f022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d58f87604051808381526020018281526020019250505060405180910390a3839a505b5050505050505050505092915050565b600160a060020a0316600090815260096020908152604080832054600790925290912054600c54680100000000000000009102919091030490565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c1b5780601f10610bf057610100808354040283529160200191610c1b565b820191906000526020600020905b815481529060010190602001808311610bfe57829003601f168201915b505050505081565b600f6020526000908152604090205460ff1681565b600080808080610c4c61078e8760146116ae565b9350610c5c61078e8760056116ae565b9250610c71610c6b87866116f0565b846116f0565b9150610c7c8261198e565b9695505050505050565b600b545b90565b6000806000806000600b548611151515610ca657600080fd5b610caf86611a1a565b9350610cbf61078e8560146116ae565b9250610ccf61078e8560056116ae565b9150610c7c610cde85856116f0565b836116f0565b600e5460ff1681565b336000818152600d602052604090205460ff161515610d0b57600080fd5b50600160a060020a03919091166000908152600f60205260409020805460ff1916911515919091179055565b601281565b6000806000610d4b6001611004565b11610d5557600080fd5b339150610d626000611004565b600160a060020a038316600081815260096020908152604080832080546801000000000000000087020190556008909152808220805490839055905193019350909183156108fc0291849190818181858888f19350505050158015610dcb573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc919081900360200190a25050565b600080600160a060020a0386161515610e2757600080fd5b600160a060020a0386166000908152600f602052604090205460ff161515600114610e5157600080fd5b610e5b868661123c565b1515610e6657600080fd5b610e6f86611a84565b15610f3d57506040517fc0ee0b8a000000000000000000000000000000000000000000000000000000008152336004820181815260248301879052606060448401908152606484018690528893600160a060020a0385169363c0ee0b8a9390928a928a928a929091608401848480828437820191505095505050505050602060405180830381600087803b158015610f0657600080fd5b505af1158015610f1a573d6000803e3d6000fd5b505050506040513d6020811015610f3057600080fd5b50511515610f3d57600080fd5b50600195945050505050565b6000806000806000600b5460001415610f6957640218711a009450610faf565b610f7a670de0b6b3a7640000611a1a565b9350610f8a61078e8560146116ae565b9250610f9a61078e8560056116ae565b9150610fa9610cde85856116f0565b90508094505b5050505090565b601060205260009081526040902054600160a060020a031681565b60055481565b73f34340ba65f37320b25f9f6f3978d02ddc13283b81565b6000610fff6004546003546116f0565b905090565b6000338261101a5761101581610b5b565b61103e565b600160a060020a03811660009081526008602052604090205461103c82610b5b565b015b91505b50919050565b303190565b600160a060020a031660009081526007602052604090205490565b600d6020526000908152604090205460ff1681565b60045481565b336000818152600d602052604090205460ff1615156110a057600080fd5b50600555565b6000806000806000600b54600014156110c65764028fa6ae009450610faf565b6110d7670de0b6b3a7640000611a1a565b93506110e761078e8560146116ae565b92506110f761078e8560056116ae565b9150610fa96111068585611698565b83611698565b336000818152600d602052604090205460ff16151561112a57600080fd5b50600160a060020a03919091166000908152600d60205260409020805460ff1916911515919091179055565b60006111666004546003546116f0565b90506001811161117557600080fd5b61118160035482611698565b60035560405173f34340ba65f37320b25f9f6f3978d02ddc13283b9062061a809083906000818181858888f1935050505015156111c8576111c4600354826116f0565b6003555b50565b6000336111d78161104c565b91505b5090565b6002805460408051602060018416156101000260001901909316849004601f81018490048402820184019092528181529291830182828015610c1b5780601f10610bf057610100808354040283529160200191610c1b565b60035481565b60008060006112496111cb565b1161125357600080fd5b503360008181526007602052604090205483111561127057600080fd5b600061127c6001611004565b111561128a5761128a610d3c565b600160a060020a0381166000908152600760205260409020546112ad90846116f0565b600160a060020a0380831660009081526007602052604080822093909355908616815220546112dc9084611698565b600160a060020a03858116600081815260076020908152604080832095909555600c8054948716808452600983528684208054968b02909603909555548383529185902080549289029092019091558351878152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3600191505b5092915050565b336000818152600d602052604090205460ff16151561138957600080fd5b815161139c906002906020850190611ac1565b505050565b336000818152600d602052604090205460ff1615156113bf57600080fd5b815161139c906001906020850190611ac1565b60008060008060008060008060006113e86111cb565b116113f257600080fd5b3360008181526007602052604090205490985089111561141157600080fd5b88965061141d87611a1a565b955061142d61078e8760146116ae565b945061143d61078e8760056116ae565b935060038504925061144f85846116f0565b3360009081526010602052604081205491965061147991600160a060020a03169085908890611702565b50945061148f61148987876116f0565b856116f0565b915061149d60045485611698565b600455600b546114ad90886116f0565b600b55600160a060020a0388166000908152600760205260409020546114d390886116f0565b600160a060020a038916600090815260076020908152604080832093909355600c5460099091529181208054928a0268010000000000000000860201928390039055600b54919250101561154957611545600c54600b5468010000000000000000880281151561153f57fe5b04611698565b600c555b60408051888152602081018490528151600160a060020a038b16927fc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139928290030190a2505050505050505050565b33600081815260076020526040812054908111156115b8576115b8816113d2565b6115c0610d3c565b5050565b6000640ba43b74003a11156115d857600080fd5b6110413483610697565b6000806000806115f26001611004565b116115fc57600080fd5b6116066000611004565b33600081815260096020908152604080832080546801000000000000000087020190556008909152812080549082905590920194509250611648908490610697565b905081600160a060020a03167fbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab36153264588483604051808381526020018281526020019250505060405180910390a2505050565b6000828201838110156116a757fe5b9392505050565b6000808315156116c15760009150611364565b508282028284828115156116d157fe5b04146116a757fe5b60008082848115156116e757fe5b04949350505050565b6000828211156116fc57fe5b50900390565b33600090815260106020526040812054819084908490600160a060020a03168381151561172d578991505b600160a060020a0382161580159061174e5750600160a060020a0382163314155b80156117745750600554600160a060020a03831660009081526007602052604090205410155b156119645733600090815260106020526040902054600160a060020a031615156117ce57336000908152601060205260409020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b600160a060020a0382166000908152600860205260409020546117f39060028b61153f565b600160a060020a0380841660009081526008602090815260408083209490945560109052919091205416905080158015906118485750600554600160a060020a03821660009081526007602052604090205410155b1561193f57600160a060020a03811660009081526008602052604090205461187690600a8b04600302611698565b600160a060020a039182166000908152600860209081526040808320939093556010905220541680158015906118c65750600554600160a060020a03821660009081526007602052604090205410155b1561191257600160a060020a0381166000908152600860205260409020546118f490600a8b04600202611698565b600160a060020a03821660009081526008602052604090205561193a565b61192984600a8b0460030260028c048c0303611698565b935068010000000000000000840292505b61195f565b61194e8460028b048b03611698565b935068010000000000000000840292505b61197f565b61196e848a611698565b935068010000000000000000840292505b50919890975095505050505050565b600b546000906b204fce5e3e25026110000000908290633b9aca00611a076114897259aedfc10d7279c5eed140164540000000000088026002850a670de0b6b3a764000002016f0f0bdc21abb48db201e86d40000000008502017704140c78940f6a24fdffc78873d4490d210000000000000001611a8c565b811515611a1057fe5b0403949350505050565b600b54600090670de0b6b3a7640000838101918101908390611a71640218711a00828504633b9aca0002018702600283670de0b6b3a763ffff1982890a8b90030104633b9aca0002811515611a6b57fe5b046116f0565b811515611a7a57fe5b0495945050505050565b6000903b1190565b80600260018201045b81811015611041578091506002818285811515611aae57fe5b0401811515611ab957fe5b049050611a95565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b0257805160ff1916838001178555611b2f565b82800160010185558215611b2f579182015b82811115611b2f578251825591602001919060010190611b14565b506111da92610c8a9250905b808211156111da5760008155600101611b3b5600a165627a7a72305820b5f3e8684452b003d986de5e50c36d8390de8f58aa089c2daaf8dccee6a48ed90029"
}