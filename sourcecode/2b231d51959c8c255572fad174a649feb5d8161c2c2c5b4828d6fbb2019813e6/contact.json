{
  "address": "0xcad49c39b72c37b32cee8b14f33f316d3a8bc335",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SodaCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-28\n*/\n\npragma solidity ^0.4.24;\n//asdfasdf\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) public pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function checkRate() public constant returns (uint rate_);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    event Blacklisted(address indexed target);\n\tevent DeleteFromBlacklist(address indexed target);\n\tevent RejectedPaymentToBlacklistedAddr(address indexed from, address indexed to, uint value);\n\tevent RejectedPaymentFromBlacklistedAddr(address indexed from, address indexed to, uint value);\n\tevent RejectedPaymentFromLockedAddr(address indexed from, address indexed to, uint value, uint lackdatetime, uint now_);\n\tevent RejectedPaymentMaximunFromLockedAddr(address indexed from, address indexed to, uint value);\n\tevent test1(uint rate, uint a, uint now );\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\n// token transfers\n// ----------------------------------------------------------------------------\ncontract SodaCoin is ERC20Interface, Owned, SafeMath {\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n    uint public start;\n    address founderAddr = 0x625f7Ae05DC8c22dA56F47CaDc8c647137a6B4D9;\n    address advisorAddr = 0x45F6a7D7903D3A02bef15826eBCA44aB5eD11758;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    mapping(address => int8) public blacklist;\n    UnlockDateModel[] public unlockdate;\n\n    struct UnlockDateModel {\n\t\t//string date;\n\t\tuint256 datetime;\n\t\tuint rate;\n\t}\n    \n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"SOC\";\n        name = \"SODA Coin\";\n        decimals = 18;\n        _totalSupply = 2000000000000000000000000000;\n        balances[msg.sender] = 1400000000000000000000000000;\n        emit Transfer(address(0), 0x1E7A12b193D18027E33cd3Ff0eef2Af31cbBF9ef, 1400000000000000000000000000); // owner wallet (70%) 1,400,000,000\n        // Founder & Team wallet (15%) 300,000,000\n        // Vesting over 2 years and 10 months (10% monthly release after 2 years)\n        balances[founderAddr] = 300000000000000000000000000;\n        emit Transfer(address(0), founderAddr, 300000000000000000000000000); \n        // Advisor & Partner wallet (15%) 300,000,000\n        // Vesting over 2 years and 10 months (10% monthly release after 2 years)\n        balances[advisorAddr] = 300000000000000000000000000;\n        emit Transfer(address(0), advisorAddr, 300000000000000000000000000);\n        \n        start = now;\n        unlockdate.push(UnlockDateModel({datetime : 1610237400,rate : 10}));\n        unlockdate.push(UnlockDateModel({datetime : 1612915800,rate : 10}));\n        unlockdate.push(UnlockDateModel({datetime : 1615335000,rate : 10}));\n        unlockdate.push(UnlockDateModel({datetime : 1618013400,rate : 10}));\n        unlockdate.push(UnlockDateModel({datetime : 1620605400,rate : 10}));\n        unlockdate.push(UnlockDateModel({datetime : 1623283800,rate : 10}));\n        unlockdate.push(UnlockDateModel({datetime : 1625875800,rate : 10}));\n        unlockdate.push(UnlockDateModel({datetime : 1628554200,rate : 10}));\n        unlockdate.push(UnlockDateModel({datetime : 1631232600,rate : 10}));\n        unlockdate.push(UnlockDateModel({datetime : 1633824600,rate : 10}));\n    }\n    \n    function now_() public constant returns (uint){\n        return now;\n    }\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply  - balances[address(0)];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account tokenOwner\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    function checkRate() public constant returns (uint rate_){\n        uint rate = 0;\n        for (uint i = 0; i<unlockdate.length; i++) {\n            if (unlockdate[i].datetime < now) {\n                rate = rate + unlockdate[i].rate; \n            }\n        }\n        return rate;\n    }\n    \n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to to account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n  \n    function transfer(address to, uint tokens) public returns (bool success) {\n        if (msg.sender == founderAddr || msg.sender == advisorAddr){\n            if (unlockdate[0].datetime > now) {\n                emit RejectedPaymentFromLockedAddr(msg.sender, to, tokens, unlockdate[0].datetime, now);\n\t\t\t    return false;\n            } else {\n                uint rate = checkRate();\n                \n                uint maximum = 300000000000000000000000000 - (300000000000000000000000000 * 0.01) * rate;\n                if (maximum > (balances[msg.sender] - tokens)){\n                    emit RejectedPaymentMaximunFromLockedAddr(msg.sender, to, tokens);\n\t\t\t        return false;\n                }\n            }\n        }\n        \n        if (blacklist[msg.sender] > 0) { // Accounts in the blacklist can not be withdrawn\n\t\t\temit RejectedPaymentFromBlacklistedAddr(msg.sender, to, tokens);\n\t\t\treturn false;\n\t\t} else if (blacklist[to] > 0) { // Accounts in the blacklist can not be withdrawn\n\t\t\temit RejectedPaymentToBlacklistedAddr(msg.sender, to, tokens);\n\t\t\treturn false;\n\t\t} else {\n\t\t\tbalances[msg.sender] = safeSub(balances[msg.sender], tokens);\n            balances[to] = safeAdd(balances[to], tokens);\n            emit Transfer(msg.sender, to, tokens);\n            return true;\n\t\t}\n\t\t\n    }\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account\n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account. The spender contract function\n    // receiveApproval(...) is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n    \n    // ------------------------------------------------------------------------\n    // Owner can add an increase total supply.\n    // ------------------------------------------------------------------------\n\tfunction totalSupplyIncrease(uint256 _supply) public onlyOwner{\n\t\t_totalSupply = _totalSupply + _supply;\n\t\tbalances[msg.sender] = balances[msg.sender] + _supply;\n\t}\n\t\n\t// ------------------------------------------------------------------------\n    // Owner can add blacklist the wallet address.\n    // ------------------------------------------------------------------------\n\tfunction blacklisting(address _addr) public onlyOwner{\n\t\tblacklist[_addr] = 1;\n\t\temit Blacklisted(_addr);\n\t}\n\t\n\t\n\t// ------------------------------------------------------------------------\n    // Owner can delete from blacklist the wallet address.\n    // ------------------------------------------------------------------------\n\tfunction deleteFromBlacklist(address _addr) public onlyOwner{\n\t\tblacklist[_addr] = -1;\n\t\temit DeleteFromBlacklist(_addr);\n\t}\n\t\n}",
  "bytecode": "608060405273625f7ae05dc8c22da56f47cadc8c647137a6b4d9600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507345f6a7d7903d3a02bef15826ebca44ab5ed11758600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015620000bb57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040805190810160405280600381526020017f534f43000000000000000000000000000000000000000000000000000000000081525060029080519060200190620001499291906200085e565b506040805190810160405280600981526020017f534f444120436f696e000000000000000000000000000000000000000000000081525060039080519060200190620001979291906200085e565b506012600460006101000a81548160ff021916908360ff1602179055506b06765c793fa10079d00000006005819055506b04860d8812f0b38878000000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550731e7a12b193d18027e33cd3ff0eef2af31cbbf9ef73ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6b04860d8812f0b388780000006040518082815260200191505060405180910390a36af8277896582678ac00000060096000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6af8277896582678ac0000006040518082815260200191505060405180910390a36af8277896582678ac00000060096000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6af8277896582678ac0000006040518082815260200191505060405180910390a342600681905550600c6040805190810160405280635ffa45d88152602001600a815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600c604080519081016040528063602324588152602001600a815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600c60408051908101604052806360480e588152602001600a815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600c6040805190810160405280636070ecd88152602001600a815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600c604080519081016040528063609879d88152602001600a815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600c60408051908101604052806360c158588152602001600a815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600c60408051908101604052806360e8e5588152602001600a815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600c6040805190810160405280636111c3d88152602001600a815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600c604080519081016040528063613aa2588152602001600a815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050600c60408051908101604052806361622f588152602001600a8152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050506200090d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008a157805160ff1916838001178555620008d2565b82800160010185558215620008d2579182015b82811115620008d1578251825591602001919060010190620008b4565b5b509050620008e19190620008e5565b5090565b6200090a91905b8082111562000906576000816000905550600101620008ec565b5090565b90565b611d6c806200091d6000396000f30060806040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610164578063095ea7b3146101f457806318160ddd146102595780631bcbd0a714610284578063313ce567146102cc578063317f5aae146102fd5780633eaaf86b1461032857806370a082311461035357806371986eae146103aa57806379ba5097146103d75780638a294c60146103ee5780638da5cb5b146104315780638de6b3431461048857806395d89b41146104cb578063a293d1e81461055b578063a9059cbb146105a6578063b5931f7c1461060b578063be9a655514610656578063cae9ca5114610681578063d05c78da1461072c578063d4ee1d9014610777578063dc39d06d146107ce578063dd62ed3e14610833578063e132db41146108aa578063e6cb9013146108d5578063f2fde38b14610920578063f9f92be414610963575b600080fd5b34801561017057600080fd5b506101796109c0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b957808201518184015260208101905061019e565b50505050905090810190601f1680156101e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020057600080fd5b5061023f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a5e565b604051808215151515815260200191505060405180910390f35b34801561026557600080fd5b5061026e610b50565b6040518082815260200191505060405180910390f35b34801561029057600080fd5b506102af60048036038101908080359060200190929190505050610b9b565b604051808381526020018281526020019250505060405180910390f35b3480156102d857600080fd5b506102e1610bce565b604051808260ff1660ff16815260200191505060405180910390f35b34801561030957600080fd5b50610312610be1565b6040518082815260200191505060405180910390f35b34801561033457600080fd5b5061033d610be9565b6040518082815260200191505060405180910390f35b34801561035f57600080fd5b50610394600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bef565b6040518082815260200191505060405180910390f35b3480156103b657600080fd5b506103d560048036038101908080359060200190929190505050610c38565b005b3480156103e357600080fd5b506103ec610d26565b005b3480156103fa57600080fd5b5061042f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ec5565b005b34801561043d57600080fd5b50610446610fc2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561049457600080fd5b506104c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe7565b005b3480156104d757600080fd5b506104e0611103565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610520578082015181840152602081019050610505565b50505050905090810190601f16801561054d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561056757600080fd5b5061059060048036038101908080359060200190929190803590602001909291905050506111a1565b6040518082815260200191505060405180910390f35b3480156105b257600080fd5b506105f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111bd565b604051808215151515815260200191505060405180910390f35b34801561061757600080fd5b50610640600480360381019080803590602001909291908035906020019092919050505061172d565b6040518082815260200191505060405180910390f35b34801561066257600080fd5b5061066b611751565b6040518082815260200191505060405180910390f35b34801561068d57600080fd5b50610712600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611757565b604051808215151515815260200191505060405180910390f35b34801561073857600080fd5b5061076160048036038101908080359060200190929190803590602001909291905050506119a6565b6040518082815260200191505060405180910390f35b34801561078357600080fd5b5061078c6119d7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107da57600080fd5b50610819600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506119fd565b604051808215151515815260200191505060405180910390f35b34801561083f57600080fd5b50610894600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b61565b6040518082815260200191505060405180910390f35b3480156108b657600080fd5b506108bf611be8565b6040518082815260200191505060405180910390f35b3480156108e157600080fd5b5061090a6004803603810190808035906020019092919080359060200190929190505050611c65565b6040518082815260200191505060405180910390f35b34801561092c57600080fd5b50610961600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c81565b005b34801561096f57600080fd5b506109a4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d20565b604051808260000b60000b815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a565780601f10610a2b57610100808354040283529160200191610a56565b820191906000526020600020905b815481529060010190602001808311610a3957829003601f168201915b505050505081565b600081600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600960008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460055403905090565b600c81815481101515610baa57fe5b90600052602060002090600202016000915090508060000154908060010154905082565b600460009054906101000a900460ff1681565b600042905090565b60055481565b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c9357600080fd5b806005540160058190555080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d8257600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f2057600080fd5b6001600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360000b60ff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b85560405160405180910390a250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561104257600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360000b60ff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f2e5392b52e98bf05bdf3784aaec667371398a6ea4fb965a2894852471999bca960405160405180910390a250565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111995780601f1061116e57610100808354040283529160200191611199565b820191906000526020600020905b81548152906001019060200180831161117c57829003601f168201915b505050505081565b60008282111515156111b257600080fd5b818303905092915050565b6000806000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061126b5750600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156114175742600c600081548110151561128157fe5b9060005260206000209060020201600001541115611338578473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167ffe8230d2672e27c1493bdced9f6cf8e8b4a4acc66c89aa742b34b5076588fdf486600c60008154811015156112f957fe5b9060005260206000209060020201600001544260405180848152602001838152602001828152602001935050505060405180910390a360009250611725565b611340611be8565b9150816a027b46536c66c8e3000000026af8277896582678ac00000003905083600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403811115611416578473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f955efa6ddfaa94d5e0dde1fc004f0f726c459945e768db03e1e96409487b0e7a866040518082815260200191505060405180910390a360009250611725565b5b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460000b60000b13156114dd578473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2a04c84c100a93363ee2e1ab7076505a06b5dd417cccc0d6080ec8285e84f79e866040518082815260200191505060405180910390a360009250611725565b6000600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460000b60000b13156115a3578473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fee75d149bb5e330e03f98b125aaa1efcd5864e4e2d5946f23dc6dd30630d5616866040518082815260200191505060405180910390a360009250611725565b6115ec600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856111a1565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611678600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611c65565b600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b505092915050565b6000808211151561173d57600080fd5b818381151561174857fe5b04905092915050565b60065481565b600082600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611934578082015181840152602081019050611919565b50505050905090810190601f1680156119615780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561198357600080fd5b505af1158015611997573d6000803e3d6000fd5b50505050600190509392505050565b6000818302905060008314806119c657508183828115156119c357fe5b04145b15156119d157600080fd5b92915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a5a57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611b1e57600080fd5b505af1158015611b32573d6000803e3d6000fd5b505050506040513d6020811015611b4857600080fd5b8101908080519060200190929190505050905092915050565b6000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000809150600090505b600c80549050811015611c5d5742600c82815481101515611c1257fe5b9060005260206000209060020201600001541015611c5057600c81815481101515611c3957fe5b906000526020600020906002020160010154820191505b8080600101915050611bf5565b819250505090565b60008183019050828110151515611c7b57600080fd5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cdc57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b6020528060005260406000206000915054906101000a900460000b815600a165627a7a72305820fab3ac864af75a4179cb5aa08505941eeefd1c0dcf3a3bb970feecfddf7673800029"
}