{
  "address": "0x63d863cffc7277a0e94f4397c62b5df9f691cbcd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CnusToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-21\n*/\n\npragma solidity 0.4.21;\n\n/** @title LockableToken\n  * @dev Base contract which allows token issuer control over when token transfer\n  * is allowed globally as well as per address based.\n  */\ncontract LockableToken {\n    // token issuer\n    address public owner;\n\n    // Check if msg.sender is token issuer\n    modifier isOwner {\n        require(owner == msg.sender);\n        _;\n    }\n\n    /**\n      * @dev The LockableToken constructor sets the original `owner` of the\n      * contract to the issuer, and sets global lock in locked state.\n      */\n    function LockableToken() public {\n        owner = msg.sender;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    Burn(burner, _value);\n    Transfer(burner, address(0), _value);\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n/** @title CNUS Token\n  * An ERC20-compliant token that is transferable only after preordered product\n  * reception is confirmed. Once the product is used by the holder, token lock\n  * will be automatically released.\n  */\ncontract CnusToken is MintableToken, LockableToken, BurnableToken {\n    using SafeMath for uint256;\n\n    string public name = \"CoinUs\";\n    string public symbol = \"CNUS\";\n    uint256 public decimals = 18;\n\n    // global token transfer lock\n    bool public globalTokenTransferLock;\n\n    // mapping that provides address based lock. default at the time of issueance\n    // is locked, and will not be transferrable until explicit unlock call for\n    // the address.\n    mapping( address => bool ) public lockedStatusAddress;\n\n    event Locked(address lockedAddress);\n    event Unlocked(address unlockedaddress);\n\n    // Check for global lock status to be unlocked\n    modifier checkGlobalTokenTransferLock {\n        require(!globalTokenTransferLock);\n        _;\n    }\n\n    // Check for address lock to be unlocked\n    modifier checkAddressLock {\n        require(!lockedStatusAddress[msg.sender]);\n        _;\n    }\n\n    function setGlobalTokenTransferLock(bool locked) public\n    isOwner\n    returns (bool)\n    {\n        globalTokenTransferLock = locked;\n        return globalTokenTransferLock;\n    }\n\n    /**\n      * @dev Allows token issuer to lock token transfer for an address.\n      * @param target Target address to lock token transfer.\n      */\n    function initialLockAddress(address target) public\n    onlyOwner\n    {\n        require(owner != target);\n        lockedStatusAddress[target] = true;\n        emit Locked(target);\n    }\n\n    /**\n      * @dev Allows token issuer to lock token transfer for an address.\n      * @param target Target address to lock token transfer.\n      */\n    function lockAddress(address target) public\n    isOwner\n    {\n        require(owner != target);\n        lockedStatusAddress[target] = true;\n        emit Locked(target);\n    }\n\n    /**\n      * @dev Allows token issuer to unlock token transfer for an address.\n      * @param target Target address to unlock token transfer.\n      */\n    function unlockAddress(address target) public\n    isOwner\n    {\n        lockedStatusAddress[target] = false;\n        emit Unlocked(target);\n    }\n\n    /** @dev Transfer `_value` token to `_to` from `msg.sender`, on the condition\n      * that global token lock and individual address lock in the `msg.sender`\n      * accountare both released.\n      * @param _to The address of the recipient.\n      * @param _value The amount of token to be transferred.\n      * @return Whether the transfer was successful or not.\n      */\n    function transfer(address _to, uint256 _value)\n    public\n    checkGlobalTokenTransferLock\n    checkAddressLock\n    returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /** @dev Send `_value` token to `_to` from `_from` on the condition\n      * that global token lock and individual address lock in the `from` account\n      * are both released.\n      * @param _from The address of the sender.\n      * @param _to The address of the recipient.\n      * @param _value The amount of token to be transferred.\n      * @return Whether the transfer was successful or not.\n      */\n    function transferFrom(address _from, address _to, uint256 _value)\n    public\n    checkGlobalTokenTransferLock\n    checkAddressLock\n    returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n}",
  "bytecode": "606060409081526003805460a060020a60ff02191690558051908101604052600681527f436f696e557300000000000000000000000000000000000000000000000000006020820152600590805161005b9291602001906100d9565b5060408051908101604052600481527f434e555300000000000000000000000000000000000000000000000000000000602082015260069080516100a39291602001906100d9565b50601260075560038054600160a060020a033316600160a060020a03199182168117909255600480549091169091179055610174565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011a57805160ff1916838001178555610147565b82800160010185558215610147579182015b8281111561014757825182559160200191906001019061012c565b50610153929150610157565b5090565b61017191905b80821115610153576000815560010161015d565b90565b61101380620001846000396000f3006060604052600436106101325763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630425b5e9811461013757806305d2035b1461015857806306fdde031461017f578063095ea7b3146102095780631701c1fa1461022b57806318160ddd1461024a57806323b872dd1461026f578063313ce5671461029757806334a90d02146102aa57806340c10f19146102c957806342966c68146102eb57806354a598b014610301578063661884631461031457806370a082311461033657806374398d45146103555780637d64bcb41461036d5780638da5cb5b1461038057806395d89b41146103af578063a9059cbb146103c2578063b7eb5e0a146103e4578063d73dd62314610403578063dd62ed3e14610425578063f2fde38b1461044a575b600080fd5b341561014257600080fd5b610156600160a060020a0360043516610469565b005b341561016357600080fd5b61016b610504565b604051901515815260200160405180910390f35b341561018a57600080fd5b610192610525565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101ce5780820151838201526020016101b6565b50505050905090810190601f1680156101fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021457600080fd5b61016b600160a060020a03600435166024356105c3565b341561023657600080fd5b61016b600160a060020a036004351661062f565b341561025557600080fd5b61025d610644565b60405190815260200160405180910390f35b341561027a57600080fd5b61016b600160a060020a036004358116906024351660443561064a565b34156102a257600080fd5b61025d6107ef565b34156102b557600080fd5b610156600160a060020a03600435166107f5565b34156102d457600080fd5b61016b600160a060020a0360043516602435610810565b34156102f657600080fd5b61015660043561091d565b341561030c57600080fd5b61016b610a04565b341561031f57600080fd5b61016b600160a060020a0360043516602435610a0d565b341561034157600080fd5b61025d600160a060020a0360043516610b07565b341561036057600080fd5b61016b6004351515610b22565b341561037857600080fd5b61016b610b5a565b341561038b57600080fd5b610393610c07565b604051600160a060020a03909116815260200160405180910390f35b34156103ba57600080fd5b610192610c16565b34156103cd57600080fd5b61016b600160a060020a0360043516602435610c81565b34156103ef57600080fd5b610156600160a060020a0360043516610db8565b341561040e57600080fd5b61016b600160a060020a0360043516602435610e35565b341561043057600080fd5b61025d600160a060020a0360043581169060243516610ed9565b341561045557600080fd5b610156600160a060020a0360043516610f04565b60035433600160a060020a0390811691161461048457600080fd5b600454600160a060020a038281169116141561049f57600080fd5b600160a060020a03811660009081526009602052604090819020805460ff191660011790557f44427e3003a08f22cf803894075ac0297524e09e521fc1c15bc91741ce3dc15990829051600160a060020a03909116815260200160405180910390a150565b60035474010000000000000000000000000000000000000000900460ff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105bb5780601f10610590576101008083540402835291602001916105bb565b820191906000526020600020905b81548152906001019060200180831161059e57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60096020526000908152604090205460ff1681565b60015490565b60085460009060ff161561065d57600080fd5b600160a060020a03331660009081526009602052604090205460ff161561068357600080fd5b600160a060020a038316151561069857600080fd5b600160a060020a0384166000908152602081905260409020548211156106bd57600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220548211156106f057600080fd5b600160a060020a038416600090815260208190526040902054610719908363ffffffff610f9f16565b600160a060020a03808616600090815260208190526040808220939093559085168152205461074e908363ffffffff610fb116565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610794908363ffffffff610f9f16565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020610fc88339815191529085905190815260200160405180910390a35060019392505050565b60075481565b60045433600160a060020a0390811691161461048457600080fd5b60035460009033600160a060020a0390811691161461082e57600080fd5b60035474010000000000000000000000000000000000000000900460ff161561085657600080fd5b600154610869908363ffffffff610fb116565b600155600160a060020a038316600090815260208190526040902054610895908363ffffffff610fb116565b600160a060020a0384166000818152602081905260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020610fc88339815191528460405190815260200160405180910390a350600192915050565b600160a060020a03331660009081526020819052604081205482111561094257600080fd5b5033600160a060020a0381166000908152602081905260409020546109679083610f9f565b600160a060020a038216600090815260208190526040902055600154610993908363ffffffff610f9f16565b600155600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a26000600160a060020a038216600080516020610fc88339815191528460405190815260200160405180910390a35050565b60085460ff1681565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610a6a57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610aa1565b610a7a818463ffffffff610f9f16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60045460009033600160a060020a03908116911614610b4057600080fd5b506008805460ff1916911515919091179081905560ff1690565b60035460009033600160a060020a03908116911614610b7857600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610ba057600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600454600160a060020a031681565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105bb5780601f10610590576101008083540402835291602001916105bb565b60085460009060ff1615610c9457600080fd5b600160a060020a03331660009081526009602052604090205460ff1615610cba57600080fd5b600160a060020a0383161515610ccf57600080fd5b600160a060020a033316600090815260208190526040902054821115610cf457600080fd5b600160a060020a033316600090815260208190526040902054610d1d908363ffffffff610f9f16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610d52908363ffffffff610fb116565b60008085600160a060020a0316600160a060020a031681526020019081526020016000208190555082600160a060020a031633600160a060020a0316600080516020610fc88339815191528460405190815260200160405180910390a350600192915050565b60045433600160a060020a03908116911614610dd357600080fd5b600160a060020a03811660009081526009602052604090819020805460ff191690557f7e6adfec7e3f286831a0200a754127c171a2da564078722cb97704741bbdb0ea90829051600160a060020a03909116815260200160405180910390a150565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610e6d908363ffffffff610fb116565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610f1f57600080fd5b600160a060020a0381161515610f3457600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610fab57fe5b50900390565b600082820183811015610fc057fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582068f406322427fd4412d60266346a9735613425ea44bb5a06acbe064e1ab636e20029"
}