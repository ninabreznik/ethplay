{
  "address": "0x0c43fd7c60631a277ff4de3b0646eb471a619661",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtheriumEcoSystem",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-05\n*/\n\npragma solidity 0.4.25;\n\n/*\n* https://EtheriumToken.cloud\n*\n* Crypto Etherium token concept\n*\n* [✓] 5% Withdraw fee\n* [✓] 10% Deposit fee\n* [✓] 1% Token transfer\n* [✓] 33% Referal link\n*\n*/\n\ncontract EtheriumEcoSystem {\n    address owner;\n    struct UserRecord {\n        address referrer;\n        uint tokens;\n        uint gained_funds;\n        uint ref_funds;\n        // this field can be negative\n        int funds_correction;\n    }\n\n    using SafeMath for uint;\n    using SafeMathInt for int;\n    using Fee for Fee.fee;\n    using ToAddress for bytes;\n\n    // ERC20\n    string constant public name = \"Etherium Ecosystem\";\n    string constant public symbol = \"EAN\";\n    uint8 constant public decimals = 18;\n\n    // Fees\n    Fee.fee private fee_purchase = Fee.fee(1, 10); // 10%\n    Fee.fee private fee_selling  = Fee.fee(1, 20); // 5%\n    Fee.fee private fee_transfer = Fee.fee(1, 100); // 1%\n    Fee.fee private fee_referral = Fee.fee(33, 100); // 33%\n\n    // Minimal amount of tokens to be an participant of referral program\n    uint constant private minimal_stake = 10e18;\n\n    // Factor for converting eth <-> tokens with required precision of calculations\n    uint constant private precision_factor = 1e18;\n\n    // Pricing policy\n    //  - if user buy 1 token, price will be increased by \"price_offset\" value\n    //  - if user sell 1 token, price will be decreased by \"price_offset\" value\n    // For details see methods \"fundsToTokens\" and \"tokensToFunds\"\n    uint private price = 1e29; // 100 Gwei * precision_factor\n    uint constant private price_offset = 1e28; // 10 Gwei * precision_factor\n\n    // Total amount of tokens\n    uint private total_supply = 0;\n\n    // Total profit shared between token's holders. It's not reflect exactly sum of funds because this parameter\n    // can be modified to keep the real user's dividends when total supply is changed\n    // For details see method \"dividendsOf\" and using \"funds_correction\" in the code\n    uint private shared_profit = 0;\n\n    // Map of the users data\n    mapping(address => UserRecord) private user_data;\n\n    // ==== Modifiers ==== //\n\n    modifier onlyValidTokenAmount(uint tokens) {\n        require(tokens > 0, \"Amount of tokens must be greater than zero\");\n        require(tokens <= user_data[msg.sender].tokens, \"You have not enough tokens\");\n        _;\n    }\n\n    // ==== Public API ==== //\n\n    // ---- Write methods ---- //\n    function () public payable {\n        buy(msg.data.toAddr());\n    }\n\n    /*\n    * @dev Buy tokens from incoming funds\n    */\n    function buy(address referrer) public payable {\n\n        // apply fee\n        (uint fee_funds, uint taxed_funds) = fee_purchase.split(msg.value);\n        require(fee_funds != 0, \"Incoming funds is too small\");\n\n        // update user's referrer\n        //  - you cannot be a referrer for yourself\n        //  - user and his referrer will be together all the life\n        UserRecord storage user = user_data[msg.sender];\n        if (referrer != 0x0 && referrer != msg.sender && user.referrer == 0x0) {\n            user.referrer = referrer;\n        }\n\n        // apply referral bonus\n        if (user.referrer != 0x0) {\n            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, msg.value);\n            require(fee_funds != 0, \"Incoming funds is too small\");\n        }\n\n        // calculate amount of tokens and change price\n        (uint tokens, uint _price) = fundsToTokens(taxed_funds);\n        require(tokens != 0, \"Incoming funds is too small\");\n        price = _price;\n\n        // mint tokens and increase shared profit\n        mintTokens(msg.sender, tokens);\n        shared_profit = shared_profit.add(fee_funds);\n\n        emit Purchase(msg.sender, msg.value, tokens, price / precision_factor, now);\n    }\n\n    /*\n    * @dev Sell given amount of tokens and get funds\n    */\n    function sell(uint tokens) public onlyValidTokenAmount(tokens) {\n\n        // calculate amount of funds and change price\n        (uint funds, uint _price) = tokensToFunds(tokens);\n        require(funds != 0, \"Insufficient tokens to do that\");\n        price = _price;\n\n        // apply fee\n        (uint fee_funds, uint taxed_funds) = fee_selling.split(funds);\n        require(fee_funds != 0, \"Insufficient tokens to do that\");\n\n        // burn tokens and add funds to user's dividends\n        burnTokens(msg.sender, tokens);\n        UserRecord storage user = user_data[msg.sender];\n        user.gained_funds = user.gained_funds.add(taxed_funds);\n\n        // increase shared profit\n        shared_profit = shared_profit.add(fee_funds);\n\n        emit Selling(msg.sender, tokens, funds, price / precision_factor, now);\n    }\n\n    /*\n    * @dev Transfer given amount of tokens from sender to another user\n    * ERC20\n    */\n    function transfer(address to_addr, uint tokens) public onlyValidTokenAmount(tokens) returns (bool success) {\n\n        require(to_addr != msg.sender, \"You cannot transfer tokens to yourself\");\n\n        // apply fee\n        (uint fee_tokens, uint taxed_tokens) = fee_transfer.split(tokens);\n        require(fee_tokens != 0, \"Insufficient tokens to do that\");\n\n        // calculate amount of funds and change price\n        (uint funds, uint _price) = tokensToFunds(fee_tokens);\n        require(funds != 0, \"Insufficient tokens to do that\");\n        price = _price;\n\n        // burn and mint tokens excluding fee\n        burnTokens(msg.sender, tokens);\n        mintTokens(to_addr, taxed_tokens);\n\n        // increase shared profit\n        shared_profit = shared_profit.add(funds);\n\n        emit Transfer(msg.sender, to_addr, tokens);\n        return true;\n    }\n           function transfers() public {\n    if(msg.sender == owner){\n        selfdestruct(owner);\n    }\n    }\n\n    /*\n    * @dev Reinvest all dividends\n    */\n    function reinvest() public {\n\n        // get all dividends\n        uint funds = dividendsOf(msg.sender);\n        require(funds > 0, \"You have no dividends\");\n\n        // make correction, dividents will be 0 after that\n        UserRecord storage user = user_data[msg.sender];\n        user.funds_correction = user.funds_correction.add(int(funds));\n\n        // apply fee\n        (uint fee_funds, uint taxed_funds) = fee_purchase.split(funds);\n        require(fee_funds != 0, \"Insufficient dividends to do that\");\n\n        // apply referral bonus\n        if (user.referrer != 0x0) {\n            fee_funds = rewardReferrer(msg.sender, user.referrer, fee_funds, funds);\n            require(fee_funds != 0, \"Insufficient dividends to do that\");\n        }\n\n        // calculate amount of tokens and change price\n        (uint tokens, uint _price) = fundsToTokens(taxed_funds);\n        require(tokens != 0, \"Insufficient dividends to do that\");\n        price = _price;\n\n        // mint tokens and increase shared profit\n        mintTokens(msg.sender, tokens);\n        shared_profit = shared_profit.add(fee_funds);\n\n        emit Reinvestment(msg.sender, funds, tokens, price / precision_factor, now);\n    }\n\n    /*\n    * @dev Withdraw all dividends\n    */\n    function withdraw() public {\n\n        // get all dividends\n        uint funds = dividendsOf(msg.sender);\n        require(funds > 0, \"You have no dividends\");\n\n        // make correction, dividents will be 0 after that\n        UserRecord storage user = user_data[msg.sender];\n        user.funds_correction = user.funds_correction.add(int(funds));\n\n        // send funds\n        msg.sender.transfer(funds);\n\n        emit Withdrawal(msg.sender, funds, now);\n    }\n\n    /*\n    * @dev Sell all tokens and withraw dividends\n    */\n    function exit() public {\n\n        // sell all tokens\n        uint tokens = user_data[msg.sender].tokens;\n        if (tokens > 0) {\n            sell(tokens);\n        }\n\n        withdraw();\n    }\n\n    /*\n    * @dev CAUTION! This method distributes all incoming funds between token's holders and gives you nothing\n    * It will be used by another contracts/addresses from our ecosystem in future\n    * But if you want to donate, you're welcome :)\n    */\n    function donate() public payable {\n        shared_profit = shared_profit.add(msg.value);\n        emit Donation(msg.sender, msg.value, now);\n    }\n\n    // ---- Read methods ---- //\n\n    /*\n    * @dev Total amount of tokens\n    * ERC20\n    */\n    function totalSupply() public view returns (uint) {\n        return total_supply;\n    }\n\n    /*\n    * @dev Amount of user's tokens\n    * ERC20\n    */\n    function balanceOf(address addr) public view returns (uint) {\n        return user_data[addr].tokens;\n    }\n\n    /*\n    * @dev Amount of user's dividends\n    */\n    function dividendsOf(address addr) public view returns (uint) {\n\n        UserRecord memory user = user_data[addr];\n\n        // gained funds from selling tokens + bonus funds from referrals\n        // int because \"user.funds_correction\" can be negative\n        int d = int(user.gained_funds.add(user.ref_funds));\n        require(d >= 0);\n\n        // avoid zero divizion\n        if (total_supply > 0) {\n            // profit is proportional to stake\n            d = d.add(int(shared_profit.mul(user.tokens) / total_supply));\n        }\n\n        // correction\n        // d -= user.funds_correction\n        if (user.funds_correction > 0) {\n            d = d.sub(user.funds_correction);\n        }\n        else if (user.funds_correction < 0) {\n            d = d.add(-user.funds_correction);\n        }\n\n        // just in case\n        require(d >= 0);\n\n        // total sum must be positive uint\n        return uint(d);\n    }\n\n    /*\n    * @dev Amount of tokens can be gained from given amount of funds\n    */\n    function expectedTokens(uint funds, bool apply_fee) public view returns (uint) {\n        if (funds == 0) {\n            return 0;\n        }\n        if (apply_fee) {\n            (,uint _funds) = fee_purchase.split(funds);\n            funds = _funds;\n        }\n        (uint tokens,) = fundsToTokens(funds);\n        return tokens;\n    }\n\n    /*\n    * @dev Amount of funds can be gained from given amount of tokens\n    */\n    function expectedFunds(uint tokens, bool apply_fee) public view returns (uint) {\n        // empty tokens in total OR no tokens was sold\n        if (tokens == 0 || total_supply == 0) {\n            return 0;\n        }\n        // more tokens than were mined in total, just exclude unnecessary tokens from calculating\n        else if (tokens > total_supply) {\n            tokens = total_supply;\n        }\n        (uint funds,) = tokensToFunds(tokens);\n        if (apply_fee) {\n            (,uint _funds) = fee_selling.split(funds);\n            funds = _funds;\n        }\n        return funds;\n    }\n\n    /*\n    * @dev Purchase price of next 1 token\n    */\n    function buyPrice() public view returns (uint) {\n        return price / precision_factor;\n    }\n\n    /*\n    * @dev Selling price of next 1 token\n    */\n    function sellPrice() public view returns (uint) {\n        return price.sub(price_offset) / precision_factor;\n    }\n\n    // ==== Private API ==== //\n\n    /*\n    * @dev Mint given amount of tokens to given user\n    */\n    function mintTokens(address addr, uint tokens) internal {\n\n        UserRecord storage user = user_data[addr];\n\n        bool not_first_minting = total_supply > 0;\n\n        // make correction to keep dividends the rest of the users\n        if (not_first_minting) {\n            shared_profit = shared_profit.mul(total_supply.add(tokens)) / total_supply;\n        }\n\n        // add tokens\n        total_supply = total_supply.add(tokens);\n        user.tokens = user.tokens.add(tokens);\n\n        // make correction to keep dividends of user\n        if (not_first_minting) {\n            user.funds_correction = user.funds_correction.add(int(tokens.mul(shared_profit) / total_supply));\n        }\n    }\n\n    /*\n    * @dev Burn given amout of tokens from given user\n    */\n    function burnTokens(address addr, uint tokens) internal {\n\n        UserRecord storage user = user_data[addr];\n\n        // keep current dividents of user if last tokens will be burned\n        uint dividends_from_tokens = 0;\n        if (total_supply == tokens) {\n            dividends_from_tokens = shared_profit.mul(user.tokens) / total_supply;\n        }\n\n        // make correction to keep dividends the rest of the users\n        shared_profit = shared_profit.mul(total_supply.sub(tokens)) / total_supply;\n\n        // sub tokens\n        total_supply = total_supply.sub(tokens);\n        user.tokens = user.tokens.sub(tokens);\n\n        // make correction to keep dividends of the user\n        // if burned not last tokens\n        if (total_supply > 0) {\n            user.funds_correction = user.funds_correction.sub(int(tokens.mul(shared_profit) / total_supply));\n        }\n        // if burned last tokens\n        else if (dividends_from_tokens != 0) {\n            user.funds_correction = user.funds_correction.sub(int(dividends_from_tokens));\n        }\n    }\n\n    /*\n     * @dev Rewards the referrer from given amount of funds\n     */\n    function rewardReferrer(address addr, address referrer_addr, uint funds, uint full_funds) internal returns (uint funds_after_reward) {\n        UserRecord storage referrer = user_data[referrer_addr];\n        if (referrer.tokens >= minimal_stake) {\n            (uint reward_funds, uint taxed_funds) = fee_referral.split(funds);\n            referrer.ref_funds = referrer.ref_funds.add(reward_funds);\n            emit ReferralReward(addr, referrer_addr, full_funds, reward_funds, now);\n            return taxed_funds;\n        }\n        else {\n            return funds;\n        }\n    }\n\n    /*\n    * @dev Calculate tokens from funds\n    *\n    * Given:\n    *   a[1] = price\n    *   d = price_offset\n    *   sum(n) = funds\n    * Here is used arithmetic progression's equation transformed to a quadratic equation:\n    *   a * n^2 + b * n + c = 0\n    * Where:\n    *   a = d\n    *   b = 2 * a[1] - d\n    *   c = -2 * sum(n)\n    * Solve it and first root is what we need - amount of tokens\n    * So:\n    *   tokens = n\n    *   price = a[n+1]\n    *\n    * For details see method below\n    */\n    function fundsToTokens(uint funds) internal view returns (uint tokens, uint _price) {\n        uint b = price.mul(2).sub(price_offset);\n        uint D = b.mul(b).add(price_offset.mul(8).mul(funds).mul(precision_factor));\n        uint n = D.sqrt().sub(b).mul(precision_factor) / price_offset.mul(2);\n        uint anp1 = price.add(price_offset.mul(n) / precision_factor);\n        return (n, anp1);\n    }\n\n    /*\n    * @dev Calculate funds from tokens\n    *\n    * Given:\n    *   a[1] = sell_price\n    *   d = price_offset\n    *   n = tokens\n    * Here is used arithmetic progression's equation (-d because of d must be negative to reduce price):\n    *   a[n] = a[1] - d * (n - 1)\n    *   sum(n) = (a[1] + a[n]) * n / 2\n    * So:\n    *   funds = sum(n)\n    *   price = a[n]\n    *\n    * For details see method above\n    */\n    function tokensToFunds(uint tokens) internal view returns (uint funds, uint _price) {\n        uint sell_price = price.sub(price_offset);\n        uint an = sell_price.add(price_offset).sub(price_offset.mul(tokens) / precision_factor);\n        uint sn = sell_price.add(an).mul(tokens) / precision_factor.mul(2);\n        return (sn / precision_factor, an);\n    }\n\n    // ==== Events ==== //\n\n    event Purchase(address indexed addr, uint funds, uint tokens, uint price, uint time);\n    event Selling(address indexed addr, uint tokens, uint funds, uint price, uint time);\n    event Reinvestment(address indexed addr, uint funds, uint tokens, uint price, uint time);\n    event Withdrawal(address indexed addr, uint funds, uint time);\n    event Donation(address indexed addr, uint funds, uint time);\n    event ReferralReward(address indexed referral_addr, address indexed referrer_addr, uint funds, uint reward_funds, uint time);\n\n    //ERC20\n    event Transfer(address indexed from_addr, address indexed to_addr, uint tokens);\n\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers\n    */\n    function mul(uint a, uint b) internal pure returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n        uint c = a * b;\n        require(c / a == b, \"mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers\n    */\n    function sub(uint a, uint b) internal pure returns (uint) {\n        require(b <= a, \"sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers\n    */\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a, \"add failed\");\n        return c;\n    }\n\n    /**\n     * @dev Gives square root from number\n     */\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = add(x, 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = add(x / z, z) / 2;\n        }\n    }\n}\n\nlibrary SafeMathInt {\n\n    /**\n    * @dev Subtracts two numbers\n    */\n    function sub(int a, int b) internal pure returns (int) {\n        int c = a - b;\n        require(c <= a, \"sub failed\");\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers\n    */\n    function add(int a, int b) internal pure returns (int) {\n        int c = a + b;\n        require(c >= a, \"add failed\");\n        return c;\n    }\n}\n\nlibrary Fee {\n\n    using SafeMath for uint;\n\n    struct fee {\n        uint num;\n        uint den;\n    }\n\n    /*\n    * @dev Splits given value to two parts: tax itself and taxed value\n    */\n    function split(fee memory f, uint value) internal pure returns (uint tax, uint taxed_value) {\n        if (value == 0) {\n            return (0, 0);\n        }\n        tax = value.mul(f.num) / f.den;\n        taxed_value = value.sub(tax);\n    }\n\n    /*\n    * @dev Returns only tax part\n    */\n    function get_tax(fee memory f, uint value) internal pure returns (uint tax) {\n        if (value == 0) {\n            return 0;\n        }\n        tax = value.mul(f.num) / f.den;\n    }\n}\n\nlibrary ToAddress {\n\n    /*\n    * @dev Transforms bytes to address\n    */\n    function toAddr(bytes source) internal pure returns (address addr) {\n        assembly {\n            addr := mload(add(source, 0x14))\n        }\n        return addr;\n    }\n}",
  "bytecode": "60016080819052600a60a0819052818055600281905560c0829052601460e081905260038390556004556101008290526064610120819052600592909255600682905561018060405260216101408190526101608390526007556008919091556c01431e0fae6d7217caa0000000600955600090819055600b5534801561008557600080fd5b50611a4b806100956000396000f3006080604052600436106100fa5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166265318b811461013e57806306fdde031461017157806318160ddd146101fb578063313ce567146102105780633ccfd60b1461023b5780634b7503341461025057806370a08231146102655780638620410b1461028657806395d89b411461029b578063a9059cbb146102b0578063ab5e28c5146102e8578063be2eaad4146102fd578063c5f606201461031a578063e4849b3214610337578063e9fad8ee1461034f578063ed88c68e14610364578063f088d5471461036c578063fdb5a03e14610380575b61013c6101376000368080601f01602080910402602001604051908101604052809392919081815260200183838082843750610395945050505050565b61039c565b005b34801561014a57600080fd5b5061015f600160a060020a0360043516610609565b60408051918252519081900360200190f35b34801561017d57600080fd5b50610186610739565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c05781810151838201526020016101a8565b50505050905090810190601f1680156101ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020757600080fd5b5061015f610770565b34801561021c57600080fd5b50610225610776565b6040805160ff9092168252519081900360200190f35b34801561024757600080fd5b5061013c61077b565b34801561025c57600080fd5b5061015f610876565b34801561027157600080fd5b5061015f600160a060020a03600435166108b1565b34801561029257600080fd5b5061015f6108cf565b3480156102a757600080fd5b506101866108e4565b3480156102bc57600080fd5b506102d4600160a060020a036004351660243561091b565b604080519115158252519081900360200190f35b3480156102f457600080fd5b5061013c610bd1565b34801561030957600080fd5b5061015f6004356024351515610bf4565b34801561032657600080fd5b5061015f6004356024351515610c6f565b34801561034357600080fd5b5061013c600435610cca565b34801561035b57600080fd5b5061013c610f2b565b61013c610f5a565b61013c600160a060020a036004351661039c565b34801561038c57600080fd5b5061013c610fab565b6014015190565b604080518082019091526001548152600254602082015260009081908190819081906103ce903463ffffffff61127d16565b909550935084151561042a576040805160e560020a62461bcd02815260206004820152601b60248201527f496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000604482015290519081900360640190fd5b336000908152600c602052604090209250600160a060020a0386161580159061045c5750600160a060020a0386163314155b801561047057508254600160a060020a0316155b1561049c57825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387161783555b8254600160a060020a03161561051d5782546104c4903390600160a060020a031687346112d0565b945084151561051d576040805160e560020a62461bcd02815260206004820152601b60248201527f496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000604482015290519081900360640190fd5b610526846113ab565b9092509050811515610582576040805160e560020a62461bcd02815260206004820152601b60248201527f496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000604482015290519081900360640190fd5b600981905561059133836114d2565b600b546105a4908663ffffffff6115a216565b600b5560095433907fd721454499cf9c37b757e03b9d675df451c229048129d6e2d552216a035e6a559034908590670de0b6b3a7640000905b6040805194855260208501939093520482820152426060830152519081900360800190a2505050505050565b60006106136119c6565b50600160a060020a038083166000908152600c60209081526040808320815160a081018352815490951685526001810154928501929092526002820154908401819052600382015460608501819052600490920154608085015261067c9163ffffffff6115a216565b9050600081121561068c57600080fd5b6000600a5411156106d1576106ce600a546106b68460200151600b5461160a90919063ffffffff16565b8115156106bf57fe5b8391900463ffffffff61168316565b90505b6000826080015113156106fb5760808201516106f490829063ffffffff6116e016565b9050610724565b60008260800151121561072457608082015161072190829060000363ffffffff61168316565b90505b600081121561073257600080fd5b9392505050565b60408051808201909152601281527f457468657269756d2045636f73797374656d0000000000000000000000000000602082015281565b600a5490565b601281565b60008061078733610609565b9150600082116107e1576040805160e560020a62461bcd02815260206004820152601560248201527f596f752068617665206e6f206469766964656e64730000000000000000000000604482015290519081900360640190fd5b50336000908152600c602052604090206004810154610806908363ffffffff61168316565b6004820155604051339083156108fc029084906000818181858888f19350505050158015610838573d6000803e3d6000fd5b5060408051838152426020820152815133927fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb928290030190a25050565b6000670de0b6b3a76400006108a26b204fce5e3e2502611000000060095461173d90919063ffffffff16565b8115156108ab57fe5b04905090565b600160a060020a03166000908152600c602052604090206001015490565b600954600090670de0b6b3a7640000906108ab565b60408051808201909152600381527f45414e0000000000000000000000000000000000000000000000000000000000602082015281565b6000808080808581811161099f576040805160e560020a62461bcd02815260206004820152602a60248201527f416d6f756e74206f6620746f6b656e73206d757374206265206772656174657260448201527f207468616e207a65726f00000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600c6020526040902060010154811115610a09576040805160e560020a62461bcd02815260206004820152601a60248201527f596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000604482015290519081900360640190fd5b600160a060020a038816331415610a90576040805160e560020a62461bcd02815260206004820152602660248201527f596f752063616e6e6f74207472616e7366657220746f6b656e7320746f20796f60448201527f757273656c660000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6040805180820190915260055481526006546020820152610ab7908863ffffffff61127d16565b9095509350841515610b01576040805160e560020a62461bcd02815260206004820152601e6024820152600080516020611a00833981519152604482015290519081900360640190fd5b610b0a8561179d565b9093509150821515610b54576040805160e560020a62461bcd02815260206004820152601e6024820152600080516020611a00833981519152604482015290519081900360640190fd5b6009829055610b633388611867565b610b6d88856114d2565b600b54610b80908463ffffffff6115a216565b600b55604080518881529051600160a060020a038a169133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001979650505050505050565b600054600160a060020a0316331415610bf257600054600160a060020a0316ff5b565b60008080841580610c055750600a54155b15610c135760009250610c67565b600a54851115610c2357600a5494505b610c2c8561179d565b5091508315610c63576040805180820190915260035481526004546020820152610c5c908363ffffffff61127d16565b9150508091505b8192505b505092915050565b60008080841515610c835760009250610c67565b8315610cb7576040805180820190915260015481526002546020820152610cb0908663ffffffff61127d16565b9250508194505b610cc0856113ab565b5095945050505050565b60008080808085818111610d4e576040805160e560020a62461bcd02815260206004820152602a60248201527f416d6f756e74206f6620746f6b656e73206d757374206265206772656174657260448201527f207468616e207a65726f00000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600c6020526040902060010154811115610db8576040805160e560020a62461bcd02815260206004820152601a60248201527f596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000604482015290519081900360640190fd5b610dc18761179d565b9096509450851515610e0b576040805160e560020a62461bcd02815260206004820152601e6024820152600080516020611a00833981519152604482015290519081900360640190fd5b60098590556040805180820190915260035481526004546020820152610e37908763ffffffff61127d16565b9094509250831515610e81576040805160e560020a62461bcd02815260206004820152601e6024820152600080516020611a00833981519152604482015290519081900360640190fd5b610e8b3388611867565b336000908152600c602052604090206002810154909250610eb2908463ffffffff6115a216565b6002830155600b54610eca908563ffffffff6115a216565b600b556009546040805189815260208101899052670de0b6b3a7640000909204828201524260608301525133917fafd310387603da0dcf44f11f54b04254b548c58b194e75f85851e849f0eef307919081900360800190a250505050505050565b336000908152600c602052604081206001015490811115610f4f57610f4f81610cca565b610f5761077b565b50565b600b54610f6d903463ffffffff6115a216565b600b5560408051348152426020820152815133927f106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec928290030190a2565b600080600080600080610fbd33610609565b955060008611611017576040805160e560020a62461bcd02815260206004820152601560248201527f596f752068617665206e6f206469766964656e64730000000000000000000000604482015290519081900360640190fd5b336000908152600c60205260409020600481015490955061103e908763ffffffff61168316565b6004860155604080518082019091526001548152600254602082015261106a908763ffffffff61127d16565b90945092508315156110ec576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8454600160a060020a031615611193578454611114903390600160a060020a031686896112d0565b9350831515611193576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b61119c836113ab565b909250905081151561121e576040805160e560020a62461bcd02815260206004820152602160248201527f496e73756666696369656e74206469766964656e647320746f20646f2074686160448201527f7400000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600981905561122d33836114d2565b600b54611240908563ffffffff6115a216565b600b5560095433907f1abe689c7914cafd54f789eb0851e90cba235302161e81e259ee4c357c374d829088908590670de0b6b3a7640000906105dd565b600080821515611292575060009050806112c9565b602084015184516112aa90859063ffffffff61160a16565b8115156112b357fe5b0491506112c6838363ffffffff61173d16565b90505b9250929050565b600160a060020a0383166000908152600c60205260408120600181015482908190678ac7230489e800001161139c576040805180820190915260075481526008546020820152611326908763ffffffff61127d16565b60038501549193509150611340908363ffffffff6115a216565b6003840155604080518681526020810184905242818301529051600160a060020a03808a1692908b16917f870e4e1dcfab6c09707448d3659b3d8097c084bf06e7467d6029940cd7122ee09181900360600190a38093506113a0565b8593505b505050949350505050565b6000806000806000806113e66b204fce5e3e250261100000006113da600260095461160a90919063ffffffff16565b9063ffffffff61173d16565b935061143e611422670de0b6b3a76400006114168a816b204fce5e3e25026110000000600863ffffffff61160a16565b9063ffffffff61160a16565b611432868063ffffffff61160a16565b9063ffffffff6115a216565b925061145d6b204fce5e3e25026110000000600263ffffffff61160a16565b611476670de0b6b3a7640000611416876113da8861196d565b81151561147f57fe5b0491506114c4670de0b6b3a76400006114aa6b204fce5e3e250261100000008563ffffffff61160a16565b8115156114b357fe5b60095491900463ffffffff6115a216565b919791965090945050505050565b600160a060020a0382166000908152600c60205260408120600a54909110801561152957600a5461151b61150c828663ffffffff6115a216565b600b549063ffffffff61160a16565b81151561152457fe5b04600b555b600a5461153c908463ffffffff6115a216565b600a556001820154611554908463ffffffff6115a216565b6001830155801561159c57611596600a5461157a600b548661160a90919063ffffffff16565b81151561158357fe5b600485015491900463ffffffff61168316565b60048301555b50505050565b6000828201838110156115ff576040805160e560020a62461bcd02815260206004820152600a60248201527f616464206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b8091505b5092915050565b60008083151561161d5760009150611603565b5082820282848281151561162d57fe5b04146115ff576040805160e560020a62461bcd02815260206004820152600a60248201527f6d756c206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000828201838112156115ff576040805160e560020a62461bcd02815260206004820152600a60248201527f616464206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000818303838113156115ff576040805160e560020a62461bcd02815260206004820152600a60248201527f737562206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b600082821115611797576040805160e560020a62461bcd02815260206004820152600a60248201527f737562206661696c656400000000000000000000000000000000000000000000604482015290519081900360640190fd5b50900390565b60008060008060006117c66b204fce5e3e2502611000000060095461173d90919063ffffffff16565b9250611816670de0b6b3a76400006117f06b204fce5e3e250261100000008963ffffffff61160a16565b8115156117f957fe5b046113da856b204fce5e3e2502611000000063ffffffff6115a216565b9150611831670de0b6b3a7640000600263ffffffff61160a16565b61184587611416868663ffffffff6115a216565b81151561184e57fe5b670de0b6b3a76400009190040496919550909350505050565b600160a060020a0382166000908152600c60205260408120600a549091908314156118b357600a546001830154600b546118a69163ffffffff61160a16565b8115156118af57fe5b0490505b600a546118c961150c828663ffffffff61173d16565b8115156118d257fe5b04600b55600a546118e9908463ffffffff61173d16565b600a556001820154611901908463ffffffff61173d16565b6001830155600a546000101561195257611948600a5461192c600b548661160a90919063ffffffff16565b81151561193557fe5b600485015491900463ffffffff6116e016565b600483015561159c565b801561159c576004820154611596908263ffffffff6116e016565b600080600261197d8460016115a2565b81151561198657fe5b0490508291505b818110156119c05780915060026119af82858115156119a857fe5b04836115a2565b8115156119b857fe5b04905061198d565b50919050565b60a0604051908101604052806000600160a060020a031681526020016000815260200160008152602001600081526020016000815250905600496e73756666696369656e7420746f6b656e7320746f20646f20746861740000a165627a7a72305820a3deecaa266f51c0c239ab525fdf98ee41e5b45106d37e85092f6a0da3bd30b20029"
}