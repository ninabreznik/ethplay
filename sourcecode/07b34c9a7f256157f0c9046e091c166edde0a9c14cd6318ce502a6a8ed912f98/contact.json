{
  "address": "0x03cd7d4706dfdb2c69efc12cabf2a9a1eb3fc981",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SNBTokenICO",
  "contractName": "SnbtokenICO",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-30\n*/\n\npragma solidity ^0.4.4;\n\n\ncontract SafeMath{\n  function safeMul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\t\n\tfunction safeSub(uint a, uint b) internal returns (uint) {\n    \tassert(b <= a);\n    \treturn a - b;\n  }\n\n\tfunction safeAdd(uint a, uint b) internal returns (uint) {\n    \tuint c = a + b;\n    \tassert(c >= a);\n    \treturn c;\n  }\n\tfunction assert(bool assertion) internal {\n\t    if (!assertion) {\n\t      throw;\n\t    }\n\t}\n}\n\n\ncontract ERC20{\n\n \tfunction totalSupply() constant returns (uint256 totalSupply) {}\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {}\n\tfunction transfer(address _recipient, uint256 _value) returns (bool success) {}\n\tfunction transferFrom(address _from, address _recipient, uint256 _value) returns (bool success) {}\n\tfunction approve(address _spender, uint256 _value) returns (bool success) {}\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n\tevent Transfer(address indexed _from, address indexed _recipient, uint256 _value);\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\n}\n\ncontract Snbtoken is ERC20, SafeMath{\n\t\n\tmapping(address => uint256) balances;\n\n\tuint256 public totalSupply;\n\n\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n\t    return balances[_owner];\n\t}\n\n\tfunction transfer(address _to, uint256 _value) returns (bool success){\n\t    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n\t    balances[_to] = safeAdd(balances[_to], _value);\n\t    Transfer(msg.sender, _to, _value);\n\t    return true;\n\t}\n\n\tmapping (address => mapping (address => uint256)) allowed;\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n\t    var _allowance = allowed[_from][msg.sender];\n\t    \n\t    balances[_to] = safeAdd(balances[_to], _value);\n\t    balances[_from] = safeSub(balances[_from], _value);\n\t    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n\t    Transfer(_from, _to, _value);\n\t    return true;\n\t}\n\n\tfunction approve(address _spender, uint256 _value) returns (bool success) {\n\t    allowed[msg.sender][_spender] = _value;\n\t    Approval(msg.sender, _spender, _value);\n\t    return true;\n\t}\n\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n\t    return allowed[_owner][_spender];\n\t}\n\tstring \tpublic name = \"SNB - Network for the Blind\";\n\tstring \tpublic symbol = \"SNB\";\n\tuint \tpublic decimals = 0;\n\tuint \tpublic INITIAL_SUPPLY = 70000000;\n\n\tfunction Snbtoken() {\n\t  totalSupply = INITIAL_SUPPLY;\n\t  balances[msg.sender] = INITIAL_SUPPLY;\n\t}\n}\n\ncontract SnbtokenICO is ERC20, SafeMath{\n\n\t\n\tmapping(address => uint256) balances;\n\n\tuint256 public totalSupply;\n\n\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n\t    return balances[_owner];\n\t}\n\n\tfunction transfer(address _to, uint256 _value) returns (bool success){\n\t    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n\t    balances[_to] = safeAdd(balances[_to], _value);\n\t    Transfer(msg.sender, _to, _value);\n\t    return true;\n\t}\n\n\tmapping (address => mapping (address => uint256)) allowed;\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n\t    var _allowance = allowed[_from][msg.sender];\n\t    \n\t    balances[_to] = safeAdd(balances[_to], _value);\n\t    balances[_from] = safeSub(balances[_from], _value);\n\t    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n\t    Transfer(_from, _to, _value);\n\t    return true;\n\t}\n\n\tfunction approve(address _spender, uint256 _value) returns (bool success) {\n\t    allowed[msg.sender][_spender] = _value;\n\t    Approval(msg.sender, _spender, _value);\n\t    return true;\n\t}\n\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n\t    return allowed[_owner][_spender];\n\t}\n\n\n\n\n\tuint256 public endTime;\n\tuint256 public price;\n\n\tmodifier during_offering_time(){\n\n\t    \n\t    \n\t    if(now>1513911600)\n\t\t{\n\t\t\t\tprice \t= 2231;\n\t\t}\n\t\telse if(now>1513306800)\n\t\t{\n\t\t    \tprice \t= 2491;\n\t\t}\n\t\telse if(now>1512702000)\n\t\t{\n\t\t    \tprice \t= 2708;\n\t\t}\n\t\telse if(now>1512025200)\n\t\t{\n\t\t    \tprice \t= 3032;\n\t\t}\n        else if(now>1511589600) ///1511589600 ///1511938800\n\t\t{\n\t\t    \tprice \t= 3249;\n\t\t}\n\t\telse\n\t\t{\n\t\t        price \t= 500;\n\t\t}\n\t    \n\t    \n\t    \n\t\tif (now >= endTime){\n\t\t\tthrow;\n\t\t}else{\n\t\t\t_;\n\t\t}\n\t}\n\n\tfunction () payable during_offering_time {\n\t\tcreateTokens(msg.sender);\n\t}\n\n\tfunction createTokens(address recipient) payable {\n\t\tif (msg.value == 0) {\n\t\t  throw;\n\t\t}\n\n\n\t\tuint tokens = safeDiv(safeMul(msg.value, price), 1 ether);\n\t\ttotalSupply = safeAdd(totalSupply, tokens);\n\n\t\tbalances[recipient] = safeAdd(balances[recipient], tokens);\n\n\t\tif (!owner.send(msg.value)) {\n\t\t  throw;\n\t\t}\n\t}\n\n\n\n\n\tstring \tpublic name = \"SNB - Network for the Blind\";\n\tstring \tpublic symbol = \"SNB\";\n\tuint \tpublic decimals = 0;\n\tuint256 public INITIAL_SUPPLY = 70000000;\n\tuint256 public SALES_SUPPLY = 130000000;\n\taddress public owner;\n\n\tfunction SnbtokenICO() {\n\t\ttotalSupply = INITIAL_SUPPLY;\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n\n\t\towner \t= msg.sender;\n\n\t\tprice \t= 500;\n\t\t\t\t\n\n\n\t\tendTime = 1514617200;\n\t}\n\n}",
  "bytecode": "60606040526040805190810160405280601b81526020017f534e42202d204e6574776f726b20666f722074686520426c696e64000000000081525060059080519060200190620000519291906200016a565b506040805190810160405280600381526020017f534e420000000000000000000000000000000000000000000000000000000000815250600690805190602001906200009f9291906200016a565b50600060075563042c1d806008556307bfa4806009553415620000c157600080fd5b6008546001819055506008546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101f4600481905550635a47397060038190555062000219565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001ad57805160ff1916838001178555620001de565b82800160010185558215620001de579182015b82811115620001dd578251825591602001919060010190620001c0565b5b509050620001ed9190620001f1565b5090565b6200021691905b8082111562000212576000816000905550600101620001f8565b5090565b90565b610f7480620002296000396000f3006060604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610186578063095ea7b31461021457806318160ddd1461026e57806323b872dd146102975780632ff2e9dc14610310578063313ce567146103395780633197cbb6146103625780635eaaa6991461038b57806370a08231146103b45780638da5cb5b1461040157806395d89b4114610456578063a035b1fe146104e4578063a9059cbb1461050d578063cedbbeee14610567578063dd62ed3e14610595575b635a3c75304211156100f5576108b760048190555061016b565b635a333ab042111561010f576109bb60048190555061016a565b635a2a003042111561012957610a94600481905550610169565b635a1fac7042111561014357610bd8600481905550610168565b635a1906e042111561015d57610cb1600481905550610167565b6101f46004819055505b5b5b5b5b6003544210151561017b57600080fd5b61018433610601565b005b341561019157600080fd5b610199610731565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101d95780820151818401526020810190506101be565b50505050905090810190601f1680156102065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021f57600080fd5b610254600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107cf565b604051808215151515815260200191505060405180910390f35b341561027957600080fd5b6102816108c1565b6040518082815260200191505060405180910390f35b34156102a257600080fd5b6102f6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108c7565b604051808215151515815260200191505060405180910390f35b341561031b57600080fd5b610323610b58565b6040518082815260200191505060405180910390f35b341561034457600080fd5b61034c610b5e565b6040518082815260200191505060405180910390f35b341561036d57600080fd5b610375610b64565b6040518082815260200191505060405180910390f35b341561039657600080fd5b61039e610b6a565b6040518082815260200191505060405180910390f35b34156103bf57600080fd5b6103eb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b70565b6040518082815260200191505060405180910390f35b341561040c57600080fd5b610414610bb8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561046157600080fd5b610469610bde565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104a957808201518184015260208101905061048e565b50505050905090810190601f1680156104d65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104ef57600080fd5b6104f7610c7c565b6040518082815260200191505060405180910390f35b341561051857600080fd5b61054d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c82565b604051808215151515815260200191505060405180910390f35b610593600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610601565b005b34156105a057600080fd5b6105eb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e07565b6040518082815260200191505060405180910390f35b60008034141561061057600080fd5b61062d61061f34600454610e8e565b670de0b6b3a7640000610ec1565b905061063b60015482610f02565b6001819055506106896000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610f02565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561072d57600080fd5b5050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107c75780601f1061079c576101008083540402835291602001916107c7565b820191906000526020600020905b8154815290600101906020018083116107aa57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60015481565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506109916000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610f02565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a1b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610f20565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a678184610f20565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60085481565b60075481565b60035481565b60095481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c745780601f10610c4957610100808354040283529160200191610c74565b820191906000526020600020905b815481529060010190602001808311610c5757829003601f168201915b505050505081565b60045481565b6000610ccc6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610f20565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d566000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610f02565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000808284029050610eb76000851480610eb25750838583811515610eaf57fe5b04145b610f39565b8091505092915050565b600080610ed060008411610f39565b8284811515610edb57fe5b049050610ef88385811515610eec57fe5b06828502018514610f39565b8091505092915050565b6000808284019050610f1684821015610f39565b8091505092915050565b6000610f2e83831115610f39565b818303905092915050565b801515610f4557600080fd5b505600a165627a7a72305820fe2fd05a1418889d0c9036ec68f7eb870abff4e96e154eeeb6d401f2b53228920029"
}