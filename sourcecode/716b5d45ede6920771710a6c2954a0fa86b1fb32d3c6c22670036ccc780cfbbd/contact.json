{
  "address": "0xb0f6905fa74ad35c0dc43ff60a2250488735dfc5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AccountRegistryLogic",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-04\n*/\n\npragma solidity 0.4.24;\n\n/**\n * @dev Pulled from OpenZeppelin: https://git.io/vbaRf\n *   When this is in a public release we will switch to not vendoring this file\n *\n * @title Eliptic curve signature operations\n *\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n */\n\nlibrary ECRecovery {\n\n  /**\n   * @dev Recover signer address from a message by using his signature\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n   */\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n\n    //Check the signature length\n    if (sig.length != 65) {\n      return (address(0));\n    }\n\n    // Extracting these values isn't possible without assembly\n    // solhint-disable no-inline-assembly\n    // Divide the signature in r, s and v variables\n    assembly {\n      r := mload(add(sig, 32))\n      s := mload(add(sig, 64))\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n\n}\n\n\n/**\n * @title SigningLogic is contract implementing signature recovery from typed data signatures\n * @notice Recovers signatures based on the SignTypedData implementation provided by ethSigUtil\n * @dev This contract is inherited by other contracts.\n */\ncontract SigningLogic {\n\n  // Signatures contain a nonce to make them unique. usedSignatures tracks which signatures\n  //  have been used so they can't be replayed\n  mapping (bytes32 => bool) public usedSignatures;\n\n  function burnSignatureDigest(bytes32 _signatureDigest, address _sender) internal {\n    bytes32 _txDataHash = keccak256(abi.encode(_signatureDigest, _sender));\n    require(!usedSignatures[_txDataHash], \"Signature not unique\");\n    usedSignatures[_txDataHash] = true;\n  }\n\n  bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\n    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n  );\n\n  bytes32 constant ATTESTATION_REQUEST_TYPEHASH = keccak256(\n    \"AttestationRequest(bytes32 dataHash,bytes32 nonce)\"\n  );\n\n  bytes32 constant ADD_ADDRESS_TYPEHASH = keccak256(\n    \"AddAddress(address addressToAdd,bytes32 nonce)\"\n  );\n\n  bytes32 constant REMOVE_ADDRESS_TYPEHASH = keccak256(\n    \"RemoveAddress(address addressToRemove,bytes32 nonce)\"\n  );\n\n  bytes32 constant PAY_TOKENS_TYPEHASH = keccak256(\n    \"PayTokens(address sender,address receiver,uint256 amount,bytes32 nonce)\"\n  );\n\n  bytes32 constant RELEASE_TOKENS_FOR_TYPEHASH = keccak256(\n    \"ReleaseTokensFor(address sender,uint256 amount,bytes32 nonce)\"\n  );\n\n  bytes32 constant ATTEST_FOR_TYPEHASH = keccak256(\n    \"AttestFor(address subject,address requester,uint256 reward,bytes32 dataHash,bytes32 requestNonce)\"\n  );\n\n  bytes32 constant CONTEST_FOR_TYPEHASH = keccak256(\n    \"ContestFor(address requester,uint256 reward,bytes32 requestNonce)\"\n  );\n\n  bytes32 constant REVOKE_ATTESTATION_FOR_TYPEHASH = keccak256(\n    \"RevokeAttestationFor(bytes32 link,bytes32 nonce)\"\n  );\n\n  bytes32 constant VOTE_FOR_TYPEHASH = keccak256(\n    \"VoteFor(uint16 choice,address voter,bytes32 nonce,address poll)\"\n  );\n\n  bytes32 constant LOCKUP_TOKENS_FOR_TYPEHASH = keccak256(\n    \"LockupTokensFor(address sender,uint256 amount,bytes32 nonce)\"\n  );\n\n  bytes32 DOMAIN_SEPARATOR;\n\n  constructor (string name, string version, uint256 chainId) public {\n    DOMAIN_SEPARATOR = hash(EIP712Domain({\n      name: name,\n      version: version,\n      chainId: chainId,\n      verifyingContract: this\n    }));\n  }\n\n  struct EIP712Domain {\n      string  name;\n      string  version;\n      uint256 chainId;\n      address verifyingContract;\n  }\n\n  function hash(EIP712Domain eip712Domain) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      EIP712DOMAIN_TYPEHASH,\n      keccak256(bytes(eip712Domain.name)),\n      keccak256(bytes(eip712Domain.version)),\n      eip712Domain.chainId,\n      eip712Domain.verifyingContract\n    ));\n  }\n\n  struct AttestationRequest {\n      bytes32 dataHash;\n      bytes32 nonce;\n  }\n\n  function hash(AttestationRequest request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      ATTESTATION_REQUEST_TYPEHASH,\n      request.dataHash,\n      request.nonce\n    ));\n  }\n\n  struct AddAddress {\n      address addressToAdd;\n      bytes32 nonce;\n  }\n\n  function hash(AddAddress request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      ADD_ADDRESS_TYPEHASH,\n      request.addressToAdd,\n      request.nonce\n    ));\n  }\n\n  struct RemoveAddress {\n      address addressToRemove;\n      bytes32 nonce;\n  }\n\n  function hash(RemoveAddress request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      REMOVE_ADDRESS_TYPEHASH,\n      request.addressToRemove,\n      request.nonce\n    ));\n  }\n\n  struct PayTokens {\n      address sender;\n      address receiver;\n      uint256 amount;\n      bytes32 nonce;\n  }\n\n  function hash(PayTokens request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      PAY_TOKENS_TYPEHASH,\n      request.sender,\n      request.receiver,\n      request.amount,\n      request.nonce\n    ));\n  }\n\n  struct AttestFor {\n      address subject;\n      address requester;\n      uint256 reward;\n      bytes32 dataHash;\n      bytes32 requestNonce;\n  }\n\n  function hash(AttestFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      ATTEST_FOR_TYPEHASH,\n      request.subject,\n      request.requester,\n      request.reward,\n      request.dataHash,\n      request.requestNonce\n    ));\n  }\n\n  struct ContestFor {\n      address requester;\n      uint256 reward;\n      bytes32 requestNonce;\n  }\n\n  function hash(ContestFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      CONTEST_FOR_TYPEHASH,\n      request.requester,\n      request.reward,\n      request.requestNonce\n    ));\n  }\n\n  struct RevokeAttestationFor {\n      bytes32 link;\n      bytes32 nonce;\n  }\n\n  function hash(RevokeAttestationFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      REVOKE_ATTESTATION_FOR_TYPEHASH,\n      request.link,\n      request.nonce\n    ));\n  }\n\n  struct VoteFor {\n      uint16 choice;\n      address voter;\n      bytes32 nonce;\n      address poll;\n  }\n\n  function hash(VoteFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      VOTE_FOR_TYPEHASH,\n      request.choice,\n      request.voter,\n      request.nonce,\n      request.poll\n    ));\n  }\n\n  struct LockupTokensFor {\n    address sender;\n    uint256 amount;\n    bytes32 nonce;\n  }\n\n  function hash(LockupTokensFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      LOCKUP_TOKENS_FOR_TYPEHASH,\n      request.sender,\n      request.amount,\n      request.nonce\n    ));\n  }\n\n  struct ReleaseTokensFor {\n    address sender;\n    uint256 amount;\n    bytes32 nonce;\n  }\n\n  function hash(ReleaseTokensFor request) private pure returns (bytes32) {\n    return keccak256(abi.encode(\n      RELEASE_TOKENS_FOR_TYPEHASH,\n      request.sender,\n      request.amount,\n      request.nonce\n    ));\n  }\n\n  function generateRequestAttestationSchemaHash(\n    bytes32 _dataHash,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(AttestationRequest(\n          _dataHash,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generateAddAddressSchemaHash(\n    address _addressToAdd,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(AddAddress(\n          _addressToAdd,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generateRemoveAddressSchemaHash(\n    address _addressToRemove,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(RemoveAddress(\n          _addressToRemove,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generatePayTokensSchemaHash(\n    address _sender,\n    address _receiver,\n    uint256 _amount,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(PayTokens(\n          _sender,\n          _receiver,\n          _amount,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generateAttestForDelegationSchemaHash(\n    address _subject,\n    address _requester,\n    uint256 _reward,\n    bytes32 _dataHash,\n    bytes32 _requestNonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(AttestFor(\n          _subject,\n          _requester,\n          _reward,\n          _dataHash,\n          _requestNonce\n        ))\n      )\n      );\n  }\n\n  function generateContestForDelegationSchemaHash(\n    address _requester,\n    uint256 _reward,\n    bytes32 _requestNonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(ContestFor(\n          _requester,\n          _reward,\n          _requestNonce\n        ))\n      )\n      );\n  }\n\n  function generateRevokeAttestationForDelegationSchemaHash(\n    bytes32 _link,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(RevokeAttestationFor(\n          _link,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generateVoteForDelegationSchemaHash(\n    uint16 _choice,\n    address _voter,\n    bytes32 _nonce,\n    address _poll\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(VoteFor(\n          _choice,\n          _voter,\n          _nonce,\n          _poll\n        ))\n      )\n      );\n  }\n\n  function generateLockupTokensDelegationSchemaHash(\n    address _sender,\n    uint256 _amount,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(LockupTokensFor(\n          _sender,\n          _amount,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function generateReleaseTokensDelegationSchemaHash(\n    address _sender,\n    uint256 _amount,\n    bytes32 _nonce\n  ) internal view returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR,\n        hash(ReleaseTokensFor(\n          _sender,\n          _amount,\n          _nonce\n        ))\n      )\n      );\n  }\n\n  function recoverSigner(bytes32 _hash, bytes _sig) internal pure returns (address) {\n    address signer = ECRecovery.recover(_hash, _sig);\n    require(signer != address(0));\n\n    return signer;\n  }\n}\n\n\n/**\n * @title Initializable\n * @dev The Initializable contract has an initializer address, and provides basic authorization control\n * only while in initialization mode. Once changed to production mode the inializer loses authority\n */\ncontract Initializable {\n  address public initializer;\n  bool public initializing;\n\n  event InitializationEnded();\n\n  /**\n   * @dev The Initializable constructor sets the initializer to the provided address\n   */\n  constructor(address _initializer) public {\n    initializer = _initializer;\n    initializing = true;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyDuringInitialization() {\n    require(msg.sender == initializer, 'Method can only be called by initializer');\n    require(initializing, 'Method can only be called during initialization');\n    _;\n  }\n\n  /**\n   * @dev Allows the initializer to end the initialization period\n   */\n  function endInitialization() public onlyDuringInitialization {\n    initializing = false;\n    emit InitializationEnded();\n  }\n\n}\n\n\n/**\n * @title Bloom account registry\n * @notice Account Registry Logic allows users to link multiple addresses to the same owner\n *\n */\ncontract AccountRegistryLogic is Initializable, SigningLogic {\n  /**\n   * @notice The AccountRegistry constructor configures the signing logic implementation\n   */\n  constructor(\n    address _initializer\n  ) public Initializable(_initializer) SigningLogic(\"Bloom Account Registry\", \"2\", 1) {}\n\n  event AddressLinked(address indexed currentAddress, address indexed newAddress, uint256 indexed linkId);\n  event AddressUnlinked(address indexed addressToRemove);\n\n  // Counter to generate unique link Ids\n  uint256 linkCounter;\n  mapping(address => uint256) public linkIds;\n\n  /**\n   * @notice Add an address to an existing id on behalf of a user to pay the gas costs\n   * @param _currentAddress Address to which user wants to link another address. May currently be linked to another address\n   * @param _currentAddressSig Signed message from address currently associated with account confirming intention\n   * @param _newAddress Address to add to account. Cannot currently be linked to another address\n   * @param _newAddressSig Signed message from new address confirming ownership by the sender\n   * @param _nonce hex string used when generating sigs to make them one time use\n   */\n  function linkAddresses(\n    address _currentAddress,\n    bytes _currentAddressSig,\n    address _newAddress,\n    bytes _newAddressSig,\n    bytes32 _nonce\n    ) external {\n      // Confirm newAddress is not linked to another account\n      require(linkIds[_newAddress] == 0);\n      // Confirm new address is signed by current address and is unused\n      validateLinkSignature(_currentAddress, _newAddress, _nonce, _currentAddressSig);\n\n      // Confirm current address is signed by new address and is unused\n      validateLinkSignature(_newAddress, _currentAddress, _nonce, _newAddressSig);\n\n      // Get linkId of current address if exists. Otherwise use incremented linkCounter\n      if (linkIds[_currentAddress] == 0) {\n        linkIds[_currentAddress] = ++linkCounter;\n      }\n      linkIds[_newAddress] = linkIds[_currentAddress];\n\n      emit AddressLinked(_currentAddress, _newAddress, linkIds[_currentAddress]);\n  }\n\n  /**\n   * @notice Remove an address from a link relationship\n   * @param _addressToRemove Address to unlink from all other addresses\n   * @param _unlinkSignature Signed message from address currently associated with account confirming intention to unlink\n   * @param _nonce hex string used when generating sigs to make them one time use\n   */\n  function unlinkAddress(\n    address _addressToRemove,\n    bytes32 _nonce,\n    bytes _unlinkSignature\n  ) external {\n    // Confirm unlink request is signed by sender and is unused\n    validateUnlinkSignature(_addressToRemove, _nonce, _unlinkSignature);\n    linkIds[_addressToRemove] = 0;\n\n    emit AddressUnlinked(_addressToRemove);\n  }\n\n  /**\n   * @notice Verify link signature is valid and unused V\n   * @param _currentAddress Address signing intention to link\n   * @param _addressToAdd Address being linked\n   * @param _nonce Unique nonce for this request\n   * @param _linkSignature Signature of address a\n   */\n  function validateLinkSignature(\n    address _currentAddress,\n    address _addressToAdd,\n    bytes32 _nonce,\n    bytes _linkSignature\n  ) private {\n    bytes32 _signatureDigest = generateAddAddressSchemaHash(_addressToAdd, _nonce);\n    require(_currentAddress == recoverSigner(_signatureDigest, _linkSignature));\n    burnSignatureDigest(_signatureDigest, _currentAddress);\n  }\n\n  /**\n   * @notice Verify unlink signature is valid and unused \n   * @param _addressToRemove Address being unlinked\n   * @param _nonce Unique nonce for this request\n   * @param _unlinkSignature Signature of senderAddress\n   */\n  function validateUnlinkSignature(\n    address _addressToRemove,\n    bytes32 _nonce,\n    bytes _unlinkSignature\n  ) private {\n\n    // require that address to remove is currently linked to senderAddress\n    require(linkIds[_addressToRemove] != 0, \"Address does not have active link\");\n\n    bytes32 _signatureDigest = generateRemoveAddressSchemaHash(_addressToRemove, _nonce);\n\n    require(_addressToRemove == recoverSigner(_signatureDigest, _unlinkSignature));\n    burnSignatureDigest(_signatureDigest, _addressToRemove);\n  }\n\n  /**\n   * @notice Submit link completed prior to deployment of this contract\n   * @dev Gives initializer privileges to write links during the initialization period without signatures\n   * @param _currentAddress Address to which user wants to link another address. May currently be linked to another address\n   * @param _newAddress Address to add to account. Cannot currently be linked to another address\n   */\n  function migrateLink(\n    address _currentAddress,\n    address _newAddress\n  ) external onlyDuringInitialization {\n    // Confirm newAddress is not linked to another account\n    require(linkIds[_newAddress] == 0);\n\n    // Get linkId of current address if exists. Otherwise use incremented linkCounter\n    if (linkIds[_currentAddress] == 0) {\n      linkIds[_currentAddress] = ++linkCounter;\n    }\n    linkIds[_newAddress] = linkIds[_currentAddress];\n\n    emit AddressLinked(_currentAddress, _newAddress, linkIds[_currentAddress]);\n  }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b5060405160208062001978833981018060405281019080805190602001909291905050506040805190810160405280601681526020017f426c6f6f6d204163636f756e74205265676973747279000000000000000000008152506040805190810160405280600181526020017f3200000000000000000000000000000000000000000000000000000000000000815250600183806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600060146101000a81548160ff0219169083151502179055505061014e6080604051908101604052808581526020018481526020018381526020013073ffffffffffffffffffffffffffffffffffffffff16815250610161640100000000026401000000009004565b60028160001916905550505050506103a5565b600060405180807f454950373132446f6d61696e28737472696e67206e616d652c737472696e672081526020017f76657273696f6e2c75696e7432353620636861696e49642c616464726573732081526020017f766572696679696e67436f6e74726163742900000000000000000000000000008152506052019050604051809103902082600001516040518082805190602001908083835b60208310151561021f57805182526020820191506020810190506020830392506101fa565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902083602001516040518082805190602001908083835b6020831015156102865780518252602082019150602081019050602083039250610261565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902084604001518560600151604051602001808660001916600019168152602001856000191660001916815260200184600019166000191681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001955050505050506040516020818303038152906040526040518082805190602001908083835b602083101515610371578051825260208201915060208101905060208303925061034c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b6115c380620003b56000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063245547a1146100935780632599f159146101345780637d88e1ea14610163578063976bd652146101c65780639ce110d71461022f578063a066447d14610286578063b397657d146102dd578063f978fd61146102f4575b600080fd5b34801561009f57600080fd5b50610132600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390803560001916906020019092919050505061033d565b005b34801561014057600080fd5b506101496105c8565b604051808215151515815260200191505060405180910390f35b34801561016f57600080fd5b506101c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105db565b005b3480156101d257600080fd5b5061022d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190803590602001908201803590602001919091929391929390505050610979565b005b34801561023b57600080fd5b50610244610a44565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029257600080fd5b506102c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a69565b6040518082815260200191505060405180910390f35b3480156102e957600080fd5b506102f2610a81565b005b34801561030057600080fd5b506103236004803603810190808035600019169060200190929190505050610c5d565b604051808215151515815260200191505060405180910390f35b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561038b57600080fd5b6103c987858389898080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050610c7d565b61040784888386868080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050610c7d565b6000600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156104a257600360008154600101919050819055600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548473ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167ff10c503146261f617db6e85ab6fe93a4657ce2ac77a5a432bc0b4b8b80c5c78f60405160405180910390a450505050505050565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4d6574686f642063616e206f6e6c792062652063616c6c656420627920696e6981526020017f7469616c697a657200000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600060149054906101000a900460ff16151561076f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4d6574686f642063616e206f6e6c792062652063616c6c656420647572696e6781526020017f20696e697469616c697a6174696f6e000000000000000000000000000000000081525060400191505060405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156107bd57600080fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561085857600360008154600101919050819055600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff10c503146261f617db6e85ab6fe93a4657ce2ac77a5a432bc0b4b8b80c5c78f60405160405180910390a45050565b6109b6848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050610cdf565b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f733f0753b35f5be0d1058a16fb5ce6ad687597f3003317a1724334dce894968460405160405180910390a250505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b6b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f4d6574686f642063616e206f6e6c792062652063616c6c656420627920696e6981526020017f7469616c697a657200000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600060149054906101000a900460ff161515610c15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4d6574686f642063616e206f6e6c792062652063616c6c656420647572696e6781526020017f20696e697469616c697a6174696f6e000000000000000000000000000000000081525060400191505060405180910390fd5b60008060146101000a81548160ff0219169083151502179055507f0cabb9c05f9eeeadb6765f175642f19876b512ba15100b1391420b714b0c3d0060405160405180910390a1565b60016020528060005260406000206000915054906101000a900460ff1681565b6000610c898484610e1d565b9050610c958183610f21565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515610cce57600080fd5b610cd88186611087565b5050505050565b600080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515610dbe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f4164647265737320646f6573206e6f74206861766520616374697665206c696e81526020017f6b0000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b610dc8848461121f565b9050610dd48183610f21565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515610e0d57600080fd5b610e178185611087565b50505050565b6000600254610e5960408051908101604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018560001916815250611323565b60405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515610eec5780518252602082019150602081019050602083039250610ec7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905092915050565b600080737a75cb349d9a9d4c2d3eb8a22cb3090222d8557b6319045a2585856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fb9578082015181840152602081019050610f9e565b50505050905090810190601f168015610fe65780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561100457600080fd5b505af4158015611018573d6000803e3d6000fd5b505050506040513d602081101561102e57600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561107d57600080fd5b8091505092915050565b600082826040516020018083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561111a57805182526020820191506020810190506020830392506110f5565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905060016000826000191660001916815260200190815260200160002060009054906101000a900460ff161515156111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5369676e6174757265206e6f7420756e6971756500000000000000000000000081525060200191505060405180910390fd5b6001806000836000191660001916815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b600060025461125b60408051908101604052808673ffffffffffffffffffffffffffffffffffffffff168152602001856000191681525061145d565b60405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156112ee57805182526020820191506020810190506020830392506112c9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905092915050565b600060405180807f4164644164647265737328616464726573732061646472657373546f4164642c81526020017f62797465733332206e6f6e636529000000000000000000000000000000000000815250602e0190506040518091039020826000015183602001516040516020018084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826000191660001916815260200193505050506040516020818303038152906040526040518082805190602001908083835b6020831015156114295780518252602082019150602081019050602083039250611404565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209050919050565b600060405180807f52656d6f76654164647265737328616464726573732061646472657373546f5281526020017f656d6f76652c62797465733332206e6f6e63652900000000000000000000000081525060340190506040518091039020826000015183602001516040516020018084600019166000191681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826000191660001916815260200193505050506040516020818303038152906040526040518082805190602001908083835b602083101515611563578051825260208201915060208101905060208303925061153e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090509190505600a165627a7a723058207694bdb87cd3deba57121013253434badb51b9ecefbe73a7a8974286bb91a680002900000000000000000000000028c7ba752fd214a54ea25f075ab459ab17bd5fd2",
  "constructorArguments": "00000000000000000000000028c7ba752fd214a54ea25f075ab459ab17bd5fd2",
  "libraries": [
    {
      "name": "ECRecovery",
      "address": "0x7a75cb349d9a9d4c2d3eb8a22cb3090222d8557b"
    }
  ]
}