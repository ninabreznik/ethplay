{
  "address": "0xdad9b31b8f349ebb57febd7aa486996f728a6131",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BatchTransferEtherAndVoken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-28\n*/\n\npragma solidity ^0.5.7;\n\n\n// Batch transfer Ether and Voken\n// \n// More info:\n//   https://vision.network\n//   https://voken.io\n//\n// Contact us:\n//   [email protected]\n//   [email protected]\n\n\n/**\n * @title SafeMath for uint256\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath256 {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract\n     * to the sender account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n    }\n\n    /**\n     * @return The address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0));\n        address __previousOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(__previousOwner, newOwner);\n    }\n\n    /**\n     * @dev Rescue compatible ERC20 Token\n     *\n     * @param tokenAddr ERC20 The address of the ERC20 token contract\n     * @param receiver The address of the receiver\n     * @param amount uint256\n     */\n    function rescueTokens(address tokenAddr, address receiver, uint256 amount) external onlyOwner {\n        IERC20 __token = IERC20(tokenAddr);\n        require(receiver != address(0));\n        uint256 __balance = __token.balanceOf(address(this));\n        \n        require(__balance >= amount);\n        assert(__token.transfer(receiver, amount));\n    }\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20{\n    function balanceOf(address owner) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n}\n\n\n/**\n * @title Batch Transfer Ether And Voken\n */\ncontract BatchTransferEtherAndVoken is Ownable{\n    using SafeMath256 for uint256;\n    \n    IERC20 VOKEN = IERC20(0x759a8f76a36B89c70df23f057f23E3359aac74D6);\n\n    /**\n     * @dev Batch transfer both.\n     */\n    function transfer(address payable[] memory accounts, uint256 etherValue, uint256 vokenValue) public payable {\n        uint256 __etherBalance = address(this).balance;\n        uint256 __vokenAllowance = VOKEN.allowance(msg.sender, address(this));\n\n        require(__etherBalance >= etherValue.mul(accounts.length));\n        require(__vokenAllowance >= vokenValue.mul(accounts.length));\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            accounts[i].transfer(etherValue);\n            assert(VOKEN.transferFrom(msg.sender, accounts[i], vokenValue));\n        }\n    }\n\n    /**\n     * @dev Batch transfer Ether.\n     */\n    function batchTtransferEther(address payable[] memory accounts, uint256 etherValue) public payable {\n        uint256 __etherBalance = address(this).balance;\n\n        require(__etherBalance >= etherValue.mul(accounts.length));\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            accounts[i].transfer(etherValue);\n        }\n    }\n\n    /**\n     * @dev Batch transfer Voken.\n     */\n    function batchTransferVoken(address payable[] memory accounts, uint256 vokenValue) public payable {\n        uint256 __vokenAllowance = VOKEN.allowance(msg.sender, address(this));\n\n        require(__vokenAllowance >= vokenValue.mul(accounts.length));\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            assert(VOKEN.transferFrom(msg.sender, accounts[i], vokenValue));\n        }\n    }\n}",
  "bytecode": "6080604052600180546001600160a01b031990811673759a8f76a36b89c70df23f057f23e3359aac74d6179091556000805490911633179055610921806100476000396000f3fe6080604052600436106100555760003560e01c8063416c2d3b1461005a5780637713e926146101015780638da5cb5b146101a6578063cea9d26f146101d7578063e1fb276c1461021a578063f2fde38b146102c2575b600080fd5b6100ff6004803603604081101561007057600080fd5b81019060208101813564010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460208302840111640100000000831117156100bf57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506102f5915050565b005b6100ff6004803603604081101561011757600080fd5b81019060208101813564010000000081111561013257600080fd5b82018360208201111561014457600080fd5b8035906020019184602083028401116401000000008311171561016657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061037e915050565b3480156101b257600080fd5b506101bb6104fc565b604080516001600160a01b039092168252519081900360200190f35b3480156101e357600080fd5b506100ff600480360360608110156101fa57600080fd5b506001600160a01b0381358116916020810135909116906040013561050b565b6100ff6004803603606081101561023057600080fd5b81019060208101813564010000000081111561024b57600080fd5b82018360208201111561025d57600080fd5b8035906020019184602083028401116401000000008311171561027f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610657565b3480156102ce57600080fd5b506100ff600480360360208110156102e557600080fd5b50356001600160a01b0316610850565b815130319061030b90839063ffffffff6108ca16565b81101561031757600080fd5b60005b83518110156103785783818151811061032f57fe5b60200260200101516001600160a01b03166108fc849081150290604051600060405180830381858888f1935050505015801561036f573d6000803e3d6000fd5b5060010161031a565b50505050565b60015460408051600160e11b636eb1769f02815233600482015230602482015290516000926001600160a01b03169163dd62ed3e916044808301926020929190829003018186803b1580156103d257600080fd5b505afa1580156103e6573d6000803e3d6000fd5b505050506040513d60208110156103fc57600080fd5b5051835190915061041490839063ffffffff6108ca16565b81101561042057600080fd5b60005b83518110156103785760015484516001600160a01b03909116906323b872dd90339087908590811061045157fe5b6020026020010151866040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156104c257600080fd5b505af11580156104d6573d6000803e3d6000fd5b505050506040513d60208110156104ec57600080fd5b50516104f457fe5b600101610423565b6000546001600160a01b031690565b6000546001600160a01b0316331461052257600080fd5b826001600160a01b03831661053657600080fd5b60408051600160e01b6370a0823102815230600482015290516000916001600160a01b038416916370a0823191602480820192602092909190829003018186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d60208110156105ad57600080fd5b50519050828110156105be57600080fd5b816001600160a01b031663a9059cbb85856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561061e57600080fd5b505af1158015610632573d6000803e3d6000fd5b505050506040513d602081101561064857600080fd5b505161065057fe5b5050505050565b60015460408051600160e11b636eb1769f028152336004820152306024820181905291519131926000926001600160a01b039091169163dd62ed3e916044808301926020929190829003018186803b1580156106b257600080fd5b505afa1580156106c6573d6000803e3d6000fd5b505050506040513d60208110156106dc57600080fd5b505185519091506106f490859063ffffffff6108ca16565b82101561070057600080fd5b845161071390849063ffffffff6108ca16565b81101561071f57600080fd5b60005b85518110156108485785818151811061073757fe5b60200260200101516001600160a01b03166108fc869081150290604051600060405180830381858888f19350505050158015610777573d6000803e3d6000fd5b5060015486516001600160a01b03909116906323b872dd90339089908590811061079d57fe5b6020026020010151876040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506040513d602081101561083857600080fd5b505161084057fe5b600101610722565b505050505050565b6000546001600160a01b0316331461086757600080fd5b6001600160a01b03811661087a57600080fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000826108d9575060006108ef565b50818102818382816108e757fe5b04146108ef57fe5b9291505056fea165627a7a723058201ed5f4d538070dcecfb92647a7da0d890ef9e70d8fd50a7100540e03e8f2367b0029"
}