{
  "address": "0xe2b8c03158d6b8fe62e2387143fc6d5bd92d76c8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NeuralControl",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-11\n*/\n\npragma solidity ^0.4.18;\n    library SafeMath {\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n            uint256 c = a * b;\n            assert(a == 0 || c / a == b);\n            return c;\n        }\n    \n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\n            // assert(b > 0); // Solidity automatically throws when dividing by 0\n            uint256 c = a / b;\n            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n            return c;\n        }\n    \n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n            assert(b <= a);\n            return a - b;\n        }\n    \n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\n            uint256 c = a + b;\n            assert(c >= a);\n            return c;\n        }\n    }\n    library ERC20Interface {\n        function totalSupply() public constant returns (uint);\n        function balanceOf(address tokenOwner) public constant returns (uint balance);\n        function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n        function transfer(address to, uint tokens) public returns (bool success);\n        function approve(address spender, uint tokens) public returns (bool success);\n        function transferFrom(address from, address to, uint tokens) public returns (bool success);\n        event Transfer(address indexed from, address indexed to, uint tokens);\n        event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    }\n    library ApproveAndCallFallBack {\n        function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n    }\n    contract owned {\n    \n    \n    \t    address public owner;\n    \n    \n    \t    function owned() payable public {\n    \t        owner = msg.sender;\n    \t    }\n    \t    \n    \t    modifier onlyOwner {\n    \t        require(owner == msg.sender);\n    \t        _;\n    \t    }\n    \n    \n    \t    function changeOwner(address _owner) onlyOwner public {\n    \t        owner = _owner;\n    \t    }\n    \t}\n    contract Crowdsale is owned {\n    \t    \n    \t    uint256 public totalSupply;\n    \t\n    \t    mapping (address => uint256) public balanceOf;\n    \n    \n    \t    event Transfer(address indexed from, address indexed to, uint256 value);\n    \t    \n    \t    function Crowdsale() payable owned() public {\n                totalSupply = 1000000000 * 1000000000000000000; \n                // ico\n    \t        balanceOf[this] = 900000000 * 1000000000000000000;   \n    \t        balanceOf[owner] = totalSupply - balanceOf[this];\n    \t        Transfer(this, owner, balanceOf[owner]);\n    \t    }\n    \n    \t    function () payable public {\n    \t        require(balanceOf[this] > 0);\n    \t        \n    \t        uint256 tokensPerOneEther = 1111 * 1000000000000000000;\n    \t        uint256 tokens = tokensPerOneEther * msg.value / 1000000000000000000;\n    \t        if (tokens > balanceOf[this]) {\n    \t            tokens = balanceOf[this];\n    \t            uint valueWei = tokens * 1000000000000000000 / tokensPerOneEther;\n    \t            msg.sender.transfer(msg.value - valueWei);\n    \t        }\n    \t        require(tokens > 0);\n    \t        balanceOf[msg.sender] += tokens;\n    \t        balanceOf[this] -= tokens;\n    \t        Transfer(this, msg.sender, tokens);\n    \t    }\n    \t}\n    contract NEURAL is Crowdsale {\n        \n            using SafeMath for uint256;\n            string  public name        = 'NEURAL';\n    \t    string  public symbol      = 'NEURAL';\n    \t    string  public standard    = 'NEURAL.CLUB';\n            \n    \t    uint8   public decimals    = 18;\n    \t    mapping (address => mapping (address => uint256)) internal allowed;\n    \t    \n    \t    function NEURAL() payable Crowdsale() public {}\n    \t    \n    \t    function transfer(address _to, uint256 _value) public {\n    \t        require(balanceOf[msg.sender] >= _value);\n    \t        balanceOf[msg.sender] -= _value;\n    \t        balanceOf[_to] += _value;\n    \t        Transfer(msg.sender, _to, _value);\n    \t    }\n    \t}\n    contract NeuralControl is NEURAL {\n    \t    function NeuralControl() payable NEURAL() public {}\n    \t    function withdraw() onlyOwner {    \n    \t        owner.transfer(this.balance);  \n    \t    }\n    \t    function killMe()  onlyOwner {\n    \t        selfdestruct(owner);\n    \t    }\n    \t}",
  "bytecode": "606060405260408051908101604052600681527f4e455552414c00000000000000000000000000000000000000000000000000006020820152600390805161004b92916020019061019c565b5060408051908101604052600681527f4e455552414c00000000000000000000000000000000000000000000000000006020820152600490805161009392916020019061019c565b5060408051908101604052600b81527f4e455552414c2e434c5542000000000000000000000000000000000000000000602082015260059080516100db92916020019061019c565b506006805460ff1916601217905560008054600160a060020a03338116600160a060020a03199092169190911782556b033b2e3c9fd0803ce80000006001908155308216808452600260205260408085206b02e87669c308736a04000000905591548454841685528285206b02e87669c308736a03ffffff199091019055835490921680845292819020547fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a3610237565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101dd57805160ff191683800117855561020a565b8280016001018555821561020a579182015b8281111561020a5782518255916020019190600101906101ef565b5061021692915061021a565b5090565b61023491905b808211156102165760008155600101610220565b90565b6106d0806102466000396000f3006060604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101f357806318160ddd1461027d578063313ce567146102a25780633ccfd60b146102cb5780635a3b7e42146102e057806370a08231146102f35780638da5cb5b1461031257806395d89b4114610341578063a6f9dae114610354578063a9059cbb14610373578063b603cd8014610395575b600160a060020a033016600090815260026020526040812054819081908190116100d757600080fd5b30600160a060020a0316600090815260026020526040902054683c3a38e5ab72fc00009350670de0b6b3a764000034850204925082111561017a57600160a060020a033016600090815260026020526040902054915082670de0b6b3a7640000830281151561014257fe5b04905033600160a060020a03166108fc8234039081150290604051600060405180830381858888f19350505050151561017a57600080fd5b6000821161018757600080fd5b600160a060020a0333811660008181526002602052604080822080548701905530909316808252908390208054869003905590917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3505050005b34156101fe57600080fd5b6102066103a8565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024257808201518382015260200161022a565b50505050905090810190601f16801561026f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028857600080fd5b610290610446565b60405190815260200160405180910390f35b34156102ad57600080fd5b6102b561044c565b60405160ff909116815260200160405180910390f35b34156102d657600080fd5b6102de610455565b005b34156102eb57600080fd5b6102066104ab565b34156102fe57600080fd5b610290600160a060020a0360043516610516565b341561031d57600080fd5b610325610528565b604051600160a060020a03909116815260200160405180910390f35b341561034c57600080fd5b610206610537565b341561035f57600080fd5b6102de600160a060020a03600435166105a2565b341561037e57600080fd5b6102de600160a060020a03600435166024356105ec565b34156103a057600080fd5b6102de61067b565b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561043e5780601f106104135761010080835404028352916020019161043e565b820191906000526020600020905b81548152906001019060200180831161042157829003601f168201915b505050505081565b60015481565b60065460ff1681565b60005433600160a060020a0390811691161461047057600080fd5b600054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156104a957600080fd5b565b60058054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561043e5780601f106104135761010080835404028352916020019161043e565b60026020526000908152604090205481565b600054600160a060020a031681565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561043e5780601f106104135761010080835404028352916020019161043e565b60005433600160a060020a039081169116146105bd57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0333166000908152600260205260409020548190101561061257600080fd5b600160a060020a033381166000818152600260205260408082208054869003905592851680825290839020805485019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35050565b60005433600160a060020a0390811691161461069657600080fd5b600054600160a060020a0316ff00a165627a7a723058200697e0615ff79519e9460d481769e27d243b5b7093272475f6b8e01216500cac0029"
}