{
  "address": "0xd3cf3b612bd696ce7204118efe88560295fd6797",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Fork",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\n/*\n    xgr_fork.sol\n    2.0.0\n    \n    Rajci 'iFA' Andor @ [emailÂ protected]\n*/\npragma solidity 0.4.18;\n\ncontract Owned {\n    /* Variables */\n    address public owner = msg.sender;\n    /* Externals */\n    function replaceOwner(address newOwner) external returns(bool success) {\n        require( isOwner() );\n        owner = newOwner;\n        return true;\n    }\n    /* Internals */\n    function isOwner() internal view returns(bool) {\n        return owner == msg.sender;\n    }\n    /* Modifiers */\n    modifier onlyForOwner {\n        require( isOwner() );\n        _;\n    }\n}\n\ncontract Token {\n    /*\n        This is just an abstract contract with the necessary functions\n    */\n    function mint(address owner, uint256 value) external returns (bool success) {}\n}\n\ncontract Fork is Owned {\n    /* Variables */\n    address public uploader;\n    address public tokenAddress;\n    /* Constructor */\n    function Fork(address _uploader) public {\n        uploader = _uploader;\n    }\n    /* Externals */\n    function changeTokenAddress(address newTokenAddress) external onlyForOwner {\n        tokenAddress = newTokenAddress;\n    }\n    function upload(address[] addr, uint256[] amount) external onlyForUploader {\n        require( addr.length == amount.length );\n        for ( uint256 a=0 ; a<addr.length ; a++ ) {\n            require( Token(tokenAddress).mint(addr[a], amount[a]) );\n        }\n    }\n    /* Modifiers */\n    modifier onlyForUploader {\n        require( msg.sender == uploader );\n        _;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"uploader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"upload\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_uploader\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "606060405260008054600160a060020a03191633600160a060020a0316179055341561002a57600080fd5b6040516020806103c78339810160405280805160018054600160a060020a03909216600160a060020a031990921691909117905550506103588061006f6000396000f3006060604052600436106100775763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166365fe2a0b811461007c578063743b8d87146100ab5780638da5cb5b146100d75780639d76ea58146100ea578063a39a45b7146100fd578063c9cda91f14610130575b600080fd5b341561008757600080fd5b61008f61014f565b604051600160a060020a03909116815260200160405180910390f35b34156100b657600080fd5b6100d5602460048035828101929082013591813591820191013561015e565b005b34156100e257600080fd5b61008f610270565b34156100f557600080fd5b61008f61027f565b341561010857600080fd5b61011c600160a060020a036004351661028e565b604051901515815260200160405180910390f35b341561013b57600080fd5b6100d5600160a060020a03600435166102d5565b600154600160a060020a031681565b60015460009033600160a060020a0390811691161461017c57600080fd5b83821461018857600080fd5b5060005b8381101561026957600254600160a060020a03166340c10f198686848181106101b157fe5b90506020020135600160a060020a031685858581811015156101cf57fe5b905060200201356000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561023b57600080fd5b6102c65a03f1151561024c57600080fd5b50505060405180519050151561026157600080fd5b60010161018c565b5050505050565b600054600160a060020a031681565b600254600160a060020a031681565b6000610298610317565b15156102a357600080fd5b5060008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b6102dd610317565b15156102e857600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60005433600160a060020a03908116911614905600a165627a7a7230582076c0bdc32109784b2c7e8a69ed6ea3a95af7a1ac5bb7170109cdafa18f75edc70029000000000000000000000000040c5d322a028706195336999efd8feeed5a476d",
  "constructorArguments": "000000000000000000000000040c5d322a028706195336999efd8feeed5a476d"
}