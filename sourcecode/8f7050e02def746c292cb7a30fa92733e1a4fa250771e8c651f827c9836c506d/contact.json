{
  "address": "0x9550050d102ff42a2a683a9fa23b8f3fb2b378c8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UniswapConnector",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\npragma solidity 0.4.24;\n\n\ninterface UniswapFactory {\n    function getExchange(address token) external view returns (address exchange);\n    function getToken(address exchange) external view returns (address token);\n    function getTokenWithId(uint256 tokenId) external view returns (address token);\n}\n\n\ncontract ErrorUtils {\n\n    event LogError(string methodSig, string errMsg);\n    event LogErrorWithHintBytes32(bytes32 indexed bytes32Value, string methodSig, string errMsg);\n    event LogErrorWithHintAddress(address indexed addressValue, string methodSig, string errMsg);\n\n}\n\n\ncontract SelfAuthorized {\n    modifier authorized() {\n        require(msg.sender == address(this), \"Method can only be called from this contract\");\n        _;\n    }\n}\n\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n\ncontract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\n}\n\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"DSAuth::_ SENDER_NOT_AUTHORIZED\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed _owner, address indexed _spender, uint _value);\n    event  Transfer(address indexed _from, address indexed _to, uint _value);\n    event  Deposit(address indexed _owner, uint _value);\n    event  Withdrawal(address indexed _owner, uint _value);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() public payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\ncontract UniswapExchange {\n\n    // Address of ERC20 token sold on this exchange\n    function tokenAddress() external view returns (address token);\n    // Address of Uniswap Factory\n    function factoryAddress() external view returns (address factory);\n    \n    // Get Prices\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\n\n    // Trade ETH to ERC20\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\n\n    // Trade ERC20 to ETH\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_tokens, uint256 deadline, address recipient) external returns (uint256  eth_bought);\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\n\n    // Trade ERC20 to ERC20\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\n\n}\n\n\ninterface ERC20 {\n\n    function name() external view returns(string);\n    function symbol() external view returns(string);\n    function decimals() external view returns(uint8);\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address tokenOwner) external view returns (uint balance);\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function approve(address spender, uint tokens) external returns (bool success);\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\ncontract Utils {\n\n    modifier addressValid(address _address) {\n        require(_address != address(0), \"Utils::_ INVALID_ADDRESS\");\n        _;\n    }\n\n}\n\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    // custom : not in original DSMath, putting it here for consistency, copied from SafeMath\n    function div(uint x, uint y) internal pure returns (uint z) {\n        z = x / y;\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n\nlibrary ECRecovery {\n\n    function recover(bytes32 _hash, bytes _sig)\n        internal\n        pure\n    returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (_sig.length != 65) {\n            return (address(0));\n        }\n\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            v := byte(0, mload(add(_sig, 96)))\n        }\n\n        if (v < 27) {\n            v += 27;\n        }\n\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(_hash, v, r, s);\n        }\n    }\n\n    function toEthSignedMessageHash(bytes32 _hash)\n        internal\n        pure\n    returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n        );\n    }\n}\n\n\ncontract Utils2 {\n    using ECRecovery for bytes32;\n    \n    function _recoverSigner(bytes32 _hash, bytes _signature) \n        internal\n        pure\n        returns(address _signer)\n    {\n        return _hash.toEthSignedMessageHash().recover(_signature);\n    }\n\n}\n\n\ncontract DSThing is DSNote, DSAuth, DSMath {\n\n    function S(string s) internal pure returns (bytes4) {\n        return bytes4(keccak256(s));\n    }\n\n}\n\n\ncontract MasterCopy is SelfAuthorized {\n  // masterCopy always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\n  // It should also always be ensured that the address is stored alone (uses a full word)\n    address masterCopy;\n\n  /// @dev Allows to upgrade the contract. This can only be done via a Safe transaction.\n  /// @param _masterCopy New contract address.\n    function changeMasterCopy(address _masterCopy)\n        public\n        authorized\n    {\n        // Master copy address cannot be null.\n        require(_masterCopy != 0, \"Invalid master copy address provided\");\n        masterCopy = _masterCopy;\n    }\n}\n\n\n\ncontract Config is DSNote, DSAuth, Utils {\n\n    WETH9 public weth9;\n    mapping (address => bool) public isAccountHandler;\n    mapping (address => bool) public isAdmin;\n    address[] public admins;\n    bool public disableAdminControl = false;\n    \n    event LogAdminAdded(address indexed _admin, address _by);\n    event LogAdminRemoved(address indexed _admin, address _by);\n\n    constructor() public {\n        admins.push(msg.sender);\n        isAdmin[msg.sender] = true;\n    }\n\n    modifier onlyAdmin(){\n        require(isAdmin[msg.sender], \"Config::_ SENDER_NOT_AUTHORIZED\");\n        _;\n    }\n\n    function setWETH9\n    (\n        address _weth9\n    ) \n        public\n        auth\n        note\n        addressValid(_weth9) \n    {\n        weth9 = WETH9(_weth9);\n    }\n\n    function setAccountHandler\n    (\n        address _accountHandler,\n        bool _isAccountHandler\n    )\n        public\n        auth\n        note\n        addressValid(_accountHandler)\n    {\n        isAccountHandler[_accountHandler] = _isAccountHandler;\n    }\n\n    function toggleAdminsControl() \n        public\n        auth\n        note\n    {\n        disableAdminControl = !disableAdminControl;\n    }\n\n    function isAdminValid(address _admin)\n        public\n        view\n        returns (bool)\n    {\n        if(disableAdminControl) {\n            return true;\n        } else {\n            return isAdmin[_admin];\n        }\n    }\n\n    function getAllAdmins()\n        public\n        view\n        returns(address[])\n    {\n        return admins;\n    }\n\n    function addAdmin\n    (\n        address _admin\n    )\n        external\n        note\n        onlyAdmin\n        addressValid(_admin)\n    {   \n        require(!isAdmin[_admin], \"Config::addAdmin ADMIN_ALREADY_EXISTS\");\n\n        admins.push(_admin);\n        isAdmin[_admin] = true;\n\n        emit LogAdminAdded(_admin, msg.sender);\n    }\n\n    function removeAdmin\n    (\n        address _admin\n    ) \n        external\n        note\n        onlyAdmin\n        addressValid(_admin)\n    {   \n        require(isAdmin[_admin], \"Config::removeAdmin ADMIN_DOES_NOT_EXIST\");\n        require(msg.sender != _admin, \"Config::removeAdmin ADMIN_NOT_AUTHORIZED\");\n\n        isAdmin[_admin] = false;\n\n        for (uint i = 0; i < admins.length - 1; i++) {\n            if (admins[i] == _admin) {\n                admins[i] = admins[admins.length - 1];\n                admins.length -= 1;\n                break;\n            }\n        }\n\n        emit LogAdminRemoved(_admin, msg.sender);\n    }\n}\n\n\ncontract Account is MasterCopy, DSNote, Utils, Utils2, ErrorUtils {\n\n    address[] public users;\n    mapping (address => bool) public isUser;\n    mapping (bytes32 => bool) public actionCompleted;\n\n    WETH9 public weth9;\n    Config public config;\n    bool public isInitialized = false;\n\n    event LogTransferBySystem(address indexed token, address indexed to, uint value, address by);\n    event LogTransferByUser(address indexed token, address indexed to, uint value, address by);\n    event LogUserAdded(address indexed user, address by);\n    event LogUserRemoved(address indexed user, address by);\n    event LogImplChanged(address indexed newImpl, address indexed oldImpl);\n\n    modifier initialized() {\n        require(isInitialized, \"Account::_ ACCOUNT_NOT_INITIALIZED\");\n        _;\n    }\n\n    modifier notInitialized() {\n        require(!isInitialized, \"Account::_ ACCOUNT_ALREADY_INITIALIZED\");\n        _;\n    }\n\n    modifier userExists(address _user) {\n        require(isUser[_user], \"Account::_ INVALID_USER\");\n        _;\n    }\n\n    modifier userDoesNotExist(address _user) {\n        require(!isUser[_user], \"Account::_ USER_DOES_NOT_EXISTS\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(config.isAdminValid(msg.sender), \"Account::_ INVALID_ADMIN_ACCOUNT\");\n        _;\n    }\n\n    modifier onlyHandler(){\n        require(config.isAccountHandler(msg.sender), \"Account::_ INVALID_ACC_HANDLER\");\n        _;\n    }\n\n    function init(address _user, address _config)\n        public \n        notInitialized\n    {\n        users.push(_user);\n        isUser[_user] = true;\n        config = Config(_config);\n        weth9 = config.weth9();\n        isInitialized = true;\n    }\n    \n    function getAllUsers() public view returns (address[]) {\n        return users;\n    }\n\n    function balanceFor(address _token) public view returns (uint _balance){\n        _balance = ERC20(_token).balanceOf(this);\n    }\n    \n    function transferBySystem\n    (   \n        address _token,\n        address _to,\n        uint _value\n    ) \n        external \n        onlyHandler\n        note \n        initialized\n    {\n        require(ERC20(_token).balanceOf(this) >= _value, \"Account::transferBySystem INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n        ERC20(_token).transfer(_to, _value);\n\n        emit LogTransferBySystem(_token, _to, _value, msg.sender);\n    }\n    \n    function transferByUser\n    (   \n        address _token,\n        address _to,\n        uint _value,\n        uint _salt,\n        bytes _signature\n    )\n        external\n        addressValid(_to)\n        note\n        initialized\n        onlyAdmin\n    {\n        bytes32 actionHash = _getTransferActionHash(_token, _to, _value, _salt);\n\n        if(actionCompleted[actionHash]) {\n            emit LogError(\"Account::transferByUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        if(ERC20(_token).balanceOf(this) < _value){\n            emit LogError(\"Account::transferByUser\", \"INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::transferByUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n        \n        if (_token == address(weth9)) {\n            weth9.withdraw(_value);\n            _to.transfer(_value);\n        } else {\n            require(ERC20(_token).transfer(_to, _value), \"Account::transferByUser TOKEN_TRANSFER_FAILED\");\n        }\n\n        emit LogTransferByUser(_token, _to, _value, signer);\n    }\n\n    function addUser\n    (\n        address _user,\n        uint _salt,\n        bytes _signature\n    )\n        external \n        note \n        addressValid(_user)\n        userDoesNotExist(_user)\n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_user, \"ADD_USER\", _salt);\n        if(actionCompleted[actionHash])\n        {\n            emit LogError(\"Account::addUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::addUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n\n        users.push(_user);\n        isUser[_user] = true;\n\n        emit LogUserAdded(_user, signer);\n    }\n\n    function removeUser\n    (\n        address _user,\n        uint _salt,\n        bytes _signature\n    ) \n        external\n        note\n        userExists(_user) \n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_user, \"REMOVE_USER\", _salt);\n\n        if(actionCompleted[actionHash]) {\n            emit LogError(\"Account::removeUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n        \n        if(users.length == 1){\n            emit LogError(\"Account::removeUser\",  \"ACC_SHOULD_HAVE_ATLEAST_ONE_USER\");\n            return;\n        }\n        \n        if(!isUser[signer]){\n            emit LogError(\"Account::removeUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n        \n        actionCompleted[actionHash] = true;\n\n        // should delete value from isUser map? delete isUser[_user]?\n        isUser[_user] = false;\n        for (uint i = 0; i < users.length - 1; i++) {\n            if (users[i] == _user) {\n                users[i] = users[users.length - 1];\n                users.length -= 1;\n                break;\n            }\n        }\n\n        emit LogUserRemoved(_user, signer);\n    }\n\n    function _getTransferActionHash\n    ( \n        address _token,\n        address _to,\n        uint _value,\n        uint _salt\n    ) \n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                address(this),\n                _token,\n                _to,\n                _value,\n                _salt\n            )\n        );\n    }\n\n    function _getUserActionHash\n    ( \n        address _user,\n        string _action,\n        uint _salt\n    ) \n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                address(this),\n                _user,\n                _action,\n                _salt\n            )\n        );\n    }\n\n    // to directly send ether to contract\n    function() external payable {\n        require(msg.data.length == 0 && msg.value > 0, \"Account::fallback INVALID_ETHER_TRANSFER\");\n\n        if(msg.sender != address(weth9)){\n            weth9.deposit.value(msg.value)();\n        }\n    }\n\n    function changeImpl\n    (\n        address _to,\n        uint _salt,\n        bytes _signature\n    )\n        external \n        note \n        addressValid(_to)\n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_to, \"CHANGE_ACCOUNT_IMPLEMENTATION\", _salt);\n        if(actionCompleted[actionHash])\n        {\n            emit LogError(\"Account::changeImpl\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::changeImpl\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n\n        address oldImpl = masterCopy;\n        this.changeMasterCopy(_to);\n        \n        emit LogImplChanged(_to, oldImpl);\n    }\n\n}\n\n\ncontract Escrow is DSNote, DSAuth {\n\n    event LogTransfer(address indexed token, address indexed to, uint value);\n    event LogTransferFromAccount(address indexed account, address indexed token, address indexed to, uint value);\n\n    function transfer\n    (\n        address _token,\n        address _to,\n        uint _value\n    )\n        public\n        note\n        auth\n    {\n        require(ERC20(_token).transfer(_to, _value), \"Escrow::transfer TOKEN_TRANSFER_FAILED\");\n        emit LogTransfer(_token, _to, _value);\n    }\n\n    function transferFromAccount\n    (\n        address _account,\n        address _token,\n        address _to,\n        uint _value\n    )\n        public\n        note\n        auth\n    {   \n        Account(_account).transferBySystem(_token, _to, _value);\n        emit LogTransferFromAccount(_account, _token, _to, _value);\n    }\n\n}\n\n// issue with deploying multiple instances of same type in truffle, hence the following two contracts\ncontract KernelEscrow is Escrow {\n\n}\n\ncontract ReserveEscrow is Escrow {\n    \n}\n\n\ninterface ExchangeConnector {\n\n    function tradeWithInputFixed\n    (   \n        Escrow _escrow,\n        address _srcToken,\n        address _destToken,\n        uint _srcTokenValue\n    )\n        external\n        returns (uint _destTokenValue, uint _srcTokenValueLeft);\n\n    function tradeWithOutputFixed\n    (   \n        Escrow _escrow,\n        address _srcToken,\n        address _destToken,\n        uint _srcTokenValue,\n        uint _maxDestTokenValue\n    )\n        external\n        returns (uint _destTokenValue, uint _srcTokenValueLeft);\n    \n\n    function getExpectedRate(address _srcToken, address _destToken, uint _srcTokenValue) \n        external\n        view\n        returns(uint _expectedRate, uint _slippageRate);\n    \n    function isTradeFeasible(address _srcToken, address _destToken, uint _srcTokenValue) \n        external\n        view\n        returns(bool);\n\n}\n\n\ncontract UniswapConnector is ExchangeConnector, DSThing, Utils {\n    UniswapFactory public uniswapFactory;\n\n    uint constant internal TOKEN_ALLOWED_SLIPPAGE = 4 * (10**16);\n    uint constant internal DEADLINE_DURATION = 2 * 60 * 60; // 2 hr\n\n    constructor(UniswapFactory _uniswapFactory) public {\n        uniswapFactory = _uniswapFactory;\n    }\n\n    function setUniswapFactory(UniswapFactory _uniswapFactory) \n        public\n        auth\n        addressValid(_uniswapFactory)\n    {\n        uniswapFactory = _uniswapFactory;\n    }\n\n    event LogTrade\n    (\n        address indexed _from,\n        address indexed _srcToken,\n        address indexed _destToken,\n        uint _srcTokenValue,\n        uint _maxDestTokenValue,\n        uint _destTokenValue,\n        uint _srcTokenValueLeft, \n        uint _exchangeRate\n    );\n\n    \n    function tradeWithInputFixed\n    (   \n        Escrow _escrow,\n        address _srcToken,\n        address _destToken,\n        uint _srcTokenValue\n    )\n        public    \n        note\n        auth\n        returns (uint _destTokenValue, uint _srcTokenValueLeft)\n    {      \n        require(_srcToken != _destToken, \"UniswapConnector::_validateTradeInputs TOKEN_ADDRS_SHOULD_NOT_MATCH\");\n        require(_isExchangeAvailable(_srcToken), \"UniswapConnector::_validateTradeInputs NO_EXCHNAGE_FOUND_FOR_SOURCE\");\n        require(_isExchangeAvailable(_destToken), \"UniswapConnector::_validateTradeInputs NO_EXCHNAGE_FOUND_FOR_DEST\");\n        require(ERC20(_srcToken).balanceOf(_escrow) >= _srcTokenValue, \"UniswapConnector::_validateTradeInputs INSUFFICIENT_BALANCE_IN_ESCROW\");\n\n        uint initialSrcTokenBalance = ERC20(_srcToken).balanceOf(this);\n        uint initialDestTokenBalance = ERC20(_destToken).balanceOf(this);\n        _escrow.transfer(_srcToken, this, _srcTokenValue);\n\n        address uniswapExchangeAddr = uniswapFactory.getExchange(_srcToken);\n        \n        ERC20(_srcToken).approve(uniswapExchangeAddr, 0);\n        ERC20(_srcToken).approve(uniswapExchangeAddr, _srcTokenValue);\n        \n        uint exchangeRate = _performTradeWithInputFixed(_srcToken, _destToken, _srcTokenValue);\n\n        _srcTokenValueLeft = sub(ERC20(_srcToken).balanceOf(this), initialSrcTokenBalance);\n        _destTokenValue = sub(ERC20(_destToken).balanceOf(this), initialDestTokenBalance);\n\n        _transfer(_destToken, _escrow, _destTokenValue);\n\n        if (_srcTokenValueLeft > 0) {\n            _transfer(_srcToken, _escrow, _srcTokenValueLeft);\n        }\n        \n        emit LogTrade(_escrow, _srcToken, _destToken, _srcTokenValue, _destTokenValue, _destTokenValue, _srcTokenValueLeft, exchangeRate);\n    }\n\n    function tradeWithOutputFixed\n    (   \n        Escrow _escrow,\n        address _srcToken,\n        address _destToken,\n        uint _srcTokenValue,\n        uint _maxDestTokenValue\n    )\n        public\n        note\n        auth\n        returns (uint _destTokenValue, uint _srcTokenValueLeft)\n    {   \n\n        require(_srcToken != _destToken, \"UniswapConnector::_validateTradeInputs TOKEN_ADDRS_SHOULD_NOT_MATCH\");\n        require(_isExchangeAvailable(_srcToken), \"UniswapConnector::_validateTradeInputs NO_EXCHNAGE_FOUND_FOR_SOURCE\");\n        require(_isExchangeAvailable(_destToken), \"UniswapConnector::_validateTradeInputs NO_EXCHNAGE_FOUND_FOR_DEST\");\n        require(ERC20(_srcToken).balanceOf(_escrow) >= _srcTokenValue, \"UniswapConnector::_validateTradeInputs INSUFFICIENT_BALANCE_IN_ESCROW\");\n\n        uint initialSrcTokenBalance = ERC20(_srcToken).balanceOf(this);\n        uint initialDestTokenBalance = ERC20(_destToken).balanceOf(this);\n        _escrow.transfer(_srcToken, this, _srcTokenValue);\n\n        address uniswapExchangeAddr = uniswapFactory.getExchange(_srcToken);\n\n        require(ERC20(_srcToken).approve(uniswapExchangeAddr, 0), \"UniswapConnector::tradeWithOutputFixed SRC_APPROVAL_FAILED\");\n        require(ERC20(_srcToken).approve(uniswapExchangeAddr, _srcTokenValue), \"UniswapConnector::tradeWithOutputFixed SRC_APPROVAL_FAILED\");\n\n        uint exchangeRate = _performTradeWithOutputFixed(_srcToken, _destToken, _maxDestTokenValue);\n\n        _srcTokenValueLeft = sub(ERC20(_srcToken).balanceOf(this), initialSrcTokenBalance);\n        _destTokenValue = sub(ERC20(_destToken).balanceOf(this), initialDestTokenBalance);\n\n        require(_transfer(_destToken, _escrow, _destTokenValue), \"UniswapConnector::tradeWithOutputFixed DEST_TOKEN_TRANSFER_FAILED\");\n\n        if(_srcTokenValueLeft > 0){\n            require(_transfer(_srcToken, _escrow, _srcTokenValueLeft), \"UniswapConnector::tradeWithOutputFixed SRC_TOKEN_TRANSFER_FAILED\");\n        }\n\n        emit LogTrade(_escrow, _srcToken, _destToken, _srcTokenValue, _maxDestTokenValue, _destTokenValue, _srcTokenValueLeft, exchangeRate);\n    } \n    \n    function getExpectedRate(address _srcToken, address _destToken, uint _srcTokenValue) \n        public\n        view\n        returns(uint _expectedRate, uint _slippageRate)\n    {\n        if(address(_srcToken) == address(_destToken)) {\n            return (0, 0);\n        }\n\n        if(!_isExchangeAvailable(_srcToken) || !_isExchangeAvailable(_destToken)) {\n            return (0, 0);\n        }\n\n        uint inputValue = _srcTokenValue; \n        uint outputValue; \n        uint exchangeRate;\n\n        (outputValue, exchangeRate) = _calcValuesForTokenToTokenInput(_srcToken, _destToken, inputValue);\n        // todo: make slippage 0 if its too low, define a low value\n        _expectedRate = exchangeRate;\n        _slippageRate = div(mul(exchangeRate, sub(WAD, TOKEN_ALLOWED_SLIPPAGE)), WAD);\n    }\n\n    function isTradeFeasible(address _srcToken, address _destToken, uint _srcTokenValue)\n        public\n        view\n        returns(bool)\n    {\n        uint slippageRate; \n\n        (, slippageRate) = getExpectedRate(\n            _srcToken,\n            _destToken,\n            _srcTokenValue\n        );\n\n            return slippageRate == 0 ? false : true;\n    }\n    \n    function _isExchangeAvailable(address _token)\n        internal\n        view\n        returns(bool)\n    {\n        address uniswapExchangeAddr = uniswapFactory.getExchange(_token);\n        return (uniswapExchangeAddr != address(0));\n    }\n\n    function _performTradeWithInputFixed(\n        address _srcToken,\n        address _destToken,\n        uint _srcTokenValue\n    )\n        internal\n        returns (uint _exchangeRate)\n    {\n        address uniswapExchangeAddr = uniswapFactory.getExchange(_srcToken);\n        UniswapExchange exchange = UniswapExchange(uniswapExchangeAddr);\n\n        uint inputValue = _srcTokenValue;\n        uint outputValue;\n\n        (outputValue, _exchangeRate) = _calcValuesForTokenToTokenInput(_srcToken, _destToken, inputValue);\n        \n        exchange.tokenToTokenSwapInput(\n            inputValue,\n            div(mul(outputValue, sub(WAD, TOKEN_ALLOWED_SLIPPAGE)), WAD),\n            1,\n            add(now,DEADLINE_DURATION),\n            _destToken\n        );\n\n    }\n\n    function _performTradeWithOutputFixed(\n        address _srcToken,\n        address _destToken,\n        uint _maxDestTokenValue\n    )\n        internal\n        returns (uint _exchangeRate)\n    {\n        address uniswapExchangeAddr = uniswapFactory.getExchange(_srcToken);\n        UniswapExchange exchange = UniswapExchange(uniswapExchangeAddr);\n\n        uint outputValue = _maxDestTokenValue;\n        uint inputValue; \n        uint inputValueB;\n   \n        (inputValue, _exchangeRate, inputValueB) = _calcValuesForTokenToTokenOutput(_srcToken, _destToken, outputValue);\n        \n        exchange.tokenToTokenSwapOutput(\n            outputValue,\n            div(mul(inputValue, add(WAD, TOKEN_ALLOWED_SLIPPAGE)),WAD),\n            div(mul(inputValueB, add(WAD, 20 * (10**16))),WAD),\n            add(now,DEADLINE_DURATION),\n            _destToken\n        );\n    }\n\n    function _calcValuesForTokenToTokenOutput\n    (\n        address _srcToken,\n        address _destToken,\n        uint _maxDestTokenValue\n    )\n        internal\n        view\n        returns\n        (\n            uint _inputValue,\n            uint _exchangeRate,\n            uint _inputValueB\n        )\n    {\n        uint inputReserveA;\n        uint outputReserveA;\n        uint inputReserveB;\n        uint outputReserveB;\n\n        (inputReserveA, outputReserveA, inputReserveB, outputReserveB) = _fetchReserveValues(_srcToken, _destToken);\n\n        uint outputValue = _maxDestTokenValue;\n        uint outputAmountB = _maxDestTokenValue;\n        uint inputAmountB = _calculateEtherTokenInput(outputAmountB, inputReserveB, outputReserveB);\n\n        // redundant variable for readability of the formala\n        // inputAmount from the first swap becomes outputAmount of the second swap\n        uint outputAmountA = inputAmountB;\n        uint inputAmountA = _calculateEtherTokenInput(outputAmountA, inputReserveA, outputReserveA);\n\n        _inputValue = inputAmountA;\n        _exchangeRate = div(mul(outputValue, WAD), _inputValue);\n        _inputValueB = inputAmountB;\n    }\n \n    function _calcValuesForTokenToTokenInput\n    (\n        address _srcToken,\n        address _destToken,\n        uint _srcTokenValue\n    ) \n        internal\n        view\n        returns\n        (\n            uint _outputValue,\n            uint _exchangeRate\n        )\n    {   \n        uint inputReserveA;\n        uint outputReserveA;\n        uint inputReserveB;\n        uint outputReserveB;\n\n        (inputReserveA, outputReserveA, inputReserveB, outputReserveB) = _fetchReserveValues(_srcToken, _destToken);\n\n        uint inputValue = _srcTokenValue;\n        uint inputAmountA = inputValue;\n\n        uint outputAmountA = _calculateEtherTokenOutput(inputAmountA, inputReserveA, outputReserveA);\n\n        // redundant variable for readability of the formala\n        // outputAmount from the first swap becomes inputAmount of the second swap\n        uint inputAmountB = outputAmountA;\n        uint outputAmountB = _calculateEtherTokenOutput(inputAmountB, inputReserveB, outputReserveB);\n\n        _outputValue = outputAmountB;\n        _exchangeRate = div(mul(_outputValue, WAD), inputValue);\n    }\n\n    function _fetchReserveValues(address _srcToken, address _destToken)\n        internal\n        view\n        returns(\n            uint _inputReserveA,\n            uint _outputReserveA,\n            uint _inputReserveB,\n            uint _outputReserveB\n        )\n    {\n        address exchangeAddrA = uniswapFactory.getExchange(_srcToken);\n        address exchangeAddrB = uniswapFactory.getExchange(_destToken);\n\n        _inputReserveA = ERC20(_srcToken).balanceOf(exchangeAddrA);\n        _outputReserveA = address(exchangeAddrA).balance;\n\n        _inputReserveB = address(exchangeAddrB).balance;\n        _outputReserveB = ERC20(_destToken).balanceOf(exchangeAddrB);\n    }\n\n    function _calculateEtherTokenOutput(uint _inputAmount, uint _inputReserve, uint _outputReserve) \n        internal\n        pure\n        returns (uint)\n    {\n        uint numerator = mul(mul(_inputAmount, _outputReserve), 997);\n        uint denominator = add(mul(_inputReserve,1000), mul(_inputAmount, 997));\n\n        return div(numerator, denominator);\n    }\n\n    function _calculateEtherTokenInput(uint _outputAmount, uint _inputReserve, uint _outputReserve)\n        internal\n        pure\n        returns (uint)\n    {\n        uint numerator = mul(mul(_outputAmount, _inputReserve), 1000);\n        uint denominator = mul(sub(_outputReserve, _outputAmount), 997);\n\n        return add(div(numerator, denominator), 1);\n    }\n\n    function _transfer\n    (\n        address _token,\n        address _to,\n        uint _value\n    )\n        internal\n        returns (bool)\n    {\n        return ERC20(_token).transfer(_to, _value);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcTokenValue\",\"type\":\"uint256\"}],\"name\":\"tradeWithInputFixed\",\"outputs\":[{\"name\":\"_destTokenValue\",\"type\":\"uint256\"},{\"name\":\"_srcTokenValueLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcTokenValue\",\"type\":\"uint256\"}],\"name\":\"isTradeFeasible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcTokenValue\",\"type\":\"uint256\"}],\"name\":\"getExpectedRate\",\"outputs\":[{\"name\":\"_expectedRate\",\"type\":\"uint256\"},{\"name\":\"_slippageRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcTokenValue\",\"type\":\"uint256\"},{\"name\":\"_maxDestTokenValue\",\"type\":\"uint256\"}],\"name\":\"tradeWithOutputFixed\",\"outputs\":[{\"name\":\"_destTokenValue\",\"type\":\"uint256\"},{\"name\":\"_srcTokenValueLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"name\":\"setUniswapFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_srcToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_destToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_srcTokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_maxDestTokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_destTokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_srcTokenValueLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"LogTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516020806122bd833981016040819052905160018054600160a060020a0319163390811790915590917fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a260028054600160a060020a031916600160a060020a039290921691909117905561222c806100916000396000f30060806040526004361061008a5763ffffffff60e060020a60003504166313af4035811461008f57806317fd9cc5146100b25780635d0b4e5c146100fb5780637a9e5e4b14610139578063809a9e551461015a5780638bdb2afa146101845780638da5cb5b146101b5578063bf7e214f146101ca578063c83ec89d146101df578063e04b677f14610212575b600080fd5b34801561009b57600080fd5b506100b0600160a060020a0360043516610233565b005b3480156100be57600080fd5b506100e2600160a060020a03600435811690602435811690604435166064356102ea565b6040805192835260208301919091528051918290030190f35b34801561010757600080fd5b50610125600160a060020a0360043581169060243516604435610b97565b604080519115158252519081900360200190f35b34801561014557600080fd5b506100b0600160a060020a0360043516610bc1565b34801561016657600080fd5b506100e2600160a060020a0360043581169060243516604435610c74565b34801561019057600080fd5b50610199610d24565b60408051600160a060020a039092168252519081900360200190f35b3480156101c157600080fd5b50610199610d33565b3480156101d657600080fd5b50610199610d42565b3480156101eb57600080fd5b506100e2600160a060020a0360043581169060243581169060443516606435608435610d51565b34801561021e57600080fd5b506100b0600160a060020a036004351661175c565b61024933600035600160e060020a031916611847565b151561028d576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206121c1833981519152604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b60408051348082526020820183815236938301849052600093849384938493849384936004359360243593849386933393600160e060020a03198a35169390928a929091606082018484808284376040519201829003965090945050505050a461036033600035600160e060020a031916611847565b15156103a4576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206121c1833981519152604482015290519081900360640190fd5b600160a060020a038b8116908b161415610442576040805160e560020a62461bcd02815260206004820152604360248201526000805160206121e183398151915260448201527f496e7075747320544f4b454e5f41444452535f53484f554c445f4e4f545f4d4160648201527f5443480000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b61044b8b611950565b15156104db576040805160e560020a62461bcd02815260206004820152604360248201526000805160206121e183398151915260448201527f496e70757473204e4f5f455843484e4147455f464f554e445f464f525f534f5560648201527f5243450000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6104e48a611950565b1515610574576040805160e560020a62461bcd02815260206004820152604160248201526000805160206121e183398151915260448201527f496e70757473204e4f5f455843484e4147455f464f554e445f464f525f44455360648201527f5400000000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b888b600160a060020a03166370a082318e6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156105d057600080fd5b505af11580156105e4573d6000803e3d6000fd5b505050506040513d60208110156105fa57600080fd5b5051101561068c576040805160e560020a62461bcd02815260206004820152604560248201526000805160206121e183398151915260448201527f496e7075747320494e53554646494349454e545f42414c414e43455f494e5f4560648201527f5343524f57000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6040805160e060020a6370a082310281523060048201529051600160a060020a038d16916370a082319160248083019260209291908290030181600087803b1580156106d757600080fd5b505af11580156106eb573d6000803e3d6000fd5b505050506040513d602081101561070157600080fd5b50516040805160e060020a6370a082310281523060048201529051919750600160a060020a038c16916370a08231916024808201926020929091908290030181600087803b15801561075257600080fd5b505af1158015610766573d6000803e3d6000fd5b505050506040513d602081101561077c57600080fd5b5051604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a038e81166004830152306024830152604482018d90529151929750908e169163beabacc89160648082019260009290919082900301818387803b1580156107f257600080fd5b505af1158015610806573d6000803e3d6000fd5b50505050600260009054906101000a9004600160a060020a0316600160a060020a03166306f2bf628c6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561087a57600080fd5b505af115801561088e573d6000803e3d6000fd5b505050506040513d60208110156108a457600080fd5b5051604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a03808416600483015260006024830181905292519397508e169263095ea7b392604480840193602093929083900390910190829087803b15801561091757600080fd5b505af115801561092b573d6000803e3d6000fd5b505050506040513d602081101561094157600080fd5b5050604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018c90529151918d169163095ea7b3916044808201926020929091908290030181600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050506040513d60208110156109d957600080fd5b506109e790508b8b8b6119e1565b6040805160e060020a6370a082310281523060048201529051919450610a6b91600160a060020a038e16916370a082319160248083019260209291908290030181600087803b158015610a3957600080fd5b505af1158015610a4d573d6000803e3d6000fd5b505050506040513d6020811015610a6357600080fd5b505187611b5f565b6040805160e060020a6370a082310281523060048201529051919850610aef91600160a060020a038d16916370a082319160248083019260209291908290030181600087803b158015610abd57600080fd5b505af1158015610ad1573d6000803e3d6000fd5b505050506040513d6020811015610ae757600080fd5b505186611b5f565b9750610afc8a8d8a611b6f565b506000871115610b1357610b118b8d89611b6f565b505b89600160a060020a03168b600160a060020a03168d600160a060020a03167fca2c35f41e3c93e960780ee310865b11d03fc119da35b1e769970a0189da71df8c8c8d8d8a604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a450505050505094509492505050565b600080610ba5858585610c74565b9150508015610bb5576001610bb8565b60005b95945050505050565b610bd733600035600160e060020a031916611847565b1515610c1b576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206121c1833981519152604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b600080600080600086600160a060020a031688600160a060020a03161415610ca25760009450849350610d19565b610cab88611950565b1580610cbd5750610cbb87611950565b155b15610cce5760009450849350610d19565b859250610cdc888885611c0f565b95509150849050610d16610d0882610d03670de0b6b3a7640000668e1bc9bf040000611b5f565b611c88565b670de0b6b3a7640000611cb0565b93505b505050935093915050565b600254600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031681565b60408051348082526020820183815236938301849052600093849384938493849384936004359360243593849386933393600160e060020a03198a35169390928a929091606082018484808284376040519201829003965090945050505050a4610dc733600035600160e060020a031916611847565b1515610e0b576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206121c1833981519152604482015290519081900360640190fd5b600160a060020a038c8116908c161415610ea9576040805160e560020a62461bcd02815260206004820152604360248201526000805160206121e183398151915260448201527f496e7075747320544f4b454e5f41444452535f53484f554c445f4e4f545f4d4160648201527f5443480000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b610eb28c611950565b1515610f42576040805160e560020a62461bcd02815260206004820152604360248201526000805160206121e183398151915260448201527f496e70757473204e4f5f455843484e4147455f464f554e445f464f525f534f5560648201527f5243450000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b610f4b8b611950565b1515610fdb576040805160e560020a62461bcd02815260206004820152604160248201526000805160206121e183398151915260448201527f496e70757473204e4f5f455843484e4147455f464f554e445f464f525f44455360648201527f5400000000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b898c600160a060020a03166370a082318f6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b15801561103757600080fd5b505af115801561104b573d6000803e3d6000fd5b505050506040513d602081101561106157600080fd5b505110156110f3576040805160e560020a62461bcd02815260206004820152604560248201526000805160206121e183398151915260448201527f496e7075747320494e53554646494349454e545f42414c414e43455f494e5f4560648201527f5343524f57000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6040805160e060020a6370a082310281523060048201529051600160a060020a038e16916370a082319160248083019260209291908290030181600087803b15801561113e57600080fd5b505af1158015611152573d6000803e3d6000fd5b505050506040513d602081101561116857600080fd5b50516040805160e060020a6370a082310281523060048201529051919750600160a060020a038d16916370a08231916024808201926020929091908290030181600087803b1580156111b957600080fd5b505af11580156111cd573d6000803e3d6000fd5b505050506040513d60208110156111e357600080fd5b5051604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a038f81166004830152306024830152604482018e90529151929750908f169163beabacc89160648082019260009290919082900301818387803b15801561125957600080fd5b505af115801561126d573d6000803e3d6000fd5b50505050600260009054906101000a9004600160a060020a0316600160a060020a03166306f2bf628d6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156112e157600080fd5b505af11580156112f5573d6000803e3d6000fd5b505050506040513d602081101561130b57600080fd5b5051604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a03808416600483015260006024830181905292519397508f169263095ea7b392604480840193602093929083900390910190829087803b15801561137e57600080fd5b505af1158015611392573d6000803e3d6000fd5b505050506040513d60208110156113a857600080fd5b50511515611414576040805160e560020a62461bcd02815260206004820152603a60248201526000805160206121a183398151915260448201527f744669786564205352435f415050524f56414c5f4641494c4544000000000000606482015290519081900360840190fd5b8b600160a060020a031663095ea7b3858c6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561147757600080fd5b505af115801561148b573d6000803e3d6000fd5b505050506040513d60208110156114a157600080fd5b5051151561150d576040805160e560020a62461bcd02815260206004820152603a60248201526000805160206121a183398151915260448201527f744669786564205352435f415050524f56414c5f4641494c4544000000000000606482015290519081900360840190fd5b6115188c8c8b611cc5565b6040805160e060020a6370a08231028152306004820152905191945061156a91600160a060020a038f16916370a082319160248083019260209291908290030181600087803b158015610a3957600080fd5b6040805160e060020a6370a0823102815230600482015290519198506115bc91600160a060020a038e16916370a082319160248083019260209291908290030181600087803b158015610abd57600080fd5b97506115c98b8e8a611b6f565b1515611659576040805160e560020a62461bcd02815260206004820152604160248201526000805160206121a183398151915260448201527f74466978656420444553545f544f4b454e5f5452414e534645525f4641494c4560648201527f4400000000000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b60008711156116d75761166d8c8e89611b6f565b15156116d7576040805160e560020a62461bcd02815260206004820152602481018290526000805160206121a183398151915260448201527f744669786564205352435f544f4b454e5f5452414e534645525f4641494c4544606482015290519081900360840190fd5b8a600160a060020a03168c600160a060020a03168e600160a060020a03167fca2c35f41e3c93e960780ee310865b11d03fc119da35b1e769970a0189da71df8d8d8d8d8a604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390a45050505050509550959350505050565b61177233600035600160e060020a031916611847565b15156117b6576040805160e560020a62461bcd02815260206004820152601f60248201526000805160206121c1833981519152604482015290519081900360640190fd5b80600160a060020a0381161515611817576040805160e560020a62461bcd02815260206004820152601860248201527f5574696c733a3a5f20494e56414c49445f414444524553530000000000000000604482015290519081900360640190fd5b506002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383163014156118625750600161194a565b600154600160a060020a03848116911614156118805750600161194a565b600054600160a060020a0316151561189a5750600061194a565b60008054604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a038781166004830152306024830152600160e060020a0319871660448301529151919092169263b700961392606480820193602093909283900390910190829087803b15801561191b57600080fd5b505af115801561192f573d6000803e3d6000fd5b505050506040513d602081101561194557600080fd5b505190505b92915050565b6002546040805160e160020a6303795fb1028152600160a060020a0384811660048301529151600093849316916306f2bf6291602480830192602092919082900301818787803b1580156119a357600080fd5b505af11580156119b7573d6000803e3d6000fd5b505050506040513d60208110156119cd57600080fd5b5051600160a060020a031615159392505050565b6002546040805160e160020a6303795fb1028152600160a060020a0386811660048301529151600093849384938493849392909216916306f2bf629160248082019260209290919082900301818787803b158015611a3e57600080fd5b505af1158015611a52573d6000803e3d6000fd5b505050506040513d6020811015611a6857600080fd5b50519350839250859150611a7d888884611c0f565b95509050600160a060020a03831663ddf7e1a783611ab1610d0885610d03670de0b6b3a7640000668e1bc9bf040000611b5f565b6001611abf42611c20611e65565b8c6040518663ffffffff1660e060020a0281526004018086815260200185815260200184815260200183815260200182600160a060020a0316600160a060020a0316815260200195505050505050602060405180830381600087803b158015611b2757600080fd5b505af1158015611b3b573d6000803e3d6000fd5b505050506040513d6020811015611b5157600080fd5b509498975050505050505050565b8082038281111561194a57600080fd5b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015260248201849052915160009286169163a9059cbb91604480830192602092919082900301818787803b158015611bdb57600080fd5b505af1158015611bef573d6000803e3d6000fd5b505050506040513d6020811015611c0557600080fd5b5051949350505050565b6000806000806000806000806000806000611c2a8e8e611e75565b929b50909950975095508b9450849350611c45848a8a612091565b9250829150611c55828888612091565b9050809a50611c75611c6f8c670de0b6b3a7640000611c88565b86611cb0565b9950505050505050505050935093915050565b6000811580611ca5575050808202828282811515611ca257fe5b04145b151561194a57600080fd5b60008183811515611cbd57fe5b049392505050565b6002546040805160e160020a6303795fb1028152600160a060020a03868116600483015291516000938493849384938493849316916306f2bf6291602480830192602092919082900301818787803b158015611d2057600080fd5b505af1158015611d34573d6000803e3d6000fd5b505050506040513d6020811015611d4a57600080fd5b50519450849350869250611d5f8989856120e3565b9097509092509050600160a060020a03841663b040d54584611d97610d0886610d03670de0b6b3a7640000668e1bc9bf040000611e65565b611db8610d0886610d03670de0b6b3a76400006702c68af0bb140000611e65565b611dc442611c20611e65565b8d6040518663ffffffff1660e060020a0281526004018086815260200185815260200184815260200183815260200182600160a060020a0316600160a060020a0316815260200195505050505050602060405180830381600087803b158015611e2c57600080fd5b505af1158015611e40573d6000803e3d6000fd5b505050506040513d6020811015611e5657600080fd5b50959998505050505050505050565b8082018281101561194a57600080fd5b6002546040805160e160020a6303795fb1028152600160a060020a03858116600483015291516000938493849384938493849316916306f2bf6291602480830192602092919082900301818787803b158015611ed057600080fd5b505af1158015611ee4573d6000803e3d6000fd5b505050506040513d6020811015611efa57600080fd5b50516002546040805160e160020a6303795fb1028152600160a060020a038b8116600483015291519395509116916306f2bf62916024808201926020929091908290030181600087803b158015611f5057600080fd5b505af1158015611f64573d6000803e3d6000fd5b505050506040513d6020811015611f7a57600080fd5b50516040805160e060020a6370a08231028152600160a060020a0385811660048301529151929350908a16916370a08231916024808201926020929091908290030181600087803b158015611fce57600080fd5b505af1158015611fe2573d6000803e3d6000fd5b505050506040513d6020811015611ff857600080fd5b50516040805160e060020a6370a08231028152600160a060020a0384811660048301819052925193995080861631985091319650908916916370a08231916024808201926020929091908290030181600087803b15801561205857600080fd5b505af115801561206c573d6000803e3d6000fd5b505050506040513d602081101561208257600080fd5b50519598949750929550505050565b60008060006120ab6120a38786611c88565b6103e5611c88565b91506120cd6120bc866103e8611c88565b6120c8886103e5611c88565b611e65565b90506120d98282611cb0565b9695505050505050565b6000806000806000806000806000806000806120ff8f8f611e75565b929b50909950975095508c945084935061211a848888612161565b925082915061212a828a8a612161565b9050809b5061214a61214486670de0b6b3a7640000611c88565b8d611cb0565b9a5082995050505050505050505093509350939050565b600080600061217b6121738787611c88565b6103e8611c88565b915061218a6120a38588611b5f565b90506120d96121998383611cb0565b6001611e655600556e6973776170436f6e6e6563746f723a3a7472616465576974684f757470754453417574683a3a5f2053454e4445525f4e4f545f415554484f52495a454400556e6973776170436f6e6e6563746f723a3a5f76616c69646174655472616465a165627a7a723058202a517ca88110baf46b040316824f6c080068cf936a5d0281fea2b81654bec9620029000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95",
  "constructorArguments": "000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95"
}