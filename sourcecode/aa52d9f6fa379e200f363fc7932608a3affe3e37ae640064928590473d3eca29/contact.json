{
  "address": "0x6158e3f89b4398f5fb20d20dbfc5a5c955f0f6dd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TBCoin",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-09\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n    * @dev Math operations with safety checks that throw on error\n       */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n    * @dev The Ownable contract has an owner address, and provides basic authorization control \n       * functions, this simplifies the implementation of \"user permissions\". \n          */\ncontract Ownable {\n  address public owner;\n\n\n  /** \n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n        * account.\n             */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner. \n        */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n        * @param newOwner The address to transfer ownership to. \n             */\n  function transferOwnership(address newOwner) public onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n    *\n      * @dev Implementation of the basic standard token.\n         * @dev https://github.com/ethereum/EIPs/issues/20\n            * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n               */\ncontract StandardToken {\n  using SafeMath for uint256;\n  mapping (address => mapping (address => uint256)) allowed;\n  mapping(address => uint256) balances;\n  mapping(address => bool) preICO_address;\n  uint256 public totalSupply;\n  uint256 public endDate;\n  /**\n  * @dev transfer token for a specified address\n      * @param _to The address to transfer to.\n          * @param _value The amount to be transferred.\n              */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    if( preICO_address[msg.sender] ) require( now > endDate + 120 days ); //Lock coin\n    else require( now > endDate ); //Lock coin\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n  * @dev Gets the balance of the specified address.\n      * @param _owner The address to query the the balance of. \n          * @return An uint256 representing the amount owned by the passed address.\n              */\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n        * @param _from address The address which you want to send tokens from\n             * @param _to address The address which you want to transfer to\n                  * @param _value uint256 the amout of tokens to be transfered\n                       */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    if( preICO_address[_from] ) require( now > endDate + 120 days ); //Lock coin\n    else require( now > endDate ); //Lock coin\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n        * @param _spender The address which will spend the funds.\n             * @param _value The amount of tokens to be spent.\n                  */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    if( preICO_address[msg.sender] ) require( now > endDate + 120 days ); //Lock coin\n    else require( now > endDate ); //Lock coin\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n        * @param _owner address The address which owns the funds.\n             * @param _spender address The address which will spend the funds.\n                  * @return A uint256 specifing the amount of tokens still avaible for the spender.\n                       */\n  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract TBCoin is StandardToken, Ownable {\n    using SafeMath for uint256;\n\n    // Token Info.\n    string  public constant name = \"TimeBox Coin\";\n    string  public constant symbol = \"TB\";\n    uint8   public constant decimals = 18;\n\n    // Sale period.\n    uint256 public startDate;\n    // uint256 public endDate;\n\n    // Token Cap for each rounds\n    uint256 public saleCap;\n\n    // Address where funds are collected.\n    address public wallet;\n\n    // Amount of raised money in wei.\n    uint256 public weiRaised;\n\n    // Event\n    event TokenPurchase(address indexed purchaser, uint256 value,\n                        uint256 amount);\n    event PreICOTokenPushed(address indexed buyer, uint256 amount);\n\n    // Modifiers\n    modifier uninitialized() {\n        require(wallet == 0x0);\n        _;\n    }\n\n    function TBCoin() public{\n    }\n// \n    function initialize(address _wallet, uint256 _start, uint256 _end,\n                        uint256 _saleCap, uint256 _totalSupply)\n                        public onlyOwner uninitialized {\n        require(_start >= getCurrentTimestamp());\n        require(_start < _end);\n        require(_wallet != 0x0);\n        require(_totalSupply > _saleCap);\n\n        startDate = _start;\n        endDate = _end;\n        saleCap = _saleCap;\n        wallet = _wallet;\n        totalSupply = _totalSupply;\n\n        balances[wallet] = _totalSupply.sub(saleCap);\n        balances[0xb1] = saleCap;\n    }\n\n    function supply() internal view returns (uint256) {\n        return balances[0xb1];\n    }\n\n    function getCurrentTimestamp() internal view returns (uint256) {\n        return now;\n    }\n\n    function getRateAt(uint256 at) public constant returns (uint256) {\n        if (at < startDate) {\n            return 0;\n        } else if (at < (startDate + 3 days)) {\n            return 1500;\n        } else if (at < (startDate + 9 days)) {\n            return 1440;\n        } else if (at < (startDate + 15 days)) {\n            return 1380;\n        } else if (at < (startDate + 21 days)) {\n            return 1320;\n        } else if (at < (startDate + 27 days)) {\n            return 1260;\n        } else if (at <= endDate) {\n            return 1200;\n        } else {\n            return 0;\n        }\n    }\n\n    // Fallback function can be used to buy tokens\n    function () public payable {\n        buyTokens(msg.sender, msg.value);\n    }\n\n    // For pushing pre-ICO records\n    function push(address buyer, uint256 amount) public onlyOwner { //b753a98c\n        require(balances[wallet] >= amount);\n        require(now < startDate);\n        require(buyer != wallet);\n\n        preICO_address[ buyer ] = true;\n\n        // Transfer\n        balances[wallet] = balances[wallet].sub(amount);\n        balances[buyer] = balances[buyer].add(amount);\n        PreICOTokenPushed(buyer, amount);\n    }\n\n    function buyTokens(address sender, uint256 value) internal {\n        require(saleActive());\n\n        uint256 weiAmount = value;\n        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\n\n        // Calculate token amount to be purchased\n        uint256 actualRate = getRateAt(getCurrentTimestamp());\n        uint256 amount = weiAmount.mul(actualRate);\n\n        // We have enough token to sale\n        require(supply() >= amount);\n\n        // Transfer\n        balances[0xb1] = balances[0xb1].sub(amount);\n        balances[sender] = balances[sender].add(amount);\n        TokenPurchase(sender, weiAmount, amount);\n\n        // Update state.\n        weiRaised = updatedWeiRaised;\n\n        // Forward the fund to fund collection wallet.\n        wallet.transfer(msg.value);\n    }\n\n    function finalize() public onlyOwner {\n        require(!saleActive());\n\n        // Transfer the rest of token to TB team\n        balances[wallet] = balances[wallet].add(balances[0xb1]);\n        balances[0xb1] = 0;\n    }\n\n    function saleActive() public constant returns (bool) {\n        return (getCurrentTimestamp() >= startDate &&\n                getCurrentTimestamp() < endDate && supply() > 0);\n    }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"getRateAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_saleCap\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PreICOTokenPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b33600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611be18061005f6000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610129578063078fd9ea146101b7578063095ea7b3146101e05780630b97bc861461023a57806318160ddd1461026357806323b872dd1461028c578063313ce567146103055780634042b66f146103345780634bb278f31461035d578063521eb2731461037257806368428a1b146103c757806370a08231146103f45780638da5cb5b1461044157806395d89b4114610496578063a9059cbb14610524578063b52e0dc81461057e578063b753a98c146105b5578063c24a0f8b146105f7578063dd62ed3e14610620578063f2fde38b1461068c578063f92ad219146106c5575b6101273334610722565b005b341561013457600080fd5b61013c610959565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017c578082015181840152602081019050610161565b50505050905090810190601f1680156101a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c257600080fd5b6101ca610992565b6040518082815260200191505060405180910390f35b34156101eb57600080fd5b610220600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610998565b604051808215151515815260200191505060405180910390f35b341561024557600080fd5b61024d610b9a565b6040518082815260200191505060405180910390f35b341561026e57600080fd5b610276610ba0565b6040518082815260200191505060405180910390f35b341561029757600080fd5b6102eb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ba6565b604051808215151515815260200191505060405180910390f35b341561031057600080fd5b610318610ed1565b604051808260ff1660ff16815260200191505060405180910390f35b341561033f57600080fd5b610347610ed6565b6040518082815260200191505060405180910390f35b341561036857600080fd5b610370610edc565b005b341561037d57600080fd5b610385611081565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103d257600080fd5b6103da6110a7565b604051808215151515815260200191505060405180910390f35b34156103ff57600080fd5b61042b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110e2565b6040518082815260200191505060405180910390f35b341561044c57600080fd5b61045461112b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104a157600080fd5b6104a9611151565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104e95780820151818401526020810190506104ce565b50505050905090810190601f1680156105165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561052f57600080fd5b610564600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061118a565b604051808215151515815260200191505060405180910390f35b341561058957600080fd5b61059f60048080359060200190919050506113a2565b6040518082815260200191505060405180910390f35b34156105c057600080fd5b6105f5600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611453565b005b341561060257600080fd5b61060a6117a4565b6040518082815260200191505060405180910390f35b341561062b57600080fd5b610676600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506117aa565b6040518082815260200191505060405180910390f35b341561069757600080fd5b6106c3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611830565b005b34156106d057600080fd5b610720600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091908035906020019091908035906020019091905050611907565b005b6000806000806107306110a7565b151561073b57600080fd5b84935061075384600954611b1190919063ffffffff16565b9250610765610760611b2f565b6113a2565b915061077a8285611b3790919063ffffffff16565b905080610785611b6a565b1015151561079257600080fd5b6107cf816001600060b173ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b9c90919063ffffffff16565b6001600060b173ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061084f81600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b1190919063ffffffff16565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff167fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f8583604051808381526020018281526020019250505060405180910390a282600981905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561095157600080fd5b505050505050565b6040805190810160405280600c81526020017f54696d65426f7820436f696e000000000000000000000000000000000000000081525081565b60075481565b600080821480610a23575060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610a2e57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a9a57629e34006004540142111515610a9557600080fd5b610aab565b60045442111515610aaa57600080fd5b5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60065481565b60035481565b6000806000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c9357629e34006004540142111515610c8e57600080fd5b610ca4565b60045442111515610ca357600080fd5b5b610cf683600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b1190919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d8b83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b9c90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610de18382611b9c90919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b601281565b60095481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f3857600080fd5b610f406110a7565b151515610f4c57600080fd5b610fea6001600060b173ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460016000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b1190919063ffffffff16565b60016000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600060b173ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006006546110b4611b2f565b101580156110ca57506004546110c8611b2f565b105b80156110dd575060006110db611b6a565b115b905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600281526020017f544200000000000000000000000000000000000000000000000000000000000081525081565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156111f857629e340060045401421115156111f357600080fd5b611209565b6004544211151561120857600080fd5b5b61125b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b9c90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112f082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b1190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006006548210156113b7576000905061144e565b6203f480600654018210156113d0576105dc905061144e565b620bdd80600654018210156113e9576105a0905061144e565b6213c6806006540182101561140257610564905061144e565b621baf806006540182101561141b57610528905061144e565b6223988060065401821015611434576104ec905061144e565b60045482111515611449576104b0905061144e565b600090505b919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114af57600080fd5b8060016000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561151f57600080fd5b6006544210151561152f57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561158c57600080fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506116588160016000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b9c90919063ffffffff16565b60016000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061170f81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611b1190919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fdb2d10a559cb6e14fee5a7a2d8c216314e11c22404e85a4f9af45f07c87192bb826040518082815260200191505060405180910390a25050565b60045481565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156119045780600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196357600080fd5b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119aa57600080fd5b6119b2611b2f565b84101515156119c057600080fd5b82841015156119ce57600080fd5b60008573ffffffffffffffffffffffffffffffffffffffff16141515156119f457600080fd5b8181111515611a0257600080fd5b83600681905550826004819055508160078190555084600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600381905550611a7460075482611b9c90919063ffffffff16565b60016000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506007546001600060b173ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050565b6000808284019050838110151515611b2557fe5b8091505092915050565b600042905090565b60008082840290506000841480611b585750828482811515611b5557fe5b04145b1515611b6057fe5b8091505092915050565b60006001600060b173ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000828211151515611baa57fe5b8183039050929150505600a165627a7a72305820185a2892294c92aeff4f9cb9c2c3265433e8a0acfdc0c955699f5acb9191921d0029"
}