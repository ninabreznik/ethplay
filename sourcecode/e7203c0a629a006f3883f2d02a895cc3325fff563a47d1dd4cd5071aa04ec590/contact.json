{
  "address": "0xec2e5c8d51fdd54fef83db8300399a3c2e167922",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EBCoin: Old Token",
  "contractName": "CrowdsaleToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-24\n*/\n\npragma solidity ^0.4.11;\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) \n  {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) \n  {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) \n  {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) \n  {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\n\n/**\n * @title Ownable\n */\ncontract Ownable \n{\n  address public owner;\n\n  event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n\t\n\tfunction Ownable() public\n  {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() \n  {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function changeOwner(address _newOwner) onlyOwner public \n  {\n    require(_newOwner != address(0));\n    \n    address oldOwner = owner;\n    if (oldOwner != _newOwner)\n    {\n    \towner = _newOwner;\n    \t\n    \tOwnerChanged(oldOwner, _newOwner);\n    }\n  }\n\n}\n\n\n/**\n * @title Manageable\n */\ncontract Manageable is Ownable\n{\n\taddress public manager;\n\t\n\tevent ManagerChanged(address indexed _oldManager, address _newManager);\n\t\n\tfunction Manageable() public\n\t{\n\t\tmanager = msg.sender;\n\t}\n\t\n\tmodifier onlyManager()\n\t{\n\t\trequire(msg.sender == manager);\n\t\t_;\n\t}\n\t\n\tmodifier onlyOwnerOrManager() \n\t{\n\t\trequire(msg.sender == owner || msg.sender == manager);\n\t\t_;\n\t}\n\t\n\tfunction changeManager(address _newManager) onlyOwner public \n\t{\n\t\trequire(_newManager != address(0));\n\t\t\n\t\taddress oldManager = manager;\n\t\tif (oldManager != _newManager)\n\t\t{\n\t\t\tmanager = _newManager;\n\t\t\t\n\t\t\tManagerChanged(oldManager, _newManager);\n\t\t}\n\t}\n\t\n}\n\n\n/**\n * @title CrowdsaleToken\n */\ncontract CrowdsaleToken is Manageable\n{\n  using SafeMath for uint256;\n\n  string public constant name     = \"EBCoin\";\n  string public constant symbol   = \"EBC\";\n  uint8  public constant decimals = 18;\n  \n  uint256 public totalSupply;\n  mapping(address => uint256) balances;\n  mapping (address => mapping (address => uint256)) internal allowed;\n  mapping (address => uint256) public releaseTime;\n  bool public released;\n\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n  event Mint(address indexed _to, uint256 _value);\n  event ReleaseTimeChanged(address indexed _owner, uint256 _oldReleaseTime, uint256 _newReleaseTime);\n  event ReleasedChanged(bool _oldReleased, bool _newReleased);\n\n  modifier canTransfer(address _from)\n  {\n  \tif (releaseTime[_from] == 0)\n  \t{\n  \t\trequire(released);\n  \t}\n  \telse\n  \t{\n  \t\trequire(releaseTime[_from] <= now);\n  \t}\n  \t_;\n  }\n\n  function balanceOf(address _owner) public constant returns (uint256)\n  {\n    return balances[_owner];\n  }\n\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender) public returns (bool) \n  {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    \n    Transfer(msg.sender, _to, _value);\n    \n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint256) \n  {\n    return allowed[_owner][_spender];\n  }\n  \n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from) public returns (bool) \n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    \n    Transfer(_from, _to, _value);\n    \n    return true;\n  }\n  \n  function allocate(address _sale, address _investor, uint256 _value) onlyOwnerOrManager public \n  {\n  \trequire(_sale != address(0));\n  \tCrowdsale sale = Crowdsale(_sale);\n  \taddress pool = sale.pool();\n\n    require(_investor != address(0));\n    require(_value <= balances[pool]);\n    require(_value <= allowed[pool][msg.sender]);\n\n    balances[pool] = balances[pool].sub(_value);\n    balances[_investor] = balances[_investor].add(_value);\n    allowed[pool][_sale] = allowed[pool][_sale].sub(_value);\n    \n    Transfer(pool, _investor, _value);\n  }\n  \n  function deallocate(address _sale, address _investor, uint256 _value) onlyOwnerOrManager public \n  {\n  \trequire(_sale != address(0));\n  \tCrowdsale sale = Crowdsale(_sale);\n  \taddress pool = sale.pool();\n  \t\n    require(_investor != address(0));\n  \trequire(_value <= balances[_investor]);\n  \t\n  \tbalances[_investor] = balances[_investor].sub(_value);\n  \tbalances[pool] = balances[pool].add(_value);\n  \tallowed[pool][_sale] = allowed[pool][_sale].add(_value);\n  \t\n  \tTransfer(_investor, pool, _value);\n  }\n\n \tfunction approve(address _spender, uint256 _value) public returns (bool) \n \t{\n    allowed[msg.sender][_spender] = _value;\n    \n    Approval(msg.sender, _spender, _value);\n    \n    return true;\n  }\n\n  function mint(address _to, uint256 _value, uint256 _releaseTime) onlyOwnerOrManager public returns (bool) \n  {\n  \trequire(_to != address(0));\n  \t\n    totalSupply = totalSupply.add(_value);\n    balances[_to] = balances[_to].add(_value);\n    \n    Mint(_to, _value);\n    Transfer(0x0, _to, _value);\n    \n    setReleaseTime(_to, _releaseTime);\n    \n    return true;\n  }\n\n  function setReleaseTime(address _owner, uint256 _newReleaseTime) onlyOwnerOrManager public\n  {\n    require(_owner != address(0));\n    \n  \tuint256 oldReleaseTime = releaseTime[_owner];\n  \tif (oldReleaseTime != _newReleaseTime)\n  \t{\n  \t\treleaseTime[_owner] = _newReleaseTime;\n    \n    \tReleaseTimeChanged(_owner, oldReleaseTime, _newReleaseTime);\n    }\n  }\n  \n  function setReleased(bool _newReleased) onlyOwnerOrManager public\n  {\n  \tbool oldReleased = released;\n  \tif (oldReleased != _newReleased)\n  \t{\n  \t\treleased = _newReleased;\n  \t\n  \t\tReleasedChanged(oldReleased, _newReleased);\n  \t}\n  }\n  \n}\n\n\n/**\n * @title Crowdsale\n */\ncontract Crowdsale is Manageable\n{\n  using SafeMath for uint256;\n\n  CrowdsaleToken public token;\n\n  uint256 public startTime;\n  uint256 public endTime  ;\n\n  uint256 public rate;\n  \n  uint256 public constant decimals = 18;\n  \n  uint256 public tokenSaleWeiCap;\t\t\n  uint256 public tokenSaleWeiGoal;\t\n  uint256 public tokenSaleWeiMax;\t\t\n  uint256 public tokenSaleWeiMin;\t\t\n  \n  address public pool; \n  address public wallet;\n\n  bool public isFinalized = false;\n\n  enum State { Created, Active, Closed }\n\n  uint256 public totalAllocated;\n  mapping (address => uint256) public allocated;\n  \n  uint256 public totalDeposited;\n  mapping (address => uint256) public deposited;\n\n  State public state;\n\n  event Closed();\n  event Finalized();\n  event FundWithdrawed(uint256 ethAmount);\n  event TokenPurchased(address indexed _purchaser, address indexed _investor, uint256 _value, uint256 _amount, bytes _data);\n  event TokenReturned(address indexed _investor, uint256 _value);\n\n  function Crowdsale() public\n  {\n  \tstate = State.Created;\n  }\n  \n  function initCrowdsale(address _pool, address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _tokenSaleWeiCap, uint256 _tokenSaleWeiGoal, uint256 _tokenSaleWeiMax, uint256 _tokenSaleWeiMin, address _wallet) onlyOwnerOrManager public\n  {\n    require(state == State.Created);\n  \trequire(_pool != address(0));\n    require(_token != address(0));\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_endTime >= now);\n    require(_rate > 0);\n    require(_tokenSaleWeiCap >= _tokenSaleWeiGoal);\n    require(_wallet != 0x0);\n    \n    state = State.Active;\n    \n    pool             = _pool;\n    token            = CrowdsaleToken(_token);\n    startTime        = _startTime;\n    endTime          = _endTime;\n    rate             = _rate;\n    tokenSaleWeiCap  = _tokenSaleWeiCap;\n    tokenSaleWeiGoal = _tokenSaleWeiGoal;\n    tokenSaleWeiMax  = _tokenSaleWeiMax;\n    tokenSaleWeiMin  = _tokenSaleWeiMin;\n    wallet           = _wallet;\n  }\n\n  function allocation(address _investor) public constant returns (uint256)\n  {\n  \treturn allocated[_investor];\n  }\n\n  function () payable public\n  {\n    buyTokens(msg.sender);\n  }\n\n  function buyTokens(address _investor) public payable \n  {\n    require(_investor != 0x0);\n    require(startTime <= now && now <= endTime);\n    require(msg.value != 0);\n    require(state == State.Active);\n    \n    require(totalAllocated <= tokenSaleWeiCap);\n    \n    uint256 ethWeiAmount = msg.value;\n    \n    uint256 tokenWeiAmount = ethWeiAmount.mul(rate);\n    \n    uint256 personTokenWeiAmount = allocated[_investor].add(tokenWeiAmount);\n    \n    require(tokenSaleWeiMin <= personTokenWeiAmount);\n    require(personTokenWeiAmount <= tokenSaleWeiMax);\n    \n    totalAllocated = totalAllocated.add(tokenWeiAmount);\n\n    totalDeposited = totalDeposited.add(ethWeiAmount);\n    \n    allocated[_investor] = personTokenWeiAmount;\n    \n    deposited[_investor] = deposited[_investor].add(ethWeiAmount);\n    \n    token.allocate(this, _investor, tokenWeiAmount);\n    \n    TokenPurchased(msg.sender, _investor, ethWeiAmount, tokenWeiAmount, msg.data);\n  }\n\n  function deallocate(address _investor, uint256 _value) onlyOwnerOrManager public \n  {\n  \trequire(_investor != address(0));\n  \trequire(_value > 0);\n    require(_value <= allocated[_investor]);\n\n\t\ttotalAllocated = totalAllocated.sub(_value);\n\t\t\n\t\tallocated[_investor] = allocated[_investor].sub(_value);\n\t\t\n\t\ttoken.deallocate(this, _investor, _value);\n\t\t\n\t\tTokenReturned(_investor, _value);\n  }\n\n  function goalReached() public constant returns (bool)\n  {\n    return totalAllocated >= tokenSaleWeiGoal;\n  }\n\n  function hasEnded() public constant returns (bool) \n  {\n    bool capReached = (totalAllocated >= tokenSaleWeiCap);\n    return (now > endTime) || capReached;\n  }\n\n  function finalize() onlyOwnerOrManager public \n  {\n    require(!isFinalized);\n    require(hasEnded());\n\n    if (goalReached()) \n    {\n      close();\n    } \n    \n    Finalized();\n\n    isFinalized = true;\n  }\n\n  function close() onlyOwnerOrManager public\n  {\n    require(state == State.Active);\n    \n    state = State.Closed;\n    \n    Closed();\n  }\n\n  function withdraw() onlyOwnerOrManager public\n  {\n  \trequire(state == State.Closed);\n  \t\n  \tuint256 depositedValue = this.balance;\n  \tif (depositedValue > 0)\n  \t{\n  \t\twallet.transfer(depositedValue);\n  \t\n  \t\tFundWithdrawed(depositedValue);\n  \t}\n  }\n  \n}\n\n\n/**\n * @title CrowdsaleManager\n */\ncontract CrowdsaleManager is Manageable \n{\n  using SafeMath for uint256;\n  \n  uint256 public constant decimals = 18;\n\n  CrowdsaleToken public token;\n  Crowdsale      public sale1;\n  Crowdsale      public sale2;\n  Crowdsale      public sale3;\n  \n  address public constant tokenReserved1Deposit = 0x6EE96ba492a738BDD080d7353516133ea806DDee;\n  address public constant tokenReserved2Deposit = 0xAFBcB72fE97A5191d03E328dE07BB217dA21EaE4;\n  address public constant tokenReserved3Deposit = 0xd7118eE872870040d86495f13E61b88EE5C93586;\n  address public constant tokenReserved4Deposit = 0x08ce2b3512aE0387495AB5f61e6B0Cf846Ae59a7;\n  \n  address public constant withdrawWallet1       = 0xf8dafE5ee19a28b95Ad93e05575269EcEE19DDf2;\n  address public constant withdrawWallet2       = 0x6f4aF515ECcE22EA0D1AB82F8742E058Ac4d9cb3;\n  address public constant withdrawWallet3       = 0xd172E0DEe60Af67dA3019Ad539ce3190a191d71D;\n\n  uint256 public constant tokenSale      = 750000000 * 10**decimals + 3000 * 1000 * 10**decimals;\n  uint256 public constant tokenReserved1 = 150000000 * 10**decimals - 3000 * 1000 * 10**decimals;\n  uint256 public constant tokenReserved2 = 270000000 * 10**decimals;           \t\t\t \n  uint256 public constant tokenReserved3 = 105000000 * 10**decimals;                \t\t\n  uint256 public constant tokenReserved4 = 225000000 * 10**decimals;                      \t\n  \n  function CrowdsaleManager() public\n  {\n  }\n  \n  function createToken() onlyOwnerOrManager public\n  {\n    token = new CrowdsaleToken();\n  }\n  \n  function mintToken() onlyOwnerOrManager public\n  {\n    token.mint(this                 , tokenSale     , now       );\n    token.mint(tokenReserved1Deposit, tokenReserved1, now       );\n    token.mint(tokenReserved2Deposit, tokenReserved2, 1544158800);\n    token.mint(tokenReserved3Deposit, tokenReserved3, 1544158800);\n    token.mint(tokenReserved4Deposit, tokenReserved4, 0         );\n  }\n  \n  function createSale1() onlyOwnerOrManager public\n  {\n    sale1 = new Crowdsale();\n  }\n  \n  function initSale1() onlyOwnerOrManager public\n  {\n    uint256 startTime \t\t\t\t= 1512622800;\n    uint256 endTime   \t\t\t\t= 1515301200;\n    uint256 rate      \t\t\t\t= 3450;\t\t\n    \n    uint256 tokenSaleWeiCap\t\t= 150000000000000000000000000;\n    uint256 tokenSaleWeiGoal\t=  10350000000000000000000000;\t\t\n    uint256 tokenSaleWeiMax\t\t=    345000000000000000000000;\t\n    uint256 tokenSaleWeiMin\t\t=      3450000000000000000000;\t\n    \n    sale1.initCrowdsale(this, token, startTime, endTime, rate, tokenSaleWeiCap, tokenSaleWeiGoal, tokenSaleWeiMax, tokenSaleWeiMin, withdrawWallet1);\n    \n    token.approve(sale1, tokenSaleWeiCap.add(tokenSaleWeiMax));\n    \n    token.changeManager(sale1);\n  }\n  \n  function finalizeSale1() onlyOwnerOrManager public\n  {\n  \tsale1.finalize();\n  }\n  \n  function closeSale1() onlyOwnerOrManager public\n  {\n  \tsale1.close();\n  }\n  \n  function withdrawSale1() onlyOwnerOrManager public\n  {\n  \tsale1.withdraw();\n  }\n  \n  function createSale2() onlyOwnerOrManager public\n  {\n    sale2 = new Crowdsale();\n  }\n  \n  function initSale2() onlyOwnerOrManager public\n  {\n    uint256 startTime \t\t\t\t= 1515474000;\n    uint256 endTime   \t\t\t\t= 1517288400;\n    uint256 rate      \t\t\t\t= 3000;\t\t\n    \n    uint256 tokenSaleWeiCap\t\t= 375000000000000000000000000;\n    uint256 tokenSaleWeiGoal\t=                           0;\t\t\n    uint256 tokenSaleWeiMax\t\t=   3000000000000000000000000;\t\n    uint256 tokenSaleWeiMin\t\t=      3000000000000000000000;\t\n\n   \ttokenSaleWeiCap = tokenSaleWeiCap.add(sale1.tokenSaleWeiCap());\n   \ttokenSaleWeiCap = tokenSaleWeiCap.sub(sale1.totalAllocated());\n    \n    sale2.initCrowdsale(this, token, startTime, endTime, rate, tokenSaleWeiCap, tokenSaleWeiGoal, tokenSaleWeiMax, tokenSaleWeiMin, withdrawWallet2);\n    \n    token.approve(sale2, tokenSaleWeiCap.add(tokenSaleWeiMax));\n    \n    token.changeManager(sale2);\n  }\n  \n  function finalizeSale2() onlyOwnerOrManager public\n  {\n  \tsale2.finalize();\n  }\n  \n  function closeSale2() onlyOwnerOrManager public\n  {\n  \tsale2.close();\n  }\n  \n  function withdrawSale2() onlyOwnerOrManager public\n  {\n  \tsale2.withdraw();\n  }\n  \n  function createSale3() onlyOwnerOrManager public\n  {\n    sale3 = new Crowdsale();\n  }\n  \n  function initSale3(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _goal, uint256 _max, uint _min) onlyOwnerOrManager public\n  {\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_rate > 0);\n    require(_cap >= _goal);\n  \n    uint256 startTime \t\t\t\t= _startTime;\n    uint256 endTime   \t\t\t\t= _endTime;\n    uint256 rate      \t\t\t\t= _rate;\n    \n    uint256 tokenSaleWeiCap\t\t= _cap;\n    uint256 tokenSaleWeiGoal\t= _goal;\t\n    uint256 tokenSaleWeiMax\t\t= _max;\t\n    uint256 tokenSaleWeiMin\t\t= _min;\t\n\n    sale3.initCrowdsale(this, token, startTime, endTime, rate, tokenSaleWeiCap, tokenSaleWeiGoal, tokenSaleWeiMax, tokenSaleWeiMin, withdrawWallet3);\n    \n    token.approve(sale3, tokenSaleWeiCap.add(tokenSaleWeiMax));\n    \n    token.changeManager(sale3);\n  }\n  \n  function finalizeSale3() onlyOwnerOrManager public\n  {\n  \tsale3.finalize();\n  }\n  \n  function closeSale3() onlyOwnerOrManager public\n  {\n  \tsale3.close();\n  }\n  \n  function withdrawSale3() onlyOwnerOrManager public\n  {\n  \tsale3.withdraw();\n  }\n  \n  function releaseTokenTransfer(bool _newReleased) onlyOwner public\n  {\n  \ttoken.setReleased(_newReleased);\n  }\n  \n  function changeTokenManager(address _newManager) onlyOwner public\n  {\n  \ttoken.changeManager(_newManager);\n  }\n  \n  function changeSaleManager(address _sale, address _newManager) onlyOwner public\n  {\n  \trequire(_sale != address(0));\n  \tCrowdsale sale = Crowdsale(_sale);\n  \t\n  \tsale.changeManager(_newManager);\n  }\n  \n  function deallocate(address _sale, address _investor) onlyOwner public\n  {\n  \trequire(_sale != address(0));\n  \tCrowdsale sale = Crowdsale(_sale);\n  \t\n  \tuint256 allocatedValue = sale.allocation(_investor);\n  \t\n  \tsale.deallocate(_investor, allocatedValue);\n  }\n  \n  function promotionAllocate(address _investor, uint256 _value) onlyOwner public\n  {\n  \ttoken.transfer(_investor, _value);\n  }\n  \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_newReleaseTime\",\"type\":\"uint256\"}],\"name\":\"setReleaseTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sale\",\"type\":\"address\"},{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deallocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReleased\",\"type\":\"bool\"}],\"name\":\"setReleased\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldReleaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newReleaseTime\",\"type\":\"uint256\"}],\"name\":\"ReleaseTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldReleased\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_newReleased\",\"type\":\"bool\"}],\"name\":\"ReleasedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldManager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]",
  "bytecode": "606060405260008054600160a060020a033316600160a060020a031991821681179092556001805490911690911790556110e18061003e6000396000f3006060604052600436106100f85763ffffffff60e060020a60003504166306fdde0381146100fd578063095ea7b314610187578063156e29f6146101bd57806318160ddd146101e257806323b872dd146102075780632de02bfa1461022f578063313ce5671461025957806334265c4814610282578063476fe919146102a1578063481c6a75146102c35780634e8a411b146102f257806370a082311461031a5780638da5cb5b1461033957806395d89b411461034c578063961325211461035f578063a3fbbaae14610372578063a6f9dae114610391578063a9059cbb146103b0578063d1fea3d5146103d2578063dd62ed3e146103ea575b600080fd5b341561010857600080fd5b61011061040f565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014c578082015183820152602001610134565b50505050905090810190601f1680156101795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019257600080fd5b6101a9600160a060020a0360043516602435610446565b604051901515815260200160405180910390f35b34156101c857600080fd5b6101a9600160a060020a03600435166024356044356104b2565b34156101ed57600080fd5b6101f56105d0565b60405190815260200160405180910390f35b341561021257600080fd5b6101a9600160a060020a03600435811690602435166044356105d6565b341561023a57600080fd5b610257600160a060020a03600435811690602435166044356107a2565b005b341561026457600080fd5b61026c6109bf565b60405160ff909116815260200160405180910390f35b341561028d57600080fd5b6101f5600160a060020a03600435166109c4565b34156102ac57600080fd5b610257600160a060020a03600435166024356109d6565b34156102ce57600080fd5b6102d6610aa1565b604051600160a060020a03909116815260200160405180910390f35b34156102fd57600080fd5b610257600160a060020a0360043581169060243516604435610ab0565b341561032557600080fd5b6101f5600160a060020a0360043516610c96565b341561034457600080fd5b6102d6610cb1565b341561035757600080fd5b610110610cc0565b341561036a57600080fd5b6101a9610cf7565b341561037d57600080fd5b610257600160a060020a0360043516610d00565b341561039c57600080fd5b610257600160a060020a0360043516610dba565b34156103bb57600080fd5b6101a9600160a060020a0360043516602435610e62565b34156103dd57600080fd5b6102576004351515610fa9565b34156103f557600080fd5b6101f5600160a060020a0360043581169060243516611042565b60408051908101604052600681527f4542436f696e0000000000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260046020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000805433600160a060020a03908116911614806104de575060015433600160a060020a039081169116145b15156104e957600080fd5b600160a060020a03841615156104fe57600080fd5b600254610511908463ffffffff61106d16565b600255600160a060020a03841660009081526003602052604090205461053d908463ffffffff61106d16565b600160a060020a0385166000818152600360205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859085905190815260200160405180910390a283600160a060020a031660006000805160206110968339815191528560405190815260200160405180910390a36105c684836109d6565b5060019392505050565b60025481565b600160a060020a0383166000908152600560205260408120548490151561060d5760065460ff16151561060857600080fd5b610633565b600160a060020a0381166000908152600560205260409020544290111561063357600080fd5b600160a060020a038416151561064857600080fd5b600160a060020a03851660009081526003602052604090205483111561066d57600080fd5b600160a060020a03808616600090815260046020908152604080832033909416835292905220548311156106a057600080fd5b600160a060020a0385166000908152600360205260409020546106c9908463ffffffff61108316565b600160a060020a0380871660009081526003602052604080822093909355908616815220546106fe908463ffffffff61106d16565b600160a060020a03808616600090815260036020908152604080832094909455888316825260048152838220339093168252919091522054610746908463ffffffff61108316565b600160a060020a03808716600081815260046020908152604080832033861684529091529081902093909355908616916000805160206110968339815191529086905190815260200160405180910390a3506001949350505050565b60008054819033600160a060020a03908116911614806107d0575060015433600160a060020a039081169116145b15156107db57600080fd5b600160a060020a03851615156107f057600080fd5b84915081600160a060020a03166316f0115b6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561083957600080fd5b6102c65a03f1151561084a57600080fd5b5050506040518051915050600160a060020a038416151561086a57600080fd5b600160a060020a03811660009081526003602052604090205483111561088f57600080fd5b600160a060020a03808216600090815260046020908152604080832033909416835292905220548311156108c257600080fd5b600160a060020a0381166000908152600360205260409020546108eb908463ffffffff61108316565b600160a060020a038083166000908152600360205260408082209390935590861681522054610920908463ffffffff61106d16565b600160a060020a038086166000908152600360209081526040808320949094558483168252600481528382209289168252919091522054610967908463ffffffff61108316565b600160a060020a0380831660008181526004602090815260408083208b861684529091529081902093909355908616916000805160206110968339815191529086905190815260200160405180910390a35050505050565b601281565b60056020526000908152604090205481565b6000805433600160a060020a0390811691161480610a02575060015433600160a060020a039081169116145b1515610a0d57600080fd5b600160a060020a0383161515610a2257600080fd5b50600160a060020a038216600090815260056020526040902054818114610a9c57600160a060020a038316600081815260056020526040908190208490557fa2d3e2be5517b26a9235b3e40b39b7a10f6c60242b51f1df3ec962302bd334bf90839085905191825260208201526040908101905180910390a25b505050565b600154600160a060020a031681565b60008054819033600160a060020a0390811691161480610ade575060015433600160a060020a039081169116145b1515610ae957600080fd5b600160a060020a0385161515610afe57600080fd5b84915081600160a060020a03166316f0115b6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610b4757600080fd5b6102c65a03f11515610b5857600080fd5b5050506040518051915050600160a060020a0384161515610b7857600080fd5b600160a060020a038416600090815260036020526040902054831115610b9d57600080fd5b600160a060020a038416600090815260036020526040902054610bc6908463ffffffff61108316565b600160a060020a038086166000908152600360205260408082209390935590831681522054610bfb908463ffffffff61106d16565b600160a060020a03808316600090815260036020908152604080832094909455600481528382209289168252919091522054610c3d908463ffffffff61106d16565b600160a060020a0380831660008181526004602090815260408083208b86168452909152908190209390935591908616906000805160206110968339815191529086905190815260200160405180910390a35050505050565b600160a060020a031660009081526003602052604090205490565b600054600160a060020a031681565b60408051908101604052600381527f4542430000000000000000000000000000000000000000000000000000000000602082015281565b60065460ff1681565b6000805433600160a060020a03908116911614610d1c57600080fd5b600160a060020a0382161515610d3157600080fd5b50600154600160a060020a039081169082168114610db6576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038481169190911790915581167f605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a435083604051600160a060020a03909116815260200160405180910390a25b5050565b6000805433600160a060020a03908116911614610dd657600080fd5b600160a060020a0382161515610deb57600080fd5b50600054600160a060020a039081169082168114610db6576000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038481169182179092559082167fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60405160405180910390a35050565b33600160a060020a0381166000908152600560205260408120549091901515610e9b5760065460ff161515610e9657600080fd5b610ec1565b600160a060020a03811660009081526005602052604090205442901115610ec157600080fd5b600160a060020a0384161515610ed657600080fd5b600160a060020a033316600090815260036020526040902054831115610efb57600080fd5b600160a060020a033316600090815260036020526040902054610f24908463ffffffff61108316565b600160a060020a033381166000908152600360205260408082209390935590861681522054610f59908463ffffffff61106d16565b600160a060020a0380861660008181526003602052604090819020939093559133909116906000805160206110968339815191529086905190815260200160405180910390a35060019392505050565b6000805433600160a060020a0390811691161480610fd5575060015433600160a060020a039081169116145b1515610fe057600080fd5b5060065460ff1680151582151514610db6576006805460ff19168315151790557f08d84b827eb2198831f99014e4b9731d9029359b812830a30b6bff6e063d98cc81836040519115158252151560208201526040908101905180910390a15050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60008282018381101561107c57fe5b9392505050565b60008282111561108f57fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058203e9c309c536e61af351215833ce199420c4297415f71d73d0fbbbc9170e21d670029"
}