{
  "address": "0x20b52d66907c5d99f30aa371d11df310be919290",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GooBurnAlgo",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-05\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * \n * World War Goo - Competitive Idle Game\n * \n * https://ethergoo.io\n * \n */\n\ncontract GooBurnAlgo {\n    \n    Bankroll constant bankroll = Bankroll(0x66a9f1e53173de33bec727ef76afa84956ae1b25);\n    GooToken constant goo = GooToken(0xdf0960778c6e6597f197ed9a25f12f5d971da86c);\n\n    address public owner; // Minor Management\n\n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    // Initial naive algorithm, splitting (half) eth between totalSupply\n    function priceOf(uint256 amount) external view returns(uint256 payment) {\n        payment = (bankroll.gooPurchaseAllocation() * amount) / (goo.totalSupply() * 2);\n    }\n    \n    function price() external view returns(uint256 gooPrice) {\n        gooPrice = bankroll.gooPurchaseAllocation() / (goo.totalSupply() * 2);\n    }\n    \n}\n\ncontract Bankroll {\n    uint256 public gooPurchaseAllocation; // Wei destined to pay to burn players' goo\n}\n\ncontract GooToken {\n    function totalSupply() external view returns(uint256);\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03191633179055610374806100326000396000f30060806040526004361061003d5763ffffffff60e060020a6000350416638da5cb5b8114610042578063a035b1fe14610080578063b9186d7d146100a7575b600080fd5b34801561004e57600080fd5b506100576100bf565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561008c57600080fd5b506100956100db565b60408051918252519081900360200190f35b3480156100b357600080fd5b5061009560043561020f565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600073df0960778c6e6597f197ed9a25f12f5d971da86c73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561013c57600080fd5b505af1158015610150573d6000803e3d6000fd5b505050506040513d602081101561016657600080fd5b5051604080517fbb17fa9d00000000000000000000000000000000000000000000000000000000815290516002909202917366a9f1e53173de33bec727ef76afa84956ae1b259163bb17fa9d9160048083019260209291908290030181600087803b1580156101d457600080fd5b505af11580156101e8573d6000803e3d6000fd5b505050506040513d60208110156101fe57600080fd5b505181151561020957fe5b04905090565b600073df0960778c6e6597f197ed9a25f12f5d971da86c73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561027057600080fd5b505af1158015610284573d6000803e3d6000fd5b505050506040513d602081101561029a57600080fd5b5051604080517fbb17fa9d000000000000000000000000000000000000000000000000000000008152905160029092029184917366a9f1e53173de33bec727ef76afa84956ae1b259163bb17fa9d916004808201926020929091908290030181600087803b15801561030b57600080fd5b505af115801561031f573d6000803e3d6000fd5b505050506040513d602081101561033557600080fd5b50510281151561034157fe5b04929150505600a165627a7a72305820938f0cbd54f17014fbd77c2ee270743b4464ae4f99b14d92edb5e5ff9f43da670029"
}