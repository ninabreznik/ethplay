{
  "address": "0xf629cbd94d3791c9250152bd8dfbdf380e2a3b9c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Enjin Coin",
  "contractName": "ENJToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-03\n*/\n\npragma solidity ^0.4.15;\n/*\n    Utilities & Common Modifiers\n*/\ncontract Utils {\n    /**\n        constructor\n    */\n    function Utils() {\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n    // Overflow protected math functions\n\n    /**\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function safeAdd(uint256 _x, uint256 _y) internal returns (uint256) {\n        uint256 z = _x + _y;\n        assert(z >= _x);\n        return z;\n    }\n\n    /**\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function safeSub(uint256 _x, uint256 _y) internal returns (uint256) {\n        assert(_x >= _y);\n        return _x - _y;\n    }\n\n    /**\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function safeMul(uint256 _x, uint256 _y) internal returns (uint256) {\n        uint256 z = _x * _y;\n        assert(_x == 0 || z / _x == _y);\n        return z;\n    }\n}\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public constant returns (string) { name; }\n    function symbol() public constant returns (string) { symbol; }\n    function decimals() public constant returns (uint8) { decimals; }\n    function totalSupply() public constant returns (uint256) { totalSupply; }\n    function balanceOf(address _owner) public constant returns (uint256 balance) { _owner; balance; }\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { _owner; _spender; remaining; }\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n\n/**\n    ERC20 Standard Token implementation\n*/\ncontract ERC20Token is IERC20Token, Utils {\n    string public standard = \"Token 0.1\";\n    string public name = \"\";\n    string public symbol = \"\";\n    uint8 public decimals = 0;\n    uint256 public totalSupply = 0;\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    /**\n        @dev constructor\n\n        @param _name        token name\n        @param _symbol      token symbol\n        @param _decimals    decimal points, for display purposes\n    */\n    function ERC20Token(string _name, string _symbol, uint8 _decimals) {\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\n\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n    }\n\n    /**\n        @dev send coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transfer(address _to, uint256 _value)\n        public\n        validAddress(_to)\n        returns (bool success)\n    {\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev an account/contract attempts to get the coins\n        throws on any error rather then return a false flag to minimize user errors\n\n        @param _from    source address\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, false if it wasn't\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        validAddress(_from)\n        validAddress(_to)\n        returns (bool success)\n    {\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n        @dev allow another account/contract to spend some tokens on your behalf\n        throws on any error rather then return a false flag to minimize user errors\n\n        also, to minimize the risk of the approve/transferFrom attack vector\n        (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n        in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n\n        @param _spender approved address\n        @param _value   allowance amount\n\n        @return true if the approval was successful, false if it wasn't\n    */\n    function approve(address _spender, uint256 _value)\n        public\n        validAddress(_spender)\n        returns (bool success)\n    {\n        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public constant returns (address) { owner; }\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n/*\n    Provides support and utilities for contract ownership\n*/\ncontract Owned is IOwned {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n\n    /**\n        @dev constructor\n    */\n    function Owned() {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    /**\n        @dev allows transferring the contract ownership\n        the new owner still needs to accept the transfer\n        can only be called by the contract owner\n\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /**\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n}\n\n/*\n    Token Holder interface\n*/\ncontract ITokenHolder is IOwned {\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\n}\n\n/*\n    We consider every contract to be a 'token holder' since it's currently not possible\n    for a contract to deny receiving tokens.\n\n    The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\n    the owner to send tokens that were sent to the contract by mistake back to their sender.\n*/\ncontract TokenHolder is ITokenHolder, Owned, Utils {\n    /**\n        @dev constructor\n    */\n    function TokenHolder() {\n    }\n\n    /**\n        @dev withdraws tokens held by the contract and sends them to an account\n        can only be called by the owner\n\n        @param _token   ERC20 token contract address\n        @param _to      account to receive the new amount\n        @param _amount  amount to withdraw\n    */\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\n        public\n        ownerOnly\n        validAddress(_token)\n        validAddress(_to)\n        notThis(_to)\n    {\n        assert(_token.transfer(_to, _amount));\n    }\n}\n\n\ncontract ENJToken is ERC20Token, TokenHolder {\n\n///////////////////////////////////////// VARIABLE INITIALIZATION /////////////////////////////////////////\n\n    uint256 constant public ENJ_UNIT = 10 ** 18;\n    uint256 public totalSupply = 1 * (10**9) * ENJ_UNIT;\n\n    //  Constants \n    uint256 constant public maxPresaleSupply = 600 * 10**6 * ENJ_UNIT;           // Total presale supply at max bonus\n    uint256 constant public minCrowdsaleAllocation = 200 * 10**6 * ENJ_UNIT;     // Min amount for crowdsale\n    uint256 constant public incentivisationAllocation = 100 * 10**6 * ENJ_UNIT;  // Incentivisation Allocation\n    uint256 constant public advisorsAllocation = 26 * 10**6 * ENJ_UNIT;          // Advisors Allocation\n    uint256 constant public enjinTeamAllocation = 74 * 10**6 * ENJ_UNIT;         // Enjin Team allocation\n\n    address public crowdFundAddress;                                             // Address of the crowdfund\n    address public advisorAddress;                                               // Enjin advisor's address\n    address public incentivisationFundAddress;                                   // Address that holds the incentivization funds\n    address public enjinTeamAddress;                                             // Enjin Team address\n\n    //  Variables\n\n    uint256 public totalAllocatedToAdvisors = 0;                                 // Counter to keep track of advisor token allocation\n    uint256 public totalAllocatedToTeam = 0;                                     // Counter to keep track of team token allocation\n    uint256 public totalAllocated = 0;                                           // Counter to keep track of overall token allocation\n    uint256 constant public endTime = 1509494340;                                // 10/31/2017 @ 11:59pm (UTC) crowdsale end time (in seconds)\n\n    bool internal isReleasedToPublic = false;                         // Flag to allow transfer/transferFrom before the end of the crowdfund\n\n    uint256 internal teamTranchesReleased = 0;                          // Track how many tranches (allocations of 12.5% team tokens) have been released\n    uint256 internal maxTeamTranches = 8;                               // The number of tranches allowed to the team until depleted\n\n///////////////////////////////////////// MODIFIERS /////////////////////////////////////////\n\n    // Enjin Team timelock    \n    modifier safeTimelock() {\n        require(now >= endTime + 6 * 4 weeks);\n        _;\n    }\n\n    // Advisor Team timelock    \n    modifier advisorTimelock() {\n        require(now >= endTime + 2 * 4 weeks);\n        _;\n    }\n\n    // Function only accessible by the Crowdfund contract\n    modifier crowdfundOnly() {\n        require(msg.sender == crowdFundAddress);\n        _;\n    }\n\n    ///////////////////////////////////////// CONSTRUCTOR /////////////////////////////////////////\n\n    /**\n        @dev constructor\n        @param _crowdFundAddress   Crowdfund address\n        @param _advisorAddress     Advisor address\n    */\n    function ENJToken(address _crowdFundAddress, address _advisorAddress, address _incentivisationFundAddress, address _enjinTeamAddress)\n    ERC20Token(\"Enjin Coin\", \"ENJ\", 18)\n     {\n        crowdFundAddress = _crowdFundAddress;\n        advisorAddress = _advisorAddress;\n        enjinTeamAddress = _enjinTeamAddress;\n        incentivisationFundAddress = _incentivisationFundAddress;\n        balanceOf[_crowdFundAddress] = minCrowdsaleAllocation + maxPresaleSupply; // Total presale + crowdfund tokens\n        balanceOf[_incentivisationFundAddress] = incentivisationAllocation;       // 10% Allocated for Marketing and Incentivisation\n        totalAllocated += incentivisationAllocation;                              // Add to total Allocated funds\n    }\n\n///////////////////////////////////////// ERC20 OVERRIDE /////////////////////////////////////////\n\n    /**\n        @dev send coins\n        throws on any error rather then return a false flag to minimize user errors\n        in addition to the standard checks, the function throws if transfers are disabled\n\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, throws if it wasn't\n    */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        if (isTransferAllowed() == true || msg.sender == crowdFundAddress || msg.sender == incentivisationFundAddress) {\n            assert(super.transfer(_to, _value));\n            return true;\n        }\n        revert();        \n    }\n\n    /**\n        @dev an account/contract attempts to get the coins\n        throws on any error rather then return a false flag to minimize user errors\n        in addition to the standard checks, the function throws if transfers are disabled\n\n        @param _from    source address\n        @param _to      target address\n        @param _value   transfer amount\n\n        @return true if the transfer was successful, throws if it wasn't\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        if (isTransferAllowed() == true || msg.sender == crowdFundAddress || msg.sender == incentivisationFundAddress) {        \n            assert(super.transferFrom(_from, _to, _value));\n            return true;\n        }\n        revert();\n    }\n\n///////////////////////////////////////// ALLOCATION FUNCTIONS /////////////////////////////////////////\n\n    /**\n        @dev Release one single tranche of the Enjin Team Token allocation\n        throws if before timelock (6 months) ends and if not initiated by the owner of the contract\n        returns true if valid\n        Schedule goes as follows:\n        3 months: 12.5% (this tranche can only be released after the initial 6 months has passed)\n        6 months: 12.5%\n        9 months: 12.5%\n        12 months: 12.5%\n        15 months: 12.5%\n        18 months: 12.5%\n        21 months: 12.5%\n        24 months: 12.5%\n        @return true if successful, throws if not\n    */\n    function releaseEnjinTeamTokens() safeTimelock ownerOnly returns(bool success) {\n        require(totalAllocatedToTeam < enjinTeamAllocation);\n\n        uint256 enjinTeamAlloc = enjinTeamAllocation / 1000;\n        uint256 currentTranche = uint256(now - endTime) / 12 weeks;     // \"months\" after crowdsale end time (division floored)\n\n        if(teamTranchesReleased < maxTeamTranches && currentTranche > teamTranchesReleased) {\n            teamTranchesReleased++;\n\n            uint256 amount = safeMul(enjinTeamAlloc, 125);\n            balanceOf[enjinTeamAddress] = safeAdd(balanceOf[enjinTeamAddress], amount);\n            Transfer(0x0, enjinTeamAddress, amount);\n            totalAllocated = safeAdd(totalAllocated, amount);\n            totalAllocatedToTeam = safeAdd(totalAllocatedToTeam, amount);\n            return true;\n        }\n        revert();\n    }\n\n    /**\n        @dev release Advisors Token allocation\n        throws if before timelock (2 months) ends or if no initiated by the advisors address\n        or if there is no more allocation to give out\n        returns true if valid\n\n        @return true if successful, throws if not\n    */\n    function releaseAdvisorTokens() advisorTimelock ownerOnly returns(bool success) {\n        require(totalAllocatedToAdvisors == 0);\n        balanceOf[advisorAddress] = safeAdd(balanceOf[advisorAddress], advisorsAllocation);\n        totalAllocated = safeAdd(totalAllocated, advisorsAllocation);\n        totalAllocatedToAdvisors = advisorsAllocation;\n        Transfer(0x0, advisorAddress, advisorsAllocation);\n        return true;\n    }\n\n    /**\n        @dev Retrieve unsold tokens from the crowdfund\n        throws if before timelock (6 months from end of Crowdfund) ends and if no initiated by the owner of the contract\n        returns true if valid\n\n        @return true if successful, throws if not\n    */\n    function retrieveUnsoldTokens() safeTimelock ownerOnly returns(bool success) {\n        uint256 amountOfTokens = balanceOf[crowdFundAddress];\n        balanceOf[crowdFundAddress] = 0;\n        balanceOf[incentivisationFundAddress] = safeAdd(balanceOf[incentivisationFundAddress], amountOfTokens);\n        totalAllocated = safeAdd(totalAllocated, amountOfTokens);\n        Transfer(crowdFundAddress, incentivisationFundAddress, amountOfTokens);\n        return true;\n    }\n\n    /**\n        @dev Keep track of token allocations\n        can only be called by the crowdfund contract\n    */\n    function addToAllocation(uint256 _amount) crowdfundOnly {\n        totalAllocated = safeAdd(totalAllocated, _amount);\n    }\n\n    /**\n        @dev Function to allow transfers\n        can only be called by the owner of the contract\n        Transfers will be allowed regardless after the crowdfund end time.\n    */\n    function allowTransfers() ownerOnly {\n        isReleasedToPublic = true;\n    } \n\n    /**\n        @dev User transfers are allowed/rejected\n        Transfers are forbidden before the end of the crowdfund\n    */\n    function isTransferAllowed() internal constant returns(bool) {\n        if (now > endTime || isReleasedToPublic == true) {\n            return true;\n        }\n        return false;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseAdvisorTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTransfers\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPresaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minCrowdsaleAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enjinTeamAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveUnsoldTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addToAllocation\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentivisationAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ENJ_UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incentivisationFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseEnjinTeamTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocatedToAdvisors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enjinTeamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocatedToTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdFundAddress\",\"type\":\"address\"},{\"name\":\"_advisorAddress\",\"type\":\"address\"},{\"name\":\"_incentivisationFundAddress\",\"type\":\"address\"},{\"name\":\"_enjinTeamAddress\",\"type\":\"address\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]",
  "bytecode": "60606040526040805190810160405280600981526020017f546f6b656e20302e310000000000000000000000000000000000000000000000815250600290805190602001906200005192919062000456565b506020604051908101604052806000815250600390805190602001906200007a92919062000456565b50602060405190810160405280600081525060049080519060200190620000a392919062000456565b506000600560006101000a81548160ff021916908360ff1602179055506000600655670de0b6b3a7640000633b9aca00026009556000600e556000600f5560006010556000601160006101000a81548160ff0219169083151502179055506000601255600860135534156200011757600080fd5b6040516080806200292f833981016040528080519060200190919080519060200190919080519060200190919080519060200190919050505b5b6040805190810160405280600a81526020017f456e6a696e20436f696e000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f454e4a000000000000000000000000000000000000000000000000000000000081525060125b5b5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b6000835111801562000217575060008251115b15156200022357600080fd5b82600390805190602001906200023b92919062000456565b5081600490805190602001906200025492919062000456565b5080600560006101000a81548160ff021916908360ff1602179055505b5050505b83600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400006323c3460002670de0b6b3a7640000630bebc2000201600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550670de0b6b3a76400006305f5e10002600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550670de0b6b3a76400006305f5e100026010600082825401925050819055505b5050505062000505565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200049957805160ff1916838001178555620004ca565b82800160010185558215620004ca579182015b82811115620004c9578251825591602001919060010190620004ac565b5b509050620004d99190620004dd565b5090565b6200050291905b80821115620004fe576000816000905550600101620004e4565b5090565b90565b61241a80620005156000396000f300606060405236156101aa576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101af578063095ea7b31461023e5780631367641e1461029857806318160ddd146102c55780632185810b146102ee57806321bdb26e1461030357806323b872dd1461032c578063313ce567146103a55780633197cbb6146103d457806345f7f249146103fd5780635154865a146104265780635a3b7e421461047b5780635e35359e1461050a578063606baff81461056b5780636a06bf921461059457806370a08231146105bd57806374151a2a1461060a57806379ba5097146106375780638da5cb5b1461064c57806395d89b41146106a157806396d4d0911461073057806398c20c0014610785578063a833c7ab146107a8578063a9059cbb146107d1578063b1f9275f1461082b578063b384e9b414610854578063ccdd95d6146108a9578063d4ee1d90146108d6578063d966cfc31461092b578063db08ccec14610954578063dd62ed3e146109a9578063e783bfb114610a15578063f2fde38b14610a3e578063fb06416114610a77575b600080fd5b34156101ba57600080fd5b6101c2610aa0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102035780820151818401525b6020810190506101e7565b50505050905090810190601f1680156102305780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024957600080fd5b61027e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b3e565b604051808215151515815260200191505060405180910390f35b34156102a357600080fd5b6102ab610cf0565b604051808215151515815260200191505060405180910390f35b34156102d057600080fd5b6102d8610f10565b6040518082815260200191505060405180910390f35b34156102f957600080fd5b610301610f16565b005b341561030e57600080fd5b610316610f8d565b6040518082815260200191505060405180910390f35b341561033757600080fd5b61038b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f9f565b604051808215151515815260200191505060405180910390f35b34156103b057600080fd5b6103b861108d565b604051808260ff1660ff16815260200191505060405180910390f35b34156103df57600080fd5b6103e76110a0565b6040518082815260200191505060405180910390f35b341561040857600080fd5b6104106110a8565b6040518082815260200191505060405180910390f35b341561043157600080fd5b6104396110ae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048657600080fd5b61048e6110d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104cf5780820151818401525b6020810190506104b3565b50505050905090810190601f1680156104fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561051557600080fd5b610569600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611172565b005b341561057657600080fd5b61057e61132f565b6040518082815260200191505060405180910390f35b341561059f57600080fd5b6105a7611341565b6040518082815260200191505060405180910390f35b34156105c857600080fd5b6105f4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611353565b6040518082815260200191505060405180910390f35b341561061557600080fd5b61061d61136b565b604051808215151515815260200191505060405180910390f35b341561064257600080fd5b61064a61163f565b005b341561065757600080fd5b61065f61181c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106ac57600080fd5b6106b4611841565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106f55780820151818401525b6020810190506106d9565b50505050905090810190601f1680156107225780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561073b57600080fd5b6107436118df565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561079057600080fd5b6107a66004808035906020019091905050611905565b005b34156107b357600080fd5b6107bb611978565b6040518082815260200191505060405180910390f35b34156107dc57600080fd5b610811600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061198a565b604051808215151515815260200191505060405180910390f35b341561083657600080fd5b61083e611a76565b6040518082815260200191505060405180910390f35b341561085f57600080fd5b610867611a82565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156108b457600080fd5b6108bc611aa8565b604051808215151515815260200191505060405180910390f35b34156108e157600080fd5b6108e9611d25565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561093657600080fd5b61093e611d4b565b6040518082815260200191505060405180910390f35b341561095f57600080fd5b610967611d51565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109b457600080fd5b6109ff600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611d77565b6040518082815260200191505060405180910390f35b3415610a2057600080fd5b610a28611d9c565b6040518082815260200191505060405180910390f35b3415610a4957600080fd5b610a75600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611da2565b005b3415610a8257600080fd5b610a8a611e9c565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b365780601f10610b0b57610100808354040283529160200191610b36565b820191906000526020600020905b815481529060010190602001808311610b1957829003601f168201915b505050505081565b60008260008173ffffffffffffffffffffffffffffffffffffffff1614151515610b6757600080fd5b6000831480610bf257506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610bfd57600080fd5b82600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505b5b5092915050565b60006249d4006359f90e44014210151515610d0a57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6257fe5b6000600e54141515610d7357600080fd5b610dec60076000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a764000063018cba8002611eae565b60076000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e6b601054670de0b6b3a764000063018cba8002611eae565b601081905550670de0b6b3a764000063018cba8002600e81905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef670de0b6b3a764000063018cba80026040518082815260200191505060405180910390a3600190505b5b5b90565b60095481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f6e57fe5b6001601160006101000a81548160ff0219169083151502179055505b5b565b670de0b6b3a76400006323c346000281565b600060011515610fad611ecd565b151514806110085750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806110605750600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561108157611070848484611f0a565b151561107857fe5b60019050611086565b600080fd5b9392505050565b600560009054906101000a900460ff1681565b6359f90e4481565b60105481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561116a5780601f1061113f5761010080835404028352916020019161116a565b820191906000526020600020905b81548152906001019060200180831161114d57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111ca57fe5b8260008173ffffffffffffffffffffffffffffffffffffffff16141515156111f157600080fd5b8260008173ffffffffffffffffffffffffffffffffffffffff161415151561121857600080fd5b833073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561125457600080fd5b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86866000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156112ff57600080fd5b6102c65a03f1151561131057600080fd5b50505060405180519050151561132257fe5b5b5b505b505b505b505050565b670de0b6b3a7640000630bebc2000281565b670de0b6b3a764000063046926800281565b60076020528060005260406000206000915090505481565b60008062dd7c006359f90e4401421015151561138657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113de57fe5b60076000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060076000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061151460076000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611eae565b60076000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061158560105482611eae565b601081905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600191505b5b5b5090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561169b57600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118d75780601f106118ac576101008083540402835291602001916118d7565b820191906000526020600020905b8154815290600101906020018083116118ba57829003601f168201915b505050505081565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196157600080fd5b61196d60105482611eae565b6010819055505b5b50565b670de0b6b3a76400006305f5e1000281565b600060011515611998611ecd565b151514806119f35750600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80611a4b5750600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15611a6b57611a5a83836121ed565b1515611a6257fe5b60019050611a70565b600080fd5b92915050565b670de0b6b3a764000081565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008062dd7c006359f90e44014210151515611ac657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b1e57fe5b670de0b6b3a7640000630469268002600f54101515611b3c57600080fd5b6103e8670de0b6b3a7640000630469268002811515611b5757fe5b049250626ebe006359f90e444203811515611b6e57fe5b049150601354601254108015611b85575060125482115b15611d1857601260008154809291906001019190505550611ba783607d6123a0565b9050611c1460076000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611eae565b60076000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3611cf760105482611eae565b601081905550611d09600f5482611eae565b600f8190555060019350611d1d565b600080fd5b5b5b50505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e5481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6008602052816000526040600020602052806000526040600020600091509150505481565b600f5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dfa57fe5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e5657600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b670de0b6b3a764000063018cba800281565b6000808284019050838110151515611ec257fe5b8091505b5092915050565b60006359f90e44421180611ef4575060011515601160009054906101000a900460ff161515145b15611f025760019050611f07565b600090505b90565b60008360008173ffffffffffffffffffffffffffffffffffffffff1614151515611f3357600080fd5b8360008173ffffffffffffffffffffffffffffffffffffffff1614151515611f5a57600080fd5b611fe0600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856123d4565b600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120a9600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054856123d4565b600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612135600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485611eae565b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b5b505b509392505050565b60008260008173ffffffffffffffffffffffffffffffffffffffff161415151561221657600080fd5b61225f600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846123d4565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122eb600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484611eae565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b5b5092915050565b600080828402905060008414806123c157508284828115156123be57fe5b04145b15156123c957fe5b8091505b5092915050565b60008183101515156123e257fe5b81830390505b929150505600a165627a7a723058207bb2feff0059a73611a1816a6de5e46685b0dccd17782a95a4984add7ff96f1b00290000000000000000000000009b73d1779c41dca36314fb7c4d3309838e20c4e7000000000000000000000000d3e631b1bc19f0c6d0c036484111c70ff1fa3f08000000000000000000000000f165c483ac93e567f20d11727ffa3209adf5cbc90000000000000000000000002eb794f3e37ccaa5d893c67c32d1b94f9b71131c",
  "constructorArguments": "0000000000000000000000009b73d1779c41dca36314fb7c4d3309838e20c4e7000000000000000000000000d3e631b1bc19f0c6d0c036484111c70ff1fa3f08000000000000000000000000f165c483ac93e567f20d11727ffa3209adf5cbc90000000000000000000000002eb794f3e37ccaa5d893c67c32d1b94f9b71131c"
}