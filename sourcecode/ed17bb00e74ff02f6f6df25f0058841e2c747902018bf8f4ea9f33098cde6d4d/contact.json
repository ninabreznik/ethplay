{
  "address": "0xbc9363b59cd73f59102ad6a45494f274d311c0c0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Share",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-31\n*/\n\npragma solidity ^0.4.24;\n\ncontract Control {\n    address public owner;\n    bool public pause;\n\n    event PAUSED();\n    event STARTED();\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier whenPaused {\n        require(pause);\n        _;\n    }\n\n    modifier whenNotPaused {\n        require(!pause);\n        _;\n    }\n\n    function setOwner(address _owner) onlyOwner public {\n        owner = _owner;\n    }\n\n    function setState(bool _pause) onlyOwner public {\n        pause = _pause;\n        if (pause) {\n            emit PAUSED();\n        } else {\n            emit STARTED();\n        }\n    }\n\n}\n/**\n * this contract stands for the holds of WestIndia group\n * all income will be split to holders according to their holds\n * user can buy holds from shareholders at his will\n */\ncontract Share is Control {    /**\n     * the holds of every holder\n     * the total holds stick to total\n     */\n    mapping (address => uint) public holds;\n\n    /**\n     * since we don't record holders' address in a list\n     * and we don't want to loop holders list everytime when there is income\n     *\n     * we use a mechanism called 'watermark'\n     * \n     * the watermark indicates the value that brought into each holds from the begining\n     * it only goes up when new income send to the contract\n\n     * fullfilled indicate the amount that the holder has withdrawaled from his share\n     * it goes up when user withdrawal bonus\n     * and it goes up when user sell holds, goes down when user buy holds, since the total bonus of him stays the same.\n     */\n    mapping (address => uint256) public fullfilled;\n\n    /**\n     * any one can setup a price to sell his holds\n     * if set to 0, means not on sell\n     */\n    mapping (address => uint256) public sellPrice;\n    mapping (address => uint256) public toSell;\n    mapping (address => mapping(address => uint256)) public allowance;\n    uint256 public watermark;\n    uint256 public total;\n    uint256 public decimals;\n    \n    string public symbol;\n    string public name;\n    \n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n    event INCOME(uint256);\n    event PRICE_SET(address holder, uint shares, uint256 price, uint sell);\n    event WITHDRAWAL(address owner, uint256 amount);\n    event SELL_HOLDS(address from, address to, uint amount, uint256 price);\n    event SEND_HOLDS(address from, address to, uint amount);\n\n    /**\n     * at start the owner has 100% share, which is 10,000 holds\n     */\n    constructor(string _symbol, string _name, uint256 _total) public {        \n        symbol = _symbol;\n        name = _name;\n        owner = msg.sender;\n        total = _total;\n        holds[owner] = total;\n        decimals = 0;\n        pause = false;\n    }\n\n    /**\n     * when there's income, the water mark goes up\n     */\n    function onIncome() public payable {\n        if (msg.value > 0) {\n            watermark += (msg.value / total);\n            assert(watermark * total > watermark);\n            emit INCOME(msg.value);\n        }\n    }\n\n    /**\n     * automatically split income\n     */\n    function() public payable {\n        onIncome();\n    }\n\n    function bonus() public view returns (uint256) {\n        return (watermark - fullfilled[msg.sender]) * holds[msg.sender];\n    }\n    \n    function setPrice(uint256 price, uint256 sell) public {\n        sellPrice[msg.sender] = price;\n        toSell[msg.sender] = sell;\n        emit PRICE_SET(msg.sender, holds[msg.sender], price, sell);\n    }\n\n    /**\n     * withdrawal the bonus\n     */\n    function withdrawal() public whenNotPaused {\n        if (holds[msg.sender] == 0) {\n            //you don't have any, don't bother\n            return;\n        }\n        uint256 value = bonus();\n        fullfilled[msg.sender] = watermark;\n\n        msg.sender.transfer(value);\n\n        emit WITHDRAWAL(msg.sender, value);\n    }\n\n    /**\n     * transfer holds from => to (only holds, no bouns)\n     * this will withdrawal the holder bonus of these holds\n     * and the to's fullfilled will go up, since total bonus unchanged, but holds goes more\n     */\n    function transferHolds(address from, address to, uint256 amount) internal {\n        require(holds[from] >= amount);\n        require(holds[to] + amount > holds[to]);\n\n        uint256 fromBonus = (watermark - fullfilled[from]) * amount;\n        uint256 toBonus = (watermark - fullfilled[to]) * holds[to];\n        \n\n        holds[from] -= amount;\n        holds[to] += amount;\n        fullfilled[to] = watermark - toBonus / holds[to];\n\n        from.transfer(fromBonus);\n\n        emit Transfer(from, to, amount);\n        emit WITHDRAWAL(from, fromBonus);\n    }\n\n    /**\n     * one can buy holds from anyone who set up an price,\n     * and u can buy @ price higher than he setup\n     */\n    function buyFrom(address from) public payable whenNotPaused {\n        require(sellPrice[from] > 0);\n        uint256 amount = msg.value / sellPrice[from];\n\n        if (amount >= holds[from]) {\n            amount = holds[from];\n        }\n\n        if (amount >= toSell[from]) {\n            amount = toSell[from];\n        }\n\n        require(amount > 0);\n\n        toSell[from] -= amount;\n        transferHolds(from, msg.sender, amount);\n        \n        from.transfer(msg.value);\n        emit SELL_HOLDS(from, msg.sender, amount, sellPrice[from]);\n    }\n    \n    function balanceOf(address _addr) public view returns (uint256) {\n        return holds[_addr];\n    }\n    \n    function transfer(address to, uint amount) public whenNotPaused returns(bool) {\n        transferHolds(msg.sender, to, amount);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 amount) public whenNotPaused returns (bool) {\n        require(allowance[from][msg.sender] >= amount);\n        \n        allowance[from][msg.sender] -= amount;\n        transferHolds(from, to, amount);\n        \n        return true;\n    }\n    \n    function approve(address to, uint256 amount) public returns (bool) {\n        allowance[msg.sender][to] = amount;\n        \n        emit Approval(msg.sender, to, amount);\n        return true;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return total;\n    }\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return allowance[owner][spender];\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405162001c4938038062001c4983398101806040528101908080518201929190602001805182019291906020018051906020019092919050505082600990805190602001906200006592919062000158565b5081600a90805190602001906200007e92919062000158565b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600781905550600754600160008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060088190555060008060146101000a81548160ff02191690831515021790555050505062000207565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019b57805160ff1916838001178555620001cc565b82800160010185558215620001cc579182015b82811115620001cb578251825591602001919060010190620001ae565b5b509050620001db9190620001df565b5090565b6200020491905b8082111562000200576000816000905550600101620001e6565b5090565b90565b611a3280620002176000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610148578063095ea7b3146101d857806313af40351461023d57806318160ddd1461028057806323b872dd146102ab5780632ddbd13a14610330578063313ce5671461035b578063691a3f641461038657806370a08231146103bc57806375b4d78c146104135780638456cb591461043e5780638da5cb5b1461046d57806392c51d3a146104c457806395d89b411461051b578063a9059cbb146105ab578063ac9f022214610610578063ba5482981461063f578063c3d073ff14610696578063d47c0fb0146106ed578063d4e93292146106f7578063dd62ed3e1461070e578063f13dc2e214610785578063f7d97577146107b0578063fcd393b9146107e7575b61014661083e565b005b34801561015457600080fd5b5061015d6108b1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019d578082015181840152602081019050610182565b50505050905090810190601f1680156101ca5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e457600080fd5b50610223600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061094f565b604051808215151515815260200191505060405180910390f35b34801561024957600080fd5b5061027e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a41565b005b34801561028c57600080fd5b50610295610adf565b6040518082815260200191505060405180910390f35b3480156102b757600080fd5b50610316600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ae9565b604051808215151515815260200191505060405180910390f35b34801561033c57600080fd5b50610345610c31565b6040518082815260200191505060405180910390f35b34801561036757600080fd5b50610370610c37565b6040518082815260200191505060405180910390f35b6103ba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c3d565b005b3480156103c857600080fd5b506103fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fa3565b6040518082815260200191505060405180910390f35b34801561041f57600080fd5b50610428610fec565b6040518082815260200191505060405180910390f35b34801561044a57600080fd5b50610453611078565b604051808215151515815260200191505060405180910390f35b34801561047957600080fd5b5061048261108b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104d057600080fd5b50610505600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110b0565b6040518082815260200191505060405180910390f35b34801561052757600080fd5b506105306110c8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610570578082015181840152602081019050610555565b50505050905090810190601f16801561059d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105b757600080fd5b506105f6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611166565b604051808215151515815260200191505060405180910390f35b34801561061c57600080fd5b5061063d600480360381019080803515159060200190929190505050611198565b005b34801561064b57600080fd5b50610680600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611283565b6040518082815260200191505060405180910390f35b3480156106a257600080fd5b506106d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061129b565b6040518082815260200191505060405180910390f35b6106f561083e565b005b34801561070357600080fd5b5061070c6112b3565b005b34801561071a57600080fd5b5061076f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611423565b6040518082815260200191505060405180910390f35b34801561079157600080fd5b5061079a6114aa565b6040518082815260200191505060405180910390f35b3480156107bc57600080fd5b506107e560048036038101908080359060200190929190803590602001909291905050506114b0565b005b3480156107f357600080fd5b50610828600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115f6565b6040518082815260200191505060405180910390f35b60003411156108af576007543481151561085457fe5b046006600082825401925050819055506006546007546006540211151561087757fe5b7f340d7466e722c08973f52ac86a4c000d4f6c19b64417a453dd19e14c22839a15346040518082815260200191505060405180910390a15b565b600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109475780601f1061091c57610100808354040283529160200191610947565b820191906000526020600020905b81548152906001019060200180831161092a57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a9c57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600754905090565b60008060149054906101000a900460ff16151515610b0657600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610b9157600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610c2684848461160e565b600190509392505050565b60075481565b60085481565b60008060149054906101000a900460ff16151515610c5a57600080fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610ca857600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205434811515610cf257fe5b049050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481101515610d8057600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481101515610e0b57600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b600081111515610e1a57600080fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610e7282338361160e565b8173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610eb8573d6000803e3d6000fd5b507f651744d5204c9af244d95924618709bd2f817ce34717a93fb66fda030f32cf80823383600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200194505050505060405180910390a15050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546006540302905090565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b60098054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561115e5780601f106111335761010080835404028352916020019161115e565b820191906000526020600020905b81548152906001019060200180831161114157829003601f168201915b505050505081565b60008060149054906101000a900460ff1615151561118357600080fd5b61118e33848461160e565b6001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111f357600080fd5b80600060146101000a81548160ff021916908315150217905550600060149054906101000a900460ff1615611253577fa9aad58c4b885acff8f9e1618bc43dfc95c9de94a9a651589e5fc1d248b5305f60405160405180910390a1611280565b7f1be35a59eaf211d3524f68a4558ae53028c9bbf75ad022c1de1b35bee8b3a1b560405160405180910390a15b50565b60026020528060005260406000206000915090505481565b60016020528060005260406000206000915090505481565b60008060149054906101000a900460ff161515156112d057600080fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561131d57611420565b611325610fec565b9050600654600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156113b3573d6000803e3d6000fd5b507f4e03afc455089609953ae3473818d6eb2bacfa74db3a37652aedb667304af3ef3382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b50565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60065481565b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f83ad795fd4878097869f887c81d26e2679538582c005f3f5c887cb3a4c6f93e333600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548484604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200194505050505060405180910390a15050565b60036020528060005260406000206000915090505481565b60008082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561165f57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011115156116ed57600080fd5b82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460065403029150600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546006540302905082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054818115156118a057fe5b0460065403600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561192e573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a37f4e03afc455089609953ae3473818d6eb2bacfa74db3a37652aedb667304af3ef8583604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a150505050505600a165627a7a723058208a9e3d9eb4f8214657c4a0a30db4aa4a45b92445098a4e7ae61bcc5ed9e5b8620029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000000000000349454d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011496e74206574686572206d616368696e65000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000000000000349454d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011496e74206574686572206d616368696e65000000000000000000000000000000"
}