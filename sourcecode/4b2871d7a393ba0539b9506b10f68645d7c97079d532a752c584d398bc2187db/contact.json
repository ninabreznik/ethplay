{
  "address": "0xafa59ea4399b5f55135ea535962efb796b7981f9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AsspaceToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-24\n*/\n\npragma solidity ^0.4.18;\n\n\ncontract ERC20 {\n\t//Sets events and functions for ERC20 token\n\tevent Approval(address indexed _owner, address indexed _spender, uint _value);\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\n\t\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\n\tfunction approve(address _spender, uint _value) returns (bool success);\n    function balanceOf(address _owner) constant returns (uint balance);\n    function transfer(address _to, uint _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n}\n\n\ncontract Owned {\n\t//Public variable\n    address public owner;\n\n\t//Sets contract creator as the owner\n    function Owned() {\n        owner = msg.sender;\n    }\n\t\n\t//Sets onlyOwner modifier for specified functions\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n\t//Allows for transfer of contract ownership\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }  \n\n    function div(uint256 a, uint256 b) internal returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n  \n    function mul(uint256 a, uint256 b) internal returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n}\n\n\ncontract BaseToken is ERC20, Owned {\n    //Applies SafeMath library to uint256 operations \n    using SafeMath for uint256;\n\n\t//Public variables\n\tstring public name; \n\tstring public symbol; \n\tuint256 public decimals;  \n    uint256 public initialTokens; \n\tuint256 public totalSupply; \n\tstring public version;\n\n\t//Creates arrays for balances\n    mapping (address => uint256) balance;\n    mapping (address => mapping (address => uint256)) allowed;\n\n\t//Constructor\n\tfunction BaseToken(string tokenName, string tokenSymbol, uint8 decimalUnits, uint256 initialAmount, string tokenVersion) {\n\t\tname = tokenName; \n\t\tsymbol = tokenSymbol; \n\t\tdecimals = decimalUnits; \n        initialTokens = initialAmount; \n\t\tversion = tokenVersion;\n\t}\n\t\n\t//Provides the remaining balance of approved tokens from function approve \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n\t//Allows for a certain amount of tokens to be spent on behalf of the account owner\n    function approve(address _spender, uint256 _value) returns (bool success) { \n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n\t//Returns the account balance \n    function balanceOf(address _owner) constant returns (uint256 remainingBalance) {\n        return balance[_owner];\n    }\n\n\t//Sends tokens from sender's account\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if ((balance[msg.sender] >= _value) && (balance[_to] + _value > balance[_to])) {\n            balance[msg.sender] -= _value;\n            balance[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { \n\t\t\treturn false; \n\t\t}\n    }\n\t\n\t//Transfers tokens from an approved account \n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if ((balance[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balance[_to] + _value > balance[_to])) {\n            balance[_to] += _value;\n            balance[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { \n\t\t\treturn false; \n\t\t}\n    }\n    \n}\n\ncontract AsspaceToken is Owned, BaseToken {\n    using SafeMath for uint256;\n\n    uint256 public amountRaised; \n    uint256 public deadline; \n    uint256 public price;        \n    uint256 public maxPreIcoAmount = 8000000;  \n\tbool preIco = true;\n    \n\tfunction AsspaceToken() \n\t\tBaseToken(\"ASSPACE Token\", \"ASP\", 0, 100000000000, \"1.0\") {\n            balance[msg.sender] = initialTokens;    \n            setPrice(2500000);\n            deadline = now - 1 days;\n    }\n\n    function () payable {\n        require((now < deadline) && \n                 (msg.value.div(1 finney) >= 100) &&\n                ((preIco && amountRaised.add(msg.value.div(1 finney)) <= maxPreIcoAmount) || !preIco)); \n\n        address recipient = msg.sender; \n        amountRaised = amountRaised.add(msg.value.div(1 finney)); \n        uint256 tokens = msg.value.mul(getPrice()).div(1 ether);\n        totalSupply = totalSupply.add(tokens);\n        balance[recipient] = balance[recipient].add(tokens);\n\t\tbalance[owner] = balance[owner].sub(tokens);\n\t\t\n        require(owner.send(msg.value)); \n\t\t\n        Transfer(0, recipient, tokens);\n    }   \n\n    function setPrice(uint256 newPriceper) onlyOwner {\n        require(newPriceper > 0); \n        \n        price = newPriceper; \n    }\n\t\n\tfunction getPrice() constant returns (uint256) {\n\t\treturn price;\n\t}\n\t\t\n    function startSale(uint256 lengthOfSale, bool isPreIco) onlyOwner {\n        require(lengthOfSale > 0); \n        \n        preIco = isPreIco;\n        deadline = now + lengthOfSale * 1 days; \n    }\n\n    function stopSale() onlyOwner {\n        deadline = now;\n    }\n    \n}",
  "bytecode": "6060604052627a1200600c556001600d60006101000a81548160ff02191690831515021790555034156200003257600080fd5b6040805190810160405280600d81526020017f4153535041434520546f6b656e000000000000000000000000000000000000008152506040805190810160405280600381526020017f4153500000000000000000000000000000000000000000000000000000000000815250600064174876e8006040805190810160405280600381526020017f312e300000000000000000000000000000000000000000000000000000000000815250336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460019080519060200190620001349291906200026d565b5083600290805190602001906200014d9291906200026d565b508260ff16600381905550816004819055508060069080519060200190620001779291906200026d565b505050505050600454600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550620001e5622625a0620001f76401000000000262001080176401000000009004565b620151804203600a819055506200031c565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200025357600080fd5b6000811115156200026357600080fd5b80600b8190555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002b057805160ff1916838001178555620002e1565b82800160010185558215620002e1579182015b82811115620002e0578251825591602001919060010190620002c3565b5b509050620002f09190620002f4565b5090565b6200031991905b8082111562000315576000816000905550600101620002fb565b5090565b90565b6115cb806200032c6000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461046a578063095ea7b3146104f8578063158e7e531461055257806318160ddd1461057b57806323b872dd146105a457806329dcb0cf1461061d578063313ce5671461064657806350bfeadc1461066f57806354fd4d501461069857806370a08231146107265780637b3e5e7b146107735780638da5cb5b1461079c57806391b7f5ed146107f157806395d89b411461081457806398d5fdca146108a2578063a035b1fe146108cb578063a9059cbb146108f4578063cfd447d71461094e578063dd62ed3e1461097c578063e36b0b37146109e8578063f2fde38b146109fd575b600080600a544210801561014b5750606461014866038d7ea4c6800034610a3690919063ffffffff16565b10155b80156101b65750600d60009054906101000a900460ff16801561019d5750600c5461019a61018966038d7ea4c6800034610a3690919063ffffffff16565b600954610a5190919063ffffffff16565b11155b806101b55750600d60009054906101000a900460ff16155b5b15156101c157600080fd5b3391506101f26101e166038d7ea4c6800034610a3690919063ffffffff16565b600954610a5190919063ffffffff16565b60098190555061022c670de0b6b3a764000061021e61020f610a6f565b34610a7990919063ffffffff16565b610a3690919063ffffffff16565b905061024381600554610a5190919063ffffffff16565b60058190555061029b81600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a5190919063ffffffff16565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061035181600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610aac90919063ffffffff16565b600760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050151561041657600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050005b341561047557600080fd5b61047d610ac5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104bd5780820151818401526020810190506104a2565b50505050905090810190601f1680156104ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561050357600080fd5b610538600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b63565b604051808215151515815260200191505060405180910390f35b341561055d57600080fd5b610565610c55565b6040518082815260200191505060405180910390f35b341561058657600080fd5b61058e610c5b565b6040518082815260200191505060405180910390f35b34156105af57600080fd5b610603600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c61565b604051808215151515815260200191505060405180910390f35b341561062857600080fd5b610630610f5c565b6040518082815260200191505060405180910390f35b341561065157600080fd5b610659610f62565b6040518082815260200191505060405180910390f35b341561067a57600080fd5b610682610f68565b6040518082815260200191505060405180910390f35b34156106a357600080fd5b6106ab610f6e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106eb5780820151818401526020810190506106d0565b50505050905090810190601f1680156107185780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561073157600080fd5b61075d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061100c565b6040518082815260200191505060405180910390f35b341561077e57600080fd5b610786611055565b6040518082815260200191505060405180910390f35b34156107a757600080fd5b6107af61105b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107fc57600080fd5b6108126004808035906020019091905050611080565b005b341561081f57600080fd5b6108276110f4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561086757808201518184015260208101905061084c565b50505050905090810190601f1680156108945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156108ad57600080fd5b6108b5610a6f565b6040518082815260200191505060405180910390f35b34156108d657600080fd5b6108de611192565b6040518082815260200191505060405180910390f35b34156108ff57600080fd5b610934600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611198565b604051808215151515815260200191505060405180910390f35b341561095957600080fd5b61097a60048080359060200190919080351515906020019091905050611380565b005b341561098757600080fd5b6109d2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611416565b6040518082815260200191505060405180910390f35b34156109f357600080fd5b6109fb61149d565b005b3415610a0857600080fd5b610a34600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611501565b005b6000808284811515610a4457fe5b0490508091505092915050565b6000808284019050838110151515610a6557fe5b8091505092915050565b6000600b54905090565b60008082840290506000841480610a9a5750828482811515610a9757fe5b04145b1515610aa257fe5b8091505092915050565b6000828211151515610aba57fe5b818303905092915050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b5b5780601f10610b3057610100808354040283529160200191610b5b565b820191906000526020600020905b815481529060010190602001808311610b3e57829003601f168201915b505050505081565b600081600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600c5481565b60055481565b600081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610d2e575081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610db95750600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610f505781600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610f55565b600090505b9392505050565b600a5481565b60035481565b60045481565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110045780601f10610fd957610100808354040283529160200191611004565b820191906000526020600020905b815481529060010190602001808311610fe757829003601f168201915b505050505081565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60095481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110db57600080fd5b6000811115156110ea57600080fd5b80600b8190555050565b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561118a5780601f1061115f5761010080835404028352916020019161118a565b820191906000526020600020905b81548152906001019060200180831161116d57829003601f168201915b505050505081565b600b5481565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156112685750600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156113755781600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905061137a565b600090505b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113db57600080fd5b6000821115156113ea57600080fd5b80600d60006101000a81548160ff0219169083151502179055506201518082024201600a819055505050565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114f857600080fd5b42600a81905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561155c57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a723058206e1fcb197f57be402b167b2205eabeb9c6f0a2aee93868275f4fd50678c100a90029"
}