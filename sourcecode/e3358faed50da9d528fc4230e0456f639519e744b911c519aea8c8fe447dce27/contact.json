{
  "address": "0x4668e1ab5e073c1361249e1bc1f78c0e52472af3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Presale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-28\n*/\n\npragma solidity ^0.4.11;\n\n\ninterface CommonWallet {\n    function receive() external payable;\n}\n\nlibrary StringUtils {\n    function concat(string _a, string _b)\n        internal\n        pure\n        returns (string)\n    {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n\n        bytes memory bab = new bytes(_ba.length + _bb.length);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\n        return string(bab);\n    }\n}\n\nlibrary UintStringUtils {\n    function toString(uint i)\n        internal\n        pure\n        returns (string)\n    {\n        if (i == 0) return '0';\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n// @title AddressUtils\n// @dev Utility library of inline functions on addresses\nlibrary AddressUtils {\n    // Returns whether the target address is a contract\n    // @dev This function will return false if invoked during the constructor of a contract,\n    // as the code is not actually created until after the constructor finishes.\n    // @param addr address to check\n    // @return whether the target address is a contract\n    function isContract(address addr)\n        internal\n        view\n        returns(bool)\n    {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n}\n\n // @title SafeMath256\n // @dev Math operations with safety checks that throw on error\nlibrary SafeMath256 {\n\n  // @dev Multiplies two numbers, throws on overflow.\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  // @dev Integer division of two numbers, truncating the quotient.\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n\n  // @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n\n  // @dev Adds two numbers, throws on overflow.\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\nlibrary SafeMath32 {\n  // @dev Multiplies two numbers, throws on overflow.\n  function mul(uint32 a, uint32 b) internal pure returns (uint32 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n\n  // @dev Integer division of two numbers, truncating the quotient.\n  function div(uint32 a, uint32 b) internal pure returns (uint32) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint32 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n\n  // @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n    assert(b <= a);\n    return a - b;\n  }\n\n\n  // @dev Adds two numbers, throws on overflow.\n  function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\nlibrary SafeMath8 {\n  // @dev Multiplies two numbers, throws on overflow.\n  function mul(uint8 a, uint8 b) internal pure returns (uint8 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n\n  // @dev Integer division of two numbers, truncating the quotient.\n  function div(uint8 a, uint8 b) internal pure returns (uint8) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint8 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n\n  // @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n    assert(b <= a);\n    return a - b;\n  }\n\n\n  // @dev Adds two numbers, throws on overflow.\n  function add(uint8 a, uint8 b) internal pure returns (uint8 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/// @title A facet of DragonCore that manages special access privileges.\ncontract DragonAccessControl \n{\n    // @dev Non Assigned address.\n    address constant NA = address(0);\n\n    /// @dev Contract owner\n    address internal controller_;\n\n    /// @dev Contract modes\n    enum Mode {TEST, PRESALE, OPERATE}\n\n    /// @dev Contract state\n    Mode internal mode_ = Mode.TEST;\n\n    /// @dev OffChain Server accounts ('minions') addresses\n    /// It's used for money withdrawal and export of tokens \n    mapping(address => bool) internal minions_;\n    \n    /// @dev Presale contract address. Can call `presale` method.\n    address internal presale_;\n\n    // Modifiers ---------------------------------------------------------------\n    /// @dev Limit execution to controller account only.\n    modifier controllerOnly() {\n        require(controller_ == msg.sender, \"controller_only\");\n        _;\n    }\n\n    /// @dev Limit execution to minion account only.\n    modifier minionOnly() {\n        require(minions_[msg.sender], \"minion_only\");\n        _;\n    }\n\n    /// @dev Limit execution to test time only.\n    modifier testModeOnly {\n        require(mode_ == Mode.TEST, \"test_mode_only\");\n        _;\n    }\n\n    /// @dev Limit execution to presale time only.\n    modifier presaleModeOnly {\n        require(mode_ == Mode.PRESALE, \"presale_mode_only\");\n        _;\n    }\n\n    /// @dev Limit execution to operate time only.\n    modifier operateModeOnly {\n        require(mode_ == Mode.OPERATE, \"operate_mode_only\");\n        _;\n    }\n\n     /// @dev Limit execution to presale account only.\n    modifier presaleOnly() {\n        require(msg.sender == presale_, \"presale_only\");\n        _;\n    }\n\n    /// @dev set state to Mode.OPERATE.\n    function setOperateMode()\n        external \n        controllerOnly\n        presaleModeOnly\n    {\n        mode_ = Mode.OPERATE;\n    }\n\n    /// @dev Set presale contract address. Becomes useless when presale is over.\n    /// @param _presale Presale contract address.\n    function setPresale(address _presale)\n        external\n        controllerOnly\n    {\n        presale_ = _presale;\n    }\n\n    /// @dev set state to Mode.PRESALE.\n    function setPresaleMode()\n        external\n        controllerOnly\n        testModeOnly\n    {\n        mode_ = Mode.PRESALE;\n    }    \n\n        /// @dev Get controller address.\n    /// @return Address of contract's controller.\n    function controller()\n        external\n        view\n        returns(address)\n    {\n        return controller_;\n    }\n\n    /// @dev Transfer control to new address. Set controller an approvee for\n    /// tokens that managed by contract itself. Remove previous controller value\n    /// from contract's approvees.\n    /// @param _to New controller address.\n    function setController(address _to)\n        external\n        controllerOnly\n    {\n        require(_to != NA, \"_to\");\n        require(controller_ != _to, \"already_controller\");\n\n        controller_ = _to;\n    }\n\n    /// @dev Check if address is a minion.\n    /// @param _addr Address to check.\n    /// @return True if address is a minion.\n    function isMinion(address _addr)\n        public view returns(bool)\n    {\n        return minions_[_addr];\n    }   \n\n    function getCurrentMode() \n        public view returns (Mode) \n    {\n        return mode_;\n    }    \n}\n\n/// @dev token description, storage and transfer functions\ncontract DragonBase is DragonAccessControl\n{\n    using SafeMath8 for uint8;\n    using SafeMath32 for uint32;\n    using SafeMath256 for uint256;\n    using StringUtils for string;\n    using UintStringUtils for uint;    \n\n    /// @dev The Birth event is fired whenever a new dragon comes into existence. \n    event Birth(address owner, uint256 petId, uint256 tokenId, uint256 parentA, uint256 parentB, string genes, string params);\n\n    /// @dev Token name\n    string internal name_;\n    /// @dev Token symbol\n    string internal symbol_;\n    /// @dev Token resolving url\n    string internal url_;\n\n    struct DragonToken {\n        // Constant Token params\n        uint8   genNum;  // generation number. uses for dragon view\n        string  genome;  // genome description\n        uint256 petId;   // offchain dragon identifier\n\n        // Parents\n        uint256 parentA;\n        uint256 parentB;\n\n        // Game-depening Token params\n        string  params;  // can change in export operation\n\n        // State\n        address owner; \n    }\n\n    /// @dev Count of minted tokens\n    uint256 internal mintCount_;\n    /// @dev Maximum token supply\n    uint256 internal maxSupply_;\n     /// @dev Count of burn tokens\n    uint256 internal burnCount_;\n\n    // Tokens state\n    /// @dev Token approvals values\n    mapping(uint256 => address) internal approvals_;\n    /// @dev Operator approvals\n    mapping(address => mapping(address => bool)) internal operatorApprovals_;\n    /// @dev Index of token in owner's token list\n    mapping(uint256 => uint256) internal ownerIndex_;\n    /// @dev Owner's tokens list\n    mapping(address => uint256[]) internal ownTokens_;\n    /// @dev Tokens\n    mapping(uint256 => DragonToken) internal tokens_;\n\n    // @dev Non Assigned address.\n    address constant NA = address(0);\n\n    /// @dev Add token to new owner. Increase owner's balance.\n    /// @param _to Token receiver.\n    /// @param _tokenId New token id.\n    function _addTo(address _to, uint256 _tokenId)\n        internal\n    {\n        DragonToken storage token = tokens_[_tokenId];\n        require(token.owner == NA, \"taken\");\n\n        uint256 lastIndex = ownTokens_[_to].length;\n        ownTokens_[_to].push(_tokenId);\n        ownerIndex_[_tokenId] = lastIndex;\n\n        token.owner = _to;\n    }\n\n    /// @dev Create new token and increase mintCount.\n    /// @param _genome New token's genome.\n    /// @param _params Token params string. \n    /// @param _parentA Token A parent.\n    /// @param _parentB Token B parent.\n    /// @return New token id.\n    function _createToken(\n        address _to,\n        \n        // Constant Token params\n        uint8   _genNum,\n        string   _genome,\n        uint256 _parentA,\n        uint256 _parentB,\n        \n        // Game-depening Token params\n        uint256 _petId,\n        string   _params        \n    )\n        internal returns(uint256)\n    {\n        uint256 tokenId = mintCount_.add(1);\n        mintCount_ = tokenId;\n\n        DragonToken memory token = DragonToken(\n            _genNum,\n            _genome,\n            _petId,\n\n            _parentA,\n            _parentB,\n\n            _params,\n            NA\n        );\n        \n        tokens_[tokenId] = token;\n        \n        _addTo(_to, tokenId);\n        \n        emit Birth(_to, _petId, tokenId, _parentA, _parentB, _genome, _params);\n        \n        return tokenId;\n    }    \n \n    /// @dev Get token genome.\n    /// @param _tokenId Token id.\n    /// @return Token's genome.\n    function getGenome(uint256 _tokenId)\n        external view returns(string)\n    {\n        return tokens_[_tokenId].genome;\n    }\n\n    /// @dev Get token params.\n    /// @param _tokenId Token id.\n    /// @return Token's params.\n    function getParams(uint256 _tokenId)\n        external view returns(string)\n    {\n        return tokens_[_tokenId].params;\n    }\n\n    /// @dev Get token parentA.\n    /// @param _tokenId Token id.\n    /// @return Parent token id.\n    function getParentA(uint256 _tokenId)\n        external view returns(uint256)\n    {\n        return tokens_[_tokenId].parentA;\n    }   \n\n    /// @dev Get token parentB.\n    /// @param _tokenId Token id.\n    /// @return Parent token id.\n    function getParentB(uint256 _tokenId)\n        external view returns(uint256)\n    {\n        return tokens_[_tokenId].parentB;\n    }\n\n    /// @dev Check if `_tokenId` exists. Check if owner is not addres(0).\n    /// @param _tokenId Token id\n    /// @return Return true if token owner is real.\n    function isExisting(uint256 _tokenId)\n        public view returns(bool)\n    {\n        return tokens_[_tokenId].owner != NA;\n    }    \n\n    /// @dev Receive maxium token supply value.\n    /// @return Contracts `maxSupply_` variable.\n    function maxSupply()\n        external view returns(uint256)\n    {\n        return maxSupply_;\n    }\n\n    /// @dev Set url prefix for tokenURI generation.\n    /// @param _url Url prefix value.\n    function setUrl(string _url)\n        external controllerOnly\n    {\n        url_ = _url;\n    }\n\n    /// @dev Get token symbol.\n    /// @return Token symbol name.\n    function symbol()\n        external view returns(string)\n    {\n        return symbol_;\n    }\n\n    /// @dev Get token URI to receive offchain information by it's id.\n    /// @param _tokenId Token id.\n    /// @return URL string. For example \"http://erc721.tld/tokens/1\".\n    function tokenURI(uint256 _tokenId)\n        external view returns(string)\n    {\n        return url_.concat(_tokenId.toString());\n    }\n\n     /// @dev Get token name.\n    /// @return Token name string.\n    function name()\n        external view returns(string)\n    {\n        return name_;\n    }\n\n    /// @dev return information about _owner tokens\n    function getTokens(address _owner)\n        external view  returns (uint256[], uint256[], byte[]) \n    {\n        uint256[] memory tokens = ownTokens_[_owner];\n        uint256[] memory tokenIds = new uint256[](tokens.length);\n        uint256[] memory petIds = new uint256[](tokens.length);\n\n        byte[] memory genomes = new byte[](tokens.length * 77);\n        uint index = 0;\n\n        for(uint i = 0; i < tokens.length; i++) {\n            uint256 tokenId = tokens[i];\n            \n            DragonToken storage token = tokens_[tokenId];\n\n            tokenIds[i] = tokenId;\n            petIds[i] = token.petId;\n            \n            bytes storage genome = bytes(token.genome);\n            \n            for(uint j = 0; j < genome.length; j++) {\n                genomes[index++] = genome[j];\n            }\n        }\n        return (tokenIds, petIds, genomes);\n    }\n    \n}\n\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n/// @dev See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC721/ERC721.sol\n\ncontract ERC721Basic \n{\n    /// @dev Emitted when token approvee is set\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n    /// @dev Emitted when owner approve all own tokens to operator.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    /// @dev Emitted when user deposit some funds.\n    event Deposit(address indexed _sender, uint256 _value);\n    /// @dev Emitted when user deposit some funds.\n    event Withdraw(address indexed _sender, uint256 _value);\n    /// @dev Emitted when token transferred to new owner\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n\n    // Required methods\n    function balanceOf(address _owner) external view returns (uint256 _balance);\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n    function exists(uint256 _tokenId) public view returns (bool _exists);\n    \n    function approve(address _to, uint256 _tokenId) external;\n    function getApproved(uint256 _tokenId) public view returns (address _to);\n\n    //function transfer(address _to, uint256 _tokenId) public;\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n\n    function totalSupply() public view returns (uint256 total);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic \n{\n    function name() external view returns (string _name);\n    function symbol() external view returns (string _symbol);\n    function tokenURI(uint256 _tokenId) external view returns (string);\n}\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n *  from ERC721 asset contracts.\n */\ncontract ERC721Receiver \n{\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\n   *  than the magic value MUST result in the transaction being reverted.\n   *  Note: the contract address is always the message sender.\n   * @param _from The sending address\n   * @param _tokenId The NFT identifier which is being transfered\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\n   */\n    function onERC721Received(address _from, uint256 _tokenId, bytes _data )\n        public returns(bytes4);\n}\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Metadata, ERC721Receiver \n{\n    /// @dev Interface signature 721 for interface detection.\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n\n    bytes4 constant InterfaceSignature_ERC165 = 0x01ffc9a7;\n    /*\n    bytes4(keccak256('supportsInterface(bytes4)'));\n    */\n\n    bytes4 constant InterfaceSignature_ERC721Enumerable = 0x780e9d63;\n    /*\n    bytes4(keccak256('totalSupply()')) ^\n    bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n    bytes4(keccak256('tokenByIndex(uint256)'));\n    */\n\n    bytes4 constant InterfaceSignature_ERC721Metadata = 0x5b5e139f;\n    /*\n    bytes4(keccak256('name()')) ^\n    bytes4(keccak256('symbol()')) ^\n    bytes4(keccak256('tokenURI(uint256)'));\n    */\n\n    bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\n    /*\n    bytes4(keccak256('balanceOf(address)')) ^\n    bytes4(keccak256('ownerOf(uint256)')) ^\n    bytes4(keccak256('approve(address,uint256)')) ^\n    bytes4(keccak256('getApproved(uint256)')) ^\n    bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n    bytes4(keccak256('isApprovedForAll(address,address)')) ^\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n    bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n    bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'));\n    */\n\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n    {\n        return ((_interfaceID == InterfaceSignature_ERC165)\n            || (_interfaceID == InterfaceSignature_ERC721)\n            || (_interfaceID == InterfaceSignature_ERC721Enumerable)\n            || (_interfaceID == InterfaceSignature_ERC721Metadata));\n    }    \n}\n\n/// @dev ERC721 methods\ncontract DragonOwnership is ERC721, DragonBase\n{\n    using StringUtils for string;\n    using UintStringUtils for uint;    \n    using AddressUtils for address;\n\n    /// @dev Emitted when token transferred to new owner. Additional fields is petId, genes, params\n    /// it uses for client-side indication\n    event TransferInfo(address indexed _from, address indexed _to, uint256 _tokenId, uint256 petId, string genes, string params);\n\n    /// @dev Specify if _addr is token owner or approvee. Also check if `_addr`\n    /// is operator for token owner.\n    /// @param _tokenId Token to check ownership of.\n    /// @param _addr Address to check if it's an owner or an aprovee of `_tokenId`.\n    /// @return True if token can be managed by provided `_addr`.\n    function isOwnerOrApproved(uint256 _tokenId, address _addr)\n        public view returns(bool)\n    {\n        DragonToken memory token = tokens_[_tokenId];\n\n        if (token.owner == _addr) {\n            return true;\n        }\n        else if (isApprovedFor(_tokenId, _addr)) {\n            return true;\n        }\n        else if (isApprovedForAll(token.owner, _addr)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /// @dev Limit execution to token owner or approvee only.\n    /// @param _tokenId Token to check ownership of.\n    modifier ownerOrApprovedOnly(uint256 _tokenId) {\n        require(isOwnerOrApproved(_tokenId, msg.sender), \"tokenOwnerOrApproved_only\");\n        _;\n    }\n\n    /// @dev Contract's own token only acceptable.\n    /// @param _tokenId Contract's token id.\n    modifier ownOnly(uint256 _tokenId) {\n        require(tokens_[_tokenId].owner == address(this), \"own_only\");\n        _;\n    }\n\n    /// @dev Determine if token is approved for specified approvee.\n    /// @param _tokenId Target token id.\n    /// @param _approvee Approvee address.\n    /// @return True if so.\n    function isApprovedFor(uint256 _tokenId, address _approvee)\n        public view returns(bool)\n    {\n        return approvals_[_tokenId] == _approvee;\n    }\n\n    /// @dev Specify is given address set as operator with setApprovalForAll.\n    /// @param _owner Token owner.\n    /// @param _operator Address to check if it an operator.\n    /// @return True if operator is set.\n    function isApprovedForAll(address _owner, address _operator)\n        public view returns(bool)\n    {\n        return operatorApprovals_[_owner][_operator];\n    }\n\n    /// @dev Check if `_tokenId` exists. Check if owner is not addres(0).\n    /// @param _tokenId Token id\n    /// @return Return true if token owner is real.\n    function exists(uint256 _tokenId)\n        public view returns(bool)\n    {\n        return tokens_[_tokenId].owner != NA;\n    }\n\n    /// @dev Get owner of a token.\n    /// @param _tokenId Token owner id.\n    /// @return Token owner address.\n    function ownerOf(uint256 _tokenId)\n        public view returns(address)\n    {\n        return tokens_[_tokenId].owner;\n    }\n\n    /// @dev Get approvee address. If there is not approvee returns 0x0.\n    /// @param _tokenId Token id to get approvee of.\n    /// @return Approvee address or 0x0.\n    function getApproved(uint256 _tokenId)\n        public view returns(address)\n    {\n        return approvals_[_tokenId];\n    }\n\n    /// @dev Grant owner alike controll permissions to third party.\n    /// @param _to Permission receiver.\n    /// @param _tokenId Granted token id.\n    function approve(address _to, uint256 _tokenId)\n        external ownerOrApprovedOnly(_tokenId)\n    {\n        address owner = ownerOf(_tokenId);\n        require(_to != owner);\n\n        if (getApproved(_tokenId) != NA || _to != NA) {\n            approvals_[_tokenId] = _to;\n\n            emit Approval(owner, _to, _tokenId);\n        }\n    }\n\n    /// @dev Current total tokens supply. Always less then maxSupply.\n    /// @return Difference between minted and burned tokens.\n    function totalSupply()\n        public view returns(uint256)\n    {\n        return mintCount_;\n    }    \n\n    /// @dev Get number of tokens which `_owner` owns.\n    /// @param _owner Address to count own tokens.\n    /// @return Count of owned tokens.\n    function balanceOf(address _owner)\n        external view returns(uint256)\n    {\n        return ownTokens_[_owner].length;\n    }    \n\n    /// @dev Internal set approval for all without _owner check.\n    /// @param _owner Granting user.\n    /// @param _to New account approvee.\n    /// @param _approved Set new approvee status.\n    function _setApprovalForAll(address _owner, address _to, bool _approved)\n        internal\n    {\n        operatorApprovals_[_owner][_to] = _approved;\n\n        emit ApprovalForAll(_owner, _to, _approved);\n    }\n\n    /// @dev Set approval for all account tokens.\n    /// @param _to Approvee address.\n    /// @param _approved Value true or false.\n    function setApprovalForAll(address _to, bool _approved)\n        external\n    {\n        require(_to != msg.sender);\n\n        _setApprovalForAll(msg.sender, _to, _approved);\n    }\n\n    /// @dev Remove approval bindings for token. Do nothing if no approval\n    /// exists.\n    /// @param _from Address of token owner.\n    /// @param _tokenId Target token id.\n    function _clearApproval(address _from, uint256 _tokenId)\n        internal\n    {\n        if (approvals_[_tokenId] == NA) {\n            return;\n        }\n\n        approvals_[_tokenId] = NA;\n        emit Approval(_from, NA, _tokenId);\n    }\n\n    /// @dev Check if contract was received by other side properly if receiver\n    /// is a ctontract.\n    /// @param _from Current token owner.\n    /// @param _to New token owner.\n    /// @param _tokenId token Id.\n    /// @param _data Transaction data.\n    /// @return True on success.\n    function _checkAndCallSafeTransfer(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    )\n        internal returns(bool)\n    {\n        if (! _to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(\n            _from, _tokenId, _data\n        );\n\n        return (retval == ERC721_RECEIVED);\n    }\n\n    /// @dev Remove token from owner. Unrecoverable.\n    /// @param _tokenId Removing token id.\n    function _remove(uint256 _tokenId)\n        internal\n    {\n        address owner = tokens_[_tokenId].owner;\n        _removeFrom(owner, _tokenId);\n    }\n\n    /// @dev Completely remove token from the contract. Unrecoverable.\n    /// @param _owner Owner of removing token.\n    /// @param _tokenId Removing token id.\n    function _removeFrom(address _owner, uint256 _tokenId)\n        internal\n    {\n        uint256 lastIndex = ownTokens_[_owner].length.sub(1);\n        uint256 lastToken = ownTokens_[_owner][lastIndex];\n\n        // Swap users token\n        ownTokens_[_owner][ownerIndex_[_tokenId]] = lastToken;\n        ownTokens_[_owner].length--;\n\n        // Swap token indexes\n        ownerIndex_[lastToken] = ownerIndex_[_tokenId];\n        ownerIndex_[_tokenId] = 0;\n\n        DragonToken storage token = tokens_[_tokenId];\n        token.owner = NA;\n    }\n\n    /// @dev Transfer token from owner `_from` to another address or contract\n    /// `_to` by it's `_tokenId`.\n    /// @param _from Current token owner.\n    /// @param _to New token owner.\n    /// @param _tokenId token Id.\n    function transferFrom( address _from, address _to, uint256 _tokenId )\n        public ownerOrApprovedOnly(_tokenId)\n    {\n        require(_from != NA);\n        require(_to != NA);\n\n        _clearApproval(_from, _tokenId);\n        _removeFrom(_from, _tokenId);\n        _addTo(_to, _tokenId);\n\n        emit Transfer(_from, _to, _tokenId);\n\n        DragonToken storage token = tokens_[_tokenId];\n        emit TransferInfo(_from, _to, _tokenId, token.petId, token.genome, token.params);\n    }\n\n    /// @dev Update token params and transfer to new owner. Only contract's own\n    /// tokens could be updated. Also notifies receiver of the token.\n    /// @param _to Address to transfer token to.\n    /// @param _tokenId Id of token that should be transferred.\n    /// @param _params New token params.\n    function updateAndSafeTransferFrom(\n        address _to,\n        uint256 _tokenId,\n        string _params\n    )\n        public\n    {\n        updateAndSafeTransferFrom(_to, _tokenId, _params, \"\");\n    }\n\n    /// @dev Update token params and transfer to new owner. Only contract's own\n    /// tokens could be updated. Also notifies receiver of the token and send\n    /// protion of _data to it.\n    /// @param _to Address to transfer token to.\n    /// @param _tokenId Id of token that should be transferred.\n    /// @param _params New token params.\n    /// @param _data Notification data.\n    function updateAndSafeTransferFrom(\n        address _to,\n        uint256 _tokenId,\n        string _params,\n        bytes _data\n    )\n        public\n    {\n        // Safe transfer from\n        updateAndTransferFrom(_to, _tokenId, _params, 0, 0);\n        require(_checkAndCallSafeTransfer(address(this), _to, _tokenId, _data));\n    }\n\n    /// @dev Update token params and transfer to new owner. Only contract's own\n    /// tokens could be updated.\n    /// @param _to Address to transfer token to.\n    /// @param _tokenId Id of token that should be transferred.\n    /// @param _params New token params.\n    function updateAndTransferFrom(\n        address _to,\n        uint256 _tokenId,\n        string _params,\n        uint256 _petId, \n        uint256 _transferCost\n    )\n        public\n        ownOnly(_tokenId)\n        minionOnly\n    {\n        require(bytes(_params).length > 0, \"params_length\");\n\n        // Update\n        tokens_[_tokenId].params = _params;\n        if (tokens_[_tokenId].petId == 0 ) {\n            tokens_[_tokenId].petId = _petId;\n        }\n\n        address from = tokens_[_tokenId].owner;\n\n        // Transfer from\n        transferFrom(from, _to, _tokenId);\n\n        // send to the server's wallet the transaction cost\n        // withdraw it from the balance of the contract. this amount must be withdrawn from the player\n        // on the side of the game server        \n        if (_transferCost > 0) {\n            msg.sender.transfer(_transferCost);\n        }\n    }\n\n    /// @dev Transfer token from one owner to new one and check if it was\n    /// properly received if receiver is a contact.\n    /// @param _from Current token owner.\n    /// @param _to New token owner.\n    /// @param _tokenId token Id.\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        public\n    {\n        safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /// @dev Transfer token from one owner to new one and check if it was\n    /// properly received if receiver is a contact.\n    /// @param _from Current token owner.\n    /// @param _to New token owner.\n    /// @param _tokenId token Id.\n    /// @param _data Transaction data.\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes _data\n    )\n        public\n    {\n        transferFrom(_from, _to, _tokenId);\n        require(_checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n    }\n\n    /// @dev Burn owned token. Increases `burnCount_` and decrease `totalSupply`\n    /// value.\n    /// @param _tokenId Id of burning token.\n    function burn(uint256 _tokenId)\n        public\n        ownerOrApprovedOnly(_tokenId)\n    {\n        address owner = tokens_[_tokenId].owner;\n        _remove(_tokenId);\n\n        burnCount_ += 1;\n\n        emit Transfer(owner, NA, _tokenId);\n    }\n\n    /// @dev Receive count of burned tokens. Should be greater than `totalSupply`\n    /// but less than `mintCount`.\n    /// @return Number of burned tokens\n    function burnCount()\n        external\n        view\n        returns(uint256)\n    {\n        return burnCount_;\n    }\n\n    function onERC721Received(address, uint256, bytes)\n        public returns(bytes4) \n    {\n        return ERC721_RECEIVED;\n    }\n}\n\n\n\n/// @title Managing contract. implements the logic of buying tokens, depositing / withdrawing funds \n/// to the project account and importing / exporting tokens\ncontract EtherDragonsCore is DragonOwnership \n{\n    using SafeMath8 for uint8;\n    using SafeMath32 for uint32;\n    using SafeMath256 for uint256;\n    using AddressUtils for address;\n    using StringUtils for string;\n    using UintStringUtils for uint;\n\n    // @dev Non Assigned address.\n    address constant NA = address(0);\n\n    /// @dev Bounty tokens count limit\n    uint256 public constant BOUNTY_LIMIT = 2500;\n    /// @dev Presale tokens count limit\n    uint256 public constant PRESALE_LIMIT = 7500;\n    ///@dev Total gen0tokens generation limit\n    uint256 public constant GEN0_CREATION_LIMIT = 90000;\n    \n    /// @dev Number of tokens minted in presale stage\n    uint256 internal presaleCount_;  \n    /// @dev Number of tokens minted for bounty campaign\n    uint256 internal bountyCount_;\n   \n    ///@dev Company bank address\n    address internal bank_;\n\n    // Extension ---------------------------------------------------------------\n\n    /// @dev Contract is not payable. To fullfil balance method `depositTo`\n    /// should be used.\n    function ()\n        public payable\n    {\n        revert();\n    }\n\n    /// @dev amount on the account of the contract. This amount consists of deposits  from players and the system reserve for payment of transactions\n    /// the player at any time to withdraw the amount corresponding to his account in the game, minus the cost of the transaction \n    function getBalance() \n        public view returns (uint256)\n    {\n        return address(this).balance;\n    }    \n\n    /// @dev at the moment of creation of the contract we transfer the address of the bank\n    /// presell contract address set later\n    constructor(\n        address _bank\n    )\n        public\n    {\n        require(_bank != NA);\n        \n        controller_ = msg.sender;\n        bank_ = _bank;\n        \n        // Meta\n        name_ = \"EtherDragons\";\n        symbol_ = \"ED\";\n        url_ = \"https://game.etherdragons.world/token/\";\n\n        // Token mint limit\n        maxSupply_ = GEN0_CREATION_LIMIT + BOUNTY_LIMIT + PRESALE_LIMIT;\n    }\n\n    /// Number of tokens minted in presale stage\n    function totalPresaleCount()\n        public view returns(uint256)\n    {\n        return presaleCount_;\n    }    \n\n    /// @dev Number of tokens minted for bounty campaign\n    function totalBountyCount()\n        public view returns(uint256)\n    {\n        return bountyCount_;\n    }    \n    \n    /// @dev Check if new token could be minted. Return true if count of minted\n    /// tokens less than could be minted through contract deploy.\n    /// Also, tokens can not be created more often than once in mintDelay_ minutes\n    /// @return True if current count is less then maximum tokens available for now.\n    function canMint()\n        public view returns(bool)\n    {\n        return (mintCount_ + presaleCount_ + bountyCount_) < maxSupply_;\n    }\n\n    /// @dev Here we write the addresses of the wallets of the server from which it is accessed\n    /// to contract methods.\n    /// @param _to New minion address\n    function minionAdd(address _to)\n        external controllerOnly\n    {\n        require(minions_[_to] == false, \"already_minion\");\n        \n        // разрешаем этому адресу пользоваться токенами контакта\n        // allow the address to use contract tokens \n        _setApprovalForAll(address(this), _to, true);\n        \n        minions_[_to] = true;\n    }\n\n    /// @dev delete the address of the server wallet\n    /// @param _to Minion address\n    function minionRemove(address _to)\n        external controllerOnly\n    {\n        require(minions_[_to], \"not_a_minion\");\n\n        // and forbid this wallet to use tokens of the contract\n        _setApprovalForAll(address(this), _to, false);\n        minions_[_to] = false;\n    }\n\n    /// @dev Here the player can put funds to the account of the contract\n    /// and get the same amount of in-game currency\n    /// the game server understands who puts money at the wallet address\n    function depositTo()\n        public payable\n    {\n        emit Deposit(msg.sender, msg.value);\n    }    \n    \n    /// @dev Transfer amount of Ethers to specified receiver. Only owner can\n    // call this method.\n    /// @param _to Transfer receiver.\n    /// @param _amount Transfer value.\n    /// @param _transferCost Transfer cost.\n    function transferAmount(address _to, uint256 _amount, uint256 _transferCost)\n        external minionOnly\n    {\n        require((_amount + _transferCost) <= address(this).balance, \"not enough money!\");\n        _to.transfer(_amount);\n\n        // send to the wallet of the server the transfer cost\n        // withdraw  it from the balance of the contract. this amount must be withdrawn from the player\n        // on the side of the game server\n        if (_transferCost > 0) {\n            msg.sender.transfer(_transferCost);\n        }\n\n        emit Withdraw(_to, _amount);\n    }        \n\n   /// @dev Mint new token with specified params. Transfer `_fee` to the\n    /// `bank`. \n    /// @param _to New token owner.\n    /// @param _fee Transaction fee.\n    /// @param _genNum Generation number..\n    /// @param _genome New genome unique value.\n    /// @param _parentA Parent A.\n    /// @param _parentB Parent B.\n    /// @param _petId Pet identifier.\n    /// @param _params List of parameters for pet.\n    /// @param _transferCost Transfer cost.\n    /// @return New token id.\n    function mintRelease(\n        address _to,\n        uint256 _fee,\n        \n        // Constant Token params\n        uint8   _genNum,\n        string   _genome,\n        uint256 _parentA,\n        uint256 _parentB,\n        \n        // Game-depening Token params\n        uint256 _petId,  //if petID = 0, then it was created outside of the server\n        string   _params,\n        uint256 _transferCost\n    )\n        external minionOnly operateModeOnly returns(uint256)\n    {\n        require(canMint(), \"can_mint\");\n        require(_to != NA, \"_to\");\n        require((_fee + _transferCost) <= address(this).balance, \"_fee\");\n        require(bytes(_params).length != 0, \"params_length\");\n        require(bytes(_genome).length == 77, \"genome_length\");\n        \n        // Parents should be both 0 or both not.\n        if (_parentA != 0 && _parentB != 0) {\n            require(_parentA != _parentB, \"same_parent\");\n        }\n        else if (_parentA == 0 && _parentB != 0) {\n            revert(\"parentA_empty\");\n        }\n        else if (_parentB == 0 && _parentA != 0) {\n            revert(\"parentB_empty\");\n        }\n\n        uint256 tokenId = _createToken(_to, _genNum, _genome, _parentA, _parentB, _petId, _params);\n\n        require(_checkAndCallSafeTransfer(NA, _to, tokenId, \"\"), \"safe_transfer\");\n\n        // Transfer mint fee to the fund\n        CommonWallet(bank_).receive.value(_fee)();\n\n        emit Transfer(NA, _to, tokenId);\n\n        // send to the server wallet server the transfer cost,\n        // withdraw it from the balance of the contract. this amount must be withdrawn from the player\n        // on the side of the game server\n        if (_transferCost > 0) {\n            msg.sender.transfer(_transferCost);\n        }\n\n        return tokenId;\n    }\n\n    /// @dev Create new token via presale state\n    /// @param _to New token owner.\n    /// @param _genome New genome unique value.\n    /// @return New token id.\n    /// at the pre-sale stage we sell the zero-generation pets, which have only a genome.\n    /// other attributes of such a token get when importing to the server\n    function mintPresell(address _to, string _genome)\n        external presaleOnly presaleModeOnly returns(uint256)\n    {\n        require(presaleCount_ < PRESALE_LIMIT, \"presale_limit\");\n\n        // у пресейл пета нет параметров. Их он получит после ввода в игру.\n        uint256 tokenId = _createToken(_to, 0, _genome, 0, 0, 0, \"\");\n        presaleCount_ += 1;\n\n        require(_checkAndCallSafeTransfer(NA, _to, tokenId, \"\"), \"safe_transfer\");\n\n        emit Transfer(NA, _to, tokenId);\n        \n        return tokenId;\n    }    \n    \n    /// @dev Create new token for bounty activity\n    /// @param _to New token owner.\n    /// @return New token id.\n    function mintBounty(address _to, string _genome)\n        external controllerOnly returns(uint256)\n    {\n        require(bountyCount_ < BOUNTY_LIMIT, \"bounty_limit\");\n\n        // bounty pet has no parameters. They will receive them after importing to the game.\n        uint256 tokenId = _createToken(_to, 0, _genome, 0, 0, 0, \"\");\n    \n        bountyCount_ += 1;\n        require(_checkAndCallSafeTransfer(NA, _to, tokenId, \"\"), \"safe_transfer\");\n\n        emit Transfer(NA, _to, tokenId);\n\n        return tokenId;\n    }        \n}\n\ncontract Presale\n{\n    // Extension ---------------------------------------------------------------\n    using AddressUtils for address;\n\n    // Events ------------------------------------------------------------------\n    ///the event is fired when starting a new wave presale stage\n    event StageBegin(uint8 stage, uint256 timestamp);\n\n    ///the event is fired when token sold\n    event TokensBought(address buyerAddr, uint256[] tokenIds, bytes genomes);\n\n    // Types -------------------------------------------------------------------\n    struct Stage {\n        // Predefined values\n        uint256 price;      // token's price on the stage\n        uint16 softcap;     // stage softCap\n        uint16 hardcap;     // stage hardCap\n        \n        // Unknown values\n        uint16 bought;      // sold on stage\n        uint32 startDate;   // stage's beginDate\n        uint32 endDate;     // stage's endDate\n    }\n    \n    // Constants ---------------------------------------------------------------\n    // 10 stages of 5 genocodes\n    uint8 public constant STAGES = 10;\n    uint8 internal constant TOKENS_PER_STAGE = 5;\n    address constant NA = address(0);\n    \n    // State -------------------------------------------------------------------\n    address internal CEOAddress;    // contract owner\n    address internal bank_;         // profit wallet address (not a contract)\n    address internal erc721_;       // main contract address\n    \n    /// @dev genomes for bounty stage\n    string[TOKENS_PER_STAGE][STAGES] internal genomes_;\n\n    /// stages data\n    Stage[STAGES] internal stages_;\n    \n    // internal transaction counter, it uses for random generator\n    uint32  internal counter_;\n    \n    /// stage is over\n    bool    internal isOver_;\n\n    /// stage number\n    uint8   internal stageIndex_;\n\n    ///  stage start Data\n    uint32  internal stageStart_;\n\n    // Lifetime ----------------------------------------------------------------\n    constructor(\n        address _bank,  \n        address _erc721\n    )\n        public\n    {\n        require(_bank != NA, '_bank');\n        require(_erc721.isContract(), '_erc721');\n\n        CEOAddress = msg.sender;\n\n        // Addresses should not be the same.\n        require(_bank != CEOAddress, \"bank = CEO\");\n        require(CEOAddress != _erc721, \"CEO = erc721\");\n        require(_erc721 != _bank, \"bank = erc721\");\n\n        // Update state\n        bank_ = _bank;\n        erc721_ = _erc721;\n       \n        // stages data \n        stages_[0].price = 10 finney;\n        stages_[0].softcap = 100;\n        stages_[0].hardcap = 300;\n        \n        stages_[1].price = 20 finney;\n        stages_[1].softcap = 156;\n        stages_[1].hardcap = 400;\n    \n        stages_[2].price = 32 finney;\n        stages_[2].softcap = 212;\n        stages_[2].hardcap = 500;\n        \n        stages_[3].price = 45 finney;\n        stages_[3].softcap = 268;\n        stages_[3].hardcap = 600;\n        \n        stages_[4].price = 58 finney;\n        stages_[4].softcap = 324;\n        stages_[4].hardcap = 700;\n    \n        stages_[5].price = 73 finney;\n        stages_[5].softcap = 380;\n        stages_[5].hardcap = 800;\n    \n        stages_[6].price = 87 finney;\n        stages_[6].softcap = 436;\n        stages_[6].hardcap = 900;\n    \n        stages_[7].price = 102 finney;\n        stages_[7].softcap = 492;\n        stages_[7].hardcap = 1000;\n    \n        stages_[8].price = 118 finney;\n        stages_[8].softcap = 548;\n        stages_[8].hardcap = 1100;\n        \n        stages_[9].price = 129 finney;\n        stages_[9].softcap = 604;\n        stages_[9].hardcap = 1200;\n    }\n\n    /// fill the genomes data\n    function setStageGenomes(\n        uint8 _stage,\n        string _genome0, \n        string _genome1,\n        string _genome2, \n        string _genome3, \n        string _genome4\n    ) \n        external controllerOnly\n    {\n        genomes_[_stage][0] = _genome0;\n        genomes_[_stage][1] = _genome1;\n        genomes_[_stage][2] = _genome2;\n        genomes_[_stage][3] = _genome3;\n        genomes_[_stage][4] = _genome4;\n    }\n\n    /// @dev Contract itself is non payable\n    function ()\n        public payable\n    {\n        revert();\n    }\n    \n    // Modifiers ---------------------------------------------------------------\n    \n    /// only from contract owner\n    modifier controllerOnly() {\n        require(msg.sender == CEOAddress, 'controller_only');\n        _;\n    }\n\n    /// only for active stage\n    modifier notOverOnly() {\n        require(isOver_ == false, 'notOver_only');\n        _;\n    }\n\n    // Getters -----------------------------------------------------------------\n    /// owner address\n    function getCEOAddress()\n        public view returns(address)\n    {\n        return CEOAddress;\n    }\n\n    /// counter from random number generator\n    function counter()\n        internal view returns(uint32)\n    {\n        return counter_;\n    }\n\n    // tokens sold by stage ...\n    function stageTokensBought(uint8 _stage)\n        public view returns(uint16)\n    {\n        return stages_[_stage].bought;\n    }\n\n    // stage softcap\n    function stageSoftcap(uint8 _stage)\n        public view returns(uint16)\n    {\n        return stages_[_stage].softcap;\n    }\n\n    /// stage hardcap\n    function stageHardcap(uint8 _stage)\n        public view returns(uint16)\n    {\n        return stages_[_stage].hardcap;\n    }\n\n    /// stage Start Date    \n    function stageStartDate(uint8 _stage)\n        public view returns(uint)\n    {\n        return stages_[_stage].startDate;\n    }\n    \n    /// stage Finish Date\n    function stageEndDate(uint8 _stage)\n        public view returns(uint)\n    {\n        return stages_[_stage].endDate;\n    }\n\n    /// stage token price\n    function stagePrice(uint _stage)\n        public view returns(uint)\n    {\n        return stages_[_stage].price;\n    }\n    \n    // Genome Logic -----------------------------------------------------------------\n    /// within the prelase , the dragons are generated, which are the ancestors of the destiny\n    /// newborns have a high chance of mutation and are unlikely to be purebred\n    /// the player will have to collect the breed, crossing a lot of pets\n    /// In addition, you will need to pick up combat abilities\n    /// these characteristics are assigned to the pet when the dragon is imported to the game server.    \n    function nextGenome()\n        internal returns(string)\n    {\n        uint8 n = getPseudoRandomNumber();\n\n        counter_ += 1;\n        \n        return genomes_[stageIndex_][n];\n    }\n\n    function getPseudoRandomNumber()\n        internal view returns(uint8 index)\n    {\n        uint8 n = uint8(\n            keccak256(abi.encode(msg.sender, block.timestamp + counter_))\n        );\n        return n % TOKENS_PER_STAGE;\n    }\n    \n    // PreSale Logic -----------------------------------------------------------------\n    /// Presale stage0 begin date set\n    /// presale start is possible only once    \n    function setStartDate(uint32 _startDate)\n        external controllerOnly\n    {\n        require(stages_[0].startDate == 0, 'already_set');\n        \n        stages_[0].startDate = _startDate;\n        stageStart_ = _startDate;\n        stageIndex_ = 0;\n        \n        emit StageBegin(stageIndex_, stageStart_); \n    }\n\n    /// current stage number\n    /// switches to the next stage if the time has come\n    function stageIndex()\n        external view returns(uint8)\n    {\n        Stage memory stage = stages_[stageIndex_];\n\n        if (stage.endDate > 0 && stage.endDate <= now) {\n            return stageIndex_ + 1;\n        }\n        else {\n            return stageIndex_;\n        }\n    }\n    \n    /// check whether the phase started\n    /// switch to the next stage, if necessary    \n    function beforeBuy()\n        internal\n    {\n        if (stageStart_ == 0) {\n            revert('presale_not_started');\n        }\n        else if (stageStart_ > now) {\n            revert('stage_not_started');\n        }\n\n        Stage memory stage = stages_[stageIndex_];\n        if (stage.endDate > 0 && stage.endDate <= now) \n        {\n            stageIndex_ += 1;\n            stageStart_ = stages_[stageIndex_].startDate;\n\n            if (stageStart_ > now) {\n                revert('stage_not_started');\n            }\n        }\n    }\n    \n    /// time to next midnight\n    function midnight()\n        public view returns(uint32)\n    {\n        uint32 tomorrow = uint32(now + 1 days);\n        uint32 remain = uint32(tomorrow % 1 days);\n        return tomorrow - remain;\n    }\n    \n    /// buying a specified number of tokens\n    function buyTokens(uint16 numToBuy)\n        public payable notOverOnly returns(uint256[])\n    {\n        beforeBuy();\n        \n        require(numToBuy > 0 && numToBuy <= 10, \"numToBuy error\");\n\n        Stage storage stage = stages_[stageIndex_];\n        require((stage.price * numToBuy) <= msg.value, 'price');\n        \n        uint16 prevBought = stage.bought;\n        require(prevBought + numToBuy <= stage.hardcap, \"have required tokens\");\n        \n        stage.bought += numToBuy;\n        uint256[] memory tokenIds = new uint256[](numToBuy);\n        \n        bytes memory genomes = new bytes(numToBuy * 77);\n        uint32 genomeByteIndex = 0;\n\n        for(uint16 t = 0; t < numToBuy; t++) \n        {\n            string memory genome = nextGenome();\n            uint256 tokenId = EtherDragonsCore(erc721_).mintPresell(msg.sender, genome);\n\n            bytes memory genomeBytes = bytes(genome);\n            \n            for(uint8 gi = 0; gi < genomeBytes.length; gi++) {\n                genomes[genomeByteIndex++] = genomeBytes[gi];\n            }\n\n            tokenIds[t] = tokenId;\n        }\n\n        // Transfer mint fee to the fund\n        bank_.transfer(address(this).balance);\n\n        if (stage.bought == stage.hardcap) {\n            stage.endDate = uint32(now);\n            stageStart_ = midnight() + 1 days + 1 seconds;\n            if (stageIndex_ < STAGES - 1) {\n                stageIndex_ += 1;\n            }\n            else {\n                isOver_ = true;\n            }\n        }\n        else if (stage.bought >= stage.softcap && prevBought < stage.softcap) {\n            stage.endDate = midnight() + 1 days;\n            if (stageIndex_ < STAGES - 1) {\n                stages_[stageIndex_ + 1].startDate = stage.endDate + 1 days;\n            }\n        }\n\n        emit TokensBought(msg.sender, tokenIds, genomes);\n\n        return tokenIds;\n    }\n\n    function currTime()\n        public view returns(uint)\n    {\n        return now;\n    }\n    \n    /// stages data\n    function getStagesInfo() \n        public view returns (uint256[] prices, uint16[] softcaps, uint16[] hardcaps, uint16[] boughts) \n    {\n            prices = new uint256[](STAGES);\n            softcaps = new uint16[](STAGES);\n            hardcaps = new uint16[](STAGES);\n            boughts = new uint16[](STAGES);\n            \n            for(uint8 s = 0; s < STAGES; s++) {\n                prices[s] = stages_[s].price;\n                softcaps[s] = stages_[s].softcap;\n                hardcaps[s] = stages_[s].hardcap;\n                boughts[s] = stages_[s].bought;\n            }\n    }\n    \n    /// stages dates data\n    function getStagesBeginEnd() \n        public view returns (uint32[] startDates, uint32[] endDates) \n    {\n        startDates = new uint32[](STAGES);\n        endDates = new uint32[](STAGES);\n        \n        for(uint8 s = 0; s < STAGES; s++) {\n            startDates[s] = stages_[s].startDate;\n            endDates[s] = stages_[s].endDate;\n        }\n    }\n\n    /// returns data which genomes can be purchased at the stage\n    function stageGenomes(uint8 _stage)\n        public view returns(byte[])\n    {\n        byte[] memory genomes = new byte[](uint16(TOKENS_PER_STAGE) * 77);\n        uint32 gbIndex = 0;\n\n        for(uint8 tokenIndex = 0; tokenIndex < TOKENS_PER_STAGE; tokenIndex++) {\n            \n            bytes memory genomeBytes = bytes(genomes_[_stage][tokenIndex]);\n            \n            for(uint8 gi = 0; gi < genomeBytes.length; gi++) {\n                genomes[gbIndex++] = genomeBytes[gi];\n            }\n        }\n\n        return genomes;\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160408062001f04833981016040528051602090910151600160a060020a0382161515620000a357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f5f62616e6b000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b620000c5600160a060020a03821664010000000062001a7e6200043a82021704565b15156200013357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5f65726337323100000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008054600160a060020a031916331790819055600160a060020a0383811691161415620001c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f62616e6b203d2043454f00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600054600160a060020a03828116911614156200024057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f43454f203d206572633732310000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038181169083161415620002bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f62616e6b203d2065726337323100000000000000000000000000000000000000604482015290519081900360640190fd5b60018054600160a060020a03938416600160a060020a03199182161790915560028054929093169116179055662386f26fc1000060355560368054606461ffff199182161763ffff00001990811663012c00001790925566470de4df820000603755603880548216609c17831663019000001790556671afd498d00000603955603a8054821660d41783166301f40000179055669fdf42f6e48000603b55603c8054630258000090831661010c17841617905566ce0eb154f90000603d55603e80546302bc0000908316610144178416179055670103591cfc9a8000603f5560408054630320000090831661017c1784161790556701351609ff7580006041556042805463038400009083166101b417841617905567016a6075a7170000604355604480546303e800009083166101ec1784161790556701a3385ff37f00006045556046805463044c00009083166102241784161790556701ca4cd108068000604755604880546304b00000921661025c1790921617905562000442565b6000903b1190565b611ab280620004526000396000f3006080604052600436106100ef5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416628fcc9481146100f45780630e662cf0146101215780631a6af7b7146101805780633fefdb011461019557806342d2c127146101ee5780634cd445191461029c5780635706d99a146102ce5780637372014e146102f95780637c79c167146103275780637dec22991461034257806384e64a1f1461047a5780639b3725e814610495578063c373c0ef146104b0578063c43b7934146104ce578063cfd129f8146104e6578063dc2af3de14610501578063dc97e36614610532575b600080fd5b34801561010057600080fd5b5061010f60ff60043516610547565b60408051918252519081900360200190f35b61013061ffff6004351661057e565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561016c578181015183820152602001610154565b505050509050019250505060405180910390f35b34801561018c57600080fd5b5061010f610d02565b3480156101a157600080fd5b506101ec6004803560ff16906024803580820192908101359160443580820192908101359160643580820192908101359160843580820192908101359160a435908101910135610d07565b005b3480156101fa57600080fd5b50610203610e2f565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561024757818101518382015260200161022f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561028657818101518382015260200161026e565b5050505090500194505050505060405180910390f35b3480156102a857600080fd5b506102b760ff60043516610f34565b6040805161ffff9092168252519081900360200190f35b3480156102da57600080fd5b506102e3610f63565b6040805160ff9092168252519081900360200190f35b34801561030557600080fd5b5061030e610f68565b6040805163ffffffff9092168252519081900360200190f35b34801561033357600080fd5b506102b760ff60043516610f7f565b34801561034e57600080fd5b50610357610fae565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156103a357818101518382015260200161038b565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156103e25781810151838201526020016103ca565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610421578181015183820152602001610409565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610460578181015183820152602001610448565b505050509050019850505050505050505060405180910390f35b34801561048657600080fd5b5061010f60ff60043516611170565b3480156104a157600080fd5b5061013060ff600435166111a7565b3480156104bc57600080fd5b506101ec63ffffffff6004351661133b565b3480156104da57600080fd5b5061010f600435611494565b3480156104f257600080fd5b506102b760ff600435166114ae565b34801561050d57600080fd5b506105166114d2565b60408051600160a060020a039092168252519081900360200190f35b34801561053e57600080fd5b506102e36114e1565b6000603560ff8316600a811061055957fe5b60020201600101600a9054906101000a900463ffffffff1663ffffffff169050919050565b60606000806060806000806060600060606000604960049054906101000a900460ff161515600015151415156105fe576040805160e560020a62461bcd02815260206004820152600c60248201527f6e6f744f7665725f6f6e6c790000000000000000000000000000000000000000604482015290519081900360640190fd5b6106066115cd565b60008c61ffff1611801561061f5750600a8c61ffff1611155b1515610675576040805160e560020a62461bcd02815260206004820152600e60248201527f6e756d546f427579206572726f72000000000000000000000000000000000000604482015290519081900360640190fd5b60495460359065010000000000900460ff16600a811061069157fe5b600202019950348c61ffff168b6000015402111515156106fb576040805160e560020a62461bcd02815260206004820152600560248201527f7072696365000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018a015461ffff640100000000820481169a506201000090910481168d8b019091161115610774576040805160e560020a62461bcd02815260206004820152601460248201527f6861766520726571756972656420746f6b656e73000000000000000000000000604482015290519081900360640190fd5b8b8a60010160048282829054906101000a900461ffff160192506101000a81548161ffff021916908361ffff1602179055508b61ffff166040519080825280602002602001820160405280156107d4578160200160208202803883390190505b5097508b604d0261ffff166040519080825280601f01601f19166020018201604052801561080c578160200160208202803883390190505b50965060009550600094505b8b61ffff168561ffff1610156109e35761083061182f565b600254604080517f2774d052000000000000000000000000000000000000000000000000000000008152336004820181815260248301938452855160448401528551959950600160a060020a0390941694632774d0529491938a939091606490910190602085019080838360005b838110156108b657818101518382015260200161089e565b50505050905090810190601f1680156108e35780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561090357600080fd5b505af1158015610917573d6000803e3d6000fd5b505050506040513d602081101561092d57600080fd5b50519250839150600090505b81518160ff1610156109bb57818160ff1681518110151561095657fe5b90602001015160f860020a900460f860020a02878780600101985063ffffffff1681518110151561098357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101610939565b82888661ffff168151811015156109ce57fe5b60209081029091010152600190940193610818565b600154604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610a1d573d6000803e3d6000fd5b5060018a0154640100000000810461ffff90811662010000909204161415610b055760018a0180546dffffffff0000000000000000000019166a01000000000000000000004263ffffffff1602179055610a75610f68565b6049805463ffffffff620151819093019290921666010000000000000269ffffffff00000000000019909216919091179081905560096501000000000090910460ff161015610aea576049805460ff6501000000000080830482166001019091160265ff000000000019909116179055610b00565b6049805464ff0000000019166401000000001790555b610bf9565b60018a015461ffff8082166401000000009092041610801590610b33575060018a015461ffff908116908a16105b15610bf957610b40610f68565b60018b01805463ffffffff6201518093909301929092166a0100000000000000000000026dffffffff000000000000000000001990921691909117905560495460096501000000000090910460ff161015610bf95789600101600a9054906101000a900463ffffffff1662015180016035604960059054906101000a900460ff1660010160ff16600a81101515610bd357fe5b6002020160010160066101000a81548163ffffffff021916908363ffffffff1602179055505b7ff9283f66e053ed95650ff2d732203a435bce1beb3c83a63fc07031fe6888e9633389896040518084600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610c79578181015183820152602001610c61565b50505050905001838103825284818151815260200191508051906020019080838360005b83811015610cb5578181015183820152602001610c9d565b50505050905090810190601f168015610ce25780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a150959a9950505050505050505050565b425b90565b600054600160a060020a03163314610d69576040805160e560020a62461bcd02815260206004820152600f60248201527f636f6e74726f6c6c65725f6f6e6c790000000000000000000000000000000000604482015290519081900360640190fd5b8989600360ff8e16600a8110610d7b57fe5b600502016000610d8d939101916119b5565b508787600360ff8e16600a8110610da057fe5b600502016001610db2939101916119b5565b508585600360ff8e16600a8110610dc557fe5b600502016002610dd7939101916119b5565b508383600360ff8e16600a8110610dea57fe5b600502016003610dfc939101916119b5565b508181600360ff8e16600a8110610e0f57fe5b600502016004610e21939101916119b5565b505050505050505050505050565b60408051600a808252610160820190925260609182916000916020820161014080388339505060408051600a808252610160820190925292955090506020820161014080388339019050509150600090505b600a60ff82161015610f2f57603560ff8216600a8110610e9d57fe5b6002020160010160069054906101000a900463ffffffff16838260ff16815181101515610ec657fe5b63ffffffff909216602092830290910190910152603560ff8216600a8110610eea57fe5b60020201600101600a9054906101000a900463ffffffff16828260ff16815181101515610f1357fe5b63ffffffff909216602092830290910190910152600101610e81565b509091565b6000603560ff8316600a8110610f4657fe5b6002020160010160049054906101000a900461ffff169050919050565b600a81565b620151804280820163ffffffff1682900690030190565b6000603560ff8316600a8110610f9157fe5b6002020160010160029054906101000a900461ffff169050919050565b60408051600a80825261016082019092526060918291829182916000916020820161014080388339505060408051600a808252610160820190925292975090506020820161014080388339505060408051600a808252610160820190925292965090506020820161014080388339505060408051600a808252610160820190925292955090506020820161014080388339019050509150600090505b600a60ff8216101561116957603560ff8216600a811061106657fe5b60020201548551869060ff841690811061107c57fe5b60209081029091010152603560ff8216600a811061109657fe5b6002020160010160009054906101000a900461ffff16848260ff168151811015156110bd57fe5b61ffff909216602092830290910190910152603560ff8216600a81106110df57fe5b6002020160010160029054906101000a900461ffff16838260ff1681518110151561110657fe5b61ffff909216602092830290910190910152603560ff8216600a811061112857fe5b6002020160010160049054906101000a900461ffff16828260ff1681518110151561114f57fe5b61ffff90921660209283029091019091015260010161104a565b5090919293565b6000603560ff8316600a811061118257fe5b6002020160010160069054906101000a900463ffffffff1663ffffffff169050919050565b604080516101818082526130408201909252606091829160009182918491839190602082016130208038833901905050945060009350600092505b600560ff8416101561133057600360ff8816600a81106111fe57fe5b600502018360ff1660058110151561121257fe5b01805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156112975780601f1061126c57610100808354040283529160200191611297565b820191906000526020600020905b81548152906001019060200180831161127a57829003601f168201915b50505050509150600090505b81518160ff16101561132557818160ff168151811015156112c057fe5b90602001015160f860020a900460f860020a02858580600101965063ffffffff168151811015156112ed57fe5b7fff000000000000000000000000000000000000000000000000000000000000009092166020928302909101909101526001016112a3565b6001909201916111e2565b509295945050505050565b600054600160a060020a0316331461139d576040805160e560020a62461bcd02815260206004820152600f60248201527f636f6e74726f6c6c65725f6f6e6c790000000000000000000000000000000000604482015290519081900360640190fd5b6036546601000000000000900463ffffffff1615611405576040805160e560020a62461bcd02815260206004820152600b60248201527f616c72656164795f736574000000000000000000000000000000000000000000604482015290519081900360640190fd5b6036805469ffffffff00000000000019908116660100000000000063ffffffff85811682029283179094556049805490931690911765ff00000000001916918290556040805160ff65010000000000850416815291909204909216602083015280517f46ce46adbcf66e5ccfb3981ba099c455f1b0d9cee3f1d54bbd37d3762c6a43a39281900390910190a150565b6000603582600a81106114a357fe5b600202015492915050565b6000603560ff8316600a81106114c057fe5b600202016001015461ffff1692915050565b600054600160a060020a031690565b60006114eb611a2f565b60495460359065010000000000900460ff16600a811061150757fe5b6040805160c08101825260029290920292909201805482526001015461ffff80821660208401526201000082048116938301939093526401000000008104909216606082015263ffffffff66010000000000008304811660808301526a010000000000000000000090920490911660a0820181905290915060001080156115985750428160a0015163ffffffff1611155b156115b757604960059054906101000a900460ff1660010191506115c9565b60495465010000000000900460ff1691505b5090565b6115d5611a2f565b6049546601000000000000900463ffffffff16151561163e576040805160e560020a62461bcd02815260206004820152601360248201527f70726573616c655f6e6f745f7374617274656400000000000000000000000000604482015290519081900360640190fd5b60495442660100000000000090910463ffffffff1611156116a9576040805160e560020a62461bcd02815260206004820152601160248201527f73746167655f6e6f745f73746172746564000000000000000000000000000000604482015290519081900360640190fd5b60495460359065010000000000900460ff16600a81106116c557fe5b6040805160c08101825260029290920292909201805482526001015461ffff80821660208401526201000082048116938301939093526401000000008104909216606082015263ffffffff66010000000000008304811660808301526a010000000000000000000090920490911660a0820181905290915060001080156117565750428160a0015163ffffffff1611155b1561182c576049805460ff6501000000000080830482166001018216810265ff00000000001990931692909217928390556035929190910416600a811061179957fe5b60020201600101546049805469ffffffff000000000000191666010000000000009283900463ffffffff90811684029190911791829055429290910416111561182c576040805160e560020a62461bcd02815260206004820152601160248201527f73746167655f6e6f745f73746172746564000000000000000000000000000000604482015290519081900360640190fd5b50565b6060600061183b61191a565b6049805463ffffffff8082166001011663ffffffff19909116179081905590915060039060ff6501000000000090910416600a811061187657fe5b600502018160ff1660058110151561188a57fe5b01805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561190f5780601f106118e45761010080835404028352916020019161190f565b820191906000526020600020905b8154815290600101906020018083116118f257829003601f168201915b505050505091505090565b604954604080513360208083019190915263ffffffff909316420181830152815180820383018152606090910191829052805160009384939182918401908083835b6020831061197b5780518252601f19909201916020918201910161195c565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600560ff9091160695945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106119f65782800160ff19823516178555611a23565b82800160010185558215611a23579182015b82811115611a23578235825591602001919060010190611a08565b506115c9929150611a64565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b610d0491905b808211156115c95760008155600101611a6a565b6000903b11905600a165627a7a723058200929c159307ddb3761ae8bf080321af40e57372033ae728f7b972f2a3b21b7aa0029000000000000000000000000aa7b1425d5f79386235c84e180874da8b63dc2920000000000000000000000001680855238bf0dfb458dcf46ceb146b18ef65bd2",
  "constructorArguments": "000000000000000000000000aa7b1425d5f79386235c84e180874da8b63dc2920000000000000000000000001680855238bf0dfb458dcf46ceb146b18ef65bd2"
}