{
  "address": "0x37d9033151eaf64cea6b7531ee0e4fd6f6f9d6d0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthCrystal",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-21\n*/\n\npragma solidity ^0.4.25;\n\ncontract EthCrystal\n{\n\n    /*\n        EthCrystal.com\n        Thanks for choosing us!\n\n        ███████╗████████╗██╗  ██╗ ██████╗██████╗ ██╗   ██╗███████╗████████╗ █████╗ ██╗         ██████╗ ██████╗ ███╗   ███╗\n        ██╔════╝╚══██╔══╝██║  ██║██╔════╝██╔══██╗╚██╗ ██╔╝██╔════╝╚══██╔══╝██╔══██╗██║        ██╔════╝██╔═══██╗████╗ ████║\n        █████╗     ██║   ███████║██║     ██████╔╝ ╚████╔╝ ███████╗   ██║   ███████║██║        ██║     ██║   ██║██╔████╔██║\n        ██╔══╝     ██║   ██╔══██║██║     ██╔══██╗  ╚██╔╝  ╚════██║   ██║   ██╔══██║██║        ██║     ██║   ██║██║╚██╔╝██║\n        ███████╗   ██║   ██║  ██║╚██████╗██║  ██║   ██║   ███████║   ██║   ██║  ██║███████╗██╗╚██████╗╚██████╔╝██║ ╚═╝ ██║\n        ╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝ ╚═════╝ ╚═════╝ ╚═╝     ╚═╝\n\n        #######               #####\n        #       ##### #    # #     # #####  #   #  ####  #####   ##   #           ####   ####  #    #\n        #         #   #    # #       #    #  # #  #        #    #  #  #          #    # #    # ##  ##\n        #####     #   ###### #       #    #   #    ####    #   #    # #          #      #    # # ## #\n        #         #   #    # #       #####    #        #   #   ###### #      ### #      #    # #    #\n        #         #   #    # #     # #   #    #   #    #   #   #    # #      ### #    # #    # #    #\n        #######   #   #    #  #####  #    #   #    ####    #   #    # ###### ###  ####   ####  #    #\n\n        Telegram: t.me/EthCrystalGame\n        \n        This is the second versoin of our smart-contract.\n        We have fixed all bugs and set the new speed values for Rounds so it is easier for users to play.\n        The first smart-contract address is: 0x5c6d8bb345f4299c76f24fc771ef04dd160c4d36\n        \n        There is no code which can be only executed by the contract creators.\n\n    */\n    using SafeMath for *;\n\n    // Tower Type details\n    struct TowersInfoList {\n        string name; // Tower name\n        uint256 timeLimit; // Maximum time increasement\n        uint256 warriorToTime; // Amount of seconds each warrior adds\n        uint256 currentRoundID; // Current Round ID\n        uint256 growthCoefficient; // Each warrior being bought increases the price of the next warrior. \n        uint256 winnerShare; // % to winner after the round [Active Fond]\n        uint256 nextRound; // % to next round pot\n        uint256 dividendShare; // % as dividends to holders after the round\n\n        mapping (uint256 => TowersInfo) RoundList; // Here the Rounds for each Tower are stored\n    }\n    \n    // Round details\n    struct TowersInfo {\n        uint256 roundID; // The Current Round ID\n        uint256 towerBalance; // Balance for distribution in the end\n        uint256 totalBalance; // Total balance with referrer or dev %\n        uint256 totalWarriors; // Total warriors being bought\n        uint256 timeToFinish; // The time when the round will be finished\n        uint256 timeLimit; // The maximum increasement\n        uint256 warriorToTime; // Amount of seconds each warrior adds\n        uint256 bonusPot; // % of tower balance from the previous round\n        address lastPlayer; // The last player bought warriors\n    }\n\n    // Player Details\n    struct PlayerInfo {\n        uint256 playerID; // Player's Unique Identifier\n        address playerAddress; // Player's Ethereum Address\n        address referralAddress; // Store the Ethereum Address of the referrer\n        string nickname; // Player's Nickname\n        mapping (uint256 => TowersRoundInfo) TowersList;\n    }\n\n    \n    struct TowersRoundInfo {\n        uint256 _TowerType;\n        mapping (uint256 => PlayerRoundInfo) RoundList;\n    }\n    \n    // All player's warriors for a particular Round\n    struct PlayerRoundInfo {\n        uint256 warriors;\n        uint256 cashedOut; // To Allow cashing out before the game finished\n    }\n    \n    // In-Game balance (Returnings + Referral Payings)\n    struct ReferralInfo {\n        uint256 balance;\n    }\n\n    uint256 public playerID_counter = 1; // The Unique Identifier for the next created player\n\n    uint256 public devShare = 5; // % to devs\n    uint256 public affShare = 10; // bounty % to reffers\n\n    mapping (address => PlayerInfo) public players; // Storage for players\n    mapping (uint256 => PlayerInfo) public playersByID; // Duplicate of the storage for players\n\n    mapping (address => ReferralInfo) public aff; // Storage for player refferal and returnings balances.\n\n    mapping (uint256 => TowersInfoList) public GameRounds; // Storage for Tower Rounds\n\n    address public ownerAddress; // The address of the contract creator\n    \n    event BuyEvent(address player, uint256 TowerID, uint256 RoundID, uint256 TotalWarriors, uint256 WarriorPrice, uint256 TimeLeft);\n\n    constructor() public {\n        ownerAddress = msg.sender; // Setting the address of the contact creator\n\n        // Creating Tower Types\n        GameRounds[0] = TowersInfoList(\"Crystal Tower\", 60*60*3,  60*3, 0,      10000000000000,     35, 15, 50);\n        GameRounds[1] = TowersInfoList(\"Red Tower\",     60*60*3,  60*3, 0,      20000000000000,     25,  5, 70);\n        GameRounds[2] = TowersInfoList(\"Gold Tower\",    60*60*3,  60*3, 0,     250000000000000,     40, 10, 50);\n        GameRounds[3] = TowersInfoList(\"Purple Tower\",  60*60*6,  60*3, 0,    5000000000000000,     30, 10, 60);\n        GameRounds[4] = TowersInfoList(\"Silver Tower\",  60*60*6,  60*3, 0,    1000000000000000,     35, 15, 50);\n        GameRounds[5] = TowersInfoList(\"Black Tower\",   60*60*6,  60*3, 0,    1000000000000000,     65, 10, 25);\n        GameRounds[6] = TowersInfoList(\"Toxic Tower\",   60*60*6,  60*3, 0,    2000000000000000,     65, 10, 25);\n\n        // Creating first Rounds for each Tower Type\n        newRound(0);\n        newRound(1);\n        newRound(2);\n        newRound(3);\n        newRound(4);\n        newRound(5);\n        newRound(6);\n    }\n\n    /**\n     * @dev Creates a new Round of a paricular Tower\n     * @param _TowerType the tower type (0 to 6)\n     */\n    function newRound (uint256 _TowerType) private {\n        GameRounds[_TowerType].currentRoundID++;\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID] = TowersInfo(GameRounds[_TowerType].currentRoundID, 0, 0, 0, now+GameRounds[_TowerType].timeLimit, GameRounds[_TowerType].timeLimit, GameRounds[_TowerType].warriorToTime,\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID-1].towerBalance*GameRounds[_TowerType].nextRound/100, // Moving nextRound% of the finished round balance to the next round\n        0x0); // New round\n    }\n    \n    \n    /**\n     * @dev Use to buy warriors for the current round of a particular Tower\n     * When the Round ends, somebody have to buy 1 warrior to start the new round.\n     * All ETH the player overpaid will be sent back to his balance (\"referralBalance\").\n     * @param _TowerType the tower type (0 to 6)\n     * @param _WarriorsAmount the amoun of warriors player would like to buy (at least 1)\n     * @param _referralID Default Value: 0. The ID of the player which will receive the 10% of the warriors cost.\n     */\n    function buyWarriors (uint256 _TowerType, uint _WarriorsAmount, uint256 _referralID) public payable {\n        require (msg.value > 10000000); // To prevent % abusing\n        require (_WarriorsAmount >= 1 && _WarriorsAmount < 1000000000); // The limitation of the amount of warriors being bought in 1 time\n        require (GameRounds[_TowerType].timeLimit > 0); // Checking if the _TowerType exists\n\n        if (players[msg.sender].playerID == 0){ // this is the new player\n            if (_referralID > 0 && _referralID != players[msg.sender].playerID && _referralID == playersByID[_referralID].playerID){\n                setNickname(\"\", playersByID[_referralID].playerAddress);  // Creating a new player...\n            }else{\n                setNickname(\"\", ownerAddress);\n            }\n        }\n\n        if (GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish < now){\n            // The game was ended. Starting the new game...\n\n            // Sending pot to the winner\n            aff[GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].lastPlayer].balance += GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].towerBalance*GameRounds[_TowerType].winnerShare/100;\n\n            // Sending the bonus pot to the winner\n            aff[GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].lastPlayer].balance += GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].bonusPot;\n\n            newRound(_TowerType);\n            //Event Winner and the new round\n            //return;\n        }\n\n        // Getting the price of the current warrior\n        uint256 _totalWarriors = GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalWarriors;\n        uint256 _warriorPrice = (_totalWarriors+1)*GameRounds[_TowerType].growthCoefficient; // Warrior Price\n\n        uint256 _value = (_WarriorsAmount*_warriorPrice)+(((_WarriorsAmount-1)*(_WarriorsAmount-1)+_WarriorsAmount-1)/2)*GameRounds[_TowerType].growthCoefficient;\n\n        require (msg.value >= _value); // Player pays enough\n\n        uint256 _ethToTake = affShare+devShare; // 15%\n\n\n        players[msg.sender].TowersList[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].warriors += _WarriorsAmount;\n\n        if (players[players[msg.sender].referralAddress].playerID > 0 && players[msg.sender].referralAddress != ownerAddress){\n            // To referrer and devs. In this case, referrer gets 10%, devs get 5%\n            aff[players[msg.sender].referralAddress].balance += _value*affShare/100; // 10%\n            aff[ownerAddress].balance += _value*devShare/100; // 5%\n        } else {\n            // To devs only. In this case, devs get 10%\n            _ethToTake = affShare;\n            aff[ownerAddress].balance += _value*_ethToTake/100; // 10%\n        }\n\n        if (msg.value-_value > 0){\n            aff[msg.sender].balance += msg.value-_value; // Returning to player the rest of eth\n        }\n\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].towerBalance += _value*(100-_ethToTake)/100; // 10-15%\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalBalance += _value;\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalWarriors += _WarriorsAmount;\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].lastPlayer = msg.sender;\n\n        // Timer increasement\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish += (_WarriorsAmount).mul(GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].warriorToTime);\n\n        // if the finish time is longer than the finish\n        if (GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish > now+GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeLimit){\n            GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish = now+GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeLimit;\n        }\n        \n        uint256 TotalWarriors = GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalWarriors;\n        uint256 TimeLeft = GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish;\n        \n        // Event about the new potential winner and some Tower Details\n        emit BuyEvent(msg.sender,\n        _TowerType,\n        GameRounds[_TowerType].currentRoundID,\n        TotalWarriors,\n        (TotalWarriors+1)*GameRounds[_TowerType].growthCoefficient,\n        TimeLeft);\n        \n        return;\n    }\n\n    /**\n     * @dev Claim the player's dividends of any round.\n     * @param _TowerType the tower type (0 to 6)\n     * @param _RoundID the round ID\n     */\n    function dividendCashout (uint256 _TowerType, uint256 _RoundID) public {\n        require (GameRounds[_TowerType].timeLimit > 0);\n\n        uint256 _warriors = players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].warriors;\n        require (_warriors > 0);\n        uint256 _totalEarned = _warriors*GameRounds[_TowerType].RoundList[_RoundID].towerBalance*GameRounds[_TowerType].dividendShare/GameRounds[_TowerType].RoundList[_RoundID].totalWarriors/100;\n        uint256 _alreadyCashedOut = players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].cashedOut;\n        uint256 _earnedNow = _totalEarned-_alreadyCashedOut;\n        require (_earnedNow > 0); // The total amount of dividends haven't been received by the player yet\n\n        players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].cashedOut = _totalEarned;\n\n        if (!msg.sender.send(_earnedNow)){\n            players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].cashedOut = _alreadyCashedOut;\n        }\n        return;\n    }\n\n    /**\n     * @dev Claim the player's In-Game balance such as returnings and referral payings.\n     */\n    function referralCashout () public {\n        require (aff[msg.sender].balance > 0);\n\n        uint256 _balance = aff[msg.sender].balance;\n\n        aff[msg.sender].balance = 0;\n\n        if (!msg.sender.send(_balance)){\n            aff[msg.sender].balance = _balance;\n        }\n    }\n\n    /**\n     * @dev Creates the new account\n     * @param nickname the nickname player would like to use (better to leave it empty)\n     * @param _referralAddress (the address of the player who invited the user)\n     */\n    function setNickname (string nickname, address _referralAddress)\n    public {\n        if (players[msg.sender].playerID == 0){\n            players[msg.sender] = PlayerInfo (playerID_counter, msg.sender, _referralAddress, nickname);\n            playersByID[playerID_counter] = PlayerInfo (playerID_counter, msg.sender, _referralAddress, nickname);\n            playerID_counter++;\n        }else{\n            players[msg.sender].nickname = nickname;\n            playersByID[players[msg.sender].playerID].nickname = nickname;\n        }\n    }\n\n\n    /**\n     * @dev The following functions are for the web-site implementation to get details about Towers, Rounds and Players\n     */\n     \n    function _playerRoundsInfo (address _playerAddress, uint256 _TowerType, uint256 _RoundID)\n    public\n    view\n    returns (uint256, uint256, uint256, uint256, bool, address) {\n        uint256 _warriors = players[_playerAddress].TowersList[_TowerType].RoundList[_RoundID].warriors;\n        TowersInfo memory r = GameRounds[_TowerType].RoundList[_RoundID];\n        bool isFinished = true;\n        if (r.timeToFinish > now){\n            isFinished = false;\n        }\n        return (\n        r.towerBalance*GameRounds[_TowerType].winnerShare/100,\n        _currentPlayerAmountUnclaimed(_playerAddress, _TowerType, _RoundID),\n        _warriors,\n        r.totalWarriors,\n        isFinished,\n        r.lastPlayer);\n    }\n\n\n    function _currentPlayerAmountUnclaimed (address _playerAddress, uint256 _TowerType, uint256 _RoundID)\n    public\n    view\n    returns (uint256) {\n        if (_RoundID == 0){\n            _RoundID = GameRounds[_TowerType].currentRoundID;\n        }\n        uint256 _warriors = players[_playerAddress].TowersList[_TowerType].RoundList[_RoundID].warriors;\n        uint256 _totalForCashOut = (_warriors*GameRounds[_TowerType].RoundList[_RoundID].towerBalance*GameRounds[_TowerType].dividendShare/GameRounds[_TowerType].RoundList[_RoundID].totalWarriors/100);\n        uint256 _unclaimedAmount = _totalForCashOut-players[_playerAddress].TowersList[_TowerType].RoundList[_RoundID].cashedOut;\n        return (_unclaimedAmount);\n    }\n    \n    function _playerInfo (uint256 _playerID)\n    public\n    view\n    returns (uint256, address, string, uint256) {\n        return (playersByID[_playerID].playerID,\n        playersByID[_playerID].playerAddress,\n        playersByID[_playerID].nickname,\n        aff[playersByID[_playerID].playerAddress].balance);\n    }\n\n    function _playerBalance (address _playerAddress)\n    public\n    view\n    returns (uint256) {\n        return aff[_playerAddress].balance;\n    }\n\n    function _TowerRoundDetails (uint256 _TowerType, uint256 _RoundID)\n    public\n    view\n    returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, address) {\n        TowersInfo memory r = GameRounds[_TowerType].RoundList[_RoundID];\n        return (\n        r.roundID,\n        r.towerBalance,\n        r.totalBalance,\n        r.totalWarriors,\n        r.timeToFinish,\n        r.timeLimit,\n        r.warriorToTime,\n        r.bonusPot,\n        r.lastPlayer\n        );\n    }\n}\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else\n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}",
  "bytecode": ""
}