{
  "address": "0x305f9d359cdbfc033f64c2e11cafa3d833b79faf",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HZ",
  "compilerVersion": "v0.4.12+commit.194ff033",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-31\n*/\n\npragma solidity ^0.4.12;\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\ncontract HZ is SafeMath{\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\taddress public owner;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n\tmapping (address => uint256) public freezeOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount frozen */\n    event Freeze(address indexed from, uint256 value);\n\t\n\t/* This notifies clients about the amount unfrozen */\n    event Unfreeze(address indexed from, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function HZ() {\n        balanceOf[msg.sender] = 50000000000;              // Give the creator all initial tokens\n        totalSupply = 50000000000;                        // Update total supply\n        name = 'Hertz';                                   // Set the name for display purposes\n        symbol = 'HZ';                               // Set the symbol for display purposes\n        decimals = 4;                            // Amount of decimals for display purposes\n\t\towner = msg.sender;\n    }\n\n    /* Send coins */\n    function transfer(address _to, uint256 _value) {\n        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n\t\tif (_value <= 0) throw; \n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n\n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n\t\tif (_value <= 0) throw; \n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n       \n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n\t\tif (_value <= 0) throw; \n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n\t\tif (_value <= 0) throw; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction freeze(uint256 _value) returns (bool success) {\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n\t\tif (_value <= 0) throw; \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n        Freeze(msg.sender, _value);\n        return true;\n    }\n\t\n\tfunction unfreeze(uint256 _value) returns (bool success) {\n        if (freezeOf[msg.sender] < _value) throw;            // Check if the sender has enough\n\t\tif (_value <= 0) throw; \n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n        Unfreeze(msg.sender, _value);\n        return true;\n    }\n\t\n\t// transfer balance to owner\n\tfunction withdrawEther(uint256 amount) {\n\t\tif(msg.sender != owner) throw;\n\t\towner.transfer(amount);\n\t}\n\t\n\t// can accept ether\n\tfunction() payable {\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b5b600160a060020a03331660009081526005602052604090819020640ba43b7400908190556003558051908101604052600581527f486572747a0000000000000000000000000000000000000000000000000000006020820152600090805161007c9291602001906100f5565b5060408051908101604052600281527f485a000000000000000000000000000000000000000000000000000000000000602082015260019080516100c49291602001906100f5565b5060028054600460ff1990911681179091558054600160a060020a03191633600160a060020a03161790555b610195565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013657805160ff1916838001178555610163565b82800160010185558215610163579182015b82811115610163578251825591602001919060010190610148565b5b50610170929150610174565b5090565b61019291905b80821115610170576000815560010161017a565b5090565b90565b610c2c806101a46000396000f300606060405236156100d85763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e1578063095ea7b31461016c57806318160ddd146101a257806323b872dd146101c7578063313ce567146102035780633bed33ce1461022c57806342966c68146102445780636623fc461461026e57806370a08231146102985780638da5cb5b146102c957806395d89b41146102f8578063a9059cbb14610383578063cd4217c1146103a7578063d7a78db8146103d8578063dd62ed3e14610402575b6100df5b5b565b005b34156100ec57600080fd5b6100f4610439565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101315780820151818401525b602001610118565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017757600080fd5b61018e600160a060020a03600435166024356104d7565b604051901515815260200160405180910390f35b34156101ad57600080fd5b6101b5610517565b60405190815260200160405180910390f35b34156101d257600080fd5b61018e600160a060020a036004358116906024351660443561051d565b604051901515815260200160405180910390f35b341561020e57600080fd5b6102166106c3565b60405160ff909116815260200160405180910390f35b341561023757600080fd5b6100df6004356106cc565b005b341561024f57600080fd5b61018e60043561071e565b604051901515815260200160405180910390f35b341561027957600080fd5b61018e6004356107e3565b604051901515815260200160405180910390f35b34156102a357600080fd5b6101b5600160a060020a03600435166108c3565b60405190815260200160405180910390f35b34156102d457600080fd5b6102dc6108d5565b604051600160a060020a03909116815260200160405180910390f35b341561030357600080fd5b6100f46108e4565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101315780820151818401525b602001610118565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038e57600080fd5b6100df600160a060020a0360043516602435610982565b005b34156103b257600080fd5b6101b5600160a060020a0360043516610aa0565b60405190815260200160405180910390f35b34156103e357600080fd5b61018e600435610ab2565b604051901515815260200160405180910390f35b341561040d57600080fd5b6101b5600160a060020a0360043581169060243516610b92565b60405190815260200160405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104cf5780601f106104a4576101008083540402835291602001916104cf565b820191906000526020600020905b8154815290600101906020018083116104b257829003601f168201915b505050505081565b60008082116104e557600080fd5b50600160a060020a03338116600090815260076020908152604080832093861683529290522081905560015b92915050565b60035481565b6000600160a060020a038316151561053457600080fd5b6000821161054157600080fd5b600160a060020a0384166000908152600560205260409020548290101561056757600080fd5b600160a060020a038316600090815260056020526040902054828101101561058e57600080fd5b600160a060020a03808516600090815260076020908152604080832033909416835292905220548211156105c157600080fd5b600160a060020a0384166000908152600560205260409020546105e49083610baf565b600160a060020a0380861660009081526005602052604080822093909355908516815220546106139083610bc8565b600160a060020a038085166000908152600560209081526040808320949094558783168252600781528382203390931682529190915220546106559083610baf565b600160a060020a03808616600081815260076020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b9392505050565b60025460ff1681565b60045433600160a060020a039081169116146106e757600080fd5b600454600160a060020a031681156108fc0282604051600060405180830381858888f19350505050151561071a57600080fd5b5b50565b600160a060020a0333166000908152600560205260408120548290101561074457600080fd5b6000821161075157600080fd5b600160a060020a0333166000908152600560205260409020546107749083610baf565b600160a060020a03331660009081526005602052604090205560035461079a9083610baf565b600355600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25060015b919050565b600160a060020a0333166000908152600660205260408120548290101561080957600080fd5b6000821161081657600080fd5b600160a060020a0333166000908152600660205260409020546108399083610baf565b600160a060020a0333166000908152600660209081526040808320939093556005905220546108689083610bc8565b600160a060020a0333166000818152600560205260409081902092909255907f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f9084905190815260200160405180910390a25060015b919050565b60056020526000908152604090205481565b600454600160a060020a031681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104cf5780601f106104a4576101008083540402835291602001916104cf565b820191906000526020600020905b8154815290600101906020018083116104b257829003601f168201915b505050505081565b600160a060020a038216151561099757600080fd5b600081116109a457600080fd5b600160a060020a033316600090815260056020526040902054819010156109ca57600080fd5b600160a060020a03821660009081526005602052604090205481810110156109f157600080fd5b600160a060020a033316600090815260056020526040902054610a149082610baf565b600160a060020a033381166000908152600560205260408082209390935590841681522054610a439082610bc8565b600160a060020a0380841660008181526005602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a35b5050565b60066020526000908152604090205481565b600160a060020a03331660009081526005602052604081205482901015610ad857600080fd5b60008211610ae557600080fd5b600160a060020a033316600090815260056020526040902054610b089083610baf565b600160a060020a033316600090815260056020908152604080832093909355600690522054610b379083610bc8565b600160a060020a0333166000818152600660205260409081902092909255907ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e09084905190815260200160405180910390a25060015b919050565b600760209081526000928352604080842090915290825290205481565b6000610bbd83831115610bf0565b508082035b92915050565b6000828201610be5848210801590610be05750838210155b610bf0565b8091505b5092915050565b80151561071a57600080fd5b5b505600a165627a7a72305820ae3bd4b74f81ed3449deeb47eac3d30667d2b1d7ea29d260709afd6c7d2972540029"
}