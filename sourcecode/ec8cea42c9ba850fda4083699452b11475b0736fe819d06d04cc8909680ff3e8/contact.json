{
  "address": "0x72f41244e09b3b2f09d9e2f5f1184fa8bd6b4a1e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EasySmart",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-06\n*/\n\npragma solidity ^0.4.25;\n\n/***********************************************************\n * Easy Smart Contract\n *  - GAIN 5.3% PER 24 HOURS (every 5900 blocks) 40 days  \n *  - GAIN 5.6% PER 24 HOURS (every 5900 blocks) 30 days  \n *  - GAIN 6.6% PER 24 HOURS (every 5900 blocks) 20 days  \n *  - GAIN 7.6% PER 24 HOURS (every 5900 blocks) 15 days  \n *  - GAIN 8.5% PER 24 HOURS (every 5900 blocks) 12 days   \n *  - GAIN 3% PER 24 HOURS (every 5900 blocks) forever  \n *  \n  * How to use:\n *  1. Send any amount of ether to make an investment (The Data input 1~6 investment category, the default is 1.)\n *  2. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're spending too much on GAS)\n *\n *  ****** When contract balance less than 0.0001eth, Automatically enter the next round\n * \n * RECOMMENDED GAS LIMIT: 300000\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\n * \n * \n *  https://www.easysmart.biz\n *  https://t.me/easy_smart\n ***********************************************************/\n\ncontract EasySmart {\n    using SafeMath              for *;\n\n    address public promoAddr_ = address(0xfCFbaFfD975B107B2Bcd58BF71DC78fBeBB6215D);\n\n    uint256 ruleSum_ = 6;\n\n    uint256 G_DayBlocks = 5900;\n    \n    uint256 public rId_ = 1;\n    mapping (uint256 => ESDatasets.Round) public round_; \n\n    mapping (uint256 => mapping(address => uint256)) public pIDxAddr_;  \n    mapping (uint256 => mapping(uint256 => ESDatasets.Player)) public player_; \n    mapping (uint256 => ESDatasets.Plan) private plan_;   \n\t\n\tfunction GetIdByAddr(address addr) public \n\t    view returns(uint256)\n\t{\n\t    return pIDxAddr_[rId_][addr];\n\t}\n\t\n\n\tfunction GetPlayerByUid(uint256 uid) public \n\t    view returns(uint256)\n\t{\n\t    ESDatasets.Player storage player = player_[rId_][uid];\n\n\t    return\n\t    (\n\t        player.planCount\n\t    );\n\t}\n\t\n    function GetPlanByUid(uint256 uid) public \n\t    view returns(uint256[],uint256[],uint256[],uint256[],uint256[],bool[])\n\t{\n\t    uint256[] memory planIds = new  uint256[] (player_[rId_][uid].planCount);\n\t    uint256[] memory startBlocks = new  uint256[] (player_[rId_][uid].planCount);\n\t    uint256[] memory investeds = new  uint256[] (player_[rId_][uid].planCount);\n\t    uint256[] memory atBlocks = new  uint256[] (player_[rId_][uid].planCount);\n\t    uint256[] memory payEths = new  uint256[] (player_[rId_][uid].planCount);\n\t    bool[] memory isCloses = new  bool[] (player_[rId_][uid].planCount);\n\t    \n        for(uint i = 0; i < player_[rId_][uid].planCount; i++) {\n\t        planIds[i] = player_[rId_][uid].plans[i].planId;\n\t        startBlocks[i] = player_[rId_][uid].plans[i].startBlock;\n\t        investeds[i] = player_[rId_][uid].plans[i].invested;\n\t        atBlocks[i] = player_[rId_][uid].plans[i].atBlock;\n\t        payEths[i] = player_[rId_][uid].plans[i].payEth;\n\t        isCloses[i] = player_[rId_][uid].plans[i].isClose;\n\t    }\n\t    \n\t    return\n\t    (\n\t        planIds,\n\t        startBlocks,\n\t        investeds,\n\t        atBlocks,\n\t        payEths,\n\t        isCloses\n\t    );\n\t}\n\t\nfunction GetPlanTimeByUid(uint256 uid) public \n\t    view returns(uint256[])\n\t{\n\t    uint256[] memory startTimes = new  uint256[] (player_[rId_][uid].planCount);\n\n        for(uint i = 0; i < player_[rId_][uid].planCount; i++) {\n\t        startTimes[i] = player_[rId_][uid].plans[i].startTime;\n\t    }\n\t    \n\t    return\n\t    (\n\t        startTimes\n\t    );\n\t}\t\n\n    constructor() public {\n        plan_[1] = ESDatasets.Plan(530,40);\n        plan_[2] = ESDatasets.Plan(560,30);\n        plan_[3] = ESDatasets.Plan(660,20);\n        plan_[4] = ESDatasets.Plan(760,15);\n        plan_[5] = ESDatasets.Plan(850,12);\n        plan_[6] = ESDatasets.Plan(300,0);\n        \n        round_[rId_].startTime = now;\n\n    }\n\t\n\tfunction register_(address addr) private{\n        round_[rId_].nowUserId = round_[rId_].nowUserId.add(1);\n        \n        address _addr = addr;\n        \n        pIDxAddr_[rId_][_addr] = round_[rId_].nowUserId;\n\n        player_[rId_][round_[rId_].nowUserId].addr = _addr;\n        player_[rId_][round_[rId_].nowUserId].planCount = 0;\n        \n\t}\n\t\n    \n    // this function called every time anyone sends a transaction to this contract\n    function () external payable {\n        if (msg.value == 0) {\n            withdraw();\n        } else {\n            invest();\n        }\n    } \t\n    \n    function invest() private {\n\t    uint256 _planId = bytesToUint(msg.data);\n\t    \n\t    if (_planId<1 || _planId > ruleSum_) {\n\t        _planId = 1;\n\t    }\n        \n\t\t//get uid\n\t\tuint256 uid = pIDxAddr_[rId_][msg.sender];\n\t\t\n\t\t//first\n\t\tif (uid == 0) {\n\t\t    register_(msg.sender);\n\t\t\tuid = round_[rId_].nowUserId;\n\t\t}\n\t\t\n        // record block number and invested amount (msg.value) of this transaction\n        uint256 planCount = player_[rId_][uid].planCount;\n        player_[rId_][uid].plans[planCount].planId = _planId;\n        player_[rId_][uid].plans[planCount].startTime = now;\n        player_[rId_][uid].plans[planCount].startBlock = block.number;\n        player_[rId_][uid].plans[planCount].atBlock = block.number;\n        player_[rId_][uid].plans[planCount].invested = msg.value;\n        player_[rId_][uid].plans[planCount].payEth = 0;\n        player_[rId_][uid].plans[planCount].isClose = false;\n        \n        player_[rId_][uid].planCount = player_[rId_][uid].planCount.add(1);\n\n        round_[rId_].ethSum = round_[rId_].ethSum.add(msg.value);\n        \n        if (msg.value > 1000000000) {\n\n            uint256 promoFee = (msg.value.mul(5)).div(100);\n            promoAddr_.transfer(promoFee);\n            \n        } \n        \n    }\n   \n\t\n\tfunction withdraw() private {\n\t    require(msg.value == 0, \"withdraw fee is 0 ether, please set the exact amount\");\n\t    \n\t    uint256 uid = pIDxAddr_[rId_][msg.sender];\n\t    require(uid != 0, \"no invest\");\n\n        for(uint i = 0; i < player_[rId_][uid].planCount; i++) {\n\t        if (player_[rId_][uid].plans[i].isClose) {\n\t            continue;\n\t        }\n\n            ESDatasets.Plan plan = plan_[player_[rId_][uid].plans[i].planId];\n            \n            uint256 blockNumber = block.number;\n            bool bClose = false;\n            if (plan.dayRange > 0) {\n                \n                uint256 endBlockNumber = player_[rId_][uid].plans[i].startBlock.add(plan.dayRange*G_DayBlocks);\n                if (blockNumber > endBlockNumber){\n                    blockNumber = endBlockNumber;\n                    bClose = true;\n                }\n            }\n            \n            uint256 amount = player_[rId_][uid].plans[i].invested * plan.interest / 10000 * (blockNumber - player_[rId_][uid].plans[i].atBlock) / G_DayBlocks;\n\n            // send calculated amount of ether directly to sender (aka YOU)\n            address sender = msg.sender;\n            sender.send(amount);\n\n            // record block number and invested amount (msg.value) of this transaction\n            player_[rId_][uid].plans[i].atBlock = block.number;\n            player_[rId_][uid].plans[i].isClose = bClose;\n            player_[rId_][uid].plans[i].payEth += amount;\n        }\n        \n        if (this.balance < 100000000000000) { //0.0001eth\n            rId_ = rId_.add(1);\n            round_[rId_].startTime = now;\n        }\n\t}\n\t\n    function bytesToUint(bytes b) private returns (uint256){\n        uint256 number;\n        for(uint i=0;i<b.length;i++){\n            number = number + uint(b[i])*(2**(8*(b.length-(i+1))));\n        }\n        return number;\n    }\t\n}\n\n/***********************************************************\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr \n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n ***********************************************************/\n library SafeMath {\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) \n        internal \n        pure \n        returns (uint256 c) \n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256) \n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256 c) \n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n    \n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y) \n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y) \n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n    \n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n        internal\n        pure\n        returns (uint256)\n    {\n        return (mul(x,x));\n    }\n    \n    /**\n     * @dev x to the power of y \n     */\n    function pwr(uint256 x, uint256 y)\n        internal \n        pure \n        returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else \n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}\n\n/***********************************************************\n * ESDatasets library\n ***********************************************************/\nlibrary ESDatasets {\n    \n    struct Round {\n        uint256 nowUserId;\n        uint256 ethSum;\n        uint256 startTime;\n    }\n    \n    struct Player {\n        address addr;   // player address\n        uint256 planCount;\n        mapping(uint256=>PalyerPlan) plans;\n    }\n    \n    struct PalyerPlan {\n        uint256 planId;\n        uint256 startTime;\n        uint256 startBlock;\n        uint256 invested;    //\n        uint256 atBlock;    // \n        uint256 payEth;\n        bool isClose;\n    }\n\n    struct Plan {\n        uint256 interest;    // interest per day %%\n        uint256 dayRange;    // days, 0 means No time limit\n    }    \n}",
  "bytecode": ""
}