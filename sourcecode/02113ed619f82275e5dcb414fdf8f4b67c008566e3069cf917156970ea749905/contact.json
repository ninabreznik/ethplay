{
  "address": "0x898c6832be762d0773a854bdb59420c0ff9a2600",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VotingChallenge",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-21\n*/\n\npragma solidity ^0.4.17;\n\n/**\n    This contract represents a sort of time-limited challenge,\n    where users can vote for some candidates.\n    After the deadline comes the contract will define a winner and vote holders can get their reward.\n**/\ncontract VotingChallenge {\n    uint public challengeDuration;\n    uint public challengePrize;\n    uint public creatorPrize;\n    uint public cryptoVersusPrize;\n    uint public challengeStarted;\n    uint public candidatesNumber;\n    address public creator;\n    uint16 public creatorFee;       // measured in in tenths of a percent\n    address public cryptoVersusWallet;\n    uint16 public cryptoVersusFee;  // measured in in tenths of a percent\n    uint public winner;\n    bool public isVotingPeriod;\n    bool public beforeVoting;\n    uint[] public votes;\n    mapping( address => mapping (uint => uint)) public userVotesDistribution;\n    uint private lastPayment;\n\n    // Modifiers\n    modifier inVotingPeriod() {\n        require(isVotingPeriod);\n        _;\n    }\n\n    modifier afterVotingPeriod() {\n        require(!isVotingPeriod);\n        _;\n    }\n\n    modifier onlyCreator() {\n        require(msg.sender == creator);\n        _;\n    }\n\n    // Events\n    event ChallengeBegins(address _creator, uint16 _creatorFee, uint _candidatesNumber, uint _challengeDuration);\n    event NewVotesFor(address _participant, uint _candidate, uint _votes);\n    event TransferVotes(address _from, address _to, uint _candidateIndex, uint _votes);\n    event EndOfChallenge(uint _winner, uint _winnerVotes, uint _challengePrize);\n    event RewardWasPaid(address _participant, uint _amount);\n    event CreatorRewardWasPaid(address _creator, uint _amount);\n    event CryptoVersusRewardWasPaid(address _cryptoVersusWallet, uint _amount);\n\n    // Constructor\n    constructor(uint _challengeDuration, uint _candidatesNumber, uint16 _creatorFee) public {\n        challengeDuration = _challengeDuration;\n        candidatesNumber = _candidatesNumber;\n        votes.length = candidatesNumber + 1; // we will never use the first elements of array (with zero index)\n        creator = msg.sender;\n        cryptoVersusWallet = 0xa0bedE75cfeEF0266f8A31b47074F5f9fBE1df80;\n        creatorFee = _creatorFee;\n        cryptoVersusFee = 25;\n        beforeVoting = true;\n\n        // Check that creatorFee and cryptoVersusFee are less than 1000\n        if(creatorFee > 1000) {\n            creatorFee = 1000;\n            cryptoVersusFee = 0;\n            return;\n        }\n        if(cryptoVersusFee > 1000) {\n            cryptoVersusFee = 1000;\n            creatorFee = 0;\n            return;\n        }\n        if(creatorFee + cryptoVersusFee > 1000) {\n            cryptoVersusFee = 1000 - creatorFee;\n        }\n    }\n\n    // Last block timestamp getter\n    function getTime() public view returns (uint) {\n        return now;\n    }\n\n    function getAllVotes() public view returns (uint[]) {\n        return votes;\n    }\n\n    // Start challenge\n    function startChallenge() public onlyCreator {\n        require(beforeVoting);\n        isVotingPeriod = true;\n        beforeVoting = false;\n        challengeStarted = now;\n\n        emit ChallengeBegins(creator, creatorFee, candidatesNumber, challengeDuration);\n    }\n\n    // Change creator address\n    function changeCreator(address newCreator) public onlyCreator {\n        creator = newCreator;\n    }\n\n    // Change Crypto Versus wallet address\n    function changeWallet(address newWallet) public {\n        require(msg.sender == cryptoVersusWallet);\n        cryptoVersusWallet = newWallet;\n    }\n\n    // Vote for candidate\n    function voteForCandidate(uint candidate) public payable inVotingPeriod {\n        require(candidate <= candidatesNumber);\n        require(candidate > 0);\n        require(msg.value > 0);\n\n        lastPayment = msg.value;\n        if(checkEndOfChallenge()) {\n            msg.sender.transfer(lastPayment);\n            return;\n        }\n        lastPayment = 0;\n\n        // Add new votes for community\n        votes[candidate] += msg.value;\n\n        // Change the votes distribution\n        userVotesDistribution[msg.sender][candidate] += msg.value;\n\n        // Fire the event\n        emit NewVotesFor(msg.sender, candidate, msg.value);\n    }\n\n    // Vote for candidate\n    function voteForCandidate_(uint candidate, address sender) public payable inVotingPeriod {\n        require(candidate <= candidatesNumber);\n        require(candidate > 0);\n        require(msg.value > 0);\n\n        lastPayment = msg.value;\n        if(checkEndOfChallenge()) {\n            sender.transfer(lastPayment);\n            return;\n        }\n        lastPayment = 0;\n\n        // Add new votes for community\n        votes[candidate] += msg.value;\n\n        // Change the votes distribution\n        userVotesDistribution[sender][candidate] += msg.value;\n\n        // Fire the event\n        emit NewVotesFor(sender, candidate, msg.value);\n    }\n\n    // Transfer votes to anybody\n    function transferVotes (address to, uint candidate) public inVotingPeriod {\n        require(userVotesDistribution[msg.sender][candidate] > 0);\n        uint votesToTransfer = userVotesDistribution[msg.sender][candidate];\n        userVotesDistribution[msg.sender][candidate] = 0;\n        userVotesDistribution[to][candidate] += votesToTransfer;\n\n        // Fire the event\n        emit TransferVotes(msg.sender, to, candidate, votesToTransfer);\n    }\n\n    // Check the deadline\n    // If success then define a winner and close the challenge\n    function checkEndOfChallenge() public inVotingPeriod returns (bool) {\n        if (challengeStarted + challengeDuration > now)\n            return false;\n        uint theWinner;\n        uint winnerVotes;\n        uint actualBalance = address(this).balance - lastPayment;\n\n        for (uint i = 1; i <= candidatesNumber; i++) {\n            if (votes[i] > winnerVotes) {\n                winnerVotes = votes[i];\n                theWinner = i;\n            }\n        }\n        winner = theWinner;\n        creatorPrize = (actualBalance * creatorFee) / 1000;\n        cryptoVersusPrize = (actualBalance * cryptoVersusFee) / 1000;\n        challengePrize = actualBalance - creatorPrize - cryptoVersusPrize;\n        isVotingPeriod = false;\n\n        // Fire the event\n        emit EndOfChallenge(winner, winnerVotes, challengePrize);\n        return true;\n    }\n\n    // Send a reward if user voted for a winner\n    function getReward() public afterVotingPeriod {\n        if (userVotesDistribution[msg.sender][winner] > 0) {\n            // Compute a vote ratio and send the reward\n            uint userVotesForWinner = userVotesDistribution[msg.sender][winner];\n            userVotesDistribution[msg.sender][winner] = 0;\n            uint reward = (challengePrize * userVotesForWinner) / votes[winner];\n            msg.sender.transfer(reward);\n\n            // Fire the event\n            emit RewardWasPaid(msg.sender, reward);\n        }\n    }\n\n    // Send a reward if user voted for a winner\n    function sendReward(address to) public afterVotingPeriod {\n        if (userVotesDistribution[to][winner] > 0) {\n            // Compute a vote ratio and send the reward\n            uint userVotesForWinner = userVotesDistribution[to][winner];\n            userVotesDistribution[to][winner] = 0;\n            uint reward = (challengePrize * userVotesForWinner) / votes[winner];\n            to.transfer(reward);\n\n            // Fire the event\n            emit RewardWasPaid(to, reward);\n        }\n    }\n\n    // Send a reward to challenge creator\n    function sendCreatorReward() public afterVotingPeriod {\n        if (creatorPrize > 0) {\n            uint creatorReward = creatorPrize;\n            creatorPrize = 0;\n            creator.transfer(creatorReward);\n\n            // Fire the event\n            emit CreatorRewardWasPaid(creator, creatorReward);\n        }\n    }\n\n    // Send a reward to cryptoVersusWallet\n    function sendCryptoVersusReward() public afterVotingPeriod {\n        if (cryptoVersusPrize > 0) {\n            uint cryptoVersusReward = cryptoVersusPrize;\n            cryptoVersusPrize = 0;\n            cryptoVersusWallet.transfer(cryptoVersusReward);\n\n            // Fire the event\n            emit CryptoVersusRewardWasPaid(cryptoVersusWallet, cryptoVersusReward);\n        }\n    }\n}\n\ncontract VotingChallengeProxy {\n    VotingChallenge challenge;\n    uint candidate;\n\n    constructor(address _mainAddress, uint _candidate) public {\n        challenge = VotingChallenge(_mainAddress);\n        candidate = _candidate;\n    }\n\n    function() public payable {\n        challenge.voteForCandidate_.value(msg.value)(candidate, msg.sender);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendCreatorReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"uint256\"}],\"name\":\"voteForCandidate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoVersusPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkEndOfChallenge\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoVersusWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beforeVoting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"candidate\",\"type\":\"uint256\"}],\"name\":\"transferVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"candidatesNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"changeCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cryptoVersusFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendCryptoVersusReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"candidate\",\"type\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"voteForCandidate_\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorPrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVotesDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startChallenge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVotingPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatorFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_challengeDuration\",\"type\":\"uint256\"},{\"name\":\"_candidatesNumber\",\"type\":\"uint256\"},{\"name\":\"_creatorFee\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_creatorFee\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"_candidatesNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_challengeDuration\",\"type\":\"uint256\"}],\"name\":\"ChallengeBegins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_candidate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_votes\",\"type\":\"uint256\"}],\"name\":\"NewVotesFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_candidateIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_votes\",\"type\":\"uint256\"}],\"name\":\"TransferVotes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_winner\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winnerVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_challengePrize\",\"type\":\"uint256\"}],\"name\":\"EndOfChallenge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardWasPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CreatorRewardWasPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_cryptoVersusWallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CryptoVersusRewardWasPaid\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516060806110fb8339810160409081528151602083015191909201516000839055600582905560018201610048600a826101fd565b50600680546007805433600160a060020a03199384161760a060020a61ffff02199081167401000000000000000000000000000000000000000061ffff8881168202929092179687905573a0bede75cfeef0266f8a31b47074f5f9fbe1df8095909316949094171674190000000000000000000000000000000000000000179091556009805461010061ff00199091161790556103e8920416111561012157600680547503e8000000000000000000000000000000000000000060a060020a61ffff0219918216179091556007805490911690556101f5565b6007546103e87401000000000000000000000000000000000000000090910461ffff16111561018457600780547503e8000000000000000000000000000000000000000060a060020a61ffff0219918216179091556006805490911690556101f5565b6103e8600760149054906101000a900461ffff16600660149054906101000a900461ffff160161ffff1611156101f5576006546007805460a060020a61ffff021916740100000000000000000000000000000000000000009283900461ffff9081166103e803169092029190911790555b505050610247565b81548183558181111561022157600083815260209020610221918101908301610226565b505050565b61024491905b80821115610240576000815560010161022c565b5090565b90565b610ea5806102566000396000f3006080604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f811461016e57806312fefa281461019f578063213408da146101c6578063292f2e0e146101dd57806336c8c5ee146101f25780633cd86984146101fd5780633d18b912146102125780634d85b8d014610227578063557ed1ba1461025057806356e33cf514610265578063586441911461027a5780635df813301461028f5780636645c0dc146102a757806366f5dd9e146102cb57806374580e2f146102e0578063851b6ef214610301578063969177b21461036657806396affb251461039257806398b9a2dc146103a75780639dabff25146103c85780639ded1817146103e9578063aa306d79146103fe578063bd71915f14610415578063ca497d521461042a578063dfbf53ae1461044e578063e0a7b2c314610463578063e16fd62e14610478578063e88958dc1461048d575b600080fd5b34801561017a57600080fd5b506101836104a2565b60408051600160a060020a039092168252519081900360200190f35b3480156101ab57600080fd5b506101b46104b1565b60408051918252519081900360200190f35b3480156101d257600080fd5b506101db6104b7565b005b3480156101e957600080fd5b506101b4610567565b6101db60043561056d565b34801561020957600080fd5b506101b4610676565b34801561021e57600080fd5b506101db61067c565b34801561023357600080fd5b5061023c610772565b604080519115158252519081900360200190f35b34801561025c57600080fd5b506101b461089d565b34801561027157600080fd5b506101836108a1565b34801561028657600080fd5b5061023c6108b0565b34801561029b57600080fd5b506101b46004356108be565b3480156102b357600080fd5b506101db600160a060020a03600435166024356108dd565b3480156102d757600080fd5b506101b46109a5565b3480156102ec57600080fd5b506101db600160a060020a03600435166109ab565b34801561030d57600080fd5b506103166109f1565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561035257818101518382015260200161033a565b505050509050019250505060405180910390f35b34801561037257600080fd5b5061037b610a49565b6040805161ffff9092168252519081900360200190f35b34801561039e57600080fd5b506101b4610a5a565b3480156103b357600080fd5b506101db600160a060020a0360043516610a60565b3480156103d457600080fd5b506101db600160a060020a0360043516610aa6565b3480156103f557600080fd5b506101db610bc2565b6101db600435600160a060020a0360243516610c71565b34801561042157600080fd5b506101b4610d8d565b34801561043657600080fd5b506101b4600160a060020a0360043516602435610d93565b34801561045a57600080fd5b506101b4610db0565b34801561046f57600080fd5b506101db610db6565b34801561048457600080fd5b5061023c610e5f565b34801561049957600080fd5b5061037b610e68565b600654600160a060020a031681565b60045481565b60095460009060ff16156104ca57600080fd5b600060025411156105645750600280546000918290556006546040519192600160a060020a039091169183156108fc0291849190818181858888f1935050505015801561051b573d6000803e3d6000fd5b5060065460408051600160a060020a0390921682526020820183905280517f288104ac101fe112b12f9d8fff6112746b2bca802ad7449b3dfff52d6d91e73c9281900390910190a15b50565b60005481565b60095460ff16151561057e57600080fd5b60055481111561058d57600080fd5b6000811161059a57600080fd5b600034116105a757600080fd5b34600c556105b3610772565b156105ec57600c54604051339180156108fc02916000818181858888f193505050501580156105e6573d6000803e3d6000fd5b50610564565b6000600c55600a80543491908390811061060257fe5b60009182526020808320909101805490930190925533808252600b83526040808320858452845291829020805434908101909155825191825292810184905280820192909252517f4edd8ee2f52850dcf0ea31aecd0b874d236611ddfb04871ffca965b2f859e9639181900360600190a150565b60035481565b600954600090819060ff161561069157600080fd5b336000908152600b602090815260408083206008548452909152812054111561076e57336000908152600b6020908152604080832060088054855292528220805492905554600a80549294509181106106e657fe5b906000526020600020015482600154028115156106ff57fe5b6040519190049150339082156108fc029083906000818181858888f19350505050158015610731573d6000803e3d6000fd5b50604080513381526020810183905281517f122e846b03a4c60f6cf271fe02a35753b67faca82f36cc27eb87aa7278496eb2929181900390910190a15b5050565b600954600090819081908190819060ff16151561078e57600080fd5b426000546004540111156107a55760009450610896565b5050600c5430310360015b60055481116108015782600a828154811015156107c957fe5b906000526020600020015411156107f957600a8054829081106107e857fe5b906000526020600020015492508093505b6001016107b0565b60088490556006546103e89060a060020a900461ffff168302046002556007546103e89060a060020a900461ffff16830204600381905560025483030360018190556009805460ff1916905560085460408051918252602082018690528181019290925290517f2227f144280fca39880d0277ffc8a63f76ea2385b3a5f034a2c61bd7de984bd29181900360600190a1600194505b5050505090565b4290565b600754600160a060020a031681565b600954610100900460ff1681565b600a8054829081106108cc57fe5b600091825260209091200154905081565b60095460009060ff1615156108f157600080fd5b336000908152600b602090815260408083208584529091528120541161091657600080fd5b50336000818152600b602081815260408084208685528252808420805490859055600160a060020a038816808652938352818520878652835293819020805485019055805194855290840191909152828101849052606083018290525190917fbbf0391afa8e9b93be7c4427ae98cbfeeabb31ba9def31e25eacd508e9b5ac9f919081900360800190a1505050565b60055481565b600654600160a060020a031633146109c257600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6060600a805480602002602001604051908101604052809291908181526020018280548015610a3f57602002820191906000526020600020905b815481526020019060010190808311610a2b575b5050505050905090565b60075460a060020a900461ffff1681565b60015481565b600754600160a060020a03163314610a7757600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600954600090819060ff1615610abb57600080fd5b600160a060020a0383166000908152600b6020908152604080832060085484529091528120541115610bbd57600160a060020a0383166000908152600b6020908152604080832060088054855292528220805492905554600a8054929450918110610b2257fe5b90600052602060002001548260015402811515610b3b57fe5b04905082600160a060020a03166108fc829081150290604051600060405180830381858888f19350505050158015610b77573d6000803e3d6000fd5b5060408051600160a060020a03851681526020810183905281517f122e846b03a4c60f6cf271fe02a35753b67faca82f36cc27eb87aa7278496eb2929181900390910190a15b505050565b60095460009060ff1615610bd557600080fd5b600060035411156105645750600380546000918290556007546040519192600160a060020a039091169183156108fc0291849190818181858888f19350505050158015610c26573d6000803e3d6000fd5b5060075460408051600160a060020a0390921682526020820183905280517f0589ab4d2b794888cc8aca31418dbedd8240147e9acb641e4dbbb0eba4c2b00d9281900390910190a150565b60095460ff161515610c8257600080fd5b600554821115610c9157600080fd5b60008211610c9e57600080fd5b60003411610cab57600080fd5b34600c55610cb7610772565b15610cf957600c54604051600160a060020a0383169180156108fc02916000818181858888f19350505050158015610cf3573d6000803e3d6000fd5b5061076e565b6000600c55600a805434919084908110610d0f57fe5b600091825260208083209091018054909301909255600160a060020a038316808252600b83526040808320868452845291829020805434908101909155825191825292810185905280820192909252517f4edd8ee2f52850dcf0ea31aecd0b874d236611ddfb04871ffca965b2f859e9639181900360600190a15050565b60025481565b600b60209081526000928352604080842090915290825290205481565b60085481565b600654600160a060020a03163314610dcd57600080fd5b600954610100900460ff161515610de357600080fd5b60098054600160ff199091161761ff00191690554260045560065460055460005460408051600160a060020a038516815260a060020a90940461ffff166020850152838101929092526060830152517fd75ca06fbaec49708838f517686c8ca5d9219c854630d47edf0c829ef470fabd916080908290030190a1565b60095460ff1681565b60065460a060020a900461ffff16815600a165627a7a72305820b8e45ed0739431242371335209819e953081073392fff8d29a744a0a2439ebaa0029000000000000000000000000000000000000000000000000000000000000546000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000019",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000546000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000019"
}