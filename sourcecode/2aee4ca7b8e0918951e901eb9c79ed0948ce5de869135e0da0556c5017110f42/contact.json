{
  "address": "0xe5f867de1ea81346df5181b8b48dd6b0bb3357b0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BtzToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-09\n*/\n\npragma solidity ^0.4.13;\n\ncontract BtzReceiver {\n    using SafeMath for *;\n\n    // BTZReceiver state variables\n    BtzToken BTZToken;\n    address public tokenAddress = 0x0;\n    address public owner;\n    uint numUsers;\n\n    // Struct to store user info\n    struct UserInfo {\n        uint totalDepositAmount;\n        uint totalDepositCount;\n        uint lastDepositAmount;\n        uint lastDepositTime;\n    }\n\n    event DepositReceived(uint indexed _who, uint _value, uint _timestamp);\n    event Withdrawal(address indexed _withdrawalAddress, uint _value, uint _timestamp);\n\n    // mapping of user info indexed by the user ID\n    mapping (uint => UserInfo) userInfo;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setOwner(address _addr) public onlyOwner {\n        owner = _addr;\n    }\n\n    /*\n    * @dev Gives admin the ability to update the address of BTZ223\n    *\n    * @param _tokenAddress The new address of BTZ223\n    **/\n    function setTokenContractAddress(address _tokenAddress) public onlyOwner {\n        tokenAddress = _tokenAddress;\n        BTZToken = BtzToken(_tokenAddress);\n    }\n\n    /*\n    * @dev Returns the information of a user\n    *\n    * @param _uid The id of the user whose info to return\n    **/\n    function userLookup(uint _uid) public view returns (uint, uint, uint, uint){\n        return (userInfo[_uid].totalDepositAmount, userInfo[_uid].totalDepositCount, userInfo[_uid].lastDepositAmount, userInfo[_uid].lastDepositTime);\n    }\n\n    /*\n    * @dev The function BTZ223 uses to update user info in this contract\n    *\n    * @param _id The users Bunz Application User ID\n    * @param _value The number of tokens to deposit\n    **/\n    function receiveDeposit(uint _id, uint _value) public {\n        require(msg.sender == tokenAddress);\n        userInfo[_id].totalDepositAmount = userInfo[_id].totalDepositAmount.add(_value);\n        userInfo[_id].totalDepositCount = userInfo[_id].totalDepositCount.add(1);\n        userInfo[_id].lastDepositAmount = _value;\n        userInfo[_id].lastDepositTime = now;\n        emit DepositReceived(_id, _value, now);\n    }\n\n    /*\n    * @dev The withdrawal function for admin\n    *\n    * @param _withdrawalAddr The admins address to withdraw the BTZ223 tokens to\n    **/\n    function withdrawTokens(address _withdrawalAddr) public onlyOwner{\n        uint tokensToWithdraw = BTZToken.balanceOf(this);\n        BTZToken.transfer(_withdrawalAddr, tokensToWithdraw);\n        emit Withdrawal(_withdrawalAddr, tokensToWithdraw, now);\n    }\n}\n\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function allowance(address owner, address spender) constant returns (uint);\n\n  function transfer(address to, uint value) returns (bool ok);\n  function transferFrom(address from, address to, uint value) returns (bool ok);\n  function approve(address spender, uint value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract StandardToken is ERC20 {\n  using SafeMath for *;\n\n  mapping(address => uint) balances;\n  mapping (address => mapping (address => uint)) allowed;\n\n  function transfer(address _to, uint _value) public returns (bool success) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint _value) public returns (bool success) {\n    require(_value <= balances[msg.sender]);\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\ncontract ERC223 is ERC20 {\n  function transfer(address to, uint value, bytes data) returns (bool ok);\n  function transferFrom(address from, address to, uint value, bytes data) returns (bool ok);\n}\n\ncontract Standard223Token is ERC223, StandardToken {\n  //function that is called when a user or another contract wants to transfer funds\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n    //filtering if the target is a contract with bytecode inside it\n    if (!super.transfer(_to, _value)) throw; // do a normal token transfer\n    if (isContract(_to)) return contractFallback(msg.sender, _to, _value, _data);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint _value, bytes _data) returns (bool success) {\n    if (!super.transferFrom(_from, _to, _value)) revert(); // do a normal token transfer\n    if (isContract(_to)) return contractFallback(_from, _to, _value, _data);\n    return true;\n  }\n\n  function transfer(address _to, uint _value) returns (bool success) {\n    return transfer(_to, _value, new bytes(0));\n  }\n\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n    return transferFrom(_from, _to, _value, new bytes(0));\n  }\n\n  //function that is called when transaction target is a contract\n  function contractFallback(address _origin, address _to, uint _value, bytes _data) private returns (bool success) {\n    ERC223Receiver reciever = ERC223Receiver(_to);\n    return reciever.tokenFallback(msg.sender, _origin, _value, _data);\n  }\n\n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n  function isContract(address _addr) private returns (bool is_contract) {\n    // retrieve the size of the code on target address, this needs assembly\n    uint length;\n    assembly { length := extcodesize(_addr) }\n    return length > 0;\n  }\n}\n\ncontract BtzToken is Standard223Token {\n  using SafeMath for *;\n  address public owner;\n\n  // BTZ Token parameters\n  string public name = \"BTZ by Bunz\";\n  string public symbol = \"BTZ\";\n  uint8 public constant decimals = 18;\n  uint256 public constant decimalFactor = 10 ** uint256(decimals);\n  uint256 public constant totalSupply = 200000000000 * decimalFactor;\n\n  // Variables for deposit functionality\n  bool public prebridge;\n  BtzReceiver receiverContract;\n  address public receiverContractAddress = 0x0;\n\n  event Deposit(address _to, uint _value);\n\n  /**\n  * @dev Constructor function for BTZ creation\n  */\n  constructor() public {\n    owner = msg.sender;\n    balances[owner] = totalSupply;\n    prebridge = true;\n    receiverContract = BtzReceiver(receiverContractAddress);\n\n    Transfer(address(0), owner, totalSupply);\n  }\n\n  modifier onlyOwner() {\n      require(msg.sender == owner);\n      _;\n  }\n\n  function setOwner(address _addr) public onlyOwner {\n      owner = _addr;\n  }\n\n  /**\n  * @dev Gives admin the ability to switch prebridge states.\n  *\n  */\n  function togglePrebrdige() onlyOwner {\n      prebridge = !prebridge;\n  }\n\n  /**\n  * @dev Gives admin the ability to update the address of reciever contract\n  *\n  * @param _newAddr The address of the new receiver contract\n  */\n  function setReceiverContractAddress(address _newAddr) onlyOwner {\n      receiverContractAddress = _newAddr;\n      receiverContract = BtzReceiver(_newAddr);\n  }\n\n  /**\n  * @dev Deposit function for users to send tokens to Bunz Application\n  *\n  * @param _value A uint representing the amount of BTZ to deposit\n  */\n  function deposit(uint _id, uint _value) public {\n      require(prebridge &&\n              balances[msg.sender] >= _value);\n      balances[msg.sender] = balances[msg.sender].sub(_value);\n      balances[receiverContractAddress] = balances[receiverContractAddress].add(_value);\n      emit Transfer(msg.sender, receiverContractAddress, _value);\n      receiverContract.receiveDeposit(_id, _value);\n  }\n}\n\ncontract ERC223Receiver {\n  function tokenFallback(address _sender, address _origin, uint _value, bytes _data) returns (bool ok);\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60c0604052600b60808190527f42545a2062792042756e7a00000000000000000000000000000000000000000060a090815261003e9160049190610148565b506040805180820190915260038082527f42545a0000000000000000000000000000000000000000000000000000000000602090920191825261008391600591610148565b5060078054600160a060020a03191690553480156100a057600080fd5b5060038054600160a060020a0319163317808255600160a060020a0390811660009081526001602081815260408084206c02863c1f5cdae42f9540000000908190556006805460075488166101000261010060a860020a031960ff199092169096171694909417909355945485519283529451949093169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a36101e3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018957805160ff19168380011785556101b6565b828001600101855582156101b6579182015b828111156101b657825182559160200191906001019061019b565b506101c29291506101c6565b5090565b6101e091905b808211156101c257600081556001016101cc565b90565b610d6b806101f26000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010b578063095ea7b31461019557806313af4035146101cd57806318160ddd146101f057806323b872dd14610217578063313ce567146102415780634ab788cb1461026c5780634acceeea146102815780636d6a6a4d146102965780637096b6cb146102ab57806370a08231146102dc5780638da5cb5b146102fd57806395d89b4114610312578063a9059cbb14610327578063ab67aa581461034b578063be45fd62146103ba578063dd62ed3e14610423578063e2bbb1581461044a578063f23c51cd14610465575b600080fd5b34801561011757600080fd5b50610120610486565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101a157600080fd5b506101b9600160a060020a0360043516602435610514565b604080519115158252519081900360200190f35b3480156101d957600080fd5b506101ee600160a060020a0360043516610597565b005b3480156101fc57600080fd5b506102056105dd565b60408051918252519081900360200190f35b34801561022357600080fd5b506101b9600160a060020a03600435811690602435166044356105ee565b34801561024d57600080fd5b50610256610617565b6040805160ff9092168252519081900360200190f35b34801561027857600080fd5b506101b961061c565b34801561028d57600080fd5b506101ee610625565b3480156102a257600080fd5b50610205610650565b3480156102b757600080fd5b506102c061065c565b60408051600160a060020a039092168252519081900360200190f35b3480156102e857600080fd5b50610205600160a060020a036004351661066b565b34801561030957600080fd5b506102c0610686565b34801561031e57600080fd5b50610120610695565b34801561033357600080fd5b506101b9600160a060020a03600435166024356106f0565b34801561035757600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101b994600160a060020a03813581169560248035909216956044359536956084940191819084018382808284375094975061070d9650505050505050565b3480156103c657600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101b9948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506107529650505050505050565b34801561042f57600080fd5b50610205600160a060020a0360043581169060243516610794565b34801561045657600080fd5b506101ee6004356024356107bf565b34801561047157600080fd5b506101ee600160a060020a0360043516610938565b6004805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561050c5780601f106104e15761010080835404028352916020019161050c565b820191906000526020600020905b8154815290600101906020018083116104ef57829003601f168201915b505050505081565b3360009081526001602052604081205482111561053057600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600354600160a060020a031633146105ae57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6c02863c1f5cdae42f954000000081565b6040805160008082526020820190925261060d9085908590859061070d565b90505b9392505050565b601281565b60065460ff1681565b600354600160a060020a0316331461063c57600080fd5b6006805460ff19811660ff90911615179055565b670de0b6b3a764000081565b600754600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561050c5780601f106104e15761010080835404028352916020019161050c565b604080516000808252602082019092526106109084908490610752565b600061071a8585856109a5565b151561072557600080fd5b61072e84610b17565b156107465761073f85858585610b1f565b905061074a565b5060015b949350505050565b600061075e8484610c3b565b151561076957600080fd5b61077284610b17565b1561078a5761078333858585610b1f565b9050610610565b5060019392505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60065460ff1680156107e05750336000908152600160205260409020548111155b15156107eb57600080fd5b3360009081526001602052604090205461080b908263ffffffff610d1e16565b3360009081526001602052604080822092909255600754600160a060020a03168152205461083f908263ffffffff610d3016565b60078054600160a060020a039081166000908152600160209081526040918290209490945591548251858152925191169233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3600660019054906101000a9004600160a060020a0316600160a060020a031663a389ef5383836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561091c57600080fd5b505af1158015610930573d6000803e3d6000fd5b505050505050565b600354600160a060020a0316331461094f57600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691821790556006805474ffffffffffffffffffffffffffffffffffffffff001916610100909202919091179055565b6000600160a060020a03831615156109bc57600080fd5b600160a060020a0384166000908152600160205260409020548211156109e157600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610a1157600080fd5b600160a060020a038316600090815260016020526040902054610a3a908363ffffffff610d3016565b600160a060020a038085166000908152600160205260408082209390935590861681522054610a6f908363ffffffff610d1e16565b600160a060020a0385166000908152600160209081526040808320939093556002815282822033835290522054610aac908363ffffffff610d1e16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6000903b1190565b6040517f4c1230190000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03878116602485015260448401869052608060648501908152855160848601528551600095899593861694634c12301994938c938b938b93929160a49091019060208501908083838f5b83811015610bb6578181015183820152602001610b9e565b50505050905090810190601f168015610be35780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610c0557600080fd5b505af1158015610c19573d6000803e3d6000fd5b505050506040513d6020811015610c2f57600080fd5b50519695505050505050565b6000600160a060020a0383161515610c5257600080fd5b33600090815260016020526040902054821115610c6e57600080fd5b33600090815260016020526040902054610c8e908363ffffffff610d1e16565b3360009081526001602052604080822092909255600160a060020a03851681522054610cc0908363ffffffff610d3016565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600082821115610d2a57fe5b50900390565b60008282018381101561061057fe00a165627a7a723058204cd69173da01a4bbb165d993d31f13746d7b5bf1dbd3b42162451262ed6ff2670029"
}