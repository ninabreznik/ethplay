{
  "address": "0x9ae3bbfb4586faec0d0fcf9505639c4eaac4d095",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Moongang",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-16\n*/\n\n// Author : shift\n\npragma solidity ^0.4.18;\n\n//--------- OpenZeppelin's Safe Math\n//Source : https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n//-----------------------------------------------------\n\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\ncontract ERC20 {\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n}\n\n/*\n  This contract stores twice every key value in order to be able to redistribute funds\n  when the bonus tokens are received (which is typically X months after the initial buy).\n*/\n\ncontract Moongang {\n  using SafeMath for uint256;\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier minAmountReached {\n    //In reality, the correct amount is the amount + 1%\n    require(this.balance >= SafeMath.div(SafeMath.mul(min_amount, 100), 99));\n    _;\n  }\n\n  modifier underMaxAmount {\n    require(max_amount == 0 || this.balance <= max_amount);\n    _;\n  }\n\n  //Constants of the contract\n  uint256 constant FEE = 100;    //1% fee\n  //SafeMath.div(20, 3) = 6\n  uint256 constant FEE_DEV = 6; //15% on the 1% fee\n  uint256 constant FEE_AUDIT = 12; //7.5% on the 1% fee\n  address public owner;\n  address constant public developer = 0xEE06BdDafFA56a303718DE53A5bc347EfbE4C68f;\n  address constant public auditor = 0x63F7547Ac277ea0B52A0B060Be6af8C5904953aa;\n  uint256 public individual_cap;\n\n  //Variables subject to changes\n  uint256 public max_amount;  //0 means there is no limit\n  uint256 public min_amount;\n\n  //Store the amount of ETH deposited by each account.\n  mapping (address => uint256) public balances;\n  mapping (address => uint256) public balances_bonus;\n  // Track whether the contract has bought the tokens yet.\n  bool public bought_tokens;\n  // Record ETH value of tokens currently held by contract.\n  uint256 public contract_eth_value;\n  uint256 public contract_eth_value_bonus;\n  //Set by the owner in order to allow the withdrawal of bonus tokens.\n  bool public bonus_received;\n  //The address of the contact.\n  address public sale;\n  //Token address\n  ERC20 public token;\n  //Records the fees that have to be sent\n  uint256 fees;\n  //Set by the owner. Allows people to refund totally or partially.\n  bool public allow_refunds;\n  //The reduction of the allocation in % | example : 40 -> 40% reduction\n  uint256 public percent_reduction;\n  bool public owner_supplied_eth;\n  bool public allow_contributions;\n\n  //Internal functions\n  function Moongang(uint256 max, uint256 min, uint256 cap) {\n    /*\n    Constructor\n    */\n    owner = msg.sender;\n    max_amount = SafeMath.div(SafeMath.mul(max, 100), 99);\n    min_amount = min;\n    individual_cap = cap;\n    allow_contributions = true;\n  }\n\n  //Functions for the owner\n\n  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\n  function buy_the_tokens() onlyOwner minAmountReached underMaxAmount {\n    //Avoids burning the funds\n    require(!bought_tokens && sale != 0x0);\n    //Record that the contract has bought the tokens.\n    bought_tokens = true;\n    //Sends the fee before so the contract_eth_value contains the correct balance\n    uint256 dev_fee = SafeMath.div(fees, FEE_DEV);\n    uint256 audit_fee = SafeMath.div(fees, FEE_AUDIT);\n    owner.transfer(SafeMath.sub(SafeMath.sub(fees, dev_fee), audit_fee));\n    developer.transfer(dev_fee);\n    auditor.transfer(audit_fee);\n    //Record the amount of ETH sent as the contract's current value.\n    contract_eth_value = this.balance;\n    contract_eth_value_bonus = this.balance;\n    // Transfer all the funds to the crowdsale address.\n    sale.transfer(contract_eth_value);\n  }\n\n  function force_refund(address _to_refund) onlyOwner {\n    require(!bought_tokens);\n    uint256 eth_to_withdraw = SafeMath.div(SafeMath.mul(balances[_to_refund], 100), 99);\n    balances[_to_refund] = 0;\n    balances_bonus[_to_refund] = 0;\n    fees = SafeMath.sub(fees, SafeMath.div(eth_to_withdraw, FEE));\n    _to_refund.transfer(eth_to_withdraw);\n  }\n\n  function force_partial_refund(address _to_refund) onlyOwner {\n    require(bought_tokens && percent_reduction > 0);\n    //Amount to refund is the amount minus the X% of the reduction\n    //amount_to_refund = balance*X\n    uint256 amount = SafeMath.div(SafeMath.mul(balances[_to_refund], percent_reduction), 100);\n    balances[_to_refund] = SafeMath.sub(balances[_to_refund], amount);\n    balances_bonus[_to_refund] = balances[_to_refund];\n    if (owner_supplied_eth) {\n      //dev fees aren't refunded, only owner fees\n      uint256 fee = amount.div(FEE).mul(percent_reduction).div(100);\n      amount = amount.add(fee);\n    }\n    _to_refund.transfer(amount);\n  }\n\n  function set_sale_address(address _sale) onlyOwner {\n    //Avoid mistake of putting 0x0 and can't change twice the sale address\n    require(_sale != 0x0);\n    sale = _sale;\n  }\n\n  function set_token_address(address _token) onlyOwner {\n    require(_token != 0x0);\n    token = ERC20(_token);\n  }\n\n  function set_bonus_received(bool _boolean) onlyOwner {\n    bonus_received = _boolean;\n  }\n\n  function set_allow_refunds(bool _boolean) onlyOwner {\n    /*\n    In case, for some reasons, the project refunds the money\n    */\n    allow_refunds = _boolean;\n  }\n\n  function set_allow_contributions(bool _boolean) onlyOwner {\n      allow_contributions = _boolean;\n  }\n\n  function set_percent_reduction(uint256 _reduction) onlyOwner payable {\n    require(bought_tokens && _reduction <= 100);\n    percent_reduction = _reduction;\n    if (msg.value > 0) {\n      owner_supplied_eth = true;\n    }\n    //we substract by contract_eth_value*_reduction basically\n    contract_eth_value = contract_eth_value.sub((contract_eth_value.mul(_reduction)).div(100));\n    contract_eth_value_bonus = contract_eth_value;\n  }\n\n  function change_individual_cap(uint256 _cap) onlyOwner {\n    individual_cap = _cap;\n  }\n\n  function change_owner(address new_owner) onlyOwner {\n    require(new_owner != 0x0);\n    owner = new_owner;\n  }\n\n  function change_max_amount(uint256 _amount) onlyOwner {\n      //ATTENTION! The new amount should be in wei\n      //Use https://etherconverter.online/\n      max_amount = SafeMath.div(SafeMath.mul(_amount, 100), 99);\n  }\n\n  function change_min_amount(uint256 _amount) onlyOwner {\n      //ATTENTION! The new amount should be in wei\n      //Use https://etherconverter.online/\n      min_amount = _amount;\n  }\n\n  //Public functions\n\n  // Allows any user to withdraw his tokens.\n  function withdraw() {\n    // Disallow withdraw if tokens haven't been bought yet.\n    require(bought_tokens);\n    uint256 contract_token_balance = token.balanceOf(address(this));\n    // Disallow token withdrawals if there are no tokens to withdraw.\n    require(contract_token_balance != 0);\n    uint256 tokens_to_withdraw = SafeMath.div(SafeMath.mul(balances[msg.sender], contract_token_balance), contract_eth_value);\n    // Update the value of tokens currently held by the contract.\n    contract_eth_value = SafeMath.sub(contract_eth_value, balances[msg.sender]);\n    // Update the user's balance prior to sending to prevent recursive call.\n    balances[msg.sender] = 0;\n    // Send the funds.  Throws on failure to prevent loss of funds.\n    require(token.transfer(msg.sender, tokens_to_withdraw));\n  }\n\n  function withdraw_bonus() {\n  /*\n    Special function to withdraw the bonus tokens after the 6 months lockup.\n    bonus_received has to be set to true.\n  */\n    require(bought_tokens && bonus_received);\n    uint256 contract_token_balance = token.balanceOf(address(this));\n    require(contract_token_balance != 0);\n    uint256 tokens_to_withdraw = SafeMath.div(SafeMath.mul(balances_bonus[msg.sender], contract_token_balance), contract_eth_value_bonus);\n    contract_eth_value_bonus = SafeMath.sub(contract_eth_value_bonus, balances_bonus[msg.sender]);\n    balances_bonus[msg.sender] = 0;\n    require(token.transfer(msg.sender, tokens_to_withdraw));\n  }\n\n  // Allows any user to get his eth refunded before the purchase is made.\n  function refund() {\n    require(!bought_tokens && allow_refunds && percent_reduction == 0);\n    //balance of contributor = contribution * 0.99\n    //so contribution = balance/0.99\n    uint256 eth_to_withdraw = SafeMath.div(SafeMath.mul(balances[msg.sender], 100), 99);\n    // Update the user's balance prior to sending ETH to prevent recursive call.\n    balances[msg.sender] = 0;\n    //Updates the balances_bonus too\n    balances_bonus[msg.sender] = 0;\n    //Updates the fees variable by substracting the refunded fee\n    fees = SafeMath.sub(fees, SafeMath.div(eth_to_withdraw, FEE));\n    // Return the user's funds.  Throws on failure to prevent loss of funds.\n    msg.sender.transfer(eth_to_withdraw);\n  }\n\n  //Allows any user to get a part of his ETH refunded, in proportion\n  //to the % reduced of the allocation\n  function partial_refund() {\n    require(bought_tokens && percent_reduction > 0);\n    //Amount to refund is the amount minus the X% of the reduction\n    //amount_to_refund = balance*X\n    uint256 amount = SafeMath.div(SafeMath.mul(balances[msg.sender], percent_reduction), 100);\n    balances[msg.sender] = SafeMath.sub(balances[msg.sender], amount);\n    balances_bonus[msg.sender] = balances[msg.sender];\n    if (owner_supplied_eth) {\n      //dev fees aren't refunded, only owner fees\n      uint256 fee = amount.div(FEE).mul(percent_reduction).div(100);\n      amount = amount.add(fee);\n    }\n    msg.sender.transfer(amount);\n  }\n\n  // Default function.  Called when a user sends ETH to the contract.\n  function () payable underMaxAmount {\n    require(!bought_tokens && allow_contributions);\n    //1% fee is taken on the ETH\n    uint256 fee = SafeMath.div(msg.value, FEE);\n    fees = SafeMath.add(fees, fee);\n    //Updates both of the balances\n    balances[msg.sender] = SafeMath.add(balances[msg.sender], SafeMath.sub(msg.value, fee));\n    //Checks if the individual cap is respected\n    //If it's not, changes are reverted\n    require(individual_cap == 0 || balances[msg.sender] <= individual_cap);\n    balances_bonus[msg.sender] = balances[msg.sender];\n  }\n}",
  "bytecode": "606060405234156200001057600080fd5b604051606080620024ea83398101604052808051906020019091908051906020019091908051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000c0620000a4846064620000f86401000000000262002320176401000000009004565b6063620001376401000000000262000a48176401000000009004565b60028190555081600381905550806001819055506001600e60016101000a81548160ff02191690831515021790555050505062000153565b60008060008414156200010f576000915062000130565b82840290508284828115156200012157fe5b041415156200012c57fe5b8091505b5092915050565b60008082848115156200014657fe5b0490508091505092915050565b61238780620001636000396000f3006060604052600436106101b7576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630107a8df146103b857806303b918dc146103cd578063111485ef146103fa57806318af7021146104235780631a34fe811461045c5780631e4532f114610485578063223db315146104d2578063253c8bd4146104ff57806327e235e31461053857806328b8e9cf1461058557806329d98a7b1461059a5780632fbfe951146105bd578063346f2eb7146105e0578063398f2648146106055780633ccfd60b146106285780633ec045a61461063d57806342263aa214610692578063590e1ae3146106cb5780636360fc3f146106e0578063666375e51461070d578063678f703314610732578063689f24561461074a5780636954abee1461075f5780636ad1fe021461078c5780637036f9d9146107e157806372a856041461081a5780638d521149146108435780638da5cb5b14610870578063a8644cd5146108c5578063c34dd141146108ee578063c42bb1e414610917578063ca4b208b14610940578063ebc56eec14610995578063f2bee03d146109ba578063fc0c546a146109f3575b60008060025414806101e257506002543073ffffffffffffffffffffffffffffffffffffffff163111155b15156101ed57600080fd5b600660009054906101000a900460ff161580156102165750600e60019054906101000a900460ff165b151561022157600080fd5b61022c346064610a48565b905061023a600b5482610a63565b600b81905550610292600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461028d3484610a81565b610a63565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060015414806103275750600154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411155b151561033257600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050005b34156103c357600080fd5b6103cb610a9a565b005b34156103d857600080fd5b6103e0610da5565b604051808215151515815260200191505060405180910390f35b341561040557600080fd5b61040d610db8565b6040518082815260200191505060405180910390f35b341561042e57600080fd5b61045a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610dbe565b005b341561046757600080fd5b61046f610f77565b6040518082815260200191505060405180910390f35b341561049057600080fd5b6104bc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f7d565b6040518082815260200191505060405180910390f35b34156104dd57600080fd5b6104e5610f95565b604051808215151515815260200191505060405180910390f35b341561050a57600080fd5b610536600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fa8565b005b341561054357600080fd5b61056f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061106c565b6040518082815260200191505060405180910390f35b341561059057600080fd5b610598611084565b005b34156105a557600080fd5b6105bb60048080359060200190919050506113ae565b005b34156105c857600080fd5b6105de6004808035906020019091905050611413565b005b34156105eb57600080fd5b61060360048080351515906020019091905050611478565b005b341561061057600080fd5b61062660048080359060200190919050506114f0565b005b341561063357600080fd5b61063b611569565b005b341561064857600080fd5b61065061185c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561069d57600080fd5b6106c9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611874565b005b34156106d657600080fd5b6106de611939565b005b34156106eb57600080fd5b6106f3611abc565b604051808215151515815260200191505060405180910390f35b341561071857600080fd5b61073060048080351515906020019091905050611acf565b005b6107486004808035906020019091905050611b47565b005b341561075557600080fd5b61075d611c44565b005b341561076a57600080fd5b610772611e82565b604051808215151515815260200191505060405180910390f35b341561079757600080fd5b61079f611e95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107ec57600080fd5b610818600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611ebb565b005b341561082557600080fd5b61082d612155565b6040518082815260200191505060405180910390f35b341561084e57600080fd5b61085661215b565b604051808215151515815260200191505060405180910390f35b341561087b57600080fd5b61088361216e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156108d057600080fd5b6108d8612193565b6040518082815260200191505060405180910390f35b34156108f957600080fd5b610901612199565b6040518082815260200191505060405180910390f35b341561092257600080fd5b61092a61219f565b6040518082815260200191505060405180910390f35b341561094b57600080fd5b6109536121a5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109a057600080fd5b6109b8600480803515159060200190919050506121bd565b005b34156109c557600080fd5b6109f1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612235565b005b34156109fe57600080fd5b610a066122fa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000808284811515610a5657fe5b0490508091505092915050565b6000808284019050838110151515610a7757fe5b8091505092915050565b6000828211151515610a8f57fe5b818303905092915050565b600080600660009054906101000a900460ff168015610ac55750600960009054906101000a900460ff165b1515610ad057600080fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610b9557600080fd5b6102c65a03f11515610ba657600080fd5b50505060405180519050915060008214151515610bc257600080fd5b610c16610c0e600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612320565b600854610a48565b9050610c63600854600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a81565b6008819055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610d7b57600080fd5b6102c65a03f11515610d8c57600080fd5b505050604051805190501515610da157600080fd5b5050565b600e60019054906101000a900460ff1681565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1b57600080fd5b600660009054906101000a900460ff16151515610e3757600080fd5b610e8b610e84600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546064612320565b6063610a48565b90506000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f2d600b54610f28836064610a48565b610a81565b600b819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610f7357600080fd5b5050565b60025481565b60056020528060005260406000206000915090505481565b600c60009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561100357600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff161415151561102957600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60046020528060005260406000206000915090505481565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110e257600080fd5b6110f96110f26003546064612320565b6063610a48565b3073ffffffffffffffffffffffffffffffffffffffff16311015151561111e57600080fd5b6000600254148061114857506002543073ffffffffffffffffffffffffffffffffffffffff163111155b151561115357600080fd5b600660009054906101000a900460ff161580156111a957506000600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15156111b457600080fd5b6001600660006101000a81548160ff0219169083151502179055506111dc600b546006610a48565b91506111eb600b54600c610a48565b90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc61123d611237600b5486610a81565b84610a81565b9081150290604051600060405180830381858888f19350505050151561126257600080fd5b73ee06bddaffa56a303718de53a5bc347efbe4c68f73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015156112b657600080fd5b7363f7547ac277ea0b52a0b060be6af8c5904953aa73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050151561130a57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16316007819055503073ffffffffffffffffffffffffffffffffffffffff1631600881905550600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6007549081150290604051600060405180830381858888f1935050505015156113aa57600080fd5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561140957600080fd5b8060018190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561146e57600080fd5b8060038190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114d357600080fd5b80600960006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561154b57600080fd5b611560611559826064612320565b6063610a48565b60028190555050565b600080600660009054906101000a900460ff16151561158757600080fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561164c57600080fd5b6102c65a03f1151561165d57600080fd5b5050506040518051905091506000821415151561167957600080fd5b6116cd6116c5600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484612320565b600754610a48565b905061171a600754600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a81565b6007819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561183257600080fd5b6102c65a03f1151561184357600080fd5b50505060405180519050151561185857600080fd5b5050565b7363f7547ac277ea0b52a0b060be6af8c5904953aa81565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118cf57600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141515156118f557600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600660009054906101000a900460ff161580156119645750600c60009054906101000a900460ff165b801561197257506000600d54145b151561197d57600080fd5b6119d16119ca600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546064612320565b6063610a48565b90506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a73600b54611a6e836064610a48565b610a81565b600b819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611ab957600080fd5b50565b600660009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b2a57600080fd5b80600e60016101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ba257600080fd5b600660009054906101000a900460ff168015611bbf575060648111155b1515611bca57600080fd5b80600d819055506000341115611bf6576001600e60006101000a81548160ff0219169083151502179055505b611c32611c216064611c138460075461232090919063ffffffff16565b610a4890919063ffffffff16565b600754610a8190919063ffffffff16565b60078190555060075460088190555050565b600080600660009054906101000a900460ff168015611c6557506000600d54115b1515611c7057600080fd5b611cc5611cbe600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d54612320565b6064610a48565b9150611d10600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a81565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e60009054906101000a900460ff1615611e3e57611e266064611e18600d54611e0a606487610a4890919063ffffffff16565b61232090919063ffffffff16565b610a4890919063ffffffff16565b9050611e3b8183610a6390919063ffffffff16565b91505b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515611e7e57600080fd5b5050565b600e60009054906101000a900460ff1681565b600960019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f1957600080fd5b600660009054906101000a900460ff168015611f3757506000600d54115b1515611f4257600080fd5b611f97611f90600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d54612320565b6064610a48565b9150611fe2600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483610a81565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e60009054906101000a900460ff1615612110576120f860646120ea600d546120dc606487610a4890919063ffffffff16565b61232090919063ffffffff16565b610a4890919063ffffffff16565b905061210d8183610a6390919063ffffffff16565b91505b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561215057600080fd5b505050565b60035481565b600960009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b600d5481565b60075481565b73ee06bddaffa56a303718de53a5bc347efbe4c68f81565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561221857600080fd5b80600c60006101000a81548160ff02191690831515021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561229057600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff16141515156122b657600080fd5b80600960016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008414156123355760009150612354565b828402905082848281151561234657fe5b0414151561235057fe5b8091505b50929150505600a165627a7a72305820d75ea6ebcbe072dc81406cb57ee1982750a5a96e139f30d5084499e2d7aa92dd0029000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}