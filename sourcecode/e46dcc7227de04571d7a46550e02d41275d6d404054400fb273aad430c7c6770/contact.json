{
  "address": "0x4dd68a6c27359e5640fa6dcaf13631398c5613f1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ModuleManager",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "999",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-05\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title Module\n * @dev Interface for a module. \n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\n * can never end up in a \"frozen\" state.\n * @author Julien Niset - <[email protected]>\n */\ninterface Module {\n\n    /**\n     * @dev Inits a module for a wallet by e.g. setting some wallet specific parameters in storage.\n     * @param _wallet The wallet.\n     */\n    function init(BaseWallet _wallet) external;\n\n    /**\n     * @dev Adds a module to a wallet.\n     * @param _wallet The target wallet.\n     * @param _module The modules to authorise.\n     */\n    function addModule(BaseWallet _wallet, Module _module) external;\n\n    /**\n    * @dev Utility method to recover any ERC20 token that was sent to the\n    * module by mistake. \n    * @param _token The token to recover.\n    */\n    function recoverToken(address _token) external;\n}\n\n/**\n * @title Upgrader\n * @dev Interface for a contract that can upgrade wallets by enabling/disabling modules. \n * @author Julien Niset - <[email protected]>\n */\ninterface Upgrader {\n\n    /**\n     * @dev Upgrades a wallet by enabling/disabling modules.\n     * @param _wallet The owner.\n     */\n    function upgrade(address _wallet, address[] _toDisable, address[] _toEnable) external;\n\n    function toDisable() external view returns (address[]);\n\n    function toEnable() external view returns (address[]);\n}\n\n/**\n * @title BaseModule\n * @dev Basic module that contains some methods common to all modules.\n * @author Julien Niset - <[email protected]>\n */\ncontract BaseModule is Module {\n\n    // The adddress of the module registry.\n    ModuleRegistry internal registry;\n\n    event ModuleCreated(bytes32 name);\n    event ModuleInitialised(address wallet);\n\n    constructor(ModuleRegistry _registry, bytes32 _name) public {\n        registry = _registry;\n        emit ModuleCreated(_name);\n    }\n\n    /**\n     * @dev Throws if the sender is not the target wallet of the call.\n     */\n    modifier onlyWallet(BaseWallet _wallet) {\n        require(msg.sender == address(_wallet), \"BM: caller must be wallet\");\n        _;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner of the target wallet or the module itself.\n     */\n    modifier onlyOwner(BaseWallet _wallet) {\n        require(msg.sender == address(this) || isOwner(_wallet, msg.sender), \"BM: must be an owner for the wallet\");\n        _;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner of the target wallet.\n     */\n    modifier strictOnlyOwner(BaseWallet _wallet) {\n        require(isOwner(_wallet, msg.sender), \"BM: msg.sender must be an owner for the wallet\");\n        _;\n    }\n\n    /**\n     * @dev Inits the module for a wallet by logging an event.\n     * The method can only be called by the wallet itself.\n     * @param _wallet The wallet.\n     */\n    function init(BaseWallet _wallet) external onlyWallet(_wallet) {\n        emit ModuleInitialised(_wallet);\n    }\n\n    /**\n     * @dev Adds a module to a wallet. First checks that the module is registered.\n     * @param _wallet The target wallet.\n     * @param _module The modules to authorise.\n     */\n    function addModule(BaseWallet _wallet, Module _module) external strictOnlyOwner(_wallet) {\n        require(registry.isRegisteredModule(_module), \"BM: module is not registered\");\n        _wallet.authoriseModule(_module, true);\n    }\n\n    /**\n    * @dev Utility method enbaling anyone to recover ERC20 token sent to the\n    * module by mistake and transfer them to the Module Registry. \n    * @param _token The token to recover.\n    */\n    function recoverToken(address _token) external {\n        uint total = ERC20(_token).balanceOf(address(this));\n        ERC20(_token).transfer(address(registry), total);\n    }\n\n    /**\n     * @dev Helper method to check if an address is the owner of a target wallet.\n     * @param _wallet The target wallet.\n     * @param _addr The address.\n     */\n    function isOwner(BaseWallet _wallet, address _addr) internal view returns (bool) {\n        return _wallet.owner() == _addr;\n    }\n}\n\n/**\n * @title RelayerModule\n * @dev Base module containing logic to execute transactions signed by eth-less accounts and sent by a relayer. \n * @author Julien Niset - <[email protected]>\n */\ncontract RelayerModule is Module {\n\n    uint256 constant internal BLOCKBOUND = 10000;\n\n    mapping (address => RelayerConfig) public relayer; \n\n    struct RelayerConfig {\n        uint256 nonce;\n        mapping (bytes32 => bool) executedTx;\n    }\n\n    event TransactionExecuted(address indexed wallet, bool indexed success, bytes32 signedHash);\n\n    /**\n     * @dev Throws if the call did not go through the execute() method.\n     */\n    modifier onlyExecute {\n        require(msg.sender == address(this), \"RM: must be called via execute()\");\n        _;\n    }\n\n    /* ***************** Abstract method ************************* */\n\n    /**\n    * @dev Gets the number of valid signatures that must be provided to execute a\n    * specific relayed transaction.\n    * @param _wallet The target wallet.\n    * @param _data The data of the relayed transaction.\n    * @return The number of required signatures.\n    */\n    function getRequiredSignatures(BaseWallet _wallet, bytes _data) internal view returns (uint256);\n\n    /**\n    * @dev Validates the signatures provided with a relayed transaction.\n    * The method MUST throw if one or more signatures are not valid.\n    * @param _wallet The target wallet.\n    * @param _data The data of the relayed transaction.\n    * @param _signHash The signed hash representing the relayed transaction.\n    * @param _signatures The signatures as a concatenated byte array.\n    */\n    function validateSignatures(BaseWallet _wallet, bytes _data, bytes32 _signHash, bytes _signatures) internal view returns (bool);\n\n    /* ************************************************************ */\n\n    /**\n    * @dev Executes a relayed transaction.\n    * @param _wallet The target wallet.\n    * @param _data The data for the relayed transaction\n    * @param _nonce The nonce used to prevent replay attacks.\n    * @param _signatures The signatures as a concatenated byte array.\n    * @param _gasPrice The gas price to use for the gas refund.\n    * @param _gasLimit The gas limit to use for the gas refund.\n    */\n    function execute(\n        BaseWallet _wallet,\n        bytes _data, \n        uint256 _nonce, \n        bytes _signatures, \n        uint256 _gasPrice,\n        uint256 _gasLimit\n    )\n        external\n        returns (bool success)\n    {\n        uint startGas = gasleft();\n        bytes32 signHash = getSignHash(address(this), _wallet, 0, _data, _nonce, _gasPrice, _gasLimit);\n        require(checkAndUpdateUniqueness(_wallet, _nonce, signHash), \"RM: Duplicate request\");\n        require(verifyData(address(_wallet), _data), \"RM: the wallet authorized is different then the target of the relayed data\");\n        uint256 requiredSignatures = getRequiredSignatures(_wallet, _data);\n        if((requiredSignatures * 65) == _signatures.length) {\n            if(verifyRefund(_wallet, _gasLimit, _gasPrice, requiredSignatures)) {\n                if(requiredSignatures == 0 || validateSignatures(_wallet, _data, signHash, _signatures)) {\n                    // solium-disable-next-line security/no-call-value\n                    success = address(this).call(_data);\n                    refund(_wallet, startGas - gasleft(), _gasPrice, _gasLimit, requiredSignatures, msg.sender);\n                }\n            }\n        }\n        emit TransactionExecuted(_wallet, success, signHash); \n    }\n\n    /**\n    * @dev Gets the current nonce for a wallet.\n    * @param _wallet The target wallet.\n    */\n    function getNonce(BaseWallet _wallet) external view returns (uint256 nonce) {\n        return relayer[_wallet].nonce;\n    }\n\n    /**\n    * @dev Generates the signed hash of a relayed transaction according to ERC 1077.\n    * @param _from The starting address for the relayed transaction (should be the module)\n    * @param _to The destination address for the relayed transaction (should be the wallet)\n    * @param _value The value for the relayed transaction\n    * @param _data The data for the relayed transaction\n    * @param _nonce The nonce used to prevent replay attacks.\n    * @param _gasPrice The gas price to use for the gas refund.\n    * @param _gasLimit The gas limit to use for the gas refund.\n    */\n    function getSignHash(\n        address _from,\n        address _to, \n        uint256 _value, \n        bytes _data, \n        uint256 _nonce,\n        uint256 _gasPrice,\n        uint256 _gasLimit\n    ) \n        internal \n        pure\n        returns (bytes32) \n    {\n        return keccak256(\n            abi.encodePacked(\n                \"\\x19Ethereum Signed Message:\\n32\",\n                keccak256(abi.encodePacked(byte(0x19), byte(0), _from, _to, _value, _data, _nonce, _gasPrice, _gasLimit))\n        ));\n    }\n\n    /**\n    * @dev Checks if the relayed transaction is unique.\n    * @param _wallet The target wallet.\n    * @param _nonce The nonce\n    * @param _signHash The signed hash of the transaction\n    */\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\n        if(relayer[_wallet].executedTx[_signHash] == true) {\n            return false;\n        }\n        relayer[_wallet].executedTx[_signHash] = true;\n        return true;\n    }\n\n    /**\n    * @dev Checks that a nonce has the correct format and is valid. \n    * It must be constructed as nonce = {block number}{timestamp} where each component is 16 bytes.\n    * @param _wallet The target wallet.\n    * @param _nonce The nonce\n    */\n    function checkAndUpdateNonce(BaseWallet _wallet, uint256 _nonce) internal returns (bool) {\n        if(_nonce <= relayer[_wallet].nonce) {\n            return false;\n        }   \n        uint256 nonceBlock = (_nonce & 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) >> 128;\n        if(nonceBlock > block.number + BLOCKBOUND) {\n            return false;\n        }\n        relayer[_wallet].nonce = _nonce;\n        return true;    \n    }\n\n    /**\n    * @dev Recovers the signer at a given position from a list of concatenated signatures.\n    * @param _signedHash The signed hash\n    * @param _signatures The concatenated signatures.\n    * @param _index The index of the signature to recover.\n    */\n    function recoverSigner(bytes32 _signedHash, bytes _signatures, uint _index) internal pure returns (address) {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        // we jump 32 (0x20) as the first slot of bytes contains the length\n        // we jump 65 (0x41) per signature\n        // for v we load 32 bytes ending with v (the first 31 come from s) then apply a mask\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            r := mload(add(_signatures, add(0x20,mul(0x41,_index))))\n            s := mload(add(_signatures, add(0x40,mul(0x41,_index))))\n            v := and(mload(add(_signatures, add(0x41,mul(0x41,_index)))), 0xff)\n        }\n        require(v == 27 || v == 28); \n        return ecrecover(_signedHash, v, r, s);\n    }\n\n    /**\n    * @dev Refunds the gas used to the Relayer. \n    * For security reasons the default behavior is to not refund calls with 0 or 1 signatures. \n    * @param _wallet The target wallet.\n    * @param _gasUsed The gas used.\n    * @param _gasPrice The gas price for the refund.\n    * @param _gasLimit The gas limit for the refund.\n    * @param _signatures The number of signatures used in the call.\n    * @param _relayer The address of the Relayer.\n    */\n    function refund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _gasLimit, uint _signatures, address _relayer) internal {\n        uint256 amount = 29292 + _gasUsed; // 21000 (transaction) + 7620 (execution of refund) + 672 to log the event + _gasUsed\n        // only refund if gas price not null, more than 1 signatures, gas less than gasLimit\n        if(_gasPrice > 0 && _signatures > 1 && amount <= _gasLimit) {\n            if(_gasPrice > tx.gasprice) {\n                amount = amount * tx.gasprice;\n            }\n            else {\n                amount = amount * _gasPrice;\n            }\n            _wallet.invoke(_relayer, amount, \"\");\n        }\n    }\n\n    /**\n    * @dev Returns false if the refund is expected to fail.\n    * @param _wallet The target wallet.\n    * @param _gasUsed The expected gas used.\n    * @param _gasPrice The expected gas price for the refund.\n    */\n    function verifyRefund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _signatures) internal view returns (bool) {\n        if(_gasPrice > 0 \n            && _signatures > 1 \n            && (address(_wallet).balance < _gasUsed * _gasPrice || _wallet.authorised(this) == false)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n    * @dev Checks that the wallet address provided as the first parameter of the relayed data is the same\n    * as the wallet passed as the input of the execute() method. \n    @return false if the addresses are different.\n    */\n    function verifyData(address _wallet, bytes _data) private pure returns (bool) {\n        require(_data.length >= 36, \"RM: Invalid dataWallet\");\n        address dataWallet;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            //_data = {length:32}{sig:4}{_wallet:32}{...}\n            dataWallet := mload(add(_data, 0x24))\n        }\n        return dataWallet == _wallet;\n    }\n\n    /**\n    * @dev Parses the data to extract the method signature. \n    */\n    function functionPrefix(bytes _data) internal pure returns (bytes4 prefix) {\n        require(_data.length >= 4, \"RM: Invalid functionPrefix\");\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            prefix := mload(add(_data, 0x20))\n        }\n    }\n}\n\n/**\n * @title OnlyOwnerModule\n * @dev Module that extends BaseModule and RelayerModule for modules where the execute() method\n * must be called with one signature frm the owner.\n * @author Julien Niset - <[email protected]>\n */\ncontract OnlyOwnerModule is BaseModule, RelayerModule {\n\n    // *************** Implementation of RelayerModule methods ********************* //\n\n    // Overrides to use the incremental nonce and save some gas\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\n        return checkAndUpdateNonce(_wallet, _nonce);\n    }\n\n    function validateSignatures(BaseWallet _wallet, bytes _data, bytes32 _signHash, bytes _signatures) internal view returns (bool) {\n        address signer = recoverSigner(_signHash, _signatures, 0);\n        return isOwner(_wallet, signer); // \"OOM: signer must be owner\"\n    }\n\n    function getRequiredSignatures(BaseWallet _wallet, bytes _data) internal view returns (uint256) {\n        return 1;\n    }\n}\n\n/**\n * ERC20 contract interface.\n */\ncontract ERC20 {\n    function totalSupply() public view returns (uint);\n    function decimals() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n}\n\n/**\n * @title Owned\n * @dev Basic contract to define an owner.\n * @author Julien Niset - <[email protected]>\n */\ncontract Owned {\n\n    // The owner\n    address public owner;\n\n    event OwnerChanged(address indexed _newOwner);\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Must be owner\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Lets the owner transfer ownership of the contract to a new owner.\n     * @param _newOwner The new owner.\n     */\n    function changeOwner(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Address must not be null\");\n        owner = _newOwner;\n        emit OwnerChanged(_newOwner);\n    }\n}\n\n/**\n * @title ModuleRegistry\n * @dev Registry of authorised modules. \n * Modules must be registered before they can be authorised on a wallet.\n * @author Julien Niset - <[email protected]>\n */\ncontract ModuleRegistry is Owned {\n\n    mapping (address => Info) internal modules;\n    mapping (address => Info) internal upgraders;\n\n    event ModuleRegistered(address indexed module, bytes32 name);\n    event ModuleDeRegistered(address module);\n    event UpgraderRegistered(address indexed upgrader, bytes32 name);\n    event UpgraderDeRegistered(address upgrader);\n\n    struct Info {\n        bool exists;\n        bytes32 name;\n    }\n\n    /**\n     * @dev Registers a module.\n     * @param _module The module.\n     * @param _name The unique name of the module.\n     */\n    function registerModule(address _module, bytes32 _name) external onlyOwner {\n        require(!modules[_module].exists, \"MR: module already exists\");\n        modules[_module] = Info({exists: true, name: _name});\n        emit ModuleRegistered(_module, _name);\n    }\n\n    /**\n     * @dev Deregisters a module.\n     * @param _module The module.\n     */\n    function deregisterModule(address _module) external onlyOwner {\n        require(modules[_module].exists, \"MR: module does not exists\");\n        delete modules[_module];\n        emit ModuleDeRegistered(_module);\n    }\n\n        /**\n     * @dev Registers an upgrader.\n     * @param _upgrader The upgrader.\n     * @param _name The unique name of the upgrader.\n     */\n    function registerUpgrader(address _upgrader, bytes32 _name) external onlyOwner {\n        require(!upgraders[_upgrader].exists, \"MR: upgrader already exists\");\n        upgraders[_upgrader] = Info({exists: true, name: _name});\n        emit UpgraderRegistered(_upgrader, _name);\n    }\n\n    /**\n     * @dev Deregisters an upgrader.\n     * @param _upgrader The _upgrader.\n     */\n    function deregisterUpgrader(address _upgrader) external onlyOwner {\n        require(upgraders[_upgrader].exists, \"MR: upgrader does not exists\");\n        delete upgraders[_upgrader];\n        emit UpgraderDeRegistered(_upgrader);\n    }\n\n    /**\n    * @dev Utility method enbaling the owner of the registry to claim any ERC20 token that was sent to the\n    * registry.\n    * @param _token The token to recover.\n    */\n    function recoverToken(address _token) external onlyOwner {\n        uint total = ERC20(_token).balanceOf(address(this));\n        ERC20(_token).transfer(msg.sender, total);\n    } \n\n    /**\n     * @dev Gets the name of a module from its address.\n     * @param _module The module address.\n     * @return the name.\n     */\n    function moduleInfo(address _module) external view returns (bytes32) {\n        return modules[_module].name;\n    }\n\n    /**\n     * @dev Gets the name of an upgrader from its address.\n     * @param _upgrader The upgrader address.\n     * @return the name.\n     */\n    function upgraderInfo(address _upgrader) external view returns (bytes32) {\n        return upgraders[_upgrader].name;\n    }\n\n    /**\n     * @dev Checks if a module is registered.\n     * @param _module The module address.\n     * @return true if the module is registered.\n     */\n    function isRegisteredModule(address _module) external view returns (bool) {\n        return modules[_module].exists;\n    }\n\n    /**\n     * @dev Checks if a list of modules are registered.\n     * @param _modules The list of modules address.\n     * @return true if all the modules are registered.\n     */\n    function isRegisteredModule(address[] _modules) external view returns (bool) {\n        for(uint i = 0; i < _modules.length; i++) {\n            if (!modules[_modules[i]].exists) {\n                return false;\n            }\n        }\n        return true;\n    }  \n\n    /**\n     * @dev Checks if an upgrader is registered.\n     * @param _upgrader The upgrader address.\n     * @return true if the upgrader is registered.\n     */\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool) {\n        return upgraders[_upgrader].exists;\n    } \n}\n\n/**\n * @title BaseWallet\n * @dev Simple modular wallet that authorises modules to call its invoke() method.\n * Based on https://gist.github.com/Arachnid/a619d31f6d32757a4328a428286da186 by \n * @author Julien Niset - <[email protected]>\n */\ncontract BaseWallet {\n\n    // The implementation of the proxy\n    address public implementation;\n    // The owner \n    address public owner;\n    // The authorised modules\n    mapping (address => bool) public authorised;\n    // The enabled static calls\n    mapping (bytes4 => address) public enabled;\n    // The number of modules\n    uint public modules;\n    \n    event AuthorisedModule(address indexed module, bool value);\n    event EnabledStaticCall(address indexed module, bytes4 indexed method);\n    event Invoked(address indexed module, address indexed target, uint indexed value, bytes data);\n    event Received(uint indexed value, address indexed sender, bytes data);\n    event OwnerChanged(address owner);\n    \n    /**\n     * @dev Throws if the sender is not an authorised module.\n     */\n    modifier moduleOnly {\n        require(authorised[msg.sender], \"BW: msg.sender not an authorized module\");\n        _;\n    }\n\n    /**\n     * @dev Inits the wallet by setting the owner and authorising a list of modules.\n     * @param _owner The owner.\n     * @param _modules The modules to authorise.\n     */\n    function init(address _owner, address[] _modules) external {\n        require(owner == address(0) && modules == 0, \"BW: wallet already initialised\");\n        require(_modules.length > 0, \"BW: construction requires at least 1 module\");\n        owner = _owner;\n        modules = _modules.length;\n        for(uint256 i = 0; i < _modules.length; i++) {\n            require(authorised[_modules[i]] == false, \"BW: module is already added\");\n            authorised[_modules[i]] = true;\n            Module(_modules[i]).init(this);\n            emit AuthorisedModule(_modules[i], true);\n        }\n    }\n    \n    /**\n     * @dev Enables/Disables a module.\n     * @param _module The target module.\n     * @param _value Set to true to authorise the module.\n     */\n    function authoriseModule(address _module, bool _value) external moduleOnly {\n        if (authorised[_module] != _value) {\n            if(_value == true) {\n                modules += 1;\n                authorised[_module] = true;\n                Module(_module).init(this);\n            }\n            else {\n                modules -= 1;\n                require(modules > 0, \"BW: wallet must have at least one module\");\n                delete authorised[_module];\n            }\n            emit AuthorisedModule(_module, _value);\n        }\n    }\n\n    /**\n    * @dev Enables a static method by specifying the target module to which the call\n    * must be delegated.\n    * @param _module The target module.\n    * @param _method The static method signature.\n    */\n    function enableStaticCall(address _module, bytes4 _method) external moduleOnly {\n        require(authorised[_module], \"BW: must be an authorised module for static call\");\n        enabled[_method] = _module;\n        emit EnabledStaticCall(_module, _method);\n    }\n\n    /**\n     * @dev Sets a new owner for the wallet.\n     * @param _newOwner The new owner.\n     */\n    function setOwner(address _newOwner) external moduleOnly {\n        require(_newOwner != address(0), \"BW: address cannot be null\");\n        owner = _newOwner;\n        emit OwnerChanged(_newOwner);\n    }\n    \n    /**\n     * @dev Performs a generic transaction.\n     * @param _target The address for the transaction.\n     * @param _value The value of the transaction.\n     * @param _data The data of the transaction.\n     */\n    function invoke(address _target, uint _value, bytes _data) external moduleOnly {\n        // solium-disable-next-line security/no-call-value\n        require(_target.call.value(_value)(_data), \"BW: call to target failed\");\n        emit Invoked(msg.sender, _target, _value, _data);\n    }\n\n    /**\n     * @dev This method makes it possible for the wallet to comply to interfaces expecting the wallet to\n     * implement specific static methods. It delegates the static call to a target contract if the data corresponds \n     * to an enabled method, or logs the call otherwise.\n     */\n    function() public payable {\n        if(msg.data.length > 0) { \n            address module = enabled[msg.sig];\n            if(module == address(0)) {\n                emit Received(msg.value, msg.sender, msg.data);\n            } \n            else {\n                require(authorised[module], \"BW: must be an authorised module for static call\");\n                // solium-disable-next-line security/no-inline-assembly\n                assembly {\n                    calldatacopy(0, 0, calldatasize())\n                    let result := staticcall(gas, module, 0, calldatasize(), 0, 0)\n                    returndatacopy(0, 0, returndatasize())\n                    switch result \n                    case 0 {revert(0, returndatasize())} \n                    default {return (0, returndatasize())}\n                }\n            }\n        }\n    }\n}\n\n/**\n * @title ModuleManager\n * @dev Module to manage the addition, removal and upgrade of the modules of wallets.\n * @author Julien Niset - <[email protected]>\n */\ncontract ModuleManager is BaseModule, RelayerModule, OnlyOwnerModule {\n\n    bytes32 constant NAME = \"ModuleManager\";\n\n    constructor(ModuleRegistry _registry) BaseModule(_registry, NAME) public {\n\n    }\n\n    /**\n     * @dev Upgrades the modules of a wallet. \n     * The implementation of the upgrade is delegated to a contract implementing the Upgrade interface.\n     * This makes it possible for the manager to implement any possible present and future upgrades\n     * without the need to authorise modules just for the upgrade process. \n     * @param _wallet The target wallet.\n     * @param _upgrader The address of an implementation of the Upgrader interface.\n     */\n    function upgrade(BaseWallet _wallet, Upgrader _upgrader) external onlyOwner(_wallet) {\n        require(registry.isRegisteredUpgrader(_upgrader), \"MM: upgrader is not registered\");\n        address[] memory toDisable = _upgrader.toDisable();\n        address[] memory toEnable = _upgrader.toEnable();\n        bytes memory methodData = abi.encodeWithSignature(\"upgrade(address,address[],address[])\", _wallet, toDisable, toEnable);\n        // solium-disable-next-line security/no-low-level-calls\n        require(address(_upgrader).delegatecall(methodData), \"MM: upgrade failed\");\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_upgrader\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signatures\",\"type\":\"bytes\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayer\",\"outputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"signedHash\",\"type\":\"bytes32\"}],\"name\":\"TransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"ModuleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ModuleInitialised\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516020806115db833981016040818152915160008054600160a060020a031916600160a060020a0383161790557f4d6f64756c654d616e616765720000000000000000000000000000000000000080835292519092839290917f3019c8fc80239e3dff8f781212ae2004839c2cb61d6c70acd279ac65392145df916020908290030190a1505050611532806100a96000396000f3006080604052600436106100825763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166319ab453c81146100875780632d0335ab146100aa5780635a1db8c4146100dd57806399a88ec4146101045780639be65a601461012b578063aacaaf881461014c578063c9b5ef8e146101a3575b600080fd5b34801561009357600080fd5b506100a8600160a060020a03600435166101c4565b005b3480156100b657600080fd5b506100cb600160a060020a036004351661027c565b60408051918252519081900360200190f35b3480156100e957600080fd5b506100a8600160a060020a0360043581169060243516610297565b34801561011057600080fd5b506100a8600160a060020a03600435811690602435166104c1565b34801561013757600080fd5b506100a8600160a060020a0360043516610a54565b34801561015857600080fd5b5061018f60048035600160a060020a031690602480358082019290810135916044359160643591820191013560843560a435610b88565b604080519115158252519081900360200190f35b3480156101af57600080fd5b506100cb600160a060020a0360043516610ea6565b8033600160a060020a0382161461023c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f424d3a2063616c6c6572206d7573742062652077616c6c657400000000000000604482015290519081900360640190fd5b60408051600160a060020a038416815290517f9fcca3f73f85397e2bf03647abf243c20b753bd54463ff3cae74de2971c112fa9181900360200190a15050565b600160a060020a031660009081526001602052604090205490565b816102a28133610eb8565b151561033557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f424d3a206d73672e73656e646572206d75737420626520616e206f776e65722060448201527f666f72207468652077616c6c6574000000000000000000000000000000000000606482015290519081900360840190fd5b60008054604080517f0bcd4ebb000000000000000000000000000000000000000000000000000000008152600160a060020a03868116600483015291519190921692630bcd4ebb92602480820193602093909283900390910190829087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b505050506040513d60208110156103ca57600080fd5b5051151561043957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f424d3a206d6f64756c65206973206e6f74207265676973746572656400000000604482015290519081900360640190fd5b604080517f1f17732d000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015260016024830152915191851691631f17732d9160448082019260009290919082900301818387803b1580156104a457600080fd5b505af11580156104b8573d6000803e3d6000fd5b50505050505050565b6060808084333014806104d957506104d98133610eb8565b151561056c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f424d3a206d75737420626520616e206f776e657220666f72207468652077616c60448201527f6c65740000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60008054604080517f63047bd8000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152915191909216926363047bd892602480820193602093909283900390910190829087803b1580156105d757600080fd5b505af11580156105eb573d6000803e3d6000fd5b505050506040513d602081101561060157600080fd5b5051151561067057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4d4d3a207570677261646572206973206e6f7420726567697374657265640000604482015290519081900360640190fd5b84600160a060020a031663e79e08406040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156106c757600080fd5b505af11580156106db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561070457600080fd5b81019080805164010000000081111561071c57600080fd5b8201602081018481111561072f57600080fd5b815185602082028301116401000000008211171561074c57600080fd5b5050929190505050935084600160a060020a0316634c3ea4fe6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156107ea57600080fd5b81019080805164010000000081111561080257600080fd5b8201602081018481111561081557600080fd5b815185602082028301116401000000008211171561083257600080fd5b505092919050505092508584846040516024018084600160a060020a0316600160a060020a031681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561089e578181015183820152602001610886565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156108dd5781810151838201526020016108c5565b50505050905001955050505050506040516020818303038152906040527faa4f95ea000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050915084600160a060020a03168260405180828051906020019080838360005b8381101561099f578181015183820152602001610987565b50505050905090810190601f1680156109cc5780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af49150501515610a4c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4d4d3a2075706772616465206661696c65640000000000000000000000000000604482015290519081900360640190fd5b505050505050565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600091600160a060020a038416916370a082319160248082019260209290919082900301818787803b158015610ab857600080fd5b505af1158015610acc573d6000803e3d6000fd5b505050506040513d6020811015610ae257600080fd5b505160008054604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b158015610b5857600080fd5b505af1158015610b6c573d6000803e3d6000fd5b505050506040513d6020811015610b8257600080fd5b50505050565b6000806000805a9250610bd3308d60008e8e8080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508d8b8b610f58565b9150610be08c8a8461114c565b1515610c4d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f524d3a204475706c696361746520726571756573740000000000000000000000604482015290519081900360640190fd5b610c878c8c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843750611160945050505050565b1515610d4057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f524d3a207468652077616c6c657420617574686f72697a65642069732064696660448201527f666572656e74207468656e2074686520746172676574206f662074686520726560648201527f6c61796564206461746100000000000000000000000000000000000000000000608482015290519081900360a40190fd5b610d7a8c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437506111fc945050505050565b905060418102871415610e5557610d938c868884611204565b15610e5557801580610e0e5750610e0e8c8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050848b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437506112d8945050505050565b15610e555730600160a060020a03168b8b604051808383808284378201915050925050506000604051808303816000865af19150509350610e558c5a8503888885336112fd565b60408051838152905185151591600160a060020a038f16917f6bb0b384ce772133df63560651bc8c727c53306cec1d51e2cbf8ea35fb8f2ec19181900360200190a350505098975050505050505050565b60016020526000908152604090205481565b600081600160a060020a031683600160a060020a0316638da5cb5b6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f1b57600080fd5b505af1158015610f2f573d6000803e3d6000fd5b505050506040513d6020811015610f4557600080fd5b5051600160a060020a0316149392505050565b6040517f190000000000000000000000000000000000000000000000000000000000000060208083018281526000602185018190526c01000000000000000000000000600160a060020a03808e16820260228801528c16026036860152604a85018a90528851909485938d938d938d938d938d938d938d939192606a909201918701908083835b60208310610ffe5780518252601f199092019160209182019101610fdf565b6001836020036101000a03801982511681845116808217855250505050505090500184815260200183815260200182815260200199505050505050505050506040516020818303038152906040526040518082805190602001908083835b6020831061107b5780518252601f19909201916020918201910161105c565b51815160209384036101000a6000190180199092169116179052604080519290940182900382207f19457468657265756d205369676e6564204d6573736167653a0a33320000000083830152603c8084019190915284518084039091018152605c9092019384905281519195509293508392850191508083835b602083106111145780518252601f1990920191602091820191016110f5565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209b9a5050505050505050505050565b600061115884846113cc565b949350505050565b60008060248351101515156111d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f524d3a20496e76616c6964206461746157616c6c657400000000000000000000604482015290519081900360640190fd5b6024830151905083600160a060020a031681600160a060020a03161491505b5092915050565b600192915050565b600080831180156112155750600182115b80156112c0575082840285600160a060020a03163110806112c05750604080517fd6eb1bbf0000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0387169163d6eb1bbf9160248083019260209291908290030181600087803b15801561129257600080fd5b505af11580156112a6573d6000803e3d6000fd5b505050506040513d60208110156112bc57600080fd5b5051155b156112cd57506000611158565b506001949350505050565b6000806112e784846000611459565b90506112f38682610eb8565b9695505050505050565b61726c85016000851180156113125750600183115b801561131e5750838111155b156104b8573a851115611332573a02611335565b84025b604080517f8f6f0332000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015260248201849052606060448301526000606483018190529251908a1692638f6f03329260a4808201939182900301818387803b1580156113ab57600080fd5b505af11580156113bf573d6000803e3d6000fd5b5050505050505050505050565b600160a060020a038216600090815260016020526040812054819083116113f657600091506111f5565b507001000000000000000000000000000000006fffffffffffffffffffffffffffffffff19831604436127100181111561143357600091506111f5565b5050600160a060020a039190911660009081526001602081905260409091209190915590565b6041808202830160208101516040820151919092015160009260ff9190911691601b83148061148b57508260ff16601c145b151561149657600080fd5b60408051600080825260208083018085528b905260ff8716838501526060830186905260808301859052925160019360a0808501949193601f19840193928390039091019190865af11580156114f0573d6000803e3d6000fd5b5050604051601f190151989750505050505050505600a165627a7a723058200a68dc7a69a885ff9a3d591533085ba7241475dfe3fa12a5c241e7df4ba9d0f30029000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db0105",
  "constructorArguments": "000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db0105"
}