{
  "address": "0xb2e1c5486dfb5d5e7cf9bb8b6e4fe5b39801c449",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "JHToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-14\n*/\n\npragma solidity ^0.4.25;\n\ncontract ERC20Interface{ \n    \n    function totalSupply() public view returns (uint);\n    function balanceOf(address who) public view returns (uint);\n    function transfer(address to, uint value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n}\n\ncontract ERC20 is ERC20Interface{\n\n    function allowance(address owner, address spender) public view returns (uint);\n    function transferFrom(address from, address to, uint value) public returns (bool);\n    function approve (address spender, uint value) public returns (bool);\n    event Approval (address indexed owner, address indexed spender, uint value);\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n//해당 컨트랙트는 인터페이스에서 선언한 함수들의 기능을 구현해준다.\ncontract BasicToken is ERC20Interface{\n    using SafeMath for uint256;\n    //using A for B : B 자료형에 A 라이브러리 함수를 붙여라.\n    //dot(.)으로 호출 할수 있게됨.\n    //ex) using SafeMath for uint256 이면 uint256자료형에 SafeMath 라이브러리 함수를 .을 이용해 사용가능하다는 뜻 => a.add(1) ,b.sub(2)를 사용가능하게 함.\n\n    mapping (address => uint256) balances;\n\n\n    uint totalSupply_;\n\n// 토큰의 총 발행량을 구하는 함수.\n  function totalSupply() public view returns (uint){\n    return totalSupply_;\n  }\n\n  function transfer(address _to, uint _value) public returns (bool){\n    require (_to != address(0));\n    // address(0)은 값이 없다는 것.\n    // require란 참이면 실행하는 것.\n    require (_value <= balances[msg.sender]);\n    // 함수를 호출한 '나'의 토큰 잔고가 보내는 토큰의 개수보다 크거나 같을때 실행.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    //sub는 뺄셈. , 보낸 토큰개수만큼 뺀다.\n    balances[_to] = balances[_to].add(_value);\n    //add는 덧셈. , 받은 토큰개수 만큼 더한다.\n\n    emit Transfer(msg.sender,_to,_value);\n    // Transfer라는 이벤트를 실행하여 이더리움 블록체인상에 거래내역을 기록한다. 물론, 등록됬으므로 검색 가능.\n    return true; //모든것이 실행되면 참을 출력.\n\n  }\n\n  function balanceOf(address _owner) public view returns(uint balance){\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken{\n  //ERC20에 선언된 인터페이스를 구현하는 컨트랙트.\n\n  mapping (address => mapping (address => uint)) internal allowed;\n  // allowed 매핑은 '누가','누구에게','얼마의' 인출권한을 줄지를 저장하는 것. ex) allowed[누가][누구에게] = 얼마;\n\n  function transferFrom(address _from, address _to, uint _value) public returns (bool){\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    //보내려는 토큰개수가 계좌주인 _from이 돈을 빼려는 msg.sender에게 허용한 개수보다 작거나 같으면 참.\n    //_fromr에게 인출권한을 받은 msg.sender가 가스비를 소모함.\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from,_to,_value);\n    return true;\n\n  }\n\n  function approve(address _spender, uint _value) public returns (bool){\n    allowed[msg.sender][_spender] = _value;\n    //msg.sender의 계좌에서 _value 만큼 인출해 갈 수 있는 권리를 _spender 에게 부여한다.\n    emit Approval(msg.sender,_spender,_value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint){\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract JHToken is StandardToken{\n\n  string public constant name = \"JHToken\";\n  string public constant symbol = \"JHTK\";\n  uint8 public constant decimals = 18;\n\n  uint256 public constant INITIAL_SUPPLY =            4000000000 * (10**uint256(decimals));\n\n  constructor() public{\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    emit Transfer(0x0,msg.sender,INITIAL_SUPPLY);\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b506b0cecb8f27f4200f3a0000000600181905533600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3610665806100796000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016a57806323b872dd146101915780632ff2e9dc146101bb578063313ce567146101d057806370a08231146101fb57806395d89b411461021c578063a9059cbb14610231578063dd62ed3e14610255575b600080fd5b3480156100b457600080fd5b506100bd61027c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f75781810151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013e57600080fd5b50610156600160a060020a03600435166024356102b3565b604080519115158252519081900360200190f35b34801561017657600080fd5b5061017f610319565b60408051918252519081900360200190f35b34801561019d57600080fd5b50610156600160a060020a036004358116906024351660443561031f565b3480156101c757600080fd5b5061017f610496565b3480156101dc57600080fd5b506101e56104a6565b6040805160ff9092168252519081900360200190f35b34801561020757600080fd5b5061017f600160a060020a03600435166104ab565b34801561022857600080fd5b506100bd6104c6565b34801561023d57600080fd5b50610156600160a060020a03600435166024356104fd565b34801561026157600080fd5b5061017f600160a060020a03600435811690602435166105de565b60408051808201909152600781527f4a48546f6b656e00000000000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a038316151561033657600080fd5b600160a060020a03841660009081526020819052604090205482111561035b57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561038b57600080fd5b600160a060020a0384166000908152602081905260409020546103b4908363ffffffff61060916565b600160a060020a0380861660009081526020819052604080822093909355908516815220546103e9908363ffffffff61062016565b600160a060020a0380851660009081526020818152604080832094909455918716815260028252828120338252909152205461042b908363ffffffff61060916565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6b0cecb8f27f4200f3a000000081565b601281565b600160a060020a031660009081526020819052604090205490565b60408051808201909152600481527f4a48544b00000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561051457600080fd5b3360009081526020819052604090205482111561053057600080fd5b33600090815260208190526040902054610550908363ffffffff61060916565b3360009081526020819052604080822092909255600160a060020a03851681522054610582908363ffffffff61062016565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000808383111561061957600080fd5b5050900390565b60008282018381101561063257600080fd5b93925050505600a165627a7a7230582013e6aa0fc916917229ae4fb628ec3a1eb0a25ca282cb83bfd1797cd8634bb4900029"
}