{
  "address": "0x5ef5e83e82f721f42195613cd58921d18cde7a81",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Custodial",
  "compilerVersion": "v0.4.10+commit.f0d539ae",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-05-08\n*/\n\n/*\n * Custodial Smart Contract.  Copyright © 2017 by ABDK Consulting.\n * Author: Mikhail Vladimirov <[email protected]>\n */\npragma solidity ^0.4.10;\n\n/**\n * Custodial Smart Contract that that charges fee for keeping ether.\n */\ncontract Custodial {\n  uint256 constant TWO_128 = 0x100000000000000000000000000000000; // 2^128\n  uint256 constant TWO_127 = 0x80000000000000000000000000000000; // 2^127\n\n  /**\n   * Address of the client, i.e. owner of the ether kept by the contract.\n   */\n  address client;\n\n  /**\n   * Address of the advisor, i.e. the one who receives fee charged by the\n   * contract for keeping client's ether.\n   */\n  address advisor;\n\n  /**\n   * Capital, i.e. amount of client's ether (in Wei) kept by the contract.\n   */\n  uint256 capital;\n\n  /**\n   * Time when capital was last updated (in seconds since epoch).\n   */\n  uint256 capitalTimestamp;\n\n  /**\n   * Fee factor, the capital is multiplied by each second multiplied by 2^128.\n   * I.e. capital(t+1) = capital (t) * feeFactor / 2^128.\n   */\n  uint256 feeFactor;\n\n  /**\n   * Create new Custodial contract with given client address, advisor address\n   * and fee factor.\n   *\n   * @param _client client address\n   * @param _advisor advisor address\n   * @param _feeFactor fee factor\n   */\n  function Custodial (address _client, address _advisor, uint256 _feeFactor) {\n    if (_feeFactor > TWO_128)\n      throw; // Fee factor must be less then or equal to 2^128\n\n    client = _client;\n    advisor = _advisor;\n    feeFactor = _feeFactor;\n  }\n\n  /**\n   * Get client's capital (in Wei).\n   *\n   * @param _currentTime current time in seconds since epoch\n   * @return client's capital\n   */\n  function getCapital (uint256 _currentTime)\n  constant returns (uint256 _result) {\n    _result = capital;\n    if (capital > 0 && capitalTimestamp < _currentTime && feeFactor < TWO_128) {\n      _result = mul (_result, pow (feeFactor, _currentTime - capitalTimestamp));\n    }\n  }\n\n  /**\n   * Deposit ether on the client's account.\n   */\n  function deposit () payable {\n    if (msg.value > 0) {\n      updateCapital ();\n      if (msg.value >= TWO_128 - capital)\n        throw; // Capital should never exceed 2^128 Wei\n      capital += msg.value;\n      Deposit (msg.sender, msg.value);\n    }\n  }\n\n  /**\n   * Withdraw ether from client's account and sent it to the client's address.\n   * May only be called by client.\n   *\n   * @param _value value to withdraw (in Wei)\n   * @return true if ether was successfully withdrawn, false otherwise\n   */\n  function withdraw (uint256 _value)\n  returns (bool _success) {\n    if (msg.sender != client) throw;\n\n    if (_value > 0) {\n      updateCapital ();\n      if (_value <= capital) {\n        if (client.send (_value)) {\n          Withdrawal (_value);\n          capital -= _value;\n          return true;\n        } else return false;\n      } else return false;\n    } else return true;\n  }\n\n  /**\n   * Withdraw all ether from client's account and sent it to the client's\n   * address.  May only be called by client.\n   *\n   * @return true if ether was successfully withdrawn, false otherwise\n   */\n  function withdrawAll ()\n  returns (bool _success) {\n    if (msg.sender != client) throw;\n\n    updateCapital ();\n    if (capital > 0) {\n      if (client.send (capital)) {\n        Withdrawal (capital);\n        capital = 0;\n        return true;\n      } else return false;\n    } else return true;\n  }\n\n  /**\n   * Withdraw fee charged by the contract as well as all unaccounted ether on\n   * contract's balance and send it to the advisor's address.  May only be\n   * called by advisor.\n   *\n   * @return true if fee and unaccounted ether was successfully withdrawn,\n   *          false otherwise\n   */\n  function withdrawFee ()\n  returns (bool _success) {\n    if (msg.sender != advisor) throw;\n\n    uint256 _value = this.balance - getCapital (now);\n    if (_value > 0) {\n      return advisor.send (_value);\n    } else return true;\n  }\n\n  /**\n   * Terminate account and send all its balance to advisor.  May only be called\n   * by advisor when capital is zero.\n   */\n  function terminate () {\n    if (msg.sender != advisor) throw;\n\n    if (capital > 0) throw;\n    if (this.balance > 0) {\n      if (!advisor.send (this.balance)) {\n        // Ignore error\n      }\n    }\n    suicide (advisor);\n  }\n\n  /**\n   * Update capital, i.e. charge fee from it.\n   */\n  function updateCapital ()\n  internal {\n    if (capital > 0 && capitalTimestamp < now && feeFactor < TWO_128) {\n      capital = mul (capital, pow (feeFactor, now - capitalTimestamp));\n    }\n    capitalTimestamp = now;\n  }\n\n  /**\n   * Multiply _a by _b / 2^128.  Parameter _a should be less than or equal to\n   * 2^128 and parameter _b should be less than 2^128.\n   *\n   * @param _a left argument\n   * @param _b right argument\n   * @return _a * _b / 2^128\n   */\n  function mul (uint256 _a, uint256 _b)\n  internal constant returns (uint256 _result) {\n    if (_a > TWO_128) throw;\n    if (_b >= TWO_128) throw;\n    return (_a * _b + TWO_127) >> 128;\n  }\n\n  /**\n   * Calculate (_a / 2^128)^_b * 2^128.  Parameter _a should be less than 2^128.\n   *\n   * @param _a left argument\n   * @param _b right argument\n   * @return (_a / 2^128)^_b * 2^128\n   */\n  function pow (uint256 _a, uint256 _b)\n  internal constant returns (uint256 _result) {\n    if (_a >= TWO_128) throw;\n\n    _result = TWO_128;\n    while (_b > 0) {\n      if (_b & 1 == 0) {\n        _a = mul (_a, _a);\n        _b >>= 1;\n      } else {\n        _result = mul (_result, _a);\n        _b -= 1;\n      }\n    }\n  }\n\n  /**\n   * Logged when ether was deposited on client's account.\n   *\n   * @param from address ether came from\n   * @param value amount of ether deposited (in Wei)\n   */\n  event Deposit (address indexed from, uint256 value);\n\n  /**\n   * Logged when ether was withdrawn from client's account.\n   *\n   * @param value amount of ether withdrawn (in Wei)\n   */\n  event Withdrawal (uint256 value);\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentTime\",\"type\":\"uint256\"}],\"name\":\"getCapital\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"_client\",\"type\":\"address\"},{\"name\":\"_advisor\",\"type\":\"address\"},{\"name\":\"_feeFactor\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000c57fe5b6040516060806106038339810160409081528151602083015191909201515b70010000000000000000000000000000000081111561004a5760006000fd5b60008054600160a060020a03808616600160a060020a031992831617909255600180549285169290911691909117905560048190555b5050505b610570806100936000396000f3006060604052361561005c5763ffffffff60e060020a6000350416630c08bf88811461005e57806329560980146100705780632e1a7d4d14610095578063853828b6146100bc578063d0e30db0146100e0578063e941fa78146100ea575bfe5b341561006657fe5b61006e61010e565b005b341561007857fe5b61008360043561018a565b60408051918252519081900360200190f35b341561009d57fe5b6100a86004356101d6565b604080519115158252519081900360200190f35b34156100c457fe5b6100a86102a6565b604080519115158252519081900360200190f35b61006e61035c565b005b34156100f257fe5b6100a86103cf565b604080519115158252519081900360200190f35b60015433600160a060020a0390811691161461012a5760006000fd5b6000600254111561013b5760006000fd5b600030600160a060020a031631111561017957600154604051600160a060020a039182169130163180156108fc02916000818181858888f150505050505b5b600154600160a060020a0316ff5b565b60025460008111801561019e575081600354105b80156101af5750608060020a600454105b156101d0576101cd816101c8600454600354860361044a565b6104ad565b90505b5b919050565b6000805433600160a060020a039081169116146101f35760006000fd5b6000821115610298576102046104f5565b600254821161027e5760008054604051600160a060020a039091169184156108fc02918591818181858888f193505050501561027e576040805183815290517f4e70a604b23a8edee2b1d0a656e9b9c00b73ad8bb1afc2c59381ee9f69197de79181900360200190a15060028054829003905560016101d0565b5060006101d0565b610293565b5060006101d0565b6101d0565b5060016101d0565b5b919050565b6000805433600160a060020a039081169116146102c35760006000fd5b6102cb6104f5565b600060025411156103545760008054600254604051600160a060020a039092169281156108fc029290818181858888f19350505050156103475760025460408051918252517f4e70a604b23a8edee2b1d0a656e9b9c00b73ad8bb1afc2c59381ee9f69197de79181900360200190a15060006002556001610358565b506000610358565b610358565b5060015b5b90565b60003411156101885761036d6104f5565b600254608060020a0334106103825760006000fd5b60028054349081019091556040805191825251600160a060020a033316917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b5b565b600154600090819033600160a060020a039081169116146103f05760006000fd5b6103f94261018a565b30600160a060020a031631039050600081111561044057600154604051600160a060020a039091169082156108fc029083906000818181858888f193505050509150610445565b600191505b5b5090565b6000608060020a831061045d5760006000fd5b50608060020a5b60008211156104a65760018216151561048e5761048183846104ad565b92506002909104906104a1565b61049881846104ad565b90506001820391505b610464565b5b92915050565b6000608060020a8311156104c15760006000fd5b608060020a82106104d25760006000fd5b50608060020a8282026f8000000000000000000000000000000001045b92915050565b6000600254118015610508575042600354105b80156105195750608060020a600454105b1561053d576105396002546101c8600454600354420361044a565b6104ad565b6002555b426003555b5600a165627a7a72305820222c95f1a49e5cc867b0613bc9c82590d38fa3272ed7b6319f2afffc04b9b5ff0029000000000000000000000000189c2c1834b1414a6aee9eba5dc4b4d547c9a44c00000000000000000000000029fda6293f58f5ce95c1d29c61aa7c13962515c500000000000000000000000000000000fffffffea1d4ff153b562ddff55d22db",
  "constructorArguments": "fda6293f58f5ce95c1d29c61aa7c13962515c500000000000000000000000000000000fffffffea1d4ff153b562ddff55d22db"
}