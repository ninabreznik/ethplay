{
  "address": "0x45245bc59219eeaaf6cd3f382e078a461ff9de7b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Token",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-28\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ninterface TokenUpgraderInterface{\n    function upgradeFor(address _for, uint256 _value) public returns (bool success);\n    function upgradeFrom(address _by, address _for, uint256 _value) public returns (bool success);\n}\n  \ncontract Token {\n    using SafeMath for uint256;\n\n    address public owner = msg.sender;\n\n    string public name = \"\\\"BANKEX\\\" project utility token\";\n    string public symbol = \"BKX\";\n\n    bool public upgradable = false;\n    bool public upgraderSet = false;\n    TokenUpgraderInterface public upgrader;\n\n    bool public locked = false;\n    uint8 public decimals = 18;\n    uint256 public decimalMultiplier = 10**(uint256(decimals));\n\n    modifier unlocked() {\n        require(!locked);\n        _;\n    }\n\n    // Ownership\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner returns (bool success) {\n        require(newOwner != address(0));      \n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        return true;\n    }\n\n\n    // ERC20 related functions\n\n    uint256 public totalSupply = 0;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n\n    function transfer(address _to, uint256 _value) unlocked public returns (bool) {\n        require(_to != address(0));\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n\n    function balanceOf(address _owner) view public returns (uint256 bal) {\n        return balances[_owner];\n    }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n\n    function transferFrom(address _from, address _to, uint256 _value) unlocked public returns (bool) {\n        require(_to != address(0));\n        uint256 _allowance = allowed[_from][msg.sender];\n        require(_allowance >= _value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n\n    function approve(address _spender, uint256 _value) unlocked public returns (bool) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still available for the spender.\n   */\n\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval (address _spender, uint _addedValue) unlocked public\n        returns (bool success) {\n            allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n            Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n            return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) unlocked public\n        returns (bool success) {\n            uint oldValue = allowed[msg.sender][_spender];\n            if (_subtractedValue > oldValue) {\n                allowed[msg.sender][_spender] = 0;\n            } else {\n                allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n            }\n            Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n            return true;\n    }\n\n  /**\n    * Constructor mints tokens to corresponding addresses\n   */\n\n    function Token () public {\n        //values are in natural format\n\n        address publicSaleReserveAddress = 0xDef97e9F16831DA75a52fF583323c4cdd1f508da;\n        mint(publicSaleReserveAddress, 74000000);\n\n        address preICOconversionFromWavesReserveAddress = 0x2E3Da0E4DF6C6704c21bD53D873Af09af0a34f86;\n        mint(preICOconversionFromWavesReserveAddress, 3000000);\n\n        address preICOconversionFromEthReserveAddress = 0xDE4c839cee9464212C76473420bb87eF0Da8a617;\n        mint(preICOconversionFromEthReserveAddress, 3000000);\n\n        address advisorsReserveAddress = 0xDdbC59F27332448EC1e3F9797B69169e680F21Dc;\n        mint(advisorsReserveAddress, 40000000);\n        \n        address frozenForInstitutionalSalesReserveAddress = 0xf026ad161674E4f8b3306a191Bd936E01A5BD4A7;\n        mint(frozenForInstitutionalSalesReserveAddress, 140000000);\n\n        address teamReserveAddress = 0x3c0A403245F1C144207935b65da418Ddcc29c94E;\n        mint(teamReserveAddress, 50000000);\n        \n        address optionsReserveAddress = 0x0483bF7eB04cE3d20936e210B9F3801964791EDA;\n        mint(optionsReserveAddress, 50000000);\n        \n        address foundationReserveAddress = 0x6a6a0b4aaa60E97386F94c5414522159b45DEdE8;\n        mint(foundationReserveAddress, 40000000);\n\n        assert(totalSupply == 400000000*decimalMultiplier);\n    }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _for The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n\n    function mint(address _for, uint256 _amount) internal returns (bool success) {\n        _amount = _amount*decimalMultiplier;\n        balances[_for] = balances[_for].add(_amount);\n        totalSupply = totalSupply.add(_amount);\n        Transfer(0, _for, _amount);\n        return true;\n    }\n\n  /**\n   * @dev Function to lock token transfers\n   * @param _newLockState New lock state\n   * @return A boolean that indicates if the operation was successful.\n   */\n\n    function setLock(bool _newLockState) onlyOwner public returns (bool success) {\n        require(_newLockState != locked);\n        locked = _newLockState;\n        return true;\n    }\n\n  /**\n   * @dev Function to allow token upgrades\n   * @param _newState New upgrading allowance state\n   * @return A boolean that indicates if the operation was successful.\n   */\n\n    function allowUpgrading(bool _newState) onlyOwner public returns (bool success) {\n        upgradable = _newState;\n        return true;\n    }\n\n    function setUpgrader(address _upgraderAddress) onlyOwner public returns (bool success) {\n        require(!upgraderSet);\n        require(_upgraderAddress != address(0));\n        upgraderSet = true;\n        upgrader = TokenUpgraderInterface(_upgraderAddress);\n        return true;\n    }\n\n    function upgrade() public returns (bool success) {\n        require(upgradable);\n        require(upgraderSet);\n        require(upgrader != TokenUpgraderInterface(0));\n        uint256 value = balances[msg.sender];\n        assert(value > 0);\n        delete balances[msg.sender];\n        totalSupply = totalSupply.sub(value);\n        assert(upgrader.upgradeFor(msg.sender, value));\n        return true;\n    }\n\n    function upgradeFor(address _for, uint256 _value) public returns (bool success) {\n        require(upgradable);\n        require(upgraderSet);\n        require(upgrader != TokenUpgraderInterface(0));\n        uint256 _allowance = allowed[_for][msg.sender];\n        require(_allowance >= _value);\n        balances[_for] = balances[_for].sub(_value);\n        allowed[_for][msg.sender] = _allowance.sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        assert(upgrader.upgradeFrom(msg.sender, _for, _value));\n        return true;\n    }\n\n    function () payable external {\n        if (upgradable) {\n            assert(upgrade());\n            return;\n        }\n        revert();\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"upgraderSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgraderAddress\",\"type\":\"address\"}],\"name\":\"setUpgrader\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLockState\",\"type\":\"bool\"}],\"name\":\"setLock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"bal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_for\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"upgradeFor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgrader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"bool\"}],\"name\":\"allowUpgrading\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "6060604090815260008054600160a060020a03191633600160a060020a03161790558051908101604052601e81527f2242414e4b4558222070726f6a656374207574696c69747920746f6b656e00006020820152600190805162000068929160200190620003c5565b5060408051908101604052600381527f424b58000000000000000000000000000000000000000000000000000000000060208201526002908051620000b2929160200190620003c5565b506003805461ffff60b060020a61ffff0201191677120000000000000000000000000000000000000000000000179081905560ff7701000000000000000000000000000000000000000000000090910416600a0a600455600060055534156200011a57600080fd5b73def97e9f16831da75a52ff583323c4cdd1f508da60008080808080806200015588630469268064010000000062000fcf620002f282021704565b50732e3da0e4df6c6704c21bd53d873af09af0a34f8696506200018a87622dc6c064010000000062000fcf620002f282021704565b5073de4c839cee9464212c76473420bb87ef0da8a6179550620001bf86622dc6c064010000000062000fcf620002f282021704565b5073ddbc59f27332448ec1e3f9797b69169e680f21dc9450620001f5856302625a0064010000000062000fcf620002f282021704565b5073f026ad161674e4f8b3306a191bd936e01a5bd4a793506200022b846308583b0064010000000062000fcf620002f282021704565b50733c0a403245f1c144207935b65da418ddcc29c94e925062000261836302faf08064010000000062000fcf620002f282021704565b50730483bf7eb04ce3d20936e210b9f3801964791eda915062000297826302faf08064010000000062000fcf620002f282021704565b50736a6a0b4aaa60e97386f94c5414522159b45dede89050620002cd816302625a0064010000000062000fcf620002f282021704565b506004546317d7840002600554141515620002e457fe5b50505050505050506200046a565b600454600160a060020a03831660009081526006602052604081205492909102916200032d908364010000000062000fb9620003ae82021704565b600160a060020a03841660009081526006602052604090205560055462000363908364010000000062000fb9620003ae82021704565b600555600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600082820183811015620003be57fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200040857805160ff191683800117855562000438565b8280016001018555821562000438579182015b82811115620004385782518255916020019190600101906200041b565b50620004469291506200044a565b5090565b6200046791905b8082111562000446576000815560010162000451565b90565b6110a3806200047a6000396000f3006060604052600436106101195763ffffffff60e060020a600035041663045a1796811461014057806306fdde0314610167578063095ea7b3146101f157806318160ddd146102135780631b878f711461023857806323b872dd146102575780633082538f1461027f578063313ce56714610292578063619d5194146102bb57806366188463146102d357806370a08231146102f5578063829ebdcd146103145780638da5cb5b1461033657806395d89b4114610365578063a9059cbb14610378578063af2697451461039a578063ca1b5aa7146103ad578063cf309012146103c5578063d55ec697146103d8578063d73dd623146103eb578063dd62ed3e1461040d578063f2fde38b14610432578063f4d26fec14610451575b60035460ff16156101395761012c610464565b151561013457fe5b61013e565b600080fd5b005b341561014b57600080fd5b61015361058f565b604051901515815260200160405180910390f35b341561017257600080fd5b61017a61059d565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101b657808201518382015260200161019e565b50505050905090810190601f1680156101e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101fc57600080fd5b610153600160a060020a036004351660243561063b565b341561021e57600080fd5b6102266106f9565b60405190815260200160405180910390f35b341561024357600080fd5b610153600160a060020a03600435166106ff565b341561026257600080fd5b610153600160a060020a036004358116906024351660443561078a565b341561028a57600080fd5b6102266108e5565b341561029d57600080fd5b6102a56108eb565b60405160ff909116815260200160405180910390f35b34156102c657600080fd5b610153600435151561090f565b34156102de57600080fd5b610153600160a060020a036004351660243561097c565b341561030057600080fd5b610226600160a060020a0360043516610a91565b341561031f57600080fd5b610153600160a060020a0360043516602435610aac565b341561034157600080fd5b610349610c58565b604051600160a060020a03909116815260200160405180910390f35b341561037057600080fd5b61017a610c67565b341561038357600080fd5b610153600160a060020a0360043516602435610cd2565b34156103a557600080fd5b610349610dc0565b34156103b857600080fd5b6101536004351515610dd5565b34156103d057600080fd5b610153610e08565b34156103e357600080fd5b610153610464565b34156103f657600080fd5b610153600160a060020a0360043516602435610e18565b341561041857600080fd5b610226600160a060020a0360043581169060243516610ed4565b341561043d57600080fd5b610153600160a060020a0360043516610eff565b341561045c57600080fd5b610153610f9e565b600354600090819060ff16151561047a57600080fd5b600354610100900460ff16151561049057600080fd5b600354620100009004600160a060020a031615156104ad57600080fd5b50600160a060020a0333166000908152600660205260408120549081116104d057fe5b600160a060020a0333166000908152600660205260408120556005546104fc908263ffffffff610fa716565b600555600354620100009004600160a060020a031663829ebdcd338360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561056457600080fd5b6102c65a03f1151561057557600080fd5b50505060405180519050151561058757fe5b600191505090565b600354610100900460ff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106335780601f1061060857610100808354040283529160200191610633565b820191906000526020600020905b81548152906001019060200180831161061657829003601f168201915b505050505081565b60035460009060b060020a900460ff161561065557600080fd5b8115806106855750600160a060020a03338116600090815260076020908152604080832093871683529290522054155b151561069057600080fd5b600160a060020a03338116600081815260076020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60055481565b6000805433600160a060020a0390811691161461071b57600080fd5b600354610100900460ff161561073057600080fd5b600160a060020a038216151561074557600080fd5b5060038054600160a060020a038316620100000275ffffffffffffffffffffffffffffffffffffffff00001961ff001990921661010017919091161790556001919050565b600354600090819060b060020a900460ff16156107a657600080fd5b600160a060020a03841615156107bb57600080fd5b50600160a060020a0380851660009081526007602090815260408083203390941683529290522054828110156107f057600080fd5b600160a060020a038516600090815260066020526040902054610819908463ffffffff610fa716565b600160a060020a03808716600090815260066020526040808220939093559086168152205461084e908463ffffffff610fb916565b600160a060020a038516600090815260066020526040902055610877818463ffffffff610fa716565b600160a060020a03808716600081815260076020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60045481565b60035477010000000000000000000000000000000000000000000000900460ff1681565b6000805433600160a060020a0390811691161461092b57600080fd5b60035460b060020a900460ff161515821515141561094857600080fd5b506003805482151560b060020a0276ff00000000000000000000000000000000000000000000199091161790556001919050565b600354600090819060b060020a900460ff161561099857600080fd5b50600160a060020a03338116600090815260076020908152604080832093871683529290522054808311156109f457600160a060020a033381166000908152600760209081526040808320938816835292905290812055610a2b565b610a04818463ffffffff610fa716565b600160a060020a033381166000908152600760209081526040808320938916835292905220555b600160a060020a0333811660008181526007602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526006602052604090205490565b600354600090819060ff161515610ac257600080fd5b600354610100900460ff161515610ad857600080fd5b600354620100009004600160a060020a03161515610af557600080fd5b50600160a060020a038084166000908152600760209081526040808320339094168352929052205482811015610b2a57600080fd5b600160a060020a038416600090815260066020526040902054610b53908463ffffffff610fa716565b600160a060020a038516600090815260066020526040902055610b7c818463ffffffff610fa716565b600160a060020a0380861660009081526007602090815260408083203390941683529290522055600554610bb6908463ffffffff610fa716565b600555600354620100009004600160a060020a0316634c6c6a5c33868660006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610c2b57600080fd5b6102c65a03f11515610c3c57600080fd5b505050604051805190501515610c4e57fe5b5060019392505050565b600054600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106335780601f1061060857610100808354040283529160200191610633565b60035460009060b060020a900460ff1615610cec57600080fd5b600160a060020a0383161515610d0157600080fd5b600160a060020a033316600090815260066020526040902054610d2a908363ffffffff610fa716565b600160a060020a033381166000908152600660205260408082209390935590851681522054610d5f908363ffffffff610fb916565b600160a060020a0380851660008181526006602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600354620100009004600160a060020a031681565b6000805433600160a060020a03908116911614610df157600080fd5b506003805460ff1916911515919091179055600190565b60035460b060020a900460ff1681565b60035460009060b060020a900460ff1615610e3257600080fd5b600160a060020a03338116600090815260076020908152604080832093871683529290522054610e68908363ffffffff610fb916565b600160a060020a0333811660008181526007602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260076020908152604080832093909416825291909152205490565b6000805433600160a060020a03908116911614610f1b57600080fd5b600160a060020a0382161515610f3057600080fd5b600054600160a060020a0380841691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60035460ff1681565b600082821115610fb357fe5b50900390565b600082820183811015610fc857fe5b9392505050565b600454600160a060020a0383166000908152600660205260408120549290910291611000908363ffffffff610fb916565b600160a060020a03841660009081526006602052604090205560055461102c908363ffffffff610fb916565b600555600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a3506001929150505600a165627a7a7230582057153936d51bed78b135521c7a559ddd93e398aa2e0aab1fe48f0560156d728b0029"
}