{
  "address": "0xb3836d31d43d315ba74c21aad3818f9378256152",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TheGame",
  "compilerVersion": "v0.4.20+commit.3155dd80",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-18\n*/\n\npragma solidity ^0.4.18;\n\n/**\n* Ponzi Trust Pyramid Game Smart Contracts \n* Code is published on https://github.com/PonziTrust/PyramidGame\n* Ponzi Trust https://ponzitrust.com/\n*/\n\n// contract to store all info about players \ncontract PlayersStorage {\n  struct Player {\n    uint256 input; \n    uint256 timestamp;\n    bool exist;\n  }\n  mapping (address => Player) private m_players;\n  address private m_owner;\n    \n  modifier onlyOwner() {\n    require(msg.sender == m_owner);\n    _;\n  }\n  \n  function PlayersStorage() public {\n    m_owner = msg.sender;  \n  }\n\n  // http://solidity.readthedocs.io/en/develop/contracts.html#fallback-function \n  // Contracts that receive Ether directly (without a function call, i.e. using send \n  // or transfer) but do not define a fallback function throw an exception, \n  // sending back the Ether (this was different before Solidity v0.4.0).\n  // function() payable { revert(); }\n\n\n  /**\n  * @dev Try create new player in storage.\n  * @param addr Adrress of player.\n  * @param input Input of player.\n  * @param timestamp Timestamp of player.\n  */\n  function newPlayer(address addr, uint256 input, uint256 timestamp) \n    public \n    onlyOwner() \n    returns(bool)\n  {\n    if (m_players[addr].exist) {\n      return false;\n    }\n    m_players[addr].input = input;\n    m_players[addr].timestamp = timestamp;\n    m_players[addr].exist = true;\n    return true;\n  }\n  \n  /**\n  * @dev Delet specified player from storage.\n  * @param addr Adrress of specified player.\n  */\n  function deletePlayer(address addr) public onlyOwner() {\n    delete m_players[addr];\n  }\n  \n  /**\n  * @dev Get info about specified player.\n  * @param addr Adrress of specified player.\n  * @return input Input of specified player.\n  * @return timestamp Timestamp of specified player.\n  * @return exist Whether specified player in storage or not.\n  */\n  function playerInfo(address addr) \n    public\n    view\n    onlyOwner() \n    returns(uint256 input, uint256 timestamp, bool exist) \n  {\n    input = m_players[addr].input;\n    timestamp = m_players[addr].timestamp;\n    exist = m_players[addr].exist;\n  }\n  \n  /**\n  * @dev Get input of specified player.\n  * @param addr Adrress of specified player.\n  * @return input Input of specified player.\n  */\n  function playerInput(address addr) \n    public\n    view\n    onlyOwner() \n    returns(uint256 input) \n  {\n    input = m_players[addr].input;\n  }\n  \n  /**\n  * @dev Get whether specified player in storage or not.\n  * @param addr Adrress of specified player.\n  * @return exist Whether specified player in storage or not.\n  */\n  function playerExist(address addr) \n    public\n    view\n    onlyOwner() \n    returns(bool exist) \n  {\n    exist = m_players[addr].exist;\n  }\n  \n  /**\n  * @dev Get Timestamp of specified player.\n  * @param addr Adrress of specified player.\n  * @return timestamp Timestamp of specified player.\n  */\n  function playerTimestamp(address addr) \n    public\n    view\n    onlyOwner() \n    returns(uint256 timestamp) \n  {\n    timestamp = m_players[addr].timestamp;\n  }\n  \n  /**\n  * @dev Try set input of specified player.\n  * @param addr Adrress of specified player.\n  * @param newInput New input of specified player.\n  * @return  Whether successful or not.\n  */\n  function playerSetInput(address addr, uint256 newInput)\n    public\n    onlyOwner()\n    returns(bool) \n  {\n    if (!m_players[addr].exist) {\n      return false;\n    }\n    m_players[addr].input = newInput;\n    return true;\n  }\n  \n  /**\n  * @dev Do selfdestruct.\n  */\n  function kill() public onlyOwner() {\n    selfdestruct(m_owner);\n  }\n}\n\n\n// see: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n// see: https://github.com/ethereum/EIPs/issues/677\ncontract ERC677Recipient {\n  function tokenFallback(address from, uint256 amount, bytes data) public returns (bool success);\n} \n\n\n// Ponzi Token Minimal Interface\ncontract PonziTokenMinInterface {\n  function balanceOf(address owner) public view returns(uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n}\n\n\n/**\n* @dev TheGame contract implement ERC667 Recipient \n* see: https://github.com/ethereum/EIPs/issues/677) \n* and can receive token/ether only from Ponzi Token\n* see: https://github.com/PonziTrust/Token).\n*/\ncontract TheGame is ERC677Recipient {\n  using SafeMath for uint256;\n\n  enum State {\n    NotActive, //NotActive\n    Active     //Active\n  }\n\n  State private m_state;\n  address private m_owner;\n  uint256 private m_level;\n  PlayersStorage private m_playersStorage;\n  PonziTokenMinInterface private m_ponziToken;\n  uint256 private m_interestRateNumerator;\n  uint256 private constant INTEREST_RATE_DENOMINATOR = 1000;\n  uint256 private m_creationTimestamp;\n  uint256 private constant DURATION_TO_ACCESS_FOR_OWNER = 144 days;\n  uint256 private constant COMPOUNDING_FREQ = 1 days;\n  uint256 private constant DELAY_ON_EXIT = 100 hours;\n  uint256 private constant DELAY_ON_NEW_LEVEL = 7 days;\n  string private constant NOT_ACTIVE_STR = \"NotActive\";\n  uint256 private constant PERCENT_TAX_ON_EXIT = 10;\n  string private constant ACTIVE_STR = \"Active\";\n  uint256 private constant PERCENT_REFERRAL_BOUNTY = 1;\n  uint256 private m_levelStartupTimestamp;\n  uint256 private m_ponziPriceInWei;\n  address private m_priceSetter;\n\n////////////////\n// EVENTS\n// \n  event NewPlayer(address indexed addr, uint256 input, uint256 when);\n  event DeletePlayer(address indexed addr, uint256 when);\n  event NewLevel(uint256 when, uint256 newLevel);\n  event StateChanged(address indexed who, State newState);\n  event PonziPriceChanged(address indexed who, uint256 newPrice);\n  \n////////////////\n// MODIFIERS - Restricting Access and State Machine patterns\n//\n  modifier onlyOwner() {\n    require(msg.sender == m_owner);\n    _;\n  }\n  modifier onlyPonziToken() {\n    require(msg.sender == address(m_ponziToken));\n    _;\n  }\n  modifier atState(State state) {\n    require(m_state == state);\n    _;\n  }\n  \n  modifier checkAccess() {\n    require(m_state == State.NotActive  // solium-disable-line indentation, operator-whitespace\n      || now.sub(m_creationTimestamp) <= DURATION_TO_ACCESS_FOR_OWNER); \n    _;\n  }\n  \n  modifier isPlayer(address addr) {\n    require(m_playersStorage.playerExist(addr));\n    _;\n  }\n  \n  modifier gameIsAvailable() {\n    require(now >= m_levelStartupTimestamp.add(DELAY_ON_NEW_LEVEL));\n    _;\n  }\n\n///////////////\n// CONSTRUCTOR\n//  \n  /**\n  * @dev Constructor PonziToken.\n  */\n  function TheGame(address ponziTokenAddr) public {\n    require(ponziTokenAddr != address(0));\n    m_ponziToken = PonziTokenMinInterface(ponziTokenAddr);\n    m_owner = msg.sender;\n    m_creationTimestamp = now;\n    m_state = State.NotActive;\n    m_level = 1;\n    m_interestRateNumerator = calcInterestRateNumerator(m_level);\n  }\n\n  /**\n  * @dev Fallback func can recive eth only from Ponzi token\n  */\n  function() public payable onlyPonziToken() {  }\n  \n  \n  /**\n  * Contract calc output of sender and transfer token/eth it to him. \n  * If token/ethnot enough on balance, then transfer all and gp to next level.\n  * \n  * @dev Sender exit from the game. Sender must be player.\n  */\n  function exit() \n    external\n    atState(State.Active) \n    gameIsAvailable()\n    isPlayer(msg.sender) \n  {\n    uint256 input;\n    uint256 timestamp;\n    timestamp = m_playersStorage.playerTimestamp(msg.sender);\n    input = m_playersStorage.playerInput(msg.sender);\n    \n    // Check whether the player is DELAY_ON_EXIT hours in the game\n    require(now >= timestamp.add(DELAY_ON_EXIT));\n    \n    // calc output\n    uint256 outputInPonzi = calcOutput(input, now.sub(timestamp).div(COMPOUNDING_FREQ));\n    \n    assert(outputInPonzi > 0);\n    \n    // convert ponzi to eth\n    uint256 outputInWei = ponziToWei(outputInPonzi, m_ponziPriceInWei);\n    \n    // set zero before sending to prevent Re-Entrancy \n    m_playersStorage.deletePlayer(msg.sender);\n    \n    if (m_ponziPriceInWei > 0 && address(this).balance >= outputInWei) {\n      // if we have enough eth on address(this).balance \n      // send it to sender\n      \n      // WARNING\n      // untrusted Transfer !!!\n      uint256 oldBalance = address(this).balance;\n      msg.sender.transfer(outputInWei);\n      assert(address(this).balance.add(outputInWei) >= oldBalance);\n      \n    } else if (m_ponziToken.balanceOf(address(this)) >= outputInPonzi) {\n      // else if we have enough ponzi on balance\n      // send it to sender\n      \n      uint256 oldPonziBalance = m_ponziToken.balanceOf(address(this));\n      assert(m_ponziToken.transfer(msg.sender, outputInPonzi));\n      assert(m_ponziToken.balanceOf(address(this)).add(outputInPonzi) == oldPonziBalance);\n    } else {\n      // if we dont have nor eth, nor ponzi then transfer all avaliable ponzi to \n      // msg.sender and go to next Level\n      assert(m_ponziToken.transfer(msg.sender, m_ponziToken.balanceOf(address(this))));\n      assert(m_ponziToken.balanceOf(address(this)) == 0);\n      nextLevel();\n    }\n  }\n  \n  /**\n  * @dev Get info about specified player.\n  * @param addr Adrress of specified player.\n  * @return input Input of specified player.\n  * @return timestamp Timestamp of specified player.\n  * @return inGame Whether specified player in game or not.\n  */\n  function playerInfo(address addr) \n    public \n    view \n    atState(State.Active)\n    gameIsAvailable()\n    returns(uint256 input, uint256 timestamp, bool inGame) \n  {\n    (input, timestamp, inGame) = m_playersStorage.playerInfo(addr);\n  }\n  \n  /**\n  * @dev Get possible output for specified player at now.\n  * @param addr Adrress of specified player.\n  * @return input Possible output for specified player at now.\n  */\n  function playerOutputAtNow(address addr) \n    public \n    view \n    atState(State.Active) \n    gameIsAvailable()\n    returns(uint256 amount)\n  {\n    if (!m_playersStorage.playerExist(addr)) {\n      return 0;\n    }\n    uint256 input = m_playersStorage.playerInput(addr);\n    uint256 timestamp = m_playersStorage.playerTimestamp(addr);\n    uint256 numberOfPayout = now.sub(timestamp).div(COMPOUNDING_FREQ);\n    amount = calcOutput(input, numberOfPayout);\n  }\n  \n  /**\n  * @dev Get delay on opportunity to exit for specified player at now.\n  * @param addr Adrress of specified player.\n  * @return input Delay for specified player at now.\n  */\n  function playerDelayOnExit(address addr) \n    public \n    view \n    atState(State.Active) \n    gameIsAvailable()\n    returns(uint256 delay) \n  {\n    if (!m_playersStorage.playerExist(addr)) {\n      return 0;\n    }\n    uint256 timestamp = m_playersStorage.playerTimestamp(msg.sender);\n    if (now >= timestamp.add(DELAY_ON_EXIT)) {\n      delay = 0;\n    } else {\n      delay = timestamp.add(DELAY_ON_EXIT).sub(now);\n    }\n  }\n  \n  /**\n  * Sender try enter to the game.\n  * \n  * @dev Sender enter to the game. Sender must not be player.\n  * @param input Input of new player.\n  * @param referralAddress The referral address.\n  */\n  function enter(uint256 input, address referralAddress) \n    external \n    atState(State.Active)\n    gameIsAvailable()\n  {\n    require(m_ponziToken.transferFrom(msg.sender, address(this), input));\n    require(newPlayer(msg.sender, input, referralAddress));\n  }\n  \n  /**\n  * @dev Address of the price setter.\n  * @return Address of the price setter.\n  */\n  function priceSetter() external view returns(address) {\n    return m_priceSetter;\n  }\n  \n\n  /**\n  * @dev Price of one Ponzi token in wei.\n  * @return Price of one Ponzi token in wei.\n  */\n  function ponziPriceInWei() \n    external \n    view \n    atState(State.Active)  \n    returns(uint256) \n  {\n    return m_ponziPriceInWei;\n  }\n  \n  /**\n  * @dev Сompounding freq of the game. Olways 1 day.\n  * @return Compounding freq of the game.\n  */\n  function compoundingFreq() \n    external \n    view \n    atState(State.Active) \n    returns(uint256) \n  {\n    return COMPOUNDING_FREQ;\n  }\n  \n  /**\n  * @dev Interest rate  of the game as numerator/denominator.From 5% to 0.1%.\n  * @return numerator Interest rate numerator of the game.\n  * @return denominator Interest rate denominator of the game.\n  */\n  function interestRate() \n    external \n    view\n    atState(State.Active)\n    returns(uint256 numerator, uint256 denominator) \n  {\n    numerator = m_interestRateNumerator;\n    denominator = INTEREST_RATE_DENOMINATOR;\n  }\n  \n  /**\n  * @dev Level of the game.\n  * @return Level of the game.\n  */\n  function level() \n    external \n    view \n    atState(State.Active)\n    returns(uint256) \n  {\n    return m_level;\n  }\n  \n  /**\n  * @dev Get contract work state.\n  * @return Contract work state via string.\n  */\n  function state() external view returns(string) {\n    if (m_state == State.NotActive) \n      return NOT_ACTIVE_STR;\n    else\n      return ACTIVE_STR;\n  }\n  \n  /**\n  * @dev Get timestamp of the level startup.\n  * @return Timestamp of the level startup.\n  */\n  function levelStartupTimestamp() \n    external \n    view \n    atState(State.Active)\n    returns(uint256) \n  {\n    return m_levelStartupTimestamp;\n  }\n  \n  /**\n  * @dev Get amount of Ponzi tokens in the game.Ponzi tokens balanceOf the game.\n  * @return Contract work state via string.\n  */\n  function totalPonziInGame() \n    external \n    view \n    returns(uint256) \n  {\n    return m_ponziToken.balanceOf(address(this));\n  }\n  \n  /**\n  * @dev Get current delay on new level.\n  * @return Current delay on new level.\n  */\n  function currentDelayOnNewLevel() \n    external \n    view \n    atState(State.Active)\n    returns(uint256 delay) \n  {\n    if (now >= m_levelStartupTimestamp.add(DELAY_ON_NEW_LEVEL)) {\n      delay = 0;\n    } else {\n      delay = m_levelStartupTimestamp.add(DELAY_ON_NEW_LEVEL).sub(now);\n    }  \n  }\n\n///////////////////\n// ERC677 ERC677Recipient Methods\n//\n  /**\n  * see: https://github.com/ethereum/EIPs/issues/677\n  *\n  * @dev ERC677 token fallback. Called when received Ponzi token\n  * and sender try enter to the game.\n  *\n  * @param from Received tokens from the address.\n  * @param amount Amount of recived tokens.\n  * @param data Received extra data.\n  * @return Whether successful entrance or not.\n  */\n  function tokenFallback(address from, uint256 amount, bytes data) \n    public\n    atState(State.Active)\n    gameIsAvailable()\n    onlyPonziToken()\n    returns (bool)\n  {\n    address referralAddress = bytesToAddress(data);\n    require(newPlayer(from, amount, referralAddress));\n    return true;\n  }\n  \n  /**\n  * @dev Set price of one Ponzi token in wei.\n  * @param newPrice Price of one Ponzi token in wei.\n  */ \n  function setPonziPriceinWei(uint256 newPrice) \n    public\n    atState(State.Active)   \n  {\n    require(msg.sender == m_owner || msg.sender == m_priceSetter);\n    m_ponziPriceInWei = newPrice;\n    PonziPriceChanged(msg.sender, m_ponziPriceInWei);\n  }\n  \n  /**\n  * @dev Owner do disown.\n  */ \n  function disown() public onlyOwner() atState(State.Active) {\n    delete m_owner;\n  }\n  \n  /**\n  * @dev Set state of contract working.\n  * @param newState String representation of new state.\n  */ \n  function setState(string newState) public onlyOwner() checkAccess() {\n    if (keccak256(newState) == keccak256(NOT_ACTIVE_STR)) {\n      m_state = State.NotActive;\n    } else if (keccak256(newState) == keccak256(ACTIVE_STR)) {\n      if (address(m_playersStorage) == address(0)) \n        m_playersStorage = (new PlayersStorage());\n      m_state = State.Active;\n    } else {\n      // if newState not valid string\n      revert();\n    }\n    StateChanged(msg.sender, m_state);\n  }\n\n  /**\n  * @dev Set the PriceSetter address, which has access to set one Ponzi \n  * token price in wei.\n  * @param newPriceSetter The address of new PriceSetter.\n  */\n  function setPriceSetter(address newPriceSetter) \n    public \n    onlyOwner() \n    checkAccess()\n    atState(State.Active) \n  {\n    m_priceSetter = newPriceSetter;\n  }\n  \n  /**\n  * @dev Try create new player. \n  * @param addr Adrress of pretender player.\n  * @param inputAmount Input tokens amount of pretender player.\n  * @param referralAddr Referral address of pretender player.\n  * @return Whether specified player in game or not.\n  */\n  function newPlayer(address addr, uint256 inputAmount, address referralAddr)\n    private\n    returns(bool)\n  {\n    uint256 input = inputAmount;\n    // return false if player already in game or if input < 1000,\n    // because calcOutput() use INTEREST_RATE_DENOMINATOR = 1000.\n    // and input must div by INTEREST_RATE_DENOMINATOR, if \n    // input <1000 then dividing always equal 0.\n    if (m_playersStorage.playerExist(addr) || input < 1000) \n      return false;\n    \n    // check if referralAddr is player\n    if (m_playersStorage.playerExist(referralAddr)) {\n      // transfer 1% input form addr to referralAddr :\n      // newPlayerInput = input * (100-PERCENT_REFERRAL_BOUNTY) %;\n      // referralInput  = (current referral input) + input * PERCENT_REFERRAL_BOUNTY %\n      uint256 newPlayerInput = inputAmount.mul(uint256(100).sub(PERCENT_REFERRAL_BOUNTY)).div(100);\n      uint256 referralInput = m_playersStorage.playerInput(referralAddr);\n      referralInput = referralInput.add(inputAmount.sub(newPlayerInput));\n      \n      // try set input of referralAddr player\n      assert(m_playersStorage.playerSetInput(referralAddr, referralInput));\n      // if success, set input of new player = newPlayerInput\n      input = newPlayerInput;\n    }\n    // try create new player\n    assert(m_playersStorage.newPlayer(addr, input, now));\n    NewPlayer(addr, input, now);\n    return true;\n  }\n  \n  /**\n  * @dev Calc possibly output (compounding interest) for specified input and number of payout.\n  * @param input Input amount.\n  * @param numberOfPayout Number of payout.\n  * @return Possibly output.\n  */\n  function calcOutput(uint256 input, uint256 numberOfPayout) \n    private\n    view\n    returns(uint256 output)\n  {\n    output = input;\n    uint256 counter = numberOfPayout;\n    // calc compound interest \n    while (counter > 0) {\n      output = output.add(output.mul(m_interestRateNumerator).div(INTEREST_RATE_DENOMINATOR));\n      counter = counter.sub(1);\n    }\n    // save tax % on exit; output = output * (100-tax) / 100;\n    output = output.mul(uint256(100).sub(PERCENT_TAX_ON_EXIT)).div(100); \n  }\n  \n  /**\n  * @dev The game go no next level. \n  */\n  function nextLevel() private {\n    m_playersStorage.kill();\n    m_playersStorage = (new PlayersStorage());\n    m_level = m_level.add(1);\n    m_interestRateNumerator = calcInterestRateNumerator(m_level);\n    m_levelStartupTimestamp = now;\n    NewLevel(now, m_level);\n  }\n  \n  /**\n  * @dev Calc numerator of interest rate for specified level. \n  * @param newLevel Specified level.\n  * @return Result numerator.\n  */\n  function calcInterestRateNumerator(uint256 newLevel) \n    internal \n    pure \n    returns(uint256 numerator) \n  {\n    // constant INTEREST_RATE_DENOMINATOR = 1000\n    // numerator we calc\n    // \n    // level 1 : 5% interest rate = 50 / 1000    |\n    // level 2 : 4% interest rate = 40 / 1000    |  first stage\n    //        ...                                |\n    // level 5 : 1% interest rate = 10 / 1000    |\n    \n    // level 6 : 0.9% interest rate = 9 / 1000   |  second stage\n    // level 7 : 0.8% interest rate = 8 / 1000   |\n    //        ...                                |\n    // level 14 : 0.1% interest rate = 1 / 1000  |  \n    \n    // level >14 : 0.1% interest rate = 1 / 1000 |  third stage\n\n    if (newLevel <= 5) {\n      // first stage from 5% to 1%. numerator from 50 to 10\n      numerator = uint256(6).sub(newLevel).mul(10);\n    } else if ( newLevel >= 6 && newLevel <= 14) {\n      // second stage from 0.9% to 0.1%. numerator from 9 to 1\n      numerator = uint256(15).sub(newLevel);\n    } else {\n      // third stage 0.1%. numerator 1\n      numerator = 1;\n    }\n  }\n  \n  /**\n  * @dev Convert Ponzi token to wei.\n  * @param tokensAmount Amout of tokens.\n  * @param tokenPrice One token price in wei.\n  * @return weiAmount Result of convertation. \n  */\n  function ponziToWei(uint256 tokensAmount, uint256 tokenPrice) \n    internal\n    pure\n    returns(uint256 weiAmount)\n  {\n    weiAmount = tokensAmount.mul(tokenPrice); \n  } \n\n  /**\n  * @dev Conver bytes data to address. \n  * @param source Bytes data.\n  * @return Result address of convertation.\n  */\n  function bytesToAddress(bytes source) internal pure returns(address parsedReferer) {\n    assembly {\n      parsedReferer := mload(add(source,0x14))\n    }\n    return parsedReferer;\n  }\n}",
  "bytecode": "606060405234156200001057600080fd5b604051602080620023d983398101604052808051915050600160a060020a03811615156200003d57600080fd5b60038054600160a060020a031916600160a060020a0383811691909117909155600080544260055561010060a860020a03191661010033909316929092029190911760ff191690556001808055620000a39064010000000062001cec620000ad82021704565b6004555062000180565b600060058211620000f657620000ee600a620000d9600685640100000000620017bb6200013382021704565b9064010000000062001cc16200014682021704565b90506200012e565b60068210158015620001095750600e8211155b156200012a57620000ee600f83640100000000620017bb6200013382021704565b5060015b919050565b6000828211156200014057fe5b50900390565b6000808315156200015b576000915062000179565b508282028284828115156200016c57fe5b04146200017557fe5b8091505b5092915050565b61224980620001906000396000f3006060604052600436106100ed5763ffffffff60e060020a6000350416631609e43b811461010a5780631e9bf0da1461012f5780632c09bef7146101425780632e56fd7a146101715780634b114691146101845780634c95baf3146101c957806363791e3c146101dc578063684edea8146101fb57806368794b871461020e5780636fd5ae151461025f5780637c3a00fd146102725780638d0aadca1461029d578063adec3a92146102bc578063c0ee0b8a146102cf578063c19d93fb14610348578063c3082e95146103d2578063e9fad8ee146103f1578063ea3b9ba114610404578063f7c9f1da14610426575b60035433600160a060020a0390811691161461010857600080fd5b005b341561011557600080fd5b61011d61043c565b60405190815260200160405180910390f35b341561013a57600080fd5b610108610466565b341561014d57600080fd5b6101556104c5565b604051600160a060020a03909116815260200160405180910390f35b341561017c57600080fd5b61011d6104d5565b341561018f57600080fd5b6101a3600160a060020a0360043516610548565b604051928352602083019190915215156040808301919091526060909101905180910390f35b34156101d457600080fd5b61011d610619565b34156101e757600080fd5b610108600160a060020a0360043516610643565b341561020657600080fd5b61011d6106f1565b341561021957600080fd5b61010860046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061071995505050505050565b341561026a57600080fd5b61011d610a46565b341561027d57600080fd5b610285610a6e565b60405191825260208201526040908101905180910390f35b34156102a857600080fd5b61011d600160a060020a0360043516610a9c565b34156102c757600080fd5b61011d610c1b565b34156102da57600080fd5b61033460048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610c9595505050505050565b604051901515815260200160405180910390f35b341561035357600080fd5b61035b610d20565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561039757808201518382015260200161037f565b50505050905090810190601f1680156103c45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103dd57600080fd5b61011d600160a060020a0360043516610db6565b34156103fc57600080fd5b610108610fa6565b341561040f57600080fd5b610108600435600160a060020a0360243516611615565b341561043157600080fd5b610108600435611702565b600060018060005460ff16600181111561045257fe5b1461045c57600080fd5b60065491505b5090565b60005433600160a060020a03908116610100909204161461048657600080fd5b60018060005460ff16600181111561049a57fe5b146104a457600080fd5b506000805474ffffffffffffffffffffffffffffffffffffffff0019169055565b600854600160a060020a03165b90565b600060018060005460ff1660018111156104eb57fe5b146104f557600080fd5b60065461050b9062093a8063ffffffff6117a116565b421061051a5760009150610462565b6105424261053662093a806006546117a190919063ffffffff16565b9063ffffffff6117bb16565b91505090565b6000808060018060005460ff16600181111561056057fe5b1461056a57600080fd5b6006546105809062093a8063ffffffff6117a116565b42101561058c57600080fd5b600254600160a060020a0316634b1146918660006040516060015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401606060405180830381600087803b15156105e557600080fd5b6102c65a03f115156105f657600080fd5b505050604051805190602001805190602001805192989197509195509350505050565b600060018060005460ff16600181111561062f57fe5b1461063957600080fd5b6201518091505090565b60005433600160a060020a03908116610100909204161461066357600080fd5b6000805460ff16600181111561067557fe5b1480610698575062bdd800610695600554426117bb90919063ffffffff16565b11155b15156106a357600080fd5b60018060005460ff1660018111156106b757fe5b146106c157600080fd5b506008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600060018060005460ff16600181111561070757fe5b1461071157600080fd5b505060075490565b60005433600160a060020a03908116610100909204161461073957600080fd5b6000805460ff16600181111561074b57fe5b148061076e575062bdd80061076b600554426117bb90919063ffffffff16565b11155b151561077957600080fd5b604080519081016040908152600982527f4e6f7441637469766500000000000000000000000000000000000000000000006020830152518082805190602001908083835b602083106107dc5780518252601f1990920191602091820191016107bd565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020816040518082805190602001908083835b602083106108395780518252601f19909201916020918201910161081a565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902014156108845760008054819060ff19166001825b02179055506109ed565b604080519081016040908152600682527f41637469766500000000000000000000000000000000000000000000000000006020830152518082805190602001908083835b602083106108e75780518252601f1990920191602091820191016108c8565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051908190039020816040518082805190602001908083835b602083106109445780518252601f199092019160209182019101610925565b6001836020036101000a038019825116818451161790925250505091909101925060409150505190819003902014156109e857600254600160a060020a031615156109d557610991611d4f565b604051809103906000f08015156109a757600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555b600080546001919060ff1916828061087a565b600080fd5b600054600160a060020a033316907f20628e08e5aabb4d0033fdf39ce214d8b24483924acea1be5c168206746d5a379060ff1660405180826001811115610a3057fe5b60ff16815260200191505060405180910390a250565b600060018060005460ff166001811115610a5c57fe5b14610a6657600080fd5b505060015490565b60008060018060005460ff166001811115610a8557fe5b14610a8f57600080fd5b5050600454916103e89150565b60008060018060005460ff166001811115610ab357fe5b14610abd57600080fd5b600654610ad39062093a8063ffffffff6117a116565b421015610adf57600080fd5b600254600160a060020a031663fff072418560006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610b3857600080fd5b6102c65a03f11515610b4957600080fd5b505050604051805190501515610b625760009250610c14565b600254600160a060020a03166320e9aac33360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610bbb57600080fd5b6102c65a03f11515610bcc57600080fd5b50505060405180519250610beb90508262057e4063ffffffff6117a116565b4210610bfa5760009250610c14565b610c11426105368462057e4063ffffffff6117a116565b92505b5050919050565b600354600090600160a060020a03166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610c7657600080fd5b6102c65a03f11515610c8757600080fd5b505050604051805191505090565b60008060018060005460ff166001811115610cac57fe5b14610cb657600080fd5b600654610ccc9062093a8063ffffffff6117a116565b421015610cd857600080fd5b60035433600160a060020a03908116911614610cf357600080fd5b610cfc846117cd565b9150610d098686846117dc565b1515610d1457600080fd5b50600195945050505050565b610d28611d5f565b6000805460ff166001811115610d3a57fe5b1415610d7b5760408051908101604052600981527f4e6f744163746976650000000000000000000000000000000000000000000000602082015290506104d2565b60408051908101604052600681527f4163746976650000000000000000000000000000000000000000000000000000602082015290506104d2565b600080808060018060005460ff166001811115610dcf57fe5b14610dd957600080fd5b600654610def9062093a8063ffffffff6117a116565b421015610dfb57600080fd5b600254600160a060020a031663fff072418760006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610e5457600080fd5b6102c65a03f11515610e6557600080fd5b505050604051805190501515610e7e5760009450610f9d565b600254600160a060020a0316632d8aa8558760006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610ed757600080fd5b6102c65a03f11515610ee857600080fd5b5050506040518051600254909550600160a060020a031690506320e9aac38760006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610f4e57600080fd5b6102c65a03f11515610f5f57600080fd5b50505060405180519350610f8e905062015180610f82428663ffffffff6117bb16565b9063ffffffff611b1116565b9150610f9a8483611b28565b94505b50505050919050565b6000808080808060018060005460ff166001811115610fc157fe5b14610fcb57600080fd5b600654610fe19062093a8063ffffffff6117a116565b421015610fed57600080fd5b6002543390600160a060020a031663fff072418260006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561104857600080fd5b6102c65a03f1151561105957600080fd5b50505060405180519050151561106e57600080fd5b600254600160a060020a03166320e9aac33360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156110c757600080fd5b6102c65a03f115156110d857600080fd5b5050506040518051600254909850600160a060020a03169050632d8aa8553360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561113e57600080fd5b6102c65a03f1151561114f57600080fd5b5050506040518051985061116e90508762057e4063ffffffff6117a116565b42101561117a57600080fd5b61119a8861119562015180610f82428c63ffffffff6117bb16565b611b28565b9550600086116111a657fe5b6111b286600754611ba7565b600254909550600160a060020a03166312243b673360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151561120557600080fd5b6102c65a03f1151561121657600080fd5b505050600060075411801561123557508430600160a060020a03163110155b1561129957600160a060020a03308116319450331685156108fc0286604051600060405180830381858888f19350505050151561127157600080fd5b8361128c600160a060020a033016318763ffffffff6117a116565b101561129457fe5b61160b565b6003548690600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156112f457600080fd5b6102c65a03f1151561130557600080fd5b5050506040518051905010151561149e57600354600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561136f57600080fd5b6102c65a03f1151561138057600080fd5b5050506040518051600354909450600160a060020a0316905063a9059cbb338860006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156113ec57600080fd5b6102c65a03f115156113fd57600080fd5b50505060405180519050151561140f57fe5b6003548390611497908890600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561147057600080fd5b6102c65a03f1151561148157600080fd5b505050604051805191905063ffffffff6117a116565b1461129457fe5b600354600160a060020a031663a9059cbb33826370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156114fe57600080fd5b6102c65a03f1151561150f57600080fd5b5050506040518051905060006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561156557600080fd5b6102c65a03f1151561157657600080fd5b50505060405180519050151561158857fe5b600354600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156115e157600080fd5b6102c65a03f115156115f257600080fd5b505050604051805115905061160357fe5b61160b611bc0565b5050505050505050565b60018060005460ff16600181111561162957fe5b1461163357600080fd5b6006546116499062093a8063ffffffff6117a116565b42101561165557600080fd5b600354600160a060020a03166323b872dd33308660006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b15156116c157600080fd5b6102c65a03f115156116d257600080fd5b5050506040518051905015156116e757600080fd5b6116f23384846117dc565b15156116fd57600080fd5b505050565b60018060005460ff16600181111561171657fe5b1461172057600080fd5b60005433600160a060020a03908116610100909204161480611750575060085433600160a060020a039081169116145b151561175b57600080fd5b6007829055600160a060020a0333167f6b0dce5a1ce2b201b407da2782706b423debaea9f5fa72318287dba763154a3b8360405190815260200160405180910390a25050565b6000828201838110156117b057fe5b8091505b5092915050565b6000828211156117c757fe5b50900390565b6000601482015190505b919050565b600254600090839082908190600160a060020a031663fff0724188836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561183d57600080fd5b6102c65a03f1151561184e57600080fd5b505050604051805190508061186457506103e883105b156118725760009350611b07565b600254600160a060020a031663fff072418660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156118cb57600080fd5b6102c65a03f115156118dc57600080fd5b5050506040518051905015611a33576119116064610f8261190482600163ffffffff6117bb16565b899063ffffffff611cc116565b600254909250600160a060020a0316632d8aa8558660006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561196d57600080fd5b6102c65a03f1151561197e57600080fd5b505050604051805191506119aa905061199d878463ffffffff6117bb16565b829063ffffffff6117a116565b600254909150600160a060020a031663a0b1b385868360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611a0c57600080fd5b6102c65a03f11515611a1d57600080fd5b505050604051805190501515611a2f57fe5b8192505b600254600160a060020a0316633dd83fe188854260006040516020015260405160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091526044820152606401602060405180830381600087803b1515611a9b57600080fd5b6102c65a03f11515611aac57600080fd5b505050604051805190501515611abe57fe5b86600160a060020a03167f8be41d7aa22676c5694279dff4dbf1374f54f85135079eca97f3caf7ae7dd6d5844260405191825260208201526040908101905180910390a2600193505b5050509392505050565b6000808284811515611b1f57fe5b04949350505050565b81815b6000811115611b7957611b5f611b526103e8610f8260045486611cc190919063ffffffff16565b839063ffffffff6117a116565b9150611b7281600163ffffffff6117bb16565b9050611b2b565b611b9f6064610f82611b9282600a63ffffffff6117bb16565b859063ffffffff611cc116565b949350505050565b6000611bb9838363ffffffff611cc116565b9392505050565b600254600160a060020a03166341c0e1b56040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515611bff57600080fd5b6102c65a03f11515611c1057600080fd5b505050611c1b611d4f565b604051809103906000f0801515611c3157600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560018054611c6b916117a1565b6001819055611c7990611cec565b6004554260068190556001547f16d15f32051bc9628b984a7b677e93ad6c5c3caffcbca5c97855e392d11f92cd919060405191825260208201526040908101905180910390a1565b600080831515611cd457600091506117b4565b50828202828482811515611ce457fe5b04146117b057fe5b600060058211611d1f57611d18600a611d0c60068563ffffffff6117bb16565b9063ffffffff611cc116565b90506117d7565b60068210158015611d315750600e8211155b15611d4757611d18600f8363ffffffff6117bb16565b506001919050565b6040516104ac80611d7283390190565b6020604051908101604052600081529056006060604052341561000f57600080fd5b60018054600160a060020a03191633600160a060020a0316179055610473806100396000396000f30060606040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166312243b67811461009257806320e9aac3146100b35780632d8aa855146100e45780633dd83fe11461010357806341c0e1b51461013c5780634b1146911461014f578063a0b1b38514610194578063fff07241146101b6575b600080fd5b341561009d57600080fd5b6100b1600160a060020a03600435166101d5565b005b34156100be57600080fd5b6100d2600160a060020a036004351661021f565b60405190815260200160405180910390f35b34156100ef57600080fd5b6100d2600160a060020a036004351661025c565b341561010e57600080fd5b610128600160a060020a0360043516602435604435610296565b604051901515815260200160405180910390f35b341561014757600080fd5b6100b161031b565b341561015a57600080fd5b61016e600160a060020a0360043516610344565b604051928352602083019190915215156040808301919091526060909101905180910390f35b341561019f57600080fd5b610128600160a060020a0360043516602435610397565b34156101c157600080fd5b610128600160a060020a0360043516610407565b60015433600160a060020a039081169116146101f057600080fd5b600160a060020a031660009081526020819052604081208181556001810191909155600201805460ff19169055565b60015460009033600160a060020a0390811691161461023d57600080fd5b50600160a060020a031660009081526020819052604090206001015490565b60015460009033600160a060020a0390811691161461027a57600080fd5b50600160a060020a031660009081526020819052604090205490565b60015460009033600160a060020a039081169116146102b457600080fd5b600160a060020a03841660009081526020819052604090206002015460ff16156102e057506000610314565b50600160a060020a038316600090815260208190526040902082815560018082018390556002909101805460ff1916821790555b9392505050565b60015433600160a060020a0390811691161461033657600080fd5b600154600160a060020a0316ff5b6001546000908190819033600160a060020a0390811691161461036657600080fd5b505050600160a060020a0316600090815260208190526040902080546001820154600290920154909260ff90911690565b60015460009033600160a060020a039081169116146103b557600080fd5b600160a060020a03831660009081526020819052604090206002015460ff1615156103e257506000610401565b50600160a060020a038216600090815260208190526040902081905560015b92915050565b60015460009033600160a060020a0390811691161461042557600080fd5b50600160a060020a031660009081526020819052604090206002015460ff16905600a165627a7a723058208ba14fa9e564a9ad29f6d30fd79e1df23c3b9ccda347fd0171f64d95e324e41d0029a165627a7a72305820a3660abcc90a0f91bb98248e95e824d90d4e7e89139711916edc9b8ae14a81040029000000000000000000000000c2807533832807bf15898778d8a108405e9edfb1",
  "constructorArguments": "000000000000000000000000c2807533832807bf15898778d8a108405e9edfb1"
}