{
  "address": "0x51c1a88a007411ca7af351218ea6448ed8f381c1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DELCToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-27\n*/\n\npragma solidity ^0.4.23;\n\n/**xxp\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20Basic {\n\n  using SafeMath for uint256;\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n  // store tokens\n  mapping(address => uint256) balances;\n  // uint256 public totalSupply;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  \n   /**\n    *batch transfer token for a list of specified addresses\n    * @param _toList The list of addresses to transfer to.\n    * @param _tokensList The list of amount to be transferred.\n    */\n  function batchTransfer(address[] _toList, uint256[] _tokensList) public  returns (bool) {\n      require(_toList.length <= 100);\n      require(_toList.length == _tokensList.length);\n      \n      uint256 sum = 0;\n      for (uint32 index = 0; index < _tokensList.length; index++) {\n          sum = sum.add(_tokensList[index]);\n      }\n\n      // if the sender doenst have enough balance then stop\n      require (balances[msg.sender] >= sum);\n        \n      for (uint32 i = 0; i < _toList.length; i++) {\n          transfer(_toList[i],_tokensList[i]);\n      }\n      return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(burner, _value);\n    }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n/**\n * @title TokenVesting\n * @dev A token holder contract that can release its token balance gradually like a\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n * owner.\n */\ncontract TokenVesting is StandardToken,Ownable {\n  using SafeMath for uint256;\n\n  event AddToVestMap(address vestcount);\n  event DelFromVestMap(address vestcount);\n\n  event Released(address vestcount,uint256 amount);\n  event Revoked(address vestcount);\n\n  struct tokenToVest{\n      bool  exist;\n      uint256  start;\n      uint256  cliff;\n      uint256  duration;\n      uint256  torelease;\n      uint256  released;\n  }\n\n  //key is the account to vest\n  mapping (address=>tokenToVest) vestToMap;\n\n\n  /**\n   * @dev Add one account to the vest Map\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n   * @param _start the time (as Unix time) at which point vesting starts \n   * @param _duration duration in seconds of the period in which the tokens will vest\n   * @param _torelease  delc count to release\n   */\n  function addToVestMap(\n    address _beneficiary,\n    uint256 _start,\n    uint256 _cliff,\n    uint256 _duration,\n    uint256 _torelease\n  ) public onlyOwner{\n    require(_beneficiary != address(0));\n    require(_cliff <= _duration);\n    require(_start > block.timestamp);\n    require(!vestToMap[_beneficiary].exist);\n\n    vestToMap[_beneficiary] = tokenToVest(true,_start,_start.add(_cliff),_duration,\n        _torelease,uint256(0));\n\n    emit AddToVestMap(_beneficiary);\n  }\n\n\n  /**\n   * @dev del One account to the vest Map\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n   */\n  function delFromVestMap(\n    address _beneficiary\n  ) public onlyOwner{\n    require(_beneficiary != address(0));\n    require(vestToMap[_beneficiary].exist);\n\n    delete vestToMap[_beneficiary];\n\n    emit DelFromVestMap(_beneficiary);\n  }\n\n\n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   */\n  function release(address _beneficiary) public {\n\n    tokenToVest storage value = vestToMap[_beneficiary];\n    require(value.exist);\n    uint256 unreleased = releasableAmount(_beneficiary);\n    require(unreleased > 0);\n    require(unreleased + value.released <= value.torelease);\n\n\n    vestToMap[_beneficiary].released = vestToMap[_beneficiary].released.add(unreleased);\n\n    transfer(_beneficiary, unreleased);\n\n    emit Released(_beneficiary,unreleased);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\n   */\n  function releasableAmount(address _beneficiary) public view returns (uint256) {\n    return vestedAmount(_beneficiary).sub(vestToMap[_beneficiary].released);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested.\n   */\n  function vestedAmount(address _beneficiary) public view returns (uint256) {\n\n    tokenToVest storage value = vestToMap[_beneficiary];\n    //uint256 currentBalance = balanceOf(_beneficiary);\n    uint256 totalBalance = value.torelease;\n\n    if (block.timestamp < value.cliff) {\n      return 0;\n    } else if (block.timestamp >= value.start.add(value.duration)) {\n      return totalBalance;\n    } else {\n      return totalBalance.mul(block.timestamp.sub(value.start)).div(value.duration);\n    }\n  }\n}\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is TokenVesting, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n  \n  function batchTransfer(address[] _toList, uint256[] _tokensList) public whenNotPaused returns (bool) {\n      return super.batchTransfer(_toList, _tokensList);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function release(address _beneficiary) public whenNotPaused{\n    super.release(_beneficiary);\n  }\n}\n\n/*\n * @title DELCToken\n */\ncontract DELCToken is BurnableToken, MintableToken, PausableToken {\n  // Public variables of the token\n  string public name;\n  string public symbol;\n  // decimals is the strongly suggested default, avoid changing it\n  uint8 public decimals;\n\n  constructor() public {\n    name = \"DELC Relation Person Token\";\n    symbol = \"DELC\";\n    decimals = 18;\n    totalSupply = 10000000000 * 10 ** uint256(decimals);\n\n    // Allocate initial balance to the owner\n    balances[msg.sender] = totalSupply;\n    \n    emit Transfer(address(0), msg.sender, totalSupply);\n    \n  }\n\n  // transfer balance to owner\n  //function withdrawEther() onlyOwner public {\n  //    owner.transfer(this.balance);\n  //}\n\n  // can accept ether\n  //function() payable public {\n  //}\n}",
  "bytecode": "60806040526003805460a060020a60ff02191690556005805460ff191690553480156200002b57600080fd5b5060038054600160a060020a03191633600160a060020a031617905560408051808201909152601a8082527f44454c432052656c6174696f6e20506572736f6e20546f6b656e00000000000060209092019182526200008d916006916200014d565b506040805180820190915260048082527f44454c43000000000000000000000000000000000000000000000000000000006020909201918252620000d4916007916200014d565b5060088054601260ff19909116179081905560ff16600a0a6402540be40002600081815533600160a060020a031680825260026020908152604080842085905580519485525191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3620001f2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019057805160ff1916838001178555620001c0565b82800160010185558215620001c0579182015b82811115620001c0578251825591602001919060010190620001a3565b50620001ce929150620001d2565b5090565b620001ef91905b80821115620001ce5760008155600101620001d9565b90565b61138a80620002026000396000f30060806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461014257806306fdde031461016b578063095ea7b3146101f55780631726cbc81461021957806318160ddd1461024c578063191655871461026157806323b872dd14610284578063313ce567146102ae578063384711cc146102d95780633f4ba83a146102fa57806340c10f191461030f57806342966c68146103335780635c975abb1461034b57806370a08231146103605780637d64bcb41461038157806384140c40146103965780638456cb59146103b757806388d695b2146103cc5780638da5cb5b1461045a57806395d89b411461048b578063a9059cbb146104a0578063db330794146104c4578063dd62ed3e146104f1578063f2fde38b14610518575b600080fd5b34801561014e57600080fd5b50610157610539565b604080519115158252519081900360200190f35b34801561017757600080fd5b5061018061055a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020157600080fd5b50610157600160a060020a03600435166024356105e8565b34801561022557600080fd5b5061023a600160a060020a036004351661060c565b60408051918252519081900360200190f35b34801561025857600080fd5b5061023a610647565b34801561026d57600080fd5b50610282600160a060020a036004351661064d565b005b34801561029057600080fd5b50610157600160a060020a0360043581169060243516604435610669565b3480156102ba57600080fd5b506102c361068f565b6040805160ff9092168252519081900360200190f35b3480156102e557600080fd5b5061023a600160a060020a0360043516610698565b34801561030657600080fd5b50610282610737565b34801561031b57600080fd5b50610157600160a060020a0360043516602435610798565b34801561033f57600080fd5b506102826004356108b8565b34801561035757600080fd5b50610157610983565b34801561036c57600080fd5b5061023a600160a060020a036004351661098c565b34801561038d57600080fd5b506101576109a7565b3480156103a257600080fd5b50610282600160a060020a0360043516610a29565b3480156103c357600080fd5b50610282610afa565b3480156103d857600080fd5b506040805160206004803580820135838102808601850190965280855261015795369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610b5d9650505050505050565b34801561046657600080fd5b5061046f610b7a565b60408051600160a060020a039092168252519081900360200190f35b34801561049757600080fd5b50610180610b89565b3480156104ac57600080fd5b50610157600160a060020a0360043516602435610be4565b3480156104d057600080fd5b50610282600160a060020a0360043516602435604435606435608435610c01565b3480156104fd57600080fd5b5061023a600160a060020a0360043581169060243516610d46565b34801561052457600080fd5b50610282600160a060020a0360043516610d71565b60035474010000000000000000000000000000000000000000900460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105e05780601f106105b5576101008083540402835291602001916105e0565b820191906000526020600020905b8154815290600101906020018083116105c357829003601f168201915b505050505081565b60055460009060ff16156105fb57600080fd5b6106058383610e0a565b9392505050565b600160a060020a0381166000908152600460205260408120600501546106419061063584610698565b9063ffffffff610e7416565b92915050565b60005481565b60055460ff161561065d57600080fd5b61066681610e86565b50565b60055460009060ff161561067c57600080fd5b610687848484610f7c565b949350505050565b60085460ff1681565b600160a060020a038116600090815260046020819052604082209081015460028201544210156106cb5760009250610730565b600382015460018301546106e49163ffffffff6110fe16565b42106106f257809250610730565b61072d8260030154610721610714856001015442610e7490919063ffffffff16565b849063ffffffff61111816565b9063ffffffff61114316565b92505b5050919050565b60035433600160a060020a0390811691161461075257600080fd5b60055460ff16151561076357600080fd5b6005805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60035460009033600160a060020a039081169116146107b657600080fd5b60035474010000000000000000000000000000000000000000900460ff16156107de57600080fd5b6000546107f1908363ffffffff6110fe16565b6000908155600160a060020a03841681526002602052604090205461081c908363ffffffff6110fe16565b600160a060020a038416600081815260026020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b60008082116108c657600080fd5b600160a060020a0333166000908152600260205260409020548211156108eb57600080fd5b5033600160a060020a0381166000908152600260205260409020546109109083610e74565b600160a060020a0382166000908152600260205260408120919091555461093d908363ffffffff610e7416565b600055604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b60055460ff1681565b600160a060020a031660009081526002602052604090205490565b60035460009033600160a060020a039081169116146109c557600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b60035433600160a060020a03908116911614610a4457600080fd5b600160a060020a0381161515610a5957600080fd5b600160a060020a03811660009081526004602052604090205460ff161515610a8057600080fd5b600160a060020a0381166000818152600460208181526040808420805460ff191681556001810185905560028101859055600381018590559283018490556005909201929092558051928352517f62ae294c9ff1c6a6ecb39cd8f47b15271cf221e133dbc134588581a71d335d809281900390910190a150565b60035433600160a060020a03908116911614610b1557600080fd5b60055460ff1615610b2557600080fd5b6005805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b60055460009060ff1615610b7057600080fd5b610605838361115a565b600354600160a060020a031681565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105e05780601f106105b5576101008083540402835291602001916105e0565b60055460009060ff1615610bf757600080fd5b6106058383611263565b60035433600160a060020a03908116911614610c1c57600080fd5b600160a060020a0385161515610c3157600080fd5b81831115610c3e57600080fd5b428411610c4a57600080fd5b600160a060020a03851660009081526004602052604090205460ff1615610c7057600080fd5b6040805160c0810182526001815260208101869052908101610c98868663ffffffff6110fe16565b81526020808201859052604080830185905260006060938401819052600160a060020a038a168082526004808552918390208651815460ff191690151517815586850151600182015586840151600282015594860151600386015560808601519185019190915560a090940151600590930192909255815192835290517f5a04783d55b06eab842d3b963030894d0cd44caca2e3744eba16dc8f89fe3b5e9281900390910190a15050505050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610d8c57600080fd5b600160a060020a0381161515610da157600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260016020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600082821115610e8057fe5b50900390565b600160a060020a0381166000908152600460205260408120805490919060ff161515610eb157600080fd5b610eba8361060c565b905060008111610ec957600080fd5b6004820154600583015482011115610ee057600080fd5b600160a060020a038316600090815260046020526040902060050154610f0c908263ffffffff6110fe16565b600160a060020a038416600090815260046020526040902060050155610f328382610be4565b5060408051600160a060020a03851681526020810183905281517fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e929181900390910190a1505050565b6000600160a060020a0383161515610f9357600080fd5b600160a060020a038416600090815260026020526040902054821115610fb857600080fd5b600160a060020a0380851660009081526001602090815260408083203390941683529290522054821115610feb57600080fd5b600160a060020a038416600090815260026020526040902054611014908363ffffffff610e7416565b600160a060020a038086166000908152600260205260408082209390935590851681522054611049908363ffffffff6110fe16565b600160a060020a03808516600090815260026020908152604080832094909455878316825260018152838220339093168252919091522054611091908363ffffffff610e7416565b600160a060020a038086166000818152600160209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60008282018381101561110d57fe5b8091505b5092915050565b60008083151561112b5760009150611111565b5082820282848281151561113b57fe5b041461110d57fe5b600080828481151561115157fe5b04949350505050565b600080600080606486511115151561117157600080fd5b845186511461117f57600080fd5b60009250600091505b84518263ffffffff1610156111d2576111c5858363ffffffff168151811015156111ae57fe5b60209081029091010151849063ffffffff6110fe16565b9250600190910190611188565b600160a060020a0333166000908152600260205260409020548311156111f757600080fd5b5060005b85518163ffffffff1610156112575761124e868263ffffffff1681518110151561122157fe5b90602001906020020151868363ffffffff1681518110151561123f57fe5b90602001906020020151610be4565b506001016111fb565b50600195945050505050565b6000600160a060020a038316151561127a57600080fd5b600160a060020a03331660009081526002602052604090205482111561129f57600080fd5b600160a060020a0333166000908152600260205260409020546112c8908363ffffffff610e7416565b600160a060020a0333811660009081526002602052604080822093909355908516815220546112fd908363ffffffff6110fe16565b600160a060020a038085166000818152600260209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001929150505600a165627a7a72305820298d19213a9f143e491c7c383cfadbc2b4550b6ed7dfdf7ff200badb072a33df0029"
}