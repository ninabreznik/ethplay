{
  "address": "0x0d11516d1f19f36154f51e71676670c328387078",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BaseERC20Token",
  "compilerVersion": "v0.5.6+commit.b259423e",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-26\n*/\n\npragma solidity ^0.5.6;\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Capped.sol\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract ERC20Capped is ERC20Mintable {\n    uint256 private _cap;\n\n    constructor (uint256 cap) public {\n        require(cap > 0);\n        _cap = cap;\n    }\n\n    /**\n     * @return the cap for the token minting.\n     */\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n\n    function _mint(address account, uint256 value) internal {\n        require(totalSupply().add(value) <= _cap);\n        super._mint(account, value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: eth-token-recover/contracts/TokenRecover.sol\n\n/**\n * @title TokenRecover\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Allow to recover any ERC20 sent into the contract for error\n */\ncontract TokenRecover is Ownable {\n\n    /**\n     * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n     * @param tokenAddress The token contract address\n     * @param tokenAmount Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n    }\n}\n\n// File: ico-maker/contracts/access/roles/OperatorRole.sol\n\ncontract OperatorRole {\n    using Roles for Roles.Role;\n\n    event OperatorAdded(address indexed account);\n    event OperatorRemoved(address indexed account);\n\n    Roles.Role private _operators;\n\n    constructor() internal {\n        _addOperator(msg.sender);\n    }\n\n    modifier onlyOperator() {\n        require(isOperator(msg.sender));\n        _;\n    }\n\n    function isOperator(address account) public view returns (bool) {\n        return _operators.has(account);\n    }\n\n    function addOperator(address account) public onlyOperator {\n        _addOperator(account);\n    }\n\n    function renounceOperator() public {\n        _removeOperator(msg.sender);\n    }\n\n    function _addOperator(address account) internal {\n        _operators.add(account);\n        emit OperatorAdded(account);\n    }\n\n    function _removeOperator(address account) internal {\n        _operators.remove(account);\n        emit OperatorRemoved(account);\n    }\n}\n\n// File: ico-maker/contracts/token/ERC20/BaseERC20Token.sol\n\n/**\n * @title BaseERC20Token\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of the BaseERC20Token\n */\ncontract BaseERC20Token is ERC20Detailed, ERC20Capped, ERC20Burnable, OperatorRole, TokenRecover {\n\n    event MintFinished();\n    event TransferEnabled();\n\n    // indicates if minting is finished\n    bool private _mintingFinished = false;\n\n    // indicates if transfer is enabled\n    bool private _transferEnabled = false;\n\n    /**\n     * @dev Tokens can be minted only before minting finished\n     */\n    modifier canMint() {\n        require(!_mintingFinished);\n        _;\n    }\n\n    /**\n     * @dev Tokens can be moved only after if transfer enabled or if you are an approved operator\n     */\n    modifier canTransfer(address from) {\n        require(_transferEnabled || isOperator(from));\n        _;\n    }\n\n    /**\n     * @param name Name of the token\n     * @param symbol A symbol to be used as ticker\n     * @param decimals Number of decimals. All the operations are done using the smallest and indivisible token unit\n     * @param cap Maximum number of tokens mintable\n     * @param initialSupply Initial token supply\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 cap,\n        uint256 initialSupply\n    )\n        public\n        ERC20Detailed(name, symbol, decimals)\n        ERC20Capped(cap)\n    {\n        if (initialSupply > 0) {\n            _mint(owner(), initialSupply);\n        }\n    }\n\n    /**\n     * @return if minting is finished or not\n     */\n    function mintingFinished() public view returns (bool) {\n        return _mintingFinished;\n    }\n\n    /**\n     * @return if transfer is enabled or not\n     */\n    function transferEnabled() public view returns (bool) {\n        return _transferEnabled;\n    }\n\n    function mint(address to, uint256 value) public canMint returns (bool) {\n        return super.mint(to, value);\n    }\n\n    function transfer(address to, uint256 value) public canTransfer(msg.sender) returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public canTransfer(from) returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    /**\n     * @dev Function to stop minting new tokens\n     */\n    function finishMinting() public onlyOwner canMint {\n        _mintingFinished = true;\n        _transferEnabled = true;\n\n        emit MintFinished();\n        emit TransferEnabled();\n    }\n\n    /**\n   * @dev Function to enable transfers.\n   */\n    function enableTransfer() public onlyOwner {\n        _transferEnabled = true;\n\n        emit TransferEnabled();\n    }\n\n    /**\n     * @dev remove the `operator` role from address\n     * @param account Address you want to remove role\n     */\n    function removeOperator(address account) public onlyOwner {\n        _removeOperator(account);\n    }\n\n    /**\n     * @dev remove the `minter` role from address\n     * @param account Address you want to remove role\n     */\n    function removeMinter(address account) public onlyOwner {\n        _removeMinter(account);\n    }\n}\n\n// File: contracts/ERC20Token.sol\n\n/**\n * @title ERC20Token\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of a BaseERC20Token\n */\ncontract ERC20Token is BaseERC20Token {\n\n    string public builtOn = \"https://vittominacori.github.io/erc20-generator\";\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 cap,\n        uint256 initialSupply\n    )\n        public\n        BaseERC20Token(name, symbol, decimals, cap, initialSupply)\n    {} // solhint-disable-line no-empty-blocks\n}",
  "bytecode": "608060405260098054600160a01b61ffff02191690553480156200002257600080fd5b506040516200185038038062001850833981018060405260a08110156200004857600080fd5b8101908080516401000000008111156200006157600080fd5b820160208101848111156200007557600080fd5b81516401000000008111828201871017156200009057600080fd5b50509291906020018051640100000000811115620000ad57600080fd5b82016020810184811115620000c157600080fd5b8151640100000000811182820187101715620000dc57600080fd5b50506020808301516040840151606090940151875193965090945091839187918791879162000112916000919086019062000464565b5081516200012890600190602085019062000464565b506002805460ff191660ff929092169190911790555062000152905033620001f4602090811b901c565b600081116200016057600080fd5b600755620001753362000246602090811b901c565b600980546001600160a01b0319163317908190556040516001600160a01b0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38015620001e957620001e9620001dc6200029860201b60201c565b82620002a860201b60201c565b505050505062000506565b6200020f816006620002fb60201b620011f81790919060201c565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b62000261816008620002fb60201b620011f81790919060201c565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b6009546001600160a01b03165b90565b600754620002d482620002c06200035160201b60201c565b6200035760201b62000dcb1790919060201c565b1115620002e057600080fd5b620002f782826200037160201b620012441760201c565b5050565b6001600160a01b0381166200030f57600080fd5b6200032182826200042e60201b60201c565b156200032c57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60055490565b6000828201838110156200036a57600080fd5b9392505050565b6001600160a01b0382166200038557600080fd5b620003a1816005546200035760201b62000dcb1790919060201c565b6005556001600160a01b038216600090815260036020908152604090912054620003d691839062000dcb62000357821b17901c565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60006001600160a01b0382166200044457600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004a757805160ff1916838001178555620004d7565b82800160010185558215620004d7579182015b82811115620004d7578251825591602001919060010190620004ba565b50620004e5929150620004e9565b5090565b620002a591905b80821115620004e55760008155600101620004f0565b61133a80620005166000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806379cc67901161010f5780639870d7fe116100a2578063ac8a584a11610071578063ac8a584a14610597578063dd62ed3e146105bd578063f1b50c1d146105eb578063f2fde38b146105f3576101f0565b80639870d7fe146104f3578063a457c2d714610519578063a9059cbb14610545578063aa271e1a14610571576101f0565b80638f32d59b116100de5780638f32d59b146104b557806395d89b41146104bd578063983b2d56146104c557806398650275146104eb576101f0565b806379cc6790146104315780637d64bcb41461045d5780638980f11f146104655780638da5cb5b14610491576101f0565b8063355274ea116101875780634cd412d5116101565780634cd412d5146103d55780636d70f7ae146103dd57806370a0823114610403578063715018a614610429576101f0565b8063355274ea14610358578063395093511461036057806340c10f191461038c57806342966c68146103b8576101f0565b806323b872dd116101c357806323b872dd146102d45780632ab6f8db1461030a5780633092afd514610314578063313ce5671461033a576101f0565b806305d2035b146101f557806306fdde0314610211578063095ea7b31461028e57806318160ddd146102ba575b600080fd5b6101fd610619565b604080519115158252519081900360200190f35b610219610629565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025357818101518382015260200161023b565b50505050905090810190601f1680156102805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101fd600480360360408110156102a457600080fd5b506001600160a01b0381351690602001356106bf565b6102c2610729565b60408051918252519081900360200190f35b6101fd600480360360608110156102ea57600080fd5b506001600160a01b0381358116916020810135909116906040013561072f565b61031261076d565b005b6103126004803603602081101561032a57600080fd5b50356001600160a01b0316610778565b610342610795565b6040805160ff9092168252519081900360200190f35b6102c261079e565b6101fd6004803603604081101561037657600080fd5b506001600160a01b0381351690602001356107a4565b6101fd600480360360408110156103a257600080fd5b506001600160a01b038135169060200135610840565b610312600480360360208110156103ce57600080fd5b503561086b565b6101fd610875565b6101fd600480360360208110156103f357600080fd5b50356001600160a01b0316610885565b6102c26004803603602081101561041957600080fd5b50356001600160a01b031661089e565b6103126108b9565b6103126004803603604081101561044757600080fd5b506001600160a01b038135169060200135610914565b610312610922565b6103126004803603604081101561047b57600080fd5b506001600160a01b0381351690602001356109d4565b610499610a7c565b604080516001600160a01b039092168252519081900360200190f35b6101fd610a8b565b610219610a9c565b610312600480360360208110156104db57600080fd5b50356001600160a01b0316610afc565b610312610b17565b6103126004803603602081101561050957600080fd5b50356001600160a01b0316610b20565b6101fd6004803603604081101561052f57600080fd5b506001600160a01b038135169060200135610b3b565b6101fd6004803603604081101561055b57600080fd5b506001600160a01b038135169060200135610b84565b6101fd6004803603602081101561058757600080fd5b50356001600160a01b0316610bc0565b610312600480360360208110156105ad57600080fd5b50356001600160a01b0316610bd3565b6102c2600480360360408110156105d357600080fd5b506001600160a01b0381358116916020013516610bed565b610312610c18565b6103126004803603602081101561060957600080fd5b50356001600160a01b0316610c6a565b600954600160a01b900460ff1690565b60008054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106b55780601f1061068a576101008083540402835291602001916106b5565b820191906000526020600020905b81548152906001019060200180831161069857829003601f168201915b5050505050905090565b60006001600160a01b0383166106d457600080fd5b3360008181526004602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293926000805160206112ef833981519152929181900390910190a350600192915050565b60055490565b6009546000908490600160a81b900460ff1680610750575061075081610885565b61075957600080fd5b610764858585610c84565b95945050505050565b61077633610d3b565b565b610780610a8b565b61078957600080fd5b61079281610d83565b50565b60025460ff1690565b60075490565b60006001600160a01b0383166107b957600080fd5b3360009081526004602090815260408083206001600160a01b03871684529091529020546107ed908363ffffffff610dcb16565b3360008181526004602090815260408083206001600160a01b0389168085529083529281902085905580519485525191936000805160206112ef833981519152929081900390910190a350600192915050565b600954600090600160a01b900460ff161561085a57600080fd5b6108648383610ddd565b9392505050565b6107923382610e04565b600954600160a81b900460ff1690565b600061089860088363ffffffff610ead16565b92915050565b6001600160a01b031660009081526003602052604090205490565b6108c1610a8b565b6108ca57600080fd5b6009546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600980546001600160a01b0319169055565b61091e8282610ee2565b5050565b61092a610a8b565b61093357600080fd5b600954600160a01b900460ff161561094a57600080fd5b60098054600160a81b60ff021974ff000000000000000000000000000000000000000019909116600160a01b1716600160a81b1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a16040517f75fce015c314a132947a3e42f6ab79ab8e05397dabf35b4d742dea228bbadc2d90600090a1565b6109dc610a8b565b6109e557600080fd5b816001600160a01b031663a9059cbb6109fc610a7c565b836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610a4c57600080fd5b505af1158015610a60573d6000803e3d6000fd5b505050506040513d6020811015610a7657600080fd5b50505050565b6009546001600160a01b031690565b6009546001600160a01b0316331490565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156106b55780601f1061068a576101008083540402835291602001916106b5565b610b0533610bc0565b610b0e57600080fd5b61079281610f92565b61077633610d83565b610b2933610885565b610b3257600080fd5b61079281610fda565b60006001600160a01b038316610b5057600080fd5b3360009081526004602090815260408083206001600160a01b03871684529091529020546107ed908363ffffffff61102216565b6009546000903390600160a81b900460ff1680610ba55750610ba581610885565b610bae57600080fd5b610bb88484611037565b949350505050565b600061089860068363ffffffff610ead16565b610bdb610a8b565b610be457600080fd5b61079281610d3b565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b610c20610a8b565b610c2957600080fd5b60098054600160a81b60ff021916600160a81b1790556040517f75fce015c314a132947a3e42f6ab79ab8e05397dabf35b4d742dea228bbadc2d90600090a1565b610c72610a8b565b610c7b57600080fd5b61079281611044565b6001600160a01b0383166000908152600460209081526040808320338452909152812054610cb8908363ffffffff61102216565b6001600160a01b0385166000908152600460209081526040808320338452909152902055610ce78484846110b3565b6001600160a01b0384166000818152600460209081526040808320338085529083529281902054815190815290519293926000805160206112ef833981519152929181900390910190a35060019392505050565b610d4c60088263ffffffff61118016565b6040516001600160a01b038216907f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d90600090a250565b610d9460068263ffffffff61118016565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60008282018381101561086457600080fd5b6000610de833610bc0565b610df157600080fd5b610dfb83836111c8565b50600192915050565b6001600160a01b038216610e1757600080fd5b600554610e2a908263ffffffff61102216565b6005556001600160a01b038216600090815260036020526040902054610e56908263ffffffff61102216565b6001600160a01b0383166000818152600360209081526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b60006001600160a01b038216610ec257600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b0382166000908152600460209081526040808320338452909152902054610f16908263ffffffff61102216565b6001600160a01b0383166000908152600460209081526040808320338452909152902055610f448282610e04565b6001600160a01b0382166000818152600460209081526040808320338085529083529281902054815190815290519293926000805160206112ef833981519152929181900390910190a35050565b610fa360068263ffffffff6111f816565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610feb60088263ffffffff6111f816565b6040516001600160a01b038216907fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d90600090a250565b60008282111561103157600080fd5b50900390565b6000610dfb3384846110b3565b6001600160a01b03811661105757600080fd5b6009546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166110c657600080fd5b6001600160a01b0383166000908152600360205260409020546110ef908263ffffffff61102216565b6001600160a01b038085166000908152600360205260408082209390935590841681522054611124908263ffffffff610dcb16565b6001600160a01b0380841660008181526003602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6001600160a01b03811661119357600080fd5b61119d8282610ead565b6111a657600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6007546111e3826111d7610729565b9063ffffffff610dcb16565b11156111ee57600080fd5b61091e8282611244565b6001600160a01b03811661120b57600080fd5b6112158282610ead565b1561121f57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b03821661125757600080fd5b60055461126a908263ffffffff610dcb16565b6005556001600160a01b038216600090815260036020526040902054611296908263ffffffff610dcb16565b6001600160a01b03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3505056fe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a72305820c90ca2d1fa057edf4f2b1182273a314c27b3437d602583aecb83b1f3e0b09e5b002900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000059682f000000000000000000000000000000000000000000000000000000000059682f00000000000000000000000000000000000000000000000000000000000000000954543131546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045454313100000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000059682f000000000000000000000000000000000000000000000000000000000059682f00000000000000000000000000000000000000000000000000000000000000000954543131546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045454313100000000000000000000000000000000000000000000000000000000"
}