{
  "address": "0xcb33c7a2cff4d770fdbff7454cc58825a94f990e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CXToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-13\n*/\n\npragma solidity 0.4.24;\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n* @title Owned\n* @dev The owned contract has an owner address, and provides basic authorization control\n* functions, this simplifies the implementation of \"user permissions\".\n*/\ncontract Owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n/**\n* @title Pausable\n* @dev Base contract which allows children to implement an emergency stop mechanism.\n*/\ncontract Pausable is Owned {\n    bool public paused = false;\n\n    event Pause();\n    event Unpause();\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ninterface tokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n}\n\n/******************************************/\n/*       CSCToken STARTS HERE       */\n/******************************************/\n\ncontract CXToken is Pausable {\n    using SafeMath for uint; // use the library for uint type\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => uint256) public frozenAmount;\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    event Burn(address indexed from, uint256 value);\n\n    event FrozenFunds(address target, bool frozen);\n    event FrozenAmt(address target, uint256 value);\n    event UnfrozenAmt(address target);\n\n    constructor(\n    uint256 initialSupply,\n    string tokenName,\n    string tokenSymbol\n    ) public {\n        // Update total supply with the decimal amount\n        totalSupply = initialSupply * 10 ** uint256(decimals);\n        // Give the creator all initial tokens\n        balanceOf[msg.sender] = totalSupply;\n        // Set the name for display purposes\n        name = tokenName;\n        // Set the symbol for display purposes\n        symbol = tokenSymbol;\n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) whenNotPaused internal {\n        require (_to != 0x0);\n        require(!frozenAccount[_from]);\n        require(!frozenAccount[_to]);\n        uint256 amount = balanceOf[_from].sub(_value);\n        require(frozenAmount[_from] == 0 || amount >= frozenAmount[_from]);\n        balanceOf[_from] = amount;\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n    }\n\n    /**\n    * Transfer tokens\n    *\n    * Send `_value` tokens to `_to` from your account\n    *\n    * @param _to The address of the recipient\n    * @param _value the amount to send\n    */\n    function transfer(address _to, uint256 _value)\n    public\n    returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * Transfer tokens from other address\n    *\n    * Send `_value` tokens to `_to` in behalf of `_from`\n    *\n    * @param _from The address of the sender\n    * @param _to The address of the recipient\n    * @param _value the amount to send\n    */\n    function transferFrom(address _from, address _to, uint256 _value)\n    public\n    returns (bool success) {\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * Set allowance for other address\n    *\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf\n    * Limited usage in case of front running attack, see: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#approve\n    *\n    * @param _spender The address authorized to spend\n    * @param _value the max amount they can spend\n    */\n    function approve(address _spender, uint256 _value) onlyOwner\n    public\n    returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * Set allowance for other address and notify\n    *\n    * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n    *\n    * @param _spender The address authorized to spend\n    * @param _value the max amount they can spend\n    * @param _extraData some extra information to send to the approved contract\n    */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) onlyOwner\n    public\n    returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n    * Destroy tokens\n    *\n    * Remove `_value` tokens from the system irreversibly\n    *\n    * @param _value the amount of money to burn\n    */\n    function burn(uint256 _value)\n    public\n    returns (bool success) {\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n\n    /**\n    * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    *\n    * @param target Address to be frozen\n    * @param freeze either to freeze it or not\n    */\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /**\n    * @notice Freeze `_value` of `target` balance\n    *\n    * @param target Address to be frozen amount\n    * @param _value freeze amount\n    */\n    function freezeAmount(address target, uint256 _value) onlyOwner public {\n        require(_value > 0);\n        frozenAmount[target] = _value;\n        emit FrozenAmt(target, _value);\n    }\n\n    /**\n    * @notice Unfreeze `target` balance.\n    *\n    * @param target Address to be unfrozen\n    */\n    function unfreezeAmount(address target) onlyOwner public {\n        frozenAmount[target] = 0;\n        emit UnfrozenAmt(target);\n    }\n}",
  "bytecode": "608060405260008060146101000a81548160ff0219169083151502179055506012600360006101000a81548160ff021916908360ff1602179055503480156200004757600080fd5b5060405162001aaf38038062001aaf833981018060405281019080805190602001909291908051820192919060200180518201929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900460ff1660ff16600a0a8302600481905550600454600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600290805190602001906200013c9291906200015f565b508060019080519060200190620001559291906200015f565b505050506200020e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001a257805160ff1916838001178555620001d3565b82800160010185558215620001d3579182015b82811115620001d2578251825591602001919060010190620001b5565b5b509050620001e29190620001e6565b5090565b6200020b91905b8082111562000207576000816000905550600101620001ed565b5090565b90565b611891806200021e6000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610122578063095ea7b3146101b257806318160ddd1461021757806323b872dd14610242578063313ce567146102c75780633f4ba83a146102f857806342966c681461030f5780635c975abb1461035457806370a082311461038357806378fd98d1146103da5780638456cb591461042757806386602c841461043e5780638da5cb5b1461049557806395d89b41146104ec578063a9059cbb1461057c578063b414d4b6146105e1578063cae9ca511461063c578063da14e4fa146106e7578063dd62ed3e1461072a578063e724529c146107a1578063f2fde38b146107f0575b600080fd5b34801561012e57600080fd5b50610137610833565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017757808201518184015260208101905061015c565b50505050905090810190601f1680156101a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101be57600080fd5b506101fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108d1565b604051808215151515815260200191505060405180910390f35b34801561022357600080fd5b5061022c610a1e565b6040518082815260200191505060405180910390f35b34801561024e57600080fd5b506102ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a24565b604051808215151515815260200191505060405180910390f35b3480156102d357600080fd5b506102dc610b4b565b604051808260ff1660ff16815260200191505060405180910390f35b34801561030457600080fd5b5061030d610b5e565b005b34801561031b57600080fd5b5061033a60048036038101908080359060200190929190505050610c1c565b604051808215151515815260200191505060405180910390f35b34801561036057600080fd5b50610369610d25565b604051808215151515815260200191505060405180910390f35b34801561038f57600080fd5b506103c4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d38565b6040518082815260200191505060405180910390f35b3480156103e657600080fd5b50610425600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d50565b005b34801561043357600080fd5b5061043c610e6d565b005b34801561044a57600080fd5b5061047f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f2d565b6040518082815260200191505060405180910390f35b3480156104a157600080fd5b506104aa610f45565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f857600080fd5b50610501610f6a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610541578082015181840152602081019050610526565b50505050905090810190601f16801561056e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561058857600080fd5b506105c7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611008565b604051808215151515815260200191505060405180910390f35b3480156105ed57600080fd5b50610622600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061101f565b604051808215151515815260200191505060405180910390f35b34801561064857600080fd5b506106cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061103f565b604051808215151515815260200191505060405180910390f35b3480156106f357600080fd5b50610728600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061121d565b005b34801561073657600080fd5b5061078b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611323565b6040518082815260200191505060405180910390f35b3480156107ad57600080fd5b506107ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611348565b005b3480156107fc57600080fd5b50610831600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061146d565b005b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108c95780601f1061089e576101008083540402835291602001916108c9565b820191906000526020600020905b8154815290600101906020018083116108ac57829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561092e57600080fd5b81600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60045481565b6000610ab582600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150b90919063ffffffff16565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b40848484611524565b600190509392505050565b600360009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb957600080fd5b600060149054906101000a900460ff161515610bd457600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000610c7082600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150b90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cc88260045461150b90919063ffffffff16565b6004819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b600060149054906101000a900460ff1681565b60056020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dab57600080fd5b600081111515610dba57600080fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f4782bc26344da4567fb207ad8c7b78bd51290e79f65c61d744e15fdd6044d3d18282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ec857600080fd5b600060149054906101000a900460ff16151515610ee457600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60086020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110005780601f10610fd557610100808354040283529160200191611000565b820191906000526020600020905b815481529060010190602001808311610fe357829003601f168201915b505050505081565b6000611015338484611524565b6001905092915050565b60076020528060005260406000206000915054906101000a900460ff1681565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561109d57600080fd5b8490506110aa85856108d1565b15611214578073ffffffffffffffffffffffffffffffffffffffff16638f4ffcb1338630876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111a4578082015181840152602081019050611189565b50505050905090810190601f1680156111d15780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156111f357600080fd5b505af1158015611207573d6000803e3d6000fd5b5050505060019150611215565b5b509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561127857600080fd5b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f76518ba6ec1ee6945b411810ab84d5685e68a05a7719e7a7577166a0d4fdc05981604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6006602052816000526040600020602052806000526040600020600091509150505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a357600080fd5b80600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a58282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114c857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561151957fe5b818303905092915050565b60008060149054906101000a900460ff1615151561154157600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415151561156757600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156115c057600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561161957600080fd5b61166b82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150b90919063ffffffff16565b90506000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414806116fa5750600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548110155b151561170557600080fd5b80600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061179b82600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461184990919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b6000818301905082811015151561185c57fe5b809050929150505600a165627a7a723058209fc5f874a947d9710f4c8645f706cd2763a9da2a45cf596d578c8ba3a555dc36002900000000000000000000000000000000000000000000000000000004a817c800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000074358546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024358000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000004a817c800000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000074358546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024358000000000000000000000000000000000000000000000000000000000000"
}