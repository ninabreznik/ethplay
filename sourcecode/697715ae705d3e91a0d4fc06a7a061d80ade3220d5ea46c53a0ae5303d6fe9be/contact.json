{
  "address": "0xa04ebf9bf9994ec776b6e8621b8ac75e32767dcd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Otppay Token",
  "contractName": "OTPPAY",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-12\n*/\n\npragma solidity 0.4.19;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply()public view returns (uint total_Supply);\n  function balanceOf(address who)public view returns (uint256);\n  function allowance(address owner, address spender)public view returns (uint);\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\n  function approve(address spender, uint value)public returns (bool ok);\n  function transfer(address to, uint value)public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\ncontract OTPPAY is ERC20\n{ using SafeMath for uint256;\n    // Name of the token\n    string public constant name = \"OTPPAY\";\n\n    // Symbol of token\n    string public constant symbol = \"OTP\";\n    uint8 public constant decimals = 18;\n    uint public _totalsupply = 1000000000 * 10 ** 18; // 1 billion total supply // muliplies dues to decimal precision\n    address public owner;                    // Owner of this contract\n    uint256 public _price_tokn_PRE = 16000;  // 1 Ether = 16000 coins\n    uint256 public _price_tokn_ICO1;\n    uint256 public _price_tokn_ICO2;\n    uint256 no_of_tokens;\n    uint256 bonus_token;\n    uint256 total_token;\n    uint256 refferaltoken;\n    bool stopped = false;\n    uint256 public pre_startdate;\n    uint256 public ico1_startdate;\n    uint256 public ico2_startdate;\n    uint256 pre_enddate;\n    uint256 ico1_enddate;\n    uint256 ico2_enddate;\n    uint256 maxCap_PRE;\n    uint256 maxCap_ICO1;\n    uint256 maxCap_ICO2;\n    address central_account;\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    \n     enum Stages {\n        NOTSTARTED,\n        PREICO,\n        ICO1,\n        ICO2,\n        PAUSED,\n        ENDED\n    }\n    Stages public stage;\n    \n    modifier atStage(Stages _stage) {\n        if (stage != _stage)\n            // Contract not in expected state\n            revert();\n        _;\n    }\n    \n     modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n        _;\n    }\n    modifier onlycentralAccount {\n        require(msg.sender == central_account);\n        _;\n    }\n\n    function OTPPAY() public\n    {\n        owner = msg.sender;\n        balances[owner] = 319000000 * 10 **18; // 319 million to owner\n        stage = Stages.NOTSTARTED;\n        Transfer(0, owner, balances[owner]);\n    }\n  \n    function () public payable \n    {\n        require(stage != Stages.ENDED);\n        require(!stopped && msg.sender != owner);\n            if( stage == Stages.PREICO && now <= pre_enddate )\n            { \n                no_of_tokens =((msg.value).mul(_price_tokn_PRE));\n                bonus_token = ((no_of_tokens).mul(20)).div(100); // 20 percent bonus token\n                total_token = no_of_tokens + bonus_token;\n                transferTokens(msg.sender,total_token);\n               }\n               \n            \n            else if(stage == Stages.ICO1 && now <= ico1_enddate )\n            {\n             \n               no_of_tokens =((msg.value).mul(_price_tokn_ICO1));\n                bonus_token = ((no_of_tokens).mul(15)).div(100); // 15 percent bonus token\n                total_token = no_of_tokens + bonus_token;\n                transferTokens(msg.sender,total_token);\n            }\n            \n            else if(stage == Stages.ICO2 && now <= ico2_enddate)\n            {\n               no_of_tokens =((msg.value).mul(_price_tokn_ICO2));\n                bonus_token = ((no_of_tokens).mul(10)).div(100); // 10 percent bonus token\n                total_token = no_of_tokens + bonus_token;\n                transferTokens(msg.sender,total_token);\n            }\n        else\n        {\n            revert();\n        }\n    }\n     function start_PREICO() public onlyOwner atStage(Stages.NOTSTARTED)\n      {\n          stage = Stages.PREICO;\n          stopped = false;\n          maxCap_PRE = 72000000 * 10 **18;  // 60(pre) + 12(bonus) = 72 million\n           balances[address(this)] = maxCap_PRE;\n          pre_startdate = now;\n          pre_enddate = now + 30 days;\n          Transfer(0, address(this), balances[address(this)]);\n          }\n      \n      function start_ICO1(uint256 price_tokn_ico1) public onlyOwner atStage(Stages.PREICO)\n      {\n          require(price_tokn_ico1 !=0);\n          require(now > pre_enddate || balances[address(this)] == 0);\n          stage = Stages.ICO1;\n          stopped = false;\n          _price_tokn_ICO1 = price_tokn_ico1;\n          maxCap_ICO1 = 345000000 * 10 **18; // 345 million\n          balances[address(this)] = (balances[address(this)]).add(maxCap_ICO1) ;\n          ico1_startdate = now;\n          ico1_enddate = now + 30 days;\n          Transfer(0, address(this), balances[address(this)]);\n      }\n    \n    function start_ICO2(uint256 price_tokn_ico2) public onlyOwner atStage(Stages.ICO1)\n      {\n          require(price_tokn_ico2 !=0);\n          require(now > ico1_enddate || balances[address(this)] == 0);\n          stage = Stages.ICO2;\n          stopped = false;\n          _price_tokn_ICO2 = price_tokn_ico2;\n          maxCap_ICO2 = 264000000 * 10 **18; // 264 million\n          balances[address(this)] = (balances[address(this)]).add(maxCap_ICO2) ;\n          ico2_startdate = now;     \n          ico2_enddate = now + 30 days;\n          Transfer(0, address(this), balances[address(this)]);\n          \n      }\n    \n     \n    // called by the owner, pause ICO\n    function PauseICO() external onlyOwner\n    {\n        stopped = true;\n       }\n\n    // called by the owner , resumes ICO\n    function ResumeICO() external onlyOwner\n    {\n        stopped = false;\n      }\n   \n     \n     \n      function end_ICO(uint256 _refferaltoken) external onlyOwner atStage(Stages.ICO2)\n     {\n         require(_refferaltoken !=0);\n         require(now > ico2_enddate || balances[address(this)] == 0);\n         stage = Stages.ENDED;\n         refferaltoken = _refferaltoken;\n         balances[address(this)] = (balances[address(this)]).sub(refferaltoken * 10 **18);\n         balances[owner] = (balances[owner]).add(refferaltoken * 10 **18);\n         _totalsupply = (_totalsupply).sub(balances[address(this)]);\n         balances[address(this)] = 0;\n         Transfer(address(this), 0 , balances[address(this)]);\n         Transfer(address(this), owner, refferaltoken);\n         \n     }\n     \n     function set_centralAccount(address central_Acccount) external onlyOwner\n    {\n        central_account = central_Acccount;\n    }\n\n\n\n    // what is the total supply of the ech tokens\n     function totalSupply() public view returns (uint256 total_Supply) {\n         total_Supply = _totalsupply;\n     }\n    \n    // What is the balance of a particular account?\n     function balanceOf(address _owner)public view returns (uint256 balance) {\n         return balances[_owner];\n     }\n    \n    // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool success) {\n     require( _to != 0x0);\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n     balances[_from] = (balances[_from]).sub(_amount);\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n     balances[_to] = (balances[_to]).add(_amount);\n     Transfer(_from, _to, _amount);\n     return true;\n         }\n    \n   // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\n         require( _spender != 0x0);\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n         require( _owner != 0x0 && _spender !=0x0);\n         return allowed[_owner][_spender];\n   }\n\n     // Transfer the balance from owner's account to another account\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\n        require( _to != 0x0);\n        require(balances[msg.sender] >= _amount && _amount >= 0);\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        Transfer(msg.sender, _to, _amount);\n             return true;\n         }\n    \n          // Transfer the balance from owner's account to another account\n    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\n        require( _to != 0x0);       \n        require(balances[address(this)] >= _amount && _amount > 0);\n        balances[address(this)] = (balances[address(this)]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        Transfer(address(this), _to, _amount);\n        return true;\n        }\n    \n    function transferby(address _from,address _to,uint256 _amount) external onlycentralAccount returns(bool success) {\n        require( _to != 0x0); \n        require (balances[_from] >= _amount && _amount > 0);\n        balances[_from] = (balances[_from]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    \n    function drain() external onlyOwner {\n        owner.transfer(this.balance);\n    }\n    \n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"price_tokn_ico2\",\"type\":\"uint256\"}],\"name\":\"start_ICO2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_tokn_PRE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_PREICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pre_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_tokn_ICO1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_price_tokn_ICO2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"central_Acccount\",\"type\":\"address\"}],\"name\":\"set_centralAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refferaltoken\",\"type\":\"uint256\"}],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ResumeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PauseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico1_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ico2_startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferby\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price_tokn_ico1\",\"type\":\"uint256\"}],\"name\":\"start_ICO1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526b033b2e3c9fd0803ce8000000600055613e806002556000600960006101000a81548160ff021916908315150217905550341561004057600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b0107dee0a6b15c1b9f00000060146000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000601660006101000a81548160ff0219169083600581111561011257fe5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60146000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a361265e806101f96000396000f30060606040526004361061015f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303f73f081461040157806306fdde0314610424578063095ea7b3146104b257806318160ddd1461050c57806323b872dd14610535578063274db4d6146105ae578063313ce567146105d7578063405df3381461060657806364e8d6821461061b57806370a08231146106445780638da5cb5b14610691578063951d0332146106e657806395d89b411461070f5780639764053b1461079d57806397668720146107c65780639890220b146107ff578063a393dc4414610814578063a9059cbb1461083d578063abf03e1914610897578063c040e6b8146108ba578063cd7a2c3b146108f1578063cf5ae51614610906578063d44aecb01461091b578063dd62ed3e14610944578063ea9c3bb3146109b0578063eb9763ed146109d9578063ecda305514610a52575b60058081111561016b57fe5b601660009054906101000a900460ff16600581111561018657fe5b1415151561019357600080fd5b600960009054906101000a900460ff161580156101fe5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b151561020957600080fd5b6001600581111561021657fe5b601660009054906101000a900460ff16600581111561023157fe5b1480156102405750600d544211155b156102ae5761025a60025434610a7590919063ffffffff16565b600581905550610289606461027b6014600554610a7590919063ffffffff16565b610ab090919063ffffffff16565b600681905550600654600554016007819055506102a833600754610acb565b506103ff565b600260058111156102bb57fe5b601660009054906101000a900460ff1660058111156102d657fe5b1480156102e55750600e544211155b15610353576102ff60035434610a7590919063ffffffff16565b60058190555061032e6064610320600f600554610a7590919063ffffffff16565b610ab090919063ffffffff16565b6006819055506006546005540160078190555061034d33600754610acb565b506103fe565b6003600581111561036057fe5b601660009054906101000a900460ff16600581111561037b57fe5b14801561038a5750600f544211155b156103f8576103a460045434610a7590919063ffffffff16565b6005819055506103d360646103c5600a600554610a7590919063ffffffff16565b610ab090919063ffffffff16565b600681905550600654600554016007819055506103f233600754610acb565b506103fd565b600080fd5b5b5b005b341561040c57600080fd5b6104226004808035906020019091905050610ce5565b005b341561042f57600080fd5b610437610f75565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047757808201518184015260208101905061045c565b50505050905090810190601f1680156104a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104bd57600080fd5b6104f2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fae565b604051808215151515815260200191505060405180910390f35b341561051757600080fd5b61051f6110c5565b6040518082815260200191505060405180910390f35b341561054057600080fd5b610594600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506110ce565b604051808215151515815260200191505060405180910390f35b34156105b957600080fd5b6105c1611481565b6040518082815260200191505060405180910390f35b34156105e257600080fd5b6105ea611487565b604051808260ff1660ff16815260200191505060405180910390f35b341561061157600080fd5b61061961148c565b005b341561062657600080fd5b61062e611659565b6040518082815260200191505060405180910390f35b341561064f57600080fd5b61067b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061165f565b6040518082815260200191505060405180910390f35b341561069c57600080fd5b6106a46116a8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106f157600080fd5b6106f96116ce565b6040518082815260200191505060405180910390f35b341561071a57600080fd5b6107226116d4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610762578082015181840152602081019050610747565b50505050905090810190601f16801561078f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107a857600080fd5b6107b061170d565b6040518082815260200191505060405180910390f35b34156107d157600080fd5b6107fd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611713565b005b341561080a57600080fd5b6108126117b3565b005b341561081f57600080fd5b61082761188a565b6040518082815260200191505060405180910390f35b341561084857600080fd5b61087d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611890565b604051808215151515815260200191505060405180910390f35b34156108a257600080fd5b6108b86004808035906020019091905050611aab565b005b34156108c557600080fd5b6108cd611f12565b604051808260058111156108dd57fe5b60ff16815260200191505060405180910390f35b34156108fc57600080fd5b610904611f25565b005b341561091157600080fd5b610919611f9e565b005b341561092657600080fd5b61092e612017565b6040518082815260200191505060405180910390f35b341561094f57600080fd5b61099a600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061201d565b6040518082815260200191505060405180910390f35b34156109bb57600080fd5b6109c36120ec565b6040518082815260200191505060405180910390f35b34156109e457600080fd5b610a38600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506120f2565b604051808215151515815260200191505060405180910390f35b3415610a5d57600080fd5b610a73600480803590602001909190505061236a565b005b6000806000841415610a8a5760009150610aa9565b8284029050828482811515610a9b57fe5b04141515610aa557fe5b8091505b5092915050565b6000808284811515610abe57fe5b0490508091505092915050565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610af257600080fd5b81601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610b415750600082115b1515610b4c57600080fd5b610b9e82601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125fb90919063ffffffff16565b601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c3382601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261490919063ffffffff16565b601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d4157600080fd5b6002806005811115610d4f57fe5b601660009054906101000a900460ff166005811115610d6a57fe5b141515610d7657600080fd5b60008214151515610d8657600080fd5b600e54421180610dd557506000601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610de057600080fd5b6003601660006101000a81548160ff02191690836005811115610dff57fe5b02179055506000600960006101000a81548160ff021916908315150217905550816004819055506ada602cad43550e08000000601281905550610e8c601254601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261490919063ffffffff16565b601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600c8190555062278d004201600f819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35050565b6040805190810160405280600681526020017f4f5450504159000000000000000000000000000000000000000000000000000081525081565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610fd557600080fd5b81601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156110f557600080fd5b81601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156111c0575081601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156111cd575060008210155b15156111d857600080fd5b61122a82601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125fb90919063ffffffff16565b601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112fc82601560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125fb90919063ffffffff16565b601560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113ce82601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261490919063ffffffff16565b601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60025481565b601281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114e857600080fd5b60008060058111156114f657fe5b601660009054906101000a900460ff16600581111561151157fe5b14151561151d57600080fd5b6001601660006101000a81548160ff0219169083600581111561153c57fe5b02179055506000600960006101000a81548160ff0219169083151502179055506a3b8e97d229a2d548000000601081905550601054601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600a8190555062278d004201600d819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a350565b600a5481565b6000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6040805190810160405280600381526020017f4f5450000000000000000000000000000000000000000000000000000000000081525081565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561176f57600080fd5b80601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561180f57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561188857600080fd5b565b60005481565b6000808373ffffffffffffffffffffffffffffffffffffffff16141515156118b757600080fd5b81601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611907575060008210155b151561191257600080fd5b61196482601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125fb90919063ffffffff16565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506119f982601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261490919063ffffffff16565b601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b0757600080fd5b6003806005811115611b1557fe5b601660009054906101000a900460ff166005811115611b3057fe5b141515611b3c57600080fd5b60008214151515611b4c57600080fd5b600f54421180611b9b57506000601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515611ba657600080fd5b6005601660006101000a81548160ff02191690836005811115611bc557fe5b021790555081600881905550611c2f670de0b6b3a764000060085402601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125fb90919063ffffffff16565b601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611cf2670de0b6b3a76400006008540260146000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261490919063ffffffff16565b60146000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611dab601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000546125fb90919063ffffffff16565b6000819055506000601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008546040518082815260200191505060405180910390a35050565b601660009054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611f8157600080fd5b6000600960006101000a81548160ff021916908315150217905550565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ffa57600080fd5b6001600960006101000a81548160ff021916908315150217905550565b600b5481565b6000808373ffffffffffffffffffffffffffffffffffffffff161415801561205c575060008273ffffffffffffffffffffffffffffffffffffffff1614155b151561206757600080fd5b601560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600c5481565b6000601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561215057600080fd5b60008373ffffffffffffffffffffffffffffffffffffffff161415151561217657600080fd5b81601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156121c55750600082115b15156121d057600080fd5b61222282601460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546125fb90919063ffffffff16565b601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122b782601460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261490919063ffffffff16565b601460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123c657600080fd5b60018060058111156123d457fe5b601660009054906101000a900460ff1660058111156123ef57fe5b1415156123fb57600080fd5b6000821415151561240b57600080fd5b600d5442118061245a57506000601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561246557600080fd5b6002601660006101000a81548160ff0219169083600581111561248457fe5b02179055506000600960006101000a81548160ff021916908315150217905550816003819055506b011d609779b22c3df9000000601181905550612512601154601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461261490919063ffffffff16565b601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600b8190555062278d004201600e819055503073ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef601460003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35050565b600082821115151561260957fe5b818303905092915050565b600080828401905083811015151561262857fe5b80915050929150505600a165627a7a72305820b288542ab14cd64c791131b7f1c5df1cab993935b300d2c742a0144df7d7e1a70029"
}