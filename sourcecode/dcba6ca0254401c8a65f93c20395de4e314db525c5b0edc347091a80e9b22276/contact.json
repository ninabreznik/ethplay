{
  "address": "0x31fc90151f589a91455bc389fdaedd888e3b1395",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FreezeRule",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-18\n*/\n\n/**\n * FreezeRule.sol\n * Rule to restrict individual addresses from sending or receiving MPS tokens.\n\n * More info about MPS : https://github.com/MtPelerin/MtPelerin-share-MPS\n\n * The unflattened code is available through this github tag:\n * https://github.com/MtPelerin/MtPelerin-protocol/tree/etherscan-verify-batch-1\n\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n\n * @notice All matters regarding the intellectual property of this code \n * @notice or software are subject to Swiss Law without reference to its \n * @notice conflicts of law rules.\n\n * @notice License for each contract is available in the respective file\n * @notice or in the LICENSE.md file.\n * @notice https://github.com/MtPelerin/\n\n * @notice Code by OpenZeppelin is copyrighted and licensed on their repository:\n * @notice https://github.com/OpenZeppelin/openzeppelin-solidity\n */\n\npragma solidity ^0.4.24;\n\n// File: contracts/zeppelin/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts/Authority.sol\n\n/**\n * @title Authority\n * @dev The Authority contract has an authority address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n * Authority means to represent a legal entity that is entitled to specific rights\n *\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n *\n * Error messages\n * AU01: Message sender must be an authority\n */\ncontract Authority is Ownable {\n\n  address authority;\n\n  /**\n   * @dev Throws if called by any account other than the authority.\n   */\n  modifier onlyAuthority {\n    require(msg.sender == authority, \"AU01\");\n    _;\n  }\n\n  /**\n   * @dev return the address associated to the authority\n   */\n  function authorityAddress() public view returns (address) {\n    return authority;\n  }\n\n  /**\n   * @dev rdefines an authority\n   * @param _name the authority name\n   * @param _address the authority address.\n   */\n  function defineAuthority(string _name, address _address) public onlyOwner {\n    emit AuthorityDefined(_name, _address);\n    authority = _address;\n  }\n\n  event AuthorityDefined(\n    string name,\n    address _address\n  );\n}\n\n// File: contracts/interface/IRule.sol\n\n/**\n * @title IRule\n * @dev IRule interface\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n **/\ninterface IRule {\n  function isAddressValid(address _address) external view returns (bool);\n  function isTransferValid(address _from, address _to, uint256 _amount)\n    external view returns (bool);\n}\n\n// File: contracts/rule/FreezeRule.sol\n\n/**\n * @title FreezeRule\n * @dev FreezeRule contract\n * This rule allow a legal authority to enforce a freeze of assets.\n *\n * @author Cyril Lapinte - <[email protected]>\n *\n * @notice Copyright © 2016 - 2018 Mt Pelerin Group SA - All Rights Reserved\n * @notice Please refer to the top of this file for the license.\n *\n * Error messages\n * E01: The address is frozen\n */\ncontract FreezeRule is IRule, Authority {\n\n  mapping(address => uint256) freezer;\n  uint256 allFreezedUntil;\n\n  /**\n   * @dev is rule frozen\n   */\n  function isFrozen() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return allFreezedUntil > now ;\n  }\n\n  /**\n   * @dev is address frozen\n   */\n  function isAddressFrozen(address _address) public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return freezer[_address] > now;\n  }\n\n  /**\n   * @dev allow authority to freeze the address\n   * @param _until allows to auto unlock if the frozen time is known initially.\n   * otherwise infinity can be used\n   */\n  function freezeAddress(address _address, uint256 _until)\n    public onlyAuthority returns (bool)\n  {\n    freezer[_address] = _until;\n    emit Freeze(_address, _until);\n  }\n\n  /**\n   * @dev allow authority to freeze several addresses\n   * @param _until allows to auto unlock if the frozen time is known initially.\n   * otherwise infinity can be used\n   */\n  function freezeManyAddresses(address[] _addresses, uint256 _until)\n    public onlyAuthority returns (bool)\n  {\n    for (uint256 i = 0; i < _addresses.length; i++) {\n      freezer[_addresses[i]] = _until;\n      emit Freeze(_addresses[i], _until);\n    }\n  }\n\n  /**\n   * @dev freeze all until\n   */\n  function freezeAll(uint256 _until) public\n    onlyAuthority returns (bool)\n  {\n    allFreezedUntil = _until;\n    emit FreezeAll(_until);\n  }\n\n  /**\n   * @dev validates an address\n   */\n  function isAddressValid(address _address) public view returns (bool) {\n    return !isFrozen() && !isAddressFrozen(_address);\n  }\n\n   /**\n   * @dev validates a transfer \n   */\n  function isTransferValid(address _from, address _to, uint256 /* _amount */)\n    public view returns (bool)\n  {\n    return !isFrozen() && (!isAddressFrozen(_from) && !isAddressFrozen(_to));\n  }\n\n  event FreezeAll(uint256 until);\n  event Freeze(address _address, uint256 until);\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e3a806100536000396000f3006080604052600436106100ba576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806333eeb147146100bf5780633c695d4e146100ee57806340ecb7f214610145578063715018a6146101ca578063814cb4cc146101e15780638da5cb5b1461026957806395a3e2af146102c0578063b3d5fddb1461031b578063bd9934f114610360578063cf31ff86146103c5578063f2fde38b14610420578063fc21e16714610463575b600080fd5b3480156100cb57600080fd5b506100d46104ec565b604051808215151515815260200191505060405180910390f35b3480156100fa57600080fd5b506101036104f8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561015157600080fd5b506101b0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610522565b604051808215151515815260200191505060405180910390f35b3480156101d657600080fd5b506101df61055a565b005b3480156101ed57600080fd5b5061024f600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019092919050505061065c565b604051808215151515815260200191505060405180910390f35b34801561027557600080fd5b5061027e610823565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102cc57600080fd5b50610301600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610848565b604051808215151515815260200191505060405180910390f35b34801561032757600080fd5b5061034660048036038101908080359060200190929190505050610893565b604051808215151515815260200191505060405180910390f35b34801561036c57600080fd5b506103ab600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061099d565b604051808215151515815260200191505060405180910390f35b3480156103d157600080fd5b50610406600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b19565b604051808215151515815260200191505060405180910390f35b34801561042c57600080fd5b50610461600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b3d565b005b34801561046f57600080fd5b506104ea600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ba4565b005b60004260035411905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061052c6104ec565b158015610551575061053d84610848565b158015610550575061054e83610848565b155b5b90509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105b557600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610724576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f415530310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600090505b835181101561081c578260026000868481518110151561074557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e084828151811015156107bc57fe5b9060200190602002015184604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a18080600101915050610729565b5092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600042600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054119050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561095a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f415530310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b816003819055507f740dfa7d432dcbfaa5357205db85d962bae17db8b70874512b86f773885f8e81826040518082815260200191505060405180910390a1919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f415530310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e08383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a192915050565b6000610b236104ec565b158015610b365750610b3482610848565b155b9050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b9857600080fd5b610ba181610d14565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bff57600080fd5b7fc8c81ac5a1b95ead7b5f71eafa51c9a1436e443c27ba33460885b9debe345abf828260405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610c94578082015181840152602081019050610c79565b50505050905090810190601f168015610cc15780820380516001836020036101000a031916815260200191505b50935050505060405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610d5057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820f00e7e07d1f1fa32a4e999a6f6d689a7dfb17205d3228f1fa5c2de1038290c930029"
}