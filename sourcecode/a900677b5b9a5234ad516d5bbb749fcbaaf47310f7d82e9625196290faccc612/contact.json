{
  "address": "0xdeab3860f4fcc198f4f19513d1b7fbf49e9bc610",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ThorMutual",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\npragma solidity ^0.4.25;\n\n\n/**\n* @title ThorMutual\n* @author Leo\n* @dev Thor Mutual for TRX, WAVES, ADA, ERC20 and so on\n*/\n\n\ncontract Utils {\n\n    uint constant DAILY_PERIOD = 1;\n    uint constant WEEKLY_PERIOD = 7;\n\n    int constant PRICE_DECIMALS = 10 ** 8;\n\n    int constant INT_MAX = 2 ** 255 - 1;\n\n    uint constant UINT_MAX = 2 ** 256 - 1;\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    // /**\n    //  * @dev Allows the current owner to relinquish control of the contract.\n    //  * @notice Renouncing to ownership will leave the contract without an owner.\n    //  * It will not be possible to call the functions with the `onlyOwner`\n    //  * modifier anymore.\n    //  */\n    // function renounceOwnership() public onlyOwner {\n    //     emit OwnershipTransferred(_owner, address(0));\n    //     _owner = address(0);\n    // }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ninterface ThorMutualInterface {\n    function getCurrentPeriod() external view returns(uint);\n    function settle() external;\n}\n\n\n/**\n * @title ThorMutualToken\n * @dev Every ThorMutualToken contract is related with a specific token such as BTC/ETH/EOS/ERC20\n * functions, participants send ETH to this contract to take part in the Thor Mutual activity.\n */\ncontract ThorMutualToken is Ownable, Utils {\n    string public thorMutualToken;\n\n    // total deposit for a specific period\n    mapping(uint => uint) amountOfDailyPeriod;\n\n    // total deposit for a specific period\n    mapping(uint => uint) amountOfWeeklyPeriod;\n\n    // participant's total deposit fund\n    mapping(address => uint) participantAmount;\n\n    // participants\n    address[] participants;\n\n    // deposit info\n    struct DepositInfo {\n        uint blockTimeStamp;\n        uint period;\n        string token;\n        uint amount;\n    }\n\n    // participant's total deposit history\n    //mapping(address => DepositInfo[]) participantsHistory;\n    mapping(address => uint[]) participantsHistoryTime;\n    mapping(address => uint[]) participantsHistoryPeriod;\n    mapping(address => uint[]) participantsHistoryAmount;\n\n    // participant's total deposit fund for a specific period\n    mapping(uint => mapping(address => uint)) participantAmountOfDailyPeriod;\n\n    // participant's total deposit fund for a weekly period\n    mapping(uint => mapping(address => uint)) participantAmountOfWeeklyPeriod;\n\n    // participants for the daily period\n    mapping(uint => address[]) participantsDaily;\n\n    // participants for the weekly period\n    mapping(uint => address[]) participantsWeekly;\n\n    ThorMutualInterface public thorMutualContract;\n\n    constructor(string _thorMutualToken, ThorMutualInterface _thorMutual) public {\n        thorMutualToken = _thorMutualToken;\n        thorMutualContract = _thorMutual;\n    }\n\n    event ThorDepositToken(address sender, uint256 amount);\n    function() external payable {\n        require(msg.value >= 0.001 ether);\n        \n        require(address(thorMutualContract) != address(0));\n        address(thorMutualContract).transfer(msg.value);\n\n        //uint currentPeriod;\n        uint actualPeriod = 0;\n        uint actualPeriodWeek = 0;\n\n        actualPeriod = thorMutualContract.getCurrentPeriod();\n\n        actualPeriodWeek = actualPeriod / WEEKLY_PERIOD;\n\n        if (participantAmount[msg.sender] == 0) {\n            participants.push(msg.sender);\n        }\n\n        if (participantAmountOfDailyPeriod[actualPeriod][msg.sender] == 0) {\n            participantsDaily[actualPeriod].push(msg.sender);\n        }\n\n        if (participantAmountOfWeeklyPeriod[actualPeriodWeek][msg.sender] == 0) {\n            participantsWeekly[actualPeriodWeek].push(msg.sender);\n        }\n\n        participantAmountOfDailyPeriod[actualPeriod][msg.sender] += msg.value;\n\n        participantAmount[msg.sender] += msg.value;\n        \n        participantAmountOfWeeklyPeriod[actualPeriodWeek][msg.sender] += msg.value;\n\n        amountOfDailyPeriod[actualPeriod] += msg.value;\n\n        amountOfWeeklyPeriod[actualPeriodWeek] += msg.value;\n\n        // DepositInfo memory depositInfo = DepositInfo(block.timestamp, actualPeriod, thorMutualToken, msg.value);\n\n        // participantsHistory[msg.sender].push(depositInfo);\n\n        participantsHistoryTime[msg.sender].push(block.timestamp);\n        participantsHistoryPeriod[msg.sender].push(actualPeriod);\n        participantsHistoryAmount[msg.sender].push(msg.value);\n\n        emit ThorDepositToken(msg.sender, msg.value);\n    }\n\n    function setThorMutualContract(ThorMutualInterface _thorMutualContract) public onlyOwner{\n        require(address(_thorMutualContract) != address(0));\n        thorMutualContract = _thorMutualContract;\n    }\n\n    function getThorMutualContract() public view returns(address) {\n        return thorMutualContract;\n    }\n\n    function setThorMutualToken(string _thorMutualToken) public onlyOwner {\n        thorMutualToken = _thorMutualToken;\n    }\n\n    function getDepositDailyAmountofPeriod(uint period) external view returns(uint) {\n        require(period >= 0);\n\n        return amountOfDailyPeriod[period];\n    }\n\n    function getDepositWeeklyAmountofPeriod(uint period) external view returns(uint) {\n        require(period >= 0);\n        uint periodWeekly = period / WEEKLY_PERIOD;\n        return amountOfWeeklyPeriod[periodWeekly];\n    }\n\n    function getParticipantsDaily(uint period) external view returns(address[], uint) {\n        require(period >= 0);\n\n        return (participantsDaily[period], participantsDaily[period].length);\n    }\n\n    function getParticipantsWeekly(uint period) external view returns(address[], uint) {\n        require(period >= 0);\n\n        uint periodWeekly = period / WEEKLY_PERIOD;\n        return (participantsWeekly[periodWeekly], participantsWeekly[period].length);\n    }\n\n    function getParticipantAmountDailyPeriod(uint period, address participant) external view returns(uint) {\n        require(period >= 0);\n\n        return participantAmountOfDailyPeriod[period][participant];\n    }\n\n    function getParticipantAmountWeeklyPeriod(uint period, address participant) external view returns(uint) {\n        require(period >= 0);\n\n        uint periodWeekly = period / WEEKLY_PERIOD;\n        return participantAmountOfWeeklyPeriod[periodWeekly][participant];\n    }\n\n    //function getParticipantHistory(address participant) public view returns(DepositInfo[]) {\n    function getParticipantHistory(address participant) public view returns(uint[], uint[], uint[]) {\n\n        return (participantsHistoryTime[participant], participantsHistoryPeriod[participant], participantsHistoryAmount[participant]);\n        //return participantsHistory[participant];\n    }\n\n    function getSelfBalance() public view returns(uint) {\n        return address(this).balance;\n    }\n\n    function withdraw(address receiver, uint amount) public onlyOwner {\n        require(receiver != address(0));\n\n        receiver.transfer(amount);\n    }\n\n}\n\n\ninterface ThorMutualTokenInterface {\n    function getParticipantsDaily(uint period) external view returns(address[], uint);\n    function getParticipantsWeekly(uint period) external view returns(address[], uint);\n    function getDepositDailyAmountofPeriod(uint period) external view returns(uint);\n    function getDepositWeeklyAmountofPeriod(uint period) external view returns(uint);\n    function getParticipantAmountDailyPeriod(uint period, address participant) external view returns(uint);\n    function getParticipantAmountWeeklyPeriod(uint period, address participant) external view returns(uint);\n}\n\ninterface ThorMutualTokenPriceInterface {\n    function getMaxDailyDrawdown(uint period) external view returns(address);\n    function getMaxWeeklyDrawdown(uint period) external view returns(address);\n}\n\ninterface ThorMutualWeeklyRewardInterface {\n    function settleWeekly(address winner, uint amountWinner) external; \n}\n\ncontract ThorMutual is Ownable, Utils {\n\n    string public thorMutual;\n\n    // period update daily\n    uint internal periodUpdateIndex = 0;\n\n    // initial flag\n    bool internal initialFlag = false;\n\n    ThorMutualTokenPriceInterface public thorMutualTokenPrice;\n\n    ThorMutualTokenInterface[] thorMutualTokens;\n\n    ThorMutualWeeklyReward public thorMutualWeeklyReward;\n\n    mapping(uint => address) winnerDailyTokens;\n    mapping(uint => address) winnerWeeklyTokens;\n\n    mapping(uint => uint) winnerDailyParticipantAmounts;\n    mapping(uint => uint) winnerWeeklyParticipantAmounts;\n\n    mapping(uint => uint) winnerDailyDepositAmounts;\n\n    mapping(uint => address) winnerWeeklyAccounts;\n\n    // daily winners' award\n    mapping(uint => mapping(address => uint)) winnerDailyParticipantInfos;\n\n    // weekly winners' award\n    mapping(uint => mapping(address => uint)) winnerWeeklyParticipantInfos;\n\n    // struct AwardInfo {\n    //     address winner;\n    //     uint awardAmount;\n    // }\n\n    // daily winners' address\n    mapping(uint => address[]) winnerDailyParticipantAddrs;\n    mapping(uint => uint[]) winnerDailyParticipantAwards;\n\n    // weekly winners' info\n    mapping(uint => address) winnerWeeklyParticipantAddrs;\n    mapping(uint => uint) winnerWeeklyParticipantAwards;\n\n    // 0.001 eth = 1 finney \n    // uint internal threadReward = 1 * 10 ** 15;\n\n    // \n    uint internal distributeRatioOfDaily = 70;\n    uint internal distributeRatioOfWeekly = 20;\n    uint internal distributeRatioOfPlatform = 10;\n\n    uint internal ratioWeekly = 5;\n\n    // address of platform\n    address internal rewardAddressOfPlatfrom;\n\n    constructor() public {\n        thorMutual = \"ThorMutual\";\n    }\n\n    event DepositToken(address token, uint256 amount);\n    function() external payable {\n        emit DepositToken(msg.sender, msg.value);\n    }\n\n    function setThorMutualParms(uint _distributeRatioOfDaily, uint _distributeRatioOfWeekly, uint _distributeRatioOfPlatform, uint _ratioWeekly) public onlyOwner {\n        require(_distributeRatioOfDaily + _distributeRatioOfWeekly + _distributeRatioOfPlatform == 100);\n        require(_ratioWeekly >= 0 && _ratioWeekly <= 10);\n\n        distributeRatioOfDaily = _distributeRatioOfDaily;\n        distributeRatioOfWeekly = _distributeRatioOfWeekly;\n        distributeRatioOfPlatform = _distributeRatioOfPlatform;\n        ratioWeekly = _ratioWeekly;\n    }\n\n    function getThorMutualParms() public view returns(uint, uint, uint, uint){\n        return (distributeRatioOfDaily, distributeRatioOfWeekly, distributeRatioOfPlatform, ratioWeekly);\n    }\n\n    /**\n     * @dev set thorMutualTokens' contract address\n     * @param _thorMutualTokens _thorMutualTokens\n     * @param _length _length\n     */\n    function setThorMutualTokenContracts(ThorMutualTokenInterface[] memory _thorMutualTokens, uint _length) public onlyOwner {\n        require(_thorMutualTokens.length == _length);\n\n        for (uint i = 0; i < _length; i++) {\n            thorMutualTokens.push(_thorMutualTokens[i]);\n        }\n    }\n\n    function initialPeriod() internal {\n        periodUpdateIndex++;\n    }\n\n    /**\n     * @dev return periodUpdateIndex, periodActual\n     * @return the index return periodUpdateIndex, periodActual\n     */\n    function getCurrentPeriod() public view returns(uint) {\n        return periodUpdateIndex;\n    }\n\n    function settle() external {\n\n        require(address(thorMutualTokenPrice) == msg.sender);\n\n        if(initialFlag == false) {\n            initialFlag = true;\n\n            initialPeriod();\n\n            return;\n        }\n\n        dailySettle();\n\n        if(periodUpdateIndex % WEEKLY_PERIOD == 0){\n            weeklySettle();\n        }\n\n        periodUpdateIndex++;\n    }\n\n    event ThorMutualRewardOfPlatfrom(address, uint256);\n\n    function dailySettle() internal {\n\n        require(periodUpdateIndex >= 1);\n\n        address maxDrawdownThorMutualTokenAddress;\n\n        maxDrawdownThorMutualTokenAddress = thorMutualTokenPrice.getMaxDailyDrawdown(periodUpdateIndex);\n\n        if (maxDrawdownThorMutualTokenAddress == address(0)) {\n            return;\n        }\n\n        winnerDailyTokens[periodUpdateIndex-1] = maxDrawdownThorMutualTokenAddress;\n\n        ThorMutualTokenInterface maxDrawdownThorMutualToken = ThorMutualTokenInterface(maxDrawdownThorMutualTokenAddress);\n\n        address[] memory winners;\n        (winners, ) = maxDrawdownThorMutualToken.getParticipantsDaily(periodUpdateIndex - 1);\n        uint winnersLength = winners.length;\n\n        winnerDailyParticipantAmounts[periodUpdateIndex-1] = winnersLength;\n\n        uint amountOfPeriod = 0;\n        uint i = 0;\n        for (i = 0; i < thorMutualTokens.length; i++) {\n            amountOfPeriod += thorMutualTokens[i].getDepositDailyAmountofPeriod(periodUpdateIndex - 1);\n        }\n\n        winnerDailyDepositAmounts[periodUpdateIndex-1] = amountOfPeriod;\n\n        uint rewardAmountOfDaily = amountOfPeriod * distributeRatioOfDaily / 100;\n        uint rewardAmountOfPlatform = amountOfPeriod * distributeRatioOfPlatform / 100;\n        uint rewardAmountOfWeekly = amountOfPeriod - rewardAmountOfDaily - rewardAmountOfPlatform;\n        \n        uint amountOfTokenAndPeriod = maxDrawdownThorMutualToken.getDepositDailyAmountofPeriod(periodUpdateIndex - 1);\n\n        for (i = 0; i < winnersLength; i++) {\n            address rewardParticipant = winners[i];\n\n            uint depositAmountOfParticipant = maxDrawdownThorMutualToken.getParticipantAmountDailyPeriod(periodUpdateIndex - 1, rewardParticipant);\n\n            uint rewardAmountOfParticipant = depositAmountOfParticipant * rewardAmountOfDaily / amountOfTokenAndPeriod;\n\n            // if (rewardAmountOfParticipant > threadReward) {\n            rewardParticipant.transfer(rewardAmountOfParticipant);\n\n            // record winner's info\n            winnerDailyParticipantInfos[periodUpdateIndex - 1][rewardParticipant] = rewardAmountOfParticipant;\n\n            winnerDailyParticipantAddrs[periodUpdateIndex - 1].push(rewardParticipant);\n            winnerDailyParticipantAwards[periodUpdateIndex - 1].push(rewardAmountOfParticipant);\n\n            // }\n        }\n\n        rewardAddressOfPlatfrom.transfer(rewardAmountOfPlatform);\n        emit ThorMutualRewardOfPlatfrom(rewardAddressOfPlatfrom, rewardAmountOfPlatform);\n\n        address(thorMutualWeeklyReward).transfer(rewardAmountOfWeekly);\n\n    }\n\n    function weeklySettle() internal {\n\n        require(periodUpdateIndex >= WEEKLY_PERIOD);\n\n        address maxDrawdownThorMutualTokenAddress;\n\n        maxDrawdownThorMutualTokenAddress = thorMutualTokenPrice.getMaxWeeklyDrawdown(periodUpdateIndex);\n\n        if (maxDrawdownThorMutualTokenAddress == address(0)) {\n            return;\n        }\n\n        uint weeklyPeriod = (periodUpdateIndex - 1) / WEEKLY_PERIOD;\n\n        winnerWeeklyTokens[weeklyPeriod] = maxDrawdownThorMutualTokenAddress;\n\n        ThorMutualTokenInterface maxDrawdownThorMutualToken = ThorMutualTokenInterface(maxDrawdownThorMutualTokenAddress);\n\n        address[] memory participants;\n        (participants, ) = maxDrawdownThorMutualToken.getParticipantsWeekly(periodUpdateIndex - 1);\n        uint winnersLength = participants.length;\n\n        winnerWeeklyParticipantAmounts[weeklyPeriod] = winnersLength;\n\n        //address[] winners;\n        address winner;\n        uint maxDeposit = 0;\n\n        for (uint i = 0; i < winnersLength; i++) {\n            address rewardParticipant = participants[i];\n\n            uint depositAmountOfParticipant = maxDrawdownThorMutualToken.getParticipantAmountWeeklyPeriod(periodUpdateIndex - 1, rewardParticipant);\n\n            if(depositAmountOfParticipant > maxDeposit) {\n                winner = rewardParticipant;\n                maxDeposit = depositAmountOfParticipant;\n            }\n\n        }\n\n        winnerWeeklyAccounts[weeklyPeriod] = winner;\n\n        uint thorMutualWeeklyRewardFund = address(thorMutualWeeklyReward).balance;\n\n        uint winnerWeeklyAward = thorMutualWeeklyRewardFund * ratioWeekly / 10;\n\n        thorMutualWeeklyReward.settleWeekly(winner, winnerWeeklyAward);\n\n        // record winner's info\n\n        winnerWeeklyParticipantInfos[weeklyPeriod][winner] = winnerWeeklyAward;\n\n        winnerWeeklyParticipantAddrs[weeklyPeriod] = winner;\n        winnerWeeklyParticipantAwards[weeklyPeriod] = winnerWeeklyAward;\n\n    }\n\n    function getDailyWinnerTokenInfo(uint period) public view returns(address, uint, uint, address[], uint[]) {\n        require(period >= 0 && period < periodUpdateIndex);\n\n        address token = winnerDailyTokens[period];\n\n        uint participantAmount = winnerDailyParticipantAmounts[period];\n\n        uint depositAmount = winnerDailyDepositAmounts[period];\n\n        return (token, participantAmount, depositAmount, winnerDailyParticipantAddrs[period], winnerDailyParticipantAwards[period]);\n    }\n\n    function getWeeklyWinnerTokenInfo(uint period) public view returns(address, uint, address, address, uint) {\n        require(period >= 0 && period < periodUpdateIndex);\n\n        uint actualPeriod = period / WEEKLY_PERIOD;\n\n        address token = winnerWeeklyTokens[actualPeriod];\n\n        uint participantAmount = winnerWeeklyParticipantAmounts[actualPeriod];\n\n        address winner = winnerWeeklyAccounts[actualPeriod];\n\n        return (token, participantAmount, winner, winnerWeeklyParticipantAddrs[actualPeriod], winnerWeeklyParticipantAwards[actualPeriod]);\n    }\n\n    function getDailyAndWeeklyWinnerInfo(uint period, address winner) public view returns(uint, uint){\n        require(period >= 0 && period < periodUpdateIndex);\n\n        uint periodWeekly = period / WEEKLY_PERIOD;\n\n        return (winnerDailyParticipantInfos[period][winner], winnerWeeklyParticipantInfos[periodWeekly][winner]);\n    }\n\n    /**\n     * @dev set thorMutualTokenPrice's contract address\n     * @param _thorMutualTokenPrice _thorMutualTokenPrice\n     */\n    function setThorMutualTokenPrice(ThorMutualTokenPriceInterface _thorMutualTokenPrice) public onlyOwner {\n        require(address(_thorMutualTokenPrice) != address(0));\n        thorMutualTokenPrice = _thorMutualTokenPrice;\n    }\n\n    function setRewardAddressOfPlatfrom(address _rewardAddressOfPlatfrom) public onlyOwner {\n        require(_rewardAddressOfPlatfrom != address(0));\n        rewardAddressOfPlatfrom = _rewardAddressOfPlatfrom;\n    }\n\n    function setThorMutualWeeklyReward(address _thorMutualWeeklyReward) public onlyOwner {\n        require(_thorMutualWeeklyReward != address(0));\n        thorMutualWeeklyReward = ThorMutualWeeklyReward(_thorMutualWeeklyReward);\n    }\n\n    function getSelfBalance() public view returns(uint) {\n        return address(this).balance;\n    }\n\n    function withdraw(address receiver, uint amount) public onlyOwner {\n        require(receiver != address(0));\n\n        receiver.transfer(amount);\n    }\n\n}\n\ncontract ThorMutualWeeklyReward is Ownable, Utils {\n\n    string public thorMutualWeeklyReward;\n\n    address public thorMutual;\n\n    constructor(ThorMutualInterface _thorMutual) public {\n        thorMutualWeeklyReward = \"ThorMutualWeeklyReward\";\n        thorMutual = address(_thorMutual);\n    }\n\n    event ThorMutualWeeklyRewardDeposit(uint256 amount);\n    function() external payable {\n        emit ThorMutualWeeklyRewardDeposit(msg.value);\n    }\n\n    event SettleWeekly(address winner, uint256 amount);\n    function settleWeekly(address winner, uint amountWinner) external {\n\n        require(msg.sender == thorMutual);\n        require(winner != address(0));\n\n        winner.transfer(amountWinner);\n\n        emit SettleWeekly(winner, amountWinner);\n    }\n\n    function setThorMutualContract(address _thorMutualContract) public onlyOwner{\n        require(_thorMutualContract != address(0));\n        thorMutual = _thorMutualContract;\n    }\n\n    function getSelfBalance() public view returns(uint) {\n        return address(this).balance;\n    }\n\n    function withdraw(address receiver, uint amount) public onlyOwner {\n        require(receiver != address(0));\n\n        receiver.transfer(amount);\n    }\n\n}\n\ncontract ThorMutualTokenPrice is Ownable, Utils {\n\n    string public thorMutualTokenPrice;\n\n    address[] internal tokensIncluded;\n    mapping(address => bool) isTokenIncluded;\n\n    ThorMutualInterface public thorMutualContract;\n\n    struct TokenPrice{\n        uint blockTimeStamp;\n        uint price;\n    }\n    // mapping(address => TokenPrice) tokensPrice;\n\n    mapping(uint => mapping(address => TokenPrice)) dailyTokensPrices;\n\n    constructor(ThorMutualInterface _thorMutual) public {\n        thorMutualTokenPrice = \"ThorMutualTokenPrice\";\n        thorMutualContract = _thorMutual;\n    }\n\n    mapping(uint => int[]) dailyTokensPricesDrawdown;\n    mapping(uint => int[]) weeklyTokensPricesDrawdown;\n\n    mapping(uint =>ThorMutualTokenInterface) dailyTokenWinners;\n    mapping(uint =>ThorMutualTokenInterface) weeklyTokenWinners;\n\n    /**\n     * @dev return all tokens included\n     * @return string[], a list of tokens\n     */\n    function getTokensIncluded() public view returns(address[]) {\n        return tokensIncluded;\n    }\n\n    function addTokensAndPrices(address[] _newTokens, uint[] _prices, uint _length) public onlyOwner {\n        require(_length == _newTokens.length);\n        require(_length == _prices.length);\n\n        uint actualPeriod;\n        actualPeriod = thorMutualContract.getCurrentPeriod();\n\n        for (uint i = 0; i < _length; i++) {\n            require(!isTokenIncluded[_newTokens[i]]);\n            isTokenIncluded[_newTokens[i]] = true;\n            tokensIncluded.push(_newTokens[i]);\n            TokenPrice memory tokenPrice = TokenPrice(block.timestamp, _prices[i]);\n            dailyTokensPrices[actualPeriod][_newTokens[i]] = tokenPrice;\n        }\n    }\n\n    /**\n     * @dev set prices of a list of tokens\n     * @param _tokens a list of tokens\n     * @param _prices a list of prices, actual price * (10 ** 8)\n     */\n    function setTokensPrice(address[] memory _tokens, uint[] memory _prices, bool isSettle) public onlyOwner {\n\n        uint length = _tokens.length;\n\n        uint actualPeriod;\n        actualPeriod = thorMutualContract.getCurrentPeriod();\n\n        require(length == _prices.length);\n        require(length == tokensIncluded.length);\n\n        for (uint i = 0; i < length; i++) {\n            address token = _tokens[i];\n            require(isTokenIncluded[token]);\n            TokenPrice memory tokenPrice = TokenPrice(block.timestamp, _prices[i]);\n            // tokensPrice[token] = tokenPrice;\n\n            dailyTokensPrices[actualPeriod][token] = tokenPrice;\n        }\n\n        // calculate tokens' maxDrawdown\n        if (isSettle == true && actualPeriod >= 1) {\n            //thorMutualContract.settle();\n            calculateMaxDrawdown(actualPeriod);\n        }\n    }\n\n    function calculateMaxDrawdown(uint period) internal {\n        ThorMutualTokenInterface dailyWinnerToken;\n        ThorMutualTokenInterface weeklyWinnerToken;\n        (dailyWinnerToken,) = _getMaxDrawdown(DAILY_PERIOD, period);\n\n        if(period % WEEKLY_PERIOD == 0) {\n            (weeklyWinnerToken,) = _getMaxDrawdown(WEEKLY_PERIOD, period);\n            weeklyTokenWinners[period / WEEKLY_PERIOD] = weeklyWinnerToken;\n        }\n\n        dailyTokenWinners[period] = dailyWinnerToken;\n        \n    }\n\n    function settle() public onlyOwner {\n        require(address(thorMutualContract) != address(0));\n        thorMutualContract.settle();\n    }\n\n    /**\n     * @dev get prices of a list of tokens\n     * @param period period\n     */\n\n    function getTokenPriceOfPeriod(address token, uint period) public view returns(uint) {\n        require(isTokenIncluded[token]);\n        require(period >= 0);\n\n        return dailyTokensPrices[period][token].price;\n\n    }\n\n    function setThorMutualContract(ThorMutualInterface _thorMutualContract) public onlyOwner {\n        require(address(_thorMutualContract) != address(0));\n        thorMutualContract = _thorMutualContract;\n    }\n\n    /**\n     * @dev return the index of token with daily maximum drawdown\n     * @return the index of token with maximum drawdown\n     */\n    function getMaxDailyDrawdown(uint period) external view returns(ThorMutualTokenInterface) {\n\n        return dailyTokenWinners[period];\n    }\n\n    /**\n     * @dev return the index of token with weekly maximum drawdown\n     * @return the index of token with maximum drawdown\n     */\n    function getMaxWeeklyDrawdown(uint period) external view returns(ThorMutualTokenInterface) {\n\n        return weeklyTokenWinners[period / WEEKLY_PERIOD];\n    }\n\n    /**\n     * @dev return the index of token with maximum drawdown\n     * @param period period\n     * @return the index of token with maximum drawdown\n     */\n    function _getMaxDrawdown(uint period, uint actualPeriod) internal returns(ThorMutualTokenInterface, int) {\n\n        uint currentPeriod = actualPeriod;\n        uint oldPeriod = (actualPeriod - period);\n\n        uint periodDrawdownMaxIndex = UINT_MAX;\n\n        uint settlePeriod;\n\n        int maxDrawdown = INT_MAX;\n        // address[] memory particpantsOfToken;\n        uint amountOfParticipant;\n\n        for (uint i = 0; i < tokensIncluded.length; i++) {\n            address token = tokensIncluded[i];\n\n            \n            if (period == DAILY_PERIOD) {\n                settlePeriod = currentPeriod - 1;\n                (, amountOfParticipant) = ThorMutualTokenInterface(token).getParticipantsDaily(settlePeriod);\n            } else if (period == WEEKLY_PERIOD) {\n                settlePeriod = (currentPeriod - 1) / WEEKLY_PERIOD;\n                (, amountOfParticipant) = ThorMutualTokenInterface(token).getParticipantsWeekly(settlePeriod);\n            }\n\n            int currentPeriodPrice = int(dailyTokensPrices[currentPeriod][token].price);\n            int oldPeriodPrice = int(dailyTokensPrices[oldPeriod][token].price);\n\n            int drawdown = (currentPeriodPrice - oldPeriodPrice) * PRICE_DECIMALS / oldPeriodPrice;\n\n            if (amountOfParticipant > 0) {\n                if (drawdown < maxDrawdown) {\n                    maxDrawdown = drawdown;\n                    periodDrawdownMaxIndex = i;\n                }\n            }\n\n            // daily drawdown data\n            if (period == DAILY_PERIOD) {\n                settlePeriod = currentPeriod - 1;\n                dailyTokensPricesDrawdown[settlePeriod].push(drawdown);\n            } else if(period == WEEKLY_PERIOD) {\n                settlePeriod = (currentPeriod - 1) / WEEKLY_PERIOD;\n                weeklyTokensPricesDrawdown[settlePeriod].push(drawdown);\n            }\n\n        }\n\n        if (periodDrawdownMaxIndex == UINT_MAX) {\n            return (ThorMutualTokenInterface(address(0)), maxDrawdown);\n        }\n\n        return (ThorMutualTokenInterface(tokensIncluded[periodDrawdownMaxIndex]), maxDrawdown);\n    }\n    \n    function getDailyAndWeeklyPriceDrawdownInfo(uint period) public view returns(address[], int[], int[]) {\n        uint periodWeekly = period / WEEKLY_PERIOD;\n        return (tokensIncluded, dailyTokensPricesDrawdown[period], weeklyTokensPricesDrawdown[periodWeekly]);\n    }\n\n    function withdraw(address receiver, uint amount) public onlyOwner {\n        require(receiver != address(0));\n\n        receiver.transfer(amount);\n    }\n\n}",
  "bytecode": "608060405260006002556000600360006101000a81548160ff02191690831515021790555060466012556014601355600a60145560056015553480156200004557600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36040805190810160405280600a81526020017f54686f724d757475616c00000000000000000000000000000000000000000000815250600190805190602001906200014f92919062000156565b5062000205565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019957805160ff1916838001178555620001ca565b82800160010185558215620001ca579182015b82811115620001c9578251825591602001919060010190620001ac565b5b509050620001d99190620001dd565b5090565b6200020291905b80821115620001fe576000816000905550600101620001e4565b5090565b90565b61225780620002156000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063048a5fed14610174578063086146d21461019f57806311da60b4146101ca578063491b3e34146101e15780635879875114610224578063587cf317146102b45780636386faf3146103245780636f8a5599146103675780638993e592146103b25780638da5cb5b146104935780638f32d59b146104ea5780639cb7dac0146105195780639e25cf2814610570578063c7624411146105c7578063cf818cfe14610607578063d895001e1461064a578063ec7987a2146106b2578063f2fde38b146107bd578063f3fef3a314610800575b7f2d0c0a8842b9944ece1495eb61121621b5e36bd6af3bba0318c695f525aef79f3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1005b34801561018057600080fd5b5061018961084d565b6040518082815260200191505060405180910390f35b3480156101ab57600080fd5b506101b461086c565b6040518082815260200191505060405180910390f35b3480156101d657600080fd5b506101df610876565b005b3480156101ed57600080fd5b50610222600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610953565b005b34801561023057600080fd5b506102396109e6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561027957808201518184015260208101905061025e565b50505050905090810190601f1680156102a65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102c057600080fd5b506103226004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050610a84565b005b34801561033057600080fd5b50610365600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b44565b005b34801561037357600080fd5b506103b060048036038101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610bd7565b005b3480156103be57600080fd5b506103dd60048036038101908080359060200190929190505050610c3c565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019550505050505060405180910390f35b34801561049f57600080fd5b506104a8610d59565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f657600080fd5b506104ff610d82565b604051808215151515815260200191505060405180910390f35b34801561052557600080fd5b5061052e610dd9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057c57600080fd5b50610585610dff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d357600080fd5b506105dc610e25565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b34801561061357600080fd5b50610648600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e45565b005b34801561065657600080fd5b5061069560048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ed8565b604051808381526020018281526020019250505060405180910390f35b3480156106be57600080fd5b506106dd60048036038101908080359060200190929190505050610fb6565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610762578082015181840152602081019050610747565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156107a4578082015181840152602081019050610789565b5050505090500197505050505050505060405180910390f35b3480156107c957600080fd5b506107fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061115a565b005b34801561080c57600080fd5b5061084b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611179565b005b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600254905090565b3373ffffffffffffffffffffffffffffffffffffffff16600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156108d257600080fd5b60001515600360009054906101000a900460ff1615151415610916576001600360006101000a81548160ff021916908315150217905550610911611213565b610951565b61091e611227565b6000600760025481151561092e57fe5b06141561093e5761093d611aee565b5b6002600081548092919060010191905055505b565b61095b610d82565b151561096657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156109a257600080fd5b80601660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a7c5780601f10610a5157610100808354040283529160200191610a7c565b820191906000526020600020905b815481529060010190602001808311610a5f57829003601f168201915b505050505081565b6000610a8e610d82565b1515610a9957600080fd5b818351141515610aa857600080fd5b600090505b81811015610b3f5760048382815181101515610ac557fe5b9060200190602002015190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080600101915050610aad565b505050565b610b4c610d82565b1515610b5757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b9357600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610bdf610d82565b1515610bea57600080fd5b60648284860101141515610bfd57600080fd5b60008110158015610c0f5750600a8111155b1515610c1a57600080fd5b8360128190555082601381905550816014819055508060158190555050505050565b6000806000806000806000806000808a10158015610c5b57506002548a105b1515610c6657600080fd5b60078a811515610c7257fe5b0493506007600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925060096000858152602001908152602001600020549150600b600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508282826010600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166011600089815260200190815260200160002054985098509850985098505050505091939590929450565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080601254601354601454601554935093509350935090919293565b610e4d610d82565b1515610e5857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610e9457600080fd5b80600360016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000808510158015610eee575060025485105b1515610ef957600080fd5b600785811515610f0557fe5b049050600c600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600d600083815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492509250509250929050565b60008060006060806000806000808910158015610fd4575060025489105b1515610fdf57600080fd5b600660008a815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600860008a8152602001908152602001600020549150600a60008a8152602001908152602001600020549050828282600e60008d8152602001908152602001600020600f60008e8152602001908152602001600020818054806020026020016040519081016040528092919081815260200182805480156110eb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116110a1575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561113d57602002820191906000526020600020905b815481526020019060010190808311611129575b505050505090509750975097509750975050505091939590929450565b611162610d82565b151561116d57600080fd5b61117681612131565b50565b611181610d82565b151561118c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156111c857600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561120e573d6000803e3d6000fd5b505050565b600260008154809291906001019190505550565b600080606060008060008060008060008060008060016002541015151561124d57600080fd5b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166346dfe4f96002546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156112e057600080fd5b505af11580156112f4573d6000803e3d6000fd5b505050506040513d602081101561130a57600080fd5b81019080805190602001909291905050509c50600073ffffffffffffffffffffffffffffffffffffffff168d73ffffffffffffffffffffffffffffffffffffffff16141561135757611adf565b8c60066000600160025403815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508c9b508b73ffffffffffffffffffffffffffffffffffffffff1663f3b0a5e16001600254036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561142557600080fd5b505af1158015611439573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250604081101561146357600080fd5b81019080805164010000000081111561147b57600080fd5b8281019050602081018481111561149157600080fd5b81518560208202830111640100000000821117156114ae57600080fd5b50509291906020018051906020019092919050505050809b50508a51995089600860006001600254038152602001908152602001600020819055506000985060009750600097505b6004805490508810156115fc5760048881548110151561151257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166384464a9f6001600254036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156115b057600080fd5b505af11580156115c4573d6000803e3d6000fd5b505050506040513d60208110156115da57600080fd5b81019080805190602001909291905050508901985087806001019850506114f6565b88600a600060016002540381526020019081526020016000208190555060646012548a0281151561162957fe5b04965060646014548a0281151561163c57fe5b04955085878a030394508b73ffffffffffffffffffffffffffffffffffffffff166384464a9f6001600254036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156116ba57600080fd5b505af11580156116ce573d6000803e3d6000fd5b505050506040513d60208110156116e457600080fd5b81019080805190602001909291905050509350600097505b8988101561197f578a8881518110151561171257fe5b9060200190602002015192508b73ffffffffffffffffffffffffffffffffffffffff16635caeb576600160025403856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1580156117c657600080fd5b505af11580156117da573d6000803e3d6000fd5b505050506040513d60208110156117f057600080fd5b810190808051906020019092919050505091508387830281151561181057fe5b0490508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611859573d6000803e3d6000fd5b5080600c6000600160025403815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600e600060016002540381526020019081526020016000208390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600f6000600160025403815260200190815260200160002081908060018154018082558091505090600182039060005260206000200160009091929091909150555087806001019850506116fc565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f193505050501580156119e7573d6000803e3d6000fd5b507f7a565b8c8c23ec3730e3ec16e344f89c9e3d524faeb202c52dc54b9a3ec2cfe3601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015611add573d6000803e3d6000fd5b505b50505050505050505050505050565b60008060006060600080600080600080600080600760025410151515611b1357600080fd5b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663624fca066002546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611ba657600080fd5b505af1158015611bba573d6000803e3d6000fd5b505050506040513d6020811015611bd057600080fd5b81019080805190602001909291905050509b50600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff161415611c1d57612123565b6007600160025403811515611c2e57fe5b049a508b600760008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508b99508973ffffffffffffffffffffffffffffffffffffffff1663949bcf2b6001600254036040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015611cfa57600080fd5b505af1158015611d0e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506040811015611d3857600080fd5b810190808051640100000000811115611d5057600080fd5b82810190506020810184811115611d6657600080fd5b8151856020820283011164010000000082111715611d8357600080fd5b50509291906020018051906020019092919050505050809950508851975087600960008d81526020019081526020016000208190555060009550600094505b87851015611ee5578885815181101515611dd857fe5b9060200190602002015193508973ffffffffffffffffffffffffffffffffffffffff16639082a3d1600160025403866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015611e8c57600080fd5b505af1158015611ea0573d6000803e3d6000fd5b505050506040513d6020811015611eb657600080fd5b8101908080519060200190929190505050925085831115611ed8578396508295505b8480600101955050611dc2565b86600b60008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16319150600a6015548302811515611f8357fe5b049050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166399b5c6d688836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561204b57600080fd5b505af115801561205f573d6000803e3d6000fd5b5050505080600d60008d815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555086601060008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601160008d8152602001908152602001600020819055505b505050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561216d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a723058204d0d71d4108f27c643390de2183d0ad0a13a004dc6958fdc6bbd1211e74b8a090029"
}