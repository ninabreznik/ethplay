{
  "address": "0x2dbe0f03f1dddbdbc87557e86df3878ae25af855",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "HashRush Token",
  "contractName": "HashRushICO",
  "compilerVersion": "v0.4.13-nightly.2017.7.3+commit.6e4e627b",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-08-15\n*/\n\npragma solidity ^0.4.11;\n\n\n\n/**\n\n* @author Jefferson Davis\n\n* HashRuchICO.sol creates the client's token for crowdsale and allows for subsequent token sales and minting of tokens\n\n*   Crowdsale contracts edited from original contract code at https://www.ethereum.org/crowdsale#crowdfund-your-idea\n\n*   Additional crowdsale contracts, functions, libraries from OpenZeppelin\n\n*       at https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts/token\n\n*   Token contract edited from original contract code at https://www.ethereum.org/token\n\n*   ERC20 interface and certain token functions adapted from https://github.com/ConsenSys/Tokens\n\n**/\n\n\n\ncontract ERC20 {\n\n    //Sets events and functions for ERC20 token\n\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n\n    \n\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\n\n    function approve(address _spender, uint _value) returns (bool success);\n\n    function balanceOf(address _owner) constant returns (uint balance);\n\n    function transfer(address _to, uint _value) returns (bool success);\n\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n\n}\n\n\n\n\n\ncontract Owned {\n\n    //Public variable\n\n    address public owner;\n\n\n\n    //Sets contract creator as the owner\n\n    function Owned() {\n\n        owner = msg.sender;\n\n    }\n\n    \n\n    //Sets onlyOwner modifier for specified functions\n\n    modifier onlyOwner {\n\n        require(msg.sender == owner);\n\n        _;\n\n    }\n\n\n\n    //Allows for transfer of contract ownership\n\n    function transferOwnership(address newOwner) onlyOwner {\n\n        owner = newOwner;\n\n    }\n\n}\n\n\n\n\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal returns (uint256) {\n\n        uint256 c = a + b;\n\n        assert(c >= a);\n\n        return c;\n\n    }  \n\n\n\n    function div(uint256 a, uint256 b) internal returns (uint256) {\n\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n\n        uint256 c = a / b;\n\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n\n    }\n\n\n\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n\n        return a >= b ? a : b;\n\n    }\n\n\n\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n\n        return a >= b ? a : b;\n\n    }\n\n\n\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n\n        return a < b ? a : b;\n\n    }\n\n\n\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n\n        return a < b ? a : b;\n\n    }\n\n  \n\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\n\n        uint256 c = a * b;\n\n        assert(a == 0 || c / a == b);\n\n        return c;\n\n    }\n\n\n\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\n\n        assert(b <= a);\n\n        return a - b;\n\n    }\n\n}\n\n\n\n\n\ncontract HashRush is ERC20, Owned {\n\n    //Applies SafeMath library to uint256 operations \n\n    using SafeMath for uint256;\n\n\n\n    //Public variables\n\n    string public name; \n\n    string public symbol; \n\n    uint256 public decimals;  \n\n    uint256 public totalSupply; \n\n\n\n    //Variables\n\n    uint256 multiplier; \n\n    \n\n    //Creates arrays for balances\n\n    mapping (address => uint256) balance;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n\n\n    //Creates modifier to prevent short address attack\n\n    modifier onlyPayloadSize(uint size) {\n\n        if(msg.data.length < size + 4) revert();\n\n        _;\n\n    }\n\n\n\n    //Constructor\n\n    function HashRush(string tokenName, string tokenSymbol, uint8 decimalUnits, uint256 decimalMultiplier) {\n\n        name = tokenName; \n\n        symbol = tokenSymbol; \n\n        decimals = decimalUnits; \n\n        multiplier = decimalMultiplier;  \n\n    }\n\n    \n\n    //Provides the remaining balance of approved tokens from function approve \n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n\n      return allowed[_owner][_spender];\n\n    }\n\n\n\n    //Allows for a certain amount of tokens to be spent on behalf of the account owner\n\n    function approve(address _spender, uint256 _value) returns (bool success) { \n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n\n    }\n\n\n\n    //Returns the account balance \n\n    function balanceOf(address _owner) constant returns (uint256 remainingBalance) {\n\n        return balance[_owner];\n\n    }\n\n\n\n    //Allows contract owner to mint new tokens, prevents numerical overflow\n\n    function mintToken(address target, uint256 mintedAmount) onlyOwner returns (bool success) {\n\n        require(mintedAmount > 0); \n\n        uint256 addTokens = mintedAmount; \n\n        balance[target] += addTokens;\n\n        totalSupply += addTokens;\n\n        Transfer(0, target, addTokens);\n\n        return true; \n\n    }\n\n\n\n    //Sends tokens from sender's account\n\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n\n        if ((balance[msg.sender] >= _value) && (balance[_to] + _value > balance[_to])) {\n\n            balance[msg.sender] -= _value;\n\n            balance[_to] += _value;\n\n            Transfer(msg.sender, _to, _value);\n\n            return true;\n\n        } else { \n\n            return false; \n\n        }\n\n    }\n\n    \n\n    //Transfers tokens from an approved account \n\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {\n\n        if ((balance[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balance[_to] + _value > balance[_to])) {\n\n            balance[_to] += _value;\n\n            balance[_from] -= _value;\n\n            allowed[_from][msg.sender] -= _value;\n\n            Transfer(_from, _to, _value);\n\n            return true;\n\n        } else { \n\n            return false; \n\n        }\n\n    }\n\n}\n\n\n\n\n\ncontract HashRushICO is Owned, HashRush {\n\n    //Applies SafeMath library to uint256 operations \n\n    using SafeMath for uint256;\n\n\n\n    //Public Variables\n\n    address public multiSigWallet;                  \n\n    uint256 public amountRaised; \n\n    uint256 public startTime; \n\n    uint256 public stopTime; \n\n    uint256 public hardcap; \n\n    uint256 public price;                            \n\n\n\n    //Variables\n\n    bool crowdsaleClosed = true;                    \n\n    string tokenName = \"HashRush\"; \n\n    string tokenSymbol = \"RC\"; \n\n    uint256 multiplier = 100000000; \n\n    uint8 decimalUnits = 8;  \n\n\n\n    \n\n\n\n    //Initializes the token\n\n    function HashRushICO() \n\n        HashRush(tokenName, tokenSymbol, decimalUnits, multiplier) {  \n\n            multiSigWallet = msg.sender;        \n\n            hardcap = 70000000;    \n\n            hardcap = hardcap.mul(multiplier); \n\n    }\n\n\n\n    //Fallback function creates tokens and sends to investor when crowdsale is open\n\n    function () payable {\n\n        require(!crowdsaleClosed \n\n            && (now < stopTime) \n\n            && (totalSupply.add(msg.value.mul(getPrice()).mul(multiplier).div(1 ether)) <= hardcap)); \n\n        address recipient = msg.sender; \n\n        amountRaised = amountRaised.add(msg.value.div(1 ether)); \n\n        uint256 tokens = msg.value.mul(getPrice()).mul(multiplier).div(1 ether);\n\n        totalSupply = totalSupply.add(tokens);\n\n        balance[recipient] = balance[recipient].add(tokens);\n\n        require(multiSigWallet.send(msg.value)); \n\n        Transfer(0, recipient, tokens);\n\n    }   \n\n\n\n    //Returns the current price of the token for the crowdsale\n\n    function getPrice() returns (uint256 result) {\n\n        return price;\n\n    }\n\n\n\n    //Returns time remaining on crowdsale\n\n    function getRemainingTime() constant returns (uint256) {\n\n        return stopTime; \n\n    }\n\n\n\n    //Set the sale hardcap amount\n\n    function setHardCapValue(uint256 newHardcap) onlyOwner returns (bool success) {\n\n        hardcap = newHardcap.mul(multiplier); \n\n        return true; \n\n    }\n\n\n\n    //Sets the multisig wallet for a crowdsale\n\n    function setMultiSigWallet(address wallet) onlyOwner returns (bool success) {\n\n        multiSigWallet = wallet; \n\n        return true; \n\n    }\n\n\n\n    //Sets the token price \n\n    function setPrice(uint256 newPriceperEther) onlyOwner returns (uint256) {\n\n        require(newPriceperEther > 0);  \n\n        price = newPriceperEther; \n\n        return price; \n\n    }\n\n\n\n    //Allows owner to start the crowdsale from the time of execution until a specified stopTime\n\n    function startSale(uint256 saleStart, uint256 saleStop, uint256 salePrice, address setBeneficiary) onlyOwner returns (bool success) {\n\n        require(saleStop > now);     \n\n        //startTime = 1502881261; // 16 August 2017, 11:01 AM GMT \n\n        //stopTime = 1504263601;  // 1 September 2017, 11:00 AM GMT\n\n        startTime = saleStart; \n\n        stopTime = saleStop; \n\n        crowdsaleClosed = false; \n\n        setPrice(salePrice); \n\n        setMultiSigWallet(setBeneficiary); \n\n        return true; \n\n    }\n\n\n\n    //Allows owner to stop the crowdsale immediately\n\n    function stopSale() onlyOwner returns (bool success) {\n\n        stopTime = now; \n\n        crowdsaleClosed = true;\n\n        return true; \n\n    }\n\n}",
  "bytecode": "60606040908152600e805460ff191660011790558051908101604052600881527f48617368527573680000000000000000000000000000000000000000000000006020820152600f9080516200005a929160200190620002eb565b5060408051908101604052600281527f524300000000000000000000000000000000000000000000000000000000000060208201526010908051620000a4929160200190620002eb565b506305f5e1006011556012805460ff191660081790553415620000c657600080fd5b5b600f8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620001615780601f10620001355761010080835404028352916020019162000161565b820191906000526020600020905b8154815290600101906020018083116200014357829003601f168201915b505050505060108054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015620002005780601f10620001d45761010080835404028352916020019162000200565b820191906000526020600020905b815481529060010190602001808311620001e257829003601f168201915b505060125460115460ff90911693509150505b5b60008054600160a060020a03191633600160a060020a03161790555b600184805162000245929160200190620002eb565b5060028380516200025b929160200190620002eb565b5060ff821660035560058190555b505060088054600160a060020a03191633600160a060020a0316179055505063042c1d80600c819055601154620002af9190640100000000620002b981026200081b1704565b600c555b62000395565b6000828202831580620002d75750828482811515620002d457fe5b04145b1515620002e057fe5b8091505b5092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200032e57805160ff19168380011785556200035e565b828001600101855582156200035e579182015b828111156200035e57825182559160200191906001019062000341565b5b506200036d92915062000371565b5090565b6200039291905b808211156200036d576000815560010162000378565b5090565b90565b610f1080620003a56000396000f300606060405236156101465763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630367f96d811461030457806303ff5e731461032e57806306fdde0314610353578063095ea7b3146103de57806318160ddd1461041457806323b872dd14610439578063313ce567146104755780634b8feb4f1461049a578063549cbc7a146104c957806370a082311461050557806378e979251461053657806379c650681461055b5780637b3e5e7b146105915780638da5cb5b146105b657806391b7f5ed146105e557806395d89b411461060d57806398d5fdca14610698578063a035b1fe146106bd578063a9059cbb146106e2578063b071cbe614610718578063dd62ed3e1461073d578063e36b0b3714610774578063efb98bcf1461079b578063f03b0c0b146107c0578063f2fde38b146107f3575b6103025b600e54600090819060ff161580156101635750600b5442105b80156101c45750600c546101c16101b2670de0b6b3a76400006101a660115461019a61018d610814565b349063ffffffff61081b16565b9063ffffffff61081b16565b9063ffffffff61084a16565b6004549063ffffffff61086616565b11155b15156101cf57600080fd5b3391506101fc6101ed34670de0b6b3a764000063ffffffff61084a16565b6009549063ffffffff61086616565b600981905550610244670de0b6b3a76400006101a660115461019a61018d610814565b349063ffffffff61081b16565b9063ffffffff61081b16565b9063ffffffff61084a16565b60045490915061025a908263ffffffff61086616565b600455600160a060020a038216600090815260066020526040902054610286908263ffffffff61086616565b600160a060020a03808416600090815260066020526040908190209290925560085416903480156108fc029151600060405180830381858888f1935050505015156102d057600080fd5b81600160a060020a03166000600080516020610ec58339815191528360405190815260200160405180910390a35b5050565b005b341561030f57600080fd5b61031a600435610880565b604051901515815260200160405180910390f35b341561033957600080fd5b6103416108bd565b60405190815260200160405180910390f35b341561035e57600080fd5b6103666108c3565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103a35780820151818401525b60200161038a565b50505050905090810190601f1680156103d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103e957600080fd5b61031a600160a060020a0360043516602435610961565b604051901515815260200160405180910390f35b341561041f57600080fd5b6103416109ce565b60405190815260200160405180910390f35b341561044457600080fd5b61031a600160a060020a03600435811690602435166044356109d4565b604051901515815260200160405180910390f35b341561048057600080fd5b610341610aea565b60405190815260200160405180910390f35b34156104a557600080fd5b6104ad610af0565b604051600160a060020a03909116815260200160405180910390f35b34156104d457600080fd5b61031a600435602435604435600160a060020a0360643516610aff565b604051901515815260200160405180910390f35b341561051057600080fd5b610341600160a060020a0360043516610b5d565b60405190815260200160405180910390f35b341561054157600080fd5b610341610b7c565b60405190815260200160405180910390f35b341561056657600080fd5b61031a600160a060020a0360043516602435610b82565b604051901515815260200160405180910390f35b341561059c57600080fd5b610341610c07565b60405190815260200160405180910390f35b34156105c157600080fd5b6104ad610c0d565b604051600160a060020a03909116815260200160405180910390f35b34156105f057600080fd5b610341600435610c1c565b60405190815260200160405180910390f35b341561061857600080fd5b610366610c53565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103a35780820151818401525b60200161038a565b50505050905090810190601f1680156103d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106a357600080fd5b610341610814565b60405190815260200160405180910390f35b34156106c857600080fd5b610341610cf1565b60405190815260200160405180910390f35b34156106ed57600080fd5b61031a600160a060020a0360043516602435610cf7565b604051901515815260200160405180910390f35b341561072357600080fd5b610341610dbe565b60405190815260200160405180910390f35b341561074857600080fd5b610341600160a060020a0360043581169060243516610dc4565b60405190815260200160405180910390f35b341561077f57600080fd5b61031a610df1565b604051901515815260200160405180910390f35b34156107a657600080fd5b610341610e27565b60405190815260200160405180910390f35b34156107cb57600080fd5b61031a600160a060020a0360043516610e2e565b604051901515815260200160405180910390f35b34156107fe57600080fd5b610302600160a060020a0360043516610e7c565b005b600d545b90565b6000828202831580610837575082848281151561083457fe5b04145b151561083f57fe5b8091505b5092915050565b600080828481151561085857fe5b0490508091505b5092915050565b60008282018381101561083f57fe5b8091505b5092915050565b6000805433600160a060020a0390811691161461089c57600080fd5b6011546108b090839063ffffffff61081b16565b600c555060015b5b919050565b600b5481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109595780601f1061092e57610100808354040283529160200191610959565b820191906000526020600020905b81548152906001019060200180831161093c57829003601f168201915b505050505081565b600160a060020a03338116600081815260076020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60045481565b6000606060643610156109e657600080fd5b600160a060020a038516600090815260066020526040902054839010801590610a365750600160a060020a0380861660009081526007602090815260408083203390941683529290522054839010155b8015610a5b5750600160a060020a038416600090815260066020526040902054838101115b15610adb57600160a060020a03808516600081815260066020908152604080832080548901905589851680845281842080548a9003905560078352818420339096168452949091529081902080548790039055909190600080516020610ec58339815191529086905190815260200160405180910390a360019150610ae0565b600091505b5b5b509392505050565b60035481565b600854600160a060020a031681565b6000805433600160a060020a03908116911614610b1b57600080fd5b428411610b2757600080fd5b600a859055600b849055600e805460ff19169055610b4483610c1c565b50610b4e82610e2e565b50600190505b5b949350505050565b600160a060020a0381166000908152600660205260409020545b919050565b600a5481565b60008054819033600160a060020a03908116911614610ba057600080fd5b60008311610bad57600080fd5b50600160a060020a038316600081815260066020526040808220805486019055600480548601905584929190600080516020610ec58339815191529084905190815260200160405180910390a3600191505b5b5092915050565b60095481565b600054600160a060020a031681565b6000805433600160a060020a03908116911614610c3857600080fd5b60008211610c4557600080fd5b50600d819055805b5b919050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109595780601f1061092e57610100808354040283529160200191610959565b820191906000526020600020905b81548152906001019060200180831161093c57829003601f168201915b505050505081565b600d5481565b600060406044361015610d0957600080fd5b600160a060020a033316600090815260066020526040902054839010801590610d4b5750600160a060020a038416600090815260066020526040902054838101115b15610dac57600160a060020a03338116600081815260066020526040808220805488900390559287168082529083902080548701905591600080516020610ec58339815191529086905190815260200160405180910390a360019150610843565b60009150610843565b5b5b5092915050565b600c5481565b600160a060020a038083166000908152600760209081526040808320938516835292905220545b92915050565b6000805433600160a060020a03908116911614610e0d57600080fd5b5042600b55600e805460ff191660019081179091555b5b90565b600b545b90565b6000805433600160a060020a03908116911614610e4a57600080fd5b506008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03831617905560015b5b919050565b60005433600160a060020a03908116911614610e9757600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820c25bbf904ec53644f9cf0c4565fe11179151990a459e22e2cff2a19e603969a40029"
}