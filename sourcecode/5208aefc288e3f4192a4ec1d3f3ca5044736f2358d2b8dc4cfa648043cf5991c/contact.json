{
  "address": "0x3452519f4711703e13ea0863487eb8401bd6ae57",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BulkSender",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-13\n*/\n\n/**\n * @title BulkSender by Universa Blockchain.\n */\n\npragma solidity ^0.4.13;\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\ncontract BulkSender is Ownable {\n    using SafeERC20 for ERC20Basic;\n\n    /**\n     * @dev Transfer multiple batches for the same token to multiple addresses accordingly,\n     * from the ownership of the sender contract.\n     * Note: only the owner (creator) of this contract may call this.\n     */\n    function bulkTransfer(ERC20Basic token, address[] toAddresses, uint256[] values) public onlyOwner returns (bool) {\n        require((toAddresses.length > 0) && (toAddresses.length == values.length));\n        for (uint i = 0; i < toAddresses.length; i++) {\n            token.safeTransfer(toAddresses[i], values[i]);\n        }\n        return true;\n    }\n}",
  "bytecode": "606060405260008054600160a060020a033316600160a060020a0319909116179055610371806100306000396000f3006060604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638da5cb5b811461005b578063e886dade1461008a578063f2fde38b1461013b575b600080fd5b341561006657600080fd5b61006e61015c565b604051600160a060020a03909116815260200160405180910390f35b341561009557600080fd5b61012760048035600160a060020a03169060446024803590810190830135806020808202016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061016b95505050505050565b604051901515815260200160405180910390f35b341561014657600080fd5b61015a600160a060020a036004351661020c565b005b600054600160a060020a031681565b60008054819033600160a060020a0390811691161461018957600080fd5b6000845111801561019b575082518451145b15156101a657600080fd5b5060005b8351811015610201576101f98482815181106101c257fe5b906020019060200201518483815181106101d857fe5b90602001906020020151600160a060020a038816919063ffffffff6102a716565b6001016101aa565b506001949350505050565b60005433600160a060020a0390811691161461022757600080fd5b600160a060020a038116151561023c57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b82600160a060020a031663a9059cbb83836000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561031d57600080fd5b6102c65a03f1151561032e57600080fd5b50505060405180519050151561034057fe5b5050505600a165627a7a72305820883aaa5c3eed072bf0532b56d069b7bead64c3017a8f0ed904c9e1e666cbcf8a0029"
}