{
  "address": "0xbbdbccb13d09975fa9e3e9c8fa129b61065c84f3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DSAToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-28\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n \n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amout of tokens to be transfered\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        uint _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}\n\n/**\n * @title DSA Token is Standard ERC20 token\n */\ncontract DSAToken is StandardToken {\n\n    string public name = \"DSA Token\";\n    string public symbol = \"DSA\";\n    address owner;\n    uint public decimals = 18;\n    uint public INITIAL_SUPPLY = 1000000000*10**18;\n\n    constructor(address _owner) public {\n        owner = _owner;\n        totalSupply = INITIAL_SUPPLY;\n        balances[_owner] = INITIAL_SUPPLY;\n    }\n\n    function changeName(string _name) public {\n        if (msg.sender == owner)\n            name = _name;\n    } \n\n    function changeSymbol(string _symbol) public {\n        if (msg.sender == owner)\n            symbol = _symbol;\n    } \n \n    function changeNameAndSymbol(string _name,string _symbol) public {\n        if (msg.sender == owner) { \n            name = _name;\n            symbol = _symbol;\n        }\n    } \n}",
  "bytecode": "60c0604052600960808190527f44534120546f6b656e000000000000000000000000000000000000000000000060a090815261003e91600391906100f1565b506040805180820190915260038082527f44534100000000000000000000000000000000000000000000000000000000006020909201918252610083916004916100f1565b5060126006556b033b2e3c9fd0803ce80000006007553480156100a557600080fd5b50604051602080610b2b833981016040908152905160058054600160a060020a031916600160a060020a039092169182179055600754600081815591825260016020529190205561018c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013257805160ff191683800117855561015f565b8280016001018555821561015f579182015b8281111561015f578251825591602001919060010190610144565b5061016b92915061016f565b5090565b61018991905b8082111561016b5760008155600101610175565b90565b6109908061019b6000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063089bb99a14610153578063095ea7b3146101ec57806318160ddd1461022457806323b872dd1461024b5780632ff2e9dc14610275578063313ce5671461028a5780635353a2d81461029f57806370a08231146102f857806395d89b4114610319578063a3895fff1461032e578063a9059cbb14610387578063dd62ed3e146103ab575b600080fd5b3480156100d557600080fd5b506100de6103d2565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101ea94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506104609650505050505050565b005b3480156101f857600080fd5b50610210600160a060020a03600435166024356104a0565b604080519115158252519081900360200190f35b34801561023057600080fd5b50610239610542565b60408051918252519081900360200190f35b34801561025757600080fd5b50610210600160a060020a0360043581169060243516604435610548565b34801561028157600080fd5b506102396106c2565b34801561029657600080fd5b506102396106c8565b3480156102ab57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101ea9436949293602493928401919081908401838280828437509497506106ce9650505050505050565b34801561030457600080fd5b50610239600160a060020a03600435166106f7565b34801561032557600080fd5b506100de610712565b34801561033a57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101ea94369492936024939284019190819084018382808284375094975061076d9650505050505050565b34801561039357600080fd5b50610210600160a060020a0360043516602435610793565b3480156103b757600080fd5b50610239600160a060020a0360043581169060243516610876565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104585780601f1061042d57610100808354040283529160200191610458565b820191906000526020600020905b81548152906001019060200180831161043b57829003601f168201915b505050505081565b600554600160a060020a031633141561049c5781516104869060039060208501906108c9565b50805161049a9060049060208401906108c9565b505b5050565b60008115806104d05750336000908152600260209081526040808320600160a060020a0387168452909152902054155b15156104db57600080fd5b336000818152600260209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60005481565b600080600160a060020a038416151561056057600080fd5b600160a060020a03851660009081526001602052604090205483111561058557600080fd5b600160a060020a03851660009081526002602090815260408083203384529091529020548311156105b557600080fd5b50600160a060020a038085166000908152600260209081526040808320338452825280832054938716835260019091529020546105f8908463ffffffff6108a116565b600160a060020a03808616600090815260016020526040808220939093559087168152205461062d908463ffffffff6108b716565b600160a060020a038616600090815260016020526040902055610656818463ffffffff6108b716565b600160a060020a03808716600081815260026020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b60075481565b60065481565b600554600160a060020a03163314156106f457805161049c9060039060208401906108c9565b50565b600160a060020a031660009081526001602052604090205490565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104585780601f1061042d57610100808354040283529160200191610458565b600554600160a060020a03163314156106f457805161049c9060049060208401906108c9565b6000600160a060020a03831615156107aa57600080fd5b336000908152600160205260409020548211156107c657600080fd5b336000908152600160205260409020546107e6908363ffffffff6108b716565b3360009081526001602052604080822092909255600160a060020a03851681522054610818908363ffffffff6108a116565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000828201838110156108b057fe5b9392505050565b6000828211156108c357fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061090a57805160ff1916838001178555610937565b82800160010185558215610937579182015b8281111561093757825182559160200191906001019061091c565b50610943929150610947565b5090565b61096191905b80821115610943576000815560010161094d565b905600a165627a7a723058205e2b8c85d99d666176331d34e12db6125148c1dbb0ebe7f714ce35a120415ad0002900000000000000000000000079ee7f6fecccd3aba7b982ae5535c8f55f2c2070",
  "constructorArguments": "00000000000000000000000079ee7f6fecccd3aba7b982ae5535c8f55f2c2070"
}