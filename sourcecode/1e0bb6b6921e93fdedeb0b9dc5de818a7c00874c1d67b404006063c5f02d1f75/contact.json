{
  "address": "0xacfa209fb73bf3dd5bbfb1101b9bc999c49062a5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Blockchain Certified Data Token",
  "contractName": "BCDToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-20\n*/\n\npragma solidity ^0.4.19;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title VestedToken\n * @dev The VestedToken contract implements ERC20 standard basics function and \n * - vesting for an address\n * - token tradability delay\n */\ncontract VestedToken {\n    using SafeMath for uint256;\n    \n    // Vested wallet address\n    address public vestedAddress;\n    // Vesting time\n    uint private constant VESTING_DELAY = 1 years;  \n    // Token will be tradable TOKEN_TRADABLE_DELAY after \n    uint private constant TOKEN_TRADABLE_DELAY = 12 days;\n\n    // True if aside tokens have already been minted after second round\n    bool public asideTokensHaveBeenMinted = false;\n    // When aside tokens have been minted ?\n    uint public asideTokensMintDate;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n    \n    modifier transferAllowed { require(asideTokensHaveBeenMinted && now > asideTokensMintDate + TOKEN_TRADABLE_DELAY); _; }\n    \n    // Get the balance from an address\n    function balanceOf(address _owner) public constant returns (uint256) { return balances[_owner]; }  \n\n    // transfer ERC20 function\n    function transfer(address _to, uint256 _value) transferAllowed public returns (bool success) {\n        require(_to != 0x0);\n        \n        // founders wallets is blocked 1 year\n        if (msg.sender == vestedAddress && (now < (asideTokensMintDate + VESTING_DELAY))) { revert(); }\n\n        return privateTransfer(_to, _value);\n    }\n\n    // transferFrom ERC20 function\n    function transferFrom(address _from, address _to, uint256 _value) transferAllowed public returns (bool success) {\n        require(_from != 0x0);\n        require(_to != 0x0);\n        \n        // founders wallet is blocked 1 year\n        if (_from == vestedAddress && (now < (asideTokensMintDate + VESTING_DELAY))) { revert(); }\n\n        uint256 _allowance = allowed[_from][msg.sender];\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        \n        return true;\n    }\n\n    // approve ERC20 function\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        \n        return true;\n    }\n\n    // allowance ERC20 function\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    function privateTransfer (address _to, uint256 _value) private returns (bool success) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    // Events ERC20\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/**\n * @title WhitelistsRegistration\n * @dev This is an extension to add 2 levels whitelists to the crowdsale\n */\ncontract WhitelistsRegistration is Ownable {\n    // List of whitelisted addresses for KYC under 10 ETH\n    mapping(address => bool) silverWhiteList;\n    \n    // List of whitelisted addresses for KYC over 10 ETH\n    mapping(address => bool) goldWhiteList;\n    \n    // Different stage from the ICO\n    enum WhiteListState {\n        // This address is not whitelisted\n        None,\n        // this address is on the silver whitelist\n        Silver,\n        // this address is on the gold whitelist\n        Gold\n    }\n    \n    address public whiteLister;\n\n    event SilverWhitelist(address indexed _address, bool _isRegistered);\n    event GoldWhitelist(address indexed _address, bool _isRegistered);  \n    event SetWhitelister(address indexed newWhiteLister);\n    \n    /**\n    * @dev Throws if called by any account other than the owner or the whitelister.\n    */\n    modifier onlyOwnerOrWhiteLister() {\n        require((msg.sender == owner) || (msg.sender == whiteLister));\n    _;\n    }\n    \n    // Return registration status of an specified address\n    function checkRegistrationStatus(address _address) public constant returns (WhiteListState) {\n        if (goldWhiteList[_address]) { return WhiteListState.Gold; }\n        if (silverWhiteList[_address]) { return WhiteListState.Silver; }\n        return WhiteListState.None;\n    }\n    \n    // Change registration status for an address in the whitelist for KYC under 10 ETH\n    function changeRegistrationStatusForSilverWhiteList(address _address, bool _isRegistered) public onlyOwnerOrWhiteLister {\n        silverWhiteList[_address] = _isRegistered;\n        SilverWhitelist(_address, _isRegistered);\n    }\n    \n    // Change registration status for an address in the whitelist for KYC over 10 ETH\n    function changeRegistrationStatusForGoldWhiteList(address _address, bool _isRegistered) public onlyOwnerOrWhiteLister {\n        goldWhiteList[_address] = _isRegistered;\n        GoldWhitelist(_address, _isRegistered);\n    }\n    \n    // Change registration status for several addresses in the whitelist for KYC under 10 ETH\n    function massChangeRegistrationStatusForSilverWhiteList(address[] _targets, bool _isRegistered) public onlyOwnerOrWhiteLister {\n        for (uint i = 0; i < _targets.length; i++) {\n            changeRegistrationStatusForSilverWhiteList(_targets[i], _isRegistered);\n        }\n    } \n    \n    // Change registration status for several addresses in the whitelist for KYC over 10 ETH\n    function massChangeRegistrationStatusForGoldWhiteList(address[] _targets, bool _isRegistered) public onlyOwnerOrWhiteLister {\n        for (uint i = 0; i < _targets.length; i++) {\n            changeRegistrationStatusForGoldWhiteList(_targets[i], _isRegistered);\n        }\n    }\n    \n    /**\n    * @dev Allows the current owner or whiteLister to transfer control of the whitelist to a newWhitelister.\n    * @param _newWhiteLister The address to transfer whitelist to.\n    */\n    function setWhitelister(address _newWhiteLister) public onlyOwnerOrWhiteLister {\n      require(_newWhiteLister != address(0));\n      SetWhitelister(_newWhiteLister);\n      whiteLister = _newWhiteLister;\n    }\n}\n\n/**\n * @title BCDToken\n * @dev The BCDT crowdsale\n */\ncontract BCDToken is VestedToken, WhitelistsRegistration {\n    \n    string public constant name = \"Blockchain Certified Data Token\";\n    string public constant symbol = \"BCDT\";\n    uint public constant decimals = 18;\n\n    // Maximum contribution in ETH for silver whitelist \n    uint private constant MAX_ETHER_FOR_SILVER_WHITELIST = 10 ether;\n    \n    // ETH/BCDT rate\n    uint public rateETH_BCDT = 13000;\n\n    // Soft cap, if not reached contributors can withdraw their ethers\n    uint public softCap = 1800 ether;\n\n    // Cap in ether of presale\n    uint public presaleCap = 1800 ether;\n    \n    // Cap in ether of Round 1 (presale cap + 1800 ETH)\n    uint public round1Cap = 3600 ether;    \n    \n    // BCD Reserve/Community Wallets\n    address public reserveAddress;\n    address public communityAddress;\n\n    // Different stage from the ICO\n    enum State {\n        // ICO isn't started yet, initial state\n        Init,\n        // Presale has started\n        PresaleRunning,\n        // Presale has ended\n        PresaleFinished,\n        // Round 1 has started\n        Round1Running,\n        // Round 1 has ended\n        Round1Finished,\n        // Round 2 has started\n        Round2Running,\n        // Round 2 has ended\n        Round2Finished\n    }\n    \n    // Initial state is Init\n    State public currentState = State.Init;\n    \n    // BCDT total supply\n    uint256 public totalSupply = MAX_TOTAL_BCDT_TO_SELL;\n\n    // How much tokens have been sold\n    uint256 public tokensSold;\n    \n    // Amount of ETH raised during ICO\n    uint256 private etherRaisedDuringICO;\n    \n    // Maximum total of BCDT Token sold during ITS\n    uint private constant MAX_TOTAL_BCDT_TO_SELL = 100000000 * 1 ether;\n\n    // Token allocation per mille for reserve/community/founders\n    uint private constant RESERVE_ALLOCATION_PER_MILLE_RATIO =  200;\n    uint private constant COMMUNITY_ALLOCATION_PER_MILLE_RATIO =  103;\n    uint private constant FOUNDERS_ALLOCATION_PER_MILLE_RATIO =  30;\n    \n    // List of contributors/contribution in ETH\n    mapping(address => uint256) contributors;\n\n    // Use to allow function call only if currentState is the one specified\n    modifier inStateInit()\n    {\n        require(currentState == State.Init); \n        _; \n    }\n\t\n    modifier inStateRound2Finished()\n    {\n        require(currentState == State.Round2Finished); \n        _; \n    }\n    \n    // Event call when aside tokens are minted\n    event AsideTokensHaveBeenAllocated(address indexed to, uint256 amount);\n    // Event call when a contributor withdraw his ethers\n    event Withdraw(address indexed to, uint256 amount);\n    // Event call when ICO state change\n    event StateChanged(uint256 timestamp, State currentState);\n\n    // Constructor\n    function BCDToken() public {\n    }\n\n    function() public payable {\n        require(currentState == State.PresaleRunning || currentState == State.Round1Running || currentState == State.Round2Running);\n\n        // min transaction is 0.1 ETH\n        if (msg.value < 100 finney) { revert(); }\n\n        // If you're not in any whitelist, you cannot continue\n        if (!silverWhiteList[msg.sender] && !goldWhiteList[msg.sender]) {\n            revert();\n        }\n\n        // ETH sent by contributor\n        uint256 ethSent = msg.value;\n        \n        // how much ETH will be used for contribution\n        uint256 ethToUse = ethSent;\n\n        // Address is only in the silver whitelist: contribution is capped\n        if (!goldWhiteList[msg.sender]) {\n            // Check if address has already contributed for maximum allowance\n            if (contributors[msg.sender] >= MAX_ETHER_FOR_SILVER_WHITELIST) {\n                revert();\n            }\n            // limit the total contribution to MAX_ETHER_FOR_SILVER_WHITELIST\n            if (contributors[msg.sender].add(ethToUse) > MAX_ETHER_FOR_SILVER_WHITELIST) {\n                ethToUse = MAX_ETHER_FOR_SILVER_WHITELIST.sub(contributors[msg.sender]);\n            }\n        }\n        \n         // Calculate how much ETH are available for this stage\n        uint256 ethAvailable = getRemainingEthersForCurrentRound();\n        uint rate = getBCDTRateForCurrentRound();\n\n        // If cap of the round has been reached\n        if (ethAvailable <= ethToUse) {\n            // End the round\n            privateSetState(getEndedStateForCurrentRound());\n            // Only available ethers will be used to reach the cap\n            ethToUse = ethAvailable;\n        }\n        \n        // Calculate token amount to send in accordance to rate\n        uint256 tokenToSend = ethToUse.mul(rate);\n        \n        // Amount of tokens sold to the current contributors is added to total sold\n        tokensSold = tokensSold.add(tokenToSend);\n        // Amount of ethers used for the current contribution is added the total raised\n        etherRaisedDuringICO = etherRaisedDuringICO.add(ethToUse);\n        // Token balance updated for current contributor\n        balances[msg.sender] = balances[msg.sender].add(tokenToSend);\n        // Contribution is stored for an potential withdraw\n        contributors[msg.sender] = contributors[msg.sender].add(ethToUse);\n        \n        // Send back the unused ethers        \n        if (ethToUse < ethSent) {\n            msg.sender.transfer(ethSent.sub(ethToUse));\n        }\n        // Log token transfer operation\n        Transfer(0x0, msg.sender, tokenToSend); \n    }\n\n    // Allow contributors to withdraw after the end of the ICO if the softcap hasn't been reached\n    function withdraw() public inStateRound2Finished {\n        // Only contributors with positive ETH balance could Withdraw\n        if(contributors[msg.sender] == 0) { revert(); }\n        \n        // Withdraw is possible only if softcap has not been reached\n        require(etherRaisedDuringICO < softCap);\n        \n        // Get how much ethers sender has contribute\n        uint256 ethToSendBack = contributors[msg.sender];\n        \n        // Set contribution to 0 for the contributor\n        contributors[msg.sender] = 0;\n        \n        // Send back ethers\n        msg.sender.transfer(ethToSendBack);\n        \n        // Log withdraw operation\n        Withdraw(msg.sender, ethToSendBack);\n    }\n\n    // At the end of the sale, mint the aside tokens for the reserve, community and founders\n    function mintAsideTokens() public onlyOwner inStateRound2Finished {\n\n        // Reserve, community and founders address have to be set before mint aside tokens\n        require((reserveAddress != 0x0) && (communityAddress != 0x0) && (vestedAddress != 0x0));\n\n        // Aside tokens can be minted only if softcap is reached\n        require(this.balance >= softCap);\n\n        // Revert if aside tokens have already been minted \n        if (asideTokensHaveBeenMinted) { revert(); }\n\n        // Set minted flag and date\n        asideTokensHaveBeenMinted = true;\n        asideTokensMintDate = now;\n\n        // If 100M sold, 50M more have to be mint (15 / 10 = * 1.5 = +50%)\n        totalSupply = tokensSold.mul(15).div(10);\n\n        // 20% of total supply is allocated to reserve\n        uint256 _amountMinted = setAllocation(reserveAddress, RESERVE_ALLOCATION_PER_MILLE_RATIO);\n\n        // 10.3% of total supply is allocated to community\n        _amountMinted = _amountMinted.add(setAllocation(communityAddress, COMMUNITY_ALLOCATION_PER_MILLE_RATIO));\n\n        // 3% of total supply is allocated to founders\n        _amountMinted = _amountMinted.add(setAllocation(vestedAddress, FOUNDERS_ALLOCATION_PER_MILLE_RATIO));\n        \n        // the allocation is only 33.3%*150/100 = 49.95% of the token solds. It is therefore slightly higher than it should.\n        // to avoid that, we correct the real total number of tokens\n        totalSupply = tokensSold.add(_amountMinted);\n        // Send the eth to the owner of the contract\n        owner.transfer(this.balance);\n    }\n    \n    function setTokenAsideAddresses(address _reserveAddress, address _communityAddress, address _founderAddress) public onlyOwner {\n        require(_reserveAddress != 0x0 && _communityAddress != 0x0 && _founderAddress != 0x0);\n\n        // Revert when aside tokens have already been minted \n        if (asideTokensHaveBeenMinted) { revert(); }\n\n        reserveAddress = _reserveAddress;\n        communityAddress = _communityAddress;\n        vestedAddress = _founderAddress;\n    }\n    \n    function updateCapsAndRate(uint _presaleCapInETH, uint _round1CapInETH, uint _softCapInETH, uint _rateETH_BCDT) public onlyOwner inStateInit {\n            \n        // Caps and rate are updatable until ICO starts\n        require(_round1CapInETH > _presaleCapInETH);\n        require(_rateETH_BCDT != 0);\n        \n        presaleCap = _presaleCapInETH * 1 ether;\n        round1Cap = _round1CapInETH * 1 ether;\n        softCap = _softCapInETH * 1 ether;\n        rateETH_BCDT = _rateETH_BCDT;\n    }\n    \n    function getRemainingEthersForCurrentRound() public constant returns (uint) {\n        require(currentState != State.Init); \n        require(!asideTokensHaveBeenMinted);\n        \n        if((currentState == State.PresaleRunning) || (currentState == State.PresaleFinished)) {\n            // Presale cap is fixed in ETH\n            return presaleCap.sub(etherRaisedDuringICO);\n        }\n        if((currentState == State.Round1Running) || (currentState == State.Round1Finished)) {\n            // Round 1 cap is fixed in ETH\n            return round1Cap.sub(etherRaisedDuringICO);\n        }\n        if((currentState == State.Round2Running) || (currentState == State.Round2Finished)) {\n            // Round 2 cap is limited in tokens, \n            uint256 remainingTokens = totalSupply.sub(tokensSold);\n            // ETH available is calculated from the number of remaining tokens regarding the rate\n            return remainingTokens.div(rateETH_BCDT);\n        }        \n    }   \n\n    function getBCDTRateForCurrentRound() public constant returns (uint) {\n        require(currentState == State.PresaleRunning || currentState == State.Round1Running || currentState == State.Round2Running);              \n        \n        // ETH/BCDT rate during presale: 20% bonus\n        if(currentState == State.PresaleRunning) {\n            return rateETH_BCDT + rateETH_BCDT * 20 / 100;\n        }\n        // ETH/BCDT rate during presale: 10% bonus\n        if(currentState == State.Round1Running) {\n            return rateETH_BCDT + rateETH_BCDT * 10 / 100;\n        }\n        if(currentState == State.Round2Running) {\n            return rateETH_BCDT;\n        }        \n    }  \n\n    function setState(State _newState) public onlyOwner {\n        privateSetState(_newState);\n    }\n    \n    function privateSetState(State _newState) private {\n        // no way to go back    \n        if(_newState <= currentState) { revert(); }\n        \n        currentState = _newState;\n        StateChanged(now, currentState);\n    }\n    \n    \n    function getEndedStateForCurrentRound() private constant returns (State) {\n        require(currentState == State.PresaleRunning || currentState == State.Round1Running || currentState == State.Round2Running);\n        \n        if(currentState == State.PresaleRunning) {\n            return State.PresaleFinished;\n        }\n        if(currentState == State.Round1Running) {\n            return State.Round1Finished;\n        }\n        if(currentState == State.Round2Running) {\n            return State.Round2Finished;\n        }        \n    }   \n\n    function setAllocation(address _to, uint _ratio) private onlyOwner returns (uint256) {\n        // Aside token is a percentage of totalSupply\n        uint256 tokenAmountToTransfert = totalSupply.mul(_ratio).div(1000);\n        balances[_to] = balances[_to].add(tokenAmountToTransfert);\n        AsideTokensHaveBeenAllocated(_to, tokenAmountToTransfert);\n        Transfer(0x0, _to, tokenAmountToTransfert);\n        return tokenAmountToTransfert;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mintAsideTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRemainingEthersForCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateETH_BCDT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_presaleCapInETH\",\"type\":\"uint256\"},{\"name\":\"_round1CapInETH\",\"type\":\"uint256\"},{\"name\":\"_softCapInETH\",\"type\":\"uint256\"},{\"name\":\"_rateETH_BCDT\",\"type\":\"uint256\"}],\"name\":\"updateCapsAndRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkRegistrationStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"asideTokensHaveBeenMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserveAddress\",\"type\":\"address\"},{\"name\":\"_communityAddress\",\"type\":\"address\"},{\"name\":\"_founderAddress\",\"type\":\"address\"}],\"name\":\"setTokenAsideAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"asideTokensMintDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isRegistered\",\"type\":\"bool\"}],\"name\":\"changeRegistrationStatusForGoldWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_isRegistered\",\"type\":\"bool\"}],\"name\":\"massChangeRegistrationStatusForGoldWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round1Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteLister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_isRegistered\",\"type\":\"bool\"}],\"name\":\"massChangeRegistrationStatusForSilverWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isRegistered\",\"type\":\"bool\"}],\"name\":\"changeRegistrationStatusForSilverWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWhiteLister\",\"type\":\"address\"}],\"name\":\"setWhitelister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBCDTRateForCurrentRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AsideTokensHaveBeenAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentState\",\"type\":\"uint8\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isRegistered\",\"type\":\"bool\"}],\"name\":\"SilverWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isRegistered\",\"type\":\"bool\"}],\"name\":\"GoldWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newWhiteLister\",\"type\":\"address\"}],\"name\":\"SetWhitelister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": ""
}