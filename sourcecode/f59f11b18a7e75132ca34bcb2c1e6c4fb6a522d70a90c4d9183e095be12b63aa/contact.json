{
  "address": "0x3b5513e834f5ea2438e67177b66270527dab8d70",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CNC",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-30\n*/\n\npragma solidity 0.4.24;\n/**\n* @title CNC Token Contract\n* @dev ERC-20 Token Standar Compliant\n*/\n\n/**\n * @title SafeMath by OpenZeppelin (partially)\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n* @title ERC20 Token minimal interface for external tokens handle\n*/\ncontract token {\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n}\n\n/**\n* @title Admin parameters\n* @dev Define administration parameters for this contract\n*/\ncontract admined { //This token contract is administered\n    address public admin; //Admin address is public\n\n    /**\n    * @dev Contract constructor, define initial administrator\n    */\n    constructor() internal {\n        admin = msg.sender; //Set initial admin to contract creator\n        emit Admined(admin);\n    }\n\n    modifier onlyAdmin() { //A modifier to define admin-only functions\n        require(msg.sender == admin);\n        _;\n    }\n\n    /**\n    * @dev Function to set new admin address\n    * @param _newAdmin The address to transfer administration to\n    */\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n        require(_newAdmin != address(0));\n        admin = _newAdmin;\n        emit TransferAdminship(admin);\n    }\n\n\n    //All admin actions have a log for public review\n    event TransferAdminship(address newAdminister);\n    event Admined(address administer);\n\n}\n\n/**\n * @title ERC20TokenInterface\n * @dev Token contract interface for external use\n */\ncontract ERC20TokenInterface {\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n}\n\n\n/**\n* @title ERC20Token\n* @notice Token definition contract\n*/\ncontract ERC20Token is admined,ERC20TokenInterface { //Standard definition of an ERC20Token\n    using SafeMath for uint256;\n    uint256 public totalSupply;\n    mapping (address => uint256) balances; //A mapping of all balances per address\n    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n    mapping (address => bool) frozen; //A mapping of all frozen status\n\n    /**\n    * @dev Get the balance of an specified address.\n    * @param _owner The address to be query.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 value) {\n        return balances[_owner];\n    }\n\n    /**\n    * @dev transfer token to a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0)); //If you dont want that people destroy token\n        require(frozen[msg.sender]==false);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev transfer token from an address to another specified address using allowance\n    * @param _from The address where token comes.\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0)); //If you dont want that people destroy token\n        require(frozen[_from]==false);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Assign allowance to an specified address to use the owner balance\n    * @param _spender The address to be allowed to spend.\n    * @param _value The amount to be allowed.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @dev Get the allowance of an specified address to use another address balance.\n    * @param _owner The address of the owner of the tokens.\n    * @param _spender The address of the allowed spender.\n    */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Burn token of an specified address.\n    * @param _burnedAmount amount to burn.\n    */\n    function burnToken(uint256 _burnedAmount) onlyAdmin public {\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _burnedAmount);\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\n        emit Burned(msg.sender, _burnedAmount);\n    }\n\n    /**\n    * @dev Frozen account.\n    * @param _target The address to being frozen.\n    * @param _flag The frozen status to set.\n    */\n    function setFrozen(address _target,bool _flag) onlyAdmin public {\n        frozen[_target]=_flag;\n        emit FrozenStatus(_target,_flag);\n    }\n\n    /**\n    * @dev Special only admin function for batch tokens assignments.\n    * @param target Array of target addresses.\n    * @param amount Array of target values.\n    */\n    function batch(address[] target,uint256[] amount) onlyAdmin public { //It takes an array of addresses and an amount\n        require(target.length == amount.length); //data must be same size\n        uint256 size = target.length;\n        for (uint i=0; i<size; i++) { //It moves over the array\n            transfer(target[i],amount[i]); //Caller must hold needed tokens, if not it will revert\n        }\n    }\n\n    /**\n    * @dev Log Events\n    */\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burned(address indexed _target, uint256 _value);\n    event FrozenStatus(address _target,bool _flag);\n\n}\n\n/**\n* @title CNC\n* @notice CNC Token creation.\n* @dev ERC20 Token compliant\n*/\ncontract CNC is ERC20Token {\n    string public name = 'Coinyspace';\n    uint8 public decimals = 18;\n    string public symbol = 'CNC';\n    string public version = '1';\n\n    /**\n    * @notice token contructor.\n    */\n    constructor() public {\n        totalSupply = 1000000000 * 10 ** uint256(decimals); //1.000.000.000 tokens initial supply;\n        balances[msg.sender] = totalSupply;\n        emit Transfer(0, msg.sender, totalSupply);\n    }\n\n    /**\n    * @notice Function to claim any token stuck on contract\n    */\n    function externalTokensRecovery(token _address) onlyAdmin public {\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n    }\n\n\n    /**\n    * @notice this contract will revert on direct non-function calls, also it's not payable\n    * @dev Function to handle callback calls to contract\n    */\n    function() public {\n        revert();\n    }\n\n}",
  "bytecode": "60c0604052600a60808190527f436f696e7973706163650000000000000000000000000000000000000000000060a090815261003e9160059190610196565b506006805460ff191660121790556040805180820190915260038082527f434e430000000000000000000000000000000000000000000000000000000000602090920191825261009091600791610196565b506040805180820190915260018082527f310000000000000000000000000000000000000000000000000000000000000060209092019182526100d591600891610196565b503480156100e257600080fd5b5060008054600160a060020a03191633179081905560408051600160a060020a03929092168252517fa2b0867ddc9434a6620c27aae2ee7b19d3db53f3e7f059bdbecc3f2091e24f779181900360200190a160065460ff16600a0a633b9aca00026001819055336000818152600260209081526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3610231565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101d757805160ff1916838001178555610204565b82800160010185558215610204579182015b828111156102045782518255916020019190600101906101e9565b50610210929150610214565b5090565b61022e91905b80821115610210576000815560010161021a565b90565b610c24806102406000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f7578063095ea7b31461018157806318160ddd146101b957806323b872dd146101e0578063313ce5671461020a5780634c801cee1461023557806354fd4d50146102585780635be7cc161461026d57806370a082311461028e5780637b47ec1a146102af57806395d89b41146102c7578063a9059cbb146102dc578063ac869cd814610300578063c00c4e9e14610326578063dd62ed3e146103b4578063f851a440146103db575b3480156100f157600080fd5b50600080fd5b34801561010357600080fd5b5061010c61040c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014657818101518382015260200161012e565b50505050905090810190601f1680156101735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018d57600080fd5b506101a5600160a060020a036004351660243561049a565b604080519115158252519081900360200190f35b3480156101c557600080fd5b506101ce61053c565b60408051918252519081900360200190f35b3480156101ec57600080fd5b506101a5600160a060020a0360043581169060243516604435610542565b34801561021657600080fd5b5061021f61068a565b6040805160ff9092168252519081900360200190f35b34801561024157600080fd5b50610256600160a060020a0360043516610693565b005b34801561026457600080fd5b5061010c6107d4565b34801561027957600080fd5b50610256600160a060020a036004351661082f565b34801561029a57600080fd5b506101ce600160a060020a03600435166108c2565b3480156102bb57600080fd5b506102566004356108dd565b3480156102d357600080fd5b5061010c610967565b3480156102e857600080fd5b506101a5600160a060020a03600435166024356109c2565b34801561030c57600080fd5b50610256600160a060020a03600435166024351515610aa6565b34801561033257600080fd5b506040805160206004803580820135838102808601850190965280855261025695369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610b219650505050505050565b3480156103c057600080fd5b506101ce600160a060020a0360043581169060243516610b99565b3480156103e757600080fd5b506103f0610bc4565b60408051600160a060020a039092168252519081900360200190f35b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104925780601f1061046757610100808354040283529160200191610492565b820191906000526020600020905b81548152906001019060200180831161047557829003601f168201915b505050505081565b60008115806104ca5750336000908152600360209081526040808320600160a060020a0387168452909152902054155b15156104d557600080fd5b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60015481565b6000600160a060020a038316151561055957600080fd5b600160a060020a03841660009081526004602052604090205460ff161561057f57600080fd5b600160a060020a03841660009081526003602090815260408083203384529091529020546105b3908363ffffffff610bd316565b600160a060020a0385166000818152600360209081526040808320338452825280832094909455918152600290915220546105f4908363ffffffff610bd316565b600160a060020a038086166000908152600260205260408082209390935590851681522054610629908363ffffffff610be516565b600160a060020a0380851660008181526002602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60065460ff1681565b60008054600160a060020a031633146106ab57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b15801561070c57600080fd5b505af1158015610720573d6000803e3d6000fd5b505050506040513d602081101561073657600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390529051919250600160a060020a0384169163a9059cbb916044808201926020929091908290030181600087803b1580156107a457600080fd5b505af11580156107b8573d6000803e3d6000fd5b505050506040513d60208110156107ce57600080fd5b50505050565b6008805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104925780601f1061046757610100808354040283529160200191610492565b600054600160a060020a0316331461084657600080fd5b600160a060020a038116151561085b57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f4f2723059e5730f1d4ffa943789d401722067ca1121b828944c6965dbd303e08916020908290030190a150565b600160a060020a031660009081526002602052604090205490565b600054600160a060020a031633146108f457600080fd5b3360009081526002602052604090205461090e9082610bd3565b3360009081526002602052604090205560015461092b9082610bd3565b60015560408051828152905133917f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df7919081900360200190a250565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104925780601f1061046757610100808354040283529160200191610492565b6000600160a060020a03831615156109d957600080fd5b3360009081526004602052604090205460ff16156109f657600080fd5b33600090815260026020526040902054610a16908363ffffffff610bd316565b3360009081526002602052604080822092909255600160a060020a03851681522054610a48908363ffffffff610be516565b600160a060020a0384166000818152600260209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600054600160a060020a03163314610abd57600080fd5b600160a060020a038216600081815260046020908152604091829020805460ff191685151590811790915582519384529083015280517f0adeb3125cc5db4bbcd04a6ad07b095f8c5f7db710ea08e9a35481d7a4bcc4719281900390910190a15050565b600080548190600160a060020a03163314610b3b57600080fd5b8251845114610b4957600080fd5b5050815160005b818110156107ce57610b908482815181101515610b6957fe5b906020019060200201518483815181101515610b8157fe5b906020019060200201516109c2565b50600101610b50565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600054600160a060020a031681565b600082821115610bdf57fe5b50900390565b81810182811015610bf257fe5b929150505600a165627a7a723058208a739e097b3109dd75bf3a53b225447ba75afbd1be993d7592f6fba1456b48c90029"
}