{
  "address": "0x64cfc7428621b2b118896670c0b4d52ab020ee6a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AUSD",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-22\n*/\n\npragma solidity ^0.4.24;\n\n/*\n*\n*\n*     _  _   _ ___ ___    _____    _\n*    /_\\| | | / __|   \\  |_   _|__| |_____ _ _\n*   / _ \\ |_| \\__ \\ |) |   | |/ _ \\ / / -_) ' \\\n*  /_/ \\_\\___/|___/___/    |_|\\___/_\\_\\___|_||_|\n*\n*\n*\n*/\n\n// SafeMath methods\nlibrary SafeMath {\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        assert(c >= _a);\n        return c;\n    }\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        assert(_a >= _b);\n        return _a - _b;\n    }\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a * _b;\n        assert(_a == 0 || c / _a == _b);\n        return c;\n    }\n}\n\n// Contract must have an owner\ncontract Owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setOwner(address _owner) onlyOwner public {\n        owner = _owner;\n    }\n}\n\n// Standard ERC20 Token Interface\ninterface ERC20Token {\n    function name() external view returns (string name_);\n    function symbol() external view returns (string symbol_);\n    function decimals() external view returns (uint8 decimals_);\n    function totalSupply() external view returns (uint256 totalSupply_);\n    function balanceOf(address _owner) external view returns (uint256 _balance);\n    function transfer(address _to, uint256 _value) external returns (bool _success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool _success);\n    function approve(address _spender, uint256 _value) external returns (bool _success);\n    function allowance(address _owner, address _spender) external view returns (uint256 _remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// the main ERC20-compliant multi-timelock enabled contract\ncontract AUSD is Owned, ERC20Token {\n    using SafeMath for uint256;\n\n    string private constant standard = \"201811113309\";\n    string private constant version = \"6.0663600\";\n    string private name_ = \"AUSD\";\n    string private symbol_ = \"AUSD\";\n    uint8 private decimals_ = 18;\n    uint256 private totalSupply_ = uint256(20) * uint256(10)**uint256(8) * uint256(10)**uint256(decimals_);\n    mapping (address => uint256) private balanceP;\n    mapping (address => mapping (address => uint256)) private allowed;\n\n    mapping (address => uint256[]) private lockTime;\n    mapping (address => uint256[]) private lockValue;\n    mapping (address => uint256) private lockNum;\n    uint256 private later = 0;\n    uint256 private earlier = 0;\n    bool private mintable_ = true;\n\n    // burn token event\n    event Burn(address indexed _from, uint256 _value);\n\n    // mint token event\n    event Mint(address indexed _to, uint256 _value);\n\n    // timelock-related events\n    event TransferLocked(address indexed _from, address indexed _to, uint256 _time, uint256 _value);\n    event TokenUnlocked(address indexed _address, uint256 _value);\n\n    // safety method-related events\n    event WrongTokenEmptied(address indexed _token, address indexed _addr, uint256 _amount);\n    event WrongEtherEmptied(address indexed _addr, uint256 _amount);\n\n    // constructor for the ERC20 Token\n    constructor() public {\n        balanceP[msg.sender] = totalSupply_;\n    }\n\n    modifier validAddress(address _address) {\n        require(_address != 0x0);\n        _;\n    }\n\n    modifier isMintable() {\n        require(mintable_);\n        _;\n    }\n\n    // fast-forward the timelocks for all accounts\n    function setUnlockEarlier(uint256 _earlier) public onlyOwner {\n        earlier = earlier.add(_earlier);\n    }\n\n    // delay the timelocks for all accounts\n    function setUnlockLater(uint256 _later) public onlyOwner {\n        later = later.add(_later);\n    }\n\n    // owner may permanently disable minting\n    function disableMint() public onlyOwner isMintable {\n        mintable_ = false;\n    }\n\n    // show if the token is still mintable\n    function mintable() public view returns (bool) {\n        return mintable_;\n    }\n\n    // standard ERC20 name function\n    function name() public view returns (string) {\n        return name_;\n    }\n\n    // standard ERC20 symbol function\n    function symbol() public view returns (string) {\n        return symbol_;\n    }\n\n    // standard ERC20 decimals function\n    function decimals() public view returns (uint8) {\n        return decimals_;\n    }\n\n    // standard ERC20 totalSupply function\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    // standard ERC20 allowance function\n    function allowance(address _owner, address _spender) external view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    // show unlocked balance of an account\n    function balanceUnlocked(address _address) public view returns (uint256 _balance) {\n        _balance = balanceP[_address];\n        uint256 i = 0;\n        while (i < lockNum[_address]) {\n            if (now.add(earlier) >= lockTime[_address][i].add(later)) _balance = _balance.add(lockValue[_address][i]);\n            i++;\n        }\n        return _balance;\n    }\n\n    // show timelocked balance of an account\n    function balanceLocked(address _address) public view returns (uint256 _balance) {\n        _balance = 0;\n        uint256 i = 0;\n        while (i < lockNum[_address]) {\n            if (now.add(earlier) < lockTime[_address][i].add(later)) _balance = _balance.add(lockValue[_address][i]);\n            i++;\n        }\n        return  _balance;\n    }\n\n    // standard ERC20 balanceOf with timelock added\n    function balanceOf(address _address) public view returns (uint256 _balance) {\n        _balance = balanceP[_address];\n        uint256 i = 0;\n        while (i < lockNum[_address]) {\n            _balance = _balance.add(lockValue[_address][i]);\n            i++;\n        }\n        return _balance;\n    }\n\n    // show timelocks in an account\n    function showLockTimes(address _address) public view validAddress(_address) returns (uint256[] _times) {\n        uint i = 0;\n        uint256[] memory tempLockTime = new uint256[](lockNum[_address]);\n        while (i < lockNum[_address]) {\n            tempLockTime[i] = lockTime[_address][i].add(later).sub(earlier);\n            i++;\n        }\n        return tempLockTime;\n    }\n\n    // show values locked in an account's timelocks\n    function showLockValues(address _address) public view validAddress(_address) returns (uint256[] _values) {\n        return lockValue[_address];\n    }\n\n    function showLockNum(address _address) public view validAddress(_address) returns (uint256 _lockNum) {\n        return lockNum[_address];\n    }\n\n    // Calculate and process the timelock states of an account\n    function calcUnlock(address _address) private {\n        uint256 i = 0;\n        uint256 j = 0;\n        uint256[] memory currentLockTime;\n        uint256[] memory currentLockValue;\n        uint256[] memory newLockTime = new uint256[](lockNum[_address]);\n        uint256[] memory newLockValue = new uint256[](lockNum[_address]);\n        currentLockTime = lockTime[_address];\n        currentLockValue = lockValue[_address];\n        while (i < lockNum[_address]) {\n            if (now.add(earlier) >= currentLockTime[i].add(later)) {\n                balanceP[_address] = balanceP[_address].add(currentLockValue[i]);\n                emit TokenUnlocked(_address, currentLockValue[i]);\n            } else {\n                newLockTime[j] = currentLockTime[i];\n                newLockValue[j] = currentLockValue[i];\n                j++;\n            }\n            i++;\n        }\n        uint256[] memory trimLockTime = new uint256[](j);\n        uint256[] memory trimLockValue = new uint256[](j);\n        i = 0;\n        while (i < j) {\n            trimLockTime[i] = newLockTime[i];\n            trimLockValue[i] = newLockValue[i];\n            i++;\n        }\n        lockTime[_address] = trimLockTime;\n        lockValue[_address] = trimLockValue;\n        lockNum[_address] = j;\n    }\n\n    // standard ERC20 transfer\n    function transfer(address _to, uint256 _value) public validAddress(_to) returns (bool _success) {\n        if (lockNum[msg.sender] > 0) calcUnlock(msg.sender);\n        require(balanceP[msg.sender] >= _value && _value >= 0);\n        balanceP[msg.sender] = balanceP[msg.sender].sub(_value);\n        balanceP[_to] = balanceP[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    // transfer Token with timelocks\n    function transferLocked(address _to, uint256[] _time, uint256[] _value) public validAddress(_to) returns (bool _success) {\n        require(_value.length == _time.length);\n\n        if (lockNum[msg.sender] > 0) calcUnlock(msg.sender);\n        uint256 i = 0;\n        uint256 totalValue = 0;\n        while (i < _value.length) {\n            totalValue = totalValue.add(_value[i]);\n            i++;\n        }\n        require(balanceP[msg.sender] >= totalValue && totalValue >= 0);\n        require(lockNum[_to].add(_time.length) <= 42);\n        i = 0;\n        while (i < _time.length) {\n            if (_value[i] > 0) {\n                balanceP[msg.sender] = balanceP[msg.sender].sub(_value[i]);\n                lockTime[_to].length = lockNum[_to]+1;\n                lockValue[_to].length = lockNum[_to]+1;\n                lockTime[_to][lockNum[_to]] = now.add(_time[i]).add(earlier).sub(later);\n                lockValue[_to][lockNum[_to]] = _value[i];\n                lockNum[_to]++;\n            }\n\n            // emit custom TransferLocked event\n            emit TransferLocked(msg.sender, _to, _time[i], _value[i]);\n\n            // emit standard Transfer event for wallets\n            emit Transfer(msg.sender, _to, _value[i]);\n\n            i++;\n        }\n        return true;\n    }\n\n    // TransferFrom Token with timelocks\n    function transferLockedFrom(address _from, address _to, uint256[] _time, uint256[] _value) public\n\t    validAddress(_from) validAddress(_to) returns (bool success) {\n        require(_value.length == _time.length);\n\n        if (lockNum[_from] > 0) calcUnlock(_from);\n        uint256 i = 0;\n        uint256 totalValue = 0;\n        while (i < _value.length) {\n            totalValue = totalValue.add(_value[i]);\n            i++;\n        }\n        require(balanceP[_from] >= totalValue && totalValue >= 0 && allowed[_from][msg.sender] >= totalValue);\n        require(lockNum[_to].add(_time.length) <= 42);\n        i = 0;\n        while (i < _time.length) {\n            if (_value[i] > 0) {\n                balanceP[_from] = balanceP[_from].sub(_value[i]);\n                allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value[i]);\n                lockTime[_to].length = lockNum[_to]+1;\n                lockValue[_to].length = lockNum[_to]+1;\n                lockTime[_to][lockNum[_to]] = now.add(_time[i]).add(earlier).sub(later);\n                lockValue[_to][lockNum[_to]] = _value[i];\n                lockNum[_to]++;\n            }\n\n            // emit custom TransferLocked event\n            emit TransferLocked(_from, _to, _time[i], _value[i]);\n\n            // emit standard Transfer event for wallets\n            emit Transfer(_from, _to, _value[i]);\n\n            i++;\n        }\n        return true;\n    }\n\n    // standard ERC20 transferFrom\n    function transferFrom(address _from, address _to, uint256 _value) public validAddress(_from) validAddress(_to) returns (bool _success) {\n        if (lockNum[_from] > 0) calcUnlock(_from);\n        require(balanceP[_from] >= _value && _value >= 0 && allowed[_from][msg.sender] >= _value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balanceP[_from] = balanceP[_from].sub(_value);\n        balanceP[_to] = balanceP[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    // should only be called when first setting an allowed\n    function approve(address _spender, uint256 _value) public validAddress(_spender) returns (bool _success) {\n        if (lockNum[msg.sender] > 0) calcUnlock(msg.sender);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // increase or decrease allowed\n    function increaseApproval(address _spender, uint _value) public validAddress(_spender) returns (bool _success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _value) public validAddress(_spender) returns (bool _success) {\n        if(_value >= allowed[msg.sender][_spender]) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_value);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    // owner may burn own token\n    function burn(uint256 _value) public onlyOwner returns (bool _success) {\n        if (lockNum[msg.sender] > 0) calcUnlock(msg.sender);\n        require(balanceP[msg.sender] >= _value && _value >= 0);\n        balanceP[msg.sender] = balanceP[msg.sender].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    // owner may mint new token and increase total supply\n    function mint(uint256 _value) public onlyOwner isMintable returns (bool _success) {\n        balanceP[msg.sender] = balanceP[msg.sender].add(_value);\n        totalSupply_ = totalSupply_.add(_value);\n        emit Mint(msg.sender, _value);\n        return true;\n    }\n\n    // safety methods\n    function () public payable {\n        revert();\n    }\n\n    function emptyWrongToken(address _addr) onlyOwner public {\n        ERC20Token wrongToken = ERC20Token(_addr);\n        uint256 amount = wrongToken.balanceOf(address(this));\n        require(amount > 0);\n        require(wrongToken.transfer(msg.sender, amount));\n\n        emit WrongTokenEmptied(_addr, msg.sender, amount);\n    }\n\n    // shouldn't happen, just in case\n    function emptyWrongEther() onlyOwner public {\n        uint256 amount = address(this).balance;\n        require(amount > 0);\n        msg.sender.transfer(amount);\n\n        emit WrongEtherEmptied(msg.sender, amount);\n    }\n\n}",
  "bytecode": ""
}