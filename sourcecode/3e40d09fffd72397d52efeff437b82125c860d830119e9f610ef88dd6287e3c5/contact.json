{
  "address": "0x491d5bc2f3eb965f85de6bee4494b4c11d7ad012",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ValuesShare",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-05\n*/\n\npragma solidity 0.4.19;\n\ncontract Ownable {\n    address public owner;\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n}\n\ncontract ContractReceiver {\n    function tokenFallback(address _from, uint _value) public pure returns(address) {\n       if (_value != 0) return _from;\n    }\n}\n\ncontract SafeMath {\n\tuint256 constant public MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n\tfunction safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\n\t    if (x > MAX_UINT256 - y) revert();\n\t\treturn x + y;\n\t}\n\n\tfunction safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (x < y) revert();\n        return x - y;\n\t}\n\n\tfunction safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\n        if (y == 0) return 0;\n        if (x > MAX_UINT256 / y) revert();\n        return x * y;\n\t}\n}\n\ncontract ValuesShare is SafeMath, Ownable {\n\n    mapping(address => uint) public balanceOf;\n\n    string public name = \"ValuesShare\";\n    string public symbol = \"VS\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply = 39000000000000000000000000;\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Burn(address indexed from, uint256 value);\n\n    function ValuesShare() public payable { balanceOf[msg.sender] = totalSupply; }\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        if(isContract(_to)) return transferToContract(_to, _value);\n        return transferToAddress(_to, _value);\n    }\n\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly { length := extcodesize(_addr) }\n        return (length>0);\n    }\n\n    function transferToAddress(address _to, uint _value) private returns (bool success) {\n        require(getbalance(msg.sender) >= _value);\n        balanceOf[msg.sender] = safeSub(getbalance(msg.sender), _value);\n        balanceOf[_to] = safeAdd(getbalance(_to), _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferToContract(address _to, uint _value) private returns (bool success) {\n        require(getbalance(msg.sender) >= _value);\n        balanceOf[msg.sender] = safeSub(getbalance(msg.sender), _value);\n        balanceOf[_to] = safeAdd(getbalance(_to), _value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function getbalance(address _ethaddress) public view returns (uint balance) {\n        return balanceOf[_ethaddress];\n    }\n    \n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] > _value);\n\t\trequire(_value >= 0); \n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n        totalSupply = SafeMath.safeSub(totalSupply,_value); \n        Burn(msg.sender, _value);\n        return true;\n    }\n}",
  "bytecode": "606060405260408051908101604052600b81527f56616c75657353686172650000000000000000000000000000000000000000006020820152600290805161004b9291602001906100e1565b5060408051908101604052600281527f5653000000000000000000000000000000000000000000000000000000000000602082015260039080516100939291602001906100e1565b506004805460ff191660121790556a2042923c81383387000000600581905560008054600160a060020a033316600160a060020a03199091168117825581526001602052604090205561017c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012257805160ff191683800117855561014f565b8280016001018555821561014f579182015b8281111561014f578251825591602001919060010190610134565b5061015b92915061015f565b5090565b61017991905b8082111561015b5760008155600101610165565b90565b6107178061018b6000396000f3006060604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a857806318160ddd14610132578063313ce5671461015757806333a581d21461018057806342966c681461019357806368116177146101bd57806370a08231146101dc5780638da5cb5b146101fb57806395d89b411461022a578063a9059cbb1461023d575b600080fd5b34156100b357600080fd5b6100bb61025f565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100f75780820151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013d57600080fd5b6101456102fd565b60405190815260200160405180910390f35b341561016257600080fd5b61016a610303565b60405160ff909116815260200160405180910390f35b341561018b57600080fd5b61014561030c565b341561019e57600080fd5b6101a9600435610312565b604051901515815260200160405180910390f35b34156101c857600080fd5b610145600160a060020a03600435166103d6565b34156101e757600080fd5b610145600160a060020a03600435166103f1565b341561020657600080fd5b61020e610403565b604051600160a060020a03909116815260200160405180910390f35b341561023557600080fd5b6100bb610412565b341561024857600080fd5b6101a9600160a060020a036004351660243561047d565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102f55780601f106102ca576101008083540402835291602001916102f5565b820191906000526020600020905b8154815290600101906020018083116102d857829003601f168201915b505050505081565b60055481565b60045460ff1681565b60001981565b600160a060020a03331660009081526001602052604081205482901161033757600080fd5b600082101561034557600080fd5b600160a060020a03331660009081526001602052604090205461036890836104b1565b600160a060020a03331660009081526001602052604090205560055461038e90836104b1565b600555600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2506001919050565b600160a060020a031660009081526001602052604090205490565b60016020526000908152604090205481565b600054600160a060020a031681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102f55780601f106102ca576101008083540402835291602001916102f5565b6000610488836104c6565b1561049e5761049783836104ce565b90506104ab565b6104a8838361061e565b90505b92915050565b6000818310156104c057600080fd5b50900390565b6000903b1190565b600080826104db336103d6565b10156104e657600080fd5b6104f86104f2336103d6565b846104b1565b600160a060020a03331660009081526001602052604090205561052361051d856103d6565b846106d3565b600160a060020a038516600081815260016020526040808220939093558693509091633b66d02b91339187919051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156105b157600080fd5b6102c65a03f115156105c257600080fd5b505050604051805190505083600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a35060019392505050565b60008161062a336103d6565b101561063557600080fd5b610647610641336103d6565b836104b1565b600160a060020a03331660009081526001602052604090205561067261066c846103d6565b836106d3565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600081600019038311156106e657600080fd5b5001905600a165627a7a7230582043925a04e4de1dd51e1ce983cb0699e209909eabc010e9d236f8acea3ab0f6500029"
}