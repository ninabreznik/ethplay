{
  "address": "0x82cac455c38c76c9cfff761ec7ade20171817fcc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CNYG",
  "compilerVersion": "v0.5.4+commit.9549d8ff",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-08\n*/\n\npragma solidity ^0.5.4;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n\n    /// total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) view public returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n\ncontract BasicToken is ERC20 {\n    using SafeMath for uint;\n\n    mapping (address => uint256) balances; /// balance amount of tokens for address\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        // Prevent transfer to 0x0 address.\n        require(_to != address(0x0));\n        // Check if the sender has enough\n        require(balances[msg.sender] >= _value);\n        // Check for overflows\n        require(balances[_to].add(_value) > balances[_to]);\n\n        uint previousBalances = balances[msg.sender].add(balances[_to]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[msg.sender].add(balances[_to]) == previousBalances);\n\n        return true;\n    }\n\n    function balanceOf(address _owner) view public returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\ncontract CNYG is BasicToken {\n\n    function () external payable {\n        //if ether is sent to this address, send it back.\n        //throw;\n        require(false);\n    }\n\n    string public constant name = \"CNYG\";\n    string public constant symbol = \"CNYG\";\n    uint256 private constant _INITIAL_SUPPLY = 8800000000;\n    uint8 public decimals = 6;\n    uint256 public totalSupply;\n    string public version = \"CNYG 1.0\";\n\n    constructor() public {\n        // init\n        totalSupply = _INITIAL_SUPPLY * 10 ** uint256(decimals);\n        balances[msg.sender] = totalSupply;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6002805460ff1916600617905560c0604052600860808190527f434e594720312e3000000000000000000000000000000000000000000000000060a090815261004b9160049190610083565b5034801561005857600080fd5b5060025460ff16600a0a64020c8558000260038190553360009081526001602052604090205561011e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100c457805160ff19168380011785556100f1565b828001600101855582156100f1579182015b828111156100f15782518255916020019190600101906100d6565b506100fd929150610101565b5090565b61011b91905b808211156100fd5760008155600101610107565b90565b6104c98061012d6000396000f3fe60806040526004361061008d576000357c01000000000000000000000000000000000000000000000000000000009004806354fd4d501161006b57806354fd4d501461016e57806370a082311461018357806395d89b4114610092578063a9059cbb146101b65761008d565b806306fdde031461009257806318160ddd1461011c578063313ce56714610143575b600080fd5b34801561009e57600080fd5b506100a7610203565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100e15781810151838201526020016100c9565b50505050905090810190601f16801561010e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561012857600080fd5b5061013161023a565b60408051918252519081900360200190f35b34801561014f57600080fd5b50610158610240565b6040805160ff9092168252519081900360200190f35b34801561017a57600080fd5b506100a7610249565b34801561018f57600080fd5b50610131600480360360208110156101a657600080fd5b5035600160a060020a03166102d7565b3480156101c257600080fd5b506101ef600480360360408110156101d957600080fd5b50600160a060020a0381351690602001356102f2565b604080519115158252519081900360200190f35b60408051808201909152600481527f434e594700000000000000000000000000000000000000000000000000000000602082015281565b60035481565b60025460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102cf5780601f106102a4576101008083540402835291602001916102cf565b820191906000526020600020905b8154815290600101906020018083116102b257829003601f168201915b505050505081565b600160a060020a031660009081526001602052604090205490565b6000600160a060020a038316151561030957600080fd5b3360009081526001602052604090205482111561032557600080fd5b600160a060020a03831660009081526001602052604090205461034e818463ffffffff61047516565b1161035857600080fd5b600160a060020a03831660009081526001602052604080822054338352908220546103889163ffffffff61047516565b336000908152600160205260409020549091506103ab908463ffffffff61048b16565b3360009081526001602052604080822092909255600160a060020a038616815220546103dd908463ffffffff61047516565b600160a060020a0385166000818152600160209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3600160a060020a038416600090815260016020526040808220543383529120548291610464919063ffffffff61047516565b1461046b57fe5b5060019392505050565b60008282018381101561048457fe5b9392505050565b60008282111561049757fe5b5090039056fea165627a7a7230582058a008f575ad536a69d52714386d704a28cfa68972433e8f33939da363fef8160029"
}