{
  "address": "0xffe510a92434a0df346c5e72a3494b043cf249eb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LBXC",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-31\n*/\n\npragma solidity >0.4.99 <0.6.0;\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n        public view returns (uint256);\n\n    function transferFrom(address from, address to, uint256 value)\n        public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n    \n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nlibrary SafeERC20 {\n    function safeTransfer(\n        ERC20Basic _token,\n        address _to,\n        uint256 _value\n    ) internal\n    {\n        require(_token.transfer(_to, _value));\n    }\n\n    function safeTransferFrom(\n        ERC20 _token,\n        address _from,\n        address _to,\n        uint256 _value\n    ) internal\n    {\n        require(_token.transferFrom(_from, _to, _value));\n    }\n\n    function safeApprove(\n        ERC20 _token,\n        address _spender,\n        uint256 _value\n    ) internal\n    {\n        require(_token.approve(_spender, _value));\n    }\n}\n\nlibrary SafeMath {\n\t/**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if(a == 0) {\n            return 0;\n\t\t}\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n\t/**\n\t* @dev Integer division of two numbers, truncating the quotient.\n\t*/\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\t// uint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n\t/**\n\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\t*/\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\t/**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    \n    mapping(address => uint256) balances;\n    \n    uint256 totalSupply_;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        \n        emit Transfer(msg.sender, _to, _value);\n        \n        return true;\n    }\n\n\t/**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom (\n        address _from,\n        address _to,\n        uint256 _value\n    ) public returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        \n        emit Transfer(_from, _to, _value);\n        \n        return true;\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param _spender The address which will spend the funds.\n    * @param _value The amount of tokens to be spent.\n    */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        \n        emit Approval(msg.sender, _spender, _value);\n        \n        return true;\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param _owner address The address which owns the funds.\n    * @param _spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance (\n        address _owner,\n        address _spender\n\t)\n\t\tpublic\n\t\tview\n\t\treturns (uint256)\n\t{\n        return allowed[_owner][_spender];\n    }\n\n\t/**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n\t)\n\t\tpublic\n\t\treturns (bool)\n\t{\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        \n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        \n        return true;\n    }\n\n\t/**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param _spender The address which will spend the funds.\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n\t) public returns (bool)\n\t{\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n\t\t} else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t\t}\n        \n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        \n        return true;\n    }\n}\n/**\n * @title MultiOwnable\n *\n * @dev LBXC의 MultiOwnable은 히든오너, 수퍼오너, 버너, 오너, 리클레이머를 설정한다. 권한을 여러명에게 부여할 수 있는 경우\n * 리스트에 그 값을 넣어 불특정 다수가 확인 할 수 있게 한다.\n *\n * LBXC的MultiOwnable可设置HIDDENOWNER，SUPEROWNER，BURNER，OWNER及RECLAIMER。\n * 其权限可同时赋予多人的情况，在列表中放入该值后可确认其非特定的多人名单。\n *\n * MulitOwnable of LBXC sets HIDDENOWNER, SUPEROWNER, BURNER, OWNER, and RECLAIMER. \n * If many can be authorized, the value is entered to the list so that it is accessible to unspecified many.\n *\n */\ncontract MultiOwnable {\n    uint8 constant MAX_BURN = 3;\n    uint8 constant MAX_OWNER = 15;\n    address payable public hiddenOwner;\n    address payable public superOwner;\n    address payable public reclaimer;\n\n    address[MAX_BURN] public chkBurnerList;\n    address[MAX_OWNER] public chkOwnerList;\n    \n    mapping(address => bool) public burners;\n    mapping (address => bool) public owners;\n    \n    event AddedBurner(address indexed newBurner);\n    event AddedOwner(address indexed newOwner);\n    event DeletedOwner(address indexed toDeleteOwner);\n    event DeletedBurner(address indexed toDeleteBurner);\n    event ChangedReclaimer(address indexed newReclaimer);\n    event ChangedSuperOwner(address indexed newSuperOwner);\n    event ChangedHiddenOwner(address indexed newHiddenOwner);\n\n    constructor() public {\n        hiddenOwner = msg.sender;\n        superOwner = msg.sender;\n        reclaimer = msg.sender;\n        owners[msg.sender] = true;\n        chkOwnerList[0] = msg.sender;\n    }\n\n    modifier onlySuperOwner() {\n        require(superOwner == msg.sender);\n        _;\n    }\n    modifier onlyReclaimer() {\n        require(reclaimer == msg.sender);\n        _;\n    }\n    modifier onlyHiddenOwner() {\n        require(hiddenOwner == msg.sender);\n        _;\n    }\n    modifier onlyOwner() {\n        require(owners[msg.sender]);\n        _;\n    }\n    modifier onlyBurner(){\n        require(burners[msg.sender]);\n        _;\n    }\n\n    function changeSuperOwnership(address payable newSuperOwner) public onlyHiddenOwner returns(bool) {\n        require(newSuperOwner != address(0));\n        superOwner = newSuperOwner;\n        \n        emit ChangedSuperOwner(superOwner);\n        \n        return true;\n    }\n    \n    function changeHiddenOwnership(address payable newHiddenOwner) public onlyHiddenOwner returns(bool) {\n        require(newHiddenOwner != address(0));\n        hiddenOwner = newHiddenOwner;\n        \n        emit ChangedHiddenOwner(hiddenOwner);\n        \n        return true;\n    }\n    function changeReclaimer(address payable newReclaimer) public onlySuperOwner returns(bool) {\n        require(newReclaimer != address(0));\n        reclaimer = newReclaimer;\n        \n        emit ChangedReclaimer(reclaimer);\n        \n        return true;\n    }\n    function addBurner(address burner, uint8 num) public onlySuperOwner returns (bool) {\n        require(num < MAX_BURN);\n        require(burner != address(0));\n        require(chkBurnerList[num] == address(0));\n        require(burners[burner] == false);\n\n        burners[burner] = true;\n        chkBurnerList[num] = burner;\n        \n        emit AddedBurner(burner);\n        \n        return true;\n    }\n\n    function deleteBurner(address burner, uint8 num) public onlySuperOwner returns (bool){\n        require(num < MAX_BURN);\n        require(burner != address(0));\n        require(chkBurnerList[num] == burner);\n        \n        burners[burner] = false;\n\n        chkBurnerList[num] = address(0);\n        \n        emit DeletedBurner(burner);\n        \n        return true;\n    }\n\n    function addOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {        \n        require(num < MAX_OWNER);\n        require(owner != address(0));\n        require(chkOwnerList[num] == address(0));\n        require(owners[owner] == false);\n        \n        owners[owner] = true;\n        chkOwnerList[num] = owner;\n        \n        emit AddedOwner(owner);\n        \n        return true;\n    }\n\n    function deleteOwner(address owner, uint8 num) public onlySuperOwner returns (bool) {\n        require(num < MAX_OWNER);\n        require(owner != address(0));\n        require(chkOwnerList[num] == owner);\n        owners[owner] = false;\n        chkOwnerList[num] = address(0);\n        \n        emit DeletedOwner(owner);\n        \n        return true;\n    }\n}\n\n/**\n * @title HasNoEther\n */\ncontract HasNoEther is MultiOwnable {\n    using SafeERC20 for ERC20Basic;\n\n    event ReclaimToken(address _token);\n    \n    /**\n    * @dev Constructor that rejects incoming Ether\n    * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n    * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n    * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n    * we could use assembly to access msg.value.\n    */\n    constructor() public payable {\n        require(msg.value == 0);\n    }\n    /**\n    * @dev Disallows direct send by settings a default function without the `payable` flag.\n    */\n    function() external {\n    }\n    \n\n    function reclaimToken(ERC20Basic _token) external onlyReclaimer returns(bool){\n        \n        uint256 balance = _token.balanceOf(address(this));\n\n        _token.safeTransfer(superOwner, balance);\n        \n        emit ReclaimToken(address(_token));\n    \n        \n        return true;\n    }\n\n}\n\ncontract Blacklist is MultiOwnable {\n\n    mapping(address => bool) blacklisted;\n\n    event Blacklisted(address indexed blacklist);\n    event Whitelisted(address indexed whitelist);\n    \n    modifier whenPermitted(address node) {\n        require(!blacklisted[node]);\n        _;\n    }\n    \n    function isPermitted(address node) public view returns (bool) {\n        return !blacklisted[node];\n    }\n\n    function blacklist(address node) public onlyOwner returns (bool) {\n        require(!blacklisted[node]);\n        blacklisted[node] = true;\n        emit Blacklisted(node);\n\n        return blacklisted[node];\n    }\n   \n    function unblacklist(address node) public onlySuperOwner returns (bool) {\n        require(blacklisted[node]);\n        blacklisted[node] = false;\n        emit Whitelisted(node);\n\n        return blacklisted[node];\n    }\n}\n\ncontract Burnlist is Blacklist {\n    mapping(address => bool) public isburnlist;\n\n    event Burnlisted(address indexed burnlist, bool signal);\n\n    modifier isBurnlisted(address who) {\n        require(isburnlist[who]);\n        _;\n    }\n\n    function addBurnlist(address node) public onlyOwner returns (bool) {\n        require(!isburnlist[node]);\n        \n        isburnlist[node] = true;\n        \n        emit Burnlisted(node, true);\n        \n        return isburnlist[node];\n    }\n\n    function delBurnlist(address node) public onlyOwner returns (bool) {\n        require(isburnlist[node]);\n        \n        isburnlist[node] = false;\n        \n        emit Burnlisted(node, false);\n        \n        return isburnlist[node];\n    }\n}\n\n\ncontract PausableToken is StandardToken, HasNoEther, Burnlist {\n    \n    uint8 constant MAX_LOCKER = 10;\n    bool public paused = false;\n    bool public timelock = false;\n    uint256 public openingTime;\n    address[MAX_LOCKER] public chkLockerList;\n\n    mapping(address => bool) public lockerAddrs;\n    mapping(address => uint256) public lockValues;\n\n    event SetLockValues(address addr, uint256 value);\n    event OnTimeLock(address who);\n    event OffTimeLock(address who);\n    event Paused(address addr);\n    event Unpaused(address addr);\n    event AddLocker(address addr);\n    event DelLocker(address addr);\n    event OpenedTime();\n\n    constructor() public {\n        openingTime = block.timestamp;\n    }\n    \n    modifier whenNotPaused() {\n        require(!paused || owners[msg.sender]);\n        _;\n    }\n\n    function addLocker (address locker, uint8 num) public onlySuperOwner returns (bool) {\n        require(num < MAX_LOCKER);\n        require(locker != address(0));\n        require(!lockerAddrs[locker]);\n        require(chkLockerList[num] == address(0));\n\n        chkLockerList[num] = locker;\n        lockerAddrs[locker] = true;\n        \n        emit AddLocker(locker);\n\n        return lockerAddrs[locker];\n    }\n\n    function delLocker (address locker, uint8 num) public onlySuperOwner returns (bool) {\n        require(num < MAX_LOCKER);\n        require(locker != address(0));\n        require(lockerAddrs[locker]);\n        require(chkLockerList[num] == locker);\n\n        chkLockerList[num] = address(0);\n        lockerAddrs[locker] = false;\n\n        emit DelLocker(locker);\n\n        return lockerAddrs[locker];\n    }\n   \n    function pause() public onlySuperOwner returns (bool) {\n        require(!paused);\n\n        paused = true;\n        \n        emit Paused(msg.sender);\n\n        return paused;\n    }\n\n    function unpause() public onlySuperOwner returns (bool) {\n        require(paused);\n\n        paused = false;\n        \n        emit Unpaused(msg.sender);\n\n        return paused;\n    }\n\n    function onTimeLock() public onlySuperOwner returns (bool) {\n        require(!timelock);\n        timelock = true;\n        emit OnTimeLock(msg.sender);\n        \n        return timelock;\n    }\n\n    function offTimeLock() public onlySuperOwner returns (bool) {\n        require(timelock);\n        timelock = false;\n        emit OffTimeLock(msg.sender);\n        \n        return timelock;\n    }\n\n    function transfer(address to, uint256 value) public whenNotPaused whenPermitted(msg.sender) returns (bool) {\n        \n        //时间锁定的情况\n        //타임락인경우 \n        //when it is timelock\n        if(timelock) {  \n\n            //msg.sender为lockerAddrs的情况，接收者将更新被锁定的额度状态。\n            //msg.sender가 lockerAddrs인 경우, 받은 사용자의 락된 발란스 상태를 업데이트해준다.\n            //when msg.sender is lockerAddrs, the recipient’s locked balance is updated.\n            if(lockerAddrs[msg.sender]) {\n                \n                //lockerAddrs向to发送的情况，最初金额将成为lockValues。\n\t\t\t\t//lockerAddrs가 to에게 보내는 경우, 최초의 금액이 lockValues가 된다.\n                //when lockerAddrs sends to to, the initial amount becomes lockValues.\n                if(lockValues[to] == 0) {\n                    lockValues[to] = value;\n                    \n                    emit SetLockValues(to, value);\n\t\t\t\t}\n\n                return super.transfer(to, value);\n           \t\n            //发送者为非lockerAddrs的情况，\n\t\t\t//보내는 사람이 lockerAddrs가 아닌 경우\n            //when sender is not lockerAddrs\n\t\t\t} else {\n                \n                //发送者为非lockerAddrs，且存在lockValues的情况\n\t\t\t\t//보내는 사람이 lockerAddrs가 아니며, lockValues가 있는 경우 \n                //when sender is not lockerAddrs, and has lockValues\n                if(lockValues[msg.sender] > 0) {\n\n                    uint256 _totalAmount = balances[msg.sender];\n\n                    uint256 lockValue = lockValues[msg.sender].div(5);\n                    \n                    //需大于总价值value的限额（总锁定金额 - 已解锁金额）。\n                    //전체 값의 value를 제한 금액이 (전체 락된 금액 - 제한이 풀린 금액)보다 커야한다.\n                    //the amount after subtracting the total value must be greater than (total locked amount – unlocked amount).\n                    require(_totalAmount.sub(value) >= lockValues[msg.sender].sub(lockValue * _timeLimit()));\n\n                    return super.transfer(to, value);            \n\t\t\t\t\n                //发送者为非lockerAddrs，且不存在lockValues的情况\n                //보내는 사람이 lockerAddrs가 아니며, lockValues가 없는 경우\n                //when sender is not lockerAddrs, and has no lockValues\n                } else {\t \n                    return super.transfer(to, value);\n                }\n\t\t\t}\n        \n        //非时间锁定的情况\n        //타임락이 아닌 경우 \n        //when it not timelock\n        } else {\n            return super.transfer(to, value);\n        }\n    }\n\n    function transferFrom(address from, address to, uint256 value) public \n    whenNotPaused whenPermitted(from) whenPermitted(msg.sender) returns (bool) {\n        require(!lockerAddrs[from]);\n\n        if(timelock) { \n            \n            //lockValues[from]大于0的情况\n\t\t\t//lockValues[from]이 0보다 큰 경우\n            //when lockValues[from] is greater than 0\n            if(lockValues[from] > 0) {\n                \n                uint256 _totalAmount = balances[from];\n                \n                uint256 lockValue = lockValues[from].div(5);\n                \n                require(_totalAmount.sub(value) >= lockValues[from].sub(lockValue * _timeLimit()));\n\n                return super.transferFrom(from, to, value);\n\t\t\t\n            //lockValues[from]不存在的情况\n            //lockValues[from]가 없는 경우\n            //when there is no lockValues[from]\n\t\t\t} else {\n                return super.transferFrom(from, to, value);\n            }\n        \n        } else {\n            return super.transferFrom(from, to, value);\n\t\t}\n    }\n\n    function _timeLimit() internal view returns (uint256) {\n        uint256 presentTime = block.timestamp;\n        uint256 timeValue = presentTime.sub(openingTime);\n        uint256 _result = timeValue.div(31 days);\n        _result = _result.add(1);\n\n        return _result;\n    }\n\n    function setOpeningTime() public onlyHiddenOwner returns(bool) {\n        \n        openingTime = block.timestamp;\n        \n        emit OpenedTime();\n        \n        return true;\n    }\n\n    function getLimitPeriod() external view returns (uint256) {\n        uint256 presentTime = block.timestamp;\n        uint256 timeValue = presentTime.sub(openingTime);\n        uint256 result = timeValue.div(31 days);\n        result = result.add(1);\n        return result;\n    }  \n    \n    function setLockValue(address to, uint256 value) public onlyOwner returns (bool) {    \n        lockValues[to] = value;\n        \n        emit SetLockValues(to, value);\n        \n        return true;\n    }\n}\n/**\n * @title LBXC\n *\n */\ncontract LBXC is PausableToken {\n    \n    event Burn(address indexed burner, uint256 value);\n    event Mint(address indexed minter, uint256 value);\n\n    string public constant name = \"LUXBIO CELL\";\n    uint8 public constant decimals = 18;\n    string public constant symbol = \"LBXC\";\n    uint256 public constant INITIAL_SUPPLY = 1e10 * (10 ** uint256(decimals)); \n\n    constructor() public {\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        \n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n    }\n\n    function destory() public onlyHiddenOwner returns (bool) {\n        \n        selfdestruct(superOwner);\n\n        return true;\n    }\n    /**\n\t* @dev LBXC의 민트는 오직 히든오너만 실행 가능하며, 수퍼오너에게 귀속된다. \n    * 추가로 발행하려는 토큰과 기존 totalSupply_의 합이 최초 발행된 토큰의 양(INITIAL_SUPPLY)보다 클 수 없다.\n\t*\n    * LBXC的MINT只能由HIDDENOWNER进行执行，其所有权归SUPEROWNER所有。\n    * 追加进行发行的数字货币与totalSupply_的和不可大于最初发行的数字货币(INITIAL_SUPPLY)数量。\n    *\n    * Only the Hiddenowner can mint LBXC, and the minted is reverted to SUPEROWNER.\n    * The sum of additional tokens to be issued and \n    * the existing totalSupply_ cannot be greater than the initially issued token supply(INITIAL_SUPPLY).\n    */\n    function mint(uint256 _amount) public onlyHiddenOwner returns (bool) {\n        \n        require(INITIAL_SUPPLY >= totalSupply_.add(_amount));\n        \n        totalSupply_ = totalSupply_.add(_amount);\n        \n        balances[superOwner] = balances[superOwner].add(_amount);\n\n        emit Mint(superOwner, _amount);\n        \n        emit Transfer(address(0), superOwner, _amount);\n        \n        return true;\n    }\n\n    /**\n\t* @dev LBXC의 번은 오직 버너만 실행 가능하며, Owner가 등록할 수 있는 Burnlist에 등록된 계정만 토큰 번 할 수 있다.\n    * \n    * LBXC的BURN只能由BURNER进行执行，OWNER只有登记在Burnlist的账户才能对数字货币执行BURN。\n    *\n    * Only the BURNER can burn LBXC, \n    * and only the tokens that can be burned are those on Burnlist account that Owner can register.\n    */\n    function burn(address _to,uint256 _value) public onlyBurner isBurnlisted(_to) returns(bool) {\n        \n        _burn(_to, _value);\n\t\t\n        return true;\n    }\n\n    function _burn(address _who, uint256 _value) internal returns(bool){     \n        require(_value <= balances[_who]);\n        \n\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n    \n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n\t\t\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"burners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chkLockerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"addOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chkBurnerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isburnlist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"changeSuperOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setOpeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"delBurnlist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"offTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"addBurnlist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"locker\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"addLocker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"onTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHiddenOwner\",\"type\":\"address\"}],\"name\":\"changeHiddenOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLimitPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLockValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"locker\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"delLocker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reclaimer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chkOwnerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockerAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"addBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newReclaimer\",\"type\":\"address\"}],\"name\":\"changeReclaimer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hiddenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"deleteBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetLockValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"OnTimeLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"OffTimeLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"DelLocker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OpenedTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burnlist\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"signal\",\"type\":\"bool\"}],\"name\":\"Burnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blacklist\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"whitelist\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ReclaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newBurner\",\"type\":\"address\"}],\"name\":\"AddedBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toDeleteOwner\",\"type\":\"address\"}],\"name\":\"DeletedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"toDeleteBurner\",\"type\":\"address\"}],\"name\":\"DeletedBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newReclaimer\",\"type\":\"address\"}],\"name\":\"ChangedReclaimer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"ChangedSuperOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newHiddenOwner\",\"type\":\"address\"}],\"name\":\"ChangedHiddenOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": ""
}