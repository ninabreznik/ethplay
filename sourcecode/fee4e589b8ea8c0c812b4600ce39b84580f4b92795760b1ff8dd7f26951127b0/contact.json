{
  "address": "0xf7ed56c1ac4d038e367a987258b86fc883b960a1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EDCoreVersion1",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-10\n*/\n\npragma solidity ^0.4.19;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    \n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n/**\n * @title EjectableOwnable\n * @dev The EjectableOwnable contract provides the function to remove the ownership of the contract.\n */\ncontract EjectableOwnable is Ownable {\n    \n    /**\n     * @dev Remove the ownership by setting the owner address to null, \n     * after calling this function, all onlyOwner function will be be able to be called by anyone anymore, \n     * the contract will achieve truly decentralisation.\n    */\n    function removeOwnership() onlyOwner public {\n        owner = 0x0;\n    }\n    \n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n    \n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n  \n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  \n}\n\n\n/**\n * @title PullPayment\n * @dev Base contract supporting async send for pull payments. Inherit from this\n * contract and use asyncSend instead of send.\n */\ncontract PullPayment {\n    \n  using SafeMath for uint256;\n\n  mapping(address => uint256) public payments;\n  uint256 public totalPayments;\n\n  /**\n   * @dev withdraw accumulated balance, called by payee.\n   */\n  function withdrawPayments() public {\n    address payee = msg.sender;\n    uint256 payment = payments[payee];\n\n    require(payment != 0);\n    require(this.balance >= payment);\n\n    totalPayments = totalPayments.sub(payment);\n    payments[payee] = 0;\n\n    assert(payee.send(payment));\n  }\n\n  /**\n   * @dev Called by the payer to store the sent amount as credit to be pulled.\n   * @param dest The destination address of the funds.\n   * @param amount The amount to transfer.\n   */\n  function asyncSend(address dest, uint256 amount) internal {\n    payments[dest] = payments[dest].add(amount);\n    totalPayments = totalPayments.add(amount);\n  }\n  \n}\n\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n  function Destructible() public payable { }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {\n    selfdestruct(_recipient);\n  }\n  \n}\n\n\ncontract EDStructs {\n    \n    /**\n     * @dev The main Dungeon struct. Every dungeon in the game is represented by this structure.\n     * A dungeon is consists of an unlimited number of floors for your heroes to challenge, \n     * the power level of a dungeon is encoded in the floorGenes. Some dungeons are in fact more \"challenging\" than others,\n     * the secret formula for that is left for user to find out.\n     * \n     * Each dungeon also has a \"training area\", heroes can perform trainings and upgrade their stat,\n     * and some dungeons are more effective in the training, which is also a secret formula!\n     * \n     * When player challenge or do training in a dungeon, the fee will be collected as the dungeon rewards,\n     * which will be rewarded to the player who successfully challenged the current floor.\n     * \n     * Each dungeon fits in fits into three 256-bit words.\n     */\n    struct Dungeon {\n        \n        // Each dungeon has an ID which is the index in the storage array.\n\n        // The timestamp of the block when this dungeon is created.\n        uint32 creationTime;\n        \n        // The status of the dungeon, each dungeon can have 5 status, namely:\n        // 0: Active | 1: Transport Only | 2: Challenge Only | 3: Train Only | 4: InActive\n        uint8 status;\n        \n        // The dungeon's difficulty, the higher the difficulty, \n        // normally, the \"rarer\" the seedGenes, the higher the diffculty,\n        // and the higher the contribution fee it is to challenge, train, and transport to the dungeon,\n        // the formula for the contribution fee is in DungeonChallenge and DungeonTraining contracts.\n        // A dungeon's difficulty never change.\n        uint8 difficulty;\n        \n        // The dungeon's capacity, maximum number of players allowed to stay on this dungeon.\n        // The capacity of the newbie dungeon (Holyland) is set at 0 (which is infinity).\n        // Using 16-bit unsigned integers can have a maximum of 65535 in capacity.\n        // A dungeon's capacity never change.\n        uint16 capacity;\n        \n        // The current floor number, a dungeon is consists of an umlimited number of floors,\n        // when there is heroes successfully challenged a floor, the next floor will be\n        // automatically generated. Using 32-bit unsigned integer can have a maximum of 4 billion floors.\n        uint32 floorNumber;\n        \n        // The timestamp of the block when the current floor is generated.\n        uint32 floorCreationTime;\n        \n        // Current accumulated rewards, successful challenger will get a large proportion of it.\n        uint128 rewards;\n        \n        // The seed genes of the dungeon, it is used as the base gene for first floor, \n        // some dungeons are rarer and some are more common, the exact details are, \n        // of course, top secret of the game! \n        // A dungeon's seedGenes never change.\n        uint seedGenes;\n        \n        // The genes for current floor, it encodes the difficulty level of the current floor.\n        // We considered whether to store the entire array of genes for all floors, but\n        // in order to save some precious gas we're willing to sacrifice some functionalities with that.\n        uint floorGenes;\n        \n    }\n    \n    /**\n     * @dev The main Hero struct. Every hero in the game is represented by this structure.\n     */\n    struct Hero {\n\n        // Each hero has an ID which is the index in the storage array.\n        \n        // The timestamp of the block when this dungeon is created.\n        uint64 creationTime;\n        \n        // The timestamp of the block where a challenge is performed, used to calculate when a hero is allowed to engage in another challenge.\n        uint64 cooldownStartTime;\n        \n        // Every time a hero challenge a dungeon, its cooldown index will be incremented by one.\n        uint32 cooldownIndex;\n        \n        // The seed of the hero, the gene encodes the power level of the hero.\n        // This is another top secret of the game! Hero's gene can be upgraded via\n        // training in a dungeon.\n        uint genes;\n        \n    }\n    \n}\n\n\n/**\n * @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens.\n */\ncontract ERC721 {\n    \n    // Events\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\n    \n    // ERC20 compatible functions.\n    // function name() public constant returns (string);\n    // function symbol() public constant returns (string);\n    function totalSupply() public view returns (uint);\n    function balanceOf(address _owner) public view returns (uint);\n    \n    // Functions that define ownership.\n    function ownerOf(uint _tokenId) external view returns (address);\n    function transfer(address _to, uint _tokenId) external;\n    \n    // Approval related functions, mainly used in auction contracts.\n    function approve(address _to, uint _tokenId) external;\n    function approvedFor(uint _tokenId) external view returns (address);\n    function transferFrom(address _from, address _to, uint _tokenId) external;\n    \n    /**\n     * @dev Each non-fungible token owner can own more than one token at one time. \n     * Because each token is referenced by its unique ID, however, \n     * it can get difficult to keep track of the individual tokens that a user may own. \n     * To do this, the contract keeps a record of the IDs of each token that each user owns.\n     */\n    mapping(address => uint[]) public ownerTokens;\n\n}\n\n\ncontract DungeonTokenInterface is ERC721, EDStructs {\n\n    /**\n     * @notice Limits the number of dungeons the contract owner can ever create.\n     */\n    uint public constant DUNGEON_CREATION_LIMIT = 1024;\n    \n    /**\n     * @dev Name of token.\n     */\n    string public constant name = \"Dungeon\";\n    \n    /**\n     * @dev Symbol of token.\n     */\n    string public constant symbol = \"DUNG\";\n    \n    /**\n     * @dev An array containing the Dungeon struct, which contains all the dungeons in existance.\n     *  The ID for each dungeon is the index of this array.\n     */ \n    Dungeon[] public dungeons;\n\n    /**\n     * @dev The external function that creates a new dungeon and stores it, only contract owners\n     *  can create new token, and will be restricted by the DUNGEON_CREATION_LIMIT.\n     *  Will generate a Mint event, a  NewDungeonFloor event, and a Transfer event.\n     */ \n    function createDungeon(uint _difficulty, uint _capacity, uint _floorNumber, uint _seedGenes, uint _floorGenes, address _owner) external returns (uint);\n    \n    /**\n     * @dev The external function to set dungeon status by its ID, \n     *  refer to DungeonStructs for more information about dungeon status.\n     *  Only contract owners can alter dungeon state.\n     */ \n    function setDungeonStatus(uint _id, uint _newStatus) external;\n    \n    /**\n     * @dev The external function to add additional dungeon rewards by its ID, \n     *  only contract owners can alter dungeon state.\n     */ \n    function addDungeonRewards(uint _id, uint _additinalRewards) external;\n    \n    /**\n     * @dev The external function to add another dungeon floor by its ID, \n     *  only contract owners can alter dungeon state.\n     */ \n    function addDungeonNewFloor(uint _id, uint _newRewards, uint _newFloorGenes) external;\n    \n}\n\n\ncontract HeroTokenInterface is ERC721, EDStructs {\n    \n    /**\n     * @dev Name of token.\n     */\n    string public constant name = \"Hero\";\n    \n    /**\n     * @dev Symbol of token.\n     */\n    string public constant symbol = \"HERO\";\n\n    /**\n     * @dev An array containing the Hero struct, which contains all the heroes in existance.\n     *  The ID for each hero is the index of this array.\n     */ \n    Hero[] public heroes;\n\n    /**\n     * @dev An external function that creates a new hero and stores it,\n     *  only contract owners can create new token.\n     *  method doesn't do any checking and should only be called when the\n     *  input data is known to be valid.\n     * @param _genes The gene of the new hero.\n     * @param _owner The inital owner of this hero.\n     * @return The hero ID of the new hero.\n     */\n    function createHero(uint _genes, address _owner) external returns (uint);\n    \n    /**\n     * @dev The external function to set the hero genes by its ID, \n     *  only contract owners can alter hero state.\n     */ \n    function setHeroGenes(uint _id, uint _newGenes) external;\n\n    /**\n     * @dev Set the cooldownStartTime for the given hero. Also increments the cooldownIndex.\n     */\n    function triggerCooldown(uint _id) external;\n    \n}\n\n\n/**\n * SECRET\n */\ncontract ChallengeFormulaInterface {\n    \n    /**\n     * @dev given genes of current floor and dungeon seed, return a genetic combination - may have a random factor.\n     * @param _floorGenes Genes of floor.\n     * @param _seedGenes Seed genes of dungeon.\n     * @return The resulting genes.\n     */\n    function calculateResult(uint _floorGenes, uint _seedGenes) external returns (uint);\n    \n}\n\n\n/**\n * SECRET\n */\ncontract TrainingFormulaInterface {\n    \n    /**\n     * @dev given genes of hero and current floor, return a genetic combination - may have a random factor.\n     * @param _heroGenes Genes of hero.\n     * @param _floorGenes Genes of current floor.\n     * @param _equipmentId Equipment index to train for, 0 is train all attributes.\n     * @return The resulting genes.\n     */\n    function calculateResult(uint _heroGenes, uint _floorGenes, uint _equipmentId) external returns (uint);\n    \n}\n\n\n/**\n * @title EDBase\n * @dev Base contract for Ether Dungeon. It implements all necessary sub-classes,\n *  holds all the contracts, constants, game settings, storage variables, events, and some commonly used functions.\n */\ncontract EDBase is EjectableOwnable, Pausable, PullPayment, EDStructs {\n    \n    /* ======== CONTRACTS ======== */\n    \n    /// @dev The address of the ERC721 token contract managing all Dungeon tokens.\n    DungeonTokenInterface public dungeonTokenContract;\n    \n    /// @dev The address of the ERC721 token contract managing all Hero tokens.\n    HeroTokenInterface public heroTokenContract;\n    \n    /// @dev The address of the ChallengeFormula contract that handles the floor generation mechanics after challenge success.\n    ChallengeFormulaInterface challengeFormulaContract;\n    \n    /// @dev The address of the TrainingFormula contract that handles the hero training mechanics.\n    TrainingFormulaInterface trainingFormulaContract;\n    \n    \n    /* ======== CONSTANTS / GAME SETTINGS (all variables are set to constant in order to save gas) ======== */\n    \n    // 1 finney = 0.001 ether\n    // 1 szabo = 0.001 finney\n    \n    /// @dev Super Hero (full set of same-themed Rare Equipments, there are 8 in total)\n    uint public constant SUPER_HERO_MULTIPLIER = 32;\n    \n    /// @dev Ultra Hero (full set of same-themed Epic Equipments, there are 4 in total)\n    uint public constant ULTRA_HERO_MULTIPLIER = 64;\n    \n    /**\n     * @dev Mega Hero (full set of same-themed Legendary Equipments, there are 2 in total)\n     *  There are also 2 Ultimate Hero/Demon, Pangu and Chaos, which will use the MEGA_HERO_MULTIPLIER.\n     */\n    uint public constant MEGA_HERO_MULTIPLIER = 96;\n    \n    /// @dev The fee for recruiting a hero. The payment is accumulated to the rewards of the origin dungeon.\n    uint public recruitHeroFee = 2 finney;\n    \n    /**\n     * @dev The actual fee contribution required to call transport() is calculated by this feeMultiplier,\n     *  times the dungeon difficulty of destination dungeon. The payment is accumulated to the rewards of the origin dungeon,\n     *  and a large proportion will be claimed by whoever successfully challenged the floor.\n     */\n    uint public transportationFeeMultiplier = 250 szabo;\n    \n    ///@dev All hero starts in the novice dungeon, also hero can only be recruited in novice dungoen.\n    uint public noviceDungeonId = 31; // < dungeon ID 31 = Abyss\n    \n    /// @dev Amount of faith required to claim a portion of the grandConsolationRewards.\n    uint public consolationRewardsRequiredFaith = 100;\n    \n    /// @dev The percentage for which when a player can get from the grandConsolationRewards when meeting the faith requirement.\n    uint public consolationRewardsClaimPercent = 50;\n    \n    /**\n     * @dev The actual fee contribution required to call challenge() is calculated by this feeMultiplier,\n     *  times the dungeon difficulty. The payment is accumulated to the dungeon rewards, \n     *  and a large proportion will be claimed by whoever successfully challenged the floor.\n     */\n    uint public constant challengeFeeMultiplier = 1 finney;\n    \n    /**\n     * @dev The percentage for which successful challenger be rewarded of the dungeons' accumulated rewards.\n     *  The remaining rewards subtract dungeon master rewards and consolation rewards will be used as the base rewards for new floor.\n     */\n    uint public constant challengeRewardsPercent = 45;\n    \n    /**\n     * @dev The developer fee for dungeon master (owner of the dungeon token).\n     *  Note that when Ether Dungeon becomes truly decentralised, contract ownership will be ejected,\n     *  and the master rewards will be rewarded to the dungeon owner (Dungeon Masters).\n     */\n    uint public constant masterRewardsPercent = 8;\n    \n    /// @dev The percentage for which the challenge rewards is added to the grandConsolationRewards.\n    uint public consolationRewardsPercent = 2;\n    \n    /// @dev The preparation time period where a new dungeon is created, before it can be challenged.\n    uint public dungeonPreparationTime = 60 minutes;\n    \n    /// @dev The challenge rewards percentage used right after the preparation period.\n    uint public constant rushTimeChallengeRewardsPercent = 22;\n    \n    /// @dev The number of floor in which the rushTimeChallengeRewardsPercent be applied.\n    uint public constant rushTimeFloorCount = 30;\n    \n    /**\n     * @dev The actual fee contribution required to call trainX() is calculated by this feeMultiplier,\n     *  times the dungeon difficulty, times training times. The payment is accumulated to the dungeon rewards, \n     *  and a large proportion will be claimed by whoever successfully challenged the floor.\n     */\n    uint public trainingFeeMultiplier = 2 finney;\n    \n    /**\n     * @dev The actual fee contribution required to call trainEquipment() is calculated by this feeMultiplier,\n     *  times the dungeon difficulty. The payment is accumulated to the dungeon rewards.\n     *  (No preparation period discount on equipment training.)\n     */\n    uint public equipmentTrainingFeeMultiplier = 8 finney;\n    \n    /// @dev The discounted training fee multiplier to be used during preparation period.\n    uint public constant preparationPeriodTrainingFeeMultiplier = 1600 szabo;\n    \n    /// @dev The discounted equipment training fee multiplier to be used during preparation period.\n    uint public constant preparationPeriodEquipmentTrainingFeeMultiplier = 6400 szabo;\n    \n    \n    /* ======== STATE VARIABLES ======== */\n    \n    /**\n     * @dev After each successful training, do not update Hero immediately to avoid exploit.\n     *  The hero power will be auto updated during next challenge/training for any player.\n     *  Or calling the setTempHeroPower() public function directly.\n     */\n    mapping(address => uint) playerToLastActionBlockNumber;\n    uint tempSuccessTrainingHeroId;\n    uint tempSuccessTrainingNewHeroGenes = 1; // value 1 is used as no pending update\n    \n    /// @dev The total accumulated consolidation jackpot / rewards amount.\n    uint public grandConsolationRewards = 168203010964693559; // < migrated from previous contract\n    \n    /// @dev A mapping from token IDs to the address that owns them, the value can get by getPlayerDetails.\n    mapping(address => uint) playerToDungeonID;\n    \n    /// @dev A mapping from player address to the player's faith value, the value can get by getPlayerDetails.\n    mapping(address => uint) playerToFaith;\n\n    /**\n     * @dev A mapping from owner address to a boolean flag of whether the player recruited the first hero.\n     *  Note that transferring a hero from other address do not count, the value can get by getPlayerDetails.\n     */\n    mapping(address => bool) playerToFirstHeroRecruited;\n\n    /// @dev A mapping from owner address to count of tokens that address owns, the value can get by getDungeonDetails.\n    mapping(uint => uint) dungeonIdToPlayerCount;\n    \n    \n    /* ======== EVENTS ======== */\n    \n    /// @dev The PlayerTransported event is fired when user transported to another dungeon.\n    event PlayerTransported(uint timestamp, address indexed playerAddress, uint indexed originDungeonId, uint indexed destinationDungeonId);\n    \n    /// @dev The DungeonChallenged event is fired when user finished a dungeon challenge.\n    event DungeonChallenged(uint timestamp, address indexed playerAddress, uint indexed dungeonId, uint indexed heroId, uint heroGenes, uint floorNumber, uint floorGenes, bool success, uint newFloorGenes, uint successRewards, uint masterRewards);\n  \n    /// @dev The DungeonChallenged event is fired when user finished a dungeon challenge.\n    event ConsolationRewardsClaimed(uint timestamp, address indexed playerAddress, uint consolationRewards);\n  \n    /// @dev The HeroTrained event is fired when user finished a training.\n    event HeroTrained(uint timestamp, address indexed playerAddress, uint indexed dungeonId, uint indexed heroId, uint heroGenes, uint floorNumber, uint floorGenes, bool success, uint newHeroGenes);\n    \n    \n    /* ======== PUBLIC/EXTERNAL FUNCTIONS ======== */\n    \n    /**\n     * @dev Get the attributes (equipments + stats) of a hero from its gene.\n     */\n    function getHeroAttributes(uint _genes) public pure returns (uint[]) {\n        uint[] memory attributes = new uint[](12);\n        \n        for (uint i = 0; i < 12; i++) {\n            attributes[11 - i] = _genes % 32;\n            _genes /= 32 ** 4;\n        }\n        \n        return attributes;\n    }\n    \n    /**\n     * @dev Calculate the power of a hero from its gene,\n     *  it calculates the equipment power, stats power, and super hero boost.\n     */\n    function getHeroPower(uint _genes, uint _dungeonDifficulty) public pure returns (\n        uint totalPower, \n        uint equipmentPower, \n        uint statsPower, \n        bool isSuper, \n        uint superRank,\n        uint superBoost\n    ) {\n        // Individual power of each equipment.\n        // DUPLICATE CODE with _getDungeonPower: Constant array variable is not yet implemented,\n        // so need to put it here in order to save gas.\n        uint16[32] memory EQUIPMENT_POWERS = [\n            1, 2, 4, 5, 16, 17, 32, 33, // [Holy] Normal Equipments\n            8, 16, 16, 32, 32, 48, 64, 96, // [Myth] Normal Equipments\n            \n            4, 16, 32, 64, // [Holy] Rare Equipments\n            32, 48, 80, 128, // [Myth] Rare Equipments\n            \n            32, 96, // [Holy] Epic Equipments\n            80, 192, // [Myth] Epic Equipments\n            \n            192, // [Holy] Legendary Equipments\n            288, // [Myth] Legendary Equipments\n            \n            // Pangu / Chaos Legendary Equipments are reserved for far future use.\n            // Their existence is still a mystery.\n            384, // [Pangu] Legendary Equipments\n            512 // [Chaos] Legendary Equipments\n        ];\n        \n        uint[] memory attributes = getHeroAttributes(_genes);\n        \n        // Calculate total equipment power.\n        superRank = attributes[0];\n        \n        for (uint i = 0; i < 8; i++) {\n            uint equipment = attributes[i];\n            equipmentPower += EQUIPMENT_POWERS[equipment];\n            \n            // If any equipment is of difference index, set superRank to 0.\n            if (superRank != equipment) {\n                superRank = 0;\n            }\n        }\n        \n        // Calculate total stats power.\n        for (uint j = 8; j < 12; j++) {\n            // Stat power is gene number + 1.\n            statsPower += attributes[j] + 1;\n        }\n        \n        // Calculate Super/Ultra/Mega Power Boost.\n        isSuper = superRank >= 16;\n        \n        if (superRank >= 28) { // Mega Hero\n            superBoost = (_dungeonDifficulty - 1) * MEGA_HERO_MULTIPLIER;\n        } else if (superRank >= 24) { // Ultra Hero\n            superBoost = (_dungeonDifficulty - 1) * ULTRA_HERO_MULTIPLIER;\n        } else if (superRank >= 16) { // Super Hero\n            superBoost = (_dungeonDifficulty - 1) * SUPER_HERO_MULTIPLIER;\n        }\n        \n        totalPower = statsPower + equipmentPower + superBoost;\n    }\n    \n    /**\n     * @dev Calculate the power of a dungeon floor.\n     */\n    function getDungeonPower(uint _genes) public pure returns (uint) {\n        // Individual power of each equipment.\n        // DUPLICATE CODE with getHeroPower\n        uint16[32] memory EQUIPMENT_POWERS = [\n            1, 2, 4, 5, 16, 17, 32, 33, // [Holy] Normal Equipments\n            8, 16, 16, 32, 32, 48, 64, 96, // [Myth] Normal Equipments\n            \n            4, 16, 32, 64, // [Holy] Rare Equipments\n            32, 48, 80, 128, // [Myth] Rare Equipments\n            \n            32, 96, // [Holy] Epic Equipments\n            80, 192, // [Myth] Epic Equipments\n            \n            192, // [Holy] Legendary Equipments\n            288, // [Myth] Legendary Equipments\n            \n            // Pangu / Chaos Legendary Equipments are reserved for far future use.\n            // Their existence is still a mystery.\n            384, // [Pangu] Legendary Equipments\n            512 // [Chaos] Legendary Equipments\n        ];\n        \n        // Calculate total dungeon power.\n        uint dungeonPower;\n        \n        for (uint j = 0; j < 12; j++) {\n            dungeonPower += EQUIPMENT_POWERS[_genes % 32];\n            _genes /= 32 ** 4;\n        }\n        \n        return dungeonPower;\n    }\n    \n    /**\n     * @dev Calculate the sum of top 5 heroes power a player owns.\n     *  The gas usage increased with the number of heroes a player owned, roughly 500 x hero count.\n     *  This is used in transport function only to calculate the required tranport fee.\n     */\n    function calculateTop5HeroesPower(address _address, uint _dungeonId) public view returns (uint) {\n        uint heroCount = heroTokenContract.balanceOf(_address);\n        \n        if (heroCount == 0) {\n            return 0;\n        }\n        \n        // Get the dungeon difficulty to factor in the super power boost when calculating hero power.\n        uint difficulty;\n        (,, difficulty,,,,,,) = dungeonTokenContract.dungeons(_dungeonId);\n        \n        // Compute all hero powers for further calculation.\n        uint[] memory heroPowers = new uint[](heroCount);\n        \n        for (uint i = 0; i < heroCount; i++) {\n            uint heroId = heroTokenContract.ownerTokens(_address, i);\n            uint genes;\n            (,,, genes) = heroTokenContract.heroes(heroId);\n            (heroPowers[i],,,,,) = getHeroPower(genes, difficulty);\n        }\n        \n        // Calculate the top 5 heroes power.\n        uint result;\n        uint curMax;\n        uint curMaxIndex;\n        \n        for (uint j; j < 5; j++) {\n            for (uint k = 0; k < heroPowers.length; k++) {\n                if (heroPowers[k] > curMax) {\n                    curMax = heroPowers[k];\n                    curMaxIndex = k;\n                }\n            }\n            \n            result += curMax;\n            heroPowers[curMaxIndex] = 0;\n            curMax = 0;\n            curMaxIndex = 0;\n        }\n        \n        return result;\n    }\n    \n    /// @dev Set the previously temp stored upgraded hero genes. Can only be called by contract owner.\n    function setTempHeroPower() onlyOwner public {\n       _setTempHeroPower();\n    }\n    \n    \n    /* ======== SETTER FUNCTIONS ======== */\n    \n    /// @dev Set the address of the dungeon token contract.\n    function setDungeonTokenContract(address _newDungeonTokenContract) onlyOwner external {\n        dungeonTokenContract = DungeonTokenInterface(_newDungeonTokenContract);\n    }\n    \n    /// @dev Set the address of the hero token contract.\n    function setHeroTokenContract(address _newHeroTokenContract) onlyOwner external {\n        heroTokenContract = HeroTokenInterface(_newHeroTokenContract);\n    }\n    \n    /// @dev Set the address of the secret dungeon challenge formula contract.\n    function setChallengeFormulaContract(address _newChallengeFormulaAddress) onlyOwner external {\n        challengeFormulaContract = ChallengeFormulaInterface(_newChallengeFormulaAddress);\n    }\n    \n    /// @dev Set the address of the secret hero training formula contract.\n    function setTrainingFormulaContract(address _newTrainingFormulaAddress) onlyOwner external {\n        trainingFormulaContract = TrainingFormulaInterface(_newTrainingFormulaAddress);\n    }\n    \n    /// @dev Updates the fee for calling recruitHero().\n    function setRecruitHeroFee(uint _newRecruitHeroFee) onlyOwner external {\n        recruitHeroFee = _newRecruitHeroFee;\n    }\n    \n    /// @dev Updates the fee contribution multiplier required for calling transport().\n    function setTransportationFeeMultiplier(uint _newTransportationFeeMultiplier) onlyOwner external {\n        transportationFeeMultiplier = _newTransportationFeeMultiplier;\n    }\n    \n    /// @dev Updates the novice dungeon ID.\n    function setNoviceDungeonId(uint _newNoviceDungeonId) onlyOwner external {\n        noviceDungeonId = _newNoviceDungeonId;\n    }\n    \n    /// @dev Updates the required amount of faith to get a portion of the consolation rewards.\n    function setConsolationRewardsRequiredFaith(uint _newConsolationRewardsRequiredFaith) onlyOwner external {\n        consolationRewardsRequiredFaith = _newConsolationRewardsRequiredFaith;\n    }\n    \n    /// @dev Updates the percentage portion of consolation rewards a player get when meeting the faith requirement.\n    function setConsolationRewardsClaimPercent(uint _newConsolationRewardsClaimPercent) onlyOwner external {\n        consolationRewardsClaimPercent = _newConsolationRewardsClaimPercent;\n    }\n    \n    /// @dev Updates the consolation rewards percentage.\n    function setConsolationRewardsPercent(uint _newConsolationRewardsPercent) onlyOwner external {\n        consolationRewardsPercent = _newConsolationRewardsPercent;\n    }\n    \n    /// @dev Updates the challenge cooldown time.\n    function setDungeonPreparationTime(uint _newDungeonPreparationTime) onlyOwner external {\n        dungeonPreparationTime = _newDungeonPreparationTime;\n    }\n    \n    /// @dev Updates the fee contribution multiplier required for calling trainX().\n    function setTrainingFeeMultiplier(uint _newTrainingFeeMultiplier) onlyOwner external {\n        trainingFeeMultiplier = _newTrainingFeeMultiplier;\n    }\n\n    /// @dev Updates the fee contribution multiplier required for calling trainEquipment().\n    function setEquipmentTrainingFeeMultiplier(uint _newEquipmentTrainingFeeMultiplier) onlyOwner external {\n        equipmentTrainingFeeMultiplier = _newEquipmentTrainingFeeMultiplier;\n    }\n    \n    \n    /* ======== INTERNAL/PRIVATE FUNCTIONS ======== */\n    \n    /**\n     * @dev Internal function to set the previously temp stored upgraded hero genes. \n     * Every challenge/training will first call this function.\n     */\n    function _setTempHeroPower() internal {\n        // Genes of 1 is used as no pending update.\n        if (tempSuccessTrainingNewHeroGenes != 1) {\n            // ** STORAGE UPDATE **\n            heroTokenContract.setHeroGenes(tempSuccessTrainingHeroId, tempSuccessTrainingNewHeroGenes);\n            \n            // Reset the variables to indicate no pending update.\n            tempSuccessTrainingNewHeroGenes = 1;\n        }\n    }\n    \n    \n    /* ======== MODIFIERS ======== */\n    \n    /**\n     * @dev Throws if _dungeonId is not created yet.\n     */\n    modifier dungeonExists(uint _dungeonId) {\n        require(_dungeonId < dungeonTokenContract.totalSupply());\n        _;\n    }\n    \n}\n\n\ncontract EDTransportation is EDBase {\n\n    /* ======== PUBLIC/EXTERNAL FUNCTIONS ======== */\n    \n    /// @dev Recruit a new novice hero with no attributes (gene = 0).\n    function recruitHero() whenNotPaused external payable returns (uint) {\n        // Only allow recruiting hero in the novice dungeon, or first time recruiting hero.\n        require(playerToDungeonID[msg.sender] == noviceDungeonId || !playerToFirstHeroRecruited[msg.sender]);\n        \n        // Checks for payment, any exceeding funds will be transferred back to the player.\n        require(msg.value >= recruitHeroFee);\n        \n        // ** STORAGE UPDATE **\n        // Increment the accumulated rewards for the dungeon, \n        // since player can only recruit hero in the novice dungeon, rewards is added there.\n        dungeonTokenContract.addDungeonRewards(noviceDungeonId, recruitHeroFee);\n\n        // Calculate any excess funds and make it available to be withdrawed by the player.\n        asyncSend(msg.sender, msg.value - recruitHeroFee);\n        \n        // If it is the first time recruiting a hero, set the player's location to the novice dungeon.\n        if (!playerToFirstHeroRecruited[msg.sender]) {\n            // ** STORAGE UPDATE **\n            dungeonIdToPlayerCount[noviceDungeonId]++;\n            playerToDungeonID[msg.sender] = noviceDungeonId;\n            playerToFirstHeroRecruited[msg.sender] = true;\n        }\n        \n        return heroTokenContract.createHero(0, msg.sender);\n    }\n    \n    /**\n     * @dev The main external function to call when a player transport to another dungeon.\n     *  Will generate a PlayerTransported event.\n     *  Player must have at least one hero in order to perform\n     */\n    function transport(uint _destinationDungeonId) whenNotPaused dungeonCanTransport(_destinationDungeonId) playerAllowedToTransport() external payable {\n        uint originDungeonId = playerToDungeonID[msg.sender];\n        \n        // Disallow transport to the same dungeon.\n        require(_destinationDungeonId != originDungeonId);\n        \n        // Get the dungeon details from the token contract.\n        uint difficulty;\n        (,, difficulty,,,,,,) = dungeonTokenContract.dungeons(_destinationDungeonId);\n        \n        // Disallow weaker user to transport to \"difficult\" dungeon.\n        uint top5HeroesPower = calculateTop5HeroesPower(msg.sender, _destinationDungeonId);\n        require(top5HeroesPower >= difficulty * 12);\n        \n        // Checks for payment, any exceeding funds will be transferred back to the player.\n        // The transportation fee is calculated by a base fee from transportationFeeMultiplier,\n        // plus an additional fee increased with the total power of top 5 heroes owned.\n        uint baseFee = difficulty * transportationFeeMultiplier;\n        uint additionalFee = top5HeroesPower / 64 * transportationFeeMultiplier;\n        uint requiredFee = baseFee + additionalFee;\n        require(msg.value >= requiredFee);\n        \n        // ** STORAGE UPDATE **\n        // Increment the accumulated rewards for the dungeon.\n        dungeonTokenContract.addDungeonRewards(originDungeonId, requiredFee);\n\n        // Calculate any excess funds and make it available to be withdrawed by the player.\n        asyncSend(msg.sender, msg.value - requiredFee);\n\n        _transport(originDungeonId, _destinationDungeonId);\n    }\n    \n    \n    /* ======== INTERNAL/PRIVATE FUNCTIONS ======== */\n    \n    /// @dev Internal function to assigns location of a player.\n    function _transport(uint _originDungeonId, uint _destinationDungeonId) internal {\n        // ** STORAGE UPDATE **\n        // Update the dungeons' player count.\n        // Normally the player count of original dungeon will already be > 0,\n        // perform checking to avoid unexpected overflow\n        if (dungeonIdToPlayerCount[_originDungeonId] > 0) {\n            dungeonIdToPlayerCount[_originDungeonId]--;\n        }\n        \n        dungeonIdToPlayerCount[_destinationDungeonId]++;\n        \n        // ** STORAGE UPDATE **\n        // Update player location.\n        playerToDungeonID[msg.sender] = _destinationDungeonId;\n            \n        // Emit the DungeonChallenged event.\n        PlayerTransported(now, msg.sender, _originDungeonId, _destinationDungeonId);\n    }\n    \n    \n    /* ======== MODIFIERS ======== */\n    \n    /**\n     * @dev Throws if dungeon status do not allow transportation, also check for dungeon existence.\n     *  Also check if the capacity of the destination dungeon is reached.\n     */\n    modifier dungeonCanTransport(uint _destinationDungeonId) {\n        require(_destinationDungeonId < dungeonTokenContract.totalSupply());\n        \n        uint status;\n        uint capacity;\n        (, status,, capacity,,,,,) = dungeonTokenContract.dungeons(_destinationDungeonId);\n        require(status == 0 || status == 1);\n        \n        // Check if the capacity of the destination dungeon is reached.\n        // Capacity 0 = Infinity\n        require(capacity == 0 || dungeonIdToPlayerCount[_destinationDungeonId] < capacity);\n        _;\n    }\n    \n    /// @dev Throws if player did recruit first hero yet.\n    modifier playerAllowedToTransport() {\n        // Note that we check playerToFirstHeroRecruited instead of heroTokenContract.balanceOf\n        // in order to prevent \"capacity attack\".\n        require(playerToFirstHeroRecruited[msg.sender]);\n        _;\n    }\n    \n}\n\n\ncontract EDChallenge is EDTransportation {\n    \n    /* ======== PUBLIC/EXTERNAL FUNCTIONS ======== */\n    \n    /**\n     * @dev The main external function to call when a player challenge a dungeon,\n     *  it determines whether if the player successfully challenged the current floor.\n     *  Will generate a DungeonChallenged event.\n     */\n    function challenge(uint _dungeonId, uint _heroId) whenNotPaused dungeonCanChallenge(_dungeonId) heroAllowedToChallenge(_heroId) external payable {\n        // Set the last action block number, disallow player to perform another train or challenge in the same block.\n        playerToLastActionBlockNumber[msg.sender] = block.number;\n        \n        // Set the previously temp stored upgraded hero genes.\n        _setTempHeroPower();\n        \n        // Get the dungeon details from the token contract.\n        uint difficulty;\n        uint seedGenes;\n        (,, difficulty,,,,, seedGenes,) = dungeonTokenContract.dungeons(_dungeonId);\n        \n        // Checks for payment, any exceeding funds will be transferred back to the player.\n        uint requiredFee = difficulty * challengeFeeMultiplier;\n        require(msg.value >= requiredFee);\n        \n        // ** STORAGE UPDATE **\n        // Increment the accumulated rewards for the dungeon.\n        dungeonTokenContract.addDungeonRewards(_dungeonId, requiredFee);\n\n        // Calculate any excess funds and make it available to be withdrawed by the player.\n        asyncSend(msg.sender, msg.value - requiredFee);\n        \n        // Split the challenge function into multiple parts because of stack too deep error.\n        _challengePart2(_dungeonId, difficulty, _heroId);\n    }\n    \n    \n    /* ======== INTERNAL/PRIVATE FUNCTIONS ======== */\n    \n    /// @dev Compute the remaining time for which the hero can perform a challenge again.\n    function _computeCooldownRemainingTime(uint _heroId) internal view returns (uint) {\n        uint cooldownStartTime;\n        uint cooldownIndex;\n        (, cooldownStartTime, cooldownIndex,) = heroTokenContract.heroes(_heroId);\n        \n        // Cooldown period is FLOOR(challenge count / 2) ^ 2 minutes\n        uint cooldownPeriod = (cooldownIndex / 2) ** 2 * 1 minutes;\n        \n        if (cooldownPeriod > 100 minutes) {\n            cooldownPeriod = 100 minutes;\n        }\n        \n        uint cooldownEndTime = cooldownStartTime + cooldownPeriod;\n        \n        if (cooldownEndTime <= now) {\n            return 0;\n        } else {\n            return cooldownEndTime - now;\n        }\n    }\n    \n    /// @dev Split the challenge function into multiple parts because of stack too deep error.\n    function _challengePart2(uint _dungeonId, uint _dungeonDifficulty, uint _heroId) private {\n        uint floorNumber;\n        uint rewards;\n        uint floorGenes;\n        (,,,, floorNumber,, rewards,, floorGenes) = dungeonTokenContract.dungeons(_dungeonId);\n        \n        // Get the hero gene.\n        uint heroGenes;\n        (,,, heroGenes) = heroTokenContract.heroes(_heroId);\n        \n        bool success = _getChallengeSuccess(heroGenes, _dungeonDifficulty, floorGenes);\n        \n        uint newFloorGenes;\n        uint masterRewards;\n        uint consolationRewards;\n        uint successRewards;\n        uint newRewards;\n        \n        // Whether a challenge is success or not is determined by a simple comparison between hero power and floor power.\n        if (success) {\n            newFloorGenes = _getNewFloorGene(_dungeonId);\n            \n            masterRewards = rewards * masterRewardsPercent / 100;\n            \n            consolationRewards = rewards * consolationRewardsPercent / 100;\n            \n            if (floorNumber < rushTimeFloorCount) { // rush time right after prepration period\n                successRewards = rewards * rushTimeChallengeRewardsPercent / 100;\n                \n                // The dungeon rewards for new floor as total rewards - challenge rewards - devleoper fee.\n                newRewards = rewards * (100 - rushTimeChallengeRewardsPercent - masterRewardsPercent - consolationRewardsPercent) / 100;\n            } else {\n                successRewards = rewards * challengeRewardsPercent / 100;\n                newRewards = rewards * (100 - challengeRewardsPercent - masterRewardsPercent - consolationRewardsPercent) / 100;\n            }\n            \n            // TRIPLE CONFIRM sanity check.\n            require(successRewards + masterRewards + consolationRewards + newRewards <= rewards);\n            \n            // ** STORAGE UPDATE **\n            // Add the consolation rewards to grandConsolationRewards.\n            grandConsolationRewards += consolationRewards;\n            \n            // Add new floor with the new floor genes and new rewards.\n            dungeonTokenContract.addDungeonNewFloor(_dungeonId, newRewards, newFloorGenes);\n            \n            // Mark the challenge rewards available to be withdrawed by the player.\n            asyncSend(msg.sender, successRewards);\n            \n            // Mark the master rewards available to be withdrawed by the dungeon master.\n            asyncSend(dungeonTokenContract.ownerOf(_dungeonId), masterRewards);\n        }\n        \n        // ** STORAGE UPDATE **\n        // Trigger the cooldown for the hero.\n        heroTokenContract.triggerCooldown(_heroId);\n            \n        // Emit the DungeonChallenged event.\n        DungeonChallenged(now, msg.sender, _dungeonId, _heroId, heroGenes, floorNumber, floorGenes, success, newFloorGenes, successRewards, masterRewards);\n    }\n    \n    /// @dev Split the challenge function into multiple parts because of stack too deep error.\n    function _getChallengeSuccess(uint _heroGenes, uint _dungeonDifficulty, uint _floorGenes) private pure returns (bool) {\n        // Determine if the player challenge successfuly the dungeon or not.\n        uint heroPower;\n        (heroPower,,,,,) = getHeroPower(_heroGenes, _dungeonDifficulty);\n        \n        uint floorPower = getDungeonPower(_floorGenes);\n        \n        return heroPower > floorPower;\n    }\n    \n    /// @dev Split the challenge function into multiple parts because of stack too deep error.\n    function _getNewFloorGene(uint _dungeonId) private returns (uint) {\n        uint seedGenes;\n        uint floorGenes;\n        (,,,,,, seedGenes, floorGenes) = dungeonTokenContract.dungeons(_dungeonId);\n        \n        // Calculate the new floor gene.\n        uint floorPower = getDungeonPower(floorGenes);\n        \n        // Call the external closed source secret function that determines the resulting floor \"genes\".\n        uint newFloorGenes = challengeFormulaContract.calculateResult(floorGenes, seedGenes);\n        uint newFloorPower = getDungeonPower(newFloorGenes);\n        \n        // If the power decreased, rollback to the current floor genes.\n        if (newFloorPower < floorPower) {\n            newFloorGenes = floorGenes;\n        }\n        \n        return newFloorGenes;\n    }\n    \n    \n    /* ======== MODIFIERS ======== */\n    \n    /**\n     * @dev Throws if dungeon status do not allow challenge, also check for dungeon existence.\n     *  Also check if the user is in the dungeon.\n     *  Also check if the dungeon is not in preparation period.\n     */\n    modifier dungeonCanChallenge(uint _dungeonId) {\n        require(_dungeonId < dungeonTokenContract.totalSupply());\n        \n        uint creationTime;\n        uint status;\n        (creationTime, status,,,,,,,) = dungeonTokenContract.dungeons(_dungeonId);\n        require(status == 0 || status == 2);\n        \n        // Check if the user is in the dungeon.\n        require(playerToDungeonID[msg.sender] == _dungeonId);\n        \n        // Check if the dungeon is not in preparation period.\n        require(creationTime + dungeonPreparationTime <= now);\n        _;\n    }\n    \n    /**\n     * @dev Throws if player does not own the hero, or the hero is still in cooldown period,\n     *  and no pending power update.\n     */\n    modifier heroAllowedToChallenge(uint _heroId) {\n        // You can only challenge with your own hero.\n        require(heroTokenContract.ownerOf(_heroId) == msg.sender);\n        \n        // Hero must not be in cooldown period\n        uint cooldownRemainingTime = _computeCooldownRemainingTime(_heroId);\n        require(cooldownRemainingTime == 0);\n        \n        // Prevent player to perform training and challenge in the same block to avoid bot exploit.\n        require(block.number > playerToLastActionBlockNumber[msg.sender]);\n        _;\n    }\n    \n}\n\n\ncontract EDTraining is EDChallenge {\n    \n    /* ======== PUBLIC/EXTERNAL FUNCTIONS ======== */\n    \n    /**\n     * @dev The external function to call when a hero train with a dungeon,\n     *  it determines whether whether a training is successfully, and the resulting genes.\n     *  Will generate a DungeonChallenged event.\n     */\n    function train1(uint _dungeonId, uint _heroId) whenNotPaused dungeonCanTrain(_dungeonId) heroAllowedToTrain(_heroId) external payable {\n        _train(_dungeonId, _heroId, 0, 1);\n    }\n    \n    function train2(uint _dungeonId, uint _heroId) whenNotPaused dungeonCanTrain(_dungeonId) heroAllowedToTrain(_heroId) external payable {\n        _train(_dungeonId, _heroId, 0, 2);\n    }\n    \n    function train3(uint _dungeonId, uint _heroId) whenNotPaused dungeonCanTrain(_dungeonId) heroAllowedToTrain(_heroId) external payable {\n        _train(_dungeonId, _heroId, 0, 3);\n    }\n    \n    /**\n     * @dev The external function to call when a hero train a particular equipment with a dungeon,\n     *  it determines whether whether a training is successfully, and the resulting genes.\n     *  Will generate a DungeonChallenged event.\n     *  _equipmentIndex is the index of equipment: 0 is train all attributes, including equipments and stats.\n     *  1: weapon | 2: shield | 3: armor | 4: shoe | 5: helmet | 6: gloves | 7: belt | 8: shawl\n     */\n    function trainEquipment(uint _dungeonId, uint _heroId, uint _equipmentIndex) whenNotPaused dungeonCanTrain(_dungeonId) heroAllowedToTrain(_heroId) external payable {\n        require(_equipmentIndex <= 8);\n        \n        _train(_dungeonId, _heroId, _equipmentIndex, 1);\n    }\n    \n    \n    /* ======== INTERNAL/PRIVATE FUNCTIONS ======== */\n    \n    /**\n     * @dev An internal function of a hero train with dungeon,\n     *  it determines whether whether a training is successfully, and the resulting genes.\n     *  Will generate a DungeonChallenged event.\n     */\n    function _train(uint _dungeonId, uint _heroId, uint _equipmentIndex, uint _trainingTimes) private {\n        // Set the last action block number, disallow player to perform another train or challenge in the same block.\n        playerToLastActionBlockNumber[msg.sender] = block.number;\n        \n        // Set the previously temp stored upgraded hero genes.\n        _setTempHeroPower();\n        \n        // Get the dungeon details from the token contract.\n        uint creationTime;\n        uint difficulty;\n        uint floorNumber;\n        uint rewards;\n        uint seedGenes;\n        uint floorGenes;\n        (creationTime,, difficulty,, floorNumber,, rewards, seedGenes, floorGenes) = dungeonTokenContract.dungeons(_dungeonId);\n        \n        // Check for _trainingTimes abnormality, we probably won't have any feature that train a hero 10 times with a single call.\n        require(_trainingTimes < 10);\n        \n        // Checks for payment, any exceeding funds will be transferred back to the player.\n        uint requiredFee;\n        \n        // Calculate the required training fee.\n        if (now < creationTime + dungeonPreparationTime) {\n            // Apply preparation period discount. \n            if (_equipmentIndex > 0) { // train specific equipments\n                requiredFee = difficulty * preparationPeriodEquipmentTrainingFeeMultiplier * _trainingTimes;\n            } else { // train all attributes\n                requiredFee = difficulty * preparationPeriodTrainingFeeMultiplier * _trainingTimes;\n            }\n        } else {\n            if (_equipmentIndex > 0) { // train specific equipments\n                requiredFee = difficulty * equipmentTrainingFeeMultiplier * _trainingTimes;\n            } else { // train all attributes\n                requiredFee = difficulty * trainingFeeMultiplier * _trainingTimes;\n            }\n        }\n        \n        require(msg.value >= requiredFee);\n        \n        // Get the hero gene.\n        uint heroGenes;\n        (,,, heroGenes) = heroTokenContract.heroes(_heroId);\n        \n        // ** STORAGE UPDATE **\n        // Increment the accumulated rewards for the dungeon.\n        dungeonTokenContract.addDungeonRewards(_dungeonId, requiredFee);\n\n        // Calculate any excess funds and make it available to be withdrawed by the player.\n        asyncSend(msg.sender, msg.value - requiredFee);\n        \n        // Split the _train function into multiple parts because of stack too deep error.\n        _trainPart2(_dungeonId, _heroId, _equipmentIndex, _trainingTimes, difficulty, floorNumber, floorGenes, heroGenes);\n    }\n    \n    /// @dev Split the _train function into multiple parts because of Stack Too Deep error.\n    function _trainPart2(\n        uint _dungeonId,\n        uint _heroId,\n        uint _equipmentIndex,\n        uint _trainingTimes,\n        uint _dungeonDifficulty,\n        uint _floorNumber,\n        uint _floorGenes,\n        uint _heroGenes\n    ) private {\n        // Determine if the hero training is successful or not, and the resulting genes.\n        uint heroPower;\n        bool isSuper;\n        (heroPower,,, isSuper,,) = getHeroPower(_heroGenes, _dungeonDifficulty);\n        \n        uint newHeroGenes;\n        uint newHeroPower;\n        (newHeroGenes, newHeroPower) = _calculateNewHeroPower(_dungeonDifficulty, _heroGenes, _equipmentIndex, _trainingTimes, heroPower, isSuper, _floorGenes);\n\n        // Set the new hero genes if updated (sometimes there is no power increase during equipment forging).\n        if (newHeroGenes != _heroGenes) {\n            if (newHeroPower >= 256) {\n                // Do not update immediately to prevent deterministic training exploit.\n                tempSuccessTrainingHeroId = _heroId;\n                tempSuccessTrainingNewHeroGenes = newHeroGenes;\n            } else {\n                // Immediately update the genes for small power hero.\n                // ** STORAGE UPDATE **\n                heroTokenContract.setHeroGenes(_heroId, newHeroGenes);\n            }\n        }\n        \n        // Training is successful only when power increase, changing another equipment with same power is considered failure\n        // and faith will be given accordingly.\n        bool success = newHeroPower > heroPower;\n        \n        if (!success) {\n            // Handle training failure - consolation rewards mechanics.\n            _handleTrainingFailure(_equipmentIndex, _trainingTimes, _dungeonDifficulty);\n        }\n        \n        // Emit the HeroTrained event.\n        HeroTrained(now, msg.sender, _dungeonId, _heroId, _heroGenes, _floorNumber, _floorGenes, success, newHeroGenes);\n    }\n    \n    /// @dev Determine if the hero training is successful or not, and the resulting genes and power.\n    function _calculateNewHeroPower(\n        uint _dungeonDifficulty, \n        uint _heroGenes, \n        uint _equipmentIndex, \n        uint _trainingTimes, \n        uint _heroPower, \n        bool _isSuper, \n        uint _floorGenes\n    ) private returns (uint newHeroGenes, uint newHeroPower) {\n        newHeroGenes = _heroGenes;\n        newHeroPower = _heroPower;\n        bool newIsSuper = _isSuper;\n        \n        // Train the hero multiple times according to _trainingTimes, \n        // each time if the resulting power is larger, update new hero power.\n        for (uint i = 0; i < _trainingTimes; i++) {\n            // Call the external closed source secret function that determines the resulting hero \"genes\".\n            uint tmpHeroGenes = trainingFormulaContract.calculateResult(newHeroGenes, _floorGenes, _equipmentIndex);\n            \n            uint tmpHeroPower;\n            bool tmpIsSuper;\n            (tmpHeroPower,,, tmpIsSuper,,) = getHeroPower(tmpHeroGenes, _dungeonDifficulty);\n            \n            if (tmpHeroPower > newHeroPower) {\n                // Prevent Super Hero downgrade.\n                if (!(newIsSuper && !tmpIsSuper)) {\n                    newHeroGenes = tmpHeroGenes;\n                    newHeroPower = tmpHeroPower;\n                }\n            } else if (_equipmentIndex > 0 && tmpHeroPower == newHeroPower && tmpHeroGenes != newHeroGenes) {\n                // Allow Equipment Forging to replace current requipemnt with a same power equipment.\n                // The training is considered failed (faith will be given, but the equipment will change).\n                newHeroGenes = tmpHeroGenes;\n                newHeroPower = tmpHeroPower;\n            }\n        }\n    }\n    \n    /// @dev Calculate and assign the appropriate faith value to the player.\n    function _handleTrainingFailure(uint _equipmentIndex, uint _trainingTimes, uint _dungeonDifficulty) private {\n        // Failed training in a dungeon will add to player's faith value.\n        uint faith = playerToFaith[msg.sender];\n        uint faithEarned;\n        \n        if (_equipmentIndex == 0) { // Hero Training\n            // The faith earned is proportional to the training fee, i.e. _difficulty * _trainingTimes.\n            faithEarned = _dungeonDifficulty * _trainingTimes;\n        } else { // Equipment Forging\n            // Equipment Forging faith earned is only 2 times normal training, not proportional to forging fee.\n            faithEarned = _dungeonDifficulty * _trainingTimes * 2;\n        }\n        \n        uint newFaith = faith + faithEarned;\n        \n        // Hitting the required amount in faith will get a proportion of grandConsolationRewards\n        if (newFaith >= consolationRewardsRequiredFaith) {\n            uint consolationRewards = grandConsolationRewards * consolationRewardsClaimPercent / 100;\n            \n            // ** STORAGE UPDATE **\n            grandConsolationRewards -= consolationRewards;\n            \n            // Mark the consolation rewards available to be withdrawed by the player.\n            asyncSend(msg.sender, consolationRewards);\n            \n            // Reset the faith value.\n            newFaith -= consolationRewardsRequiredFaith;\n            \n            ConsolationRewardsClaimed(now, msg.sender, consolationRewards);\n        }\n        \n        // ** STORAGE UPDATE **\n        playerToFaith[msg.sender] = newFaith;\n    }\n    \n    \n    /* ======== MODIFIERS ======== */\n    \n    /**\n     * @dev Throws if dungeon status do not allow training, also check for dungeon existence.\n     *  Also check if the user is in the dungeon.\n     */\n    modifier dungeonCanTrain(uint _dungeonId) {\n        require(_dungeonId < dungeonTokenContract.totalSupply());\n        uint status;\n        (,status,,,,,,,) = dungeonTokenContract.dungeons(_dungeonId);\n        require(status == 0 || status == 3);\n        \n        // Also check if the user is in the dungeon.\n        require(playerToDungeonID[msg.sender] == _dungeonId);\n        _;\n    }\n    \n    /**\n     * @dev Throws if player does not own the hero, and no pending power update.\n     */\n    modifier heroAllowedToTrain(uint _heroId) {\n        require(heroTokenContract.ownerOf(_heroId) == msg.sender);\n        \n        // Prevent player to perform training and challenge in the same block to avoid bot exploit.\n        require(block.number > playerToLastActionBlockNumber[msg.sender]);\n        _;\n    }\n    \n}\n\n\n/**\n * @title EDCoreVersion1\n * @dev Core Contract of Ether Dungeon.\n *  When Version 2 launches, EDCoreVersion2 contract will be deployed and EDCoreVersion1 will be destroyed.\n *  Since all dungeons and heroes are stored as tokens in external contracts, they remains immutable.\n */\ncontract EDCoreVersion1 is Destructible, EDTraining {\n    \n    /**\n     * Initialize the EDCore contract with all the required contract addresses.\n     */\n    function EDCoreVersion1(\n        address _dungeonTokenAddress,\n        address _heroTokenAddress,\n        address _challengeFormulaAddress, \n        address _trainingFormulaAddress\n    ) public payable {\n        dungeonTokenContract = DungeonTokenInterface(_dungeonTokenAddress);\n        heroTokenContract = HeroTokenInterface(_heroTokenAddress);\n        challengeFormulaContract = ChallengeFormulaInterface(_challengeFormulaAddress);\n        trainingFormulaContract = TrainingFormulaInterface(_trainingFormulaAddress);\n    }\n\n    \n    /* ======== PUBLIC/EXTERNAL FUNCTIONS ======== */\n    \n    /// @dev The external function to get all the game settings in one call.\n    function getGameSettings() external view returns (\n        uint _recruitHeroFee,\n        uint _transportationFeeMultiplier,\n        uint _noviceDungeonId,\n        uint _consolationRewardsRequiredFaith,\n        uint _challengeFeeMultiplier,\n        uint _dungeonPreparationTime,\n        uint _trainingFeeMultiplier,\n        uint _equipmentTrainingFeeMultiplier,\n        uint _preparationPeriodTrainingFeeMultiplier,\n        uint _preparationPeriodEquipmentTrainingFeeMultiplier\n    ) {\n        _recruitHeroFee = recruitHeroFee;\n        _transportationFeeMultiplier = transportationFeeMultiplier;\n        _noviceDungeonId = noviceDungeonId;\n        _consolationRewardsRequiredFaith = consolationRewardsRequiredFaith;\n        _challengeFeeMultiplier = challengeFeeMultiplier;\n        _dungeonPreparationTime = dungeonPreparationTime;\n        _trainingFeeMultiplier = trainingFeeMultiplier;\n        _equipmentTrainingFeeMultiplier = equipmentTrainingFeeMultiplier;\n        _preparationPeriodTrainingFeeMultiplier = preparationPeriodTrainingFeeMultiplier;\n        _preparationPeriodEquipmentTrainingFeeMultiplier = preparationPeriodEquipmentTrainingFeeMultiplier;\n    }\n    \n    /**\n     * @dev The external function to get all the relevant information about a specific player by its address.\n     * @param _address The address of the player.\n     */\n    function getPlayerDetails(address _address) external view returns (\n        uint dungeonId, \n        uint payment, \n        uint dungeonCount, \n        uint heroCount, \n        uint faith,\n        bool firstHeroRecruited\n    ) {\n        payment = payments[_address];\n        dungeonCount = dungeonTokenContract.balanceOf(_address);\n        heroCount = heroTokenContract.balanceOf(_address);\n        faith = playerToFaith[_address];\n        firstHeroRecruited = playerToFirstHeroRecruited[_address];\n        \n        // If a player didn't recruit any hero yet, consider the player is in novice dungeon\n        if (firstHeroRecruited) {\n            dungeonId = playerToDungeonID[_address];\n        } else {\n            dungeonId = noviceDungeonId;\n        }\n    }\n    \n    /**\n     * @dev The external function to get all the relevant information about a specific dungeon by its ID.\n     * @param _id The ID of the dungeon.\n     */\n    function getDungeonDetails(uint _id) external view returns (\n        uint creationTime, \n        uint status, \n        uint difficulty, \n        uint capacity, \n        address owner, \n        bool isReady, \n        uint playerCount\n    ) {\n        require(_id < dungeonTokenContract.totalSupply());\n        \n        // Didn't get the \"floorCreationTime\" because of Stack Too Deep error.\n        (creationTime, status, difficulty, capacity,,,,,) = dungeonTokenContract.dungeons(_id);\n        \n        // Dungeon is ready to be challenged (not in preparation mode).\n        owner = dungeonTokenContract.ownerOf(_id);\n        isReady = creationTime + dungeonPreparationTime <= now;\n        playerCount = dungeonIdToPlayerCount[_id];\n    }\n    \n    /**\n     * @dev Split floor related details out of getDungeonDetails, just to avoid Stack Too Deep error.\n     * @param _id The ID of the dungeon.\n     */\n    function getDungeonFloorDetails(uint _id) external view returns (\n        uint floorNumber, \n        uint floorCreationTime, \n        uint rewards, \n        uint seedGenes, \n        uint floorGenes\n    ) {\n        require(_id < dungeonTokenContract.totalSupply());\n        \n        // Didn't get the \"floorCreationTime\" because of Stack Too Deep error.\n        (,,,, floorNumber, floorCreationTime, rewards, seedGenes, floorGenes) = dungeonTokenContract.dungeons(_id);\n    }\n\n    /**\n     * @dev The external function to get all the relevant information about a specific hero by its ID.\n     * @param _id The ID of the hero.\n     */\n    function getHeroDetails(uint _id) external view returns (\n        uint creationTime, \n        uint cooldownStartTime, \n        uint cooldownIndex, \n        uint genes, \n        address owner, \n        bool isReady, \n        uint cooldownRemainingTime\n    ) {\n        require(_id < heroTokenContract.totalSupply());\n\n        (creationTime, cooldownStartTime, cooldownIndex, genes) = heroTokenContract.heroes(_id);\n        \n        // Hero is ready to challenge (not in cooldown mode).\n        owner = heroTokenContract.ownerOf(_id);\n        cooldownRemainingTime = _computeCooldownRemainingTime(_id);\n        isReady = cooldownRemainingTime == 0;\n    }\n    \n    \n    /* ======== MIGRATION FUNCTIONS ======== */\n    \n    /**\n     * @dev Since the DungeonToken contract is re-deployed due to optimization.\n     *  We need to migrate all dungeons from Beta token contract to Version 1.\n     */\n    function migrateDungeon(uint _id, uint _playerCount) external {\n        // Migration will be finished before maintenance period ends, tx.origin is used within a short period only.\n        require(now < 1520694000 && tx.origin == 0x47169f78750Be1e6ec2DEb2974458ac4F8751714);\n        \n        dungeonIdToPlayerCount[_id] = _playerCount;\n    }\n    \n    /**\n     * @dev We need to migrate all player location from Beta token contract to Version 1.\n     */\n    function migratePlayer(address _address, uint _ownerDungeonId, uint _payment, uint _faith) external {\n        // Migration will be finished before maintenance period ends, tx.origin is used within a short period only.\n        require(now < 1520694000 && tx.origin == 0x47169f78750Be1e6ec2DEb2974458ac4F8751714);\n        \n        playerToDungeonID[_address] = _ownerDungeonId;\n        \n        if (_payment > 0) {\n            asyncSend(_address, _payment);\n        }\n        \n        if (_faith > 0) {\n            playerToFaith[_address] = _faith;\n        }\n        \n        playerToFirstHeroRecruited[_address] = true;\n    }\n    \n}",
  "bytecode": "606060409081526000805460a060020a60ff021916905566071afd498d0000600781905565e35fa931a000600855601f6009556064600a556032600b556002600c55610e10600d55600e55661c6bf526340000600f55600160125567025593bf4eb3a2376013555160808061400f8339810160405280805191906020018051919060200180519190602001805160008054600160a060020a03338116600160a060020a0319928316179092556003805498831698821698909817909755600480549682169688169690961790955560058054948616948716949094179093555050600680549290911691909216179055613f11806100fe6000396000f3006060604052600436106102e55763ffffffff60e060020a6000350416625b448781146102ea5780626919671461030f5780630b93bf0d146103225780630c17d0231461033a578063111839d51461036957806318ba69731461037c5780631cfd11d51461039b578063260fcd5d146103fa5780632e414890146104225780633350b9151461043057806336a608911461044657806339419d601461045c5780633f4ba83a1461046f5780633fc0234d146104825780634272f2d514610490578063445d9936146104a3578063463fbb76146104b6578063496fbeb3146104cc5780634b12416c146104df5780634c304c78146104fe5780634f33428a14610520578063508f46a0146105365780635661ba151461059f5780635a2f71d4146105be5780635c975abb146105d45780635ead330c146105fb5780636103d70b146106435780636438f449146106565780636999579f146106695780636c0d2c8b1461067c578063725a7eea146106ce578063730bdc96146106e1578063761bb70a146106f7578063780e4b96146107055780638015e6f31461071b57806383197ef0146107315780638456cb59146107445780638ca84d40146107575780638cf5dbc61461076a5780638d1c8048146107725780638da5cb5b1461077d578063964a4ac71461079057806397cdcbfd146107a3578063a9e899ef146107b4578063ab702d48146107c7578063ae7b1620146107d5578063b37dcce2146107e8578063b6fc276a146107fb578063b7526b791461080e578063bb57289614610827578063bbaa7a571461083a578063be523c23146108a3578063c89fcf58146108b6578063c8dd6ce7146108cc578063d10ceb4714610924578063d99bb9f71461093a578063e03cca4d1461094d578063e2982c211461096c578063eb95264c1461098b578063ed225a8a1461099e578063efb95ced146109b1578063f2fde38b146109c4578063f5074f41146109e3578063fe2450c114610a02578063fe5ff15414610a15575b600080fd5b34156102f557600080fd5b6102fd610a28565b60405190815260200160405180910390f35b341561031a57600080fd5b6102fd610a2e565b341561032d57600080fd5b610338600435610a33565b005b341561034557600080fd5b61034d610a53565b604051600160a060020a03909116815260200160405180910390f35b341561037457600080fd5b6102fd610a62565b341561038757600080fd5b610338600160a060020a0360043516610a67565b34156103a657600080fd5b6103b1600435610aa4565b60405196875260208701959095526040808701949094526060860192909252600160a060020a03166080850152151560a084015260c083019190915260e0909101905180910390f35b341561040557600080fd5b610338600160a060020a0360043516602435604435606435610c74565b610338600435602435610d26565b341561043b57600080fd5b6103386004356110f1565b341561045157600080fd5b610338600435611111565b341561046757600080fd5b6102fd611131565b341561047a57600080fd5b610338611137565b6103386004356024356111b6565b341561049b57600080fd5b61034d6113ea565b34156104ae57600080fd5b6103386113f9565b34156104c157600080fd5b61033860043561141e565b34156104d757600080fd5b6102fd61143e565b34156104ea57600080fd5b610338600160a060020a0360043516611444565b341561050957600080fd5b6102fd600160a060020a0360043516602435611481565b341561052b57600080fd5b6103386004356117ef565b341561054157600080fd5b61054961180f565b604051998a5260208a01989098526040808a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152610120830191909152610140909101905180910390f35b34156105aa57600080fd5b610338600160a060020a0360043516611849565b34156105c957600080fd5b610338600435611886565b34156105df57600080fd5b6105e76118a6565b604051901515815260200160405180910390f35b341561060657600080fd5b6106116004356118b6565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b341561064e57600080fd5b610338611a2e565b341561066157600080fd5b6102fd611ac7565b341561067457600080fd5b6102fd611acd565b341561068757600080fd5b610695600435602435611ad3565b60405195865260208601949094526040808601939093529015156060850152608084015260a083019190915260c0909101905180910390f35b34156106d957600080fd5b6102fd611d19565b34156106ec57600080fd5b6103b1600435611d1e565b610338600435602435611ec0565b341561071057600080fd5b6103386004356120ed565b341561072657600080fd5b6102fd60043561210d565b341561073c57600080fd5b61033861227f565b341561074f57600080fd5b6103386122a8565b341561076257600080fd5b6102fd61232c565b6102fd612337565b61033860043561250c565b341561078857600080fd5b61034d61286a565b341561079b57600080fd5b6102fd612879565b61033860043560243560443561287e565b34156107bf57600080fd5b6102fd612ac0565b610338600435602435612acb565b34156107e057600080fd5b6102fd612cf8565b34156107f357600080fd5b6102fd612cfd565b341561080657600080fd5b6102fd612d03565b341561081957600080fd5b610338600435602435612d0e565b341561083257600080fd5b6102fd612d5a565b341561084557600080fd5b610850600435612d60565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561088f578082015183820152602001610877565b505050509050019250505060405180910390f35b34156108ae57600080fd5b6102fd612dd6565b34156108c157600080fd5b610338600435612ddc565b34156108d757600080fd5b6108eb600160a060020a0360043516612dfc565b60405195865260208601949094526040808601939093526060850191909152608084015290151560a083015260c0909101905180910390f35b341561092f57600080fd5b610338600435612f6b565b341561094557600080fd5b610338612f8b565b341561095857600080fd5b610338600160a060020a0360043516612fb8565b341561097757600080fd5b6102fd600160a060020a0360043516612ff5565b341561099657600080fd5b6102fd613007565b34156109a957600080fd5b6102fd61300d565b34156109bc57600080fd5b6102fd613013565b34156109cf57600080fd5b610338600160a060020a0360043516613018565b34156109ee57600080fd5b610338600160a060020a03600435166130a6565b3415610a0d57600080fd5b6102fd6130cd565b3415610a2057600080fd5b6102fd6130d2565b60025481565b602081565b60005433600160a060020a03908116911614610a4e57600080fd5b600755565b600354600160a060020a031681565b601e81565b60005433600160a060020a03908116911614610a8257600080fd5b60068054600160a060020a031916600160a060020a0392909216919091179055565b600354600090819081908190819081908190600160a060020a03166318160ddd82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610afa57600080fd5b6102c65a03f11515610b0b57600080fd5b505050604051805189109050610b2057600080fd5b600354600160a060020a031663956e958a896000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b1515610b7357600080fd5b6102c65a03f11515610b8457600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051505060035463ffffffff989098169e50505060ff9485169b5050509116965061ffff169450600160a060020a0316636352211e8960006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610c2f57600080fd5b6102c65a03f11515610c4057600080fd5b5050506040518051600d5460009a8b5260176020526040909a2054989a979996989597909642908c01111595945092505050565b635aa3f2f042108015610ca357507347169f78750be1e6ec2deb2974458ac4f8751714600160a060020a033216145b1515610cae57600080fd5b600160a060020a0384166000908152601460205260408120849055821115610cda57610cda84836130d8565b6000811115610cff57600160a060020a03841660009081526015602052604090208190555b505050600160a060020a03166000908152601660205260409020805460ff19166001179055565b600080548190819060a060020a900460ff1615610d4257600080fd5b60035485906000908190600160a060020a03166318160ddd82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610d9057600080fd5b6102c65a03f11515610da157600080fd5b505050604051805184109050610db657600080fd5b600354600160a060020a031663956e958a846000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b1515610e0957600080fd5b6102c65a03f11515610e1a57600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051505063ffffffff90971698505060ff90941695505084159350839250610e7b9150505750806002145b1515610e8657600080fd5b600160a060020a0333166000908152601460205260409020548314610eaa57600080fd5b600d54429083011115610ebc57600080fd5b6004548790600090600160a060020a033381169116636352211e84846040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610f1557600080fd5b6102c65a03f11515610f2657600080fd5b50505060405180519050600160a060020a0316141515610f4557600080fd5b610f4e82613134565b90508015610f5b57600080fd5b600160a060020a0333166000908152601060205260409020544311610f7f57600080fd5b600160a060020a0333166000908152601060205260409020439055610fa2613212565b600354600160a060020a031663956e958a8b6000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b1515610ff557600080fd5b6102c65a03f1151561100657600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051505060ff9095169e50939c505066038d7ea4c680008d029a505050503488901015915061106c905057600080fd5b600354600160a060020a031663a64f829a8b8860405160e060020a63ffffffff851602815260048101929092526024820152604401600060405180830381600087803b15156110ba57600080fd5b6102c65a03f115156110cb57600080fd5b5050506110da338734036130d8565b6110e58a898b61328e565b50505050505050505050565b60005433600160a060020a0390811691161461110c57600080fd5b600d55565b60005433600160a060020a0390811691161461112c57600080fd5b600e55565b60135481565b60005433600160a060020a0390811691161461115257600080fd5b60005460a060020a900460ff16151561116a57600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60005460a060020a900460ff16156111cd57600080fd5b6003548290600090600160a060020a03166318160ddd82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561121957600080fd5b6102c65a03f1151561122a57600080fd5b50505060405180518310905061123f57600080fd5b600354600160a060020a031663956e958a836000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b151561129257600080fd5b6102c65a03f115156112a357600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051505060ff909616975050861595508594506112fb93505050505750806003145b151561130657600080fd5b600160a060020a033316600090815260146020526040902054821461132a57600080fd5b6004548390600160a060020a033381169116636352211e8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561138157600080fd5b6102c65a03f1151561139257600080fd5b50505060405180519050600160a060020a03161415156113b157600080fd5b600160a060020a03331660009081526010602052604090205443116113d557600080fd5b6113e3858560006001613695565b5050505050565b600454600160a060020a031681565b60005433600160a060020a0390811691161461141457600080fd5b61141c613212565b565b60005433600160a060020a0390811691161461143957600080fd5b600855565b60085481565b60005433600160a060020a0390811691161461145f57600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b600080600061148e613eaa565b6004546000908190819081908190819081908190600160a060020a03166370a082318f836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156114f757600080fd5b6102c65a03f1151561150857600080fd5b50505060405180519b50508a15156115235760009b506117de565b600354600160a060020a031663956e958a8e6000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b151561157657600080fd5b6102c65a03f1151561158757600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051905090919293949596975090919293949596508660ff169650909192939450909192935090919250909150905050809a50508a6040518059106115ff5750595b90808252806020026020018201604052509850600097505b8a88101561175557600454600160a060020a03166328b600318f8a60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561167e57600080fd5b6102c65a03f1151561168f57600080fd5b5050506040518051600454909850600160a060020a0316905063a8d4a03b8860006040516080015260405160e060020a63ffffffff84160281526004810191909152602401608060405180830381600087803b15156116ed57600080fd5b6102c65a03f115156116fe57600080fd5b5050506040518051906020018051906020018051906020018051995061172c93508992508d9150611ad39050565b508d93508c92508391505051811061174057fe5b60209081029091010152600190970196611617565b60058210156117da575060005b88518110156117ac578389828151811061177857fe5b9060200190602002015111156117a45788818151811061179457fe5b9060200190602002015193508092505b600101611762565b9383019360008984815181106117be57fe5b6020908102909101015260009350839250600190910190611755565b849b505b505050505050505050505092915050565b60005433600160a060020a0390811691161461180a57600080fd5b600a55565b600754600854600954600a54600d54600e54600f54959694959394929366038d7ea4c68000936605af3107a40000906616bcc41e90000090565b60005433600160a060020a0390811691161461186457600080fd5b60038054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a039081169116146118a157600080fd5b600f55565b60005460a060020a900460ff1681565b6003546000908190819081908190600160a060020a03166318160ddd82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561190857600080fd5b6102c65a03f1151561191957600080fd5b50505060405180518710905061192e57600080fd5b600354600160a060020a031663956e958a876000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b151561198157600080fd5b6102c65a03f1151561199257600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190509091929394959697509091929394959650909192939495509091929394508463ffffffff1694508363ffffffff169350826fffffffffffffffffffffffffffffffff169250809550819650829750839850849950505050505091939590929450565b33600160a060020a038116600090815260016020526040902054801515611a5457600080fd5b600160a060020a0330163181901015611a6c57600080fd5b600254611a7f908263ffffffff61394116565b600255600160a060020a0382166000818152600160205260408082209190915582156108fc0290839051600060405180830381858888f193505050501515611ac357fe5b5050565b60095481565b600b5481565b600080600080600080611ae4613ebc565b611aec613eaa565b600080600061040060405190810160409081526001825260026020808401919091526004828401819052600560608086019190915260106080808701829052601160a088015260c0808801869052602160e0890152600861010089015261012080890184905261014089018490526101608901879052610180808a0188905260306101a08b018190526101c08b018a90526101e08b01879052610200808c01989098526102208b01959095526102408a018890526102608a019890985261028089018790526102a089019390935260506102c089018190526102e089019290925261030088019590955261032087019290925261034086019190915261036085018390526103808501929092526103a08401919091526103c08301919091526103e08201529450611c1c8d612d60565b935083600081518110611c2b57fe5b906020019060200201519650600092505b6008831015611c8e57838381518110611c5157fe5b906020019060200201519150848260208110611c6957fe5b602002015161ffff169990990198868214611c8357600096505b600190920191611c3c565b5060085b600c811015611cbe57838181518110611ca757fe5b906020019060200201516001990189019801611c92565b60108710159750601c8710611cdb57606060018d03029550611d03565b60188710611cf157604060018d03029550611d03565b60108710611d0357602060018d030295505b858a8a01019a5050505050509295509295509295565b606081565b600454600090819081908190819081908190600160a060020a03166318160ddd82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611d7457600080fd5b6102c65a03f11515611d8557600080fd5b505050604051805189109050611d9a57600080fd5b600454600160a060020a031663a8d4a03b8960006040516080015260405160e060020a63ffffffff84160281526004810191909152602401608060405180830381600087803b1515611deb57600080fd5b6102c65a03f11515611dfc57600080fd5b505050604051805190602001805190602001805190602001805160045467ffffffffffffffff9586169c509390941699505063ffffffff169650909450600160a060020a0316636352211e8960006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611e8757600080fd5b6102c65a03f11515611e9857600080fd5b505050604051805190509250611ead88613134565b9050806000149150919395979092949650565b60005460a060020a900460ff1615611ed757600080fd5b6003548290600090600160a060020a03166318160ddd82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611f2357600080fd5b6102c65a03f11515611f3457600080fd5b505050604051805183109050611f4957600080fd5b600354600160a060020a031663956e958a836000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b1515611f9c57600080fd5b6102c65a03f11515611fad57600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051505060ff9096169750508615955085945061200593505050505750806003145b151561201057600080fd5b600160a060020a033316600090815260146020526040902054821461203457600080fd5b6004548390600160a060020a033381169116636352211e8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561208b57600080fd5b6102c65a03f1151561209c57600080fd5b50505060405180519050600160a060020a03161415156120bb57600080fd5b600160a060020a03331660009081526010602052604090205443116120df57600080fd5b6113e3858560006003613695565b60005433600160a060020a0390811691161461210857600080fd5b600b55565b6000612117613ebc565b60008061040060405190810160409081526001825260026020808401919091526004828401819052600560608086019190915260106080808701829052601160a088015260c0808801869052602160e0890152600861010089015261012080890184905261014089018490526101608901879052610180808a0188905260306101a08b018190526101c08b018a90526101e08b01879052610200808c01989098526102208b01959095526102408a018890526102608a019890985261028089018790526102a089019390935260506102c089018190526102e089019290925261030088019590955261032087019290925261034086019190915261036085018390526103808501929092526103a08401919091526103c08301919091526103e08201529250600090505b600c8110156122775782602086066020811061225957fe5b602002015161ffff1691909101906210000085049450600101612241565b509392505050565b60005433600160a060020a0390811691161461229a57600080fd5b600054600160a060020a0316ff5b60005433600160a060020a039081169116146122c357600080fd5b60005460a060020a900460ff16156122da57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6605af3107a4000081565b6000805460a060020a900460ff161561234f57600080fd5b600954600160a060020a03331660009081526014602052604090205414806123905750600160a060020a03331660009081526016602052604090205460ff16155b151561239b57600080fd5b6007543410156123aa57600080fd5b600354600954600754600160a060020a039092169163a64f829a919060405160e060020a63ffffffff851602815260048101929092526024820152604401600060405180830381600087803b151561240157600080fd5b6102c65a03f1151561241257600080fd5b5050506124233360075434036130d8565b600160a060020a03331660009081526016602052604090205460ff16151561248d57600980546000908152601760209081526040808320805460019081019091559354600160a060020a0333168452601483528184205560169091529020805460ff191690911790555b600454600160a060020a03166314fbc22b600033816040516020015260405160e060020a63ffffffff85160281526004810192909252600160a060020a03166024820152604401602060405180830381600087803b15156124ed57600080fd5b6102c65a03f115156124fe57600080fd5b505050604051805191505090565b600080600080600080600060149054906101000a900460ff1615151561253157600080fd5b60035487906000908190600160a060020a03166318160ddd82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561257f57600080fd5b6102c65a03f1151561259057600080fd5b5050506040518051841090506125a557600080fd5b600354600160a060020a031663956e958a846000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b15156125f857600080fd5b6102c65a03f1151561260957600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190602001805150505060ff959095169750505061ffff16935050831591508190506126665750816001145b151561267157600080fd5b80158061268c57506000838152601760205260409020548190105b151561269757600080fd5b600160a060020a03331660009081526016602052604090205460ff1615156126be57600080fd5b600160a060020a0333166000908152601460205260409020549850898914156126e657600080fd5b600354600160a060020a031663956e958a8b6000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b151561273957600080fd5b6102c65a03f1151561274a57600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051905090919293949596975090919293949596508660ff169650909192939450909192935090919250909150905050809850506127be338b611481565b9650600c88028710156127d057600080fd5b600854888102965060408804029450858501935034849010156127f257600080fd5b600354600160a060020a031663a64f829a8a8660405160e060020a63ffffffff851602815260048101929092526024820152604401600060405180830381600087803b151561284057600080fd5b6102c65a03f1151561285157600080fd5b505050612860338534036130d8565b6110e5898b613953565b600054600160a060020a031681565b604081565b60005460a060020a900460ff161561289557600080fd5b6003548390600090600160a060020a03166318160ddd82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156128e157600080fd5b6102c65a03f115156128f257600080fd5b50505060405180518310905061290757600080fd5b600354600160a060020a031663956e958a836000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b151561295a57600080fd5b6102c65a03f1151561296b57600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051505060ff909616975050861595508594506129c393505050505750806003145b15156129ce57600080fd5b600160a060020a03331660009081526014602052604090205482146129f257600080fd5b6004548490600160a060020a033381169116636352211e8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515612a4957600080fd5b6102c65a03f11515612a5a57600080fd5b50505060405180519050600160a060020a0316141515612a7957600080fd5b600160a060020a0333166000908152601060205260409020544311612a9d57600080fd5b6008841115612aab57600080fd5b612ab88686866001613695565b505050505050565b66038d7ea4c6800081565b60005460a060020a900460ff1615612ae257600080fd5b6003548290600090600160a060020a03166318160ddd82604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515612b2e57600080fd5b6102c65a03f11515612b3f57600080fd5b505050604051805183109050612b5457600080fd5b600354600160a060020a031663956e958a836000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b1515612ba757600080fd5b6102c65a03f11515612bb857600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051505060ff90961697505086159550859450612c1093505050505750806003145b1515612c1b57600080fd5b600160a060020a0333166000908152601460205260409020548214612c3f57600080fd5b6004548390600160a060020a033381169116636352211e8360006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515612c9657600080fd5b6102c65a03f11515612ca757600080fd5b50505060405180519050600160a060020a0316141515612cc657600080fd5b600160a060020a0333166000908152601060205260409020544311612cea57600080fd5b6113e3858560006002613695565b601681565b600e5481565b6616bcc41e90000081565b635aa3f2f042108015612d3d57507347169f78750be1e6ec2deb2974458ac4f8751714600160a060020a033216145b1515612d4857600080fd5b60009182526017602052604090912055565b600a5481565b612d68613eaa565b612d70613eaa565b6000600c604051805910612d815750595b90808252806020026020018201604052509150600090505b600c811015612dcf57602084068282600b0381518110612db557fe5b602090810290910101526210000084049350600101612d99565b5092915050565b600d5481565b60005433600160a060020a03908116911614612df757600080fd5b600955565b600160a060020a03808216600090815260016020526040808220546003549293909284928392839283929116906370a082319089908490516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515612e7657600080fd5b6102c65a03f11515612e8757600080fd5b5050506040518051600454909550600160a060020a031690506370a082318860006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515612eed57600080fd5b6102c65a03f11515612efe57600080fd5b5050506040518051600160a060020a038916600090815260156020908152604080832054601690925290912054919550935060ff169150508015612f5c57600160a060020a0387166000908152601460205260409020549550612f62565b60095495505b91939550919395565b60005433600160a060020a03908116911614612f8657600080fd5b600c55565b60005433600160a060020a03908116911614612fa657600080fd5b60008054600160a060020a0319169055565b60005433600160a060020a03908116911614612fd357600080fd5b60058054600160a060020a031916600160a060020a0392909216919091179055565b60016020526000908152604090205481565b600c5481565b600f5481565b600881565b60005433600160a060020a0390811691161461303357600080fd5b600160a060020a038116151561304857600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008054600160a060020a031916600160a060020a0392909216919091179055565b60005433600160a060020a039081169116146130c157600080fd5b80600160a060020a0316ff5b602d81565b60075481565b600160a060020a038216600090815260016020526040902054613101908263ffffffff6139ec16565b600160a060020a03831660009081526001602052604090205560025461312d908263ffffffff6139ec16565b6002555050565b6004546000908190819081908190600160a060020a031663a8d4a03b87836040516080015260405160e060020a63ffffffff84160281526004810191909152602401608060405180830381600087803b151561318f57600080fd5b6102c65a03f115156131a057600080fd5b5050506040518051906020018051906020018051906020018051505067ffffffffffffffff909116955063ffffffff169350600290508084040a603c0291506117708211156131ef5761177091505b508281014281116132035760009450613209565b42810394505b50505050919050565b60125460011461141c57600454601154601254600160a060020a03909216916315e839c1919060405160e060020a63ffffffff851602815260048101929092526024820152604401600060405180830381600087803b151561327357600080fd5b6102c65a03f1151561328457600080fd5b5050600160125550565b600080600080600080600080600080600360009054906101000a9004600160a060020a0316600160a060020a031663956e958a8e6000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b151561330357600080fd5b6102c65a03f1151561331457600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190509091929394959697509091929394959650909192939495509091929394508463ffffffff16945090919250826fffffffffffffffffffffffffffffffff1692509050809a50819b50829c50505050600460009054906101000a9004600160a060020a0316600160a060020a031663a8d4a03b8c60006040516080015260405160e060020a63ffffffff84160281526004810191909152602401608060405180830381600087803b151561340057600080fd5b6102c65a03f1151561341157600080fd5b50505060405180519060200180519060200180519060200180519a5061344093508a92508f91508b9050613a02565b955085156135af576134518d613a31565b9450606460088a020493506064600c548a0281151561346c57fe5b049250601e8a1015613492575050600c54606460168902819004916046038902046134a8565b5050600c546064602d890281900491602f038902045b81840183018101899011156134bc57600080fd5b6013805484019055600354600160a060020a0316630b4964a88e838860405160e060020a63ffffffff8616028152600481019390935260248301919091526044820152606401600060405180830381600087803b151561351b57600080fd5b6102c65a03f1151561352c57600080fd5b50505061353933836130d8565b6003546135af90600160a060020a0316636352211e8f60006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561358e57600080fd5b6102c65a03f1151561359f57600080fd5b50505060405180519050856130d8565b600454600160a060020a031663a540db738c60405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b15156135f757600080fd5b6102c65a03f1151561360857600080fd5b5050508a8d33600160a060020a03167f1d62a40f1930b2f52c8eb91d13d8dcd75bf8568c2d41fda621190933b1424007428b8f8e8d8d8b8e60405197885260208801969096526040808801959095526060870193909352901515608086015260a085015260c084015260e0830191909152610100909101905180910390a450505050505050505050505050565b600160a060020a0333166000908152601060205260408120439055808080808080806136bf613212565b600354600160a060020a031663956e958a8d6000604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b151561371257600080fd5b6102c65a03f1151561372357600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190508863ffffffff16985090919293949596508660ff1696509091929394508463ffffffff16945090919250826fffffffffffffffffffffffffffffffff169250809850819950829a50839b50849c50859d50505050505050600a891015156137c357600080fd5b600d5488014210156137ff5760008a11156137eb57886616bcc41e90000088020291506137fa565b886605af3107a4000088020291505b613820565b60008a11156138165788600f548802029150613820565b88600e5488020291505b348290101561382e57600080fd5b600454600160a060020a031663a8d4a03b8c60006040516080015260405160e060020a63ffffffff84160281526004810191909152602401608060405180830381600087803b151561387f57600080fd5b6102c65a03f1151561389057600080fd5b5050506040518051906020018051906020018051906020018051600354909550600160a060020a0316935063a64f829a92508f915085905060405160e060020a63ffffffff851602815260048101929092526024820152604401600060405180830381600087803b151561390357600080fd5b6102c65a03f1151561391457600080fd5b505050613923338334036130d8565b6139338c8c8c8c8b8b8988613b8b565b505050505050505050505050565b60008282111561394d57fe5b50900390565b600082815260176020526040812054111561397f57600082815260176020526040902080546000190190555b600081815260176020908152604080832080546001019055600160a060020a03331680845260149092529182902083905582918491907f32e43b5becec4a6de1c64c6f5c86d86094f8bf5a8e0c9450f7ed779b3d645d7b9042905190815260200160405180910390a45050565b6000828201838110156139fb57fe5b9392505050565b6000806000613a118686611ad3565b50939550613a25935087925061210d915050565b90911195945050505050565b60035460009081908190819081908190600160a060020a031663956e958a8883604051610120015260405160e060020a63ffffffff8416028152600481019190915260240161012060405180830381600087803b1515613a9057600080fd5b6102c65a03f11515613aa157600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051906020018051919d50909b50613af397508b965061210d95505050505050565b600554909350600160a060020a031663532af7d2858760006040516020015260405160e060020a63ffffffff851602815260048101929092526024820152604401602060405180830381600087803b1515613b4d57600080fd5b6102c65a03f11515613b5e57600080fd5b505050604051805190509150613b738261210d565b905082811015613b81578391505b5095945050505050565b6000806000806000613b9d868a611ad3565b509398509650613bb892508b91508890508d8d89898d613ccf565b9093509150858314613c3f576101008210613bdc5760118c90556012839055613c3f565b600454600160a060020a03166315e839c18d8560405160e060020a63ffffffff851602815260048101929092526024820152604401600060405180830381600087803b1515613c2a57600080fd5b6102c65a03f11515613c3b57600080fd5b5050505b5083811180613c5357613c538b8b8b613dd8565b8b8d33600160a060020a03167fc65803521ed207655f143edad7860bd56fa74d982a0f4e82fadfb074c301c795428a8d8d888b604051958652602086019490945260408086019390935260608501919091521515608084015260a083019190915260c0909101905180910390a450505050505050505050505050565b85838360008080805b8a841015613dc757600654600160a060020a031663ebe7e852888a8f60006040516020015260405160e060020a63ffffffff8616028152600481019390935260248301919091526044820152606401602060405180830381600087803b1515613d4057600080fd5b6102c65a03f11515613d5157600080fd5b505050604051805190509250613d67838f611ad3565b50939550935050505085821115613d9557848015613d83575080155b1515613d90578296508195505b613dbc565b60008c118015613da457508582145b8015613db05750868314155b15613dbc578296508195505b600190930192613cd8565b505050505097509795505050505050565b600160a060020a033316600090815260156020526040812054908080861515613e05578585029250613e0e565b85850260020292505b600a5484840192508210613e895750600b5460138054606492810292909204918290039055613e3d33826130d8565b600a548203915033600160a060020a03167f17664023a0aa0c3f08a38a0c3fa0844fc4aefd2e5a03fd16337b8142a98b10da428360405191825260208201526040908101905180910390a25b50600160a060020a0333166000908152601560205260409020555050505050565b60206040519081016040526000815290565b6104006040519081016040526020815b600081526000199091019060200181613ecc57905050905600a165627a7a723058204851119d6225d39fce4f1130c60b3b583e02951f3eb85c2007008504855a0a480029000000000000000000000000c99f359f73626e475ee86caab459a4b34ae93fea000000000000000000000000ed023b117953fcfaa92150d3ebe3e987d19563ce0000000000000000000000002d022d4b57ae5dc6c278370d049d83fad93fff1c000000000000000000000000f857f8c2fd6bdd82148165eb82172cbe6dd894e6",
  "constructorArguments": "000000000000000000000000c99f359f73626e475ee86caab459a4b34ae93fea000000000000000000000000ed023b117953fcfaa92150d3ebe3e987d19563ce0000000000000000000000002d022d4b57ae5dc6c278370d049d83fad93fff1c000000000000000000000000f857f8c2fd6bdd82148165eb82172cbe6dd894e6"
}