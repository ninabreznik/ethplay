{
  "address": "0xffa4bee0b9cd2c2e4eacb8d8f11096baa3e6c55d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WrapEtheremon",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-16\n*/\n\npragma solidity ^0.4.24;\n\ncontract BasicAccessControl {\n    address public owner;\n    // address[] public moderators;\n    uint16 public totalModerators = 0;\n    mapping (address => bool) public moderators;\n    bool public isMaintaining = false;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyModerators() {\n        require(msg.sender == owner || moderators[msg.sender] == true);\n        _;\n    }\n\n    modifier isActive {\n        require(!isMaintaining);\n        _;\n    }\n\n    function ChangeOwner(address _newOwner) public onlyOwner {\n        if (_newOwner != address(0)) {\n            owner = _newOwner;\n        }\n    }\n\n\n    function AddModerator(address _newModerator) public onlyOwner {\n        if (moderators[_newModerator] == false) {\n            moderators[_newModerator] = true;\n            totalModerators += 1;\n        }\n    }\n\n    function RemoveModerator(address _oldModerator) public onlyOwner {\n        if (moderators[_oldModerator] == true) {\n            moderators[_oldModerator] = false;\n            totalModerators -= 1;\n        }\n    }\n\n    function UpdateMaintaining(bool _isMaintaining) public onlyOwner {\n        isMaintaining = _isMaintaining;\n    }\n}\n\ninterface ERC20 {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf(address _owner) public view returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\n    function decimals() public view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract EtheremonDataBase {\n    uint64 public totalMonster;\n    uint32 public totalClass;\n\n    // write\n    function addElementToArrayType(EtheremonEnum.ArrayType _type, uint64 _id, uint8 _value) external returns(uint);\n    function addMonsterObj(uint32 _classId, address _trainer, string _name) external returns(uint64);\n    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) external;\n\n    // read\n    function getElementInArrayType(EtheremonEnum.ArrayType _type, uint64 _id, uint _index) external constant returns(uint8);\n    function getMonsterClass(uint32 _classId) external constant returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\n    function getMonsterObj(uint64 _objId) external constant returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\n}\n\ncontract EtheremonEnum {\n    enum ResultCode {\n        SUCCESS,\n        ERROR_CLASS_NOT_FOUND,\n        ERROR_LOW_BALANCE,\n        ERROR_SEND_FAIL,\n        ERROR_NOT_TRAINER,\n        ERROR_NOT_ENOUGH_MONEY,\n        ERROR_INVALID_AMOUNT\n    }\n\n    enum ArrayType {\n        CLASS_TYPE,\n        STAT_STEP,\n        STAT_START,\n        STAT_BASE,\n        OBJ_SKILL\n    }\n\n    enum PropertyType {\n        ANCESTOR,\n        XFACTOR\n    }\n}\n\ninterface EtheremonMonsterNFTInterface {\n   function triggerTransferEvent(address _from, address _to, uint _tokenId) external;\n   function getMonsterCP(uint64 _monsterId) constant external returns(uint cp);\n}\n\ncontract EtheremonWorldNFT is BasicAccessControl {\n    uint8 constant public STAT_COUNT = 6;\n    uint8 constant public STAT_MAX = 32;\n\n    struct MonsterClassAcc {\n        uint32 classId;\n        uint256 price;\n        uint256 returnPrice;\n        uint32 total;\n        bool catchable;\n    }\n\n    struct MonsterObjAcc {\n        uint64 monsterId;\n        uint32 classId;\n        address trainer;\n        string name;\n        uint32 exp;\n        uint32 createIndex;\n        uint32 lastClaimIndex;\n        uint createTime;\n    }\n\n    address public dataContract;\n    address public monsterNFT;\n\n    mapping(uint32 => bool) public classWhitelist;\n    mapping(address => bool) public addressWhitelist;\n\n    uint public gapFactor = 5;\n    uint public priceIncreasingRatio = 1000;\n\n    function setContract(address _dataContract, address _monsterNFT) external onlyModerators {\n        dataContract = _dataContract;\n        monsterNFT = _monsterNFT;\n    }\n\n    function setConfig(uint _gapFactor, uint _priceIncreasingRatio) external onlyModerators {\n        gapFactor = _gapFactor;\n        priceIncreasingRatio = _priceIncreasingRatio;\n    }\n\n    function setClassWhitelist(uint32 _classId, bool _status) external onlyModerators {\n        classWhitelist[_classId] = _status;\n    }\n\n    function setAddressWhitelist(address _smartcontract, bool _status) external onlyModerators {\n        addressWhitelist[_smartcontract] = _status;\n    }\n\n    function mintMonster(uint32 _classId, address _trainer, string _name) external onlyModerators returns(uint) {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        // add monster\n        uint64 objId = data.addMonsterObj(_classId, _trainer, _name);\n        uint8 value;\n        uint seed = getRandom(_trainer, block.number-1, objId);\n        // generate base stat for the previous one\n        for (uint i=0; i < STAT_COUNT; i += 1) {\n            seed /= 100;\n            value = uint8(seed % STAT_MAX) + data.getElementInArrayType(EtheremonEnum.ArrayType.STAT_START, uint64(_classId), i);\n            data.addElementToArrayType(EtheremonEnum.ArrayType.STAT_BASE, objId, value);\n        }\n\n        EtheremonMonsterNFTInterface(monsterNFT).triggerTransferEvent(address(0), _trainer, objId);\n        return objId;\n    }\n\n    function burnMonster(uint64 _tokenId) external onlyModerators {\n        // need to check condition before calling this function\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterObjAcc memory obj;\n        (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = data.getMonsterObj(_tokenId);\n        require(obj.trainer != address(0));\n        data.removeMonsterIdMapping(obj.trainer, _tokenId);\n        EtheremonMonsterNFTInterface(monsterNFT).triggerTransferEvent(obj.trainer, address(0), _tokenId);\n    }\n\n    function catchMonsterNFT(uint32 _classId, string _name) external isActive payable {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterClassAcc memory class;\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\n        if (class.classId == 0 || class.catchable == false) {\n            revert();\n        }\n\n        uint price = class.price;\n        if (class.total > 0)\n            price += class.price*(class.total-1)/priceIncreasingRatio;\n        if (msg.value < price) {\n            revert();\n        }\n\n        // add new monster\n        uint64 objId = data.addMonsterObj(_classId, msg.sender, _name);\n        uint8 value;\n        uint seed = getRandom(msg.sender, block.number-1, objId);\n        // generate base stat for the previous one\n        for (uint i=0; i < STAT_COUNT; i += 1) {\n            seed /= 100;\n            value = uint8(seed % STAT_MAX) + data.getElementInArrayType(EtheremonEnum.ArrayType.STAT_START, uint64(_classId), i);\n            data.addElementToArrayType(EtheremonEnum.ArrayType.STAT_BASE, objId, value);\n        }\n\n        EtheremonMonsterNFTInterface(monsterNFT).triggerTransferEvent(address(0), msg.sender, objId);\n        // refund extra\n        if (msg.value > price) {\n            msg.sender.transfer((msg.value - price));\n        }\n    }\n\n    // for whitelist contracts, no refund extra\n    function catchMonster(address _player, uint32 _classId, string _name) external isActive payable returns(uint tokenId) {\n        if (addressWhitelist[msg.sender] == false) {\n            revert();\n        }\n\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterClassAcc memory class;\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\n        if (class.classId == 0) {\n            revert();\n        }\n\n        if (class.catchable == false && classWhitelist[_classId] == false) {\n            revert();\n        }\n\n        uint price = class.price;\n        if (class.total > gapFactor) {\n            price += class.price*(class.total - gapFactor)/priceIncreasingRatio;\n        }\n        if (msg.value < price) {\n            revert();\n        }\n\n        // add new monster\n        uint64 objId = data.addMonsterObj(_classId, _player, _name);\n        uint8 value;\n        uint seed = getRandom(_player, block.number-1, objId);\n        // generate base stat for the previous one\n        for (uint i=0; i < STAT_COUNT; i += 1) {\n            seed /= 100;\n            value = uint8(seed % STAT_MAX) + data.getElementInArrayType(EtheremonEnum.ArrayType.STAT_START, uint64(_classId), i);\n            data.addElementToArrayType(EtheremonEnum.ArrayType.STAT_BASE, objId, value);\n        }\n\n        EtheremonMonsterNFTInterface(monsterNFT).triggerTransferEvent(address(0), _player, objId);\n        return objId;\n    }\n\n    function getMonsterClassBasic(uint32 _classId) external constant returns(uint256, uint256, uint256, bool) {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterClassAcc memory class;\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\n        return (class.price, class.returnPrice, class.total, class.catchable);\n    }\n\n    function getPrice(uint32 _classId) external constant returns(bool catchable, uint price) {\n        EtheremonDataBase data = EtheremonDataBase(dataContract);\n        MonsterClassAcc memory class;\n        (class.classId, class.price, class.returnPrice, class.total, class.catchable) = data.getMonsterClass(_classId);\n\n        price = class.price;\n        if (class.total > 0)\n            price += class.price*(class.total-1)/priceIncreasingRatio;\n\n        if (class.catchable == false) {\n            return (classWhitelist[_classId], price);\n        } else {\n            return (true, price);\n        }\n    }\n\n    // public api\n    function getRandom(address _player, uint _block, uint _count) public view returns(uint) {\n        return uint(keccak256(abi.encodePacked(blockhash(_block), _player, _count)));\n    }\n\n    function withdrawEther(address _sendTo, uint _amount) public onlyOwner {\n        if (_amount > address(this).balance) {\n            revert();\n        }\n        _sendTo.transfer(_amount);\n    }\n}\n\ninterface KyberNetworkProxyInterface {\n    function maxGasPrice() public view returns(uint);\n    function getUserCapInWei(address user) public view returns(uint);\n    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\n    function enabled() public view returns(bool);\n    function info(bytes32 id) public view returns(uint);\n\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\n        returns (uint expectedRate, uint slippageRate);\n\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount,\n        uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\n}\n\ncontract Utils {\n\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n    uint  constant internal PRECISION = (10**18);\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n    uint  constant internal MAX_DECIMALS = 18;\n    uint  constant internal ETH_DECIMALS = 18;\n    mapping(address=>uint) internal decimals;\n\n    function setDecimals(ERC20 token) internal {\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n        else decimals[token] = token.decimals();\n    }\n\n    function getDecimals(ERC20 token) internal view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n        uint tokenDecimals = decimals[token];\n        // technically, there might be token with decimals 0\n        // moreover, very possible that old tokens have decimals 0\n        // these tokens will just have higher gas fees.\n        if(tokenDecimals == 0) return token.decimals();\n\n        return tokenDecimals;\n    }\n\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(srcQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n        }\n    }\n\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(dstQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n        \n        //source quantity is rounded up. to avoid dest quantity being too low.\n        uint numerator;\n        uint denominator;\n        if (srcDecimals >= dstDecimals) {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n            denominator = rate;\n        } else {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty);\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n        }\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n    }\n}\n\ncontract Utils2 is Utils {\n\n    /// @dev get the balance of a user.\n    /// @param token The token type\n    /// @return The balance\n    function getBalance(ERC20 token, address user) public view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS)\n            return user.balance;\n        else\n            return token.balanceOf(user);\n    }\n\n    function getDecimalsSafe(ERC20 token) internal returns(uint) {\n\n        if (decimals[token] == 0) {\n            setDecimals(token);\n        }\n\n        return decimals[token];\n    }\n\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n    }\n\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n    }\n\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n        internal pure returns(uint)\n    {\n        require(srcAmount <= MAX_QTY);\n        require(destAmount <= MAX_QTY);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n        }\n    }\n}\n\ninterface WrapEtheremonInterface {\n    /// @notice Can only be called by operators\n    /// @dev Sets the KyberNetwork address\n    /// @param _KyberNetwork KyberNetwork contract address\n    function setKyberNetwork(address _KyberNetwork) public;\n\n    /// @dev Get the ETH price of the Etheremon monster and if it is catchable\n    /// @param _etheremon EtheremonWorldNFT address\n    /// @param _classId Class ID of monster\n    /// @param _payPrice Price of monster passed from Etheremon server\n    /// @return catchable, monsterInETH\n    function getMonsterPriceInETH(\n        EtheremonWorldNFT _etheremon,\n        uint32 _classId,\n        uint _payPrice\n    )\n        public\n        view\n        returns (\n            bool catchable,\n            uint monsterInETH\n        );\n\n    /// @dev Get the rates of the Etheremon monster\n    /// @param _kyberProxy KyberNetworkProxyInterface address\n    /// @param token ERC20 token address\n    /// @param monsterInETH Price of the monster in ETH\n    /// @return expectedRate, slippageRate\n    function getMonsterRates(\n        KyberNetworkProxyInterface _kyberProxy,\n        ERC20 token,\n        uint monsterInETH\n    )\n        public\n        view\n        returns (\n            uint expectedRate,\n            uint slippageRate\n        );\n\n    /// @dev Get the token price and rates of the Etheremon monster\n    /// @param token ERC20 token address\n    /// @param expectedRate Expected rate of ETH to token\n    /// @param monsterInETH Price of the monster in ETH\n    /// @return monsterInTokens\n    function getMonsterPriceInTokens(\n        ERC20 token,\n        uint expectedRate,\n        uint monsterInETH\n    )\n        public\n        view\n        returns (uint monsterInTokens);\n\n    /// @dev Acquires the monster from Etheremon using tokens\n    /// @param _kyberProxy KyberNetworkProxyInterface address\n    /// @param _etheremon EtheremonWorldNFT address\n    /// @param _classId Class ID of monster\n    /// @param _name Name of the monster\n    /// @param token ERC20 token address\n    /// @param tokenQty Amount of tokens to be transferred by user\n    /// @param maxDestQty Actual amount of ETH needed to purchase the monster\n    /// @param minRate The minimum rate or slippage rate.\n    /// @param walletId Wallet ID where Kyber referral fees will be sent to\n    /// @return monsterId\n    function catchMonster(\n        KyberNetworkProxyInterface _kyberProxy,\n        EtheremonWorldNFT _etheremon,\n        uint32 _classId,\n        string _name,\n        ERC20 token,\n        uint tokenQty,\n        uint maxDestQty,\n        uint minRate,\n        address walletId\n    )\n        public\n        returns (uint monsterId);\n}\n\ncontract WrapEtheremonPermissions {\n    event TransferAdmin(address newAdmin);\n    event OperatorAdded(address newOperator, bool isAdd);\n\n    address public admin;\n    address[] public operatorsGroup;\n    mapping(address=>bool) internal operators;\n    uint constant internal MAX_GROUP_SIZE = 50;\n\n    constructor () public {\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operators[msg.sender]);\n        _;\n    }\n\n    function transferAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        emit TransferAdmin(newAdmin);\n        admin = newAdmin;\n    }\n\n    function addOperator(address newOperator) public onlyAdmin {\n        require(!operators[newOperator]);\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\n\n        emit OperatorAdded(newOperator, true);\n        operators[newOperator] = true;\n        operatorsGroup.push(newOperator);\n    }\n\n    function removeOperator (address operator) public onlyAdmin {\n        require(operators[operator]);\n        operators[operator] = false;\n\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\n            if (operatorsGroup[i] == operator) {\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n                operatorsGroup.length -= 1;\n                emit OperatorAdded(operator, false);\n                break;\n            }\n        }\n    }\n}\n\ncontract WrapEtheremon is WrapEtheremonInterface, WrapEtheremonPermissions, Utils2 {\n    event SwapTokenChange(uint startTokenBalance, uint change);\n    event CaughtWithToken(address indexed sender, uint monsterId, ERC20 token, uint amount);\n    event ETHReceived(address indexed sender, uint amount);\n\n    address public KyberNetwork;\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n\n    /// @dev Contract contstructor\n    /// @param _KyberNetwork KyberNetwork main contract address\n    constructor (address _KyberNetwork) public {\n        KyberNetwork = _KyberNetwork;\n    }\n\n    /// @dev Return the ETH to user that was taken back by the network\n    function() public payable {\n        // Only receive ETH from KyberNetwork main contract\n        require(msg.sender == KyberNetwork);\n        emit ETHReceived(msg.sender, msg.value);\n    }\n\n    /// @notice Can only be called by operators\n    /// @dev Sets the KyberNetwork address\n    /// @param _KyberNetwork KyberNetwork contract address\n    function setKyberNetwork(address _KyberNetwork) public onlyOperator {\n      KyberNetwork = _KyberNetwork;\n    }\n\n    /// @dev Get the ETH price of the Etheremon monster and if it is catchable\n    /// @param _etheremon EtheremonWorldNFT address\n    /// @param _classId Class ID of monster\n    /// @param _payPrice Price of monster passed from Etheremon server\n    /// @return catchable, monsterInETH\n    function getMonsterPriceInETH(\n        EtheremonWorldNFT _etheremon,\n        uint32 _classId,\n        uint _payPrice\n    )\n        public\n        view\n        returns (\n            bool catchable,\n            uint monsterInETH\n        )\n    {\n        // Get monster details from Etheremon contract\n        (catchable, monsterInETH) = _etheremon.getPrice(_classId);\n\n        // Get the highest price from contract pricing or offchain pricing\n        monsterInETH = max(monsterInETH, _payPrice);\n\n        return (catchable, monsterInETH);\n    }\n\n    /// @dev Get the rates of the Etheremon monster\n    /// @param _kyberProxy KyberNetworkProxyInterface address\n    /// @param token ERC20 token address\n    /// @param monsterInETH Price of the monster in ETH\n    /// @return expectedRate, slippageRate\n    function getMonsterRates(\n        KyberNetworkProxyInterface _kyberProxy,\n        ERC20 token,\n        uint monsterInETH\n    )\n        public\n        view\n        returns (\n            uint expectedRate,\n            uint slippageRate\n        )\n    {\n        // Get the expected and slippage rates of the token to ETH\n        (expectedRate, slippageRate) = _kyberProxy.getExpectedRate(token, ETH_TOKEN_ADDRESS, monsterInETH);\n\n        return (expectedRate, slippageRate);\n    }\n\n    /// @dev Get the token price and rates of the Etheremon monster\n    /// @param token ERC20 token address\n    /// @param expectedRate Expected rate of ETH to token\n    /// @param monsterInETH Price of the monster in ETH\n    /// @return monsterInTokens\n    function getMonsterPriceInTokens(\n        ERC20 token,\n        uint expectedRate,\n        uint monsterInETH\n    )\n        public\n        view\n        returns (uint monsterInTokens)\n    {\n        // If expectedRate is 0, return 0 for monster price in tokens\n        if (expectedRate == 0) {\n            return 0;\n        }\n\n        // Calculate monster price in tokens\n        monsterInTokens = calcSrcAmount(ETH_TOKEN_ADDRESS, token, monsterInETH, expectedRate);\n\n        return monsterInTokens;\n    }\n\n    /// @dev Acquires the monster from Etheremon using tokens\n    /// @param _kyberProxy KyberNetworkProxyInterface address\n    /// @param _etheremon EtheremonWorldNFT address\n    /// @param _classId Class ID of monster\n    /// @param _name Name of the monster\n    /// @param token ERC20 token address\n    /// @param tokenQty Amount of tokens to be transferred by user\n    /// @param maxDestQty Actual amount of ETH needed to purchase the monster\n    /// @param minRate The minimum rate or slippage rate.\n    /// @param walletId Wallet ID where Kyber referral fees will be sent to\n    /// @return monsterId\n    function catchMonster(\n        KyberNetworkProxyInterface _kyberProxy,\n        EtheremonWorldNFT _etheremon,\n        uint32 _classId,\n        string _name,\n        ERC20 token,\n        uint tokenQty,\n        uint maxDestQty,\n        uint minRate,\n        address walletId\n    )\n        public\n        returns (uint monsterId)\n    {\n        // Check that the player has transferred the token to this contract\n        require(token.transferFrom(msg.sender, this, tokenQty));\n\n        // Get the starting token balance of the player's wallet\n        uint startTokenBalance = token.balanceOf(this);\n\n        // Mitigate ERC20 Approve front-running attack, by initially setting\n        // allowance to 0\n        require(token.approve(_kyberProxy, 0));\n\n        // Verify that the token balance has not decreased from front-running\n        require(token.balanceOf(this) == startTokenBalance);\n\n        // Once verified, set the token allowance to tokenQty\n        require(token.approve(_kyberProxy, tokenQty));\n\n        // Swap player's token to ETH to send to Etheremon payments contract\n        uint userETH = _kyberProxy.tradeWithHint(\n            token,\n            tokenQty,\n            ETH_TOKEN_ADDRESS,\n            address(this),\n            maxDestQty,\n            minRate,\n            walletId,\n            \"\"\n        );\n\n        // Acquire the monster and send to player\n        monsterId = _etheremon.catchMonster.value(userETH)(msg.sender, _classId, _name);\n\n        // Log event that monster was caught using tokens\n        emit CaughtWithToken(msg.sender, monsterId, token, tokenQty);\n\n        // Return change to player if any\n        calcPlayerChange(token, startTokenBalance);\n\n        return monsterId;\n    }\n\n    /// @dev Calculates token change and returns to player\n    /// @param token ERC20 token address\n    /// @param startTokenBalance Starting token balance of the player's wallet\n    function calcPlayerChange(ERC20 token, uint startTokenBalance) private {\n        // Calculate change of player\n        uint change = token.balanceOf(this);\n\n        // Send back change if change is > 0\n        if (change > 0) {\n            // Log the exchange event\n            emit SwapTokenChange(startTokenBalance, change);\n\n            // Transfer change back to player\n            token.transfer(msg.sender, change);\n        }\n    }\n\n    /// @dev Gets the max between two uint params\n    /// @param a Param A\n    /// @param b Param B\n    /// @return result\n    function max(uint a, uint b) private pure returns (uint result) {\n        return a > b ? a : b;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806112c1833981016040525160008054600160a060020a0319908116331790915560048054600160a060020a03909316929091169190911790556112628061005f6000396000f3006080604052600436106100a05763ffffffff60e060020a6000350416634c9c786c81146100ef57806354a325a61461013257806366e18bc21461015557806375829def1461018e57806376a4b76a146101af5780639870d7fe146101f75780639c7399ea14610218578063ac8a584a14610249578063b05d6e801461026a578063d4fac45d14610303578063f851a4401461032a578063fc5bf0f21461033f575b600454600160a060020a031633146100b757600080fd5b60408051348152905133917fbfe611b001dfcd411432f7bf0d79b82b4b2ee81511edac123a3403c357fb972a919081900360200190a2005b3480156100fb57600080fd5b50610119600160a060020a0360043581169060243516604435610357565b6040805192835260208301919091528051918290030190f35b34801561013e57600080fd5b50610153600160a060020a036004351661041b565b005b34801561016157600080fd5b5061017c600160a060020a0360043516602435604435610468565b60408051918252519081900360200190f35b34801561019a57600080fd5b50610153600160a060020a03600435166104a3565b3480156101bb57600080fd5b506101dc600160a060020a036004351663ffffffff6024351660443561053a565b60408051921515835260208301919091528051918290030190f35b34801561020357600080fd5b50610153600160a060020a03600435166105dd565b34801561022457600080fd5b5061022d6106dd565b60408051600160a060020a039092168252519081900360200190f35b34801561025557600080fd5b50610153600160a060020a03600435166106ec565b34801561027657600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261017c94600160a060020a038135811695602480359092169563ffffffff604435169536956084940191819084018382808284375094975050600160a060020a038535811696506020860135956040810135955060608101359450608001351691506108629050565b34801561030f57600080fd5b5061017c600160a060020a0360043581169060243516610dd6565b34801561033657600080fd5b5061022d610e9e565b34801561034b57600080fd5b5061022d600435610ead565b604080517f809a9e55000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee602483015260448201849052825160009384939288169263809a9e55926064808301939282900301818787803b1580156103dc57600080fd5b505af11580156103f0573d6000803e3d6000fd5b505050506040513d604081101561040657600080fd5b50805160209091015190969095509350505050565b3360009081526002602052604090205460ff16151561043957600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008215156104795750600061049c565b61049973eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee858486610ed5565b90505b9392505050565b600054600160a060020a031633146104ba57600080fd5b600160a060020a03811615156104cf57600080fd5b60408051600160a060020a038316815290517fda7b0a7bc965abdec8a1a995575a891838264c2968e14bd456c5391827b7aa309181900360200190a16000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008084600160a060020a031663da26663a856040518263ffffffff1660e060020a028152600401808263ffffffff1663ffffffff1681526020019150506040805180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b505050506040513d60408110156105bb57600080fd5b50805160209091015190925090506105d38184610efc565b9050935093915050565b600054600160a060020a031633146105f457600080fd5b600160a060020a03811660009081526002602052604090205460ff161561061a57600080fd5b60015460321161062957600080fd5b60408051600160a060020a03831681526001602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a1600160a060020a03166000818152600260205260408120805460ff191660019081179091558054808201825591527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805473ffffffffffffffffffffffffffffffffffffffff19169091179055565b600454600160a060020a031681565b60008054600160a060020a0316331461070457600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561072b57600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b60015481101561085e5781600160a060020a031660018281548110151561077057fe5b600091825260209091200154600160a060020a031614156108565760018054600019810190811061079d57fe5b60009182526020909120015460018054600160a060020a0390921691839081106107c357fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560018054600019019061080c90826111f6565b5060408051600160a060020a03841681526000602082015281517f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b929181900390910190a161085e565b60010161074d565b5050565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101869052905160009182918291600160a060020a038a16916323b872dd9160648082019260209290919082900301818787803b1580156108d757600080fd5b505af11580156108eb573d6000803e3d6000fd5b505050506040513d602081101561090157600080fd5b5051151561090e57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038a16916370a082319160248083019260209291908290030181600087803b15801561096f57600080fd5b505af1158015610983573d6000803e3d6000fd5b505050506040513d602081101561099957600080fd5b5051604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038f8116600483015260006024830181905292519395508b169263095ea7b392604480840193602093929083900390910190829087803b158015610a0c57600080fd5b505af1158015610a20573d6000803e3d6000fd5b505050506040513d6020811015610a3657600080fd5b50511515610a4357600080fd5b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518391600160a060020a038b16916370a08231916024808201926020929091908290030181600087803b158015610aa757600080fd5b505af1158015610abb573d6000803e3d6000fd5b505050506040513d6020811015610ad157600080fd5b505114610add57600080fd5b87600160a060020a031663095ea7b38d896040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610b4057600080fd5b505af1158015610b54573d6000803e3d6000fd5b505050506040513d6020811015610b6a57600080fd5b50511515610b7757600080fd5b604080517f29589f61000000000000000000000000000000000000000000000000000000008152600160a060020a038a81166004830152602482018a905273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60448301523060648301526084820189905260a4820188905286811660c483015261010060e4830152600061010483018190529251908f16926329589f619261014480820193602093909283900390910190829087803b158015610c2d57600080fd5b505af1158015610c41573d6000803e3d6000fd5b505050506040513d6020811015610c5757600080fd5b810190808051906020019092919050505090508a600160a060020a031663c0845e8a82338d8d6040518563ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a031681526020018363ffffffff1663ffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610cf6578181015183820152602001610cde565b50505050905090810190601f168015610d235780820380516001836020036101000a031916815260200191505b509450505050506020604051808303818588803b158015610d4357600080fd5b505af1158015610d57573d6000803e3d6000fd5b50505050506040513d6020811015610d6e57600080fd5b505160408051828152600160a060020a038b1660208201528082018a9052905191945033917f292c998861a6c93f87fd689ba3b6efaf15ed97454f96924beba6835d3cb22e239181900360600190a2610dc78883610f12565b50509998505050505050505050565b6000600160a060020a03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610e0e5750600160a060020a03811631610e98565b82600160a060020a03166370a08231836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610e6957600080fd5b505af1158015610e7d573d6000803e3d6000fd5b505050506040513d6020811015610e9357600080fd5b505190505b92915050565b600054600160a060020a031681565b6001805482908110610ebb57fe5b600091825260209091200154600160a060020a0316905081565b6000610ef383610ee487611082565b610eed87611082565b8561114f565b95945050505050565b6000818311610f0b578161049c565b5090919050565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600091600160a060020a038516916370a082319160248082019260209290919082900301818787803b158015610f7657600080fd5b505af1158015610f8a573d6000803e3d6000fd5b505050506040513d6020811015610fa057600080fd5b50519050600081111561107d57604080518381526020810183905281517f728dff6f9ccda5c4b34aef50e8476d414ed0873362ca60c9bd2e85b7d7140e26929181900390910190a1604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018390529051600160a060020a0385169163a9059cbb9160448083019260209291908290030181600087803b15801561105057600080fd5b505af1158015611064573d6000803e3d6000fd5b505050506040513d602081101561107a57600080fd5b50505b505050565b600080600160a060020a03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156110b35760129150611149565b50600160a060020a0382166000908152600360205260409020548015156111455782600160a060020a031663313ce5676040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561111257600080fd5b505af1158015611126573d6000803e3d6000fd5b505050506040513d602081101561113c57600080fd5b50519150611149565b8091505b50919050565b600080806b204fce5e3e2502611000000087111561116c57600080fd5b69d3c21bcecceda100000084111561118357600080fd5b8486106111b4576012858703111561119a57600080fd5b5050828403600a0a8502670de0b6b3a764000002826111da565b601286860311156111c457600080fd5b5050670de0b6b3a76400008502848403600a0a83025b806001828401038115156111ea57fe5b04979650505050505050565b81548183558181111561107d5760008381526020902061107d91810190830161123391905b8082111561122f576000815560010161121b565b5090565b905600a165627a7a72305820a5e367443a0284a7713f7678ad8f31763c5566a913d91b8ffa7b0d1852261bb00029"
}