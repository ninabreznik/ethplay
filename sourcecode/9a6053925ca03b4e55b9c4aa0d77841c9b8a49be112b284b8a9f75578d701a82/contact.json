{
  "address": "0x6295ab2be04a617747481b292c390bfca592cf28",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenDeskToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-17\n*/\n\npragma solidity 0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n/**\n * @title TokenTimelock\n * @dev TokenTimelock is a token holder contract that will allow a\n * beneficiary to extract the tokens after a given release time\n */\ncontract TokenTimelock {\n  using SafeERC20 for ERC20Basic;\n\n  // ERC20 basic token contract being held\n  ERC20Basic public token;\n\n  // beneficiary of tokens after they are released\n  address public beneficiary;\n\n  // timestamp when token release is enabled\n  uint64 public releaseTime;\n\n  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {\n    require(_releaseTime > uint64(block.timestamp));\n    token = _token;\n    beneficiary = _beneficiary;\n    releaseTime = _releaseTime;\n  }\n\n  /**\n   * @notice Transfers tokens held by timelock to beneficiary.\n   */\n  function release() public {\n    require(uint64(block.timestamp) >= releaseTime);\n\n    uint256 amount = token.balanceOf(this);\n    require(amount > 0);\n\n    token.safeTransfer(beneficiary, amount);\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract Owned {\n    address public owner;\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\n/// TokenDesk token contract ///\ncontract TokenDeskToken is StandardToken, Owned {\n    string public constant name = \"TokenDesk\";\n    string public constant symbol = \"TDS\";\n    uint256 public constant decimals = 18;\n\n    /// Maximum tokens to be allocated.\n    uint256 public constant TOKENS_HARD_CAP = 20000000 * 10**decimals;\n\n    /// Maximum tokens to be allocated on the sale (70% of the hard cap)\n    uint256 public constant TOKENS_SALE_HARD_CAP = 14000000 * 10**decimals;\n\n    bool public tokenSaleClosed = false;\n\n    // contract to be called to release the TD team tokens\n    address public timelockContractAddress;\n\n    // seconds since 01.01.1970 to 24.12.2017 (both 00:00:00 o'clock UTC)\n    uint64 private date24Dec2017 = 1514073600;\n\n    // seconds since 01.01.1970 to 01.01.2019 (both 00:00:00 o'clock UTC)\n    uint64 private date01Jan2019 = 1546300800;\n\n    modifier inProgress {\n        require(totalSupply < TOKENS_SALE_HARD_CAP && !tokenSaleClosed);\n        _;\n    }\n\n    modifier beforeEnd {\n        require(!tokenSaleClosed);\n        _;\n    }\n\n    /// Either sale closed or 24 Dec 2017 passed\n    modifier tradingOpen {\n        require(tokenSaleClosed || (uint64(block.timestamp) > date24Dec2017));\n        _;\n    }\n\n    function issueTokensMulti(address[] _addresses, uint256[] _tokensInteger) public onlyOwner inProgress {\n        require(_addresses.length == _tokensInteger.length);\n        require(_addresses.length <= 100);\n\n        for (uint256 i = 0; i < _tokensInteger.length; i = i.add(1)) {\n            issueTokens(_addresses[i], _tokensInteger[i]);\n        }\n    }\n\n    function issueTokens(address _investor, uint256 _tokensInteger) public onlyOwner inProgress {\n        require(_investor != address(0));\n\n        uint256 tokens = _tokensInteger.mul(10**decimals);\n        // compute without actually increasing it\n        uint256 increasedTotalSupply = totalSupply.add(tokens);\n        // roll back if hard cap reached\n        require(increasedTotalSupply <= TOKENS_SALE_HARD_CAP);\n\n        //increase token total supply\n        totalSupply = increasedTotalSupply;\n        //update the investors balance to number of tokens sent\n        balances[_investor] = balances[_investor].add(tokens);\n    }\n\n    function close() public onlyOwner beforeEnd {\n        // final supply = investors tokens + team tokens\n        // team tokens = 30% final supply = 30/100 * final supply\n        // investors tokens = totalSupply = 70% final supply = 70/100 * final supply\n        // final supply = 100/70 * totalSupply\n        // team tokens = 30/70 * totalSupply = totalSupply * (3/7)\n\n        uint256 teamTokens = totalSupply.mul(3).div(7);\n\n        // check for rounding errors when cap is reached\n        if(totalSupply.add(teamTokens) > TOKENS_HARD_CAP) {\n            teamTokens = TOKENS_HARD_CAP.sub(totalSupply);\n        }\n\n        /// lock until 01 Jan 2019\n        TokenTimelock lockedTeamTokens = new TokenTimelock(this, owner, date01Jan2019);\n        timelockContractAddress = address(lockedTeamTokens);\n        balances[timelockContractAddress] = balances[timelockContractAddress].add(teamTokens);\n        \n        /// increase token total supply\n        totalSupply = totalSupply.add(teamTokens);\n\n        tokenSaleClosed = true;\n    }\n\n    /// Transfer limited by the tradingOpen modifier (either sale closed or 24 Dec 2017 passed)\n    function transferFrom(address _from, address _to, uint256 _value) public tradingOpen returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /// Transfer limited by the tradingOpen modifier (either sale closed or 24 Dec 2017 passed)\n    function transfer(address _to, uint256 _value) public tradingOpen returns (bool) {\n        return super.transfer(_to, _value);\n    }\n}",
  "bytecode": "6060604052600380546004805460a060020a60e060020a031916775a3eee00000000000000000000000000000000000000000017905560058054635c2aad8067ffffffffffffffff19909116179055600160a860020a03191633600160a060020a031617905561121b806100746000396000f3006060604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a057806318160ddd146101d657806323b872dd146101fb57806327e235e314610223578063313ce5671461024257806343d726d614610255578063475a9fa91461026a578063661884631461028c57806370a08231146102ae5780637fc88fe2146102cd578063831a1754146102fc5780638da5cb5b1461030f57806392e8438c1461032257806395d89b41146103b1578063a9059cbb146103c4578063d73dd623146103e6578063dd62ed3e14610408578063e55a07c21461042d578063f946372c14610440575b600080fd5b341561012157600080fd5b610129610453565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561016557808201518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101ab57600080fd5b6101c2600160a060020a036004351660243561048a565b604051901515815260200160405180910390f35b34156101e157600080fd5b6101e96104f6565b60405190815260200160405180910390f35b341561020657600080fd5b6101c2600160a060020a03600435811690602435166044356104fc565b341561022e57600080fd5b6101e9600160a060020a036004351661054c565b341561024d57600080fd5b6101e961055e565b341561026057600080fd5b610268610563565b005b341561027557600080fd5b610268600160a060020a036004351660243561071a565b341561029757600080fd5b6101c2600160a060020a0360043516602435610816565b34156102b957600080fd5b6101e9600160a060020a0360043516610910565b34156102d857600080fd5b6102e061092b565b604051600160a060020a03909116815260200160405180910390f35b341561030757600080fd5b6101e961093a565b341561031a57600080fd5b6102e0610949565b341561032d57600080fd5b61026860046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061095895505050505050565b34156103bc57600080fd5b610129610a23565b34156103cf57600080fd5b6101c2600160a060020a0360043516602435610a5a565b34156103f157600080fd5b6101c2600160a060020a0360043516602435610aa8565b341561041357600080fd5b6101e9600160a060020a0360043581169060243516610b4c565b341561043857600080fd5b6101c2610b77565b341561044b57600080fd5b6101e9610b87565b60408051908101604052600981527f546f6b656e4465736b0000000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b60035460009060a060020a900460ff168061052e575060045467ffffffffffffffff60a060020a909104811642909116115b151561053957600080fd5b610544848484610b96565b949350505050565b60016020526000908152604090205481565b601281565b600354600090819033600160a060020a0390811691161461058357600080fd5b60035460a060020a900460ff161561059a57600080fd5b6105c160076105b56003600054610d1890919063ffffffff16565b9063ffffffff610d3c16565b6000549092506a108b2a2c28029094000000906105e4908463ffffffff610d5316565b111561060c57600054610609906a108b2a2c280290940000009063ffffffff610d6516565b91505b6003546005543091600160a060020a03169067ffffffffffffffff16610630610e72565b600160a060020a03938416815291909216602082015267ffffffffffffffff90911660408083019190915260609091019051809103906000f080151561067557600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055166000908152600160205260409020549091506106c09083610d53565b600454600160a060020a0316600090815260016020526040812091909155546106ef908363ffffffff610d5316565b60005550506003805474ff0000000000000000000000000000000000000000191660a060020a179055565b600354600090819033600160a060020a0390811691161461073a57600080fd5b6000546a0b949d854f34fece00000090108015610761575060035460a060020a900460ff16155b151561076c57600080fd5b600160a060020a038416151561078157600080fd5b61079983670de0b6b3a764000063ffffffff610d1816565b6000549092506107af908363ffffffff610d5316565b90506a0b949d854f34fece0000008111156107c957600080fd5b6000818155600160a060020a0385168152600160205260409020546107f4908363ffffffff610d5316565b600160a060020a03909416600090815260016020526040902093909355505050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561087357600160a060020a0333811660009081526002602090815260408083209388168352929052908120556108aa565b610883818463ffffffff610d6516565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b600454600160a060020a031681565b6a108b2a2c2802909400000081565b600354600160a060020a031681565b60035460009033600160a060020a0390811691161461097657600080fd5b6000546a0b949d854f34fece0000009010801561099d575060035460a060020a900460ff16155b15156109a857600080fd5b81518351146109b657600080fd5b6064835111156109c557600080fd5b5060005b8151811015610a1e57610a068382815181106109e157fe5b906020019060200201518383815181106109f757fe5b9060200190602002015161071a565b610a1781600163ffffffff610d5316565b90506109c9565b505050565b60408051908101604052600381527f5444530000000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff1680610a8c575060045467ffffffffffffffff60a060020a909104811642909116115b1515610a9757600080fd5b610aa18383610d77565b9392505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610ae0908363ffffffff610d5316565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035460a060020a900460ff1681565b6a0b949d854f34fece00000081565b6000600160a060020a0383161515610bad57600080fd5b600160a060020a038416600090815260016020526040902054821115610bd257600080fd5b600160a060020a0380851660009081526002602090815260408083203390941683529290522054821115610c0557600080fd5b600160a060020a038416600090815260016020526040902054610c2e908363ffffffff610d6516565b600160a060020a038086166000908152600160205260408082209390935590851681522054610c63908363ffffffff610d5316565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054610cab908363ffffffff610d6516565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6000828202831580610d345750828482811515610d3157fe5b04145b1515610aa157fe5b6000808284811515610d4a57fe5b04949350505050565b600082820183811015610aa157600080fd5b600082821115610d7157fe5b50900390565b6000600160a060020a0383161515610d8e57600080fd5b600160a060020a033316600090815260016020526040902054821115610db357600080fd5b600160a060020a033316600090815260016020526040902054610ddc908363ffffffff610d6516565b600160a060020a033381166000908152600160205260408082209390935590851681522054610e11908363ffffffff610d5316565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60405161036d80610e838339019056006060604052341561000f57600080fd5b60405160608061036d8339810160405280805191906020018051919060200180519150506001604060020a034281169082161161004b57600080fd5b60008054600160a060020a0319908116600160a060020a0395861617825560018054909116939094169290921760a060020a60e060020a031916740100000000000000000000000000000000000000006001604060020a039290921691909102179091556102ae9081906100bf90396000f3006060604052600436106100485763ffffffff60e060020a60003504166338af3eed811461004d57806386d1a69f1461007c578063b91d400114610091578063fc0c546a146100c1575b600080fd5b341561005857600080fd5b6100606100d4565b604051600160a060020a03909116815260200160405180910390f35b341561008757600080fd5b61008f6100e3565b005b341561009c57600080fd5b6100a46101c6565b60405167ffffffffffffffff909116815260200160405180910390f35b34156100cc57600080fd5b6100606101ee565b600154600160a060020a031681565b60015460009067ffffffffffffffff74010000000000000000000000000000000000000000909104811642909116101561011c57600080fd5b60008054600160a060020a0316906370a082319030906040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561017757600080fd5b6102c65a03f1151561018857600080fd5b5050506040518051915050600081116101a057600080fd5b6001546000546101c391600160a060020a0391821691168363ffffffff6101fd16565b50565b60015474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b600054600160a060020a031681565b82600160a060020a031663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561025a57600080fd5b6102c65a03f1151561026b57600080fd5b50505060405180519050151561027d57fe5b5050505600a165627a7a723058200c0768d66efc3e9d341ee89787578e9ea5e8105602561e2505ff4f03e65872810029a165627a7a72305820e7b0b254d2bd52839e8271d5b335a812787f0636835887db6899e61634e046bd0029"
}