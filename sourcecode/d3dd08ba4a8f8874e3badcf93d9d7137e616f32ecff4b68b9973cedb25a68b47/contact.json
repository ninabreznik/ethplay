{
  "address": "0x23cc3ca64b5461e4f67d0897e80589987e2bd727",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "UniswapReserve",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-17\n*/\n\npragma solidity 0.4.18;\n\n// File: contracts/ERC20Interface.sol\n\n// https://github.com/ethereum/EIPs/issues/20\ninterface ERC20 {\n    function totalSupply() public view returns (uint supply);\n    function balanceOf(address _owner) public view returns (uint balance);\n    function transfer(address _to, uint _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n    function approve(address _spender, uint _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\n    function decimals() public view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\n// File: contracts/PermissionGroups.sol\n\ncontract PermissionGroups {\n\n    address public admin;\n    address public pendingAdmin;\n    mapping(address=>bool) internal operators;\n    mapping(address=>bool) internal alerters;\n    address[] internal operatorsGroup;\n    address[] internal alertersGroup;\n    uint constant internal MAX_GROUP_SIZE = 50;\n\n    function PermissionGroups() public {\n        admin = msg.sender;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin);\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(operators[msg.sender]);\n        _;\n    }\n\n    modifier onlyAlerter() {\n        require(alerters[msg.sender]);\n        _;\n    }\n\n    function getOperators () external view returns(address[]) {\n        return operatorsGroup;\n    }\n\n    function getAlerters () external view returns(address[]) {\n        return alertersGroup;\n    }\n\n    event TransferAdminPending(address pendingAdmin);\n\n    /**\n     * @dev Allows the current admin to set the pendingAdmin address.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(pendingAdmin);\n        pendingAdmin = newAdmin;\n    }\n\n    /**\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n     * @param newAdmin The address to transfer ownership to.\n     */\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        TransferAdminPending(newAdmin);\n        AdminClaimed(newAdmin, admin);\n        admin = newAdmin;\n    }\n\n    event AdminClaimed( address newAdmin, address previousAdmin);\n\n    /**\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\n     */\n    function claimAdmin() public {\n        require(pendingAdmin == msg.sender);\n        AdminClaimed(pendingAdmin, admin);\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n    }\n\n    event AlerterAdded (address newAlerter, bool isAdd);\n\n    function addAlerter(address newAlerter) public onlyAdmin {\n        require(!alerters[newAlerter]); // prevent duplicates.\n        require(alertersGroup.length < MAX_GROUP_SIZE);\n\n        AlerterAdded(newAlerter, true);\n        alerters[newAlerter] = true;\n        alertersGroup.push(newAlerter);\n    }\n\n    function removeAlerter (address alerter) public onlyAdmin {\n        require(alerters[alerter]);\n        alerters[alerter] = false;\n\n        for (uint i = 0; i < alertersGroup.length; ++i) {\n            if (alertersGroup[i] == alerter) {\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n                alertersGroup.length--;\n                AlerterAdded(alerter, false);\n                break;\n            }\n        }\n    }\n\n    event OperatorAdded(address newOperator, bool isAdd);\n\n    function addOperator(address newOperator) public onlyAdmin {\n        require(!operators[newOperator]); // prevent duplicates.\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\n\n        OperatorAdded(newOperator, true);\n        operators[newOperator] = true;\n        operatorsGroup.push(newOperator);\n    }\n\n    function removeOperator (address operator) public onlyAdmin {\n        require(operators[operator]);\n        operators[operator] = false;\n\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\n            if (operatorsGroup[i] == operator) {\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n                operatorsGroup.length -= 1;\n                OperatorAdded(operator, false);\n                break;\n            }\n        }\n    }\n}\n\n// File: contracts/Withdrawable.sol\n\n/**\n * @title Contracts that should be able to recover tokens or ethers\n * @author Ilan Doron\n * @dev This allows to recover any tokens or Ethers received in a contract.\n * This will prevent any accidental loss of tokens.\n */\ncontract Withdrawable is PermissionGroups {\n\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw all ERC20 compatible tokens\n     * @param token ERC20 The address of the token contract\n     */\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n        require(token.transfer(sendTo, amount));\n        TokenWithdraw(token, amount, sendTo);\n    }\n\n    event EtherWithdraw(uint amount, address sendTo);\n\n    /**\n     * @dev Withdraw Ethers\n     */\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n        sendTo.transfer(amount);\n        EtherWithdraw(amount, sendTo);\n    }\n}\n\n// File: contracts/KyberReserveInterface.sol\n\n/// @title Kyber Reserve contract\ninterface KyberReserveInterface {\n\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool);\n\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\n}\n\n// File: contracts/Utils.sol\n\n/// @title Kyber constants contract\ncontract Utils {\n\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n    uint  constant internal PRECISION = (10**18);\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n    uint  constant internal MAX_DECIMALS = 18;\n    uint  constant internal ETH_DECIMALS = 18;\n    mapping(address=>uint) internal decimals;\n\n    function setDecimals(ERC20 token) internal {\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n        else decimals[token] = token.decimals();\n    }\n\n    function getDecimals(ERC20 token) internal view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n        uint tokenDecimals = decimals[token];\n        // technically, there might be token with decimals 0\n        // moreover, very possible that old tokens have decimals 0\n        // these tokens will just have higher gas fees.\n        if(tokenDecimals == 0) return token.decimals();\n\n        return tokenDecimals;\n    }\n\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(srcQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n        }\n    }\n\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n        require(dstQty <= MAX_QTY);\n        require(rate <= MAX_RATE);\n        \n        //source quantity is rounded up. to avoid dest quantity being too low.\n        uint numerator;\n        uint denominator;\n        if (srcDecimals >= dstDecimals) {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n            denominator = rate;\n        } else {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            numerator = (PRECISION * dstQty);\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n        }\n        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n    }\n}\n\n// File: contracts/Utils2.sol\n\ncontract Utils2 is Utils {\n\n    /// @dev get the balance of a user.\n    /// @param token The token type\n    /// @return The balance\n    function getBalance(ERC20 token, address user) public view returns(uint) {\n        if (token == ETH_TOKEN_ADDRESS)\n            return user.balance;\n        else\n            return token.balanceOf(user);\n    }\n\n    function getDecimalsSafe(ERC20 token) internal returns(uint) {\n\n        if (decimals[token] == 0) {\n            setDecimals(token);\n        }\n\n        return decimals[token];\n    }\n\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n    }\n\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n    }\n\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n        internal pure returns(uint)\n    {\n        require(srcAmount <= MAX_QTY);\n        require(destAmount <= MAX_QTY);\n\n        if (dstDecimals >= srcDecimals) {\n            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n        } else {\n            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n        }\n    }\n}\n\n// File: contracts/uniswap/UniswapReserve.sol\n\ninterface UniswapExchange {\n    function getEthToTokenInputPrice(\n        uint256 eth_sold\n    )\n        external\n        view\n        returns (uint256 tokens_bought);\n\n    function getTokenToEthInputPrice(\n        uint256 tokens_sold\n    )\n        external\n        view\n        returns (uint256 eth_bought);\n\n    function ethToTokenSwapInput(\n        uint256 min_tokens,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256  tokens_bought);\n\n    function tokenToEthSwapInput(\n        uint256 tokens_sold,\n        uint256 min_eth,\n        uint256 deadline\n    )\n        external\n        returns (uint256  eth_bought);\n}\n\n\ninterface UniswapFactory {\n    function getExchange(address token) external view returns (address exchange);\n}\n\n\ncontract UniswapReserve is KyberReserveInterface, Withdrawable, Utils2 {\n    // Parts per 10000\n    uint public constant DEFAULT_FEE_BPS = 25;\n\n    UniswapFactory public uniswapFactory;\n    address public kyberNetwork;\n\n    uint public feeBps = DEFAULT_FEE_BPS;\n\n    // Uniswap exchange contract for every listed token\n    // token -> exchange\n    mapping (address => address) public tokenExchange;\n\n    bool public tradeEnabled = true;\n\n    /**\n        Constructor\n    */\n    function UniswapReserve(\n        UniswapFactory _uniswapFactory,\n        address _admin,\n        address _kyberNetwork\n    )\n        public\n    {\n        require(address(_uniswapFactory) != 0);\n        require(_admin != 0);\n        require(_kyberNetwork != 0);\n\n        uniswapFactory = _uniswapFactory;\n        admin = _admin;\n        kyberNetwork = _kyberNetwork;\n    }\n\n    function() public payable {\n        // anyone can deposit ether\n    }\n\n    /**\n        Returns dest quantity / source quantity.\n    */\n    function getConversionRate(\n        ERC20 src,\n        ERC20 dest,\n        uint srcQty,\n        uint blockNumber\n    )\n        public\n        view\n        returns(uint)\n    {\n        // This makes the UNUSED warning go away.\n        blockNumber;\n\n        require(isValidTokens(src, dest));\n\n        if (!tradeEnabled) return 0;\n\n        ERC20 token;\n        if (src == ETH_TOKEN_ADDRESS) {\n            token = dest;\n        } else if (dest == ETH_TOKEN_ADDRESS) {\n            token = src;\n        } else {\n            // Should never arrive here - isValidTokens requires one side to be ETH\n            revert;\n        }\n\n        UniswapExchange exchange = UniswapExchange(\n            uniswapFactory.getExchange(token)\n        );\n\n        uint convertedQuantity;\n        if (src == ETH_TOKEN_ADDRESS) {\n            uint quantity = srcQty * (10000 - feeBps) / 10000;\n            convertedQuantity = exchange.getEthToTokenInputPrice(quantity);\n        } else {\n            convertedQuantity = exchange.getTokenToEthInputPrice(srcQty);\n            convertedQuantity = convertedQuantity * (10000 - feeBps) / 10000;\n        }\n\n        return calcRateFromQty(\n            srcQty, /* srcAmount */\n            convertedQuantity, /* destAmount */\n            getDecimals(src), /* srcDecimals */\n            getDecimals(dest) /* dstDecimals */\n        );\n    }\n\n    event TradeExecute(\n        address indexed sender,\n        address src,\n        uint srcAmount,\n        address destToken,\n        uint destAmount,\n        address destAddress\n    );\n\n    /**\n      conversionRate: expected conversion rate should be >= this value.\n     */\n    function trade(\n        ERC20 srcToken,\n        uint srcAmount,\n        ERC20 destToken,\n        address destAddress,\n        uint conversionRate,\n        bool validate\n    )\n        public\n        payable\n        returns(bool)\n    {\n        require(tradeEnabled);\n        require(msg.sender == kyberNetwork);\n        require(isValidTokens(srcToken, destToken));\n\n        uint expectedConversionRate = getConversionRate(\n            srcToken,\n            destToken,\n            srcAmount,\n            0 /* blockNumber */\n        );\n        require (expectedConversionRate <= conversionRate);\n\n        uint destAmount;\n        UniswapExchange exchange;\n        if (srcToken == ETH_TOKEN_ADDRESS) {\n            require(srcAmount == msg.value);\n\n            // Fees in ETH\n            uint quantity = srcAmount * (10000 - feeBps) / 10000;\n            exchange = UniswapExchange(tokenExchange[destToken]);\n            destAmount = exchange.ethToTokenSwapInput.value(quantity)(\n                0,\n                2 ** 255 /* deadline */\n            );\n            require(destToken.transfer(destAddress, destAmount));\n        } else {\n            require(msg.value == 0);\n            require(srcToken.transferFrom(msg.sender, address(this), srcAmount));\n\n            exchange = UniswapExchange(tokenExchange[srcToken]);\n            destAmount = exchange.tokenToEthSwapInput(\n                srcAmount,\n                0,\n                2 ** 255 /* deadline */\n            );\n            // Fees in ETH\n            destAmount = destAmount * (10000 - feeBps) / 10000;\n            destAddress.transfer(destAmount);\n        }\n\n        TradeExecute(\n            msg.sender /* sender */,\n            srcToken /* src */,\n            srcAmount /* srcAmount */,\n            destToken /* destToken */,\n            destAmount /* destAmount */,\n            destAddress /* destAddress */\n        );\n        return true;\n    }\n\n    event FeeUpdated(\n        uint bps\n    );\n\n    function setFee(\n        uint bps\n    )\n        public\n        onlyAdmin\n    {\n        require(bps <= 10000);\n\n        feeBps = bps;\n\n        FeeUpdated(bps);\n    }\n\n    event TokenListed(\n        ERC20 token,\n        UniswapExchange exchange\n    );\n\n    function listToken(ERC20 token)\n        public\n        onlyAdmin\n    {\n        require(address(token) != 0);\n\n        UniswapExchange uniswapExchange = UniswapExchange(\n            uniswapFactory.getExchange(token)\n        );\n        tokenExchange[token] = uniswapExchange;\n        setDecimals(token);\n\n        require(token.approve(uniswapExchange, 2**255));\n\n        TokenListed(token, uniswapExchange);\n    }\n\n    event TokenDelisted(ERC20 token);\n\n    function delistToken(ERC20 token)\n        public\n        onlyAdmin\n    {\n        require(tokenExchange[token] != 0);\n        tokenExchange[token] = 0;\n\n\n        TokenDelisted(token);\n    }\n\n    function isValidTokens(\n        ERC20 src,\n        ERC20 dest\n    )\n        public\n        view\n        returns(bool)\n    {\n        return (\n            (src == ETH_TOKEN_ADDRESS && tokenExchange[dest] != 0) ||\n            (tokenExchange[src] != 0 && dest == ETH_TOKEN_ADDRESS)\n        );\n    }\n\n    event TradeEnabled(\n        bool enable\n    );\n\n    function enableTrade()\n        public\n        onlyAdmin\n        returns(bool)\n    {\n        tradeEnabled = true;\n        TradeEnabled(true);\n        return true;\n    }\n\n    function disableTrade()\n        public\n        onlyAlerter\n        returns(bool)\n    {\n        tradeEnabled = false;\n        TradeEnabled(false);\n        return true;\n    }\n}",
  "bytecode": "60606040526019600955600b805460ff19166001179055341561002157600080fd5b604051606080611ccc83398101604052808051919060200180519190602001805160008054600160a060020a03191633600160a060020a039081169190911790915590925084161515905061007557600080fd5b600160a060020a038216151561008a57600080fd5b600160a060020a038116151561009f57600080fd5b60078054600160a060020a03948516600160a060020a031991821617909155600080549385169382169390931790925560088054919093169116179055611be1806100eb6000396000f30060606040526004361061014f5763ffffffff60e060020a60003504166299d386811461015157806301a12fd3146101785780630dd94b96146101975780631fc1e25f146101d257806324a9d853146101f1578063267822471461021657806327a099d81461022957806333d8262c1461028f5780633ccdbb28146102a2578063408ee7fe146102cb5780636940030f146102ea57806369fe0e2d146102fd5780636cf698111461031357806375829def1461033f57806377f50f971461035e5780637acc8678146103715780637be98598146103905780637c423f54146103b55780637cd44272146103c85780638bdb2afa146103f35780639870d7fe14610406578063abffc9ac14610425578063ac8a584a14610444578063b78b842d14610463578063ce56c45414610476578063d4fac45d14610498578063d621e813146104bd578063f851a440146104d0575b005b341561015c57600080fd5b6101646104e3565b604051901515815260200160405180910390f35b341561018357600080fd5b61014f600160a060020a036004351661054b565b34156101a257600080fd5b6101b6600160a060020a03600435166106bb565b604051600160a060020a03909116815260200160405180910390f35b34156101dd57600080fd5b61014f600160a060020a03600435166106d6565b34156101fc57600080fd5b610204610885565b60405190815260200160405180910390f35b341561022157600080fd5b6101b661088b565b341561023457600080fd5b61023c61089a565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561027b578082015183820152602001610263565b505050509050019250505060405180910390f35b341561029a57600080fd5b610204610902565b34156102ad57600080fd5b61014f600160a060020a036004358116906024359060443516610907565b34156102d657600080fd5b61014f600160a060020a03600435166109fe565b34156102f557600080fd5b610164610afa565b341561030857600080fd5b61014f600435610b67565b610164600160a060020a03600435811690602435906044358116906064351660843560a4351515610bcc565b341561034a57600080fd5b61014f600160a060020a0360043516610f77565b341561036957600080fd5b61014f611012565b341561037c57600080fd5b61014f600160a060020a03600435166110ac565b341561039b57600080fd5b610164600160a060020a036004358116906024351661118e565b34156103c057600080fd5b61023c611229565b34156103d357600080fd5b610204600160a060020a036004358116906024351660443560643561128f565b34156103fe57600080fd5b6101b66114d3565b341561041157600080fd5b61014f600160a060020a03600435166114e2565b341561043057600080fd5b61014f600160a060020a03600435166115b2565b341561044f57600080fd5b61014f600160a060020a036004351661165b565b341561046e57600080fd5b6101b66117c7565b341561048157600080fd5b61014f600435600160a060020a03602435166117d6565b34156104a357600080fd5b610204600160a060020a0360043581169060243516611869565b34156104c857600080fd5b61016461191a565b34156104db57600080fd5b6101b6611923565b6000805433600160a060020a039081169116146104ff57600080fd5b600b805460ff191660019081179091557f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e73590604051901515815260200160405180910390a15060015b90565b6000805433600160a060020a0390811691161461056757600080fd5b600160a060020a03821660009081526003602052604090205460ff16151561058e57600080fd5b50600160a060020a0381166000908152600360205260408120805460ff191690555b6005548110156106b75781600160a060020a03166005828154811015156105d357fe5b600091825260209091200154600160a060020a031614156106af5760058054600019810190811061060057fe5b60009182526020909120015460058054600160a060020a03909216918390811061062657fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556005805490610662906000198301611b5c565b507f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762826000604051600160a060020a039092168252151560208201526040908101905180910390a16106b7565b6001016105b0565b5050565b600a60205260009081526040902054600160a060020a031681565b6000805433600160a060020a039081169116146106f257600080fd5b600160a060020a038216151561070757600080fd5b600754600160a060020a03166306f2bf628360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561076057600080fd5b6102c65a03f1151561077157600080fd5b5050506040518051600160a060020a038481166000908152600a602052604090208054600160a060020a03191691831691909117905591506107b4905082611932565b81600160a060020a031663095ea7b38260ff60020a60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561081557600080fd5b6102c65a03f1151561082657600080fd5b50505060405180519050151561083b57600080fd5b7f99d2b755eb38920131acb332adf086ea38d15009f223c21f3aa978d6ab2347868282604051600160a060020a039283168152911660208201526040908101905180910390a15050565b60095481565b600154600160a060020a031681565b6108a2611b85565b60048054806020026020016040519081016040528092919081815260200182805480156108f857602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116108da575b5050505050905090565b601981565b60005433600160a060020a0390811691161461092257600080fd5b82600160a060020a031663a9059cbb828460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561097f57600080fd5b6102c65a03f1151561099057600080fd5b5050506040518051905015156109a557600080fd5b7f72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6838383604051600160a060020a03938416815260208101929092529091166040808301919091526060909101905180910390a1505050565b60005433600160a060020a03908116911614610a1957600080fd5b600160a060020a03811660009081526003602052604090205460ff1615610a3f57600080fd5b60055460329010610a4f57600080fd5b7f5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600360205260409020805460ff191660019081179091556005805490918101610ace8382611b5c565b5060009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055565b600160a060020a03331660009081526003602052604081205460ff161515610b2157600080fd5b600b805460ff191690557f7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e7356000604051901515815260200160405180910390a150600190565b60005433600160a060020a03908116911614610b8257600080fd5b612710811115610b9157600080fd5b60098190557f8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c768160405190815260200160405180910390a150565b600b54600090819081908190819060ff161515610be857600080fd5b60085433600160a060020a03908116911614610c0357600080fd5b610c0d8b8a61118e565b1515610c1857600080fd5b610c258b8a8c600061128f565b935086841115610c3457600080fd5b600160a060020a038b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610d8a57348a14610c6557600080fd5b5050600954600160a060020a038881166000908152600a602052604080822054909216926127109081038c020491839163f39b5b9b9184919060ff60020a908290516020015260405160e060020a63ffffffff8616028152600481019290925260248201526044016020604051808303818588803b1515610ce557600080fd5b6125ee5a03f11515610cf657600080fd5b505050506040518051935050600160a060020a03891663a9059cbb898560006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610d5f57600080fd5b6102c65a03f11515610d7057600080fd5b505050604051805190501515610d8557600080fd5b610ef9565b3415610d9557600080fd5b8a600160a060020a03166323b872dd33308d60006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b1515610dff57600080fd5b6102c65a03f11515610e1057600080fd5b505050604051805190501515610e2557600080fd5b600160a060020a03808c166000908152600a602052604080822054909216935083916395e3c50b918d9160ff60020a908290516020015260405160e060020a63ffffffff8616028152600481019390935260248301919091526044820152606401602060405180830381600087803b1515610e9f57600080fd5b6102c65a03f11515610eb057600080fd5b505050604051805160095461271090810390910204935050600160a060020a0388166108fc84150284604051600060405180830381858888f193505050501515610ef957600080fd5b33600160a060020a03167fea9415385bae08fe9f6dc457b02577166790cde83bb18cc340aac6cb81b824de8c8c8c878d604051600160a060020a039586168152602081019490945291841660408085019190915260608401919091529216608082015260a001905180910390a25060019a9950505050505050505050565b60005433600160a060020a03908116911614610f9257600080fd5b600160a060020a0381161515610fa757600080fd5b6001547f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4090600160a060020a0316604051600160a060020a03909116815260200160405180910390a160018054600160a060020a031916600160a060020a0392909216919091179055565b60015433600160a060020a0390811691161461102d57600080fd5b6001546000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed91600160a060020a039081169116604051600160a060020a039283168152911660208201526040908101905180910390a16001805460008054600160a060020a0319908116600160a060020a03841617909155169055565b60005433600160a060020a039081169116146110c757600080fd5b600160a060020a03811615156110dc57600080fd5b7f3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc4081604051600160a060020a03909116815260200160405180910390a16000547f65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed908290600160a060020a0316604051600160a060020a039283168152911660208201526040908101905180910390a160008054600160a060020a031916600160a060020a0392909216919091179055565b6000600160a060020a03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1480156111d55750600160a060020a038083166000908152600a60205260409020541615155b806112205750600160a060020a038084166000908152600a602052604090205416158015906112205750600160a060020a03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b90505b92915050565b611231611b85565b60058054806020026020016040519081016040528092919081815260200182805480156108f857602002820191906000526020600020908154600160a060020a031681526001909101906020018083116108da575050505050905090565b60008060008060006112a1898961118e565b15156112ac57600080fd5b600b5460ff1615156112c157600094506114c7565b600160a060020a03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156112ee57879350611317565b600160a060020a03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611317578893505b600754600160a060020a03166306f2bf628560006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561137057600080fd5b6102c65a03f1151561138157600080fd5b5050506040518051935050600160a060020a03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561142f5750600954612710908103870204600160a060020a03831663cd7724c38260006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561140d57600080fd5b6102c65a03f1151561141e57600080fd5b5050506040518051905091506114a8565b82600160a060020a03166395b68fe78860006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561147e57600080fd5b6102c65a03f1151561148f57600080fd5b5050506040518051600954612710908103909102049250505b6114c487836114b68c6119f5565b6114bf8c6119f5565b611ab9565b94505b50505050949350505050565b600754600160a060020a031681565b60005433600160a060020a039081169116146114fd57600080fd5b600160a060020a03811660009081526002602052604090205460ff161561152357600080fd5b6004546032901061153357600080fd5b7f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b816001604051600160a060020a039092168252151560208201526040908101905180910390a1600160a060020a0381166000908152600260205260409020805460ff191660019081179091556004805490918101610ace8382611b5c565b60005433600160a060020a039081169116146115cd57600080fd5b600160a060020a038082166000908152600a60205260409020541615156115f357600080fd5b600160a060020a0381166000908152600a6020526040908190208054600160a060020a03191690557f6621c4efc5efa31320394260425b7d14cbb9d7e3754b2c98c04af66b1cbf315b90829051600160a060020a03909116815260200160405180910390a150565b6000805433600160a060020a0390811691161461167757600080fd5b600160a060020a03821660009081526002602052604090205460ff16151561169e57600080fd5b50600160a060020a0381166000908152600260205260408120805460ff191690555b6004548110156106b75781600160a060020a03166004828154811015156116e357fe5b600091825260209091200154600160a060020a031614156117bf5760048054600019810190811061171057fe5b60009182526020909120015460048054600160a060020a03909216918390811061173657fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556004805460001901906117729082611b5c565b507f091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b826000604051600160a060020a039092168252151560208201526040908101905180910390a16106b7565b6001016116c0565b600854600160a060020a031681565b60005433600160a060020a039081169116146117f157600080fd5b600160a060020a03811682156108fc0283604051600060405180830381858888f19350505050151561182257600080fd5b7fec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de8282604051918252600160a060020a031660208201526040908101905180910390a15050565b6000600160a060020a03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156118a15750600160a060020a03811631611223565b82600160a060020a03166370a082318360006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156118f857600080fd5b6102c65a03f1151561190957600080fd5b505050604051805190509050611223565b600b5460ff1681565b600054600160a060020a031681565b600160a060020a03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561197857600160a060020a0381166000908152600660205260409020601290556119f2565b80600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156119be57600080fd5b6102c65a03f115156119cf57600080fd5b5050506040518051600160a060020a038316600090815260066020526040902055505b50565b600080600160a060020a03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415611a265760129150611ab3565b50600160a060020a038216600090815260066020526040902054801515611aaf5782600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515611a8d57600080fd5b6102c65a03f11515611a9e57600080fd5b505050604051805190509150611ab3565b8091505b50919050565b60006b204fce5e3e25026110000000851115611ad457600080fd5b6b204fce5e3e25026110000000841115611aed57600080fd5b828210611b285760128383031115611b0457600080fd5b84838303600a0a02670de0b6b3a76400008502811515611b2057fe5b049050611b54565b60128284031115611b3857600080fd5b84828403600a0a670de0b6b3a7640000860202811515611b2057fe5b949350505050565b815481835581811511611b8057600083815260209020611b80918101908301611b97565b505050565b60206040519081016040526000815290565b61054891905b80821115611bb15760008155600101611b9d565b50905600a165627a7a72305820bccd10dafc849dcbc119252abfd3ee8a63d7dc6f68c6b35df80d50e6c55f76ee0029000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d950000000000000000000000002259099897afaf3813fef3284b91d2b227b66ad4000000000000000000000000706abce058db29eb36578c463cf295f180a1fe9c",
  "constructorArguments": "000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d950000000000000000000000002259099897afaf3813fef3284b91d2b227b66ad4000000000000000000000000706abce058db29eb36578c463cf295f180a1fe9c"
}