{
  "address": "0xe20b3ae826cdb43676e418f7c3b84b75b5697a40",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenData",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/* Copyright (C) 2017 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\n    \npragma solidity 0.5.7;\n\nimport \"./Iupgradable.sol\";\nimport \"./SafeMath.sol\";\n\n\ncontract TokenData is Iupgradable {\n    using SafeMath for uint;\n\n    address payable public walletAddress;\n    uint public lockTokenTimeAfterCoverExp;\n    uint public bookTime;\n    uint public lockCADays;\n    uint public lockMVDays;\n    uint public scValidDays;\n    uint public joiningFee;\n    uint public stakerCommissionPer;\n    uint public stakerMaxCommissionPer;\n    uint public tokenExponent;\n    uint public priceStep;\n\n    struct StakeCommission {\n        uint commissionEarned;\n        uint commissionRedeemed;\n    }\n\n    struct Stake {\n        address stakedContractAddress;\n        uint stakedContractIndex;\n        uint dateAdd;\n        uint stakeAmount;\n        uint unlockedAmount;\n        uint burnedAmount;\n        uint unLockableBeforeLastBurn;\n    }\n\n    struct Staker {\n        address stakerAddress;\n        uint stakerIndex;\n    }\n\n    struct CoverNote {\n        uint amount;\n        bool isDeposited;\n    }\n\n    /**\n     * @dev mapping of uw address to array of sc address to fetch \n     * all staked contract address of underwriter, pushing\n     * data into this array of Stake returns stakerIndex \n     */ \n    mapping(address => Stake[]) public stakerStakedContracts; \n\n    /** \n     * @dev mapping of sc address to array of UW address to fetch\n     * all underwritters of the staked smart contract\n     * pushing data into this mapped array returns scIndex \n     */\n    mapping(address => Staker[]) public stakedContractStakers;\n\n    /**\n     * @dev mapping of staked contract Address to the array of StakeCommission\n     * here index of this array is stakedContractIndex\n     */ \n    mapping(address => mapping(uint => StakeCommission)) public stakedContractStakeCommission;\n\n    mapping(address => uint) public lastCompletedStakeCommission;\n\n    /** \n     * @dev mapping of the staked contract address to the current \n     * staker index who will receive commission.\n     */ \n    mapping(address => uint) public stakedContractCurrentCommissionIndex;\n\n    /** \n     * @dev mapping of the staked contract address to the \n     * current staker index to burn token from.\n     */ \n    mapping(address => uint) public stakedContractCurrentBurnIndex;\n\n    /** \n     * @dev mapping to return true if Cover Note deposited against coverId\n     */ \n    mapping(uint => CoverNote) public depositedCN;\n\n    mapping(address => uint) internal isBookedTokens;\n\n    event Commission(\n        address indexed stakedContractAddress,\n        address indexed stakerAddress,\n        uint indexed scIndex,\n        uint commissionAmount\n    );\n\n    constructor(address payable _walletAdd) public {\n        walletAddress = _walletAdd;\n        bookTime = 12 hours;\n        joiningFee = 2000000000000000; // 0.002 Ether\n        lockTokenTimeAfterCoverExp = 35 days;\n        scValidDays = 250;\n        lockCADays = 7 days;\n        lockMVDays = 2 days;\n        stakerCommissionPer = 20;\n        stakerMaxCommissionPer = 50;\n        tokenExponent = 4;\n        priceStep = 1000;\n\n    }\n\n    /**\n     * @dev Change the wallet address which receive Joining Fee\n     */\n    function changeWalletAddress(address payable _address) external onlyInternal {\n        walletAddress = _address;\n    }\n\n    /**\n     * @dev Gets Uint Parameters of a code\n     * @param code whose details we want\n     * @return string value of the code\n     * @return associated amount (time or perc or value) to the code\n     */\n    function getUintParameters(bytes8 code) external view returns(bytes8 codeVal, uint val) {\n        codeVal = code;\n        if (code == \"TOKEXP\") {\n\n            val = tokenExponent; \n\n        } else if (code == \"TOKSTEP\") {\n\n            val = priceStep;\n\n        } else if (code == \"RALOCKT\") {\n\n            val = scValidDays;\n\n        } else if (code == \"RACOMM\") {\n\n            val = stakerCommissionPer;\n\n        } else if (code == \"RAMAXC\") {\n\n            val = stakerMaxCommissionPer;\n\n        } else if (code == \"CABOOKT\") {\n\n            val = bookTime / (1 hours);\n\n        } else if (code == \"CALOCKT\") {\n\n            val = lockCADays / (1 days);\n\n        } else if (code == \"MVLOCKT\") {\n\n            val = lockMVDays / (1 days);\n\n        } else if (code == \"QUOLOCKT\") {\n\n            val = lockTokenTimeAfterCoverExp / (1 days);\n\n        } else if (code == \"JOINFEE\") {\n\n            val = joiningFee;\n\n        } \n    }\n\n    /**\n    * @dev Just for interface\n    */\n    function changeDependentContractAddress() public { //solhint-disable-line\n    }\n    \n    /**\n     * @dev to get the contract staked by a staker \n     * @param _stakerAddress is the address of the staker\n     * @param _stakerIndex is the index of staker\n     * @return the address of staked contract\n     */\n    function getStakerStakedContractByIndex(\n        address _stakerAddress,\n        uint _stakerIndex\n    ) \n        public\n        view\n        returns (address stakedContractAddress) \n    {\n        stakedContractAddress = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].stakedContractAddress;\n    }\n\n    /**\n     * @dev to get the staker's staked burned \n     * @param _stakerAddress is the address of the staker\n     * @param _stakerIndex is the index of staker\n     * @return amount burned\n     */\n    function getStakerStakedBurnedByIndex(\n        address _stakerAddress,\n        uint _stakerIndex\n    ) \n        public\n        view\n        returns (uint burnedAmount) \n    {\n        burnedAmount = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].burnedAmount;\n    }\n\n    /**\n     * @dev to get the staker's staked unlockable before the last burn \n     * @param _stakerAddress is the address of the staker\n     * @param _stakerIndex is the index of staker\n     * @return unlockable staked tokens\n     */\n    function getStakerStakedUnlockableBeforeLastBurnByIndex(\n        address _stakerAddress,\n        uint _stakerIndex\n    ) \n        public\n        view\n        returns (uint unlockable) \n    {\n        unlockable = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].unLockableBeforeLastBurn;\n    }\n\n    /**\n     * @dev to get the staker's staked contract index \n     * @param _stakerAddress is the address of the staker\n     * @param _stakerIndex is the index of staker\n     * @return is the index of the smart contract address\n     */\n    function getStakerStakedContractIndex(\n        address _stakerAddress,\n        uint _stakerIndex\n    ) \n        public\n        view\n        returns (uint scIndex) \n    {\n        scIndex = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].stakedContractIndex;\n    }\n\n    /**\n     * @dev to get the staker index of the staked contract\n     * @param _stakedContractAddress is the address of the staked contract\n     * @param _stakedContractIndex is the index of staked contract\n     * @return is the index of the staker\n     */\n    function getStakedContractStakerIndex(\n        address _stakedContractAddress,\n        uint _stakedContractIndex\n    ) \n        public\n        view\n        returns (uint sIndex) \n    {\n        sIndex = stakedContractStakers[\n            _stakedContractAddress][_stakedContractIndex].stakerIndex;\n    }\n\n    /**\n     * @dev to get the staker's initial staked amount on the contract \n     * @param _stakerAddress is the address of the staker\n     * @param _stakerIndex is the index of staker\n     * @return staked amount\n     */\n    function getStakerInitialStakedAmountOnContract(\n        address _stakerAddress,\n        uint _stakerIndex\n    )\n        public \n        view\n        returns (uint amount)\n    {\n        amount = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].stakeAmount;\n    }\n\n    /**\n     * @dev to get the staker's staked contract length \n     * @param _stakerAddress is the address of the staker\n     * @return length of staked contract\n     */\n    function getStakerStakedContractLength(\n        address _stakerAddress\n    ) \n        public\n        view\n        returns (uint length)\n    {\n        length = stakerStakedContracts[_stakerAddress].length;\n    }\n\n    /**\n     * @dev to get the staker's unlocked tokens which were staked \n     * @param _stakerAddress is the address of the staker\n     * @param _stakerIndex is the index of staker\n     * @return amount\n     */\n    function getStakerUnlockedStakedTokens(\n        address _stakerAddress,\n        uint _stakerIndex\n    )\n        public \n        view\n        returns (uint amount)\n    {\n        amount = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].unlockedAmount;\n    }\n\n    /**\n     * @dev pushes the unlocked staked tokens by a staker.\n     * @param _stakerAddress address of staker.\n     * @param _stakerIndex index of the staker to distribute commission.\n     * @param _amount amount to be given as commission.\n     */ \n    function pushUnlockedStakedTokens(\n        address _stakerAddress,\n        uint _stakerIndex,\n        uint _amount\n    )   \n        public\n        onlyInternal\n    {   \n        stakerStakedContracts[_stakerAddress][\n            _stakerIndex].unlockedAmount = stakerStakedContracts[_stakerAddress][\n                _stakerIndex].unlockedAmount.add(_amount);\n    }\n\n    /**\n     * @dev pushes the Burned tokens for a staker.\n     * @param _stakerAddress address of staker.\n     * @param _stakerIndex index of the staker.\n     * @param _amount amount to be burned.\n     */ \n    function pushBurnedTokens(\n        address _stakerAddress,\n        uint _stakerIndex,\n        uint _amount\n    )   \n        public\n        onlyInternal\n    {   \n        stakerStakedContracts[_stakerAddress][\n            _stakerIndex].burnedAmount = stakerStakedContracts[_stakerAddress][\n                _stakerIndex].burnedAmount.add(_amount);\n    }\n\n    /**\n     * @dev pushes the unLockable tokens for a staker before last burn.\n     * @param _stakerAddress address of staker.\n     * @param _stakerIndex index of the staker.\n     * @param _amount amount to be added to unlockable.\n     */ \n    function pushUnlockableBeforeLastBurnTokens(\n        address _stakerAddress,\n        uint _stakerIndex,\n        uint _amount\n    )   \n        public\n        onlyInternal\n    {   \n        stakerStakedContracts[_stakerAddress][\n            _stakerIndex].unLockableBeforeLastBurn = stakerStakedContracts[_stakerAddress][\n                _stakerIndex].unLockableBeforeLastBurn.add(_amount);\n    }\n\n    /**\n     * @dev sets the unLockable tokens for a staker before last burn.\n     * @param _stakerAddress address of staker.\n     * @param _stakerIndex index of the staker.\n     * @param _amount amount to be added to unlockable.\n     */ \n    function setUnlockableBeforeLastBurnTokens(\n        address _stakerAddress,\n        uint _stakerIndex,\n        uint _amount\n    )   \n        public\n        onlyInternal\n    {   \n        stakerStakedContracts[_stakerAddress][\n            _stakerIndex].unLockableBeforeLastBurn = _amount;\n    }\n\n    /**\n     * @dev pushes the earned commission earned by a staker.\n     * @param _stakerAddress address of staker.\n     * @param _stakedContractAddress address of smart contract.\n     * @param _stakedContractIndex index of the staker to distribute commission.\n     * @param _commissionAmount amount to be given as commission.\n     */ \n    function pushEarnedStakeCommissions(\n        address _stakerAddress,\n        address _stakedContractAddress,\n        uint _stakedContractIndex,\n        uint _commissionAmount\n    )   \n        public\n        onlyInternal\n    {\n        stakedContractStakeCommission[_stakedContractAddress][_stakedContractIndex].\n            commissionEarned = stakedContractStakeCommission[_stakedContractAddress][\n                _stakedContractIndex].commissionEarned.add(_commissionAmount);\n                \n        emit Commission(\n            _stakerAddress,\n            _stakedContractAddress,\n            _stakedContractIndex,\n            _commissionAmount\n        );\n    }\n\n    /**\n     * @dev pushes the redeemed commission redeemed by a staker.\n     * @param _stakerAddress address of staker.\n     * @param _stakerIndex index of the staker to distribute commission.\n     * @param _amount amount to be given as commission.\n     */ \n    function pushRedeemedStakeCommissions(\n        address _stakerAddress,\n        uint _stakerIndex,\n        uint _amount\n    )   \n        public\n        onlyInternal\n    {   \n        uint stakedContractIndex = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].stakedContractIndex;\n        address stakedContractAddress = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].stakedContractAddress;\n        stakedContractStakeCommission[stakedContractAddress][stakedContractIndex].\n            commissionRedeemed = stakedContractStakeCommission[\n                stakedContractAddress][stakedContractIndex].commissionRedeemed.add(_amount);\n    }\n\n    /**\n     * @dev Gets stake commission given to an underwriter\n     * for particular stakedcontract on given index.\n     * @param _stakerAddress address of staker.\n     * @param _stakerIndex index of the staker commission.\n     */ \n    function getStakerEarnedStakeCommission(\n        address _stakerAddress,\n        uint _stakerIndex\n    )\n        public \n        view\n        returns (uint) \n    {\n        return _getStakerEarnedStakeCommission(_stakerAddress, _stakerIndex);\n    }\n\n    /**\n     * @dev Gets stake commission redeemed by an underwriter\n     * for particular staked contract on given index.\n     * @param _stakerAddress address of staker.\n     * @param _stakerIndex index of the staker commission.\n     * @return commissionEarned total amount given to staker.\n     */ \n    function getStakerRedeemedStakeCommission(\n        address _stakerAddress,\n        uint _stakerIndex\n    )\n        public \n        view\n        returns (uint) \n    {\n        return _getStakerRedeemedStakeCommission(_stakerAddress, _stakerIndex);\n    }\n\n    /**\n     * @dev Gets total stake commission given to an underwriter\n     * @param _stakerAddress address of staker.\n     * @return totalCommissionEarned total commission earned by staker.\n     */ \n    function getStakerTotalEarnedStakeCommission(\n        address _stakerAddress\n    )\n        public \n        view\n        returns (uint totalCommissionEarned) \n    {\n        totalCommissionEarned = 0;\n        for (uint i = 0; i < stakerStakedContracts[_stakerAddress].length; i++) {\n            totalCommissionEarned = totalCommissionEarned.\n                add(_getStakerEarnedStakeCommission(_stakerAddress, i));\n        }\n    }\n\n    /**\n     * @dev Gets total stake commission given to an underwriter\n     * @param _stakerAddress address of staker.\n     * @return totalCommissionEarned total commission earned by staker.\n     */ \n    function getStakerTotalReedmedStakeCommission(\n        address _stakerAddress\n    )\n        public \n        view\n        returns(uint totalCommissionRedeemed) \n    {\n        totalCommissionRedeemed = 0;\n        for (uint i = 0; i < stakerStakedContracts[_stakerAddress].length; i++) {\n            totalCommissionRedeemed = totalCommissionRedeemed.add(\n                _getStakerRedeemedStakeCommission(_stakerAddress, i));\n        }\n    }\n\n    /**\n     * @dev set flag to deposit/ undeposit cover note \n     * against a cover Id\n     * @param coverId coverId of Cover\n     * @param flag true/false for deposit/undeposit\n     */\n    function setDepositCN(uint coverId, bool flag) public onlyInternal {\n\n        if (flag == true) {\n            require(!depositedCN[coverId].isDeposited, \"Cover note already deposited\");    \n        }\n\n        depositedCN[coverId].isDeposited = flag;\n    }\n\n    /**\n     * @dev set locked cover note amount\n     * against a cover Id\n     * @param coverId coverId of Cover\n     * @param amount amount of nxm to be locked\n     */\n    function setDepositCNAmount(uint coverId, uint amount) public onlyInternal {\n\n        depositedCN[coverId].amount = amount;\n    }\n\n    /**\n     * @dev to get the staker address on a staked contract \n     * @param _stakedContractAddress is the address of the staked contract in concern\n     * @param _stakedContractIndex is the index of staked contract's index\n     * @return address of staker\n     */\n    function getStakedContractStakerByIndex(\n        address _stakedContractAddress,\n        uint _stakedContractIndex\n    )\n        public\n        view\n        returns (address stakerAddress)\n    {\n        stakerAddress = stakedContractStakers[\n            _stakedContractAddress][_stakedContractIndex].stakerAddress;\n    }\n\n    /**\n     * @dev to get the length of stakers on a staked contract \n     * @param _stakedContractAddress is the address of the staked contract in concern\n     * @return length in concern\n     */\n    function getStakedContractStakersLength(\n        address _stakedContractAddress\n    ) \n        public\n        view\n        returns (uint length)\n    {\n        length = stakedContractStakers[_stakedContractAddress].length;\n    } \n    \n    /**\n     * @dev Adds a new stake record.\n     * @param _stakerAddress staker address.\n     * @param _stakedContractAddress smart contract address.\n     * @param _amount amountof NXM to be staked.\n     */\n    function addStake(\n        address _stakerAddress,\n        address _stakedContractAddress,\n        uint _amount\n    ) \n        public\n        onlyInternal\n        returns(uint scIndex) \n    {\n        scIndex = (stakedContractStakers[_stakedContractAddress].push(\n            Staker(_stakerAddress, stakerStakedContracts[_stakerAddress].length))).sub(1);\n        stakerStakedContracts[_stakerAddress].push(\n            Stake(_stakedContractAddress, scIndex, now, _amount, 0, 0, 0));\n    }\n\n    /**\n     * @dev books the user's tokens for maintaining Assessor Velocity, \n     * i.e. once a token is used to cast a vote as a Claims assessor,\n     * @param _of user's address.\n     */\n    function bookCATokens(address _of) public onlyInternal {\n        require(!isCATokensBooked(_of), \"Tokens already booked\");\n        isBookedTokens[_of] = now.add(bookTime);\n    }\n\n    /**\n     * @dev to know if claim assessor's tokens are booked or not \n     * @param _of is the claim assessor's address in concern\n     * @return boolean representing the status of tokens booked\n     */\n    function isCATokensBooked(address _of) public view returns(bool res) {\n        if (now < isBookedTokens[_of])\n            res = true;\n    }\n\n    /**\n     * @dev Sets the index which will receive commission.\n     * @param _stakedContractAddress smart contract address.\n     * @param _index current index.\n     */\n    function setStakedContractCurrentCommissionIndex(\n        address _stakedContractAddress,\n        uint _index\n    )\n        public\n        onlyInternal\n    {\n        stakedContractCurrentCommissionIndex[_stakedContractAddress] = _index;\n    }\n\n    /**\n     * @dev Sets the last complete commission index\n     * @param _stakerAddress smart contract address.\n     * @param _index current index.\n     */\n    function setLastCompletedStakeCommissionIndex(\n        address _stakerAddress,\n        uint _index\n    )\n        public\n        onlyInternal\n    {\n        lastCompletedStakeCommission[_stakerAddress] = _index;\n    }\n\n    /**\n     * @dev Sets the index till which commission is distrubuted.\n     * @param _stakedContractAddress smart contract address.\n     * @param _index current index.\n     */\n    function setStakedContractCurrentBurnIndex(\n        address _stakedContractAddress,\n        uint _index\n    )\n        public\n        onlyInternal\n    {\n        stakedContractCurrentBurnIndex[_stakedContractAddress] = _index;\n    }\n\n    /**\n     * @dev Updates Uint Parameters of a code\n     * @param code whose details we want to update\n     * @param val value to set\n     */\n    function updateUintParameters(bytes8 code, uint val) public {\n        require(ms.checkIsAuthToGoverned(msg.sender));\n        if (code == \"TOKEXP\") {\n\n            _setTokenExponent(val); \n\n        } else if (code == \"TOKSTEP\") {\n\n            _setPriceStep(val);\n\n        } else if (code == \"RALOCKT\") {\n\n            _changeSCValidDays(val);\n\n        } else if (code == \"RACOMM\") {\n\n            _setStakerCommissionPer(val);\n\n        } else if (code == \"RAMAXC\") {\n\n            _setStakerMaxCommissionPer(val);\n\n        } else if (code == \"CABOOKT\") {\n\n            _changeBookTime(val * 1 hours);\n\n        } else if (code == \"CALOCKT\") {\n\n            _changelockCADays(val * 1 days);\n\n        } else if (code == \"MVLOCKT\") {\n\n            _changelockMVDays(val * 1 days);\n\n        } else if (code == \"QUOLOCKT\") {\n\n            _setLockTokenTimeAfterCoverExp(val * 1 days);\n\n        } else if (code == \"JOINFEE\") {\n\n            _setJoiningFee(val);\n\n        } else {\n            revert(\"Invalid param code\");\n        } \n    }\n\n    /**\n     * @dev Internal function to get stake commission given to an \n     * underwriter for particular stakedcontract on given index.\n     * @param _stakerAddress address of staker.\n     * @param _stakerIndex index of the staker commission.\n     */ \n    function _getStakerEarnedStakeCommission(\n        address _stakerAddress,\n        uint _stakerIndex\n    )\n        internal\n        view \n        returns (uint amount) \n    {\n        uint _stakedContractIndex;\n        address _stakedContractAddress;\n        _stakedContractAddress = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].stakedContractAddress;\n        _stakedContractIndex = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].stakedContractIndex;\n        amount = stakedContractStakeCommission[\n            _stakedContractAddress][_stakedContractIndex].commissionEarned;\n    }\n\n    /**\n     * @dev Internal function to get stake commission redeemed by an \n     * underwriter for particular stakedcontract on given index.\n     * @param _stakerAddress address of staker.\n     * @param _stakerIndex index of the staker commission.\n     */ \n    function _getStakerRedeemedStakeCommission(\n        address _stakerAddress,\n        uint _stakerIndex\n    )\n        internal\n        view \n        returns (uint amount) \n    {\n        uint _stakedContractIndex;\n        address _stakedContractAddress;\n        _stakedContractAddress = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].stakedContractAddress;\n        _stakedContractIndex = stakerStakedContracts[\n            _stakerAddress][_stakerIndex].stakedContractIndex;\n        amount = stakedContractStakeCommission[\n            _stakedContractAddress][_stakedContractIndex].commissionRedeemed;\n    }\n\n    /**\n     * @dev to set the percentage of staker commission \n     * @param _val is new percentage value\n     */\n    function _setStakerCommissionPer(uint _val) internal {\n        stakerCommissionPer = _val;\n    }\n\n    /**\n     * @dev to set the max percentage of staker commission \n     * @param _val is new percentage value\n     */\n    function _setStakerMaxCommissionPer(uint _val) internal {\n        stakerMaxCommissionPer = _val;\n    }\n\n    /**\n     * @dev to set the token exponent value \n     * @param _val is new value\n     */\n    function _setTokenExponent(uint _val) internal {\n        tokenExponent = _val;\n    }\n\n    /**\n     * @dev to set the price step \n     * @param _val is new value\n     */\n    function _setPriceStep(uint _val) internal {\n        priceStep = _val;\n    }\n\n    /**\n     * @dev Changes number of days for which NXM needs to staked in case of underwriting\n     */ \n    function _changeSCValidDays(uint _days) internal {\n        scValidDays = _days;\n    }\n\n    /**\n     * @dev Changes the time period up to which tokens will be locked.\n     *      Used to generate the validity period of tokens booked by\n     *      a user for participating in claim's assessment/claim's voting.\n     */ \n    function _changeBookTime(uint _time) internal {\n        bookTime = _time;\n    }\n\n    /**\n     * @dev Changes lock CA days - number of days for which tokens \n     * are locked while submitting a vote.\n     */ \n    function _changelockCADays(uint _val) internal {\n        lockCADays = _val;\n    }\n    \n    /**\n     * @dev Changes lock MV days - number of days for which tokens are locked\n     * while submitting a vote.\n     */ \n    function _changelockMVDays(uint _val) internal {\n        lockMVDays = _val;\n    }\n\n    /**\n     * @dev Changes extra lock period for a cover, post its expiry.\n     */ \n    function _setLockTokenTimeAfterCoverExp(uint time) internal {\n        lockTokenTimeAfterCoverExp = time;\n    }\n\n    /**\n     * @dev Set the joining fee for membership\n     */\n    function _setJoiningFee(uint _amount) internal {\n        joiningFee = _amount;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000cb102cbfad94d71596d7d9172072da8b86e60fbd"
}