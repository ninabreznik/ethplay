{
  "address": "0x2fe5e394a312acf9d18e8836f04ba92af29ad6d4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Humanity: Faucet",
  "contractName": "Faucet",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-09\n*/\n\npragma solidity 0.5.7;\npragma experimental ABIEncoderV2;\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath::mul: Integer overflow\");\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath::div: Invalid divisor zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath::sub: Integer underflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath::add: Integer overflow\");\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath::mod: Invalid divisor zero\");\n        return a % b;\n    }\n}\n\n\n/**\n * @title Faucet\n * @dev Mine Humanity tokens into Uniswap.\n */\ncontract Faucet {\n    using SafeMath for uint;\n\n    uint public constant BLOCK_REWARD = 1e18;\n    uint public START_BLOCK = block.number;\n    uint public END_BLOCK = block.number + 5000000;\n\n    IERC20 public humanity;\n    address public auction;\n\n    uint public lastMined = block.number;\n\n    constructor(IERC20 _humanity, address _auction) public {\n        humanity = _humanity;\n        auction = _auction;\n    }\n\n    function mine() public {\n        uint rewardBlock = block.number < END_BLOCK ? block.number : END_BLOCK;\n        uint reward = rewardBlock.sub(lastMined).mul(BLOCK_REWARD);\n        humanity.transfer(auction, reward);\n        lastMined = block.number;\n    }\n}",
  "bytecode": "608060405243600055624c4b4043016001554360045534801561002157600080fd5b50604051604080610772833981018060405261004091908101906100f1565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610171565b60006100d5825161012d565b905092915050565b60006100e9825161013f565b905092915050565b6000806040838503121561010457600080fd5b6000610112858286016100dd565b9250506020610123858286016100c9565b9150509250929050565b600061013882610151565b9050919050565b600061014a8261012d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6105f2806101806000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637f05b9ef1161005b5780637f05b9ef146100dc57806399f4b251146100fa578063b5afac5d14610104578063cd3ec1d6146101225761007d565b806339b3e8261461008257806349f81a20146100a05780637d9f6db5146100be575b600080fd5b61008a610140565b6040516100979190610520565b60405180910390f35b6100a8610146565b6040516100b591906104c5565b60405180910390f35b6100c661016c565b6040516100d39190610481565b60405180910390f35b6100e4610192565b6040516100f19190610520565b60405180910390f35b61010261019e565b005b61010c6102c5565b6040516101199190610520565b60405180910390f35b61012a6102cb565b6040516101379190610520565b60405180910390f35b60005481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b670de0b6b3a764000081565b600060015443106101b1576001546101b3565b435b905060006101e6670de0b6b3a76400006101d8600454856102d190919063ffffffff16565b61032790919063ffffffff16565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161026792919061049c565b602060405180830381600087803b15801561028157600080fd5b505af1158015610295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102b991908101906103ab565b50436004819055505050565b60045481565b60015481565b600082821115610316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030d90610500565b60405180910390fd5b600082840390508091505092915050565b60008083141561033a5760009050610391565b600082840290508284828161034b57fe5b041461038c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610383906104e0565b60405180910390fd5b809150505b92915050565b60006103a38251610588565b905092915050565b6000602082840312156103bd57600080fd5b60006103cb84828501610397565b91505092915050565b6103dd8161054c565b82525050565b6103ec81610594565b82525050565b60006103ff601f8361053b565b91507f536166654d6174683a3a6d756c3a20496e7465676572206f766572666c6f77006000830152602082019050919050565b600061043f60208361053b565b91507f536166654d6174683a3a7375623a20496e746567657220756e646572666c6f776000830152602082019050919050565b61047b8161057e565b82525050565b600060208201905061049660008301846103d4565b92915050565b60006040820190506104b160008301856103d4565b6104be6020830184610472565b9392505050565b60006020820190506104da60008301846103e3565b92915050565b600060208201905081810360008301526104f9816103f2565b9050919050565b6000602082019050818103600083015261051981610432565b9050919050565b60006020820190506105356000830184610472565b92915050565b600082825260208201905092915050565b60006105578261055e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60008115159050919050565b600061059f826105a6565b9050919050565b60006105b18261055e565b905091905056fea265627a7a72305820a93de3a6de99c04ffd1d70b7cd0216e3ebc3265b2baabae85daad9ac399521f26c6578706572696d656e74616cf50037000000000000000000000000bbd1706d16418bb136e1497a73d3af4164586da0000000000000000000000000e499657190d515119077af5d64f44b6f850baea5",
  "constructorArguments": "000000000000000000000000bbd1706d16418bb136e1497a73d3af4164586da0000000000000000000000000e499657190d515119077af5d64f44b6f850baea5"
}