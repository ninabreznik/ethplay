{
  "address": "0xa299df5d0368b75ed5230363a01a81add1151483",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "KillingChain Token",
  "contractName": "KillingChainToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-07-30\n*/\n\npragma solidity ^0.4.4;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n/**\n * @title Contracts that should not own Ether\n * @author Remco Bloemen <[email protected]π.com>\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this ether.\n * @notice Ether can still be send to this contract by:\n * calling functions labeled `payable`\n * `selfdestruct(contract_address)`\n * mining directly to the contract address\n*/\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    assert(owner.send(this.balance));\n  }\n}\ncontract KillingChainToken is StandardToken, Ownable, HasNoEther {\n\n  string public name = 'KillingChainToken';\n  string public symbol = 'KCT';\n  uint public decimals = 18;\n\n  // 团队地址\n  // 所有 ETH 入金都会被转到此地址\n  address public founder = 0x0;\n  // 运营推广基金地址\n  address public marketing = 0x0;\n  // ICO 配额地址\n  address public crowdsale = 0x0;\n\n  // 总量: 1亿\n  uint public totalSupply = 10000 * 10000 * 10**decimals;\n  // 团队持有: 1000万\n  uint public founderAllocation = 1000 * 10000 * 10**decimals;\n  // 运营推广: 4000万\n  uint public marketingAllocation = 4000 * 10000 * 10**decimals;\n  // ICO 募集量: 5000万\n  uint public crowdsaleAllocation = totalSupply - founderAllocation - marketingAllocation;\n  function KillingChainToken(address _founder, address _marketing, address _crowdsale) {\n    require(_founder != address(0));\n    require(_marketing != address(0));\n    require(_crowdsale != address(0));\n    require(_founder != _marketing);\n    require(_founder != _crowdsale);\n    require(_marketing != _crowdsale);\n\n    founder = _founder;\n    marketing = _marketing;\n    crowdsale = _crowdsale;\n\n    balances[founder] = founderAllocation;\n    balances[marketing] = marketingAllocation;\n    balances[crowdsale] = crowdsaleAllocation;\n\n    owner = founder;\n  }\n\n}",
  "bytecode": "60a0604052601160608190527f4b696c6c696e67436861696e546f6b656e000000000000000000000000000000608090815261003e9160049190610253565b506040805180820190915260038082527f4b43540000000000000000000000000000000000000000000000000000000000602090920191825261008391600591610253565b50601260065560078054600160a060020a031990811690915560088054821690556009805490911690556a52b7d2dcc80cd2e4000000600a556a084595161401484a000000600b556a2116545850052128000000600c556a295be96e64066972000000600d5534156100f157fe5b604051606080610cfb8339810160409081528151602083015191909201515b5b5b60038054600160a060020a03191633600160a060020a03161790555b341561013a5760006000fd5b5b600160a060020a03831615156101515760006000fd5b600160a060020a03821615156101675760006000fd5b600160a060020a038116151561017d5760006000fd5b600160a060020a0383811690831614156101975760006000fd5b600160a060020a0383811690821614156101b15760006000fd5b600160a060020a0382811690821614156101cb5760006000fd5b60078054600160a060020a0319908116600160a060020a0386811691909117808455600880548416878416178155600980548516878516178155600b5492841660009081526001602052604080822094909455600c5492548516815283812092909255600d54905484168252919020559154600380549190931691161790555b5050506102f3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061029457805160ff19168380011785556102c1565b828001600101855582156102c1579182015b828111156102c15782518255916020019190600101906102a6565b5b506102ce9291506102d2565b5090565b6102f091905b808211156102ce57600081556001016102d8565b5090565b90565b6109f9806103026000396000f300606060405236156100f95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461010a578063095ea7b31461019a57806315f0c220146101cd57806318160ddd146101ef57806323b872dd146102115780632d3e474a1461024a578063313ce5671461027657806339918c4f146102985780634d853ee5146102ba57806370a08231146102e6578063824338bd146103145780638da5cb5b1461033657806395d89b41146103625780639c1e03a0146103f25780639f727c271461041e578063a9059cbb14610430578063dd62ed3e14610463578063f2fde38b14610497575b341561010157fe5b6101085b5b565b005b341561011257fe5b61011a6104b5565b604080516020808252835181830152835191928392908301918501908083838215610160575b80518252602083111561016057601f199092019160209182019101610140565b505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101a257fe5b6101b9600160a060020a0360043516602435610543565b604080519115158252519081900360200190f35b34156101d557fe5b6101dd6105e8565b60408051918252519081900360200190f35b34156101f757fe5b6101dd6105ee565b60408051918252519081900360200190f35b341561021957fe5b6101b9600160a060020a03600435811690602435166044356105f4565b604080519115158252519081900360200190f35b341561025257fe5b61025a610709565b60408051600160a060020a039092168252519081900360200190f35b341561027e57fe5b6101dd610718565b60408051918252519081900360200190f35b34156102a057fe5b6101dd61071e565b60408051918252519081900360200190f35b34156102c257fe5b61025a610724565b60408051600160a060020a039092168252519081900360200190f35b34156102ee57fe5b6101dd600160a060020a0360043516610733565b60408051918252519081900360200190f35b341561031c57fe5b6101dd610752565b60408051918252519081900360200190f35b341561033e57fe5b61025a610758565b60408051600160a060020a039092168252519081900360200190f35b341561036a57fe5b61011a610767565b604080516020808252835181830152835191928392908301918501908083838215610160575b80518252602083111561016057601f199092019160209182019101610140565b505050905090810190601f16801561018c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103fa57fe5b61025a6107f5565b60408051600160a060020a039092168252519081900360200190f35b341561042657fe5b610108610804565b005b341561043857fe5b6101b9600160a060020a0360043516602435610856565b604080519115158252519081900360200190f35b341561046b57fe5b6101dd600160a060020a0360043581169060243516610916565b60408051918252519081900360200190f35b341561049f57fe5b610108600160a060020a0360043516610943565b005b6004805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561053b5780601f106105105761010080835404028352916020019161053b565b820191906000526020600020905b81548152906001019060200180831161051e57829003601f168201915b505050505081565b60008115806105755750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156105815760006000fd5b600160a060020a03338116600081815260026020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b600c5481565b600a5481565b600160a060020a03808416600090815260026020908152604080832033851684528252808320549386168352600190915281205490919061063b908463ffffffff61099c16565b600160a060020a038086166000908152600160205260408082209390935590871681522054610670908463ffffffff6109b616565b600160a060020a038616600090815260016020526040902055610699818463ffffffff6109b616565b600160a060020a038087166000818152600260209081526040808320338616845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3600191505b509392505050565b600854600160a060020a031681565b60065481565b600d5481565b600754600160a060020a031681565b600160a060020a0381166000908152600160205260409020545b919050565b600b5481565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561053b5780601f106105105761010080835404028352916020019161053b565b820191906000526020600020905b81548152906001019060200180831161051e57829003601f168201915b505050505081565b600954600160a060020a031681565b60035433600160a060020a039081169116146108205760006000fd5b600354604051600160a060020a039182169130163180156108fc02916000818181858888f19350505050151561010557fe5b5b5b565b600160a060020a03331660009081526001602052604081205461087f908363ffffffff6109b616565b600160a060020a0333811660009081526001602052604080822093909355908516815220546108b4908363ffffffff61099c16565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461095f5760006000fd5b600160a060020a03811615610997576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b6000828201838110156109ab57fe5b8091505b5092915050565b6000828211156109c257fe5b508082035b929150505600a165627a7a72305820d6282d57ad39c6645dd54680303e5ffdf7950764c980e09fea62d06ee446f356002900000000000000000000000045ebb1fbf6c36f68a1bcfc3646f171c504d16c07000000000000000000000000cb9f7c3e895479a1ff5cc4160b543a4009f1e62f000000000000000000000000ba3317286485e65936ea6b0e5b9b3f35af842447",
  "constructorArguments": "00000000000000000000000045ebb1fbf6c36f68a1bcfc3646f171c504d16c07000000000000000000000000cb9f7c3e895479a1ff5cc4160b543a4009f1e62f000000000000000000000000ba3317286485e65936ea6b0e5b9b3f35af842447"
}