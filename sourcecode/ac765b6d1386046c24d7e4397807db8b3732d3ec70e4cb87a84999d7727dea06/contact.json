{
  "address": "0xbc4191167d4b0251cab5201a527daa8a7d3846b0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NovaBox",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-11\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    uint256 c = _a * _b;\n    require(c / _a == _b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    require(_b <= _a);\n    uint256 c = _a - _b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    uint256 c = _a + _b;\n    require(c >= _a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ninterface token { \n  function transfer(address, uint) external returns (bool);\n  function transferFrom(address, address, uint) external returns (bool); \n  function allowance(address, address) external constant returns (uint256);\n  function balanceOf(address) external constant returns (uint256);\n}\n\n/** LOGIC DESCRIPTION\n * 11% fees in and out for ETH\n * 11% fees in and out for NOVA\n *\n * ETH fees split: \n * 6% to nova holders\n * 4% to eth holders\n * 1% to fixed address\n * \n * NOVA fees split: \n * 6% to nova holders\n * 4% to eth holders\n * 1% airdrop to a random address based on their nova shares\n * rules: \n * - you need to have both nova and eth to get dividends\n */\n\ncontract NovaBox is Ownable {\n  \n  using SafeMath for uint;\n  token tokenReward;\n\n  \n  constructor() public {\n    tokenReward = token(0x72FBc0fc1446f5AcCC1B083F0852a7ef70a8ec9f);\n  }\n\n  event AirDrop(address to, uint amount, uint randomTicket);\n  event DividendsTransferred(address to, uint ethAmount, uint novaAmount);\n\n\n  // ether contributions\n  mapping (address => uint) public contributionsEth;\n  // token contributions\n  mapping (address => uint) public contributionsToken;\n\n  // investors list who have deposited BOTH ether and token\n  mapping (address => uint) public indexes;\n  mapping (uint => address) public addresses;\n  uint256 public lastIndex = 0;\n\n  mapping (address => bool) public addedToList;\n  uint _totalTokens = 0;\n  uint _totalWei = 0;\n\n  uint pointMultiplier = 1e18;\n\n  mapping (address => uint) public last6EthDivPoints;\n  uint public total6EthDivPoints = 0;\n  // uint public unclaimed6EthDivPoints = 0;\n\n  mapping (address => uint) public last4EthDivPoints;\n  uint public total4EthDivPoints = 0;\n  // uint public unclaimed4EthDivPoints = 0;\n\n  mapping (address => uint) public last6TokenDivPoints;\n  uint public total6TokenDivPoints = 0;\n  // uint public unclaimed6TokenDivPoints = 0;\n\n  mapping (address => uint) public last4TokenDivPoints;\n  uint public total4TokenDivPoints = 0;\n  // uint public unclaimed4TokenDivPoints = 0;\n\n  function ethDivsOwing(address _addr) public view returns (uint) {\n    return eth4DivsOwing(_addr).add(eth6DivsOwing(_addr));\n  }\n\n  function eth6DivsOwing(address _addr) public view returns (uint) {\n    if (!addedToList[_addr]) return 0;\n    uint newEth6DivPoints = total6EthDivPoints.sub(last6EthDivPoints[_addr]);\n\n    return contributionsToken[_addr].mul(newEth6DivPoints).div(pointMultiplier);\n  }\n\n  function eth4DivsOwing(address _addr) public view returns (uint) {\n    if (!addedToList[_addr]) return 0;\n    uint newEth4DivPoints = total4EthDivPoints.sub(last4EthDivPoints[_addr]);\n    return contributionsEth[_addr].mul(newEth4DivPoints).div(pointMultiplier);\n  }\n\n  function tokenDivsOwing(address _addr) public view returns (uint) {\n    return token4DivsOwing(_addr).add(token6DivsOwing(_addr));    \n  }\n\n  function token6DivsOwing(address _addr) public view returns (uint) {\n    if (!addedToList[_addr]) return 0;\n    uint newToken6DivPoints = total6TokenDivPoints.sub(last6TokenDivPoints[_addr]);\n    return contributionsToken[_addr].mul(newToken6DivPoints).div(pointMultiplier);\n  }\n\n  function token4DivsOwing(address _addr) public view returns (uint) {\n    if (!addedToList[_addr]) return 0;\n\n    uint newToken4DivPoints = total4TokenDivPoints.sub(last4TokenDivPoints[_addr]);\n    return contributionsEth[_addr].mul(newToken4DivPoints).div(pointMultiplier);\n  }\n\n  function updateAccount(address account) private {\n    uint owingEth6 = eth6DivsOwing(account);\n    uint owingEth4 = eth4DivsOwing(account);\n    uint owingEth = owingEth4.add(owingEth6);\n\n    uint owingToken6 = token6DivsOwing(account);\n    uint owingToken4 = token4DivsOwing(account);\n    uint owingToken = owingToken4.add(owingToken6);\n\n    if (owingEth > 0) {\n      // send ether dividends to account\n      account.transfer(owingEth);\n    }\n\n    if (owingToken > 0) {\n      // send token dividends to account\n      tokenReward.transfer(account, owingToken);\n    }\n\n    last6EthDivPoints[account] = total6EthDivPoints;\n    last4EthDivPoints[account] = total4EthDivPoints;\n    last6TokenDivPoints[account] = total6TokenDivPoints;\n    last4TokenDivPoints[account] = total4TokenDivPoints;\n\n    emit DividendsTransferred(account, owingEth, owingToken);\n\n  }\n\n\n\n  function addToList(address sender) private {\n    addedToList[sender] = true;\n    // if the sender is not in the list\n    if (indexes[sender] == 0) {\n      _totalTokens = _totalTokens.add(contributionsToken[sender]);\n      _totalWei = _totalWei.add(contributionsEth[sender]);\n\n      // add the sender to the list\n      lastIndex++;\n      addresses[lastIndex] = sender;\n      indexes[sender] = lastIndex;\n    }\n  }\n  function removeFromList(address sender) private {\n    addedToList[sender] = false;\n    // if the sender is in temp eth list \n    if (indexes[sender] > 0) {\n      _totalTokens = _totalTokens.sub(contributionsToken[sender]);\n      _totalWei = _totalWei.sub(contributionsEth[sender]);\n\n      // remove the sender from temp eth list\n      addresses[indexes[sender]] = addresses[lastIndex];\n      indexes[addresses[lastIndex]] = indexes[sender];\n      indexes[sender] = 0;\n      delete addresses[lastIndex];\n      lastIndex--;\n    }\n  }\n\n  // desposit ether\n  function () payable public {\n    address sender = msg.sender;\n    // size of code at target address\n    uint codeLength;\n\n    // get the length of code at the sender address\n    assembly {\n      codeLength := extcodesize(sender)\n    }\n\n    // don't allow contracts to deposit ether\n    require(codeLength == 0);\n    \n    uint weiAmount = msg.value;\n    \n\n    updateAccount(sender);\n\n    // number of ether sent must be greater than 0\n    require(weiAmount > 0);\n\n    uint _89percent = weiAmount.mul(89).div(100);\n    uint _6percent = weiAmount.mul(6).div(100);\n    uint _4percent = weiAmount.mul(4).div(100);\n    uint _1percent = weiAmount.mul(1).div(100);\n\n\n    \n\n\n    distributeEth(\n      _6percent, // to nova investors\n      _4percent  // to eth investors\n    ); \n    //1% goes to REX Investors\n    owner.transfer(_1percent);\n\n    contributionsEth[sender] = contributionsEth[sender].add(_89percent);\n    // if the sender is in list\n    if (indexes[sender]>0) {\n      // increase _totalWei\n      _totalWei = _totalWei.add(_89percent);\n    }\n\n    // if the sender has also deposited tokens, add sender to list\n    if (contributionsToken[sender]>0) addToList(sender);\n  }\n\n  // withdraw ether\n  function withdrawEth(uint amount) public {\n    address sender = msg.sender;\n    require(amount>0 && contributionsEth[sender] >= amount);\n\n    updateAccount(sender);\n\n    uint _89percent = amount.mul(89).div(100);\n    uint _6percent = amount.mul(6).div(100);\n    uint _4percent = amount.mul(4).div(100);\n    uint _1percent = amount.mul(1).div(100);\n\n    contributionsEth[sender] = contributionsEth[sender].sub(amount);\n    // if sender is in list\n    if (indexes[sender]>0) {\n      // decrease total wei\n      _totalWei = _totalWei.sub(amount);\n    }\n\n    // if the sender has withdrawn all their eth\n      // remove the sender from list\n    if (contributionsEth[sender] == 0) removeFromList(sender);\n\n    sender.transfer(_89percent);\n    distributeEth(\n      _6percent, // to nova investors\n      _4percent  // to eth investors\n    );\n    owner.transfer(_1percent);  //1% goes to REX Investors\n  }\n\n  // deposit tokens\n  function depositTokens(address randomAddr, uint randomTicket) public {\n    updateAccount(msg.sender);\n    \n\n    address sender = msg.sender;\n    uint amount = tokenReward.allowance(sender, address(this));\n    \n    // number of allowed tokens must be greater than 0\n    // if it is then transfer the allowed tokens from sender to the contract\n    // if not transferred then throw\n    require(amount>0 && tokenReward.transferFrom(sender, address(this), amount));\n\n\n    uint _89percent = amount.mul(89).div(100);\n    uint _6percent = amount.mul(6).div(100);\n    uint _4percent = amount.mul(4).div(100);\n    uint _1percent = amount.mul(1).div(100);\n    \n    \n\n    distributeTokens(\n      _6percent, // to nova investors\n      _4percent  // to eth investors\n      );\n    tokenReward.transfer(randomAddr, _1percent);\n    // 1% for Airdrop\n    emit AirDrop(randomAddr, _1percent, randomTicket);\n\n    contributionsToken[sender] = contributionsToken[sender].add(_89percent);\n\n    // if sender is in list\n    if (indexes[sender]>0) {\n      // increase totaltokens\n      _totalTokens = _totalTokens.add(_89percent);\n    }\n\n    // if the sender has also contributed ether add sender to list\n    if (contributionsEth[sender]>0) addToList(sender);\n  }\n\n  // withdraw tokens\n  function withdrawTokens(uint amount, address randomAddr, uint randomTicket) public {\n    address sender = msg.sender;\n    updateAccount(sender);\n    // requested amount must be greater than 0 and \n    // the sender must have contributed tokens no less than `amount`\n    require(amount>0 && contributionsToken[sender]>=amount);\n\n    uint _89percent = amount.mul(89).div(100);\n    uint _6percent = amount.mul(6).div(100);\n    uint _4percent = amount.mul(4).div(100);\n    uint _1percent = amount.mul(1).div(100);\n\n    contributionsToken[sender] = contributionsToken[sender].sub(amount);\n    // if sender is in list\n    if (indexes[sender]>0) {\n      // decrease total tokens\n      _totalTokens = _totalTokens.sub(amount);\n    }\n\n    // if sender withdrawn all their tokens, remove them from list\n    if (contributionsToken[sender] == 0) removeFromList(sender);\n\n    tokenReward.transfer(sender, _89percent);\n    distributeTokens(\n      _6percent, // to nova investors\n      _4percent  // to eth investors\n    );\n    // airdropToRandom(_1percent);  \n    tokenReward.transfer(randomAddr, _1percent);\n    emit AirDrop(randomAddr, _1percent, randomTicket);\n  }\n\n  function distributeTokens(uint _6percent, uint _4percent) private {\n    uint totalTokens = getTotalTokens();\n    uint totalWei = getTotalWei();\n\n    if (totalWei == 0 || totalTokens == 0) return; \n\n    total4TokenDivPoints = total4TokenDivPoints.add(_4percent.mul(pointMultiplier).div(totalWei));\n    // unclaimed4TokenDivPoints = unclaimed4TokenDivPoints.add(_4percent);\n\n    total6TokenDivPoints = total6TokenDivPoints.add(_6percent.mul(pointMultiplier).div(totalTokens));\n    // unclaimed6TokenDivPoints = unclaimed6TokenDivPoints.add(_6percent);\n    \n  }\n\n  function distributeEth(uint _6percent, uint _4percent) private {\n    uint totalTokens = getTotalTokens();\n    uint totalWei = getTotalWei();\n\n    if (totalWei ==0 || totalTokens == 0) return;\n\n    total4EthDivPoints = total4EthDivPoints.add(_4percent.mul(pointMultiplier).div(totalWei));\n    // unclaimed4EthDivPoints += _4percent;\n\n    total6EthDivPoints = total6EthDivPoints.add(_6percent.mul(pointMultiplier).div(totalTokens));\n    // unclaimed6EthDivPoints += _6percent;\n\n  }\n\n\n  // get sum of tokens contributed by the ether investors\n  function getTotalTokens() public view returns (uint) {\n    return _totalTokens;\n  }\n\n  // get the sum of wei contributed by the token investors\n  function getTotalWei() public view returns (uint) {\n    return _totalWei;\n  }\n\n  function withdrawDivs() public {\n    updateAccount(msg.sender);\n  }\n\n\n  // get the list of investors\n  function getList() public view returns (address[], uint[]) {\n    address[] memory _addrs = new address[](lastIndex);\n    uint[] memory _contributions = new uint[](lastIndex);\n\n    for (uint i = 1; i <= lastIndex; i++) {\n      _addrs[i-1] = addresses[i];\n      _contributions[i-1] = contributionsToken[addresses[i]];\n    }\n    return (_addrs, _contributions);\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"last6EthDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total6EthDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"token4DivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"tokenDivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"eth4DivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"last6TokenDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"token6DivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"eth6DivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ethDivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"randomAddr\",\"type\":\"address\"},{\"name\":\"randomTicket\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addedToList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total4EthDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total4TokenDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionsEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"last4EthDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"last4TokenDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total6TokenDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"randomAddr\",\"type\":\"address\"},{\"name\":\"randomTicket\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"randomTicket\",\"type\":\"uint256\"}],\"name\":\"AirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"novaAmount\",\"type\":\"uint256\"}],\"name\":\"DividendsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "6080604052600060065560006008556000600955670de0b6b3a7640000600a556000600c556000600e556000601055600060125534801561003f57600080fd5b5060008054600160a060020a03199081163317909155600180549091167372fbc0fc1446f5accc1b083f0852a7ef70a8ec9f1790556118c0806100836000396000f3006080604052600436106101745763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303e1001e81146102ef5780630aa8bfe7146103225780630bb4e6f4146103375780631080b7b11461034c57806310d979f61461036d5780631288a8e91461038e5780631703b7fd146103af57806324e5dacd146103d05780632db78d93146103f15780634b1cdc2d146104125780634e52622b146104335780635c7ae6e31461045457806366168bd714610475578063740b4b601461049b5780638a561f37146104d05780638da5cb5b146104e5578063942b765a146105165780639ddf840d146105c4578063c04ae37f146105d9578063c311d049146105ee578063c69ea42f14610606578063d59dd5d214610627578063dd93aa8114610648578063e8836dcb14610669578063edf26d9b1461067e578063f08b82e614610696578063f2fde38b146106ab578063f3f6f0d7146106cc578063fecf9959146106e1575b33803b600080808080851561018857600080fd5b34945061019487610708565b600085116101a157600080fd5b6101c360646101b787605963ffffffff6108bd16565b9063ffffffff6108f616565b93506101db60646101b787600663ffffffff6108bd16565b92506101f360646101b787600463ffffffff6108bd16565b915061020b60646101b787600163ffffffff6108bd16565b90506102178383610919565b60008054604051600160a060020a039091169183156108fc02918491818181858888f19350505050158015610250573d6000803e3d6000fd5b50600160a060020a03871660009081526002602052604090205461027a908563ffffffff6109aa16565b600160a060020a038816600090815260026020908152604080832093909355600490529081205411156102be576009546102ba908563ffffffff6109aa16565b6009555b600160a060020a03871660009081526003602052604081205411156102e6576102e6876109bc565b50505050505050005b3480156102fb57600080fd5b50610310600160a060020a0360043516610aa1565b60408051918252519081900360200190f35b34801561032e57600080fd5b50610310610ab3565b34801561034357600080fd5b50610310610ab9565b34801561035857600080fd5b50610310600160a060020a0360043516610abf565b34801561037957600080fd5b50610310600160a060020a0360043516610b53565b34801561039a57600080fd5b50610310600160a060020a0360043516610b7c565b3480156103bb57600080fd5b50610310600160a060020a0360043516610b8e565b3480156103dc57600080fd5b50610310600160a060020a0360043516610be6565b3480156103fd57600080fd5b50610310600160a060020a0360043516610bf8565b34801561041e57600080fd5b50610310600160a060020a0360043516610c0a565b34801561043f57600080fd5b50610310600160a060020a0360043516610c95565b34801561046057600080fd5b50610310600160a060020a0360043516610ced565b34801561048157600080fd5b50610499600160a060020a0360043516602435610d04565b005b3480156104a757600080fd5b506104bc600160a060020a0360043516611043565b604080519115158252519081900360200190f35b3480156104dc57600080fd5b50610310611058565b3480156104f157600080fd5b506104fa61105e565b60408051600160a060020a039092168252519081900360200190f35b34801561052257600080fd5b5061052b61106d565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561056f578181015183820152602001610557565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105ae578181015183820152602001610596565b5050505090500194505050505060405180910390f35b3480156105d057600080fd5b50610499611170565b3480156105e557600080fd5b5061031061117b565b3480156105fa57600080fd5b50610499600435611181565b34801561061257600080fd5b50610310600160a060020a036004351661133b565b34801561063357600080fd5b50610310600160a060020a036004351661134d565b34801561065457600080fd5b50610310600160a060020a036004351661135f565b34801561067557600080fd5b50610310611371565b34801561068a57600080fd5b506104fa600435611377565b3480156106a257600080fd5b50610310611392565b3480156106b757600080fd5b50610499600160a060020a0360043516611398565b3480156106d857600080fd5b5061031061142c565b3480156106ed57600080fd5b50610499600435600160a060020a0360243516604435611432565b60008060008060008061071a87610c95565b955061072587610b8e565b9450610737858763ffffffff6109aa16565b935061074287610c0a565b925061074d87610abf565b915061075f828463ffffffff6109aa16565b905060008411156107a257604051600160a060020a0388169085156108fc029086906000818181858888f193505050501580156107a0573d6000803e3d6000fd5b505b6000811115610831576001546040805160e060020a63a9059cbb028152600160a060020a038a81166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561080457600080fd5b505af1158015610818573d6000803e3d6000fd5b505050506040513d602081101561082e57600080fd5b50505b600c54600160a060020a0388166000818152600b6020908152604080832094909455600e54600d825284832055601054600f8252848320556012546011825291849020919091558251918252810186905280820183905290517fdd6e13fa60b7ff497716fc07cf86f41f54c3f689473ea4517e9489eb1e50e9ed9181900360600190a150505050505050565b6000808315156108d057600091506108ef565b508282028284828115156108e057fe5b04146108eb57600080fd5b8091505b5092915050565b60008080831161090557600080fd5b828481151561091057fe5b04949350505050565b600080610924611392565b915061092e610ab9565b905080158061093b575081155b15610945576109a4565b610970610961826101b7600a54876108bd90919063ffffffff16565b600e549063ffffffff6109aa16565b600e55600a546109a0906109919084906101b790889063ffffffff6108bd16565b600c549063ffffffff6109aa16565b600c555b50505050565b6000828201838110156108eb57600080fd5b600160a060020a0381166000908152600760209081526040808320805460ff1916600117905560049091529020541515610a9e57600160a060020a038116600090815260036020526040902054600854610a1b9163ffffffff6109aa16565b600855600160a060020a038116600090815260026020526040902054600954610a499163ffffffff6109aa16565b600955600680546001018082556000908152600560209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038716908117909155935493835260049091529020555b50565b600b6020526000908152604090205481565b600c5481565b60095490565b600160a060020a038116600090815260076020526040812054819060ff161515610aec5760009150610b4d565b600160a060020a038316600090815260116020526040902054601254610b179163ffffffff6116d216565b600a54600160a060020a038516600090815260026020526040902054919250610b4a916101b7908463ffffffff6108bd16565b91505b50919050565b6000610b76610b6183610c0a565b610b6a84610abf565b9063ffffffff6109aa16565b92915050565b60036020526000908152604090205481565b600160a060020a038116600090815260076020526040812054819060ff161515610bbb5760009150610b4d565b600160a060020a0383166000908152600d6020526040902054600e54610b179163ffffffff6116d216565b600f6020526000908152604090205481565b60046020526000908152604090205481565b600160a060020a038116600090815260076020526040812054819060ff161515610c375760009150610b4d565b600160a060020a0383166000908152600f6020526040902054601054610c629163ffffffff6116d216565b600a54600160a060020a038516600090815260036020526040902054919250610b4a916101b7908463ffffffff6108bd16565b600160a060020a038116600090815260076020526040812054819060ff161515610cc25760009150610b4d565b600160a060020a0383166000908152600b6020526040902054600c54610c629163ffffffff6116d216565b6000610b76610cfb83610c95565b610b6a84610b8e565b600080600080600080610d1633610708565b600154604080517fdd62ed3e00000000000000000000000000000000000000000000000000000000815233600482018190523060248301529151919850600160a060020a039092169163dd62ed3e9160448083019260209291908290030181600087803b158015610d8657600080fd5b505af1158015610d9a573d6000803e3d6000fd5b505050506040513d6020811015610db057600080fd5b50519450600085118015610e615750600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03898116600483015230602483015260448201899052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610e3457600080fd5b505af1158015610e48573d6000803e3d6000fd5b505050506040513d6020811015610e5e57600080fd5b50515b1515610e6c57600080fd5b610e8260646101b787605963ffffffff6108bd16565b9350610e9a60646101b787600663ffffffff6108bd16565b9250610eb260646101b787600463ffffffff6108bd16565b9150610eca60646101b787600163ffffffff6108bd16565b9050610ed683836116e9565b6001546040805160e060020a63a9059cbb028152600160a060020a038b81166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015610f2f57600080fd5b505af1158015610f43573d6000803e3d6000fd5b505050506040513d6020811015610f5957600080fd5b505060408051600160a060020a038a1681526020810183905280820189905290517fc804beabd6deef69632486188d3b1a0fc6837d20bf348393884d368fa5bf10cd9181900360600190a1600160a060020a038616600090815260036020526040902054610fcd908563ffffffff6109aa16565b600160a060020a038716600090815260036020908152604080832093909355600490529081205411156110115760085461100d908563ffffffff6109aa16565b6008555b600160a060020a038616600090815260026020526040812054111561103957611039866109bc565b5050505050505050565b60076020526000908152604090205460ff1681565b600e5481565b600054600160a060020a031681565b60608060608060006006546040519080825280602002602001820160405280156110a1578160200160208202803883390190505b5092506006546040519080825280602002602001820160405280156110d0578160200160208202803883390190505b509150600190505b6006548111611166576000818152600560205260409020548351600160a060020a03909116908490600019840190811061110e57fe5b600160a060020a03928316602091820290920181019190915260008381526005825260408082205490931681526003909152205482518390600019840190811061115457fe5b602090810290910101526001016110d8565b5090939092509050565b61117933610708565b565b60125481565b33600080808080861180156111ae5750600160a060020a0385166000908152600260205260409020548611155b15156111b957600080fd5b6111c285610708565b6111d860646101b788605963ffffffff6108bd16565b93506111f060646101b788600663ffffffff6108bd16565b925061120860646101b788600463ffffffff6108bd16565b915061122060646101b788600163ffffffff6108bd16565b600160a060020a03861660009081526002602052604090205490915061124c908763ffffffff6116d216565b600160a060020a038616600090815260026020908152604080832093909355600490529081205411156112905760095461128c908763ffffffff6116d216565b6009555b600160a060020a03851660009081526002602052604090205415156112b8576112b885611779565b604051600160a060020a0386169085156108fc029086906000818181858888f193505050501580156112ee573d6000803e3d6000fd5b506112f98383610919565b60008054604051600160a060020a039091169183156108fc02918491818181858888f19350505050158015611332573d6000803e3d6000fd5b50505050505050565b60026020526000908152604090205481565b600d6020526000908152604090205481565b60116020526000908152604090205481565b60105481565b600560205260009081526040902054600160a060020a031681565b60085490565b600054600160a060020a031633146113af57600080fd5b600160a060020a03811615156113c457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065481565b33600080808061144185610708565b6000881180156114695750600160a060020a0385166000908152600360205260409020548811155b151561147457600080fd5b61148a60646101b78a605963ffffffff6108bd16565b93506114a260646101b78a600663ffffffff6108bd16565b92506114ba60646101b78a600463ffffffff6108bd16565b91506114d260646101b78a600163ffffffff6108bd16565b600160a060020a0386166000908152600360205260409020549091506114fe908963ffffffff6116d216565b600160a060020a038616600090815260036020908152604080832093909355600490529081205411156115425760085461153e908963ffffffff6116d216565b6008555b600160a060020a038516600090815260036020526040902054151561156a5761156a85611779565b6001546040805160e060020a63a9059cbb028152600160a060020a038881166004830152602482018890529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156115c357600080fd5b505af11580156115d7573d6000803e3d6000fd5b505050506040513d60208110156115ed57600080fd5b506115fa905083836116e9565b6001546040805160e060020a63a9059cbb028152600160a060020a038a81166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561165357600080fd5b505af1158015611667573d6000803e3d6000fd5b505050506040513d602081101561167d57600080fd5b505060408051600160a060020a03891681526020810183905280820188905290517fc804beabd6deef69632486188d3b1a0fc6837d20bf348393884d368fa5bf10cd9181900360600190a15050505050505050565b600080838311156116e257600080fd5b5050900390565b6000806116f4611392565b91506116fe610ab9565b905080158061170b575081155b15611715576109a4565b611740611731826101b7600a54876108bd90919063ffffffff16565b6012549063ffffffff6109aa16565b601255600a54611770906117619084906101b790889063ffffffff6108bd16565b6010549063ffffffff6109aa16565b60105550505050565b600160a060020a0381166000908152600760209081526040808320805460ff1916905560049091528120541115610a9e57600160a060020a0381166000908152600360205260409020546008546117d59163ffffffff6116d216565b600855600160a060020a0381166000908152600260205260409020546009546118039163ffffffff6116d216565b60095560068054600090815260056020818152604080842054600160a060020a0396871685526004808452828620805487528585528387208054938a1673ffffffffffffffffffffffffffffffffffffffff199485161790558054885488528488205490991687529084528286209790975595849055845484529190529020805490921690915580546000190190555600a165627a7a723058208011c7a7eec6c9cfaea3bb152f7e5d15f65ca63c5e8d3156a4a671ba3e05b9e50029"
}