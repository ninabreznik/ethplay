{
  "address": "0x833a2d1bf71d2dcfd66071aafc7ac827d6eb5ebc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "LOLPreToken",
  "compilerVersion": "v0.4.11+commit.68ef5810",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.4.11;\n\n//Creadit [email protected]\n\n\n/**\n * @title SafeMath\n    * @dev Math operations with safety checks that throw on error\n       */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n    * @dev The Ownable contract has an owner address, and provides basic authorization control \n       * functions, this simplifies the implementation of \"user permissions\". \n          */\ncontract Ownable {\n  address public owner;\n\n\n  /** \n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n        * account.\n             */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner. \n        */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n        * @param newOwner The address to transfer ownership to. \n             */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n/**\n * @title ERC20Basic\n    * @dev Simpler version of ERC20 interface\n       * @dev see https://github.com/ethereum/EIPs/issues/179\n          */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n    * @dev Basic version of StandardToken, with no allowances. \n       */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n      * @param _to The address to transfer to.\n          * @param _value The amount to be transferred.\n              */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n      * @param _owner The address to query the the balance of. \n          * @return An uint256 representing the amount owned by the passed address.\n              */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n    * @dev see https://github.com/ethereum/EIPs/issues/20\n       */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n    *\n      * @dev Implementation of the basic standard token.\n         * @dev https://github.com/ethereum/EIPs/issues/20\n            * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n               */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n        * @param _from address The address which you want to send tokens from\n             * @param _to address The address which you want to transfer to\n                  * @param _value uint256 the amout of tokens to be transfered\n                       */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n        * @param _spender The address which will spend the funds.\n             * @param _value The amount of tokens to be spent.\n                  */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n        * @param _owner address The address which owns the funds.\n             * @param _spender address The address which will spend the funds.\n                  * @return A uint256 specifing the amount of tokens still avaible for the spender.\n                       */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\n/**\n * @title Mintable token\n    * @dev Simple ERC20 Token example, with mintable token creation\n       * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n          * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n             */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n        * @param _to The address that will recieve the minted tokens.\n             * @param _amount The amount of tokens to mint.\n                  * @return A boolean that indicates if the operation was successful.\n                       */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n        * @return True if the operation was successful.\n             */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract LOLPreToken is StandardToken, Ownable {\n    using SafeMath for uint256;\n\n    // Token Info.\n    string  public constant name = \"LOLPresale Token\";\n    string  public constant symbol = \"LOLP\";\n    uint8   public constant decimals = 18;\n\n    // Sale period.\n    uint256 public startDate;\n    uint256 public endDate;\n\n    // Token Cap for each rounds\n    uint256 public saleCap;\n\n    // Address where funds are collected.\n    address public wallet;\n\n    // Amount of raised money in wei.\n    uint256 public weiRaised;\n\n    // Loldex user ID\n    mapping(address => bytes32) public lolpreUserIDs;\n\n    // Event\n    event TokenPurchase(address indexed purchaser, uint256 value,\n                        uint256 amount);\n    event PreICOTokenPushed(address indexed buyer, uint256 amount);\n    event UserIDChanged(address owner, bytes32 user_id);\n\n    // Modifiers\n    modifier uninitialized() {\n        require(wallet == 0x0);\n        _;\n    }\n\n    function LOLPreToken() {\n    }\n\n    function initialize(address _wallet, uint256 _start, uint256 _end,\n                        uint256 _saleCap, uint256 _totalSupply)\n                        onlyOwner uninitialized {\n        require(_start >= getCurrentTimestamp());\n        require(_start < _end);\n        require(_wallet != 0x0);\n        require(_totalSupply > _saleCap);\n\n        startDate = _start;\n        endDate = _end;\n        saleCap = _saleCap;\n        wallet = _wallet;\n        totalSupply = _totalSupply;\n\n        balances[wallet] = _totalSupply.sub(saleCap);\n        balances[0x1] = saleCap;\n    }\n\n    function supply() internal returns (uint256) {\n        return balances[0x1];\n    }\n\n    function getCurrentTimestamp() internal returns (uint256) {\n        return now;\n    }\n\n    function getRateAt(uint256 at) constant returns (uint256) {\n        if (at < startDate) {\n            return 0;        \n        } else {\n            return 2720; //[email protected] 0.05\n        }\n    }\n\n    // Fallback function can be used to buy tokens\n    function () payable {\n        buyTokens(msg.sender, msg.value);\n    }\n\n    // For pushing pre-ICO records\n    function push(address buyer, uint256 amount) onlyOwner {\n        require(balances[wallet] >= amount);\n\n        uint256 actualRate = 2720;  // pre-ICO has also fixed rate of 2720\n        uint256 weiAmount = amount.div(actualRate);\n        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\n\n        // Transfer\n        balances[wallet] = balances[wallet].sub(amount);\n        balances[buyer] = balances[buyer].add(amount);\n        PreICOTokenPushed(buyer, amount);\n\n        // Update state.\n        weiRaised = updatedWeiRaised;\n    }\n\n    function buyTokens(address sender, uint256 value) internal {\n        require(saleActive());\n        require(value >= 1 ether);\n\n        uint256 weiAmount = value;\n        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\n\n        // Calculate token amount to be purchased\n        uint256 actualRate = getRateAt(getCurrentTimestamp());\n        uint256 amount = weiAmount.mul(actualRate);\n        \n\n        // We have enough token to sale\n        require(supply() >= amount);\n\n        // Transfer\n        balances[0x1] = balances[0x1].sub(amount);\n        balances[sender] = balances[sender].add(amount);\n        TokenPurchase(sender, weiAmount, amount);\n\n        // Update state.\n        weiRaised = updatedWeiRaised;\n\n        // Forward the fund to fund collection wallet.\n        wallet.transfer(msg.value);\n    }\n\n    function finalize() onlyOwner {\n        require(!saleActive());\n\n        // Transfer the rest of token to LOLdex\n        balances[wallet] = balances[wallet].add(balances[0x1]);\n        balances[0x1] = 0;\n    }\n\n    function saleActive() public constant returns (bool) {\n        return (getCurrentTimestamp() >= startDate &&\n                getCurrentTimestamp() < endDate && supply() > 0);\n    }\n\n    function setUserID(bytes32 user_id) {\n        lolpreUserIDs[msg.sender] = user_id;\n        UserIDChanged(msg.sender, user_id);\n    }\n    \n    // This function will destroy all LOLP and alocate 1-to-1 LOL token \n     function destroyToken() onlyOwner {\n          require(!saleActive());\n          \n          // Transfer the rest of token to LOLdex\n          balances[wallet] = balances[wallet].add(balances[0x1]);\n          balances[0x1] = 0;\n          selfdestruct(wallet);\n        \n    }\n}",
  "bytecode": "6060604052341561000c57fe5b5b5b33600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b611d04806100616000396000f3006060604052361561013c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461014f578063078fd9ea146101e8578063095ea7b31461020e5780630b97bc861461026557806318160ddd1461028b57806323b872dd146102b15780632e4eaa1514610327578063313ce567146103395780634042b66f146103655780634bb278f31461038b5780634d71d65e1461039d578063521eb273146103ef57806368428a1b1461044157806370a082311461046b5780638da5cb5b146104b557806395d89b4114610507578063a9059cbb146105a0578063b52e0dc8146105f7578063b753a98c1461062b578063c24a0f8b1461066a578063c3262dfd14610690578063dd62ed3e146106b4578063f2fde38b1461071d578063f92ad21914610753575b61014d5b61014a33346107ad565b5b565b005b341561015757fe5b61015f610a01565b60405180806020018281038252838181518152602001915080519060200190808383600083146101ae575b8051825260208311156101ae5760208201915060208101905060208303925061018a565b505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f057fe5b6101f8610a3b565b6040518082815260200191505060405180910390f35b341561021657fe5b61024b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a41565b604051808215151515815260200191505060405180910390f35b341561026d57fe5b610275610bcb565b6040518082815260200191505060405180910390f35b341561029357fe5b61029b610bd1565b6040518082815260200191505060405180910390f35b34156102b957fe5b61030d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bd7565b604051808215151515815260200191505060405180910390f35b341561032f57fe5b610337610e89565b005b341561034157fe5b61034961106c565b604051808260ff1660ff16815260200191505060405180910390f35b341561036d57fe5b610375611071565b6040518082815260200191505060405180910390f35b341561039357fe5b61039b611077565b005b34156103a557fe5b6103d1600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611220565b60405180826000191660001916815260200191505060405180910390f35b34156103f757fe5b6103ff611238565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561044957fe5b61045161125e565b604051808215151515815260200191505060405180910390f35b341561047357fe5b61049f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061129a565b6040518082815260200191505060405180910390f35b34156104bd57fe5b6104c56112e4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561050f57fe5b61051761130a565b6040518080602001828103825283818151815260200191508051906020019080838360008314610566575b80518252602083111561056657602082019150602081019050602083039250610542565b505050905090810190601f1680156105925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105a857fe5b6105dd600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611344565b604051808215151515815260200191505060405180910390f35b34156105ff57fe5b61061560048080359060200190919050506114e0565b6040518082815260200191505060405180910390f35b341561063357fe5b610668600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611505565b005b341561067257fe5b61067a6117d6565b6040518082815260200191505060405180910390f35b341561069857fe5b6106b26004808035600019169060200190919050506117dc565b005b34156106bc57fe5b610707600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061189b565b6040518082815260200191505060405180910390f35b341561072557fe5b610751600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611923565b005b341561075b57fe5b6107ab600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919080359060200190919080359060200190919080359060200190919050506119fd565b005b60006000600060006107bd61125e565b15156107c95760006000fd5b670de0b6b3a764000085101515156107e15760006000fd5b8493506107f984600854611c1090919063ffffffff16565b925061080b610806611c30565b6114e0565b91506108208285611c3990919063ffffffff16565b90508061082b611c6e565b101515156108395760006000fd5b6108768160016000600173ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ca190919063ffffffff16565b60016000600173ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108f681600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1090919063ffffffff16565b600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff167fcd60aa75dea3072fbc07ae6d7d856b5dc5f4eee88854f5b4abf7b680ef8bc50f8583604051808381526020018281526020019250505060405180910390a282600881905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051809050600060405180830381858888f1935050505015156109f857fe5b5b505050505050565b604060405190810160405280601081526020017f4c4f4c50726573616c6520546f6b656e0000000000000000000000000000000081525081565b60065481565b60006000821480610ace57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b1515610ada5760006000fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60045481565b60005481565b60006000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610cac83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d4183600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ca190919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d978382611ca190919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505b509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ee65760006000fd5b610eee61125e565b151515610efb5760006000fd5b610f9960016000600173ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1090919063ffffffff16565b60016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060016000600173ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b5b565b601281565b60085481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110d45760006000fd5b6110dc61125e565b1515156110e95760006000fd5b61118760016000600173ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1090919063ffffffff16565b60016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060016000600173ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b565b60096020528060005260406000206000915090505481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060045461126b611c30565b10158015611281575060055461127f611c30565b105b801561129457506000611292611c6e565b115b90505b90565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b604060405190810160405280600481526020017f4c4f4c500000000000000000000000000000000000000000000000000000000081525081565b600061139882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ca190919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061142d82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1090919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b60006004548210156114f55760009050611500565b610aa09050611500565b5b919050565b600060006000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115685760006000fd5b8360016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156115d95760006000fd5b610aa092506115f18385611cbb90919063ffffffff16565b915061160882600854611c1090919063ffffffff16565b905061167e8460016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ca190919063ffffffff16565b60016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061173584600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c1090919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff167fdb2d10a559cb6e14fee5a7a2d8c216314e11c22404e85a4f9af45f07c87192bb856040518082815260200191505060405180910390a2806008819055505b5b5050505050565b60055481565b80600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081600019169055507fa1a3e4c7b21b6004c77b4fe18bdd0d1bd1be31dbb88112463524daa9abacb8363382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182600019166000191681526020019250505060405180910390a15b50565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119805760006000fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156119f85780600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a5a5760006000fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611aa25760006000fd5b611aaa611c30565b8410151515611ab95760006000fd5b8284101515611ac85760006000fd5b60008573ffffffffffffffffffffffffffffffffffffffff1614151515611aef5760006000fd5b8181111515611afe5760006000fd5b83600481905550826005819055508160068190555084600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600081905550611b7060065482611ca190919063ffffffff16565b60016000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060065460016000600173ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b5b5050505050565b600060008284019050838110151515611c2557fe5b8091505b5092915050565b60004290505b90565b6000600082840290506000841480611c5b5750828482811515611c5857fe5b04145b1515611c6357fe5b8091505b5092915050565b600060016000600173ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b90565b6000828211151515611caf57fe5b81830390505b92915050565b600060008284811515611cca57fe5b0490508091505b50929150505600a165627a7a723058208b996cf858765f6d60b1d167711580da356f0970138cc53b6998daeaf5a968290029"
}