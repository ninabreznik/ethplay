{
  "address": "0x86350dff7382ca9d3fa1bc5645801b8e5f0a839a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BatPay",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "1",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.25;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @title math operations that returns specific size reults (32, 64 and 256\n *        bits)\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers and returns a uint64\n     * @param a A number\n     * @param b A number\n     * @return a * b as a uint64\n     */\n    function mul64(uint256 a, uint256 b) internal pure returns (uint64) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        require(c < 2**64);\n        return uint64(c);\n    }\n\n    /**\n     * @dev Divides two numbers and returns a uint64\n     * @param a A number\n     * @param b A number\n     * @return a / b as a uint64\n     */\n    function div64(uint256 a, uint256 b) internal pure returns (uint64) {\n        uint256 c = a / b;\n        require(c < 2**64);\n        /* solcov ignore next */\n        return uint64(c);\n    }\n\n    /**\n     * @dev Substracts two numbers and returns a uint64\n     * @param a A number\n     * @param b A number\n     * @return a - b as a uint64\n     */\n    function sub64(uint256 a, uint256 b) internal pure returns (uint64) {\n        require(b <= a);\n        uint256 c = a - b;\n        require(c < 2**64);\n        /* solcov ignore next */\n        return uint64(c);\n    }\n\n    /**\n     * @dev Adds two numbers and returns a uint64\n     * @param a A number\n     * @param b A number\n     * @return a + b as a uint64\n     */\n    function add64(uint256 a, uint256 b) internal pure returns (uint64) {\n        uint256 c = a + b;\n        require(c >= a && c < 2**64);\n        /* solcov ignore next */\n        return uint64(c);\n    }\n\n    /**\n     * @dev Multiplies two numbers and returns a uint32\n     * @param a A number\n     * @param b A number\n     * @return a * b as a uint32\n     */\n    function mul32(uint256 a, uint256 b) internal pure returns (uint32) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        require(c < 2**32);\n        /* solcov ignore next */\n        return uint32(c);\n    }\n\n    /**\n     * @dev Divides two numbers and returns a uint32\n     * @param a A number\n     * @param b A number\n     * @return a / b as a uint32\n     */\n    function div32(uint256 a, uint256 b) internal pure returns (uint32) {\n        uint256 c = a / b;\n        require(c < 2**32);\n        /* solcov ignore next */\n        return uint32(c);\n    }\n\n    /**\n     * @dev Substracts two numbers and returns a uint32\n     * @param a A number\n     * @param b A number\n     * @return a - b as a uint32\n     */\n    function sub32(uint256 a, uint256 b) internal pure returns (uint32) {\n        require(b <= a);\n        uint256 c = a - b;\n        require(c < 2**32);\n        /* solcov ignore next */\n        return uint32(c);\n    }\n\n    /**\n     * @dev Adds two numbers and returns a uint32\n     * @param a A number\n     * @param b A number\n     * @return a + b as a uint32\n     */\n    function add32(uint256 a, uint256 b) internal pure returns (uint32) {\n        uint256 c = a + b;\n        require(c >= a && c < 2**32);\n        return uint32(c);\n    }\n\n    /**\n     * @dev Multiplies two numbers and returns a uint256\n     * @param a A number\n     * @param b A number\n     * @return a * b as a uint256\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b);\n        /* solcov ignore next */\n        return c;\n    }\n\n    /**\n     * @dev Divides two numbers and returns a uint256\n     * @param a A number\n     * @param b A number\n     * @return a / b as a uint256\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        /* solcov ignore next */\n        return c;\n    }\n\n    /**\n     * @dev Substracts two numbers and returns a uint256\n     * @param a A number\n     * @param b A number\n     * @return a - b as a uint256\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers and returns a uint256\n     * @param a A number\n     * @param b A number\n     * @return a + b as a uint256\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n}\n\n\n\n/**\n * @title Merkle Tree's proof helper contract\n */\nlibrary Merkle {\n\n    /**\n     * @dev calculates the hash of two child nodes on the merkle tree.\n     * @param a Hash of the left child node.\n     * @param b Hash of the right child node.\n     * @return sha3 hash of the resulting node.\n     */\n    function combinedHash(bytes32 a, bytes32 b) public pure returns(bytes32) {\n        return keccak256(abi.encodePacked(a, b));\n    }\n\n    /**\n     * @dev calculates a root hash associated with a Merkle proof\n     * @param proof array of proof hashes\n     * @param key index of the leaf element list.\n     *        this key indicates the specific position of the leaf\n     *        in the merkle tree. It will be used to know if the\n     *        node that will be hashed along with the proof node\n     *        is placed on the right or the left of the current\n     *        tree level. That is achieved by doing the modulo of\n     *        the current key/position. A new level of nodes will\n     *        be evaluated after that, and the new left or right\n     *        position is obtained by doing the same operation, \n     *        after dividing the key/position by two.\n     * @param leaf the leaf element to verify on the set.\n     * @return the hash of the Merkle proof. Should match the Merkle root\n     *         if the proof is valid\n     */\n    function getProofRootHash(bytes32[] memory proof, uint256 key, bytes32 leaf) public pure returns(bytes32) {\n        bytes32 hash = keccak256(abi.encodePacked(leaf));\n        uint256 k = key;\n        for(uint i = 0; i<proof.length; i++) {\n            uint256 bit = k % 2;\n            k = k / 2;\n\n            if (bit == 0)\n                hash = combinedHash(hash, proof[i]);\n            else\n                hash = combinedHash(proof[i], hash);\n        }\n        return hash;\n    }\n}\n\n/**\n * @title Data Structures for BatPay: Accounts, Payments & Challenge\n */\ncontract Data {\n    struct Account {\n        address owner;\n        uint64  balance;\n        uint32  lastCollectedPaymentId;\n    }\n\n    struct BulkRegistration {\n        bytes32 rootHash;\n        uint32  recordCount;\n        uint32  smallestRecordId;\n    }\n\n    struct Payment {\n        uint32  fromAccountId;\n        uint64  amount;\n        uint64  fee;\n        uint32  smallestAccountId;\n        uint32  greatestAccountId;\n        uint32  totalNumberOfPayees;\n        uint64  lockTimeoutBlockNumber;\n        bytes32 paymentDataHash;\n        bytes32 lockingKeyHash;\n        bytes32 metadata;\n    }\n\n    struct CollectSlot {\n        uint32  minPayIndex;\n        uint32  maxPayIndex;\n        uint64  amount;\n        uint64  delegateAmount;\n        uint32  to;\n        uint64  block;\n        uint32  delegate;\n        uint32  challenger;\n        uint32  index;\n        uint64  challengeAmount;\n        uint8   status;\n        address addr;\n        bytes32 data;\n    }\n\n    struct Config {\n        uint32 maxBulk;\n        uint32 maxTransfer;\n        uint32 challengeBlocks;\n        uint32 challengeStepBlocks;\n        uint64 collectStake;\n        uint64 challengeStake;\n        uint32 unlockBlocks;\n        uint32 massExitIdBlocks;\n        uint32 massExitIdStepBlocks;\n        uint32 massExitBalanceBlocks;\n        uint32 massExitBalanceStepBlocks;\n        uint64 massExitStake;\n        uint64 massExitChallengeStake;\n        uint64 maxCollectAmount;\n    }\n\n    Config public params;\n    address public owner;\n\n    uint public constant MAX_ACCOUNT_ID = 2**32-1;    // Maximum account id (32-bits)\n    uint public constant NEW_ACCOUNT_FLAG = 2**256-1; // Request registration of new account\n    uint public constant INSTANT_SLOT = 32768;\n\n}\n\n\n/**\n  * @title Accounts, methods to manage accounts and balances\n  */\n\ncontract Accounts is Data {\n    event BulkRegister(uint bulkSize, uint smallestAccountId, uint bulkId );\n    event AccountRegistered(uint accountId, address accountAddress);\n\n    IERC20 public token;\n    Account[] public accounts;\n    BulkRegistration[] public bulkRegistrations;\n\n    /**\n      * @dev determines whether accountId is valid\n      * @param accountId an account id\n      * @return boolean\n      */\n    function isValidId(uint accountId) public view returns (bool) {\n        return (accountId < accounts.length);\n    }\n\n    /**\n      * @dev determines whether accountId is the owner of the account\n      * @param accountId an account id\n      * @return boolean\n      */\n    function isAccountOwner(uint accountId) public view returns (bool) {\n        return isValidId(accountId) && msg.sender == accounts[accountId].owner;\n    }\n\n    /**\n      * @dev modifier to restrict that accountId is valid\n      * @param accountId an account id\n      */\n    modifier validId(uint accountId) {\n        require(isValidId(accountId), \"accountId is not valid\");\n        _;\n    }\n\n    /**\n      * @dev modifier to restrict that accountId is owner\n      * @param accountId an account ID\n      */\n    modifier onlyAccountOwner(uint accountId) {\n        require(isAccountOwner(accountId), \"Only account owner can invoke this method\");\n        _;\n    }\n\n    /**\n      * @dev Reserve accounts but delay assigning addresses.\n      *      Accounts will be claimed later using MerkleTree's rootHash.\n      * @param bulkSize Number of accounts to reserve.\n      * @param rootHash Hash of the root node of the Merkle Tree referencing the list of addresses.\n      */\n    function bulkRegister(uint256 bulkSize, bytes32 rootHash) public {\n        require(bulkSize > 0, \"Bulk size can't be zero\");\n        require(bulkSize < params.maxBulk, \"Cannot register this number of ids simultaneously\");\n        require(SafeMath.add(accounts.length, bulkSize) <= MAX_ACCOUNT_ID, \"Cannot register: ran out of ids\");\n        require(rootHash > 0, \"Root hash can't be zero\");\n\n        emit BulkRegister(bulkSize, accounts.length, bulkRegistrations.length);\n        bulkRegistrations.push(BulkRegistration(rootHash, uint32(bulkSize), uint32(accounts.length)));\n        accounts.length = SafeMath.add(accounts.length, bulkSize);\n    }\n\n    /** @dev Complete registration for a reserved account by showing the\n      *     bulkRegistration-id and Merkle proof associated with this address\n      * @param addr Address claiming this account\n      * @param proof Merkle proof for address and id\n      * @param accountId Id of the account to be registered.\n      * @param bulkId BulkRegistration id for the transaction reserving this account\n      */\n    function claimBulkRegistrationId(address addr, bytes32[] memory proof, uint accountId, uint bulkId) public {\n        require(bulkId < bulkRegistrations.length, \"the bulkId referenced is invalid\");\n        uint smallestAccountId = bulkRegistrations[bulkId].smallestRecordId;\n        uint n = bulkRegistrations[bulkId].recordCount;\n        bytes32 rootHash = bulkRegistrations[bulkId].rootHash;\n        bytes32 hash = Merkle.getProofRootHash(proof, SafeMath.sub(accountId, smallestAccountId), bytes32(addr));\n\n        require(accountId >= smallestAccountId && accountId < smallestAccountId + n,\n            \"the accountId specified is not part of that bulk registration slot\");\n        require(hash == rootHash, \"invalid Merkle proof\");\n        emit AccountRegistered(accountId, addr);\n\n        accounts[accountId].owner = addr;\n    }\n\n    /**\n      * @dev Register a new account\n      * @return the id of the new account\n      */\n    function register() public returns (uint32 ret) {\n        require(accounts.length < MAX_ACCOUNT_ID, \"no more accounts left\");\n        ret = (uint32)(accounts.length);\n        accounts.push(Account(msg.sender, 0, 0));\n        emit AccountRegistered(ret, msg.sender);\n        return ret;\n    }\n\n    /**\n     * @dev withdraw tokens from the BatchPayment contract into the original address.\n     * @param amount Amount of tokens to withdraw.\n     * @param accountId Id of the user requesting the withdraw.\n     */\n    function withdraw(uint64 amount, uint256 accountId)\n        external\n        onlyAccountOwner(accountId)\n    {\n        uint64 balance = accounts[accountId].balance;\n\n        require(balance >= amount, \"insufficient funds\");\n        require(amount > 0, \"amount should be nonzero\");\n\n        balanceSub(accountId, amount);\n\n        require(token.transfer(msg.sender, amount), \"transfer failed\");\n    }\n\n    /**\n     * @dev Deposit tokens into the BatchPayment contract to enable scalable payments\n     * @param amount Amount of tokens to deposit on `accountId`. User should have\n     *        enough balance and issue an `approve()` method prior to calling this.\n     * @param accountId The id of the user account. In case `NEW_ACCOUNT_FLAG` is used,\n     *        a new account will be registered and the requested amount will be\n     *        deposited in a single operation.\n     */\n    function deposit(uint64 amount, uint256 accountId) external {\n        require(accountId < accounts.length || accountId == NEW_ACCOUNT_FLAG, \"invalid accountId\");\n        require(amount > 0, \"amount should be positive\");\n\n        if (accountId == NEW_ACCOUNT_FLAG) {\n            // new account\n            uint newId = register();\n            accounts[newId].balance = amount;\n        } else {\n            // existing account\n            balanceAdd(accountId, amount);\n        }\n\n        require(token.transferFrom(msg.sender, address(this), amount), \"transfer failed\");\n    }\n\n    /**\n     * @dev Increase the specified account balance by `amount` tokens.\n     * @param accountId An account id\n     * @param amount number of tokens\n     */\n    function balanceAdd(uint accountId, uint64 amount)\n    internal\n    validId(accountId)\n    {\n        accounts[accountId].balance = SafeMath.add64(accounts[accountId].balance, amount);\n    }\n\n    /**\n     *  @dev Substract `amount` tokens from the specified account's balance\n     *  @param accountId An account id\n     *  @param amount number of tokens\n     */\n    function balanceSub(uint accountId, uint64 amount)\n    internal\n    validId(accountId)\n    {\n        uint64 balance = accounts[accountId].balance;\n        require(balance >= amount, \"not enough funds\");\n        accounts[accountId].balance = SafeMath.sub64(balance, amount);\n    }\n\n    /**\n     *  @dev returns the balance associated with the account in tokens\n     *  @param accountId account requested.\n     */\n    function balanceOf(uint accountId)\n        external\n        view\n        validId(accountId)\n        returns (uint64)\n    {\n        return accounts[accountId].balance;\n    }\n\n    /**\n      * @dev gets number of accounts registered and reserved.\n      * @return returns the size of the accounts array.\n      */\n    function getAccountsLength() external view returns (uint) {\n        return accounts.length;\n    }\n\n    /**\n      * @dev gets the number of bulk registrations performed\n      * @return the size of the bulkRegistrations array.\n      */\n    function getBulkLength() external view returns (uint) {\n        return bulkRegistrations.length;\n    }\n}\n\n\n/**\n * @title Challenge helper library\n */\nlibrary Challenge {\n\n    uint8 public constant PAY_DATA_HEADER_MARKER = 0xff; // marker in payData header\n\n    /**\n     * @dev Reverts if challenge period has expired or Collect Slot status is\n     *      not a valid one.\n     */\n    modifier onlyValidCollectSlot(Data.CollectSlot storage collectSlot, uint8 validStatus) {\n        require(!challengeHasExpired(collectSlot), \"Challenge has expired\");\n        require(isSlotStatusValid(collectSlot, validStatus), \"Wrong Collect Slot status\");\n        _;\n    }\n\n    /**\n     * @return true if the current block number is greater or equal than the\n     *         allowed block for this challenge.\n     */\n    function challengeHasExpired(Data.CollectSlot storage collectSlot) public view returns (bool) {\n        return collectSlot.block <= block.number;\n    }\n\n    /**\n     * @return true if the Slot status is valid.\n     */\n    function isSlotStatusValid(Data.CollectSlot storage collectSlot, uint8 validStatus) public view returns (bool) {\n        return collectSlot.status == validStatus;\n    }\n\n    /** @dev calculates new block numbers based on the current block and a\n     *      delta constant specified by the protocol policy.\n     * @param delta number of blocks into the future to calculate.\n     * @return future block number.\n     */\n    function getFutureBlock(uint delta) public view returns(uint64) {\n        return SafeMath.add64(block.number, delta);\n    }\n\n    /**\n     * @dev Inspects the compact payment list provided and calculates the sum\n     *      of the amounts referenced\n     * @param data binary array, with 12 bytes per item. 8-bytes amount,\n     *        4-bytes payment index.\n     * @return the sum of the amounts referenced on the array.\n     */\n    function getDataSum(bytes memory data) public pure returns (uint sum) {\n        require(data.length > 0, \"no data provided\");\n        require(data.length % 12 == 0, \"wrong data format, data length should be multiple of 12\");\n\n        uint n = SafeMath.div(data.length, 12);\n        uint modulus = 2**64;\n\n        sum = 0;\n\n        // Get the sum of the stated amounts in data\n        // Each entry in data is [8-bytes amount][4-bytes payIndex]\n\n        for (uint i = 0; i < n; i++) {\n            // solium-disable-next-line security/no-inline-assembly\n            assembly {\n                let amount := mod(mload(add(data, add(8, mul(i, 12)))), modulus)\n                let result := add(sum, amount)\n                switch or(gt(result, modulus), eq(result, modulus))\n                case 1 { revert (0, 0) }\n                default { sum := result }\n            }\n        }\n    }\n\n    /**\n     * @dev Helper function that obtains the amount/payIndex pair located at\n     *      position `index`.\n     * @param data binary array, with 12 bytes per item. 8-bytes amount,\n     *        4-bytes payment index.\n     * @param index Array item requested.\n     * @return amount and payIndex requested.\n     */\n    function getDataAtIndex(bytes memory data, uint index) public pure returns (uint64 amount, uint32 payIndex) {\n        require(data.length > 0, \"no data provided\");\n        require(data.length % 12 == 0, \"wrong data format, data length should be multiple of 12\");\n\n        uint mod1 = 2**64;\n        uint mod2 = 2**32;\n        uint i = SafeMath.mul(index, 12);\n\n        require(i <= SafeMath.sub(data.length, 12), \"index * 12 must be less or equal than (data.length - 12)\");\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            amount := mod( mload(add(data, add(8, i))), mod1 )\n\n            payIndex := mod( mload(add(data, add(12, i))), mod2 )\n        }\n    }\n\n    /**\n     * @dev obtains the number of bytes per id in `payData`\n     * @param payData efficient binary representation of a list of accountIds\n     * @return bytes per id in `payData`\n     */\n    function getBytesPerId(bytes payData) internal pure returns (uint) {\n        // payData includes a 2 byte header and a list of ids\n        // [0xff][bytesPerId]\n\n        uint len = payData.length;\n        require(len >= 2, \"payData length should be >= 2\");\n        require(uint8(payData[0]) == PAY_DATA_HEADER_MARKER, \"payData header missing\");\n        uint bytesPerId = uint(payData[1]);\n        require(bytesPerId > 0 && bytesPerId < 32, \"second byte of payData should be positive and less than 32\");\n\n        // remaining bytes should be a multiple of bytesPerId\n        require((len - 2) % bytesPerId == 0,\n        \"payData length is invalid, all payees must have same amount of bytes (payData[1])\");\n\n        return bytesPerId;\n    }\n\n    /**\n     * @dev Process payData, inspecting the list of ids, accumulating the amount for\n     *    each entry of `id`.\n     *   `payData` includes 2 header bytes, followed by n bytesPerId-bytes entries.\n     *   `payData` format: [byte 0xff][byte bytesPerId][delta 0][delta 1]..[delta n-1]\n     * @param payData List of payees of a specific Payment, with the above format.\n     * @param id ID to look for in `payData`\n     * @param amount amount per occurrence of `id` in `payData`\n     * @return the amount sum for all occurrences of `id` in `payData`\n     */\n    function getPayDataSum(bytes memory payData, uint id, uint amount) public pure returns (uint sum) {\n        uint bytesPerId = getBytesPerId(payData);\n        uint modulus = 1 << SafeMath.mul(bytesPerId, 8);\n        uint currentId = 0;\n\n        sum = 0;\n\n        for (uint i = 2; i < payData.length; i += bytesPerId) {\n            // Get next id delta from paydata\n            // currentId += payData[2+i*bytesPerId]\n\n            // solium-disable-next-line security/no-inline-assembly\n            assembly {\n                currentId := add(\n                    currentId,\n                    mod(\n                        mload(add(payData, add(i, bytesPerId))),\n                        modulus))\n\n                switch eq(currentId, id)\n                case 1 { sum := add(sum, amount) }\n            }\n        }\n    }\n\n    /**\n     * @dev calculates the number of accounts included in payData\n     * @param payData efficient binary representation of a list of accountIds\n     * @return number of accounts present\n     */\n    function getPayDataCount(bytes payData) public pure returns (uint) {\n        uint bytesPerId = getBytesPerId(payData);\n\n        // calculate number of records\n        return SafeMath.div(payData.length - 2, bytesPerId);\n    }\n\n    /**\n     * @dev function. Phase I of the challenging game\n     * @param collectSlot Collect slot\n     * @param config Various parameters\n     * @param accounts a reference to the main accounts array\n     * @param challenger id of the challenger user\n     */\n    function challenge_1(\n        Data.CollectSlot storage collectSlot,\n        Data.Config storage config,\n        Data.Account[] storage accounts,\n        uint32 challenger\n    )\n        public\n        onlyValidCollectSlot(collectSlot, 1)\n    {\n        require(accounts[challenger].balance >= config.challengeStake, \"not enough balance\");\n\n        collectSlot.status = 2;\n        collectSlot.challenger = challenger;\n        collectSlot.block = getFutureBlock(config.challengeStepBlocks);\n\n        accounts[challenger].balance -= config.challengeStake;\n    }\n\n    /**\n     * @dev Internal function. Phase II of the challenging game\n     * @param collectSlot Collect slot\n     * @param config Various parameters\n     * @param data Binary array listing the payments in which the user was referenced.\n     */\n    function challenge_2(\n        Data.CollectSlot storage collectSlot,\n        Data.Config storage config,\n        bytes memory data\n    )\n        public\n        onlyValidCollectSlot(collectSlot, 2)\n    {\n        require(getDataSum(data) == collectSlot.amount, \"data doesn't represent collected amount\");\n\n        collectSlot.data = keccak256(data);\n        collectSlot.status = 3;\n        collectSlot.block = getFutureBlock(config.challengeStepBlocks);\n    }\n\n    /**\n     * @dev Internal function. Phase III of the challenging game\n     * @param collectSlot Collect slot\n     * @param config Various parameters\n     * @param data Binary array listing the payments in which the user was referenced.\n     * @param disputedPaymentIndex index selecting the disputed payment\n     */\n    function challenge_3(\n        Data.CollectSlot storage collectSlot,\n        Data.Config storage config,\n        bytes memory data,\n        uint32 disputedPaymentIndex\n    )\n        public\n        onlyValidCollectSlot(collectSlot, 3)\n    {\n        require(collectSlot.data == keccak256(data),\n        \"data mismatch, collected data hash doesn't match provided data hash\");\n        (collectSlot.challengeAmount, collectSlot.index) = getDataAtIndex(data, disputedPaymentIndex);\n        collectSlot.status = 4;\n        collectSlot.block = getFutureBlock(config.challengeStepBlocks);\n    }\n\n    /**\n     * @dev Internal function. Phase IV of the challenging game\n     * @param collectSlot Collect slot\n     * @param payments a reference to the BatPay payments array\n     * @param payData binary data describing the list of account receiving\n     *        tokens on the selected transfer\n     */\n    function challenge_4(\n        Data.CollectSlot storage collectSlot,\n        Data.Payment[] storage payments,\n        bytes memory payData\n    )\n        public\n        onlyValidCollectSlot(collectSlot, 4)\n    {\n        require(collectSlot.index >= collectSlot.minPayIndex && collectSlot.index < collectSlot.maxPayIndex,\n            \"payment referenced is out of range\");\n        Data.Payment memory p = payments[collectSlot.index];\n        require(keccak256(payData) == p.paymentDataHash,\n        \"payData mismatch, payment's data hash doesn't match provided payData hash\");\n        require(p.lockingKeyHash == 0, \"payment is locked\");\n\n        uint collected = getPayDataSum(payData, collectSlot.to, p.amount);\n\n        // Check if id is included in bulkRegistration within payment\n        if (collectSlot.to >= p.smallestAccountId && collectSlot.to < p.greatestAccountId) {\n            collected = SafeMath.add(collected, p.amount);\n        }\n\n        require(collected == collectSlot.challengeAmount,\n        \"amount mismatch, provided payData sum doesn't match collected challenge amount\");\n\n        collectSlot.status = 5;\n    }\n\n    /**\n     * @dev the challenge was completed successfully, or the delegate failed to respond on time.\n     *      The challenger will collect the stake.\n     * @param collectSlot Collect slot\n     * @param config Various parameters\n     * @param accounts a reference to the main accounts array\n     */\n    function challenge_success(\n        Data.CollectSlot storage collectSlot,\n        Data.Config storage config,\n        Data.Account[] storage accounts\n    )\n        public\n    {\n        require((collectSlot.status == 2 || collectSlot.status == 4),\n            \"Wrong Collect Slot status\");\n        require(challengeHasExpired(collectSlot),\n            \"Challenge not yet finished\");\n\n        accounts[collectSlot.challenger].balance = SafeMath.add64(\n            accounts[collectSlot.challenger].balance,\n            SafeMath.add64(config.collectStake, config.challengeStake));\n\n        collectSlot.status = 0;\n    }\n\n    /**\n     * @dev Internal function. The delegate proved the challenger wrong, or\n     *      the challenger failed to respond on time. The delegae collects the stake.\n     * @param collectSlot Collect slot\n     * @param config Various parameters\n     * @param accounts a reference to the main accounts array\n     */\n    function challenge_failed(\n        Data.CollectSlot storage collectSlot,\n        Data.Config storage config,\n        Data.Account[] storage accounts\n    )\n        public\n    {\n        require(collectSlot.status == 5 || (collectSlot.status == 3 && block.number >= collectSlot.block),\n            \"challenge not completed\");\n\n        // Challenge failed\n        // delegate wins Stake\n        accounts[collectSlot.delegate].balance = SafeMath.add64(\n            accounts[collectSlot.delegate].balance,\n            config.challengeStake);\n\n        // reset slot to status=1, waiting for challenges\n        collectSlot.challenger = 0;\n        collectSlot.status = 1;\n        collectSlot.block = getFutureBlock(config.challengeBlocks);\n    }\n\n    /**\n     * @dev Helps verify a ECDSA signature, while recovering the signing address.\n     * @param hash Hash of the signed message\n     * @param sig binary representation of the r, s & v parameters.\n     * @return address of the signer if data provided is valid, zero otherwise.\n     */\n    function recoverHelper(bytes32 hash, bytes sig) public pure returns (address) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (sig.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return address(0);\n        }\n\n        return ecrecover(prefixedHash, v, r, s);\n    }\n}\n\n\n/**\n * @title Payments and Challenge game - Performs the operations associated with\n *        transfer and the different steps of the collect challenge game.\n */\ncontract Payments is Accounts {\n    event PaymentRegistered(\n        uint32 indexed payIndex,\n        uint indexed from,\n        uint totalNumberOfPayees,\n        uint amount\n    );\n\n    event PaymentUnlocked(uint32 indexed payIndex, bytes key);\n    event PaymentRefunded(uint32 beneficiaryAccountId, uint64 amountRefunded);\n\n    /**\n     * Event for collection logging. Off-chain monitoring services may listen\n     * to this event to trigger challenges.\n     */\n    event Collect(\n        uint indexed delegate,\n        uint indexed slot,\n        uint indexed to,\n        uint32 fromPayindex,\n        uint32 toPayIndex,\n        uint amount\n    );\n\n    event Challenge1(uint indexed delegate, uint indexed slot, uint challenger);\n    event Challenge2(uint indexed delegate, uint indexed slot);\n    event Challenge3(uint indexed delegate, uint indexed slot, uint index);\n    event Challenge4(uint indexed delegate, uint indexed slot);\n    event ChallengeSuccess(uint indexed delegate, uint indexed slot);\n    event ChallengeFailed(uint indexed delegate, uint indexed slot);\n\n    Payment[] public payments;\n    mapping (uint32 => mapping (uint32 => CollectSlot)) public collects;\n\n    /**\n     * @dev Register token payment to multiple recipients\n     * @param fromId Account id for the originator of the transaction\n     * @param amount Amount of tokens to pay each destination.\n     * @param fee Fee in tokens to be payed to the party providing the unlocking service\n     * @param payData Efficient representation of the destination account list\n     * @param newCount Number of new destination accounts that will be reserved during the registerPayment transaction\n     * @param rootHash Hash of the root hash of the Merkle tree listing the addresses reserved.\n     * @param lockingKeyHash hash resulting of calculating the keccak256 of\n     *        of the key locking this payment to help in atomic data swaps.\n     *        This hash will later be used by the `unlock` function to unlock the payment we are registering.\n     *         The `lockingKeyHash` must be equal to the keccak256 of the packed\n     *         encoding of the unlockerAccountId and the key used by the unlocker to encrypt the traded data:\n     *             `keccak256(abi.encodePacked(unlockerAccountId, key))`\n     *         DO NOT use previously used locking keys, since an attacker could realize that by comparing key hashes\n     * @param metadata Application specific data to be stored associated with the payment\n     */\n    function registerPayment(\n        uint32 fromId,\n        uint64 amount,\n        uint64 fee,\n        bytes payData,\n        uint newCount,\n        bytes32 rootHash,\n        bytes32 lockingKeyHash,\n        bytes32 metadata\n    )\n        external\n    {\n        require(payments.length < 2**32, \"Cannot add more payments\");\n        require(isAccountOwner(fromId), \"Invalid fromId\");\n        require(amount > 0, \"Invalid amount\");\n        require(newCount == 0 || rootHash > 0, \"Invalid root hash\"); // although bulkRegister checks this, we anticipate\n        require(fee == 0 || lockingKeyHash > 0, \"Invalid lock hash\");\n\n        Payment memory p;\n\n        // Prepare a Payment struct\n        p.totalNumberOfPayees = SafeMath.add32(Challenge.getPayDataCount(payData), newCount);\n        require(p.totalNumberOfPayees > 0, \"Invalid number of payees, should at least be 1 payee\");\n        require(p.totalNumberOfPayees < params.maxTransfer,\n        \"Too many payees, it should be less than config maxTransfer\");\n\n        p.fromAccountId = fromId;\n        p.amount = amount;\n        p.fee = fee;\n        p.lockingKeyHash = lockingKeyHash;\n        p.metadata = metadata;\n        p.smallestAccountId = uint32(accounts.length);\n        p.greatestAccountId = SafeMath.add32(p.smallestAccountId, newCount);\n        p.lockTimeoutBlockNumber = SafeMath.add64(block.number, params.unlockBlocks);\n        p.paymentDataHash = keccak256(abi.encodePacked(payData));\n\n        // calculate total cost of payment\n        uint64 totalCost = SafeMath.mul64(amount, p.totalNumberOfPayees);\n        totalCost = SafeMath.add64(totalCost, fee);\n\n        // Check that fromId has enough balance and substract totalCost\n        balanceSub(fromId, totalCost);\n\n        // If this operation includes new accounts, do a bulkRegister\n        if (newCount > 0) {\n            bulkRegister(newCount, rootHash);\n        }\n\n        // Save the new Payment\n        payments.push(p);\n\n        emit PaymentRegistered(SafeMath.sub32(payments.length, 1), p.fromAccountId, p.totalNumberOfPayees, p.amount);\n    }\n\n    /**\n     * @dev provide the required key, releasing the payment and enabling the buyer decryption the digital content.\n     * @param payIndex payment Index associated with the registerPayment operation.\n     * @param unlockerAccountId id of the party providing the unlocking service. Fees wil be payed to this id.\n     * @param key Cryptographic key used to encrypt traded data.\n     */\n    function unlock(uint32 payIndex, uint32 unlockerAccountId, bytes memory key) public returns(bool) {\n        require(payIndex < payments.length, \"invalid payIndex, payments is not that long yet\");\n        require(isValidId(unlockerAccountId), \"Invalid unlockerAccountId\");\n        require(block.number < payments[payIndex].lockTimeoutBlockNumber, \"Hash lock expired\");\n        bytes32 h = keccak256(abi.encodePacked(unlockerAccountId, key));\n        require(h == payments[payIndex].lockingKeyHash, \"Invalid key\");\n\n        payments[payIndex].lockingKeyHash = bytes32(0);\n        balanceAdd(unlockerAccountId, payments[payIndex].fee);\n\n        emit PaymentUnlocked(payIndex, key);\n        return true;\n    }\n\n    /**\n     * @dev Enables the buyer to recover funds associated with a `registerPayment()`\n     *      operation for which decryption keys were not provided.\n     * @param payIndex Index of the payment transaction associated with this request.\n     * @return true if the operation succeded.\n     */\n    function refundLockedPayment(uint32 payIndex) external returns (bool) {\n        require(payIndex < payments.length, \"invalid payIndex, payments is not that long yet\");\n        require(payments[payIndex].lockingKeyHash != 0, \"payment is already unlocked\");\n        require(block.number >= payments[payIndex].lockTimeoutBlockNumber, \"Hash lock has not expired yet\");\n        Payment memory payment = payments[payIndex];\n        require(payment.totalNumberOfPayees > 0, \"payment already refunded\");\n\n        uint64 total = SafeMath.add64(\n            SafeMath.mul64(payment.totalNumberOfPayees, payment.amount),\n            payment.fee\n        );\n\n        payment.totalNumberOfPayees = 0;\n        payment.fee = 0;\n        payment.amount = 0;\n        payments[payIndex] = payment;\n\n        // Complete refund\n        balanceAdd(payment.fromAccountId, total);\n        emit PaymentRefunded(payment.fromAccountId, total);\n\n        return true;\n    }\n\n    /**\n     * @dev let users claim pending balance associated with prior transactions\n            Users ask a delegate to complete the transaction on their behalf,\n            the delegate calculates the apropiate amount (declaredAmount) and\n            waits for a possible challenger.\n            If this is an instant collect, tokens are transfered immediatly.\n     * @param delegate id of the delegate account performing the operation on the name of the user.\n     * @param slotId Individual slot used for the challenge game.\n     * @param toAccountId Destination of the collect operation.\n     * @param maxPayIndex payIndex of the first payment index not covered by this application.\n     * @param declaredAmount amount of tokens owed to this user account\n     * @param fee fee in tokens to be paid for the end user help.\n     * @param destination Address to withdraw the full account balance.\n     * @param signature An R,S,V ECDS signature provided by a user.\n     */\n    function collect(\n        uint32 delegate,\n        uint32 slotId,\n        uint32 toAccountId,\n        uint32 maxPayIndex,\n        uint64 declaredAmount,\n        uint64 fee,\n        address destination,\n        bytes memory signature\n    )\n    public\n    {\n        // Check delegate and toAccountId are valid\n        require(isAccountOwner(delegate), \"invalid delegate\");\n        require(isValidId(toAccountId), \"toAccountId must be a valid account id\");\n\n        // make sure the game slot is empty (release it if necessary)\n        freeSlot(delegate, slotId);\n\n        Account memory tacc = accounts[toAccountId];\n        require(tacc.owner != 0, \"account registration has to be completed\");\n\n        if (delegate != toAccountId) {\n            // If \"toAccountId\" != delegate, check who signed this transaction\n            bytes32 hash =\n            keccak256(\n            abi.encodePacked(\n                address(this), delegate, toAccountId, tacc.lastCollectedPaymentId,\n                maxPayIndex, declaredAmount, fee, destination\n            ));\n            require(Challenge.recoverHelper(hash, signature) == tacc.owner, \"Bad user signature\");\n        }\n\n        // Check maxPayIndex is valid\n        require(maxPayIndex > 0 && maxPayIndex <= payments.length,\n        \"invalid maxPayIndex, payments is not that long yet\");\n        require(maxPayIndex > tacc.lastCollectedPaymentId, \"account already collected payments up to maxPayIndex\");\n        require(payments[maxPayIndex - 1].lockTimeoutBlockNumber < block.number,\n            \"cannot collect payments that can be unlocked\");\n\n        // Check if declaredAmount and fee are valid\n        require(declaredAmount <= params.maxCollectAmount, \"declaredAmount is too big\");\n        require(fee <= declaredAmount, \"fee is too big, should be smaller than declaredAmount\");\n\n        // Prepare the challenge slot\n        CollectSlot storage sl = collects[delegate][slotId];\n        sl.delegate = delegate;\n        sl.minPayIndex = tacc.lastCollectedPaymentId;\n        sl.maxPayIndex = maxPayIndex;\n        sl.amount = declaredAmount;\n        sl.to = toAccountId;\n        sl.block = Challenge.getFutureBlock(params.challengeBlocks);\n        sl.status = 1;\n\n        // Calculate how many tokens needs the delegate, and setup delegateAmount and addr\n        uint64 needed = params.collectStake;\n\n        // check if this is an instant collect\n        if (slotId >= INSTANT_SLOT) {\n            uint64 declaredAmountLessFee = SafeMath.sub64(declaredAmount, fee);\n            sl.delegateAmount = declaredAmount;\n            needed = SafeMath.add64(needed, declaredAmountLessFee);\n            sl.addr = address(0);\n\n            // Instant-collect, toAccount gets the declaredAmount now\n            balanceAdd(toAccountId, declaredAmountLessFee);\n        } else\n        {   // not instant-collect\n            sl.delegateAmount = fee;\n            sl.addr = destination;\n        }\n\n        // Check delegate has enough funds\n        require(accounts[delegate].balance >= needed, \"not enough funds\");\n\n        // Update the lastCollectPaymentId for the toAccount\n        accounts[toAccountId].lastCollectedPaymentId = uint32(maxPayIndex);\n\n        // Now the delegate Pays\n        balanceSub(delegate, needed);\n\n        // Proceed if the user is withdrawing its balance\n        if (destination != address(0) && slotId >= INSTANT_SLOT) {\n            uint64 toWithdraw = accounts[toAccountId].balance;\n            accounts[toAccountId].balance = 0;\n            require(token.transfer(destination, toWithdraw), \"transfer failed\");\n        }\n\n        emit Collect(delegate, slotId, toAccountId, tacc.lastCollectedPaymentId, maxPayIndex, declaredAmount);\n    }\n\n    /**\n     * @dev gets the number of payments issued\n     * @return returns the size of the payments array.\n     */\n    function getPaymentsLength() external view returns (uint) {\n        return payments.length;\n    }\n\n    /**\n     * @dev initiate a challenge game\n     * @param delegate id of the delegate that performed the collect operation\n     *        in the name of the end-user.\n     * @param slot slot used for the challenge game. Every user has a sperate\n     *        set of slots\n     * @param challenger id of the user account challenging the delegate.\n     */\n    function challenge_1(\n        uint32 delegate,\n        uint32 slot,\n        uint32 challenger\n    )\n        public\n        validId(delegate)\n        onlyAccountOwner(challenger)\n    {\n        Challenge.challenge_1(collects[delegate][slot], params, accounts, challenger);\n        emit Challenge1(delegate, slot, challenger);\n    }\n\n    /**\n     * @dev The delegate provides the list of payments that mentions the enduser\n     * @param delegate id of the delegate performing the collect operation\n     * @param slot slot used for the operation\n     * @param data binary list of payment indexes associated with this collect operation.\n     */\n    function challenge_2(\n        uint32 delegate,\n        uint32 slot,\n        bytes memory data\n    )\n        public\n        onlyAccountOwner(delegate)\n    {\n        Challenge.challenge_2(collects[delegate][slot], params, data);\n        emit Challenge2(delegate, slot);\n    }\n\n    /**\n     * @dev the Challenger chooses a single index into the delegate provided data list\n     * @param delegate id of the delegate performing the collect operation\n     * @param slot slot used for the operation\n     * @param data binary list of payment indexes associated with this collect operation.\n     * @param index index into the data array for the payment id selected by the challenger\n     */\n    function challenge_3(\n        uint32 delegate,\n        uint32 slot,\n        bytes memory data,\n        uint32 index\n    )\n        public\n        validId(delegate)\n    {\n        require(isAccountOwner(collects[delegate][slot].challenger), \"only challenger can call challenge_2\");\n\n        Challenge.challenge_3(collects[delegate][slot], params, data, index);\n        emit Challenge3(delegate, slot, index);\n    }\n\n    /**\n     * @dev the delegate provides proof that the destination account was\n     *      included on that payment, winning the game\n     * @param delegate id of the delegate performing the collect operation\n     * @param slot slot used for the operation\n     */\n    function challenge_4(\n        uint32 delegate,\n        uint32 slot,\n        bytes memory payData\n    )\n        public\n        onlyAccountOwner(delegate)\n    {\n        Challenge.challenge_4(\n            collects[delegate][slot],\n            payments,\n            payData\n            );\n        emit Challenge4(delegate, slot);\n    }\n\n    /**\n     * @dev the challenge was completed successfully. The delegate stake is slashed.\n     * @param delegate id of the delegate performing the collect operation\n     * @param slot slot used for the operation\n     */\n    function challenge_success(\n        uint32 delegate,\n        uint32 slot\n    )\n        public\n        validId(delegate)\n    {\n        Challenge.challenge_success(collects[delegate][slot], params, accounts);\n        emit ChallengeSuccess(delegate, slot);\n    }\n\n    /**\n     * @dev The delegate won the challenge game. He gets the challenge stake.\n     * @param delegate id of the delegate performing the collect operation\n     * @param slot slot used for the operation\n     */\n    function challenge_failed(\n        uint32 delegate,\n        uint32 slot\n    )\n        public\n        onlyAccountOwner(delegate)\n    {\n        Challenge.challenge_failed(collects[delegate][slot], params, accounts);\n        emit ChallengeFailed(delegate, slot);\n    }\n\n    /**\n     * @dev Releases a slot used by the collect channel game, only when the game is finished.\n     *      This does three things:\n     *        1. Empty the slot\n     *        2. Pay the delegate\n     *        3. Pay the destinationAccount\n     *      Also, if a token.transfer was requested, transfer the outstanding balance to the specified address.\n     * @param delegate id of the account requesting the release operation\n     * @param slot id of the slot requested for the duration of the challenge game\n     */\n    function freeSlot(uint32 delegate, uint32 slot) public {\n        CollectSlot memory s = collects[delegate][slot];\n\n        // If this is slot is empty, nothing else to do here.\n        if (s.status == 0) return;\n\n        // Make sure this slot is ready to be freed.\n        // It should be in the waiting state(1) and with challenge time ran-out\n        require(s.status == 1, \"slot not available\");\n        require(block.number >= s.block, \"slot not available\");\n\n        // 1. Put the slot in the empty state\n        collects[delegate][slot].status = 0;\n\n        // 2. Pay the delegate\n        // This includes the stake as well as fees and other tokens reserved during collect()\n        // [delegateAmount + stake] => delegate\n        balanceAdd(delegate, SafeMath.add64(s.delegateAmount, params.collectStake));\n\n        // 3. Pay the destination account\n        // [amount - delegateAmount] => to\n        uint64 balance = SafeMath.sub64(s.amount, s.delegateAmount);\n\n        // was a transfer requested?\n        if (s.addr != address(0))\n        {\n            // empty the account balance\n            balance = SafeMath.add64(balance, accounts[s.to].balance);\n            accounts[s.to].balance = 0;\n            if (balance != 0)\n                require(token.transfer(s.addr, balance), \"transfer failed\");\n        } else\n        {\n            balanceAdd(s.to, balance);\n        }\n    }\n}\n\n\n/**\n * @title BatchPayment processing\n * @notice This contract allows to scale ERC-20 token transfer for fees or\n *         micropayments on the few-buyers / many-sellers setting.\n */\ncontract BatPay is Payments {\n\n    /**\n     * @dev Contract constructor, sets ERC20 token this contract will use for payments\n     * @param token_ ERC20 contract address\n     * @param maxBulk Maximum number of users to register in a single bulkRegister\n     * @param maxTransfer Maximum number of destinations on a single payment\n     * @param challengeBlocks number of blocks to wait for a challenge\n     * @param challengeStepBlocks number of blocks to wait for a single step on\n     *        the challenge game\n     * @param collectStake stake in tokens for a collect operation\n     * @param challengeStake stake in tokens for the challenger of a collect operation\n     * @param unlockBlocks number of blocks to wait after registering payment\n     *        for an unlock operation\n     * @param maxCollectAmount Maximum amount of tokens to be collected in a\n     *        single transaction\n     */\n    constructor(\n        IERC20 token_,\n        uint32 maxBulk,\n        uint32 maxTransfer,\n        uint32 challengeBlocks,\n        uint32 challengeStepBlocks,\n        uint64 collectStake,\n        uint64 challengeStake,\n        uint32 unlockBlocks,\n        uint64 maxCollectAmount\n    )\n        public\n    {\n        require(token_ != address(0), \"Token address can't be zero\");\n        require(maxBulk > 0, \"Parameter maxBulk can't be zero\");\n        require(maxTransfer > 0, \"Parameter maxTransfer can't be zero\");\n        require(challengeBlocks > 0, \"Parameter challengeBlocks can't be zero\");\n        require(challengeStepBlocks > 0, \"Parameter challengeStepBlocks can't be zero\");\n        require(collectStake > 0, \"Parameter collectStake can't be zero\");\n        require(challengeStake > 0, \"Parameter challengeStake can't be zero\");\n        require(unlockBlocks > 0, \"Parameter unlockBlocks can't be zero\");\n        require(maxCollectAmount > 0, \"Parameter maxCollectAmount can't be zero\");\n\n        owner = msg.sender;\n        token = IERC20(token_);\n        params.maxBulk = maxBulk;\n        params.maxTransfer = maxTransfer;\n        params.challengeBlocks = challengeBlocks;\n        params.challengeStepBlocks = challengeStepBlocks;\n        params.collectStake = collectStake;\n        params.challengeStake = challengeStake;\n        params.unlockBlocks = unlockBlocks;\n        params.maxCollectAmount = maxCollectAmount;\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"fromId\",\"type\":\"uint32\"},{\"name\":\"amount\",\"type\":\"uint64\"},{\"name\":\"fee\",\"type\":\"uint64\"},{\"name\":\"payData\",\"type\":\"bytes\"},{\"name\":\"newCount\",\"type\":\"uint256\"},{\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"name\":\"lockingKeyHash\",\"type\":\"bytes32\"},{\"name\":\"metadata\",\"type\":\"bytes32\"}],\"name\":\"registerPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"uint32\"},{\"name\":\"slotId\",\"type\":\"uint32\"},{\"name\":\"toAccountId\",\"type\":\"uint32\"},{\"name\":\"maxPayIndex\",\"type\":\"uint32\"},{\"name\":\"declaredAmount\",\"type\":\"uint64\"},{\"name\":\"fee\",\"type\":\"uint64\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAccountsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bulkRegistrations\",\"outputs\":[{\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"name\":\"recordCount\",\"type\":\"uint32\"},{\"name\":\"smallestRecordId\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountId\",\"type\":\"uint256\"}],\"name\":\"isValidId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"name\":\"ret\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INSTANT_SLOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"name\":\"accountId\",\"type\":\"uint256\"},{\"name\":\"bulkId\",\"type\":\"uint256\"}],\"name\":\"claimBulkRegistrationId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NEW_ACCOUNT_FLAG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payIndex\",\"type\":\"uint32\"},{\"name\":\"unlockerAccountId\",\"type\":\"uint32\"},{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint64\"},{\"name\":\"accountId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"uint32\"},{\"name\":\"slot\",\"type\":\"uint32\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"challenge_2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"uint32\"},{\"name\":\"slot\",\"type\":\"uint32\"}],\"name\":\"challenge_success\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountId\",\"type\":\"uint256\"}],\"name\":\"isAccountOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint64\"},{\"name\":\"accountId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"uint32\"},{\"name\":\"slot\",\"type\":\"uint32\"},{\"name\":\"payData\",\"type\":\"bytes\"}],\"name\":\"challenge_4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"collects\",\"outputs\":[{\"name\":\"minPayIndex\",\"type\":\"uint32\"},{\"name\":\"maxPayIndex\",\"type\":\"uint32\"},{\"name\":\"amount\",\"type\":\"uint64\"},{\"name\":\"delegateAmount\",\"type\":\"uint64\"},{\"name\":\"to\",\"type\":\"uint32\"},{\"name\":\"block\",\"type\":\"uint64\"},{\"name\":\"delegate\",\"type\":\"uint32\"},{\"name\":\"challenger\",\"type\":\"uint32\"},{\"name\":\"index\",\"type\":\"uint32\"},{\"name\":\"challengeAmount\",\"type\":\"uint64\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ACCOUNT_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"fromAccountId\",\"type\":\"uint32\"},{\"name\":\"amount\",\"type\":\"uint64\"},{\"name\":\"fee\",\"type\":\"uint64\"},{\"name\":\"smallestAccountId\",\"type\":\"uint32\"},{\"name\":\"greatestAccountId\",\"type\":\"uint32\"},{\"name\":\"totalNumberOfPayees\",\"type\":\"uint32\"},{\"name\":\"lockTimeoutBlockNumber\",\"type\":\"uint64\"},{\"name\":\"paymentDataHash\",\"type\":\"bytes32\"},{\"name\":\"lockingKeyHash\",\"type\":\"bytes32\"},{\"name\":\"metadata\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"uint32\"},{\"name\":\"slot\",\"type\":\"uint32\"}],\"name\":\"challenge_failed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"uint32\"},{\"name\":\"slot\",\"type\":\"uint32\"},{\"name\":\"challenger\",\"type\":\"uint32\"}],\"name\":\"challenge_1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaymentsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBulkLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"uint32\"},{\"name\":\"slot\",\"type\":\"uint32\"}],\"name\":\"freeSlot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"name\":\"maxBulk\",\"type\":\"uint32\"},{\"name\":\"maxTransfer\",\"type\":\"uint32\"},{\"name\":\"challengeBlocks\",\"type\":\"uint32\"},{\"name\":\"challengeStepBlocks\",\"type\":\"uint32\"},{\"name\":\"collectStake\",\"type\":\"uint64\"},{\"name\":\"challengeStake\",\"type\":\"uint64\"},{\"name\":\"unlockBlocks\",\"type\":\"uint32\"},{\"name\":\"massExitIdBlocks\",\"type\":\"uint32\"},{\"name\":\"massExitIdStepBlocks\",\"type\":\"uint32\"},{\"name\":\"massExitBalanceBlocks\",\"type\":\"uint32\"},{\"name\":\"massExitBalanceStepBlocks\",\"type\":\"uint32\"},{\"name\":\"massExitStake\",\"type\":\"uint64\"},{\"name\":\"massExitChallengeStake\",\"type\":\"uint64\"},{\"name\":\"maxCollectAmount\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payIndex\",\"type\":\"uint32\"}],\"name\":\"refundLockedPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bulkSize\",\"type\":\"uint256\"},{\"name\":\"rootHash\",\"type\":\"bytes32\"}],\"name\":\"bulkRegister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accounts\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint64\"},{\"name\":\"lastCollectedPaymentId\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"delegate\",\"type\":\"uint32\"},{\"name\":\"slot\",\"type\":\"uint32\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"challenge_3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token_\",\"type\":\"address\"},{\"name\":\"maxBulk\",\"type\":\"uint32\"},{\"name\":\"maxTransfer\",\"type\":\"uint32\"},{\"name\":\"challengeBlocks\",\"type\":\"uint32\"},{\"name\":\"challengeStepBlocks\",\"type\":\"uint32\"},{\"name\":\"collectStake\",\"type\":\"uint64\"},{\"name\":\"challengeStake\",\"type\":\"uint64\"},{\"name\":\"unlockBlocks\",\"type\":\"uint32\"},{\"name\":\"maxCollectAmount\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payIndex\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalNumberOfPayees\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"PaymentUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiaryAccountId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"amountRefunded\",\"type\":\"uint64\"}],\"name\":\"PaymentRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fromPayindex\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"toPayIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"challenger\",\"type\":\"uint256\"}],\"name\":\"Challenge1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"Challenge2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"Challenge3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"Challenge4\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"ChallengeSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"delegate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"ChallengeFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bulkSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"smallestAccountId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bulkId\",\"type\":\"uint256\"}],\"name\":\"BulkRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"accountAddress\",\"type\":\"address\"}],\"name\":\"AccountRegistered\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b506040516101208062004d9d83398101604090815281516020830151918301516060840151608085015160a086015160c087015160e088015161010090980151959794959394929391929091600160a060020a0389161515620000d557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f546f6b656e20616464726573732063616e2774206265207a65726f0000000000604482015290519081900360640190fd5b600063ffffffff8916116200014b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f506172616d65746572206d617842756c6b2063616e2774206265207a65726f00604482015290519081900360640190fd5b600063ffffffff881611620001e757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f506172616d65746572206d61785472616e736665722063616e2774206265207a60448201527f65726f0000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600063ffffffff8716116200028357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f506172616d65746572206368616c6c656e6765426c6f636b732063616e27742060448201527f6265207a65726f00000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600063ffffffff8616116200031f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f506172616d65746572206368616c6c656e676553746570426c6f636b7320636160448201527f6e2774206265207a65726f000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006001604060020a03851611620003bd57604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f506172616d6574657220636f6c6c6563745374616b652063616e27742062652060448201527f7a65726f00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006001604060020a038416116200045c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f506172616d65746572206368616c6c656e67655374616b652063616e2774206260448201527f65207a65726f0000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600063ffffffff831611620004f757604080517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f506172616d6574657220756e6c6f636b426c6f636b732063616e27742062652060448201527f7a65726f00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006001604060020a038216116200059657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f506172616d65746572206d6178436f6c6c656374416d6f756e742063616e277460448201527f206265207a65726f000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6003805433600160a060020a03199182161790915560048054909116600160a060020a039a909a16999099179098556000805463ffffffff1990811663ffffffff998a161767ffffffff000000001916640100000000988a169890980297909717604060020a63ffffffff02191668010000000000000000968916870217606060020a63ffffffff0219166c010000000000000000000000009589169590950294909417608060020a60c060020a0319167001000000000000000000000000000000006001604060020a039485160217600160c060020a03167801000000000000000000000000000000000000000000000000928416929092029190911783556001805490951695169490941790925560028054604060020a608060020a0319169390941602919091179091556146c9908190620006d490396000f30060806040526004361061017c5763ffffffff60e060020a60003504166304be2716811461018157806307034be6146101cf57806314f326a11461026e5780631694e2af146102955780631a96c519146102d25780631aa3a008146102fe5780631aeaa0561461032c5780632fdb56581461034157806337a2b895146103ad578063407256b6146103c2578063433879831461042e5780634629401f14610452578063503e1ac8146104be5780635fced646146104e25780636170c4b1146104fa578063792c8ba81461051e5780637b0f952f1461058a57806380d839b11461064057806387d81789146106555780638da5cb5b146106d95780639096a66b1461070a5780639b4156ff1461072e5780639cc7f70814610758578063b8e0ffbe1461078c578063c4cc55e6146107a1578063c79c9512146107b6578063cff0ab96146107da578063d0aef4a914610926578063d34e3c8314610944578063f2a40db81461095f578063fc0c546a146109ad578063fc6bdb70146109c2575b600080fd5b34801561018d57600080fd5b506101cd6004803563ffffffff1690602480356001604060020a03908116926044359091169160643590810191013560843560a43560c43560e435610a36565b005b3480156101db57600080fd5b50604080516020601f60e4356004818101359283018490048402850184019095528184526101cd9463ffffffff813581169560248035831696604435841696606435909416956001604060020a0360843581169660a43590911695600160a060020a0360c435169536959294610104949193919091019190819084018382808284375094975061114a9650505050505050565b34801561027a57600080fd5b50610283611dd6565b60408051918252519081900360200190f35b3480156102a157600080fd5b506102ad600435611ddd565b6040805193845263ffffffff9283166020850152911682820152519081900360600190f35b3480156102de57600080fd5b506102ea600435611e1a565b604080519115158252519081900360200190f35b34801561030a57600080fd5b50610313611e21565b6040805163ffffffff9092168252519081900360200190f35b34801561033857600080fd5b50610283611f5a565b34801561034d57600080fd5b506040805160206004602480358281013584810280870186019097528086526101cd968435600160a060020a031696369660449591949091019291829185019084908082843750949750508435955050506020909201359150611f609050565b3480156103b957600080fd5b5061028361228d565b3480156103ce57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102ea94823563ffffffff908116956024803590921695369594606494929301919081908401838280828437509497506122939650505050505050565b34801561043a57600080fd5b506101cd6001604060020a036004351660243561264b565b34801561045e57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101cd94823563ffffffff908116956024803590921695369594606494929301919081908401838280828437509497506128759650505050505050565b3480156104ca57600080fd5b506101cd63ffffffff60043581169060243516612a1a565b3480156104ee57600080fd5b506102ea600435612b43565b34801561050657600080fd5b506101cd6001604060020a0360043516602435612b81565b34801561052a57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101cd94823563ffffffff90811695602480359092169536959460649492930191908190840183828082843750949750612d8e9650505050505050565b34801561059657600080fd5b506105ae63ffffffff60043581169060243516612f37565b6040805163ffffffff9e8f1681529c8e1660208e01526001604060020a039b8c168d820152998b1660608d0152978c1660808c015295891660a08b0152938a1660c08a015291891660e08901529097166101008701529590931661012085015260ff909416610140840152600160a060020a039091166101608301526101808201929092529051908190036101a00190f35b34801561064c57600080fd5b50610283612fdb565b34801561066157600080fd5b5061066d600435612fe3565b6040805163ffffffff9b8c1681526001604060020a039a8b166020820152988a1689820152968a16606089015294891660808801529290971660a086015290941660c084015260e083019490945261010082019290925261012081019290925251908190036101400190f35b3480156106e557600080fd5b506106ee613066565b60408051600160a060020a039092168252519081900360200190f35b34801561071657600080fd5b506101cd63ffffffff60043581169060243516613075565b34801561073a57600080fd5b506101cd63ffffffff600435811690602435811690604435166131b3565b34801561076457600080fd5b50610770600435613364565b604080516001604060020a039092168252519081900360200190f35b34801561079857600080fd5b506102836133e5565b3480156107ad57600080fd5b506102836133eb565b3480156107c257600080fd5b506101cd63ffffffff600435811690602435166133f1565b3480156107e657600080fd5b506107ef6137d8565b604051808f63ffffffff1663ffffffff1681526020018e63ffffffff1663ffffffff1681526020018d63ffffffff1663ffffffff1681526020018c63ffffffff1663ffffffff1681526020018b6001604060020a03166001604060020a031681526020018a6001604060020a03166001604060020a031681526020018963ffffffff1663ffffffff1681526020018863ffffffff1663ffffffff1681526020018763ffffffff1663ffffffff1681526020018663ffffffff1663ffffffff1681526020018563ffffffff1663ffffffff168152602001846001604060020a03166001604060020a03168152602001836001604060020a03166001604060020a03168152602001826001604060020a03166001604060020a031681526020019e50505050505050505050505050505060405180910390f35b34801561093257600080fd5b506102ea63ffffffff6004351661385c565b34801561095057600080fd5b506101cd600435602435613cc5565b34801561096b57600080fd5b50610977600435613f6a565b60408051600160a060020a0390941684526001604060020a03909216602084015263ffffffff1682820152519081900360600190f35b3480156109b957600080fd5b506106ee613fb1565b3480156109ce57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101cd94823563ffffffff908116956024803590921695369594606494929301919081908401838280828437509497505050923563ffffffff169350613fc092505050565b610a3e614500565b600754600090602060020a11610a9c576040805160e560020a62461bcd0281526020600482015260186024820152604060020a7743616e6e6f7420616464206d6f7265207061796d656e747302604482015290519081900360640190fd5b610aab8b63ffffffff16612b43565b1515610af5576040805160e560020a62461bcd02815260206004820152600e6024820152609260020a6d125b9d985b1a5908199c9bdb525902604482015290519081900360640190fd5b60006001604060020a038b1611610b4a576040805160e560020a62461bcd02815260206004820152600e6024820152609260020a6d125b9d985b1a5908185b5bdd5b9d02604482015290519081900360640190fd5b851580610b575750600085115b1515610ba4576040805160e560020a62461bcd0281526020600482015260116024820152607b60020a70092dcecc2d8d2c840e4dedee840d0c2e6d02604482015290519081900360640190fd5b6001604060020a0389161580610bba5750600084115b1515610c07576040805160e560020a62461bcd0281526020600482015260116024820152607b60020a70092dcecc2d8d2c840d8dec6d640d0c2e6d02604482015290519081900360640190fd5b60405160e260020a632b2bf0c702815260206004820190815260248201899052610caa9173202fe4bf42b8338171b9b8802261623af53221719163acafc31c918c918c9181906044018484808284378201915050935050505060206040518083038186803b158015610c7857600080fd5b505af4158015610c8c573d6000803e3d6000fd5b505050506040513d6020811015610ca257600080fd5b50518761420d565b63ffffffff1660a08301819052600010610d2e576040805160e560020a62461bcd02815260206004820152603460248201527f496e76616c6964206e756d626572206f66207061796565732c2073686f756c646044820152606060020a73206174206c65617374206265203120706179656502606482015290519081900360840190fd5b60005460a083015163ffffffff602060020a9092048216911610610dc2576040805160e560020a62461bcd02815260206004820152603a60248201527f546f6f206d616e79207061796565732c2069742073686f756c64206265206c6560448201527f7373207468616e20636f6e666967206d61785472616e73666572000000000000606482015290519081900360840190fd5b63ffffffff808c1683526001604060020a03808c1660208501528a166040840152610100830185905261012083018490526005541660608301819052610e08908761420d565b63ffffffff9081166080840152600154610e249143911661423b565b6001604060020a031660c083015260405188908890602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b60208310610e8a5780518252601f199092019160209182019101610e6b565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060e086015250505060a0820151610eda906001604060020a038c169063ffffffff1661425b565b9050610ef8816001604060020a03168a6001604060020a031661423b565b9050610f0a8b63ffffffff1682614299565b6000861115610f1d57610f1d8686613cc5565b6007805460018082018355600083905284517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600590930292830180546020880151604089015160608a015160808b015160a08c015163ffffffff1990951663ffffffff978816908117602060020a606060020a031916602060020a6001604060020a039687160217606060020a60a060020a031916606060020a948616949094029390931760a060020a63ffffffff02191660a060020a928816929092029190911760c060020a63ffffffff02191660c060020a9187169190910217600160e060020a031660e060020a95909316949094029190911790915560c08701517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c689850180546001604060020a0319169190921617905560e08601517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a8401556101008601517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b8401556101208601517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c90930192909255915490916110e191906143c7565b63ffffffff167f9f98d377b08a9797d0d5ce3ca2410fcdec2a8ef5bc87584ed433e3b7370a71868460a001518560200151604051808363ffffffff168152602001826001604060020a031681526020019250505060405180910390a35050505050505050505050565b611152614554565b60008060008060006111698e63ffffffff16612b43565b15156111b5576040805160e560020a62461bcd0281526020600482015260106024820152608060020a6f696e76616c69642064656c656761746502604482015290519081900360640190fd5b6111c48c63ffffffff16611e1a565b151561122c576040805160e560020a62461bcd02815260206004820152602660248201527f746f4163636f756e744964206d75737420626520612076616c6964206163636f604482015260d260020a651d5b9d081a5902606482015290519081900360840190fd5b6112368e8e6133f1565b6005805463ffffffff8e1690811061124a57fe5b6000918252602091829020604080516060810182529290910154600160a060020a03811680845260a060020a82046001604060020a03169484019490945260e060020a900463ffffffff169082015296501515611305576040805160e560020a62461bcd02815260206004820152602860248201527f6163636f756e7420726567697374726174696f6e2068617320746f2062652063604482015260c260020a671bdb5c1b195d195902606482015290519081900360840190fd5b63ffffffff8e8116908d16146115c057308e8d88604001518e8e8e8e6040516020018089600160a060020a0316600160a060020a0316606060020a0281526014018863ffffffff1663ffffffff1660e060020a0281526004018763ffffffff1663ffffffff1660e060020a0281526004018663ffffffff1663ffffffff1660e060020a0281526004018563ffffffff1663ffffffff1660e060020a028152600401846001604060020a03166001604060020a031660c060020a028152600801836001604060020a03166001604060020a031660c060020a02815260080182600160a060020a0316600160a060020a0316606060020a028152601401985050505050505050506040516020818303038152906040526040518082805190602001908083835b602083106114485780518252601f199092019160209182019101611429565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208c5160e160020a63052b477f02845260048401828152602485019687528f5160448601528f51929d50600160a060020a03909116975073202fe4bf42b8338171b9b8802261623af53221719650630a568efe958d95508f94919390926064909201919085019080838360005b838110156114f35781810151838201526020016114db565b50505050905090810190601f1680156115205780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561153e57600080fd5b505af4158015611552573d6000803e3d6000fd5b505050506040513d602081101561156857600080fd5b5051600160a060020a0316146115c0576040805160e560020a62461bcd0281526020600482015260126024820152607060020a714261642075736572207369676e617475726502604482015290519081900360640190fd5b60008b63ffffffff161180156115de575060075463ffffffff8c1611155b1515611652576040805160e560020a62461bcd02815260206004820152603260248201527f696e76616c6964206d6178506179496e6465782c207061796d656e74732069736044820152607260020a71081b9bdd081d1a185d081b1bdb99c81e595d02606482015290519081900360840190fd5b856040015163ffffffff168b63ffffffff161115156116db576040805160e560020a62461bcd02815260206004820152603460248201527f6163636f756e7420616c726561647920636f6c6c6563746564207061796d656e6044820152606360020a730e8e640eae040e8de40dac2f0a0c2f292dcc8caf02606482015290519081900360840190fd5b43600760018d0363ffffffff168154811015156116f457fe5b60009182526020909120600160059092020101546001604060020a03161061177e576040805160e560020a62461bcd02815260206004820152602c60248201527f63616e6e6f7420636f6c6c656374207061796d656e747320746861742063616e604482015260a260020a6b081899481d5b9b1bd8dad95902606482015290519081900360840190fd5b6002546001604060020a03604060020a9091048116908b1611156117eb576040805160e560020a62461bcd0281526020600482015260196024820152603860020a786465636c61726564416d6f756e7420697320746f6f2062696702604482015290519081900360640190fd5b6001604060020a03808b16908a161115611870576040805160e560020a62461bcd02815260206004820152603560248201527f66656520697320746f6f206269672c2073686f756c6420626520736d616c6c656044820152605a60020a741c881d1a185b88191958db185c9959105b5bdd5b9d02606482015290519081900360840190fd5b600860008f63ffffffff1663ffffffff16815260200190815260200160002060008e63ffffffff1663ffffffff16815260200190815260200160002093508d8460010160086101000a81548163ffffffff021916908363ffffffff16021790555085604001518460000160006101000a81548163ffffffff021916908363ffffffff1602179055508a8460000160046101000a81548163ffffffff021916908363ffffffff160217905550898460000160086101000a8154816001604060020a0302191690836001604060020a031602179055508b8460000160186101000a81548163ffffffff021916908363ffffffff16021790555073202fe4bf42b8338171b9b8802261623af5322171639e749fe66000800160089054906101000a900463ffffffff166040518263ffffffff1660e060020a028152600401808263ffffffff16815260200191505060206040518083038186803b1580156119d357600080fd5b505af41580156119e7573d6000803e3d6000fd5b505050506040513d60208110156119fd57600080fd5b505160018501805460e060020a6001604060020a03199091166001604060020a039384161760e060020a60ff021916179055600054608060020a900416925061800063ffffffff8e1610611aca57611a678a6001604060020a03168a6001604060020a03166143eb565b84546001604060020a03808d16608060020a02608060020a60c060020a0319909216919091178655909250611aa19084811690841661423b565b600285018054600160a060020a03191690559250611ac563ffffffff8d168361440f565b611b0a565b8354608060020a60c060020a031916608060020a6001604060020a038b1602178455600284018054600160a060020a031916600160a060020a038a161790555b826001604060020a031660058f63ffffffff16815481101515611b2957fe5b60009182526020909120015460a060020a90046001604060020a03161015611b91576040805160e560020a62461bcd0281526020600482015260106024820152608060020a6f6e6f7420656e6f7567682066756e647302604482015290519081900360640190fd5b8a60058d63ffffffff16815481101515611ba757fe5b60009182526020909120018054600160e060020a031660e060020a63ffffffff93841602179055611bda908f1684614299565b600160a060020a03881615801590611bfa57506180008d63ffffffff1610155b15611d45576005805463ffffffff8e16908110611c1357fe5b60009182526020822001546005805460a060020a9092046001604060020a031693509063ffffffff8f16908110611c4657fe5b6000918252602080832091909101805460a060020a60e060020a03191660a060020a6001604060020a0395861602179055600480546040805160e060020a63a9059cbb028152600160a060020a038f81169482019490945295871660248701525191169363a9059cbb9360448083019493928390030190829087803b158015611cce57600080fd5b505af1158015611ce2573d6000803e3d6000fd5b505050506040513d6020811015611cf857600080fd5b50511515611d45576040805160e560020a62461bcd02815260206004820152600f6024820152608a60020a6e1d1c985b9cd9995c8819985a5b195902604482015290519081900360640190fd5b8b63ffffffff168d63ffffffff168f63ffffffff167fa2b0cc03a0e0e2936fc273d9d92fda3c4be892b13b8407c35bdbdf8051d1c7c989604001518f8f604051808463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff168152602001826001604060020a03168152602001935050505060405180910390a45050505050505050505050505050565b6005545b90565b6006805482908110611deb57fe5b60009182526020909120600290910201805460019091015490915063ffffffff80821691602060020a90041683565b6005541190565b60055460009063ffffffff11611e7c576040805160e560020a62461bcd0281526020600482015260156024820152605a60020a741b9bc81b5bdc99481858d8dbdd5b9d1cc81b19599d02604482015290519081900360640190fd5b50600580546040805160608101825233808252600060208084018281528486018381526001880189559790925292517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08601805492519751600160a060020a0319909316600160a060020a039092169190911760a060020a60e060020a03191660a060020a6001604060020a039098169790970296909617600160e060020a031660e060020a63ffffffff928316021790955582519484168552908401528051919260008051602061467e833981519152929081900390910190a190565b61800081565b6006546000908190819081908510611fc2576040805160e560020a62461bcd02815260206004820181905260248201527f7468652062756c6b4964207265666572656e63656420697320696e76616c6964604482015290519081900360640190fd5b6006805486908110611fd057fe5b906000526020600020906002020160010160049054906101000a900463ffffffff1663ffffffff16935060068581548110151561200957fe5b60009182526020909120600160029092020101546006805463ffffffff9092169450908690811061203657fe5b906000526020600020906002020160000154915073d0e9271cad86f87c5a538628c22e13fbbb774c87639484be848861206f89886144d9565b60405160e060020a63ffffffff851602815260248101829052600160a060020a038d1660448201819052606060048301908152845160648401528451919290918291608401906020878101910280838360005b838110156120da5781810151838201526020016120c2565b5050505090500194505050505060206040518083038186803b1580156120ff57600080fd5b505af4158015612113573d6000803e3d6000fd5b505050506040513d602081101561212957600080fd5b5051905083861080159061213e575082840186105b15156121c8576040805160e560020a62461bcd02815260206004820152604260248201527f746865206163636f756e74496420737065636966696564206973206e6f74207060448201527f617274206f6620746861742062756c6b20726567697374726174696f6e20736c606482015260f260020a611bdd02608482015290519081900360a40190fd5b808214612219576040805160e560020a62461bcd0281526020600482015260146024820152606160020a7334b73b30b634b21026b2b935b63290383937b7b302604482015290519081900360640190fd5b60408051878152600160a060020a038a166020820152815160008051602061467e833981519152929181900390910190a18760058781548110151561225a57fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790555050505050505050565b60001981565b600754600090819063ffffffff861610612300576040805160e560020a62461bcd02815260206004820152602f602482015260008051602061463e8339815191526044820152608a60020a6e1d081d1a185d081b1bdb99c81e595d02606482015290519081900360840190fd5b61230f8463ffffffff16611e1a565b1515612364576040805160e560020a62461bcd0281526020600482015260196024820152603a60020a78125b9d985b1a59081d5b9b1bd8dad95c9058d8dbdd5b9d125902604482015290519081900360640190fd5b6007805463ffffffff871690811061237857fe5b60009182526020909120600160059092020101546001604060020a031643106123e2576040805160e560020a62461bcd0281526020600482015260116024820152607a60020a7012185cda081b1bd8dac8195e1c1a5c995902604482015290519081900360640190fd5b8383604051602001808363ffffffff1663ffffffff1660e060020a02815260040182805190602001908083835b6020831061242e5780518252601f19909201916020918201910161240f565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083106124925780518252601f199092019160209182019101612473565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020905060078563ffffffff168154811015156124d657fe5b60009182526020909120600360059092020101548114612531576040805160e560020a62461bcd02815260206004820152600b602482015260a860020a6a496e76616c6964206b657902604482015290519081900360640190fd5b600780546000919063ffffffff881690811061254957fe5b6000918252602090912060036005909202010155600780546125a09163ffffffff8088169290891690811061257a57fe5b6000918252602090912060059091020154606060020a90046001604060020a031661440f565b8463ffffffff167fc1da99648f403f1933d32a1bf6c07daff7e4c64b5285f8c4810df171e6b05ea2846040518080602001828103825283818151815260200191508051906020019080838360005b838110156126065781810151838201526020016125ee565b50505050905090810190601f1680156126335780820380516001836020036101000a031916815260200191505b509250505060405180910390a2506001949350505050565b60008161265781612b43565b15156126b0576040805160e560020a62461bcd028152602060048201526029602482015260008051602061465e833981519152604482015260ba60020a681a5cc81b595d1a1bd902606482015290519081900360840190fd5b60058054849081106126be57fe5b6000918252602090912001546001604060020a0360a060020a90910481169250841682101561272f576040805160e560020a62461bcd0281526020600482015260126024820152607060020a71696e73756666696369656e742066756e647302604482015290519081900360640190fd5b60006001604060020a0385161161278e576040805160e560020a62461bcd0281526020600482015260186024820152604060020a77616d6f756e742073686f756c64206265206e6f6e7a65726f02604482015290519081900360640190fd5b6127988385614299565b600480546040805160e060020a63a9059cbb02815233938101939093526001604060020a038716602484015251600160a060020a039091169163a9059cbb9160448083019260209291908290030181600087803b1580156127f857600080fd5b505af115801561280c573d6000803e3d6000fd5b505050506040513d602081101561282257600080fd5b5051151561286f576040805160e560020a62461bcd02815260206004820152600f6024820152608a60020a6e1d1c985b9cd9995c8819985a5b195902604482015290519081900360640190fd5b50505050565b8263ffffffff1661288581612b43565b15156128de576040805160e560020a62461bcd028152602060048201526029602482015260008051602061465e833981519152604482015260ba60020a681a5cc81b595d1a1bd902606482015290519081900360840190fd5b63ffffffff80851660009081526008602090815260408083209387168352928152828220925160e060020a632d66d661028152600481018481526024820184905260606044830190815287516064840152875173202fe4bf42b8338171b9b8802261623af532217196632d66d66196909590948a949392608490910191850190808383895b8381101561297b578181015183820152602001612963565b50505050905090810190601f1680156129a85780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038186803b1580156129c757600080fd5b505af41580156129db573d6000803e3d6000fd5b505060405163ffffffff8087169350871691507fd7515a6b2c1e8e3f982e96f1b4c105f0f4607f9c6c64648f706221397b60a55090600090a350505050565b8163ffffffff16612a2a81611e1a565b1515612a6e576040805160e560020a62461bcd028152602060048201526016602482015260008051602061461e833981519152604482015290519081900360640190fd5b63ffffffff80841660009081526008602090815260408083209386168352929052818120825160e160020a63405ef27b02815260048101919091526024810182905260056044820152915173202fe4bf42b8338171b9b8802261623af5322171926380bde4f6926064808301939192829003018186803b158015612af157600080fd5b505af4158015612b05573d6000803e3d6000fd5b505060405163ffffffff8086169350861691507fed5d5a09a0c360ae8f4d4743e83680240a51985240cc41649dc27ec426eb73a290600090a3505050565b6000612b4e82611e1a565b8015612b7b57506005805483908110612b6357fe5b600091825260209091200154600160a060020a031633145b92915050565b600554600090821080612b95575060001982145b1515612be2576040805160e560020a62461bcd0281526020600482015260116024820152607a60020a701a5b9d985b1a59081858d8dbdd5b9d125902604482015290519081900360640190fd5b60006001604060020a03841611612c42576040805160e560020a62461bcd0281526020600482015260196024820152603860020a78616d6f756e742073686f756c6420626520706f73697469766502604482015290519081900360640190fd5b600019821415612ca257612c54611e21565b63ffffffff16905082600582815481101515612c6c57fe5b9060005260206000200160000160146101000a8154816001604060020a0302191690836001604060020a03160217905550612cac565b612cac828461440f565b600480546040805160e060020a6323b872dd02815233938101939093523060248401526001604060020a038616604484015251600160a060020a03909116916323b872dd9160648083019260209291908290030181600087803b158015612d1257600080fd5b505af1158015612d26573d6000803e3d6000fd5b505050506040513d6020811015612d3c57600080fd5b50511515612d89576040805160e560020a62461bcd02815260206004820152600f6024820152608a60020a6e1d1c985b9cd9995c8819985a5b195902604482015290519081900360640190fd5b505050565b8263ffffffff16612d9e81612b43565b1515612df7576040805160e560020a62461bcd028152602060048201526029602482015260008051602061465e833981519152604482015260ba60020a681a5cc81b595d1a1bd902606482015290519081900360840190fd5b63ffffffff80851660009081526008602090815260408083209387168352928152828220925160e460020a63024c7f2f0281526004810184815260076024830181905260606044840190815288516064850152885173202fe4bf42b8338171b9b8802261623af5322171976324c7f2f097909693958b9594608490910192908601918190849084905b83811015612e98578181015183820152602001612e80565b50505050905090810190601f168015612ec55780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038186803b158015612ee457600080fd5b505af4158015612ef8573d6000803e3d6000fd5b505060405163ffffffff8087169350871691507f51be4ad99306a29aaff226c9916d87e4c09a270644cf52e226f801625372960290600090a350505050565b6008602090815260009283526040808420909152908252902080546001820154600283015460039093015463ffffffff80841694602060020a8504821694604060020a8082046001604060020a0390811696608060020a80850483169760c060020a90950487169683831696948304811695606060020a84048216959284049091169360a060020a8404169260e060020a900460ff1691600160a060020a0316908d565b63ffffffff81565b6007805482908110612ff157fe5b60009182526020909120600590910201805460018201546002830154600384015460049094015463ffffffff80851696506001604060020a03602060020a8604811696606060020a870482169660a060020a810484169660c060020a820485169660e060020a9092049094169493909216928a565b600354600160a060020a031681565b8163ffffffff1661308581612b43565b15156130de576040805160e560020a62461bcd028152602060048201526029602482015260008051602061465e833981519152604482015260ba60020a681a5cc81b595d1a1bd902606482015290519081900360840190fd5b63ffffffff80841660009081526008602090815260408083209386168352929052818120825160e060020a63377dac0302815260048101919091526024810182905260056044820152915173202fe4bf42b8338171b9b8802261623af53221719263377dac03926064808301939192829003018186803b15801561316157600080fd5b505af4158015613175573d6000803e3d6000fd5b505060405163ffffffff8086169350861691507f764cffa99ad24d0b737f04ad6e947e0c5237da11528bbc95a60d5f753168bce590600090a3505050565b8263ffffffff166131c381611e1a565b1515613207576040805160e560020a62461bcd028152602060048201526016602482015260008051602061461e833981519152604482015290519081900360640190fd5b8163ffffffff1661321781612b43565b1515613270576040805160e560020a62461bcd028152602060048201526029602482015260008051602061465e833981519152604482015260ba60020a681a5cc81b595d1a1bd902606482015290519081900360840190fd5b63ffffffff80861660009081526008602090815260408083208885168452909152808220815160e360020a6318cde0750281526004810191909152602481018390526005604482015292861660648401525173202fe4bf42b8338171b9b8802261623af53221719263c66f03a8926084808301939192829003018186803b1580156132fa57600080fd5b505af415801561330e573d6000803e3d6000fd5b505050508363ffffffff168563ffffffff167f7ead680ada8d9e1356fc4bcb157550954c7cdc74cf4298d66426ae9f785d68ed85604051808263ffffffff16815260200191505060405180910390a35050505050565b60008161337081611e1a565b15156133b4576040805160e560020a62461bcd028152602060048201526016602482015260008051602061461e833981519152604482015290519081900360640190fd5b60058054849081106133c257fe5b60009182526020909120015460a060020a90046001604060020a03169392505050565b60075490565b60065490565b6133f9614574565b5063ffffffff80831660009081526008602090815260408083208585168452825280832081516101a08101835281548087168252602060020a81048716948201949094526001604060020a03604060020a808604821694830194909452608060020a8086048216606084015260c060020a90950487166080830152600183015480821660a0840152938404871660c0830152606060020a8404871660e083015293830490951661010086015260a060020a820490921661012085015260ff60e060020a9091041661014084018190526002820154600160a060020a031661016085015260039091015461018084015215156134f35761286f565b81610140015160ff16600114151561354d576040805160e560020a62461bcd0281526020600482015260126024820152607060020a71736c6f74206e6f7420617661696c61626c6502604482015290519081900360640190fd5b60a08201516001604060020a03164310156135aa576040805160e560020a62461bcd0281526020600482015260126024820152607060020a71736c6f74206e6f7420617661696c61626c6502604482015290519081900360640190fd5b63ffffffff80851660008181526008602090815260408083209488168352939052918220600101805460e060020a60ff02191690556060840151915461360d92613608916001604060020a0391821691608060020a9091041661423b565b61440f565b61363182604001516001604060020a031683606001516001604060020a03166143eb565b610160830151909150600160a060020a0316156137c45761368f816001604060020a03166005846080015163ffffffff1681548110151561366e57fe5b60009182526020909120015460a060020a90046001604060020a031661423b565b905060006005836080015163ffffffff168154811015156136ac57fe5b6000918252602090912001805460a060020a60e060020a03191660a060020a6001604060020a03938416021790558116156137bf57600480546101608401516040805160e060020a63a9059cbb028152600160a060020a03928316948101949094526001604060020a03851660248501525191169163a9059cbb9160448083019260209291908290030181600087803b15801561374857600080fd5b505af115801561375c573d6000803e3d6000fd5b505050506040513d602081101561377257600080fd5b505115156137bf576040805160e560020a62461bcd02815260206004820152600f6024820152608a60020a6e1d1c985b9cd9995c8819985a5b195902604482015290519081900360640190fd5b61286f565b61286f826080015163ffffffff168261440f565b60005460015460025463ffffffff80841693602060020a808204831694604060020a808404851695606060020a8086048716966001604060020a03608060020a80890482169860c060020a9004821697878416979081048416968082048516969582048516959282049094169360a060020a9091048316928281169291909104168e565b6000613866614500565b60075460009063ffffffff8516106138d1576040805160e560020a62461bcd02815260206004820152602f602482015260008051602061463e8339815191526044820152608a60020a6e1d081d1a185d081b1bdb99c81e595d02606482015290519081900360840190fd5b6007805463ffffffff86169081106138e557fe5b6000918252602090912060036005909202010154151561394f576040805160e560020a62461bcd02815260206004820152601b60248201527f7061796d656e7420697320616c726561647920756e6c6f636b65640000000000604482015290519081900360640190fd5b6007805463ffffffff861690811061396357fe5b60009182526020909120600160059092020101546001604060020a03164310156139d7576040805160e560020a62461bcd02815260206004820152601d60248201527f48617368206c6f636b20686173206e6f74206578706972656420796574000000604482015290519081900360640190fd5b6007805463ffffffff86169081106139eb57fe5b6000918252602080832060408051610140810182526005909402909101805463ffffffff80821686526001604060020a03602060020a8304811695870195909552606060020a820485169386019390935260a060020a81048316606086015260c060020a81048316608086015260e060020a900490911660a08401819052600182015490921660c0840152600281015460e084015260038101546101008401526004015461012083015290935011613aeb576040805160e560020a62461bcd0281526020600482015260186024820152604260020a771c185e5b595b9d08185b1c9958591e481c99599d5b99195902604482015290519081900360640190fd5b613b2b613b0f8360a0015163ffffffff1684602001516001604060020a031661425b565b6001604060020a031683604001516001604060020a031661423b565b600060a0840181905260408401819052602084015260078054919250839163ffffffff8716908110613b5957fe5b600091825260209182902083516005929092020180549284015160408501516060860151608087015160a088015163ffffffff1990971663ffffffff96871617602060020a606060020a031916602060020a6001604060020a039586160217606060020a60a060020a031916606060020a938516939093029290921760a060020a63ffffffff02191660a060020a918616919091021760c060020a63ffffffff02191660c060020a9185169190910217600160e060020a031660e060020a9484169490940293909317815560c08401516001820180546001604060020a031916919094161790925560e083015160028301556101008301516003830155610120909201516004909101558251613c7091168261440f565b81516040805163ffffffff90921682526001604060020a038316602083015280517f5237d1300784adfc279ef3a96834ad6ca9e7b7ac63239501fc5bacafa7afe1559281900390910190a15060019392505050565b60008211613d1a576040805160e560020a62461bcd0281526020600482015260176024820152604860020a7642756c6b2073697a652063616e2774206265207a65726f02604482015290519081900360640190fd5b60005463ffffffff168210613d96576040805160e560020a62461bcd02815260206004820152603160248201527f43616e6e6f742072656769737465722074686973206e756d626572206f6620696044820152607860020a7064732073696d756c74616e656f75736c7902606482015290519081900360840190fd5b60055463ffffffff90613da990846144ee565b1115613dff576040805160e560020a62461bcd02815260206004820152601f60248201527f43616e6e6f742072656769737465723a2072616e206f7574206f662069647300604482015290519081900360640190fd5b60008111613e54576040805160e560020a62461bcd0281526020600482015260176024820152604860020a76526f6f7420686173682063616e2774206265207a65726f02604482015290519081900360640190fd5b60055460065460408051858152602081019390935282810191909152517f9862cc43f4a88dac2960cf68db647bbdd971785677f61f57da13545b1172805a9181900360600190a16040805160608101825282815263ffffffff848116602083019081526005805483169484019485526006805460018101825560009190915293517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f60029095029485015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d409093018054945163ffffffff199095169383169390931767ffffffff000000001916602060020a949092169390930217905554613f5f90836144ee565b612d896005826145e0565b6005805482908110613f7857fe5b600091825260209091200154600160a060020a038116915060a060020a81046001604060020a03169060e060020a900463ffffffff1683565b600454600160a060020a031681565b8363ffffffff16613fd081611e1a565b1515614014576040805160e560020a62461bcd028152602060048201526016602482015260008051602061461e833981519152604482015290519081900360640190fd5b63ffffffff8086166000908152600860209081526040808320888516845290915290206001015461404d91606060020a90910416612b43565b15156140b2576040805160e560020a62461bcd028152602060048201526024808201527f6f6e6c79206368616c6c656e6765722063616e2063616c6c206368616c6c656e604482015260e160020a6333b2af9902606482015290519081900360840190fd5b63ffffffff808616600090815260086020908152604080832088851684528252808320905160e260020a63054c32490281526004810182815260248201859052948716606482015260806044820190815288516084830152885173202fe4bf42b8338171b9b8802261623af532217196631530c9249694958b948b94929360a4909101918601908083838a5b8381101561415657818101518382015260200161413e565b50505050905090810190601f1680156141835780820380516001836020036101000a031916815260200191505b509550505050505060006040518083038186803b1580156141a357600080fd5b505af41580156141b7573d6000803e3d6000fd5b505050508363ffffffff168563ffffffff167fdd04d7f039f1aa4cbadd486eb11d0ea9077188ed866b0f1607956feebd3b36a984604051808263ffffffff16815260200191505060405180910390a35050505050565b60008282018381108015906142255750602060020a81105b151561423057600080fd5b8091505b5092915050565b60008282018381108015906142255750604060020a811061423057600080fd5b60008083151561426e5760009150614234565b5082820282848281151561427e57fe5b041461428957600080fd5b604060020a811061423057600080fd5b6000826142a581611e1a565b15156142e9576040805160e560020a62461bcd028152602060048201526016602482015260008051602061461e833981519152604482015290519081900360640190fd5b60058054859081106142f757fe5b6000918252602090912001546001604060020a0360a060020a909104811692508316821015614366576040805160e560020a62461bcd0281526020600482015260106024820152608060020a6f6e6f7420656e6f7567682066756e647302604482015290519081900360640190fd5b614382826001604060020a0316846001604060020a03166143eb565b600580548690811061439057fe5b9060005260206000200160000160146101000a8154816001604060020a0302191690836001604060020a0316021790555050505050565b600080838311156143d757600080fd5b50818303602060020a811061423057600080fd5b600080838311156143fb57600080fd5b50818303604060020a811061423057600080fd5b8161441981611e1a565b151561445d576040805160e560020a62461bcd028152602060048201526016602482015260008051602061461e833981519152604482015290519081900360640190fd5b61449560058481548110151561446f57fe5b6000918252602090912001546001604060020a0360a060020a909104811690841661423b565b60058054859081106144a357fe5b9060005260206000200160000160146101000a8154816001604060020a0302191690836001604060020a03160217905550505050565b6000828211156144e857600080fd5b50900390565b60008282018381101561423057600080fd5b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b604080516060810182526000808252602082018190529181019190915290565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081019190915290565b815481835581811115612d8957600083815260209020612d89918101908301611dda91905b808211156146195760008155600101614605565b509056006163636f756e744964206973206e6f742076616c696400000000000000000000696e76616c696420706179496e6465782c207061796d656e7473206973206e6f4f6e6c79206163636f756e74206f776e65722063616e20696e766f6b65207468de338ca976df8cb181c40c0c8d8ed2a5634cc3893a9b41c2b9b550649531889ca165627a7a72305820c8b41a20e302e1e133ee787e77412c6511b2240ab8ef30200bb7751a524443b60029000000000000000000000000281d477239f0ac790270bda6800bc912d1a3532a000000000000000000000000000000000000000000000000000000000000c351000000000000000000000000000000000000000000000000000000000000c3510000000000000000000000000000000000000000000000000000000000001a5e0000000000000000000000000000000000000000000000000000000000006978000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000000000000000000000000000000000048c27395000000000000000000000000000000000000000000000000000000000000000011800000000000000000000000000000000000000000000000000002d79883d2000",
  "constructorArguments": "000000000000000000000000281d477239f0ac790270bda6800bc912d1a3532a000000000000000000000000000000000000000000000000000000000000c351000000000000000000000000000000000000000000000000000000000000c3510000000000000000000000000000000000000000000000000000000000001a5e0000000000000000000000000000000000000000000000000000000000006978000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000000000000000000000000000000000048c27395000000000000000000000000000000000000000000000000000000000000000011800000000000000000000000000000000000000000000000000002d79883d2000",
  "libraries": [
    {
      "name": "Merkle",
      "address": "0xd0e9271cad86f87c5a538628c22e13fbbb774c87"
    },
    {
      "name": "Challenge",
      "address": "0x202fe4bf42b8338171b9b8802261623af5322171"
    }
  ]
}