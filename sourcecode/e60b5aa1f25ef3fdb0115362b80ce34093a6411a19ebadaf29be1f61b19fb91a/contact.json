{
  "address": "0x6d4106c5c6cddeb5e0bbda23c4555a45dfaa92d7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CucuSale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-13\n*/\n\npragma solidity ^0.4.18;\n\ninterface token {\n    function transfer(address receiver, uint amount) external returns (bool);\n    function balanceOf(address tokenOwner) external returns (uint);\n}\n\ncontract CucuSale {\n    address public beneficiary;\n    uint public amountRaised;\n    uint public price;\n    uint public dynamicLocktime; // tokens are locked for this number of minutes since purchase\n    uint public globalLocktime;\n    /*\n    * 0 - locktime depends on time of token purchase\n    * 1 - same locktime for all investers\n    * 2 - no locktimes\n    */\n    uint public lockType = 0;\n    token public tokenReward;\n    uint public exchangeRate;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => uint256) public tokenBalanceOf;\n    mapping(address => uint256) public timelocksOf;\n\n    address[] public founders;\n    address public owner;\n\n    event FundTransfer(address backer, uint amount, uint exchangeRate, uint token, uint time, uint timelock, bool isContribution);\n    event IsCharged(bool isCharged);\n    event TokensClaimed(address founder, uint tokens);\n    event TransferOwnership();\n    event ChangeExchangeRate(uint oldExchangeRate, uint newExchangeRate);\n    event NewGlobalLocktime(uint timelockUntil);\n    event NewDynamicLocktime(uint timelockUntil);\n    uint public tokenAvailable = 0;\n    bool public charged = false;\n    uint lastActionId = 0;\n\n\n    /**\n     * Constructor function\n     *\n     * Setup the owner\n     */\n    constructor(\n        address _beneficiary,\n        address _addressOfTokenUsedAsReward,\n        uint _globalLocktime,\n        uint _dynamicLocktime,\n        uint _exchangeRate\n    ) public {\n        beneficiary = _beneficiary;\n        dynamicLocktime = _dynamicLocktime;//now + dynamicTimeLockInMinutes * 1 minutes;\n        tokenReward = token(_addressOfTokenUsedAsReward);\n        globalLocktime = now + _globalLocktime * 1 minutes;\n        exchangeRate = _exchangeRate;\n        owner = msg.sender;\n    }\n\n    /**\n     * Fallback function\n     *\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\n     */\n    function () payable public {\n          require(charged);\n          require(msg.value >= 10000000000); // min allowed pay since token has only 8 decimals\n          uint am = (msg.value* exchangeRate * 100000000)/(1 ether); // 8 decimals for cocon token\n          require( tokenAvailable >= am);\n          uint amount = msg.value;\n          balanceOf[msg.sender] += amount;\n          amountRaised += amount;\n          tokenBalanceOf[msg.sender] += am;\n          tokenAvailable -= am;\n\n          if(timelocksOf[msg.sender] == 0){\n            timelocksOf[msg.sender] = now + dynamicLocktime * 1 minutes;\n          }\n\n          emit FundTransfer(msg.sender, amount, exchangeRate, am, now, timelocksOf[msg.sender], true);\n          founders.push(msg.sender);\n    }\n\n    // modifier onlyOwner\n    modifier onlyOwner(){\n      require(msg.sender == owner || msg.sender == beneficiary);\n      _;\n    }\n\n    // function to charge the crowdsale\n    function doChargeCrowdsale(uint act) public onlyOwner{\n      lastActionId = act;\n      tokenAvailable = tokenReward.balanceOf(address(this));\n      if(tokenAvailable > 0){\n        charged = true;\n        emit IsCharged(charged);\n      }\n    }\n\n    /*\n      Function that allows to claim tokens after timelock has expired\n    */\n    function claimTokens(address adr) public{\n      require(tokenBalanceOf[adr] > 0);\n\n      if(lockType == 0){ // lock by address\n        require(now >= timelocksOf[adr]);\n      }else if(lockType == 1){ // global lock\n        require(now >= globalLocktime);\n      } // else there is no lock\n\n      if(tokenReward.transfer(adr, tokenBalanceOf[adr])){\n        emit TokensClaimed(adr, tokenBalanceOf[adr]);\n        tokenBalanceOf[adr] = 0;\n        balanceOf[adr] = 0;\n      }\n    }\n\n    //  Allows owner to transfer raised amount\n    function transferRaisedFunds(uint act) public onlyOwner {\n        lastActionId = act;\n        if (beneficiary.send(amountRaised)) {\n           emit FundTransfer(beneficiary, amountRaised, exchangeRate, 0, now, 0, false);\n        }\n    }\n\n    // to transfer ownership of the contract\n    function transferOwnership(address newOwner) public onlyOwner{\n      owner = newOwner;\n      emit TransferOwnership();\n    }\n\n    // changing exchangeRate\n    function setExchangeRate(uint newExchangeRate) public onlyOwner{\n      emit ChangeExchangeRate(exchangeRate, newExchangeRate);\n      exchangeRate = newExchangeRate;\n    }\n\n    // set new globalLocktime\n    function setGlobalLocktime(uint mins) public onlyOwner{\n      globalLocktime = now + mins * 1 minutes;\n      emit NewGlobalLocktime(globalLocktime);\n    }\n\n    // set new dynamicLocktime\n    function setDynamicLocktime(uint mins) public onlyOwner{\n      dynamicLocktime = now + mins * 1 minutes;\n      emit NewDynamicLocktime(dynamicLocktime);\n    }\n\n    // setting new locktype\n    function setLockType(uint newType) public onlyOwner{\n        require(newType == 0 || newType == 1 || newType == 2);\n        lockType = newType;\n    }\n\n    // unlock tokens for address makes tokens unlockable even for the future token purchases\n    function unlockTokensFor(address adr) public onlyOwner{\n      timelocksOf[adr] = 1;\n    }\n\n    // reset lock for address makes tokens lockable for address again\n    function resetLockFor(address adr) public onlyOwner{\n      timelocksOf[adr] = 0;\n    }\n\n    // get all tokens that were left from token sale\n    function getLeftOver(uint act) public onlyOwner{\n      lastActionId = act;\n      if(tokenReward.transfer(beneficiary, tokenAvailable)){\n        emit TokensClaimed(beneficiary, tokenAvailable);\n        tokenAvailable = 0;\n      }\n    }\n}",
  "bytecode": "608060405260006005819055600d819055600e805460ff19169055600f5534801561002957600080fd5b5060405160a080610eb58339810160409081528151602083015191830151606084015160809094015160008054600160a060020a03948516600160a060020a03199182161790915560039590955560068054939094169285169290921790925542603c90920291909101600455600755600c805490911633179055610e02806100b36000396000f3006080604052600436106101535763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630f1a431681146102d5578063303b52c8146102fc57806338af3eed146103165780633ba0b9a9146103475780635ebdd1591461035c5780636b1557be146103715780636e66f6e91461038957806370a082311461039e578063765d4897146103bf5780637b3e5e7b146103d45780638da5cb5b146103e95780638e69911f146103fe57806393c08b9614610416578063a035b1fe1461042b578063ac4ced0e14610440578063cf3bd87b14610461578063d8e75f621461048a578063db068e0e146104a2578063dc8c44d0146104ba578063dcd99159146104d2578063df8de3e7146104ea578063e42c08f21461050b578063f2fde38b1461052c578063f6dc20241461054d578063fbb789fa14610565578063fc7a60bb14610586575b600e54600090819060ff16151561016957600080fd5b6402540be40034101561017b57600080fd5b670de0b6b3a764000060075434026305f5e1000281151561019857fe5b04915081600d54101515156101ac57600080fd5b50336000908152600860209081526040808320805434908101909155600180548201905560098352818420805486019055600d80548690039055600a90925290912054151561021157600354336000908152600a60205260409020603c909102420190555b600754336000818152600a6020908152604091829020548251938452908301859052828201939093526060820185905242608083015260a0820192909252600160c082015290517f4c26125b41cd5484e373d26a702816e78e8f75ae1bb9d83a0ee16a78a8e8e0e99181900360e00190a15050600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805473ffffffffffffffffffffffffffffffffffffffff191633179055005b3480156102e157600080fd5b506102ea6105a7565b60408051918252519081900360200190f35b34801561030857600080fd5b506103146004356105ad565b005b34801561032257600080fd5b5061032b61061b565b60408051600160a060020a039092168252519081900360200190f35b34801561035357600080fd5b506102ea61062a565b34801561036857600080fd5b506102ea610630565b34801561037d57600080fd5b50610314600435610636565b34801561039557600080fd5b5061032b610767565b3480156103aa57600080fd5b506102ea600160a060020a0360043516610776565b3480156103cb57600080fd5b506102ea610788565b3480156103e057600080fd5b506102ea61078e565b3480156103f557600080fd5b5061032b610794565b34801561040a57600080fd5b506103146004356107a3565b34801561042257600080fd5b506102ea6108c0565b34801561043757600080fd5b506102ea6108c6565b34801561044c57600080fd5b50610314600160a060020a03600435166108cc565b34801561046d57600080fd5b50610476610914565b604080519115158252519081900360200190f35b34801561049657600080fd5b5061032b60043561091d565b3480156104ae57600080fd5b50610314600435610945565b3480156104c657600080fd5b506103146004356109b5565b3480156104de57600080fd5b50610314600435610a0b565b3480156104f657600080fd5b50610314600160a060020a0360043516610adf565b34801561051757600080fd5b506102ea600160a060020a0360043516610c77565b34801561053857600080fd5b50610314600160a060020a0360043516610c89565b34801561055957600080fd5b50610314600435610d0b565b34801561057157600080fd5b50610314600160a060020a0360043516610d79565b34801561059257600080fd5b506102ea600160a060020a0360043516610dc4565b60035481565b600c54600160a060020a03163314806105d05750600054600160a060020a031633145b15156105db57600080fd5b42603c820201600481905560408051918252517f57f8f7c54e908b3f230e4302fce4a19096f7c9f6ff30f6871e40f514371199a49181900360200190a150565b600054600160a060020a031681565b60075481565b600d5481565b600c54600160a060020a03163314806106595750600054600160a060020a031633145b151561066457600080fd5b600f81905560065460008054600d54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039384166004820152602481019290925251919093169263a9059cbb9260448083019360209390929083900390910190829087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b505050506040513d602081101561070c57600080fd5b50511561076457600054600d5460408051600160a060020a039093168352602083019190915280517f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4309281900390910190a16000600d555b50565b600654600160a060020a031681565b60086020526000908152604090205481565b60055481565b60015481565b600c54600160a060020a031681565b600c54600160a060020a03163314806107c65750600054600160a060020a031633145b15156107d157600080fd5b600f819055600654604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561083c57600080fd5b505af1158015610850573d6000803e3d6000fd5b505050506040513d602081101561086657600080fd5b5051600d8190556000101561076457600e805460ff1916600117908190556040805160ff9290921615158252517f983bc0cfa798c8bebdb8f3827031ff57f173d68da4449941840ba305306c5c1d9181900360200190a150565b60045481565b60025481565b600c54600160a060020a03163314806108ef5750600054600160a060020a031633145b15156108fa57600080fd5b600160a060020a03166000908152600a6020526040812055565b600e5460ff1681565b600b80548290811061092b57fe5b600091825260209091200154600160a060020a0316905081565b600c54600160a060020a03163314806109685750600054600160a060020a031633145b151561097357600080fd5b600754604080519182526020820183905280517f8127cc1e4f66277641a2c7c1a457e5f3625f5f6bdc873c21b78494973f4018ec9281900390910190a1600755565b600c54600160a060020a03163314806109d85750600054600160a060020a031633145b15156109e357600080fd5b8015806109f05750806001145b806109fb5750806002145b1515610a0657600080fd5b600555565b600c54600160a060020a0316331480610a2e5750600054600160a060020a031633145b1515610a3957600080fd5b600f81905560008054600154604051600160a060020a039092169281156108fc029290818181858888f1935050505015610764576000805460015460075460408051600160a060020a0390941684526020840192909252828201526060820183905242608083015260a0820183905260c082019290925290517f4c26125b41cd5484e373d26a702816e78e8f75ae1bb9d83a0ee16a78a8e8e0e99181900360e00190a150565b600160a060020a03811660009081526009602052604081205411610b0257600080fd5b6005541515610b3557600160a060020a0381166000908152600a6020526040902054421015610b3057600080fd5b610b4f565b60055460011415610b4f57600454421015610b4f57600080fd5b600654600160a060020a0382811660008181526009602090815260408083205481517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810195909552602485015251939094169363a9059cbb93604480850194929391928390030190829087803b158015610bcd57600080fd5b505af1158015610be1573d6000803e3d6000fd5b505050506040513d6020811015610bf757600080fd5b50511561076457600160a060020a0381166000818152600960209081526040918290205482519384529083015280517f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e4309281900390910190a1600160a060020a031660009081526009602090815260408083208390556008909152812055565b60096020526000908152604090205481565b600c54600160a060020a0316331480610cac5750600054600160a060020a031633145b1515610cb757600080fd5b600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790556040517f47ebf46624611c52aa026572cea28d0fe944ec8e12a6aaaf9a34159718ff071090600090a150565b600c54600160a060020a0316331480610d2e5750600054600160a060020a031633145b1515610d3957600080fd5b42603c820201600381905560408051918252517fe5ddd5b0c0a0b1c781be1c114fda5f2bda09b0e7a562839b8ec631278999b78a9181900360200190a150565b600c54600160a060020a0316331480610d9c5750600054600160a060020a031633145b1515610da757600080fd5b600160a060020a03166000908152600a6020526040902060019055565b600a60205260009081526040902054815600a165627a7a723058209002dc7e1f283e8df52dbea396fe913eaea138a2716a400220019ed05adf4b3f00290000000000000000000000008b3cbd7824d75debfcfe1b16db73e80603b3079e000000000000000000000000aa767692c3382b18ab151d74fa16a532ab068edd00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000018a88",
  "constructorArguments": "0000000000000000000000008b3cbd7824d75debfcfe1b16db73e80603b3079e000000000000000000000000aa767692c3382b18ab151d74fa16a532ab068edd00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000018a88"
}