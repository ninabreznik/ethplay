{
  "address": "0x3e99fc28e984d5e9ac1c5299614c9ae358388659",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RentChain",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-19\n*/\n\npragma solidity ^0.4.24;\n\ncontract SafeMath {\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        _assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        _assert(b > 0);\n        uint256 c = a / b;\n        _assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        _assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        _assert(c >= a && c >= b);\n        return c;\n    }\n\n    function _assert(bool assertion) internal pure {\n        if (!assertion) {\n            revert();\n        }\n    }\n}\n\ncontract RentChain is SafeMath {\n    string public name = \"Rent Chain\";\n    string public symbol = \"RENT\";\n    uint8 constant public decimals = 2;\n    mapping(address => uint256)  _balances;\n    mapping(address => mapping(address => uint256)) public _allowed;\n\n    uint256  public totalSupply = 188 * 100000000 * 100;\n\n\n    constructor () public{\n        _balances[msg.sender] = totalSupply;\n        emit Transfer(0x0, msg.sender, totalSupply);\n    }\n\n    function balanceOf(address addr) public view returns (uint256) {\n        return _balances[addr];\n    }\n\n\n    function transfer(address _to, uint256 _value)  public returns (bool) {\n//        require(_to != address(0));\n        if (_to == address(0)) {\n            return burn(_value);\n        } else {\n            require(_balances[msg.sender] >= _value && _value > 0);\n            require(_balances[_to] + _value >= _balances[_to]);\n\n            _balances[msg.sender] = safeSub(_balances[msg.sender], _value);\n            _balances[_to] = safeAdd(_balances[_to], _value);\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        }\n    }\n\n    function burn(uint256 _value) public returns (bool) {\n        require(_balances[msg.sender] >= _value && _value > 0);\n        require(totalSupply >= _value);\n        _balances[msg.sender] = safeSub(_balances[msg.sender], _value);\n        totalSupply = safeSub(totalSupply, _value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool) {\n        require(_to != address(0));\n        require(_balances[_from] >= _value && _value > 0);\n        require(_balances[_to] + _value >= _balances[_to]);\n\n        require(_allowed[_from][msg.sender] >= _value);\n\n        _balances[_to] = safeAdd(_balances[_to], _value);\n        _balances[_from] = safeSub(_balances[_from], _value);\n        _allowed[_from][msg.sender] = safeSub(_allowed[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value)  public returns (bool) {\n        require(spender != address(0));\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function allowance(address _master, address _spender) public view returns (uint256) {\n        return _allowed[_master][_spender];\n    }\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Transfer(address indexed _from, address indexed _to, uint256 value);\n    event Burn(address indexed _from, uint256 value);\n}",
  "bytecode": "60806040526040805190810160405280600a81526020017f52656e7420436861696e00000000000000000000000000000000000000000000815250600090805190602001906200005192919062000156565b506040805190810160405280600481526020017f52454e5400000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000156565b506501b5b8bb7000600455348015620000b757600080fd5b50600454600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040518082815260200191505060405180910390a362000205565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200019957805160ff1916838001178555620001ca565b82800160010185558215620001ca579182015b82811115620001c9578251825591602001919060010190620001ac565b5b509050620001d99190620001dd565b5090565b6200020291905b80821115620001fe576000816000905550600101620001e4565b5090565b90565b61114880620002156000396000f3006080604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100b4578063095ea7b31461014457806318160ddd146101a957806323b872dd146101d4578063313ce5671461025957806342966c681461028a57806370a08231146102cf57806395d89b4114610326578063a9059cbb146103b6578063ba0fb8611461041b578063dd62ed3e14610492575b600080fd5b3480156100c057600080fd5b506100c9610509565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101095780820151818401526020810190506100ee565b50505050905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015057600080fd5b5061018f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a7565b604051808215151515815260200191505060405180910390f35b3480156101b557600080fd5b506101be6106d4565b6040518082815260200191505060405180910390f35b3480156101e057600080fd5b5061023f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106da565b604051808215151515815260200191505060405180910390f35b34801561026557600080fd5b5061026e610b19565b604051808260ff1660ff16815260200191505060405180910390f35b34801561029657600080fd5b506102b560048036038101908080359060200190929190505050610b1e565b604051808215151515815260200191505060405180910390f35b3480156102db57600080fd5b50610310600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c80565b6040518082815260200191505060405180910390f35b34801561033257600080fd5b5061033b610cc9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561037b578082015181840152602081019050610360565b50505050905090810190601f1680156103a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103c257600080fd5b50610401600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d67565b604051808215151515815260200191505060405180910390f35b34801561042757600080fd5b5061047c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061101e565b6040518082815260200191505060405180910390f35b34801561049e57600080fd5b506104f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611043565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561059f5780601f106105745761010080835404028352916020019161059f565b820191906000526020600020905b81548152906001019060200180831161058257829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156105e457600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60045481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561071757600080fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156107665750600082115b151561077157600080fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011015151561080057600080fd5b81600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561088b57600080fd5b6108d4600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110ca565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610960600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110f4565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a29600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110f4565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600281565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610b6f5750600082115b1515610b7a57600080fd5b8160045410151515610b8b57600080fd5b610bd4600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110f4565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c23600454836110f4565b6004819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a260019050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d5f5780601f10610d3457610100808354040283529160200191610d5f565b820191906000526020600020905b815481529060010190602001808311610d4257829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610dad57610da682610b1e565b9050611018565b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610dfc5750600082115b1515610e0757600080fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110151515610e9657600080fd5b610edf600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110f4565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f6b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836110ca565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b92915050565b6003602052816000526040600020602052806000526040600020600091509150505481565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008082840190506110ea8482101580156110e55750838210155b61110d565b8091505092915050565b60006111028383111561110d565b818303905092915050565b80151561111957600080fd5b505600a165627a7a7230582011cf70a9bfe0530bb10f3c21ffe6258b6f034d5367c97a70253a7731f10fb69b0029"
}