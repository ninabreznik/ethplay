{
  "address": "0xff043a999a697fb1efdb0c18fd500eb7eab4e846",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SelfServiceEditionCurationV2",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-25\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/v2/tools/SelfServiceAccessControls.sol\n\ncontract SelfServiceAccessControls is Ownable {\n\n  // Simple map to only allow certain artist create editions at first\n  mapping(address => bool) public allowedArtists;\n\n  // When true any existing KO artist can mint their own editions\n  bool public openToAllArtist = false;\n\n  /**\n   * @dev Controls is the contract is open to all\n   * @dev Only callable from owner\n   */\n  function setOpenToAllArtist(bool _openToAllArtist) onlyOwner public {\n    openToAllArtist = _openToAllArtist;\n  }\n\n  /**\n   * @dev Controls who can call this contract\n   * @dev Only callable from owner\n   */\n  function setAllowedArtist(address _artist, bool _allowed) onlyOwner public {\n    allowedArtists[_artist] = _allowed;\n  }\n\n  /**\n   * @dev Checks to see if the account can create editions\n   */\n  function isEnabledForAccount(address account) public view returns (bool) {\n    if (openToAllArtist) {\n      return true;\n    }\n    return allowedArtists[account];\n  }\n\n  /**\n   * @dev Allows for the ability to extract stuck ether\n   * @dev Only callable from owner\n   */\n  function withdrawStuckEther(address _withdrawalAccount) onlyOwner public {\n    require(_withdrawalAccount != address(0), \"Invalid address provided\");\n    _withdrawalAccount.transfer(address(this).balance);\n  }\n}\n\n// File: contracts/v2/tools/SelfServiceEditionCurationV2.sol\n\npragma solidity 0.4.24;\n\n\n\n\n\ninterface IKODAV2SelfServiceEditionCuration {\n\n  function createActiveEdition(\n    uint256 _editionNumber,\n    bytes32 _editionData,\n    uint256 _editionType,\n    uint256 _startDate,\n    uint256 _endDate,\n    address _artistAccount,\n    uint256 _artistCommission,\n    uint256 _priceInWei,\n    string _tokenUri,\n    uint256 _totalAvailable\n  ) external returns (bool);\n\n  function artistsEditions(address _artistsAccount) external returns (uint256[1] _editionNumbers);\n\n  function totalAvailableEdition(uint256 _editionNumber) external returns (uint256);\n\n  function highestEditionNumber() external returns (uint256);\n}\n\ninterface IKODAAuction {\n  function setArtistsControlAddressAndEnabledEdition(uint256 _editionNumber, address _address) external;\n}\n\ncontract SelfServiceEditionCurationV2 is Ownable, Pausable {\n  using SafeMath for uint256;\n\n  event SelfServiceEditionCreated(\n    uint256 indexed _editionNumber,\n    address indexed _creator,\n    uint256 _priceInWei,\n    uint256 _totalAvailable,\n    bool _enableAuction\n  );\n\n  // Calling address\n  IKODAV2SelfServiceEditionCuration public kodaV2;\n  IKODAAuction public auction;\n  SelfServiceAccessControls public accessControls;\n\n  // Default artist commission\n  uint256 public artistCommission = 85;\n\n  // Config which enforces editions to not be over this size\n  uint256 public maxEditionSize = 100;\n\n  // Config the minimum price per edition\n  uint256 public minPricePerEdition = 0;\n\n  // When true this will skip the invocation in time period check\n  bool public disableInvocationCheck = false;\n\n  // Max number of editions to be created in the time period\n  uint256 public maxInvocations = 1;\n\n  // The rolling time period for max number of invocations\n  uint256 public maxInvocationsTimePeriod = 1 days;\n\n  // Number of invocations the caller has performed in the time period\n  mapping(address => uint256) public invocationsInTimePeriod;\n\n  // When the current time period started\n  mapping(address => uint256) public timeOfFirstInvocationInPeriod;\n\n  /**\n   * @dev Construct a new instance of the contract\n   */\n  constructor(\n    IKODAV2SelfServiceEditionCuration _kodaV2,\n    IKODAAuction _auction,\n    SelfServiceAccessControls _accessControls\n  ) public {\n    kodaV2 = _kodaV2;\n    auction = _auction;\n    accessControls = _accessControls;\n  }\n\n  /**\n   * @dev Called by artists, create new edition on the KODA platform\n   */\n  function createEdition(\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    string _tokenUri,\n    bool _enableAuction\n  )\n  public\n  whenNotPaused\n  returns (uint256 _editionNumber)\n  {\n    validateInvocations();\n    return _createEdition(msg.sender, _totalAvailable, _priceInWei, _startDate, _tokenUri, _enableAuction);\n  }\n\n  /**\n   * @dev Caller by owner, can create editions for other artists\n   * @dev Only callable from owner regardless of pause state\n   */\n  function createEditionFor(\n    address _artist,\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    string _tokenUri,\n    bool _enableAuction\n  )\n  public\n  onlyOwner\n  returns (uint256 _editionNumber)\n  {\n    return _createEdition(_artist, _totalAvailable, _priceInWei, _startDate, _tokenUri, _enableAuction);\n  }\n\n  /**\n   * @dev Internal function for edition creation\n   */\n  function _createEdition(\n    address _artist,\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    string _tokenUri,\n    bool _enableAuction\n  )\n  internal\n  returns (uint256 _editionNumber){\n\n    // Enforce edition size\n    require(_totalAvailable > 0, \"Must be at least one available in edition\");\n    require(_totalAvailable <= maxEditionSize, \"Must not exceed max edition size\");\n\n    // Enforce min price\n    require(_priceInWei >= minPricePerEdition, \"Price must be greater than minimum\");\n\n    // If we are the owner, skip this artists check\n    if (msg.sender != owner) {\n\n      // Enforce who can call this\n      if (!accessControls.openToAllArtist()) {\n        require(accessControls.allowedArtists(_artist), \"Only allowed artists can create editions for now\");\n      }\n    }\n\n    // Find the next edition number we can use\n    uint256 editionNumber = getNextAvailableEditionNumber();\n\n    // Attempt to create a new edition\n    require(\n      _createNewEdition(editionNumber, _artist, _totalAvailable, _priceInWei, _startDate, _tokenUri),\n      \"Failed to create new edition\"\n    );\n\n    // Enable the auction if desired\n    if (_enableAuction) {\n      auction.setArtistsControlAddressAndEnabledEdition(editionNumber, _artist);\n    }\n\n    // Trigger event\n    emit SelfServiceEditionCreated(editionNumber, _artist, _priceInWei, _totalAvailable, _enableAuction);\n\n    return editionNumber;\n  }\n\n  /**\n   * @dev Internal function for calling external create methods with some none configurable defaults\n   */\n  function _createNewEdition(\n    uint256 _editionNumber,\n    address _artist,\n    uint256 _totalAvailable,\n    uint256 _priceInWei,\n    uint256 _startDate,\n    string _tokenUri\n  )\n  internal\n  returns (bool) {\n    return kodaV2.createActiveEdition(\n      _editionNumber,\n      0x0, // _editionData - no edition data\n      1, // _editionType - KODA always type 1\n      _startDate,\n      0, // _endDate - 0 = MAX unit256\n      _artist,\n      artistCommission,\n      _priceInWei,\n      _tokenUri,\n      _totalAvailable\n    );\n  }\n\n  function validateInvocations() internal {\n    if (disableInvocationCheck) {\n      return;\n    }\n    uint256 invocationPeriodStart = timeOfFirstInvocationInPeriod[msg.sender];\n\n    // If we are new to this process or its been cleared, skip the check\n    if (invocationPeriodStart != 0) {\n\n      // Work out how much time has passed\n      uint256 timePassedInPeriod = block.timestamp - invocationPeriodStart;\n\n      // If we are still in this time period\n      if (timePassedInPeriod < maxInvocationsTimePeriod) {\n\n        uint256 invocations = invocationsInTimePeriod[msg.sender];\n\n        uint256 currentInvocation = invocations + 1;\n\n        // Ensure the number of invocations does not exceed the max number of invocations allowed\n        require(currentInvocation <= maxInvocations, \"Exceeded max invocations for time period\");\n\n        // Update the invocations for this period if passed validation check\n        invocationsInTimePeriod[msg.sender] = currentInvocation;\n\n      } else {\n        // if we have passed the time period simple clear out the fields and start the period again\n        invocationsInTimePeriod[msg.sender] = 1;\n        timeOfFirstInvocationInPeriod[msg.sender] = block.timestamp;\n      }\n\n    } else {\n      // initial the counters if not used before\n      invocationsInTimePeriod[msg.sender] = 1;\n      timeOfFirstInvocationInPeriod[msg.sender] = block.timestamp;\n    }\n  }\n\n  /**\n   * @dev Internal function for dynamically generating the next KODA edition number\n   */\n  function getNextAvailableEditionNumber()\n  internal\n  returns (uint256 editionNumber) {\n\n    // Get current highest edition and total in the edition\n    uint256 highestEditionNumber = kodaV2.highestEditionNumber();\n    uint256 totalAvailableEdition = kodaV2.totalAvailableEdition(highestEditionNumber);\n\n    // Add the current highest plus its total, plus 1 as tokens start at 1 not zero\n    uint256 nextAvailableEditionNumber = highestEditionNumber.add(totalAvailableEdition).add(1);\n\n    // Round up to next 100, 1000 etc based on max allowed size\n    return ((nextAvailableEditionNumber + maxEditionSize - 1) / maxEditionSize) * maxEditionSize;\n  }\n\n  /**\n   * @dev Sets the KODA address\n   * @dev Only callable from owner\n   */\n  function setKodavV2(IKODAV2SelfServiceEditionCuration _kodaV2) onlyOwner public {\n    kodaV2 = _kodaV2;\n  }\n\n  /**\n   * @dev Sets the KODA auction\n   * @dev Only callable from owner\n   */\n  function setAuction(IKODAAuction _auction) onlyOwner public {\n    auction = _auction;\n  }\n\n  /**\n   * @dev Sets the default commission for each edition\n   * @dev Only callable from owner\n   */\n  function setArtistCommission(uint256 _artistCommission) onlyOwner public {\n    artistCommission = _artistCommission;\n  }\n\n  /**\n   * @dev Sets the max edition size\n   * @dev Only callable from owner\n   */\n  function setMaxEditionSize(uint256 _maxEditionSize) onlyOwner public {\n    maxEditionSize = _maxEditionSize;\n  }\n\n  /**\n   * @dev Sets the max invocations\n   * @dev Only callable from owner\n   */\n  function setMaxInvocations(uint256 _maxInvocations) onlyOwner public {\n    maxInvocations = _maxInvocations;\n  }\n\n  /**\n   * @dev Sets the disable invocation check, when true the invocation in time period check is skipped\n   * @dev Only callable from owner\n   */\n  function setDisableInvocationCheck(bool _disableInvocationCheck) onlyOwner public {\n    disableInvocationCheck = _disableInvocationCheck;\n  }\n\n  /**\n   * @dev Sets minimum price per edition\n   * @dev Only callable from owner\n   */\n  function setMinPricePerEdition(uint256 _minPricePerEdition) onlyOwner public {\n    minPricePerEdition = _minPricePerEdition;\n  }\n\n  /**\n   * @dev Checks to see if the account can mint more assets\n   */\n  function canCreateAnotherEdition(address account) public view returns (bool) {\n    if (!isEnabledForAccount(account)) {\n      return false;\n    }\n    return invocationsInTimePeriod[account] < maxInvocations;\n  }\n\n  /**\n   * @dev Checks to see if the account can create editions\n   */\n  function isEnabledForAccount(address account) public view returns (bool) {\n    return accessControls.isEnabledForAccount(account);\n  }\n\n  /**\n   * @dev Allows for the ability to extract stuck ether\n   * @dev Only callable from owner\n   */\n  function withdrawStuckEther(address _withdrawalAccount) onlyOwner public {\n    require(_withdrawalAccount != address(0), \"Invalid address provided\");\n    _withdrawalAccount.transfer(address(this).balance);\n  }\n}",
  "bytecode": "60806040526000805460a060020a60ff0219168155605560045560646005556006556007805460ff1916905560016008556201518060095534801561004357600080fd5b506040516060806114228339810160409081528151602083015191909201516000805433600160a060020a0319918216178255600180548216600160a060020a039687161790556002805482169486169490941790935560038054909316939091169290921790556113679081906100bb90396000f30060806040526004361061015b5763ffffffff60e060020a60003504166321319d4d811461016057806326ccd77a1461017c5780632bd3152d1461019d5780632ec8d5bb146101d25780633f4ba83a14610205578063410112fd1461021a57806343ce33541461022f578063566aac2f146102505780635b638fa5146102685780635c975abb1461029957806367a27b91146102ae5780636cbdef61146102c6578063715018a6146102db578063748365ef146102f05780637b37ce4f146103055780637d9f6db51461031a5780638456cb591461032f5780638da5cb5b146103445780638e6e15771461035957806397e950f71461036e578063983586b1146103865780639ca3bbb31461039b578063a86f205714610413578063ab1183e01461047a578063afc57f981461049b578063b83281b0146104b3578063b8c6f579146104c8578063bbee17a3146104e9578063f2fde38b1461050a575b600080fd5b34801561016c57600080fd5b5061017a600435151561052b565b005b34801561018857600080fd5b5061017a600160a060020a0360043516610555565b3480156101a957600080fd5b506101be600160a060020a0360043516610606565b604080519115158252519081900360200190f35b3480156101de57600080fd5b506101f3600160a060020a03600435166106a5565b60408051918252519081900360200190f35b34801561021157600080fd5b5061017a6106b7565b34801561022657600080fd5b506101f361072d565b34801561023b57600080fd5b506101f3600160a060020a0360043516610733565b34801561025c57600080fd5b5061017a600435610745565b34801561027457600080fd5b5061027d610761565b60408051600160a060020a039092168252519081900360200190f35b3480156102a557600080fd5b506101be610770565b3480156102ba57600080fd5b5061017a600435610780565b3480156102d257600080fd5b506101f361079c565b3480156102e757600080fd5b5061017a6107a2565b3480156102fc57600080fd5b5061027d61080e565b34801561031157600080fd5b506101f361081d565b34801561032657600080fd5b5061027d610823565b34801561033b57600080fd5b5061017a610832565b34801561035057600080fd5b5061027d6108ad565b34801561036557600080fd5b506101be6108bc565b34801561037a57600080fd5b5061017a6004356108c5565b34801561039257600080fd5b506101f36108e1565b3480156103a757600080fd5b50604080516020601f6084356004818101359283018490048402850184019095528184526101f394600160a060020a03813516946024803595604435956064359536959460a49490939101919081908401838280828437509497505050509135151592506108e7915050565b34801561041f57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101f39480359460248035956044359536956084949301918190840183828082843750949750505050913515159250610918915050565b34801561048657600080fd5b506101be600160a060020a0360043516610950565b3480156104a757600080fd5b5061017a60043561098c565b3480156104bf57600080fd5b506101f36109a8565b3480156104d457600080fd5b5061017a600160a060020a03600435166109ae565b3480156104f557600080fd5b5061017a600160a060020a03600435166109f4565b34801561051657600080fd5b5061017a600160a060020a0360043516610a3a565b600054600160a060020a0316331461054257600080fd5b6007805460ff1916911515919091179055565b600054600160a060020a0316331461056c57600080fd5b600160a060020a03811615156105cc576040805160e560020a62461bcd02815260206004820152601860248201527f496e76616c696420616464726573732070726f76696465640000000000000000604482015290519081900360640190fd5b604051600160a060020a03821690303180156108fc02916000818181858888f19350505050158015610602573d6000803e3d6000fd5b5050565b600354604080517f2bd3152d000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015291516000939290921691632bd3152d9160248082019260209290919082900301818787803b15801561067157600080fd5b505af1158015610685573d6000803e3d6000fd5b505050506040513d602081101561069b57600080fd5b505190505b919050565b600b6020526000908152604090205481565b600054600160a060020a031633146106ce57600080fd5b60005460a060020a900460ff1615156106e657600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60065481565b600a6020526000908152604090205481565b600054600160a060020a0316331461075c57600080fd5b600555565b600154600160a060020a031681565b60005460a060020a900460ff1681565b600054600160a060020a0316331461079757600080fd5b600455565b60085481565b600054600160a060020a031633146107b957600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a031681565b60055481565b600254600160a060020a031681565b600054600160a060020a0316331461084957600080fd5b60005460a060020a900460ff161561086057600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b60075460ff1681565b600054600160a060020a031633146108dc57600080fd5b600855565b60045481565b60008054600160a060020a031633146108ff57600080fd5b61090d878787878787610a5d565b979650505050505050565b6000805460a060020a900460ff161561093057600080fd5b610938610eb2565b610946338787878787610a5d565b9695505050505050565b600061095b82610606565b1515610969575060006106a0565b50600854600160a060020a0382166000908152600a602052604090205410919050565b600054600160a060020a031633146109a357600080fd5b600655565b60095481565b600054600160a060020a031633146109c557600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610a0b57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610a5157600080fd5b610a5a81610fed565b50565b600080808711610add576040805160e560020a62461bcd02815260206004820152602960248201527f4d757374206265206174206c65617374206f6e6520617661696c61626c65206960448201527f6e2065646974696f6e0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600554871115610b37576040805160e560020a62461bcd02815260206004820181905260248201527f4d757374206e6f7420657863656564206d61782065646974696f6e2073697a65604482015290519081900360640190fd5b600654861015610bb7576040805160e560020a62461bcd02815260206004820152602260248201527f5072696365206d7573742062652067726561746572207468616e206d696e696d60448201527f756d000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600054600160a060020a03163314610d5e57600360009054906101000a9004600160a060020a0316600160a060020a031663e29cda486040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610c1c57600080fd5b505af1158015610c30573d6000803e3d6000fd5b505050506040513d6020811015610c4657600080fd5b50511515610d5e57600354604080517f46f7c98a000000000000000000000000000000000000000000000000000000008152600160a060020a038b81166004830152915191909216916346f7c98a9160248083019260209291908290030181600087803b158015610cb657600080fd5b505af1158015610cca573d6000803e3d6000fd5b505050506040513d6020811015610ce057600080fd5b50511515610d5e576040805160e560020a62461bcd02815260206004820152603060248201527f4f6e6c7920616c6c6f77656420617274697374732063616e206372656174652060448201527f65646974696f6e7320666f72206e6f7700000000000000000000000000000000606482015290519081900360840190fd5b610d6661106a565b9050610d768189898989896111c9565b1515610dcc576040805160e560020a62461bcd02815260206004820152601c60248201527f4661696c656420746f20637265617465206e65772065646974696f6e00000000604482015290519081900360640190fd5b8215610e5957600254604080517fb5e7f3c300000000000000000000000000000000000000000000000000000000815260048101849052600160a060020a038b811660248301529151919092169163b5e7f3c391604480830192600092919082900301818387803b158015610e4057600080fd5b505af1158015610e54573d6000803e3d6000fd5b505050505b6040805187815260208101899052841515818301529051600160a060020a038a169183917faa456f9f24703ca25ecf5b0bfd7bed18ed96589119418060049a312d983727669181900360600190a3979650505050505050565b60075460009081908190819060ff1615610ecb57610fe7565b336000908152600b602052604090205493508315610fc6578342039250600954831015610fa0575050336000908152600a60205260409020546008546001820190811115610f89576040805160e560020a62461bcd02815260206004820152602860248201527f4578636565646564206d617820696e766f636174696f6e7320666f722074696d60448201527f6520706572696f64000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000908152600a60205260409020819055610fc1565b336000908152600a6020908152604080832060019055600b90915290204290555b610fe7565b336000908152600a6020908152604080832060019055600b90915290204290555b50505050565b600160a060020a038116151561100257600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080600080600160009054906101000a9004600160a060020a0316600160a060020a031663abf3260f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156110c357600080fd5b505af11580156110d7573d6000803e3d6000fd5b505050506040513d60208110156110ed57600080fd5b5051600154604080517f6a028692000000000000000000000000000000000000000000000000000000008152600481018490529051929550600160a060020a0390911691636a028692916024808201926020929091908290030181600087803b15801561115957600080fd5b505af115801561116d573d6000803e3d6000fd5b505050506040513d602081101561118357600080fd5b505191506111a8600161119c858563ffffffff61132816565b9063ffffffff61132816565b60055490915080600019818401018115156111bf57fe5b0402935050505090565b6000600160009054906101000a9004600160a060020a0316600160a060020a0316638bbb594a88600060018760008c6004548c8b8f6040518b63ffffffff1660e060020a028152600401808b81526020018a60010260001916815260200189815260200188815260200187815260200186600160a060020a0316600160a060020a0316815260200185815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561129c578181015183820152602001611284565b50505050905090810190601f1680156112c95780820380516001836020036101000a031916815260200191505b509b505050505050505050505050602060405180830381600087803b1580156112f157600080fd5b505af1158015611305573d6000803e3d6000fd5b505050506040513d602081101561131b57600080fd5b5051979650505050505050565b8181018281101561133557fe5b929150505600a165627a7a72305820b0836f605979090f483150c77871497f450f4768809bfaaadf39f97a3ff52fb40029000000000000000000000000fbeef911dc5821886e1dda71586d90ed28174b7d000000000000000000000000848b0ea643e5a352d78e2c0c12a2dd8c96fec639000000000000000000000000ec133df5d806a9069aee513b8be01eeee2f03ff0",
  "constructorArguments": "000000000000000000000000fbeef911dc5821886e1dda71586d90ed28174b7d000000000000000000000000848b0ea643e5a352d78e2c0c12a2dd8c96fec639000000000000000000000000ec133df5d806a9069aee513b8be01eeee2f03ff0"
}