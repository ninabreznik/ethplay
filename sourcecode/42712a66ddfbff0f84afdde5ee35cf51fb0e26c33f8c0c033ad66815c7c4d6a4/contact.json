{
  "address": "0x543e9c99addfc7c6fa158359019fd8f530334396",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EPCToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-12\n*/\n\npragma solidity ^0.4.13;\n\ncontract Math {\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    assert((z = x + y) >= x);\n  }\n\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    assert((z = x - y) <= x);\n  }\n\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    assert((z = x * y) >= x);\n  }\n\n  function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    z = x / y;\n  }\n}\n\ncontract Token {\n  uint256 public totalSupply;\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n  function approve(address _spender, uint256 _value) public returns (bool success);\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/*  ERC 20 token */\ncontract ERC20 is Token {\n\n  function name() public pure returns (string) { name; }\n  function symbol() public pure returns (string) { symbol; }\n  function decimals() public pure returns (uint8) { decimals; }\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    if (balances[msg.sender] >= _value && _value > 0) {\n      balances[msg.sender] -= _value;\n      balances[_to] += _value;\n      Transfer(msg.sender, _to, _value);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n      balances[_to] += _value;\n      balances[_from] -= _value;\n      allowed[_from][msg.sender] -= _value;\n      Transfer(_from, _to, _value);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  mapping (address => uint256) balances;\n  mapping (address => mapping (address => uint256)) allowed;\n}\n\ncontract owned {\n  address public owner;\n\n  function owned() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    owner = newOwner;\n  }\n}\n\ncontract EPCToken is ERC20, Math, owned {\n  // metadata\n  string public name;\n  string public symbol;\n  uint8 public decimals = 18;\n  string public version;\n\n  // events\n  event Reward(address indexed _to, uint256 _value);\n  event MintToken(address indexed _to, uint256 _value);\n  event Burn(address indexed _to, uint256 _value);\n\n  // constructor\n  function EPCToken(\n   string _name,\n   string _symbol,\n   string _version\n  ) public {\n    name = _name;\n    symbol = _symbol;\n    version = _version;\n  }\n\n  /*\n   * mint token\n   */\n  function mintToken(address target, uint256 mintedAmount) public onlyOwner {\n    balances[target] += mintedAmount;\n    totalSupply += mintedAmount;\n    MintToken(target, mintedAmount);\n  }\n\n  /*\n   * burn the tokens, cant never get back\n   */\n  function burn(uint256 amount) public returns (bool success) {\n    require(balances[msg.sender] >= amount);\n    balances[msg.sender] -= amount;\n    totalSupply -= amount;\n    Burn(msg.sender, amount);\n    return true;\n  }\n\n  /*\n   * reward token\n   */\n  function reward(address target, uint256 amount) public onlyOwner {\n    balances[target] += amount;\n    Reward(target, amount);\n  }\n\n  /*\n   * kill the contract from the blockchain\n   * and send the balance to the owner\n   */\n  function kill() public onlyOwner {\n    selfdestruct(owner);\n  }\n}\n\ncontract EPCSale is Math, owned {\n  EPCToken public epc;\n  uint256 public constant decimals = 18;\n  // crowdsale parameters\n  bool public isFinalized;  // switched to true in operational state\n  uint256 public fundingStartBlock;\n  uint256 public fundingEndBlock;\n  uint256 public funded;\n  uint256 public constant totalCap = 250 * (10**6) * 10**decimals; // 250m epc\n\n  // constructor\n  function EPCSale(\n   EPCToken _epc,\n   uint256 _fundingStartBlock,\n   uint256 _fundingEndBlock\n  )\n  public {\n    isFinalized = false; //controls pre through crowdsale state\n    epc = EPCToken(_epc);\n    fundingStartBlock = _fundingStartBlock;\n    fundingEndBlock = _fundingEndBlock;\n  }\n\n  /*\n   * crowdsale\n   */\n  function crowdSale() public payable {\n    require(!isFinalized);\n    assert(block.number >= fundingStartBlock);\n    assert(block.number <= fundingEndBlock);\n    require(msg.value > 0);\n    uint256 tokens = mul(msg.value, exchangeRate()); // check that we're not over totals\n    funded = add(funded, tokens);\n    assert(funded <= totalCap);\n    assert(epc.transfer(msg.sender, tokens));\n  }\n\n  /*\n   * caculate the crowdsale rate per eth\n   */\n  function exchangeRate() public constant returns(uint256) {\n    if (block.number<=fundingStartBlock+43200) return 10000; // early price\n    if (block.number<=fundingStartBlock+2*43200) return 8000; // crowdsale price\n    return 7000; // default price\n  }\n\n  /*\n   * unit test for crowdsale exchange rate\n   */\n  function testExchangeRate(uint blockNumber) public constant returns(uint256) {\n    if (blockNumber <= fundingStartBlock+43200) return 10000; // early price\n    if (blockNumber <= fundingStartBlock+2*43200) return 8000; // crowdsale price\n    return 7000; // default price\n  }\n\n  /*\n   * unit test for calculate funded amount\n   */\n  function testFunded(uint256 amount) public constant returns(uint256) {\n    uint256 tokens = mul(amount, exchangeRate());\n    return add(funded, tokens);\n  }\n\n  /*\n   * unamed function for crowdsale\n   */\n  function () public payable {\n    crowdSale();\n  }\n\n  /*\n   * withrawal the crowd eth\n   */\n  function withdrawal() public onlyOwner {\n    msg.sender.transfer(this.balance);\n  }\n\n  /*\n   * stop the crowdsale\n   */\n  function stop() public onlyOwner {\n    isFinalized = true;\n  }\n\n  /*\n   * start the crowdsale\n   */\n  function start() public onlyOwner {\n    isFinalized = false;\n  }\n\n  /*\n   * retrieve tokens from the contract\n   */\n  function retrieveTokens(uint256 amount) public onlyOwner {\n    assert(epc.transfer(owner, amount));\n  }\n\n  /*\n   * kill the contract from the blockchain\n   * and retrieve the tokens and balance to the owner\n   */\n  function kill() public onlyOwner {\n    epc.transfer(owner, epc.balanceOf(this));\n    selfdestruct(owner);\n  }\n}",
  "bytecode": "60606040526006805460ff19166012179055341561001c57600080fd5b604051610aae380380610aae8339810160405280805182019190602001805182019190602001805160038054600160a060020a03191633600160a060020a031617905591909101905060048380516100789291602001906100a9565b50600582805161008c9291602001906100a9565b5060078180516100a09291602001906100a9565b50505050610144565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100ea57805160ff1916838001178555610117565b82800160010185558215610117579182015b828111156101175782518255916020019190600101906100fc565b50610123929150610127565b5090565b61014191905b80821115610123576000815560010161012d565b90565b61095b806101536000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101aa57806321670f22146101cf57806323b872dd146101f3578063313ce5671461021b57806341c0e1b51461024457806342966c681461025757806354fd4d501461026d57806370a082311461028057806379c650681461029f5780638da5cb5b146102c157806395d89b41146102f0578063a9059cbb14610303578063dd62ed3e14610325578063f2fde38b1461034a575b600080fd5b34156100f557600080fd5b6100fd610369565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610139578082015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017f57600080fd5b610196600160a060020a0360043516602435610407565b604051901515815260200160405180910390f35b34156101b557600080fd5b6101bd610474565b60405190815260200160405180910390f35b34156101da57600080fd5b6101f1600160a060020a036004351660243561047a565b005b34156101fe57600080fd5b610196600160a060020a03600435811690602435166044356104ec565b341561022657600080fd5b61022e6105e4565b60405160ff909116815260200160405180910390f35b341561024f57600080fd5b6101f16105ed565b341561026257600080fd5b610196600435610616565b341561027857600080fd5b6100fd61069f565b341561028b57600080fd5b6101bd600160a060020a036004351661070a565b34156102aa57600080fd5b6101f1600160a060020a0360043516602435610725565b34156102cc57600080fd5b6102d461079d565b604051600160a060020a03909116815260200160405180910390f35b34156102fb57600080fd5b6100fd6107ac565b341561030e57600080fd5b610196600160a060020a0360043516602435610817565b341561033057600080fd5b6101bd600160a060020a03600435811690602435166108ba565b341561035557600080fd5b6101f1600160a060020a03600435166108e5565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103ff5780601f106103d4576101008083540402835291602001916103ff565b820191906000526020600020905b8154815290600101906020018083116103e257829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60035433600160a060020a0390811691161461049557600080fd5b600160a060020a038216600081815260016020526040908190208054840190557f619caafabdd75649b302ba8419e48cccf64f37f1983ac4727cfb38b57703ffc99083905190815260200160405180910390a25050565b600160a060020a03831660009081526001602052604081205482901080159061053c5750600160a060020a0380851660009081526002602090815260408083203390941683529290522054829010155b80156105485750600082115b156105d957600160a060020a03808416600081815260016020908152604080832080548801905588851680845281842080548990039055600283528184203390961684529490915290819020805486900390559091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016105dd565b5060005b9392505050565b60065460ff1681565b60035433600160a060020a0390811691161461060857600080fd5b600354600160a060020a0316ff5b600160a060020a0333166000908152600160205260408120548290101561063c57600080fd5b600160a060020a0333166000818152600160205260408082208054869003905581548590039091557fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59084905190815260200160405180910390a2506001919050565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103ff5780601f106103d4576101008083540402835291602001916103ff565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a0390811691161461074057600080fd5b600160a060020a038216600081815260016020526040808220805485019055815484019091557fdcdea898caf5576419f89caf69301592a4758349a0bd62300b58849213420a729083905190815260200160405180910390a25050565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103ff5780601f106103d4576101008083540402835291602001916103ff565b600160a060020a0333166000908152600160205260408120548290108015906108405750600082115b156108b257600160a060020a033381166000818152600160205260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600161046e565b50600061046e565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461090057600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058204319ea2627f9e057f9a4f62ab41351da9013845daf23f754b6fcba20585a89730029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000845502d436861696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000445504343000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005312e302e30000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000845502d436861696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000445504343000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005312e302e30000000000000000000000000000000000000000000000000000000"
}