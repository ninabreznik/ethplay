{
  "address": "0x1ce865c81e76aafd2003e69acd2d196d19aac144",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BiddableEscrow",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-23\n*/\n\npragma solidity 0.4.21;\n\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n    assert(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    ERC20 token,\n    address from,\n    address to,\n    uint256 value)\n    internal\n  {\n    assert(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n    assert(token.approve(spender, value));\n  }\n}\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n  using SafeERC20 for ERC20Basic;\n\n  /**\n   * @dev Reclaim all ERC20Basic compatible tokens\n   * @param token ERC20Basic The address of the token contract\n   */\n  function reclaimToken(ERC20Basic token) external onlyOwner {\n    uint256 balance = token.balanceOf(this);\n    token.safeTransfer(owner, balance);\n  }\n\n}\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/// @dev Right now, the Biddable application is responsible for being the arbitrator to all escrows.\n///  This means, the Biddable application has to enforce boundaries such that auction houses can\n///  only release escrows for users on their platform. This is done via the shared secret that is\n///  provisioned for each platform that onboards with the service.\ncontract BiddableEscrow is CanReclaimToken {\n\n  using SafeMath for uint256;\n\n  // Mapping of escrows. Key is a UUID generated by Biddable\n  mapping (string => EscrowDeposit) private escrows;\n\n  // The arbitrator that is responsible for releasing escrow.\n  // At this time this is the Biddable service.\n  // This should be separate key than the one used for the creation of the contract.\n  address public arbitrator;\n\n  // Gas fees that have accumulated in this contract to reimburse the arbitrator\n  // for paying fees for releasing escrow. These are stored locally to avoid having to\n  // pay additional gas costs for transfer during each release.\n  uint256 public accumulatedGasFees;\n\n  struct EscrowDeposit {\n    // Used to avoid collisions\n    bool exists;\n\n    // Address of the bidder\n    address bidder;\n\n    // Encrypted data of the escrow\n    // This is the ownership data of the escrow in the context of the auction house platform\n    // It holds the platformId, auctionId, and the userId on the platform\n    bytes data;\n\n    // The amount in the escrow\n    uint256 amount;\n  }\n\n  modifier onlyArbitrator() {\n    require(msg.sender == arbitrator);\n    _;\n  }\n\n  /// @dev Constructor for the smart contract\n  /// @param _arbitrator Address for an arbitrator that is responsible for signing the transaction data\n  function BiddableEscrow(address _arbitrator) public {\n    arbitrator = _arbitrator;\n    accumulatedGasFees = 0;\n  }\n\n  /// @notice Sets a new arbitrator. Only callable by the owner\n  /// @param _newArbitrator Address for the new arbitrator\n  function setArbitrator(address _newArbitrator) external onlyOwner {\n    arbitrator = _newArbitrator;\n  }\n\n  /// @dev This event is emitted when funds have been deposited into a new escrow.\n  ///  The data is an encrypted blob that contains the user's userId so that the\n  ///  Biddable service can tell the calling platform which user to approve for bidding.\n  event Created(address indexed sender, string id, bytes data);\n\n  /// @notice Deposit ether into escrow. The data must be signed by the Biddable service.\n  /// @dev We don't use an 'onlyArbitrator' modifier because the transaction itself is sent by the bidder,\n  ///  but the data must be signed by the Biddable service. Thus, the function must be available to call\n  ///  by anyone.\n  /// @param _id Is the unique identifier of the escrow\n  /// @param _depositAmount The deposit required to be in escrow for approval\n  /// @param _data The encrypted deposit data\n  /// @param _v Recovery number\n  /// @param _r First part of the signature\n  /// @param _s Second part of the signature\n  function deposit(\n    string _id,\n    uint256 _depositAmount,\n    bytes _data,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s)\n    external payable\n  {\n    // Throw if the amount sent doesn't mean the deposit amount\n    require(msg.value == _depositAmount);\n\n    // Throw if a deposit with this id already exists\n    require(!escrows[_id].exists);\n\n    bytes32 hash = keccak256(_id, _depositAmount, _data);\n    bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n\n    address recoveredAddress = ecrecover(\n      keccak256(prefix, hash),\n      _v,\n      _r,\n      _s\n    );\n\n    // Throw if the signature wasn't created by the arbitrator\n    require(recoveredAddress == arbitrator);\n\n    escrows[_id] = EscrowDeposit(\n      true,\n      msg.sender,\n      _data,\n      msg.value);\n\n    emit Created(msg.sender, _id, _data);\n  }\n\n  uint256 public constant RELEASE_GAS_FEES = 45989;\n\n  /// @dev This event is emitted when funds have been released from escrow at which time\n  ///  the escrow will be removed from storage (i.e., destroyed).\n  event Released(address indexed sender, address indexed bidder, uint256 value, string id);\n\n  /// @notice Release ether from escrow. Only the arbitrator is able to perform this action.\n  /// @param _id Is the unique identifier of the escrow\n  function release(string _id) external onlyArbitrator {\n    // Throw if this deposit doesn't exist\n    require(escrows[_id].exists);\n\n    EscrowDeposit storage escrowDeposit = escrows[_id];\n\n    // Shouldn't need to use SafeMath here because this should never cause an overflow\n    uint256 gasFees = RELEASE_GAS_FEES.mul(tx.gasprice);\n    uint256 amount = escrowDeposit.amount.sub(gasFees);\n    address bidder = escrowDeposit.bidder;\n\n    // Remove the deposit from storage\n    delete escrows[_id];\n\n    accumulatedGasFees = accumulatedGasFees.add(gasFees);\n    bidder.transfer(amount);\n\n    emit Released(\n      msg.sender,\n      bidder,\n      amount,\n      _id);\n  }\n\n  /// @notice Withdraw accumulated gas fees from the arbitratror releasing escrow.\n  ///  Only callable by the owner\n  function withdrawAccumulatedFees(address _to) external onlyOwner {\n    uint256 transferAmount = accumulatedGasFees;\n    accumulatedGasFees = 0;\n\n    _to.transfer(transferAmount);\n  }\n\n  /// @dev This accessor method is needed because the compiler is not able to create one with a string mapping\n  /// @notice Gets the EscrowDeposit based on the input id. Throws if the deposit doesn't exist.\n  /// @param _id The unique identifier of the escrow\n  function getEscrowDeposit(string _id) external view returns (address bidder, bytes data, uint256 amount) {\n    // Throw if this deposit doesn't exist\n    require(escrows[_id].exists);\n\n    EscrowDeposit storage escrowDeposit = escrows[_id];\n\n    bidder = escrowDeposit.bidder;\n    data = escrowDeposit.data;\n    amount = escrowDeposit.amount;\n  }\n}",
  "bytecode": "6060604052341561000f57600080fd5b60405160208061132983398101604052808051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060038190555050611265806100c46000396000f3006060604052600436106100af576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806317ffc320146100b4578063180eebba146100ed57806340b00033146101165780636cc6cde11461017c5780638da5cb5b146101d1578063b0eefabe14610226578063c1f106631461025f578063c5ecfc6114610298578063f2fde38b14610379578063f34e3723146103b2578063f96f143e146103e0575b600080fd5b34156100bf57600080fd5b6100eb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610409565b005b34156100f857600080fd5b610100610569565b6040518082815260200191505060405180910390f35b61017a60048080359060200190820180359060200191909192908035906020019091908035906020019082018035906020019190919290803560ff16906020019091908035600019169060200190919080356000191690602001909190505061056f565b005b341561018757600080fd5b61018f61093d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156101dc57600080fd5b6101e4610963565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561023157600080fd5b61025d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610988565b005b341561026a57600080fd5b610296600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a27565b005b34156102a357600080fd5b6102c460048080359060200190820180359060200191909192905050610ad5565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561033c578082015181840152602081019050610321565b50505050905090810190601f1680156103695780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561038457600080fd5b6103b0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c1f565b005b34156103bd57600080fd5b6103de60048080359060200190820180359060200191909192905050610d74565b005b34156103eb57600080fd5b6103f3610ffa565b6040518082815260200191505060405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561046657600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561050057600080fd5b5af1151561050d57600080fd5b5050506040518051905090506105656000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff166110009092919063ffffffff16565b5050565b60035481565b6000610579611138565b6000883414151561058957600080fd5b60018b8b60405180838380828437820191505092505050908152602001604051809103902060000160009054906101000a900460ff161515156105cb57600080fd5b8a8a8a8a8a604051808686808284378201915050848152602001838380828437820191505095505050505050604051809103902092506040805190810160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509150600182846040518083805190602001908083835b602083101515610672578051825260208201915060208101905060208303925061064d565b6001836020036101000a0380198251168184511680821785525050505050509050018260001916600019168152602001925050506040518091039020878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1151561071c57600080fd5b5050602060405103519050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561078357600080fd5b6080604051908101604052806001151581526020013373ffffffffffffffffffffffffffffffffffffffff16815260200189898080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505081526020013481525060018c8c60405180838380828437820191505092505050908152602001604051809103902060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101908051906020019061089892919061114c565b50606082015181600201559050503373ffffffffffffffffffffffffffffffffffffffff167f932c935c3c9913ab1e795c885cfe0b18652738083fd94d8fdea1844950a5227c8c8c8b8b6040518080602001806020018381038352878782818152602001925080828437820191505083810382528585828181526020019250808284378201915050965050505050505060405180910390a25050505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109e357600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8457600080fd5b600354905060006003819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610ad157600080fd5b5050565b6000610adf611138565b6000806001868660405180838380828437820191505092505050908152602001604051809103902060000160009054906101000a900460ff161515610b2357600080fd5b6001868660405180838380828437820191505092505050908152602001604051809103902090508060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c095780601f10610bde57610100808354040283529160200191610c09565b820191906000526020600020905b815481529060010190602001808311610bec57829003601f168201915b5050505050925080600201549150509250925092565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c7a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610cb657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610dd657600080fd5b6001868660405180838380828437820191505092505050908152602001604051809103902060000160009054906101000a900460ff161515610e1757600080fd5b600186866040518083838082843782019150509250505090815260200160405180910390209350610e533a61b3a56110c690919063ffffffff16565b9250610e6c83856002015461110190919063ffffffff16565b91508360000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060018686604051808383808284378201915050925050509081526020016040518091039020600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000610f0691906111cc565b60028201600090555050610f258360035461111a90919063ffffffff16565b6003819055508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515610f6b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167faded40980191268694a17a28cd3524dd9cedf6b82232ceb1af14363776500a5684898960405180848152602001806020018281038252848482818152602001925080828437820191505094505050505060405180910390a3505050505050565b61b3a581565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15156110a257600080fd5b5af115156110af57600080fd5b5050506040518051905015156110c157fe5b505050565b60008060008414156110db57600091506110fa565b82840290508284828115156110ec57fe5b041415156110f657fe5b8091505b5092915050565b600082821115151561110f57fe5b818303905092915050565b600080828401905083811015151561112e57fe5b8091505092915050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061118d57805160ff19168380011785556111bb565b828001600101855582156111bb579182015b828111156111ba57825182559160200191906001019061119f565b5b5090506111c89190611214565b5090565b50805460018160011615610100020316600290046000825580601f106111f25750611211565b601f0160209004906000526020600020908101906112109190611214565b5b50565b61123691905b8082111561123257600081600090555060010161121a565b5090565b905600a165627a7a72305820dc9dd92b07e20e987f730a627dff871b8a6bb140b93b24043c0ffb1081c28cf000290000000000000000000000000879afcccdace4495b01bab6390979bba2f1c080",
  "constructorArguments": "0000000000000000000000000879afcccdace4495b01bab6390979bba2f1c080"
}