{
  "address": "0xc8058d59e208399b76e66da1ec669dd6b1bee2ea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GOLDBITSCOIN",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-28\n*/\n\npragma solidity 0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n  contract ERC20 {\n  function totalSupply()public view returns (uint total_Supply);\n  function balanceOf(address _owner)public view returns (uint256 balance);\n  function allowance(address _owner, address _spender)public view returns (uint remaining);\n  function transferFrom(address _from, address _to, uint _amount)public returns (bool ok);\n  function approve(address _spender, uint _amount)public returns (bool ok);\n  function transfer(address _to, uint _amount)public returns (bool ok);\n  event Transfer(address indexed _from, address indexed _to, uint _amount);\n  event Approval(address indexed _owner, address indexed _spender, uint _amount);\n}\n\ncontract GOLDBITSCOIN is ERC20\n{\n    using SafeMath for uint256;\n    string public constant symbol = \"GBC\";\n    string public constant name = \"Gold Bits Coin\";\n    uint8 public constant decimals = 10;\n    // 100 million total supply // muliplies dues to decimal precision\n    uint256 public _totalSupply = 1000000000 * 10 **10;     // 1 billion supply           \n    // Balances for each account\n    mapping(address => uint256) balances;   \n    // Owner of this contract\n    address public owner;\n    \n    uint public perTokenPrice;\n    address public central_account;\n    bool stopped = true;\n    bool ICO_PRE_ICO_STAGE = false;\n    uint256 public stage = 0;\n    uint256 public one_ether_usd_price = 0;\n    \n    mapping (address => mapping (address => uint)) allowed;\n    \n    // ico startdate\n    uint256 startdate;\n\n    // for maintaining prices with days\n    uint256 first_ten_days;\n    uint256 second_ten_days;\n    uint256 third_ten_days;\n    \n    uint256 public supply_increased;\n    bool PreICOended = false;\n    \n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    event LOG(string e,uint256 value);\n    //ico enddate;\n    uint256 enddate;\n    \n    modifier onlyOwner() {\n      if (msg.sender != owner) {\n            revert();\n        }\n        _;\n        }\n        \n    modifier onlycentralAccount {\n        require(msg.sender == central_account);\n        _;\n    }\n    \n    function GOLDBITSCOIN() public\n    {\n        owner = msg.sender;\n        balances[owner] = 200000000 * 10 **10; // 200 million token with company/owner , multiplied due to decimal precision\n    \n        supply_increased += balances[owner];\n    }\n    \n    function setCentralAccount(address central_address) public onlyOwner\n    {\n        central_account = central_address;\n    }\n    // to be called by owner on 15th jan to start PreICO till 31st january\n    function StatPreICO() external onlyOwner\n    {\n        stage = 1;\n        ICO_PRE_ICO_STAGE = true;\n        balances[address(this)] = 100000000 * 10 **10; // 100 million token with contract , multiplied due to decimal precision\n        startdate = now;\n        enddate = now.add(17 days);\n        supply_increased += balances[address(this)];\n        perTokenPrice = 24; // 24 cents\n   \n    }\n    // to be called by owner on 1st feb to start ICO till 1st march\n    function StartICO() external onlyOwner\n    {\n        require(PreICOended);    \n        balances[address(this)] = 100000000 * 10 **10; // 100 million token with contract , multiplied due to decimal precision\n        stage = 2;\n        ICO_PRE_ICO_STAGE = true;\n        stopped = false;\n        startdate = now;\n        first_ten_days = now.add(10 days);\n        second_ten_days = first_ten_days.add(10 days);\n        third_ten_days = second_ten_days.add(10 days);\n        enddate = now.add(30 days);\n        supply_increased += balances[address(this)];\n        perTokenPrice = 30; // 30 cents\n    }\n    // to be called by owner at end of preICO and ICO\n    function end_ICO_PreICO() external onlyOwner\n    {\n        PreICOended = true;\n        stage = 0;\n        ICO_PRE_ICO_STAGE = false;\n        supply_increased -= balances[address(this)];\n        balances[address(this)] =0;\n    }\n    \n    \n    function getTokenPriceforDapp() public view returns (uint256)\n    {\n        return perTokenPrice;\n    }\n    \n    function getEtherPriceforDapp() public view returns (uint256)\n    {\n        return one_ether_usd_price;\n    }\n    \n    function () public payable \n    {\n        require(ICO_PRE_ICO_STAGE);\n        require(stage > 0);\n        require(now <= enddate);\n        distributeToken(msg.value,msg.sender);   \n    }\n    \n     \n    function distributeToken(uint val, address user_address ) private {\n        \n        uint tokens = ((one_ether_usd_price * val) )  / (perTokenPrice * 10**14); \n\n        require(balances[address(this)] >= tokens);\n        \n        balances[address(this)] = balances[address(this)].sub(tokens);\n        balances[user_address] = balances[user_address].add(tokens);\n        Transfer(address(this), user_address, tokens);\n       \n      \n        \n    }\n    \n    // need to be called before the ICO to set ether price give to 8 decimal places\n    function setconfigurationEtherPrice(uint etherPrice) public onlyOwner\n    {\n        one_ether_usd_price = etherPrice;\n       \n        \n    }\n    // **** need to be called to set  token Price, to be called during ICO to change price every 10 days\n    function setconfigurationTokenPrice(uint TokenPrice) public onlyOwner\n    {\n      \n        perTokenPrice = TokenPrice;\n        \n    }\n    \n        // **** need to be called to set  token Price, to be called during ICO to change price every 10 days\n    function setStage(uint status) public onlyOwner\n    {\n      \n        stage = status;\n        \n    }\n    \n    //used by wallet during token buying procedure \n    function transferby(address _from,address _to,uint256 _amount) public onlycentralAccount returns(bool success) {\n        if (balances[_from] >= _amount &&\n            _amount > 0 &&\n            balances[_to] + _amount > balances[_to]) {\n                 \n            balances[_from] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    // to be called by owner after an year review\n    function mineToken(uint256 supply_to_increase) public onlyOwner\n    {\n        require((supply_increased + supply_to_increase) <= _totalSupply);\n        supply_increased += supply_to_increase;\n        \n        balances[owner] += supply_to_increase;\n        Transfer(0, owner, supply_to_increase);\n    }\n    \n    \n    // total supply of the tokens\n    function totalSupply() public view returns (uint256 total_Supply) {\n         total_Supply = _totalSupply;\n     }\n  \n     //  balance of a particular account\n     function balanceOf(address _owner)public view returns (uint256 balance) {\n         return balances[_owner];\n     }\n  \n     // Transfer the balance from owner's account to another account\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\n         require( _to != 0x0);\n         require(balances[msg.sender] >= _amount \n             && _amount >= 0\n             && balances[_to] + _amount >= balances[_to]);\n             balances[msg.sender] = balances[msg.sender].sub(_amount);\n             balances[_to] = balances[_to].add(_amount);\n             Transfer(msg.sender, _to, _amount);\n             return true;\n     }\n  \n     // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom(\n         address _from,\n         address _to,\n         uint256 _amount\n     )public returns (bool success) {\n        require(_to != 0x0); \n         require(balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount >= 0\n             && balances[_to] + _amount >= balances[_to]);\n             balances[_from] = balances[_from].sub(_amount);\n             allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n             balances[_to] = balances[_to].add(_amount);\n             Transfer(_from, _to, _amount);\n             return true;\n             }\n \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n   }\n   \n   \t//In case the ownership needs to be transferred\n\tfunction transferOwnership(address newOwner)public onlyOwner\n\t{\n\t    require( newOwner != 0x0);\n\t    balances[newOwner] = balances[newOwner].add(balances[owner]);\n\t    balances[owner] = 0;\n\t    owner = newOwner;\n\t}\n\t\n\t// drain ether called by only owner\n\tfunction drain() external onlyOwner {\n        owner.transfer(this.balance);\n    }\n    \n    //Below function will convert string to integer removing decimal\n\tfunction stringToUint(string s) private returns (uint) \n\t  {\n        bytes memory b = bytes(s);\n        uint i;\n        uint result1 = 0;\n        for (i = 0; i < b.length; i++) {\n            uint c = uint(b[i]);\n            if(c == 46)\n            {\n                // Do nothing --this will skip the decimal\n            }\n          else if (c >= 48 && c <= 57) {\n                result1 = result1 * 10 + (c - 48);\n              // usd_price=result;\n                \n            }\n        }\n            return result1;\n      }\n    \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supply_increased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"supply_to_increase\",\"type\":\"uint256\"}],\"name\":\"mineToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"central_address\",\"type\":\"address\"}],\"name\":\"setCentralAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"central_account\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StartICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEtherPriceforDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO_PreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"one_ether_usd_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StatPreICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"perTokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherPrice\",\"type\":\"uint256\"}],\"name\":\"setconfigurationEtherPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPriceforDapp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferby\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"TokenPrice\",\"type\":\"uint256\"}],\"name\":\"setconfigurationTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"e\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LOG\",\"type\":\"event\"}]",
  "bytecode": "6060604052678ac7230489e800006000556001600460146101000a81548160ff0219169083151502179055506000600460156101000a81548160ff021916908315150217905550600060055560006006556000600d60006101000a81548160ff021916908315150217905550341561007657600080fd5b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550671bc16d674ec8000060016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c60008282540192505081905550612183806101a56000396000f300606060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101be578063095ea7b31461024c57806318160ddd146102a65780631b7949e2146102cf57806323b872dd146102f8578063313ce56714610371578063339a7670146103a057806333c6c1af146103c35780633eaaf86b146103fc5780633eb1d7771461042557806350c35227146104485780636a6b80771461049d57806370a08231146104b25780637cdd8419146104ff5780638a8146d0146105285780638da5cb5b1461053d57806395d89b41146105925780639890220b146106205780639b18d79a14610635578063a9059cbb1461065e578063b7009c97146106b8578063ba391bb2146106cd578063c040e6b8146106f6578063d78235cf1461071f578063dd62ed3e14610742578063e3e7519c146107ae578063eb9763ed146107d7578063f2fde38b14610850578063ff6387ad14610889575b600460159054906101000a900460ff16151561019057600080fd5b60006005541115156101a157600080fd5b600e5442111515156101b257600080fd5b6101bc34336108ac565b005b34156101c957600080fd5b6101d1610aac565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102115780820151818401526020810190506101f6565b50505050905090810190601f16801561023e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025757600080fd5b61028c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ae5565b604051808215151515815260200191505060405180910390f35b34156102b157600080fd5b6102b9610bd7565b6040518082815260200191505060405180910390f35b34156102da57600080fd5b6102e2610be0565b6040518082815260200191505060405180910390f35b341561030357600080fd5b610357600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610be6565b604051808215151515815260200191505060405180910390f35b341561037c57600080fd5b610384611025565b604051808260ff1660ff16815260200191505060405180910390f35b34156103ab57600080fd5b6103c1600480803590602001909190505061102a565b005b34156103ce57600080fd5b6103fa600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061118f565b005b341561040757600080fd5b61040f61122f565b6040518082815260200191505060405180910390f35b341561043057600080fd5b6104466004808035906020019091905050611235565b005b341561045357600080fd5b61045b61129b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104a857600080fd5b6104b06112c1565b005b34156104bd57600080fd5b6104e9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611496565b6040518082815260200191505060405180910390f35b341561050a57600080fd5b6105126114df565b6040518082815260200191505060405180910390f35b341561053357600080fd5b61053b6114e9565b005b341561054857600080fd5b610550611619565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561059d57600080fd5b6105a561163f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105e55780820151818401526020810190506105ca565b50505050905090810190601f1680156106125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561062b57600080fd5b610633611678565b005b341561064057600080fd5b61064861174f565b6040518082815260200191505060405180910390f35b341561066957600080fd5b61069e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611755565b604051808215151515815260200191505060405180910390f35b34156106c357600080fd5b6106cb6119fc565b005b34156106d857600080fd5b6106e0611b43565b6040518082815260200191505060405180910390f35b341561070157600080fd5b610709611b49565b6040518082815260200191505060405180910390f35b341561072a57600080fd5b6107406004808035906020019091905050611b4f565b005b341561074d57600080fd5b610798600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611bb5565b6040518082815260200191505060405180910390f35b34156107b957600080fd5b6107c1611c3c565b6040518082815260200191505060405180910390f35b34156107e257600080fd5b610836600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611c46565b604051808215151515815260200191505060405180910390f35b341561085b57600080fd5b610887600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e97565b005b341561089457600080fd5b6108aa60048080359060200190919050506120ba565b005b6000655af3107a40006003540283600654028115156108c757fe5b04905080600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561091857600080fd5b61096a81600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461212090919063ffffffff16565b600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109ff81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461213990919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6040805190810160405280600e81526020017f476f6c64204269747320436f696e00000000000000000000000000000000000081525081565b600081600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b600c5481565b6000808373ffffffffffffffffffffffffffffffffffffffff1614151515610c0d57600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610cd8575081600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610ce5575060008210155b8015610d715750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110155b1515610d7c57600080fd5b610dce82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461212090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ea082600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461212090919063ffffffff16565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f7282600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461213990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600a81565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561108657600080fd5b60005481600c54011115151561109b57600080fd5b80600c600082825401925050819055508060016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111eb57600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60005481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561129157600080fd5b8060058190555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131d57600080fd5b600d60009054906101000a900460ff16151561133857600080fd5b670de0b6b3a7640000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060026005819055506001600460156101000a81548160ff0219169083151502179055506000600460146101000a81548160ff021916908315150217905550426008819055506113df620d2f004261213990919063ffffffff16565b6009819055506113fd620d2f0060095461213990919063ffffffff16565b600a8190555061141b620d2f00600a5461213990919063ffffffff16565b600b8190555061143762278d004261213990919063ffffffff16565b600e81905550600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c60008282540192505081905550601e600381905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600654905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561154557600080fd5b6001600d60006101000a81548160ff02191690831515021790555060006005819055506000600460156101000a81548160ff021916908315150217905550600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c600082825403925050819055506000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f474243000000000000000000000000000000000000000000000000000000000081525081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116d457600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561174d57600080fd5b565b60065481565b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561177c57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156117cc575060008210155b80156118585750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110155b151561186357600080fd5b6118b582600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461212090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061194a82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461213990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a5857600080fd5b60016005819055506001600460156101000a81548160ff021916908315150217905550670de0b6b3a7640000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600881905550611ae4621669804261213990919063ffffffff16565b600e81905550600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600c600082825401925050819055506018600381905550565b60035481565b60055481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bab57600080fd5b8060068190555050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600354905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ca457600080fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611cf35750600082115b8015611d7e5750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15611e8b5781600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611e90565b600090505b9392505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ef357600080fd5b60008173ffffffffffffffffffffffffffffffffffffffff1614151515611f1957600080fd5b611fcc60016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461213990919063ffffffff16565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561211657600080fd5b8060038190555050565b600082821115151561212e57fe5b818303905092915050565b600080828401905083811015151561214d57fe5b80915050929150505600a165627a7a72305820db22907f789d5d2773d28287c3428e835227cfe66f259de025f2c7e5b41920320029"
}