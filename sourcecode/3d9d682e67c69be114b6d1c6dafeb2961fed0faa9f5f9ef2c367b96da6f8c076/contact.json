{
  "address": "0xaf8a215e81faea7c180ce22b72483525121813bd",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EGCCToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-01\n*/\n\npragma solidity ^0.4.18;\n/** ----------------------------------------------------------------------------------------------\n * ENGINE_Token by ENGINE Limited.\n * An ERC20 standard\n *\n * author: ENGINE Team\n */\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error.\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract ERC20 {\n\n    uint256 public totalSupply;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n\n    function allowance(address owner, address spender) public view returns (uint256);\n    function approve(address spender, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ninterface TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\n\n\ncontract TokenERC20 is ERC20, Ownable{\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8  public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    using SafeMath for uint256;\n    // Balances\n    mapping (address => uint256) balances;\n    // Allowances\n    mapping (address => mapping (address => uint256)) allowances;\n\n\n    // ----- Events -----\n    event Burn(address indexed from, uint256 value);\n\n\n    /**\n     * Constructor function\n     */\n    function TokenERC20(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public {\n        name = _tokenName;                                   // Set the name for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n        decimals = _decimals;\n\n        totalSupply = _initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balances[msg.sender] = totalSupply;                // Give the creator all initial tokens\n    }\n\n        /**\n     * @dev Fix for the ERC20 short address attack.\n     */\n    modifier onlyPayloadSize(uint size) {\n      if(msg.data.length < size + 4) {\n        revert();\n      }\n      _;\n    }\n    \n\n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowances[_owner][_spender];\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal returns(bool) {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balances[_from] >= _value);\n        // Check for overflows\n        require(balances[_to] + _value > balances[_to]);\n\n        require(_value >= 0);\n        // Save this for an assertion in the future\n        uint previousBalances = balances[_from].add(balances[_to]);\n         // SafeMath.sub will throw if there is not enough balance.\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[_from] + balances[_to] == previousBalances);\n\n        return true;\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value > 0);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        require((_value == 0) || (allowances[msg.sender][_spender] == 0));\n        allowances[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\n        if (approve(_spender, _value)) {\n            TokenRecipient spender = TokenRecipient(_spender);\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n        return false;\n    }\n\n\n  /**\n   * @dev Transfer tokens to multiple addresses\n   * @param _addresses The addresses that will receieve tokens\n   * @param _amounts The quantity of tokens that will be transferred\n   * @return True if the tokens are transferred correctly\n   */\n  function transferForMultiAddresses(address[] _addresses, uint256[] _amounts)  public returns (bool) {\n    for (uint256 i = 0; i < _addresses.length; i++) {\n      require(_addresses[i] != address(0));\n      require(_amounts[i] <= balances[msg.sender]);\n      require(_amounts[i] > 0);\n\n      // SafeMath.sub will throw if there is not enough balance.\n      balances[msg.sender] = balances[msg.sender].sub(_amounts[i]);\n      balances[_addresses[i]] = balances[_addresses[i]].add(_amounts[i]);\n      Transfer(msg.sender, _addresses[i], _amounts[i]);\n    }\n    return true;\n  }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns(bool) {\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n        balances[msg.sender] = balances[msg.sender].sub(_value);            // Subtract from the sender\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n        /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns(bool) {\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowances[_from][msg.sender]);    // Check allowance\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the targeted balance\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n        totalSupply = totalSupply.sub(_value);                                 // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n\n\n    /**\n     * approve should be called when allowances[_spender] == 0. To increment\n     * allowances value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        // Check for overflows\n        require(allowances[msg.sender][_spender].add(_addedValue) > allowances[msg.sender][_spender]);\n\n        allowances[msg.sender][_spender] =allowances[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowances[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowances[msg.sender][_spender] = 0;\n        } else {\n            allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\n        return true;\n    }\n\n\n}\n\n\ncontract EGCCToken is TokenERC20 {\n\n    function EGCCToken() TokenERC20(10000000000, \"Engine Token\", \"EGCC\", 18) public {\n\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferForMultiAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526004805460ff1916601217905534156200001d57600080fd5b6402540be400604080519081016040908152600c82527f456e67696e6520546f6b656e000000000000000000000000000000000000000060208301528051908101604052600481527f4547434300000000000000000000000000000000000000000000000000000000602082015260018054600160a060020a03191633600160a060020a031617905560126002838051620000bd92916020019062000112565b506003828051620000d392916020019062000112565b506004805460ff191660ff928316179081905516600a0a92909202600081815533600160a060020a031681526005602052604090205550620001b79050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200015557805160ff191683800117855562000185565b8280016001018555821562000185579182015b828111156200018557825182559160200191906001019062000168565b506200019392915062000197565b5090565b620001b491905b808211156200019357600081556001016200019e565b90565b61118280620001c76000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b5578063204009d2146101da57806323b872dd14610269578063313ce5671461029157806342966c68146102ba57806366188463146102d057806370a08231146102f257806379cc6790146103115780638da5cb5b1461033357806395d89b4114610362578063a9059cbb14610375578063cae9ca5114610397578063d73dd623146103fc578063dd62ed3e1461041e578063f2fde38b14610443575b600080fd5b341561010057600080fd5b610108610464565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014457808201518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018a57600080fd5b6101a1600160a060020a0360043516602435610502565b604051901515815260200160405180910390f35b34156101c057600080fd5b6101c86105a8565b60405190815260200160405180910390f35b34156101e557600080fd5b6101a16004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506105ae95505050505050565b341561027457600080fd5b6101a1600160a060020a03600435811690602435166044356107aa565b341561029c57600080fd5b6102a4610906565b60405160ff909116815260200160405180910390f35b34156102c557600080fd5b6101a160043561090f565b34156102db57600080fd5b6101a1600160a060020a03600435166024356109d3565b34156102fd57600080fd5b6101c8600160a060020a0360043516610acd565b341561031c57600080fd5b6101a1600160a060020a0360043516602435610ae8565b341561033e57600080fd5b610346610c33565b604051600160a060020a03909116815260200160405180910390f35b341561036d57600080fd5b610108610c42565b341561038057600080fd5b6101a1600160a060020a0360043516602435610cad565b34156103a257600080fd5b6101a160048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610cc195505050505050565b341561040757600080fd5b6101a1600160a060020a0360043516602435610dfe565b341561042957600080fd5b6101c8600160a060020a0360043581169060243516610edc565b341561044e57600080fd5b610462600160a060020a0360043516610f07565b005b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104fa5780601f106104cf576101008083540402835291602001916104fa565b820191906000526020600020905b8154815290600101906020018083116104dd57829003601f168201915b505050505081565b60008115806105345750600160a060020a03338116600090815260066020908152604080832093871683529290522054155b151561053f57600080fd5b600160a060020a03338116600081815260066020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6000805b83518110156107a05760008482815181106105c957fe5b90602001906020020151600160a060020a031614156105e757600080fd5b600160a060020a03331660009081526005602052604090205483828151811061060c57fe5b90602001906020020151111561062157600080fd5b600083828151811061062f57fe5b906020019060200201511161064357600080fd5b61068183828151811061065257fe5b90602001906020020151600160a060020a0333166000908152600560205260409020549063ffffffff610fa216565b600160a060020a0333166000908152600560205260409020556106f38382815181106106a957fe5b90602001906020020151600560008785815181106106c357fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff610fb416565b6005600086848151811061070357fe5b90602001906020020151600160a060020a0316815260208101919091526040016000205583818151811061073357fe5b90602001906020020151600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85848151811061077d57fe5b9060200190602002015160405190815260200160405180910390a36001016105b2565b5060019392505050565b6000600160a060020a03831615156107c157600080fd5b600160a060020a0384166000908152600560205260409020548211156107e657600080fd5b600082116107f357600080fd5b600160a060020a03841660009081526005602052604090205461081c908363ffffffff610fa216565b600160a060020a038086166000908152600560205260408082209390935590851681522054610851908363ffffffff610fb416565b600160a060020a03808516600090815260056020908152604080832094909455878316825260068152838220339093168252919091522054610899908363ffffffff610fa216565b600160a060020a03808616600081815260066020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60045460ff1681565b600160a060020a0333166000908152600560205260408120548290101561093557600080fd5b600160a060020a03331660009081526005602052604090205461095e908363ffffffff610fa216565b600160a060020a0333166000908152600560205260408120919091555461098b908363ffffffff610fa216565b600055600160a060020a0333167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a2506001919050565b600160a060020a03338116600090815260066020908152604080832093861683529290529081205480831115610a3057600160a060020a033381166000908152600660209081526040808320938816835292905290812055610a67565b610a40818463ffffffff610fa216565b600160a060020a033381166000908152600660209081526040808320938916835292905220555b600160a060020a0333811660008181526006602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526005602052604090205490565b600160a060020a03821660009081526005602052604081205482901015610b0e57600080fd5b600160a060020a0380841660009081526006602090815260408083203390941683529290522054821115610b4157600080fd5b600160a060020a038316600090815260056020526040902054610b6a908363ffffffff610fa216565b600160a060020a0380851660009081526005602090815260408083209490945560068152838220339093168252919091522054610bad908363ffffffff610fa216565b600160a060020a0380851660009081526006602090815260408083203390941683529290529081209190915554610bea908363ffffffff610fa216565b600055600160a060020a0383167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a250600192915050565b600154600160a060020a031681565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104fa5780601f106104cf576101008083540402835291602001916104fa565b6000610cba338484610fc3565b9392505050565b600080610cce8585610502565b15610df1575083600160a060020a038116638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d86578082015183820152602001610d6e565b50505050905090810190601f168015610db35780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610dd457600080fd5b6102c65a03f11515610de557600080fd5b50505060019150610df6565b600091505b509392505050565b600160a060020a033381166000908152600660209081526040808320938616835292905290812054610e308184610fb4565b11610e3a57600080fd5b600160a060020a03338116600090815260066020908152604080832093871683529290522054610e70908363ffffffff610fb416565b600160a060020a0333811660008181526006602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b60015433600160a060020a03908116911614610f2257600080fd5b600160a060020a0381161515610f3757600080fd5b600154600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610fae57fe5b50900390565b600082820183811015610cba57fe5b600080600160a060020a0384161515610fdb57600080fd5b600160a060020a0385166000908152600560205260409020548390101561100157600080fd5b600160a060020a0384166000908152600560205260409020548381011161102757600080fd5b600083101561103557600080fd5b600160a060020a038085166000908152600560205260408082205492881682529020546110679163ffffffff610fb416565b600160a060020a038616600090815260056020526040902054909150611093908463ffffffff610fa216565b600160a060020a0380871660009081526005602052604080822093909355908616815220546110c8908463ffffffff610fb416565b600160a060020a03808616600081815260056020526040908190209390935591908716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600160a060020a0380851660009081526005602052604080822054928816825290205401811461114b57fe5b5060019493505050505600a165627a7a723058204fb11d556f6c2ea998c885528014baedfcf1d6218584fa1ed170f9bea8dfd2380029"
}