{
  "address": "0x874c7d3ca019f303570e7382ffc0b75b0c223e13",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "p3Dank",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity ^0.5.0;\n//p3Dank.io\n//A never ending free for all strategy game\n//send 0.2 ETH to contract to play\n//you get 3 lives/plants/houses(it can be anything, you get 3)\n//you cant rebuy till your out\n//each life has a type\n//BLOCK smashes fork\n//FORK forks the chain\n//CHAIN adds the block\n//plants automatically grow over time \n//the older the plants get a bigger % bonus for selling\n//choose to sell 1 plant or attack at random every 7 hours \n//if your random attack wins the rock paper scissors...\n//you sell the targets plant for 50% its base value(no bonus)\n//sucessful attacks raise the value of every other plant, >>DONT MISS ATTACKS<<\n//sold plants have a bonus and reduce the value of every other plant. \n//Sell bonus is 2x after 42000 blocks, Max bonus of 4x after 69420 blocks\n//sell price = (total eth in contract) * (growth of plant being sold) / (total growth in game) + (big plant bonus)\n//1% dev cut 99% back to players.\n//If this works as intended the game expands and contracts to any amount of players and never ends\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n        }\n    }\n\n\n\n//import \"browser/safemath.sol\";\n\ncontract p3Dank  {\n    using SafeMath for uint;\n    uint256 public _totalhouses; // total number of houses in the game, used to calc divs\n    uint256 public blocksbeforeaction = 1680;// blocks between player action. 7 hours / 420 minutes / 3 moves per day\n    uint256 public nextFormation;// next spot in formation\n    mapping(address => uint256)public _playerhouses; // number of houses owned by player\n    mapping(address => uint256)public lastmove;//blocknumber lastMove\n    mapping(address => uint256) buyblock;// block that houses were purchased by a player\n    address payable happydev = 0xDC6dfe8040fc162Ab318De99c63Ec2cd0e203010; // dev cut\n\n   struct house { //houses for the battlefield\n       address owner; //who owns the house\n       uint8 rpstype; //what type of house is it 1=roc 2=pap 3=sis\n   }\n\n    mapping(uint256 => house)public formation;// the playing field\n\n    //modifiers\n\n    modifier ishuman() {//\"real\" players only\n        address _addr = msg.sender;\n        uint256 _codeLength;\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    modifier canmove() {\n          address sender = msg.sender;\n          require(_playerhouses[sender] > 0);\n          require(canimoveyet());\n          _;\n    }\n\n    //events\n\n    event sell (address seller, uint256 plantsize, uint256 cashout);\n    event battle(address attacker, uint8 ktype, address defender);\n    event win (uint256 position, uint256 sizesold, uint256 amountsent);  \n    event buyin (address buyer, uint256 blockbuy);  \n\n    function () external payable{}\n\n    function buyhouses() ishuman() public payable { // houses... plants... lives ... its all good\n        uint256 value = msg.value;\n        if(value == 200 finney){// buying 3 houses costs 0.2 eth\n            address sender = msg.sender;\n            if(_playerhouses[sender] == 0 ){ // check that user has no houses\n                _playerhouses[sender] = 3; // add houses to players count\n                uint256 next = nextFormation;\n                formation[next++] = house(sender, 1);// add houses to playing field\n                formation[next++] = house(sender, 2);// roc = 1, pap =2, sis = 3.\n                formation[next++] = house(sender, 3);\n                nextFormation = next;\n                lastmove[sender] = block.number; // reset lastMove to prevent people from attacking right away\n                buyblock[sender] = block.number; // log the buy block of the sender\n                _totalhouses += 3;// update totalSupply\n                happydev.transfer(2 finney);\n                totaldivpts += 3000;\n                emit buyin(sender, buyblock[sender]);\n                } } }\n\n    bool gameon;\n\n    function startgame() public payable {\n        uint256 value = msg.value;\n        require(value == 200 finney);// buying 3 houses costs 0.2 eth\n        require (gameon == false);\n        address sender = msg.sender;\n        _playerhouses[sender] = _playerhouses[sender]+3;// add houses to players count\n        formation[nextFormation] = house(sender, 1);// add houses to playing field\n        nextFormation++;\n        formation[nextFormation] = house(sender, 2);// roc = 1, pap =2, sis = 3.\n        nextFormation++;\n        formation[nextFormation] = house(sender, 3);\n        nextFormation++;\n        lastmove[sender] = block.number; // reset lastMove to prevent people from attacking right away\n        buyblock[sender] = block.number; // log the buy block of the sender\n        _totalhouses = _totalhouses+3;// update totalSupply\n        happydev.transfer(2 finney);\n        lastupdateblock = block.number;\n        gameon = true;\n        totaldivpts += 3000;\n        emit buyin(sender, buyblock[sender]);\n    }\n\n    //divsection\n    uint256 lastupdateblock;\n    uint256 totaldivpts;\n\n    function updateglobal() internal {                       \n        totaldivpts = gametotaldivs();\n        lastupdateblock = block.number;//updated\n        lastmove[msg.sender] = block.number; // reset lastmove of attacker\n    }\n\n    function rekt(uint8 typeToKill) internal {\n        updateglobal();\n        uint256 attacked = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, tx.origin))) % nextFormation;\n        uint256 _rpstype = formation[attacked].rpstype;\n        address killed = formation[attacked].owner;//set address of attacked player\n        address payable sender = msg.sender;\n        if(_rpstype == typeToKill) {\n            formation[attacked] = formation[--nextFormation];//reform playing field\n            delete formation[nextFormation];  //delete unused formation\n            uint256 playerdivpts = block.number.sub(buyblock[killed]).add(1000);//figure out how big robbed plant is\n            uint256 robbed = (address(this).balance).mul(playerdivpts).div(totaldivpts).div(2); //figure out how much was robbed\n            totaldivpts = totaldivpts.sub(playerdivpts); //adjust total div points\n            _totalhouses--;//update total houses in game\n            _playerhouses[killed]--;//update attacked players houses\n            sender.transfer(robbed);//pay the robber\n            emit win(attacked, playerdivpts, robbed);  \n        }\n        emit battle(sender, typeToKill, killed);\n        } \n  \n        \n\n    function rockattack() canmove() public { //rock attack function\n        rekt(3);\n        }\n\n    function sisattack() canmove() public { //sicssor attack function\n        rekt(1);\n        }\n\n    function papattack() canmove() public {//paper attack function\n        rekt(2);\n        }\n\n    function sellhouse (uint256 selling) canmove() public {// house sell function\n        address payable sender = msg.sender;\n        address beingsold = formation[selling].owner;\n        if (beingsold == sender){ // how to comfirm sender is owner\n            updateglobal();\n            uint256 next = --nextFormation;\n            formation[selling] = formation[next];\n            delete formation[next];\n            _totalhouses--;//update total houses in game\n            _playerhouses[sender]--;//update selling players houses\n            uint256 maxbuyblock = 69420;\n            uint256 playerdivpts = block.number.sub(buyblock[sender]).add(1000);\n            uint256 sold;\n            if (playerdivpts >= maxbuyblock) {\n                sold = (address(this).balance).mul(maxbuyblock * 4).div(totaldivpts);\n                }\n            else {\n                uint256 payoutmultiplier = playerdivpts.mul(playerdivpts).mul(10000).div(1953640000).add(10000);\n                sold = (address(this).balance).mul(playerdivpts).mul(payoutmultiplier).div(totaldivpts).div(10000);\n            }\n            totaldivpts = totaldivpts.sub(playerdivpts); //adjust total div points\n            sender.transfer(sold);//payout\n            emit sell(sender, playerdivpts, sold);\n            } }         \n\n\n    //view functions\n    function singleplantdivs ()public view returns(uint256){ //how big are are my plants?\n        return(block.number.sub(buyblock[msg.sender]).add(1000));\n    }\n    function howmanyplants ()public view returns(uint256){ //how many plants do I have?\n        return(_playerhouses[msg.sender]);\n    }\n    function whatblockmove ()public view returns(uint256){  // what block # can I make my next move at\n        return(lastmove[msg.sender]).add(blocksbeforeaction);\n    }\n    function canimoveyet ()public view returns(bool){ //can i move\n        if (blocksbeforeaction <= (block.number).sub(lastmove[msg.sender])) return true;\n    }\n    function howmucheth ()public view returns(uint256){//how much eth is in the contract\n        return address(this).balance;\n    }\n    function gametotaldivs ()public view returns(uint256){//how many div points are in the game right now\n        return (block.number).sub(lastupdateblock).mul(_totalhouses).add(totaldivpts);\n    }\n    function singleplantpayout ()public view returns(uint256){\n        uint256 playerdivpts = block.number.sub(buyblock[msg.sender]).add(1000);\n        uint256 maxbuyblock = 69420;\n        if (playerdivpts >= maxbuyblock) {\n            return (address(this).balance).mul(maxbuyblock * 4).div(totaldivpts);\n        }\n        else {\n            uint256 payoutmultiplier = playerdivpts.mul(playerdivpts).mul(10000).div(1953640000).add(10000);\n            return (address(this).balance).mul(playerdivpts).mul(payoutmultiplier).div(totaldivpts).div(10000);\n        }\n    }\n\n//thanks for playing\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"rockattack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"papattack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalhouses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"singleplantpayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastmove\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextFormation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"singleplantdivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gametotaldivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howmucheth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"howmanyplants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whatblockmove\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"formation\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"rpstype\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyhouses\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startgame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksbeforeaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sisattack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_playerhouses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canimoveyet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"selling\",\"type\":\"uint256\"}],\"name\":\"sellhouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"plantsize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cashout\",\"type\":\"uint256\"}],\"name\":\"sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"attacker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ktype\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"defender\",\"type\":\"address\"}],\"name\":\"battle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"position\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sizesold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountsent\",\"type\":\"uint256\"}],\"name\":\"win\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockbuy\",\"type\":\"uint256\"}],\"name\":\"buyin\",\"type\":\"event\"}]",
  "bytecode": "608060405261069060015573dc6dfe8040fc162ab318de99c63ec2cd0e203010600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006b57600080fd5b50611e798061007b6000396000f3fe608060405260043610610106576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062f696f41461010857806306ececcb1461011f578063126879e6146101365780632dbb323f14610161578063500d7c741461018c578063573074f9146101f15780635aa8ad821461021c5780635f3ebe0a1461024757806363615abf146102725780638da12b2b1461029d578063926d9181146102c85780639d5e2e1e146102f3578063a81005bf1461037b578063aaaea04714610385578063cbc774ba1461038f578063d0ac7e1e146103ba578063d5a0eb97146103d1578063e5ec5d8a14610436578063f0385bc414610465575b005b34801561011457600080fd5b5061011d6104a0565b005b34801561012b57600080fd5b50610134610513565b005b34801561014257600080fd5b5061014b610586565b6040518082815260200191505060405180910390f35b34801561016d57600080fd5b5061017661058c565b6040518082815260200191505060405180910390f35b34801561019857600080fd5b506101db600480360360208110156101af57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610714565b6040518082815260200191505060405180910390f35b3480156101fd57600080fd5b5061020661072c565b6040518082815260200191505060405180910390f35b34801561022857600080fd5b50610231610732565b6040518082815260200191505060405180910390f35b34801561025357600080fd5b5061025c61079f565b6040518082815260200191505060405180910390f35b34801561027e57600080fd5b506102876107e3565b6040518082815260200191505060405180910390f35b3480156102a957600080fd5b506102b2610802565b6040518082815260200191505060405180910390f35b3480156102d457600080fd5b506102dd610849565b6040518082815260200191505060405180910390f35b3480156102ff57600080fd5b5061032c6004803603602081101561031657600080fd5b81019080803590602001909291905050506108a4565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260ff1660ff1681526020019250505060405180910390f35b6103836108f5565b005b61038d610e12565b005b34801561039b57600080fd5b506103a4611302565b6040518082815260200191505060405180910390f35b3480156103c657600080fd5b506103cf611308565b005b3480156103dd57600080fd5b50610420600480360360208110156103f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061137b565b6040518082815260200191505060405180910390f35b34801561044257600080fd5b5061044b611393565b604051808215151515815260200191505060405180910390f35b34801561047157600080fd5b5061049e6004803603602081101561048857600080fd5b81019080803590602001909291905050506113fe565b005b60003390506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156104f357600080fd5b6104fb611393565b151561050657600080fd5b61051060036118c7565b50565b60003390506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561056657600080fd5b61056e611393565b151561057957600080fd5b61058360026118c7565b50565b60005481565b6000806105f56103e86105e7600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205443611d6590919063ffffffff16565b611d8190919063ffffffff16565b9050600062010f2c9050808210151561065257610649600a5461063b600484023073ffffffffffffffffffffffffffffffffffffffff1631611d9d90919063ffffffff16565b611dce90919063ffffffff16565b92505050610711565b60006106a56127106106976374722e4061068961271061067b898a611d9d90919063ffffffff16565b611d9d90919063ffffffff16565b611dce90919063ffffffff16565b611d8190919063ffffffff16565b905061070b6127106106fd600a546106ef856106e1893073ffffffffffffffffffffffffffffffffffffffff1631611d9d90919063ffffffff16565b611d9d90919063ffffffff16565b611dce90919063ffffffff16565b611dce90919063ffffffff16565b93505050505b90565b60046020528060005260406000206000915090505481565b60025481565b600061079a6103e861078c600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205443611d6590919063ffffffff16565b611d8190919063ffffffff16565b905090565b60006107de600a546107d06000546107c260095443611d6590919063ffffffff16565b611d9d90919063ffffffff16565b611d8190919063ffffffff16565b905090565b60003073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600061089f600154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d8190919063ffffffff16565b905090565b60076020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b60003390506000813b9050600081141515610978576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736f7272792068756d616e73206f6e6c7900000000000000000000000000000081525060200191505060405180910390fd5b60003490506702c68af0bb140000811415610e0d5760003390506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610e0b5760038060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600254905060408051908101604052808373ffffffffffffffffffffffffffffffffffffffff168152602001600160ff168152506007600083806001019450815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555090505060408051908101604052808373ffffffffffffffffffffffffffffffffffffffff168152602001600260ff168152506007600083806001019450815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555090505060408051908101604052808373ffffffffffffffffffffffffffffffffffffffff168152602001600360ff168152506007600083806001019450815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff1602179055509050508060028190555043600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555043600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060036000808282540192505081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc66071afd498d00009081150290604051600060405180830381858888f19350505050158015610d4c573d6000803e3d6000fd5b50610bb8600a600082825401925050819055507f29cbdc8696d25e9d6dba33c340209a56bd7c9b18a228de184c72bcdb51fd798382600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505b505b505050565b60003490506702c68af0bb14000081141515610e2d57600080fd5b60001515600860009054906101000a900460ff161515141515610e4f57600080fd5b600033905060038060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060408051908101604052808273ffffffffffffffffffffffffffffffffffffffff168152602001600160ff1681525060076000600254815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555090505060026000815480929190600101919050555060408051908101604052808273ffffffffffffffffffffffffffffffffffffffff168152602001600260ff1681525060076000600254815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555090505060026000815480929190600101919050555060408051908101604052808273ffffffffffffffffffffffffffffffffffffffff168152602001600360ff1681525060076000600254815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908360ff16021790555090505060026000815480929190600101919050555043600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555043600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360005401600081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc66071afd498d00009081150290604051600060405180830381858888f1935050505015801561121f573d6000803e3d6000fd5b50436009819055506001600860006101000a81548160ff021916908315150217905550610bb8600a600082825401925050819055507f29cbdc8696d25e9d6dba33c340209a56bd7c9b18a228de184c72bcdb51fd798381600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60015481565b60003390506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561135b57600080fd5b611363611393565b151561136e57600080fd5b61137860016118c7565b50565b60036020528060005260406000206000915090505481565b60006113e7600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205443611d6590919063ffffffff16565b6001541115156113fa57600190506113fb565b5b90565b60003390506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561145157600080fd5b611459611393565b151561146457600080fd5b600033905060006007600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118c1576114e0611df2565b600060026000815460019003919050819055905060076000828152602001908152602001600020600760008781526020019081526020016000206000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900460ff168160000160146101000a81548160ff021916908360ff16021790555090505060076000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690555050600080815480929190600190039190505550600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600062010f2c905060006116d56103e86116c7600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205443611d6590919063ffffffff16565b611d8190919063ffffffff16565b90506000828210151561172a57611723600a54611715600486023073ffffffffffffffffffffffffffffffffffffffff1631611d9d90919063ffffffff16565b611dce90919063ffffffff16565b90506117e7565b600061177d61271061176f6374722e40611761612710611753898a611d9d90919063ffffffff16565b611d9d90919063ffffffff16565b611dce90919063ffffffff16565b611d8190919063ffffffff16565b90506117e36127106117d5600a546117c7856117b9893073ffffffffffffffffffffffffffffffffffffffff1631611d9d90919063ffffffff16565b611d9d90919063ffffffff16565b611dce90919063ffffffff16565b611dce90919063ffffffff16565b9150505b6117fc82600a54611d6590919063ffffffff16565b600a819055508573ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611848573d6000803e3d6000fd5b507f6a2724624e431447b8377988749647ad8f645528473ec819288f5f3f6ae36ce3868383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a1505050505b50505050565b6118cf611df2565b6000600254424432604051602001808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019350505050604051602081830303815290604052805190602001206001900481151561195357fe5b06905060006007600083815260200190815260200160002060000160149054906101000a900460ff1660ff16905060006007600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060003390508460ff16831415611cb95760076000600260008154600190039190508190558152602001908152602001600020600760008681526020019081526020016000206000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000820160149054906101000a900460ff168160000160146101000a81548160ff021916908360ff160217905550905050600760006002548152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff021916905550506000611b546103e8611b46600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205443611d6590919063ffffffff16565b611d8190919063ffffffff16565b90506000611ba96002611b9b600a54611b8d863073ffffffffffffffffffffffffffffffffffffffff1631611d9d90919063ffffffff16565b611dce90919063ffffffff16565b611dce90919063ffffffff16565b9050611bc082600a54611d6590919063ffffffff16565b600a81905550600080815480929190600190039190505550600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611c6e573d6000803e3d6000fd5b507f3f2107682058d2a4392e722980ab3dc4e44f7ac40d6b5dc32ace663573f22b0286838360405180848152602001838152602001828152602001935050505060405180910390a150505b7f83fbf6803ea5e7239622b9ebecc00ef4eeef7448e8bea62ef56e04be3f766325818684604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15050505050565b6000828211151515611d7657600080fd5b818303905092915050565b60008183019050828110151515611d9757600080fd5b92915050565b600081830290506000831480611dbd5750818382811515611dba57fe5b04145b1515611dc857600080fd5b92915050565b60008082111515611dde57600080fd5b8183811515611de957fe5b04905092915050565b611dfa61079f565b600a819055504360098190555043600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555056fea165627a7a7230582080c96daa7f4511005d6e8978424418234d3f90a5d450be3be628fc2adde39e980029"
}