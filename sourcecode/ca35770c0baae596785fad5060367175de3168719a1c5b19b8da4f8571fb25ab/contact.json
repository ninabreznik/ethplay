{
  "address": "0x5edc1a266e8b2c5e8086d373725df0690af7e3ea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "YottaCoin",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-30\n*/\n\npragma solidity ^0.4.24;\n\n// File: SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: FrozenChecker.sol\n\n/**\n * @title FrozenChecker\n * @dev Check account by frozen rules\n */\nlibrary FrozenChecker {\n\n    using SafeMath for uint256;\n\n    /**\n     * Rule for each address\n     */\n    struct Rule {\n        uint256 timeT;\n        uint8 initPercent;\n        uint256[] periods;\n        uint8[] percents;\n    }\n\n    function check(Rule storage self, uint256 totalFrozenValue) internal view returns (uint256) {\n        if (totalFrozenValue == uint256(0)) {\n            return 0;\n        }\n        //uint8 temp = self.initPercent;\n        if (self.timeT == uint256(0) || self.timeT > now) {\n            return totalFrozenValue.sub(totalFrozenValue.mul(self.initPercent).div(100));\n        }\n        for (uint256 i = 0; i < self.periods.length.sub(1); i = i.add(1)) {\n            if (now >= self.timeT.add(self.periods[i]) && now < self.timeT.add(self.periods[i.add(1)])) {\n                return totalFrozenValue.sub(totalFrozenValue.mul(self.percents[i]).div(100));\n            }\n        }\n        if (now >= self.timeT.add(self.periods[self.periods.length.sub(1)])) {\n            return totalFrozenValue.sub(totalFrozenValue.mul(self.percents[self.periods.length.sub(1)]).div(100));\n        }\n    }\n\n}\n\n// File: FrozenValidator.sol\n\nlibrary FrozenValidator {\n    \n    using SafeMath for uint256;\n    using FrozenChecker for FrozenChecker.Rule;\n\n    struct Validator {\n        mapping(address => IndexValue) data;\n        KeyFlag[] keys;\n        uint256 size;\n    }\n\n    struct IndexValue {\n        uint256 keyIndex; \n        FrozenChecker.Rule rule;\n        mapping (address => uint256) frozenBalances;\n    }\n\n    struct KeyFlag { \n        address key; \n        bool deleted; \n    }\n\n    function addRule(Validator storage self, address key, uint8 initPercent, uint256[] periods, uint8[] percents) internal returns (bool replaced) {\n        //require(self.size <= 10);\n        require(key != address(0));\n        require(periods.length == percents.length);\n        require(periods.length > 0);\n        require(periods[0] == uint256(0));\n        require(initPercent <= percents[0]);\n        for (uint256 i = 1; i < periods.length; i = i.add(1)) {\n            require(periods[i.sub(1)] < periods[i]);\n            require(percents[i.sub(1)] <= percents[i]);\n        }\n        require(percents[percents.length.sub(1)] == 100);\n        FrozenChecker.Rule memory rule = FrozenChecker.Rule(0, initPercent, periods, percents);\n        uint256 keyIndex = self.data[key].keyIndex;\n        self.data[key].rule = rule;\n        if (keyIndex > 0) {\n            return true;\n        } else {\n            keyIndex = self.keys.length++;\n            self.data[key].keyIndex = keyIndex.add(1);\n            self.keys[keyIndex].key = key;\n            self.size++;\n            return false;\n        }\n    }\n\n    function removeRule(Validator storage self, address key) internal returns (bool success) {\n        uint256 keyIndex = self.data[key].keyIndex;\n        if (keyIndex == 0) {\n            return false;\n        }\n        delete self.data[key];\n        self.keys[keyIndex.sub(1)].deleted = true;\n        self.size--;\n        return true;\n    }\n\n    function containRule(Validator storage self, address key) internal view returns (bool) {\n        return self.data[key].keyIndex > 0;\n    }\n\n    function addTimeT(Validator storage self, address addr, uint256 timeT) internal returns (bool) {\n        require(timeT > now);\n        self.data[addr].rule.timeT = timeT;\n        return true;\n    }\n\n    function addFrozenBalance(Validator storage self, address from, address to, uint256 value) internal returns (uint256) {\n        self.data[from].frozenBalances[to] = self.data[from].frozenBalances[to].add(value);\n        return self.data[from].frozenBalances[to];\n    }\n\n    function validate(Validator storage self, address addr) internal view returns (uint256) {\n        uint256 frozenTotal = 0;\n        for (uint256 i = iterateStart(self); iterateValid(self, i); i = iterateNext(self, i)) {\n            address ruleaddr = iterateGet(self, i);\n            FrozenChecker.Rule storage rule = self.data[ruleaddr].rule;\n            frozenTotal = frozenTotal.add(rule.check(self.data[ruleaddr].frozenBalances[addr]));\n        }\n        return frozenTotal;\n    }\n\n\n    function iterateStart(Validator storage self) internal view returns (uint256 keyIndex) {\n        return iterateNext(self, uint256(-1));\n    }\n\n    function iterateValid(Validator storage self, uint256 keyIndex) internal view returns (bool) {\n        return keyIndex < self.keys.length;\n    }\n\n    function iterateNext(Validator storage self, uint256 keyIndex) internal view returns (uint256) {\n        keyIndex++;\n        while (keyIndex < self.keys.length && self.keys[keyIndex].deleted) {\n            keyIndex++;\n        }\n        return keyIndex;\n    }\n\n    function iterateGet(Validator storage self, uint256 keyIndex) internal view returns (address) {\n        return self.keys[keyIndex].key;\n    }\n}\n\n// File: YottaCoin.sol\n\ncontract YottaCoin {\n\n    using SafeMath for uint256;\n    using FrozenValidator for FrozenValidator.Validator;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    //--------------------------------  Basic Info  -------------------------------------//\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    //--------------------------------  Basic Info  -------------------------------------//\n\n\n    //--------------------------------  Admin Info  -------------------------------------//\n\n    address internal admin;  //Admin address\n\n    /**\n     * @dev Change admin address\n     * @param newAdmin New admin address\n     */\n    function changeAdmin(address newAdmin) public returns (bool)  {\n        require(msg.sender == admin);\n        require(newAdmin != address(0));\n        uint256 balAdmin = balances[admin];\n        balances[newAdmin] = balances[newAdmin].add(balAdmin);\n        balances[admin] = 0;\n        admin = newAdmin;\n        emit Transfer(admin, newAdmin, balAdmin);\n        return true;\n    }\n\n    //--------------------------------  Admin Info  -------------------------------------//\n\n\n    //--------------------------  Events & Constructor  ------------------------------//\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // constructor\n    constructor(string tokenName, string tokenSymbol, uint8 tokenDecimals, uint256 totalTokenSupply ) public {\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = tokenDecimals;\n        totalSupply = totalTokenSupply;\n        admin = msg.sender;\n        balances[msg.sender] = totalTokenSupply;\n        emit Transfer(0x0, msg.sender, totalTokenSupply);\n\n    }\n\n    //--------------------------  Events & Constructor  ------------------------------//\n\n\n\n    //------------------------------ Account lock  -----------------------------------//\n\n    // 同一个账户满足任意冻结条件均被冻结\n    mapping (address => bool) frozenAccount; //无限期冻结的账户\n    mapping (address => uint256) frozenTimestamp; // 有限期冻结的账户\n\n    /**\n     * 查询账户是否存在锁定时间戳\n     */\n    function getFrozenTimestamp(address _target) public view returns (uint256) {\n        return frozenTimestamp[_target];\n    }\n\n    /**\n     * 查询账户是否被锁定\n     */\n    function getFrozenAccount(address _target) public view returns (bool) {\n        return frozenAccount[_target];\n    }\n\n    /**\n     * 锁定账户\n     */\n    function freeze(address _target, bool _freeze) public returns (bool) {\n        require(msg.sender == admin);\n        require(_target != admin);\n        frozenAccount[_target] = _freeze;\n        return true;\n    }\n\n    /**\n     * 通过时间戳锁定账户\n     */\n    function freezeWithTimestamp(address _target, uint256 _timestamp) public returns (bool) {\n        require(msg.sender == admin);\n        require(_target != admin);\n        frozenTimestamp[_target] = _timestamp;\n        return true;\n    }\n\n    /**\n     * 批量锁定账户\n     */\n    function multiFreeze(address[] _targets, bool[] _freezes) public returns (bool) {\n        require(msg.sender == admin);\n        require(_targets.length == _freezes.length);\n        uint256 len = _targets.length;\n        require(len > 0);\n        for (uint256 i = 0; i < len; i = i.add(1)) {\n            address _target = _targets[i];\n            require(_target != admin);\n            bool _freeze = _freezes[i];\n            frozenAccount[_target] = _freeze;\n        }\n        return true;\n    }\n\n    /**\n     * 批量通过时间戳锁定账户\n     */\n    function multiFreezeWithTimestamp(address[] _targets, uint256[] _timestamps) public returns (bool) {\n        require(msg.sender == admin);\n        require(_targets.length == _timestamps.length);\n        uint256 len = _targets.length;\n        require(len > 0);\n        for (uint256 i = 0; i < len; i = i.add(1)) {\n            address _target = _targets[i];\n            require(_target != admin);\n            uint256 _timestamp = _timestamps[i];\n            frozenTimestamp[_target] = _timestamp;\n        }\n        return true;\n    }\n\n    //------------------------------  Account lock  -----------------------------------//\n\n\n\n\n    //--------------------------      Frozen rules      ------------------------------//\n\n    FrozenValidator.Validator validator;\n\n    function addRule(address addr, uint8 initPercent, uint256[] periods, uint8[] percents) public returns (bool) {\n        require(msg.sender == admin);\n        return validator.addRule(addr, initPercent, periods, percents);\n    }\n\n    function addTimeT(address addr, uint256 timeT) public returns (bool) {\n        require(msg.sender == admin);\n        return validator.addTimeT(addr, timeT);\n    }\n\n    function removeRule(address addr) public returns (bool) {\n        require(msg.sender == admin);\n        return validator.removeRule(addr);\n    }\n\n    //--------------------------      Frozen rules      ------------------------------//\n\n\n\n\n    //-------------------------  Standard ERC20 Interfaces  --------------------------//\n\n    function multiTransfer(address[] _tos, uint256[] _values) public returns (bool) {\n        require(!frozenAccount[msg.sender]);\n        require(now > frozenTimestamp[msg.sender]);\n        require(_tos.length == _values.length);\n        uint256 len = _tos.length;\n        require(len > 0);\n        uint256 amount = 0;\n        for (uint256 i = 0; i < len; i = i.add(1)) {\n            amount = amount.add(_values[i]);\n        }\n        require(amount <= balances[msg.sender].sub(validator.validate(msg.sender)));\n        for (uint256 j = 0; j < len; j = j.add(1)) {\n            address _to = _tos[j];\n            if (validator.containRule(msg.sender) && msg.sender != _to) {\n                validator.addFrozenBalance(msg.sender, _to, _values[j]);\n            }\n            balances[_to] = balances[_to].add(_values[j]);\n            balances[msg.sender] = balances[msg.sender].sub(_values[j]);\n            emit Transfer(msg.sender, _to, _values[j]);\n        }\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        transferfix(_to, _value);\n        return true;\n    }\n\n    function transferfix(address _to, uint256 _value) public {\n        require(!frozenAccount[msg.sender]);\n        require(now > frozenTimestamp[msg.sender]);\n        require(balances[msg.sender].sub(_value) >= validator.validate(msg.sender));\n\n        if (validator.containRule(msg.sender) && msg.sender != _to) {\n            validator.addFrozenBalance(msg.sender, _to, _value);\n        }\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(!frozenAccount[_from]);\n        require(now > frozenTimestamp[_from]);\n        require(_value <= balances[_from].sub(validator.validate(_from)));\n        require(_value <= allowed[_from][msg.sender]);\n\n        if (validator.containRule(_from) && _from != _to) {\n            validator.addFrozenBalance(_from, _to, _value);\n        }\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner]; //.sub(validator.validate(_owner));\n    }\n\n    //-------------------------  Standard ERC20 Interfaces  --------------------------//\n\n    function kill() public {\n        require(msg.sender == admin);\n        selfdestruct(admin);\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"initPercent\",\"type\":\"uint8\"},{\"name\":\"periods\",\"type\":\"uint256[]\"},{\"name\":\"percents\",\"type\":\"uint8[]\"}],\"name\":\"addRule\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"timeT\",\"type\":\"uint256\"}],\"name\":\"addTimeT\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_freezes\",\"type\":\"bool[]\"}],\"name\":\"multiFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferfix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"freezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"name\":\"multiFreezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeRule\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"name\":\"totalTokenSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b50604051620036ad380380620036ad8339810180604052810190808051820192919060200180518201929190602001805190602001909291908051906020019092919050505083600290805190602001906200006f92919062000189565b5082600390805190602001906200008892919062000189565b5081600460006101000a81548160ff021916908360ff1602179055508060058190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505062000238565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001cc57805160ff1916838001178555620001fd565b82800160010185558215620001fd579182015b82811115620001fc578251825591602001919060010190620001df565b5b5090506200020c919062000210565b5090565b6200023591905b808211156200023157600081600090555060010162000217565b5090565b90565b61346580620002486000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d578063095ea7b3146101bd57806318160ddd146102225780631e89d5451461024d57806323b872dd1461030e578063313ce5671461039357806341c0e1b5146103c457806370a08231146103db5780638f2839701461043257806395d89b411461048d57806399f9b55e1461051d578063a2c8a9271461060b578063a9059cbb14610670578063bf120ae5146106d5578063c49778071461073c578063c878dad914610797578063d54c8a5614610858578063d70907b0146108a5578063d950c4321461090a578063dd62ed3e146109cb578063df21950f14610a42578063e6ad5bc714610a9d575b600080fd5b34801561013957600080fd5b50610142610af4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610182578082015181840152602081019050610167565b50505050905090810190601f1680156101af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c957600080fd5b50610208600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b92565b604051808215151515815260200191505060405180910390f35b34801561022e57600080fd5b50610237610c84565b6040518082815260200191505060405180910390f35b34801561025957600080fd5b506102f46004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050610c8a565b604051808215151515815260200191505060405180910390f35b34801561031a57600080fd5b50610379600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110c9565b604051808215151515815260200191505060405180910390f35b34801561039f57600080fd5b506103a861157e565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103d057600080fd5b506103d9611591565b005b3480156103e757600080fd5b5061041c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611628565b6040518082815260200191505060405180910390f35b34801561043e57600080fd5b50610473600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611670565b604051808215151515815260200191505060405180910390f35b34801561049957600080fd5b506104a2611939565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104e25780820151818401526020810190506104c7565b50505050905090810190601f16801561050f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561052957600080fd5b506105f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506119d7565b604051808215151515815260200191505060405180910390f35b34801561061757600080fd5b50610656600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611a59565b604051808215151515815260200191505060405180910390f35b34801561067c57600080fd5b506106bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ad5565b604051808215151515815260200191505060405180910390f35b3480156106e157600080fd5b50610722600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611aeb565b604051808215151515815260200191505060405180910390f35b34801561074857600080fd5b5061077d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c07565b604051808215151515815260200191505060405180910390f35b3480156107a357600080fd5b5061083e6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611c5d565b604051808215151515815260200191505060405180910390f35b34801561086457600080fd5b506108a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e02565b005b3480156108b157600080fd5b506108f0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612114565b604051808215151515815260200191505060405180910390f35b34801561091657600080fd5b506109b1600480360381019080803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061221d565b604051808215151515815260200191505060405180910390f35b3480156109d757600080fd5b50610a2c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123af565b6040518082815260200191505060405180910390f35b348015610a4e57600080fd5b50610a83600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612436565b604051808215151515815260200191505060405180910390f35b348015610aa957600080fd5b50610ade600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124af565b6040518082815260200191505060405180910390f35b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b8a5780601f10610b5f57610100808354040283529160200191610b8a565b820191906000526020600020905b815481529060010190602001808311610b6d57829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60055481565b600080600080600080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610cec57600080fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442111515610d3957600080fd5b86518851141515610d4957600080fd5b87519450600085111515610d5c57600080fd5b60009350600092505b84831015610db457610d978784815181101515610d7e57fe5b90602001906020020151856124f890919063ffffffff16565b9350610dad6001846124f890919063ffffffff16565b9250610d65565b610e18610dcb33600961251490919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265290919063ffffffff16565b8411151515610e2657600080fd5b600091505b848210156110ba578782815181101515610e4157fe5b906020019060200201519050610e6133600961266b90919063ffffffff16565b8015610e9957508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610ecf57610ecd33828985815181101515610eb157fe5b9060200190602002015160096126bc909392919063ffffffff16565b505b610f378783815181101515610ee057fe5b906020019060200201516000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124f890919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fe18783815181101515610f8a57fe5b906020019060200201516000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265290919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef898581518110151561108057fe5b906020019060200201516040518082815260200191505060405180910390a36110b36001836124f890919063ffffffff16565b9150610e2b565b60019550505050505092915050565b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561112457600080fd5b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544211151561117157600080fd5b6111d561118885600961251490919063ffffffff16565b6000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265290919063ffffffff16565b82111515156111e357600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561126e57600080fd5b61128284600961266b90919063ffffffff16565b80156112ba57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b156112d9576112d784848460096126bc909392919063ffffffff16565b505b61132a826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265290919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113bd826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124f890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061148e82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265290919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600460009054906101000a900460ff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115ed57600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116cf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561170b57600080fd5b600080600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506117bf816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124f890919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000806000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a36001915050919050565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119cf5780601f106119a4576101008083540402835291602001916119cf565b820191906000526020600020905b8154815290600101906020018083116119b257829003601f168201915b505050505081565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a3557600080fd5b611a4f85858585600961286390949392919063ffffffff16565b9050949350505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ab757600080fd5b611acd83836009612c4e9092919063ffffffff16565b905092915050565b6000611ae18383611e02565b6001905092915050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b4957600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611ba657600080fd5b81600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001905092915050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000806000806000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cc157600080fd5b85518751141515611cd157600080fd5b86519350600084111515611ce457600080fd5b600092505b83831015611df4578683815181101515611cff57fe5b906020019060200201519150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611d6857600080fd5b8583815181101515611d7657fe5b90602001906020020151905080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611ded6001846124f890919063ffffffff16565b9250611ce9565b600194505050505092915050565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611e5b57600080fd5b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442111515611ea857600080fd5b611ebc33600961251490919063ffffffff16565b611f0d826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265290919063ffffffff16565b10151515611f1a57600080fd5b611f2e33600961266b90919063ffffffff16565b8015611f6657508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611f8557611f8333838360096126bc909392919063ffffffff16565b505b611fd6816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461265290919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612069816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124f890919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561217257600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156121cf57600080fd5b81600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b6000806000806000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561228157600080fd5b8551875114151561229157600080fd5b865193506000841115156122a457600080fd5b600092505b838310156123a15786838151811015156122bf57fe5b906020019060200201519150600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561232857600080fd5b858381518110151561233657fe5b90602001906020020151905080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061239a6001846124f890919063ffffffff16565b92506122a9565b600194505050505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561249457600080fd5b6124a8826009612cb590919063ffffffff16565b9050919050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000818301905082811015151561250b57fe5b80905092915050565b600080600080600080935061252887612e0b565b92505b6125358784612e3e565b15612645576125448784612e52565b91508660000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190506126326126238860000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483612e9b90919063ffffffff16565b856124f890919063ffffffff16565b935061263e8784613143565b925061252b565b8394505050505092915050565b600082821115151561266057fe5b818303905092915050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411905092915050565b6000612752828660000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546124f890919063ffffffff16565b8560000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050949350505050565b60008061286e6131f5565b60008073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141515156128ab57600080fd5b845186511415156128bb57600080fd5b600086511115156128cb57600080fd5b60008660008151811015156128dc57fe5b906020019060200201511415156128f257600080fd5b84600081518110151561290157fe5b9060200190602002015160ff168760ff161115151561291f57600080fd5b600192505b85518310156129ed57858381518110151561293b57fe5b906020019060200201518661295a60018661265290919063ffffffff16565b81518110151561296657fe5b9060200190602002015110151561297c57600080fd5b848381518110151561298a57fe5b9060200190602002015160ff16856129ac60018661265290919063ffffffff16565b8151811015156129b857fe5b9060200190602002015160ff16111515156129d257600080fd5b6129e66001846124f890919063ffffffff16565b9250612924565b606485612a056001885161265290919063ffffffff16565b815181101515612a1157fe5b9060200190602002015160ff16141515612a2a57600080fd5b608060405190810160405280600081526020018860ff1681526020018781526020018681525091508860000160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050818960000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000820151816000015560208201518160010160006101000a81548160ff021916908360ff1602179055506040820151816002019080519060200190612b25929190613221565b506060820151816003019080519060200190612b4292919061326e565b509050506000811115612b585760019350612c42565b886001018054809190600101612b6e9190613315565b9050612b846001826124f890919063ffffffff16565b8960000160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550878960010182815481101515612bde57fe5b9060005260206000200160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508860020160008154809291906001019190505550600093505b50505095945050505050565b60004282111515612c5e57600080fd5b818460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160000181905550600190509392505050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000811415612d115760009150612e04565b8360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160009055600182016000808201600090556001820160006101000a81549060ff0219169055600282016000612d8c9190613341565b600382016000612d9c9190613362565b50505050600184600101612dba60018461265290919063ffffffff16565b815481101515612dc657fe5b9060005260206000200160000160146101000a81548160ff021916908315150217905550836002016000815480929190600190039190505550600191505b5092915050565b6000612e37827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613143565b9050919050565b600082600101805490508210905092915050565b60008260010182815481101515612e6557fe5b9060005260206000200160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000806000831415612eb0576000915061313c565b600084600001541480612ec65750428460000154115b15612f1e57612f17612f086064612efa8760010160009054906101000a900460ff1660ff16876131a790919063ffffffff16565b6131df90919063ffffffff16565b8461265290919063ffffffff16565b915061313c565b600090505b612f3e6001856002018054905061265290919063ffffffff16565b81101561305b57612f778460020182815481101515612f5957fe5b906000526020600020015485600001546124f890919063ffffffff16565b4210158015612fc95750612fc684600201612f9c6001846124f890919063ffffffff16565b815481101515612fa857fe5b906000526020600020015485600001546124f890919063ffffffff16565b42105b156130405761303961302a606461301c8760030185815481101515612fea57fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff16876131a790919063ffffffff16565b6131df90919063ffffffff16565b8461265290919063ffffffff16565b915061313c565b6130546001826124f890919063ffffffff16565b9050612f23565b6130a78460020161307d6001876002018054905061265290919063ffffffff16565b81548110151561308957fe5b906000526020600020015485600001546124f890919063ffffffff16565b4210151561313b576131346131256064613117876003016130d960018a6002018054905061265290919063ffffffff16565b8154811015156130e557fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff16876131a790919063ffffffff16565b6131df90919063ffffffff16565b8461265290919063ffffffff16565b915061313c565b5b5092915050565b600081806001019250505b82600101805490508210801561318c5750826001018281548110151561317057fe5b9060005260206000200160000160149054906101000a900460ff165b1561319e57818060010192505061314e565b81905092915050565b6000808314156131ba57600090506131d9565b81830290508183828115156131cb57fe5b041415156131d557fe5b8090505b92915050565b600081838115156131ec57fe5b04905092915050565b60806040519081016040528060008152602001600060ff16815260200160608152602001606081525090565b82805482825590600052602060002090810192821561325d579160200282015b8281111561325c578251825591602001919060010190613241565b5b50905061326a919061338a565b5090565b82805482825590600052602060002090601f016020900481019282156133045791602002820160005b838211156132d557835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302613297565b80156133025782816101000a81549060ff02191690556001016020816000010492830192600103026132d5565b505b50905061331191906133af565b5090565b81548183558181111561333c5781836000526020600020918201910161333b91906133df565b5b505050565b508054600082559060005260206000209081019061335f919061338a565b50565b50805460008255601f016020900490600052602060002090810190613387919061338a565b50565b6133ac91905b808211156133a8576000816000905550600101613390565b5090565b90565b6133dc91905b808211156133d857600081816101000a81549060ff0219169055506001016133b5565b5090565b90565b61343691905b8082111561343257600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff0219169055506001016133e5565b5090565b905600a165627a7a7230582062d41bc6689cece853fa5a1e258fe5607a6a2820b74aaed8c61a633b568c7d400029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000cecb8f27f4200f3a00000000000000000000000000000000000000000000000000000000000000000000009596f747461436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035954410000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000cecb8f27f4200f3a00000000000000000000000000000000000000000000000000000000000000000000009596f747461436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035954410000000000000000000000000000000000000000000000000000000000"
}