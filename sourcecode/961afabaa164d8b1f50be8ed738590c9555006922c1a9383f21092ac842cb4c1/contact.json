{
  "address": "0x9d79c6e2a0222b9ac7bfabc447209c58fe9e0dcc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZCFees",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-09\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/PeriodUtil.sol\n\n/**\n * @title PeriodUtil\n * \n * Interface used for Period calculation to allow better automated testing of Fees Contract\n *\n * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\n */\ncontract PeriodUtil {\n    /**\n    * @dev calculates the Period index for the given timestamp\n    * @return Period count since EPOCH\n    * @param timestamp The time in seconds since EPOCH (blocktime)\n    */\n    function getPeriodIdx(uint256 timestamp) public pure returns (uint256);\n    \n    /**\n    * @dev Timestamp of the period start\n    * @return Time in seconds since EPOCH of the Period Start\n    * @param periodIdx Period Index to find the start timestamp of\n    */\n    function getPeriodStartTimestamp(uint256 periodIdx) public pure returns (uint256);\n\n    /**\n    * @dev Returns the Cycle count of the given Periods. A set of time creates a cycle, eg. If period is weeks the cycle can be years.\n    * @return The Cycle Index\n    * @param timestamp The time in seconds since EPOCH (blocktime)\n    */\n    function getPeriodCycle(uint256 timestamp) public pure returns (uint256);\n\n    /**\n    * @dev Amount of Tokens per time unit since the start of the given periodIdx\n    * @return Tokens per Time Unit from the given periodIdx start till now\n    * @param tokens Total amount of tokens from periodIdx start till now (blocktime)\n    * @param periodIdx Period IDX to use for time start\n    */\n    function getRatePerTimeUnits(uint256 tokens, uint256 periodIdx) public view returns (uint256);\n\n    /**\n    * @dev Amount of time units in each Period, for exampe if units is hour and period is week it will be 168\n    * @return Amount of time units per period\n    */\n    function getUnitsPerPeriod() public pure returns (uint256);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/ERC20Burnable.sol\n\n/**\n * @title BurnableToken\n * \n * Interface for Basic ERC20 interactions and allowing burning  of tokens\n *\n * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\n */\ncontract ERC20Burnable is ERC20Basic {\n\n    function burn(uint256 _value) public;\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts/ZCFees.sol\n\n/**\n * @title ZCFees\n * \n * Used to process transaction\n *\n * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\n */\ncontract ZCFees {\n\n    using SafeMath for uint256;\n\n    struct PaymentHistory {\n        // If set \n        bool paid;\n        // Payment to Fees\n        uint256 fees;\n        // Payment to Reward\n        uint256 reward;\n        // End of period token balance\n        uint256 endBalance;\n    }\n\n    uint256 public totalRewards;\n    uint256 public totalFees;\n\n    mapping (uint256 => PaymentHistory) payments;\n    address public tokenAddress;\n    PeriodUtil public periodUtil;\n    // Last week that has been executed\n    uint256 public lastPeriodExecIdx;\n    // Last Year that has been processed\n    uint256 public lastPeriodCycleExecIdx;\n    // Amount of time in seconds grase processing time\n    uint256 grasePeriod;\n\n    // Wallet for Fees payments\n    address public feesWallet;\n    // Wallet for Reward payments\n    address public rewardWallet;\n    \n    // Fees 1 : % tokens taken per week\n    uint256 internal constant FEES1_PER = 10;\n    // Fees 1 : Max token payout per week\n    uint256 internal constant FEES1_MAX_AMOUNT = 400000 * (10**18);\n    // Fees 2 : % tokens taken per week\n    uint256 internal constant FEES2_PER = 10;\n    // Fees 2 : Max token payout per week\n    uint256 internal constant FEES2_MAX_AMOUNT = 800000 * (10**18);\n    // Min Amount of Fees to pay out per week\n    uint256 internal constant FEES_TOKEN_MIN_AMOUNT = 24000 * (10**18);\n    // Min Percentage Prev Week to pay out per week\n    uint256 internal constant FEES_TOKEN_MIN_PERPREV = 95;\n    // Rewards Percentage of Period Received\n    uint256 internal constant REWARD_PER = 70;\n    // % Amount of remaining tokens to burn at end of year\n    uint256 internal constant BURN_PER = 25;\n    \n    /**\n     * @param _tokenAdr The Address of the Token\n     * @param _periodUtilAdr The Address of the PeriodUtil\n     * @param _grasePeriod The time in seconds you allowed to process payments before avg is calculated into next period(s)\n     * @param _feesWallet Where the fees are sent in tokens\n     * @param _rewardWallet Where the rewards are sent in tokens\n     */\n    constructor (address _tokenAdr, address _periodUtilAdr, uint256 _grasePeriod, address _feesWallet, address _rewardWallet) public {\n        assert(_tokenAdr != address(0));\n        assert(_feesWallet != address(0));\n        assert(_rewardWallet != address(0));\n        assert(_periodUtilAdr != address(0));\n        tokenAddress = _tokenAdr;\n        feesWallet = _feesWallet;\n        rewardWallet = _rewardWallet;\n        periodUtil = PeriodUtil(_periodUtilAdr);\n\n        grasePeriod = _grasePeriod;\n        assert(grasePeriod > 0);\n        // GrasePeriod must be less than period\n        uint256 va1 = periodUtil.getPeriodStartTimestamp(1);\n        uint256 va2 = periodUtil.getPeriodStartTimestamp(0);\n        assert(grasePeriod < (va1 - va2));\n\n        // Set the previous period values;\n        lastPeriodExecIdx = getWeekIdx() - 1;\n        lastPeriodCycleExecIdx = getYearIdx();\n        PaymentHistory storage prevPayment = payments[lastPeriodExecIdx];\n        prevPayment.fees = 0;\n        prevPayment.reward = 0;\n        prevPayment.paid = true;\n        prevPayment.endBalance = 0;\n    }\n\n    /**\n     * @dev Call when Fees processing needs to happen. Can only be called by the contract Owner\n     */\n    function process() public {\n        uint256 currPeriodIdx = getWeekIdx();\n\n        // Has the previous period been calculated?\n        if (lastPeriodExecIdx == (currPeriodIdx - 1)) {\n            // Nothing to do previous week has Already been processed\n            return;\n        }\n\n        if ((currPeriodIdx - lastPeriodExecIdx) == 2) {\n            paymentOnTime(currPeriodIdx);\n            // End Of Year Payment\n            if (lastPeriodCycleExecIdx < getYearIdx()) {\n                processEndOfYear(currPeriodIdx - 1);\n            }\n        }\n        else {\n            uint256 availableTokens = currentBalance();\n            // Missed Full Period! Very Bad!\n            PaymentHistory memory lastExecPeriod = payments[lastPeriodExecIdx];\n            uint256 tokensReceived = availableTokens.sub(lastExecPeriod.endBalance);\n            // Average amount of tokens received per hour till now\n            uint256 tokenHourlyRate = periodUtil.getRatePerTimeUnits(tokensReceived, lastPeriodExecIdx + 1);\n\n            PaymentHistory memory prePeriod;\n\n            for (uint256 calcPeriodIdx = lastPeriodExecIdx + 1; calcPeriodIdx < currPeriodIdx; calcPeriodIdx++) {\n                prePeriod = payments[calcPeriodIdx - 1];\n                uint256 periodTokenReceived = periodUtil.getUnitsPerPeriod().mul(tokenHourlyRate);\n                makePayments(prePeriod, payments[calcPeriodIdx], periodTokenReceived, prePeriod.endBalance.add(periodTokenReceived), calcPeriodIdx);\n\n                if (periodUtil.getPeriodCycle(periodUtil.getPeriodStartTimestamp(calcPeriodIdx + 1)) > lastPeriodCycleExecIdx) {\n                    processEndOfYear(calcPeriodIdx);\n                }\n            }\n        }\n\n        assert(payments[currPeriodIdx - 1].paid);\n        lastPeriodExecIdx = currPeriodIdx - 1;\n    }\n\n    /**\n     * @dev Internal function to process end of year Clearance\n     * @param yearEndPeriodCycle The Last Period Idx (Week Idx) of the year\n     */\n    function processEndOfYear(uint256 yearEndPeriodCycle) internal {\n        PaymentHistory storage lastYearPeriod = payments[yearEndPeriodCycle];\n        uint256 availableTokens = currentBalance();\n        uint256 tokensToClear = min256(availableTokens,lastYearPeriod.endBalance);\n\n        // Burn some of tokens\n        uint256 tokensToBurn = tokensToClear.mul(BURN_PER).div(100);\n        ERC20Burnable(tokenAddress).burn(tokensToBurn);\n\n        uint256 tokensToFeesWallet = tokensToClear.sub(tokensToBurn);\n        totalFees = totalFees.add(tokensToFeesWallet);\n        assert(ERC20Burnable(tokenAddress).transfer(feesWallet, tokensToFeesWallet));\n        lastPeriodCycleExecIdx = lastPeriodCycleExecIdx + 1;\n        lastYearPeriod.endBalance = 0;\n\n        emit YearEndClearance(lastPeriodCycleExecIdx, tokensToFeesWallet, tokensToBurn);\n    }\n\n    /**\n     * @dev Called when Payments are call within a week of last payment\n     * @param currPeriodIdx Current Period Idx (Week)\n     */\n    function paymentOnTime(uint256 currPeriodIdx) internal {\n    \n        uint256 availableTokens = currentBalance();\n        PaymentHistory memory prePeriod = payments[currPeriodIdx - 2];\n\n        uint256 tokensRecvInPeriod = availableTokens.sub(prePeriod.endBalance);\n\n        if (tokensRecvInPeriod <= 0) {\n            tokensRecvInPeriod = 0;\n        }\n        else if ((now - periodUtil.getPeriodStartTimestamp(currPeriodIdx)) > grasePeriod) {\n            tokensRecvInPeriod = periodUtil.getRatePerTimeUnits(tokensRecvInPeriod, currPeriodIdx - 1).mul(periodUtil.getUnitsPerPeriod());\n            if (tokensRecvInPeriod <= 0) {\n                tokensRecvInPeriod = 0;\n            }\n            assert(availableTokens >= tokensRecvInPeriod);\n        }   \n\n        makePayments(prePeriod, payments[currPeriodIdx - 1], tokensRecvInPeriod, prePeriod.endBalance + tokensRecvInPeriod, currPeriodIdx - 1);\n    }\n\n    /**\n    * @dev Process a payment period\n    * @param prevPayment Previous periods payment records\n    * @param currPayment Current periods payment records to be updated\n    * @param tokensRaised Tokens received for the period\n    * @param availableTokens Contract available balance including the tokens received for the period\n    */\n    function makePayments(PaymentHistory memory prevPayment, PaymentHistory storage currPayment, uint256 tokensRaised, uint256 availableTokens, uint256 weekIdx) internal {\n\n        assert(prevPayment.paid);\n        assert(!currPayment.paid);\n        assert(availableTokens >= tokensRaised);\n\n        // Fees 1 Payment\n        uint256 fees1Pay = tokensRaised == 0 ? 0 : tokensRaised.mul(FEES1_PER).div(100);\n        if (fees1Pay >= FEES1_MAX_AMOUNT) {\n            fees1Pay = FEES1_MAX_AMOUNT;\n        }\n        // Fees 2 Payment\n        uint256 fees2Pay = tokensRaised == 0 ? 0 : tokensRaised.mul(FEES2_PER).div(100);\n        if (fees2Pay >= FEES2_MAX_AMOUNT) {\n            fees2Pay = FEES2_MAX_AMOUNT;\n        }\n\n        uint256 feesPay = fees1Pay.add(fees2Pay);\n        if (feesPay >= availableTokens) {\n            feesPay = availableTokens;\n        } else {\n            // Calculates the Min percentage of previous month to pay\n            uint256 prevFees95 = prevPayment.fees.mul(FEES_TOKEN_MIN_PERPREV).div(100);\n            // Minimum amount of fees that is required\n            uint256 minFeesPay = max256(FEES_TOKEN_MIN_AMOUNT, prevFees95);\n            feesPay = max256(feesPay, minFeesPay);\n            feesPay = min256(feesPay, availableTokens);\n        }\n\n        // Rewards Payout\n        uint256 rewardPay = 0;\n        if (feesPay < tokensRaised) {\n            // There is money left for reward pool\n            rewardPay = tokensRaised.mul(REWARD_PER).div(100);\n            rewardPay = min256(rewardPay, availableTokens.sub(feesPay));\n        }\n\n        currPayment.fees = feesPay;\n        currPayment.reward = rewardPay;\n\n        totalFees = totalFees.add(feesPay);\n        totalRewards = totalRewards.add(rewardPay);\n\n        assert(ERC20Burnable(tokenAddress).transfer(rewardWallet, rewardPay));\n        assert(ERC20Burnable(tokenAddress).transfer(feesWallet, feesPay));\n\n        currPayment.endBalance = availableTokens - feesPay - rewardPay;\n        currPayment.paid = true;\n\n        emit Payment(weekIdx, rewardPay, feesPay);\n    }\n\n    /**\n    * @dev Event when payment was made\n    * @param weekIdx Week Idx since EPOCH for payment\n    * @param rewardPay Amount of tokens paid to the reward pool\n    * @param feesPay Amount of tokens paid in fees\n    */\n    event Payment(uint256 weekIdx, uint256 rewardPay, uint256 feesPay);\n\n    /**\n    * @dev Event when year end clearance happens\n    * @param yearIdx Year the clearance happend for\n    * @param feesPay Amount of tokens paid in fees\n    * @param burned Amount of tokens burned\n    */\n    event YearEndClearance(uint256 yearIdx, uint256 feesPay, uint256 burned);\n\n\n    /**\n    * @dev Returns the token balance of the Fees contract\n    */\n    function currentBalance() internal view returns (uint256) {\n        return ERC20Burnable(tokenAddress).balanceOf(address(this));\n    }\n\n    /**\n    * @dev Returns the amount of weeks since EPOCH\n    * @return Week count since EPOCH\n    */\n    function getWeekIdx() public view returns (uint256) {\n        return periodUtil.getPeriodIdx(now);\n    }\n\n    /**\n    * @dev Returns the Year\n    */\n    function getYearIdx() public view returns (uint256) {\n        return periodUtil.getPeriodCycle(now);\n    }\n\n    /**\n    * @dev Returns true if the week has been processed and paid out\n    * @param weekIdx Weeks since EPOCH\n    * @return true if week has been paid out\n    */\n    function weekProcessed(uint256 weekIdx) public view returns (bool) {\n        return payments[weekIdx].paid;\n    }\n\n    /**\n    * @dev Returns the amounts paid out for the given week\n    * @param weekIdx Weeks since EPOCH\n    */\n    function paymentForWeek(uint256 weekIdx) public view returns (uint256 fees, uint256 reward) {\n        PaymentHistory storage history = payments[weekIdx];\n        fees = history.fees;\n        reward = history.reward;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWeekIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weekIdx\",\"type\":\"uint256\"}],\"name\":\"weekProcessed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPeriodCycleExecIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"periodUtil\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feesWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPeriodExecIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"process\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weekIdx\",\"type\":\"uint256\"}],\"name\":\"paymentForWeek\",\"outputs\":[{\"name\":\"fees\",\"type\":\"uint256\"},{\"name\":\"reward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getYearIdx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAdr\",\"type\":\"address\"},{\"name\":\"_periodUtilAdr\",\"type\":\"address\"},{\"name\":\"_grasePeriod\",\"type\":\"uint256\"},{\"name\":\"_feesWallet\",\"type\":\"address\"},{\"name\":\"_rewardWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"weekIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rewardPay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feesPay\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"yearIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"feesPay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"burned\",\"type\":\"uint256\"}],\"name\":\"YearEndClearance\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160a0806200143b833981016040908152815160208301519183015160608401516080909401519193909160008080600160a060020a03881615156200005657fe5b600160a060020a03851615156200006957fe5b600160a060020a03841615156200007c57fe5b600160a060020a03871615156200008f57fe5b60038054600160a060020a03808b16600160a060020a031992831617909255600880548884169083161790556009805487841690831617905560048054928a1692909116919091179055600786905560008611620000e957fe5b60048054604080517f872887c200000000000000000000000000000000000000000000000000000000815260019381019390935251600160a060020a039091169163872887c29160248083019260209291908290030181600087803b1580156200015257600080fd5b505af115801562000167573d6000803e3d6000fd5b505050506040513d60208110156200017e57600080fd5b505160048054604080517f872887c200000000000000000000000000000000000000000000000000000000815260009381018490529051939650600160a060020a039091169263872887c292602480840193602093929083900390910190829087803b158015620001ee57600080fd5b505af115801562000203573d6000803e3d6000fd5b505050506040513d60208110156200021a57600080fd5b5051600754909250828403116200022d57fe5b6001620002426401000000006200029b810204565b036005556200025964010000000062000338810204565b6006555050600554600090815260026020819052604082206001808201849055918101839055805460ff191690911781556003015550620003a2945050505050565b60048054604080517f747ad1c1000000000000000000000000000000000000000000000000000000008152429381019390935251600092600160a060020a039092169163747ad1c191602480830192602092919082900301818787803b1580156200030557600080fd5b505af11580156200031a573d6000803e3d6000fd5b505050506040513d60208110156200033157600080fd5b5051905090565b60048054604080517fe45fc71f000000000000000000000000000000000000000000000000000000008152429381019390935251600092600160a060020a039092169163e45fc71f91602480830192602092919082900301818787803b1580156200030557600080fd5b61108980620003b26000396000f3006080604052600436106100ab5763ffffffff60e060020a6000350416630e15561a81146100b05780631042ca73146100d757806313114a9d146100ec5780633239d232146101015780633740a42f1461012d57806375166a42146101425780637e44d2cc146101735780639c9f2292146101885780639d76ea581461019d578063c33fb877146101b2578063d14e1784146101c9578063fb75b2c7146101fa578063fd8097591461020f575b600080fd5b3480156100bc57600080fd5b506100c5610224565b60408051918252519081900360200190f35b3480156100e357600080fd5b506100c561022a565b3480156100f857600080fd5b506100c56102c4565b34801561010d57600080fd5b506101196004356102ca565b604080519115158252519081900360200190f35b34801561013957600080fd5b506100c56102df565b34801561014e57600080fd5b506101576102e5565b60408051600160a060020a039092168252519081900360200190f35b34801561017f57600080fd5b506101576102f4565b34801561019457600080fd5b506100c5610303565b3480156101a957600080fd5b50610157610309565b3480156101be57600080fd5b506101c7610318565b005b3480156101d557600080fd5b506101e1600435610709565b6040805192835260208301919091528051918290030190f35b34801561020657600080fd5b50610157610726565b34801561021b57600080fd5b506100c5610735565b60005481565b60048054604080517f747ad1c1000000000000000000000000000000000000000000000000000000008152429381019390935251600092600160a060020a039092169163747ad1c191602480830192602092919082900301818787803b15801561029357600080fd5b505af11580156102a7573d6000803e3d6000fd5b505050506040513d60208110156102bd57600080fd5b5051905090565b60015481565b60009081526002602052604090205460ff1690565b60065481565b600454600160a060020a031681565b600854600160a060020a031681565b60055481565b600354600160a060020a031681565b600080610323611032565b60008061032e611032565b60008061033961022a565b975060018803600554141561034d576106ff565b600554880360021415610385576103638861079e565b61036b610735565b600654101561038057610380600189036109fa565b6106d7565b61038d610bf3565b6005546000908152600260208181526040928390208351608081018552815460ff16151581526001820154928101929092529182015492810192909252600301546060820181905291985096506103eb90889063ffffffff610c5816565b60048054600554604080517f51ffd9e70000000000000000000000000000000000000000000000000000000081529384018590526001909101602484015251929750600160a060020a0316916351ffd9e7916044808201926020929091908290030181600087803b15801561045f57600080fd5b505af1158015610473573d6000803e3d6000fd5b505050506040513d602081101561048957600080fd5b505160055490945060010191505b878210156106d757600019820160009081526002602081815260408084208151608081018352815460ff161515815260018201548185015293810154848301526003015460608401526004805482517f703a6beb000000000000000000000000000000000000000000000000000000008152925194985061057e958a95600160a060020a039092169463703a6beb94808501949193929083900390910190829087803b15801561054657600080fd5b505af115801561055a573d6000803e3d6000fd5b505050506040513d602081101561057057600080fd5b50519063ffffffff610c6f16565b600083815260026020526040902060608501519192506105b39185919084906105ad908263ffffffff610c9816565b86610ca5565b60065460048054604080517f872887c2000000000000000000000000000000000000000000000000000000008152600187019381019390935251600160a060020a039091169163e45fc71f91839163872887c29160248083019260209291908290030181600087803b15801561062857600080fd5b505af115801561063c573d6000803e3d6000fd5b505050506040513d602081101561065257600080fd5b50516040805160e060020a63ffffffff851602815260048101929092525160248083019260209291908290030181600087803b15801561069157600080fd5b505af11580156106a5573d6000803e3d6000fd5b505050506040513d60208110156106bb57600080fd5b505111156106cc576106cc826109fa565b600190910190610497565b600019880160009081526002602052604090205460ff1615156106f657fe5b60001988016005555b5050505050505050565b600090815260026020819052604090912060018101549101549091565b600954600160a060020a031681565b60048054604080517fe45fc71f000000000000000000000000000000000000000000000000000000008152429381019390935251600092600160a060020a039092169163e45fc71f91602480830192602092919082900301818787803b15801561029357600080fd5b60006107a8611032565b60006107b2610bf3565b60011985016000908152600260208181526040928390208351608081018552815460ff161515815260018201549281019290925291820154928101929092526003015460608201819052919450925061081290849063ffffffff610c5816565b905060008111610824575060006109c9565b60075460048054604080517f872887c200000000000000000000000000000000000000000000000000000000815292830188905251600160a060020a039091169163872887c29160248083019260209291908290030181600087803b15801561088c57600080fd5b505af11580156108a0573d6000803e3d6000fd5b505050506040513d60208110156108b657600080fd5b5051420311156109c9576109b1600460009054906101000a9004600160a060020a0316600160a060020a031663703a6beb6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561091657600080fd5b505af115801561092a573d6000803e3d6000fd5b505050506040513d602081101561094057600080fd5b505160048054604080517f51ffd9e70000000000000000000000000000000000000000000000000000000081529283018690526000198901602484015251600160a060020a03909116916351ffd9e79160448083019260209291908290030181600087803b15801561054657600080fd5b9050600081116109bf575060005b808310156109c957fe5b6109f48260026000600188038152602001908152602001600020838486606001510160018903610ca5565b50505050565b600081815260026020526040812090808080610a14610bf3565b9350610a24848660030154610ff5565b9250610a486064610a3c85601963ffffffff610c6f16565b9063ffffffff61100d16565b600354604080517f42966c68000000000000000000000000000000000000000000000000000000008152600481018490529051929450600160a060020a03909116916342966c689160248082019260009290919082900301818387803b158015610ab157600080fd5b505af1158015610ac5573d6000803e3d6000fd5b50505050610adc8284610c5890919063ffffffff16565b600154909150610af2908263ffffffff610c9816565b600155600354600854604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b158015610b6757600080fd5b505af1158015610b7b573d6000803e3d6000fd5b505050506040513d6020811015610b9157600080fd5b50511515610b9b57fe5b60068054600101815560006003870155546040805191825260208201839052818101849052517fb2e1760722dd273e80779eafb236d2266742245f734ad37054676c774ff10ab89181900360600190a1505050505050565b600354604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b15801561029357600080fd5b600082821115610c6457fe5b508082035b92915050565b6000821515610c8057506000610c69565b50818102818382811515610c9057fe5b0414610c6957fe5b81810182811015610c6957fe5b6000806000806000808a600001511515610cbb57fe5b895460ff1615610cc757fe5b88881015610cd157fe5b8815610cf257610ced6064610a3c8b600a63ffffffff610c6f16565b610cf5565b60005b95506954b40b1f852bda0000008610610d16576954b40b1f852bda00000095505b8815610d3757610d326064610a3c8b600a63ffffffff610c6f16565b610d3a565b60005b945069a968163f0a57b40000008510610d5b5769a968163f0a57b400000094505b610d6b868663ffffffff610c9816565b9350878410610d7c57879350610dca565b610d996064610a3c605f8e60200151610c6f90919063ffffffff16565b9250610daf6905150ae84a8cdf00000084611022565b9150610dbb8483611022565b9350610dc78489610ff5565b93505b50600088841015610e0957610deb6064610a3c8b604663ffffffff610c6f16565b9050610e0681610e018a8763ffffffff610c5816565b610ff5565b90505b6001808b0185905560028b0182905554610e29908563ffffffff610c9816565b600155600054610e3f908263ffffffff610c9816565b6000908155600354600954604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018690529051919092169263a9059cbb92604480820193602093909283900390910190829087803b158015610eb857600080fd5b505af1158015610ecc573d6000803e3d6000fd5b505050506040513d6020811015610ee257600080fd5b50511515610eec57fe5b600354600854604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a039283166004820152602481018890529051919092169163a9059cbb9160448083019260209291908290030181600087803b158015610f5e57600080fd5b505af1158015610f72573d6000803e3d6000fd5b505050506040513d6020811015610f8857600080fd5b50511515610f9257fe5b83880381900360038b0155895460ff19166001178a55604080518881526020810183905280820186905290517ff7d93633da3b67c426318795718ea5281ab25439b8e6654d9c866bddee771ad69181900360600190a15050505050505050505050565b60008183106110045781611006565b825b9392505050565b6000818381151561101a57fe5b049392505050565b6000818310156110045781611006565b60806040519081016040528060001515815260200160008152602001600081526020016000815250905600a165627a7a72305820003fba9f4df6f5f556fa83e827ea023f7f13569515e6080559604e182d0045be00290000000000000000000000006737fe98389ffb356f64ebb726aa1a92390d94fb0000000000000000000000002bcf5193687d9abd60128f4f7307054431d724a10000000000000000000000000000000000000000000000000000000000000e100000000000000000000000008054f4a0bf50f550a02d9d0b7a53f083e689068b000000000000000000000000200dcdd8bf9d8429569281c9c46bd120c53ddba4",
  "constructorArguments": "0000000000000000000000006737fe98389ffb356f64ebb726aa1a92390d94fb0000000000000000000000002bcf5193687d9abd60128f4f7307054431d724a10000000000000000000000000000000000000000000000000000000000000e100000000000000000000000008054f4a0bf50f550a02d9d0b7a53f083e689068b000000000000000000000000200dcdd8bf9d8429569281c9c46bd120c53ddba4"
}