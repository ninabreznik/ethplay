{
  "address": "0xb974c2504f36fb54c71e3aa2f1e3360e6801f5b8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Uptherium",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-14\n*/\n\npragma solidity ^0.4.24;\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that revert on error\n*/\nlibrary SafeMath {\n/**\n* @dev Multiplies two numbers, reverts on overflow.\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n// benefit is lost if 'b' is also tested.\n// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nrequire(c / a == b);\nreturn c;\n}\n/**\n* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\nrequire(b > 0); // Solidity only automatically asserts when dividing by 0\nuint256 c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n/**\n* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n*/\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\nrequire(b <= a);\nuint256 c = a - b;\nreturn c;\n}\n/**\n* @dev Adds two numbers, reverts on overflow.\n*/\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\nuint256 c = a + b;\nrequire(c >= a);\nreturn c;\n}\n/**\n* @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n* reverts when dividing by zero.\n*/\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\nrequire(b != 0);\nreturn a % b;\n}\n}\n/**\n* @title Ownable\n* @dev The Ownable contract has an owner address, and provides basic authorization control\n* functions, this simplifies the implementation of \\\"user permissions\\\".\n*/\ncontract Ownable {\naddress private _owner;\nevent OwnershipTransferred(\naddress indexed previousOwner,\naddress indexed newOwner\n);\n/**\n* @dev The Ownable constructor sets the original `owner` of the contract to the sender\n* account.\n*/\nconstructor() internal {\n_owner = msg.sender;\nemit OwnershipTransferred(address(0), _owner);\n}\n/**\n* @return the address of the owner.\n*/\nfunction owner() public view returns(address) {\nreturn _owner;\n}\n/**\n* @dev Throws if called by any account other than the owner.\n*/\nmodifier onlyOwner() {\nrequire(isOwner());\n_;\n}\n/**\n* @return true if `msg.sender` is the owner of the contract.\n*/\nfunction isOwner() public view returns(bool) {\nreturn msg.sender == _owner;\n}\n/**\n* @dev Allows the current owner to relinquish control of the contract.\n* @notice Renouncing to ownership will leave the contract without an owner.\n* It will not be possible to call the functions with the `onlyOwner`\n* modifier anymore.\n*/\nfunction renounceOwnership() public onlyOwner {\nemit OwnershipTransferred(_owner, address(0));\n_owner = address(0);\n}\n/**\n* @dev Allows the current owner to transfer control of the contract to a newOwner.\n* @param newOwner The address to transfer ownership to.\n*/\nfunction transferOwnership(address newOwner) public onlyOwner {\n_transferOwnership(newOwner);\n}\n/**\n* @dev Transfers control of the contract to a newOwner.\n* @param newOwner The address to transfer ownership to.\n*/\nfunction _transferOwnership(address newOwner) internal {\nrequire(newOwner != address(0));\nemit OwnershipTransferred(_owner, newOwner);\n_owner = newOwner;\n}\n}\n/**\n* @title ERC20 interface\n* @dev see https://github.com/ethereum/EIPs/issues/20\n*/\ninterface IERC20 {\nfunction totalSupply() external view returns (uint256);\nfunction balanceOf(address who) external view returns (uint256);\nfunction allowance(address owner, address spender)\nexternal view returns (uint256);\nfunction transfer(address to, uint256 value) external returns (bool);\nfunction approve(address spender, uint256 value)\nexternal returns (bool);\nfunction transferFrom(address from, address to, uint256 value)\nexternal returns (bool);\nevent Transfer(\naddress indexed from,\naddress indexed to,\nuint256 value\n);\nevent Approval(\naddress indexed owner,\naddress indexed spender,\nuint256 value\n);\n}\n/**\n* @title Standard ERC20 token\n*\n* @dev Implementation of the basic standard token.\n* https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n* \n*/\ncontract Uptherium is IERC20, Ownable {\n\nusing SafeMath for uint256;\nmapping (address => uint256) private _balances;\nmapping (address => mapping (address => uint256)) private _allowed;\n\nmapping (address => bool) public allowedAddresses;\n\nuint256 private _totalSupply;\nstring private _name = \"Uptherium\";\nstring private _symbol = \"UPZT\";\nuint8 private _decimals = 18;\nbool private _poolsSetted;\nbool private _burningAllowed;\n\nevent Burn(address indexed owner,\nuint256 value\n);\n\nmodifier checkTransfer() {\nrequire(allowedAddresses[msg.sender] == true);\n_;\n}\nconstructor() public {\n_poolsSetted = false;\n_burningAllowed = false;\nallowedAddresses[msg.sender] = true;\n\n}\n\n/**\n* @dev Function for adding address to the whitelist.\n*/\nfunction addAddress(address newAddress) public onlyOwner {\nallowedAddresses[newAddress] = true;\n}\n\n/**\n* @dev Function for removing address from whitelist.\n*/\nfunction removeAddress(address oldAddress) public onlyOwner {\nallowedAddresses[oldAddress] = false;\n}\n\n/**\n* @dev Function for initial token minting.\n*/\nfunction initialMint(address icoPool, address bountyPool, address teamPool, uint256 icoValue, uint256 bountyValue, uint256 teamValue) public onlyOwner {\nrequire(!_poolsSetted);\n_mint(icoPool, icoValue);\n_mint(bountyPool, bountyValue);\n_mint(teamPool, teamValue);\n_poolsSetted = true;\n}\n\n/**\n* @return the name of the token.\n*/\nfunction name() public view returns(string) {\nreturn _name;\n}\n/**\n* @return the symbol of the token.\n*/\nfunction symbol() public view returns(string) {\nreturn _symbol;\n}\n/**\n* @return the number of decimals of the token.\n*/\nfunction decimals() public view returns(uint8) {\nreturn _decimals;\n}\n/**\n* @dev Total number of tokens in existence\n*/\nfunction totalSupply() public view returns (uint256) {\nreturn _totalSupply;\n}\n/**\n* @dev Gets the balance of the specified address.\n* @param owner The address to query the balance of.\n* @return An uint256 representing the amount owned by the passed address.\n*/\nfunction balanceOf(address owner) public view returns (uint256) {\nreturn _balances[owner];\n}\n/**\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\n* @param owner address The address which owns the funds.\n* @param spender address The address which will spend the funds.\n* @return A uint256 specifying the amount of tokens still available for the spender.\n*/\nfunction allowance(\naddress owner,\naddress spender\n)\npublic\nview\nreturns (uint256)\n{\nreturn _allowed[owner][spender];\n}\n/**\n* @dev Transfer token for a specified address\n* @param to The address to transfer to.\n* @param value The amount to be transferred.\n*/\nfunction transfer(address to, uint256 value) public checkTransfer returns (bool) {\n_transfer(msg.sender, to, value);\nreturn true;\n}\n/**\n* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n* @param spender The address which will spend the funds.\n* @param value The amount of tokens to be spent.\n*/\nfunction approve(address spender, uint256 value) public returns (bool) {\nrequire(spender != address(0));\n_allowed[msg.sender][spender] = value;\nemit Approval(msg.sender, spender, value);\nreturn true;\n}\n/**\n* @dev Transfer tokens from one address to another\n* @param from address The address which you want to send tokens from\n* @param to address The address which you want to transfer to\n* @param value uint256 the amount of tokens to be transferred\n*/\nfunction transferFrom(address from, address to, uint256 value) public checkTransfer returns (bool) {\n_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n_transfer(from, to, value);\nreturn true;\n}\n/**\n* @dev Increase the amount of tokens that an owner allowed to a spender.\n* approve should be called when allowed_[_spender] == 0. To increment\n* allowed value is better to use this function to avoid 2 calls (and wait until\n* the first transaction is mined)\n* From MonolithDAO Token.sol\n* @param spender The address which will spend the funds.\n* @param addedValue The amount of tokens to increase the allowance by.\n*/\nfunction increaseAllowance(\naddress spender,\nuint256 addedValue\n)\npublic\nreturns (bool)\n{\nrequire(spender != address(0));\n_allowed[msg.sender][spender] = (\n_allowed[msg.sender][spender].add(addedValue));\nemit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\nreturn true;\n}\n/**\n* @dev Decrease the amount of tokens that an owner allowed to a spender.\n* approve should be called when allowed_[_spender] == 0. To decrement\n* allowed value is better to use this function to avoid 2 calls (and wait until\n* the first transaction is mined)\n* From MonolithDAO Token.sol\n* @param spender The address which will spend the funds.\n* @param subtractedValue The amount of tokens to decrease the allowance by.\n*/\nfunction decreaseAllowance(\naddress spender,\nuint256 subtractedValue\n)\npublic\nreturns (bool)\n{\nrequire(spender != address(0));\n_allowed[msg.sender][spender] = (\n_allowed[msg.sender][spender].sub(subtractedValue));\nemit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\nreturn true;\n}\n/**\n* @dev Transfer token for a specified addresses\n* @param from The address to transfer from.\n* @param to The address to transfer to.\n* @param value The amount to be transferred.\n*/\nfunction _transfer(address from, address to, uint256 value) internal {\nrequire(to != address(0));\n_balances[from] = _balances[from].sub(value);\n_balances[to] = _balances[to].add(value);\nemit Transfer(from, to, value);\n}\n/**\n* @dev Internal function that mints an amount of the token and assigns it to\n* an account. This encapsulates the modification of balances such that the\n* proper events are emitted.\n* @param account The account that will receive the created tokens.\n* @param value The amount that will be created.\n*/\nfunction _mint(address account, uint256 value) internal {\nrequire(account != address(0));\n_totalSupply = _totalSupply.add(value);\n_balances[account] = _balances[account].add(value);\nemit Transfer(address(0), account, value);\n}\n\n/**\n* @dev Public function that allows burning an amount of the token.\n*/\nfunction allowBurning() public onlyOwner returns(bool) {\n_burningAllowed = true;\nreturn _burningAllowed;\n}\n\n/**\n* @dev Public function that burns an amount of the token and assigns it to\n* an account. This encapsulates the modification of balances such that the\n* proper events are emitted.\n* @param value The amount that will be burned.\n*/\nfunction burn(uint256 value) public {\nrequire(_burningAllowed);  \nrequire(msg.sender != address(0));\nrequire(_balances[msg.sender] >= value);\n_totalSupply = _totalSupply.sub(value);\n_balances[msg.sender] = _balances[msg.sender].sub(value);\nemit Burn(address(msg.sender), value);\n}\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowBurning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"icoPool\",\"type\":\"address\"},{\"name\":\"bountyPool\",\"type\":\"address\"},{\"name\":\"teamPool\",\"type\":\"address\"},{\"name\":\"icoValue\",\"type\":\"uint256\"},{\"name\":\"bountyValue\",\"type\":\"uint256\"},{\"name\":\"teamValue\",\"type\":\"uint256\"}],\"name\":\"initialMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526040805190810160405280600981526020017f55707468657269756d000000000000000000000000000000000000000000000081525060059080519060200190620000519291906200021a565b506040805190810160405280600481526020017f55505a5400000000000000000000000000000000000000000000000000000000815250600690805190602001906200009f9291906200021a565b506012600760006101000a81548160ff021916908360ff160217905550348015620000c957600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600760016101000a81548160ff0219169083151502179055506000600760026101000a81548160ff0219169083151502179055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002c9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200025d57805160ff19168380011785556200028e565b828001600101855582156200028e579182015b828111156200028d57825182559160200191906001019062000270565b5b5090506200029d9190620002a1565b5090565b620002c691905b80821115620002c2576000816000905550600101620002a8565b5090565b90565b611b6580620002d96000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610122578063095ea7b3146101b257806318160ddd1461021757806323b872dd14610242578063313ce567146102c757806338eada1c146102f8578063395093511461033b5780634120657a146103a057806342966c68146103fb5780634ba79dfe1461042857806370a082311461046b578063715018a6146104c25780638c0326af146104d95780638da5cb5b146105085780638f32d59b1461055f57806395d89b411461058e578063a457c2d71461061e578063a9059cbb14610683578063c4850901146106e8578063dd62ed3e14610789578063f2fde38b14610800575b600080fd5b34801561012e57600080fd5b50610137610843565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017757808201518184015260208101905061015c565b50505050905090810190601f1680156101a45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101be57600080fd5b506101fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108e5565b604051808215151515815260200191505060405180910390f35b34801561022357600080fd5b5061022c610a12565b6040518082815260200191505060405180910390f35b34801561024e57600080fd5b506102ad600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a1c565b604051808215151515815260200191505060405180910390f35b3480156102d357600080fd5b506102dc610ba2565b604051808260ff1660ff16815260200191505060405180910390f35b34801561030457600080fd5b50610339600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bb9565b005b34801561034757600080fd5b50610386600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c27565b604051808215151515815260200191505060405180910390f35b3480156103ac57600080fd5b506103e1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e5e565b604051808215151515815260200191505060405180910390f35b34801561040757600080fd5b5061042660048036038101908080359060200190929190505050610e7e565b005b34801561043457600080fd5b50610469600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611024565b005b34801561047757600080fd5b506104ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611092565b6040518082815260200191505060405180910390f35b3480156104ce57600080fd5b506104d76110db565b005b3480156104e557600080fd5b506104ee6111ad565b604051808215151515815260200191505060405180910390f35b34801561051457600080fd5b5061051d6111f2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561056b57600080fd5b5061057461121b565b604051808215151515815260200191505060405180910390f35b34801561059a57600080fd5b506105a3611272565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105e35780820151818401526020810190506105c8565b50505050905090810190601f1680156106105780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561062a57600080fd5b50610669600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611314565b604051808215151515815260200191505060405180910390f35b34801561068f57600080fd5b506106ce600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061154b565b604051808215151515815260200191505060405180910390f35b3480156106f457600080fd5b50610787600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506115c1565b005b34801561079557600080fd5b506107ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611631565b6040518082815260200191505060405180910390f35b34801561080c57600080fd5b50610841600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b8565b005b606060058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108db5780601f106108b0576101008083540402835291602001916108db565b820191906000526020600020905b8154815290600101906020018083116108be57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561092257600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600454905090565b600060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610a7d57600080fd5b610b0c82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116d790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b978484846116f8565b600190509392505050565b6000600760009054906101000a900460ff16905090565b610bc161121b565b1515610bcc57600080fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c6457600080fd5b610cf382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118c890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b60036020528060005260406000206000915054906101000a900460ff1681565b600760029054906101000a900460ff161515610e9957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151515610ed557600080fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610f2357600080fd5b610f38816004546116d790919063ffffffff16565b600481905550610f9081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116d790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a250565b61102c61121b565b151561103757600080fd5b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110e361121b565b15156110ee57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006111b761121b565b15156111c257600080fd5b6001600760026101000a81548160ff021916908315150217905550600760029054906101000a900460ff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b606060068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561130a5780601f106112df5761010080835404028352916020019161130a565b820191906000526020600020905b8154815290600101906020018083116112ed57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561135157600080fd5b6113e082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116d790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156115ac57600080fd5b6115b73384846116f8565b6001905092915050565b6115c961121b565b15156115d457600080fd5b600760019054906101000a900460ff161515156115f057600080fd5b6115fa86846118e9565b61160485836118e9565b61160e84826118e9565b6001600760016101000a81548160ff021916908315150217905550505050505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6116c061121b565b15156116cb57600080fd5b6116d481611a3f565b50565b6000808383111515156116e957600080fd5b82840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561173457600080fd5b61178681600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116d790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061181b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118c890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b60008082840190508381101515156118df57600080fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561192557600080fd5b61193a816004546118c890919063ffffffff16565b60048190555061199281600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118c890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a7b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a7230582067a50942df04e987c8bf3cb28027bd75a39f3054654365fb1191af845d6beda30029"
}