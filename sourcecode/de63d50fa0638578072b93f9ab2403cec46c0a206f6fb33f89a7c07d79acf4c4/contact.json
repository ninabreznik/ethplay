{
  "address": "0x167ee8dDfd7045090CDf8FF38864c6744Ef952d9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "trade",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-10\n*/\n\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    } \n}\n\nlibrary SafeMath8{\n     function add(uint8 a, uint8 b) internal pure returns (uint8) {\n        uint8 c = a + b;\n        require(c >= a);\n        return c;\n    }  \n\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b <= a);\n        uint8 c = a - b;\n        return c;\n    }\n\n     function mul(uint8 a, uint8 b) internal pure returns (uint8) {\n        if (a == 0) {\n            return 0;\n        }\n        uint8 c = a * b;\n        require(c / a == b);\n        return c;\n    }\n\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\n        require(b > 0);\n        uint8 c = a / b;\n        return c;\n    }\n }\n\n\n\ninterface ERC20 {\n  function decimals() external view returns(uint8);\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns(bool);\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) ;\n}\n\ninterface master{\n    function inquire_location(address _address) external view returns(uint16, uint16);\n    function inquire_slave_address(uint16 _slave) external view returns(address);\n    function inquire_tot_building(uint16 _slave, uint16 _domain) external view returns(uint8[]);\n    function owner_slave_amount()external view returns(uint);\n    function owner_slave(uint _index) external view returns(address);\n} \n \ninterface boxManager{\n    function showBoxAmount(uint8 _boxIndex) external view returns (uint);\n    function newContracts(uint _boxIndex) external view returns (address);\n    \n}\n\n\n\n  \ncontract owned{\n\n    address public manager;\n\n    constructor() public{\n        manager = msg.sender;\n    }\n\n    modifier onlymanager{\n        require(msg.sender == manager);\n        _;\n    } \n\n    function transferownership(address _new_manager) public onlymanager {\n        manager = _new_manager;\n    }\n}   \n\ncontract trade is owned{  \n\n    address arina_address = 0xe6987cd613dfda0995a95b3e6acbabececd41376;\n    address master_address = 0x0ac10bf0342fa2724e93d250751186ba5b659303;\n    \n    address boxManager_address = 0x8842511f9eaaa75904017ff8ca26ba03ee2ddfa0;\n\n    mapping(uint8 => mapping(uint16 => uint)) lv1BuyPrice; \n\n    mapping(uint16 => uint) pool; \n    mapping(uint16 => mapping(uint8 => uint)) box_amount_city; \n    \n    using SafeMath8 for uint8;\n    using SafeMath for uint;\n    event buyBox(address indexed target, uint8 boxIndex, uint boxAmount, uint buyPrice); \n    event sellBox(address indexed target, uint8 boxIndex, uint boxAmount, uint sellPrice); \n    \n    \n    function() external payable{}\n\n    constructor() public{\n        \n        \n        lv1BuyPrice[0][1] = 300;\n        lv1BuyPrice[0][2] = 320;\n        lv1BuyPrice[0][3] = 280;\n        lv1BuyPrice[0][4] = 290;\n        lv1BuyPrice[0][5] = 250;\n        lv1BuyPrice[0][6] = 260; \n        lv1BuyPrice[0][7] = 240;\n        lv1BuyPrice[0][8] = 230;\n        lv1BuyPrice[0][9] = 160; \n        lv1BuyPrice[0][10] = 156;\n        lv1BuyPrice[0][11] = 144;\n        lv1BuyPrice[0][12] = 140;\n        lv1BuyPrice[0][13] = 420;\n        lv1BuyPrice[0][14] = 415;\n        lv1BuyPrice[0][15] = 390;\n        lv1BuyPrice[0][16] = 460;\n\n        lv1BuyPrice[1][1] = 150;\n        lv1BuyPrice[1][2] = 160;\n        lv1BuyPrice[1][3] = 156;\n        lv1BuyPrice[1][4] = 164;\n        lv1BuyPrice[1][5] = 100;\n        lv1BuyPrice[1][6] = 110;\n        lv1BuyPrice[1][7] = 105;\n        lv1BuyPrice[1][8] = 98;\n        lv1BuyPrice[1][9] = 250;\n        lv1BuyPrice[1][10] = 240;\n        lv1BuyPrice[1][11] = 230;\n        lv1BuyPrice[1][12] = 260;\n        lv1BuyPrice[1][13] = 200;\n        lv1BuyPrice[1][14] = 220;\n        lv1BuyPrice[1][15] = 210;\n        lv1BuyPrice[1][16] = 190;\n\n        lv1BuyPrice[2][1] = 300;\n        lv1BuyPrice[2][2] = 310;\n        lv1BuyPrice[2][3] = 320;\n        lv1BuyPrice[2][4] = 290;\n        lv1BuyPrice[2][5] = 250;\n        lv1BuyPrice[2][6] = 240;\n        lv1BuyPrice[2][7] = 260;\n        lv1BuyPrice[2][8] = 235;\n        lv1BuyPrice[2][9] = 200;\n        lv1BuyPrice[2][10] = 210;\n        lv1BuyPrice[2][11] = 220;\n        lv1BuyPrice[2][12] = 180;\n        lv1BuyPrice[2][13] = 400;\n        lv1BuyPrice[2][14] = 420;\n        lv1BuyPrice[2][15] = 380;\n        lv1BuyPrice[2][16] = 390;\n\n        lv1BuyPrice[3][1] = 200;\n        lv1BuyPrice[3][2] = 220;\n        lv1BuyPrice[3][3] = 210;\n        lv1BuyPrice[3][4] = 190;\n        lv1BuyPrice[3][5] = 250;\n        lv1BuyPrice[3][6] = 240;\n        lv1BuyPrice[3][7] = 230;\n        lv1BuyPrice[3][8] = 260;\n        lv1BuyPrice[3][9] = 300;\n        lv1BuyPrice[3][10] = 310;\n        lv1BuyPrice[3][11] = 320;\n        lv1BuyPrice[3][12] = 280;\n        lv1BuyPrice[3][13] = 150;\n        lv1BuyPrice[3][14] = 140;\n        lv1BuyPrice[3][15] = 160;\n        lv1BuyPrice[3][16] = 170;\n\n        lv1BuyPrice[4][1] = 250;\n        lv1BuyPrice[4][2] = 240;\n        lv1BuyPrice[4][3] = 235;\n        lv1BuyPrice[4][4] = 230;\n        lv1BuyPrice[4][5] = 300;\n        lv1BuyPrice[4][6] = 310;\n        lv1BuyPrice[4][7] = 320;\n        lv1BuyPrice[4][8] = 280;\n        lv1BuyPrice[4][9] = 200;\n        lv1BuyPrice[4][10] = 220;\n        lv1BuyPrice[4][11] = 210;\n        lv1BuyPrice[4][12] = 190;\n        lv1BuyPrice[4][13] = 420;\n        lv1BuyPrice[4][14] = 410;\n        lv1BuyPrice[4][15] = 380;\n        lv1BuyPrice[4][16] = 390;\n\n        lv1BuyPrice[5][1] = 250;\n        lv1BuyPrice[5][2] = 240;\n        lv1BuyPrice[5][3] = 235;\n        lv1BuyPrice[5][4] = 230;\n        lv1BuyPrice[5][5] = 300;\n        lv1BuyPrice[5][6] = 320;\n        lv1BuyPrice[5][7] = 280;\n        lv1BuyPrice[5][8] = 270;\n        lv1BuyPrice[5][9] = 200;\n        lv1BuyPrice[5][10] = 220;\n        lv1BuyPrice[5][11] = 210;\n        lv1BuyPrice[5][12] = 240;\n        lv1BuyPrice[5][13] = 400;\n        lv1BuyPrice[5][14] = 410;\n        lv1BuyPrice[5][15] = 440; \n        lv1BuyPrice[5][16] = 360; \n     \n         \n        \n    }\n\n    function receiveApproval(address _sender, uint256 _value,\n    address _tokenContract, bytes memory _extraData) public{\n        bytes1 action;\n\n        uint8 index;\n        uint8 box_amount;\n        uint8 rate;\n        \n        uint16 city;\n        uint16 domain;\n        uint totalPrice; \n    \n        address box_address; \n        \n        action = _extraData[0]; \n        \n\n        if (action == 0x1){ \n            require(_extraData.length == 3);\n            rate = 100;\n            (city,domain) = master(master_address).inquire_location(_sender);\n            \n            \n            for(uint8 i =0 ;i<master(master_address).inquire_tot_building(city,domain).length ;i++ ){\n                if( master(master_address).inquire_tot_building(city,domain)[i] == 4){\n                   rate = rate.sub(5);\n                }else if(master(master_address).inquire_tot_building(city,domain)[i] == 19){\n                   rate = rate.sub(10);\n                }\n            }\n\n            index = uint8(_extraData[1]); \n            box_amount = uint8(_extraData[2]);\n            require(box_amount_city[city][index] >= box_amount);\n            box_address = boxManager(boxManager_address).newContracts(index);\n           \n            totalPrice = 0;\n            for( i =1 ;i<= box_amount ;i++ ){\n                totalPrice = totalPrice.add(realPrice(city, index) /100 * rate); \n                pool[city] = pool[city].add(realPrice(city, index) /100 * rate);\n            }\n\n            require(_tokenContract == arina_address);\n            \n            require(_value == totalPrice);\n            \n            require(box_amount_city[city][index] >= box_amount);\n            \n            require(ERC20(arina_address).transferFrom(_sender, address(this), _value),\"交易失敗\");\n            \n            ERC20(box_address).transfer(_sender, box_amount);\n            box_amount_city[city][index]= box_amount_city[city][index].sub(box_amount);\n            emit buyBox(_sender,index,box_amount,totalPrice);\n        }\n \n        else if(action == 0x2){ \n            require(_extraData.length == 2);\n            rate = 100;         \n            \n            index = uint8(_extraData[1]); \n            box_amount = uint8(_value);\n            \n            \n            \n            (city,domain) = master(master_address).inquire_location(_sender);\n            \n            \n            for(i =0 ;i<master(master_address).inquire_tot_building(city,domain).length ;i++ ){\n                if( master(master_address).inquire_tot_building(city,domain)[i] == 4){\n                   rate = rate.add(5);\n                }else if(master(master_address).inquire_tot_building(city,domain)[i] == 16){\n                   rate = rate.add(10);\n                }\n            } \n            \n            box_address = boxManager(boxManager_address).newContracts(index);\n\n            \n            totalPrice = 0; \n            for(i =1 ;i<= box_amount ;i++ ){\n                totalPrice = totalPrice.add((realPrice(city, index)/4) /100 *rate);\n                pool[city] = pool[city].sub((realPrice(city, index)/4) /100 *rate);\n            }\n             \n\n            require(_tokenContract == box_address);\n            \n            require(ERC20(box_address).transferFrom(_sender, address(this), _value),\"交易失敗\");\n            \n            box_amount_city[city][index] =  box_amount_city[city][index].add(box_amount); \n            \n            \n            require(pool[city] >= totalPrice);\n            \n            ERC20(arina_address).transfer(_sender, totalPrice);\n             \n            emit sellBox(_sender,index,box_amount,totalPrice);\n        }  \n        else if(action == 0x3){ \n            require(_sender == manager);\n            require(_extraData.length == 2);\n            city = uint8(_extraData[1]);\n\n            require(_tokenContract == arina_address);\n            \n            require(ERC20(arina_address).transferFrom(_sender, address(this), _value),\"交易失敗\");\n            pool[city] = pool[city].add(_value);\n        }\n\n        else{revert();}\n \n    }\n    \n    function checkSlave() public view returns(bool){ \n        uint length = master(master_address).owner_slave_amount();\n        for(uint i=1;i<=length;i++){\n             address slave = master(master_address).owner_slave(i);\n             if(msg.sender == slave){\n                 return true;\n             }\n        }\n        return false;\n    }\n\n    \n \n    function inquire_pool(uint16 _city) public view returns(uint){   \n        return pool[_city];\n    }\n\n    function origBuyPrice(uint16 _city,uint8 _index) public view returns(uint){\n        \n\n        uint8 lv = _index%5 + 1 ;\n        uint8 typ = _index/5 ; \n        if (lv == 1){  \n            return lv1BuyPrice[typ][_city] * (10**7);\n        }\n        else{\n            return lv1BuyPrice[typ][_city] * (10**7) * 3**(uint(lv)-1); \n        }\n    }\n\n    function cpi(uint16 _city) public view returns(int){        \n\n        uint balance = pool[_city]/100000000;\n        return (int(balance)*10000)/(500000)-10000;\n        \n        \n    } \n\n    function realPrice(uint16 _city, uint8 _index) public view returns(uint){\n        return origBuyPrice(_city,_index)*(10000+uint(cpi(_city)))/10000;\n    }\n\n    function inquire_box_address(uint8 _index) public view returns(address){\n        return boxManager(boxManager_address).newContracts(_index);\n    } \n \n    function inquire_box_amount(uint16 _city,uint8 _index) public view returns(uint){\n        return box_amount_city[_city][_index];\n    }\n    \n    function set_city_pool(uint _arina, uint16 _city ) external{   \n        require(msg.sender == master_address);\n        pool[_city] = pool[_city].add(_arina);\n    }\n    \n    function set_city_box_amount(uint16 _city, uint8 _index, uint _amount ) external{   \n        require(checkSlave());\n        box_amount_city[_city][_index] = box_amount_city[_city][_index].add(_amount);\n    }\n    \n    function exchange_arina(uint _arina, uint16 _city, address _target) external {\n        require(msg.sender == master_address);\n        require(pool[_city] >= _arina);\n        ERC20(arina_address).transfer(_target, _arina); \n        pool[_city] = pool[_city].sub(_arina);\n    }\n \n\n\n    \n\n    function withdraw_all_ETH() public onlymanager{\n        manager.transfer(address(this).balance);\n    }\n\n    function withdraw_all_arina() public onlymanager{\n        uint asset = ERC20(arina_address).balanceOf(address(this));\n        uint length = master(master_address).owner_slave_amount();\n        ERC20(arina_address).transfer(manager, asset);\n         \n        for(uint8 i = 1;i <= length;i++){\n            pool[i] = 0;\n        }\n        \n    }\n\n    function withdraw_ETH(uint _eth_wei) public onlymanager{\n        manager.transfer(_eth_wei);\n    }\n\n    function withdraw_arina(uint _arina, uint16 _city) public onlymanager{\n        require(pool[_city] >= _arina);\n        ERC20(arina_address).transfer(manager, _arina); \n        pool[_city] = pool[_city].sub(_arina);\n    }\n\n\n    function set_arina_address(address _arina_address) public onlymanager{\n        arina_address = _arina_address;\n    }\n\n    function set_boxManager_address(address _boxManager_address) public onlymanager{\n        boxManager_address = _boxManager_address;\n    }\n\n    function set_master_address(address _master_address) public onlymanager{\n        master_address = _master_address;\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_eth_wei\",\"type\":\"uint256\"}],\"name\":\"withdraw_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"set_city_box_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_boxManager_address\",\"type\":\"address\"}],\"name\":\"set_boxManager_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"cpi\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"origBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all_ETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"inquire_pool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina_address\",\"type\":\"address\"}],\"name\":\"set_arina_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina\",\"type\":\"uint256\"},{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"withdraw_arina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"inquire_box_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"realPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina\",\"type\":\"uint256\"},{\"name\":\"_city\",\"type\":\"uint16\"}],\"name\":\"set_city_pool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkSlave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master_address\",\"type\":\"address\"}],\"name\":\"set_master_address\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arina\",\"type\":\"uint256\"},{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"exchange_arina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_manager\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_all_arina\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_city\",\"type\":\"uint16\"},{\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"inquire_box_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"boxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyPrice\",\"type\":\"uint256\"}],\"name\":\"buyBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"boxIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"boxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellPrice\",\"type\":\"uint256\"}],\"name\":\"sellBox\",\"type\":\"event\"}]",
  "bytecode": "608060405260018054600160a060020a031990811673e6987cd613dfda0995a95b3e6acbabececd4137617909155600280548216730ac10bf0342fa2724e93d250751186ba5b65930317905560038054909116738842511f9eaaa75904017ff8ca26ba03ee2ddfa017905534801561007657600080fd5b50336000806101000a815481600160a060020a030219169083600160a060020a0316021790555061012c600460008060ff1681526020019081526020016000206000600161ffff16815260200190815260200160002081905550610140600460008060ff1681526020019081526020016000206000600261ffff16815260200190815260200160002081905550610118600460008060ff1681526020019081526020016000206000600361ffff16815260200190815260200160002081905550610122600460008060ff1681526020019081526020016000206000600461ffff1681526020019081526020016000208190555060fa600460008060ff1681526020019081526020016000206000600561ffff16815260200190815260200160002081905550610104600460008060ff1681526020019081526020016000206000600661ffff1681526020019081526020016000208190555060f0600460008060ff1681526020019081526020016000206000600761ffff1681526020019081526020016000208190555060e6600460008060ff1681526020019081526020016000206000600861ffff1681526020019081526020016000208190555060a0600460008060ff1681526020019081526020016000206000600961ffff16815260200190815260200160002081905550609c600460008060ff1681526020019081526020016000206000600a61ffff168152602001908152602001600020819055506090600460008060ff1681526020019081526020016000206000600b61ffff16815260200190815260200160002081905550608c600460008060ff1681526020019081526020016000206000600c61ffff168152602001908152602001600020819055506101a4600460008060ff1681526020019081526020016000206000600d61ffff1681526020019081526020016000208190555061019f600460008060ff1681526020019081526020016000206000600e61ffff16815260200190815260200160002081905550610186600460008060ff1681526020019081526020016000206000600f61ffff168152602001908152602001600020819055506101cc600460008060ff1681526020019081526020016000206000601061ffff16815260200190815260200160002081905550609660046000600160ff1681526020019081526020016000206000600161ffff1681526020019081526020016000208190555060a060046000600160ff1681526020019081526020016000206000600261ffff16815260200190815260200160002081905550609c60046000600160ff1681526020019081526020016000206000600361ffff1681526020019081526020016000208190555060a460046000600160ff1681526020019081526020016000206000600461ffff16815260200190815260200160002081905550606460046000600160ff1681526020019081526020016000206000600561ffff16815260200190815260200160002081905550606e60046000600160ff1681526020019081526020016000206000600661ffff16815260200190815260200160002081905550606960046000600160ff1681526020019081526020016000206000600761ffff16815260200190815260200160002081905550606260046000600160ff1681526020019081526020016000206000600861ffff1681526020019081526020016000208190555060fa60046000600160ff1681526020019081526020016000206000600961ffff1681526020019081526020016000208190555060f060046000600160ff1681526020019081526020016000206000600a61ffff1681526020019081526020016000208190555060e660046000600160ff1681526020019081526020016000206000600b61ffff1681526020019081526020016000208190555061010460046000600160ff1681526020019081526020016000206000600c61ffff1681526020019081526020016000208190555060c860046000600160ff1681526020019081526020016000206000600d61ffff1681526020019081526020016000208190555060dc60046000600160ff1681526020019081526020016000206000600e61ffff1681526020019081526020016000208190555060d260046000600160ff1681526020019081526020016000206000600f61ffff1681526020019081526020016000208190555060be60046000600160ff1681526020019081526020016000206000601061ffff1681526020019081526020016000208190555061012c60046000600260ff1681526020019081526020016000206000600161ffff1681526020019081526020016000208190555061013660046000600260ff1681526020019081526020016000206000600261ffff1681526020019081526020016000208190555061014060046000600260ff1681526020019081526020016000206000600361ffff1681526020019081526020016000208190555061012260046000600260ff1681526020019081526020016000206000600461ffff1681526020019081526020016000208190555060fa60046000600260ff1681526020019081526020016000206000600561ffff1681526020019081526020016000208190555060f060046000600260ff1681526020019081526020016000206000600661ffff1681526020019081526020016000208190555061010460046000600260ff1681526020019081526020016000206000600761ffff1681526020019081526020016000208190555060eb60046000600260ff1681526020019081526020016000206000600861ffff1681526020019081526020016000208190555060c860046000600260ff1681526020019081526020016000206000600961ffff1681526020019081526020016000208190555060d260046000600260ff1681526020019081526020016000206000600a61ffff1681526020019081526020016000208190555060dc60046000600260ff1681526020019081526020016000206000600b61ffff1681526020019081526020016000208190555060b460046000600260ff1681526020019081526020016000206000600c61ffff1681526020019081526020016000208190555061019060046000600260ff1681526020019081526020016000206000600d61ffff168152602001908152602001600020819055506101a460046000600260ff1681526020019081526020016000206000600e61ffff1681526020019081526020016000208190555061017c60046000600260ff1681526020019081526020016000206000600f61ffff1681526020019081526020016000208190555061018660046000600260ff1681526020019081526020016000206000601061ffff1681526020019081526020016000208190555060c860046000600360ff1681526020019081526020016000206000600161ffff1681526020019081526020016000208190555060dc60046000600360ff1681526020019081526020016000206000600261ffff1681526020019081526020016000208190555060d260046000600360ff1681526020019081526020016000206000600361ffff1681526020019081526020016000208190555060be60046000600360ff1681526020019081526020016000206000600461ffff1681526020019081526020016000208190555060fa60046000600360ff1681526020019081526020016000206000600561ffff1681526020019081526020016000208190555060f060046000600360ff1681526020019081526020016000206000600661ffff1681526020019081526020016000208190555060e660046000600360ff1681526020019081526020016000206000600761ffff1681526020019081526020016000208190555061010460046000600360ff1681526020019081526020016000206000600861ffff1681526020019081526020016000208190555061012c60046000600360ff1681526020019081526020016000206000600961ffff1681526020019081526020016000208190555061013660046000600360ff1681526020019081526020016000206000600a61ffff1681526020019081526020016000208190555061014060046000600360ff1681526020019081526020016000206000600b61ffff1681526020019081526020016000208190555061011860046000600360ff1681526020019081526020016000206000600c61ffff16815260200190815260200160002081905550609660046000600360ff1681526020019081526020016000206000600d61ffff16815260200190815260200160002081905550608c60046000600360ff1681526020019081526020016000206000600e61ffff1681526020019081526020016000208190555060a060046000600360ff1681526020019081526020016000206000600f61ffff1681526020019081526020016000208190555060aa60046000600360ff1681526020019081526020016000206000601061ffff1681526020019081526020016000208190555060fa60046000600460ff1681526020019081526020016000206000600161ffff1681526020019081526020016000208190555060f060046000600460ff1681526020019081526020016000206000600261ffff1681526020019081526020016000208190555060eb60046000600460ff1681526020019081526020016000206000600361ffff1681526020019081526020016000208190555060e660046000600460ff1681526020019081526020016000206000600461ffff1681526020019081526020016000208190555061012c60046000600460ff1681526020019081526020016000206000600561ffff1681526020019081526020016000208190555061013660046000600460ff1681526020019081526020016000206000600661ffff1681526020019081526020016000208190555061014060046000600460ff1681526020019081526020016000206000600761ffff1681526020019081526020016000208190555061011860046000600460ff1681526020019081526020016000206000600861ffff1681526020019081526020016000208190555060c860046000600460ff1681526020019081526020016000206000600961ffff1681526020019081526020016000208190555060dc60046000600460ff1681526020019081526020016000206000600a61ffff1681526020019081526020016000208190555060d260046000600460ff1681526020019081526020016000206000600b61ffff1681526020019081526020016000208190555060be60046000600460ff1681526020019081526020016000206000600c61ffff168152602001908152602001600020819055506101a460046000600460ff1681526020019081526020016000206000600d61ffff1681526020019081526020016000208190555061019a60046000600460ff1681526020019081526020016000206000600e61ffff1681526020019081526020016000208190555061017c60046000600460ff1681526020019081526020016000206000600f61ffff1681526020019081526020016000208190555061018660046000600460ff1681526020019081526020016000206000601061ffff1681526020019081526020016000208190555060fa60046000600560ff1681526020019081526020016000206000600161ffff1681526020019081526020016000208190555060f060046000600560ff1681526020019081526020016000206000600261ffff1681526020019081526020016000208190555060eb60046000600560ff1681526020019081526020016000206000600361ffff1681526020019081526020016000208190555060e660046000600560ff1681526020019081526020016000206000600461ffff1681526020019081526020016000208190555061012c60046000600560ff1681526020019081526020016000206000600561ffff1681526020019081526020016000208190555061014060046000600560ff1681526020019081526020016000206000600661ffff1681526020019081526020016000208190555061011860046000600560ff1681526020019081526020016000206000600761ffff1681526020019081526020016000208190555061010e60046000600560ff1681526020019081526020016000206000600861ffff1681526020019081526020016000208190555060c860046000600560ff1681526020019081526020016000206000600961ffff1681526020019081526020016000208190555060dc60046000600560ff1681526020019081526020016000206000600a61ffff1681526020019081526020016000208190555060d260046000600560ff1681526020019081526020016000206000600b61ffff1681526020019081526020016000208190555060f060046000600560ff1681526020019081526020016000206000600c61ffff1681526020019081526020016000208190555061019060046000600560ff1681526020019081526020016000206000600d61ffff1681526020019081526020016000208190555061019a60046000600560ff1681526020019081526020016000206000600e61ffff168152602001908152602001600020819055506101b860046000600560ff1681526020019081526020016000206000600f61ffff1681526020019081526020016000208190555061016860046000600560ff1681526020019081526020016000206000601061ffff1681526020019081526020016000208190555061212c806113e46000396000f3006080604052600436106100f85763ffffffff60e060020a6000350416630db1a48381146100fa5780631d3b5f8a146101125780632188e7ef1461013757806325f7ce221461015857806336b242c714610186578063481c6a75146101a85780634ac629a7146101d95780636ae8e618146101ee5780638f4ffcb11461020a578063973438cf1461027a578063a2e26e051461029b578063b071f0fa146102ba578063c57142da146102d5578063c6dc019a146102f7578063da7c186b14610316578063e28e9d521461033f578063e57d351414610360578063e8b5b7961461038b578063ed7ca9bc146103ac578063f1ba858c146103c1575b005b34801561010657600080fd5b506100f86004356103e3565b34801561011e57600080fd5b506100f861ffff6004351660ff60243516604435610437565b34801561014357600080fd5b506100f8600160a060020a03600435166104a8565b34801561016457600080fd5b5061017461ffff600435166104ee565b60408051918252519081900360200190f35b34801561019257600080fd5b5061017461ffff6004351660ff6024351661051a565b3480156101b457600080fd5b506101bd6105a4565b60408051600160a060020a039092168252519081900360200190f35b3480156101e557600080fd5b506100f86105b3565b3480156101fa57600080fd5b5061017461ffff60043516610608565b34801561021657600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526100f894600160a060020a0381358116956024803596604435909316953695608494920191819084018382808284375094975061061e9650505050505050565b34801561028657600080fd5b506100f8600160a060020a0360043516611956565b3480156102a757600080fd5b506100f860043561ffff6024351661199c565b3480156102c657600080fd5b506101bd60ff60043516611a9b565b3480156102e157600080fd5b5061017461ffff6004351660ff60243516611b35565b34801561030357600080fd5b506100f860043561ffff60243516611b65565b34801561032257600080fd5b5061032b611ba0565b604080519115158252519081900360200190f35b34801561034b57600080fd5b506100f8600160a060020a0360043516611cf8565b34801561036c57600080fd5b506100f860043561ffff60243516600160a060020a0360443516611d3e565b34801561039757600080fd5b506100f8600160a060020a0360043516611e3a565b3480156103b857600080fd5b506100f8611e80565b3480156103cd57600080fd5b5061017461ffff6004351660ff60243516612077565b600054600160a060020a031633146103fa57600080fd5b60008054604051600160a060020a039091169183156108fc02918491818181858888f19350505050158015610433573d6000803e3d6000fd5b5050565b61043f611ba0565b151561044a57600080fd5b61ffff8316600090815260066020908152604080832060ff8616845290915290205461047c908263ffffffff61209f16565b61ffff909316600090815260066020908152604080832060ff9095168352939052919091209190915550565b600054600160a060020a031633146104bf57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61ffff166000908152600560205260409020546207a1206305f5e100909104612710020561270f190190565b60006001600560ff8481168281068401939290049190831614156105665760ff8116600090815260046020908152604080832061ffff891684529091529020546298968002925061059c565b60ff818116600090815260046020908152604080832061ffff8a168452909152902054629896809184166000190160030a020292505b505092915050565b600054600160a060020a031681565b600054600160a060020a031633146105ca57600080fd5b60008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015610605573d6000803e3d6000fd5b50565b61ffff1660009081526005602052604090205490565b600080600080600080600080600089600081518110151561063b57fe5b016020015160f860020a90819004810299507fff000000000000000000000000000000000000000000000000000000000000008a161415610ee057895160031461068457600080fd5b60649550600260009054906101000a9004600160a060020a0316600160a060020a031663a42199fb8e6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a031681526020019150506040805180830381600087803b1580156106f757600080fd5b505af115801561070b573d6000803e3d6000fd5b505050506040513d604081101561072157600080fd5b5080516020909101519095509350600090505b6002546040805160e160020a635e034aa302815261ffff8089166004830152871660248201529051600160a060020a039092169163bc0695469160448082019260009290919082900301818387803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156107cc57600080fd5b8101908080516401000000008111156107e457600080fd5b820160208101848111156107f757600080fd5b815185602082028301116401000000008211171561081457600080fd5b50505160ff851610159250610a78915050576002546040805160e160020a635e034aa302815261ffff8089166004830152871660248201529051600160a060020a039092169163bc0695469160448082019260009290919082900301818387803b15801561088157600080fd5b505af1158015610895573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156108be57600080fd5b8101908080516401000000008111156108d657600080fd5b820160208101848111156108e957600080fd5b815185602082028301116401000000008211171561090657600080fd5b5050805190935060ff851692508210905061091d57fe5b9060200190602002015160ff166004141561094d5761094660ff8716600563ffffffff6120af16565b9550610a70565b6002546040805160e160020a635e034aa302815261ffff8089166004830152871660248201529051600160a060020a039092169163bc0695469160448082019260009290919082900301818387803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156109e557600080fd5b8101908080516401000000008111156109fd57600080fd5b82016020810184811115610a1057600080fd5b8151856020820283011164010000000082111715610a2d57600080fd5b5050805190935060ff8516925082109050610a4457fe5b9060200190602002015160ff1660131415610a7057610a6d60ff8716600a63ffffffff6120af16565b95505b600101610734565b896001815181101515610a8757fe5b90602001015160f860020a900460f860020a0260f860020a90049750896002815181101515610ab257fe5b0160209081015161ffff8716600090815260068352604080822060ff8d81168452945290205460f860020a9182900482029190910498509088161115610af757600080fd5b600354604080517fbd21ad1900000000000000000000000000000000000000000000000000000000815260ff8b1660048201529051600160a060020a039092169163bd21ad19916024808201926020929091908290030181600087803b158015610b6057600080fd5b505af1158015610b74573d6000803e3d6000fd5b505050506040513d6020811015610b8a57600080fd5b5051600093509150600190505b60ff80881690821611610c2f57610bd18660ff166064610bb7888c611b35565b811515610bc057fe5b04028461209f90919063ffffffff16565b9250610c138660ff166064610be6888c611b35565b811515610bef57fe5b61ffff8916600090815260056020526040902054929190040263ffffffff61209f16565b61ffff8616600090815260056020526040902055600101610b97565b600154600160a060020a038c8116911614610c4957600080fd5b8b8314610c5557600080fd5b61ffff8516600090815260066020908152604080832060ff8c811685529252909120549088161115610c8657600080fd5b600160009054906101000a9004600160a060020a0316600160a060020a03166323b872dd8e308f6040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050602060405180830381600087803b158015610d1857600080fd5b505af1158015610d2c573d6000803e3d6000fd5b505050506040513d6020811015610d4257600080fd5b50511515610db157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527fe4baa4e69893e5a4b1e695970000000000000000000000000000000000000000604482015290519081900360640190fd5b6040805160e060020a63a9059cbb028152600160a060020a038f8116600483015260ff8a16602483015291519184169163a9059cbb916044808201926020929091908290030181600087803b158015610e0957600080fd5b505af1158015610e1d573d6000803e3d6000fd5b505050506040513d6020811015610e3357600080fd5b505061ffff8516600090815260066020908152604080832060ff8c81168552925290912054610e6991891663ffffffff6120cc16565b61ffff8616600090815260066020908152604080832060ff808e1680865291845293829020949094558051938452918a169083015281810185905251600160a060020a038f16917f22eff439632cacd6afbc6633abd6d0a3aa18f21b6ce5c45a00e4f44206498d4b919081900360600190a2611947565b7f02000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008a161415611724578951600214610f3857600080fd5b60649550896001815181101515610f4b57fe5b90602001015160f860020a900460f860020a0260f860020a900497508b9650600260009054906101000a9004600160a060020a0316600160a060020a031663a42199fb8e6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a031681526020019150506040805180830381600087803b158015610fd957600080fd5b505af1158015610fed573d6000803e3d6000fd5b505050506040513d604081101561100357600080fd5b5080516020909101519095509350600090505b6002546040805160e160020a635e034aa302815261ffff8089166004830152871660248201529051600160a060020a039092169163bc0695469160448082019260009290919082900301818387803b15801561107157600080fd5b505af1158015611085573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156110ae57600080fd5b8101908080516401000000008111156110c657600080fd5b820160208101848111156110d957600080fd5b81518560208202830111640100000000821117156110f657600080fd5b50505160ff85161015925061135a915050576002546040805160e160020a635e034aa302815261ffff8089166004830152871660248201529051600160a060020a039092169163bc0695469160448082019260009290919082900301818387803b15801561116357600080fd5b505af1158015611177573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156111a057600080fd5b8101908080516401000000008111156111b857600080fd5b820160208101848111156111cb57600080fd5b81518560208202830111640100000000821117156111e857600080fd5b5050805190935060ff85169250821090506111ff57fe5b9060200190602002015160ff166004141561122f5761122860ff8716600563ffffffff6120e116565b9550611352565b6002546040805160e160020a635e034aa302815261ffff8089166004830152871660248201529051600160a060020a039092169163bc0695469160448082019260009290919082900301818387803b15801561128a57600080fd5b505af115801561129e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156112c757600080fd5b8101908080516401000000008111156112df57600080fd5b820160208101848111156112f257600080fd5b815185602082028301116401000000008211171561130f57600080fd5b5050805190935060ff851692508210905061132657fe5b9060200190602002015160ff16601014156113525761134f60ff8716600a63ffffffff6120e116565b95505b600101611016565b600354604080517fbd21ad1900000000000000000000000000000000000000000000000000000000815260ff8b1660048201529051600160a060020a039092169163bd21ad19916024808201926020929091908290030181600087803b1580156113c357600080fd5b505af11580156113d7573d6000803e3d6000fd5b505050506040513d60208110156113ed57600080fd5b5051600093509150600190505b60ff808816908216116114995761142f8660ff166064600461141c898d611b35565b81151561142557fe5b04811515610bc057fe5b925061147d8660ff1660646004611446898d611b35565b81151561144f57fe5b0481151561145957fe5b61ffff8916600090815260056020526040902054929190040263ffffffff6120cc16565b61ffff86166000908152600560205260409020556001016113fa565b600160a060020a038b8116908316146114b157600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038f81166004830152306024830152604482018f90529151918416916323b872dd916064808201926020929091908290030181600087803b15801561152357600080fd5b505af1158015611537573d6000803e3d6000fd5b505050506040513d602081101561154d57600080fd5b505115156115bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527fe4baa4e69893e5a4b1e695970000000000000000000000000000000000000000604482015290519081900360640190fd5b61ffff8516600090815260066020908152604080832060ff8c811685529252909120546115f091891663ffffffff61209f16565b61ffff8616600081815260066020908152604080832060ff8e1684528252808320949094559181526005909152205483111561162b57600080fd5b600160009054906101000a9004600160a060020a0316600160a060020a031663a9059cbb8e856040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156116a357600080fd5b505af11580156116b7573d6000803e3d6000fd5b505050506040513d60208110156116cd57600080fd5b50506040805160ff808b168252891660208201528082018590529051600160a060020a038f16917fe05cf4d908467e3361cd7d6f3bc1f8091f0733b6ff8481f1dd959ec644c943ec919081900360600190a2611947565b7f03000000000000000000000000000000000000000000000000000000000000007fff000000000000000000000000000000000000000000000000000000000000008a16141561194257600054600160a060020a038e811691161461178857600080fd5b895160021461179657600080fd5b8960018151811015156117a557fe5b60209101015160015460f860020a9182900482029190910460ff169550600160a060020a03908116908c16146117da57600080fd5b600160009054906101000a9004600160a060020a0316600160a060020a03166323b872dd8e308f6040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050602060405180830381600087803b15801561186c57600080fd5b505af1158015611880573d6000803e3d6000fd5b505050506040513d602081101561189657600080fd5b5051151561190557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527fe4baa4e69893e5a4b1e695970000000000000000000000000000000000000000604482015290519081900360640190fd5b61ffff8516600090815260056020526040902054611929908d63ffffffff61209f16565b61ffff8616600090815260056020526040902055611947565b600080fd5b50505050505050505050505050565b600054600160a060020a0316331461196d57600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031633146119b357600080fd5b61ffff81166000908152600560205260409020548211156119d357600080fd5b600154600080546040805160e060020a63a9059cbb028152600160a060020a039283166004820152602481018790529051919093169263a9059cbb9260448083019360209390929083900390910190829087803b158015611a3357600080fd5b505af1158015611a47573d6000803e3d6000fd5b505050506040513d6020811015611a5d57600080fd5b505061ffff8116600090815260056020526040902054611a83908363ffffffff6120cc16565b61ffff90911660009081526005602052604090205550565b600354604080517fbd21ad1900000000000000000000000000000000000000000000000000000000815260ff841660048201529051600092600160a060020a03169163bd21ad1991602480830192602092919082900301818787803b158015611b0357600080fd5b505af1158015611b17573d6000803e3d6000fd5b505050506040513d6020811015611b2d57600080fd5b505192915050565b6000612710611b43846104ee565b61271001611b51858561051a565b02811515611b5b57fe5b0490505b92915050565b600254600160a060020a03163314611b7c57600080fd5b61ffff8116600090815260056020526040902054611a83908363ffffffff61209f16565b600080600080600260009054906101000a9004600160a060020a0316600160a060020a031663d43b9c866040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611bf957600080fd5b505af1158015611c0d573d6000803e3d6000fd5b505050506040513d6020811015611c2357600080fd5b50519250600191505b828211611ced57600254604080517fcf2da6b8000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039092169163cf2da6b8916024808201926020929091908290030181600087803b158015611c9a57600080fd5b505af1158015611cae573d6000803e3d6000fd5b505050506040513d6020811015611cc457600080fd5b5051905033600160a060020a0382161415611ce25760019350611cf2565b600190910190611c2c565b600093505b50505090565b600054600160a060020a03163314611d0f57600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a03163314611d5557600080fd5b61ffff8216600090815260056020526040902054831115611d7557600080fd5b6001546040805160e060020a63a9059cbb028152600160a060020a038481166004830152602482018790529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611dce57600080fd5b505af1158015611de2573d6000803e3d6000fd5b505050506040513d6020811015611df857600080fd5b505061ffff8216600090815260056020526040902054611e1e908463ffffffff6120cc16565b61ffff9092166000908152600560205260409020919091555050565b600054600160a060020a03163314611e5157600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000805481908190600160a060020a03163314611e9c57600080fd5b600154604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015611f0257600080fd5b505af1158015611f16573d6000803e3d6000fd5b505050506040513d6020811015611f2c57600080fd5b5051600254604080517fd43b9c860000000000000000000000000000000000000000000000000000000081529051929550600160a060020a039091169163d43b9c86916004808201926020929091908290030181600087803b158015611f9157600080fd5b505af1158015611fa5573d6000803e3d6000fd5b505050506040513d6020811015611fbb57600080fd5b5051600154600080546040805160e060020a63a9059cbb028152600160a060020a03928316600482015260248101899052905194965092169263a9059cbb926044808201936020939283900390910190829087803b15801561201c57600080fd5b505af1158015612030573d6000803e3d6000fd5b505050506040513d602081101561204657600080fd5b5060019150505b60ff811682106120725760ff811660009081526005602052604081205560010161204d565b505050565b61ffff8216600090815260066020908152604080832060ff8516845290915290205492915050565b81810182811015611b5f57600080fd5b60008060ff80851690841611156120c557600080fd5b5050900390565b6000828211156120db57600080fd5b50900390565b600082820160ff80851690821610156120f957600080fd5b93925050505600a165627a7a723058206735587aedb7a0d5b7cbfeec41e8b864a9e09d2368ac63b8801cf242deb06fb60029"
}