{
  "address": "0x51DB884e2A0c96f76ed0003f578Ca5E4D23977F6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CharityVault",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Secondary.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Secondary\n * @dev A Secondary contract can only be used by its primary account (the one that created it)\n */\ncontract Secondary {\n    address private _primary;\n\n    event PrimaryTransferred(\n        address recipient\n    );\n\n    /**\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\n     */\n    constructor () internal {\n        _primary = msg.sender;\n        emit PrimaryTransferred(_primary);\n    }\n\n    /**\n     * @dev Reverts if called from any account other than the primary.\n     */\n    modifier onlyPrimary() {\n        require(msg.sender == _primary);\n        _;\n    }\n\n    /**\n     * @return the address of the primary.\n     */\n    function primary() public view returns (address) {\n        return _primary;\n    }\n\n    /**\n     * @dev Transfers contract to a new primary.\n     * @param recipient The address of new primary.\n     */\n    function transferPrimary(address recipient) public onlyPrimary {\n        require(recipient != address(0));\n        _primary = recipient;\n        emit PrimaryTransferred(_primary);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/CharityVault.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title CharityVault\n * @dev Vault which holds the assets until the community leader(s) decide to transfer\n * them to the actual charity destination.\n * Deposit and withdrawal calls come only from the actual community contract\n */\ncontract CharityVault is Secondary {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private deposits;\n    uint256 public sumStats;\n\n    event LogEthReceived(\n        uint256 amount,\n        address indexed account\n    );\n    event LogEthSent(\n        uint256 amount,\n        address indexed account\n    );\n\n    /**\n    * @dev fallback, 'anonymous' donation\n    **/\n    function() external payable {\n        sumStats.add(msg.value);\n    }\n\n    /**\n     * @dev Stores the sent amount as credit to be withdrawn.\n     * @param _payee The destination address of the funds.\n     */\n    function deposit(address _payee) public onlyPrimary payable {\n        uint256 _amount = msg.value;\n        deposits[_payee] = deposits[_payee].add(_amount);\n        sumStats = sumStats.add(_amount);\n        emit LogEthReceived(_amount, _payee);\n    }\n\n    /**\n     * @dev Withdraw some of accumulated balance for a _payee.\n     */\n    function withdraw(address payable _payee, uint256 _payment) public onlyPrimary {\n        require(_payment > 0 && address(this).balance >= _payment, \"Insufficient funds in the charity fund\");\n        _payee.transfer(_payment);\n        emit LogEthSent(_payment, _payee);\n    }\n\n    function depositsOf(address payee) public view returns (uint256) {\n        return deposits[payee];\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferPrimary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sumStats\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"depositsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_payee\",\"type\":\"address\"},{\"name\":\"_payment\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LogEthReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"LogEthSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimaryTransferred\",\"type\":\"event\"}]",
  "bytecode": "6080604081905260008054600160a060020a031916331790819055600160a060020a031681527f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d990602090a16104818061005a6000396000f3fe608060405260043610610071577c010000000000000000000000000000000000000000000000000000000060003504632348238c8114610087578063c6dbdf61146100bc578063e0b151a1146100ed578063e3a9db1a14610114578063f340fa0114610147578063f3fef3a31461016d575b600254610084903463ffffffff6101a616565b50005b34801561009357600080fd5b506100ba600480360360208110156100aa57600080fd5b5035600160a060020a03166101bf565b005b3480156100c857600080fd5b506100d1610252565b60408051600160a060020a039092168252519081900360200190f35b3480156100f957600080fd5b50610102610261565b60408051918252519081900360200190f35b34801561012057600080fd5b506101026004803603602081101561013757600080fd5b5035600160a060020a0316610267565b6100ba6004803603602081101561015d57600080fd5b5035600160a060020a0316610282565b34801561017957600080fd5b506100ba6004803603604081101561019057600080fd5b50600160a060020a038135169060200135610336565b6000828201838110156101b857600080fd5b9392505050565b600054600160a060020a031633146101d657600080fd5b600160a060020a03811615156101eb57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091179182905560408051929091168252517f4101e71e974f68df5e9730cc223280b41654676bbb052cdcc735c3337e64d2d9916020908290030190a150565b600054600160a060020a031690565b60025481565b600160a060020a031660009081526001602052604090205490565b600054600160a060020a0316331461029957600080fd5b600160a060020a03811660009081526001602052604090205434906102c4908263ffffffff6101a616565b600160a060020a0383166000908152600160205260409020556002546102f0908263ffffffff6101a616565b600255604080518281529051600160a060020a038416917f8a68b2fe3158c268b3e8da102cd572ce692127bcc589402f0e06e2bfc0c3a9cf919081900360200190a25050565b600054600160a060020a0316331461034d57600080fd5b60008111801561035e575030318111155b15156103b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806104306026913960400191505060405180910390fd5b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501580156103eb573d6000803e3d6000fd5b50604080518281529051600160a060020a038416917fdf5983565e1f67d7cfa297d3729a3e95ec39dc41c53cfaf9f92bf23e9ad589bd919081900360200190a2505056fe496e73756666696369656e742066756e647320696e2074686520636861726974792066756e64a165627a7a723058201930c5aae58a4b556cd1d5256094265cb9a607e666eb2bc979a78e6f1b148e300029"
}