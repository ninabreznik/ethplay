{
  "address": "0xcbc55e9c707ca6c954179efe90292058e62d63c7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Lighthouse",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n// File: contracts/robonomics/interface/ILighthouse.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Robonomics lighthouse contract interface\n */\ncontract ILighthouse {\n    /**\n     * @dev Provider going online\n     */\n    event Online(address indexed provider);\n\n    /**\n     * @dev Provider going offline\n     */\n    event Offline(address indexed provider);\n\n    /**\n     * @dev Active robonomics provider\n     */\n    event Current(address indexed provider, uint256 indexed quota);\n\n    /**\n     * @dev Robonomics providers list\n     */\n    address[] public providers;\n\n    /**\n     * @dev Count of robonomics providers on this lighthouse\n     */\n    function providersLength() public view returns (uint256)\n    { return providers.length; }\n\n    /**\n     * @dev Provider stake distribution\n     */\n    mapping(address => uint256) public stakes;\n\n    /**\n     * @dev Minimal stake to get one quota\n     */\n    uint256 public minimalStake;\n\n    /**\n     * @dev Silence timeout for provider in blocks\n     */\n    uint256 public timeoutInBlocks;\n\n    /**\n     * @dev Block number of last transaction from current provider\n     */\n    uint256 public keepAliveBlock;\n\n    /**\n     * @dev Round robin provider list marker\n     */\n    uint256 public marker;\n\n    /**\n     * @dev Current provider quota\n     */\n    uint256 public quota;\n\n    /**\n     * @dev Get quota of provider\n     */\n    function quotaOf(address _provider) public view returns (uint256)\n    { return stakes[_provider] / minimalStake; }\n\n    /**\n     * @dev Increase stake and get more quota,\n     *      one quota - one transaction in round\n     * @param _value in wn\n     * @notice XRT should be approved before call this \n     */\n    function refill(uint256 _value) external returns (bool);\n\n    /**\n     * @dev Decrease stake and get XRT back\n     * @param _value in wn\n     */\n    function withdraw(uint256 _value) external returns (bool);\n\n    /**\n     * @dev Create liability smart contract assigned to this lighthouse\n     * @param _demand ABI-encoded demand message\n     * @param _offer ABI-encoded offer message\n     * @notice Only current provider can call it\n     */\n    function createLiability(\n        bytes calldata _demand,\n        bytes calldata _offer\n    ) external returns (bool);\n\n    /**\n     * @dev Finalize liability smart contract assigned to this lighthouse\n     * @param _liability smart contract address\n     * @param _result report of work\n     * @param _success work success flag\n     * @param _signature work signature\n     */\n    function finalizeLiability(\n        address _liability,\n        bytes calldata _result,\n        bool _success,\n        bytes calldata _signature\n    ) external returns (bool);\n}\n\n// File: contracts/robonomics/interface/ILiability.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Standard liability smart contract interface\n */\ncontract ILiability {\n    /**\n     * @dev Liability termination signal\n     */\n    event Finalized(bool indexed success, bytes result);\n\n    /**\n     * @dev Behaviour model multihash\n     */\n    bytes public model;\n\n    /**\n     * @dev Objective ROSBAG multihash\n     * @notice ROSBAGv2 is used: http://wiki.ros.org/Bags/Format/2.0 \n     */\n    bytes public objective;\n\n    /**\n     * @dev Report ROSBAG multihash \n     * @notice ROSBAGv2 is used: http://wiki.ros.org/Bags/Format/2.0 \n     */\n    bytes public result;\n\n    /**\n     * @dev Payment token address\n     */\n    address public token;\n\n    /**\n     * @dev Liability cost\n     */\n    uint256 public cost;\n\n    /**\n     * @dev Lighthouse fee in wn\n     */\n    uint256 public lighthouseFee;\n\n    /**\n     * @dev Validator fee in wn\n     */\n    uint256 public validatorFee;\n\n    /**\n     * @dev Robonomics demand message hash\n     */\n    bytes32 public demandHash;\n\n    /**\n     * @dev Robonomics offer message hash\n     */\n    bytes32 public offerHash;\n\n    /**\n     * @dev Liability promisor address\n     */\n    address public promisor;\n\n    /**\n     * @dev Liability promisee address\n     */\n    address public promisee;\n\n    /**\n     * @dev Lighthouse assigned to this liability\n     */\n    address public lighthouse;\n\n    /**\n     * @dev Liability validator address\n     */\n    address public validator;\n\n    /**\n     * @dev Liability success flag\n     */\n    bool public isSuccess;\n\n    /**\n     * @dev Liability finalization status flag\n     */\n    bool public isFinalized;\n\n    /**\n     * @dev Deserialize robonomics demand message\n     * @notice It can be called by factory only\n     */\n    function demand(\n        bytes   calldata _model,\n        bytes   calldata _objective,\n\n        address _token,\n        uint256 _cost,\n\n        address _lighthouse,\n\n        address _validator,\n        uint256 _validator_fee,\n\n        uint256 _deadline,\n        address _sender,\n        bytes   calldata _signature\n    ) external returns (bool);\n\n    /**\n     * @dev Deserialize robonomics offer message\n     * @notice It can be called by factory only\n     */\n    function offer(\n        bytes   calldata _model,\n        bytes   calldata _objective,\n        \n        address _token,\n        uint256 _cost,\n\n        address _validator,\n\n        address _lighthouse,\n        uint256 _lighthouse_fee,\n\n        uint256 _deadline,\n        address _sender,\n        bytes   calldata _signature\n    ) external returns (bool);\n\n    /**\n     * @dev Finalize liability contract\n     * @param _result Result data hash\n     * @param _success Set 'true' when liability has success result\n     * @param _signature Result signature: liability address, result and success flag signed by promisor\n     * @notice It can be called by assigned lighthouse only\n     */\n    function finalize(\n        bytes calldata _result,\n        bool  _success,\n        bytes calldata _signature\n    ) external returns (bool);\n}\n\n// File: contracts/robonomics/interface/IFactory.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Robonomics liability factory interface\n */\ncontract IFactory {\n    /**\n     * @dev New liability created \n     */\n    event NewLiability(address indexed liability);\n\n    /**\n     * @dev New lighthouse created\n     */\n    event NewLighthouse(address indexed lighthouse, string name);\n\n    /**\n     * @dev Lighthouse address mapping\n     */\n    mapping(address => bool) public isLighthouse;\n\n    /**\n     * @dev Nonce accounting\n     */\n    mapping(address => uint256) public nonceOf;\n\n    /**\n     * @dev Total GAS utilized by Robonomics network\n     */\n    uint256 public totalGasConsumed = 0;\n\n    /**\n     * @dev GAS utilized by liability contracts\n     */\n    mapping(address => uint256) public gasConsumedOf;\n\n    /**\n     * @dev The count of consumed gas for switch to next epoch \n     */\n    uint256 public constant gasEpoch = 347 * 10**10;\n\n    /**\n     * @dev Current gas price in wei\n     */\n    uint256 public gasPrice = 10 * 10**9;\n\n    /**\n     * @dev XRT emission value for consumed gas\n     * @param _gas Gas consumed by robonomics program\n     */\n    function wnFromGas(uint256 _gas) public view returns (uint256);\n\n    /**\n     * @dev Create lighthouse smart contract\n     * @param _minimalStake Minimal stake value of XRT token (one quota price)\n     * @param _timeoutInBlocks Max time of lighthouse silence in blocks\n     * @param _name Lighthouse name,\n     *              example: 'my-name' will create 'my-name.lighthouse.4.robonomics.eth' domain\n     */\n    function createLighthouse(\n        uint256 _minimalStake,\n        uint256 _timeoutInBlocks,\n        string calldata _name\n    ) external returns (ILighthouse);\n\n    /**\n     * @dev Create robot liability smart contract\n     * @param _demand ABI-encoded demand message\n     * @param _offer ABI-encoded offer message\n     * @notice This method is for lighthouse contract use only\n     */\n    function createLiability(\n        bytes calldata _demand,\n        bytes calldata _offer\n    ) external returns (ILiability);\n\n    /**\n     * @dev Is called after liability creation\n     * @param _liability Liability contract address\n     * @param _start_gas Transaction start gas level\n     * @notice This method is for lighthouse contract use only\n     */\n    function liabilityCreated(ILiability _liability, uint256 _start_gas) external returns (bool);\n\n    /**\n     * @dev Is called after liability finalization\n     * @param _liability Liability contract address\n     * @param _start_gas Transaction start gas level\n     * @notice This method is for lighthouse contract use only\n     */\n    function liabilityFinalized(ILiability _liability, uint256 _start_gas) external returns (bool);\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.0;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/robonomics/XRT.sol\n\npragma solidity ^0.5.0;\n\n\n\n\ncontract XRT is ERC20Mintable, ERC20Burnable, ERC20Detailed {\n    constructor(uint256 _initial_supply) public ERC20Detailed(\"Robonomics\", \"XRT\", 9) {\n        _mint(msg.sender, _initial_supply);\n    }\n}\n\n// File: contracts/robonomics/Lighthouse.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n\ncontract Lighthouse is ILighthouse {\n    using SafeERC20 for XRT;\n\n    IFactory public factory;\n    XRT      public xrt;\n\n    function setup(XRT _xrt, uint256 _minimalStake, uint256 _timeoutInBlocks) external returns (bool) {\n        require(factory == IFactory(0) && _minimalStake > 0 && _timeoutInBlocks > 0);\n\n        minimalStake    = _minimalStake;\n        timeoutInBlocks = _timeoutInBlocks;\n        factory         = IFactory(msg.sender);\n        xrt             = _xrt;\n\n        return true;\n    }\n\n    /**\n     * @dev Providers index, started from 1\n     */\n    mapping(address => uint256) public indexOf;\n\n    function refill(uint256 _value) external returns (bool) {\n        xrt.safeTransferFrom(msg.sender, address(this), _value);\n\n        if (stakes[msg.sender] == 0) {\n            require(_value >= minimalStake);\n            providers.push(msg.sender);\n            indexOf[msg.sender] = providers.length;\n            emit Online(msg.sender);\n        }\n\n        stakes[msg.sender] += _value;\n        return true;\n    }\n\n    function withdraw(uint256 _value) external returns (bool) {\n        require(stakes[msg.sender] >= _value);\n\n        stakes[msg.sender] -= _value;\n        xrt.safeTransfer(msg.sender, _value);\n\n        // Drop member with zero quota\n        if (quotaOf(msg.sender) == 0) {\n            uint256 balance = stakes[msg.sender];\n            stakes[msg.sender] = 0;\n            xrt.safeTransfer(msg.sender, balance);\n            \n            uint256 senderIndex = indexOf[msg.sender] - 1;\n            uint256 lastIndex = providers.length - 1;\n            if (senderIndex < lastIndex)\n                providers[senderIndex] = providers[lastIndex];\n\n            providers.length -= 1;\n            indexOf[msg.sender] = 0;\n\n            emit Offline(msg.sender);\n        }\n        return true;\n    }\n\n    function keepAliveTransaction() internal {\n        if (timeoutInBlocks < block.number - keepAliveBlock) {\n            // Set up the marker according to provider index\n            marker = indexOf[msg.sender];\n\n            // Thransaction sender should be a registered provider\n            require(marker > 0 && marker <= providers.length);\n\n            // Allocate new quota\n            quota = quotaOf(providers[marker - 1]);\n\n            // Current provider signal\n            emit Current(providers[marker - 1], quota);\n        }\n\n        // Store transaction sending block\n        keepAliveBlock = block.number;\n    }\n\n    function quotedTransaction() internal {\n        // Don't premit transactions without providers on board\n        require(providers.length > 0);\n\n        // Zero quota guard\n        // XXX: When quota for some reasons is zero, DoS will be preverted by keepalive transaction\n        require(quota > 0);\n\n        // Only provider with marker can to send transaction\n        require(msg.sender == providers[marker - 1]);\n\n        // Consume one quota for transaction sending\n        if (quota > 1) {\n            quota -= 1;\n        } else {\n            // Step over marker\n            marker = marker % providers.length + 1;\n\n            // Allocate new quota\n            quota = quotaOf(providers[marker - 1]);\n\n            // Current provider signal\n            emit Current(providers[marker - 1], quota);\n        }\n    }\n\n    function startGas() internal view returns (uint256 gas) {\n        // the total amount of gas the tx is DataFee + TxFee + ExecutionGas\n        // ExecutionGas\n        gas = gasleft();\n        // TxFee\n        gas += 21000;\n        // DataFee\n        for (uint256 i = 0; i < msg.data.length; ++i)\n            gas += msg.data[i] == 0 ? 4 : 68;\n    }\n\n    function createLiability(\n        bytes calldata _demand,\n        bytes calldata _offer\n    )\n        external\n        returns (bool)\n    {\n        // Gas with estimation error\n        uint256 gas = startGas() + 4887;\n\n        keepAliveTransaction();\n        quotedTransaction();\n\n        ILiability liability = factory.createLiability(_demand, _offer);\n        require(liability != ILiability(0));\n        require(factory.liabilityCreated(liability, gas - gasleft()));\n        return true;\n    }\n\n    function finalizeLiability(\n        address _liability,\n        bytes calldata _result,\n        bool _success,\n        bytes calldata _signature\n    )\n        external\n        returns (bool)\n    {\n        // Gas with estimation error\n        uint256 gas = startGas() + 22335;\n\n        keepAliveTransaction();\n        quotedTransaction();\n\n        ILiability liability = ILiability(_liability);\n        require(factory.gasConsumedOf(_liability) > 0);\n        require(liability.finalize(_result, _success, _signature));\n        require(factory.liabilityFinalized(liability, gas - gasleft()));\n        return true;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xrt\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keepAliveBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_liability\",\"type\":\"address\"},{\"name\":\"_result\",\"type\":\"bytes\"},{\"name\":\"_success\",\"type\":\"bool\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"finalizeLiability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_xrt\",\"type\":\"address\"},{\"name\":\"_minimalStake\",\"type\":\"uint256\"},{\"name\":\"_timeoutInBlocks\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeoutInBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"providersLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"refill\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quota\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_demand\",\"type\":\"bytes\"},{\"name\":\"_offer\",\"type\":\"bytes\"}],\"name\":\"createLiability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"quotaOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"Online\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"Offline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quota\",\"type\":\"uint256\"}],\"name\":\"Current\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50610f12806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063678bd169116100a2578063ca9d07ba11610071578063ca9d07ba146102f0578063cebe09c91461030d578063d2b962f214610315578063ef23b3a3146103d3578063fd6aad25146103f95761010b565b8063678bd169146102d05780639ec41a2d146102d8578063ad23fe73146102e0578063c45a0155146102e85761010b565b80634ed75ded116100de5780634ed75ded146101a557806350f3fc81146101ad578063563e52d5146101ca57806364f6f7b91461029e5761010b565b806316934fc4146101105780632e1a7d4d14610148578063330f9588146101795780633acddfc11461019d575b600080fd5b6101366004803603602081101561012657600080fd5b50356001600160a01b031661041f565b60408051918252519081900360200190f35b6101656004803603602081101561015e57600080fd5b5035610431565b604080519115158252519081900360200190f35b610181610596565b604080516001600160a01b039092168252519081900360200190f35b6101366105a5565b6101366105ab565b610181600480360360208110156101c357600080fd5b50356105b1565b610165600480360360808110156101e057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561020a57600080fd5b82018360208201111561021c57600080fd5b803590602001918460018302840111600160201b8311171561023d57600080fd5b919390928235151592604081019060200135600160201b81111561026057600080fd5b82018360208201111561027257600080fd5b803590602001918460018302840111600160201b8311171561029357600080fd5b5090925090506105d8565b610165600480360360608110156102b457600080fd5b506001600160a01b038135169060208101359060400135610808565b610136610876565b61013661087c565b610136610882565b610181610889565b6101656004803603602081101561030657600080fd5b5035610898565b610136610973565b6101656004803603604081101561032b57600080fd5b810190602081018135600160201b81111561034557600080fd5b82018360208201111561035757600080fd5b803590602001918460018302840111600160201b8311171561037857600080fd5b919390929091602081019035600160201b81111561039557600080fd5b8201836020820111156103a757600080fd5b803590602001918460018302840111600160201b831117156103c857600080fd5b509092509050610979565b610136600480360360208110156103e957600080fd5b50356001600160a01b0316610b2a565b6101366004803603602081101561040f57600080fd5b50356001600160a01b0316610b57565b60016020526000908152604090205481565b3360009081526001602052604081205482111561044d57600080fd5b3360008181526001602052604090208054849003905560085461047c916001600160a01b039091169084610b69565b61048533610b2a565b61058e57336000818152600160205260408120805491905560085490916104bc916001600160a01b0316908363ffffffff610b6916565b33600090815260096020526040812054905460001991820191018082101561053e57600081815481106104eb57fe5b600091825260208220015481546001600160a01b0390911691908490811061050f57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6000805460001901906105519082610ead565b5033600081815260096020526040808220829055517f3bc83fff2907676f544f59cca17a4d818ad142c57b57bc028867db31ca8e5b359190a25050505b506001919050565b6008546001600160a01b031681565b60055481565b60045481565b600081815481106105be57fe5b6000918252602090912001546001600160a01b0316905081565b6000806105e3610c03565b61573f0190506105f1610c60565b6105f9610d2c565b60075460408051600160e01b6399d5bae10281526001600160a01b03808c16600483015291518b9360009316916399d5bae1916024808301926020929190829003018186803b15801561064b57600080fd5b505afa15801561065f573d6000803e3d6000fd5b505050506040513d602081101561067557600080fd5b50511161068157600080fd5b806001600160a01b0316634fe6365e89898989896040518663ffffffff1660e01b8152600401808060200185151515158152602001806020018381038352888882818152602001925080828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f820116905080830192505050975050505050505050602060405180830381600087803b15801561072b57600080fd5b505af115801561073f573d6000803e3d6000fd5b505050506040513d602081101561075557600080fd5b505161076057600080fd5b6007546001600160a01b031663a51daf26825a85036040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156107c457600080fd5b505af11580156107d8573d6000803e3d6000fd5b505050506040513d60208110156107ee57600080fd5b50516107f957600080fd5b50600198975050505050505050565b6007546000906001600160a01b03161580156108245750600083115b80156108305750600082115b61083957600080fd5b5060029190915560035560078054336001600160a01b031991821617909155600880549091166001600160a01b0392909216919091179055600190565b60035481565b60025481565b6000545b90565b6007546001600160a01b031681565b6008546000906108b9906001600160a01b031633308563ffffffff610e1416565b33600090815260016020526040902054610955576002548210156108dc57600080fd5b600080546001810182557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b03191633908117909155815481835260096020526040808420919091555190917fb87e760cbc2db6791d417f8be7b6b859468d348a1e174f37374530d391b9cb5791a25b50336000908152600160208190526040909120805483019055919050565b60065481565b600080610984610c03565b611317019050610992610c60565b61099a610d2c565b60075460408051600160e11b63695cb17902815260048101918252604481018890526000926001600160a01b03169163d2b962f2918a918a918a918a9181906024810190606401878780828437600083820152601f01601f191690910184810383528581526020019050858580828437600081840152601f19601f8201169050808301925050509650505050505050602060405180830381600087803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b505050506040513d6020811015610a6d57600080fd5b505190506001600160a01b038116610a8457600080fd5b6007546001600160a01b031663feb67918825a85036040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610ae857600080fd5b505af1158015610afc573d6000803e3d6000fd5b505050506040513d6020811015610b1257600080fd5b5051610b1d57600080fd5b5060019695505050505050565b6002546001600160a01b03821660009081526001602052604081205490919081610b5057fe5b0492915050565b60096020526000908152604090205481565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610bc957600080fd5b505af1158015610bdd573d6000803e3d6000fd5b505050506040513d6020811015610bf357600080fd5b5051610bfe57600080fd5b505050565b60005a61520801905060005b36811015610c5c5760003682818110610c2457fe5b9050013560f81c60f81b6001600160f81b031916600060f81b14610c49576044610c4c565b60045b60ff169190910190600101610c0f565b5090565b60045443036003541015610d265733600090815260096020526040902054600581905515801590610c95575060005460055411155b610c9e57600080fd5b610ccd600060016005540381548110610cb357fe5b6000918252602090912001546001600160a01b0316610b2a565b600681905550600654600060016005540381548110610ce857fe5b60009182526020822001546040516001600160a01b03909116917fd3bed6b350c548f8ecd5aa592c13a6a67bff7ccf6aae87aa3743bc25d8b130e391a35b43600455565b600054610d3857600080fd5b600060065411610d4757600080fd5b600060016005540381548110610d5957fe5b6000918252602090912001546001600160a01b03163314610d7957600080fd5b60016006541115610d935760068054600019019055610e12565b60005460055481610da057fe5b066001810160055560008054610db992908110610cb357fe5b600681905550600654600060016005540381548110610dd457fe5b60009182526020822001546040516001600160a01b03909116917fd3bed6b350c548f8ecd5aa592c13a6a67bff7ccf6aae87aa3743bc25d8b130e391a35b565b60408051600160e01b6323b872dd0281526001600160a01b0385811660048301528481166024830152604482018490529151918616916323b872dd916064808201926020929091908290030181600087803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d6020811015610e9c57600080fd5b5051610ea757600080fd5b50505050565b815481835581811115610bfe57600083815260209020610bfe91810190830161088691905b80821115610c5c5760008155600101610ed256fea165627a7a72305820c02f9ef421dfb4ec28ce8a7d8d579a0202a744bf1cdf4561ab7eef03da67bf340029"
}