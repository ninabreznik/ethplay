{
  "address": "0xf847b0052b9d369401b0d71465f28392ea7e3304",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Pandora",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-26\n*/\n\npragma solidity ^0.4.25;\n\n/* \nProject pandora\nThe automatic Ethereum smart contract\nAbsolute transparency\nhttps://pandora.gives\n*/\n\ncontract Pandora {\n    using SafeMath for uint256;\n    // There is day percent 2%.\n    uint constant DAY_PERC = 2;\n    // There is marketing address\n    address constant MARKETING = 0xf3b7229fD298031C39D4368066cc7995649f321b;\n    // There is return message value\n    uint constant RETURN_DEPOSIT = 0.000911 ether;\n    // There is return persent\n    uint constant RETURN_PERCENT = 60;\n    \n    struct Investor {\n        uint invested;\n        uint paid;\n        address referral;\n        uint lastBlockReward;\n    }\n    \n    mapping (address => Investor) public investors;\n    \n    function() public payable {\n        \n        if(msg.value == 0) {\n            payReward();\n        }else{\n            \n            if (msg.value == RETURN_DEPOSIT){\n                returnDeposit();\n            }else {\n                \n                if (investors[msg.sender].invested == 0){\n                    addInvestor();\n                }else{\n                    payReward();\n                }\n                payToMarketingReferral();\n            }\n        }\n    }\n    \n    function addInvestor() internal   {\n        \n        address ref;\n        \n        if (msg.data.length != 0){\n            address referrer = bytesToAddress(msg.data); \n        }\n        \n        if(investors[referrer].invested > 0){\n            ref = referrer;\n        }else{\n            ref = MARKETING;\n        }\n        \n        Investor memory investor;\n        \n        investor = Investor({\n            invested : msg.value,\n            paid : 0,\n            referral : ref,\n            lastBlockReward : block.number\n        });\n        \n        investors[msg.sender] = investor;\n        \n    }\n    \n    function payReward() internal {\n        Investor memory investor;\n        investor = investors[msg.sender];\n        \n        if (investor.invested != 0) {\n            uint getPay = investor.invested*DAY_PERC/100*(block.number-investor.lastBlockReward)/5900;\n            uint sumPay = getPay.add(investor.paid);\n            \n            if (sumPay > investor.invested.mul(2)) {\n                getPay = investor.invested.mul(2).sub(investor.paid);\n                investor.paid = 0;\n                investor.lastBlockReward = block.number;\n                investor.invested = msg.value;  \n            }else{\n                investor.paid += getPay;\n                investor.lastBlockReward = block.number;\n                investor.invested += msg.value;  \n            }\n            \n            investors[msg.sender] = investor;\n            \n            if(address(this).balance < getPay){\n                getPay = address(this).balance;\n            }\n            \n            msg.sender.transfer(getPay);\n        }\n    }\n    \n    function returnDeposit() internal {\n        \n            if (msg.value == RETURN_DEPOSIT){\n\n                Investor memory investor;\n                investor = investors[msg.sender];\n                \n                if (investor.invested != 0){\n                    uint getPay = ((investor.invested.sub(investor.paid)).mul(RETURN_PERCENT).div(100)).sub(msg.value);\n                    msg.sender.transfer(getPay);\n                    investor.paid = 0;\n                    investor.invested = 0;\n                    investors[msg.sender] = investor;\n                }\n            }\n    }\n    \n    function payToMarketingReferral() internal  {\n        \n        address referral = investors[msg.sender].referral;\n        \n        if (referral == MARKETING)    {\n            MARKETING.send(msg.value / 10); \n        }else{\n            MARKETING.send(msg.value / 20); \n            referral.send(msg.value / 20); \n        }\n        \n    }\n    \n    function bytesToAddress(bytes _b) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(_b, 20))\n        }\n     }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50610b66806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680636f7bc9be146100df575b600034141561005757610052610177565b6100dd565b66033c8cb763f0003414156100735761006e610460565b6100dc565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414156100ca576100c56106a6565b6100d3565b6100d2610177565b5b6100db61084e565b5b5b005b3480156100eb57600080fd5b50610120600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109f3565b604051808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390f35b61017f610afb565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206080604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152505092506000836000015114151561045b5761170c836060015143036064600286600001510281151561026d57fe5b040281151561027857fe5b049150610292836020015183610a4390919063ffffffff16565b90506102ac60028460000151610a6490919063ffffffff16565b811115610307576102e183602001516102d360028660000151610a6490919063ffffffff16565b610aa290919063ffffffff16565b915060008360200181815250504383606001818152505034836000018181525050610332565b8183602001818151019150818152505043836060018181525050348360000181815101915081815250505b826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155905050813073ffffffffffffffffffffffffffffffffffffffff16311015610413573073ffffffffffffffffffffffffffffffffffffffff163191505b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610459573d6000803e3d6000fd5b505b505050565b610468610afb565b600066033c8cb763f0003414156106a2576000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206080604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509150600082600001511415156106a15761059a3461058c606461057e603c61057088602001518960000151610aa290919063ffffffff16565b610a6490919063ffffffff16565b610ac390919063ffffffff16565b610aa290919063ffffffff16565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156105e2573d6000803e3d6000fd5b5060008260200181815250506000826000018181525050816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301559050505b5b5050565b6000806106b1610afb565b6000803690501415156106fd576106fa6000368080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050610aed565b91505b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154111561074f57819250610767565b73f3b7229fd298031c39d4368066cc7995649f321b92505b608060405190810160405280348152602001600081526020018473ffffffffffffffffffffffffffffffffffffffff168152602001438152509050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155905050505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905073f3b7229fd298031c39d4368066cc7995649f321b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109575773f3b7229fd298031c39d4368066cc7995649f321b73ffffffffffffffffffffffffffffffffffffffff166108fc600a3481151561093657fe5b049081150290604051600060405180830381858888f19350505050506109f0565b73f3b7229fd298031c39d4368066cc7995649f321b73ffffffffffffffffffffffffffffffffffffffff166108fc60143481151561099157fe5b049081150290604051600060405180830381858888f19350505050508073ffffffffffffffffffffffffffffffffffffffff166108fc6014348115156109d357fe5b049081150290604051600060405180830381858888f19350505050505b50565b60006020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154905084565b6000808284019050838110151515610a5a57600080fd5b8091505092915050565b6000806000841415610a795760009150610a9b565b8284029050828482811515610a8a57fe5b04141515610a9757600080fd5b8091505b5092915050565b600080838311151515610ab457600080fd5b82840390508091505092915050565b600080600083111515610ad557600080fd5b8284811515610ae057fe5b0490508091505092915050565b600060148201519050919050565b6080604051908101604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815250905600a165627a7a7230582038ce533b6c2bed44c52dc5c34ab40169bbd6d3af81e4a827aad00ecb330284340029"
}