{
  "address": "0x1f88badf3b56998673896572c8c1de846ab0e6c2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FinentToken",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-27\n*/\n\n// File: contracts-separate/Ownable.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\ncontract Ownable {\n    //이 contract가 owner로 갖고있는 address는 단 하나\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    //현재 call을 보낸(contract를 작성한) 주소가 owner이다.\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can execute this function\");\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner; //owner transferred\n        newOwner = address(0); // newOwner address to 0x0\n    }\n}\n\n// File: contracts-separate/Freezable.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\ncontract Freezable is Ownable { \n    mapping (address => bool) internal isFrozen;\n        \n    uint256 public _unfreezeDateTime = 1559390400; // 06/01/2019 @ 12:00pm (UTC) || https://www.unixtimestamp.com\n\n    event globalUnfreezeDatetimeModified(uint256);\n    event FreezeFunds(address target, bool frozen);\n\n    /**\n     * Modifier for checking if the account is not frozen\n     */\n    modifier onlyNotFrozen(address a) {\n        require(!isFrozen[a], \"Any account in this function must not be frozen\");\n        _;\n    }\n\n    /**\n     * Modifier for checking if the ICO freezing period has ended so that transactions can be accepted.\n     */\n    modifier onlyAfterUnfreeze() {\n        require(block.timestamp >= _unfreezeDateTime, \"You cannot tranfer tokens before unfreeze date\" );\n        _;\n    }\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function getUnfreezeDateTime() public view returns (uint256) {\n        return _unfreezeDateTime;\n    }\n\n    /**\n     * @dev set Unfreeze date for every users.\n     * @param unfreezeDateTime The given date and time for unfreezing all the existing accounts.\n     */\n    function setUnfreezeDateTime(uint256 unfreezeDateTime) onlyOwner public {\n        _unfreezeDateTime = unfreezeDateTime;\n        emit globalUnfreezeDatetimeModified(unfreezeDateTime); \n    }\n\n    /**\n     * @dev Gets the freezing status of the account, not relevant with the _unfreezeDateTime\n     */\n    function isAccountFrozen( address target ) public view returns (bool) {\n        return isFrozen[target];\n    }\n\n    /**\n     * @dev Internal function that freezes the given address\n     * @param target The account that will be frozen/unfrozen.\n     * @param doFreeze to freeze or unfreeze.\n     */\n    function freeze(address target, bool doFreeze) onlyOwner public {\n        if( msg.sender == target ) {\n            revert();\n        }\n\n        isFrozen[target] = doFreeze;\n        emit FreezeFunds(target, doFreeze);\n    }\n}\n\n// File: contracts-separate/SafeMath.sol\n\npragma solidity >=0.4.25 <0.6.0;\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts-separate/IERC20.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts-separate/TokenStorage.sol\n\npragma solidity >=0.4.25 <0.6.0;\n \n\ncontract TokenStorage  {\n    uint256 internal _totalSupply;\n    mapping (address => uint256) internal _balances;\n    mapping (address => mapping(address => uint256)) internal _allowed;\n}\n\n// File: contracts-separate/AddressGuard.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\ncontract AddressGuard {\n    modifier onlyAddressNotZero(address addr) {\n        require(addr != address(0), \"The address must not be 0x0\");\n        _;   \n    }\n}\n\n// File: contracts-separate/TokenRescue.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n\n\n/**\n * @title TokenRescue\n * @dev Rescue the lost ERC20 token\n * inspred by DreamTeamToken\n */\ncontract TokenRescue is Ownable, AddressGuard {\n    address internal rescueAddr;\n\n    modifier onlyRescueAddr {\n        require(msg.sender == rescueAddr);\n        _;\n    }\n\n    function setRescueAddr(address addr) onlyAddressNotZero(addr) onlyOwner public{\n        rescueAddr = addr;\n    }\n\n    function getRescueAddr() public view returns(address) {\n        return rescueAddr;\n    }\n\n    function rescueLostTokensByOwn(IERC20 lostTokenContract, uint256 value) external onlyRescueAddr {\n        lostTokenContract.transfer(rescueAddr, value);\n    }\n\n    function rescueLostTokenByThisTokenOwner (IERC20 lostTokenContract, uint256 value) external onlyOwner {\n        lostTokenContract.transfer(rescueAddr, value);\n    } \n    \n}\n\n// File: contracts-separate/FinentToken.sol\n\npragma solidity >=0.4.25 <0.6.0;\n\n\n\n\n\n\n\n\n\n/**\n * @title FinentToken\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * \n This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract FinentToken is IERC20, Ownable, Freezable, TokenStorage, AddressGuard, TokenRescue {\n    using SafeMath for uint256;\n    string private _name;\n\n    string private _symbol;\n    uint8 private _decimals;\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Constructor of FinentToken\n     */\n    constructor() public {\n        _name = \"Finent Token\";\n        _symbol = \"FNT\";\n        _decimals = 18; //normal...\n        _mint(msg.sender, 1000000000 * 10 ** uint256(_decimals));\n    }\n\n    /**\n    * @dev Gets the name of the token\n    */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n    \n    /**\n    * @dev Gets the symbol of the token\n    */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n    * @dev Gets the decimals of the token\n    */\n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Gets the balance of address zero\n     */\n    function balanceOfZero() public view returns (uint256) {\n        return _balances[address(0)];\n    }\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply - _balances[address(0)];\n    }\n\n    \n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) onlyAddressNotZero(owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) onlyAddressNotZero(owner) onlyAddressNotZero(spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) onlyNotFrozen(msg.sender) onlyNotFrozen(_to) onlyAfterUnfreeze onlyAddressNotZero(_to) public returns (bool) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public onlyAddressNotZero(spender) returns (bool) {\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) onlyNotFrozen(msg.sender) onlyNotFrozen(_from) onlyNotFrozen(_to) onlyAfterUnfreeze public returns (bool) {\n        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        emit Approval(_from, msg.sender, _allowed[_from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) onlyAddressNotZero(spender) public returns (bool) {\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) onlyAddressNotZero(spender) public returns (bool) {\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev burn token from specific addr\n     * @param addr The given addr to burn the token from.\n     * @param value The amount to be burnt.\n     */\n    function burn(address addr, uint256 value) onlyOwner onlyAddressNotZero(addr) public {\n        _burn(addr, value);\n    }\n\n    /**\n     * @dev burn token from owner\n     * @param value The amount to be burnt.\n     */\n    function burnFromOwner(uint256 value) onlyOwner public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev mint token from owner\n     * @param value The amount to be minted.\n     */\n    function mint(uint256 value) onlyOwner public {\n        _mint(msg.sender, value);\n    }\n\n    /**\n     * @dev distribute token to addr and determine to freeze or not\n     * @param addr The given addr to distribute the token.\n     * @param value The amount to be distributed\n     * @param doFreeze to freeze or unfreeze\n     */\n    function distribute(address addr, uint256 value, bool doFreeze) onlyOwner public {\n        _distribute(addr, value, doFreeze);\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param _from The address to transfer from.\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        _balances[_from] = _balances[_from].sub(_value);\n        _balances[_to] = _balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n    }\n\n    /**\n    * @dev Distribute token for a specified addresses\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    * @param doFreeze to freeze or unfreeze.\n    */\n    function _distribute(address to, uint256 value, bool doFreeze) onlyOwner internal {\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n\n        if( doFreeze && msg.sender != to ) {\n            freeze( to, true );\n        }\n\n        emit Transfer(msg.sender, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);    \n    }\n\n    \n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () external payable {\n        revert();\n    }\n\n}",
  "bytecode": "6080604052635cf268c06003553480156200001957600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600c81526020017f46696e656e7420546f6b656e000000000000000000000000000000000000000081525060089080519060200190620000a79291906200028f565b506040518060400160405280600381526020017f464e54000000000000000000000000000000000000000000000000000000000081525060099080519060200190620000f59291906200028f565b506012600a60006101000a81548160ff021916908360ff1602179055506200013f33600a60009054906101000a900460ff1660ff16600a0a633b9aca00026200014560201b60201c565b6200033e565b6200016181600b546200026d60201b62002d9a1790919060201c565b600b81905550620001c081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546200026d60201b62002d9a1790919060201c565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008082840190508381101515156200028557600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002d257805160ff191683800117855562000303565b8280016001018555821562000303579182015b8281111562000302578251825591602001919060010190620002e5565b5b50905062000312919062000316565b5090565b6200033b91905b80821115620003375760008160009055506001016200031d565b5090565b90565b613321806200034e6000396000f3fe6080604052600436106101c25760003560e01c806395d89b41116100f7578063b5f07ea111610095578063e816d97f11610064578063e816d97f14610a74578063efe5c24214610add578063f2fde38b14610b08578063ffe6569f14610b59576101c2565b8063b5f07ea114610900578063bf120ae51461093b578063d4ee1d9014610998578063dd62ed3e146109ef576101c2565b8063a0712d68116100d1578063a0712d68146107b4578063a457c2d7146107ef578063a9059cbb14610862578063abc4db15146108d5576101c2565b806395d89b411461068e5780639d267c761461071e5780639dc29fac14610759576101c2565b806370a08231116101645780638809528c1161013e5780638809528c14610524578063890d9c1e1461057f5780638da5cb5b146105d05780639027450614610627576101c2565b806370a082311461045157806379ba5097146104b657806383886e8e146104cd576101c2565b80631eaf190c116101a05780631eaf190c146102f557806323b872dd14610320578063313ce567146103b357806339509351146103de576101c2565b806306fdde03146101c7578063095ea7b31461025757806318160ddd146102ca575b600080fd5b3480156101d357600080fd5b506101dc610bb4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561021c578082015181840152602081019050610201565b50505050905090810190601f1680156102495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026357600080fd5b506102b06004803603604081101561027a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c56565b604051808215151515815260200191505060405180910390f35b3480156102d657600080fd5b506102df610def565b6040518082815260200191505060405180910390f35b34801561030157600080fd5b5061030a610e3a565b6040518082815260200191505060405180910390f35b34801561032c57600080fd5b506103996004803603606081101561034357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e81565b604051808215151515815260200191505060405180910390f35b3480156103bf57600080fd5b506103c86112db565b6040518082815260200191505060405180910390f35b3480156103ea57600080fd5b506104376004803603604081101561040157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112f5565b604051808215151515815260200191505060405180910390f35b34801561045d57600080fd5b506104a06004803603602081101561047457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611598565b6040518082815260200191505060405180910390f35b3480156104c257600080fd5b506104cb611688565b005b3480156104d957600080fd5b506104e2611827565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053057600080fd5b5061057d6004803603604081101561054757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611851565b005b34801561058b57600080fd5b506105ce600480360360208110156105a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119e1565b005b3480156105dc57600080fd5b506105e5611b73565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561063357600080fd5b5061068c6004803603606081101561064a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050611b98565b005b34801561069a57600080fd5b506106a3611c4f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106e35780820151818401526020810190506106c8565b50505050905090810190601f1680156107105780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561072a57600080fd5b506107576004803603602081101561074157600080fd5b8101908080359060200190929190505050611cf1565b005b34801561076557600080fd5b506107b26004803603604081101561077c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611dd9565b005b3480156107c057600080fd5b506107ed600480360360208110156107d757600080fd5b8101908080359060200190929190505050611f35565b005b3480156107fb57600080fd5b506108486004803603604081101561081257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fe9565b604051808215151515815260200191505060405180910390f35b34801561086e57600080fd5b506108bb6004803603604081101561088557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061228c565b604051808215151515815260200191505060405180910390f35b3480156108e157600080fd5b506108ea6124f5565b6040518082815260200191505060405180910390f35b34801561090c57600080fd5b506109396004803603602081101561092357600080fd5b81019080803590602001909291905050506124ff565b005b34801561094757600080fd5b506109966004803603604081101561095e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506125b3565b005b3480156109a457600080fd5b506109ad61275d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109fb57600080fd5b50610a5e60048036036040811015610a1257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612783565b6040518082815260200191505060405180910390f35b348015610a8057600080fd5b50610ac360048036036020811015610a9757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612958565b604051808215151515815260200191505060405180910390f35b348015610ae957600080fd5b50610af26129ae565b6040518082815260200191505060405180910390f35b348015610b1457600080fd5b50610b5760048036036020811015610b2b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129b4565b005b348015610b6557600080fd5b50610bb260048036036040811015610b7c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612a9f565b005b606060088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c4c5780601f10610c2157610100808354040283529160200191610c4c565b820191906000526020600020905b815481529060010190602001808311610c2f57829003601f168201915b5050505050905090565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610cfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5468652061646472657373206d757374206e6f7420626520307830000000000081525060200191505060405180910390fd5b82600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a3600191505092915050565b6000600560008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600b5403905090565b6000600560008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b600033600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610f29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806132a3602f913960400191505060405180910390fd5b84600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610fcf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806132a3602f913960400191505060405180910390fd5b84600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806132a3602f913960400191505060405180910390fd5b60035442101515156110d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613275602e913960400191505060405180910390fd5b61116185600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612be490919063ffffffff16565b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111ec878787612c06565b3373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600193505050509392505050565b6000600a60009054906101000a900460ff1660ff16905090565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561139d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5468652061646472657373206d757374206e6f7420626520307830000000000081525060200191505060405180910390fd5b61142c83600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d9a90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600081600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5468652061646472657373206d757374206e6f7420626520307830000000000081525060200191505060405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116e457600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806132d26024913960400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156119a157600080fd5b505af11580156119b5573d6000803e3d6000fd5b505050506040513d60208110156119cb57600080fd5b8101908080519060200190929190505050505050565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611a87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5468652061646472657373206d757374206e6f7420626520307830000000000081525060200191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806132d26024913960400191505060405180910390fd5b81600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806132d26024913960400191505060405180910390fd5b611c4a838383612dbb565b505050565b606060098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ce75780601f10611cbc57610100808354040283529160200191611ce7565b820191906000526020600020905b815481529060010190602001808311611cca57829003601f168201915b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d98576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806132d26024913960400191505060405180910390fd5b806003819055507f8ed4a1e5928d0709919778bb75650418b140c50078c4ff34b522c7a44389b75c816040518082815260200191505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e80576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806132d26024913960400191505060405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5468652061646472657373206d757374206e6f7420626520307830000000000081525060200191505060405180910390fd5b611f308383613040565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806132d26024913960400191505060405180910390fd5b611fe6338261315a565b50565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612091576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5468652061646472657373206d757374206e6f7420626520307830000000000081525060200191505060405180910390fd5b61212083600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612be490919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600033600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515612334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806132a3602f913960400191505060405180910390fd5b83600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156123da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806132a3602f913960400191505060405180910390fd5b6003544210151515612437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613275602e913960400191505060405180910390fd5b84600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156124dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5468652061646472657373206d757374206e6f7420626520307830000000000081525060200191505060405180910390fd5b6124e8338787612c06565b6001935050505092915050565b6000600354905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806132d26024913960400191505060405180910390fd5b6125b03382613040565b50565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561265a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806132d26024913960400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561269357600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f99c2c87d23b0e264901abeaee3cd4422a95443471b663fb2d828a54dc669c9428282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019250505060405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561282b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5468652061646472657373206d757374206e6f7420626520307830000000000081525060200191505060405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156128d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5468652061646472657373206d757374206e6f7420626520307830000000000081525060200191505060405180910390fd5b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250505092915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612a5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806132d26024913960400191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612afb57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612ba457600080fd5b505af1158015612bb8573d6000803e3d6000fd5b505050506040513d6020811015612bce57600080fd5b8101908080519060200190929190505050505050565b6000828211151515612bf557600080fd5b600082840390508091505092915050565b612c5881600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612be490919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612ced81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d9a90919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000808284019050838110151515612db157600080fd5b8091505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806132d26024913960400191505060405180910390fd5b612eb482600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612be490919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612f4982600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d9a90919063ffffffff16565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808015612fc557508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15612fd657612fd58360016125b3565b5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3505050565b61305581600b54612be490919063ffffffff16565b600b819055506130ad81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612be490919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b61316f81600b54612d9a90919063ffffffff16565b600b819055506131c781600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d9a90919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505056fe596f752063616e6e6f74207472616e66657220746f6b656e73206265666f726520756e667265657a652064617465416e79206163636f756e7420696e20746869732066756e6374696f6e206d757374206e6f742062652066726f7a656e4f6e6c79206f776e65722063616e206578656375746520746869732066756e6374696f6ea165627a7a72305820c145e337569373a1b17ddff7673ea0e02382fb8b786b6882ec23c5132ee96e250029"
}