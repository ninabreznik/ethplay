{
  "address": "0x24c32047b4d7631c39df20021ca03cbb4f5de3a9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "brothers",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-21\n*/\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/brothers.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n//import \"https://github.com/OpenZeppelin/zeppelin-solidity/contracts/math/SafeMath.sol\";\n//import \"https://github.com/OpenZeppelin/zeppelin-solidity/contracts/ownership/Ownable.sol\";\n\n//import \"github.com/OpenZeppelin/zeppelin-solidity/contracts/lifecycle/Pausable.sol\";\n\n\ncontract brothers is Ownable { //\n    using SafeMath for uint256;\n\n    event EthIssued(uint256 value);\n\n    event AddressAdded(address newbrother);\n    event AddressRemoved(address oldbrother);\n\n\n    address payable[] bizbrothers;\n    address payable[] devbrothers;\n    address payable[] tradebrothers;\n    address payable[] socialbrothers;\n    uint256 public pool;\n    uint256 public serviceshare;\n\n    \n    uint256 public total_distributed;\n\n    address payable service_costs = 0x5315845c377DC739Db349c24760955bf3aA88e2a;\n\n    constructor() public Ownable() {\n        \n        emit EthIssued(0);\n        \n        bizbrothers.push(0x7A6C7Da79Ac78C9f473D8723E1e62030414B6909);\n        bizbrothers.push(0x5736AF088b326DaFCbF8fCBe005241245E853a0F);\n        bizbrothers.push(0x1f6bca1657e2B08A31A562B14c6A5c7e49661eb2);\n        \n        devbrothers.push(0x73D0e9F8dACa563A50fd70498Be9390088594E72);\n\n        tradebrothers.push(0xC02bc79F386685CE4bAEc9243982BAf9163A06E7);\n        tradebrothers.push(0x27b8e7fffC5d3DC967c96b2cA0E7EC028268A2b6);\n        tradebrothers.push(0x4C1f6069D12d7110985b48f963084C3ccf48aB06);\n\n        socialbrothers.push(0xe91717B09Cd9D0e8f548EC5cE2921da9C2367356);\n    }\n\n    function () external payable {\n        \n    }\n\n    function distributepool() external payable {\n        //if msg.value\n        \n        pool = address(this).balance;\n        if(msg.value > 0){\n            pool = pool + msg.value;\n        }\n        serviceshare = pool / 100 * 10;\n        service_costs.transfer(serviceshare);\n        pool = pool - serviceshare;\n\n        uint256 bizshare = pool / 8 * 3;\n        for(uint256 i = 0; i < bizbrothers.length; i++){\n            bizbrothers[i].transfer(bizshare / bizbrothers.length);\n        }\n\n        uint256 devshare = pool / 8 * 1;\n        for(uint256 i = 0; i < devbrothers.length; i++){\n            devbrothers[i].transfer(devshare / devbrothers.length);\n        }\n\n        uint256 tradeshare = pool / 8 * 3;\n        for(uint256 i = 0; i < tradebrothers.length; i++){\n            tradebrothers[i].transfer(tradeshare / tradebrothers.length);\n        }\n\n        uint256 socialshare = pool / 8 * 1;\n        for(uint256 i = 0; i < socialbrothers.length; i++){\n            socialbrothers[i].transfer(socialshare / socialbrothers.length);\n        }\n\n    }\n \n    function addbizbrother(address payable newbrother) external onlyOwner(){\n        bizbrothers.push(newbrother);\n        emit AddressAdded(newbrother);\n    }\n\n    function adddevbrother(address payable newbrother) external onlyOwner(){\n        bizbrothers.push(newbrother);\n        emit AddressAdded(newbrother);\n    }\n\n    function addtradebrother(address payable newbrother) external onlyOwner(){\n        bizbrothers.push(newbrother);\n        emit AddressAdded(newbrother);\n    }\n\n    function addsocialbrother(address payable newbrother) external onlyOwner(){\n        bizbrothers.push(newbrother);\n        emit AddressAdded(newbrother);\n    }\n\n    function removebrother(address payable oldbrother) external onlyOwner(){\n        for(uint256 i = 0; i < bizbrothers.length; i++){\n            if(bizbrothers[i] == oldbrother){\n                for (uint j = i; j < bizbrothers.length-1; j++){\n                    bizbrothers[j] = bizbrothers[j+1];\n                }\n                bizbrothers.length--;\n            }\n\n        }\n        for(uint256 i = 0; i < devbrothers.length; i++){\n            if(devbrothers[i] == oldbrother){\n                for (uint j = i; j < devbrothers.length-1; j++){\n                    devbrothers[j] = devbrothers[j+1];\n                }\n                devbrothers.length--;\n            }\n\n        }\n        for(uint256 i = 0; i < tradebrothers.length; i++){\n            if(tradebrothers[i] == oldbrother){\n                for (uint j = i; j < tradebrothers.length-1; j++){\n                    tradebrothers[j] = tradebrothers[j+1];\n                }\n                tradebrothers.length--;\n            }\n\n        }\n        for(uint256 i = 0; i < socialbrothers.length; i++){\n            if(socialbrothers[i] == oldbrother){\n                for (uint j = i; j < socialbrothers.length-1; j++){\n                    socialbrothers[j] = socialbrothers[j+1];\n                }\n                socialbrothers.length--;\n            }\n\n        }\n\n    }\n\n\n}",
  "bytecode": "608060405260088054600160a060020a031916735315845c377dc739db349c24760955bf3aa88e2a17905534801561003657600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3604080516000815290517f9737d7dd89d0ba08ef09d12ef3758112d5da7517a2c0e24e6cd86112864a4fbc9181900360200190a16001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69081018054600160a060020a0319908116737a6c7da79ac78c9f473d8723e1e62030414b69091790915582548084018455820180548216735736af088b326dafcbf8fcbe005241245e853a0f1790558254808401845590910180548216731f6bca1657e2b08a31a562b14c6a5c7e49661eb2179055600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805482167373d0e9f8daca563a50fd70498be9390088594e721790556003805480840182557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9081018054841673c02bc79f386685ce4baec9243982baf9163a06e7179055815480850183558101805484167327b8e7fffc5d3dc967c96b2ca0e7ec028268a2b617905581548085019092550180548216734c1f6069d12d7110985b48f963084c3ccf48ab061790556004805492830181556000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909101805490911673e91717b09cd9d0e8f548ec5ce2921da9c2367356179055610a678061028a6000396000f3fe6080604052600436106100df576000357c010000000000000000000000000000000000000000000000000000000090048063a3c03c441161009c578063e8b8b73f11610076578063e8b8b73f146101fa578063f0f06602146101b2578063f2fde38b1461020f578063f9480e27146101b2576100df565b8063a3c03c44146101b2578063b81aa73a146101e5578063ccb92628146101b2576100df565b806316f0115b146100e157806321cda86714610108578063236a2ee814610110578063715018a6146101435780638da5cb5b146101585780638f32d59b14610189575b005b3480156100ed57600080fd5b506100f6610242565b60408051918252519081900360200190f35b6100df610248565b34801561011c57600080fd5b506100df6004803603602081101561013357600080fd5b5035600160a060020a03166104d0565b34801561014f57600080fd5b506100df610845565b34801561016457600080fd5b5061016d6108a2565b60408051600160a060020a039092168252519081900360200190f35b34801561019557600080fd5b5061019e6108b2565b604080519115158252519081900360200190f35b3480156101be57600080fd5b506100df600480360360208110156101d557600080fd5b5035600160a060020a03166108c3565b3480156101f157600080fd5b506100f6610959565b34801561020657600080fd5b506100f661095f565b34801561021b57600080fd5b506100df6004803603602081101561023257600080fd5b5035600160a060020a0316610965565b60055481565b3031600555600034111561025f5760058054340190555b60055460649004600a026006819055600854604051600160a060020a03909116916108fc811502916000818181858888f193505050501580156102a6573d6000803e3d6000fd5b5060065460055403600581905550600060086005548115156102c457fe5b04600302905060005b6001548110156103435760018054829081106102e557fe5b600091825260209091200154600154600160a060020a03909116906108fc908481151561030e57fe5b049081150290604051600060405180830381858888f1935050505015801561033a573d6000803e3d6000fd5b506001016102cd565b506005546008900460005b6002548110156103c457600280548290811061036657fe5b600091825260209091200154600254600160a060020a03909116906108fc908481151561038f57fe5b049081150290604051600060405180830381858888f193505050501580156103bb573d6000803e3d6000fd5b5060010161034e565b506005546008900460030260005b6003548110156104485760038054829081106103ea57fe5b600091825260209091200154600354600160a060020a03909116906108fc908481151561041357fe5b049081150290604051600060405180830381858888f1935050505015801561043f573d6000803e3d6000fd5b506001016103d2565b506005546008900460005b6004548110156104c957600480548290811061046b57fe5b600091825260209091200154600454600160a060020a03909116906108fc908481151561049457fe5b049081150290604051600060405180830381858888f193505050501580156104c0573d6000803e3d6000fd5b50600101610453565b5050505050565b6104d86108b2565b15156104e357600080fd5b60005b6001548110156105b95781600160a060020a031660018281548110151561050957fe5b600091825260209091200154600160a060020a031614156105b157805b6001546000190181101561059b576001805482820190811061054457fe5b60009182526020909120015460018054600160a060020a03909216918390811061056a57fe5b60009182526020909120018054600160a060020a031916600160a060020a0392909216919091179055600101610526565b5060018054906105af9060001983016109f4565b505b6001016104e6565b5060005b6002548110156106915781600160a060020a03166002828154811015156105e057fe5b600091825260209091200154600160a060020a0316141561068957805b6002546000190181101561067357600280546001830190811061061c57fe5b60009182526020909120015460028054600160a060020a03909216918390811061064257fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556001016105fd565b5060028054906106879060001983016109f4565b505b6001016105bd565b5060005b6003548110156107695781600160a060020a03166003828154811015156106b857fe5b600091825260209091200154600160a060020a0316141561076157805b6003546000190181101561074b5760038054600183019081106106f457fe5b60009182526020909120015460038054600160a060020a03909216918390811061071a57fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556001016106d5565b50600380549061075f9060001983016109f4565b505b600101610695565b5060005b6004548110156108415781600160a060020a031660048281548110151561079057fe5b600091825260209091200154600160a060020a0316141561083957805b600454600019018110156108235760048054600183019081106107cc57fe5b60009182526020909120015460048054600160a060020a0390921691839081106107f257fe5b60009182526020909120018054600160a060020a031916600160a060020a03929092169190911790556001016107ad565b5060048054906108379060001983016109f4565b505b60010161076d565b5050565b61084d6108b2565b151561085857600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360008054600160a060020a0319169055565b600054600160a060020a03165b90565b600054600160a060020a0316331490565b6108cb6108b2565b15156108d657600080fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018054600160a060020a038316600160a060020a0319909116811790915560408051918252517fa226db3f664042183ee0281230bba26cbf7b5057e50aee7f25a175ff45ce4d7f9181900360200190a150565b60065481565b60075481565b61096d6108b2565b151561097857600080fd5b61098181610984565b50565b600160a060020a038116151561099957600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b815481835581811115610a1857600083815260209020610a18918101908301610a1d565b505050565b6108af91905b80821115610a375760008155600101610a23565b509056fea165627a7a7230582019d8838023f7595d1af76524ac657c9c7c22dbe933ead902398347eeb0fd86fe0029"
}