{
  "address": "0x8a7b7b9b2f7d0c63f66171721339705a6188a7d5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EtherDogeToken",
  "contractName": "EtherDoge",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-08\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract EtherDoge is MintableToken {\n  string public constant name = \"EtherDoge\";\n  string public constant symbol = \"EDOGE\";\n  uint   public constant decimals = 18;\n  uint   public unlockTimeStamp = 0;  \n\n  mapping (address => bool) private _lockByPass;\n  \n  function EtherDoge(uint unlockTs){\n    setUnlockTimeStamp(unlockTs);\n  }\n\n  function setUnlockTimeStamp(uint _unlockTimeStamp) onlyOwner {\n    unlockTimeStamp = _unlockTimeStamp;\n  }\n\n  function airdrop(address[] addresses, uint amount) onlyOwner{\n    require(amount > 0);\n    for (uint i = 0; i < addresses.length; i++) {\n       super.transfer(addresses[i], amount);\n    }\n  }\n\n  function transfer(address _to, uint _value) returns (bool success) {\n    if (now < unlockTimeStamp && !_lockByPass[msg.sender]) return false;\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n    if (now < unlockTimeStamp && !_lockByPass[_from]) return false;\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function setLockByPass(address[] addresses, bool locked) onlyOwner{\n    for (uint i = 0; i < addresses.length; i++) {\n       _lockByPass[addresses[i]] = locked;\n    }\n  }\n}",
  "bytecode": "60606040526003805460a060020a60ff02191690556000600455341561002457600080fd5b604051602080610d0a833981016040528080519150505b5b60038054600160a060020a03191633600160a060020a03161790555b61006e8164010000000061076761007582021704565b5b5061009a565b60035433600160a060020a0390811691161461009057600080fd5b60048190555b5b50565b610c61806100a96000396000f300606060405236156100f95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305aaee1f81146100fe57806305d2035b1461012357806306fdde031461014a578063095ea7b3146101d557806318160ddd1461020b57806323b872dd14610230578063313ce5671461026c57806340c10f191461029157806342f989e2146102c7578063572bcb3e146102df57806370a08231146103345780637d64bcb4146103655780638da5cb5b1461038c57806395d89b41146103bb578063a9059cbb14610446578063c204642c1461047c578063dd62ed3e146104cf578063f2fde38b14610506575b600080fd5b341561010957600080fd5b610111610527565b60405190815260200160405180910390f35b341561012e57600080fd5b61013661052d565b604051901515815260200160405180910390f35b341561015557600080fd5b61015d61054e565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019a5780820151818401525b602001610181565b50505050905090810190601f1680156101c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e057600080fd5b610136600160a060020a0360043516602435610585565b604051901515815260200160405180910390f35b341561021657600080fd5b61011161062c565b60405190815260200160405180910390f35b341561023b57600080fd5b610136600160a060020a0360043581169060243516604435610632565b604051901515815260200160405180910390f35b341561027757600080fd5b610111610680565b60405190815260200160405180910390f35b341561029c57600080fd5b610136600160a060020a0360043516602435610685565b604051901515815260200160405180910390f35b34156102d257600080fd5b6102dd600435610767565b005b34156102ea57600080fd5b6102dd600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050505091351515915061078c9050565b005b341561033f57600080fd5b610111600160a060020a036004351661080a565b60405190815260200160405180910390f35b341561037057600080fd5b610136610829565b604051901515815260200160405180910390f35b341561039757600080fd5b61039f6108b0565b604051600160a060020a03909116815260200160405180910390f35b34156103c657600080fd5b61015d6108bf565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561019a5780820151818401525b602001610181565b50505050905090810190601f1680156101c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045157600080fd5b610136600160a060020a03600435166024356108f6565b604051901515815260200160405180910390f35b341561048757600080fd5b6102dd6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061094292505050565b005b34156104da57600080fd5b610111600160a060020a03600435811690602435166109aa565b60405190815260200160405180910390f35b341561051157600080fd5b6102dd600160a060020a03600435166109d7565b005b60045481565b60035474010000000000000000000000000000000000000000900460ff1681565b60408051908101604052600981527f4574686572446f67650000000000000000000000000000000000000000000000602082015281565b60008115806105b75750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156105c257600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b60006004544210801561065e5750600160a060020a03841660009081526005602052604090205460ff16155b1561066b57506000610679565b610676848484610a2f565b90505b9392505050565b601281565b60035460009033600160a060020a039081169116146106a357600080fd5b60035474010000000000000000000000000000000000000000900460ff16156106cb57600080fd5b6000546106de908363ffffffff610b4416565b6000908155600160a060020a038416815260016020526040902054610709908363ffffffff610b4416565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a25060015b5b5b92915050565b60035433600160a060020a0390811691161461078257600080fd5b60048190555b5b50565b60035460009033600160a060020a039081169116146107aa57600080fd5b5060005b82518110156108035781600560008584815181106107c857fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff19169115159190911790555b6001016107ae565b5b5b505050565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a0390811691161461084757600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b600354600160a060020a031681565b60408051908101604052600581527f45444f4745000000000000000000000000000000000000000000000000000000602082015281565b6000600454421080156109225750600160a060020a03331660009081526005602052604090205460ff16155b1561092f57506000610626565b6109398383610b5e565b90505b92915050565b60035460009033600160a060020a0390811691161461096057600080fd5b6000821161096d57600080fd5b5060005b82518110156108035761099983828151811061098957fe5b9060200190602002015183610b5e565b505b600101610971565b5b5b505050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a039081169116146109f257600080fd5b600160a060020a03811615610788576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610a76908463ffffffff610b4416565b600160a060020a038086166000908152600160205260408082209390935590871681522054610aab908463ffffffff610c1e16565b600160a060020a038616600090815260016020526040902055610ad4818463ffffffff610c1e16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b600082820183811015610b5357fe5b8091505b5092915050565b600160a060020a033316600090815260016020526040812054610b87908363ffffffff610c1e16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610bbc908363ffffffff610b4416565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600082821115610c2a57fe5b508082035b929150505600a165627a7a723058206117477e4485c948c2ae2a1714f694438e19fda8c323490bda5e3b895ccf285500290000000000000000000000000000000000000000000000000000000059e2ab99",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000059e2ab99"
}