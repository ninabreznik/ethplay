{
  "address": "0xe6c8cb141ba928381dc10886f42278990163f485",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GascToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-06\n*/\n\npragma solidity ^0.4.23;\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  address master;\n\n  bool public paused;\n\n  modifier isMaster {\n      require(msg.sender == master);\n      _;\n  }\n\n  modifier isPause {\n   require(paused == true);\n   _;\n }\n\n  modifier isNotPause {\n   require(paused == false);\n   _;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public isNotPause returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public isNotPause\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public isNotPause returns (bool) {\n    require(_spender != address(0));\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public isNotPause\n    returns (bool)\n  {\n    require(_spender != address(0));\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public isNotPause\n    returns (bool)\n  {\n    require(_spender != address(0));\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\ncontract GascToken is StandardToken {\n\n  string public constant name = \"GameCube ToKen\";\n  string public constant symbol = \"GASC\";\n  uint8 public constant decimals = 18;\n\n  uint256 public constant INITIAL_SUPPLY = 5000000000 * (10 ** uint256(decimals));\n\n  address private constant coinbase_address       = 0x180038c6Db5aC2d2eA6dbB306EA245e95C7F0fB6;\n  uint8 private constant coinbase_percent         = 100;\n\n  /**\n  * @dev Constructor that gives msg.sender all of existing tokens.\n  */\n  constructor(address _master) public {\n   require(_master != address(0));\n   totalSupply_ = INITIAL_SUPPLY;\n   master = _master;\n   paused = false;\n   balances[coinbase_address]       = INITIAL_SUPPLY * coinbase_percent / 100;\n }\n\n  function batchTransfer(address[] _to, uint256[] _amount) public isNotPause returns (bool) {\n     for (uint i = 0; i < _to.length; i++) {\n       transfer(_to[i] , _amount[i]);\n     }\n     return true;\n   }\n\n   function setPause() public isMaster isNotPause{\n     paused = true;\n   }\n\n   function setResume() public isMaster isPause{\n     paused = false;\n   }\n\n   function pauseStatus() public view isMaster returns (bool){\n     return paused;\n   }\n\n\n\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610c788339810160405251600160a060020a038116151561003757600080fd5b6b1027e72f1f1281308800000060015560038054600160a060020a031916600160a060020a0383161760a060020a60ff021916905560646c064f964e68233a76f52000000073180038c6db5ac2d2ea6dbb306ea245e95c7f0fb66000908152602052047fe14a0c22ed5d8fd8cc681cf4031a723a5d2f5af6ce36747ebc7972520f0cf6745550610bac806100cc6000396000f3006080604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b757806323b872dd146101de5780632ff2e9dc14610208578063313ce5671461021d578063466916ca146102485780635c975abb1461025d578063661884631461027257806370a082311461029657806388d695b2146102b757806395d89b4114610345578063a9059cbb1461035a578063d33ecfee1461037e578063d431b1ac14610395578063d73dd623146103aa578063dd62ed3e146103ce575b600080fd5b34801561010157600080fd5b5061010a6103f5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014457818101518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018b57600080fd5b506101a3600160a060020a036004351660243561042c565b604080519115158252519081900360200190f35b3480156101c357600080fd5b506101cc6104c1565b60408051918252519081900360200190f35b3480156101ea57600080fd5b506101a3600160a060020a03600435811690602435166044356104c7565b34801561021457600080fd5b506101cc61065f565b34801561022957600080fd5b5061023261066f565b6040805160ff9092168252519081900360200190f35b34801561025457600080fd5b506101a3610674565b34801561026957600080fd5b506101a36106a3565b34801561027e57600080fd5b506101a3600160a060020a03600435166024356106b3565b3480156102a257600080fd5b506101cc600160a060020a03600435166107dc565b3480156102c357600080fd5b50604080516020600480358082013583810280860185019096528085526101a395369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506107f79650505050505050565b34801561035157600080fd5b5061010a61086b565b34801561036657600080fd5b506101a3600160a060020a03600435166024356108a2565b34801561038a57600080fd5b506103936109b3565b005b3480156103a157600080fd5b50610393610a09565b3480156103b657600080fd5b506101a3600160a060020a0360043516602435610a61565b3480156103da57600080fd5b506101cc600160a060020a0360043581169060243516610b30565b60408051808201909152600e81527f47616d654375626520546f4b656e000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff161561044657600080fd5b600160a060020a038316151561045b57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b60015490565b60035460009060a060020a900460ff16156104e157600080fd5b600160a060020a03831615156104f657600080fd5b600160a060020a03841660009081526020819052604090205482111561051b57600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561054e57600080fd5b600160a060020a038416600090815260208190526040902054610577908363ffffffff610b5b16565b600160a060020a0380861660009081526020819052604080822093909355908516815220546105ac908363ffffffff610b6d16565b600160a060020a03808516600090815260208181526040808320949094558783168252600281528382203390931682529190915220546105f2908363ffffffff610b5b16565b600160a060020a038086166000818152600260209081526040808320338616845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b6b1027e72f1f1281308800000081565b601281565b60035460009033600160a060020a0390811691161461069257600080fd5b5060035460a060020a900460ff1690565b60035460a060020a900460ff1681565b600354600090819060a060020a900460ff16156106cf57600080fd5b600160a060020a03841615156106e457600080fd5b50600160a060020a033381166000908152600260209081526040808320938716835292905220548083111561074057600160a060020a033381166000908152600260209081526040808320938816835292905290812055610777565b610750818463ffffffff610b5b16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600090819060a060020a900460ff161561081357600080fd5b5060005b835181101561086157610858848281518110151561083157fe5b90602001906020020151848381518110151561084957fe5b906020019060200201516108a2565b50600101610817565b5060019392505050565b60408051808201909152600481527f4741534300000000000000000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff16156108bc57600080fd5b600160a060020a03831615156108d157600080fd5b600160a060020a0333166000908152602081905260409020548211156108f657600080fd5b600160a060020a03331660009081526020819052604090205461091f908363ffffffff610b5b16565b600160a060020a033381166000908152602081905260408082209390935590851681522054610954908363ffffffff610b6d16565b600160a060020a03808516600081815260208181526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b60035433600160a060020a039081169116146109ce57600080fd5b60035460a060020a900460ff1615156001146109e957600080fd5b6003805474ff000000000000000000000000000000000000000019169055565b60035433600160a060020a03908116911614610a2457600080fd5b60035460a060020a900460ff1615610a3b57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a179055565b60035460009060a060020a900460ff1615610a7b57600080fd5b600160a060020a0383161515610a9057600080fd5b600160a060020a03338116600090815260026020908152604080832093871683529290522054610ac6908363ffffffff610b6d16565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600082821115610b6757fe5b50900390565b81810182811015610b7a57fe5b929150505600a165627a7a72305820e7c2d0a9b425886da4cff85b567f5a6e432619db5f8d69614ce31f4c10fab56d0029000000000000000000000000a63377683f66ef9f759ebf8e372d0dfbc91d2a8e",
  "constructorArguments": "000000000000000000000000a63377683f66ef9f759ebf8e372d0dfbc91d2a8e"
}