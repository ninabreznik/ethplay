{
  "address": "0x5a82e0b5cca00f8ea1f4961d19fd9e5b9307a3a9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ToronegroToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-10\n*/\n\npragma solidity ^0.4.23;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract ERC20Basic {\n    \n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  \n}\n\ncontract ERC20 is ERC20Basic {\n    \n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n/**\n * @title 实现ERC20基本合约的接口 \n * @dev 基本的StandardToken，不包含allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n  \n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev 从一个地址向另外一个地址转token\n   * @param _from 转账的from地址\n   * @param _to address 转账的to地址\n   * @param _value uint256 转账token数量\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    // 做合法性检查\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title 可销毁 Token\n * @dev Token被地销毁\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev 销毁指定数量的token.\n   * @param _value 被销毁的token数量.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\ncontract MintableToken is StandardToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public  canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title 标准可销毁token\n * @dev 将burnFrom方法添加到ERC20实现中\n */\ncontract StandardBurnableToken is BurnableToken, StandardToken,MintableToken {\n\n  /**\n   * @dev 从目标地址销毁特定数量的token并减少允许量\n   * @param _from address token所有者地址\n   * @param _value uint256 被销毁的token数量\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n  \n}\n\ncontract ToronegroToken is StandardBurnableToken {\n    string public name = 'ToroNegroChain';\n    string public symbol = 'TNCT';\n    uint8 public decimals = 8;\n    uint256 public INITIAL_SUPPLY = 100000000000000000; \n    \n  constructor() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n\n}",
  "bytecode": "6003805460ff1916905560c0604052600e60808190527f546f726f4e6567726f436861696e00000000000000000000000000000000000060a090815261004891600491906100d1565b506040805180820190915260048082527f544e435400000000000000000000000000000000000000000000000000000000602090920191825261008d916005916100d1565b506006805460ff1916600817905567016345785d8a00006007553480156100b357600080fd5b5060075460018190553360009081526020819052604090205561016c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011257805160ff191683800117855561013f565b8280016001018555821561013f579182015b8281111561013f578251825591602001919060010190610124565b5061014b92915061014f565b5090565b61016991905b8082111561014b5760008155600101610155565b90565b610a528061017b6000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100df57806306fdde0314610108578063095ea7b31461019257806318160ddd146101b657806323b872dd146101dd5780632ff2e9dc14610207578063313ce5671461021c57806340c10f191461024757806342966c681461026b57806370a082311461028557806379cc6790146102a65780637d64bcb4146102ca57806395d89b41146102df578063a9059cbb146102f4578063dd62ed3e14610318575b600080fd5b3480156100eb57600080fd5b506100f461033f565b604080519115158252519081900360200190f35b34801561011457600080fd5b5061011d610348565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015757818101518382015260200161013f565b50505050905090810190601f1680156101845780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019e57600080fd5b506100f4600160a060020a03600435166024356103d6565b3480156101c257600080fd5b506101cb61043c565b60408051918252519081900360200190f35b3480156101e957600080fd5b506100f4600160a060020a0360043581169060243516604435610442565b34801561021357600080fd5b506101cb6105a7565b34801561022857600080fd5b506102316105ad565b6040805160ff9092168252519081900360200190f35b34801561025357600080fd5b506100f4600160a060020a03600435166024356105b6565b34801561027757600080fd5b50610283600435610690565b005b34801561029157600080fd5b506101cb600160a060020a036004351661069d565b3480156102b257600080fd5b50610283600160a060020a03600435166024356106b8565b3480156102d657600080fd5b506100f461074e565b3480156102eb57600080fd5b5061011d61079d565b34801561030057600080fd5b506100f4600160a060020a03600435166024356107f8565b34801561032457600080fd5b506101cb600160a060020a03600435811690602435166108c7565b60035460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103ce5780601f106103a3576101008083540402835291602001916103ce565b820191906000526020600020905b8154815290600101906020018083116103b157829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a038316151561045957600080fd5b600160a060020a03841660009081526020819052604090205482111561047e57600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156104ae57600080fd5b600160a060020a0384166000908152602081905260409020546104d7908363ffffffff6108f216565b600160a060020a03808616600090815260208190526040808220939093559085168152205461050c908363ffffffff61090416565b600160a060020a0380851660009081526020818152604080832094909455918716815260028252828120338252909152205461054e908363ffffffff6108f216565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020610a07833981519152929181900390910190a35060019392505050565b60075481565b60065460ff1681565b60035460009060ff16156105c957600080fd5b6001546105dc908363ffffffff61090416565b600155600160a060020a038316600090815260208190526040902054610608908363ffffffff61090416565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020610a078339815191529181900360200190a350600192915050565b61069a3382610917565b50565b600160a060020a031660009081526020819052604090205490565b600160a060020a03821660009081526002602090815260408083203384529091529020548111156106e857600080fd5b600160a060020a038216600090815260026020908152604080832033845290915290205461071c908263ffffffff6108f216565b600160a060020a038316600090815260026020908152604080832033845290915290205561074a8282610917565b5050565b60035460009060ff161561076157600080fd5b6003805460ff191660011790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103ce5780601f106103a3576101008083540402835291602001916103ce565b6000600160a060020a038316151561080f57600080fd5b3360009081526020819052604090205482111561082b57600080fd5b3360009081526020819052604090205461084b908363ffffffff6108f216565b3360009081526020819052604080822092909255600160a060020a0385168152205461087d908363ffffffff61090416565b600160a060020a03841660008181526020818152604091829020939093558051858152905191923392600080516020610a078339815191529281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000828211156108fe57fe5b50900390565b8181018281101561091157fe5b92915050565b600160a060020a03821660009081526020819052604090205481111561093c57600080fd5b600160a060020a038216600090815260208190526040902054610965908263ffffffff6108f216565b600160a060020a038316600090815260208190526040902055600154610991908263ffffffff6108f216565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020610a078339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058206ee3660ec5f55d81cb8872593031b751be8e025d3543c63789c577fcfe8b5bec0029"
}