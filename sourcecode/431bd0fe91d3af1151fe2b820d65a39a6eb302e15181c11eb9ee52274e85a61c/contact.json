{
  "address": "0x5e6364d4534f780ae053b93b45c8b8840e683eb7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Notes",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-04-27\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// The NOTES ERC20 Token. There is a delay before addresses that are not added to the \"activeGroup\" can transfer tokens. \n// That delay ends when admin calls the \"activate()\" function.\n// Otherwise it is a generic ERC20 standard token, based originally on the BAT token\n// https://etherscan.io/address/0x0d8775f648430679a709e98d2b0cb6250d2887ef#code\n\n// The standard ERC20 Token interface\ncontract Token {\n    uint256 public totalSupply;\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// NOTES Token Implementation - transfers are prohibited unless switched on by admin\ncontract Notes is Token {\n\n    using SafeMath for uint256;\n\n    //// CONSTANTS\n\n    // Number of NOTES (800 million)\n    uint256 public constant TOTAL_SUPPLY = 2000 * (10**6) * 10**uint256(decimals);\n\n    // Token Metadata\n    string public constant name = \"NOTES\";\n    string public constant symbol = \"NOTES\";\n    uint8 public constant decimals = 18;\n    string public version = \"1.0\";\n\n    //// PROPERTIES\n\n    address admin;\n    bool public activated = false;\n    mapping (address => bool) public activeGroup;\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    //// MODIFIERS\n\n    modifier active()\n    {\n        require(activated || activeGroup[msg.sender]);\n        _;\n    }\n\n    modifier onlyAdmin()\n    {\n        require(msg.sender == admin);\n        _;\n    }\n\n    //// CONSTRUCTOR\n\n    function Notes(address fund, address _admin)\n    {\n        admin = _admin;\n        totalSupply = TOTAL_SUPPLY;\n        balances[fund] = TOTAL_SUPPLY;    // Deposit all to fund\n        Transfer(address(this), fund, TOTAL_SUPPLY);\n        activeGroup[fund] = true;  // Allow the fund to transfer\n    }\n\n    //// ADMIN FUNCTIONS\n\n    function addToActiveGroup(address a) onlyAdmin {\n        activeGroup[a] = true;\n    }\n\n    function activate() onlyAdmin {\n        activated = true;\n    }\n\n    //// TOKEN FUNCTIONS\n\n    function transfer(address _to, uint256 _value) active returns (bool success) {\n        require(_to != address(0));\n        require(_value > 0);\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) active returns (bool success) {\n        require(_to != address(0));\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value && _value > 0);\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) active returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"address\"}],\"name\":\"addToActiveGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"fund\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600381527f312e3000000000000000000000000000000000000000000000000000000000006020820152600190805161004b92916020019061012c565b506002805460a060020a60ff0219169055341561006757600080fd5b604051604080610afd833981016040528080519190602001805160028054600160a060020a031916600160a060020a03838116919091179091556b06765c793fa10079d00000006000818155868316808252600460205260409182902083905593955092935030909116917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a350600160a060020a03166000908152600360205260409020805460ff191660011790556101c7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061016d57805160ff191683800117855561019a565b8280016001018555821561019a579182015b8281111561019a57825182559160200191906001019061017f565b506101a69291506101aa565b5090565b6101c491905b808211156101a657600081556001016101b0565b90565b610927806101d66000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b3146101745780630f15f4c0146101aa57806318160ddd146101bf578063186601ca146101e457806323b872dd146101f757806327e235e31461021f578063313ce5671461023e57806354fd4d50146102675780636859d08f1461027a57806370a0823114610299578063902d55a5146102b857806395d89b41146100ea578063a9059cbb146102cb578063dd62ed3e146102ed578063f1590dea14610312575b600080fd5b34156100f557600080fd5b6100fd610331565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610139578082015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017f57600080fd5b610196600160a060020a0360043516602435610368565b604051901515815260200160405180910390f35b34156101b557600080fd5b6101bd61040f565b005b34156101ca57600080fd5b6101d2610450565b60405190815260200160405180910390f35b34156101ef57600080fd5b610196610456565b341561020257600080fd5b610196600160a060020a0360043581169060243516604435610466565b341561022a57600080fd5b6101d2600160a060020a036004351661062f565b341561024957600080fd5b610251610641565b60405160ff909116815260200160405180910390f35b341561027257600080fd5b6100fd610646565b341561028557600080fd5b6101bd600160a060020a03600435166106e4565b34156102a457600080fd5b6101d2600160a060020a0360043516610723565b34156102c357600080fd5b6101d261073e565b34156102d657600080fd5b610196600160a060020a036004351660243561074e565b34156102f857600080fd5b6101d2600160a060020a0360043581169060243516610893565b341561031d57600080fd5b610196600160a060020a03600435166108be565b60408051908101604052600581527f4e4f544553000000000000000000000000000000000000000000000000000000602082015281565b60025460009060a060020a900460ff168061039b5750600160a060020a03331660009081526003602052604090205460ff165b15156103a657600080fd5b600160a060020a03338116600081815260056020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60025433600160a060020a0390811691161461042a57600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a179055565b60005481565b60025460a060020a900460ff1681565b60025460009060a060020a900460ff16806104995750600160a060020a03331660009081526003602052604090205460ff165b15156104a457600080fd5b600160a060020a03831615156104b957600080fd5b600160a060020a038416600090815260046020526040902054829010156104df57600080fd5b600160a060020a03808516600090815260056020908152604080832033909416835292905220548290108015906105165750600082115b151561052157600080fd5b600160a060020a03831660009081526004602052604090205461054a908363ffffffff6108d316565b600160a060020a03808516600090815260046020526040808220939093559086168152205461057f908363ffffffff6108e916565b600160a060020a03808616600090815260046020908152604080832094909455600581528382203390931682529190915220546105c2908363ffffffff6108e916565b600160a060020a03808616600081815260056020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60046020526000908152604090205481565b601281565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106dc5780601f106106b1576101008083540402835291602001916106dc565b820191906000526020600020905b8154815290600101906020018083116106bf57829003601f168201915b505050505081565b60025433600160a060020a039081169116146106ff57600080fd5b600160a060020a03166000908152600360205260409020805460ff19166001179055565b600160a060020a031660009081526004602052604090205490565b6b06765c793fa10079d000000081565b60025460009060a060020a900460ff16806107815750600160a060020a03331660009081526003602052604090205460ff165b151561078c57600080fd5b600160a060020a03831615156107a157600080fd5b600082116107ae57600080fd5b600160a060020a033316600090815260046020526040902054829010156107d457600080fd5b600160a060020a0333166000908152600460205260409020546107fd908363ffffffff6108e916565b600160a060020a033381166000908152600460205260408082209390935590851681522054610832908363ffffffff6108d316565b600160a060020a0380851660008181526004602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60036020526000908152604090205460ff1681565b6000828201838110156108e257fe5b9392505050565b6000828211156108f557fe5b509003905600a165627a7a723058208560a3beb0af367e60f5fba68f228bc9fefec180fdce32acbf26857bf1b580a00029000000000000000000000000cde1057b2c73cac0822be00bb50668959f101b950000000000000000000000007d7e227c80d14fd82d22998bd76e38fec9487c9a",
  "constructorArguments": "000000000000000000000000cde1057b2c73cac0822be00bb50668959f101b950000000000000000000000007d7e227c80d14fd82d22998bd76e38fec9487c9a"
}