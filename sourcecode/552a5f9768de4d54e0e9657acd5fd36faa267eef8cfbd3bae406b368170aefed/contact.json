{
  "address": "0x5096f94bcf5f451dc48094772fe3384ccd3b5190",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenSettings",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-05\n*/\n\npragma solidity ^0.5.1;\n\ncontract LockRequestable {\n\n        // MEMBERS\n        /// @notice  the count of all invocations of `generateLockId`.\n        uint256 public lockRequestCount;\n\n        constructor() public {\n                lockRequestCount = 0;\n        }\n\n        // FUNCTIONS\n        /** @notice  Returns a fresh unique identifier.\n            *\n            * @dev the generation scheme uses three components.\n            * First, the blockhash of the previous block.\n            * Second, the deployed address.\n            * Third, the next value of the counter.\n            * This ensure that identifiers are unique across all contracts\n            * following this scheme, and that future identifiers are\n            * unpredictable.\n            *\n            * @return a 32-byte unique identifier.\n            */\n        function generateLockId() internal returns (bytes32 lockId) {\n                return keccak256(\n                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)\n                );\n        }\n}\n\ncontract CustodianUpgradeable is LockRequestable {\n\n        // TYPES\n        /// @dev  The struct type for pending custodian changes.\n        struct CustodianChangeRequest {\n                address proposedNew;\n        }\n\n        // MEMBERS\n        /// @dev  The address of the account or contract that acts as the custodian.\n        address public custodian;\n\n        /// @dev  The map of lock ids to pending custodian changes.\n        mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;\n\n        constructor(address _custodian) public LockRequestable() {\n                custodian = _custodian;\n        }\n\n        // MODIFIERS\n        modifier onlyCustodian {\n                require(msg.sender == custodian);\n                _;\n        }\n\n        /** @notice  Requests a change of the custodian associated with this contract.\n            *\n            * @dev  Returns a unique lock id associated with the request.\n            * Anyone can call this function, but confirming the request is authorized\n            * by the custodian.\n            *\n            * @param  _proposedCustodian  The address of the new custodian.\n            * @return  lockId  A unique identifier for this request.\n            */\n        function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {\n                require(_proposedCustodian != address(0));\n\n                lockId = generateLockId();\n\n                custodianChangeReqs[lockId] = CustodianChangeRequest({\n                        proposedNew: _proposedCustodian\n                });\n\n                emit CustodianChangeRequested(lockId, msg.sender, _proposedCustodian);\n        }\n\n        /** @notice  Confirms a pending change of the custodian associated with this contract.\n            *\n            * @dev  When called by the current custodian with a lock id associated with a\n            * pending custodian change, the `address custodian` member will be updated with the\n            * requested address.\n            *\n            * @param  _lockId  The identifier of a pending change request.\n            */\n        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {\n                custodian = getCustodianChangeReq(_lockId);\n\n                delete custodianChangeReqs[_lockId];\n\n                emit CustodianChangeConfirmed(_lockId, custodian);\n        }\n\n        // PRIVATE FUNCTIONS\n        function getCustodianChangeReq(bytes32 _lockId) private view returns (address _proposedNew) {\n                CustodianChangeRequest storage changeRequest = custodianChangeReqs[_lockId];\n\n                // reject ‘null’ results from the map lookup\n                // this can only be the case if an unknown `_lockId` is received\n                require(changeRequest.proposedNew != address(0));\n\n                return changeRequest.proposedNew;\n        }\n\n        /// @dev  Emitted by successful `requestCustodianChange` calls.\n        event CustodianChangeRequested(\n                bytes32 _lockId,\n                address _msgSender,\n                address _proposedCustodian\n        );\n\n        /// @dev Emitted by successful `confirmCustodianChange` calls.\n        event CustodianChangeConfirmed(bytes32 _lockId, address _newCustodian);\n}\n\ncontract TokenSettingsInterface {\n\n    // METHODS\n    function getTradeAllowed() public view returns (bool);\n    function getMintAllowed() public view returns (bool);\n    function getBurnAllowed() public view returns (bool);\n    \n    // EVENTS\n    event TradeAllowedLocked(bytes32 _lockId, bool _newValue);\n    event TradeAllowedConfirmed(bytes32 _lockId, bool _newValue);\n    event MintAllowedLocked(bytes32 _lockId, bool _newValue);\n    event MintAllowedConfirmed(bytes32 _lockId, bool _newValue);\n    event BurnAllowedLocked(bytes32 _lockId, bool _newValue);\n    event BurnAllowedConfirmed(bytes32 _lockId, bool _newValue);\n\n    // MODIFIERS\n    modifier onlyCustodian {\n        _;\n    }\n}\n\n\ncontract _BurnAllowed is TokenSettingsInterface, LockRequestable {\n    // cc:IV. BurnAllowed Setting#2;Burn Allowed Switch;1;\n    //\n    // SETTING: Burn Allowed Switch (bool)\n    // Boundary: true or false\n    //\n    // Enables or disables token minting ability globally (even for custodian).\n    //\n    bool private burnAllowed = false;\n\n    function getBurnAllowed() public view returns (bool) {\n        return burnAllowed;\n    }\n\n    // SETTING MANAGEMENT\n\n    struct PendingBurnAllowed {\n        bool burnAllowed;\n        bool set;\n    }\n\n    mapping (bytes32 => PendingBurnAllowed) public pendingBurnAllowedMap;\n\n    function requestBurnAllowedChange(bool _burnAllowed) public returns (bytes32 lockId) {\n       require(_burnAllowed != burnAllowed);\n       \n       lockId = generateLockId();\n       pendingBurnAllowedMap[lockId] = PendingBurnAllowed({\n           burnAllowed: _burnAllowed,\n           set: true\n       });\n\n       emit BurnAllowedLocked(lockId, _burnAllowed);\n    }\n\n    function confirmBurnAllowedChange(bytes32 _lockId) public onlyCustodian {\n        PendingBurnAllowed storage value = pendingBurnAllowedMap[_lockId];\n        require(value.set == true);\n        burnAllowed = value.burnAllowed;\n        emit BurnAllowedConfirmed(_lockId, value.burnAllowed);\n        delete pendingBurnAllowedMap[_lockId];\n    }\n}\n\n\ncontract _MintAllowed is TokenSettingsInterface, LockRequestable {\n    // cc:III. MintAllowed Setting#2;Mint Allowed Switch;1;\n    //\n    // SETTING: Mint Allowed Switch (bool)\n    // Boundary: true or false\n    //\n    // Enables or disables token minting ability globally (even for custodian).\n    //\n    bool private mintAllowed = false;\n\n    function getMintAllowed() public view returns (bool) {\n        return mintAllowed;\n    }\n\n    // SETTING MANAGEMENT\n\n    struct PendingMintAllowed {\n        bool mintAllowed;\n        bool set;\n    }\n\n    mapping (bytes32 => PendingMintAllowed) public pendingMintAllowedMap;\n\n    function requestMintAllowedChange(bool _mintAllowed) public returns (bytes32 lockId) {\n       require(_mintAllowed != mintAllowed);\n       \n       lockId = generateLockId();\n       pendingMintAllowedMap[lockId] = PendingMintAllowed({\n           mintAllowed: _mintAllowed,\n           set: true\n       });\n\n       emit MintAllowedLocked(lockId, _mintAllowed);\n    }\n\n    function confirmMintAllowedChange(bytes32 _lockId) public onlyCustodian {\n        PendingMintAllowed storage value = pendingMintAllowedMap[_lockId];\n        require(value.set == true);\n        mintAllowed = value.mintAllowed;\n        emit MintAllowedConfirmed(_lockId, value.mintAllowed);\n        delete pendingMintAllowedMap[_lockId];\n    }\n}\n\n\ncontract _TradeAllowed is TokenSettingsInterface, LockRequestable {\n    // cc:II. TradeAllowed Setting#2;Trade Allowed Switch;1;\n    //\n    // SETTING: Trade Allowed Switch (bool)\n    // Boundary: true or false\n    //\n    // Enables or disables all token transfers, between any recipients, except mint and burn operations.\n    //\n    bool private tradeAllowed = false;\n\n    function getTradeAllowed() public view returns (bool) {\n        return tradeAllowed;\n    }\n\n    // SETTING MANAGEMENT\n\n    struct PendingTradeAllowed {\n        bool tradeAllowed;\n        bool set;\n    }\n\n    mapping (bytes32 => PendingTradeAllowed) public pendingTradeAllowedMap;\n\n    function requestTradeAllowedChange(bool _tradeAllowed) public returns (bytes32 lockId) {\n       require(_tradeAllowed != tradeAllowed);\n       \n       lockId = generateLockId();\n       pendingTradeAllowedMap[lockId] = PendingTradeAllowed({\n           tradeAllowed: _tradeAllowed,\n           set: true\n       });\n\n       emit TradeAllowedLocked(lockId, _tradeAllowed);\n    }\n\n    function confirmTradeAllowedChange(bytes32 _lockId) public onlyCustodian {\n        PendingTradeAllowed storage value = pendingTradeAllowedMap[_lockId];\n        require(value.set == true);\n        tradeAllowed = value.tradeAllowed;\n        emit TradeAllowedConfirmed(_lockId, value.tradeAllowed);\n        delete pendingTradeAllowedMap[_lockId];\n    }\n}\n\ncontract TokenSettings is TokenSettingsInterface, CustodianUpgradeable,\n_TradeAllowed,\n_MintAllowed,\n_BurnAllowed\n    {\n    constructor(address _custodian) public CustodianUpgradeable(_custodian) {\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_mintAllowed\",\"type\":\"bool\"}],\"name\":\"requestMintAllowedChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"requestCustodianChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMintAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmMintAllowedChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"custodian\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmCustodianChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnAllowed\",\"type\":\"bool\"}],\"name\":\"requestBurnAllowedChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmBurnAllowedChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingBurnAllowedMap\",\"outputs\":[{\"name\":\"burnAllowed\",\"type\":\"bool\"},{\"name\":\"set\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTradeAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingTradeAllowedMap\",\"outputs\":[{\"name\":\"tradeAllowed\",\"type\":\"bool\"},{\"name\":\"set\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBurnAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingMintAllowedMap\",\"outputs\":[{\"name\":\"mintAllowed\",\"type\":\"bool\"},{\"name\":\"set\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeAllowed\",\"type\":\"bool\"}],\"name\":\"requestTradeAllowedChange\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockRequestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"custodianChangeReqs\",\"outputs\":[{\"name\":\"proposedNew\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"}],\"name\":\"confirmTradeAllowedChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_custodian\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_msgSender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_proposedCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newCustodian\",\"type\":\"address\"}],\"name\":\"CustodianChangeConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"TradeAllowedLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"TradeAllowedConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"MintAllowedLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"MintAllowedConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"BurnAllowedLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newValue\",\"type\":\"bool\"}],\"name\":\"BurnAllowedConfirmed\",\"type\":\"event\"}]",
  "bytecode": "60806040526000600360006101000a81548160ff0219169083151502179055506000600560006101000a81548160ff0219169083151502179055506000600760006101000a81548160ff02191690831515021790555034801561006157600080fd5b506040516020806112408339810180604052602081101561008157600080fd5b8101908080519060200190929190505050806000808190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050611154806100ec6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063b65ae70e116100a2578063bf4274b111610071578063bf4274b1146103cc578063c53d6fd41461041d578063cb81fecf14610461578063cf6e44881461047f578063dee41184146104ed5761010b565b8063b65ae70e146102e6578063b95306d714610337578063babb6a3f14610359578063bb5ebde2146103aa5761010b565b8063375b74c3116100de578063375b74c3146101fc5780633a8343ee146102465780633b768f2c14610274578063b2ed1a17146102b85761010b565b80630f0846351461011057806315b21082146101545780631f1fd193146101ac5780632b8fb639146101ce575b600080fd5b61013e6004803603602081101561012657600080fd5b8101908080351515906020019092919050505061051b565b6040518082815260200191505060405180910390f35b6101966004803603602081101561016a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105ff565b6040518082815260200191505060405180910390f35b6101b461076a565b604051808215151515815260200191505060405180910390f35b6101fa600480360360208110156101e457600080fd5b8101908080359060200190929190505050610781565b005b6102046108d5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102726004803603602081101561025c57600080fd5b81019080803590602001909291905050506108fb565b005b6102a26004803603602081101561028a57600080fd5b81019080803515159060200190929190505050610a6b565b6040518082815260200191505060405180910390f35b6102e4600480360360208110156102ce57600080fd5b8101908080359060200190929190505050610b4f565b005b610312600480360360208110156102fc57600080fd5b8101908080359060200190929190505050610ca3565b6040518083151515158152602001821515151581526020019250505060405180910390f35b61033f610ce1565b604051808215151515815260200191505060405180910390f35b6103856004803603602081101561036f57600080fd5b8101908080359060200190929190505050610cf8565b6040518083151515158152602001821515151581526020019250505060405180910390f35b6103b2610d36565b604051808215151515815260200191505060405180910390f35b6103f8600480360360208110156103e257600080fd5b8101908080359060200190929190505050610d4d565b6040518083151515158152602001821515151581526020019250505060405180910390f35b61044b6004803603602081101561043357600080fd5b81019080803515159060200190929190505050610d8b565b6040518082815260200191505060405180910390f35b610469610e6f565b6040518082815260200191505060405180910390f35b6104ab6004803603602081101561049557600080fd5b8101908080359060200190929190505050610e75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105196004803603602081101561050357600080fd5b8101908080359060200190929190505050610eb3565b005b6000600560009054906101000a900460ff161515821515141561053d57600080fd5b610545611007565b905060405180604001604052808315158152602001600115158152506006600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055509050507f6d2238fc016f4063159ed4fba243954d2ffff0b867cb91d02a71a78c5f3e5155818360405180838152602001821515151581526020019250505060405180910390a1919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561063a57600080fd5b610642611007565b905060405180602001604052808373ffffffffffffffffffffffffffffffffffffffff168152506002600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fd76fc900a7e1a6fcf11d54b7ba943918df6c53a3128140658c389b3da1e997ba813384604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1919050565b6000600560009054906101000a900460ff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107db57600080fd5b6000600660008381526020019081526020016000209050600115158160000160019054906101000a900460ff1615151461081457600080fd5b8060000160009054906101000a900460ff16600560006101000a81548160ff0219169083151502179055507fc1a188c6f35a47fd8811a1715f2114f857a9dd1b5e87342876d7a7ba3d421d2c828260000160009054906101000a900460ff1660405180838152602001821515151581526020019250505060405180910390a160066000838152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549060ff021916905550505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461095557600080fd5b61095e81611085565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060026000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f9a99272c0f6b7a30ef9e76e684a7cd408bfd4f11a72f36a8e276253c920e442d81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b6000600760009054906101000a900460ff1615158215151415610a8d57600080fd5b610a95611007565b905060405180604001604052808315158152602001600115158152506008600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055509050507f69432cb84a018b79c04cae2b5930695e303e79b0d8075c07fe7faa9515fbf522818360405180838152602001821515151581526020019250505060405180910390a1919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ba957600080fd5b6000600860008381526020019081526020016000209050600115158160000160019054906101000a900460ff16151514610be257600080fd5b8060000160009054906101000a900460ff16600760006101000a81548160ff0219169083151502179055507f519db228cd31f477c3b1ac6542b284d4fb87f8c1ea6704ae0efd5667916f9475828260000160009054906101000a900460ff1660405180838152602001821515151581526020019250505060405180910390a160086000838152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549060ff021916905550505050565b60086020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6000600360009054906101000a900460ff16905090565b60046020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6000600760009054906101000a900460ff16905090565b60066020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6000600360009054906101000a900460ff1615158215151415610dad57600080fd5b610db5611007565b905060405180604001604052808315158152602001600115158152506004600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff0219169083151502179055509050507f7cfa035b327b5cf433f8bc026b92463c4eaea264048174e4a49793c8744d74d4818360405180838152602001821515151581526020019250505060405180910390a1919050565b60005481565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f0d57600080fd5b6000600460008381526020019081526020016000209050600115158160000160019054906101000a900460ff16151514610f4657600080fd5b8060000160009054906101000a900460ff16600360006101000a81548160ff0219169083151502179055507f39144a2b8fa8e9365acabef8ba8cf161b8e86034b05bb82a8a54ec8e1157bbad828260000160009054906101000a900460ff1660405180838152602001821515151581526020019250505060405180910390a160046000838152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549060ff021916905550505050565b60006001430340306000808154600101919050819055604051602001808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001935050505060405160208183030381529060405280519060200120905090565b600080600260008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110fb57600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505091905056fea165627a7a7230582056ed3c1f12942c25242aeb89834024306339a00a9a25607a26e51491ec21bb53002900000000000000000000000031ebcb0d352acc558242036d136849dc8ff4748f",
  "constructorArguments": "00000000000000000000000031ebcb0d352acc558242036d136849dc8ff4748f"
}