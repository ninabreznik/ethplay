{
  "address": "0x4dc3643dbc642b72c158e7f3d2ff232df61cb6ce",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Amber Token",
  "contractName": "AmberToken",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-09-22\n*/\n\n//! By Parity Technologies, 2017.\n//! Released under the Apache Licence 2.\n\npragma solidity ^0.4.15;\n\n// ECR20 standard token interface\ncontract Token {\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\n\tfunction balanceOf(address _owner) constant returns (uint256 balance);\n\tfunction transfer(address _to, uint256 _value) returns (bool success);\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n\tfunction approve(address _spender, uint256 _value) returns (bool success);\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\n}\n\n// Owner-specific contract interface\ncontract Owned {\n\tevent NewOwner(address indexed old, address indexed current);\n\n\tmodifier only_owner {\n\t\trequire (msg.sender == owner);\n\t\t_;\n\t}\n\n\taddress public owner = msg.sender;\n\n\tfunction setOwner(address _new) only_owner {\n\t\tNewOwner(owner, _new);\n\t\towner = _new;\n\t}\n}\n\n/// Stripped down certifier interface.\ncontract Certifier {\n\tfunction certified(address _who) constant returns (bool);\n}\n\n// BasicCoin, ECR20 tokens that all belong to the owner for sending around\ncontract AmberToken is Token, Owned {\n\tstruct Account {\n\t\t// Balance is always less than or equal totalSupply since totalSupply is increased straight away of when releasing locked tokens.\n\t\tuint balance;\n\t\tmapping (address => uint) allowanceOf;\n\n\t\t// TokensPerPhase is always less than or equal to totalSupply since anything added to it is UNLOCK_PHASES times lower than added to totalSupply.\n\t\tuint tokensPerPhase;\n\t\tuint nextPhase;\n\t}\n\n\tevent Minted(address indexed who, uint value);\n\tevent MintedLocked(address indexed who, uint value);\n\n\tfunction AmberToken() {}\n\n\t// Mint a certain number of tokens.\n\t// _value has to be bounded not to overflow.\n\tfunction mint(address _who, uint _value)\n\t\tonly_owner\n\t\tpublic\n\t{\n\t\taccounts[_who].balance += _value;\n\t\ttotalSupply += _value;\n\t\tMinted(_who, _value);\n\t}\n\n\t// Mint a certain number of tokens that are locked up.\n\t// _value has to be bounded not to overflow.\n\tfunction mintLocked(address _who, uint _value)\n\t\tonly_owner\n\t\tpublic\n\t{\n\t\taccounts[_who].tokensPerPhase += _value / UNLOCK_PHASES;\n\t\ttotalSupply += _value;\n\t\tMintedLocked(_who, _value);\n\t}\n\n\t/// Finalise any minting operations. Resets the owner and causes normal tokens\n\t/// to be liquid. Also begins the countdown for locked-up tokens.\n\tfunction finalise()\n\t\tonly_owner\n\t\tpublic\n\t{\n\t\tlocked = false;\n\t\towner = 0;\n\t\tphaseStart = now;\n\t}\n\n\t/// Return the current unlock-phase. Won't work until after the contract\n\t/// has `finalise()` called.\n\tfunction currentPhase()\n\t\tpublic\n\t\tconstant\n\t\treturns (uint)\n\t{\n\t\trequire (phaseStart > 0);\n\t\tuint p = (now - phaseStart) / PHASE_DURATION;\n\t\treturn p > UNLOCK_PHASES ? UNLOCK_PHASES : p;\n\t}\n\n\t/// Unlock any now freeable tokens that are locked up for account `_who`.\n\tfunction unlockTokens(address _who)\n\t\tpublic\n\t{\n\t\tuint phase = currentPhase();\n\t\tuint tokens = accounts[_who].tokensPerPhase;\n\t\tuint nextPhase = accounts[_who].nextPhase;\n\t\tif (tokens > 0 && phase > nextPhase) {\n\t\t\taccounts[_who].balance += tokens * (phase - nextPhase);\n\t\t\taccounts[_who].nextPhase = phase;\n\t\t}\n\t}\n\n\t// Transfer tokens between accounts.\n\tfunction transfer(address _to, uint256 _value)\n\t\twhen_owns(msg.sender, _value)\n\t\twhen_liquid\n\t\treturns (bool)\n\t{\n\t\tTransfer(msg.sender, _to, _value);\n\t\taccounts[msg.sender].balance -= _value;\n\t\taccounts[_to].balance += _value;\n\n\t\treturn true;\n\t}\n\n\t// Transfer via allowance.\n\tfunction transferFrom(address _from, address _to, uint256 _value)\n\t\twhen_owns(_from, _value)\n\t\twhen_has_allowance(_from, msg.sender, _value)\n\t\twhen_liquid\n\t\treturns (bool)\n\t{\n\t\tTransfer(_from, _to, _value);\n\t\taccounts[_from].allowanceOf[msg.sender] -= _value;\n\t\taccounts[_from].balance -= _value;\n\t\taccounts[_to].balance += _value;\n\n\t\treturn true;\n\t}\n\n\t// Approve allowances\n\tfunction approve(address _spender, uint256 _value)\n\t\twhen_liquid\n\t\treturns (bool)\n\t{\n\t\t// Mitigate the race condition described here:\n\t\t// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t\trequire (_value == 0 || accounts[msg.sender].allowanceOf[_spender] == 0);\n\t\tApproval(msg.sender, _spender, _value);\n\t\taccounts[msg.sender].allowanceOf[_spender] = _value;\n\n\t\treturn true;\n\t}\n\n\t// Get the balance of a specific address.\n\tfunction balanceOf(address _who) constant returns (uint256) {\n\t\treturn accounts[_who].balance;\n\t}\n\n\t// Available allowance\n\tfunction allowance(address _owner, address _spender)\n\t\tconstant\n\t\treturns (uint256)\n\t{\n\t\treturn accounts[_owner].allowanceOf[_spender];\n\t}\n\n\t// The balance should be available\n\tmodifier when_owns(address _owner, uint _amount) {\n\t\trequire (accounts[_owner].balance >= _amount);\n\t\t_;\n\t}\n\n\t// An allowance should be available\n\tmodifier when_has_allowance(address _owner, address _spender, uint _amount) {\n\t\trequire (accounts[_owner].allowanceOf[_spender] >= _amount);\n\t\t_;\n\t}\n\n\t// Tokens must not be locked.\n\tmodifier when_liquid {\n\t\trequire (!locked);\n\t\t_;\n\t}\n\n\t/// Usual token descriptors.\n\tstring constant public name = \"Amber Token\";\n\tuint8 constant public decimals = 18;\n\tstring constant public symbol = \"AMB\";\n\n\t// Are the tokens non-transferrable?\n\tbool public locked = true;\n\n\t// Phase information for slow-release tokens.\n\tuint public phaseStart = 0;\n\tuint public constant PHASE_DURATION = 180 days;\n\tuint public constant UNLOCK_PHASES = 4;\n\n\t// available token supply\n\tuint public totalSupply;\n\n\t// storage and mapping of all balances & allowances\n\tmapping (address => Account) accounts;\n}\n\n/// Will accept Ether \"contributions\" and record each both as a log and in a\n/// queryable record.\ncontract AmbrosusSale {\n\t/// Constructor.\n\tfunction AmbrosusSale() {\n\t\ttokens = new AmberToken();\n\t}\n\n\t// Can only be called by the administrator.\n\tmodifier only_admin { require (msg.sender == ADMINISTRATOR); _; }\n\t// Can only be called by the prepurchaser.\n\tmodifier only_prepurchaser { require (msg.sender == PREPURCHASER); _; }\n\n\t// The transaction params are valid for buying in.\n\tmodifier is_valid_buyin { require (tx.gasprice <= MAX_BUYIN_GAS_PRICE && msg.value >= MIN_BUYIN_VALUE); _; }\n\t// Requires the hard cap to be respected given the desired amount for `buyin`.\n\tmodifier is_under_cap_with(uint buyin) { require (buyin + saleRevenue <= MAX_REVENUE); _; }\n\t// Requires sender to be certified.\n\tmodifier only_certified(address who) { require (CERTIFIER.certified(who)); _; }\n\n\t/*\n\t\tSale life cycle:\n\t\t1. Not yet started.\n\t\t2. Started, further purchases possible.\n\t\t\ta. Normal operation (next step can be 2b or 3)\n\t\t\tb. Paused (next step can be 2a or 3)\n\t\t3. Complete (equivalent to Allocation Lifecycle 2 & 3).\n\t*/\n\n\t// Can only be called by prior to the period (1).\n\tmodifier only_before_period { require (now < BEGIN_TIME); _; }\n\t// Can only be called during the period when not paused (2a).\n\tmodifier only_during_period { require (now >= BEGIN_TIME && now < END_TIME && !isPaused); _; }\n\t// Can only be called during the period when paused (2b)\n\tmodifier only_during_paused_period { require (now >= BEGIN_TIME && now < END_TIME && isPaused); _; }\n\t// Can only be called after the period (3).\n\tmodifier only_after_sale { require (now >= END_TIME || saleRevenue >= MAX_REVENUE); _; }\n\n\t/*\n\t\tAllocation life cycle:\n\t\t1. Uninitialised (sale not yet started/ended, equivalent to Sale Lifecycle 1 & 2).\n\t\t2. Initialised, not yet completed (further allocations possible).\n\t\t3. Completed (no further allocations possible).\n\t*/\n\n\t// Only when allocations have not yet been initialised (1).\n\tmodifier when_allocations_uninitialised { require (!allocationsInitialised); _; }\n\t// Only when sufficient allocations remain for making this liquid allocation (2).\n\tmodifier when_allocatable_liquid(uint amount) { require (liquidAllocatable >= amount); _; }\n\t// Only when sufficient allocations remain for making this locked allocation (2).\n\tmodifier when_allocatable_locked(uint amount) { require (lockedAllocatable >= amount); _; }\n\t// Only when no further allocations are possible (3).\n\tmodifier when_allocations_complete { require (allocationsInitialised && liquidAllocatable == 0 && lockedAllocatable == 0); _; }\n\n\t/// Note a pre-ICO sale.\n\tevent Prepurchased(address indexed recipient, uint etherPaid, uint amberSold);\n\t/// Some contribution `amount` received from `recipient`.\n\tevent Purchased(address indexed recipient, uint amount);\n\t/// Some contribution `amount` received from `recipient`.\n\tevent SpecialPurchased(address indexed recipient, uint etherPaid, uint amberSold);\n\t/// Period paused abnormally.\n\tevent Paused();\n\t/// Period restarted after abnormal halt.\n\tevent Unpaused();\n\t/// Some contribution `amount` received from `recipient`.\n\tevent Allocated(address indexed recipient, uint amount, bool liquid);\n\n\t/// Note a prepurchase that has already happened.\n\t/// Up to owner to ensure that values do not overflow.\n\t///\n\t/// Preconditions: !sale_started\n\t/// Writes {Tokens, Sale}\n\tfunction notePrepurchase(address _who, uint _etherPaid, uint _amberSold)\n\t\tonly_prepurchaser\n\t\tonly_before_period\n\t\tpublic\n\t{\n\t\t// Admin ensures bounded value.\n\t\ttokens.mint(_who, _amberSold);\n\t\tsaleRevenue += _etherPaid;\n\t\ttotalSold += _amberSold;\n\t\tPrepurchased(_who, _etherPaid, _amberSold);\n\t}\n\n\t/// Make a purchase from a privileged account. No KYC is required and a\n\t/// preferential buyin rate may be given.\n\t///\n\t/// Preconditions: !paused, sale_ongoing\n\t/// Postconditions: !paused, ?!sale_ongoing\n\t/// Writes {Tokens, Sale}\n\tfunction specialPurchase()\n\t\tonly_before_period\n\t\tis_under_cap_with(msg.value)\n\t\tpayable\n\t\tpublic\n\t{\n\t\tuint256 bought = buyinReturn(msg.sender) * msg.value;\n\t\trequire (bought > 0);   // be kind and don't punish the idiots.\n\n\t\t// Bounded value, see STANDARD_BUYIN.\n\t\ttokens.mint(msg.sender, bought);\n\t\tTREASURY.transfer(msg.value);\n\t\tsaleRevenue += msg.value;\n\t\ttotalSold += bought;\n\t\tSpecialPurchased(msg.sender, msg.value, bought);\n   }\n\n\t/// Let sender make a purchase to their account.\n\t///\n\t/// Preconditions: !paused, sale_ongoing\n\t/// Postconditions: ?!sale_ongoing\n\t/// Writes {Tokens, Sale}\n\tfunction ()\n\t\tonly_certified(msg.sender)\n\t\tpayable\n\t\tpublic\n\t{\n\t\tprocessPurchase(msg.sender);\n\t}\n\n\t/// Let sender make a standard purchase; AMB goes into another account.\n\t///\n\t/// Preconditions: !paused, sale_ongoing\n\t/// Postconditions: ?!sale_ongoing\n\t/// Writes {Tokens, Sale}\n\tfunction purchaseTo(address _recipient)\n\t\tonly_certified(msg.sender)\n\t\tpayable\n\t\tpublic\n\t{\n\t\tprocessPurchase(_recipient);\n\t}\n\n\t/// Receive a contribution from `_recipient`.\n\t///\n\t/// Preconditions: !paused, sale_ongoing\n\t/// Postconditions: ?!sale_ongoing\n\t/// Writes {Tokens, Sale}\n\tfunction processPurchase(address _recipient)\n\t\tonly_during_period\n\t\tis_valid_buyin\n\t\tis_under_cap_with(msg.value)\n\t\tprivate\n\t{\n\t\t// Bounded value, see STANDARD_BUYIN.\n\t\ttokens.mint(_recipient, msg.value * STANDARD_BUYIN);\n\t\tTREASURY.transfer(msg.value);\n\t\tsaleRevenue += msg.value;\n\t\ttotalSold += msg.value * STANDARD_BUYIN;\n\t\tPurchased(_recipient, msg.value);\n\t}\n\n\t/// Determine purchase price for a given address.\n\tfunction buyinReturn(address _who)\n\t\tconstant\n\t\tpublic\n\t\treturns (uint)\n\t{\n\t\t// Chinese exchanges.\n\t\tif (\n\t\t\t_who == CHINESE_EXCHANGE_1 || _who == CHINESE_EXCHANGE_2 ||\n\t\t\t_who == CHINESE_EXCHANGE_3 || _who == CHINESE_EXCHANGE_4\n\t\t)\n\t\t\treturn CHINESE_EXCHANGE_BUYIN;\n\n\t\t// BTCSuisse tier 1\n\t\tif (_who == BTC_SUISSE_TIER_1)\n\t\t\treturn STANDARD_BUYIN;\n\t\t// BTCSuisse tier 2\n\t\tif (_who == BTC_SUISSE_TIER_2)\n\t\t\treturn TIER_2_BUYIN;\n\t\t// BTCSuisse tier 3\n\t\tif (_who == BTC_SUISSE_TIER_3)\n\t\t\treturn TIER_3_BUYIN;\n\t\t// BTCSuisse tier 4\n\t\tif (_who == BTC_SUISSE_TIER_4)\n\t\t\treturn TIER_4_BUYIN;\n\n\t\treturn 0;\n\t}\n\n\t/// Halt the contribution period. Any attempt at contributing will fail.\n\t///\n\t/// Preconditions: !paused, sale_ongoing\n\t/// Postconditions: paused\n\t/// Writes {Paused}\n\tfunction pause()\n\t\tonly_admin\n\t\tonly_during_period\n\t\tpublic\n\t{\n\t\tisPaused = true;\n\t\tPaused();\n\t}\n\n\t/// Unhalt the contribution period.\n\t///\n\t/// Preconditions: paused\n\t/// Postconditions: !paused\n\t/// Writes {Paused}\n\tfunction unpause()\n\t\tonly_admin\n\t\tonly_during_paused_period\n\t\tpublic\n\t{\n\t\tisPaused = false;\n\t\tUnpaused();\n\t}\n\n\t/// Called once by anybody after the sale ends.\n\t/// Initialises the specific values (i.e. absolute token quantities) of the\n\t/// allowed liquid/locked allocations.\n\t///\n\t/// Preconditions: !allocations_initialised\n\t/// Postconditions: allocations_initialised, !allocations_complete\n\t/// Writes {Allocations}\n\tfunction initialiseAllocations()\n\t\tpublic\n\t\tonly_after_sale\n\t\twhen_allocations_uninitialised\n\t{\n\t\tallocationsInitialised = true;\n\t\tliquidAllocatable = LIQUID_ALLOCATION_PPM * totalSold / SALES_ALLOCATION_PPM;\n\t\tlockedAllocatable = LOCKED_ALLOCATION_PPM * totalSold / SALES_ALLOCATION_PPM;\n\t}\n\n\t/// Preallocate a liquid portion of tokens.\n\t/// Admin may call this to allocate a share of the liquid tokens.\n\t/// Up to admin to ensure that value does not overflow.\n\t///\n\t/// Preconditions: allocations_initialised\n\t/// Postconditions: ?allocations_complete\n\t/// Writes {Allocations, Tokens}\n\tfunction allocateLiquid(address _who, uint _value)\n\t\tonly_admin\n\t\twhen_allocatable_liquid(_value)\n\t\tpublic\n\t{\n\t\t// Admin ensures bounded value.\n\t\ttokens.mint(_who, _value);\n\t\tliquidAllocatable -= _value;\n\t\tAllocated(_who, _value, true);\n\t}\n\n\t/// Preallocate a locked-up portion of tokens.\n\t/// Admin may call this to allocate a share of the locked tokens.\n\t/// Up to admin to ensure that value does not overflow and _value is divisible by UNLOCK_PHASES.\n\t///\n\t/// Preconditions: allocations_initialised\n\t/// Postconditions: ?allocations_complete\n\t/// Writes {Allocations, Tokens}\n\tfunction allocateLocked(address _who, uint _value)\n\t\tonly_admin\n\t\twhen_allocatable_locked(_value)\n\t\tpublic\n\t{\n\t\t// Admin ensures bounded value.\n\t\ttokens.mintLocked(_who, _value);\n\t\tlockedAllocatable -= _value;\n\t\tAllocated(_who, _value, false);\n\t}\n\n\t/// End of the sale and token allocation; retire this contract.\n\t/// Once called, no more tokens can be minted, basic tokens are now liquid.\n\t/// Anyone can call, but only once this contract can properly be retired.\n\t///\n\t/// Preconditions: allocations_complete\n\t/// Postconditions: liquid_tokens_transferable, this_is_dead\n\t/// Writes {Tokens}\n\tfunction finalise()\n\t\twhen_allocations_complete\n\t\tpublic\n\t{\n\t\ttokens.finalise();\n\t}\n\n\t//////\n\t// STATE\n\t//////\n\n\t// How much is enough?\n\tuint public constant MIN_BUYIN_VALUE = 10000000000000000;\n\t// Max gas price for buyins.\n\tuint public constant MAX_BUYIN_GAS_PRICE = 25000000000;\n\t// The exposed hard cap.\n\tuint public constant MAX_REVENUE = 425203 ether;\n\n\t// The total share of tokens, expressed in PPM, allocated to pre-ICO and ICO.\n\tuint constant public SALES_ALLOCATION_PPM = 400000;\n\t// The total share of tokens, expressed in PPM, the admin may later allocate, as locked tokens.\n\tuint constant public LOCKED_ALLOCATION_PPM = 337000;\n\t// The total share of tokens, expressed in PPM, the admin may later allocate, as liquid tokens.\n\tuint constant public LIQUID_ALLOCATION_PPM = 263000;\n\n\t/// The certifier resource. TODO: set address\n\tCertifier public constant CERTIFIER = Certifier(0x7b1Ab331546F021A40bd4D09fFb802261CaACcc9);\n\t// Who can halt/unhalt/kill?\n\taddress public constant ADMINISTRATOR = 0x11bF17B890a80080A8F9C1673D2951296a6F3D91;\n\t// Who can prepurchase?\n\taddress public constant PREPURCHASER = 0x00C269e9D02188E39C9922386De631c6AED5b4d4;\n\t// Who gets the stash? Should not release funds during minting process.\n\taddress public constant TREASURY = 0xB47aD434C6e401473F1d3442001Ac69cda1dcFDd;\n\t// When does the contribution period begin?\n\tuint public constant BEGIN_TIME = 1506096000;\n\t// How long does the sale last for?\n\tuint public constant DURATION = 30 days;\n\t// When does the period end?\n\tuint public constant END_TIME = BEGIN_TIME + DURATION;\n\n\t// The privileged buyin accounts.\n\taddress public constant BTC_SUISSE_TIER_1 = 0x53B3D4f98fcb6f0920096fe1cCCa0E4327Da7a1D;\n\taddress public constant BTC_SUISSE_TIER_2 = 0x642fDd12b1Dd27b9E19758F0AefC072dae7Ab996;\n\taddress public constant BTC_SUISSE_TIER_3 = 0x64175446A1e3459c3E9D650ec26420BA90060d28;\n\taddress public constant BTC_SUISSE_TIER_4 = 0xB17C2f9a057a2640309e41358a22Cf00f8B51626;\n\taddress public constant CHINESE_EXCHANGE_1 = 0x36f548fAB37Fcd39cA8725B8fA214fcd784FE0A3;\n\taddress public constant CHINESE_EXCHANGE_2 = 0x877Da872D223AB3D073Ab6f9B4bb27540E387C5F;\n\taddress public constant CHINESE_EXCHANGE_3 = 0xCcC088ec38A4dbc15Ba269A176883F6ba302eD8d;\n\t// TODO: set address\n\taddress public constant CHINESE_EXCHANGE_4 = 0;\n\n\t// Tokens per eth for the various buy-in rates.\n\t// 1e8 ETH in existence, means at most 1.5e11 issued.\n\tuint public constant STANDARD_BUYIN = 1000;\n\tuint public constant TIER_2_BUYIN = 1111;\n\tuint public constant TIER_3_BUYIN = 1250;\n\tuint public constant TIER_4_BUYIN = 1429;\n\tuint public constant CHINESE_EXCHANGE_BUYIN = 1087;\n\n\t//////\n\t// State Subset: Allocations\n\t//\n\t// Invariants:\n\t// !allocationsInitialised ||\n\t//   (liquidAllocatable + tokens.liquidAllocated) / LIQUID_ALLOCATION_PPM == totalSold / SALES_ALLOCATION_PPM &&\n\t//   (lockedAllocatable + tokens.lockedAllocated) / LOCKED_ALLOCATION_PPM == totalSold / SALES_ALLOCATION_PPM\n\t//\n\t// when_allocations_complete || (now < END_TIME && saleRevenue < MAX_REVENUE)\n\n\t// Have post-sale token allocations been initialised?\n\tbool public allocationsInitialised = false;\n\t// How many liquid tokens may yet be allocated?\n\tuint public liquidAllocatable;\n\t// How many locked tokens may yet be allocated?\n\tuint public lockedAllocatable;\n\n\t//////\n\t// State Subset: Sale\n\t//\n\t// Invariants:\n\t// saleRevenue <= MAX_REVENUE\n\n\t// Total amount raised in both presale and sale, in Wei.\n\t// Assuming TREASURY locks funds, so can not exceed total amount of Ether 1e8.\n\tuint public saleRevenue = 0;\n\t// Total amount minted in both presale and sale, in AMB * 10^-18.\n\t// Assuming the TREASURY locks funds, msg.value * STANDARD_BUYIN will be less than 1.5e11.\n\tuint public totalSold = 0;\n\n\t//////\n\t// State Subset: Tokens\n\n\t// The contract which gets called whenever anything is received.\n\tAmberToken public tokens;\n\n\t//////\n\t// State Subset: Pause\n\n\t// Are contributions abnormally paused?\n\tbool public isPaused = false;\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNLOCK_PHASES\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phaseStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PHASE_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintLocked\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalise\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"unlockTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MintedLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"old\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"current\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60606040526000805474010000000000000000000000000000000000000000600160a060020a031990911633600160a060020a03161760a060020a60ff021916178155600155341561005057600080fd5b5b5b5b610b74806100626000396000f3006060604052361561010f5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663055ad42e811461011457806306fdde0314610139578063095ea7b3146101c457806313af4035146101fa57806318160ddd1461021b57806323b872dd14610240578063313ce5671461027c5780633d160e0b146102a557806340c10f19146102ca57806349abee50146102ee5780634ae2b849146103135780635143e2461461033857806370a082311461035c5780638da5cb5b1461038d57806395d89b41146103bc578063a439926314610447578063a9059cbb1461045c578063cb67f94814610492578063cf309012146104b3578063dd62ed3e146104da575b600080fd5b341561011f57600080fd5b610127610511565b60405190815260200160405180910390f35b341561014457600080fd5b61014c61054b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101895780820151818401525b602001610170565b50505050905090810190601f1680156101b65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101cf57600080fd5b6101e6600160a060020a0360043516602435610582565b604051901515815260200160405180910390f35b341561020557600080fd5b610219600160a060020a0360043516610657565b005b341561022657600080fd5b6101276106db565b60405190815260200160405180910390f35b341561024b57600080fd5b6101e6600160a060020a03600435811690602435166044356106e1565b604051901515815260200160405180910390f35b341561028757600080fd5b61028f610804565b60405160ff909116815260200160405180910390f35b34156102b057600080fd5b610127610809565b60405190815260200160405180910390f35b34156102d557600080fd5b610219600160a060020a036004351660243561080e565b005b34156102f957600080fd5b61012761088a565b60405190815260200160405180910390f35b341561031e57600080fd5b610127610890565b60405190815260200160405180910390f35b341561034357600080fd5b610219600160a060020a0360043516602435610897565b005b341561036757600080fd5b610127600160a060020a0360043516610921565b60405190815260200160405180910390f35b341561039857600080fd5b6103a0610940565b604051600160a060020a03909116815260200160405180910390f35b34156103c757600080fd5b61014c61094f565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101895780820151818401525b602001610170565b50505050905090810190601f1680156101b65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561045257600080fd5b610219610986565b005b341561046757600080fd5b6101e6600160a060020a03600435166024356109c7565b604051901515815260200160405180910390f35b341561049d57600080fd5b610219600160a060020a0360043516610a8d565b005b34156104be57600080fd5b6101e6610b07565b604051901515815260200160405180910390f35b34156104e557600080fd5b610127600160a060020a0360043581169060243516610b17565b60405190815260200160405180910390f35b600080600060015411151561052557600080fd5b60015462ed4e009042035b049050600481116105415780610544565b60045b91505b5090565b60408051908101604052600b81527f416d62657220546f6b656e000000000000000000000000000000000000000000602082015281565b6000805460a060020a900460ff161561059a57600080fd5b8115806105ce5750600160a060020a0333811660009081526003602090815260408083209387168352600190930190522054155b15156105d957600080fd5b82600160a060020a031633600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405190815260200160405180910390a350600160a060020a0333811660009081526003602090815260408083209386168352600193840190915290208290555b5b92915050565b60005433600160a060020a0390811691161461067257600080fd5b600054600160a060020a0380831691167f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236460405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60025481565b600160a060020a038316600090815260036020526040812054849083908190101561070b57600080fd5b600160a060020a03808716600090815260036020908152604080832033948516845260010190915290205487919086908190101561074857600080fd5b60005460a060020a900460ff161561075f57600080fd5b87600160a060020a031689600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8960405190815260200160405180910390a3600160a060020a03808a16600090815260036020818152604080842033861685526001808201845282862080548f900390559390925281548c9003909155928b16825291902080548901905595505b5b5b5050505b50509392505050565b601281565b600481565b60005433600160a060020a0390811691161461082957600080fd5b600160a060020a0382166000818152600360205260409081902080548401905560028054840190557f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe9083905190815260200160405180910390a25b5b5050565b60015481565b62ed4e0081565b60005433600160a060020a039081169116146108b257600080fd5b6004815b600160a060020a038416600081815260036020526040908190206002908101805495909404909401909255825484019092557f32e7179af8a9fdc2e9e300a8374683c008356bd3588861123b30800d00c1c0939083905190815260200160405180910390a25b5b5050565b600160a060020a0381166000908152600360205260409020545b919050565b600054600160a060020a031681565b60408051908101604052600381527f414d420000000000000000000000000000000000000000000000000000000000602082015281565b60005433600160a060020a039081169116146109a157600080fd5b6000805474ffffffffffffffffffffffffffffffffffffffffff19169055426001555b5b565b33600160a060020a0381166000908152600360205260408120549091908390819010156109f357600080fd5b60005460a060020a900460ff1615610a0a57600080fd5b84600160a060020a031633600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8660405190815260200160405180910390a3600160a060020a0333811660009081526003602052604080822080548890039055918716815220805485019055600192505b5b5b505092915050565b6000806000610a9a610511565b600160a060020a038516600090815260036020819052604082206002810154910154929550935090915082118015610ad157508083115b15610b0057600160a060020a038416600090815260036020819052604090912080548386038502018155018390555b5b50505050565b60005460a060020a900460ff1681565b600160a060020a03808316600090815260036020908152604080832093851683526001909301905220545b929150505600a165627a7a72305820204c178072e3f346742b9c8b512704514d37f965afae9a5ddc951542a6230e490029"
}