{
  "address": "0x000c10f1a06657ff779c576e4d8c1610d8df2d6f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "C10Token",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\n/**\n * Invictus Capital - CRYPTO10 Hedged\n * https://invictuscapital.com\n * MIT License - https://github.com/invictuscapital/smartcontracts/\n * Uses code from the OpenZeppelin project\n */\n\n\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.6;\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.6;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\npragma solidity ^0.5.6;\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.6;\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        require(token.transferFrom(from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        require(token.approve(spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        require(token.approve(spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        require(token.approve(spender, newAllowance));\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.6;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n\npragma solidity ^0.5.6;\n\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n\npragma solidity ^0.5.6;\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.6;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\n\npragma solidity ^0.5.6;\n\n\n/**\n * @title WhitelistAdminRole\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n */\ncontract WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistAdminAdded(address indexed account);\n    event WhitelistAdminRemoved(address indexed account);\n\n    Roles.Role private _whitelistAdmins;\n\n    constructor () internal {\n        _addWhitelistAdmin(msg.sender);\n    }\n\n    modifier onlyWhitelistAdmin() {\n        require(isWhitelistAdmin(msg.sender));\n        _;\n    }\n\n    function isWhitelistAdmin(address account) public view returns (bool) {\n        return _whitelistAdmins.has(account);\n    }\n\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n        _addWhitelistAdmin(account);\n    }\n\n    function renounceWhitelistAdmin() public {\n        _removeWhitelistAdmin(msg.sender);\n    }\n\n    function _addWhitelistAdmin(address account) internal {\n        _whitelistAdmins.add(account);\n        emit WhitelistAdminAdded(account);\n    }\n\n    function _removeWhitelistAdmin(address account) internal {\n        _whitelistAdmins.remove(account);\n        emit WhitelistAdminRemoved(account);\n    }\n}\n\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\n\npragma solidity ^0.5.6;\n\n\n\n/**\n * @title WhitelistedRole\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\n * it), and not Whitelisteds themselves.\n */\ncontract WhitelistedRole is WhitelistAdminRole {\n    using Roles for Roles.Role;\n\n    event WhitelistedAdded(address indexed account);\n    event WhitelistedRemoved(address indexed account);\n\n    Roles.Role private _whitelisteds;\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted(msg.sender));\n        _;\n    }\n\n    function isWhitelisted(address account) public view returns (bool) {\n        return _whitelisteds.has(account);\n    }\n\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\n        _addWhitelisted(account);\n    }\n\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n        _removeWhitelisted(account);\n    }\n\n    function renounceWhitelisted() public {\n        _removeWhitelisted(msg.sender);\n    }\n\n    function _addWhitelisted(address account) internal {\n        _whitelisteds.add(account);\n        emit WhitelistedAdded(account);\n    }\n\n    function _removeWhitelisted(address account) internal {\n        _whitelisteds.remove(account);\n        emit WhitelistedRemoved(account);\n    }\n}\n\n// File: contracts/InvictusWhitelist.sol\n\npragma solidity ^0.5.6;\n\n\n\n/**\n * Manages whitelisted addresses.\n *\n */\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\n    constructor ()\n        WhitelistedRole() public {\n    }\n\n    /// @dev override to support legacy name\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\n        if (!isWhitelisted(participant)) {\n            addWhitelisted(participant);\n        }\n    }\n\n    /// Allow the owner to remove a whitelistAdmin\n    function removeWhitelistAdmin(address account) public onlyOwner {\n        require(account != msg.sender, \"Use renounceWhitelistAdmin\");\n        _removeWhitelistAdmin(account);\n    }\n}\n\n// File: contracts/C10Token.sol\n\npragma solidity ^0.5.6;\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Contract for CRYPTO10 Hedged (C10) fund.\n *\n */\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\n\n    using SafeERC20 for ERC20;\n    using SafeMath for uint256;\n\n    // Maps participant addresses to the eth balance pending token issuance\n    mapping(address => uint256) public pendingBuys;\n    // The participant accounts waiting for token issuance\n    address[] public participantAddresses;\n\n    // Maps participant addresses to the withdrawal request\n    mapping (address => uint256) public pendingWithdrawals;\n    address payable[] public withdrawals;\n\n    uint256 private minimumWei = 50 finney;\n    uint256 private fees = 5;  // 0.5% , or 5/1000\n    uint256 private minTokenRedemption = 1 ether;\n    uint256 private maxAllocationsPerTx = 50;\n    uint256 private maxWithdrawalsPerTx = 50;\n    Price public price;\n\n    address public whitelistContract;\n\n    struct Price {\n        uint256 numerator;\n        uint256 denominator;\n    }\n\n    event PriceUpdate(uint256 numerator, uint256 denominator);\n    event AddLiquidity(uint256 value);\n    event RemoveLiquidity(uint256 value);\n    event DepositReceived(address indexed participant, uint256 value);\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\n    event TokensClaimed(address indexed token, uint256 balance);\n\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\n        ERC20Detailed(\"Crypto10 Hedged\", \"C10\", 18)\n        ERC20Burnable()\n        Pausable() public {\n            price = Price(priceNumeratorInput, 1000);\n            require(priceNumeratorInput > 0, \"Invalid price numerator\");\n            require(whitelistContractInput != address(0), \"Invalid whitelist address\");\n            whitelistContract = whitelistContractInput;\n    }\n\n    /**\n     * @dev fallback function that buys tokens if the sender is whitelisted.\n     */\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * @dev Explicitly buy via contract.\n     */\n    function buy() external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n     * Sets the maximum number of allocations in a single transaction.\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\n     */\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\n        require(newMaxAllocationsPerTx > 0, \"Must be greater than 0\");\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\n    }\n\n    /**\n     * Sets the maximum number of withdrawals in a single transaction.\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\n     */\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\n        require(newMaxWithdrawalsPerTx > 0, \"Must be greater than 0\");\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\n    }\n\n    /// Sets the minimum wei when buying tokens.\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\n        require(newMinimumWei > 0, \"Minimum must be greater than 0\");\n        minimumWei = newMinimumWei;\n    }\n\n    /// Sets the minimum number of tokens to redeem.\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\n        require(newMinTokenRedemption > 0, \"Minimum must be greater than 0\");\n        minTokenRedemption = newMinTokenRedemption;\n    }\n\n    /// Updates the price numerator.\n    function updatePrice(uint256 newNumerator) external onlyMinter {\n        require(newNumerator > 0, \"Must be positive value\");\n\n        price.numerator = newNumerator;\n\n        allocateTokens();\n        processWithdrawals();\n        emit PriceUpdate(price.numerator, price.denominator);\n    }\n\n    /// Updates the price denominator.\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\n        require(newDenominator > 0, \"Must be positive value\");\n\n        price.denominator = newDenominator;\n    }\n\n    /**\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\n     * @dev withdrawn tokens are burnt.\n     */\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \n        onlyWhitelisted {\n\n        address payable participant = msg.sender;\n        require(balanceOf(participant) >= amountTokensToWithdraw, \n            \"Cannot withdraw more than balance held\");\n        require(amountTokensToWithdraw >= minTokenRedemption, \"Too few tokens\");\n\n        burn(amountTokensToWithdraw);\n\n        uint256 pendingAmount = pendingWithdrawals[participant];\n        if (pendingAmount == 0) {\n            withdrawals.push(participant);\n        }\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\n    }\n\n    /// Allows owner to claim any ERC20 tokens.\n    function claimTokens(ERC20 token) external payable onlyOwner {\n        require(address(token) != address(0), \"Invalid address\");\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(owner(), token.balanceOf(address(this)));\n        emit TokensClaimed(address(token), balance);\n    }\n    \n    /**\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\n     * @param value The amount of tokens to be burned.\n     */\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\n        _burn(account, value);\n    }\n\n    /**\n     * @dev Function to mint tokens when not paused.\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\n        _mint(to, value);\n\n        return true;\n    }\n\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\n    function addLiquidity() public payable {\n        require(msg.value > 0, \"Must be positive value\");\n        emit AddLiquidity(msg.value);\n    }\n\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\n    function removeLiquidity(uint256 amount) public onlyOwner {\n        require(amount <= address(this).balance, \"Insufficient balance\");\n\n        msg.sender.transfer(amount);\n        emit RemoveLiquidity(amount);\n    }\n\n    /// Allow the owner to remove a minter\n    function removeMinter(address account) public onlyOwner {\n        require(account != msg.sender, \"Use renounceMinter\");\n        _removeMinter(account);\n    }\n\n    /// Allow the owner to remove a pauser\n    function removePauser(address account) public onlyOwner {\n        require(account != msg.sender, \"Use renouncePauser\");\n        _removePauser(account);\n    }\n\n    /// returns the number of withdrawals pending.\n    function numberWithdrawalsPending() public view returns (uint256) {\n        return withdrawals.length;\n    }\n\n    /// returns the number of pending buys, waiting for token issuance.\n    function numberBuysPending() public view returns (uint256) {\n        return participantAddresses.length;\n    }\n\n    /**\n     * First phase of the 2-part buy, the participant deposits eth and waits\n     * for a price to be set so the tokens can be minted.\n     * @param participant whitelisted buyer.\n     */\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\n        assert(participant != address(0));\n\n        // Ensure minimum investment is met\n        require(msg.value >= minimumWei, \"Minimum wei not met\");\n\n        uint256 pendingAmount = pendingBuys[participant];\n        if (pendingAmount == 0) {\n            participantAddresses.push(participant);\n        }\n\n        // Increase the pending balance and wait for the price update\n        pendingBuys[participant] = pendingAmount.add(msg.value);\n\n        emit DepositReceived(participant, msg.value);\n    }\n\n    /// Internal function to allocate token.\n    function allocateTokens() internal {\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \n            participantAddresses.length : maxAllocationsPerTx;\n        \n        address payable ownerAddress = address(uint160(owner()));\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\n            address participant = participantAddresses[i - 1];\n            uint256 deposit = pendingBuys[participant];\n            uint256 feeAmount = deposit.mul(fees) / 1000;\n            uint256 balance = deposit.sub(feeAmount);\n\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\n            pendingBuys[participant] = 0;\n            participantAddresses.pop();\n\n            ownerAddress.transfer(feeAmount);\n\n            mint(participant, newTokens);   \n            emit TokensIssued(participant, newTokens, balance);\n        }\n    }\n\n    /// Internal function to process withdrawals.\n    function processWithdrawals() internal {\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \n            withdrawals.length : maxWithdrawalsPerTx;\n\n        address payable ownerAddress = address(uint160(owner()));\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\n            address payable participant = withdrawals[i - 1];\n            uint256 tokens = pendingWithdrawals[participant];\n\n            assert(tokens > 0); // participant must have requested a withdrawal\n\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\n\n            pendingWithdrawals[participant] = 0;\n            withdrawals.pop();\n\n            if (address(this).balance >= withdrawValue) {\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\n                uint256 balance = withdrawValue.sub(feeAmount);\n\n                participant.transfer(balance);\n\n                ownerAddress.transfer(feeAmount);\n\n                emit Withdraw(participant, tokens, balance);\n            }\n            else {\n                mint(participant, tokens);\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\n            }\n        }\n    }\n\n    modifier onlyWhitelisted() {\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \"Must be whitelisted\");\n        _;\n    }\n}",
  "bytecode": "608060405266b1a2bc2ec50000600d556005600e55670de0b6b3a7640000600f55603260105560326011553480156200003757600080fd5b5060405160408062004932833981018060405260408110156200005957600080fd5b8101908080519060200190929190805190602001909291905050506040518060400160405280600f81526020017f43727970746f31302048656467656400000000000000000000000000000000008152506040518060400160405280600381526020017f433130000000000000000000000000000000000000000000000000000000000081525060128260039080519060200190620000fa929190620005cc565b50816004908051906020019062000113929190620005cc565b5080600560006101000a81548160ff021916908360ff16021790555050505033600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36200020133620003c160201b60201c565b6000600760006101000a81548160ff0219169083151502179055506200022d336200042260201b60201c565b60405180604001604052808381526020016103e88152506012600082015181600001556020820151816001015590505060008211620002d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f496e76616c6964207072696365206e756d657261746f7200000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000378576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f496e76616c69642077686974656c69737420616464726573730000000000000081525060200191505060405180910390fd5b80601460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200067b565b620003dc8160066200048360201b6200416f1790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6200043d8160086200048360201b6200416f1790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620004be57600080fd5b620004d082826200053960201b60201c565b15620004db57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200057557600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200060f57805160ff191683800117855562000640565b8280016001018555821562000640579182015b828111156200063f57825182559160200191906001019062000622565b5b5090506200064f919062000653565b5090565b6200067891905b80821115620006745760008160009055506001016200065a565b5090565b90565b6142a7806200068b6000396000f3fe6080604052600436106102ae5760003560e01c80638456cb5911610175578063a6f2ae3a116100dc578063cf60402f11610095578063df8de3e71161006f578063df8de3e71461103c578063e8078d9414611080578063f2fde38b1461108a578063f3f43703146110db576102ae565b8063cf60402f14610f41578063dbb2455414610f7c578063dd62ed3e14610fb7576102ae565b8063a6f2ae3a14610dca578063a9059cbb14610dd4578063aa271e1a14610e47578063c239f6ff14610eb0578063cc9be27a14610edb578063cf0aed0e14610f06576102ae565b8063983b2d561161012e578063983b2d5614610c475780639865027514610c985780639c8f9f2314610caf5780639ee679e814610cea578063a035b1fe14610d25578063a457c2d714610d57576102ae565b80638456cb5914610a8857806384900b0414610a9f5780638d6cc56d14610af65780638da5cb5b14610b315780638f32d59b14610b8857806395d89b4114610bb7576102ae565b806346fbf68e116102195780636b2c0f55116101d25780636b2c0f55146108f85780636ef8d66d1461094957806370a0823114610960578063715018a6146109c557806379cc6790146109dc57806382dc1ec414610a37576102ae565b806346fbf68e146106d457806354ffbddb1461073d5780635c975abb146107b85780635cc07076146107e75780636130aabf14610862578063640c2544146108bd576102ae565b806331a4cbb61161026b57806331a4cbb6146104fc57806339509351146105615780633f4ba83a146105d457806340c10f19146105eb57806342966c681461065e578063454adff914610699576102ae565b806306fdde03146102b9578063095ea7b31461034957806318160ddd146103bc57806323b872dd146103e75780633092afd51461047a578063313ce567146104cb575b6102b733611140565b005b3480156102c557600080fd5b506102ce6114b1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561030e5780820151818401526020810190506102f3565b50505050905090810190601f16801561033b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035557600080fd5b506103a26004803603604081101561036c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611553565b604051808215151515815260200191505060405180910390f35b3480156103c857600080fd5b506103d161167e565b6040518082815260200191505060405180910390f35b3480156103f357600080fd5b506104606004803603606081101561040a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611688565b604051808215151515815260200191505060405180910390f35b34801561048657600080fd5b506104c96004803603602081101561049d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611890565b005b3480156104d757600080fd5b506104e061194f565b604051808260ff1660ff16815260200191505060405180910390f35b34801561050857600080fd5b5061054b6004803603602081101561051f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611966565b6040518082815260200191505060405180910390f35b34801561056d57600080fd5b506105ba6004803603604081101561058457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061197e565b604051808215151515815260200191505060405180910390f35b3480156105e057600080fd5b506105e9611bb3565b005b3480156105f757600080fd5b506106446004803603604081101561060e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611c5e565b604051808215151515815260200191505060405180910390f35b34801561066a57600080fd5b506106976004803603602081101561068157600080fd5b8101908080359060200190929190505050611ca0565b005b3480156106a557600080fd5b506106d2600480360360208110156106bc57600080fd5b8101908080359060200190929190505050611cad565b005b3480156106e057600080fd5b50610723600480360360208110156106f757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d3e565b604051808215151515815260200191505060405180910390f35b34801561074957600080fd5b506107766004803603602081101561076057600080fd5b8101908080359060200190929190505050611d5b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107c457600080fd5b506107cd611d97565b604051808215151515815260200191505060405180910390f35b3480156107f357600080fd5b506108206004803603602081101561080a57600080fd5b8101908080359060200190929190505050611dae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561086e57600080fd5b506108bb6004803603604081101561088557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611dea565b005b3480156108c957600080fd5b506108f6600480360360208110156108e057600080fd5b8101908080359060200190929190505050611e09565b005b34801561090457600080fd5b506109476004803603602081101561091b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e9a565b005b34801561095557600080fd5b5061095e611f59565b005b34801561096c57600080fd5b506109af6004803603602081101561098357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f64565b6040518082815260200191505060405180910390f35b3480156109d157600080fd5b506109da611fac565b005b3480156109e857600080fd5b50610a35600480360360408110156109ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061207e565b005b348015610a4357600080fd5b50610a8660048036036020811015610a5a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061208c565b005b348015610a9457600080fd5b50610a9d6120aa565b005b348015610aab57600080fd5b50610ab4612156565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b0257600080fd5b50610b2f60048036036020811015610b1957600080fd5b810190808035906020019092919050505061217c565b005b348015610b3d57600080fd5b50610b4661226a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b9457600080fd5b50610b9d612294565b604051808215151515815260200191505060405180910390f35b348015610bc357600080fd5b50610bcc6122ec565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c0c578082015181840152602081019050610bf1565b50505050905090810190601f168015610c395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c5357600080fd5b50610c9660048036036020811015610c6a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061238e565b005b348015610ca457600080fd5b50610cad6123ac565b005b348015610cbb57600080fd5b50610ce860048036036020811015610cd257600080fd5b81019080803590602001909291905050506123b7565b005b348015610cf657600080fd5b50610d2360048036036020811015610d0d57600080fd5b81019080803590602001909291905050506124d6565b005b348015610d3157600080fd5b50610d3a612880565b604051808381526020018281526020019250505060405180910390f35b348015610d6357600080fd5b50610db060048036036040811015610d7a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612892565b604051808215151515815260200191505060405180910390f35b610dd2612ac7565b005b348015610de057600080fd5b50610e2d60048036036040811015610df757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612ad2565b604051808215151515815260200191505060405180910390f35b348015610e5357600080fd5b50610e9660048036036020811015610e6a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ae9565b604051808215151515815260200191505060405180910390f35b348015610ebc57600080fd5b50610ec5612b06565b6040518082815260200191505060405180910390f35b348015610ee757600080fd5b50610ef0612b13565b6040518082815260200191505060405180910390f35b348015610f1257600080fd5b50610f3f60048036036020811015610f2957600080fd5b8101908080359060200190929190505050612b20565b005b348015610f4d57600080fd5b50610f7a60048036036020811015610f6457600080fd5b8101908080359060200190929190505050612bb1565b005b348015610f8857600080fd5b50610fb560048036036020811015610f9f57600080fd5b8101908080359060200190929190505050612c42565b005b348015610fc357600080fd5b5061102660048036036040811015610fda57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cd7565b6040518082815260200191505060405180910390f35b61107e6004803603602081101561105257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d5e565b005b6110886130a1565b005b34801561109657600080fd5b506110d9600480360360208110156110ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613150565b005b3480156110e757600080fd5b5061112a600480360360208110156110fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061316d565b6040518082815260200191505060405180910390f35b600760009054906101000a900460ff161561115a57600080fd5b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d602081101561122357600080fd5b81019080805190602001909291905050506112a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d7573742062652077686974656c69737465640000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112dd57fe5b600d54341015611355576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d696e696d756d20776569206e6f74206d65740000000000000000000000000081525060200191505060405180910390fd5b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561140957600a8290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b61141c348261318590919063ffffffff16565b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f9936746a4565f9766fa768f88f56a7487c78780ac179562773d1c75c5269537e346040518082815260200191505060405180910390a25050565b606060038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115495780601f1061151e57610100808354040283529160200191611549565b820191906000526020600020905b81548152906001019060200180831161152c57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561158e57600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600254905090565b600061171982600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546131a490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117a48484846131c4565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b611898612294565b6118a157600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611943576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5573652072656e6f756e63654d696e746572000000000000000000000000000081525060200191505060405180910390fd5b61194c8161338e565b50565b6000600560009054906101000a900460ff16905090565b60096020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119b957600080fd5b611a4882600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461318590919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b611bbc33611d3e565b611bc557600080fd5b600760009054906101000a900460ff16611bde57600080fd5b6000600760006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000611c6933612ae9565b611c7257600080fd5b600760009054906101000a900460ff1615611c8c57600080fd5b611c9683836133e8565b6001905092915050565b611caa338261353a565b50565b611cb5612294565b611cbe57600080fd5b60008111611d34576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4d7573742062652067726561746572207468616e20300000000000000000000081525060200191505060405180910390fd5b8060118190555050565b6000611d5482600661368c90919063ffffffff16565b9050919050565b600a8181548110611d6857fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760009054906101000a900460ff16905090565b600c8181548110611dbb57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611df2612294565b611dfb57600080fd5b611e05828261353a565b5050565b611e11612294565b611e1a57600080fd5b60008111611e90576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4d7573742062652067726561746572207468616e20300000000000000000000081525060200191505060405180910390fd5b8060108190555050565b611ea2612294565b611eab57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f5573652072656e6f756e6365506175736572000000000000000000000000000081525060200191505060405180910390fd5b611f568161371e565b50565b611f623361371e565b565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611fb4612294565b611fbd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6120888282613778565b5050565b61209533611d3e565b61209e57600080fd5b6120a781613976565b50565b6120b333611d3e565b6120bc57600080fd5b600760009054906101000a900460ff16156120d657600080fd5b6001600760006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61218533612ae9565b61218e57600080fd5b60008111612204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4d75737420626520706f7369746976652076616c75650000000000000000000081525060200191505060405180910390fd5b806012600001819055506122166139d0565b61221e613c3a565b7f92664190cca12aca9cd5309d87194bdda75bb51362d71c06e1a6f75c7c765711601260000154601260010154604051808381526020018281526020019250505060405180910390a150565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123845780601f1061235957610100808354040283529160200191612384565b820191906000526020600020905b81548152906001019060200180831161236757829003601f168201915b5050505050905090565b61239733612ae9565b6123a057600080fd5b6123a981613f70565b50565b6123b53361338e565b565b6123bf612294565b6123c857600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631811115612455576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e73756666696369656e742062616c616e636500000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561249b573d6000803e3d6000fd5b507f9a5a8a32afd899e7f95003c6e21c9fab2d50e11992439d14472229180c60c7aa816040518082815260200191505060405180910390a150565b600760009054906101000a900460ff16156124f057600080fd5b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561258f57600080fd5b505afa1580156125a3573d6000803e3d6000fd5b505050506040513d60208110156125b957600080fd5b810190808051906020019092919050505061263c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d7573742062652077686974656c69737465640000000000000000000000000081525060200191505060405180910390fd5b60003390508161264b82611f64565b10156126a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806142566026913960400191505060405180910390fd5b600f5482101561271a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f546f6f2066657720746f6b656e7300000000000000000000000000000000000081525060200191505060405180910390fd5b61272382611ca0565b6000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156127d757600c8290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b6127ea838261318590919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f17040713250ec5f668a1c39e7939900e78558350dbaff0ebef34268dfa8ea4ac846040518082815260200191505060405180910390a2505050565b60128060000154908060010154905082565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156128cd57600080fd5b61295c82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546131a490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b612ad033611140565b565b6000612adf3384846131c4565b6001905092915050565b6000612aff82600861368c90919063ffffffff16565b9050919050565b6000600c80549050905090565b6000600a80549050905090565b612b28612294565b612b3157600080fd5b60008111612ba7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4d696e696d756d206d7573742062652067726561746572207468616e2030000081525060200191505060405180910390fd5b80600d8190555050565b612bb9612294565b612bc257600080fd5b60008111612c38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4d696e696d756d206d7573742062652067726561746572207468616e2030000081525060200191505060405180910390fd5b80600f8190555050565b612c4b33612ae9565b612c5457600080fd5b60008111612cca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4d75737420626520706f7369746976652076616c75650000000000000000000081525060200191505060405180910390fd5b8060126001018190555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b612d66612294565b612d6f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612e12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f496e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612e9157600080fd5b505afa158015612ea5573d6000803e3d6000fd5b505050506040513d6020811015612ebb57600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612ef261226a565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612f6f57600080fd5b505afa158015612f83573d6000803e3d6000fd5b505050506040513d6020811015612f9957600080fd5b81019080805190602001909291905050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561301357600080fd5b505af1158015613027573d6000803e3d6000fd5b505050506040513d602081101561303d57600080fd5b8101908080519060200190929190505050508173ffffffffffffffffffffffffffffffffffffffff167f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e430826040518082815260200191505060405180910390a25050565b60003411613117576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4d75737420626520706f7369746976652076616c75650000000000000000000081525060200191505060405180910390fd5b7ff53d9d58a7ff16a2e1360446f1c4b5e81a427d3efd25615be081f4003662400a346040518082815260200191505060405180910390a1565b613158612294565b61316157600080fd5b61316a81613fca565b50565b600b6020528060005260406000206000915090505481565b60008082840190508381101561319a57600080fd5b8091505092915050565b6000828211156131b357600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156131fe57600080fd5b61324f816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546131a490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506132e2816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461318590919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6133a28160086140c490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561342257600080fd5b6134378160025461318590919063ffffffff16565b60028190555061348e816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461318590919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561357457600080fd5b613589816002546131a490919063ffffffff16565b6002819055506135e0816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546131a490919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156136c757600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6137328160066140c490919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b61380781600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546131a490919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613891828261353a565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35050565b61398a81600661416f90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b6000601054600a8054905011156139e9576010546139f0565b600a805490505b905060006139fc61226a565b905060008290505b6000811115613c35576000600a6001830381548110613a1f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006103e8613aaa600e548461421b90919063ffffffff16565b81613ab157fe5b0490506000613ac982846131a490919063ffffffff16565b90506000601260010154613aeb6012600001548461421b90919063ffffffff16565b81613af257fe5b0490506000600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a805480613b4557fe5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558673ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015613bc0573d6000803e3d6000fd5b50613bcb8582611c5e565b508473ffffffffffffffffffffffffffffffffffffffff167fc91a3666a5b4764b69624fd864f5f18d75169482bacba07da1dbf4be975f83e28284604051808381526020018281526020019250505060405180910390a25050505050808060019003915050613a04565b505050565b6000601154600c805490501115613c5357601154613c5a565b600c805490505b90506000613c6661226a565b905060008290505b6000811115613f6b576000600c6001830381548110613c8957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111613d0457fe5b6000601260000154613d246012600101548461421b90919063ffffffff16565b81613d2b57fe5b0490506000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600c805480613d7e57fe5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055803073ffffffffffffffffffffffffffffffffffffffff163110613ef75760006103e8613deb600e548461421b90919063ffffffff16565b81613df257fe5b0490506000613e0a82846131a490919063ffffffff16565b90508473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613e52573d6000803e3d6000fd5b508673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015613e99573d6000803e3d6000fd5b508473ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688583604051808381526020018281526020019250505060405180910390a25050613f5a565b613f018383611c5e565b508273ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568836000604051808381526020018281526020019250505060405180910390a25b505050808060019003915050613c6e565b505050565b613f8481600861416f90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561400457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156140fe57600080fd5b614108828261368c565b61411157600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156141a957600080fd5b6141b3828261368c565b156141bd57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008083141561422e576000905061424f565b600082840290508284828161423f57fe5b041461424a57600080fd5b809150505b9291505056fe43616e6e6f74207769746864726177206d6f7265207468616e2062616c616e63652068656c64a165627a7a72305820a6a1851460660032138a788136c246b6c3f928fdf22d99ce3961a4d031f82746002900000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000ba580c2d81628160d2c62e3db97e019edd",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000ba580c2d81628160d2c62e3db97e019edd"
}