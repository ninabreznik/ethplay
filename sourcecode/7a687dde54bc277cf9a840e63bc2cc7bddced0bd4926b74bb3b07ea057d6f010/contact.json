{
  "address": "0x843620cad173eb76fc0386c28dca4875c4011cf6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DRCToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-08\n*/\n\npragma solidity ^0.4.19;\n\ninterface tokenRecipient { \n\n    function receiveApproval(\n\n        address _from, \n\n        uint256 _value,\n\n        address _token, \n\n        bytes _extraData\n\n    ) public; \n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract BurnableToken is BasicToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract DRCToken is BurnableToken, MintableToken, PausableToken {    \n\n    string public name = 'DRC Token';\n\n    string public symbol = 'DRC';\n\n    uint8 public decimals = 18;\n\n    uint256 public INITIAL_SUPPLY = 1000000000000000000000000000;\n\n    // add map for recording the accounts that will not be allowed to transfer tokens\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address _target, bool _frozen);\n\n    /**\n     * contruct the token by total amount \n     *\n     * initial balance is set. \n     */\n    function DRCToken() public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = totalSupply;\n    }\n    \n    /**\n     * freeze the account's balance \n     *\n     * by default all the accounts will not be frozen until set freeze value as true. \n     */\n    function freezeAccount(address _target, bool _freeze) onlyOwner public {\n        frozenAccount[_target] = _freeze;\n        FrozenFunds(_target, _freeze);\n    }\n\n  /**\n   * @dev transfer token for a specified address with froze status checking\n   * @param _to The address to transfer to.\n   * @param _value The amount to be transferred.\n   */\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    require(!frozenAccount[msg.sender]);\n    return super.transfer(_to, _value);\n  }\n  \n  /**\n   * @dev Transfer tokens from one address to another with checking the frozen status\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    require(!frozenAccount[_from]);\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev transfer token for a specified address with froze status checking\n   * @param _toMulti The addresses to transfer to.\n   * @param _values The array of the amount to be transferred.\n   */\n  function transferMultiAddress(address[] _toMulti, uint256[] _values) public whenNotPaused returns (bool) {\n    require(!frozenAccount[msg.sender]);\n    assert(_toMulti.length == _values.length);\n\n    uint256 i = 0;\n    while ( i < _toMulti.length) {\n        require(_toMulti[i] != address(0));\n        require(_values[i] <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_values[i]);\n        balances[_toMulti[i]] = balances[_toMulti[i]].add(_values[i]);\n        Transfer(msg.sender, _toMulti[i], _values[i]);\n\n        i = i.add(1);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another with checking the frozen status\n   * @param _from address The address which you want to send tokens from\n   * @param _toMulti address[] The addresses which you want to transfer to in boundle\n   * @param _values uint256[] the array of amount of tokens to be transferred\n   */\n  function transferMultiAddressFrom(address _from, address[] _toMulti, uint256[] _values) public whenNotPaused returns (bool) {\n    require(!frozenAccount[_from]);\n    assert(_toMulti.length == _values.length);\n    \n    uint256 i = 0;\n    while ( i < _toMulti.length) {\n        require(_toMulti[i] != address(0));\n        require(_values[i] <= balances[_from]);\n        require(_values[i] <= allowed[_from][msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[_from] = balances[_from].sub(_values[i]);\n        balances[_toMulti[i]] = balances[_toMulti[i]].add(_values[i]);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_values[i]);\n        Transfer(_from, _toMulti[i], _values[i]);\n\n        i = i.add(1);\n    }\n\n    return true;\n  }\n  \n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) whenNotPaused public {\n        super.burn(_value);\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public whenNotPaused returns (bool success) {\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowed[_from][msg.sender]);    // Check allowance\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the targeted balance\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n        totalSupply = totalSupply.sub(_value);\n        Burn(_from, _value);\n        return true;\n    }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint whenNotPaused public returns (bool) {\n      return super.mint(_to, _amount);\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint whenNotPaused public returns (bool) {\n      return super.finishMinting();\n  }\n\n\n    /**\n\n     * Set allowance for other address and notify\n\n     *\n\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\n     *\n\n     * @param _spender The address authorized to spend\n\n     * @param _value the max amount they can spend\n\n     * @param _extraData some extra information to send to the approved contract\n\n     */\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public whenNotPaused returns (bool success) {\n\n        tokenRecipient spender = tokenRecipient(_spender);\n\n        if (approve(_spender, _value)) {\n\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n\n        }\n\n    }\n\n}",
  "bytecode": "606060409081526003805460a060020a61ffff02191690558051908101604052600981527f44524320546f6b656e0000000000000000000000000000000000000000000000602082015260049080516200005e9291602001906200010c565b5060408051908101604052600381527f445243000000000000000000000000000000000000000000000000000000000060208201526005908051620000a89291602001906200010c565b506006805460ff191660121790556b033b2e3c9fd0803ce80000006007553415620000d257600080fd5b60038054600160a060020a03191633600160a060020a031690811790915560075460008181559182526001602052604090912055620001b1565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014f57805160ff19168380011785556200017f565b828001600101855582156200017f579182015b828111156200017f57825182559160200191906001019062000162565b506200018d92915062000191565b5090565b620001ae91905b808211156200018d576000815560010162000198565b90565b611ac280620001c16000396000f30060606040526004361061015e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461016357806306fdde031461018a578063095ea7b31461021457806318160ddd1461023657806323b872dd1461025b5780632ff2e9dc14610283578063313ce567146102965780633f4ba83a146102bf57806340c10f19146102d457806342966c68146102f65780635c975abb1461030c578063661884631461031f57806370a0823114610341578063782ec0231461036057806379b4a2c7146103fd57806379cc67901461048c5780637d64bcb4146104ae5780638456cb59146104c15780638da5cb5b146104d457806395d89b4114610503578063a9059cbb14610516578063b414d4b614610538578063cae9ca5114610557578063d73dd623146105bc578063dd62ed3e146105de578063e724529c14610603578063f2fde38b14610627575b600080fd5b341561016e57600080fd5b610176610646565b604051901515815260200160405180910390f35b341561019557600080fd5b61019d610656565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101d95780820151838201526020016101c1565b50505050905090810190601f1680156102065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561021f57600080fd5b610176600160a060020a03600435166024356106f4565b341561024157600080fd5b61024961071f565b60405190815260200160405180910390f35b341561026657600080fd5b610176600160a060020a0360043581169060243516604435610725565b341561028e57600080fd5b610249610778565b34156102a157600080fd5b6102a961077e565b60405160ff909116815260200160405180910390f35b34156102ca57600080fd5b6102d2610787565b005b34156102df57600080fd5b610176600160a060020a0360043516602435610807565b341561030157600080fd5b6102d260043561085d565b341561031757600080fd5b610176610880565b341561032a57600080fd5b610176600160a060020a0360043516602435610890565b341561034c57600080fd5b610249600160a060020a03600435166108b4565b341561036b57600080fd5b61017660048035600160a060020a0316906044602480359081019083013580602080820201604051908101604052809392919081815260200183836020028082843782019150505050505091908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437509496506108cf95505050505050565b341561040857600080fd5b610176600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284378201915050505050509190803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843750949650610bb295505050505050565b341561049757600080fd5b610176600160a060020a0360043516602435610d8d565b34156104b957600080fd5b610176610ef2565b34156104cc57600080fd5b6102d2610f4b565b34156104df57600080fd5b6104e7610fd0565b604051600160a060020a03909116815260200160405180910390f35b341561050e57600080fd5b61019d610fdf565b341561052157600080fd5b610176600160a060020a036004351660243561104a565b341561054357600080fd5b610176600160a060020a0360043516611094565b341561056257600080fd5b61017660048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506110a995505050505050565b34156105c757600080fd5b610176600160a060020a03600435166024356111f2565b34156105e957600080fd5b610249600160a060020a0360043581169060243516611216565b341561060e57600080fd5b6102d2600160a060020a03600435166024351515611241565b341561063257600080fd5b6102d2600160a060020a03600435166112cd565b60035460a060020a900460ff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ec5780601f106106c1576101008083540402835291602001916106ec565b820191906000526020600020905b8154815290600101906020018083116106cf57829003601f168201915b505050505081565b60035460009060a860020a900460ff161561070e57600080fd5b6107188383611368565b9392505050565b60005481565b60035460009060a860020a900460ff161561073f57600080fd5b600160a060020a03841660009081526008602052604090205460ff161561076557600080fd5b6107708484846113d4565b949350505050565b60075481565b60065460ff1681565b60035433600160a060020a039081169116146107a257600080fd5b60035460a860020a900460ff1615156107ba57600080fd5b6003805475ff000000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60035460009033600160a060020a0390811691161461082557600080fd5b60035460a060020a900460ff161561083c57600080fd5b60035460a860020a900460ff161561085357600080fd5b61071883836113f9565b60035460a860020a900460ff161561087457600080fd5b61087d816114f4565b50565b60035460a860020a900460ff1681565b60035460009060a860020a900460ff16156108aa57600080fd5b61071883836115af565b600160a060020a031660009081526001602052604090205490565b600354600090819060a860020a900460ff16156108eb57600080fd5b600160a060020a03851660009081526008602052604090205460ff161561091157600080fd5b825184511461091c57fe5b5060005b8351811015610ba557600084828151811061093757fe5b90602001906020020151600160a060020a0316141561095557600080fd5b600160a060020a03851660009081526001602052604090205483828151811061097a57fe5b90602001906020020151111561098f57600080fd5b600160a060020a03808616600090815260026020908152604080832033909416835292905220548382815181106109c257fe5b9060200190602002015111156109d757600080fd5b610a158382815181106109e657fe5b90602001906020020151600160a060020a0387166000908152600160205260409020549063ffffffff6116a916565b600160a060020a038616600090815260016020526040902055610a87838281518110610a3d57fe5b9060200190602002015160016000878581518110610a5757fe5b90602001906020020151600160a060020a031681526020810191909152604001600020549063ffffffff6116bb16565b60016000868481518110610a9757fe5b90602001906020020151600160a060020a03168152602081019190915260400160002055610b07838281518110610aca57fe5b90602001906020020151600160a060020a03808816600090815260026020908152604080832033909416835292905220549063ffffffff6116a916565b600160a060020a0380871660009081526002602090815260408083203390941683529290522055838181518110610b3a57fe5b90602001906020020151600160a060020a031685600160a060020a0316600080516020611a77833981519152858481518110610b7257fe5b9060200190602002015160405190815260200160405180910390a3610b9e81600163ffffffff6116bb16565b9050610920565b600191505b509392505050565b600354600090819060a860020a900460ff1615610bce57600080fd5b600160a060020a03331660009081526008602052604090205460ff1615610bf457600080fd5b8251845114610bff57fe5b5060005b8351811015610d83576000848281518110610c1a57fe5b90602001906020020151600160a060020a03161415610c3857600080fd5b600160a060020a033316600090815260016020526040902054838281518110610c5d57fe5b906020019060200201511115610c7257600080fd5b610cb0838281518110610c8157fe5b90602001906020020151600160a060020a0333166000908152600160205260409020549063ffffffff6116a916565b600160a060020a033316600090815260016020526040902055610cd8838281518110610a3d57fe5b60016000868481518110610ce857fe5b90602001906020020151600160a060020a03168152602081019190915260400160002055838181518110610d1857fe5b90602001906020020151600160a060020a031633600160a060020a0316600080516020611a77833981519152858481518110610d5057fe5b9060200190602002015160405190815260200160405180910390a3610d7c81600163ffffffff6116bb16565b9050610c03565b5060019392505050565b60035460009060a860020a900460ff1615610da757600080fd5b600160a060020a03831660009081526001602052604090205482901015610dcd57600080fd5b600160a060020a0380841660009081526002602090815260408083203390941683529290522054821115610e0057600080fd5b600160a060020a038316600090815260016020526040902054610e29908363ffffffff6116a916565b600160a060020a0380851660009081526001602090815260408083209490945560028152838220339093168252919091522054610e6c908363ffffffff6116a916565b600160a060020a0380851660009081526002602090815260408083203390941683529290529081209190915554610ea9908363ffffffff6116a916565b600055600160a060020a0383167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a250600192915050565b60035460009033600160a060020a03908116911614610f1057600080fd5b60035460a060020a900460ff1615610f2757600080fd5b60035460a860020a900460ff1615610f3e57600080fd5b610f466116ca565b905090565b60035433600160a060020a03908116911614610f6657600080fd5b60035460a860020a900460ff1615610f7d57600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ec5780601f106106c1576101008083540402835291602001916106ec565b60035460009060a860020a900460ff161561106457600080fd5b600160a060020a03331660009081526008602052604090205460ff161561108a57600080fd5b6107188383611755565b60086020526000908152604090205460ff1681565b600354600090819060a860020a900460ff16156110c557600080fd5b50836110d181856106f4565b15610baa5780600160a060020a0316638f4ffcb1338630876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561118757808201518382015260200161116f565b50505050905090810190601f1680156111b45780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15156111d557600080fd5b6102c65a03f115156111e657600080fd5b50505060019150610baa565b60035460009060a860020a900460ff161561120c57600080fd5b6107188383611779565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461125c57600080fd5b600160a060020a03821660009081526008602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60035433600160a060020a039081169116146112e857600080fd5b600160a060020a03811615156112fd57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60035460009060a860020a900460ff16156113ee57600080fd5b61077084848461181d565b60035460009033600160a060020a0390811691161461141757600080fd5b60035460a060020a900460ff161561142e57600080fd5b600054611441908363ffffffff6116bb16565b6000908155600160a060020a03841681526001602052604090205461146c908363ffffffff6116bb16565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a0383166000600080516020611a778339815191528460405190815260200160405180910390a350600192915050565b600160a060020a03331660009081526001602052604081205482111561151957600080fd5b5033600160a060020a03811660009081526001602052604090205461153e90836116a9565b600160a060020a0382166000908152600160205260408120919091555461156b908363ffffffff6116a916565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561160c57600160a060020a033381166000908152600260209081526040808320938816835292905290812055611643565b61161c818463ffffffff6116a916565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b6000828211156116b557fe5b50900390565b60008282018381101561071857fe5b60035460009033600160a060020a039081169116146116e857600080fd5b60035460a060020a900460ff16156116ff57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b60035460009060a860020a900460ff161561176f57600080fd5b610718838361198d565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546117b1908363ffffffff6116bb16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b6000600160a060020a038316151561183457600080fd5b600160a060020a03841660009081526001602052604090205482111561185957600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561188c57600080fd5b600160a060020a0384166000908152600160205260409020546118b5908363ffffffff6116a916565b600160a060020a0380861660009081526001602052604080822093909355908516815220546118ea908363ffffffff6116bb16565b600160a060020a03808516600090815260016020908152604080832094909455878316825260028152838220339093168252919091522054611932908363ffffffff6116a916565b600160a060020a0380861660008181526002602090815260408083203386168452909152908190209390935590851691600080516020611a778339815191529085905190815260200160405180910390a35060019392505050565b6000600160a060020a03831615156119a457600080fd5b600160a060020a0333166000908152600160205260409020548211156119c957600080fd5b600160a060020a0333166000908152600160205260409020546119f2908363ffffffff6116a916565b600160a060020a033381166000908152600160205260408082209390935590851681522054611a27908363ffffffff6116bb16565b600160a060020a038085166000818152600160205260409081902093909355913390911690600080516020611a778339815191529085905190815260200160405180910390a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058200f4df3ca92eb495364aea9a8b9bb9387f508e65306a494cfb2c856529f6c6ad90029"
}