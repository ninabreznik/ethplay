{
  "address": "0xaa7f41ff741736bc46d6886389e85b2ead702caa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AQQToken",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-19\n*/\n\npragma solidity 0.5.1; \n\n\nlibrary SafeMath {\n\n    uint256 constant internal MAX_UINT = 2 ** 256 - 1; // max uint256\n\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        if (_a == 0) {\n            return 0;\n        }\n        require(MAX_UINT / _a >= _b);\n        return _a * _b;\n    }\n\n    /**\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(_b != 0);\n        return _a / _b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        require(MAX_UINT - _a >= _b);\n        return _a + _b;\n    }\n\n}\n\n\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n\ncontract StandardToken {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal balances;\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    mapping (address => bool) public frozenAccount;\n\n    uint256 internal totalSupply_;\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 vaule\n    );\n\n    event FrozenFunds(\n        address indexed _account, \n        bool _frozen\n    );\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns(uint256) {\n        return totalSupply_;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(\n        address _owner,\n        address _spender\n    )\n    public\n    view\n    returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(\n        address _spender,\n        uint256 _addedValue\n    )\n    public\n    returns(bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(\n        address _spender,\n        uint256 _subtractedValue\n    )\n    public\n    returns(bool) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\n\ncontract BurnableToken is StandardToken, Ownable {\n\n    event Burn(address indexed account, uint256 value);\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account. Uses the internal burn function.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0)); \n        totalSupply_ = totalSupply_.sub(value);\n        balances[account] = balances[account].sub(value);\n        emit Burn(account, value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public onlyOwner {\n        _burn(msg.sender, value);\n    }\n}\n\n\ncontract PausableToken is StandardToken, Pausable {\n    function approve(\n        address _spender,\n        uint256 _value\n    )\n    public\n    whenNotPaused\n    returns(bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(\n        address _spender,\n        uint _addedValue\n    )\n    public\n    whenNotPaused\n    returns(bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(\n        address _spender,\n        uint _subtractedValue\n    )\n    public\n    whenNotPaused\n    returns(bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n\n\n/**\n * @title AQQToken token\n * @dev Initialize the basic information of AQQToken.\n */\ncontract AQQToken is PausableToken, BurnableToken {\n    using SafeMath for uint256;\n\n    string public constant name = \"AQQ\"; // name of Token\n    string public constant symbol = \"AQQ\"; // symbol of Token\n    uint8 public constant decimals = 18; // decimals of Token\n\n    uint256 internal vestingToken; \n    uint256 public initialCirculatingToken; \n    address constant wallet = 0xC151c00E83988ce3774Cde684f0209AD46C12aFC; \n\n    uint256 constant _INIT_TOTALSUPPLY = 100000000; \n    uint256 constant _INIT_VESTING_TOKEN = 60000000; \n    uint256 constant _INIT_CIRCULATE_TOKEN = 10000000;\n\n  /**\n   * @dev constructor Initialize the basic information.\n   */\n    constructor() public {\n        totalSupply_ = _INIT_TOTALSUPPLY * 10 ** uint256(decimals); // amount of totalsupply\n        vestingToken = _INIT_VESTING_TOKEN * 10 ** uint256(decimals); // total amount of token circulation plan after deploy\n        initialCirculatingToken = _INIT_CIRCULATE_TOKEN * 10 ** uint256(decimals); // amount of circulating tokens\n        owner = wallet; // Specify owner as wallet address\n        balances[wallet] = totalSupply_;\n    }\n\n  /**\n   * @dev getVestingToken function that returns a value of the remaining outstanding tokens in the current circulation plan.\n   */\n    function getVestingToken() public view returns(uint256 amount){\n        if(now < 1546272000) { //2019.01.01 00:00:00\n            return vestingToken;\n        }else if(now < 1577808000) { //2020.01.01 00:00:00\n            return vestingToken.sub(20000000 * 10 ** uint256(decimals));\n        }else if(now < 1609430400) { //2021.01.01 00:00:00\n            return vestingToken.sub(40000000 * 10 ** uint256(decimals));\n        }else {\n            return 0;\n        }\n    }\n\n  /**\n   * @dev _validate internal function that validate the balance of _addr is more than _value.\n   */\n    function _validate(address _addr, uint256 _value) internal view {\n        uint256 vesting = getVestingToken();\n        require(balances[_addr] >= vesting.add(_value));\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(\n        address _to, \n        uint256 _value\n    ) \n    public \n    whenNotPaused \n    returns(bool) {\n        require(_to != address(0));\n        require(!frozenAccount[msg.sender]);\n        require(!frozenAccount[_to]);\n        require(_value <= balances[msg.sender]);\n        if(msg.sender == wallet) {\n            _validate(msg.sender, _value);\n        }\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    whenNotPaused\n    returns(bool) {\n        require(_to != address(0));\n        require(!frozenAccount[_from]);\n        require(!frozenAccount[_to]);\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        if(_from == wallet) {\n            _validate(_from, _value);\n        }\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n  /**\n   * @dev freezeAccount function that freeze the funds of target address.\n   * @param _account target address\n   * @param _freeze position of funds，true or false\n   */\n    function freezeAccount(address _account, bool _freeze) public onlyOwner returns(bool) {\n        frozenAccount[_account] = _freeze;\n        emit FrozenFunds(_account, _freeze);    \n        return true;    \n    }\n\n  /**\n   * @dev _batchTransfer internal function for airdropping candy to target address.\n   * @param _to target address\n   * @param _amount amount of token\n   */\n    function _batchTransfer(address[] memory _to, uint256[] memory _amount) internal whenNotPaused {\n        require(_to.length == _amount.length);\n        uint256 sum = 0; \n        for(uint256 i = 0;i < _to.length;i += 1){\n            require(_to[i] != address(0)); \n            require(!frozenAccount[_to[i]]); \n            sum = sum.add(_amount[i]);\n            require(sum <= balances[msg.sender]);  \n            balances[_to[i]] = balances[_to[i]].add(_amount[i]); \n            emit Transfer(msg.sender, _to[i], _amount[i]);\n        } \n        _validate(msg.sender, sum);\n        balances[msg.sender] = balances[msg.sender].sub(sum); \n    }\n\n  /**\n   * @dev airdrop function for airdropping candy to target address.\n   * @param _to target address\n   * @param _amount amount of token\n   */\n    function airdrop(address[] memory _to, uint256[] memory _amount) public onlyOwner returns(bool){\n        _batchTransfer(_to, _amount);\n        return true;\n    }\n\n  /**\n   * @dev overwrite the burn function and call the _validate internal function to validate the value.\n   * @param value amount of burn tokens\n   */\n    function burn(uint256 value) public onlyOwner {\n        _validate(msg.sender, value);\n        super.burn(value); \n    }\n}",
  "bytecode": "60806040526000600460146101000a81548160ff02191690831515021790555034801561002b57600080fd5b50601260ff16600a0a6305f5e10002600381905550601260ff16600a0a630393870002600581905550601260ff16600a0a629896800260068190555073c151c00e83988ce3774cde684f0209ad46c12afc600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060035460008073c151c00e83988ce3774cde684f0209ad46c12afc73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506125a7806101246000396000f3fe608060405260043610610122576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde0314610127578063095ea7b3146101b757806318160ddd1461022a57806323b872dd14610255578063313ce567146102e85780633f4ba83a1461031957806342966c681461033057806353c64b9e1461036b5780635c975abb1461039657806366188463146103c5578063672434821461043857806370a08231146105a95780638456cb591461060e5780638da5cb5b1461062557806395d89b411461067c578063a9059cbb1461070c578063b414d4b61461077f578063b43a16ea146107e8578063d73dd62314610813578063dd62ed3e14610886578063e724529c1461090b578063f2fde38b14610980575b600080fd5b34801561013357600080fd5b5061013c6109d1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017c578082015181840152602081019050610161565b50505050905090810190601f1680156101a95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c357600080fd5b50610210600480360360408110156101da57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a0a565b604051808215151515815260200191505060405180910390f35b34801561023657600080fd5b5061023f610a3a565b6040518082815260200191505060405180910390f35b34801561026157600080fd5b506102ce6004803603606081101561027857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a44565b604051808215151515815260200191505060405180910390f35b3480156102f457600080fd5b506102fd610f20565b604051808260ff1660ff16815260200191505060405180910390f35b34801561032557600080fd5b5061032e610f25565b005b34801561033c57600080fd5b506103696004803603602081101561035357600080fd5b8101908080359060200190929190505050610fe5565b005b34801561037757600080fd5b50610380611057565b6040518082815260200191505060405180910390f35b3480156103a257600080fd5b506103ab6110e1565b604051808215151515815260200191505060405180910390f35b3480156103d157600080fd5b5061041e600480360360408110156103e857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110f4565b604051808215151515815260200191505060405180910390f35b34801561044457600080fd5b5061058f6004803603604081101561045b57600080fd5b810190808035906020019064010000000081111561047857600080fd5b82018360208201111561048a57600080fd5b803590602001918460208302840111640100000000831117156104ac57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561050c57600080fd5b82018360208201111561051e57600080fd5b8035906020019184602083028401116401000000008311171561054057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611124565b604051808215151515815260200191505060405180910390f35b3480156105b557600080fd5b506105f8600480360360208110156105cc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611196565b6040518082815260200191505060405180910390f35b34801561061a57600080fd5b506106236111de565b005b34801561063157600080fd5b5061063a61129f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561068857600080fd5b506106916112c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106d15780820151818401526020810190506106b6565b50505050905090810190601f1680156106fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561071857600080fd5b506107656004803603604081101561072f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112fe565b604051808215151515815260200191505060405180910390f35b34801561078b57600080fd5b506107ce600480360360208110156107a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061163f565b604051808215151515815260200191505060405180910390f35b3480156107f457600080fd5b506107fd61165f565b6040518082815260200191505060405180910390f35b34801561081f57600080fd5b5061086c6004803603604081101561083657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611665565b604051808215151515815260200191505060405180910390f35b34801561089257600080fd5b506108f5600480360360408110156108a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611695565b6040518082815260200191505060405180910390f35b34801561091757600080fd5b506109666004803603604081101561092e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061171c565b604051808215151515815260200191505060405180910390f35b34801561098c57600080fd5b506109cf600480360360208110156109a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061182d565b005b6040805190810160405280600381526020017f415151000000000000000000000000000000000000000000000000000000000081525081565b6000600460149054906101000a900460ff16151515610a2857600080fd5b610a328383611895565b905092915050565b6000600354905090565b6000600460149054906101000a900460ff16151515610a6257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610a9e57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610af757600080fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610b5057600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610b9d57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610c2857600080fd5b73c151c00e83988ce3774cde684f0209ad46c12afc73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c7b57610c7a8483611987565b5b610ccc826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119f790919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d5f826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e3082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119f790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f8157600080fd5b600460149054906101000a900460ff161515610f9c57600080fd5b6000600460146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561104157600080fd5b61104b3382611987565b61105481611a51565b50565b6000635c2a3d0042101561106f5760055490506110de565b635e0b70804210156110a45761109d601260ff16600a0a6301312d00026005546119f790919063ffffffff16565b90506110de565b635fedf5804210156110d9576110d2601260ff16600a0a6302625a00026005546119f790919063ffffffff16565b90506110de565b600090505b90565b600460149054906101000a900460ff1681565b6000600460149054906101000a900460ff1615151561111257600080fd5b61111c8383611aba565b905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561118257600080fd5b61118c8383611d4c565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561123a57600080fd5b600460149054906101000a900460ff1615151561125657600080fd5b6001600460146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f415151000000000000000000000000000000000000000000000000000000000081525081565b6000600460149054906101000a900460ff1615151561131c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561135857600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156113b157600080fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561140a57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561145757600080fd5b73c151c00e83988ce3774cde684f0209ad46c12afc73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156114aa576114a93383611987565b5b6114fb826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119f790919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061158e826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60026020528060005260406000206000915054906101000a900460ff1681565b60065481565b6000600460149054906101000a900460ff1615151561168357600080fd5b61168d83836120e1565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561177a57600080fd5b81600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a583604051808215151515815260200191505060405180910390a26001905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188957600080fd5b611892816122dd565b50565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000611991611057565b90506119a68282611a1390919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156119f257600080fd5b505050565b6000828211151515611a0857600080fd5b818303905092915050565b600081837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0310151515611a4657600080fd5b818301905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611aad57600080fd5b611ab733826123d9565b50565b600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083101515611bcc576000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611c60565b611bdf83826119f790919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b600460149054906101000a900460ff16151515611d6857600080fd5b80518251141515611d7857600080fd5b600080905060008090505b835181101561203e57600073ffffffffffffffffffffffffffffffffffffffff168482815181101515611db257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614151515611ddf57600080fd5b600260008583815181101515611df157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611e4f57600080fd5b611e798382815181101515611e6057fe5b9060200190602002015183611a1390919063ffffffff16565b91506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611ec857600080fd5b611f478382815181101515611ed957fe5b906020019060200201516000808785815181101515611ef457fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1390919063ffffffff16565b6000808684815181101515611f5857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508381815181101515611fae57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef858481518110151561201457fe5b906020019060200201516040518082815260200191505060405180910390a3600181019050611d83565b506120493382611987565b61209a816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119f790919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600061217282600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611a1390919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561231957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561241557600080fd5b61242a816003546119f790919063ffffffff16565b600381905550612481816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546119f790919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5826040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505056fea165627a7a723058202032d1da6f48397db674d20aee16f71bf5705a970e452e00d83084725796e78b0029"
}