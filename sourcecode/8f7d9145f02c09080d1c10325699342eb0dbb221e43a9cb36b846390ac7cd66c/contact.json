{
  "address": "0xcd3d95619187a652f1818054c9a2a95c54cc6bb3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Pyramid",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-24\n*/\n\npragma solidity ^0.4.24;\n\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    //emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n  \n    /**\n    * @dev prevents contracts from interacting with others\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n    \n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n\n}\n\ncontract PyramidEvents{\n\n    event buyEvt(\n        address indexed addr,\n        uint refCode,\n        uint amount\n        );\n    \n    event rewardEvt(\n        address indexed addr,\n        uint refCode,\n        uint rewardAmount\n        );\n}\n\n/*\n\n8 888888888o  `8.`8888.      ,8' 8 888888888o.    8 8888          ,8.       ,8.           8 8888 8 888888888o.                       \n8 8888    `88. `8.`8888.    ,8'  8 8888    `88.   8 8888         ,888.     ,888.          8 8888 8 8888    `^888.                    \n8 8888     `88  `8.`8888.  ,8'   8 8888     `88   8 8888        .`8888.   .`8888.         8 8888 8 8888        `88.                  \n8 8888     ,88   `8.`8888.,8'    8 8888     ,88   8 8888       ,8.`8888. ,8.`8888.        8 8888 8 8888         `88                  \n8 8888.   ,88'    `8.`88888'     8 8888.   ,88'   8 8888      ,8'8.`8888,8^8.`8888.       8 8888 8 8888          88                  \n8 888888888P'      `8. 8888      8 888888888P'    8 8888     ,8' `8.`8888' `8.`8888.      8 8888 8 8888          88                  \n8 8888              `8 8888      8 8888`8b        8 8888    ,8'   `8.`88'   `8.`8888.     8 8888 8 8888         ,88                  \n8 8888               8 8888      8 8888 `8b.      8 8888   ,8'     `8.`'     `8.`8888.    8 8888 8 8888        ,88'                  \n8 8888               8 8888      8 8888   `8b.    8 8888  ,8'       `8        `8.`8888.   8 8888 8 8888    ,o88P'                    \n8 8888               8 8888      8 8888     `88.  8 8888 ,8'         `         `8.`8888.  8 8888 8 888888888P'         \n\nBy EtherG 2018.8.21\n*/\n\ncontract Pyramid is Ownable,PyramidEvents{\n    using SafeMath for uint;\n\n    address private wallet1;\n    address private wallet2;\n\n    uint public startAtBlockNumber;\n    uint public curBubbleNumber= 1000;\n    bool public gameOpened=false;\n    uint public totalPlayers=0;\n    \n    mapping(address=>uint) playerRefCode;    //address=> refCode;\n    mapping(uint=>address) playerRefxAddr;    //refCode=>address;\n    \n    mapping(uint=>uint) parentRefCode;    //player refCode=> parent refCode;\n\n    /* refCode=>bubbles numOfBubbles */\n    mapping(uint=>uint) numOfBubblesL1;\n    mapping(uint=>uint) numOfBubblesL2;\n    mapping(uint=>uint) numOfBubblesL3;\n    \n    \n    mapping(address=>uint) playerRewards;\n    mapping(uint=>uint) referees;\n    \n    uint gameRound=1;\n    mapping(uint=>address) roundxAddr;\n    mapping(uint=>uint) roundxRefCode;\n    \n\n    constructor(address _addr1,address _addr2)public {\n        wallet1=_addr1;\n        wallet2=_addr2;\n        \n        startAtBlockNumber = block.number+633;\n    }\n    \n    function buyandearn(uint refCode) isHuman payable public returns(uint){\n        require(block.number>=startAtBlockNumber,\"Not Start\");\n        require(playerRefxAddr[refCode]!= 0x0 || (refCode==0 && totalPlayers==0));\n        require(msg.value >= 0.1 ether,\"Minima amoun:0.1 ether\");\n        \n        bool _firstJoin=false;\n        uint selfRefCode;\n        \n        /* 首次加入 */\n        if(playerRefCode[msg.sender]==0){\n            selfRefCode=curBubbleNumber+1;\n            playerRefCode[msg.sender]=selfRefCode;\n            \n            parentRefCode[selfRefCode]=refCode;\n            \n            numOfBubblesL1[selfRefCode]=6;\n            numOfBubblesL2[selfRefCode]=6*6;\n            numOfBubblesL3[selfRefCode]=6*6*6;\n            _firstJoin=true;\n        }else{\n            //不能异动推荐人\n            selfRefCode=playerRefCode[msg.sender];\n            refCode=parentRefCode[selfRefCode];\n            \n            numOfBubblesL1[playerRefCode[msg.sender]]+=6;\n            numOfBubblesL2[playerRefCode[msg.sender]]+=36;\n            numOfBubblesL3[playerRefCode[msg.sender]]+=216;    \n        }\n        \n        /* 计算可以用推荐数*/\n        \n        uint up1RefCode=0;\n        uint up2RefCode=0;\n        uint up3RefCode=0;\n        \n        if(totalPlayers>0 && numOfBubblesL1[refCode]>0 ){\n            //if not first player\n            up1RefCode=refCode;\n            numOfBubblesL1[up1RefCode]-=1;\n            \n            if(_firstJoin) referees[up1RefCode]+=1;\n        }\n        \n        if(parentRefCode[up1RefCode]!=0 && numOfBubblesL2[refCode]>0){\n            //up 2 layer\n            up2RefCode=parentRefCode[up1RefCode];\n            numOfBubblesL2[up2RefCode]-=1;\n            \n            if(_firstJoin) referees[up2RefCode]+=1;\n        }\n        \n        if(parentRefCode[up2RefCode]!=0 && numOfBubblesL3[refCode]>0){\n            //up 2 layer\n            up3RefCode=parentRefCode[up2RefCode];\n            numOfBubblesL3[up3RefCode]-=1;\n            \n            if(_firstJoin) referees[up3RefCode]+=1;\n        }\n\n        playerRefxAddr[playerRefCode[msg.sender]]=msg.sender;\n        \n        roundxAddr[gameRound]=msg.sender;\n        roundxRefCode[gameRound]=selfRefCode;\n        \n        curBubbleNumber=selfRefCode;\n        gameRound+=1;\n        \n         if(_firstJoin) totalPlayers+=1;\n        \n        emit buyEvt(msg.sender,selfRefCode,msg.value);\n        \n        /* =========================================\n       distribute\n       =========================================*/\n        distribute(up1RefCode,up2RefCode,up3RefCode);\n        \n    }\n    \n/*\n\n    8 8888      88 8 8888   8888888 8888888888  8 8888          ,8.       ,8.                   .8.    8888888 8888888888 8 8888888888   \n8 8888      88 8 8888         8 8888        8 8888         ,888.     ,888.                 .888.         8 8888       8 8888         \n8 8888      88 8 8888         8 8888        8 8888        .`8888.   .`8888.               :88888.        8 8888       8 8888         \n8 8888      88 8 8888         8 8888        8 8888       ,8.`8888. ,8.`8888.             . `88888.       8 8888       8 8888         \n8 8888      88 8 8888         8 8888        8 8888      ,8'8.`8888,8^8.`8888.           .8. `88888.      8 8888       8 888888888888 \n8 8888      88 8 8888         8 8888        8 8888     ,8' `8.`8888' `8.`8888.         .8`8. `88888.     8 8888       8 8888         \n8 8888      88 8 8888         8 8888        8 8888    ,8'   `8.`88'   `8.`8888.       .8' `8. `88888.    8 8888       8 8888         \n` 8888     ,8P 8 8888         8 8888        8 8888   ,8'     `8.`'     `8.`8888.     .8'   `8. `88888.   8 8888       8 8888         \n  8888   ,d8P  8 8888         8 8888        8 8888  ,8'       `8        `8.`8888.   .888888888. `88888.  8 8888       8 8888         \n   `Y88888P'   8 888888888888 8 8888        8 8888 ,8'         `         `8.`8888. .8'       `8. `88888. 8 8888       8 888888888888\n\n*/\n    \n    function distribute(uint up1RefCode,uint up2RefCode,uint up3RefCode) internal{\n        \n        uint v1;\n        uint v2;\n        uint v3;\n        uint w1;\n        uint w2;\n        \n        v1 = msg.value.mul(40 ether).div(100 ether);\n        v2 = msg.value.mul(30 ether).div(100 ether);\n        v3 = msg.value.mul(20 ether).div(100 ether);\n        w1 = msg.value.mul(7 ether).div(100 ether);\n        w2 = msg.value.mul(3 ether).div(100 ether);\n        \n        if(up1RefCode!=0){\n            playerRefxAddr[up1RefCode].transfer(v1);\n            playerRewards[playerRefxAddr[up1RefCode]]=playerRewards[playerRefxAddr[up1RefCode]].add(v1);\n            \n            emit rewardEvt(playerRefxAddr[up1RefCode],up1RefCode,v1);\n        }\n        if(up2RefCode!=0){\n            playerRefxAddr[up2RefCode].transfer(v2);\n            playerRewards[playerRefxAddr[up2RefCode]]=playerRewards[playerRefxAddr[up2RefCode]].add(v2);\n            \n            emit rewardEvt(playerRefxAddr[up2RefCode],up2RefCode,v2);\n        }\n        if(up3RefCode!=0){\n            playerRefxAddr[up3RefCode].transfer(v3);\n            playerRewards[playerRefxAddr[up3RefCode]]=playerRewards[playerRefxAddr[up3RefCode]].add(v3);\n            \n            emit rewardEvt(playerRefxAddr[up3RefCode],up3RefCode,v3);\n        }\n\n        wallet1.transfer(w1);\n        wallet2.transfer(w2);\n    }\n    \n    function witrhdraw(uint _val) public onlyOwner{\n        owner.transfer(_val);\n    }\n    \n    function myData() public view returns(uint,uint,uint,uint){\n        /*return rewards,referees,refCode,totalPlayers  */\n        \n        uint refCode=playerRefCode[msg.sender];\n        return (playerRewards[msg.sender],referees[refCode],refCode,totalPlayers);\n    }\n\n    function availableRef() public view returns(uint,uint,uint){\n        return (numOfBubblesL1[playerRefCode[msg.sender]],numOfBubblesL2[playerRefCode[msg.sender]],numOfBubblesL3[playerRefCode[msg.sender]]);\n    }\n}\n\n\n\n/*\n=====================================================\nLibrary\n=====================================================\n*/\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60806040526103e86004556005805460ff1916905560006006556001600f5534801561002a57600080fd5b50604051604080610ced83398101604052805160209091015160008054600160a060020a0319908116331790915560018054600160a060020a03948516908316179055600280549390921692169190911790556102794301600355610c59806100946000396000f3006080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c79af3d81146100a85780632bb14104146100c257806356eeb3b0146100fd5780636f59a5cc146101245780638143eb2d146101395780638da5cb5b1461016257806395e8738514610193578063f2fde38b146101c6578063f60cdcf6146101e7578063f95a5504146101fc575b600080fd5b3480156100b457600080fd5b506100c0600435610207565b005b3480156100ce57600080fd5b506100d761025b565b604080519485526020850193909352838301919091526060830152519081900360800190f35b34801561010957600080fd5b5061011261028c565b60408051918252519081900360200190f35b34801561013057600080fd5b50610112610292565b34801561014557600080fd5b5061014e610298565b604080519115158252519081900360200190f35b34801561016e57600080fd5b506101776102a1565b60408051600160a060020a039092168252519081900360200190f35b34801561019f57600080fd5b506101a86102b0565b60408051938452602084019290925282820152519081900360600190f35b3480156101d257600080fd5b506100c0600160a060020a03600435166102e4565b3480156101f357600080fd5b5061011261033f565b610112600435610345565b600054600160a060020a0316331461021e57600080fd5b60008054604051600160a060020a039091169183156108fc02918491818181858888f19350505050158015610257573d6000803e3d6000fd5b5050565b33600090815260076020908152604080832054600d835281842054818552600e909352922054600654919390929190565b60035481565b60045481565b60055460ff1681565b600054600160a060020a031681565b336000908152600760209081526040808320548352600a825280832054600b835281842054600c9093529220549192909190565b600054600160a060020a031633146102fb57600080fd5b600160a060020a038116151561031057600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065481565b6000808080808033803b80156103bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736f7272792068756d616e73206f6e6c79000000000000000000000000000000604482015290519081900360640190fd5b60035443101561042d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742053746172740000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600089815260086020526040902054600160a060020a031615158061045b57508815801561045b5750600654155b151561046657600080fd5b67016345785d8a00003410156104dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d696e696d6120616d6f756e3a302e3120657468657200000000000000000000604482015290519081900360640190fd5b33600090815260076020526040812054909750151561054d57600454336000908152600760209081526040808320600194850190819055808452600983528184208e9055600a835281842060069055600b835281842060249055600c90925290912060d8905590975095506105a4565b33600090815260076020908152604080832080548085526009845282852054600a85528386208054600601905582548652600b85528386208054602401905591548552600c9093529220805460d801905590995095505b60009450600093506000925060006006541180156105ce57506000898152600a6020526040812054115b15610608576000898152600a6020526040902080546000190190558894508615610608576000858152600e60205260409020805460010190555b6000858152600960205260409020541580159061063157506000898152600b6020526040812054115b1561067957600085815260096020908152604080832054808452600b909252909120805460001901905593508615610679576000848152600e60205260409020805460010190555b600084815260096020526040902054158015906106a257506000898152600c6020526040812054115b156106ea57600084815260096020908152604080832054808452600c9092529091208054600019019055925086156106ea576000838152600e60205260409020805460010190555b33600081815260076020908152604080832054835260088252808320805473ffffffffffffffffffffffffffffffffffffffff199081168617909155600f80548552601084528285208054909216909517905583548352601190915290208790556004879055805460010190558615610767576006805460010190555b60408051878152346020820152815133927f859236586d0c2c4eaf0b380be5b3617470e7f78a19feed57246ba286816e7678928290030190a26107ab8585856107b7565b50505050505050919050565b6000808080806107ef68056bc75e2d631000006107e33468022b1c8c1227a0000063ffffffff610bdc16565b9063ffffffff610c0716565b945061081768056bc75e2d631000006107e3346801a055690d9db8000063ffffffff610bdc16565b935061083f68056bc75e2d631000006107e3346801158e460913d0000063ffffffff610bdc16565b925061086668056bc75e2d631000006107e334676124fee993bc000063ffffffff610bdc16565b915061088d68056bc75e2d631000006107e3346729a2241af62c000063ffffffff610bdc16565b9050871561097e57600088815260086020526040808220549051600160a060020a039091169187156108fc02918891818181858888f193505050501580156108d9573d6000803e3d6000fd5b50600088815260086020908152604080832054600160a060020a03168352600d90915290205461090f908663ffffffff610c1e16565b60008981526008602081815260408084208054600160a060020a039081168652600d845282862096909655938d9052918152915481518c815292830189905281519316927f7a4ac6c40fb113f675f113523c372883035fb29a10e54d17f8607ee15ccd45729281900390910190a25b8615610a6d57600087815260086020526040808220549051600160a060020a039091169186156108fc02918791818181858888f193505050501580156109c8573d6000803e3d6000fd5b50600087815260086020908152604080832054600160a060020a03168352600d9091529020546109fe908563ffffffff610c1e16565b60008881526008602081815260408084208054600160a060020a039081168652600d845282862096909655938c9052918152915481518b815292830188905281519316927f7a4ac6c40fb113f675f113523c372883035fb29a10e54d17f8607ee15ccd45729281900390910190a25b8515610b5c57600086815260086020526040808220549051600160a060020a039091169185156108fc02918691818181858888f19350505050158015610ab7573d6000803e3d6000fd5b50600086815260086020908152604080832054600160a060020a03168352600d909152902054610aed908463ffffffff610c1e16565b60008781526008602081815260408084208054600160a060020a039081168652600d845282862096909655938b9052918152915481518a815292830187905281519316927f7a4ac6c40fb113f675f113523c372883035fb29a10e54d17f8607ee15ccd45729281900390910190a25b600154604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015610b96573d6000803e3d6000fd5b50600254604051600160a060020a039091169082156108fc029083906000818181858888f19350505050158015610bd1573d6000803e3d6000fd5b505050505050505050565b6000828202831580610bf85750828482811515610bf557fe5b04145b1515610c0057fe5b9392505050565b6000808284811515610c1557fe5b04949350505050565b600082820183811015610c0057fe00a165627a7a723058209e14d8a614bc78a9c2366eb5ca98ced7af7710409ad2259fbfcf7392fcb950a60029000000000000000000000000d10da91df3f30cc1a39276584d5a1016de0cc98b00000000000000000000000096837c46ed5c9121771ca6a4c63347bf665fb891",
  "constructorArguments": "000000000000000000000000d10da91df3f30cc1a39276584d5a1016de0cc98b00000000000000000000000096837c46ed5c9121771ca6a4c63347bf665fb891"
}