{
  "address": "0x967081d634f01003b2c5b3d8ea5aa2c55000722e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZEROCoin",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-08\n*/\n\npragma solidity 0.4.19;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply()public view returns (uint total_Supply);\n  function balanceOf(address who)public view returns (uint256);\n  function allowance(address owner, address spender)public view returns (uint);\n  function transferFrom(address from, address to, uint value)public returns (bool ok);\n  function approve(address spender, uint value)public returns (bool ok);\n  function transfer(address to, uint value)public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\ncontract ZEROCoin is ERC20\n{ using SafeMath for uint256;\n    // Name of the token\n    string public constant name = \"ZEROCoin\";\n\n    // Symbol of token\n    string public constant symbol = \"ZERO\";\n    uint8 public constant decimals = 18;\n    uint public _totalsupply = 1295000000 * 10 ** 18; // 1.295 billion total supply // muliplies dues to decimal precision\n    address public owner;                    // Owner of this contract\n    uint256 public _price_tokn_PRE = 38000;  // 1 Ether = 38000 coins\n    uint256 public _price_tokn_ICO= 24000;   // 1 Ether = 24000 coins\n    uint256 no_of_tokens;\n    uint256 bonus_token;\n    uint256 total_token;\n    bool stopped = false;\n    uint256 public pre_startdate;\n    uint256 public ico1_startdate;\n    uint256 ico_first;\n    uint256 ico_second;\n    uint256 ico_third;\n    uint256 ico_fourth;\n    uint256 pre_enddate;\n  \n    uint256 public eth_received; // total ether received in the contract\n    uint256 maxCap_public = 777000000 * 10 **18;  //  777 million in Public Sale\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    \n     enum Stages {\n        NOTSTARTED,\n        PREICO,\n        ICO,\n        PAUSED,\n        ENDED\n    }\n    Stages public stage;\n    \n    modifier atStage(Stages _stage) {\n        if (stage != _stage)\n            // Contract not in expected state\n            revert();\n        _;\n    }\n    \n     modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert();\n        }\n        _;\n    }\n\n    function ZEROCoin() public\n    {\n        owner = msg.sender;\n        balances[owner] = 518000000 * 10 **18; // 518 million to owner\n        stage = Stages.NOTSTARTED;\n        Transfer(0, owner, balances[owner]);\n    }\n  \n    function () public payable \n    {\n        require(stage != Stages.ENDED);\n        require(!stopped && msg.sender != owner);\n            if( stage == Stages.PREICO && now <= pre_enddate )\n            { \n                require (eth_received <= 1500 ether);\n              eth_received = (eth_received).add(msg.value);\n                no_of_tokens =((msg.value).mul(_price_tokn_PRE));\n                bonus_token = ((no_of_tokens).mul(58)).div(100); // 58 percent bonus token\n                total_token = no_of_tokens + bonus_token;\n                transferTokens(msg.sender,total_token);\n               }\n               \n             else if(stage == Stages.ICO && now <= ico_fourth ){\n                    \n                if( now < ico_first )\n            {\n              no_of_tokens =(msg.value).mul(_price_tokn_ICO);\n                bonus_token = ((no_of_tokens).mul(15)).div(100); // 15% bonus\n                total_token = no_of_tokens + bonus_token;\n                transferTokens(msg.sender,total_token);\n                \n                \n            }   \n            \n              else if(now >= ico_first && now < ico_second)\n            {\n                \n                \n                  no_of_tokens =(msg.value).mul(_price_tokn_ICO);\n                bonus_token = ((no_of_tokens).mul(10)).div(100); // 10% bonus\n                total_token = no_of_tokens + bonus_token;\n                transferTokens(msg.sender,total_token);\n                \n                \n            }\n             else if(now >= ico_second && now < ico_third)\n            {\n                \n                   no_of_tokens =(msg.value).mul(_price_tokn_ICO);\n                bonus_token = ((no_of_tokens).mul(5)).div(100); // 5% bonus\n                total_token = no_of_tokens + bonus_token;\n                transferTokens(msg.sender,total_token);\n                \n                \n            }\n            \n             else if(now >= ico_third && now < ico_fourth)\n            {\n                \n                   \n             no_of_tokens =(msg.value).mul(_price_tokn_ICO);      // 0% Bonus\n                total_token = no_of_tokens;\n                transferTokens(msg.sender,total_token);\n                \n                \n            }\n             }\n        else\n        {\n            revert();\n        }\n    \n    }\n     function start_PREICO() public onlyOwner atStage(Stages.NOTSTARTED)\n      {\n          stage = Stages.PREICO;\n          stopped = false;\n           balances[address(this)] =  maxCap_public;\n          pre_startdate = now;\n          pre_enddate = now + 16 days;\n          Transfer(0, address(this), balances[address(this)]);\n          }\n      \n      function start_ICO() public onlyOwner atStage(Stages.PREICO)\n      {\n          require(now > pre_enddate || eth_received >= 1500 ether);\n          stage = Stages.ICO;\n          stopped = false;\n          ico1_startdate = now;\n           ico_first = now + 15 days;\n          ico_second = ico_first + 15 days;\n          ico_third = ico_second + 15 days;\n          ico_fourth = ico_third + 15 days;\n          Transfer(0, address(this), balances[address(this)]);\n      }\n    \n    // called by the owner, pause ICO\n    function PauseICO() external onlyOwner\n    {\n        stopped = true;\n       }\n\n    // called by the owner , resumes ICO\n    function ResumeICO() external onlyOwner\n    {\n        stopped = false;\n      }\n   \n     \n     \n     function end_ICO() external onlyOwner atStage(Stages.ICO)\n     {\n         require(now > ico_fourth);\n         stage = Stages.ENDED;\n         _totalsupply = (_totalsupply).sub(balances[address(this)]);\n         balances[address(this)] = 0;\n         Transfer(address(this), 0 , balances[address(this)]);\n         \n     }\n\n    // what is the total supply of the ech tokens\n     function totalSupply() public view returns (uint256 total_Supply) {\n         total_Supply = _totalsupply;\n     }\n    \n    // What is the balance of a particular account?\n     function balanceOf(address _owner)public view returns (uint256 balance) {\n         return balances[_owner];\n     }\n    \n    // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool success) {\n     require( _to != 0x0);\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n     balances[_from] = (balances[_from]).sub(_amount);\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n     balances[_to] = (balances[_to]).add(_amount);\n     Transfer(_from, _to, _amount);\n     return true;\n         }\n    \n   // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount)public returns (bool success) {\n         require( _spender != 0x0);\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n         require( _owner != 0x0 && _spender !=0x0);\n         return allowed[_owner][_spender];\n   }\n\n     // Transfer the balance from owner's account to another account\n     function transfer(address _to, uint256 _amount)public returns (bool success) {\n        require( _to != 0x0);\n        require(balances[msg.sender] >= _amount && _amount >= 0);\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        Transfer(msg.sender, _to, _amount);\n             return true;\n         }\n    \n          // Transfer the balance from owner's account to another account\n    function transferTokens(address _to, uint256 _amount) private returns(bool success) {\n        require( _to != 0x0);       \n        require(balances[address(this)] >= _amount && _amount > 0);\n        balances[address(this)] = (balances[address(this)]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        Transfer(address(this), _to, _amount);\n        return true;\n        }\n \n    \n    function drain() external onlyOwner {\n        owner.transfer(this.balance);\n    }\n    \n}",
  "bytecode": "60606040526b042f32eaab1ea6116f000000600055619470600255615dc06003556007805460ff191690556b0282b82666abfd3da9000000601055341561004557600080fd5b60018054600160a060020a03191633600160a060020a039081169190911780835581166000908152601160205260408082206b01ac7ac44472a8d3c600000090556013805460ff1916905592549091168082528282205490927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91905190815260200160405180910390a3610f42806100df6000396000f3006060604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302c3d7f6811461038f57806306fdde03146103a2578063095ea7b31461042c57806318160ddd1461046257806323b872dd14610487578063274db4d6146104af578063313ce567146104c2578063405df338146104eb57806364e8d682146104fe57806370a0823114610511578063807d2da3146105305780638666107c146105435780638da5cb5b1461055657806395d89b41146105855780639890220b14610598578063a393dc44146105ab578063a9059cbb146105be578063c040e6b8146105e0578063cd7a2c3b14610617578063cf5ae5161461062a578063d44aecb01461063d578063db8ee69214610650578063dd62ed3e14610663575b600460135460ff16600481111561014557fe5b141561015057600080fd5b60075460ff16158015610172575060015433600160a060020a03908116911614155b151561017d57600080fd5b600160135460ff16600481111561019057fe5b14801561019f5750600e544211155b1561022f57600f54685150ae84a8cdf000009011156101bd57600080fd5b600f546101d0903463ffffffff61068816565b600f556002546101e790349063ffffffff6106a216565b60048190556102109060649061020490603a63ffffffff6106a216565b9063ffffffff6106cd16565b60058190556004540160068190556102299033906106e4565b5061038d565b600260135460ff16600481111561024257fe5b1480156102515750600d544211155b1561038857600a544210156102b05760035461027490349063ffffffff6106a216565b60048190556102919060649061020490600f63ffffffff6106a216565b60058190556004540160068190556102aa9033906106e4565b50610383565b600a5442101580156102c35750600b5442105b156102f9576003546102dc90349063ffffffff6106a216565b60048190556102919060649061020490600a63ffffffff6106a216565b600b54421015801561030c5750600c5442105b156103425760035461032590349063ffffffff6106a216565b60048190556102919060649061020490600563ffffffff6106a216565b600c5442101580156103555750600d5442105b156103835760035461036e90349063ffffffff6106a216565b600481905560068190556102299033906106e4565b61038d565b600080fd5b005b341561039a57600080fd5b61038d6107dc565b34156103ad57600080fd5b6103b5610897565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103f15780820151838201526020016103d9565b50505050905090810190601f16801561041e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043757600080fd5b61044e600160a060020a03600435166024356108ce565b604051901515815260200160405180910390f35b341561046d57600080fd5b61047561094e565b60405190815260200160405180910390f35b341561049257600080fd5b61044e600160a060020a0360043581169060243516604435610954565b34156104ba57600080fd5b610475610ad4565b34156104cd57600080fd5b6104d5610ada565b60405160ff909116815260200160405180910390f35b34156104f657600080fd5b61038d610adf565b341561050957600080fd5b610475610b86565b341561051c57600080fd5b610475600160a060020a0360043516610b8c565b341561053b57600080fd5b61038d610ba7565b341561054e57600080fd5b610475610c84565b341561056157600080fd5b610569610c8a565b604051600160a060020a03909116815260200160405180910390f35b341561059057600080fd5b6103b5610c99565b34156105a357600080fd5b61038d610cd0565b34156105b657600080fd5b610475610d26565b34156105c957600080fd5b61044e600160a060020a0360043516602435610d2c565b34156105eb57600080fd5b6105f3610e25565b6040518082600481111561060357fe5b60ff16815260200191505060405180910390f35b341561062257600080fd5b61038d610e2e565b341561063557600080fd5b61038d610e55565b341561064857600080fd5b610475610e7f565b341561065b57600080fd5b610475610e85565b341561066e57600080fd5b610475600160a060020a0360043581169060243516610e8b565b60008282018381101561069757fe5b8091505b5092915050565b6000808315156106b5576000915061069b565b508282028284828115156106c557fe5b041461069757fe5b60008082848115156106db57fe5b04949350505050565b6000600160a060020a03831615156106fb57600080fd5b600160a060020a0330166000908152601160205260409020548290108015906107245750600082115b151561072f57600080fd5b600160a060020a033016600090815260116020526040902054610758908363ffffffff610ee416565b600160a060020a03308116600090815260116020526040808220939093559085168152205461078d908363ffffffff61068816565b600160a060020a038085166000818152601160205260409081902093909355913090911690600080516020610ef78339815191529085905190815260200160405180910390a350600192915050565b60015433600160a060020a039081169116146107f757600080fd5b60028060135460ff16600481111561080b57fe5b1461081557600080fd5b600d54421161082357600080fd5b6013805460ff1916600417905530600160a060020a0316600090815260116020526040812054905461085491610ee4565b6000908155600160a060020a03301680825260116020526040808320839055600080516020610ef78339815191529083905190815260200160405180910390a350565b60408051908101604052600881527f5a45524f436f696e000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a03831615156108e557600080fd5b600160a060020a03338116600081815260126020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005490565b6000600160a060020a038316151561096b57600080fd5b600160a060020a0384166000908152601160205260409020548290108015906109bb5750600160a060020a0380851660009081526012602090815260408083203390941683529290522054829010155b80156109c8575060008210155b15156109d357600080fd5b600160a060020a0384166000908152601160205260409020546109fc908363ffffffff610ee416565b600160a060020a0380861660009081526011602090815260408083209490945560128152838220339093168252919091522054610a3f908363ffffffff610ee416565b600160a060020a0380861660009081526012602090815260408083203385168452825280832094909455918616815260119091522054610a85908363ffffffff61068816565b600160a060020a0380851660008181526011602052604090819020939093559190861690600080516020610ef78339815191529085905190815260200160405180910390a35060019392505050565b60025481565b601281565b60015433600160a060020a03908116911614610afa57600080fd5b60008060135460ff166004811115610b0e57fe5b14610b1857600080fd5b6013805460ff1990811660011790915560078054909116905560105430600160a060020a03166000818152601160205260408082209384554260088190556215180001600e55925491929091600080516020610ef7833981519152915190815260200160405180910390a350565b60085481565b600160a060020a031660009081526011602052604090205490565b60015433600160a060020a03908116911614610bc257600080fd5b60018060135460ff166004811115610bd657fe5b14610be057600080fd5b600e54421180610bfb5750685150ae84a8cdf00000600f5410155b1515610c0657600080fd5b6013805460ff199081166002179091556007805490911690554260098190556213c6808101600a5562278d008101600b55623b53808101600c55624f1a0001600d5530600160a060020a031660008181526011602052604080822054600080516020610ef7833981519152915190815260200160405180910390a350565b600f5481565b600154600160a060020a031681565b60408051908101604052600481527f5a45524f00000000000000000000000000000000000000000000000000000000602082015281565b60015433600160a060020a03908116911614610ceb57600080fd5b600154600160a060020a039081169030163180156108fc0290604051600060405180830381858888f193505050501515610d2457600080fd5b565b60005481565b6000600160a060020a0383161515610d4357600080fd5b600160a060020a033316600090815260116020526040902054829010801590610d6d575060008210155b1515610d7857600080fd5b600160a060020a033316600090815260116020526040902054610da1908363ffffffff610ee416565b600160a060020a033381166000908152601160205260408082209390935590851681522054610dd6908363ffffffff61068816565b600160a060020a038085166000818152601160205260409081902093909355913390911690600080516020610ef78339815191529085905190815260200160405180910390a350600192915050565b60135460ff1681565b60015433600160a060020a03908116911614610e4957600080fd5b6007805460ff19169055565b60015433600160a060020a03908116911614610e7057600080fd5b6007805460ff19166001179055565b60095481565b60035481565b6000600160a060020a03831615801590610ead5750600160a060020a03821615155b1515610eb857600080fd5b50600160a060020a03918216600090815260126020908152604080832093909416825291909152205490565b600082821115610ef057fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820afdc6565a016a3f14f5a5d3b213e10d99ef2376139fdec557805e742dfb5de3e0029"
}