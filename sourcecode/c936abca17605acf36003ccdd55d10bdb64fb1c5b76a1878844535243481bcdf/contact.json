{
  "address": "0x5536b6aadd29eaf0db112bb28046a5fad3761bd4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PixelCons",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-02\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title ERC721 Non-Fungible Token Standard Basic Interface\n * @dev Based on openzepplin open source ERC721 examples.\n * See (https://github.com/OpenZeppelin/openzeppelin-solidity)\n */\ncontract ERC721 {\n\n\t/**\n\t * @dev 0x01ffc9a7 === \n\t *   bytes4(keccak256('supportsInterface(bytes4)'))\n\t */\n\tbytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n\n\t/**\n\t * @dev 0x80ac58cd ===\n\t *   bytes4(keccak256('balanceOf(address)')) ^\n\t *   bytes4(keccak256('ownerOf(uint256)')) ^\n\t *   bytes4(keccak256('approve(address,uint256)')) ^\n\t *   bytes4(keccak256('getApproved(uint256)')) ^\n\t *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n\t *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n\t *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\t *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n\t *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n\t */\n\tbytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n\n\t/**\n\t * @dev 0x780e9d63 ===\n\t *   bytes4(keccak256('totalSupply()')) ^\n\t *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n\t *   bytes4(keccak256('tokenByIndex(uint256)'))\n\t */\n\tbytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n\n\t/**\n\t * @dev 0x5b5e139f ===\n\t *   bytes4(keccak256('name()')) ^\n\t *   bytes4(keccak256('symbol()')) ^\n\t *   bytes4(keccak256('tokenURI(uint256)'))\n\t */\n\tbytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n\n\t/** @dev A mapping of interface id to whether or not it is supported */\n\tmapping(bytes4 => bool) internal supportedInterfaces;\n\n\t/** @dev Token events */\n\tevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\tevent Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\t/** @dev Registers ERC-165, ERC-721, ERC-721 Enumerable and ERC-721 Metadata as supported interfaces */\n\tconstructor() public\n\t{\n\t\tregisterInterface(InterfaceId_ERC165);\n\t\tregisterInterface(InterfaceId_ERC721);\n\t\tregisterInterface(InterfaceId_ERC721Enumerable);\n\t\tregisterInterface(InterfaceId_ERC721Metadata);\n\t}\n\n\t/** @dev Internal function for registering an interface */\n\tfunction registerInterface(bytes4 _interfaceId) internal\n\t{\n\t\trequire(_interfaceId != 0xffffffff);\n\t\tsupportedInterfaces[_interfaceId] = true;\n\t}\n\n\t/** @dev ERC-165 interface implementation */\n\tfunction supportsInterface(bytes4 _interfaceId) external view returns(bool)\n\t{\n\t\treturn supportedInterfaces[_interfaceId];\n\t}\n\n\t/** @dev ERC-721 interface */\n\tfunction balanceOf(address _owner) public view returns(uint256 _balance);\n\tfunction ownerOf(uint256 _tokenId) public view returns(address _owner);\n\tfunction approve(address _to, uint256 _tokenId) public;\n\tfunction getApproved(uint256 _tokenId) public view returns(address _operator);\n\tfunction setApprovalForAll(address _operator, bool _approved) public;\n\tfunction isApprovedForAll(address _owner, address _operator) public view returns(bool);\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public;\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\n\n\t/** @dev ERC-721 Enumerable interface */\n\tfunction totalSupply() public view returns(uint256 _total);\n\tfunction tokenByIndex(uint256 _index) public view returns(uint256 _tokenId);\n\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns(uint256 _tokenId);\n\n\t/** @dev ERC-721 Metadata interface */\n\tfunction name() public view returns(string _name);\n\tfunction symbol() public view returns(string _symbol);\n\tfunction tokenURI(uint256 _tokenId) public view returns(string);\n}\n\n\n/**\n * @title PixelCons Core\n * @notice The purpose of this contract is to provide a shared ecosystem of minimal pixel art tokens for everyone to use. All users are treated \n * equally with the exception of an admin user who only controls the ERC721 metadata function which points to the app website. No fees are \n * required to interact with this contract beyond base gas fees. Here are a few notes on the basic workings of the contract:\n *    PixelCons [The core ERC721 token of this contract]\n *        -Each PixelCon is unique with an ID that encodes all its pixel data\n *        -PixelCons can be identified by both TokenIDs and TokenIndexes (index requires fewer bits to store)\n *        -A PixelCon can never be destroyed\n *        -Total number of PixelCons is limited to 18,446,744,073,709,551,616 (2^64)\n *        -A single account can only hold 4,294,967,296 PixelCons (2^32)\n *    Collections [Grouping mechanism for associating PixelCons together]\n *        -Collections are identified by an index (zero is invalid)\n *        -Collections can only be created by a user who both created and currently owns all its PixelCons\n *        -Total number of collections is limited to 18,446,744,073,709,551,616 (2^64)\n * For more information about PixelCons, please visit (https://pixelcons.io)\n * @dev This contract follows the ERC721 token standard with additional functions for creating, grouping, etc.\n * See (https://github.com/OpenZeppelin/openzeppelin-solidity)\n * @author PixelCons\n */\ncontract PixelCons is ERC721 {\n\n\tusing AddressUtils for address;\n\n\t/** @dev Equal to 'bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))' */\n\tbytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t///////////////////////////////////////////////////////////// Structs ///////////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/** @dev The main PixelCon struct */\n\tstruct PixelCon {\n\t\tuint256 tokenId;\n\t\t//// ^256bits ////\n\t\taddress creator;\n\t\tuint64 collectionIndex;\n\t\tuint32 dateCreated;\n\t}\n\n\t/** @dev A struct linking a token owner with its token index */\n\tstruct TokenLookup {\n\t\taddress owner;\n\t\tuint64 tokenIndex;\n\t\tuint32 ownedIndex;\n\t}\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t///////////////////////////////////////////////////////////// Storage ///////////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**  @dev The address thats allowed to withdraw volunteered funds sent to this contract */\n\taddress internal admin;\n\n\t/** @dev The URI template for retrieving token metadata */\n\tstring internal tokenURITemplate;\n\n\t////////////////// PixelCon Tokens //////////////////\n\n\t/** @dev Mapping from token ID to owner/index */\n\tmapping(uint256 => TokenLookup) internal tokenLookup;\n\n\t/**  @dev Mapping from owner to token indexes */\n\tmapping(address => uint64[]) internal ownedTokens;\n\n\t/**  @dev Mapping from creator to token indexes */\n\tmapping(address => uint64[]) internal createdTokens;\n\n\t/** @dev Mapping from token ID to approved address */\n\tmapping(uint256 => address) internal tokenApprovals;\n\n\t/** @dev Mapping from owner to operator approvals */\n\tmapping(address => mapping(address => bool)) internal operatorApprovals;\n\n\t/** @dev An array containing all PixelCons in existence */\n\tPixelCon[] internal pixelcons;\n\n\t/** @dev An array that mirrors 'pixelcons' in terms of indexing, but stores only name data */\n\tbytes8[] internal pixelconNames;\n\n\t////////////////// Collections //////////////////\n\n\t/** @dev Mapping from collection index to token indexes */\n\tmapping(uint64 => uint64[]) internal collectionTokens;\n\n\t/** @dev An array that mirrors 'collectionTokens' in terms of indexing, but stores only name data */\n\tbytes8[] internal collectionNames;\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t///////////////////////////////////////////////////////////// Events ////////////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/** @dev PixelCon token events */\n\tevent Create(uint256 indexed _tokenId, address indexed _creator, uint64 _tokenIndex, address _to);\n\tevent Rename(uint256 indexed _tokenId, bytes8 _newName);\n\n\t/**  @dev PixelCon collection events */\n\tevent CreateCollection(address indexed _creator, uint64 indexed _collectionIndex);\n\tevent RenameCollection(uint64 indexed _collectionIndex, bytes8 _newName);\n\tevent ClearCollection(uint64 indexed _collectionIndex);\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////// Modifiers ///////////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**  @dev Small validators for quick validation of function parameters */\n\tmodifier validIndex(uint64 _index) {\n\t\trequire(_index != uint64(0), \"Invalid index\");\n\t\t_;\n\t}\n\tmodifier validId(uint256 _id) {\n\t\trequire(_id != uint256(0), \"Invalid ID\");\n\t\t_;\n\t}\n\tmodifier validAddress(address _address) {\n\t\trequire(_address != address(0), \"Invalid address\");\n\t\t_;\n\t}\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////// PixelCons Core ///////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * @notice Contract constructor\n\t */\n\tconstructor() public\n\t{\n\t\t//admin defaults to the contract creator\n\t\tadmin = msg.sender;\n\n\t\t//fill zero index pixelcon collection\n\t\tcollectionNames.length++;\n\t}\n\n\t/**\n\t * @notice Get the current admin\n\t * @return The current admin\n\t */\n\tfunction getAdmin() public view returns(address)\n\t{\n\t\treturn admin;\n\t}\n\n\t/**\n\t * @notice Withdraw all volunteered funds to `(_to)`\n\t * @param _to Address to withdraw the funds to\n\t */\n\tfunction adminWithdraw(address _to) public\n\t{\n\t\trequire(msg.sender == admin, \"Only the admin can call this function\");\n\t\t_to.transfer(address(this).balance);\n\t}\n\n\t/**\n\t * @notice Change the admin to `(_to)`\n\t * @param _newAdmin New admin address\n\t */\n\tfunction adminChange(address _newAdmin) public\n\t{\n\t\trequire(msg.sender == admin, \"Only the admin can call this function\");\n\t\tadmin = _newAdmin;\n\t}\n\n\t/**\n\t * @notice Change the token URI template\n\t * @param _newTokenURITemplate New token URI template\n\t */\n\tfunction adminSetTokenURITemplate(string _newTokenURITemplate) public\n\t{\n\t\trequire(msg.sender == admin, \"Only the admin can call this function\");\n\t\ttokenURITemplate = _newTokenURITemplate;\n\t}\n\n\t////////////////// PixelCon Tokens //////////////////\n\n\t/**\n\t * @notice Create PixelCon `(_tokenId)`\n\t * @dev Throws if the token ID already exists\n\t * @param _to Address that will own the PixelCon\n\t * @param _tokenId ID of the PixelCon to be creates\n\t * @param _name PixelCon name (not required)\n\t * @return The index of the new PixelCon\n\t */\n\tfunction create(address _to, uint256 _tokenId, bytes8 _name) public payable validAddress(_to) validId(_tokenId) returns(uint64)\n\t{\n\t\tTokenLookup storage lookupData = tokenLookup[_tokenId];\n\t\trequire(pixelcons.length < uint256(2 ** 64) - 1, \"Max number of PixelCons has been reached\");\n\t\trequire(lookupData.owner == address(0), \"PixelCon already exists\");\n\n\t\t//get created timestamp (zero as date indicates null)\n\t\tuint32 dateCreated = 0;\n\t\tif (now < uint256(2 ** 32)) dateCreated = uint32(now);\n\n\t\t//create PixelCon token and set owner\n\t\tuint64 index = uint64(pixelcons.length);\n\t\tlookupData.tokenIndex = index;\n\t\tpixelcons.length++;\n\t\tpixelconNames.length++;\n\t\tPixelCon storage pixelcon = pixelcons[index];\n\t\tpixelcon.tokenId = _tokenId;\n\t\tpixelcon.creator = msg.sender;\n\t\tpixelcon.dateCreated = dateCreated;\n\t\tpixelconNames[index] = _name;\n\t\tuint64[] storage createdList = createdTokens[msg.sender];\n\t\tuint createdListIndex = createdList.length;\n\t\tcreatedList.length++;\n\t\tcreatedList[createdListIndex] = index;\n\t\taddTokenTo(_to, _tokenId);\n\n\t\temit Create(_tokenId, msg.sender, index, _to);\n\t\temit Transfer(address(0), _to, _tokenId);\n\t\treturn index;\n\t}\n\n\t/**\n\t * @notice Rename PixelCon `(_tokenId)`\n\t * @dev Throws if the caller is not the owner and creator of the token\n\t * @param _tokenId ID of the PixelCon to rename\n\t * @param _name New name\n\t * @return The index of the PixelCon\n\t */\n\tfunction rename(uint256 _tokenId, bytes8 _name) public validId(_tokenId) returns(uint64)\n\t{\n\t\trequire(isCreatorAndOwner(msg.sender, _tokenId), \"Sender is not the creator and owner\");\n\n\t\t//update name\n\t\tTokenLookup storage lookupData = tokenLookup[_tokenId];\n\t\tpixelconNames[lookupData.tokenIndex] = _name;\n\n\t\temit Rename(_tokenId, _name);\n\t\treturn lookupData.tokenIndex;\n\t}\n\n\t/**\n\t * @notice Check if PixelCon `(_tokenId)` exists\n\t * @param _tokenId ID of the PixelCon to query the existence of\n\t * @return True if the PixelCon exists\n\t */\n\tfunction exists(uint256 _tokenId) public view validId(_tokenId) returns(bool)\n\t{\n\t\taddress owner = tokenLookup[_tokenId].owner;\n\t\treturn owner != address(0);\n\t}\n\n\t/**\n\t * @notice Get the creator of PixelCon `(_tokenId)`\n\t * @dev Throws if PixelCon does not exist\n\t * @param _tokenId ID of the PixelCon to query the creator of\n\t * @return Creator address for PixelCon\n\t */\n\tfunction creatorOf(uint256 _tokenId) public view validId(_tokenId) returns(address)\n\t{\n\t\tTokenLookup storage lookupData = tokenLookup[_tokenId];\n\t\trequire(lookupData.owner != address(0), \"PixelCon does not exist\");\n\n\t\treturn pixelcons[lookupData.tokenIndex].creator;\n\t}\n\n\t/**\n\t * @notice Get the total number of PixelCons created by `(_creator)`\n\t * @param _creator Address to query the total of\n\t * @return Total number of PixelCons created by given address\n\t */\n\tfunction creatorTotal(address _creator) public view validAddress(_creator) returns(uint256)\n\t{\n\t\treturn createdTokens[_creator].length;\n\t}\n\n\t/**\n\t * @notice Enumerate PixelCon created by `(_creator)`\n\t * @dev Throws if index is out of bounds\n\t * @param _creator Creator address\n\t * @param _index Counter less than `creatorTotal(_creator)`\n\t * @return PixelCon ID for the `(_index)`th PixelCon created by `(_creator)`\n\t */\n\tfunction tokenOfCreatorByIndex(address _creator, uint256 _index) public view validAddress(_creator) returns(uint256)\n\t{\n\t\trequire(_index < createdTokens[_creator].length, \"Index is out of bounds\");\n\t\tPixelCon storage pixelcon = pixelcons[createdTokens[_creator][_index]];\n\t\treturn pixelcon.tokenId;\n\t}\n\n\t/**\n\t * @notice Get all details of PixelCon `(_tokenId)`\n\t * @dev Throws if PixelCon does not exist\n\t * @param _tokenId ID of the PixelCon to get details for\n\t * @return PixelCon details\n\t */\n\tfunction getTokenData(uint256 _tokenId) public view validId(_tokenId)\n\treturns(uint256 _tknId, uint64 _tknIdx, uint64 _collectionIdx, address _owner, address _creator, bytes8 _name, uint32 _dateCreated)\n\t{\n\t\tTokenLookup storage lookupData = tokenLookup[_tokenId];\n\t\trequire(lookupData.owner != address(0), \"PixelCon does not exist\");\n\n\t\tPixelCon storage pixelcon = pixelcons[lookupData.tokenIndex];\n\t\treturn (pixelcon.tokenId, lookupData.tokenIndex, pixelcon.collectionIndex, lookupData.owner,\n\t\t\tpixelcon.creator, pixelconNames[lookupData.tokenIndex], pixelcon.dateCreated);\n\t}\n\n\t/**\n\t * @notice Get all details of PixelCon #`(_tokenIndex)`\n\t * @dev Throws if PixelCon does not exist\n\t * @param _tokenIndex Index of the PixelCon to get details for\n\t * @return PixelCon details\n\t */\n\tfunction getTokenDataByIndex(uint64 _tokenIndex) public view\n\treturns(uint256 _tknId, uint64 _tknIdx, uint64 _collectionIdx, address _owner, address _creator, bytes8 _name, uint32 _dateCreated)\n\t{\n\t\trequire(_tokenIndex < totalSupply(), \"PixelCon index is out of bounds\");\n\n\t\tPixelCon storage pixelcon = pixelcons[_tokenIndex];\n\t\tTokenLookup storage lookupData = tokenLookup[pixelcon.tokenId];\n\t\treturn (pixelcon.tokenId, lookupData.tokenIndex, pixelcon.collectionIndex, lookupData.owner,\n\t\t\tpixelcon.creator, pixelconNames[lookupData.tokenIndex], pixelcon.dateCreated);\n\t}\n\n\t/**\n\t * @notice Get the index of PixelCon `(_tokenId)`\n\t * @dev Throws if PixelCon does not exist\n\t * @param _tokenId ID of the PixelCon to query the index of\n\t * @return Index of the given PixelCon ID\n\t */\n\tfunction getTokenIndex(uint256 _tokenId) validId(_tokenId) public view returns(uint64)\n\t{\n\t\tTokenLookup storage lookupData = tokenLookup[_tokenId];\n\t\trequire(lookupData.owner != address(0), \"PixelCon does not exist\");\n\n\t\treturn lookupData.tokenIndex;\n\t}\n\n\t////////////////// Collections //////////////////\n\n\t/**\n\t * @notice Create PixelCon collection\n\t * @dev Throws if the message sender is not the owner and creator of the given tokens\n\t * @param _tokenIndexes Token indexes to group together into a collection\n\t * @param _name Name of the collection\n\t * @return Index of the new collection\n\t */\n\tfunction createCollection(uint64[] _tokenIndexes, bytes8 _name) public returns(uint64)\n\t{\n\t\trequire(collectionNames.length < uint256(2 ** 64) - 1, \"Max number of collections has been reached\");\n\t\trequire(_tokenIndexes.length > 1, \"Collection must contain more than one PixelCon\");\n\n\t\t//loop through given indexes to add to collection and check additional requirements\n\t\tuint64 collectionIndex = uint64(collectionNames.length);\n\t\tuint64[] storage collection = collectionTokens[collectionIndex];\n\t\tcollection.length = _tokenIndexes.length;\n\t\tfor (uint i = 0; i < _tokenIndexes.length; i++) {\n\t\t\tuint64 tokenIndex = _tokenIndexes[i];\n\t\t\trequire(tokenIndex < totalSupply(), \"PixelCon index is out of bounds\");\n\n\t\t\tPixelCon storage pixelcon = pixelcons[tokenIndex];\n\t\t\trequire(isCreatorAndOwner(msg.sender, pixelcon.tokenId), \"Sender is not the creator and owner of the PixelCons\");\n\t\t\trequire(pixelcon.collectionIndex == uint64(0), \"PixelCon is already in a collection\");\n\n\t\t\tpixelcon.collectionIndex = collectionIndex;\n\t\t\tcollection[i] = tokenIndex;\n\t\t}\n\t\tcollectionNames.length++;\n\t\tcollectionNames[collectionIndex] = _name;\n\n\t\temit CreateCollection(msg.sender, collectionIndex);\n\t\treturn collectionIndex;\n\t}\n\n\t/**\n\t * @notice Rename collection #`(_collectionIndex)`\n\t * @dev Throws if the message sender is not the owner and creator of all collection tokens\n\t * @param _collectionIndex Index of the collection to rename\n\t * @param _name New name\n\t * @return Index of the collection\n\t */\n\tfunction renameCollection(uint64 _collectionIndex, bytes8 _name) validIndex(_collectionIndex) public returns(uint64)\n\t{\n\t\trequire(_collectionIndex < totalCollections(), \"Collection does not exist\");\n\n\t\t//loop through the collections token indexes and check additional requirements\n\t\tuint64[] storage collection = collectionTokens[_collectionIndex];\n\t\trequire(collection.length > 0, \"Collection has been cleared\");\n\t\tfor (uint i = 0; i < collection.length; i++) {\n\t\t\tPixelCon storage pixelcon = pixelcons[collection[i]];\n\t\t\trequire(isCreatorAndOwner(msg.sender, pixelcon.tokenId), \"Sender is not the creator and owner of the PixelCons\");\n\t\t}\n\n\t\t//update\n\t\tcollectionNames[_collectionIndex] = _name;\n\n\t\temit RenameCollection(_collectionIndex, _name);\n\t\treturn _collectionIndex;\n\t}\n\n\t/**\n\t * @notice Clear collection #`(_collectionIndex)`\n\t * @dev Throws if the message sender is not the owner and creator of all collection tokens\n\t * @param _collectionIndex Index of the collection to clear out\n\t * @return Index of the collection\n\t */\n\tfunction clearCollection(uint64 _collectionIndex) validIndex(_collectionIndex) public returns(uint64)\n\t{\n\t\trequire(_collectionIndex < totalCollections(), \"Collection does not exist\");\n\n\t\t//loop through the collections token indexes and check additional requirements while clearing pixelcon collection index\n\t\tuint64[] storage collection = collectionTokens[_collectionIndex];\n\t\trequire(collection.length > 0, \"Collection is already cleared\");\n\t\tfor (uint i = 0; i < collection.length; i++) {\n\t\t\tPixelCon storage pixelcon = pixelcons[collection[i]];\n\t\t\trequire(isCreatorAndOwner(msg.sender, pixelcon.tokenId), \"Sender is not the creator and owner of the PixelCons\");\n\n\t\t\tpixelcon.collectionIndex = 0;\n\t\t}\n\n\t\t//clear out collection data\n\t\tdelete collectionNames[_collectionIndex];\n\t\tdelete collectionTokens[_collectionIndex];\n\n\t\temit ClearCollection(_collectionIndex);\n\t\treturn _collectionIndex;\n\t}\n\n\t/**\n\t * @notice Check if collection #`(_collectionIndex)` exists\n\t * @param _collectionIndex Index of the collection to query the existence of\n\t * @return True if collection exists\n\t */\n\tfunction collectionExists(uint64 _collectionIndex) public view validIndex(_collectionIndex) returns(bool)\n\t{\n\t\treturn _collectionIndex < totalCollections();\n\t}\n\n\t/**\n\t * @notice Check if collection #`(_collectionIndex)` has been cleared\n\t * @dev Throws if the collection index is out of bounds\n\t * @param _collectionIndex Index of the collection to query the state of\n\t * @return True if collection has been cleared\n\t */\n\tfunction collectionCleared(uint64 _collectionIndex) public view validIndex(_collectionIndex) returns(bool)\n\t{\n\t\trequire(_collectionIndex < totalCollections(), \"Collection does not exist\");\n\t\treturn collectionTokens[_collectionIndex].length == uint256(0);\n\t}\n\n\t/**\n\t * @notice Get the total number of collections\n\t * @return Total number of collections\n\t */\n\tfunction totalCollections() public view returns(uint256)\n\t{\n\t\treturn collectionNames.length;\n\t}\n\n\t/**\n\t * @notice Get the collection index of PixelCon `(_tokenId)`\n\t * @dev Throws if the PixelCon does not exist\n\t * @param _tokenId ID of the PixelCon to query the collection of\n\t * @return Collection index of given PixelCon\n\t */\n\tfunction collectionOf(uint256 _tokenId) public view validId(_tokenId) returns(uint256)\n\t{\n\t\tTokenLookup storage lookupData = tokenLookup[_tokenId];\n\t\trequire(lookupData.owner != address(0), \"PixelCon does not exist\");\n\n\t\treturn pixelcons[tokenLookup[_tokenId].tokenIndex].collectionIndex;\n\t}\n\n\t/**\n\t * @notice Get the total number of PixelCons in collection #`(_collectionIndex)`\n\t * @dev Throws if the collection does not exist\n\t * @param _collectionIndex Collection index to query the total of\n\t * @return Total number of PixelCons in the collection\n\t */\n\tfunction collectionTotal(uint64 _collectionIndex) public view validIndex(_collectionIndex) returns(uint256)\n\t{\n\t\trequire(_collectionIndex < totalCollections(), \"Collection does not exist\");\n\t\treturn collectionTokens[_collectionIndex].length;\n\t}\n\n\t/**\n\t * @notice Get the name of collection #`(_collectionIndex)`\n\t * @dev Throws if the collection does not exist\n\t * @param _collectionIndex Collection index to query the name of\n\t * @return Collection name\n\t */\n\tfunction getCollectionName(uint64 _collectionIndex) public view validIndex(_collectionIndex) returns(bytes8)\n\t{\n\t\trequire(_collectionIndex < totalCollections(), \"Collection does not exist\");\n\t\treturn collectionNames[_collectionIndex];\n\t}\n\n\t/**\n\t * @notice Enumerate PixelCon in collection #`(_collectionIndex)`\n\t * @dev Throws if the collection does not exist or index is out of bounds\n\t * @param _collectionIndex Collection index\n\t * @param _index Counter less than `collectionTotal(_collection)`\n\t * @return PixelCon ID for the `(_index)`th PixelCon in collection #`(_collectionIndex)`\n\t */\n\tfunction tokenOfCollectionByIndex(uint64 _collectionIndex, uint256 _index) public view validIndex(_collectionIndex) returns(uint256)\n\t{\n\t\trequire(_collectionIndex < totalCollections(), \"Collection does not exist\");\n\t\trequire(_index < collectionTokens[_collectionIndex].length, \"Index is out of bounds\");\n\t\tPixelCon storage pixelcon = pixelcons[collectionTokens[_collectionIndex][_index]];\n\t\treturn pixelcon.tokenId;\n\t}\n\n\t////////////////// Web3 Only //////////////////\n\n\t/**\n\t * @notice Get the indexes of all PixelCons owned by `(_owner)`\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\n\t * @param _owner Owner address\n\t * @return PixelCon indexes\n\t */\n\tfunction getForOwner(address _owner) public view validAddress(_owner) returns(uint64[])\n\t{\n\t\treturn ownedTokens[_owner];\n\t}\n\n\t/**\n\t * @notice Get the indexes of all PixelCons created by `(_creator)`\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\n\t * @param _creator Creator address \n\t * @return PixelCon indexes\n\t */\n\tfunction getForCreator(address _creator) public view validAddress(_creator) returns(uint64[])\n\t{\n\t\treturn createdTokens[_creator];\n\t}\n\n\t/**\n\t * @notice Get the indexes of all PixelCons in collection #`(_collectionIndex)`\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\n\t * @param _collectionIndex Collection index\n\t * @return PixelCon indexes\n\t */\n\tfunction getForCollection(uint64 _collectionIndex) public view validIndex(_collectionIndex) returns(uint64[])\n\t{\n\t\treturn collectionTokens[_collectionIndex];\n\t}\n\n\t/**\n\t * @notice Get the basic data for the given PixelCon indexes\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\n\t * @param _tokenIndexes List of PixelCon indexes\n\t * @return All PixelCon basic data\n\t */\n\tfunction getBasicData(uint64[] _tokenIndexes) public view returns(uint256[], bytes8[], address[], uint64[])\n\t{\n\t\tuint256[] memory tokenIds = new uint256[](_tokenIndexes.length);\n\t\tbytes8[] memory names = new bytes8[](_tokenIndexes.length);\n\t\taddress[] memory owners = new address[](_tokenIndexes.length);\n\t\tuint64[] memory collectionIdxs = new uint64[](_tokenIndexes.length);\n\n\t\tfor (uint i = 0; i < _tokenIndexes.length; i++)\t{\n\t\t\tuint64 tokenIndex = _tokenIndexes[i];\n\t\t\trequire(tokenIndex < totalSupply(), \"PixelCon index is out of bounds\");\n\n\t\t\ttokenIds[i] = pixelcons[tokenIndex].tokenId;\n\t\t\tnames[i] = pixelconNames[tokenIndex];\n\t\t\towners[i] = tokenLookup[pixelcons[tokenIndex].tokenId].owner;\n\t\t\tcollectionIdxs[i] = pixelcons[tokenIndex].collectionIndex;\n\t\t}\n\t\treturn (tokenIds, names, owners, collectionIdxs);\n\t}\n\n\t/**\n\t * @notice Get the names of all PixelCons\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\n\t * @return The names of all PixelCons in existence\n\t */\n\tfunction getAllNames() public view returns(bytes8[])\n\t{\n\t\treturn pixelconNames;\n\t}\n\n\t/**\n\t * @notice Get the names of all PixelCons from index `(_startIndex)` to `(_endIndex)`\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\n\t * @return The names of the PixelCons in the given range\n\t */\n\tfunction getNamesInRange(uint64 _startIndex, uint64 _endIndex) public view returns(bytes8[])\n\t{\n\t\trequire(_startIndex <= totalSupply(), \"Start index is out of bounds\");\n\t\trequire(_endIndex <= totalSupply(), \"End index is out of bounds\");\n\t\trequire(_startIndex <= _endIndex, \"End index is less than the start index\");\n\n\t\tuint64 length = _endIndex - _startIndex;\n\t\tbytes8[] memory names = new bytes8[](length);\n\t\tfor (uint i = 0; i < length; i++)\t{\n\t\t\tnames[i] = pixelconNames[_startIndex + i];\n\t\t}\n\t\treturn names;\n\t}\n\n\t/**\n\t * @notice Get details of collection #`(_collectionIndex)`\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\n\t * @param _collectionIndex Index of the collection to get the data of\n\t * @return Collection name and included PixelCon indexes\n\t */\n\tfunction getCollectionData(uint64 _collectionIndex) public view validIndex(_collectionIndex) returns(bytes8, uint64[])\n\t{\n\t\trequire(_collectionIndex < totalCollections(), \"Collection does not exist\");\n\t\treturn (collectionNames[_collectionIndex], collectionTokens[_collectionIndex]);\n\t}\n\n\t/**\n\t * @notice Get the names of all collections\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\n\t * @return The names of all PixelCon collections in existence\n\t */\n\tfunction getAllCollectionNames() public view returns(bytes8[])\n\t{\n\t\treturn collectionNames;\n\t}\n\n\t/**\n\t * @notice Get the names of all collections from index `(_startIndex)` to `(_endIndex)`\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\n\t * @return The names of the collections in the given range\n\t */\n\tfunction getCollectionNamesInRange(uint64 _startIndex, uint64 _endIndex) public view returns(bytes8[])\n\t{\n\t\trequire(_startIndex <= totalCollections(), \"Start index is out of bounds\");\n\t\trequire(_endIndex <= totalCollections(), \"End index is out of bounds\");\n\t\trequire(_startIndex <= _endIndex, \"End index is less than the start index\");\n\n\t\tuint64 length = _endIndex - _startIndex;\n\t\tbytes8[] memory names = new bytes8[](length);\n\t\tfor (uint i = 0; i < length; i++)\t{\n\t\t\tnames[i] = collectionNames[_startIndex + i];\n\t\t}\n\t\treturn names;\n\t}\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t////////////////////////////////////////////////////// ERC-721 Implementation ///////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * @notice Get the balance of `(_owner)`\n\t * @param _owner Owner address\n\t * @return Owner balance\n\t */\n\tfunction balanceOf(address _owner) public view validAddress(_owner) returns(uint256)\n\t{\n\t\treturn ownedTokens[_owner].length;\n\t}\n\n\t/**\n\t * @notice Get the owner of PixelCon `(_tokenId)`\n\t * @dev Throws if PixelCon does not exist\n\t * @param _tokenId ID of the token\n\t * @return Owner of the given PixelCon\n\t */\n\tfunction ownerOf(uint256 _tokenId) public view validId(_tokenId) returns(address)\n\t{\n\t\taddress owner = tokenLookup[_tokenId].owner;\n\t\trequire(owner != address(0), \"PixelCon does not exist\");\n\t\treturn owner;\n\t}\n\n\t/**\n\t * @notice Approve `(_to)` to transfer PixelCon `(_tokenId)` (zero indicates no approved address)\n\t * @dev Throws if not called by the owner or an approved operator\n\t * @param _to Address to be approved\n\t * @param _tokenId ID of the token to be approved\n\t */\n\tfunction approve(address _to, uint256 _tokenId) public validId(_tokenId)\n\t{\n\t\taddress owner = tokenLookup[_tokenId].owner;\n\t\trequire(_to != owner, \"Cannot approve PixelCon owner\");\n\t\trequire(msg.sender == owner || operatorApprovals[owner][msg.sender], \"Sender does not have permission to approve address\");\n\n\t\ttokenApprovals[_tokenId] = _to;\n\t\temit Approval(owner, _to, _tokenId);\n\t}\n\n\t/**\n\t * @notice Get the approved address for PixelCon `(_tokenId)`\n\t * @dev Throws if the PixelCon does not exist\n\t * @param _tokenId ID of the token\n\t * @return Address currently approved for the given PixelCon\n\t */\n\tfunction getApproved(uint256 _tokenId) public view validId(_tokenId) returns(address)\n\t{\n\t\taddress owner = tokenLookup[_tokenId].owner;\n\t\trequire(owner != address(0), \"PixelCon does not exist\");\n\t\treturn tokenApprovals[_tokenId];\n\t}\n\n\t/**\n\t * @notice Set or unset the approval of operator `(_to)`\n\t * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n\t * @param _to Operator address to set the approval\n\t * @param _approved Flag for setting approval\n\t */\n\tfunction setApprovalForAll(address _to, bool _approved) public validAddress(_to)\n\t{\n\t\trequire(_to != msg.sender, \"Cannot approve self\");\n\t\toperatorApprovals[msg.sender][_to] = _approved;\n\t\temit ApprovalForAll(msg.sender, _to, _approved);\n\t}\n\n\t/**\n\t * @notice Get if `(_operator)` is an approved operator for owner `(_owner)`\n\t * @param _owner Owner address \n\t * @param _operator Operator address\n\t * @return True if the given operator is approved by the given owner\n\t */\n\tfunction isApprovedForAll(address _owner, address _operator) public view validAddress(_owner) validAddress(_operator) returns(bool)\n\t{\n\t\treturn operatorApprovals[_owner][_operator];\n\t}\n\n\t/**\n\t * @notice Transfer the ownership of PixelCon `(_tokenId)` to `(_to)` (try to use 'safeTransferFrom' instead)\n\t * @dev Throws if the sender is not the owner, approved, or operator\n\t * @param _from Current owner\n\t * @param _to Address to receive the PixelCon\n\t * @param _tokenId ID of the PixelCon to be transferred\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public validAddress(_from) validAddress(_to) validId(_tokenId)\n\t{\n\t\trequire(isApprovedOrOwner(msg.sender, _tokenId), \"Sender does not have permission to transfer PixelCon\");\n\t\tclearApproval(_from, _tokenId);\n\t\tremoveTokenFrom(_from, _tokenId);\n\t\taddTokenTo(_to, _tokenId);\n\n\t\temit Transfer(_from, _to, _tokenId);\n\t}\n\n\t/**\n\t * @notice Safely transfer the ownership of PixelCon `(_tokenId)` to `(_to)`\n\t * @dev Throws if receiver is a contract that does not respond or the sender is not the owner, approved, or operator\n\t * @param _from Current owner\n\t * @param _to Address to receive the PixelCon\n\t * @param _tokenId ID of the PixelCon to be transferred\n\t */\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) public\n\t{\n\t\t//requirements are checked in 'transferFrom' function\n\t\tsafeTransferFrom(_from, _to, _tokenId, \"\");\n\t}\n\n\t/**\n\t * @notice Safely transfer the ownership of PixelCon `(_tokenId)` to `(_to)`\n\t * @dev Throws if receiver is a contract that does not respond or the sender is not the owner, approved, or operator\n\t * @param _from Current owner\n\t * @param _to Address to receive the PixelCon\n\t * @param _tokenId ID of the PixelCon to be transferred\n\t * @param _data Data to send along with a safe transfer check\n\t */\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public\n\t{\n\t\t//requirements are checked in 'transferFrom' function\n\t\ttransferFrom(_from, _to, _tokenId);\n\t\trequire(checkAndCallSafeTransfer(_from, _to, _tokenId, _data), \"Transfer was not safe\");\n\t}\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t//////////////////////////////////////////////// ERC-721 Enumeration Implementation /////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * @notice Get the total number of PixelCons in existence\n\t * @return Total number of PixelCons in existence\n\t */\n\tfunction totalSupply() public view returns(uint256)\n\t{\n\t\treturn pixelcons.length;\n\t}\n\n\t/**\n\t * @notice Get the ID of PixelCon #`(_tokenIndex)`\n\t * @dev Throws if index is out of bounds\n\t * @param _tokenIndex Counter less than `totalSupply()`\n\t * @return `_tokenIndex`th PixelCon ID\n\t */\n\tfunction tokenByIndex(uint256 _tokenIndex) public view returns(uint256)\n\t{\n\t\trequire(_tokenIndex < totalSupply(), \"PixelCon index is out of bounds\");\n\t\treturn pixelcons[_tokenIndex].tokenId;\n\t}\n\n\t/**\n\t * @notice Enumerate PixelCon assigned to owner `(_owner)`\n\t * @dev Throws if the index is out of bounds\n\t * @param _owner Owner address\n\t * @param _index Counter less than `balanceOf(_owner)`\n\t * @return PixelCon ID for the `(_index)`th PixelCon in owned by `(_owner)`\n\t */\n\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) public view validAddress(_owner) returns(uint256)\n\t{\n\t\trequire(_index < ownedTokens[_owner].length, \"Index is out of bounds\");\n\t\tPixelCon storage pixelcon = pixelcons[ownedTokens[_owner][_index]];\n\t\treturn pixelcon.tokenId;\n\t}\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t////////////////////////////////////////////////// ERC-721 Metadata Implementation //////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * @notice Get the name of this contract token\n\t * @return Contract token name\n\t */\n\tfunction name() public view returns(string)\n\t{\n\t\treturn \"PixelCons\";\n\t}\n\n\t/**\n\t * @notice Get the symbol for this contract token\n\t * @return Contract token symbol\n\t */\n\tfunction symbol() public view returns(string)\n\t{\n\t\treturn \"PXCN\";\n\t}\n\n\t/**\n\t * @notice Get a distinct Uniform Resource Identifier (URI) for PixelCon `(_tokenId)`\n\t * @dev Throws if the given PixelCon does not exist\n\t * @return PixelCon URI\n\t */\n\tfunction tokenURI(uint256 _tokenId) public view returns(string)\n\t{\n\t\tTokenLookup storage lookupData = tokenLookup[_tokenId];\n\t\trequire(lookupData.owner != address(0), \"PixelCon does not exist\");\n\t\tPixelCon storage pixelcon = pixelcons[lookupData.tokenIndex];\n\t\tbytes8 pixelconName = pixelconNames[lookupData.tokenIndex];\n\n\t\t//Available values: <tokenId>, <tokenIndex>, <name>, <owner>, <creator>, <dateCreated>, <collectionIndex>\n\n\t\t//start with the token URI template and replace in the appropriate values\n\t\tstring memory finalTokenURI = tokenURITemplate;\n\t\tfinalTokenURI = StringUtils.replace(finalTokenURI, \"<tokenId>\", StringUtils.toHexString(_tokenId, 32));\n\t\tfinalTokenURI = StringUtils.replace(finalTokenURI, \"<tokenIndex>\", StringUtils.toHexString(uint256(lookupData.tokenIndex), 8));\n\t\tfinalTokenURI = StringUtils.replace(finalTokenURI, \"<name>\", StringUtils.toHexString(uint256(pixelconName), 8));\n\t\tfinalTokenURI = StringUtils.replace(finalTokenURI, \"<owner>\", StringUtils.toHexString(uint256(lookupData.owner), 20));\n\t\tfinalTokenURI = StringUtils.replace(finalTokenURI, \"<creator>\", StringUtils.toHexString(uint256(pixelcon.creator), 20));\n\t\tfinalTokenURI = StringUtils.replace(finalTokenURI, \"<dateCreated>\", StringUtils.toHexString(uint256(pixelcon.dateCreated), 8));\n\t\tfinalTokenURI = StringUtils.replace(finalTokenURI, \"<collectionIndex>\", StringUtils.toHexString(uint256(pixelcon.collectionIndex), 8));\n\n\t\treturn finalTokenURI;\n\t}\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////// Utils ////////////////////////////////////////////////////////////////////////\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * @notice Check whether the given editor is the current owner and original creator of a given token ID\n\t * @param _address Address to check for\n\t * @param _tokenId ID of the token to be edited\n\t * @return True if the editor is approved for the given token ID, is an operator of the owner, or is the owner of the token\n\t */\n\tfunction isCreatorAndOwner(address _address, uint256 _tokenId) internal view returns(bool)\n\t{\n\t\tTokenLookup storage lookupData = tokenLookup[_tokenId];\n\t\taddress owner = lookupData.owner;\n\t\taddress creator = pixelcons[lookupData.tokenIndex].creator;\n\n\t\treturn (_address == owner && _address == creator);\n\t}\n\n\t/**\n\t * @notice Check whether the given spender can transfer a given token ID\n\t * @dev Throws if the PixelCon does not exist\n\t * @param _address Address of the spender to query\n\t * @param _tokenId ID of the token to be transferred\n\t * @return True if the spender is approved for the given token ID, is an operator of the owner, or is the owner of the token\n\t */\n\tfunction isApprovedOrOwner(address _address, uint256 _tokenId) internal view returns(bool)\n\t{\n\t\taddress owner = tokenLookup[_tokenId].owner;\n\t\trequire(owner != address(0), \"PixelCon does not exist\");\n\t\treturn (_address == owner || tokenApprovals[_tokenId] == _address || operatorApprovals[owner][_address]);\n\t}\n\n\t/**\n\t * @notice Clear current approval of a given token ID\n\t * @dev Throws if the given address is not indeed the owner of the token\n\t * @param _owner Owner of the token\n\t * @param _tokenId ID of the token to be transferred\n\t */\n\tfunction clearApproval(address _owner, uint256 _tokenId) internal\n\t{\n\t\trequire(tokenLookup[_tokenId].owner == _owner, \"Incorrect PixelCon owner\");\n\t\tif (tokenApprovals[_tokenId] != address(0)) {\n\t\t\ttokenApprovals[_tokenId] = address(0);\n\t\t}\n\t}\n\n\t/**\n\t * @notice Add a token ID to the list of a given address\n\t * @dev Throws if the receiver address has hit ownership limit or the PixelCon already has an owner\n\t * @param _to Address representing the new owner of the given token ID\n\t * @param _tokenId ID of the token to be added to the tokens list of the given address\n\t */\n\tfunction addTokenTo(address _to, uint256 _tokenId) internal\n\t{\n\t\tuint64[] storage ownedList = ownedTokens[_to];\n\t\tTokenLookup storage lookupData = tokenLookup[_tokenId];\n\t\trequire(ownedList.length < uint256(2 ** 32) - 1, \"Max number of PixelCons per owner has been reached\");\n\t\trequire(lookupData.owner == address(0), \"PixelCon already has an owner\");\n\t\tlookupData.owner = _to;\n\n\t\t//update ownedTokens references\n\t\tuint ownedListIndex = ownedList.length;\n\t\townedList.length++;\n\t\tlookupData.ownedIndex = uint32(ownedListIndex);\n\t\townedList[ownedListIndex] = lookupData.tokenIndex;\n\t}\n\n\t/**\n\t * @notice Remove a token ID from the list of a given address\n\t * @dev Throws if the given address is not indeed the owner of the token\n\t * @param _from Address representing the previous owner of the given token ID\n\t * @param _tokenId ID of the token to be removed from the tokens list of the given address\n\t */\n\tfunction removeTokenFrom(address _from, uint256 _tokenId) internal\n\t{\n\t\tuint64[] storage ownedList = ownedTokens[_from];\n\t\tTokenLookup storage lookupData = tokenLookup[_tokenId];\n\t\trequire(lookupData.owner == _from, \"From address is incorrect\");\n\t\tlookupData.owner = address(0);\n\n\t\t//update ownedTokens references\n\t\tuint64 replacementTokenIndex = ownedList[ownedList.length - 1];\n\t\tdelete ownedList[ownedList.length - 1];\n\t\townedList.length--;\n\t\tif (lookupData.ownedIndex < ownedList.length) {\n\t\t\t//we just removed the last token index in the array, but if this wasn't the one to remove, then swap it with the one to remove \n\t\t\townedList[lookupData.ownedIndex] = replacementTokenIndex;\n\t\t\ttokenLookup[pixelcons[replacementTokenIndex].tokenId].ownedIndex = lookupData.ownedIndex;\n\t\t}\n\t\tlookupData.ownedIndex = 0;\n\t}\n\n\t/**\n\t * @notice Invoke `onERC721Received` on a target address (not executed if the target address is not a contract)\n\t * @param _from Address representing the previous owner of the given token ID\n\t * @param _to Target address that will receive the tokens\n\t * @param _tokenId ID of the token to be transferred\n\t * @param _data Optional data to send along with the call\n\t * @return True if the call correctly returned the expected value\n\t */\n\tfunction checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal returns(bool)\n\t{\n\t\tif (!_to.isContract()) return true;\n\n\t\tbytes4 retval = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\n\t\treturn (retval == ERC721_RECEIVED);\n\t}\n}\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\n * See (https://github.com/OpenZeppelin/openzeppelin-solidity)\n */\ncontract ERC721Receiver {\n\n\t/**\n\t * @dev Magic value to be returned upon successful reception of an NFT.\n\t * Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n\t * which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n\t */\n\tbytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n\t/**\n\t * @notice Handle the receipt of an NFT\n\t * @dev The ERC721 smart contract calls this function on the recipient\n\t * after a `safetransfer`. This function MAY throw to revert and reject the\n\t * transfer. Return of other than the magic value MUST result in the\n\t * transaction being reverted.\n\t * Note: the contract address is always the message sender.\n\t * @param _operator The address which called `safeTransferFrom` function\n\t * @param _from The address which previously owned the token\n\t * @param _tokenId The NFT identifier which is being transferred\n\t * @param _data Additional data with no specified format\n\t * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n\t */\n\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n}\n\n\n/**\n * @title AddressUtils Library\n * @dev Utility library of inline functions on addresses.\n * See (https://github.com/OpenZeppelin/openzeppelin-solidity)\n */\nlibrary AddressUtils {\n\n\t/**\n\t * Returns whether the target address is a contract\n\t * @dev This function will return false if invoked during the constructor of a contract,\n\t * as the code is not actually created until after the constructor finishes.\n\t * @param _account address of the account to check\n\t * @return whether the target address is a contract\n\t */\n\tfunction isContract(address _account) internal view returns(bool) \n\t{\n\t\tuint256 size;\n\t\t// XXX Currently there is no better way to check if there is a contract in an address\n\t\t// than to check the size of the code at that address.\n\t\t// See https://ethereum.stackexchange.com/a/14016/36603\n\t\t// for more details about how this works.\n\t\t// TODO Check this again before the Serenity release, because all addresses will be\n\t\t// contracts then.\n\t\tassembly { size := extcodesize(_account) }\n\t\treturn size > 0;\n\t}\n}\n\n\n/**\n * @title StringUtils Library\n * @dev Utility library of inline functions on strings. \n * These functions are very expensive and are only intended for web3 calls\n * @author PixelCons\n */\nlibrary StringUtils {\n\n\t/**\n\t * @dev Replaces the given key with the given value in the given string\n\t * @param _str String to find and replace in\n\t * @param _key Value to search for\n\t * @param _value Value to replace key with\n\t * @return The replaced string\n\t */\n\tfunction replace(string _str, string _key, string _value) internal pure returns(string)\n\t{\n\t\tbytes memory bStr = bytes(_str);\n\t\tbytes memory bKey = bytes(_key);\n\t\tbytes memory bValue = bytes(_value);\n\n\t\tuint index = indexOf(bStr, bKey);\n\t\tif (index < bStr.length) {\n\t\t\tbytes memory rStr = new bytes((bStr.length + bValue.length) - bKey.length);\n\n\t\t\tuint i;\n\t\t\tfor (i = 0; i < index; i++) rStr[i] = bStr[i];\n\t\t\tfor (i = 0; i < bValue.length; i++) rStr[index + i] = bValue[i];\n\t\t\tfor (i = 0; i < bStr.length - (index + bKey.length); i++) rStr[index + bValue.length + i] = bStr[index + bKey.length + i];\n\n\t\t\treturn string(rStr);\n\t\t}\n\t\treturn string(bStr);\n\t}\n\n\t/**\n\t * @dev Converts a given number into a string with hex representation\n\t * @param _num Number to convert\n\t * @param _byteSize Size of the number in bytes\n\t * @return The hex representation as string\n\t */\n\tfunction toHexString(uint256 _num, uint _byteSize) internal pure returns(string)\n\t{\n\t\tbytes memory s = new bytes(_byteSize * 2 + 2);\n\t\ts[0] = 0x30;\n\t\ts[1] = 0x78;\n\t\tfor (uint i = 0; i < _byteSize; i++) {\n\t\t\tbyte b = byte(uint8(_num / (2 ** (8 * (_byteSize - 1 - i)))));\n\t\t\tbyte hi = byte(uint8(b) / 16);\n\t\t\tbyte lo = byte(uint8(b) - 16 * uint8(hi));\n\t\t\ts[2 + 2 * i] = char(hi);\n\t\t\ts[3 + 2 * i] = char(lo);\n\t\t}\n\t\treturn string(s);\n\t}\n\n\t/**\n\t * @dev Gets the ascii hex character for the given value (0-15)\n\t * @param _b Byte to get ascii code for\n\t * @return The ascii hex character\n\t */\n\tfunction char(byte _b) internal pure returns(byte c)\n\t{\n\t\tif (_b < 10) return byte(uint8(_b) + 0x30);\n\t\telse return byte(uint8(_b) + 0x57);\n\t}\n\n\t/**\n\t * @dev Gets the index of the key string in the given string\n\t * @param _str String to search in\n\t * @param _key Value to search for\n\t * @return The index of the key in the string (string length if not found)\n\t */\n\tfunction indexOf(bytes _str, bytes _key) internal pure returns(uint)\n\t{\n\t\tfor (uint i = 0; i < _str.length - (_key.length - 1); i++) {\n\t\t\tbool matchFound = true;\n\t\t\tfor (uint j = 0; j < _key.length; j++) {\n\t\t\t\tif (_str[i + j] != _key[j]) {\n\t\t\t\t\tmatchFound = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (matchFound) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn _str.length;\n\t}\n}",
  "bytecode": ""
}