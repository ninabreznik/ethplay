{
  "address": "0x9b68bfae21df5a510931a262cecf63f41338f264",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Decent.Bet Token",
  "contractName": "NewDecentBetToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-26\n*/\n\npragma solidity ^0.4.8;\n\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\n/*\n * ERC20 interface\n * see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n    uint public totalSupply;\n    function balanceOf(address who) constant returns (uint);\n    function allowance(address owner, address spender) constant returns (uint);\n\n    function transfer(address to, uint value) returns (bool ok);\n    function transferFrom(address from, address to, uint value) returns (bool ok);\n    function approve(address spender, uint value) returns (bool ok);\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\n\n/**\n * Math operations with safety checks\n */\ncontract SafeMath {\n    function safeMul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint a, uint b) internal returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function safeSub(uint a, uint b) internal returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        assert(c >= a && c >= b);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    function assert(bool assertion) internal {\n        if (!assertion) {\n            throw;\n        }\n    }\n\n}\n\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\n/// @author Stefan George - <[emailÂ protected]>\ncontract MultiSigWallet {\n\n    // flag to determine if address is for a real contract or not\n    bool public isMultiSigWallet = false;\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Revocation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n    event RequirementChange(uint required);\n\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] public owners;\n    uint public required;\n    uint public transactionCount;\n\n    struct Transaction {\n    address destination;\n    uint value;\n    bytes data;\n    bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this)) throw;\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner]) throw;\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner]) throw;\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        if (transactions[transactionId].destination == 0) throw;\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        if (!confirmations[transactionId][owner]) throw;\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        if (confirmations[transactionId][owner]) throw;\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        if (transactions[transactionId].executed) throw;\n        _;\n    }\n\n    modifier notNull(address _address) {\n        if (_address == 0) throw;\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        if (ownerCount > MAX_OWNER_COUNT) throw;\n        if (_required > ownerCount) throw;\n        if (_required == 0) throw;\n        if (ownerCount == 0) throw;\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n    payable\n    {\n        if (msg.value > 0)\n        Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n    public\n    validRequirement(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++) {\n            if (isOwner[_owners[i]] || _owners[i] == 0) throw;\n            isOwner[_owners[i]] = true;\n        }\n        isMultiSigWallet = true;\n        owners = _owners;\n        required = _required;\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n    public\n    onlyWallet\n    ownerDoesNotExist(owner)\n    notNull(owner)\n    validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n    public\n    onlyWallet\n    ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n        if (owners[i] == owner) {\n            owners[i] = owners[owners.length - 1];\n            break;\n        }\n        owners.length -= 1;\n        if (required > owners.length)\n        changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    /// @param index the indx of the owner to be replaced\n    function replaceOwnerIndexed(address owner, address newOwner, uint index)\n    public\n    onlyWallet\n    ownerExists(owner)\n    ownerDoesNotExist(newOwner)\n    {\n        if (owners[index] != owner) throw;\n        owners[index] = newOwner;\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n    public\n    onlyWallet\n    validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n    public\n    returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n    public\n    ownerExists(msg.sender)\n    transactionExists(transactionId)\n    notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n    public\n    ownerExists(msg.sender)\n    confirmed(transactionId, msg.sender)\n    notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n    public\n    constant\n    returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n            count += 1;\n            if (count == required)\n            return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n    internal\n    notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction tx = transactions[transactionId];\n            tx.executed = true;\n            if (tx.destination.call.value(tx.value)(tx.data))\n            Execution(transactionId);\n            else {\n                ExecutionFailure(transactionId);\n                tx.executed = false;\n            }\n        }\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n    internal\n    notNull(destination)\n    returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n        destination: destination,\n        value: value,\n        data: data,\n        executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n    public\n    constant\n    returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n        if (confirmations[transactionId][owners[i]])\n        count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n    public\n    constant\n    returns (uint count)\n    {\n        for (uint i=0; i<transactionCount; i++)\n        if ((pending && !transactions[i].executed) ||\n        (executed && transactions[i].executed))\n        count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n    public\n    constant\n    returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n    public\n    constant\n    returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i=0; i<owners.length; i++)\n        if (confirmations[transactionId][owners[i]]) {\n            confirmationsTemp[count] = owners[i];\n            count += 1;\n        }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n        _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n    public\n    constant\n    returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n        if ((pending && !transactions[i].executed) ||\n        (executed && transactions[i].executed))\n        {\n            transactionIdsTemp[count] = i;\n            count += 1;\n        }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n        _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n\n}\n\ncontract OldToken is ERC20 {\n    // flag to determine if address is for a real contract or not\n    bool public isDecentBetToken;\n\n    address public decentBetMultisig;\n}\n\ncontract NextUpgradeAgent is SafeMath {\n    address public owner;\n\n    bool public isUpgradeAgent;\n\n    function upgradeFrom(address _from, uint256 _value) public;\n\n    function finalizeUpgrade() public;\n\n    function setOriginalSupply() public;\n}\n\n/// @title Time-locked vault of tokens allocated to DecentBet after 365 days\ncontract NewDecentBetVault is SafeMath {\n\n    // flag to determine if address is for a real contract or not\n    bool public isDecentBetVault = false;\n\n    NewDecentBetToken decentBetToken;\n\n    address decentBetMultisig;\n\n    uint256 unlockedAtTime;\n\n    // 1 year lockup\n    uint256 public constant timeOffset = 47 weeks;\n\n    /// @notice Constructor function sets the DecentBet Multisig address and\n    /// total number of locked tokens to transfer\n    function NewDecentBetVault(address _decentBetMultisig) /** internal */ {\n        if (_decentBetMultisig == 0x0) revert();\n        decentBetToken = NewDecentBetToken(msg.sender);\n        decentBetMultisig = _decentBetMultisig;\n        isDecentBetVault = true;\n\n        // 1 year later\n        unlockedAtTime = safeAdd(getTime(), timeOffset);\n    }\n\n    /// @notice Transfer locked tokens to Decent.bet's multisig wallet\n    function unlock() external {\n        // Wait your turn!\n        if (getTime() < unlockedAtTime) revert();\n        // Will fail if allocation (and therefore toTransfer) is 0.\n        if (!decentBetToken.transfer(decentBetMultisig, decentBetToken.balanceOf(this))) revert();\n    }\n\n    function getTime() internal returns (uint256) {\n        return now;\n    }\n\n    // disallow ETH payments to TimeVault\n    function() payable {\n        revert();\n    }\n\n}\n\ncontract NewDecentBetToken is ERC20, SafeMath {\n\n    // Token information\n    bool public isDecentBetToken;\n\n    string public constant name = \"Decent.Bet Token\";\n\n    string public constant symbol = \"DBET\";\n\n    uint256 public constant decimals = 18;  // decimal places\n\n    uint256 public constant housePercentOfTotal = 10;\n\n    uint256 public constant vaultPercentOfTotal = 18;\n\n    uint256 public constant bountyPercentOfTotal = 2;\n\n    uint256 public constant crowdfundPercentOfTotal = 70;\n\n    // flag to determine if address is for a real contract or not\n    bool public isNewToken = false;\n\n    // Token information\n    mapping (address => uint256) balances;\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Upgrade information\n    NewUpgradeAgent public upgradeAgent;\n\n    NextUpgradeAgent public nextUpgradeAgent;\n\n    bool public finalizedNextUpgrade = false;\n\n    address public nextUpgradeMaster;\n\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n    event UpgradeFinalized(address sender, address nextUpgradeAgent);\n\n    event UpgradeAgentSet(address agent);\n\n    uint256 public totalUpgraded;\n\n    // Old Token Information\n    OldToken public oldToken;\n\n    address public decentBetMultisig;\n\n    uint256 public oldTokenTotalSupply;\n\n    NewDecentBetVault public timeVault;\n\n    function NewDecentBetToken(address _upgradeAgent,\n    address _oldToken, address _nextUpgradeMaster) public {\n\n        isNewToken = true;\n\n        isDecentBetToken = true;\n\n        if (_upgradeAgent == 0x0) revert();\n        upgradeAgent = NewUpgradeAgent(_upgradeAgent);\n\n        if (_nextUpgradeMaster == 0x0) revert();\n        nextUpgradeMaster = _nextUpgradeMaster;\n\n        oldToken = OldToken(_oldToken);\n        if (!oldToken.isDecentBetToken()) revert();\n        oldTokenTotalSupply = oldToken.totalSupply();\n\n        decentBetMultisig = oldToken.decentBetMultisig();\n        if (!MultiSigWallet(decentBetMultisig).isMultiSigWallet()) revert();\n\n        timeVault = new NewDecentBetVault(decentBetMultisig);\n        if (!timeVault.isDecentBetVault()) revert();\n\n        // Founder's supply : 18% of total goes to vault, time locked for 1 year\n        uint256 vaultTokens = safeDiv(safeMul(oldTokenTotalSupply, vaultPercentOfTotal),\n        crowdfundPercentOfTotal);\n        balances[timeVault] = safeAdd(balances[timeVault], vaultTokens);\n        Transfer(0, timeVault, vaultTokens);\n\n        // House: 10% of total goes to Decent.bet for initial house setup\n        uint256 houseTokens = safeDiv(safeMul(oldTokenTotalSupply, housePercentOfTotal),\n        crowdfundPercentOfTotal);\n        balances[decentBetMultisig] = safeAdd(balances[decentBetMultisig], houseTokens);\n        Transfer(0, decentBetMultisig, houseTokens);\n\n        // Bounties: 2% of total goes to Decent bet for bounties\n        uint256 bountyTokens = safeDiv(safeMul(oldTokenTotalSupply, bountyPercentOfTotal),\n        crowdfundPercentOfTotal);\n        balances[decentBetMultisig] = safeAdd(balances[decentBetMultisig], bountyTokens);\n        Transfer(0, decentBetMultisig, bountyTokens);\n\n        totalSupply = safeAdd(safeAdd(vaultTokens, houseTokens), bountyTokens);\n    }\n\n    // Upgrade-related methods\n    function createToken(address _target, uint256 _amount) public {\n        if (msg.sender != address(upgradeAgent)) revert();\n        if (_amount == 0) revert();\n\n        balances[_target] = safeAdd(balances[_target], _amount);\n        totalSupply = safeAdd(totalSupply, _amount);\n        Transfer(_target, _target, _amount);\n    }\n\n    // ERC20 interface: transfer _value new tokens from msg.sender to _to\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) revert();\n        if (_to == address(upgradeAgent)) revert();\n        if (_to == address(this)) revert();\n        //if (_to == address(UpgradeAgent(upgradeAgent).oldToken())) revert();\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] = safeSub(balances[msg.sender], _value);\n            balances[_to] = safeAdd(balances[_to], _value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        else {return false;}\n    }\n\n    // ERC20 interface: transfer _value new tokens from _from to _to\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (_to == 0x0) revert();\n        if (_to == address(upgradeAgent)) revert();\n        if (_to == address(this)) revert();\n        //if (_to == address(UpgradeAgent(upgradeAgent).oldToken())) revert();\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\n            balances[_to] = safeAdd(balances[_to], _value);\n            balances[_from] = safeSub(balances[_from], _value);\n            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n            Transfer(_from, _to, _value);\n            return true;\n        }\n        else {return false;}\n    }\n\n    // ERC20 interface: delegate transfer rights of up to _value new tokens from\n    // msg.sender to _spender\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    // ERC20 interface: returns the amount of new tokens belonging to _owner\n    // that _spender can spend via transferFrom\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    // ERC20 interface: returns the wmount of new tokens belonging to _owner\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    // Token upgrade functionality\n\n    /// @notice Upgrade tokens to the new token contract.\n    /// @param value The number of tokens to upgrade\n    function upgrade(uint256 value) external {\n        if (nextUpgradeAgent.owner() == 0x0) revert();\n        // need a real upgradeAgent address\n        if (finalizedNextUpgrade) revert();\n        // cannot upgrade if finalized\n\n        // Validate input value.\n        if (value == 0) revert();\n        if (value > balances[msg.sender]) revert();\n\n        // update the balances here first before calling out (reentrancy)\n        balances[msg.sender] = safeSub(balances[msg.sender], value);\n        totalSupply = safeSub(totalSupply, value);\n        totalUpgraded = safeAdd(totalUpgraded, value);\n        nextUpgradeAgent.upgradeFrom(msg.sender, value);\n        Upgrade(msg.sender, nextUpgradeAgent, value);\n    }\n\n    /// @notice Set address of next upgrade target contract and enable upgrade\n    /// process.\n    /// @param agent The address of the UpgradeAgent contract\n    function setNextUpgradeAgent(address agent) external {\n        if (agent == 0x0) revert();\n        // don't set agent to nothing\n        if (msg.sender != nextUpgradeMaster) revert();\n        // Only a master can designate the next agent\n        nextUpgradeAgent = NextUpgradeAgent(agent);\n        if (!nextUpgradeAgent.isUpgradeAgent()) revert();\n        nextUpgradeAgent.setOriginalSupply();\n        UpgradeAgentSet(nextUpgradeAgent);\n    }\n\n    /// @notice Set address of next upgrade master and enable upgrade\n    /// process.\n    /// @param master The address that will manage upgrades, not the upgradeAgent contract address\n    function setNextUpgradeMaster(address master) external {\n        if (master == 0x0) revert();\n        if (msg.sender != nextUpgradeMaster) revert();\n        // Only a master can designate the next master\n        nextUpgradeMaster = master;\n    }\n\n    /// @notice finalize the upgrade\n    /// @dev Required state: Success\n    function finalizeNextUpgrade() external {\n        if (nextUpgradeAgent.owner() == 0x0) revert();\n        // we need a valid upgrade agent\n        if (msg.sender != nextUpgradeMaster) revert();\n        // only upgradeMaster can finalize\n        if (finalizedNextUpgrade) revert();\n        // can't finalize twice\n\n        finalizedNextUpgrade = true;\n        // prevent future upgrades\n\n        nextUpgradeAgent.finalizeUpgrade();\n        // call finalize upgrade on new contract\n        UpgradeFinalized(msg.sender, nextUpgradeAgent);\n    }\n\n    /// @dev Fallback function throws to avoid accidentally losing money\n    function() {revert();}\n}\n\n\n//Test the whole process against this: https://www.kingoftheether.com/contract-safety-checklist.html\ncontract NewUpgradeAgent is SafeMath {\n\n    // flag to determine if address is for a real contract or not\n    bool public isUpgradeAgent = false;\n\n    // Contract information\n    address public owner;\n\n    // Upgrade information\n    bool public upgradeHasBegun = false;\n\n    bool public finalizedUpgrade = false;\n\n    OldToken public oldToken;\n\n    address public decentBetMultisig;\n\n    NewDecentBetToken public newToken;\n\n    uint256 public originalSupply; // the original total supply of old tokens\n\n    uint256 public correctOriginalSupply; // Correct original supply accounting for 30% minted at finalizeCrowdfunding\n\n    uint256 public mintedPercentOfTokens = 30; // Amount of tokens that're minted at finalizeCrowdfunding\n\n    uint256 public crowdfundPercentOfTokens = 70;\n\n    uint256 public mintedTokens;\n\n    event NewTokenSet(address token);\n\n    event UpgradeHasBegun();\n\n    event InvariantCheckFailed(uint oldTokenSupply, uint newTokenSupply, uint originalSupply, uint value);\n\n    event InvariantCheckPassed(uint oldTokenSupply, uint newTokenSupply, uint originalSupply, uint value);\n\n    function NewUpgradeAgent(address _oldToken) {\n        owner = msg.sender;\n        isUpgradeAgent = true;\n        oldToken = OldToken(_oldToken);\n        if (!oldToken.isDecentBetToken()) revert();\n        decentBetMultisig = oldToken.decentBetMultisig();\n        originalSupply = oldToken.totalSupply();\n        mintedTokens = safeDiv(safeMul(originalSupply, mintedPercentOfTokens), crowdfundPercentOfTokens);\n        correctOriginalSupply = safeAdd(originalSupply, mintedTokens);\n    }\n\n    /// @notice Check to make sure that the current sum of old and\n    /// new version tokens is still equal to the original number of old version\n    /// tokens\n    /// @param _value The number of DBETs to upgrade\n    function safetyInvariantCheck(uint256 _value) public {\n        if (!newToken.isNewToken()) revert();\n        // Abort if new token contract has not been set\n        uint oldSupply = oldToken.totalSupply();\n        uint newSupply = newToken.totalSupply();\n        if (safeAdd(oldSupply, newSupply) != safeSub(correctOriginalSupply, _value)) {\n            InvariantCheckFailed(oldSupply, newSupply, correctOriginalSupply, _value);\n        } else {\n            InvariantCheckPassed(oldSupply, newSupply, correctOriginalSupply, _value);\n        }\n    }\n\n    /// @notice Sets the new token contract address\n    /// @param _newToken The address of the new token contract\n    function setNewToken(address _newToken) external {\n        if (msg.sender != owner) revert();\n        if (_newToken == 0x0) revert();\n        if (upgradeHasBegun) revert();\n        // Cannot change token after upgrade has begun\n\n        newToken = NewDecentBetToken(_newToken);\n        if (!newToken.isNewToken()) revert();\n        NewTokenSet(newToken);\n    }\n\n    /// @notice Sets flag to prevent changing newToken after upgrade\n    function setUpgradeHasBegun() internal {\n        if (!upgradeHasBegun) {\n            upgradeHasBegun = true;\n            UpgradeHasBegun();\n        }\n    }\n\n    /// @notice Creates new version tokens from the new token\n    /// contract\n    /// @param _from The address of the token upgrader\n    /// @param _value The number of tokens to upgrade\n    function upgradeFrom(address _from, uint256 _value) public {\n        if(finalizedUpgrade) revert();\n        if (msg.sender != address(oldToken)) revert();\n        // Multisig can't upgrade since tokens are minted for it in new token constructor as it isn't part\n        // of totalSupply of oldToken.\n        if (_from == decentBetMultisig) revert();\n        // only upgrade from oldToken\n        if (!newToken.isNewToken()) revert();\n        // need a real newToken!\n\n        setUpgradeHasBegun();\n        // Right here oldToken has already been updated, but corresponding\n        // DBETs have not been created in the newToken contract yet\n        safetyInvariantCheck(_value);\n\n        newToken.createToken(_from, _value);\n\n        //Right here totalSupply invariant must hold\n        safetyInvariantCheck(0);\n    }\n\n    // Initializes original supply from old token total supply\n    function setOriginalSupply() public {\n        if (msg.sender != address(oldToken)) revert();\n        originalSupply = oldToken.totalSupply();\n    }\n\n    function finalizeUpgrade() public {\n        if (msg.sender != address(oldToken)) revert();\n        finalizedUpgrade = true;\n    }\n\n    /// @dev Fallback function disallows depositing ether.\n    function() {revert();}\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextUpgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldTokenTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdfundPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeNextUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDecentBetToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNewToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizedNextUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"housePercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decentBetMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setNextUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setNextUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyPercentOfTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextUpgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_upgradeAgent\",\"type\":\"address\"},{\"name\":\"_oldToken\",\"type\":\"address\"},{\"name\":\"_nextUpgradeMaster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nextUpgradeAgent\",\"type\":\"address\"}],\"name\":\"UpgradeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000002139ecd8246594ef21267eafdae924130f967a3e000000000000000000000000540449e4d172cd9491c76320440cd74933d5691a000000000000000000000000818e6a1cdccc7db87e991d979aa8d3eec199b868"
}