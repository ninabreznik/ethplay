{
  "address": "0x8214e74a944370cb2882751057f057b5fb08b439",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "AO",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-30\n*/\n\npragma solidity 0.4.25;\n\n/** \n* ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\n* \n* Web              - https://333eth.io\n* \n* Twitter          - https://twitter.com/333eth_io\n* \n* Telegram_channel - https://t.me/Ethereum333\n* \n* EN  Telegram_chat: https://t.me/Ethereum333_chat_en\n* \n* RU  Telegram_chat: https://t.me/Ethereum333_chat_ru\n* \n* KOR Telegram_chat: https://t.me/Ethereum333_chat_kor\n* \n* Email:             mailto:support(at sign)333eth.io\n* \n* \n* \n* AO Rules:\n* \n* Shareholders are all participants of 333eth v1, v2 projects without exception\n* \n* Received ETH share as follows:\n* \n* 97% for losers, in projects 333eth v1, v2 in proportion to their losses\n* \n* 3% for winners - the same amount.\n* \n* \n* \n* Payment of dividends - every Saturday at 18.00 Moscow time.\n* \n* The contract of the JSC prescribed a waiver of ownership. And payments are unchanged.\n* \n* The specific amount of payments to each shareholder is determined by the success of the project. Your participation in previous projects determines your % in AO.\n*/\n\n\nlibrary RecipientsStorage {\n  struct Storage {\n    mapping(address => Recipient) data;\n    KeyFlag[] keys;\n    uint size;\n    uint losersValSum;\n    uint winnersNum;\n  }\n\n  struct Recipient { \n    uint keyIndex;\n    uint value;\n    bool isWinner;\n  }\n\n  struct KeyFlag { \n    address key; \n    bool deleted;\n  }\n\n  function init(Storage storage s) internal {\n    s.keys.length++;\n  }\n\n  function insert(Storage storage s, address key, uint value, bool isWinner) internal returns (bool) {\n    uint keyIndex = s.data[key].keyIndex;\n   \n    if (!s.data[key].isWinner) {\n      s.losersValSum -= s.data[key].value;\n    }\n\n    if (!isWinner) {\n      s.losersValSum += value;\n    }\n\n    if (isWinner && !s.data[key].isWinner) {\n      s.winnersNum++;\n    }\n    s.data[key].value = value;\n    s.data[key].isWinner = isWinner;\n\n    if (keyIndex > 0) {\n      return true;\n    }\n\n    keyIndex = s.keys.length++;\n    s.data[key].keyIndex = keyIndex;\n    s.keys[keyIndex].key = key;\n    s.size++;\n    return true;\n  }\n\n  function remove(Storage storage s, address key) internal returns (bool) {\n    uint keyIndex = s.data[key].keyIndex;\n    if (keyIndex == 0) {\n      return false;\n    }\n\n    if (s.data[key].isWinner) {\n      s.winnersNum--;\n    } else {\n      s.losersValSum -= s.data[key].value;\n    }\n    \n      \n    delete s.data[key];\n    s.keys[keyIndex].deleted = true;\n    s.size--;\n    return true;\n  }\n\n  function recipient(Storage storage s, address key) internal view returns (Recipient memory r) {\n    return Recipient(s.data[key].keyIndex, s.data[key].value, s.data[key].isWinner);\n  }\n  \n  function iterStart(Storage storage s) internal view returns (uint keyIndex) {\n    return iterNext(s, 0);\n  }\n\n  function iterValid(Storage storage s, uint keyIndex) internal view returns (bool) {\n    return keyIndex < s.keys.length;\n  }\n\n  function iterNext(Storage storage s, uint keyIndex) internal view returns (uint r_keyIndex) {\n    r_keyIndex = keyIndex + 1;\n    while (r_keyIndex < s.keys.length && s.keys[r_keyIndex].deleted) {\n      r_keyIndex++;\n    }\n  }\n\n  function iterGet(Storage storage s, uint keyIndex) internal view returns (address key, Recipient storage r) {\n    key = s.keys[keyIndex].key;\n    r = s.data[key];\n  }\n}\n\n\ncontract Accessibility {\n  enum AccessRank { None, Payout, Manager, Full }\n  mapping(address => AccessRank) internal m_admins;\n  modifier onlyAdmin(AccessRank  r) {\n    require(\n      m_admins[msg.sender] == r || m_admins[msg.sender] == AccessRank.Full,\n      \"access denied\"\n    );\n    _;\n  }\n  event LogProvideAccess(address indexed whom, AccessRank rank, uint when);\n\n  constructor() public {\n    m_admins[msg.sender] = AccessRank.Full;\n    emit LogProvideAccess(msg.sender, AccessRank.Full, now);\n  }\n  \n  function provideAccess(address addr, AccessRank rank) public onlyAdmin(AccessRank.Manager) {\n    require(rank <= AccessRank.Manager, \"cannot to give full access rank\");\n    if (m_admins[addr] != rank) {\n      m_admins[addr] = rank;\n      emit LogProvideAccess(addr, rank, now);\n    }\n  }\n\n  function access(address addr) public view returns(AccessRank rank) {\n    rank = m_admins[addr];\n  }\n}\n\n\nlibrary Percent {\n  // Solidity automatically throws when dividing by 0\n  struct percent {\n    uint num;\n    uint den;\n  }\n  // storage operations\n  function mul(percent storage p, uint a) internal view returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function div(percent storage p, uint a) internal view returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function sub(percent storage p, uint a) internal view returns (uint) {\n    uint b = mul(p, a);\n    if (b >= a) return 0; // solium-disable-line lbrace\n    return a - b;\n  }\n\n  function add(percent storage p, uint a) internal view returns (uint) {\n    return a + mul(p, a);\n  }\n\n  // memory operations\n  function mmul(percent memory p, uint a) internal pure returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    return a*p.num/p.den;\n  }\n\n  function mdiv(percent memory p, uint a) internal pure returns (uint) {\n    return a/p.num*p.den;\n  }\n\n  function msub(percent memory p, uint a) internal pure returns (uint) {\n    uint b = mmul(p, a);\n    if (b >= a) return 0; // solium-disable-line lbrace\n    return a - b;\n  }\n\n  function madd(percent memory p, uint a) internal pure returns (uint) {\n    return a + mmul(p, a);\n  }\n}\n\n\ncontract AO is Accessibility {\n  using Percent for Percent.percent;\n  using RecipientsStorage for RecipientsStorage.Storage;\n  \n  uint public payPaymentTime;\n  uint public payKeyIndex;\n  uint public payValue;\n\n  RecipientsStorage.Storage private m_recipients;\n  Percent.percent private m_winnersPercent = Percent.percent(3, 100);\n  Percent.percent private m_losersPercent = Percent.percent(97, 100);\n\n  event LogPayDividends(address indexed addr, uint dividends, bool isWinner, uint when);\n  event LogInsertRecipient(address indexed addr, uint value, bool isWinner, uint when);\n  event LogRemoveRecipient(address indexed addr, uint when);\n\n  constructor() public {\n    m_recipients.init();\n    payKeyIndex = m_recipients.iterStart();\n  }\n\n  function() external payable {}\n\n  function payoutIsDone() public view returns(bool done) {\n    return payKeyIndex == m_recipients.iterStart();\n  }\n\n  function losersValueSum() public view returns(uint sum) {\n    return m_recipients.losersValSum;\n  }\n\n  function winnersNumber() public view returns(uint number) {\n    return m_recipients.winnersNum;\n  }\n\n  function recipient(address addr) public view returns(uint value, bool isWinner, uint numerator, uint denominator) {\n    RecipientsStorage.Recipient memory r = m_recipients.recipient(addr);\n    (value, isWinner) = (r.value, r.isWinner);\n\n    if (r.isWinner) {\n      numerator = m_winnersPercent.num;\n      denominator = m_winnersPercent.den * m_recipients.winnersNum;\n    } else {\n      numerator = m_losersPercent.num * r.value;\n      denominator = m_losersPercent.den * m_recipients.losersValSum;\n    }\n  }\n\n  function recipientsSize() public view returns(uint size) {\n    return m_recipients.size;\n  }\n\n  function recipients() public view returns(address[] memory addrs, uint[] memory values, bool[] memory isWinners) {\n    addrs = new address[](m_recipients.size);\n    values = new uint[](m_recipients.size);\n    isWinners = new bool[](m_recipients.size);\n    RecipientsStorage.Recipient memory r;\n    uint i = m_recipients.iterStart();\n    uint c;\n\n    for (i; m_recipients.iterValid(i); i = m_recipients.iterNext(i)) {\n      (addrs[c], r) = m_recipients.iterGet(i);\n      values[c] = r.value;\n      isWinners[c] = r.isWinner;\n      c++;\n    }\n  }\n\n  function insertRecipients(address[] memory addrs, uint[] memory values, bool[] memory isWinners) public onlyAdmin(AccessRank.Full) {\n    require(addrs.length == values.length && values.length == isWinners.length, \"invalid arguments length\");\n    for (uint i; i < addrs.length; i++) {\n      if (addrs[i] == address(0x0)) {\n        continue;\n      }\n      if (m_recipients.insert(addrs[i], values[i], isWinners[i])) {\n        emit LogInsertRecipient(addrs[i], values[i], isWinners[i], now);\n      }\n    }\n  }\n\n  function removeRecipients(address[] memory addrs) public onlyAdmin(AccessRank.Full) {\n    for (uint i; i < addrs.length; i++) {\n      if (m_recipients.remove(addrs[i])) {\n        emit LogRemoveRecipient(addrs[i], now);\n      }\n    }\n  }\n\n  function payout() public onlyAdmin(AccessRank.Payout) { \n    if (payKeyIndex == m_recipients.iterStart()) {\n      require(address(this).balance > 0, \"zero balance\");\n      require(now > payPaymentTime + 12 hours, \"the latest payment was earlier than 12 hours\");\n      payPaymentTime = now;\n      payValue = address(this).balance;\n    }\n\n    uint dividends;\n    uint i = payKeyIndex;\n    uint valueForWinner = m_winnersPercent.mul(payValue) / m_recipients.winnersNum;\n    uint valueForLosers = m_losersPercent.mul(payValue);\n    RecipientsStorage.Recipient memory r;\n    address rAddr;\n\n    for (i; m_recipients.iterValid(i) && gasleft() > 60000; i = m_recipients.iterNext(i)) {\n      (rAddr, r) = m_recipients.iterGet(i);\n      if (r.isWinner) {\n        dividends = valueForWinner;\n      } else {\n        dividends = valueForLosers * r.value / m_recipients.losersValSum;\n      }\n      if (rAddr.send(dividends)) {\n        emit LogPayDividends(rAddr, dividends, r.isWinner, now);\n      }\n    }\n\n    if (m_recipients.iterValid(i)) {\n      payKeyIndex = i;\n    } else {\n      payKeyIndex = m_recipients.iterStart();\n    }\n  }\n}",
  "bytecode": "60036080819052606460a0819052600991909155600a819055610100604052606160c081905260e0829052600b55600c553480156200003d57600080fd5b503360008181526020818152604091829020805460ff191660039081179091558251908152429181019190915281517f2a16f14080a28ceceddaa6aaa1e999e6f0644b53fc745cdc40778179014147e9929181900390910190a2620000b1600464010000000062001339620000d482021704565b620000cb600464010000000062000efa620000ee82021704565b600255620001c1565b6001808201805491620000ea9190830162000167565b5050565b60006200010582826401000000006200010b810204565b92915050565b600181015b600183015481108015620001585750600183018054829081106200013057fe5b60009182526020909120015474010000000000000000000000000000000000000000900460ff165b15620001055760010162000110565b8154818355818111156200018e576000838152602090206200018e91810190830162000193565b505050565b620001be91905b80821115620001ba578054600160a860020a03191681556001016200019a565b5090565b90565b61139d80620001d16000396000f3006080604052600436106100cf5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630e57d4ce81146100d15780634fed5876146101c4578063639ab82f146101eb57806363bd1d4a1461024057806367cbd756146102555780636fae3d761461026a57806370671bdb146102af5780637649a2f2146102c4578063b3651eea146102d9578063c880e52014610320578063d40ae305146103e7578063d70d532b146103fc578063f2bd814a14610423578063fb86985814610438575b005b3480156100dd57600080fd5b506100e6610461565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561012e578181015183820152602001610116565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561016d578181015183820152602001610155565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156101ac578181015183820152602001610194565b50505050905001965050505050505060405180910390f35b3480156101d057600080fd5b506101d96105eb565b60408051918252519081900360200190f35b3480156101f757600080fd5b50604080516020600480358082013583810280860185019096528085526100cf953695939460249493850192918291850190849080828437509497506105f29650505050505050565b34801561024c57600080fd5b506100cf610722565b34801561026157600080fd5b506101d9610a4f565b34801561027657600080fd5b5061028b600160a060020a0360043516610a55565b6040518082600381111561029b57fe5b60ff16815260200191505060405180910390f35b3480156102bb57600080fd5b506101d9610a73565b3480156102d057600080fd5b506101d9610a79565b3480156102e557600080fd5b506102fa600160a060020a0360043516610a7f565b604080519485529215156020850152838301919091526060830152519081900360800190f35b34801561032c57600080fd5b50604080516020600480358082013583810280860185019096528085526100cf95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610ae99650505050505050565b3480156103f357600080fd5b506101d9610d1f565b34801561040857600080fd5b506100cf600160a060020a036004351660ff60243516610d25565b34801561042f57600080fd5b506101d9610edf565b34801561044457600080fd5b5061044d610ee5565b604080519115158252519081900360200190f35b606080606061046e6112c0565b6000806004600201546040519080825280602002602001820160405280156104a0578160200160208202803883390190505b5095506004600201546040519080825280602002602001820160405280156104d2578160200160208202803883390190505b509450600460020154604051908082528060200260200182016040528015610504578160200160208202803883390190505b5093506105116004610efa565b91505b61052560048363ffffffff610f0d16565b156105e35761053b60048363ffffffff610f1816565b60408051606081018252825481526001830154602082015260029092015460ff16151590820152875188908490811061057057fe5b600160a060020a0390931660209384029091018301529081015186519194509086908390811061059c57fe5b60209081029091010152604083015184518590839081106105b957fe5b9115156020928302909101909101526001016105dc60048363ffffffff610f5516565b9150610514565b505050909192565b6007545b90565b60006003803360009081526020819052604090205460ff16600381111561061557fe5b148061063e575060033360009081526020819052604090205460ff16600381111561063c57fe5b145b1515610682576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611352833981519152604482015290519081900360640190fd5b825182101561071d576106b4838381518110151561069c57fe5b6020908102909101015160049063ffffffff610fad16565b156107125782828151811015156106c757fe5b90602001906020020151600160a060020a03167fd4e93f81376413229b0b1fea2014406267b2486987352b6eb408c7db007e3d70426040518082815260200191505060405180910390a25b600190910190610682565b505050565b6000806000806107306112c0565b60006001803360009081526020819052604090205460ff16600381111561075357fe5b148061077c575060033360009081526020819052604090205460ff16600381111561077a57fe5b145b15156107c0576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611352833981519152604482015290519081900360640190fd5b6107ca6004610efa565b60025414156108b957600030311161082c576040805160e560020a62461bcd02815260206004820152600c60248201527f7a65726f2062616c616e63650000000000000000000000000000000000000000604482015290519081900360640190fd5b60015461a8c00142116108af576040805160e560020a62461bcd02815260206004820152602c60248201527f746865206c6174657374207061796d656e7420776173206561726c696572207460448201527f68616e20313220686f7572730000000000000000000000000000000000000000606482015290519081900360840190fd5b4260015530316003555b600254600854600354919750906108d89060099063ffffffff6110d116565b8115156108e157fe5b0494506108fa600354600b6110d190919063ffffffff16565b93505b61090e60048763ffffffff610f0d16565b801561091b575061ea605a115b15610a185761093160048763ffffffff610f1816565b60408051606081018252825481526001830154602082015260029092015460ff161580159183019190915290945090925061096e57849650610985565b6007546020840151850281151561098157fe5b0496505b604051600160a060020a0383169088156108fc029089906000818181858888f1935050505015610a00576040808401518151898152901515602082015242818301529051600160a060020a038416917f6ebfcaf3fb3591e2a1cb2ab472ba30d1c6ed3b7baca0670a414aac62e8f456ca919081900360600190a25b610a1160048763ffffffff610f5516565b95506108fd565b610a2960048763ffffffff610f0d16565b15610a38576002869055610a46565b610a426004610efa565b6002555b50505050505050565b60085490565b600160a060020a031660009081526020819052604090205460ff1690565b60025481565b60035481565b600080600080610a8d6112c0565b610a9e60048763ffffffff6110fc16565b60208101516040820151909650945090508315610ac957600954600854600a54919450029150610ae1565b6020810151600b54600754600c549190920294500291505b509193509193565b60006003803360009081526020819052604090205460ff166003811115610b0c57fe5b1480610b35575060033360009081526020819052604090205460ff166003811115610b3357fe5b145b1515610b79576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611352833981519152604482015290519081900360640190fd5b83518551148015610b8b575082518451145b1515610be1576040805160e560020a62461bcd02815260206004820152601860248201527f696e76616c696420617267756d656e7473206c656e6774680000000000000000604482015290519081900360640190fd5b8451821015610d18578451600090869084908110610bfb57fe5b90602001906020020151600160a060020a03161415610c1957610d0d565b610c748583815181101515610c2a57fe5b906020019060200201518584815181101515610c4257fe5b906020019060200201518585815181101515610c5a57fe5b60209081029091010151600492919063ffffffff61115016565b15610d0d578482815181101515610c8757fe5b90602001906020020151600160a060020a03167f0681a58a5f756f5c8ce7a0fbee919fdb0b1f82f9a339c711cbb7e8c76690188a8584815181101515610cc957fe5b906020019060200201518585815181101515610ce157fe5b602090810290910181015160408051938452901515918301919091524282820152519081900360600190a25b600190910190610be1565b5050505050565b60015481565b6002803360009081526020819052604090205460ff166003811115610d4657fe5b1480610d6f575060033360009081526020819052604090205460ff166003811115610d6d57fe5b145b1515610db3576040805160e560020a62461bcd02815260206004820152600d6024820152600080516020611352833981519152604482015290519081900360640190fd5b6002826003811115610dc157fe5b1115610e17576040805160e560020a62461bcd02815260206004820152601f60248201527f63616e6e6f7420746f20676976652066756c6c206163636573732072616e6b00604482015290519081900360640190fd5b816003811115610e2357fe5b600160a060020a03841660009081526020819052604090205460ff166003811115610e4a57fe5b1461071d57600160a060020a0383166000908152602081905260409020805483919060ff19166001836003811115610e7e57fe5b021790555082600160a060020a03167f2a16f14080a28ceceddaa6aaa1e999e6f0644b53fc745cdc40778179014147e9834260405180836003811115610ec057fe5b60ff1681526020018281526020019250505060405180910390a2505050565b60065490565b6000610ef16004610efa565b60025414905090565b6000610f07826000610f55565b92915050565b600191909101541190565b6000808360010183815481101515610f2c57fe5b6000918252602080832090910154600160a060020a031680835295905260409020939492505050565b600181015b600183015481108015610fa0575060018301805482908110610f7857fe5b60009182526020909120015474010000000000000000000000000000000000000000900460ff165b15610f0757600101610f5a565b600160a060020a038116600090815260208390526040812054801515610fd657600091506110ca565b600160a060020a03831660009081526020859052604090206002015460ff161561100b57600484018054600019019055611034565b600160a060020a0383166000908152602085905260409020600101546003850180549190910390555b600160a060020a0383166000908152602085905260408120818155600180820192909255600201805460ff1916905580850180548390811061107257fe5b60009182526020909120018054911515740100000000000000000000000000000000000000000274ff000000000000000000000000000000000000000019909216919091179055600284018054600019019055600191505b5092915050565b60008115156110e257506000610f07565b6001830154835483028115156110f457fe5b049392505050565b6111046112c0565b5060408051606081018252600160a060020a0383166000818152602086815284822080548552600181015482860152929091528590526002015460ff1615159181019190915292915050565b600160a060020a0383166000908152602085905260408120805460029091015460ff1615156111a257600160a060020a0385166000908152602087905260409020600101546003870180549190910390555b8215156111b457600386018054850190555b8280156111dd5750600160a060020a03851660009081526020879052604090206002015460ff16155b156111ee5760048601805460010190555b600160a060020a038516600090815260208790526040812060018101869055600201805460ff191685151517905581111561122c57600191506112b7565b6001808701805491611240919083016112e4565b600160a060020a038616600090815260208890526040902081905560018701805491925086918390811061127057fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600286018054600190810190915591505b50949350505050565b60606040519081016040528060008152602001600081526020016000151581525090565b81548183558181111561071d5760008381526020902061071d9181019083016105ef91905b8082111561133557805474ffffffffffffffffffffffffffffffffffffffffff19168155600101611309565b5090565b600180820180549161134d919083016112e4565b505056006163636573732064656e69656400000000000000000000000000000000000000a165627a7a72305820382317e87283a45bbee04d7438c83d4bf51a7cda359f148c7801cbd5ff3073eb0029"
}