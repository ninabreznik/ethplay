{
  "address": "0xa706f6be7284aafb91fbc13a8330d9db02a72451",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PayeeShare",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-07\n*/\n\npragma solidity > 0.4.99 <0.6.0;\n\ninterface IERC20Token {\n    function balanceOf(address owner) external returns (uint256);\n    function transfer(address to, uint256 amount) external returns (bool);\n    function burn(uint256 _value) external returns (bool);\n    function decimals() external returns (uint256);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n}\n\ncontract Ownable {\n  address payable public _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n  * account.\n  */\n  constructor() internal {\n    _owner = tx.origin;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n  * @return the address of the owner.\n  */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n  * @dev Throws if called by any account other than the owner.\n  */\n  modifier onlyOwner() {\n    require(isOwner());\n    _;\n  }\n\n  /**\n  * @return true if `msg.sender` is the owner of the contract.\n  */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n  * @dev Allows the current owner to relinquish control of the contract.\n  * @notice Renouncing to ownership will leave the contract without an owner.\n  * It will not be possible to call the functions with the `onlyOwner`\n  * modifier anymore.\n  */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\n  * @param newOwner The address to transfer ownership to.\n  */\n  function transferOwnership(address payable newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n  * @dev Transfers control of the contract to a newOwner.\n  * @param newOwner The address to transfer ownership to.\n  */\n  function _transferOwnership(address payable newOwner) internal {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract PayeeShare is Ownable{\n    \n    struct Payee {\n        address payable payee;\n        uint payeePercentage;\n    }\n    \n    Payee[] public payees;\n    \n    string public constant createdBy = \"AssetSplit.org - the guys who cut the pizza\";\n    \n    IERC20Token public tokenContract;\n    \n    bool processingPayout = false;\n    \n    uint256 public payeePartsLeft = 100;\n    uint256 public payeePartsToSell = 0;\n    uint256 public payeePricePerPart = 0;\n    \n    uint256 public lockedToken;\n    uint256 public lockedTokenTime;\n    uint256 minTokenTransfer = 1;\n    \n    using SafeMath for uint256;\n    \n    event TokenPayout(address receiver, uint256 value, string memberOf);\n    event EtherPayout(address receiver, uint256 value, string memberOf);\n    event PayeeAdded(address payee, uint256 partsPerFull);\n    event LockedTokensUnlocked();\n    \n    constructor(address _tokenContract, uint256 _lockedToken, uint256 _lockedTokenTime) public {\n        tokenContract = IERC20Token(_tokenContract);\n        lockedToken = _lockedToken;\n        lockedTokenTime = _lockedTokenTime;\n    }\n\n    function getPayeeLenght() public view returns (uint256) {\n        return payees.length;\n    }\n    \n     function getLockedToken() public view returns (uint256) {\n        return lockedToken;\n    }\n    \n    function addPayee(address payable _address, uint _payeePercentage) public payable {\n        if (msg.sender == _owner) {\n        require(payeePartsLeft >= _payeePercentage);\n        payeePartsLeft = payeePartsLeft.sub(_payeePercentage);\n        payees.push(Payee(_address, _payeePercentage));\n        emit PayeeAdded(_address, _payeePercentage);\n        }\n        else if (msg.value == _payeePercentage.mul(payeePricePerPart)) {\n        if (address(this).balance > 0) {\n          etherPayout();\n        }\n        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 1) {\n          tokenPayout();\n        }\n            require(payeePartsLeft >= _payeePercentage);\n            require(payeePartsToSell >= _payeePercentage);\n            require(tx.origin == msg.sender);\n            payeePartsToSell = payeePartsToSell.sub(_payeePercentage);\n            payeePartsLeft = payeePartsLeft.sub(_payeePercentage);\n            payees.push(Payee(tx.origin, _payeePercentage));\n            emit PayeeAdded(tx.origin, _payeePercentage);\n        } else revert();\n    } \n    \n    function setPartsToSell(uint256 _parts, uint256 _price) public onlyOwner {\n        require(payeePartsLeft >= _parts);\n        payeePartsToSell = _parts;\n        payeePricePerPart = _price;\n    }\n    \n    function etherPayout() public {\n        require(processingPayout == false);\n        processingPayout = true;\n        uint256 receivedValue = address(this).balance;\n        uint counter = 0;\n        for (uint i = 0; i < payees.length; i++) {\n           Payee memory myPayee = payees[i];\n           myPayee.payee.transfer((receivedValue.mul(myPayee.payeePercentage).div(100)));\n           emit EtherPayout(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100), \"Shareholder\");\n            counter++;\n          }\n        if(address(this).balance > 0) {\n            _owner.transfer(address(this).balance);\n            emit EtherPayout(_owner, address(this).balance, \"Owner\");\n        }\n        processingPayout = false;\n    }\n    \n     function tokenPayout() public payable {\n        require(processingPayout == false);\n        require(tokenContract.balanceOf(address(this)) >= lockedToken.add((minTokenTransfer.mul(10 ** tokenContract.decimals()))));\n        processingPayout = true;\n        uint256 receivedValue = tokenContract.balanceOf(address(this)).sub(lockedToken);\n        uint counter = 0;\n        for (uint i = 0; i < payees.length; i++) {\n           Payee memory myPayee = payees[i];\n           tokenContract.transfer(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100));\n           emit TokenPayout(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100), \"Shareholder\");\n            counter++;\n          } \n        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 0) {\n            tokenContract.transfer(_owner, tokenContract.balanceOf(address(this)).sub(lockedToken));\n            emit TokenPayout(_owner, tokenContract.balanceOf(address(this)).sub(lockedToken), \"Owner\");\n        }\n        processingPayout = false;\n    }\n    \n    function payoutLockedToken() public payable onlyOwner {\n        require(processingPayout == false);\n        require(now > lockedTokenTime);\n        require(tokenContract.balanceOf(address(this)) >= lockedToken);\n        lockedToken = 0;\n        if (address(this).balance > 0) {\n          etherPayout();\n        }\n        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 1) {\n          tokenPayout();\n        }\n        processingPayout = true;\n        emit LockedTokensUnlocked();\n        tokenContract.transfer(_owner, tokenContract.balanceOf(address(this)));\n        processingPayout = false;\n    }\n    \n    function() external payable {\n    }\n}",
  "bytecode": "60806040526000600260146101000a81548160ff021916908315150217905550606460035560006004556000600555600160085534801561003f57600080fd5b506040516060806125158339810180604052606081101561005f57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050326000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a382600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160068190555080600781905550505050612374806101a16000396000f3fe60806040526004361061013c576000357c010000000000000000000000000000000000000000000000000000000090048063715018a6116100bd578063b2bdfa7b11610081578063b2bdfa7b14610494578063c3a3ee80146104eb578063d9bfbcd914610530578063dce388b61461055b578063f2fde38b146105865761013c565b8063715018a6146103c25780638366ee2b146103d957806387b551b5146104045780638da5cb5b1461040e5780638f32d59b146104655761013c565b80632c3dcc50116101045780632c3dcc50146102035780633366eeb21461022e5780633a5673a41461025957806355a373d6146102e957806363037b0c146103405761013c565b80630ead3ec81461013e5780630f45cc81146101695780630f78ee7c1461019457806318f9b0231461019e57806323d1b8eb146101ec575b005b34801561014a57600080fd5b506101536105d7565b6040518082815260200191505060405180910390f35b34801561017557600080fd5b5061017e6105dd565b6040518082815260200191505060405180910390f35b61019c6105e3565b005b6101ea600480360360408110156101b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610afb565b005b3480156101f857600080fd5b50610201610fb2565b005b34801561020f57600080fd5b506102186113ac565b6040518082815260200191505060405180910390f35b34801561023a57600080fd5b506102436113b2565b6040518082815260200191505060405180910390f35b34801561026557600080fd5b5061026e6113bc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ae578082015181840152602081019050610293565b50505050905090810190601f1680156102db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102f557600080fd5b506102fe6113d9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561034c57600080fd5b506103796004803603602081101561036357600080fd5b81019080803590602001909291905050506113ff565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b3480156103ce57600080fd5b506103d7611452565b005b3480156103e557600080fd5b506103ee611524565b6040518082815260200191505060405180910390f35b61040c611531565b005b34801561041a57600080fd5b50610423612060565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561047157600080fd5b5061047a612089565b604051808215151515815260200191505060405180910390f35b3480156104a057600080fd5b506104a96120e0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104f757600080fd5b5061052e6004803603604081101561050e57600080fd5b810190808035906020019092919080359060200190929190505050612105565b005b34801561053c57600080fd5b5061054561213b565b6040518082815260200191505060405180910390f35b34801561056757600080fd5b50610570612141565b6040518082815260200191505060405180910390f35b34801561059257600080fd5b506105d5600480360360208110156105a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612147565b005b60055481565b60065481565b6105eb612089565b15156105f657600080fd5b60001515600260149054906101000a900460ff16151514151561061857600080fd5b6007544211151561062857600080fd5b600654600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156106e857600080fd5b505af11580156106fc573d6000803e3d6000fd5b505050506040513d602081101561071257600080fd5b81019080805190602001909291905050501015151561073057600080fd5b600060068190555060003073ffffffffffffffffffffffffffffffffffffffff1631111561076157610760610fb2565b5b600161086f600654600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561082657600080fd5b505af115801561083a573d6000803e3d6000fd5b505050506040513d602081101561085057600080fd5b810190808051906020019092919050505061216690919063ffffffff16565b111561087e5761087d611531565b5b6001600260146101000a81548160ff0219169083151502179055507f6230c817254ff1969790b994503ac3aa7c0551db994c951e30df61cd6413c7c760405160405180910390a1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156109e257600080fd5b505af11580156109f6573d6000803e3d6000fd5b505050506040513d6020811015610a0c57600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610aa257600080fd5b505af1158015610ab6573d6000803e3d6000fd5b505050506040513d6020811015610acc57600080fd5b8101908080519060200190929190505050506000600260146101000a81548160ff021916908315150217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610c98578060035410151515610b6157600080fd5b610b768160035461216690919063ffffffff16565b600381905550600160408051908101604052808473ffffffffffffffffffffffffffffffffffffffff168152602001838152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050507f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1610fae565b610cad6005548261217f90919063ffffffff16565b341415610fa85760003073ffffffffffffffffffffffffffffffffffffffff16311115610cdd57610cdc610fb2565b5b6001610deb600654600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610da257600080fd5b505af1158015610db6573d6000803e3d6000fd5b505050506040513d6020811015610dcc57600080fd5b810190808051906020019092919050505061216690919063ffffffff16565b1115610dfa57610df9611531565b5b8060035410151515610e0b57600080fd5b8060045410151515610e1c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515610e5657600080fd5b610e6b8160045461216690919063ffffffff16565b600481905550610e868160035461216690919063ffffffff16565b600381905550600160408051908101604052803273ffffffffffffffffffffffffffffffffffffffff168152602001838152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050507f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac3282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1610fad565b600080fd5b5b5050565b60001515600260149054906101000a900460ff161515141515610fd457600080fd5b6001600260146101000a81548160ff02191690831515021790555060003073ffffffffffffffffffffffffffffffffffffffff16319050600080905060008090505b6001805490508110156112105761102b6122ed565b60018281548110151561103a57fe5b90600052602060002090600202016040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050806000015173ffffffffffffffffffffffffffffffffffffffff166108fc6110fd60646110ef85602001518961217f90919063ffffffff16565b6121ba90919063ffffffff16565b9081150290604051600060405180830381858888f19350505050158015611128573d6000803e3d6000fd5b507f7b1915f1ae57d8d86ff61ec338136f50004fc068b9a39c08f43afc42f89b883c8160000151611179606461116b85602001518961217f90919063ffffffff16565b6121ba90919063ffffffff16565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001806020018281038252600b8152602001807f5368617265686f6c646572000000000000000000000000000000000000000000815250602001935050505060405180910390a18280600101935050508080600101915050611016565b5060003073ffffffffffffffffffffffffffffffffffffffff1631111561138d576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156112af573d6000803e3d6000fd5b507f7b1915f1ae57d8d86ff61ec338136f50004fc068b9a39c08f43afc42f89b883c6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1631604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200180602001828103825260058152602001807f4f776e6572000000000000000000000000000000000000000000000000000000815250602001935050505060405180910390a15b6000600260146101000a81548160ff0219169083151502179055505050565b60035481565b6000600654905090565b606060405190810160405280602b815260200161231e602b913981565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018181548110151561140e57fe5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b61145a612089565b151561146557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600180549050905090565b60001515600260149054906101000a900460ff16151514151561155357600080fd5b61163f61162e600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156115df57600080fd5b505af11580156115f3573d6000803e3d6000fd5b505050506040513d602081101561160957600080fd5b8101908080519060200190929190505050600a0a60085461217f90919063ffffffff16565b6006546121d590919063ffffffff16565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156116fc57600080fd5b505af1158015611710573d6000803e3d6000fd5b505050506040513d602081101561172657600080fd5b81019080805190602001909291905050501015151561174457600080fd5b6001600260146101000a81548160ff021916908315150217905550600061186d600654600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561182457600080fd5b505af1158015611838573d6000803e3d6000fd5b505050506040513d602081101561184e57600080fd5b810190808051906020019092919050505061216690919063ffffffff16565b9050600080905060008090505b600180549050811015611b2e5761188f6122ed565b60018281548110151561189e57fe5b90600052602060002090600202016040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260000151611986606461197886602001518a61217f90919063ffffffff16565b6121ba90919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611a0b57600080fd5b505af1158015611a1f573d6000803e3d6000fd5b505050506040513d6020811015611a3557600080fd5b8101908080519060200190929190505050507fede359a9cbdf682fc00d6db6d5e05f710a5c0a56b7dbcb8486431bc4e569736c8160000151611a976064611a8985602001518961217f90919063ffffffff16565b6121ba90919063ffffffff16565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001806020018281038252600b8152602001807f5368617265686f6c646572000000000000000000000000000000000000000000815250602001935050505060405180910390a1828060010193505050808060010191505061187a565b506000611c3d600654600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611bf457600080fd5b505af1158015611c08573d6000803e3d6000fd5b505050506040513d6020811015611c1e57600080fd5b810190808051906020019092919050505061216690919063ffffffff16565b111561204157600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611daf600654600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611d6657600080fd5b505af1158015611d7a573d6000803e3d6000fd5b505050506040513d6020811015611d9057600080fd5b810190808051906020019092919050505061216690919063ffffffff16565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611e3457600080fd5b505af1158015611e48573d6000803e3d6000fd5b505050506040513d6020811015611e5e57600080fd5b8101908080519060200190929190505050507fede359a9cbdf682fc00d6db6d5e05f710a5c0a56b7dbcb8486431bc4e569736c6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611fbf600654600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611f7657600080fd5b505af1158015611f8a573d6000803e3d6000fd5b505050506040513d6020811015611fa057600080fd5b810190808051906020019092919050505061216690919063ffffffff16565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200180602001828103825260058152602001807f4f776e6572000000000000000000000000000000000000000000000000000000815250602001935050505060405180910390a15b6000600260146101000a81548160ff0219169083151502179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61210d612089565b151561211857600080fd5b816003541015151561212957600080fd5b81600481905550806005819055505050565b60075481565b60045481565b61214f612089565b151561215a57600080fd5b612163816121f3565b50565b600082821115151561217457fe5b818303905092915050565b60008083141561219257600090506121b4565b600082840290508284828115156121a557fe5b041415156121af57fe5b809150505b92915050565b60008082848115156121c857fe5b0490508091505092915050565b60008082840190508381101515156121e957fe5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561222f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152509056fe417373657453706c69742e6f7267202d2074686520677579732077686f20637574207468652070697a7a61a165627a7a723058209911d7780a9d0796e31b3bd402849a4235f208aa13b10a8120401466476811eb00290000000000000000000000002d1e23144b89fc7364ed3efcd5af04093f7d9a3d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000002d1e23144b89fc7364ed3efcd5af04093f7d9a3d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}