{
  "address": "0xcf44c66c6a7d33e7af1054a6efc2cfe3d8f6a37b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Freebies",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-02\n*/\n\npragma solidity ^0.5.7;\n\n/**\n * Copy right (c) Donex UG (haftungsbeschraenkt)\n * All rights reserved\n * Version 0.2.1 (BETA)\n */\n\ncontract Freebies\n{\n\n    address owner;\n    address payable public masterAddress;\n\n    uint public deadline;\n    mapping(address => bool) gotFreebie;\n    mapping(address => bool) isMakerWithFreebiePermission;\n    mapping(address => address) makersDerivative;\n    uint public freebie;\n    uint8 public maxNumberOfFreebies;\n    uint8 public numberOfGivenFreebies;\n\n    modifier onlyByOwner() {\n        require(msg.sender ==  owner);\n        _;\n    }\n\n    modifier deadlineExceeded() {\n        require(now > deadline);\n        _;\n    }\n\n    constructor (address payable _masterAddress, uint8 _maxNumberOfFreebies, uint _deadline)\n        payable\n        public\n    {\n        owner = msg.sender;\n        maxNumberOfFreebies = _maxNumberOfFreebies;\n        freebie = msg.value / maxNumberOfFreebies;\n        numberOfGivenFreebies = 0;\n        deadline = _deadline;\n        masterAddress = _masterAddress;\n    }\n\n    /**\n     * @notice The aim is to create a derivative and find someone to buy the counter position\n     * @param long Decide if you want to be in the long or short position of your contract\n     * @param dueDate Set a due date of your contract. Make sure this is supported by us. Use OD.exchange to avoid conflicts here.\n     * @param strikePrice Choose a strike price which will be used at due date for calculation of your payout. Make sure that the format is correct. Use OD.exchange to avoid mistakes.\n     */\n    function createContractWithFreebie (\n        bool long,\n        uint256 dueDate,\n        uint256 strikePrice\n    )\n        payable\n        public\n    {\n        // New derivative must be created before deadline exceeded\n        require(now < deadline);\n\n        // Only once per maker address\n        require(!isMakerWithFreebiePermission[msg.sender]);\n        isMakerWithFreebiePermission[msg.sender] = true;\n\n        // Only first customers get freebie\n        numberOfGivenFreebies += 1;\n        require(numberOfGivenFreebies <= maxNumberOfFreebies);\n\n        Master master = Master(masterAddress);\n\n        // Create new derivative from factory\n        address newConditionalPayment = master.createConditionalPayment.value(msg.value)\n        (\n            msg.sender,\n            long,\n            dueDate,\n            strikePrice\n        );\n\n        // Attribute derivative to maker\n        makersDerivative[msg.sender] = newConditionalPayment;\n    }\n\n    /**\n     *  @notice Withdraw the freebie after creation of derivative and finding counter party\n     */\n    function withdrawFreebie ()\n        public\n    {\n        // Maker needs to have permission\n        require(isMakerWithFreebiePermission[msg.sender]);\n\n        // Only one withdraw per maker\n        require(!gotFreebie[msg.sender]);\n        gotFreebie[msg.sender] = true;\n\n        ConditionalPayment conditionalPayment = ConditionalPayment(makersDerivative[msg.sender]);\n\n        // Derivative needs to have at least one taker\n        require(conditionalPayment.countCounterparties() > 0);\n\n        msg.sender.transfer(freebie);\n    }\n\n    /**\n     * @notice Owner can kick unsuccessful makers who did not succeed to find a taker before the deadline\n     */\n    function kick (address unsuccessfulMaker)\n        public\n        onlyByOwner\n        deadlineExceeded\n    {\n        ConditionalPayment conditionalPayment = ConditionalPayment(makersDerivative[unsuccessfulMaker]);\n\n        // Unsuccessful criterium\n        require(conditionalPayment.countCounterparties() == 0);\n\n        // Disqualify maker from freebie\n        isMakerWithFreebiePermission[unsuccessfulMaker] = false;\n\n        // Freebie can be given to new maker\n        require(numberOfGivenFreebies > 0);\n        numberOfGivenFreebies -= 1;\n    }\n\n    function withdrawUnusedFreebies ()\n        public\n        onlyByOwner\n        deadlineExceeded\n    {\n        msg.sender.transfer((maxNumberOfFreebies - numberOfGivenFreebies)*freebie);\n    }\n\n}\n\n\ninterface Master {\n\n  function createConditionalPayment\n  (\n      address payable,\n      bool,\n      uint256,\n      uint256\n  )\n      payable\n      external\n      returns(address newDerivativeAddress);\n\n}\n\ninterface ConditionalPayment {\n\n  function countCounterparties() external returns(uint8);\n\n}",
  "bytecode": "6080604052604051606080610be38339810180604052606081101561002357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548160ff021916908360ff160217905550600760009054906101000a900460ff1660ff1634816100be57fe5b046006819055506000600760016101000a81548160ff021916908360ff1602179055508060028190555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050610aa88061013b6000396000f3fe6080604052600436106100865760003560e01c8063869e3c5011610059578063869e3c501461013c57806388137bb71461016d57806396c551751461019e578063cb61a9b0146101ef578063d365a08e1461020657610086565b806329dcb0cf1461008b57806341a89c0c146100b65780636209b82d146100cd5780636a9852b114610111575b600080fd5b34801561009757600080fd5b506100a061025d565b6040518082815260200191505060405180910390f35b3480156100c257600080fd5b506100cb610263565b005b61010f600480360360608110156100e357600080fd5b81019080803515159060200190929190803590602001909291908035906020019092919050505061033a565b005b34801561011d57600080fd5b506101266105dd565b6040518082815260200191505060405180910390f35b34801561014857600080fd5b506101516105e3565b604051808260ff1660ff16815260200191505060405180910390f35b34801561017957600080fd5b506101826105f6565b604051808260ff1660ff16815260200191505060405180910390f35b3480156101aa57600080fd5b506101ed600480360360208110156101c157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610609565b005b3480156101fb57600080fd5b5061020461080f565b005b34801561021257600080fd5b5061021b610a56565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60025481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102bc57600080fd5b60025442116102ca57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600654600760019054906101000a900460ff16600760009054906101000a900460ff160360ff16029081150290604051600060405180830381858888f19350505050158015610337573d6000803e3d6000fd5b50565b600254421061034857600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561039f57600080fd5b6001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600760018282829054906101000a900460ff160192506101000a81548160ff021916908360ff160217905550600760009054906101000a900460ff1660ff16600760019054906101000a900460ff1660ff16111561045657600080fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663c9ffe7bd34338888886040518663ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001841515151581526020018381526020018281526020019450505050506020604051808303818588803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b50505050506040513d602081101561054557600080fd5b8101908080519060200190929190505050905080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60065481565b600760019054906101000a900460ff1681565b600760009054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066257600080fd5b600254421161067057600080fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663ab2abfcc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561071e57600080fd5b505af1158015610732573d6000803e3d6000fd5b505050506040513d602081101561074857600080fd5b810190808051906020019092919050505060ff161461076657600080fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600760019054906101000a900460ff1660ff16116107dd57600080fd5b6001600760018282829054906101000a900460ff160392506101000a81548160ff021916908360ff1602179055505050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661086557600080fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156108bc57600080fd5b6001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663ab2abfcc6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156109c257600080fd5b505af11580156109d6573d6000803e3d6000fd5b505050506040513d60208110156109ec57600080fd5b810190808051906020019092919050505060ff1611610a0a57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc6006549081150290604051600060405180830381858888f19350505050158015610a52573d6000803e3d6000fd5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea165627a7a723058206a1e1b2b0387150242f9ebd929fb00835fe00da4ad37cf0b2613bfe5c4a1b828002900000000000000000000000077d774c419d0d6357f7a23f0f512e63528c779320000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000005cdf20d0",
  "constructorArguments": "00000000000000000000000077d774c419d0d6357f7a23f0f512e63528c779320000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000005cdf20d0"
}