{
  "address": "0x81f98e38b7d4070a445eba62d61885b98e1c05d6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MarketplaceToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-23\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ninterface ERC20 {\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function approve(address spender, uint256 value) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface ERC223 {\n    function transfer(address to, uint value, bytes data) public;\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\n\ncontract ERC223ReceivingContract { \n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract MarketplaceToken is ERC20, ERC223 {\n    using SafeMath for uint;\n    \n    address creator;\n    string internal _name;\n    string internal _symbol;\n    uint8 internal _decimals;\n    uint256 internal _totalSupply;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n    \n    event Burn(address indexed from, uint256 value);\n    constructor() public {\n        _symbol = \"MKTP\";\n        _name = \"Marketplace Token\";\n        _decimals = 5;\n        _totalSupply = 70000000 * 10 ** uint256(_decimals);\n        balances[msg.sender] = _totalSupply;\n        creator = msg.sender;\n    }\n\n    modifier onlyCreator() {\n        if(msg.sender != creator){\n            revert();\n        }\n        _;\n    }\n\n    function name()\n        public\n        view\n        returns (string) {\n        return _name;\n    }\n\n    function symbol()\n        public\n        view\n        returns (string) {\n        return _symbol;\n    }\n\n    function decimals()\n        public\n        view\n        returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply()\n        public\n        view\n        returns (uint256) {\n        return _totalSupply;\n    }\n\n    function changeCreator(address _newCreator) onlyCreator public returns (bool) {\n        if(creator != _newCreator) {\n            creator = _newCreator;\n            return true;\n        } else {\n            revert();\n        }\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n        balances[_to] = SafeMath.add(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        \n        balances[_from] = SafeMath.sub(balances[_from], _value);\n        balances[_to] = SafeMath.add(balances[_to], _value);\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n   }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    function transfer(address _to, uint _value, bytes _data) public {\n        require(_value > 0 );\n        if(isContract(_to)) {\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n            receiver.tokenFallback(msg.sender, _value, _data);\n        }\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value, _data);\n    }\n    \n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length>0);\n    }\n\n    function burn(uint256 _value) public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _owner, uint256 _value) internal {\n        // Check if the sender has enough\n        require(balances[_owner] >= _value);\n\n        // Subtract from the sender\n        balances[_owner] = balances[_owner].sub(_value);\n\n        // Updates totalSupply\n        _totalSupply = _totalSupply.sub(_value);\n\n        emit Transfer(_owner, address(0), _value);\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040805180820190915260048082527f4d4b5450000000000000000000000000000000000000000000000000000000006020909201918252610055916002916100e8565b506040805180820190915260118082527f4d61726b6574706c61636520546f6b656e000000000000000000000000000000602090920191825261009a916001916100e8565b5060038054600560ff1990911681179182905560ff909116600a0a63042c1d8002600481905533600081815260209390935260408320919091558154600160a060020a031916179055610183565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012957805160ff1916838001178555610156565b82800160010185558215610156579182015b8281111561015657825182559160200191906001019061013b565b50610162929150610166565b5090565b61018091905b80821115610162576000815560010161016c565b90565b610c94806101926000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd578063313ce567146101e757806342966c6814610212578063661884631461022c57806370a082311461025057806374580e2f1461027157806395d89b4114610292578063a9059cbb146102a7578063be45fd62146102cb578063d73dd62314610334578063dd62ed3e14610358575b600080fd5b3480156100e057600080fd5b506100e961037f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a0360043516602435610414565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab61047a565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a0360043581169060243516604435610480565b3480156101f357600080fd5b506101fc6105e7565b6040805160ff9092168252519081900360200190f35b34801561021e57600080fd5b5061022a6004356105f0565b005b34801561023857600080fd5b50610182600160a060020a03600435166024356105fd565b34801561025c57600080fd5b506101ab600160a060020a03600435166106e7565b34801561027d57600080fd5b50610182600160a060020a0360043516610706565b34801561029e57600080fd5b506100e9610763565b3480156102b357600080fd5b50610182600160a060020a03600435166024356107c1565b3480156102d757600080fd5b50604080516020600460443581810135601f810184900484028501840190955284845261022a948235600160a060020a03169460248035953695946064949201919081908401838280828437509497506108989650505050505050565b34801561034057600080fd5b50610182600160a060020a0360043516602435610ab0565b34801561036457600080fd5b506101ab600160a060020a0360043581169060243516610b43565b60018054604080516020601f6002600019610100878916150201909516949094049384018190048102820181019092528281526060939092909183018282801561040a5780601f106103df5761010080835404028352916020019161040a565b820191906000526020600020905b8154815290600101906020018083116103ed57829003601f168201915b5050505050905090565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045490565b6000600160a060020a038316151561049757600080fd5b600160a060020a0384166000908152600560205260409020548211156104bc57600080fd5b600160a060020a03841660009081526006602090815260408083203384529091529020548211156104ec57600080fd5b600160a060020a03841660009081526005602052604090205461050f9083610b6e565b600160a060020a03808616600090815260056020526040808220939093559085168152205461053e9083610b85565b600160a060020a03808516600090815260056020908152604080832094909455918716815260068252828120338252909152205461057c9083610b6e565b600160a060020a03808616600081815260066020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60035460ff1690565b6105fa3382610b9e565b50565b336000908152600660209081526040808320600160a060020a03861684529091528120548083111561065257336000908152600660209081526040808320600160a060020a0388168452909152812055610681565b61065c8184610b6e565b336000908152600660209081526040808320600160a060020a03891684529091529020555b336000818152600660209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a0381166000908152600560205260409020545b919050565b60008054600160a060020a0316331461071e57600080fd5b600054600160a060020a038381169116146100cf57506000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790556001610701565b60028054604080516020601f600019610100600187161502019094168590049384018190048102820181019092528281526060939092909183018282801561040a5780601f106103df5761010080835404028352916020019161040a565b6000600160a060020a03831615156107d857600080fd5b336000908152600560205260409020548211156107f457600080fd5b3360009081526005602052604090205461080e9083610b6e565b3360009081526005602052604080822092909255600160a060020a0385168152205461083a9083610b85565b600160a060020a0384166000818152600560209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008083116108a657600080fd5b6108af84610c60565b156109a357506040517fc0ee0b8a0000000000000000000000000000000000000000000000000000000081523360048201818152602483018590526060604484019081528451606485015284518794600160a060020a0386169463c0ee0b8a9490938993899360840190602085019080838360005b8381101561093c578181015183820152602001610924565b50505050905090810190601f1680156109695780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561098a57600080fd5b505af115801561099e573d6000803e3d6000fd5b505050505b336000908152600560205260409020546109c3908463ffffffff610b6e16565b3360009081526005602052604080822092909255600160a060020a038616815220546109f5908463ffffffff610b8516565b600160a060020a0385166000908152600560209081526040918290209290925551835184928291908401908083835b60208310610a435780518252601f199092019160209182019101610a24565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208983529351939550600160a060020a038a16945033937fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c169350918290030190a450505050565b336000908152600660209081526040808320600160a060020a0386168452909152812054610ade9083610b85565b336000818152600660209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b60008083831115610b7e57600080fd5b5050900390565b600082820183811015610b9757600080fd5b9392505050565b600160a060020a038216600090815260056020526040902054811115610bc357600080fd5b600160a060020a038216600090815260056020526040902054610bec908263ffffffff610b6e16565b600160a060020a038316600090815260056020526040902055600454610c18908263ffffffff610b6e16565b600455604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000903b11905600a165627a7a72305820f86cdf3c5af1b8532a5d46183a01740ee1e2dbc378665eaa4962f44112319fd10029"
}