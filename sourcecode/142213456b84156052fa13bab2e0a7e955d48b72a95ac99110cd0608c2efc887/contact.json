{
  "address": "0xb69096a89389638518725adfcf279f3f82efa2de",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NOLLYCOIN",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-20\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address who) constant returns(uint256);\n    function transfer(address to, uint256 value) returns(bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    function allowance(address owner, address spender) constant returns(uint256);\n    function transferFrom(address from, address to, uint256 value) returns(bool);\n    function approve(address spender, uint256 value) returns(bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\ncontract BasicToken is ERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n\n    function transfer(address _to, uint256 _value) returns (bool) {\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }else {\n            return false;\n        }\n    }\n    \n\n\n    /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n            uint256 _allowance = allowed[_from][msg.sender];\n            allowed[_from][msg.sender] = _allowance.sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            balances[_from] = balances[_from].sub(_value);\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n\n    function balanceOf(address _owner) constant returns(uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns(bool) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n     */\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n\n}\n\n\ncontract NOLLYCOIN is BasicToken {\n\n    using SafeMath for uint256;\n\n    string public name = \"Nolly Coin\";                        //name of the token\n    string public symbol = \"NOLLY\";                                // symbol of the token\n    uint8 public decimals = 18;                                  // decimals\n    uint256 public totalSupply = 500000000 * 10 ** 18;             // total supply of NOLLY Tokens  \n\n    // variables\n    uint256 public reservedForFounders;              // fund allocated to key founder \n    uint256 public bountiesAllocation;                  // fund allocated for bounty\n    uint256 public affiliatesAllocation;                  // fund allocated to affiliates \n    uint256 public totalAllocatedTokens;                // variable to keep track of funds allocated\n    uint256 public tokensAllocatedToCrowdFund;          // funds allocated to crowdfund\n\n\n\n    // addresses\n    // multi sign address of founders which hold \n    address public founderMultiSigAddress =    0x59b645EB51B1e47e45F14A56F271030182393Efd;\n    address public bountiesAllocAddress = 0x6C2625A8b19c7Bfa88d1420120DE45A60dCD6e28;  //CHANGE THIS\n    address public affiliatesAllocAddress = 0x0f0345699Afa5EE03d2B089A5aF73C405885B592;  //CHANGE THIS\n    address public crowdFundAddress;                    // address of crowdfund contract   \n    address public owner;                               // owner of the contract\n    \n    \n\n\n    //events\n    event ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\n\n    //modifiers\n    modifier onlyCrowdFundAddress() {\n        require(msg.sender == crowdFundAddress);\n        _;\n    }\n\n    modifier nonZeroAddress(address _to) {\n        require(_to != 0x0);\n        _;\n    }\n\n    modifier onlyFounders() {\n        require(msg.sender == founderMultiSigAddress);\n        _;\n    }\n\n\n\n    // creation of the token contract \n    function NOLLYCOIN(address _crowdFundAddress) {\n        owner = msg.sender;\n        crowdFundAddress = _crowdFundAddress;\n\n\n        // Token Distribution         \n        reservedForFounders        = 97500000 * 10 ** 18;           // 97,500,000 [19.50%]\n        tokensAllocatedToCrowdFund = 300000000 * 10 ** 18;      // 300,000,000NOLLY [50%]\n        // tokensAllocatedToPreICO    = 50000000 * 10 ** 18;       // 50,000,000 [10%]\n        affiliatesAllocation =       25000000 * 10 ** 18;               // 25, 000, 000[5.0 %]\n        bountiesAllocation         = 27750000 * 10 ** 18;               // 27,750,000[5.5%] \n                                                \n\n\n        // Assigned balances to respective stakeholders\n        balances[founderMultiSigAddress] = reservedForFounders;\n        balances[affiliatesAllocAddress] = affiliatesAllocation;\n        balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\n        balances[bountiesAllocAddress] = bountiesAllocation;\n        totalAllocatedTokens = balances[founderMultiSigAddress] + balances[affiliatesAllocAddress] + balances[bountiesAllocAddress];\n    }\n\n\n    // function to keep track of the total token allocation\n    function changeTotalSupply(uint256 _amount) onlyCrowdFundAddress {\n        totalAllocatedTokens += _amount;\n    }\n\n    // function to change founder multisig wallet address            \n    function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\n        founderMultiSigAddress = _newFounderMultiSigAddress;\n        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n    }\n\n\n    // fallback function to restrict direct sending of ether\n    function () {\n        revert();\n    }\n\n}\n\n\n\ncontract NOLLYCOINCrowdFund {\n\n    using SafeMath for uint256;\n\n    NOLLYCOIN public token;                                    // Token contract reference\n\n    //variables\n    uint256 public preSaleStartTime = 1514874072; //1519898430;             // 01-MARCH-18 00:10:00 UTC //CHANGE THIS    \n    uint256 public preSaleEndTime = 1522490430;               // 31-MARCH-18 00:10:00 UTC           //CHANGE THIS\n    uint256 public crowdfundStartDate = 1522576830;           // 1-APRIL-18 00:10:00 UTC      //CHANGE THIS\n    uint256 public crowdfundEndDate = 1525155672;             // 31-MARCH-17 00:10:00 UTC      //CHANGE THIS\n    uint256 public totalWeiRaised;                            // Counter to track the amount raised //CHANGE THIS\n    uint256 public exchangeRateForETH = 32000;                  // No. of NOLLY Tokens in 1 ETH  // CHANGE THIS \n    uint256 public exchangeRateForBTC = 60000;                 // No. of NOLLY Tokens in 1 BTC  //CHANGE THIS\n    uint256 internal tokenSoldInPresale = 0;\n    uint256 internal tokenSoldInCrowdsale = 0;\n    uint256 internal minAmount = 1 * 10 ** 17;                // Equivalent to 0.1 ETH\n\n    bool internal isTokenDeployed = false;                    // Flag to track the token deployment -- only can be set once\n\n\n    // addresses\n    // Founders multisig address\n    address public founderMultiSigAddress = 0x59b645EB51B1e47e45F14A56F271030182393Efd;   //CHANGE THIS                          \n    // Owner of the contract\n    address public owner;\n\n    enum State { PreSale, Crowdfund, Finish }\n\n    //events\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n    event CrowdFundClosed(uint256 _blockTimeStamp);\n    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n\n    //Modifiers\n    modifier tokenIsDeployed() {\n        require(isTokenDeployed == true);\n        _;\n    }\n    modifier nonZeroEth() {\n        require(msg.value > 0);\n        _;\n    }\n\n    modifier nonZeroAddress(address _to) {\n        require(_to != 0x0);\n        _;\n    }\n\n    modifier onlyFounders() {\n        require(msg.sender == founderMultiSigAddress);\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPublic() {\n        require(msg.sender != founderMultiSigAddress);\n        _;\n    }\n\n    modifier inState(State state) {\n        require(getState() == state);\n        _;\n    }\n\n    // Constructor to initialize the local variables \n    function NOLLYCOINCrowdFund() {\n        owner = msg.sender;\n    }\n\n    // Function to change the founders multisig address \n    function setFounderMultiSigAddress(address _newFounderAddress) onlyFounders  nonZeroAddress(_newFounderAddress) {\n        founderMultiSigAddress = _newFounderAddress;\n        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n    }\n\n    // Attach the token contract, can only be done once     \n    function setTokenAddress(address _tokenAddress) external onlyOwner nonZeroAddress(_tokenAddress) {\n        require(isTokenDeployed == false);\n        token = NOLLYCOIN(_tokenAddress);\n        isTokenDeployed = true;\n    }\n\n    // function call after crowdFundEndTime.\n    // It transfers the remaining tokens to remainingTokenHolder address\n    function endCrowdfund() onlyFounders inState(State.Finish) returns(bool) {\n        require(now > crowdfundEndDate);\n        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\n\n        if (remainingToken != 0)\n            token.transfer(founderMultiSigAddress, remainingToken);\n        CrowdFundClosed(now);\n        return true;\n    }\n\n    // Buy token function call only in duration of crowdfund active \n    function buyTokens(address beneficiary) \n    nonZeroEth \n    tokenIsDeployed \n    onlyPublic \n    nonZeroAddress(beneficiary) \n    payable \n    returns(bool) \n    {\n        require(msg.value >= minAmount);\n\n        if (getState() == State.PreSale) {\n            if (buyPreSaleTokens(beneficiary)) {\n                return true;\n            }\n            return false;\n        } else {\n            require(now >= crowdfundStartDate && now <= crowdfundEndDate);\n            fundTransfer(msg.value);\n\n            uint256 amount = getNoOfTokens(exchangeRateForETH, msg.value);\n\n            if (token.transfer(beneficiary, amount)) {\n                tokenSoldInCrowdsale = tokenSoldInCrowdsale.add(amount);\n                token.changeTotalSupply(amount);\n                totalWeiRaised = totalWeiRaised.add(msg.value);\n                TokenPurchase(beneficiary, msg.value, amount);\n                return true;\n            }\n            return false;\n        }\n\n    }\n\n    // function to buy the tokens at presale \n    function buyPreSaleTokens(address beneficiary) internal returns(bool) {\n\n        uint256 amount = getTokensForPreSale(exchangeRateForETH, msg.value);\n        fundTransfer(msg.value);\n\n        if (token.transfer(beneficiary, amount)) {\n            tokenSoldInPresale = tokenSoldInPresale.add(amount);\n            token.changeTotalSupply(amount);\n            totalWeiRaised = totalWeiRaised.add(msg.value);\n            TokenPurchase(beneficiary, msg.value, amount);\n            return true;\n        }\n        return false;\n    }\n\n    // function to calculate the total no of tokens with bonus multiplication\n    function getNoOfTokens(uint256 _exchangeRate, uint256 _amount) internal constant returns(uint256) {\n        uint256 noOfToken = _amount.mul(_exchangeRate);\n        uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\n        return noOfTokenWithBonus;\n    }\n\n    function getTokensForPreSale(uint256 _exchangeRate, uint256 _amount) internal constant returns(uint256) {\n        uint256 noOfToken = _amount.mul(_exchangeRate);\n        uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\n        if (noOfTokenWithBonus + tokenSoldInPresale > (50000000 * 10 ** 18)) { //change this to reflect current max\n            revert();\n        }\n        return noOfTokenWithBonus;\n    }\n\n    // function to transfer the funds to founders account\n    function fundTransfer(uint256 weiAmount) internal {\n        founderMultiSigAddress.transfer(weiAmount);\n    }\n\n\n    // Get functions \n\n    // function to get the current state of the crowdsale\n    function getState() public constant returns(State) {\n       if (now >= preSaleStartTime && now <= preSaleEndTime) {\n            return State.PreSale;\n        }\n        if (now >= crowdfundStartDate && now <= crowdfundEndDate) {\n            return State.Crowdfund;\n        } \n        return State.Finish;\n    }\n\n\n    // function provide the current bonus rate\n    function getCurrentBonusRate() internal returns(uint8) {\n\n        if (getState() == State.PreSale) {\n            return 30; //presale bonus rate is 33%\n        }\n        if (getState() == State.Crowdfund) {\n            \n\n        //  week 1: 8th of April 1523197901\n            if (now > crowdfundStartDate && now <= 1523197901) { \n                return 25;\n            }\n\n        //  week 2: 15th of April 1523802701\n            if (now > 1523197901 && now <= 1523802701) { \n                return 20;\n            }\n\n\n        // week 3: \n            if (now > 1523802701 && now <= 1524565102 ) {\n                return 15;\n\n            } else {\n\n                return 10;\n\n            }\n        }\n    }\n\n\n    // provides the bonus % \n    function currentBonus() public constant returns(uint8) {\n        return getCurrentBonusRate();\n    }\n\n    // GET functions\n    function getContractTimestamp() public constant returns(\n        uint256 _presaleStartDate,\n        uint256 _presaleEndDate,\n        uint256 _crowdsaleStartDate,\n        uint256 _crowdsaleEndDate)\n    {\n        return (preSaleStartTime, preSaleEndTime, crowdfundStartDate, crowdfundEndDate);\n    }\n\n    function getExchangeRate() public constant returns(uint256 _exchangeRateForETH, uint256 _exchangeRateForBTC) {\n        return (exchangeRateForETH, exchangeRateForBTC);\n    }\n\n    function getNoOfSoldToken() public constant returns(uint256 _tokenSoldInPresale, uint256 _tokenSoldInCrowdsale) {\n        return (tokenSoldInPresale, tokenSoldInCrowdsale);\n    }\n\n    function getWeiRaised() public constant returns(uint256 _totalWeiRaised) {\n        return totalWeiRaised;\n    }\n\n    // Crowdfund entry\n    // send ether to the contract address\n    // With at least 200 000 gas\n    function() public payable {\n        buyTokens(msg.sender);\n    }\n}",
  "bytecode": "60606040526040805190810160405280600a81526020017f4e6f6c6c7920436f696e00000000000000000000000000000000000000000000815250600390805190602001906200005192919062000593565b506040805190810160405280600581526020017f4e4f4c4c59000000000000000000000000000000000000000000000000000000815250600490805190602001906200009f92919062000593565b506012600560006101000a81548160ff021916908360ff1602179055506b019d971e4fe8401e740000006006557359b645eb51b1e47e45f14a56f271030182393efd600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550736c2625a8b19c7bfa88d1420120de45a60dcd6e28600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550730f0345699afa5ee03d2b089a5af73c405885b592600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503415620001d757600080fd5b60405160208062001aca8339810160405280805190602001909190505033601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506a50a66d97430c80d18000006007819055506af8277896582678ac000000600b819055506a14adf4b7320334b90000006009819055506a16f44a83aab6c233c0000060088190555060075460016000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060095460016000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b5460016000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060085460016000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460016000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460016000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540101600a819055505062000642565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620005d657805160ff191683800117855562000607565b8280016001018555821562000607579182015b8281111562000606578251825591602001919060010190620005e9565b5b5090506200061691906200061a565b5090565b6200063f91905b808211156200063b57600081600090555060010162000621565b5090565b90565b61147880620006526000396000f30060606040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d578063095ea7b3146101bb5780630c195d991461021557806318160ddd1461023e57806323b872dd146102675780632edefc26146102e0578063313ce567146103355780635154865a14610364578063520c7c8c146103b957806352e97326146103e257806362c5c2541461040557806366b625d41461043e5780636de09e28146104935780637018e950146104e857806370a082311461051157806372eda05f1461055e5780638da5cb5b1461058757806395d89b41146105dc578063a9059cbb1461066a578063b256b093146106c4578063dd62ed3e146106ed575b341561012857600080fd5b600080fd5b341561013857600080fd5b610140610759565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610180578082015181840152602081019050610165565b50505050905090810190601f1680156101ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c657600080fd5b6101fb600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107f7565b604051808215151515815260200191505060405180910390f35b341561022057600080fd5b61022861097e565b6040518082815260200191505060405180910390f35b341561024957600080fd5b610251610984565b6040518082815260200191505060405180910390f35b341561027257600080fd5b6102c6600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061098a565b604051808215151515815260200191505060405180910390f35b34156102eb57600080fd5b6102f3610d9f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034057600080fd5b610348610dc5565b604051808260ff1660ff16815260200191505060405180910390f35b341561036f57600080fd5b610377610dd8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103c457600080fd5b6103cc610dfe565b6040518082815260200191505060405180910390f35b34156103ed57600080fd5b6104036004808035906020019091905050610e04565b005b341561041057600080fd5b61043c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e73565b005b341561044957600080fd5b610451610fab565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561049e57600080fd5b6104a6610fd1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104f357600080fd5b6104fb610ff7565b6040518082815260200191505060405180910390f35b341561051c57600080fd5b610548600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ffd565b6040518082815260200191505060405180910390f35b341561056957600080fd5b610571611046565b6040518082815260200191505060405180910390f35b341561059257600080fd5b61059a61104c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105e757600080fd5b6105ef611072565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561062f578082015181840152602081019050610614565b50505050905090810190601f16801561065c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561067557600080fd5b6106aa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611110565b604051808215151515815260200191505060405180910390f35b34156106cf57600080fd5b6106d7611388565b6040518082815260200191505060405180910390f35b34156106f857600080fd5b610743600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061138e565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107ef5780601f106107c4576101008083540402835291602001916107ef565b820191906000526020600020905b8154815290600101906020018083116107d257829003601f168201915b505050505081565b60008082148061088357506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561088e57600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600a5481565b60065481565b60008082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610a58575082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610ae35750600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610d9257600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610b7a838261141590919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c4c83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461142e90919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ce183600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461141590919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150610d97565b600091505b509392505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900460ff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6057600080fd5b80600a6000828254019250508190555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ecf57600080fd5b8060008173ffffffffffffffffffffffffffffffffffffffff1614151515610ef657600080fd5b81600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbff2c41344315dcbe5a27ad589343e3446f755cda0e577f9415fd535a10796e7426040518082815260200191505060405180910390a25050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b5481565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111085780601f106110dd57610100808354040283529160200191611108565b820191906000526020600020905b8154815290600101906020018083116110eb57829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156111e05750600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b1561137d5761123782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461141590919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506112cc82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461142e90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611382565b600090505b92915050565b60075481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600082821115151561142357fe5b818303905092915050565b600080828401905083811015151561144257fe5b80915050929150505600a165627a7a72305820476f3cd36fc27d037e25b298f1c20d2d1f7c34eec5603d3ba0b91d9290df6210002900000000000000000000000034d54bcf318ccdd1d6ba67144c9f35a3c348b470",
  "constructorArguments": "00000000000000000000000034d54bcf318ccdd1d6ba67144c9f35a3c348b470"
}