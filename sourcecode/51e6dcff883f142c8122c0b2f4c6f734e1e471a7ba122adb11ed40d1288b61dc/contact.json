{
  "address": "0xc4ea05982d2e47d3b6cae011bf1d28ab155f0816",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QKL",
  "compilerVersion": "v0.4.22+commit.4cb486ee",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-28\n*/\n\npragma solidity ^0.4.13;\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n\ncontract QKL is ERC20,Pausable{\n\tusing SafeMath for uint256;\n\n\tstring public constant name=\"QKL\";\n\tstring public symbol=\"QKL\";\n\tstring public constant version = \"1.0\";\n\tuint256 public constant decimals = 18;\n\tuint256 public totalSupply;\n\n\tuint256 public constant INIT_SUPPLY=10000000000*10**decimals;\n\n\t//锁仓期数\n    struct epoch  {\n        uint256 lockEndTime;\n        uint256 lockAmount;\n    }\n\n    mapping(address=>epoch[]) public lockEpochsMap;\n\n\t\n    mapping(address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\tevent GetETH(address indexed _from, uint256 _value);\n\tevent Burn(address indexed burner, uint256 value);\n\n\t//owner一次性获取代币\n\tfunction QKL(){\n\t\ttotalSupply=INIT_SUPPLY;\n\t\tbalances[msg.sender] = INIT_SUPPLY;\n\t\tTransfer(0x0, msg.sender, INIT_SUPPLY);\n\t}\n    /**\n    *销毁代币,用户只能自己销毁自己的\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\n  \t//锁仓接口，可分多期锁仓，多期锁仓金额可累加，这里的锁仓是指限制转账\n\tfunction lockBalance(address user, uint256 lockAmount,uint256 lockEndTime) external\n\t\tonlyOwner\n\t{\n\t\t epoch[] storage epochs = lockEpochsMap[user];\n\t\t epochs.push(epoch(lockEndTime,lockAmount));\n\t}\n\n\t//允许用户往合约账户打币\n\tfunction () payable external\n\t{\n\t\tGetETH(msg.sender,msg.value);\n\t}\n\n\tfunction etherProceeds() external\n\t\tonlyOwner\n\t{\n\t\tif(!msg.sender.send(this.balance)) revert();\n\t}\n\n  \tfunction transfer(address _to, uint256 _value) whenNotPaused  public  returns (bool)\n \t{\n\t\trequire(_to != address(0));\n\n\t\t//计算锁仓份额\n\t\tepoch[] epochs = lockEpochsMap[msg.sender];\n\t\tuint256 needLockBalance = 0;\n\t\tfor(uint256 i = 0;i<epochs.length;i++)\n\t\t{\n\t\t\t//如果当前时间小于当期结束时间,则此期有效\n\t\t\tif( now < epochs[i].lockEndTime )\n\t\t\t{\n\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].lockAmount);\n\t\t\t}\n\t\t}\n\n\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n  \t{\n\t\treturn balances[_owner];\n  \t}\n\n  \tfunction transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) \n  \t{\n\t\trequire(_to != address(0));\n\n\t\t//计算锁仓份额\n\t\tepoch[] epochs = lockEpochsMap[_from];\n\t\tuint256 needLockBalance = 0;\n\t\tfor(uint256 i = 0;i<epochs.length;i++)\n\t\t{\n\t\t\t//如果当前时间小于当期结束时间,则此期有效\n\t\t\tif( now < epochs[i].lockEndTime )\n\t\t\t{\n\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].lockAmount);\n\t\t\t}\n\t\t}\n\n\t\trequire(balances[_from].sub(_value)>=needLockBalance);\n\n\t\tuint256 _allowance = allowed[_from][msg.sender];\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n  \t{\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n  \t{\n\t\treturn allowed[_owner][_spender];\n  \t}\n\n\t  \n}",
  "bytecode": "60806040526000600160146101000a81548160ff0219169083151502179055506040805190810160405280600381526020017f514b4c0000000000000000000000000000000000000000000000000000000000815250600290805190602001906200006c9291906200017e565b503480156200007a57600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a0a6402540be400026003819055506012600a0a6402540be40002600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6012600a0a6402540be400026040518082815260200191505060405180910390a36200022d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001c157805160ff1916838001178555620001f2565b82800160010185558215620001f2579182015b82811115620001f1578251825591602001919060010190620001d4565b5b50905062000201919062000205565b5090565b6200022a91905b80821115620002265760008160009055506001016200020c565b5090565b90565b611859806200023d6000396000f300608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610162578063095ea7b3146101f257806318160ddd1461025757806323b872dd14610282578063313ce567146103075780633f4ba83a1461033257806342966c681461034957806354fd4d50146103765780635b89a48a146104065780635c975abb1461046e57806370a082311461049d578063801aba56146104f45780638456cb591461050b5780638da5cb5b14610522578063956cc8591461057957806395d89b41146105a4578063a559568314610634578063a9059cbb1461068b578063dd62ed3e146106f0578063f2fde38b14610767575b3373ffffffffffffffffffffffffffffffffffffffff167f59cbf1251d8592510b5a3df66c42ab0664604d319dcd3202a097a04a1cfbda08346040518082815260200191505060405180910390a2005b34801561016e57600080fd5b506101776107aa565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b757808201518184015260208101905061019c565b50505050905090810190601f1680156101e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101fe57600080fd5b5061023d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107e3565b604051808215151515815260200191505060405180910390f35b34801561026357600080fd5b5061026c6108d5565b6040518082815260200191505060405180910390f35b34801561028e57600080fd5b506102ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108db565b604051808215151515815260200191505060405180910390f35b34801561031357600080fd5b5061031c610d0a565b6040518082815260200191505060405180910390f35b34801561033e57600080fd5b50610347610d0f565b005b34801561035557600080fd5b5061037460048036038101908080359060200190929190505050610dcf565b005b34801561038257600080fd5b5061038b610ee4565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103cb5780820151818401526020810190506103b0565b50505050905090810190601f1680156103f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041257600080fd5b50610451600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f1d565b604051808381526020018281526020019250505060405180910390f35b34801561047a57600080fd5b50610483610f5d565b604051808215151515815260200191505060405180910390f35b3480156104a957600080fd5b506104de600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f70565b6040518082815260200191505060405180910390f35b34801561050057600080fd5b50610509610fb9565b005b34801561051757600080fd5b5061052061106e565b005b34801561052e57600080fd5b5061053761112e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561058557600080fd5b5061058e611154565b6040518082815260200191505060405180910390f35b3480156105b057600080fd5b506105b9611163565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105f95780820151818401526020810190506105de565b50505050905090810190601f1680156106265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561064057600080fd5b50610689600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611201565b005b34801561069757600080fd5b506106d6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506112fe565b604051808215151515815260200191505060405180910390f35b3480156106fc57600080fd5b50610751600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611617565b6040518082815260200191505060405180910390f35b34801561077357600080fd5b506107a8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061169e565b005b6040805190810160405280600381526020017f514b4c000000000000000000000000000000000000000000000000000000000081525081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b6000806000806000600160149054906101000a900460ff161515156108ff57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561093b57600080fd5b600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020935060009250600091505b83805490508210156109fa57838281548110151561099f57fe5b9060005260206000209060020201600001544210156109ed576109ea84838154811015156109c957fe5b906000526020600020906002020160010154846117f690919063ffffffff16565b92505b8180600101925050610985565b82610a4d87600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181490919063ffffffff16565b10151515610a5a57600080fd5b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610b2b86600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181490919063ffffffff16565b600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610bc086600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117f690919063ffffffff16565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c16868261181490919063ffffffff16565b600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef886040518082815260200191505060405180910390a360019450505050509392505050565b601281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6b57600080fd5b600160149054906101000a900460ff161515610d8657600080fd5b6000600160146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60008082111515610ddf57600080fd5b339050610e3482600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181490919063ffffffff16565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e8c8260035461181490919063ffffffff16565b6003819055508073ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a25050565b6040805190810160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b600460205281600052604060002081815481101515610f3857fe5b9060005260206000209060020201600091509150508060000154908060010154905082565b600160149054906101000a900460ff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561101557600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561106c57600080fd5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110ca57600080fd5b600160149054906101000a900460ff161515156110e657600080fd5b60018060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6012600a0a6402540be4000281565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111f95780601f106111ce576101008083540402835291602001916111f9565b820191906000526020600020905b8154815290600101906020018083116111dc57829003601f168201915b505050505081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561125f57600080fd5b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060408051908101604052808481526020018581525090806001815401808255809150509060018203906000526020600020906002020160009091929091909150600082015181600001556020820151816001015550505050505050565b600080600080600160149054906101000a900460ff1615151561132057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561135c57600080fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020925060009150600090505b828054905081101561141b5782818154811015156113c057fe5b90600052602060002090600202016000015442101561140e5761140b83828154811015156113ea57fe5b906000526020600020906002020160010154836117f690919063ffffffff16565b91505b80806001019150506113a6565b8161146e86600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181490919063ffffffff16565b1015151561147b57600080fd5b6114cd85600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181490919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061156285600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117f690919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a36001935050505092915050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116fa57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561173657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080828401905083811015151561180a57fe5b8091505092915050565b600082821115151561182257fe5b8183039050929150505600a165627a7a72305820ecc8da4c0da85306f89b89bc76fe5bed0331d1a9f7e5679527373fd7a451e7160029"
}