{
  "address": "0x12adf6e7bf0fb0fa050e8175723c4ae9c44c0603",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "token",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-11\n*/\n\npragma solidity ^0.4.23;\n\ncontract Control {\n    address public owner;\n    bool public pause;\n\n    event PAUSED();\n    event STARTED();\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier whenPaused {\n        require(pause);\n        _;\n    }\n\n    modifier whenNotPaused {\n        require(!pause);\n        _;\n    }\n\n    function setOwner(address _owner) onlyOwner public {\n        owner = _owner;\n    }\n\n    function setState(bool _pause) onlyOwner public {\n        pause = _pause;\n        if (pause) {\n            emit PAUSED();\n        } else {\n            emit STARTED();\n        }\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n}\n\ncontract ERC20Token {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint256 tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    function symbol() public constant returns (string);\n    function decimals() public constant returns (uint256);\n    \n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract token is Control, ERC20Token {\n    using SafeMath for uint256;\n    \n    uint256 public totalSupply;\n    uint256 public forSell;\n    uint256 public decimals;\n    \n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    \n    string public symbol;\n    string public name;\n    \n    constructor(string _name) public {\n        owner = 0x60dc10E6b27b6c70B97d1F3370198d076F5A48D8;\n        decimals = 18;\n        totalSupply = 100000000000 * (10 ** decimals);\n        name = _name;\n        symbol = _name;\n        forSell = 50000000000 * (10 ** decimals);\n        balanceOf[owner] = totalSupply.sub(forSell);\n        \n        emit Transfer(0, owner, balanceOf[owner]);\n    }\n    \n    function transfer(address to, uint256 amount) public whenNotPaused returns (bool) {\n        require(balanceOf[msg.sender] >= amount);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n        balanceOf[to] = balanceOf[to].add(amount);\n        \n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n    \n    function approve(address to, uint256 amount) public whenNotPaused returns (bool) {\n        allowance[msg.sender][to] = amount;\n        \n        emit Approval(msg.sender, to , amount);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 amount) public whenNotPaused returns (bool) {\n        require(allowance[from][msg.sender] >= amount);\n        require(balanceOf[from] >= amount);\n        \n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(amount);\n        balanceOf[from] = balanceOf[from].sub(amount);\n        balanceOf[to] = balanceOf[to].add(amount);\n        \n        emit Transfer(from, to, amount);\n        return true;\n    }\n    \n    function totalSupply() public constant returns (uint) {\n        return totalSupply;\n    }\n    \n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balanceOf[tokenOwner];\n    }\n    \n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowance[tokenOwner][spender];\n    }\n    \n    function symbol() public constant returns (string) {\n        return symbol;\n    }\n    \n    function decimals() public constant returns (uint256){\n        return decimals;\n    }\n    \n    function sellToken() payable public {\n        require(msg.value >= 1000000000000000);\n        require(forSell >= 0);\n        uint256 amount = msg.value.mul(100000000);\n        forSell = forSell.sub(amount);\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\n        \n        emit Transfer(0, msg.sender, amount);\n    }\n    \n    function() payable public {\n        sellToken();\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b50604051620015853803806200158583398101806040528101908080518201929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507360dc10e6b27b6c70b97d1f3370198d076f5a48d86000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600381905550600354600a0a64174876e800026001819055508060079080519060200190620000fd929190620002a7565b50806006908051906020019062000116929190620002a7565b50600354600a0a640ba43b740002600281905550620001516002546001546200028d64010000000002620011be179091906401000000009004565b600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600460008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a35062000356565b60008282111515156200029c57fe5b818303905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002ea57805160ff19168380011785556200031b565b828001600101855582156200031b579182015b828111156200031a578251825591602001919060010190620002fd565b5b5090506200032a91906200032e565b5090565b6200035391905b808211156200034f57600081600090555060010162000335565b5090565b90565b61121f80620003666000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e5578063095ea7b31461017557806313af4035146101da57806318160ddd1461021d57806323b872dd14610248578063313ce567146102cd57806370a08231146102f85780638456cb591461034f5780638da5cb5b1461037e57806395d89b41146103d55780639769f0b014610465578063a9059cbb1461046f578063ac9f0222146104d4578063dd62ed3e14610503578063ff5f13461461057a575b6100e36105a5565b005b3480156100f157600080fd5b506100fa6106eb565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013a57808201518184015260208101905061011f565b50505050905090810190601f1680156101675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018157600080fd5b506101c0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610789565b604051808215151515815260200191505060405180910390f35b3480156101e657600080fd5b5061021b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610896565b005b34801561022957600080fd5b50610232610934565b6040518082815260200191505060405180910390f35b34801561025457600080fd5b506102b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061093e565b604051808215151515815260200191505060405180910390f35b3480156102d957600080fd5b506102e2610cdd565b6040518082815260200191505060405180910390f35b34801561030457600080fd5b50610339600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ce7565b6040518082815260200191505060405180910390f35b34801561035b57600080fd5b50610364610d30565b604051808215151515815260200191505060405180910390f35b34801561038a57600080fd5b50610393610d43565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103e157600080fd5b506103ea610d68565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561042a57808201518184015260208101905061040f565b50505050905090810190601f1680156104575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61046d6105a5565b005b34801561047b57600080fd5b506104ba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e0a565b604051808215151515815260200191505060405180910390f35b3480156104e057600080fd5b5061050160048036038101908080351515906020019092919050505061100e565b005b34801561050f57600080fd5b50610564600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110f9565b6040518082815260200191505060405180910390f35b34801561058657600080fd5b5061058f611180565b6040518082815260200191505060405180910390f35b600066038d7ea4c6800034101515156105bd57600080fd5b6000600254101515156105cf57600080fd5b6105e66305f5e1003461118690919063ffffffff16565b90506105fd816002546111be90919063ffffffff16565b60028190555061065581600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111d790919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107815780601f1061075657610100808354040283529160200191610781565b820191906000526020600020905b81548152906001019060200180831161076457829003601f168201915b505050505081565b60008060149054906101000a900460ff161515156107a657600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108f157600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600154905090565b60008060149054906101000a900460ff1615151561095b57600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156109e657600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a3457600080fd5b610ac382600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111be90919063ffffffff16565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b9582600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111be90919063ffffffff16565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c2a82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111d790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000600354905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e005780601f10610dd557610100808354040283529160200191610e00565b820191906000526020600020905b815481529060010190602001808311610de357829003601f168201915b5050505050905090565b60008060149054906101000a900460ff16151515610e2757600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e7557600080fd5b610ec782600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111be90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f5c82600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111d790919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561106957600080fd5b80600060146101000a81548160ff021916908315150217905550600060149054906101000a900460ff16156110c9577fa9aad58c4b885acff8f9e1618bc43dfc95c9de94a9a651589e5fc1d248b5305f60405160405180910390a16110f6565b7f1be35a59eaf211d3524f68a4558ae53028c9bbf75ad022c1de1b35bee8b3a1b560405160405180910390a15b50565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60025481565b60008083141561119957600090506111b8565b81830290508183828115156111aa57fe5b041415156111b457fe5b8090505b92915050565b60008282111515156111cc57fe5b818303905092915050565b600081830190508281101515156111ea57fe5b809050929150505600a165627a7a7230582079450c653e6cc27ccdc735901b6ac81c265f1066220c3950f55f2c7c7825eace00290000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000ce5bf83e683b3e4ba8be688900000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000ce5bf83e683b3e4ba8be688900000000000000000000000000000000000000000"
}