{
  "address": "0x6e82aabffe24f275ad3f703aca922dd4d8f86168",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BatchTransfer",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-26\n*/\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ncontract BatchTransfer is Ownable {\n    using SafeMath for uint256;\n\n    event Withdraw(address indexed receiver, address indexed token, uint amount);\n    event TransferEther(address indexed sender, address indexed receiver, uint256 amount);\n\n    modifier checkArrayArgument(address[] _receivers, uint256[] _amounts) {\n        require(_receivers.length == _amounts.length && _receivers.length != 0);\n        _;\n    }\n\n    function batchTransferToken(address _token, address[] _receivers, uint256[] _tokenAmounts) public checkArrayArgument(_receivers, _tokenAmounts) {\n        require(_token != address(0));\n\n        ERC20 token = ERC20(_token);\n        require(allowanceForContract(_token) >= getTotalSendingAmount(_tokenAmounts));\n\n        for (uint i = 0; i < _receivers.length; i++) {\n            require(_receivers[i] != address(0));\n            require(token.transferFrom(msg.sender, _receivers[i], _tokenAmounts[i]));\n        }\n    }\n\n    function batchTransferEther(address[] _receivers, uint[] _amounts) public payable checkArrayArgument(_receivers, _amounts) {\n        require(msg.value != 0 && msg.value == getTotalSendingAmount(_amounts));\n\n        for (uint i = 0; i < _receivers.length; i++) {\n            require(_receivers[i] != address(0));\n            _receivers[i].transfer(_amounts[i]);\n            emit TransferEther(msg.sender, _receivers[i], _amounts[i]);\n        }\n    }\n\n    function withdraw(address _receiver, address _token) public onlyOwner {\n        ERC20 token = ERC20(_token);\n        uint tokenBalanceOfContract = token.balanceOf(this);\n        require(_receiver != address(0) && tokenBalanceOfContract > 0);\n        require(token.transfer(_receiver, tokenBalanceOfContract));\n        emit Withdraw(_receiver, _token, tokenBalanceOfContract);\n    }\n\n    function balanceOfContract(address _token) public view returns (uint) {\n        ERC20 token = ERC20(_token);\n        return token.balanceOf(this);\n    }\n\n    function allowanceForContract(address _token) public view returns (uint) {\n        ERC20 token = ERC20(_token);\n        return token.allowance(msg.sender, this);\n    }\n\n    function getTotalSendingAmount(uint256[] _amounts) private pure returns (uint totalSendingAmount) {\n        for (uint i = 0; i < _amounts.length; i++) {\n            require(_amounts[i] > 0);\n            totalSendingAmount = totalSendingAmount.add(_amounts[i]);\n        }\n    }\n}",
  "bytecode": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ea6806100536000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806316c3002e1461008857806320651d5d146100df5780638da5cb5b146101a8578063dd48087f146101ff578063eb14f53e14610256578063f2fde38b146102f2578063f940e38514610335575b600080fd5b34801561009457600080fd5b506100c9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610398565b6040518082815260200191505060405180910390f35b3480156100eb57600080fd5b506101a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506104b0565b005b3480156101b457600080fd5b506101bd6106f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561020b57600080fd5b50610240600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610718565b6040518082815260200191505060405180910390f35b6102f060048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001908201803590602001908080602002602001604051908101604052809392919081815260200183836020028082843782019150505050505091929192905050506107fc565b005b3480156102fe57600080fd5b50610333600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109be565b005b34801561034157600080fd5b50610396600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b13565b005b6000808290508073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561046d57600080fd5b505af1158015610481573d6000803e3d6000fd5b505050506040513d602081101561049757600080fd5b8101908080519060200190929190505050915050919050565b6000808383805182511480156104c857506000825114155b15156104d357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415151561050f57600080fd5b86935061051b85610de8565b61052488610398565b1015151561053157600080fd5b600092505b85518310156106ea57600073ffffffffffffffffffffffffffffffffffffffff16868481518110151561056557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161415151561059257600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3388868151811015156105bd57fe5b9060200190602002015188878151811015156105d557fe5b906020019060200201516040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561069757600080fd5b505af11580156106ab573d6000803e3d6000fd5b505050506040513d60208110156106c157600080fd5b810190808051906020019092919050505015156106dd57600080fd5b8280600101935050610536565b50505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808290508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156107b957600080fd5b505af11580156107cd573d6000803e3d6000fd5b505050506040513d60208110156107e357600080fd5b8101908080519060200190929190505050915050919050565b600082828051825114801561081357506000825114155b151561081e57600080fd5b60003414158015610836575061083384610de8565b34145b151561084157600080fd5b600092505b84518310156109b757600073ffffffffffffffffffffffffffffffffffffffff16858481518110151561087557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16141515156108a257600080fd5b84838151811015156108b057fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff166108fc85858151811015156108e157fe5b906020019060200201519081150290604051600060405180830381858888f19350505050158015610916573d6000803e3d6000fd5b50848381518110151561092557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fbfb7efd7d5ea800a27a15d77272a7f3467a453990b2e81d1b7537725bb2ea166868681518110151561098b57fe5b906020019060200201516040518082815260200191505060405180910390a38280600101935050610846565b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a1957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a5557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7157600080fd5b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610c0f57600080fd5b505af1158015610c23573d6000803e3d6000fd5b505050506040513d6020811015610c3957600080fd5b81019080805190602001909291905050509050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610c895750600081115b1515610c9457600080fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b505050506040513d6020811015610d6157600080fd5b81019080805190602001909291905050501515610d7d57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb836040518082815260200191505060405180910390a350505050565b600080600090505b8251811015610e585760008382815181101515610e0957fe5b90602001906020020151111515610e1f57600080fd5b610e498382815181101515610e3057fe5b9060200190602002015183610e5e90919063ffffffff16565b91508080600101915050610df0565b50919050565b60008183019050828110151515610e7157fe5b809050929150505600a165627a7a72305820170dd1e3ba95285e8103749d2655d937b4abcc8cf83570552463f1c8d91171fc0029"
}