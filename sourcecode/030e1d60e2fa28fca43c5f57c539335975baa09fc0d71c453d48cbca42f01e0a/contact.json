{
  "address": "0xd9dbd7818611436d88a0a90d5cbd24d6603a2358",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TrineChain",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-07\n*/\n\npragma solidity ^0.4.20;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract TrineChain is ERC20 {\n    \n    using SafeMath for uint256; \n    address owner = msg.sender; \n\n    mapping (address => uint256) balances; \n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => uint256) locknum; \n\n    string public constant name = \"TrineChain\";\n    string public constant symbol = \"TRCOS\";\n    uint public constant decimals = 18;\n    uint256 _Rate = 10 ** decimals;    \n    uint256 public totalSupply = 270000000 * _Rate;\n    \n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Locked(address indexed to, uint256 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n\n     function TrineChain() public {\n        balances[owner] = totalSupply;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        if (newOwner != address(0) && newOwner != owner) {\n             owner = newOwner;   \n        }\n    }\n\n\n    function lock(address _to, uint256 _amount) private returns (bool) {\n        require(owner != _to);\n        require(_amount > 0);\n        require(_amount * _Rate  <= balances[_to]);\n        locknum[_to]=_amount * _Rate;\n        Locked(_to, _amount * _Rate);\n        return true;\n    }\n\n    function locked(address[] addresses, uint256[] amounts) onlyOwner public {\n\n        require(addresses.length <= 255);\n        require(addresses.length == amounts.length);\n        \n        for (uint8 i = 0; i < addresses.length; i++) {\n            lock(addresses[i], amounts[i]);\n        }\n    }\n\n    function distr(address _to, uint256 _amount) private returns (bool) {\n        require(owner != _to);\n        require(_amount > 0);\n        require(balances[owner] >= _amount * _Rate);\n\n        balances[owner] = balances[owner].sub(_amount * _Rate);\n        balances[_to] = balances[_to].add(_amount * _Rate);\n        locknum[_to] += lockcheck(_amount) * _Rate;\n        \n        Transfer(owner, _to, _amount * _Rate);\n        return true;\n    }\n\n    function lockcheck(uint256 _amount) internal pure returns (uint256) {\n        if(_amount < 3000){\n        return _amount * 4/10;\n        }\n        if(_amount >= 3000 && _amount < 10000){\n        return _amount * 5/10;\n        }\n        if(_amount >= 10000 && _amount < 50000){\n        return _amount * 6/10;\n        }\n        if(_amount >= 50000 && _amount < 500000){\n        return _amount * 7/10;\n        }\n        if(_amount >= 500000){\n        return _amount * 8/10;\n        }\n    }\n    \n    function distribute(address[] addresses, uint256[] amounts) onlyOwner public {\n\n        require(addresses.length <= 255);\n        require(addresses.length == amounts.length);\n        \n        for (uint8 i = 0; i < addresses.length; i++) {\n            distr(addresses[i], amounts[i]);\n        }\n    }\n\n    function lockedOf(address _owner) constant public returns (uint256) {\n        return locknum[_owner];\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n\t    return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n        require(_amount <= balances[msg.sender].sub(locknum[msg.sender]));\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= balances[_from].sub(locknum[_from]));\n        require(_amount <= allowed[_from][msg.sender]);\n        \n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"locked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"}]",
  "bytecode": "608060405260018054600160a060020a03191633179055670de0b6b3a76400006005556adf56b9541c229fce00000060065534801561003d57600080fd5b50600654600154600160a060020a0316600090815260026020526040902055610cd38061006b6000396000f3006080604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461018b57806323b872dd146101b25780632929abe6146101dc578063313ce5671461026c57806370a082311461028157806395d89b41146102a2578063a55deccb146102b7578063a5f1e28214610345578063a9059cbb14610366578063dd62ed3e1461038a578063f2fde38b146103b1575b600080fd5b3480156100d557600080fd5b506100de6103d2565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610118578181015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015f57600080fd5b50610177600160a060020a0360043516602435610409565b604080519115158252519081900360200190f35b34801561019757600080fd5b506101a06104b1565b60408051918252519081900360200190f35b3480156101be57600080fd5b50610177600160a060020a03600435811690602435166044356104b7565b3480156101e857600080fd5b506040805160206004803580820135838102808601850190965280855261026a95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061067c9650505050505050565b005b34801561027857600080fd5b506101a061070f565b34801561028d57600080fd5b506101a0600160a060020a0360043516610714565b3480156102ae57600080fd5b506100de610733565b3480156102c357600080fd5b506040805160206004803580820135838102808601850190965280855261026a95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061076a9650505050505050565b34801561035157600080fd5b506101a0600160a060020a03600435166107f8565b34801561037257600080fd5b50610177600160a060020a0360043516602435610813565b34801561039657600080fd5b506101a0600160a060020a036004358116906024351661093b565b3480156103bd57600080fd5b5061026a600160a060020a0360043516610966565b60408051808201909152600a81527f5472696e65436861696e00000000000000000000000000000000000000000000602082015281565b6000811580159061043c5750336000908152600360209081526040808320600160a060020a038716845290915290205415155b15610449575060006104ab565b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60065481565b6000606060643610156104c657fe5b600160a060020a03841615156104db57600080fd5b600160a060020a03851660009081526002602052604090205483111561050057600080fd5b600160a060020a0385166000908152600460209081526040808320546002909252909120546105349163ffffffff6109d416565b83111561054057600080fd5b600160a060020a038516600090815260036020908152604080832033845290915290205483111561057057600080fd5b600160a060020a038516600090815260026020526040902054610599908463ffffffff6109d416565b600160a060020a03861660009081526002602090815260408083209390935560038152828220338352905220546105d6908463ffffffff6109d416565b600160a060020a03808716600090815260036020908152604080832033845282528083209490945591871681526002909152205461061a908463ffffffff6109e616565b600160a060020a0380861660008181526002602090815260409182902094909455805187815290519193928916927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3506001949350505050565b600154600090600160a060020a0316331461069657600080fd5b825160ff10156106a557600080fd5b81518351146106b357600080fd5b5060005b82518160ff16101561070a57610701838260ff168151811015156106d757fe5b90602001906020020151838360ff168151811015156106f257fe5b906020019060200201516109fc565b506001016106b7565b505050565b601281565b600160a060020a0381166000908152600260205260409020545b919050565b60408051808201909152600581527f5452434f53000000000000000000000000000000000000000000000000000000602082015281565b600154600090600160a060020a0316331461078457600080fd5b825160ff101561079357600080fd5b81518351146107a157600080fd5b5060005b82518160ff16101561070a576107ef838260ff168151811015156107c557fe5b90602001906020020151838360ff168151811015156107e057fe5b90602001906020020151610b54565b506001016107a5565b600160a060020a031660009081526004602052604090205490565b60006040604436101561082257fe5b600160a060020a038416151561083757600080fd5b3360009081526002602052604090205483111561085357600080fd5b3360009081526004602090815260408083205460029092529091205461087e9163ffffffff6109d416565b83111561088a57600080fd5b336000908152600260205260409020546108aa908463ffffffff6109d416565b3360009081526002602052604080822092909255600160a060020a038616815220546108dc908463ffffffff6109e616565b600160a060020a0385166000818152600260209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600154600160a060020a0316331461097d57600080fd5b600160a060020a038116158015906109a35750600154600160a060020a03828116911614155b156109d1576001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b50565b6000828211156109e057fe5b50900390565b6000828201838110156109f557fe5b9392505050565b600154600090600160a060020a0384811691161415610a1a57600080fd5b60008211610a2757600080fd5b600554600154600160a060020a03166000908152600260205260409020549083021115610a5357600080fd5b600554600154600160a060020a0316600090815260026020526040902054610a8291840263ffffffff6109d416565b600154600160a060020a039081166000908152600260205260408082209390935560055491861681529190912054610ac191840263ffffffff6109e616565b600160a060020a038416600090815260026020526040902055600554610ae683610c0d565b600160a060020a0385811660008181526004602090815260409182902080549590960290940190945560015460055485519088028152945191949216927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef928290030190a350600192915050565b600154600090600160a060020a0384811691161415610b7257600080fd5b60008211610b7f57600080fd5b600160a060020a03831660009081526002602052604090205460055483021115610ba857600080fd5b60058054600160a060020a038516600081815260046020908152604091829020938702909355925483519086028152925190927f9f1ec8c880f76798e7b793325d625e9b60e4082a553c98f42b6cda368dd6000892908290030190a250600192915050565b6000610bb8821015610c2857600a600483025b04905061072e565b610bb88210158015610c3b575061271082105b15610c4b57600a60058302610c20565b6127108210158015610c5e575061c35082105b15610c6e57600a60068302610c20565b61c3508210158015610c8257506207a12082105b15610c9257600a60078302610c20565b6207a120821061072e57600a60088302610c205600a165627a7a72305820f7cbcf3005e1b16ea65857b28a7da4f058ef2e603a480ce33611144d6e1153a70029"
}