{
  "address": "0x8e9c2af280b1ce0c10b0d405585e33581d4c6184",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "tokenSale",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-24\n*/\n\npragma solidity ^0.4.25;\n\ncontract Token {\n    string  public name;\n    string  public symbol;\n    //string  public standard = \"Token v1.0\";\n    uint256 public totalSupply;\n    //\n    address public minter;\n\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    constructor (uint256 _initialSupply, string memory _name, string memory _symbol, address _minter) public {\n        balanceOf[_minter] = _initialSupply;\n        totalSupply = _initialSupply;\n        name = _name;\n        symbol =_symbol;\n        //\n        minter =_minter;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        allowance[_from][msg.sender] -= _value;\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function getTokenDetails() public view returns(address _minter, string memory _name, string memory _symbol, uint256 _totalsupply) {\n        return(minter, name, symbol, totalSupply);\n    }\n}\n\ncontract tokenSale {\n    address admin;\n    Token public tokenContract;\n    uint256 public tokenPrice;\n    uint256 public tokensSold;\n    string public phasename;\n\n    event Sell(address _buyer, uint256 _amount);\n\n    constructor (Token _tokenContract, uint256 _tokenPrice, string memory _phasename, address _admin) public {\n        admin = _admin;\n        tokenContract = _tokenContract;\n        tokenPrice = _tokenPrice;\n        phasename = _phasename;\n    }\n\n    function multiply(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n    // buying tokens from wallet other than metamask, which requires token recipient address\n    function rbuyTokens(address recipient_addr, uint256 _numberOfTokens) public payable {\n        require(msg.sender==admin);\n        require(msg.value == multiply(_numberOfTokens, tokenPrice));\n        require(tokenContract.balanceOf(address(this)) >= _numberOfTokens);\n        require(tokenContract.transfer(recipient_addr, _numberOfTokens));\n\n        tokensSold += _numberOfTokens;\n\n        emit Sell(msg.sender, _numberOfTokens);\n    }\n\n    function approveone(address spender, uint256 value) public {\n        require(msg.sender==admin);\n        tokenContract.approve(spender, value);\n    }\n\n    function buyTokens(uint256 _numberOfTokens) public payable {\n        require(msg.value == multiply(_numberOfTokens, tokenPrice));\n        require(tokenContract.balanceOf(address(this)) >= _numberOfTokens); //----!!!!!!!\n        require(tokenContract.transfer(msg.sender, _numberOfTokens));\n\n        tokensSold += _numberOfTokens;\n\n        emit Sell(msg.sender, _numberOfTokens);\n    }\n\n    function getmoney() public {\n        require(msg.sender==admin);\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function endSale() public {\n        require(msg.sender == admin);\n        require(tokenContract.transfer(admin, tokenContract.balanceOf(address(this))));\n\n        // UPDATE: Let's not destroy the contract here\n        // Just transfer the balance to the admin\n        msg.sender.transfer(address(this).balance);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516109e73803806109e7833981016040908152815160208084015192840151606085015160008054600160a060020a03808416600160a060020a03199283161790925560018054928716929091169190911790556002859055940180519294909290916100859160049185019061008f565b505050505061012a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100d057805160ff19168380011785556100fd565b828001600101855582156100fd579182015b828111156100fd5782518255916020019190600101906100e2565b5061010992915061010d565b5090565b61012791905b808211156101095760008155600101610113565b90565b6108ae806101396000396000f3006080604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632e73f8ea811461009d5780633610724e14610127578063380d831b14610134578063518ab2a81461014957806355a373d6146101705780637ff9b596146101a1578063822e7411146101b65780639abeb149146101cb578063bbaafbf4146101ef575b600080fd5b3480156100a957600080fd5b506100b2610206565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100ec5781810151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610132600435610294565b005b34801561014057600080fd5b50610132610431565b34801561015557600080fd5b5061015e6105b5565b60408051918252519081900360200190f35b34801561017c57600080fd5b506101856105bb565b60408051600160a060020a039092168252519081900360200190f35b3480156101ad57600080fd5b5061015e6105ca565b3480156101c257600080fd5b506101326105d0565b3480156101d757600080fd5b50610132600160a060020a03600435166024356105e7565b610132600160a060020a036004351660243561069d565b6004805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561028c5780601f106102615761010080835404028352916020019161028c565b820191906000526020600020905b81548152906001019060200180831161026f57829003601f168201915b505050505081565b6102a081600254610854565b34146102ab57600080fd5b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518392600160a060020a0316916370a082319160248083019260209291908290030181600087803b15801561031057600080fd5b505af1158015610324573d6000803e3d6000fd5b505050506040513d602081101561033a57600080fd5b5051101561034757600080fd5b600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a039092169163a9059cbb916044808201926020929091908290030181600087803b1580156103b457600080fd5b505af11580156103c8573d6000803e3d6000fd5b505050506040513d60208110156103de57600080fd5b505115156103eb57600080fd5b6003805482019055604080513381526020810183905281517f5e5e995ce3133561afceaa51a9a154d5db228cd7525d34df5185582c18d3df09929181900390910190a150565b600054600160a060020a0316331461044857600080fd5b60015460008054604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039485169463a9059cbb9493169285926370a082319260248083019360209383900390910190829087803b1580156104bc57600080fd5b505af11580156104d0573d6000803e3d6000fd5b505050506040513d60208110156104e657600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561054e57600080fd5b505af1158015610562573d6000803e3d6000fd5b505050506040513d602081101561057857600080fd5b5051151561058557600080fd5b6040513390303180156108fc02916000818181858888f193505050501580156105b2573d6000803e3d6000fd5b50565b60035481565b600154600160a060020a031681565b60025481565b600054600160a060020a0316331461058557600080fd5b600054600160a060020a031633146105fe57600080fd5b600154604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163095ea7b39160448083019260209291908290030181600087803b15801561066d57600080fd5b505af1158015610681573d6000803e3d6000fd5b505050506040513d602081101561069757600080fd5b50505050565b600054600160a060020a031633146106b457600080fd5b6106c081600254610854565b34146106cb57600080fd5b600154604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518392600160a060020a0316916370a082319160248083019260209291908290030181600087803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b505050506040513d602081101561075a57600080fd5b5051101561076757600080fd5b600154604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156107d657600080fd5b505af11580156107ea573d6000803e3d6000fd5b505050506040513d602081101561080057600080fd5b5051151561080d57600080fd5b6003805482019055604080513381526020810183905281517f5e5e995ce3133561afceaa51a9a154d5db228cd7525d34df5185582c18d3df09929181900390910190a15050565b600081158061087157505080820282828281151561086e57fe5b04145b151561087c57600080fd5b929150505600a165627a7a72305820f3b6bb1705508165142a91355f14a7a69ead5cb2866a15878303649c1720d7450029000000000000000000000000b552c78e84f684fd3cd8dd97d73ff9d006d991a0000000000000000000000000000000000000000000000000000221b262dd80000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000a969c1d98e4754eff010a6dae217dc5c4a9c24aa000000000000000000000000000000000000000000000000000000000000000b4758542050686173652031000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000b552c78e84f684fd3cd8dd97d73ff9d006d991a0000000000000000000000000000000000000000000000000000221b262dd80000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000a969c1d98e4754eff010a6dae217dc5c4a9c24aa000000000000000000000000000000000000000000000000000000000000000b4758542050686173652031000000000000000000000000000000000000000000"
}