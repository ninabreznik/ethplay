{
  "address": "0x5f20ccf0923995581d52f9bcc4fc065c1aded6ee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KCC",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-11\n*/\n\npragma solidity ^0.4.13;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract SeekerCoin is ERC20,Ownable{\n\tusing SafeMath for uint256;\n\n\t//the base info of the token\n\tstring public constant name=\"Seeker Coin\";\n\tstring public constant symbol=\"SEC\";\n\tstring public constant version = \"1.0\";\n\tuint256 public constant decimals = 18;\n\n\tuint256 public rate;\n\tuint256 public totalFundingSupply;\n\t//the max supply\n\tuint256 public MAX_SUPPLY;\n\n\t//user's locked balance\n\tmapping(address=>epoch[]) public lockEpochsMap;\n\n    mapping(address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\tstruct epoch  {\n        uint256 endTime;\n        uint256 amount;\n    }\n\n\tfunction SeekerCoin(){\n\t\tMAX_SUPPLY = 10000000000*10**decimals;\n\t\trate = 0;\n\t\ttotalFundingSupply = 0;\n\t\ttotalSupply = 0;\n\t}\n\n\tmodifier notReachTotalSupply(uint256 _value,uint256 _rate){\n\t\tassert(MAX_SUPPLY>=totalSupply.add(_value.mul(_rate)));\n\t\t_;\n\t}\n\n\tfunction lockBalance(address user, uint256 amount,uint256 endTime) external\n\t\tonlyOwner\n\t{\n\t\t epoch[] storage epochs = lockEpochsMap[user];\n\t\t epochs.push(epoch(endTime,amount));\n\t}\n\t\n\tfunction () payable external\n\t{\n\t\t\tprocessFunding(msg.sender,msg.value,rate);\n\t\t\tuint256 amount=msg.value.mul(rate);\n\t\t\ttotalFundingSupply = totalFundingSupply.add(amount);\n\t}\n\n\tfunction processFunding(address receiver,uint256 _value,uint256 _rate) internal\n\t\tnotReachTotalSupply(_value,_rate)\n\t{\n\t\tuint256 amount=_value.mul(_rate);\n\t\ttotalSupply=totalSupply.add(amount);\n\t\tbalances[receiver] +=amount;\n\t\tTransfer(0x0, receiver, amount);\n\t}\n\n    function withdrawCoinToOwner(uint256 _value) external\n\t\tonlyOwner\n\t{\n\t\tprocessFunding(msg.sender,_value,1);\n\t}\n\t\n\tfunction etherProceeds() external\n\t\tonlyOwner\n\n\t{\n\t\tif(!msg.sender.send(this.balance)) revert();\n\t}\n\n\n\n\tfunction setRate(uint256 _rate) external\n\t\tonlyOwner\n\t{\n\t\trate=_rate;\n\t}\n\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\n \t{\n\t\trequire(_to != address(0));\n\t\tepoch[] epochs = lockEpochsMap[msg.sender];\n\t\tuint256 needLockBalance = 0;\n\t\tfor(uint256 i;i<epochs.length;i++)\n\t\t{\n\t\t\tif( now < epochs[i].endTime )\n\t\t\t{\n\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].amount);\n\t\t\t}\n\t\t}\n\n\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n  \t{\n\t\treturn balances[_owner];\n  \t}\n\n\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n  \t{\n\t\trequire(_to != address(0));\n\n\t\tepoch[] epochs = lockEpochsMap[_from];\n\t\tuint256 needLockBalance = 0;\n\t\tfor(uint256 i;i<epochs.length;i++)\n\t\t{\n\t\t\tif( now < epochs[i].endTime )\n\t\t\t{\n\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].amount);\n\t\t\t}\n\t\t}\n\n\t\trequire(balances[_from].sub(_value)>=needLockBalance);\n\t\tuint256 _allowance = allowed[_from][msg.sender];\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n  \t{\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n  \t{\n\t\treturn allowed[_owner][_spender];\n  \t}\n\n\t  \n}\n\ncontract KCC is ERC20,Ownable{\n\tusing SafeMath for uint256;\n\n\t//the base info of the token\n\tstring public constant name=\"Frenzy Coin\";\n\tstring public constant symbol=\"KCC\";\n\tstring public constant version = \"1.0\";\n\tuint256 public constant decimals = 18;\n\n\tuint256 public constant MAX_SUPPLY=1000000000*10**decimals;\n\tuint256 public airdropSupply;\n\n    mapping(address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\t\n\n\tfunction KCC(){\n\t\ttotalSupply = MAX_SUPPLY;\n\t\tairdropSupply=0;\n\t\tbalances[msg.sender] = MAX_SUPPLY;\n\t\tTransfer(0x0, msg.sender, MAX_SUPPLY);\n\t}\n\n\n    function airdrop(address [] _holders,uint256 paySize) external\n    \tonlyOwner \n\t{\n        uint256 count = _holders.length;\n        assert(paySize.mul(count) <= balanceOf(msg.sender));\n        for (uint256 i = 0; i < count; i++) {\n            transfer(_holders [i], paySize);\n\t\t\tairdropSupply = airdropSupply.add(paySize);\n        }\n    }\n\n    function addIssue (uint256 _amount) external\n    \tonlyOwner\n    {\n    \tbalances[msg.sender] = balances[msg.sender].add(_amount);\n    }\n    \n\tfunction () payable external\n\t{\n\t}\n\n\tfunction etherProceeds() external\n\t\tonlyOwner\n\n\t{\n\t\tif(!msg.sender.send(this.balance)) revert();\n\t}\n\n  \tfunction transfer(address _to, uint256 _value) public  returns (bool)\n \t{\n\t\trequire(_to != address(0));\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n  \t{\n\t\treturn balances[_owner];\n  \t}\n\n\n  \tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n  \t{\n\t\trequire(_to != address(0));\n\n\t\tuint256 _allowance = allowed[_from][msg.sender];\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n  \t{\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n  \t}\n\n  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n  \t{\n\t\treturn allowed[_owner][_spender];\n  \t}\n\n\t  \n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"etherProceeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"},{\"name\":\"paySize\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052341561000f57600080fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506012600a0a633b9aca000260008190555060006002819055506012600a0a633b9aca0002600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6012600a0a633b9aca00026040518082815260200191505060405180910390a3611233806101206000396000f3006060604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f3578063095ea7b31461018157806318160ddd146101db57806323b872dd14610204578063313ce5671461027d57806332cb6b0c146102a657806354fd4d50146102cf57806370a082311461035d578063801aba56146103aa5780638da5cb5b146103bf57806395d89b4114610414578063a9059cbb146104a2578063c204642c146104fc578063d57c1ea214610533578063dd62ed3e14610556578063f2fde38b146105c2578063fb3ed5c7146105fb575b005b34156100fe57600080fd5b610106610624565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014657808201518184015260208101905061012b565b50505050905090810190601f1680156101735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018c57600080fd5b6101c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061065d565b604051808215151515815260200191505060405180910390f35b34156101e657600080fd5b6101ee61074f565b6040518082815260200191505060405180910390f35b341561020f57600080fd5b610263600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610755565b604051808215151515815260200191505060405180910390f35b341561028857600080fd5b610290610a41565b6040518082815260200191505060405180910390f35b34156102b157600080fd5b6102b9610a46565b6040518082815260200191505060405180910390f35b34156102da57600080fd5b6102e2610a54565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610322578082015181840152602081019050610307565b50505050905090810190601f16801561034f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036857600080fd5b610394600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a8d565b6040518082815260200191505060405180910390f35b34156103b557600080fd5b6103bd610ad6565b005b34156103ca57600080fd5b6103d2610b8b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561041f57600080fd5b610427610bb1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046757808201518184015260208101905061044c565b50505050905090810190601f1680156104945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104ad57600080fd5b6104e2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bea565b604051808215151515815260200191505060405180910390f35b341561050757600080fd5b61053160048080359060200190820180359060200191909192908035906020019091905050610dc0565b005b341561053e57600080fd5b6105546004808035906020019091905050610ebc565b005b341561056157600080fd5b6105ac600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610fb0565b6040518082815260200191505060405180910390f35b34156105cd57600080fd5b6105f9600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611037565b005b341561060657600080fd5b61060e61118f565b6040518082815260200191505060405180910390f35b6040805190810160405280600b81526020017f4672656e7a7920436f696e00000000000000000000000000000000000000000081525081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561079457600080fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061086583600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119590919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108fa83600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111ae90919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610950838261119590919063ffffffff16565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b601281565b6012600a0a633b9aca000281565b6040805190810160405280600381526020017f312e30000000000000000000000000000000000000000000000000000000000081525081565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b3257600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610b8957600080fd5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040805190810160405280600381526020017f4b4343000000000000000000000000000000000000000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610c2757600080fd5b610c7982600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119590919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d0e82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111ae90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1f57600080fd5b848490509150610e2e33610a8d565b610e4183856111cc90919063ffffffff16565b11151515610e4b57fe5b600090505b81811015610eb557610e8c8585838181101515610e6957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1684610bea565b50610ea2836002546111ae90919063ffffffff16565b6002819055508080600101915050610e50565b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f1857600080fd5b610f6a81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111ae90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561109357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156110cf57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60025481565b60008282111515156111a357fe5b818303905092915050565b60008082840190508381101515156111c257fe5b8091505092915050565b60008060008414156111e15760009150611200565b82840290508284828115156111f257fe5b041415156111fc57fe5b8091505b50929150505600a165627a7a72305820c946136548df08e4770d32668dc07688468f4a9bcca51893140c394c5dcfd8a40029"
}