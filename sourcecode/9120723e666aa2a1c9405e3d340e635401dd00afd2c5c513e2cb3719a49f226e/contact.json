{
  "address": "0xa8e35a8667b88e73e17cd1337b17f04167234e41",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PreICO",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-02\n*/\n\npragma solidity ^0.4.25;\n\n/*** @title SafeMath\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ninterface ERC20 {\n    function transfer (address _beneficiary, uint256 _tokenAmount) external returns (bool);\n    function mintFromICO(address _to, uint256 _amount) external  returns(bool);\n    function isWhitelisted(address wlCandidate) external returns(bool);\n}\n/**\n * @title Ownable\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n */\ncontract Ownable {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\n/**\n * @title CrowdSale\n * @dev https://github.com/\n */\ncontract PreICO is Ownable {\n\n    ERC20 public token;\n    \n    ERC20 public authorize;\n    \n    using SafeMath for uint;\n\n    address public backEndOperator = msg.sender;\n    address bounty = 0xAddEB4E7780DB11b7C5a0b7E96c133e50f05740E; // 0.4% - для баунти программы\n\n    mapping(address=>bool) public whitelist;\n\n    mapping(address => uint256) public investedEther;\n\n    uint256 public startPreICO = 1543700145; \n    uint256 public endPreICO = 1547510400; \n\n    uint256 public investors; // total number of investors\n    uint256 public weisRaised; // total amount collected by ether\n\n    uint256 public hardCap1Stage = 10000000*1e18; // 10,000,000 SPC = $1,000,000 EURO\n\n    uint256 public buyPrice; // 0.1 EURO\n    uint256 public euroPrice; // Ether by USD\n\n    uint256 public soldTokens; // solded tokens - > 10,000,000 SPC\n\n    event Authorized(address wlCandidate, uint timestamp);\n    event Revoked(address wlCandidate, uint timestamp);\n    event UpdateDollar(uint256 time, uint256 _rate);\n\n    modifier backEnd() {\n        require(msg.sender == backEndOperator || msg.sender == owner);\n        _;\n    }\n\n    // contract constructor\n    constructor(ERC20 _token, ERC20 _authorize, uint256 usdETH) public {\n        token = _token;\n        authorize = _authorize;\n        euroPrice = usdETH;\n        buyPrice = (1e18/euroPrice).div(10); // 0.1 euro\n    }\n\n    // change the date of commencement of pre-sale\n    function setStartSale(uint256 newStartSale) public onlyOwner {\n        startPreICO = newStartSale;\n    }\n\n    // change the date of the end of pre-sale\n    function setEndSale(uint256 newEndSale) public onlyOwner {\n        endPreICO = newEndSale;\n    }\n\n    // Change of operator’s backend address\n    function setBackEndAddress(address newBackEndOperator) public onlyOwner {\n        backEndOperator = newBackEndOperator;\n    }\n\n    // Change in the rate of dollars to broadcast\n    function setBuyPrice(uint256 _dollar) public backEnd {\n        euroPrice = _dollar;\n        buyPrice = (1e18/euroPrice).div(10); // 0.1 euro\n        emit UpdateDollar(now, euroPrice);\n    }\n\n\n    /*******************************************************************************\n     * Payable's section\n     */\n\n    function isPreICO() public constant returns(bool) {\n        return now >= startPreICO && now <= endPreICO;\n    }\n\n    // callback contract function\n    function () public payable {\n        require(authorize.isWhitelisted(msg.sender));\n        require(isPreICO());\n        require(msg.value >= buyPrice.mul(100)); // ~ 10 EURO\n        SalePreICO(msg.sender, msg.value);\n        require(soldTokens<=hardCap1Stage);\n        investedEther[msg.sender] = investedEther[msg.sender].add(msg.value);\n    }\n\n    // release of tokens during the pre-sale period\n    function SalePreICO(address _investor, uint256 _value) internal {\n        uint256 tokens = _value.mul(1e18).div(buyPrice);\n        token.mintFromICO(_investor, tokens);\n        soldTokens = soldTokens.add(tokens);\n        uint256 tokensBoynty = tokens.div(250); // 2 %\n        token.mintFromICO(bounty, tokensBoynty);\n        weisRaised = weisRaised.add(_value);\n    }\n    \n    function manualMint(address _investor, uint256 _tokens)  public onlyOwner {\n        token.mintFromICO(_investor, _tokens);\n    }\n    \n    // Sending air from the contract\n    function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\n        _to.transfer(amount);\n    }\n\n   \n}",
  "bytecode": "608060405233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073addeb4e7780db11b7c5a0b7e96c133e50f05740e600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550635c02feb1600755635c3d22806008556a084595161401484a000000600b553480156100c557600080fd5b50604051606080611328833981018060405281019080805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d819055506101fb600a600d54670de0b6b3a76400008115156101df57fe5b04610209640100000000026110b8179091906401000000009004565b600c8190555050505061021f565b6000818381151561021657fe5b04905092915050565b6110fa8061022e6000396000f30060806040526004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063050895ff1461030b578063274448ff1461036257806331198d19146103b95780635ed9ebfc1461040657806363ae8d6c14610431578063702cb4c31461045e57806377f3293a146104895780638620410b146104b45780638ac27f5f146104df5780638da5cb5b1461050a5780639b19251a14610561578063ababa4a7146105bc578063b60f5b9114610613578063b701dc1414610642578063ba8029bb14610685578063bc40b52a146106b2578063cb76b172146106dd578063da5f838d14610708578063e4c5ff4614610733578063fb3ab12b14610780578063fc0c546a146107ad575b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633af32abf336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156101da57600080fd5b505af11580156101ee573d6000803e3d6000fd5b505050506040513d602081101561020457600080fd5b8101908080519060200190929190505050151561022057600080fd5b610228610804565b151561023357600080fd5b6102496064600c5461081f90919063ffffffff16565b341015151561025757600080fd5b6102613334610857565b600b54600e541115151561027457600080fd5b6102c634600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b0190919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550005b34801561031757600080fd5b50610320610b1d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036e57600080fd5b506103a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b43565b6040518082815260200191505060405180910390f35b3480156103c557600080fd5b50610404600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b5b565b005b34801561041257600080fd5b5061041b610c01565b6040518082815260200191505060405180910390f35b34801561043d57600080fd5b5061045c60048036038101908080359060200190929190505050610c07565b005b34801561046a57600080fd5b50610473610d34565b6040518082815260200191505060405180910390f35b34801561049557600080fd5b5061049e610d3a565b6040518082815260200191505060405180910390f35b3480156104c057600080fd5b506104c9610d40565b6040518082815260200191505060405180910390f35b3480156104eb57600080fd5b506104f4610d46565b6040518082815260200191505060405180910390f35b34801561051657600080fd5b5061051f610d4c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561056d57600080fd5b506105a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d71565b604051808215151515815260200191505060405180910390f35b3480156105c857600080fd5b506105d1610d91565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561061f57600080fd5b50610628610804565b604051808215151515815260200191505060405180910390f35b34801561064e57600080fd5b50610683600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610db7565b005b34801561069157600080fd5b506106b060048036038101908080359060200190929190505050610e56565b005b3480156106be57600080fd5b506106c7610ebb565b6040518082815260200191505060405180910390f35b3480156106e957600080fd5b506106f2610ec1565b6040518082815260200191505060405180910390f35b34801561071457600080fd5b5061071d610ec7565b6040518082815260200191505060405180910390f35b34801561073f57600080fd5b5061077e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ecd565b005b34801561078c57600080fd5b506107ab6004803603810190808035906020019092919050505061102d565b005b3480156107b957600080fd5b506107c2611092565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600754421015801561081a57506008544211155b905090565b6000808314156108325760009050610851565b818302905081838281151561084357fe5b0414151561084d57fe5b8090505b92915050565b600080610889600c5461087b670de0b6b3a76400008661081f90919063ffffffff16565b6110b890919063ffffffff16565b9150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633aa0396a85846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561095057600080fd5b505af1158015610964573d6000803e3d6000fd5b505050506040513d602081101561097a57600080fd5b8101908080519060200190929190505050506109a182600e54610b0190919063ffffffff16565b600e819055506109bb60fa836110b890919063ffffffff16565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633aa0396a600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b505050506040513d6020811015610ace57600080fd5b810190808051906020019092919050505050610af583600a54610b0190919063ffffffff16565b600a8190555050505050565b60008183019050828110151515610b1457fe5b80905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60066020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bb657600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610bfc573d6000803e3d6000fd5b505050565b600e5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610caf57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610cba57600080fd5b80600d81905550610cea600a600d54670de0b6b3a7640000811515610cdb57fe5b046110b890919063ffffffff16565b600c819055507f8e5d322ef7050e99e3845ad9d8b2608b9512de19853d4215b71b7a4ee2993d4f42600d54604051808381526020018281526020019250505060405180910390a150565b600d5481565b60085481565b600c5481565b60095481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e1257600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610eb157600080fd5b8060078190555050565b60075481565b600b5481565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f2857600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633aa0396a83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610fed57600080fd5b505af1158015611001573d6000803e3d6000fd5b505050506040513d602081101561101757600080fd5b8101908080519060200190929190505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561108857600080fd5b8060088190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081838115156110c557fe5b049050929150505600a165627a7a72305820c8db52c9183942fec30cc5a31d23e2a169aa90c4fb1d7c5b5806d52461832e0a00290000000000000000000000003da85b2a7cf6f3ccec6953776161750681a7560f0000000000000000000000004a6ead96974679957a17d2f9c7835a3da7ddf91d0000000000000000000000000000000000000000000000000000000000000067",
  "constructorArguments": "0000000000000000000000003da85b2a7cf6f3ccec6953776161750681a7560f0000000000000000000000004a6ead96974679957a17d2f9c7835a3da7ddf91d0000000000000000000000000000000000000000000000000000000000000067"
}