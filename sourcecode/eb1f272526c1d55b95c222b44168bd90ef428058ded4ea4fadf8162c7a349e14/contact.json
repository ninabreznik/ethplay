{
  "address": "0x7eb790c9fc772aadeb965404941b08fc68b8613f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EightHoursToken",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-07\n*/\n\npragma solidity >=0.4.22 <0.6.0;\n\n//-----------------------------------------------------------------------------\n/// @title Eight Hour Token contract\n/// @notice defines standard ERC-20 functionality.\n//-----------------------------------------------------------------------------\ncontract EightHoursToken {\n    //-------------------------------------------------------------------------\n    /// @dev Emits when ownership of EHrT changes by any mechanism. Also emits\n    ///  when tokens are destroyed ('to' == 0).\n    //-------------------------------------------------------------------------\n    event Transfer (address indexed _from, address indexed _to, uint _tokens);\n\n    //-------------------------------------------------------------------------\n    /// @dev Emits when an approved spender is changed or reaffirmed, or if\n    ///  the allowance amount changes. The zero address indicates there is no\n    ///  approved address.\n    //-------------------------------------------------------------------------\n    event Approval (\n        address indexed _tokenOwner, \n        address indexed _spender, \n        uint _tokens\n    );\n    \n    // total number of tokens in circulation.\n    //  Burning tokens reduces this amount\n    uint totalEHrT = (10 ** 10) * (10**18);    // ten billion\n    // the token balances of all token holders\n    mapping (address => uint) ehrtBalances;\n    // approved spenders and allowances of all token holders\n    mapping (address => mapping (address => uint)) allowances;\n\n    constructor() public {\n        ehrtBalances[msg.sender] = totalEHrT;\n    }\n    \n    //-------------------------------------------------------------------------\n    /// @dev Throws if tokenOwner has insufficient EHrT balance\n    //-------------------------------------------------------------------------\n    modifier sufficientFunds(address tokenOwner, uint tokens) {\n        require (ehrtBalances[tokenOwner] >= tokens, \"Insufficient balance\");\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Send `(tokens/1000000000000000000).fixed(0,18)` EHrT to `to`.\n    /// @dev Throws if `msg.sender` has insufficient balance for transfer.\n    /// @param _to The address to where EHrT is being sent.\n    /// @param _tokens The number of tokens to send.\n    /// @return True upon successful transfer. Will throw if unsuccessful.\n    //-------------------------------------------------------------------------\n    function transfer(address _to, uint _tokens) \n        public\n        sufficientFunds(msg.sender, _tokens)\n        returns(bool) \n    {\n        // subtract amount from sender\n        ehrtBalances[msg.sender] -= _tokens;\n\n        if (_to != address(0)) {\n            // add amount to token receiver\n            ehrtBalances[_to] += _tokens;\n        }\n        else {\n            // burn amount\n            totalEHrT -= _tokens;\n        }\n\n        // emit transfer event\n        emit Transfer(msg.sender, _to, _tokens);\n        \n        return true;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Send `(tokens/1000000000000000000).fixed(0,18)` EHrT from\n    ///  `from` to `to`.\n    /// @dev Throws if `msg.sender` has insufficient allowance for transfer.\n    ///  Throws if `from` has insufficient balance for transfer.\n    /// @param _from The address from where EHrT is being sent. Sender must be\n    ///  an approved spender.\n    /// @param _to The token owner whose EHrT is being sent.\n    /// @param _tokens The number of tokens to send.\n    /// @return True upon successful transfer. Will throw if unsuccessful.\n    //-------------------------------------------------------------------------\n    function transferFrom(address _from, address _to, uint _tokens) \n        public\n        sufficientFunds(_from, _tokens)\n        returns(bool) \n    {\n        require (\n            allowances[_from][msg.sender] >= _tokens, \n            \"Insufficient allowance\"\n        );\n        // subtract amount from sender's allowance\n        allowances[_from][msg.sender] -= _tokens;\n        // subtract amount from token owner\n        ehrtBalances[_from] -= _tokens;\n\n        if (_to != address(0)) {\n            // add amount to token receiver\n            ehrtBalances[_to] += _tokens;\n        }\n        else {\n            // burn amount\n            totalEHrT -= _tokens;\n        }\n        // emit transfer event\n        emit Transfer(_from, _to, _tokens);\n\n        return true;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Allow `_spender` to withdraw from your account, multiple times,\n    ///  up to `(tokens/1000000000000000000).fixed(0,18)` EHrT. Calling this\n    ///  function overwrites the previous allowance of spender.\n    /// @dev Emits approval event\n    /// @param _spender The address to authorize as a spender\n    /// @param _tokens The new token allowance of spender (in pWei).\n    //-------------------------------------------------------------------------\n    function approve(address _spender, uint _tokens) external returns(bool) {\n        // set the spender's allowance to token amount\n        allowances[msg.sender][_spender] = _tokens;\n        // emit approval event\n        emit Approval(msg.sender, _spender, _tokens);\n\n        return true;\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Get the total number of tokens in circulation.\n    /// @return Total tokens tracked by this contract.\n    //-------------------------------------------------------------------------\n    function totalSupply() external view returns (uint) { return totalEHrT; }\n\n    //-------------------------------------------------------------------------\n    /// @notice Get the number of EHrT tokens owned by `_tokenOwner`.\n    /// @param _tokenOwner The EHrT token owner.\n    /// @return The number of EHrT tokens owned by `tokenOwner` (in pWei).\n    //-------------------------------------------------------------------------\n    function balanceOf(address _tokenOwner) public view returns(uint) {\n        return ehrtBalances[_tokenOwner];\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Get the remaining allowance of spender for token owner.\n    /// @param _tokenOwner The EHrT token owner.\n    /// @param _spender The approved spender address.\n    /// @return The remaining allowance of spender for tokenOwner.\n    //-------------------------------------------------------------------------\n    function allowance(\n        address _tokenOwner, \n        address _spender\n    ) public view returns (uint) {\n        return allowances[_tokenOwner][_spender];\n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Get the token's name.\n    /// @return The token's name as a string\n    //-------------------------------------------------------------------------\n    function name() external pure returns (string memory) { \n        return \"Eight Hours Token\"; \n    }\n\n    //-------------------------------------------------------------------------\n    /// @notice Get the token's ticker symbol.\n    /// @return The token's ticker symbol as a string\n    //-------------------------------------------------------------------------\n    function symbol() external pure returns (string memory) { return \"EHrT\"; }\n\n    //-------------------------------------------------------------------------\n    /// @notice Get the number of allowed decimal places for the token.\n    /// @return The number of allowed decimal places for the token.\n    //-------------------------------------------------------------------------\n    function decimals() external pure returns (uint8) { return 18; }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040526b204fce5e3e2502611000000060005534801561002057600080fd5b50600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c92806100766000396000f3fe608060405260043610610093576000357c01000000000000000000000000000000000000000000000000000000009004806306fdde0314610098578063095ea7b31461012857806318160ddd1461019b57806323b872dd146101c6578063313ce5671461025957806370a082311461028a57806395d89b41146102ef578063a9059cbb1461037f578063dd62ed3e146103f2575b600080fd5b3480156100a457600080fd5b506100ad610477565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ed5780820151818401526020810190506100d2565b50505050905090810190601f16801561011a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013457600080fd5b506101816004803603604081101561014b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506104b4565b604051808215151515815260200191505060405180910390f35b3480156101a757600080fd5b506101b06105a6565b6040518082815260200191505060405180910390f35b3480156101d257600080fd5b5061023f600480360360608110156101e957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105af565b604051808215151515815260200191505060405180910390f35b34801561026557600080fd5b5061026e61093f565b604051808260ff1660ff16815260200191505060405180910390f35b34801561029657600080fd5b506102d9600480360360208110156102ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610948565b6040518082815260200191505060405180910390f35b3480156102fb57600080fd5b50610304610991565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610344578082015181840152602081019050610329565b50505050905090810190601f1680156103715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038b57600080fd5b506103d8600480360360408110156103a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109ce565b604051808215151515815260200191505060405180910390f35b3480156103fe57600080fd5b506104616004803603604081101561041557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bdf565b6040518082815260200191505060405180910390f35b60606040805190810160405280601181526020017f456967687420486f75727320546f6b656e000000000000000000000000000000815250905090565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b6000838280600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561066a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e73756666696369656e742062616c616e636500000000000000000000000081525060200191505060405180910390fd5b83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561075e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f496e73756666696369656e7420616c6c6f77616e63650000000000000000000081525060200191505060405180910390fd5b83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415156108bd5783600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506108cd565b8360008082825403925050819055505b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a36001925050509392505050565b60006012905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606040805190810160405280600481526020017f4548725400000000000000000000000000000000000000000000000000000000815250905090565b6000338280600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a89576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e73756666696369656e742062616c616e636500000000000000000000000081525060200191505060405180910390fd5b83600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515610b5e5783600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550610b6e565b8360008082825403925050819055505b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509291505056fea165627a7a723058209caf97b7f1557cc8382961a840c8c91ba85f66c67465bbac36ddcf408dae0b5a0029"
}