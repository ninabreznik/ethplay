{
  "address": "0xdfc328c19c8de45ac0117f836646378c10e0cda3",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SmartRoulette",
  "compilerVersion": "v0.4.8+commit.60cc1668",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-04-07\n*/\n\npragma solidity ^0.4.8;\n\ncontract WinMatrix\n {\n   function getCoeff(uint16 n) external returns (uint256);\n   function getBetsProcessed() external constant returns (uint16);\n }\n\ncontract SmartRouletteToken \n{\n   function emission(address player, address partner, uint256 value_bet, uint256 coef_player, uint256 coef_partner) external returns(uint256, uint8);\n   function isOperationBlocked() external constant returns (bool);\n}\n\ncontract SmartAffiliate \n{   \n   function getAffiliateInfo(address player) external constant returns(address affiliate, uint16 coef_affiliate, uint16 coef_player);\n}\n\n/*\n** User interface for SmartRoulette https://smartroulette.io\n*/\ncontract SmartRoulette\n{\n  address developer;\n  address operator;\n\n  // Wait BlockDelay blocks before generate random number\n  uint8 BlockDelay;\n\n  // Maximum bet value for game (one credit is currentMaxBet/256)\n  uint256 currentMaxBet;    \n\n  // maximum games count per block\n  uint64 maxGamblesPerBlock;\n        \n  // Enable\\disable to place new bets\n  bool ContractState;\n\n  // table with winner coefficients\n  WinMatrix winMatrix;\n\n  SmartRouletteToken smartToken;\n\n  address public profitDistributionContract;\n\n  SmartAffiliate smartAffiliateContract;\n\n  uint16 constant maxTypeBets = 157;\n  \n  // Default coef for token emission (if SmartAffiliate contract is not setup)\n  uint16 CoefPlayerEmission;   \n  // \n  mapping (uint8 => uint8) private minCreditsOnBet;\n  mapping (uint8 => uint8) private maxCreditsOnBet;\n\n  struct GameInfo\n  {\n       address player;\n       uint256 blockNumber;\n       uint8 wheelResult;\n       uint256 bets;\n       bytes32 values;\n       bytes32 values2;\n  } \n       \n  GameInfo[] private gambles;\n\n   enum GameStatus {Success, Skipped, Stop}\n\n   enum BetTypes{number0, number1,number2,number3,number4,number5,number6,number7,number8,number9,\n     number10,number11,number12,number13,number14,number15,number16,number17,number18,number19,number20,number21,\n     number22,number23,number24,number25,number26,number27,number28,number29,number30,number31,number32,number33,\n     number34,number35,number36, red, black, odd, even, dozen1,dozen2,dozen3, column1,column2,column3, low,high,\n     pair_01, pair_02, pair_03, pair_12, pair_23, pair_36, pair_25, pair_14, pair_45, pair_56, pair_69, pair_58, pair_47,\n     pair_78, pair_89, pair_912, pair_811, pair_710, pair_1011, pair_1112, pair_1215, pair_1518, pair_1617, pair_1718, pair_1720,\n     pair_1619, pair_1922, pair_2023, pair_2124, pair_2223, pair_2324, pair_2528, pair_2629, pair_2730, pair_2829, pair_2930, pair_1114,\n     pair_1013, pair_1314, pair_1415, pair_1316, pair_1417, pair_1821, pair_1920, pair_2021, pair_2225, pair_2326, pair_2427, pair_2526,\n     pair_2627, pair_2831, pair_2932, pair_3033, pair_3132, pair_3233, pair_3134, pair_3235, pair_3336, pair_3435, pair_3536, corner_0_1_2_3,\n     corner_1_2_5_4, corner_2_3_6_5, corner_4_5_8_7, corner_5_6_9_8, corner_7_8_11_10, corner_8_9_12_11, corner_10_11_14_13, corner_11_12_15_14,\n     corner_13_14_17_16, corner_14_15_18_17, corner_16_17_20_19, corner_17_18_21_20, corner_19_20_23_22, corner_20_21_24_23, corner_22_23_26_25,\n     corner_23_24_27_26, corner_25_26_29_28, corner_26_27_30_29, corner_28_29_32_31, corner_29_30_33_32, corner_31_32_35_34, corner_32_33_36_35,\n     three_0_2_3, three_0_1_2, three_1_2_3, three_4_5_6, three_7_8_9, three_10_11_12, three_13_14_15, three_16_17_18, three_19_20_21, three_22_23_24,\n     three_25_26_27, three_28_29_30, three_31_32_33, three_34_35_36, six_1_2_3_4_5_6, six_4_5_6_7_8_9, six_7_8_9_10_11_12, six_10_11_12_13_14_15,\n     six_13_14_15_16_17_18, six_16_17_18_19_20_21, six_19_20_21_22_23_24, six_22_23_24_25_26_27, six_25_26_27_28_29_30, six_28_29_30_31_32_33,\n     six_31_32_33_34_35_36}\n   \n\n   function SmartRoulette() internal\n   {        \n        developer  = msg.sender;\n        operator   = msg.sender;\n        \n        winMatrix = WinMatrix(0x073D6621E9150bFf9d1D450caAd3c790b6F071F2);\n        if (winMatrix.getBetsProcessed() != maxTypeBets) throw;\n        \n        smartToken = SmartRouletteToken(0xcced5b8288086be8c38e23567e684c3740be4d48);\n\n        currentMaxBet = 2560 finney; // 2.56 ether\n        BlockDelay = 1;        \n        maxGamblesPerBlock = 5;        \n        ContractState  = true;  \n        bankrolLimit = 277 ether;\n        profitLimit  = 50 ether;\n        CoefPlayerEmission = 100; // default 1%\n   }\n\n   function changeSettings(uint256 newMaxBet, uint8 newBlockDelay) public onlyDeveloper \n   {             \n      BlockDelay = newBlockDelay;\n      // rounds to 2 digts\n      newMaxBet = newMaxBet / 2560000000000000000 * 2560000000000000000;  \n      if (newMaxBet != currentMaxBet) \n      {\n        currentMaxBet = newMaxBet;\n        SettingsChanged();\n      }\n   }\n\n   uint256 bankrolLimit;\n   uint256 profitLimit;\n   uint256 lastDistributedProfit;\n   uint256 lastDateDistributedProfit;\n   \n   function getDistributeProfitsInfo() public constant returns (uint256 lastProfit, uint256 lastDate)\n   {\n      lastProfit = lastDistributedProfit;\n      lastDate = lastDateDistributedProfit;\n   }\n\n   function setProfitDistributionContract(address contractAddress) onlyDeveloper\n   {\n      if (profitDistributionContract > 0) throw;\n      profitDistributionContract = contractAddress;\n   }\n\n   function setSmartAffiliateContract(address contractAddress) onlyDeveloper\n   {\n      if (address(smartAffiliateContract) > 0) throw;\n      smartAffiliateContract = SmartAffiliate(contractAddress);\n   }\n\n   function distributeProfits(uint256 gasValue) onlyDeveloperOrOperator\n   {\n      if (profitDistributionContract > 0 && this.balance >= (bankrolLimit+profitLimit))\n      {\n         uint256 diff = this.balance - bankrolLimit;\n         if (address(profitDistributionContract).call.gas(gasValue).value(diff)() == false) throw;\n         lastDistributedProfit = diff;\n         lastDateDistributedProfit = block.timestamp;\n      }      \n   }\n\n   function getTokenSettings() public constant returns(uint16 Coef_player, uint256 BankrolLimit, uint256 ProfitLimit)\n   {\n      Coef_player = CoefPlayerEmission;      \n      BankrolLimit = bankrolLimit;\n      ProfitLimit = profitLimit;\n   }\n\n   function changeTokenSettings(uint16 newCoef_player, uint256 newBankrolLimit, uint256 newProfitLimit) onlyDeveloper\n   {\n      CoefPlayerEmission  = newCoef_player;      \n      bankrolLimit = newBankrolLimit;\n      profitLimit  = newProfitLimit;\n   }\n\n   function changeMinBet(uint8[157] value) onlyDeveloper\n   {\n     // value[i] == 0 means skip this value\n     // value[i] == 255 means value will be 0\n     // Raw mapping minCreditsOnBet changes from 0 to 254, \n     // when compare with real bet we add +1, so min credits changes from 1 to 255\n     for(var i=0;i<157;i++) \n     {\n        if (value[i] > 0) \n        {\n           if (value[i] == 255)\n             minCreditsOnBet[i] = 0;     \n           else  \n             minCreditsOnBet[i] = value[i];\n        }\n     }\n     SettingsChanged();\n   }\n\n   function changeMaxBet(uint8[157] value) onlyDeveloper\n   {\n     // value[i] == 0 means skip this value\n     // value[i] == 255 means value will be 0\n     // Raw mapping maxCreditsOnBet hold values that reduce max bet from 255 to 0     \n     // If we want to calculate real max bet value we should do: 256 - maxCreditsOnBet[i]\n     // example: if mapping holds 0 it means, that max bet will be 256 - 0 = 256\n     //          if mapping holds 50 it means, that max bet will be 256 - 50 = 206 \n     for(var i=0;i<157;i++) \n     {\n       if (value[i] > 0) \n       {\n          if (value[i] == 255)\n             maxCreditsOnBet[i] = 0;     \n           else  \n             maxCreditsOnBet[i] = 255 - value[i];              \n       }\n     }\n     SettingsChanged();\n   }\n   \n   function deleteContract() onlyDeveloper  \n   {\n        suicide(msg.sender);\n   }\n\n   // bit from 0 to 255\n   function isBitSet(uint256 data, uint8 bit) private constant returns (bool ret)\n   {\n       assembly {\n            ret := iszero(iszero(and(data, exp(2,bit))))\n        }\n        return ret;\n   }\n\n   // unique combination of bet and wheelResult, used for access to WinMatrix\n   function getIndex(uint16 bet, uint16 wheelResult) private constant returns (uint16)\n   {\n      return (bet+1)*256 + (wheelResult+1);\n   }\n\n   // n form 1 <= to <= 32\n   function getBetValue(bytes32 values, uint8 n, uint8 nBit) private constant returns (uint256)\n   {\n        // bet in credits (1..256) \n        uint256 bet = uint256(values[32 - n]) + 1;\n\n        if (bet < uint256(minCreditsOnBet[nBit]+1)) throw;   //default: bet < 0+1\n        if (bet > uint256(256-maxCreditsOnBet[nBit])) throw; //default: bet > 256-0      \n\n        return currentMaxBet * bet / 256;        \n   }\n\n   // n - number player bet\n   // nBit - betIndex\n   function getBetValueByGamble(GameInfo memory gamble, uint8 n, uint8 nBit) private constant returns (uint256) \n   {\n      if (n <= 32) return getBetValue(gamble.values , n, nBit);\n      if (n <= 64) return getBetValue(gamble.values2, n - 32, nBit);\n      // there are 64 maximum unique bets (positions) in one game\n      throw;\n   }\n  \n   function totalGames() constant returns (uint256)\n   {\n       return gambles.length;\n   }\n   \n   function getSettings() constant returns(uint256 maxBet, uint256 oneCredit, uint8[157] _minCreditsOnBet, uint8[157] _maxCreditsOnBet, uint8 blockDelay, bool contractState)\n    {\n        maxBet    = currentMaxBet;\n        oneCredit = currentMaxBet / 256; \n        blockDelay = BlockDelay;      \n        for(var i = 0;i < maxTypeBets;i++)  \n        {\n          _minCreditsOnBet[i] = minCreditsOnBet[i] + 1;\n          _maxCreditsOnBet[i] = 255 - maxCreditsOnBet[i];\n        }     \n        contractState        = ContractState;\n    }\n   \n    modifier onlyDeveloper() \n    {\n       if (msg.sender != developer) throw;\n       _;\n    }\n\n    modifier onlyDeveloperOrOperator() \n    {\n       if (msg.sender != developer && msg.sender != operator) throw;\n       _;\n    }\n\n   function disableBetting_only_Dev()\n    onlyDeveloperOrOperator\n    {\n        ContractState=false;\n    }\n\n\n    function changeOperator(address newOperator) onlyDeveloper\n    {\n       operator = newOperator;\n    }\n\n    function enableBetting_only_Dev()\n    onlyDeveloperOrOperator\n    {\n        ContractState=true;\n\n    }\n\n    event PlayerBet(uint256 gambleId, uint256 playerTokens);\n    event EndGame(address player, uint8 result, uint256 gambleId);\n    event SettingsChanged();\n    event ErrorLog(address player, string message);\n    event GasLog(string msg, uint256 level, uint256 gas);\n\n   function totalBetValue(GameInfo memory g) private constant returns (uint256)\n   {              \n       uint256 totalBetsValue = 0; \n       uint8 nPlayerBetNo = 0;\n       uint8 betsCount = uint8(bytes32(g.bets)[0]);\n\n       for(uint8 i = 0; i < maxTypeBets;i++) \n        if (isBitSet(g.bets, i))\n        {\n          totalBetsValue += getBetValueByGamble(g, nPlayerBetNo+1, i);\n          nPlayerBetNo++;\n\n          if (betsCount == 1) break;\n          betsCount--;          \n        }\n\n       return totalBetsValue;\n   }\n\n   function totalBetCount(GameInfo memory g) private constant returns (uint256)\n   {              \n       uint256 totalBets = 0; \n       for(uint8 i=0; i < maxTypeBets;i++) \n        if (isBitSet(g.bets, i)) totalBets++;          \n       return totalBets;   \n   }\n\n   function placeBet(uint256 bets, bytes32 values1,bytes32 values2) public payable\n   {\n       if (ContractState == false)\n       {\n         ErrorLog(msg.sender, \"ContractDisabled\");\n         if (msg.sender.send(msg.value) == false) throw;\n         return;\n       }\n\n       var gamblesLength = gambles.length;\n\n       if (gamblesLength > 0)\n       {\n          uint8 gamblesCountInCurrentBlock = 0;\n          for(var i = gamblesLength - 1;i > 0; i--)\n          {\n            if (gambles[i].blockNumber == block.number) \n            {\n               if (gambles[i].player == msg.sender)\n               {\n                   ErrorLog(msg.sender, \"Play twice the same block\");\n                   if (msg.sender.send(msg.value) == false) throw;\n                   return;\n               }\n\n               gamblesCountInCurrentBlock++;\n               if (gamblesCountInCurrentBlock >= maxGamblesPerBlock)\n               {\n                  ErrorLog(msg.sender, \"maxGamblesPerBlock\");\n                  if (msg.sender.send(msg.value) == false) throw;\n                  return;\n               }\n            }\n            else\n            {\n               break;\n            }\n          }\n       }\n       \n       var _currentMaxBet = currentMaxBet;\n\n       if (msg.value < _currentMaxBet/256 || bets == 0)\n       {\n          ErrorLog(msg.sender, \"Wrong bet value\");\n          if (msg.sender.send(msg.value) == false) throw;\n          return;\n       }\n\n       if (msg.value > _currentMaxBet)\n       {\n          ErrorLog(msg.sender, \"Limit for table\");\n          if (msg.sender.send(msg.value) == false) throw;\n          return;\n       }\n\n       GameInfo memory g = GameInfo(msg.sender, block.number, 37, bets, values1,values2);\n\n       if (totalBetValue(g) != msg.value)\n       {\n          ErrorLog(msg.sender, \"Wrong bet value\");\n          if (msg.sender.send(msg.value) == false) throw;\n          return;\n       }       \n\n       address affiliate = 0;\n       uint16 coef_affiliate = 0;\n       uint16 coef_player;\n       if (address(smartAffiliateContract) > 0)\n       {        \n         (affiliate, coef_affiliate, coef_player) = smartAffiliateContract.getAffiliateInfo(msg.sender);   \n       }\n       else\n       {\n         coef_player = CoefPlayerEmission;\n       }\n\n       uint256 playerTokens;\n       uint8 errorCodeEmission;\n       \n       (playerTokens, errorCodeEmission) = smartToken.emission(msg.sender, affiliate, msg.value, coef_player, coef_affiliate);\n       if (errorCodeEmission != 0)\n       {\n          if (errorCodeEmission == 1) \n            ErrorLog(msg.sender, \"token operations stopped\");\n          else if (errorCodeEmission == 2) \n            ErrorLog(msg.sender, \"contract is not in a games list\");\n          else if (errorCodeEmission == 3) \n            ErrorLog(msg.sender, \"incorect player address\");\n          else if (errorCodeEmission == 4) \n            ErrorLog(msg.sender, \"incorect value bet\");\n          else if (errorCodeEmission == 5) \n            ErrorLog(msg.sender, \"incorect Coefficient emissions\");\n          \n          if (msg.sender.send(msg.value) == false) throw;\n          return;\n       }\n\n       gambles.push(g);\n\n       PlayerBet(gamblesLength, playerTokens); \n   }\n\n    function Invest() payable onlyDeveloper\n    {      \n    }\n\n    function GetGameIndexesToProcess() public constant returns (uint256[64] gameIndexes)\n    {           \n      uint8 index = 0;\n      for(int256 i = int256(gambles.length) - 1;i >= 0;i--)\n      {      \n         GameInfo memory g = gambles[uint256(i)];\n         if (block.number - g.blockNumber >= 256) break;\n\n         if (g.wheelResult == 37 && block.number >= g.blockNumber + BlockDelay)\n         { \n            gameIndexes[index++] = uint256(i + 1);\n         }\n      }      \n    }\n\n    uint256 lastBlockGamesProcessed;\n\n    function ProcessGames(uint256[] gameIndexes, bool simulate) \n    {\n      if (!simulate)\n      {\n         if (lastBlockGamesProcessed == block.number)  return;\n         lastBlockGamesProcessed = block.number;\n      }\n\n      uint8 delay = BlockDelay;\n      uint256 length = gameIndexes.length;\n      bool success = false;\n      for(uint256 i = 0;i < length;i++)\n      {      \n         if (ProcessGame(gameIndexes[i], delay) == GameStatus.Success) success = true;         \n      }      \n      if (simulate && !success) throw;\n    }\n    \n    function ProcessGameExt(uint256 index) public returns (GameStatus)\n    {\n      return ProcessGame(index, BlockDelay);\n    }\n\n    function ProcessGame(uint256 index, uint256 delay) private returns (GameStatus)\n    {            \n      GameInfo memory g = gambles[index];\n      if (block.number - g.blockNumber >= 256) return GameStatus.Stop;\n\n      if (g.wheelResult == 37 && block.number > g.blockNumber + delay)\n      {            \n         gambles[index].wheelResult = getRandomNumber(g.player, g.blockNumber);\n                 \n         uint256 playerWinnings = getGameResult(gambles[index]);\n         if (playerWinnings > 0) \n         {\n            if (g.player.send(playerWinnings) == false) throw;\n         }\n\n         EndGame(g.player, gambles[index].wheelResult, index);\n         return GameStatus.Success;\n      }\n\n      return GameStatus.Skipped;\n    }\n\n    function getRandomNumber(address player, uint256 playerblock) private returns(uint8 wheelResult)\n    {\n        // block.blockhash - hash of the given block - only works for 256 most recent blocks excluding current\n        bytes32 blockHash = block.blockhash(playerblock+BlockDelay); \n        \n        if (blockHash==0) \n        {\n          ErrorLog(msg.sender, \"Cannot generate random number\");\n          wheelResult = 200;\n        }\n        else\n        {\n          bytes32 shaPlayer = sha3(player, blockHash);\n    \n          wheelResult = uint8(uint256(shaPlayer)%37);\n        }    \n    }\n\n    function calculateRandomNumberByBlockhash(uint256 blockHash, address player) public constant returns (uint8 wheelResult) \n    { \n          bytes32 shaPlayer = sha3(player, blockHash);\n    \n          wheelResult = uint8(uint256(shaPlayer)%37);\n    }\n\n    function emergencyFixGameResult(uint64 gambleId, uint256 blockHash) onlyDeveloperOrOperator\n    {\n      // Probably this function will never be called, but\n      // if game was not spinned in 256 blocks then block.blockhash will returns always 0 and \n      // we should fix this manually (you can check result with public function calculateRandomNumberByBlockhash)\n      GameInfo memory gamble = gambles[gambleId];\n      if (gamble.wheelResult != 200) throw;\n\n      gambles[gambleId].wheelResult = calculateRandomNumberByBlockhash(blockHash, gamble.player);      \n\n      uint256 playerWinnings = getGameResult(gambles[gambleId]);\n      if (playerWinnings > 0)\n      {\n        if (gamble.player.send(playerWinnings) == false) throw;\n      }      \n\n      EndGame(gamble.player, gamble.wheelResult, gambleId);\n    }\n\n\n    function preliminaryGameResult(uint64 gambleIndex) constant returns (uint64 gambleId, address player, uint256 blockNumber, uint256 totalWin, uint8 wheelResult, uint256 bets, uint256 values1, uint256 values2, uint256 nTotalBetValue, uint256 nTotalBetCount) \n    { \n      GameInfo memory g = gambles[uint256(gambleIndex)];\n      \n      if (g.wheelResult == 37 && block.number > g.blockNumber + BlockDelay)\n      {\n         gambles[gambleIndex].wheelResult = getRandomNumber(g.player, g.blockNumber);\n         return getGame(gambleIndex);\n      }\n      throw;      \n    }\n\n    // Preliminary game result before real transaction is mined\n    function calcRandomNumberAndGetPreliminaryGameResult(uint256 blockHash, uint64 gambleIndex) constant returns (uint64 gambleId, address player, uint256 blockNumber, uint256 totalWin, uint8 wheelResult, uint256 bets, uint256 values1, uint256 values2, uint256 nTotalBetValue, uint256 nTotalBetCount)\n    { \n      GameInfo memory g = gambles[uint256(gambleIndex)];      \n      g.wheelResult = calculateRandomNumberByBlockhash(blockHash, g.player);      \n\n      gambleId = gambleIndex;\n      player = g.player;\n      wheelResult = g.wheelResult;      \n      totalWin = getGameResult(g);\n      blockNumber = g.blockNumber;              \n      nTotalBetValue = totalBetValue(g);\n      nTotalBetCount = totalBetCount(g);\n      bets = g.bets;\n      values1 = uint256(g.values);\n      values2 = uint256(g.values2);     \n    }\n\n    function getGameResult(GameInfo memory game) private constant returns (uint256 totalWin) \n    {\n        totalWin = 0;\n        uint8 nPlayerBetNo = 0;\n        // we sent count bets at last byte \n        uint8 betsCount = uint8(bytes32(game.bets)[0]); \n        for(uint8 i=0; i<maxTypeBets; i++)\n        {                      \n            if (isBitSet(game.bets, i))\n            {              \n              var winMul = winMatrix.getCoeff(getIndex(i, game.wheelResult)); // get win coef\n              if (winMul > 0) winMul++; // + return player bet\n              totalWin += winMul * getBetValueByGamble(game, nPlayerBetNo+1,i);\n              nPlayerBetNo++; \n\n              if (betsCount == 1) break;\n              betsCount--;\n            }\n        }        \n    }\n\n    function getGame(uint64 index) constant returns (uint64 gambleId, address player, uint256 blockNumber, uint256 totalWin, uint8 wheelResult, uint256 bets, uint256 values1, uint256 values2, uint256 nTotalBetValue, uint256 nTotalBetCount) \n    {\n        gambleId = index;\n        player = gambles[index].player;\n        totalWin = getGameResult(gambles[index]);\n        blockNumber = gambles[index].blockNumber;        \n        wheelResult = gambles[index].wheelResult;\n        nTotalBetValue = totalBetValue(gambles[index]);\n        nTotalBetCount = totalBetCount(gambles[index]);\n        bets = gambles[index].bets;\n        values1 = uint256(gambles[index].values);\n        values2 = uint256(gambles[index].values2);        \n    }\n\n   function() \n   {\n      throw;\n   }\n   \n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint8[157]\"}],\"name\":\"changeMinBet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint8[157]\"}],\"name\":\"changeMaxBet\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gambleId\",\"type\":\"uint64\"},{\"name\":\"blockHash\",\"type\":\"uint256\"}],\"name\":\"emergencyFixGameResult\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bets\",\"type\":\"uint256\"},{\"name\":\"values1\",\"type\":\"bytes32\"},{\"name\":\"values2\",\"type\":\"bytes32\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSettings\",\"outputs\":[{\"name\":\"Coef_player\",\"type\":\"uint16\"},{\"name\":\"BankrolLimit\",\"type\":\"uint256\"},{\"name\":\"ProfitLimit\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDistributeProfitsInfo\",\"outputs\":[{\"name\":\"lastProfit\",\"type\":\"uint256\"},{\"name\":\"lastDate\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCoef_player\",\"type\":\"uint16\"},{\"name\":\"newBankrolLimit\",\"type\":\"uint256\"},{\"name\":\"newProfitLimit\",\"type\":\"uint256\"}],\"name\":\"changeTokenSettings\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"gambleId\",\"type\":\"uint64\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"totalWin\",\"type\":\"uint256\"},{\"name\":\"wheelResult\",\"type\":\"uint8\"},{\"name\":\"bets\",\"type\":\"uint256\"},{\"name\":\"values1\",\"type\":\"uint256\"},{\"name\":\"values2\",\"type\":\"uint256\"},{\"name\":\"nTotalBetValue\",\"type\":\"uint256\"},{\"name\":\"nTotalBetCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setSmartAffiliateContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableBetting_only_Dev\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deleteContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameIndexes\",\"type\":\"uint256[]\"},{\"name\":\"simulate\",\"type\":\"bool\"}],\"name\":\"ProcessGames\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableBetting_only_Dev\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSettings\",\"outputs\":[{\"name\":\"maxBet\",\"type\":\"uint256\"},{\"name\":\"oneCredit\",\"type\":\"uint256\"},{\"name\":\"_minCreditsOnBet\",\"type\":\"uint8[157]\"},{\"name\":\"_maxCreditsOnBet\",\"type\":\"uint8[157]\"},{\"name\":\"blockDelay\",\"type\":\"uint8\"},{\"name\":\"contractState\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitDistributionContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ProcessGameExt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"uint256\"},{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"calculateRandomNumberByBlockhash\",\"outputs\":[{\"name\":\"wheelResult\",\"type\":\"uint8\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gasValue\",\"type\":\"uint256\"}],\"name\":\"distributeProfits\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"uint256\"},{\"name\":\"gambleIndex\",\"type\":\"uint64\"}],\"name\":\"calcRandomNumberAndGetPreliminaryGameResult\",\"outputs\":[{\"name\":\"gambleId\",\"type\":\"uint64\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"totalWin\",\"type\":\"uint256\"},{\"name\":\"wheelResult\",\"type\":\"uint8\"},{\"name\":\"bets\",\"type\":\"uint256\"},{\"name\":\"values1\",\"type\":\"uint256\"},{\"name\":\"values2\",\"type\":\"uint256\"},{\"name\":\"nTotalBetValue\",\"type\":\"uint256\"},{\"name\":\"nTotalBetCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Invest\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxBet\",\"type\":\"uint256\"},{\"name\":\"newBlockDelay\",\"type\":\"uint8\"}],\"name\":\"changeSettings\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetGameIndexesToProcess\",\"outputs\":[{\"name\":\"gameIndexes\",\"type\":\"uint256[64]\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setProfitDistributionContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gambleIndex\",\"type\":\"uint64\"}],\"name\":\"preliminaryGameResult\",\"outputs\":[{\"name\":\"gambleId\",\"type\":\"uint64\"},{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"totalWin\",\"type\":\"uint256\"},{\"name\":\"wheelResult\",\"type\":\"uint8\"},{\"name\":\"bets\",\"type\":\"uint256\"},{\"name\":\"values1\",\"type\":\"uint256\"},{\"name\":\"values2\",\"type\":\"uint256\"},{\"name\":\"nTotalBetValue\",\"type\":\"uint256\"},{\"name\":\"nTotalBetCount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":false,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gambleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerTokens\",\"type\":\"uint256\"}],\"name\":\"PlayerBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"gambleId\",\"type\":\"uint256\"}],\"name\":\"EndGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SettingsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ErrorLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"GasLog\",\"type\":\"event\"}]",
  "bytecode": ""
}