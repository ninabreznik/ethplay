{
  "address": "0x50067c62078579cdc0c76fc04fd28fb6fe3afcd4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Etheremon: Adventure Revenue 2",
  "contractName": "EtheremonAdventureRevenue",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-04\n*/\n\npragma solidity ^0.4.16;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BasicAccessControl {\n    address public owner;\n    // address[] public moderators;\n    uint16 public totalModerators = 0;\n    mapping (address => bool) public moderators;\n    bool public isMaintaining = false;\n\n    function BasicAccessControl() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyModerators() {\n        require(msg.sender == owner || moderators[msg.sender] == true);\n        _;\n    }\n\n    modifier isActive {\n        require(!isMaintaining);\n        _;\n    }\n\n    function ChangeOwner(address _newOwner) onlyOwner public {\n        if (_newOwner != address(0)) {\n            owner = _newOwner;\n        }\n    }\n\n\n    function AddModerator(address _newModerator) onlyOwner public {\n        if (moderators[_newModerator] == false) {\n            moderators[_newModerator] = true;\n            totalModerators += 1;\n        }\n    }\n    \n    function RemoveModerator(address _oldModerator) onlyOwner public {\n        if (moderators[_oldModerator] == true) {\n            moderators[_oldModerator] = false;\n            totalModerators -= 1;\n        }\n    }\n\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\n        isMaintaining = _isMaintaining;\n    }\n}\n\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n}\n\ninterface EtheremonAdventureItem {\n    function ownerOf(uint256 _tokenId) external view returns (address);\n    function getItemInfo(uint _tokenId) constant external returns(uint classId, uint value);\n    function spawnItem(uint _classId, uint _value, address _owner) external returns(uint);\n}\n\ncontract EtheremonAdventureData {\n    \n    function addLandRevenue(uint _siteId, uint _emontAmount, uint _etherAmount) external;\n    function addTokenClaim(uint _tokenId, uint _emontAmount, uint _etherAmount) external;\n    \n    // public function\n    function getLandRevenue(uint _classId) constant public returns(uint _emontAmount, uint _etherAmount);\n    function getTokenClaim(uint _tokenId) constant public returns(uint _emontAmount, uint _etherAmount);\n}\n\ncontract EtheremonAdventureRevenue is BasicAccessControl {\n    using SafeMath for uint;\n    \n    struct PairData {\n        uint d1;\n        uint d2;\n    }\n    \n    address public tokenContract;\n    address public adventureDataContract;\n    address public adventureItemContract;\n\n    modifier requireTokenContract {\n        require(tokenContract != address(0));\n        _;\n    }\n    \n    modifier requireAdventureDataContract {\n        require(adventureDataContract != address(0));\n        _;\n    }\n\n    modifier requireAdventureItemContract {\n        require(adventureItemContract != address(0));\n        _;\n    }\n    \n    \n    function setConfig(address _tokenContract, address _adventureDataContract, address _adventureItemContract) onlyModerators public {\n        tokenContract = _tokenContract;\n        adventureDataContract = _adventureDataContract;\n        adventureItemContract = _adventureItemContract;\n    }\n    \n    function withdrawEther(address _sendTo, uint _amount) onlyOwner public {\n        // it is used in case we need to upgrade the smartcontract\n        if (_amount > address(this).balance) {\n            revert();\n        }\n        _sendTo.transfer(_amount);\n    }\n    \n    function withdrawToken(address _sendTo, uint _amount) onlyOwner requireTokenContract external {\n        ERC20Interface token = ERC20Interface(tokenContract);\n        if (_amount > token.balanceOf(address(this))) {\n            revert();\n        }\n        token.transfer(_sendTo, _amount);\n    }\n    // public\n    \n    function () payable public {\n    }\n    \n\n    function getEarning(uint _tokenId) constant public returns(uint _emontAmount, uint _ethAmount) {\n        PairData memory tokenInfo;\n        PairData memory currentRevenue;\n        PairData memory claimedRevenue;\n        (tokenInfo.d1, tokenInfo.d2) = EtheremonAdventureItem(adventureItemContract).getItemInfo(_tokenId);\n        EtheremonAdventureData data = EtheremonAdventureData(adventureDataContract);\n        (currentRevenue.d1, currentRevenue.d2) = data.getLandRevenue(tokenInfo.d1);\n        (claimedRevenue.d1, claimedRevenue.d2) = data.getTokenClaim(_tokenId);\n        \n        _emontAmount = ((currentRevenue.d1.mul(9)).div(100)).sub(claimedRevenue.d1);\n        _ethAmount = ((currentRevenue.d2.mul(9)).div(100)).sub(claimedRevenue.d2);\n    }\n    \n    function claimEarning(uint _tokenId) isActive requireTokenContract requireAdventureDataContract requireAdventureItemContract public {\n        EtheremonAdventureItem item = EtheremonAdventureItem(adventureItemContract);\n        EtheremonAdventureData data = EtheremonAdventureData(adventureDataContract);\n        if (item.ownerOf(_tokenId) != msg.sender) revert();\n        PairData memory tokenInfo;\n        PairData memory currentRevenue;\n        PairData memory claimedRevenue;\n        PairData memory pendingRevenue;\n        (tokenInfo.d1, tokenInfo.d2) = item.getItemInfo(_tokenId);\n        (currentRevenue.d1, currentRevenue.d2) = data.getLandRevenue(tokenInfo.d1);\n        (claimedRevenue.d1, claimedRevenue.d2) = data.getTokenClaim(_tokenId);\n        \n        pendingRevenue.d1 = ((currentRevenue.d1.mul(9)).div(100)).sub(claimedRevenue.d1);\n        pendingRevenue.d2 = ((currentRevenue.d2.mul(9)).div(100)).sub(claimedRevenue.d2);\n        \n        if (pendingRevenue.d1 == 0 && pendingRevenue.d2 == 0) revert();\n        data.addTokenClaim(_tokenId, pendingRevenue.d1, pendingRevenue.d2);\n        \n        if (pendingRevenue.d1 > 0) {\n            ERC20Interface(tokenContract).transfer(msg.sender, pendingRevenue.d1);\n        }\n        \n        if (pendingRevenue.d2 > 0) {\n            msg.sender.transfer(pendingRevenue.d2);\n        }\n        \n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"adventureItemContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_adventureDataContract\",\"type\":\"address\"},{\"name\":\"_adventureItemContract\",\"type\":\"address\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adventureDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimEarning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getEarning\",\"outputs\":[{\"name\":\"_emontAmount\",\"type\":\"uint256\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": "6060604052600080546002805460ff19169055600160a060020a033316600160b060020a0319909116179055610e0b8061003a6000396000f3006060604052600436106100cc5763ffffffff60e060020a6000350416630e65543281146100ce57806314d0f1ba146100fd5780633141e25b1461013057806348ef5aa81461015b5780634efb023e14610173578063522f68151461019d57806355a373d6146101bf5780636c81fd6d146101d25780636ebe299f146101f15780638da5cb5b146102045780639e281a9814610217578063b85d627514610239578063cc1ace9a14610258578063d2519c1e1461026e578063ee4e44161461029c578063f2853292146102af575b005b34156100d957600080fd5b6100e16102ce565b604051600160a060020a03909116815260200160405180910390f35b341561010857600080fd5b61011c600160a060020a03600435166102dd565b604051901515815260200160405180910390f35b341561013b57600080fd5b6100cc600160a060020a03600435811690602435811690604435166102f2565b341561016657600080fd5b6100cc600435151561039a565b341561017e57600080fd5b6101866103c8565b60405161ffff909116815260200160405180910390f35b34156101a857600080fd5b6100cc600160a060020a03600435166024356103ea565b34156101ca57600080fd5b6100e1610451565b34156101dd57600080fd5b6100cc600160a060020a0360043516610465565b34156101fc57600080fd5b6100e161050f565b341561020f57600080fd5b6100e161051e565b341561022257600080fd5b6100cc600160a060020a036004351660243561052d565b341561024457600080fd5b6100cc600160a060020a0360043516610669565b341561026357600080fd5b6100cc600435610713565b341561027957600080fd5b610284600435610b42565b60405191825260208201526040908101905180910390f35b34156102a757600080fd5b61011c610d12565b34156102ba57600080fd5b6100cc600160a060020a0360043516610d1b565b600454600160a060020a031681565b60016020526000908152604090205460ff1681565b60005433600160a060020a039081169116148061032d5750600160a060020a03331660009081526001602081905260409091205460ff161515145b151561033857600080fd5b60028054600160a060020a039485166101000274ffffffffffffffffffffffffffffffffffffffff00199091161790556003805492841673ffffffffffffffffffffffffffffffffffffffff1993841617905560048054919093169116179055565b60005433600160a060020a039081169116146103b557600080fd5b6002805460ff1916911515919091179055565b60005474010000000000000000000000000000000000000000900461ffff1681565b60005433600160a060020a0390811691161461040557600080fd5b30600160a060020a03163181111561041c57600080fd5b600160a060020a03821681156108fc0282604051600060405180830381858888f19350505050151561044d57600080fd5b5050565b6002546101009004600160a060020a031681565b60005433600160a060020a0390811691161461048057600080fd5b600160a060020a03811660009081526001602052604090205460ff16151561050c57600160a060020a03811660009081526001602081905260408220805460ff191682179055815461ffff7401000000000000000000000000000000000000000080830482169093011690910275ffff0000000000000000000000000000000000000000199091161790555b50565b600354600160a060020a031681565b600054600160a060020a031681565b6000805433600160a060020a0390811691161461054957600080fd5b6002546101009004600160a060020a0316151561056557600080fd5b506002546101009004600160a060020a0316806370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156105c557600080fd5b6102c65a03f115156105d657600080fd5b505050604051805190508211156105ec57600080fd5b80600160a060020a031663a9059cbb848460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561064957600080fd5b6102c65a03f1151561065a57600080fd5b50505060405180515050505050565b60005433600160a060020a0390811691161461068457600080fd5b600160a060020a03811660009081526001602081905260409091205460ff161515141561050c57600160a060020a03166000908152600160205260408120805460ff19169055805475ffff0000000000000000000000000000000000000000198116740100000000000000000000000000000000000000009182900461ffff9081166000190116909102179055565b60008061071e610dc8565b610726610dc8565b61072e610dc8565b610736610dc8565b60025460ff161561074657600080fd5b6002546101009004600160a060020a0316151561076257600080fd5b600354600160a060020a0316151561077957600080fd5b600454600160a060020a0316151561079057600080fd5b600454600354600160a060020a03918216975081169550331686636352211e8960006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156107ef57600080fd5b6102c65a03f1151561080057600080fd5b50505060405180519050600160a060020a031614151561081f57600080fd5b85600160a060020a031663de7fe3e78860006040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b151561086d57600080fd5b6102c65a03f1151561087e57600080fd5b50505060405180519060200180516020870152508452600160a060020a03851663d3872d57855160006040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b15156108e357600080fd5b6102c65a03f115156108f457600080fd5b50505060405180519060200180516020860152508352600160a060020a03851663933116328860006040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b151561095857600080fd5b6102c65a03f1151561096957600080fd5b505050604051805190602001805160208501525082526109b482516109a8606461099c600988519063ffffffff610d7216565b9063ffffffff610da116565b9063ffffffff610db616565b81526109d960208301516109a8606461099c600988602001519063ffffffff610d7216565b602082015280511580156109ef57508060200151155b156109f957600080fd5b600160a060020a038516637215513f888351846020015160405160e060020a63ffffffff8616028152600481019390935260248301919091526044820152606401600060405180830381600087803b1515610a5357600080fd5b6102c65a03f11515610a6457600080fd5b505050600081600001511115610af5576002546101009004600160a060020a031663a9059cbb33835160006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610ad957600080fd5b6102c65a03f11515610aea57600080fd5b505050604051805150505b600081602001511115610b395733600160a060020a03166108fc82602001519081150290604051600060405180830381858888f193505050501515610b3957600080fd5b50505050505050565b600080610b4d610dc8565b610b55610dc8565b610b5d610dc8565b600454600090600160a060020a031663de7fe3e788836040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b1515610baf57600080fd5b6102c65a03f11515610bc057600080fd5b5050506040518051906020018051602087015250845250600354600160a060020a03168063d3872d57855160006040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b1515610c2957600080fd5b6102c65a03f11515610c3a57600080fd5b50505060405180519060200180516020860152508352600160a060020a03811663933116328860006040516040015260405160e060020a63ffffffff841602815260048101919091526024016040805180830381600087803b1515610c9e57600080fd5b6102c65a03f11515610caf57600080fd5b50505060405180519060200180516020850152508252610ce282516109a8606461099c600988519063ffffffff610d7216565b9550610d0782602001516109a8606461099c600988602001519063ffffffff610d7216565b945050505050915091565b60025460ff1681565b60005433600160a060020a03908116911614610d3657600080fd5b600160a060020a0381161561050c5760008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b6000821515610d8357506000610d9b565b50818102818382811515610d9357fe5b0414610d9b57fe5b92915050565b60008183811515610dae57fe5b049392505050565b600082821115610dc257fe5b50900390565b6040805190810160405260008082526020820152905600a165627a7a72305820d4fa2754ef2b9bae5fe0b520f9a3b0e995471831d1b2ba2058c2aa0d55b66ceb0029"
}