{
  "address": "0x2e2e0b2ef981b0e3e5602128f0d520293ba7f338",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SInv",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-10\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n \n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n \n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n \n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n \n}\n\n\nlibrary Address {\n    function toAddress(bytes source) internal pure returns(address addr) {\n        assembly { addr := mload(add(source,0x14)) }\n        return addr;\n    }\n}\n\n\n/**\n*/\ncontract SInv {\n    //use of library of safe mathematical operations    \n    using SafeMath for uint;\n    using Address for *;\n\n    // array containing information about beneficiaries\n    mapping(address => uint) public userDeposit;\n    //Mapping for how much the User got from Refs\n    mapping(address=>uint) public RefBonus;\n    //How much the user earned to date\n    mapping(address=>uint) public UserEarnings;\n    //array containing information about the time of payment\n    mapping(address => uint) public userTime;\n    //array containing information on interest paid\n    mapping(address => uint) public persentWithdraw;\n    //fund fo transfer percent\n    address public projectFund =  0xB3cE9796aCDC1855bd6Cec85a3403f13C918f1F2;\n    //percentage deducted to the advertising fund\n    uint projectPercent = 5; // 0,5%\n    //time through which you can take dividends\n    uint public chargingTime = 24 hours;\n    uint public startPercent = 250*10;\n    uint public countOfInvestors;\n    uint public daysOnline;\n    uint public dividendsPaid;\n\n    constructor() public {\n        daysOnline = block.timestamp;\n    }    \n    \n    modifier isIssetUser() {\n        require(userDeposit[msg.sender] > 0, \"Deposit not found\");\n        _;\n    }\n \n    modifier timePayment() {\n        require(now >= userTime[msg.sender].add(chargingTime), \"Too fast payout request\");\n        _;\n    }\n    \n    function() external payable {\n        if (msg.value > 0) {\n            //makeDeposit(MyPersonalRefName[msg.data.toAddress()]);\n            makeDepositA(msg.data.toAddress());\n        }\n        else {\n            collectPercent();\n        }\n    }\n\n    //return of interest on the deposit\n    function collectPercent() isIssetUser timePayment public {\n            uint payout;\n            uint multipl;\n            (payout,multipl) = payoutAmount(msg.sender);\n            userTime[msg.sender] += multipl*chargingTime;\n            persentWithdraw[msg.sender] += payout;\n            msg.sender.transfer(payout);\n            UserEarnings[msg.sender]+=payout;\n            dividendsPaid += payout;\n            uint UserInitDeposit=userDeposit[msg.sender];\n            projectFund.transfer(UserInitDeposit.mul(projectPercent).div(1000));\n    }\n\n    //When User decides to reinvest instead of paying out (to get more dividends per day)\n    function Reinvest() isIssetUser timePayment external {\n        uint payout;\n        uint multipl;\n        (payout,multipl) = payoutAmount(msg.sender);\n        userTime[msg.sender] += multipl*chargingTime;\n        userDeposit[msg.sender]+=payout;\n        UserEarnings[msg.sender]+=payout;\n        uint UserInitDeposit=userDeposit[msg.sender];\n        projectFund.transfer(UserInitDeposit.mul(projectPercent).div(1000));\n    }\n \n    //make a contribution to the system\n    function makeDeposit(bytes32 referrer) public payable {\n        if (msg.value > 0) {\n            if (userDeposit[msg.sender] == 0) {\n                countOfInvestors += 1;\n\n                //only give ref bonus if the customer gave a valid ref information\n                if((RefNameToAddress[referrer] != address(0x0) && referrer > 0 && TheGuyWhoReffedMe[msg.sender] == address(0x0) && RefNameToAddress[referrer] != msg.sender)) {\n                    //get the Address of the guy who reffed mit through his _Ref String and save it in the mapping\n                    TheGuyWhoReffedMe[msg.sender] = RefNameToAddress[referrer];\n                    newRegistrationwithRef();\n                }\n            }\n            if (userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)) {\n                collectPercent();\n            }\n\n            userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\n            userTime[msg.sender] = now;\n\n        } else {\n            collectPercent();\n        }\n    }\n    \n    //function call for fallback\n    function makeDepositA(address referrer) public payable {\n        if (msg.value > 0) {\n            if (userDeposit[msg.sender] == 0) {\n                countOfInvestors += 1;\n                //only give ref bonus if the customer gave a valid ref information //or has already a ref\n                if((referrer != address(0x0) && referrer > 0 && TheGuyWhoReffedMe[msg.sender] == address(0x0) && referrer != msg.sender)) {\n                    //get the Address of the guy who reffed mit through his _Ref String and save it in the mapping\n                    TheGuyWhoReffedMe[msg.sender] = referrer;\n                    newRegistrationwithRef();\n                }\n            }\n            if (userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)) {\n                collectPercent();\n            }\n            userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\n            userTime[msg.sender] = now;\n\n        } else {\n            collectPercent();\n        }\n    }\n     \n    function getUserEarnings(address addr) public view returns(uint)\n    {\n        return UserEarnings[addr];\n    }\n \n    //calculation of the current interest rate on the deposit\n    function persentRate() public view returns(uint) {\n        return(startPercent);\n \n    }\n \n    // Withdraw of your referral earnings\n    function PayOutRefBonus() external\n    {       \n        //Check if User has Bonus\n        require(RefBonus[msg.sender]>0,\"You didn't earn any bonus\");\n        uint payout = RefBonus[msg.sender];\n        //payout the Refbonus\n        msg.sender.transfer(payout);\n        //Set to 0 since its payed out\n        RefBonus[msg.sender]=0;\n    }\n \n \n    //refund of the amount available for withdrawal on deposit\n    function payoutAmount(address addr) public view returns(uint,uint) {\n        uint rate = userDeposit[addr].mul(startPercent).div(100000);\n        uint interestRate = now.sub(userTime[addr]).div(chargingTime);\n        uint withdrawalAmount = rate.mul(interestRate);\n        return (withdrawalAmount, interestRate);\n    }\n\n \n    mapping (address=>address) public TheGuyWhoReffedMe;\n \n    mapping (address=>bytes32) public MyPersonalRefName;\n    //for bidirectional search\n    mapping (bytes32=>address) public RefNameToAddress;\n    \n    // referral counter\n    mapping (address=>uint256) public referralCounter;\n    // referral earnings counter\n    mapping (address=>uint256) public referralEarningsCounter;\n\n    //public function to register your ref\n    function createMyPersonalRefName(bytes32 _RefName) external payable\n    {  \n        //ref name shouldn't be 0\n        require(_RefName > 0);\n\n        //Check if RefName is already registered\n        require(RefNameToAddress[_RefName]==0, \"Somebody else owns this Refname\");\n \n        //check if User already has a ref Name\n        require(MyPersonalRefName[msg.sender] == 0, \"You already registered a Ref\");  \n \n        //If not registered\n        MyPersonalRefName[msg.sender]= _RefName;\n\n        RefNameToAddress[_RefName]=msg.sender;\n\n    }\n \n    function newRegistrationwithRef() private\n    {\n        //Give Bonus to refs\n        CheckFirstGradeRefAdress();\n        CheckSecondGradeRefAdress();\n        CheckThirdGradeRefAdress();\n    }\n \n    //first grade ref gets 1% extra\n    function CheckFirstGradeRefAdress() private\n    {  \n        //   3 <-- This one\n        //  /\n        // 4\n \n        //Check if Exist\n        if(TheGuyWhoReffedMe[msg.sender]>0) {\n        //Send the Ref his 1%\n            RefBonus[TheGuyWhoReffedMe[msg.sender]] += msg.value * 2/100;\n            referralEarningsCounter[TheGuyWhoReffedMe[msg.sender]] += msg.value * 2/100;\n            referralCounter[TheGuyWhoReffedMe[msg.sender]]++;\n        }\n    }\n \n    //second grade ref gets 0,5% extra\n    function CheckSecondGradeRefAdress() private\n    {\n        //     2 <-- This one\n        //    /\n        //   3\n        //  /\n        // 4\n        //Check if Exist\n        if(TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]>0) {\n        //Send the Ref his 0,5%\n            RefBonus[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]] += msg.value * 2/200;\n            referralEarningsCounter[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]] += msg.value * 2/200;\n            referralCounter[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]]++;\n        }\n    }\n \n    //third grade ref gets 0,25% extra\n    function CheckThirdGradeRefAdress() private\n    {\n        //       1 <-- This one\n        //      /\n        //     2\n        //    /\n        //   3\n        //  /\n        // 4\n        //Check if Exist\n        if (TheGuyWhoReffedMe[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]]>0) {\n\n            RefBonus[TheGuyWhoReffedMe[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]]] += msg.value * 2/400;\n            referralEarningsCounter[TheGuyWhoReffedMe[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]]] += msg.value * 2/400;\n            referralCounter[TheGuyWhoReffedMe[TheGuyWhoReffedMe[TheGuyWhoReffedMe[msg.sender]]]]++;\n        }\n    }\n    \n    //Returns your personal RefName, when it is registered\n    function getMyRefName(address addr) public view returns(bytes32)\n    {\n        return (MyPersonalRefName[addr]);\n    }\n\n    function getMyRefNameAsString(address addr) public view returns(string) {\n        return bytes32ToString(MyPersonalRefName[addr]);\n    }\n\n    function bytes32ToString(bytes32 x) internal pure returns (string) {\n        bytes memory bytesString = new bytes(32);\n        uint charCount = 0;\n        for (uint j = 0; j < 32; j++) {\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n            if (char != 0) {\n                bytesString[charCount] = char;\n                charCount++;\n            }\n        }\n        bytes memory bytesStringTrimmed = new bytes(charCount);\n        for (j = 0; j < charCount; j++) {\n            bytesStringTrimmed[j] = bytesString[j];\n        }\n        return string(bytesStringTrimmed);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"collectPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"RefNameToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"bytes32\"}],\"name\":\"makeDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RefBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMyRefNameAsString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"MyPersonalRefName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chargingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PayOutRefBonus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daysOnline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"persentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendsPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getMyRefName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"TheGuyWhoReffedMe\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_RefName\",\"type\":\"bytes32\"}],\"name\":\"createMyPersonalRefName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"persentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralEarningsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"makeDepositA\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]",
  "bytecode": ""
}