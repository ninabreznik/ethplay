{
  "address": "0xf2740c75f221788cf78c716b953a7f1c769d49b9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Wrapped_Ether",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-07-31\n*/\n\npragma solidity ^0.4.24;\n\n//Slightly modified SafeMath library - includes a min function\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function min(uint a, uint b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\n\n\n/**\n*This is the basic wrapped Ether contract. \n*All money deposited is transformed into ERC20 tokens at the rate of 1 wei = 1 token\n*/\ncontract Wrapped_Ether {\n\n    using SafeMath for uint256;\n\n    /*Variables*/\n\n    //ERC20 fields\n    string public name = \"Wrapped Ether\";\n    uint public total_supply;\n    mapping(address => uint) internal balances;\n    mapping(address => mapping (address => uint)) internal allowed;\n\n    /*Events*/\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n    event StateChanged(bool _success, string _message);\n\n    /*Functions*/\n    /**\n    *@dev This function creates tokens equal in value to the amount sent to the contract\n    */\n    function createToken() public payable {\n        require(msg.value > 0);\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\n        total_supply = total_supply.add(msg.value);\n    }\n\n    /**\n    *@dev This function 'unwraps' an _amount of Ether in the sender's balance by transferring \n    *Ether to them\n    *@param _value The amount of the token to unwrap\n    */\n    function withdraw(uint _value) public {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        total_supply = total_supply.sub(_value);\n        msg.sender.transfer(_value);\n    }\n\n    /**\n    *@param _owner is the owner address used to look up the balance\n    *@return Returns the balance associated with the passed in _owner\n    */\n    function balanceOf(address _owner) public constant returns (uint bal) { \n        return balances[_owner]; \n    }\n\n    /**\n    *@dev Allows for a transfer of tokens to _to\n    *@param _to The address to send tokens to\n    *@param _amount The amount of tokens to send\n    */\n    function transfer(address _to, uint _amount) public returns (bool) {\n        if (balances[msg.sender] >= _amount\n        && _amount > 0\n        && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] = balances[msg.sender] - _amount;\n            balances[_to] = balances[_to] + _amount;\n            emit Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n    *@dev Allows an address with sufficient spending allowance to send tokens on the behalf of _from\n    *@param _from The address to send tokens from\n    *@param _to The address to send tokens to\n    *@param _amount The amount of tokens to send\n    */\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n        if (balances[_from] >= _amount\n        && allowed[_from][msg.sender] >= _amount\n        && _amount > 0\n        && balances[_to] + _amount > balances[_to]) {\n            balances[_from] = balances[_from] - _amount;\n            allowed[_from][msg.sender] = allowed[_from][msg.sender] - _amount;\n            balances[_to] = balances[_to] + _amount;\n            emit Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n    *@dev This function approves a _spender an _amount of tokens to use\n    *@param _spender address\n    *@param _amount amount the spender is being approved for\n    *@return true if spender appproved successfully\n    */\n    function approve(address _spender, uint _amount) public returns (bool) {\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /**\n    *@param _owner address\n    *@param _spender address\n    *@return Returns the remaining allowance of tokens granted to the _spender from the _owner\n    */\n    function allowance(address _owner, address _spender) public view returns (uint) {\n       return allowed[_owner][_spender]; }\n\n    /**\n    *@dev Getter for the total_supply of wrapped ether\n    *@return total supply\n    */\n    function totalSupply() public constant returns (uint) {\n       return total_supply;\n    }\n}",
  "bytecode": "60806040526040805190810160405280600d81526020017f57726170706564204574686572000000000000000000000000000000000000008152506000908051906020019061004f929190610062565b5034801561005c57600080fd5b50610107565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100a357805160ff19168380011785556100d1565b828001600101855582156100d1579182015b828111156100d05782518255916020019190600101906100b5565b5b5090506100de91906100e2565b5090565b61010491905b808211156101005760008160009055506001016100e8565b5090565b90565b610ec1806101166000396000f3006080604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100a9578063095ea7b31461013957806318160ddd1461019e57806323b872dd146101c95780632e1a7d4d1461024e5780633940e9ee1461027b57806370a08231146102a65780639cbf9e36146102fd578063a9059cbb14610307578063dd62ed3e1461036c575b600080fd5b3480156100b557600080fd5b506100be6103e3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100fe5780820151818401526020810190506100e3565b50505050905090810190601f16801561012b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014557600080fd5b50610184600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610481565b604051808215151515815260200191505060405180910390f35b3480156101aa57600080fd5b506101b3610573565b6040518082815260200191505060405180910390f35b3480156101d557600080fd5b50610234600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061057d565b604051808215151515815260200191505060405180910390f35b34801561025a57600080fd5b5061027960048036038101908080359060200190929190505050610969565b005b34801561028757600080fd5b50610290610a63565b6040518082815260200191505060405180910390f35b3480156102b257600080fd5b506102e7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a69565b6040518082815260200191505060405180910390f35b610305610ab2565b005b34801561031357600080fd5b50610352600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b73565b604051808215151515815260200191505060405180910390f35b34801561037857600080fd5b506103cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dd7565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104795780601f1061044e57610100808354040283529160200191610479565b820191906000526020600020905b81548152906001019060200180831161045c57829003601f168201915b505050505081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561064a575081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156106565750600082115b80156106e15750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b1561095d5781600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610962565b600090505b9392505050565b6109bb81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e5e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a1381600154610e5e90919063ffffffff16565b6001819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a5f573d6000803e3d6000fd5b5050565b60015481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600034111515610ac157600080fd5b610b1334600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e7790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b6b34600154610e7790919063ffffffff16565b600181905550565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610bc45750600082115b8015610c4f5750600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610dcc5781600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610dd1565b600090505b92915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000828211151515610e6c57fe5b818303905092915050565b6000808284019050838110151515610e8b57fe5b80915050929150505600a165627a7a72305820b3e5f848c71bcbe2cbf4c098dde0f9fcf59be7c42f2adb5dd7961deef12e878c0029"
}