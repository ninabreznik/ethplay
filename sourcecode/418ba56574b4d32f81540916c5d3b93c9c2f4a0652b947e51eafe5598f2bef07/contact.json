{
  "address": "0xc56d66c48e4ad0f324451cc659a74d5793c6a7de",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KYCToken",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-16\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    mapping(address => uint256) public balances;\n\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n/**\n * @title Freezing tokens\n */\ncontract Freezing is Ownable, ERC20Basic {\n    using SafeMath for uint256;\n\n    address tokenManager;\n\n    bool freezingActive = true;\n\n    event Freeze(address _holder, uint256 _amount);\n    event Unfreeze(address _holder, uint256 _amount);\n\n    // all freezing sum for every holder\n    mapping(address => uint256) public freezeBalances;\n\n    modifier onlyTokenManager() {\n        assert(msg.sender == tokenManager);\n        _;\n    }\n\n    /**\n     * @dev Check freezing balance\n     */\n    modifier checkFreezing(address _holder, uint _value) {\n        if (freezingActive) {\n            require(balances[_holder].sub(_value) >= freezeBalances[_holder]);\n        }\n        _;\n    }\n\n\n    function setTokenManager(address _newManager) onlyOwner public {\n        tokenManager = _newManager;\n    }\n\n    /**\n     * @dev Enable freezing for contract\n     */\n    function onFreezing() onlyTokenManager public {\n        freezingActive = true;\n    }\n\n    /**\n     * @dev Disable freezing for contract\n     */\n    function offFreezing() onlyTokenManager public {\n        freezingActive = false;\n    }\n\n    function Freezing() public {\n        tokenManager = owner;\n    }\n\n    /**\n     * @dev Returns freezing balance of _holder\n     */\n    function freezingBalanceOf(address _holder) public view returns (uint256) {\n        return freezeBalances[_holder];\n    }\n\n    /**\n     * @dev Freeze amount for user\n     */\n    function freeze(address _holder, uint _amount) public onlyTokenManager {\n        assert(balances[_holder].sub(_amount.add(freezeBalances[_holder])) >= 0);\n\n        freezeBalances[_holder] = freezeBalances[_holder].add(_amount);\n        emit Freeze(_holder, _amount);\n    }\n\n    /**\n     * @dev Unfreeze amount for user\n     */\n    function unfreeze(address _holder, uint _amount) public onlyTokenManager {\n        assert(freezeBalances[_holder].sub(_amount) >= 0);\n\n        freezeBalances[_holder] = freezeBalances[_holder].sub(_amount);\n        emit Unfreeze(_holder, _amount);\n    }\n\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Roles of users\n */\ncontract VerificationStatus {\n    enum Statuses {None, Self, Video, Agent, Service}\n    Statuses constant defaultStatus = Statuses.None;\n\n    event StatusChange(bytes32 _property, address _user, Statuses _status, address _caller);\n}\n\n\n/**\n * @title Roles of users\n *\n * @dev User roles for KYC Contract\n */\ncontract Roles is Ownable {\n\n    // 0, 1, 2\n    enum RoleItems {Person, Agent, Administrator}\n    RoleItems constant defaultRole = RoleItems.Person;\n\n    mapping (address => RoleItems) private roleList;\n\n    /**\n     * @dev Event for every change of role\n     */\n    event RoleChange(address _user, RoleItems _role, address _caller);\n\n    /**\n     * @dev for agent function\n     */\n    modifier onlyAgent() {\n        assert(roleList[msg.sender] == RoleItems.Agent);\n        _;\n    }\n\n    /**\n     * @dev for administrator function\n     */\n    modifier onlyAdministrator() {\n        assert(roleList[msg.sender] == RoleItems.Administrator || msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Save role for user\n     */\n    function _setRole(address _user, RoleItems _role) internal {\n        emit RoleChange(_user, _role, msg.sender);\n        roleList[_user] = _role;\n    }\n\n    /**\n     * @dev reset role\n     */\n    function resetRole(address _user) onlyAdministrator public {\n        _setRole(_user, RoleItems.Person);\n    }\n\n    /**\n     * @dev Appointing agent by administrator or owner\n     */\n    function appointAgent(address _user) onlyAdministrator public {\n        _setRole(_user, RoleItems.Agent);\n    }\n\n    /**\n     * @dev Appointing administrator by owner\n     */\n    function appointAdministrator(address _user) onlyOwner public returns (bool) {\n        _setRole(_user, RoleItems.Administrator);\n        return true;\n    }\n\n    function getRole(address _user) public view returns (RoleItems) {\n        return roleList[_user];\n    }\n\n}\n\n/**\n * @title Storage for users data\n */\ncontract PropertyStorage is Roles, VerificationStatus {\n\n    struct Property {\n    Statuses status;\n    bool exist;\n    uint16 code;\n    }\n\n    mapping(address => mapping(bytes32 => Property)) private propertyStorage;\n\n    // agent => property => status\n    mapping(address => mapping(bytes32 => bool)) agentSign;\n\n    event NewProperty(bytes32 _property, address _user, address _caller);\n\n    modifier propertyExist(bytes32 _property, address _user) {\n        assert(propertyStorage[_user][_property].exist);\n        _;\n    }\n\n    /**\n     *  @dev Compute hash for property before write into storage\n     *\n     *  @param _name Name of property (such as full_name, birthday, address etc.)\n     *  @param _data Value of property\n     */\n    function computePropertyHash(string _name, string _data) pure public returns (bytes32) {\n        return sha256(_name, _data);\n    }\n\n    function _addPropertyValue(bytes32 _property, address _user) internal {\n        propertyStorage[_user][_property] = Property(\n        Statuses.None,\n        true,\n        0\n        );\n        emit NewProperty(_property, _user, msg.sender);\n    }\n\n    /**\n     * @dev Add data for any user by administrator\n     */\n    function addPropertyForUser(bytes32 _property, address _user) public onlyAdministrator returns (bool) {\n        _addPropertyValue(_property, _user);\n        return true;\n    }\n\n    /**\n     *  @dev Add property for sender\n     */\n    function addProperty(bytes32 _property) public returns (bool) {\n        _addPropertyValue(_property, msg.sender);\n        return true;\n    }\n\n    /**\n     * @dev Returns status of user data (may be self 1, video 2, agent 3 or Service 4)\n     * @dev If verification is empty then it returns 0 (None)\n     */\n    function getPropertyStatus(bytes32 _property, address _user) public view propertyExist(_property, _user) returns (Statuses) {\n        return propertyStorage[_user][_property].status;\n    }\n\n    /**\n     * @dev when user upload documents administrator will call this function\n     */\n    function setPropertyStatus(bytes32 _property, address _user, Statuses _status) public onlyAdministrator returns (bool){\n        _setPropertyStatus(_property, _user, _status);\n        return true;\n    }\n\n    /**\n     * @dev Agent sign on user data by agent\n     */\n    function setAgentVerificationByAgent(bytes32 _property, address _user) public onlyAgent {\n        _setPropertyStatus(_property, _user, Statuses.Agent);\n        _signPropertyByAgent(msg.sender, _user, _property);\n    }\n\n    /**\n     * @dev Agent sign on user data by Admin\n     */\n    function setAgentVerificationByAdmin(address _agent, address _user, bytes32 _property) public onlyOwner {\n        _setPropertyStatus(_property, _user, Statuses.Agent);\n        _signPropertyByAgent(_agent, _user, _property);\n    }\n\n    /**\n     * @dev Set verification status for user data\n     */\n    function _setPropertyStatus(bytes32 _property, address _user, Statuses _status) internal propertyExist(_property, _user) {\n        propertyStorage[_user][_property].status = _status;\n        emit StatusChange(_property, _user, _status, msg.sender);\n    }\n\n    /**\n     * @dev Agent sign on user data\n     */\n    function _signPropertyByAgent(address _agent, address _user, bytes32 _property) internal {\n        bytes32 _hash = _getHash(_user, _property);\n        agentSign[_agent][_hash] = true;\n    }\n\n    /**\n     * @dev To make sure that the agent has signed the user property\n     */\n    function checkAgentSign(address _agent, address _user, bytes32 _property) public view returns (bool) {\n        bytes32 _hash = _getHash(_user, _property);\n        return agentSign[_agent][_hash];\n    }\n\n    /**\n     * @dev Get hash sum for property\n     */\n    function _getHash(address _user, bytes32 _property) public pure returns (bytes32) {\n        return sha256(_user, _property);\n    }\n\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract ERC20BasicToken is ERC20Basic, Freezing {\n    using SafeMath for uint256;\n\n    uint256 totalSupply_;\n\n    /**\n    * @dev total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) checkFreezing(msg.sender, _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract KYCToken is ERC20BasicToken, ERC20, PropertyStorage {\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    uint256 public totalSupply = 42000000000000000000000000;\n    string public name = \"KYC.Legal token\";\n    uint8 public decimals = 18;\n    string public symbol = \"KYC\";\n\n    function balanceOf(address _owner) view public returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function KYCToken() public {\n        balances[msg.sender] = totalSupply;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) checkFreezing(_from, _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n}",
  "bytecode": "606060409081526002805460a060020a60ff021916740100000000000000000000000000000000000000001790556a22bdd88fed9efc6a0000006009558051908101604052600f81527f4b59432e4c6567616c20746f6b656e00000000000000000000000000000000006020820152600a908051620000839291602001906200012e565b50600b805460ff1916601217905560408051908101604052600381527f4b594300000000000000000000000000000000000000000000000000000000006020820152600c908051620000da9291602001906200012e565b503415620000e757600080fd5b60008054600160a060020a03338116600160a060020a03199283168117808555600280549094169216919091179091556009549082526001602052604090912055620001d3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017157805160ff1916838001178555620001a1565b82800160010185558215620001a1579182015b82811115620001a157825182559160200191906001019062000184565b50620001af929150620001b3565b5090565b620001d091905b80821115620001af5760008155600101620001ba565b90565b61168580620001e36000396000f3006060604052600436106101955763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630283f4b4811461019a57806306fdde03146101d0578063095ea7b31461025a5780630d38ed591461027c578063129a5b99146102ad57806313233cd9146102f357806318160ddd14610314578063237326b51461032757806323b872dd1461034f57806324bce60c1461037757806327e235e3146103995780632adbb84d146103b85780632d9346ab146103cb578063313ce567146103f3578063442767331461041c5780636969d5d81461044b5780636f1c8a511461046a57806370a082311461048c5780637b46b80b146104ab5780637cb2b79c146104cd5780637d128d2e146104ec578063831d3e09146105145780638da5cb5b1461052757806395d89b4114610556578063a5b4f7d314610569578063a8c0f15e1461058b578063a9059cbb146105a1578063d024768f146105c3578063d8aeedf514610656578063dd62ed3e14610675578063f2fde38b1461069a578063f57ad503146106b9575b600080fd5b34156101a557600080fd5b6101bc600435600160a060020a03602435166106d8565b604051901515815260200160405180910390f35b34156101db57600080fd5b6101e3610738565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561021f578082015183820152602001610207565b50505050905090810190601f16801561024c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561026557600080fd5b6101bc600160a060020a03600435166024356107d6565b341561028757600080fd5b61029b600160a060020a0360043516610842565b60405190815260200160405180910390f35b34156102b857600080fd5b6102cf600435600160a060020a0360243516610854565b604051808260048111156102df57fe5b60ff16815260200191505060405180910390f35b34156102fe57600080fd5b610312600160a060020a03600435166108b7565b005b341561031f57600080fd5b61029b610910565b341561033257600080fd5b6101bc600435600160a060020a036024351660ff60443516610916565b341561035a57600080fd5b6101bc600160a060020a0360043581169060243516604435610978565b341561038257600080fd5b610312600160a060020a0360043516602435610b53565b34156103a457600080fd5b61029b600160a060020a0360043516610c56565b34156103c357600080fd5b610312610c68565b34156103d657600080fd5b610312600160a060020a0360043581169060243516604435610cb7565b34156103fe57600080fd5b610406610cee565b60405160ff909116815260200160405180910390f35b341561042757600080fd5b61043b600160a060020a0360043516610cf7565b604051808260028111156102df57fe5b341561045657600080fd5b6101bc600160a060020a0360043516610d15565b341561047557600080fd5b61029b600160a060020a0360043516602435610d44565b341561049757600080fd5b61029b600160a060020a0360043516610d9a565b34156104b657600080fd5b610312600160a060020a0360043516602435610db5565b34156104d857600080fd5b610312600160a060020a0360043516610e8e565b34156104f757600080fd5b6101bc600160a060020a0360043581169060243516604435610ed8565b341561051f57600080fd5b610312610f18565b341561053257600080fd5b61053a610f50565b604051600160a060020a03909116815260200160405180910390f35b341561056157600080fd5b6101e3610f5f565b341561057457600080fd5b610312600435600160a060020a0360243516610fca565b341561059657600080fd5b6101bc600435611015565b34156105ac57600080fd5b6101bc600160a060020a0360043516602435611021565b34156105ce57600080fd5b61029b60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061117595505050505050565b341561066157600080fd5b61029b600160a060020a0360043516611235565b341561068057600080fd5b61029b600160a060020a0360043581169060243516611250565b34156106a557600080fd5b610312600160a060020a036004351661127b565b34156106c457600080fd5b610312600160a060020a0360043516611316565b60006002600160a060020a03331660009081526005602052604090205460ff16600281111561070357fe5b148061071d575060005433600160a060020a039081169116145b151561072557fe5b61072f838361136c565b50600192915050565b600a8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107ce5780601f106107a3576101008083540402835291602001916107ce565b820191906000526020600020905b8154815290600101906020018083116107b157829003601f168201915b505050505081565b600160a060020a03338116600081815260086020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60036020526000908152604090205481565b600160a060020a038116600090815260066020908152604080832085845290915281205483908390610100900460ff16151561088c57fe5b505050600160a060020a03166000908152600660209081526040808320938352929052205460ff1690565b6002600160a060020a03331660009081526005602052604090205460ff1660028111156108e057fe5b14806108fa575060005433600160a060020a039081169116145b151561090257fe5b61090d816001611451565b50565b60095481565b60006002600160a060020a03331660009081526005602052604090205460ff16600281111561094157fe5b148061095b575060005433600160a060020a039081169116145b151561096357fe5b61096e8484846114f9565b5060019392505050565b60008382600260149054906101000a900460ff16156109d157600160a060020a0382166000908152600360209081526040808320546001909252909120546109c6908363ffffffff6115ef16565b10156109d157600080fd5b600160a060020a03851615156109e657600080fd5b600160a060020a038616600090815260016020526040902054841115610a0b57600080fd5b600160a060020a0380871660009081526008602090815260408083203390941683529290522054841115610a3e57600080fd5b600160a060020a038616600090815260016020526040902054610a67908563ffffffff6115ef16565b600160a060020a038088166000908152600160205260408082209390935590871681522054610a9c908563ffffffff61160116565b600160a060020a03808716600090815260016020908152604080832094909455898316825260088152838220339093168252919091522054610ae4908563ffffffff6115ef16565b600160a060020a03808816600081815260086020908152604080832033861684529091529081902093909355908716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9087905190815260200160405180910390a350600195945050505050565b60025433600160a060020a03908116911614610b6b57fe5b600160a060020a038216600090815260036020526040812054610bbe90610b9990849063ffffffff61160116565b600160a060020a0385166000908152600160205260409020549063ffffffff6115ef16565b1015610bc657fe5b600160a060020a038216600090815260036020526040902054610bef908263ffffffff61160116565b600160a060020a03831660009081526003602052604090819020919091557ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e0908390839051600160a060020a03909216825260208201526040908101905180910390a15050565b60016020526000908152604090205481565b60025433600160a060020a03908116911614610c8057fe5b6002805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b60005433600160a060020a03908116911614610cd257600080fd5b610cde818360036114f9565b610ce9838383611617565b505050565b600b5460ff1681565b600160a060020a031660009081526005602052604090205460ff1690565b6000805433600160a060020a03908116911614610d3157600080fd5b610d3c826002611451565b506001919050565b600060028383604051600160a060020a03929092166c0100000000000000000000000002825260148201526034016020604051808303816000865af11515610d8b57600080fd5b50506040518051949350505050565b600160a060020a031660009081526001602052604090205490565b60025433600160a060020a03908116911614610dcd57fe5b600160a060020a038216600090815260036020526040812054610df6908363ffffffff6115ef16565b1015610dfe57fe5b600160a060020a038216600090815260036020526040902054610e27908263ffffffff6115ef16565b600160a060020a03831660009081526003602052604090819020919091557f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f908390839051600160a060020a03909216825260208201526040908101905180910390a15050565b60005433600160a060020a03908116911614610ea957600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080610ee58484610d44565b600160a060020a038616600090815260076020908152604080832084845290915290205460ff1692509050509392505050565b60025433600160a060020a03908116911614610f3057fe5b6002805474ff000000000000000000000000000000000000000019169055565b600054600160a060020a031681565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107ce5780601f106107a3576101008083540402835291602001916107ce565b6001600160a060020a03331660009081526005602052604090205460ff166002811115610ff357fe5b14610ffa57fe5b611006828260036114f9565b611011338284611617565b5050565b6000610d3c823361136c565b60003382600260149054906101000a900460ff161561107a57600160a060020a03821660009081526003602090815260408083205460019092529091205461106f908363ffffffff6115ef16565b101561107a57600080fd5b600160a060020a038516151561108f57600080fd5b600160a060020a0333166000908152600160205260409020548411156110b457600080fd5b600160a060020a0333166000908152600160205260409020546110dd908563ffffffff6115ef16565b600160a060020a033381166000908152600160205260408082209390935590871681522054611112908563ffffffff61160116565b600160a060020a0380871660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9087905190815260200160405180910390a3506001949350505050565b6000600283836040518083805190602001908083835b602083106111aa5780518252601f19909201916020918201910161118b565b6001836020036101000a038019825116818451161790925250505091909101905082805190602001908083835b602083106111f65780518252601f1990920191602091820191016111d7565b6001836020036101000a038019825116818451168082178552505050505050905001925050506020604051808303816000865af11515610d8b57600080fd5b600160a060020a031660009081526003602052604090205490565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b60005433600160a060020a0390811691161461129657600080fd5b600160a060020a03811615156112ab57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6002600160a060020a03331660009081526005602052604090205460ff16600281111561133f57fe5b1480611359575060005433600160a060020a039081169116145b151561136157fe5b61090d816000611451565b6060604051908101604090815260008083526001602080850191909152828401829052600160a060020a03851682526006815282822086835290522081518154829060ff191660018360048111156113c057fe5b0217905550602082015181549015156101000261ff00199091161781556040820151815461ffff91909116620100000263ffff000019909116179055507fc38a0ba88d1c761eb7c4653e6152b15a50518db005c563fb256180fd3835c070828233604051928352600160a060020a039182166020840152166040808301919091526060909101905180910390a15050565b7f7b60b51d9cbb1c7f54b04f3391bce64bcfa8296f21b823ad50a83ecfeac02c1c828233604051600160a060020a03841681526020810183600281111561149457fe5b60ff16815260200182600160a060020a0316600160a060020a03168152602001935050505060405180910390a1600160a060020a0382166000908152600560205260409020805482919060ff191660018360028111156114f057fe5b02179055505050565b600160a060020a038216600090815260066020908152604080832086845290915290205483908390610100900460ff16151561153157fe5b600160a060020a03841660009081526006602090815260408083208884529091529020805484919060ff1916600183600481111561156b57fe5b02179055507f5d6360ccb71de639ad0da7dfeaeaefcf243b7f8e3bc084b83ac90f75002e23b785858533604051848152600160a060020a0384166020820152604081018360048111156115ba57fe5b60ff16815260200182600160a060020a0316600160a060020a0316815260200194505050505060405180910390a15050505050565b6000828211156115fb57fe5b50900390565b60008282018381101561161057fe5b9392505050565b60006116238383610d44565b600160a060020a03909416600090815260076020908152604080832096835295905293909320805460ff191660011790555050505600a165627a7a723058206b409675657a52f21c2e73b502940cf915d10441d29aaf14d87da5fda84a2eb30029"
}