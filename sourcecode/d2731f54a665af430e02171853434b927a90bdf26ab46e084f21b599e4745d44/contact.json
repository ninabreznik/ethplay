{
  "address": "0x5075be995f1bf3f8039087be65c731fcf750cfc6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MultiSignWallet",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-06\n*/\n\npragma solidity ^0.5.3;\n\n/**\n* @author ESPAY PTY LTD.\n*/\n\n/**\n* @title ERC223Interface\n* @dev ERC223 Contract Interface\n*/\ncontract ERC20Interface {\n    function transfer(address _to, uint256 _value) public returns (bool);\n    function balanceOf(address who)public view returns (uint);\n}\n\n/**\n* @title Forwarder\n* @dev Contract that will forward any incoming Ether & token to wallet\n*/\ncontract Forwarder {\n    \n    address payable public parentAddress;\n \n    event ForwarderDeposited(address from, uint value, bytes data);\n    event TokensFlushed(address forwarderAddress, uint value, address tokenContractAddress);\n\n    /**\n    * @dev Modifier that will execute internal code block only if the sender is the parent address\n    */\n    modifier onlyParent {\n        require(msg.sender == parentAddress);\n        _;\n    }\n    \n    /**\n    * @dev Create the contract, and sets the destination address to that of the creator\n    */\n    constructor() public{\n        parentAddress = msg.sender;\n    }\n\n    /**\n    * @dev Default function; Gets called when Ether is deposited, and forwards it to the parent address.\n    *      Credit eth to contract creator.\n    */\n    function() external payable {\n        parentAddress.transfer(msg.value);\n        emit ForwarderDeposited(msg.sender, msg.value, msg.data);\n    }\n\n    /**\n    * @dev Execute a token transfer of the full balance from the forwarder token to the parent address\n    * @param tokenContractAddress the address of the erc20 token contract\n    */\n    function flushTokens(address tokenContractAddress) public onlyParent {\n        ERC20Interface instance = ERC20Interface(tokenContractAddress);\n        uint forwarderBalance = instance.balanceOf(address(this));\n        require(forwarderBalance > 0);\n        require(instance.transfer(parentAddress, forwarderBalance));\n        emit TokensFlushed(address(this), forwarderBalance, tokenContractAddress);\n    }\n  \n    /**\n    * @dev Execute a specified token transfer from the forwarder token to the parent address.\n    * @param _from the address of the erc20 token contract.\n    * @param _value the amount of token.\n    */\n    function flushToken(address _from, uint _value) external{\n        require(ERC20Interface(_from).transfer(parentAddress, _value), \"instance error\");\n    }\n\n    /**\n    * @dev It is possible that funds were sent to this address before the contract was deployed.\n    *      We can flush those funds to the parent address.\n    */\n    function flush() public {\n        parentAddress.transfer(address(this).balance);\n    }\n}\n\n/**\n* @title MultiSignWallet\n*/\ncontract MultiSignWallet {\n    \n    address[] public signers;\n    bool public safeMode; \n    uint forwarderCount;\n    uint lastsequenceId;\n    \n    event Deposited(address from, uint value, bytes data);\n    event SafeModeActivated(address msgSender);\n    event SafeModeInActivated(address msgSender);\n    event ForwarderCreated(address forwarderAddress);\n    event Transacted(address msgSender, address otherSigner, bytes32 operation, address toAddress, uint value, bytes data);\n    event TokensTransfer(address tokenContractAddress, uint value);\n    \n    /**\n    * @dev Modifier that will execute internal code block only if the \n    *      sender is an authorized signer on this wallet\n    */\n    modifier onlySigner {\n        require(isSigner(msg.sender));\n        _;\n    }\n\n    /**\n    * @dev Set up a simple multi-sig wallet by specifying the signers allowed to be used on this wallet.\n    *      2 signers will be required to send a transaction from this wallet.\n    *      Note: The sender is NOT automatically added to the list of signers.\n    *      Signers CANNOT be changed once they are set\n    * @param allowedSigners An array of signers on the wallet\n    */\n    constructor(address[] memory allowedSigners) public {\n        require(allowedSigners.length == 3);\n        signers = allowedSigners;\n    }\n\n    /**\n    * @dev Gets called when a transaction is received without calling a method\n    */\n    function() external payable {\n        if(msg.value > 0){\n            emit Deposited(msg.sender, msg.value, msg.data);\n        }\n    }\n    \n    /**\n    * @dev Determine if an address is a signer on this wallet\n    * @param signer address to check\n    * @return boolean indicating whether address is signer or not\n    */\n    function isSigner(address signer) public view returns (bool) {\n        for (uint i = 0; i < signers.length; i++) {\n            if (signers[i] == signer) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n    * @dev Irrevocably puts contract into safe mode. When in this mode, \n    *      transactions may only be sent to signing addresses.\n    */\n    function activateSafeMode() public onlySigner {\n        require(!safeMode);\n        safeMode = true;\n        emit SafeModeActivated(msg.sender);\n    }\n    \n    /**\n    * @dev Irrevocably puts out contract into safe mode.\n    */ \n    function turnOffSafeMode() public onlySigner {\n        require(safeMode);\n        safeMode = false;\n        emit SafeModeInActivated(msg.sender);\n    }\n    \n    /**\n    * @dev Create a new contract (and also address) that forwards funds to this contract\n    *      returns address of newly created forwarder address\n    */\n    function createForwarder() public returns (address) {\n        Forwarder f = new Forwarder();\n        forwarderCount += 1;\n        emit ForwarderCreated(address(f));\n        return(address(f));\n    }\n    \n    /**\n    * @dev for return No of forwarder generated. \n    * @return total number of generated forwarder count.\n    */\n    function getForwarder() public view returns(uint){\n        return forwarderCount;\n    }\n    \n    /**\n    * @dev Execute a token flush from one of the forwarder addresses. \n    *      This transfer needs only a single signature and can be done by any signer\n    * @param forwarderAddress the address of the forwarder address to flush the tokens from\n    * @param tokenContractAddress the address of the erc20 token contract\n    */\n    function flushForwarderTokens(address payable forwarderAddress, address tokenContractAddress) public onlySigner {\n        Forwarder forwarder = Forwarder(forwarderAddress);\n        forwarder.flushTokens(tokenContractAddress);\n    }\n    \n    /**\n    * @dev Gets the next available sequence ID for signing when using executeAndConfirm\n    * @return the sequenceId one higher than the highest currently stored\n    */\n    function getNextSequenceId() public view returns (uint) {\n        return lastsequenceId+1;\n    }\n    \n    /** \n    * @dev generate the hash for sendMultiSig\n    *      same parameter as sendMultiSig\n    * @return the hash generated by parameters \n    */\n    function getHash(address toAddress, uint value, bytes memory data, uint expireTime, uint sequenceId)public pure returns (bytes32){\n        return keccak256(abi.encodePacked(\"ETHER\", toAddress, value, data, expireTime, sequenceId));\n    }\n\n    /**\n    * @dev Execute a multi-signature transaction from this wallet using 2 signers: \n    *      one from msg.sender and the other from ecrecover.\n    *      Sequence IDs are numbers starting from 1. They are used to prevent replay \n    *      attacks and may not be repeated.\n    * @param toAddress the destination address to send an outgoing transaction\n    * @param value the amount in Wei to be sent\n    * @param data the data to send to the toAddress when invoking the transaction\n    * @param expireTime the number of seconds since 1970 for which this transaction is valid\n    * @param sequenceId the unique sequence id obtainable from getNextSequenceId\n    * @param signature see Data Formats\n    */\n    function sendMultiSig(address payable toAddress, uint value, bytes memory data, uint expireTime, uint sequenceId, bytes memory signature) public payable onlySigner {\n        bytes32 operationHash = keccak256(abi.encodePacked(\"ETHER\", toAddress, value, data, expireTime, sequenceId));\n        address otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\n        toAddress.transfer(value);\n        emit Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);\n    }\n    \n    /** \n    * @dev generate the hash for sendMultiSigToken and sendMultiSigForwarder.\n    *      same parameter as sendMultiSigToken and sendMultiSigForwarder.\n    * @return the hash generated by parameters \n    */\n    function getTokenHash( address toAddress, uint value, address tokenContractAddress, uint expireTime, uint sequenceId) public pure returns (bytes32){\n        return keccak256(abi.encodePacked(\"ERC20\", toAddress, value, tokenContractAddress, expireTime, sequenceId));\n    }\n  \n    /**\n    * @dev Execute a multi-signature token transfer from this wallet using 2 signers: \n    *      one from msg.sender and the other from ecrecover.\n    *      Sequence IDs are numbers starting from 1. They are used to prevent replay \n    *      attacks and may not be repeated.\n    * @param toAddress the destination address to send an outgoing transaction\n    * @param value the amount in tokens to be sent\n    * @param tokenContractAddress the address of the erc20 token contract\n    * @param expireTime the number of seconds since 1970 for which this transaction is valid\n    * @param sequenceId the unique sequence id obtainable from getNextSequenceId\n    * @param signature see Data Formats\n    */\n    function sendMultiSigToken(address toAddress, uint value, address tokenContractAddress, uint expireTime, uint sequenceId, bytes memory signature) public onlySigner {\n        bytes32 operationHash = keccak256(abi.encodePacked(\"ERC20\", toAddress, value, tokenContractAddress, expireTime, sequenceId));\n        verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\n        ERC20Interface instance = ERC20Interface(tokenContractAddress);\n        require(instance.balanceOf(address(this)) > 0);\n        require(instance.transfer(toAddress, value));\n        emit TokensTransfer(tokenContractAddress, value);\n    }\n    \n    /**\n    * @dev Gets signer's address using ecrecover\n    * @param operationHash see Data Formats\n    * @param signature see Data Formats\n    * @return address recovered from the signature\n    */\n    function recoverAddressFromSignature(bytes32 operationHash, bytes memory signature) private pure returns (address) {\n        require(signature.length == 65);\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(signature, 32))\n            s := mload(add(signature, 64))\n            v := byte(0, mload(add(signature, 96)))\n        }\n        if (v < 27) {\n            v += 27; \n        }\n        return ecrecover(operationHash, v, r, s);\n    }\n\n    /**\n    * @dev Verify that the sequence id has not been used before and inserts it. Throws if the sequence ID was not accepted.\n    * @param sequenceId to insert into array of stored ids\n    */\n    function tryInsertSequenceId(uint sequenceId) private onlySigner {\n        require(sequenceId > lastsequenceId && sequenceId <= (lastsequenceId+1000), \"Enter Valid sequenceId\");\n        lastsequenceId=sequenceId;\n    }\n\n    /** \n    * @dev Do common multisig verification for both eth sends and erc20token transfers\n    * @param toAddress the destination address to send an outgoing transaction\n    * @param operationHash see Data Formats\n    * @param signature see Data Formats\n    * @param expireTime the number of seconds since 1970 for which this transaction is valid\n    * @param sequenceId the unique sequence id obtainable from getNextSequenceId\n    * @return address that has created the signature\n    */\n    function verifyMultiSig(address toAddress, bytes32 operationHash, bytes memory signature, uint expireTime, uint sequenceId) private returns (address) {\n\n        address otherSigner = recoverAddressFromSignature(operationHash, signature);\n        if (safeMode && !isSigner(toAddress)) {\n            revert(\"safemode error\");\n        }\n        require(isSigner(otherSigner) && expireTime > now);\n        require(otherSigner != msg.sender);\n        tryInsertSequenceId(sequenceId);\n        return otherSigner;\n    }\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000285f2e1028351f43c8eecfa5cc0c439e61151cb000000000000000000000000c2daf789d7f16089d2353b1dc54c9282f4e0effd00000000000000000000000068d0366a563df1e926bb47e5bc45485a64418660"
}