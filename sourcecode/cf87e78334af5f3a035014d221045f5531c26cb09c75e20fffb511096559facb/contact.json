{
  "address": "0x7c7159a34dbabc8c09f0bafe69d94d2ddc199472",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CosquareToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-15\n*/\n\npragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\ncontract Time {\n    /**\n    * @dev Current time getter\n    * @return Current time in seconds\n    */\n    function _currentTime() internal view returns (uint256) {\n        return block.timestamp;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\n\ncontract CosquareToken is Time, StandardToken, DetailedERC20, Ownable {\n    using SafeMath for uint256;\n\n    /**\n    * Describes locked balance\n    * @param expires Time when tokens will be unlocked\n    * @param value Amount of the tokens is locked\n    */\n    struct LockedBalance {\n        uint256 expires;\n        uint256 value;\n    }\n\n    // locked balances specified be the address\n    mapping(address => LockedBalance[]) public lockedBalances;\n\n    // sale wallet (65%)\n    address public saleWallet;\n    // reserve wallet (15%)\n    address public reserveWallet;\n    // team wallet (15%)\n    address public teamWallet;\n    // strategic wallet (5%)\n    address public strategicWallet;\n\n    // end point, after which all tokens will be unlocked\n    uint256 public lockEndpoint;\n\n    /**\n    * Event for lock logging\n    * @param who The address on which part of the tokens is locked\n    * @param value Amount of the tokens is locked\n    * @param expires Time when tokens will be unlocked\n    */\n    event LockLog(address indexed who, uint256 value, uint256 expires);\n\n    /**\n    * @param _saleWallet Sale wallet\n    * @param _reserveWallet Reserve wallet\n    * @param _teamWallet Team wallet\n    * @param _strategicWallet Strategic wallet\n    * @param _lockEndpoint End point, after which all tokens will be unlocked\n    */\n    constructor(address _saleWallet, address _reserveWallet, address _teamWallet, address _strategicWallet, uint256 _lockEndpoint) \n      DetailedERC20(\"cosquare\", \"CSQ\", 18) public {\n        require(_lockEndpoint > 0, \"Invalid global lock end date.\");\n        lockEndpoint = _lockEndpoint;\n\n        _configureWallet(_saleWallet, 65000000000000000000000000000); // 6.5e+28\n        saleWallet = _saleWallet;\n        _configureWallet(_reserveWallet, 15000000000000000000000000000); // 1.5e+28\n        reserveWallet = _reserveWallet;\n        _configureWallet(_teamWallet, 15000000000000000000000000000); // 1.5e+28\n        teamWallet = _teamWallet;\n        _configureWallet(_strategicWallet, 5000000000000000000000000000); // 0.5e+28\n        strategicWallet = _strategicWallet;\n    }\n\n    /**\n    * @dev Setting the initial value of the tokens to the wallet\n    * @param _wallet Address to be set up\n    * @param _amount The number of tokens to be assigned to this address\n    */\n    function _configureWallet(address _wallet, uint256 _amount) private {\n        require(_wallet != address(0), \"Invalid wallet address.\");\n\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_wallet] = _amount;\n        emit Transfer(address(0), _wallet, _amount);\n    }\n\n    /**\n    * @dev Throws if the address does not have enough not locked balance\n    * @param _who The address to transfer from\n    * @param _value The amount to be transferred\n    */\n    modifier notLocked(address _who, uint256 _value) {\n        uint256 time = _currentTime();\n\n        if (lockEndpoint > time) {\n            uint256 index = 0;\n            uint256 locked = 0;\n            while (index < lockedBalances[_who].length) {\n                if (lockedBalances[_who][index].expires > time) {\n                    locked = locked.add(lockedBalances[_who][index].value);\n                }\n\n                index++;\n            }\n\n            require(_value <= balances[_who].sub(locked), \"Not enough unlocked tokens\");\n        }        \n        _;\n    }\n\n    /**\n    * @dev Overridden to check whether enough not locked balance\n    * @param _from The address which you want to send tokens from\n    * @param _to The address which you want to transfer to\n    * @param _value The amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public notLocked(_from, _value) returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n    * @dev Overridden to check whether enough not locked balance\n    * @param _to The address to transfer to\n    * @param _value The amount to be transferred\n    */\n    function transfer(address _to, uint256 _value) public notLocked(msg.sender, _value) returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n    * @dev Gets the locked balance of the specified address\n    * @param _owner The address to query the locked balance of\n    * @param _expires Time of expiration of the lock (If equals to 0 - returns all locked tokens at this moment)\n    * @return An uint256 representing the amount of locked balance by the passed address\n    */\n    function lockedBalanceOf(address _owner, uint256 _expires) external view returns (uint256) {\n        uint256 time = _currentTime();\n        uint256 index = 0;\n        uint256 locked = 0;\n\n        if (lockEndpoint > time) {       \n            while (index < lockedBalances[_owner].length) {\n                if (_expires > 0) {\n                    if (lockedBalances[_owner][index].expires == _expires) {\n                        locked = locked.add(lockedBalances[_owner][index].value);\n                    }\n                } else {\n                    if (lockedBalances[_owner][index].expires >= time) {\n                        locked = locked.add(lockedBalances[_owner][index].value);\n                    }\n                }\n\n                index++;\n            }\n        }\n\n        return locked;\n    }\n\n    /**\n    * @dev Locks part of the balance for the specified address and for a certain period (3 periods expected)\n    * @param _who The address of which will be locked part of the balance\n    * @param _value The amount of tokens to be locked\n    * @param _expires Time of expiration of the lock\n    */\n    function lock(address _who, uint256 _value, uint256 _expires) public onlyOwner {\n        uint256 time = _currentTime();\n        require(_who != address(0) && _value <= balances[_who] && _expires > time, \"Invalid lock configuration.\");\n\n        uint256 index = 0;\n        bool exist = false;\n        while (index < lockedBalances[_who].length) {\n            if (lockedBalances[_who][index].expires == _expires) {\n                exist = true;\n                break;\n            }\n\n            index++;\n        }\n\n        if (exist) {\n            lockedBalances[_who][index].value = lockedBalances[_who][index].value.add(_value);\n        } else {\n            lockedBalances[_who].push(LockedBalance({\n                expires: _expires,\n                value: _value\n            }));\n        }\n\n        emit LockLog(_who, _value, _expires);\n    }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160a08062002ad683398101806040528101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050506040805190810160405280600881526020017f636f7371756172650000000000000000000000000000000000000000000000008152506040805190810160405280600381526020017f435351000000000000000000000000000000000000000000000000000000000081525060128260039080519060200190620000e392919062000522565b508160049080519060200190620000fc92919062000522565b5080600560006101000a81548160ff021916908360ff16021790555050505033600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600081111515620001d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f496e76616c696420676c6f62616c206c6f636b20656e6420646174652e00000081525060200191505060405180910390fd5b80600b8190555062000203856bd206bd6493f08f76e800000062000387640100000000026401000000009004565b84600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200026b846b3077b58d5d3783919800000062000387640100000000026401000000009004565b83600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620002d3836b3077b58d5d3783919800000062000387640100000000026401000000009004565b82600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200033b826b1027e72f1f1281308800000062000387640100000000026401000000009004565b81600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050620005d1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156200042d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f496e76616c69642077616c6c657420616464726573732e00000000000000000081525060200191505060405180910390fd5b6200045281600154620005056401000000000262001dbf179091906401000000009004565b600181905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600081830190508281101515156200051957fe5b80905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200056557805160ff191683800117855562000596565b8280016001018555821562000596579182015b828111156200059557825182559160200191906001019062000578565b5b509050620005a59190620005a9565b5090565b620005ce91905b80821115620005ca576000816000905550600101620005b0565b5090565b90565b6124f580620005e16000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461012d578063095ea7b3146101bd57806318160ddd1461022257806323b872dd1461024d578063313ce567146102d257806331fc3e3214610303578063599270441461032e5780635d16a6f91461038557806366188463146103ed57806370a0823114610452578063715018a6146104a95780637c4db77d146104c05780638922e021146105175780638da5cb5b1461056e5780638ef4c807146105c557806395d89b4114610626578063a9059cbb146106b6578063d72b11bd1461071b578063d73dd62314610772578063dd62ed3e146107d7578063e2ab691d1461084e578063f2fde38b146108a5575b600080fd5b34801561013957600080fd5b506101426108e8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610182578082015181840152602081019050610167565b50505050905090810190601f1680156101af5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101c957600080fd5b50610208600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610986565b604051808215151515815260200191505060405180910390f35b34801561022e57600080fd5b50610237610a78565b6040518082815260200191505060405180910390f35b34801561025957600080fd5b506102b8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a82565b604051808215151515815260200191505060405180910390f35b3480156102de57600080fd5b506102e7610cb9565b604051808260ff1660ff16815260200191505060405180910390f35b34801561030f57600080fd5b50610318610ccc565b6040518082815260200191505060405180910390f35b34801561033a57600080fd5b50610343610cd2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561039157600080fd5b506103d0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cf8565b604051808381526020018281526020019250505060405180910390f35b3480156103f957600080fd5b50610438600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d38565b604051808215151515815260200191505060405180910390f35b34801561045e57600080fd5b50610493600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fc9565b6040518082815260200191505060405180910390f35b3480156104b557600080fd5b506104be611011565b005b3480156104cc57600080fd5b506104d5611116565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052357600080fd5b5061052c61113c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057a57600080fd5b50610583611162565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105d157600080fd5b50610610600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611188565b6040518082815260200191505060405180910390f35b34801561063257600080fd5b5061063b6113cf565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561067b578082015181840152602081019050610660565b50505050905090810190601f1680156106a85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156106c257600080fd5b50610701600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061146d565b604051808215151515815260200191505060405180910390f35b34801561072757600080fd5b506107306116a2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561077e57600080fd5b506107bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116c8565b604051808215151515815260200191505060405180910390f35b3480156107e357600080fd5b50610838600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118c4565b6040518082815260200191505060405180910390f35b34801561085a57600080fd5b506108a3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061194b565b005b3480156108b157600080fd5b506108e6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d4f565b005b60038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561097e5780601f106109535761010080835404028352916020019161097e565b820191906000526020600020905b81548152906001019060200180831161096157829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b600083826000806000610a93611db7565b925082600b541115610ca05760009150600090505b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050821015610bd75782600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515610b3f57fe5b9060005260206000209060020201600001541115610bca57610bc7600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515610ba657fe5b90600052602060002090600202016001015482611dbf90919063ffffffff16565b90505b8180600101925050610aa8565b610c28816000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ddb90919063ffffffff16565b8411151515610c9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4e6f7420656e6f75676820756e6c6f636b656420746f6b656e7300000000000081525060200191505060405180910390fd5b5b610cab898989611df4565b955050505050509392505050565b600560009054906101000a900460ff1681565b600b5481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660205281600052604060002081815481101515610d1357fe5b9060005260206000209060020201600091509150508060000154908060010154905082565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610e49576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610edd565b610e5c8382611ddb90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561106d57600080fd5b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080611196611db7565b9250600091506000905082600b5411156113c3575b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508210156113c25760008511156112db5784600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561124b57fe5b90600052602060002090600202016000015414156112d6576112d3600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156112b257fe5b90600052602060002090600202016001015482611dbf90919063ffffffff16565b90505b6113b5565b82600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561132857fe5b9060005260206000209060020201600001541015156113b4576113b1600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561139057fe5b90600052602060002090600202016001015482611dbf90919063ffffffff16565b90505b5b81806001019250506111ab565b5b80935050505092915050565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114655780601f1061143a57610100808354040283529160200191611465565b820191906000526020600020905b81548152906001019060200180831161144857829003601f168201915b505050505081565b60003382600080600061147e611db7565b925082600b54111561168b5760009150600090505b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508210156115c25782600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561152a57fe5b90600052602060002090600202016000015411156115b5576115b2600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561159157fe5b90600052602060002090600202016001015482611dbf90919063ffffffff16565b90505b8180600101925050611493565b611613816000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ddb90919063ffffffff16565b841115151561168a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4e6f7420656e6f75676820756e6c6f636b656420746f6b656e7300000000000081525060200191505060405180910390fd5b5b61169588886121ae565b9550505050505092915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061175982600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dbf90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119ac57600080fd5b6119b4611db7565b9250600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015611a3157506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548511155b8015611a3c57508284115b1515611ab0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496e76616c6964206c6f636b20636f6e66696775726174696f6e2e000000000081525060200191505060405180910390fd5b60009150600090505b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050821015611b7e5783600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515611b5057fe5b9060005260206000209060020201600001541415611b715760019050611b7e565b8180600101925050611ab9565b8015611c5a57611bf485600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515611bd457fe5b906000526020600020906002020160010154611dbf90919063ffffffff16565b600660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515611c4057fe5b906000526020600020906002020160010181905550611cf1565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040805190810160405280868152602001878152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050505b8573ffffffffffffffffffffffffffffffffffffffff167fc05547c5c326f39b5362bc5f2d266065af34bfe7fac0ad94bb690d27d07689a28686604051808381526020018281526020019250505060405180910390a2505050505050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dab57600080fd5b611db4816123cd565b50565b600042905090565b60008183019050828110151515611dd257fe5b80905092915050565b6000828211151515611de957fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611e3157600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611e7e57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515611f0957600080fd5b611f5a826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ddb90919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611fed826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dbf90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120be82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ddb90919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156121eb57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561223857600080fd5b612289826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ddb90919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061231c826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611dbf90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561240957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820c76712646ea266d89f3509b0ad3d2a8960da27e15a52b7495ce2b58493b6ccd600290000000000000000000000006018e843895496fd6011c834f6169702000cb03a0000000000000000000000005fcb65587fc8d76ffd21a247a8b0f429322b32dc0000000000000000000000007b0ac2ab1ac1129f177378c2f1cdf8a38d03fd640000000000000000000000001926f86d06309caf51c0ffa779bfd617e7f761ae000000000000000000000000000000000000000000000000000000005f37ce3f",
  "constructorArguments": "0000000000000000000000006018e843895496fd6011c834f6169702000cb03a0000000000000000000000005fcb65587fc8d76ffd21a247a8b0f429322b32dc0000000000000000000000007b0ac2ab1ac1129f177378c2f1cdf8a38d03fd640000000000000000000000001926f86d06309caf51c0ffa779bfd617e7f761ae000000000000000000000000000000000000000000000000000000005f37ce3f"
}