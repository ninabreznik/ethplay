{
  "address": "0x02e3083a51e8632e571fbd6a62ac396c10c653ba",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EplusCoin",
  "contractName": "EplusCoinToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-10\n*/\n\npragma solidity ^0.4.8;\n\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\ncontract ERC20 {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function allowance(address owner, address spender) constant returns (uint256);\n\n  function transfer(address to, uint256 value) returns (bool ok);\n  function transferFrom(address from, address to, uint256 value) returns (bool ok);\n  function approve(address spender, uint256 value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, SafeMath {\n\n  mapping(address => uint256) balances;\n  mapping (address => mapping (address => uint256)) allowed;\n\n  function transfer(address _to, uint256 _value) returns (bool success) {\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n    balances[_to] = safeAdd(balances[_to], _value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because safeSub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = safeAdd(balances[_to], _value);\n    balances[_from] = safeSub(balances[_from], _value);\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint256 _value) returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/// @title EplusCoin Token\ncontract EplusCoinToken is StandardToken {\n\n    string public name = \"EplusCoin\";          // name of the token\n    string public symbol = \"EPLUS\";\n    uint256 public decimals = 8;                  // token has 8 digit precision\n    string public version = 'H0.1';\n\n    uint256 public totalSupply = 16800000000000000;  // total supply of 168 Million Tokens\n\n    /// @notice Initializes the contract and allocates all initial tokens to the owner\n    function EplusCoinToken() {\n        balances[msg.sender] = totalSupply;\n    }\n}",
  "bytecode": "60c0604052600960808190527f45706c7573436f696e000000000000000000000000000000000000000000000060a090815261003e9160039190610107565b506040805180820190915260058082527f45504c5553000000000000000000000000000000000000000000000000000000602090920191825261008391600491610107565b5060086005556040805180820190915260048082527f48302e310000000000000000000000000000000000000000000000000000000060209092019182526100cd91600691610107565b50663baf82d03a00006007553480156100e557600080fd5b50600754600160a060020a0333166000908152600160205260409020556101a2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061014857805160ff1916838001178555610175565b82800160010185558215610175579182015b8281111561017557825182559160200191906001019061015a565b50610181929150610185565b5090565b61019f91905b80821115610181576000815560010161018b565b90565b61068d806101b16000396000f3006080604052600436106100a35763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100a8578063095ea7b31461013257806318160ddd1461016a57806323b872dd14610191578063313ce567146101bb57806354fd4d50146101d057806370a08231146101e557806395d89b4114610206578063a9059cbb1461021b578063dd62ed3e1461023f575b600080fd5b3480156100b457600080fd5b506100bd610266565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f75781810151838201526020016100df565b50505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013e57600080fd5b50610156600160a060020a03600435166024356102f4565b604080519115158252519081900360200190f35b34801561017657600080fd5b5061017f61035e565b60408051918252519081900360200190f35b34801561019d57600080fd5b50610156600160a060020a0360043581169060243516604435610364565b3480156101c757600080fd5b5061017f610465565b3480156101dc57600080fd5b506100bd61046b565b3480156101f157600080fd5b5061017f600160a060020a03600435166104c6565b34801561021257600080fd5b506100bd6104e1565b34801561022757600080fd5b50610156600160a060020a036004351660243561053c565b34801561024b57600080fd5b5061017f600160a060020a03600435811690602435166105ef565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102ec5780601f106102c1576101008083540402835291602001916102ec565b820191906000526020600020905b8154815290600101906020018083116102cf57829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60075481565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906103a5908461061a565b600160a060020a0380861660009081526001602052604080822093909355908716815220546103d4908461063e565b600160a060020a0386166000908152600160205260409020556103f7818461063e565b600160a060020a038087166000818152600260209081526040808320338616845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b60055481565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102ec5780601f106102c1576101008083540402835291602001916102ec565b600160a060020a031660009081526001602052604090205490565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102ec5780601f106102c1576101008083540402835291602001916102ec565b600160a060020a03331660009081526001602052604081205461055f908361063e565b600160a060020a03338116600090815260016020526040808220939093559085168152205461058e908361061a565b600160a060020a038085166000818152600160209081526040918290209490945580518681529051919333909316927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282016106378482108015906106325750838210155b610652565b9392505050565b600061064c83831115610652565b50900390565b80151561065e57600080fd5b505600a165627a7a72305820cbfd1c7fb6ac09cde84a831063ae00988a9f0e286dd6993940e7d34a211427880029"
}