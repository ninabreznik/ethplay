{
  "address": "0xb0a2373eb2af1e70e4351f20d4921f7b13a22038",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SafeERC20TimelockProd",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-26\n*/\n\npragma solidity ^0.4.24;\n\n/** \nDo not transfer tokens to TimelockERC20 directly (via transfer method)! Tokens will be stuck permanently.\nUse approvals and accept method.\n**/\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\ncontract IERC20{\n  function allowance(address owner, address spender) external view returns (uint);\n  function transferFrom(address from, address to, uint value) external returns (bool);\n  function approve(address spender, uint value) external returns (bool);\n  function totalSupply() external view returns (uint);\n  function balanceOf(address who) external view returns (uint);\n  function transfer(address to, uint value) external returns (bool);\n  \n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract ITimeMachine {\n  function getTimestamp_() internal view returns (uint);\n}\n\n\ncontract TimeMachineP is ITimeMachine {\n  /**\n  * @dev get current real timestamp\n  * @return current real timestamp\n  */\n  function getTimestamp_() internal view returns(uint) {\n    return block.timestamp;\n  }\n}\n\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ncontract SafeERC20Timelock is ITimeMachine, Ownable {\n  using SafeMath for uint;\n\n  event Lock(address indexed _from, address indexed _for, uint indexed timestamp, uint value);\n  event Withdraw(address indexed _for, uint indexed timestamp, uint value);\n\n\n\n  mapping (address => mapping(uint => uint)) public balance;\n  IERC20 public token;\n  uint public totalBalance;\n\n  constructor (address _token) public {\n    token = IERC20(_token);\n  }\n\n  function contractBalance_() internal view returns(uint) {\n    return token.balanceOf(this);\n  }\n\n  /**\n  * @dev accept token into timelock\n  * @param _for address of future tokenholder\n  * @param _timestamp lock timestamp\n  * @return result of operation: true if success\n  */\n  function accept(address _for, uint _timestamp, uint _tvalue) public returns(bool){\n    require(_for != address(0));\n    require(_for != address(this));\n    require(_timestamp > getTimestamp_());\n    require(_tvalue > 0);\n    uint _contractBalance = contractBalance_();\n    uint _balance = balance[_for][_timestamp];\n    uint _totalBalance = totalBalance;\n    require(token.transferFrom(msg.sender, this, _tvalue));\n    uint _value = contractBalance_().sub(_contractBalance);\n    balance[_for][_timestamp] = _balance.add(_value);\n    totalBalance = _totalBalance.add(_value);\n    emit Lock(msg.sender, _for, _timestamp, _value);\n    return true;\n  }\n\n\n  /**\n  * @dev release timelock tokens\n  * @param _for address of future tokenholder\n  * @param _timestamp array of timestamps to unlock\n  * @param _value array of amounts to unlock\n  * @return result of operation: true if success\n  */\n  function release_(address _for, uint[] _timestamp, uint[] _value) internal returns(bool) {\n    uint _len = _timestamp.length;\n    require(_len == _value.length);\n    uint _totalValue;\n    uint _curValue;\n    uint _curTimestamp;\n    uint _subValue;\n    uint _now = getTimestamp_();\n    for (uint i = 0; i < _len; i++){\n      _curTimestamp = _timestamp[i];\n      _curValue = balance[_for][_curTimestamp];\n      _subValue = _value[i];\n      require(_curValue >= _subValue);\n      require(_curTimestamp <= _now);\n      balance[_for][_curTimestamp] = _curValue.sub(_subValue);\n      _totalValue = _totalValue.add(_subValue);\n      emit Withdraw(_for, _curTimestamp, _subValue);\n    }\n    totalBalance = totalBalance.sub(_totalValue);\n    require(token.transfer(_for, _totalValue));\n    return true;\n  }\n\n\n  /**\n  * @dev release timelock tokens\n  * @param _timestamp array of timestamps to unlock\n  * @param _value array of amounts to unlock\n  * @return result of operation: true if success\n  */\n  function release(uint[] _timestamp, uint[] _value) external returns(bool) {\n    return release_(msg.sender, _timestamp, _value);\n  }\n\n  /**\n  * @dev release timelock tokens by force\n  * @param _for address of future tokenholder\n  * @param _timestamp array of timestamps to unlock\n  * @param _value array of amounts to unlock\n  * @return result of operation: true if success\n  */\n  function releaseForce(address _for, uint[] _timestamp, uint[] _value) external returns(bool) {\n    return release_(_for, _timestamp, _value);\n  }\n\n  /**\n  * @dev Allow to use functions of other contract from this contract\n  * @param _token address of ERC20 contract to call\n  * @param _to address to transfer ERC20 tokens\n  * @param _amount amount to transfer\n  * @return result of operation, true if success\n  */\n  function saveLockedERC20Tokens(address _token, address _to, uint  _amount) onlyOwner external returns (bool) {\n    require(IERC20(_token).transfer(_to, _amount));\n    require(totalBalance <= contractBalance_());\n    return true;\n  }\n\n  function () public payable {\n    revert();\n  }\n\n}\n\ncontract SafeERC20TimelockProd is TimeMachineP, SafeERC20Timelock {\n  constructor () public SafeERC20Timelock(0x45245bc59219eeaaf6cd3f382e078a461ff9de7b) {\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060008054600160a060020a03199081163317909155600280549091167345245bc59219eeaaf6cd3f382e078a461ff9de7b17905561098b806100546000396000f3006080604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632bc588ee811461009d57806357880c04146100dd5780636d8c859a146101165780638da5cb5b1461014c578063ad7a672f1461017d578063eea6753b14610192578063f0b30f69146101b9578063f2fde38b146101e3578063fc0c546a14610206575b600080fd5b3480156100a957600080fd5b506100c9602460048035828101929082013591813591820191013561021b565b604080519115158252519081900360200190f35b3480156100e957600080fd5b506100c960048035600160a060020a03169060248035808201929081013591604435908101910135610288565b34801561012257600080fd5b5061013a600160a060020a03600435166024356102f6565b60408051918252519081900360200190f35b34801561015857600080fd5b50610161610313565b60408051600160a060020a039092168252519081900360200190f35b34801561018957600080fd5b5061013a610322565b34801561019e57600080fd5b506100c9600160a060020a0360043516602435604435610328565b3480156101c557600080fd5b506100c9600160a060020a03600435811690602435166044356104fe565b3480156101ef57600080fd5b50610204600160a060020a03600435166105e9565b005b34801561021257600080fd5b5061016161067d565b600061027f338686808060200260200160405190810160405280939291908181526020018383602002808284375050604080516020808c0282810182019093528b82529095508b94508a93508392508501908490808284375061068c945050505050565b95945050505050565b60006102ec868686808060200260200160405190810160405280939291908181526020018383602002808284375050604080516020808c0282810182019093528b82529095508b94508a93508392508501908490808284375061068c945050505050565b9695505050505050565b600160209081526000928352604080842090915290825290205481565b600054600160a060020a031681565b60035481565b600080808080600160a060020a038816151561034357600080fd5b600160a060020a03881630141561035957600080fd5b610361610895565b871161036c57600080fd5b6000861161037957600080fd5b610381610899565b600160a060020a03808a1660009081526001602090815260408083208c845282528083205460035460025483517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018f90529351979b509199509750909316936323b872dd93606480820194918390030190829087803b15801561041557600080fd5b505af1158015610429573d6000803e3d6000fd5b505050506040513d602081101561043f57600080fd5b5051151561044c57600080fd5b61046484610458610899565b9063ffffffff61092f16565b9050610476838263ffffffff61094616565b600160a060020a03891660009081526001602090815260408083208b84529091529020556104aa828263ffffffff61094616565b6003556040805182815290518891600160a060020a038b169133917f62cded90d0b4d15cd7d67fee0ae8bac1d9c61c340a9465c7d341632f495829fc919081900360200190a4506001979650505050505050565b60008054600160a060020a0316331461051657600080fd5b83600160a060020a031663a9059cbb84846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561059257600080fd5b505af11580156105a6573d6000803e3d6000fd5b505050506040513d60208110156105bc57600080fd5b505115156105c957600080fd5b6105d1610899565b60035411156105df57600080fd5b5060019392505050565b600054600160a060020a0316331461060057600080fd5b600160a060020a038116151561061557600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254600160a060020a031681565b600080600080600080600080895196508851871415156106ab57600080fd5b6106b3610895565b9150600090505b868110156107c85789818151811015156106d057fe5b6020908102909101810151600160a060020a038d16600090815260018352604080822083835290935291909120548a5190965090945089908290811061071257fe5b6020908102909101015192508285101561072b57600080fd5b8184111561073857600080fd5b610748858463ffffffff61092f16565b600160a060020a038c16600090815260016020908152604080832088845290915290205561077c868463ffffffff61094616565b9550838b600160a060020a03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568856040518082815260200191505060405180910390a36001016106ba565b6003546107db908763ffffffff61092f16565b600355600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038e81166004830152602482018a90529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561084d57600080fd5b505af1158015610861573d6000803e3d6000fd5b505050506040513d602081101561087757600080fd5b5051151561088457600080fd5b5060019a9950505050505050505050565b4290565b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600092600160a060020a0316916370a0823191602480830192602092919082900301818787803b1580156108fe57600080fd5b505af1158015610912573d6000803e3d6000fd5b505050506040513d602081101561092857600080fd5b5051905090565b6000808383111561093f57600080fd5b5050900390565b60008282018381101561095857600080fd5b93925050505600a165627a7a7230582029f90a9330d3e5c4017ec455240345f032b6be6d97a9f7c20f2e5fa2f379a44c0029"
}