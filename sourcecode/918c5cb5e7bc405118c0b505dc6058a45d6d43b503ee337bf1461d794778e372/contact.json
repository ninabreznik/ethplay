{
  "address": "0x34F416364F52d6753Aee14F2687726705039c2B5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PickflixGameFactory",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-09\n*/\n\npragma solidity ^0.4.24;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n  external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n  external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n  external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ninterface IPickFlixToken {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n  external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n  external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n  external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n\n  function closeNow() public;\n  function kill() public;\n  function rate() public view returns(uint256);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n   * @dev Multiplies two numbers, reverts on overflow.\n   */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n   * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n   */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n    return c;\n  }\n\n  /**\n   * @dev Adds two numbers, reverts on overflow.\n   */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n    return c;\n  }\n\n  /**\n   * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n   * reverts when dividing by zero.\n   */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param owner The address to query the balance of.\n   * @return An uint256 representing the amount owned by the passed address.\n   */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n      address owner,\n      address spender\n      )\n    public\n    view\n    returns (uint256)\n    {\n      return _allowed[owner][spender];\n    }\n\n  /**\n   * @dev Transfer token for a specified address\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n  _allowed[msg.sender][spender] = value;\n  emit Approval(msg.sender, spender, value);\n  return true;\n}\n\n/**\n * @dev Transfer tokens from one address to another\n * @param from address The address which you want to send tokens from\n * @param to address The address which you want to transfer to\n * @param value uint256 the amount of tokens to be transferred\n */\nfunction transferFrom(\n    address from,\n    address to,\n    uint256 value\n    )\n  public\nreturns (bool)\n{\n  require(value <= _allowed[from][msg.sender]);\n\n_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n_transfer(from, to, value);\nreturn true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\nfunction increaseAllowance(\n    address spender,\n    uint256 addedValue\n    )\n  public\nreturns (bool)\n{\n  require(spender != address(0));\n\n  _allowed[msg.sender][spender] = (\n    _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\nfunction decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n    )\n  public\nreturns (bool)\n{\n  require(spender != address(0));\n\n  _allowed[msg.sender][spender] = (\n    _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n    * @param to The address to transfer to.\n      * @param value The amount to be transferred.\n      */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n  * @dev Internal function that mints an amount of the token and assigns it to\n  * an account. This encapsulates the modification of balances such that the\n  * proper events are emitted.\n    * @param account The account that will receive the created tokens.\n    * @param value The amount that will be created.\n    */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n  * @dev Internal function that burns an amount of the token of a given\n  * account.\n    * @param account The account whose tokens will be burnt.\n    * @param value The amount that will be burnt.\n    */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n  * @dev Internal function that burns an amount of the token of a given\n  * account, deducting from the sender's allowance for said account. Uses the\n  * internal burn function.\n  * @param account The account whose tokens will be burnt.\n    * @param value The amount that will be burnt.\n    */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n      _burn(account, value);\n  }\n}\n\n\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n  internal\n  view\n  returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor(address minter) public {\n    if(minter == 0x0) {\n      _addMinter(msg.sender);\n    } else {\n      _addMinter(minter);\n    }\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender), \"Only minter can do this\");\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 value\n  )\n  public\n  onlyMinter\n  returns (bool)\n  {\n    _mint(to, value);\n    return true;\n  }\n}\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    IERC20 token,\n    address to,\n    uint256 value\n  )\n  internal\n  {\n    require(token.transfer(to, value));\n  }\n\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  )\n  internal\n  {\n    require(token.transferFrom(from, to, value));\n  }\n\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  )\n  internal\n  {\n    require(token.approve(spender, value));\n  }\n}\n\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale,\n * allowing players to purchase tokens with ether. This contract implements\n * such functionality in its most fundamental form and can be extended to provide additional\n * functionality and/or custom behavior.\n * The external interface represents the basic interface for purchasing tokens, and conform\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n * behavior.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n  using SafeERC20 for IERC20;\n\n  // The token being sold\n  IERC20 private _token;\n\n  // Address where funds are collected\n  address private _wallet;\n\n  // How many token units a buyer gets per wei.\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\n  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n  // 1 wei will give you 1 unit, or 0.001 TOK.\n  uint256 private _rate;\n\n  // Amount of wei raised\n  uint256 private _weiRaised;\n\n  /**\n  * Event for token purchase logging\n  * @param purchaser who paid for the tokens\n  * @param beneficiary who got the tokens\n  * @param value weis paid for purchase\n  * @param amount amount of tokens purchased\n   */\n  event TokensPurchased(\n    address indexed purchaser,\n    address indexed beneficiary,\n    uint256 value,\n    uint256 amount\n  );\n\n  /**\n   * @param rate Number of token units a buyer gets per wei\n   * @dev The rate is the conversion between wei and the smallest and indivisible\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n   * @param wallet Address where collected funds will be forwarded to\n   * @param token Address of the token being sold\n   */\n  constructor(uint256 rate, address wallet, IERC20 token) public {\n    require(rate > 0);\n    require(wallet != address(0));\n    require(token != address(0));\n\n    _rate = rate;\n    _wallet = wallet;\n    _token = token;\n  }\n\n  // -----------------------------------------\n  // Crowdsale external interface\n  // -----------------------------------------\n\n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @return the token being sold.\n   */\n  function token() public view returns(IERC20) {\n    return _token;\n  }\n\n  /**\n   * @return the address where funds are collected.\n   */\n  function wallet() public view returns(address) {\n    return _wallet;\n  }\n\n  /**\n   * @return the number of token units a buyer gets per wei.\n   */\n  function rate() public view returns(uint256) {\n    return _rate;\n  }\n\n  /**\n   * @return the mount of wei raised.\n   */\n  function weiRaised() public view returns (uint256) {\n    return _weiRaised;\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param beneficiary Address performing the token purchase\n   */\n  function buyTokens(address beneficiary) public payable {\n\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    _weiRaised = _weiRaised.add(weiAmount);\n\n    _processPurchase(beneficiary, tokens);\n    emit TokensPurchased(\n      msg.sender,\n      beneficiary,\n      weiAmount,\n      tokens\n    );\n\n    _updatePurchasingState(beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(beneficiary, weiAmount);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n   *   super._preValidatePurchase(beneficiary, weiAmount);\n   *   require(weiRaised().add(weiAmount) <= cap);\n   * @param beneficiary Address performing the token purchase\n   * @param weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n  internal\n  {\n    require(beneficiary != address(0));\n    require(weiAmount != 0);\n  }\n\n  /**\n  * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n  * @param beneficiary Address performing the token purchase\n  * @param weiAmount Value in wei involved in the purchase\n  */\n  function _postValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n  internal\n  {\n    // optional override\n  }\n\n  /**\n  * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n  * @param beneficiary Address performing the token purchase\n  * @param tokenAmount Number of tokens to be emitted\n  */\n  function _deliverTokens(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n  internal\n  {\n    _token.safeTransfer(beneficiary, tokenAmount);\n  }\n\n  /**\n  * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n  * @param beneficiary Address receiving the tokens\n  * @param tokenAmount Number of tokens to be purchased\n  */\n  function _processPurchase(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n  internal\n  {\n    _deliverTokens(beneficiary, tokenAmount);\n  }\n\n  /**\n  * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n  * @param beneficiary Address receiving the tokens\n  * @param weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(\n    address beneficiary,\n    uint256 weiAmount\n  )\n  internal\n  {\n    // optional override\n  }\n\n  /**\n  * @dev Override to extend the way in which ether is converted to tokens.\n  * @param weiAmount Value in wei to be converted into tokens\n  * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 weiAmount)\n  internal view returns (uint256)\n  {\n    return weiAmount.mul(_rate);\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    _wallet.transfer(msg.value);\n  }\n}\n\n\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract TimedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 private _openingTime;\n  uint256 internal _closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range.\n   */\n  modifier onlyWhileOpen {\n    require(isOpen(), \"Crowdsale is no longer open\");\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param openingTime Crowdsale opening time\n   * @param closingTime Crowdsale closing time\n   */\n  constructor(uint256 openingTime, uint256 closingTime) public {\n    // solium-disable-next-line security/no-block-members\n    require(openingTime >= block.timestamp, \"The Crowdsale must not start in the past\");\n    require(closingTime >= openingTime, \"The Crowdsale must end in the future\");\n\n    _openingTime = openingTime;\n    _closingTime = closingTime;\n  }\n\n  /**\n   * @return the crowdsale opening time.\n   */\n  function openingTime() public view returns(uint256) {\n    return _openingTime;\n  }\n\n  /**\n   * @return the crowdsale closing time.\n   */\n  function closingTime() public view returns(uint256) {\n    return _closingTime;\n  }\n\n  /**\n   * @return true if the crowdsale is open, false otherwise.\n   */\n  function isOpen() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    // solium-disable-next-line security/no-block-members\n    return block.timestamp > _closingTime;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param beneficiary Token purchaser\n   * @param weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(\n    address beneficiary,\n    uint256 weiAmount\n  )\n  internal\n  onlyWhileOpen\n  {\n    super._preValidatePurchase(beneficiary, weiAmount);\n  }\n\n}\n\n\n\n/**\n * @title TimedCrowdsale\n * @dev Crowdsale accepting contributions only within a time frame.\n */\ncontract DeadlineCrowdsale is TimedCrowdsale {\n  constructor(uint256 closingTime) public TimedCrowdsale(block.timestamp, closingTime) { }\n}\n\n\n\n/**\n * @title MintedCrowdsale\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n * Token ownership should be transferred to MintedCrowdsale for minting.\n */\ncontract MintedCrowdsale is Crowdsale {\n\n  /**\n   * @dev Overrides delivery by minting tokens upon purchase.\n   * @param beneficiary Token purchaser\n   * @param tokenAmount Number of tokens to be minted\n   */\n  function _deliverTokens(\n    address beneficiary,\n    uint256 tokenAmount\n  )\n  internal\n  {\n    // Potentially dangerous assumption about the type of the token.\n    require(\n      ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));\n  }\n}\n\n\n\ncontract PickFlixToken is ERC20Mintable, DeadlineCrowdsale, MintedCrowdsale {\n\n  string public name = \"\";\n  string public symbol = \"\";\n  string public externalID = \"\";\n  uint public decimals = 18;\n\n  constructor(string _name, string _symbol, uint256 _rate, address _wallet, uint _closeDate, string _externalID)\n  public\n  Crowdsale(_rate, _wallet, this)\n  ERC20Mintable()\n  MinterRole(this)\n  DeadlineCrowdsale(_closeDate)  {\n    externalID = _externalID;\n    name = _name;\n    symbol = _symbol;\n  }\n\n  function closeNow() public {\n    require(msg.sender == wallet(), \"Must be the creator to close this token\");\n    _closingTime = block.timestamp - 1;\n  }\n\n  function kill() public {\n    require(msg.sender == wallet(), \"Must be the creator to kill this token\");\n    require(balanceOf(wallet()) >=  0, \"Must have no tokens, or the creator owns all the tokens\");\n    selfdestruct(wallet());\n  }\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    _owner = msg.sender;\n    emit OwnershipTransferred(address(0), _owner);\n  }\n\n  /**\n  * @return the address of the owner.\n  */\n  function owner() public view returns(address) {\n    return _owner;\n  }\n\n  /**\n  * @dev Throws if called by any account other than the owner.\n  */\n  modifier onlyOwner() {\n    require(isOwner(), \"Must be owner\");\n    _;\n  }\n\n  /**\n  * @return true if `msg.sender` is the owner of the contract.\n  */\n  function isOwner() public view returns(bool) {\n    return msg.sender == _owner;\n  }\n\n  /**\n  * @dev Allows the current owner to relinquish control of the contract.\n  * @notice Renouncing to ownership will leave the contract without an owner.\n    * It will not be possible to call the functions with the `onlyOwner`\n  * modifier anymore.\n    */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address newOwner) internal {\n    require(newOwner != address(0), \"Must provide a valid owner address\");\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\n\n\ncontract PickflixGameMaster is Ownable {\n  // this library helps protect against overflows for large integers\n  using SafeMath for uint256;\n\n  // fires off events for receiving and sending Ether\n  event Sent(address indexed payee, uint256 amount, uint256 balance);\n  event Received(address indexed payer, uint256 amount, uint256 balance);\n\n  string public gameName;\n  uint public openDate;\n  uint public closeDate;\n  bool public gameDone;\n  \n  // create a mapping for box office totals for particular movies\n  // address is the token contract address\n  mapping (address => uint256) public boxOfficeTotals;\n\n  // let's make a Movie struct to make all of this code cleaner\n  struct Movie {\n    uint256 boxOfficeTotal;\n    uint256 totalPlayerRewards;\n    bool accepted;\n  }\n  // map token addresses to Movie structs\n  mapping (address => Movie) public movies;\n\n  // count the total number of tokens issued\n  uint256 public tokensIssued = 0; // this number will change\n\n  // more global variables, for calculating payouts and game results\n  uint256 public oracleFee = 0;\n  uint256 public oracleFeePercent = 0;\n  uint256 public totalPlayerRewards = 0;\n  uint256 public totalBoxOffice = 0;\n\n\n  // owner is set to original message sender during contract migration\n  constructor(string _gameName, uint _closeDate, uint _oracleFeePercent) Ownable() public {\n    gameName = _gameName;\n    closeDate = _closeDate;\n    openDate = block.timestamp;\n    gameDone = false;\n    oracleFeePercent = _oracleFeePercent;\n  }\n\n  /**\n    * calculate a percentage with parts per notation.\n    * the value returned will be in terms of 10e precision\n  */\n  function percent(uint numerator, uint denominator, uint precision) private pure returns(uint quotient) {\n    // caution, keep this a private function so the numbers are safe\n    uint _numerator = (numerator * 10 ** (precision+1));\n    // with rounding of last digit\n    uint _quotient = ((_numerator / denominator)) / 10;\n    return ( _quotient);\n  }\n\n  /**\n  * @dev wallet can receive funds.\n  */\n  function () public payable {\n    emit Received(msg.sender, msg.value, address(this).balance);\n  }\n\n  /**\n  * @dev wallet can send funds\n  */\n  function sendTo(address _payee, uint256 _amount) private {\n    require(_payee != 0 && _payee != address(this), \"Burning tokens and self transfer not allowed\");\n    require(_amount > 0, \"Must transfer greater than zero\");\n    _payee.transfer(_amount);\n    emit Sent(_payee, _amount, address(this).balance);\n  }\n\n  /**\n  * @dev function to see the balance of Ether in the wallet\n  */\n  function balanceOf() public view returns (uint256) {\n    return address(this).balance;\n  }\n\n  /**\n  * @dev function for the player to cash in tokens\n  */\n  function redeemTokens(address _player, address _tokenAddress) public returns (bool success) {\n    require(acceptedToken(_tokenAddress), \"Token must be a registered token\");\n    require(block.timestamp >= closeDate, \"Game must be closed\");\n    require(gameDone == true, \"Can't redeem tokens until results have been uploaded\");\n    // instantiate a token contract instance from the deployed address\n    IPickFlixToken _token = IPickFlixToken(_tokenAddress);\n    // check token allowance player has given to GameMaster contract\n    uint256 _allowedValue = _token.allowance(_player, address(this));\n    // transfer tokens to GameMaster\n    _token.transferFrom(_player, address(this), _allowedValue);\n    // check balance of tokens actually transfered\n    uint256 _transferedTokens = _allowedValue;\n    // calculate the percentage of the total token supply represented by the transfered tokens\n    uint256 _playerPercentage = percent(_transferedTokens, _token.totalSupply(), 4);\n    // calculate the particular player's rewards, as a percentage of total player rewards for the movie\n    uint256 _playerRewards = movies[_tokenAddress].totalPlayerRewards.mul(_playerPercentage).div(10**4);\n    // pay out ETH to the player\n    sendTo(_player, _playerRewards);\n    // return that the function succeeded\n    return true;\n  }\n\n  // checks if a token is an accepted game token\n  function acceptedToken(address _tokenAddress) public view returns (bool) {\n    return movies[_tokenAddress].accepted;\n  }\n\n  /**\n  * @dev functions to calculate game results and payouts\n  */\n  function calculateTokensIssued(address _tokenAddress) private view returns (uint256) {\n    IPickFlixToken _token = IPickFlixToken(_tokenAddress);\n    return _token.totalSupply();\n  }\n\n  function closeToken(address _tokenAddress) private {\n    IPickFlixToken _token = IPickFlixToken(_tokenAddress);\n    _token.closeNow();\n  }\n\n  function calculateTokenRate(address _tokenAddress) private view returns (uint256) {\n    IPickFlixToken _token = IPickFlixToken(_tokenAddress);\n    return _token.rate();\n  }\n\n  // \"15\" in this function means 15%. Change that number to raise or lower\n  // the oracle fee.\n  function calculateOracleFee() private view returns (uint256) {\n    return balanceOf().mul(oracleFeePercent).div(100);\n  }\n\n  // this calculates how much Ether is available for player rewards\n  function calculateTotalPlayerRewards() private view returns (uint256) {\n    return balanceOf().sub(oracleFee);\n  }\n\n  // this calculates the total box office earnings of all movies in USD\n  function calculateTotalBoxOffice(uint256[] _boxOfficeTotals) private pure returns (uint256) {\n    uint256 _totalBoxOffice = 0;\n    for (uint256 i = 0; i < _boxOfficeTotals.length; i++) {\n      _totalBoxOffice = _totalBoxOffice.add(_boxOfficeTotals[i]);\n    }\n    return _totalBoxOffice;\n  }\n\n  // this calculates how much Ether to reward for each game token\n  function calculateTotalPlayerRewardsPerMovie(uint256 _boxOfficeTotal) public view returns (uint256) {\n    // 234 means 23.4%, using parts-per notation with three decimals of precision\n    uint256 _boxOfficePercentage = percent(_boxOfficeTotal, totalBoxOffice, 4);\n    // calculate the Ether rewards available for each movie\n    uint256 _rewards = totalPlayerRewards.mul(_boxOfficePercentage).div(10**4);\n    return _rewards;\n  }\n\n  function calculateRewardPerToken(uint256 _boxOfficeTotal, address tokenAddress) public view returns (uint256) {\n    IPickFlixToken token = IPickFlixToken(tokenAddress);\n    uint256 _playerBalance = token.balanceOf(msg.sender);\n    uint256 _playerPercentage = percent(_playerBalance, token.totalSupply(), 4);\n    // calculate the particular player's rewards, as a percentage of total player rewards for the movie\n    uint256 _playerRewards = movies[tokenAddress].totalPlayerRewards.mul(_playerPercentage).div(10**4);\n    return _playerRewards;\n  }\n\n  /**\n  * @dev add box office results and token addresses for the movies, and calculate game results\n  */\n  function calculateGameResults(address[] _tokenAddresses, uint256[] _boxOfficeTotals) public onlyOwner {\n    // check that there are as many box office totals as token addresses\n    require(_tokenAddresses.length == _boxOfficeTotals.length, \"Must have box office results per token\");\n    // calculate Oracle Fee and amount of Ether available for player rewards\n    require(gameDone == false, \"Can only submit results once\");\n    require(block.timestamp >= closeDate, \"Game must have ended before results can be entered\");\n    oracleFee = calculateOracleFee();\n    totalPlayerRewards = calculateTotalPlayerRewards();\n    totalBoxOffice = calculateTotalBoxOffice(_boxOfficeTotals);\n\n    // create Movies (see: Movie struct) and calculate player rewards\n    for (uint256 i = 0; i < _tokenAddresses.length; i++) {\n      tokensIssued = tokensIssued.add(calculateTokensIssued(_tokenAddresses[i]));\n      movies[_tokenAddresses[i]] = Movie(_boxOfficeTotals[i], calculateTotalPlayerRewardsPerMovie(_boxOfficeTotals[i]), true);\n    }\n\n    // The owner will be the Factory that deploys this contract.\n    owner().transfer(oracleFee);\n    gameDone = true;\n  }\n\n  /**\n   * @dev add box office results and token addresses for the movies, and calculate game results\n   */\n  function abortGame(address[] _tokenAddresses) public onlyOwner {\n    // calculate Oracle Fee and amount of Ether available for player rewards\n    require(gameDone == false, \"Can only submit results once\");\n    oracleFee = 0;\n    totalPlayerRewards = calculateTotalPlayerRewards();\n    closeDate = block.timestamp;\n\n    for (uint256 i = 0; i < _tokenAddresses.length; i++) {\n      uint tokenSupply = calculateTokensIssued(_tokenAddresses[i]);\n      tokensIssued = tokensIssued.add(tokenSupply);\n      closeToken(_tokenAddresses[i]);\n    }\n    totalBoxOffice = tokensIssued;\n\n    // create Movies (see: Movie struct) and calculate player rewards\n    for (i = 0; i < _tokenAddresses.length; i++) {\n      tokenSupply = calculateTokensIssued(_tokenAddresses[i]);\n      movies[_tokenAddresses[i]] = Movie(tokenSupply, calculateTotalPlayerRewardsPerMovie(tokenSupply), true);\n    }\n\n    gameDone = true;\n  }\n\n  function killGame(address[] _tokenAddresses) public onlyOwner {\n    for (uint i = 0; i < _tokenAddresses.length; i++) {\n      IPickFlixToken token = IPickFlixToken(_tokenAddresses[i]);\n      require(token.balanceOf(this) == token.totalSupply());\n      token.kill();\n    }\n    selfdestruct(owner());\n  }\n}\n\n\n\n//The contract in charge of creating games\ncontract PickflixGameFactory {\n\n  struct Game {\n    string gameName;\n    address gameMaster;\n    uint openDate;\n    uint closeDate;\n  }\n\n  // The list of all games this factory has created\n  Game[] public games;\n\n  // Each game master has a list of tokens\n  mapping(address => address[]) public gameTokens;\n\n  // The owner of the factory, i.e. GoBlock\n  address public owner;\n\n  // The address which will receive the oracle fee\n  address public oracleFeeReceiver;\n\n  // An event emitted when the oracle fee is received\n  event OraclePayoutReceived(uint value);\n\n  constructor() public {\n    owner = msg.sender;\n    oracleFeeReceiver = msg.sender;\n  }\n\n  function () public payable {\n    emit OraclePayoutReceived(msg.value);\n  }\n\n  // Throw an error if the sender is not the owner\n  modifier onlyOwner {\n    require(msg.sender == owner, \"Only owner can execute this\");\n    _;\n  }\n\n  // Create a new game master and add it to the factories game list\n  function createGame(string gameName, uint closeDate, uint oracleFeePercent) public onlyOwner returns (address){\n    address gameMaster = new PickflixGameMaster(gameName, closeDate, oracleFeePercent);\n    games.push(Game({\n      gameName: gameName,\n      gameMaster: gameMaster,\n      openDate: block.timestamp,\n      closeDate: closeDate\n    }));\n    return gameMaster;\n  }\n\n  // Create a token and associate it with a game\n  function createTokenForGame(uint gameIndex, string tokenName, string tokenSymbol, uint rate, string externalID) public onlyOwner returns (address) {\n    Game storage game = games[gameIndex];\n    address token = new PickFlixToken(tokenName, tokenSymbol, rate, game.gameMaster, game.closeDate, externalID);\n    gameTokens[game.gameMaster].push(token);\n    return token;\n  }\n\n  // Upload the results for a game\n  function closeGame(uint gameIndex, address[] _tokenAddresses, uint256[] _boxOfficeTotals) public onlyOwner {\n    PickflixGameMaster(games[gameIndex].gameMaster).calculateGameResults(_tokenAddresses, _boxOfficeTotals);\n  }\n\n  // Cancel a game and refund participants\n  function abortGame(uint gameIndex) public onlyOwner {\n    address gameMaster = games[gameIndex].gameMaster;\n    PickflixGameMaster(gameMaster).abortGame(gameTokens[gameMaster]);\n  }\n\n  // Delete a game from the factory\n  function killGame(uint gameIndex) public onlyOwner {\n    address gameMaster = games[gameIndex].gameMaster;\n    PickflixGameMaster(gameMaster).killGame(gameTokens[gameMaster]);\n    games[gameIndex] = games[games.length-1];\n    delete games[games.length-1];\n    games.length--;\n  }\n\n  // Change the owner address\n  function setOwner(address newOwner) public onlyOwner {\n    owner = newOwner;\n  }\n\n  // Change the address that receives the oracle fee\n  function setOracleFeeReceiver(address newReceiver) public onlyOwner {\n    oracleFeeReceiver = newReceiver;\n  }\n\n  // Send the ether to the oracle fee receiver\n  function sendOraclePayout() public {\n    oracleFeeReceiver.transfer(address(this).balance);\n  }\n}",
  "bytecode": ""
}