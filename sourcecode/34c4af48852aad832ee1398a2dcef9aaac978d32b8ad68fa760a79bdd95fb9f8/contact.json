{
  "address": "0x4c382f8e09615ac86e08ce58266cc227e7d4d913",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SkrillaToken",
  "contractName": "SkrillaToken",
  "compilerVersion": "v0.4.17+commit.bdeb9e52",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-10-19\n*/\n\npragma solidity ^0.4.13;\n\ncontract ERC20 {\n\n    function totalSupply() constant returns (uint totalSupply);\n\n    function balanceOf(address _owner) constant returns (uint balance);\n\n    function transfer(address _to, uint _value) returns (bool success);\n\n    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n\n    function approve(address _spender, uint _value) returns (bool success);\n\n    function allowance(address _owner, address _spender) constant returns (uint remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract SkrillaToken is ERC20 {\n    using SafeMath for uint;\n\n    string public constant name = \"Skrilla\";\n    string public constant symbol = \"SKR\";\n    uint8 public constant decimals = 6;\n    uint256 public totalSupply;\n    //Multiply to get from a SKR to the number of subunits\n    //Note the cast here otherwise solidity uses a uint8\n    uint256 internal constant SUBUNIT_MULTIPLIER = 10 ** uint256(decimals);\n\n    //Token balances\n    mapping (address => uint256) tokenSaleBalances;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => uint256) whiteList;\n\n    //Contract conditions\n    uint256 internal constant SALE_CAP = 600 * 10**6 * SUBUNIT_MULTIPLIER;\n    uint256 internal constant TEAM_TOKENS = 100 * 10**6 * SUBUNIT_MULTIPLIER;\n    uint256 internal constant GROWTH_TOKENS = 300 * 10**6 * SUBUNIT_MULTIPLIER;\n    uint256 internal constant TOTAL_SUPPLY_CAP  = SALE_CAP + TEAM_TOKENS + GROWTH_TOKENS;\n\n    address internal withdrawAddress;\n\n    //State values\n    uint256 public ethRaised;\n    \n    address internal owner;\n    address internal growth;\n    address internal team;\n\n    uint256[7] public saleStageStartDates;\n\n    //The prices for each stage. The number of tokens a user will receive for 1ETH.\n    uint16[6] public tokens = [3000,2500,0,2400,2200,2000];\n\n\n    function tokenSaleBalanceOf(address _owner) public constant returns (uint256 balance) {\n        balance = tokenSaleBalances[_owner];\n    }\n\n    function getPreSaleStart() public constant returns (uint256) {\n        return saleStageStartDates[0];\n    }\n\n    function getPreSaleEnd() public constant returns (uint256) {\n        return saleStageStartDates[2];\n    }\n\n    function getSaleStart() public constant returns (uint256) {\n        return saleStageStartDates[3];\n    }\n\n    function getSaleEnd() public constant returns (uint256) {\n        return saleStageStartDates[6];\n    }\n\n    // Tokens per ETH\n    function getCurrentPrice(address _buyer) public constant returns (uint256) {\n        uint256 price = whiteList[_buyer];\n\n        if (price > 0) {\n            return SUBUNIT_MULTIPLIER.mul(price);\n        } else {\n            uint256 stage = getStage();\n            return SUBUNIT_MULTIPLIER.mul(tokens[stage]);\n        }\n    }\n\n    function inPreSalePeriod() public constant returns (bool) {\n        return (now >= getPreSaleStart() && now <= getPreSaleEnd());\n    }\n\n    function inSalePeriod() public constant returns (bool) {\n        return (now >= getSaleStart() && now <= getSaleEnd());\n        //In rounds 1 - 3 period\n    }\n\n    // Set start date on contract deploy\n    function SkrillaToken(uint256 _preSaleStart, uint256 _saleStart, address _team, address _growth, address _withdrawAddress) {\n\n        owner = msg.sender;\n\n        require(owner != _team && owner != _growth);\n        require(_team != _growth);\n        //Ensure there was no overflow\n        require(SALE_CAP / SUBUNIT_MULTIPLIER == 600 * 10**6);\n        require(GROWTH_TOKENS / SUBUNIT_MULTIPLIER == 300 * 10**6);\n        require(TEAM_TOKENS / SUBUNIT_MULTIPLIER == 100 * 10**6);\n\n        team = _team;\n        growth = _growth;\n        withdrawAddress = _withdrawAddress;\n\n        tokenSaleBalances[team] = TEAM_TOKENS ;\n        tokenSaleBalances[growth] = GROWTH_TOKENS ;\n\n        totalSupply = (TEAM_TOKENS + GROWTH_TOKENS);\n\n        if (_preSaleStart == 0) {\n            _preSaleStart = 1508533200; //Oct 20 2017 9pm\n        }\n\n        if (_saleStart == 0) {\n            _saleStart = 1510002000; //Nov 6 2017 9pm\n        }\n\n        uint256 preSaleEnd = _preSaleStart.add(3 days);\n        require(_saleStart > preSaleEnd);\n\n        saleStageStartDates[0] = _preSaleStart;\n        saleStageStartDates[1] = _preSaleStart.add(1 days);\n        saleStageStartDates[2] = preSaleEnd;\n        saleStageStartDates[3] = _saleStart;\n        saleStageStartDates[4] = _saleStart.add(1 days);\n        saleStageStartDates[5] = _saleStart.add(7 days);\n        saleStageStartDates[6] = _saleStart.add(14 days);\n\n        ethRaised = 0;\n    }\n\n    //Move a user's token sale balance into the ERC20 balances mapping.\n    //The user must call this before they can use their tokens as ERC20 tokens.\n    function withdraw() public returns (bool) {\n        require(now > getSaleEnd() + 14 days);\n\n        uint256 tokenSaleBalance = tokenSaleBalances[msg.sender];\n        balances[msg.sender] = balances[msg.sender].add(tokenSaleBalance);\n        delete tokenSaleBalances[msg.sender];\n        Withdraw(msg.sender, tokenSaleBalance);\n        return true;\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        balance = balances[_owner];\n    }\n\n    function totalSupply() public constant returns (uint256) {\n        //Although this function shadows the public field removing it causes all the tests to fail.\n        return totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]);\n\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        Transfer(_from,_to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        //Prevent attack mentioned here: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit\n        //Requires that the spender can only set the allowance to a non zero amount if the current allowance is 0\n        //This may have backward compatibility issues with older clients.\n        require(allowed[msg.sender][_spender] == 0 || _amount == 0);\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function addToWhitelist(address _buyer, uint256 _price) public onlyOwner {\n        require(_price < 10000);\n        whiteList[_buyer] = _price;\n    }\n\n    function removeFromWhitelist(address _buyer) public onlyOwner {\n        delete whiteList[_buyer];\n    }\n\n    // Fallback function can be used to buy tokens\n    function() payable {\n        buyTokens();\n    }\n\n    // Low level token purchase function\n    function buyTokens() public payable saleHasNotClosed {\n        // No 0 contributions\n        require(msg.value > 0);\n        require(ethRaised.add(msg.value) <= 150000 ether);\n\n        // Ignore inSalePeriod for whitelisted buyers, just check before saleEnd\n        require(inPreSalePeriod() || inSalePeriod() || (whiteList[msg.sender] > 0));\n\n        if (inPreSalePeriod()) {\n            require(msg.value >= 10 ether || whiteList[msg.sender] > 0);\n        }\n\n        // Get price for buyer\n        uint256 price = getCurrentPrice(msg.sender);\n        require (price > 0);\n\n        uint256 tokenAmount = price.mul(msg.value);\n        tokenAmount = tokenAmount.div(1 ether);\n\n        require (tokenAmount > 0);\n        require (totalSupply.add(tokenAmount) <= TOTAL_SUPPLY_CAP);\n\n        totalSupply = totalSupply.add(tokenAmount);\n        ethRaised = ethRaised.add(msg.value);\n        tokenSaleBalances[msg.sender] = tokenSaleBalances[msg.sender].add(tokenAmount);\n\n        // Raise event\n        Transfer(address(0), msg.sender, tokenAmount);\n        TokenPurchase(msg.sender, msg.value, tokenAmount);\n    }\n\n    // empty the contract ETH\n    function transferEth() public onlyOwner {\n        require(now > getSaleEnd() + 14 days);\n        withdrawAddress.transfer(this.balance);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier saleHasNotClosed()  {\n        //Sale must not have closed\n        require(now <= getSaleEnd());\n        _;\n    }\n\n    function getStage() public constant returns (uint256) {\n        for (uint256 i = 1; i < saleStageStartDates.length; i++) {\n            if (now < saleStageStartDates[i]) {\n                return i - 1;\n            }\n        }\n\n        return saleStageStartDates.length - 1;\n    }\n\n    event TokenPurchase(address indexed _purchaser, uint256 _value, uint256 _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Withdraw(address indexed _owner, uint256 _value);\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035f74494ebf554d69876aba12509d177d4b1261c0000000000000000000000004251ae636ff6b7b2218a12c985407230dae8c335000000000000000000000000509106810da04417d8591897f92403420537eeda"
}