{
  "address": "0x44830e5fbe354af3c1c8d405170c08d3bc8a2cd9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "EthereumCenturion",
  "contractName": "EthereumCenturion",
  "compilerVersion": "v0.4.15+commit.bbb8e64f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-01\n*/\n\npragma solidity ^0.4.15;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\nlibrary SaferMath {\n  function mulX(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function divX(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BasicToken is ERC20Basic {\n  using SaferMath for uint256;\n  mapping(address => uint256) balances;\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue) returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\ncontract EthereumCenturion is StandardToken, Ownable {\n\n  string public constant name = \"Ethereum Centurion\";\n  string public constant symbol = \"ETHC\";\n  uint8 public constant decimals = 8;\n\n  uint256 private constant AMOUNT_SUPPLY = 24000000 * (10 ** uint256(decimals));\n\n  address NULL_ADDRESS = address(0);\n\n  uint public _NT = 0;\n  \n  event NT(uint NT_);\n    function incNT() {\n        _NT +=1;\n    if(_NT > 100) {\n        _NT = 0;\n    }\n        NT(_NT);\n    }\n\n  // Note intended to act as a source of authorized messaging from development team\n  event TextChanged(string newText);\n  string public Msg = \"The new smart contract.\";\n  function setText(string txt_) public onlyOwner {\n      Msg = txt_;\n      setText(Msg);\n  }\n  \n  event PerformingDrop(uint count);\n  function drop(address[] addresses, uint256 amount) public onlyOwner {\n    uint256 amt = amount * 10**8;\n    require(amt > 0);\n    require(amt <= AMOUNT_SUPPLY);\n    PerformingDrop(addresses.length);\n    \n    // Maximum drop is 1000 addresses\n    assert(addresses.length <= 1000);\n    assert(balances[owner] >= amt * addresses.length);\n    for (uint i = 0; i < addresses.length; i++) {\n      address recipient = addresses[i];\n      if(recipient != NULL_ADDRESS) {\n        balances[owner] -= amt;\n        balances[recipient] += amt;\n        Transfer(owner, recipient, amt);\n      }\n    }\n  }\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens..\n   */\n  function EthereumCenturion() {\n    totalSupply = AMOUNT_SUPPLY;\n    balances[msg.sender] = AMOUNT_SUPPLY;\n  }\n}",
  "bytecode": "6060604090815260048054600160a060020a031916905560006005558051908101604052601781527f546865206e657720736d61727420636f6e74726163742e000000000000000000602082015260069080516100609291602001906100b3565b50341561006c57600080fd5b5b5b60038054600160a060020a03191633600160a060020a03161790555b660886c98b7600006000818155600160a060020a0333168152600160205260409020555b610153565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100f457805160ff1916838001178555610121565b82800160010185558215610121579182015b82811115610121578251825591602001919060010190610106565b5b5061012e929150610132565b5090565b61015091905b8082111561012e5760008155600101610138565b5090565b90565b610f58806101626000396000f300606060405236156100f95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100fe578063095ea7b31461018957806318160ddd146101bf57806323b872dd146101e457806329cd776714610220578063313ce567146102455780633974874b1461026e5780635d3a1f9d146102c1578063661884631461031457806370a082311461034a5780637ac7ef851461037b5780638da5cb5b1461040657806395d89b4114610435578063a9059cbb146104c0578063b0686584146104f6578063d73dd6231461050b578063dd62ed3e14610541578063f2fde38b14610578575b600080fd5b341561010957600080fd5b610111610599565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014e5780820151818401525b602001610135565b50505050905090810190601f16801561017b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019457600080fd5b6101ab600160a060020a03600435166024356105d0565b604051901515815260200160405180910390f35b34156101ca57600080fd5b6101d261063d565b60405190815260200160405180910390f35b34156101ef57600080fd5b6101ab600160a060020a0360043581169060243516604435610643565b604051901515815260200160405180910390f35b341561022b57600080fd5b6101d261076f565b60405190815260200160405180910390f35b341561025057600080fd5b610258610775565b60405160ff909116815260200160405180910390f35b341561027957600080fd5b6102bf6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650509335935061077a92505050565b005b34156102cc57600080fd5b6102bf60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506108f195505050505050565b005b341561031f57600080fd5b6101ab600160a060020a03600435166024356109c8565b604051901515815260200160405180910390f35b341561035557600080fd5b6101d2600160a060020a0360043516610ac4565b60405190815260200160405180910390f35b341561038657600080fd5b610111610ae3565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014e5780820151818401525b602001610135565b50505050905090810190601f16801561017b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041157600080fd5b610419610b81565b604051600160a060020a03909116815260200160405180910390f35b341561044057600080fd5b610111610b90565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014e5780820151818401525b602001610135565b50505050905090810190601f16801561017b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104cb57600080fd5b6101ab600160a060020a0360043516602435610bc7565b604051901515815260200160405180910390f35b341561050157600080fd5b6102bf610c9e565b005b341561051657600080fd5b6101ab600160a060020a0360043516602435610cf0565b604051901515815260200160405180910390f35b341561054c57600080fd5b6101d2600160a060020a0360043581169060243516610d95565b60405190815260200160405180910390f35b341561058357600080fd5b6102bf600160a060020a0360043516610dc2565b005b60408051908101604052601281527f457468657265756d2043656e747572696f6e0000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600080600160a060020a038416151561065b57600080fd5b50600160a060020a038085166000818152600260209081526040808320339095168352938152838220549282526001905291909120546106a1908463ffffffff610e5b16565b600160a060020a0380871660009081526001602052604080822093909355908616815220546106d6908463ffffffff610e7216565b600160a060020a0385166000908152600160205260409020556106ff818463ffffffff610e5b16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b60055481565b600881565b6003546000908190819033600160a060020a0390811691161461079c57600080fd5b6305f5e10084029250600083116107b257600080fd5b660886c98b7600008311156107c657600080fd5b7fd0707c61df60f834131065c6e5663fcae19010cdcd4f80af656fa5216107502d855160405190815260200160405180910390a16103e88551111561080757fe5b8451600354600160a060020a031660009081526001602052604090205490840290101561083057fe5b600091505b84518210156108e85784828151811061084a57fe5b90602001906020020151600454909150600160a060020a038083169116146108dc5760038054600160a060020a039081166000908152600160205260408082208054889003905584831680835291819020805488019055925490929116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a35b5b600190910190610835565b5b5b5050505050565b60035433600160a060020a0390811691161461090c57600080fd5b600681805161091f929160200190610e8c565b506109c360068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109b95780601f1061098e576101008083540402835291602001916109b9565b820191906000526020600020905b81548152906001019060200180831161099c57829003601f168201915b50505050506108f1565b5b5b50565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610a2557600160a060020a033381166000908152600260209081526040808320938816835292905290812055610a5c565b610a35818463ffffffff610e5b16565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a0381166000908152600160205260409020545b919050565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b795780601f10610b4e57610100808354040283529160200191610b79565b820191906000526020600020905b815481529060010190602001808311610b5c57829003601f168201915b505050505081565b600354600160a060020a031681565b60408051908101604052600481527f4554484300000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a0383161515610bde57600080fd5b600160a060020a033316600090815260016020526040902054610c07908363ffffffff610e5b16565b600160a060020a033381166000908152600160205260408082209390935590851681522054610c3c908363ffffffff610e7216565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b60058054600101908190556064901115610cb85760006005555b7f6e72fd4aac3fab21293aa0bdd14635f6d94e4e258f73583e78f4662b38f749a460055460405190815260200160405180910390a15b565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610d28908363ffffffff610e7216565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a03908116911614610ddd57600080fd5b600160a060020a0381161515610df257600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b600082821115610e6757fe5b508082035b92915050565b600082820183811015610e8157fe5b8091505b5092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ecd57805160ff1916838001178555610efa565b82800160010185558215610efa579182015b82811115610efa578251825591602001919060010190610edf565b5b50610f07929150610f0b565b5090565b610f2991905b80821115610f075760008155600101610f11565b5090565b905600a165627a7a723058206fa618286ab470216397bcb79a6a03b36f502058f73f412c64591dfad47a62160029"
}