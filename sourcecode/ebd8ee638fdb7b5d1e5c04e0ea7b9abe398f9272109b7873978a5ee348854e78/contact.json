{
  "address": "0xa3296436f6e85a7e8bfc485e64f05e35c9047c92",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "TwoHundredPercent",
  "contractName": "TwoHundredPercent",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-18\n*/\n\npragma solidity ^0.4.24;\n\n/*\n* ---How to use:\n*  1. Send from ETH wallet to the smart contract address\n*     any amount ETH.\n*  2. Claim your profit by sending 0 ether transaction (1 time per hour)\n*  3. If you earn more than 200%, you can withdraw only one finish time\n*/\ncontract TwoHundredPercent {\n\n    using SafeMath for uint;\n    mapping(address => uint) public balance;\n    mapping(address => uint) public time;\n    mapping(address => uint) public percentWithdraw;\n    mapping(address => uint) public allPercentWithdraw;\n    uint public stepTime = 1 hours;\n    uint public countOfInvestors = 0;\n    address public ownerAddress = 0xC24ddFFaaCEB94f48D2771FE47B85b49818204Be;\n    uint projectPercent = 10;\n\n    event Invest(address investor, uint256 amount);\n    event Withdraw(address investor, uint256 amount);\n\n    modifier userExist() {\n        require(balance[msg.sender] > 0, \"Address not found\");\n        _;\n    }\n\n    modifier checkTime() {\n        require(now >= time[msg.sender].add(stepTime), \"Too fast payout request\");\n        _;\n    }\n\n    function collectPercent() userExist checkTime internal {\n        if ((balance[msg.sender].mul(2)) <= allPercentWithdraw[msg.sender]) {\n            balance[msg.sender] = 0;\n            time[msg.sender] = 0;\n            percentWithdraw[msg.sender] = 0;\n        } else {\n            uint payout = payoutAmount();\n            percentWithdraw[msg.sender] = percentWithdraw[msg.sender].add(payout);\n            allPercentWithdraw[msg.sender] = allPercentWithdraw[msg.sender].add(payout);\n            msg.sender.transfer(payout);\n            emit Withdraw(msg.sender, payout);\n        }\n    }\n\n    function percentRate() public view returns(uint) {\n        uint contractBalance = address(this).balance;\n\n        if (contractBalance < 1000 ether) {\n            return (60);\n        }\n        if (contractBalance >= 1000 ether && contractBalance < 2500 ether) {\n            return (72);\n        }\n        if (contractBalance >= 2500 ether && contractBalance < 5000 ether) {\n            return (84);\n        }\n        if (contractBalance >= 5000 ether) {\n            return (90);\n        }\n    }\n\n    function payoutAmount() public view returns(uint256) {\n        uint256 percent = percentRate();\n        uint256 different = now.sub(time[msg.sender]).div(stepTime);\n        uint256 rate = balance[msg.sender].mul(percent).div(1000);\n        uint256 withdrawalAmount = rate.mul(different).div(24).sub(percentWithdraw[msg.sender]);\n\n        return withdrawalAmount;\n    }\n\n    function deposit() private {\n        if (msg.value > 0) {\n            if (balance[msg.sender] == 0) {\n                countOfInvestors += 1;\n            }\n            if (balance[msg.sender] > 0 && now > time[msg.sender].add(stepTime)) {\n                collectPercent();\n                percentWithdraw[msg.sender] = 0;\n            }\n            balance[msg.sender] = balance[msg.sender].add(msg.value);\n            time[msg.sender] = now;\n\n            ownerAddress.transfer(msg.value.mul(projectPercent).div(100));\n            emit Invest(msg.sender, msg.value);\n        } else {\n            collectPercent();\n        }\n    }\n\n    function() external payable {\n        deposit();\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}",
  "bytecode": "6080604052610e10600455600060055573c24ddffaaceb94f48d2771fe47b85b49818204be600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60075534801561007557600080fd5b50610e77806100856000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634883c329146100a35780636b46c8c3146100fa5780637960eff8146101255780637c67a3e21461017c5780638090114f146101d35780638f84aa09146101fe578063e3d670d714610255578063f3f7d633146102ac578063f488fdd0146102d7575b6100a1610302565b005b3480156100af57600080fd5b506100e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610639565b6040518082815260200191505060405180910390f35b34801561010657600080fd5b5061010f610651565b6040518082815260200191505060405180910390f35b34801561013157600080fd5b50610166600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107b5565b6040518082815260200191505060405180910390f35b34801561018857600080fd5b506101bd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107cd565b6040518082815260200191505060405180910390f35b3480156101df57600080fd5b506101e86107e5565b6040518082815260200191505060405180910390f35b34801561020a57600080fd5b5061021361089c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561026157600080fd5b50610296600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108c2565b6040518082815260200191505060405180910390f35b3480156102b857600080fd5b506102c16108da565b6040518082815260200191505060405180910390f35b3480156102e357600080fd5b506102ec6108e0565b6040518082815260200191505060405180910390f35b600034111561062e5760008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156103645760016005600082825401925050819055505b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541180156104045750610401600454600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108e690919063ffffffff16565b42115b1561045757610411610904565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6104a8346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108e690919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc610592606461058460075434610ddc90919063ffffffff16565b610e1790919063ffffffff16565b9081150290604051600060405180830381858888f193505050501580156105bd573d6000803e3d6000fd5b507fd90d253a9de34d2fdd5a75ae49ea17fcb43af32fc8ea08cc6d2341991dd3872e3334604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1610637565b610636610904565b5b565b60036020528060005260406000206000915090505481565b60008060008060006106616107e5565b93506106c96004546106bb600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442610e3290919063ffffffff16565b610e1790919063ffffffff16565b92506107306103e8610722866000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ddc90919063ffffffff16565b610e1790919063ffffffff16565b91506107a9600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461079b601861078d8787610ddc90919063ffffffff16565b610e1790919063ffffffff16565b610e3290919063ffffffff16565b90508094505050505090565b60026020528060005260406000206000915090505481565b60016020528060005260406000206000915090505481565b6000803073ffffffffffffffffffffffffffffffffffffffff16319050683635c9adc5dea0000081101561081c57603c9150610898565b683635c9adc5dea00000811015801561083d575068878678326eac90000081105b1561084b5760489150610898565b68878678326eac900000811015801561086d575069010f0cf064dd5920000081105b1561087b5760549150610898565b69010f0cf064dd592000008110151561089757605a9150610898565b5b5090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b60055481565b60045481565b60008082840190508381101515156108fa57fe5b8091505092915050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f41646472657373206e6f7420666f756e6400000000000000000000000000000081525060200191505060405180910390fd5b610a0f600454600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108e690919063ffffffff16565b4210151515610a86576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f546f6f2066617374207061796f7574207265717565737400000000000000000081525060200191505060405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b1860026000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ddc90919063ffffffff16565b111515610bf25760008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610dd9565b610bfa610651565b9050610c4e81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108e690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ce381600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108e690919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d6c573d6000803e3d6000fd5b507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643382604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15b50565b6000806000841415610df15760009150610e10565b8284029050828482811515610e0257fe5b04141515610e0c57fe5b8091505b5092915050565b6000808284811515610e2557fe5b0490508091505092915050565b6000828211151515610e4057fe5b8183039050929150505600a165627a7a72305820b84d805832fe2821a8686948bb4ec74d3870eb6257af163fb4fe51ad42b469dc0029"
}