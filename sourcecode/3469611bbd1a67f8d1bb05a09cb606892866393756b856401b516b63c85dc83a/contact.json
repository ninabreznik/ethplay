{
  "address": "0xdbc5d9311b13b12f718d0bca36a91cf50a4dbe57",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "e2pAirEscrow",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-17\n*/\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\n\ncontract Ownable {\n  address public owner;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n}\n\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n\n/**\n * @title Stoppable\n * @dev Base contract which allows children to implement final irreversible stop mechanism.\n */\ncontract Stoppable is Pausable {\n  event Stop();\n\n  bool public stopped = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not stopped.\n   */\n  modifier whenNotStopped() {\n    require(!stopped);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is stopped.\n   */\n  modifier whenStopped() {\n    require(stopped);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function stop() public onlyOwner whenNotStopped {\n    stopped = true;\n    emit Stop();\n  }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n\n/**\n * @title e2pAir Escrow Contract\n * @dev Contract sends tokens from airdropper's account to receiver on claim.\n * \n * When deploying contract, airdroper provides airdrop parametrs: token, amount \n * of tokens and amount of eth should be claimed per link and  airdrop transit \n * address and deposits ether needed for the airdrop.\n * \n * Airdrop transit address is used to verify that links are signed by airdropper. \n * \n * Airdropper generates claim links. Each link contains a private key \n * signed by the airdrop transit private key. The link private key can be used \n * once to sign receiver's address. Receiver provides signature\n * to the Relayer Server, which calls smart contract to withdraw tokens. \n * \n * On claim smart contract verifies, that receiver provided address signed \n * by a link private key. \n * If everything is correct smart contract sends tokens and ether to receiver.\n * \n * Anytime airdropper can get back unclaimed ether using getEtherBack method.\n * \n */\ncontract e2pAirEscrow is Stoppable {\n  \n  address public TOKEN_ADDRESS; // token to distribute\n  uint public CLAIM_AMOUNT; // tokens claimed per link\n  uint public REFERRAL_AMOUNT; // referral reward\n\n  uint public CLAIM_AMOUNT_ETH; // ether claimed per link\n  address public AIRDROPPER; // airdropper address, which has tokens to distribute\n  address public AIRDROP_TRANSIT_ADDRESS; // special address, used on claim to verify \n                                          // that links signed by the airdropper\n  \n\n  // Mappings of transit address => true if link is used.                                                                                                                                \n  mapping (address => bool) usedTransitAddresses;\n  \n// withdraw event\nevent LogWithdraw(\n    address transitAddress, // link ID\n    address receiver,\n    uint timestamp\n  );\n\n   /**\n   * @dev Contructor that sets airdrop params and receives ether needed for the \n   * airdrop. \n   * @param _tokenAddress address Token address to distribute\n   * @param _claimAmount uint tokens (in atomic values) claimed per link\n   * @param _claimAmountEth uint ether (in wei) claimed per link\n   * @param _airdropTransitAddress special address, used on claim to verify that links signed by airdropper\n   */\n  constructor(address _tokenAddress,\n              uint _claimAmount, \n              uint  _referralAmount, \n              uint _claimAmountEth,\n              address _airdropTransitAddress) public payable {\n    AIRDROPPER = msg.sender;\n    TOKEN_ADDRESS = _tokenAddress;\n    CLAIM_AMOUNT = _claimAmount;\n    REFERRAL_AMOUNT = _referralAmount;\n    CLAIM_AMOUNT_ETH = _claimAmountEth;\n    AIRDROP_TRANSIT_ADDRESS = _airdropTransitAddress;\n  }\n\n   /**\n   * @dev Verify that address is signed with needed private key.\n   * @param _transitAddress transit address assigned to transfer\n   * @param _addressSigned address Signed address.\n   * @param _v ECDSA signature parameter v.\n   * @param _r ECDSA signature parameters r.\n   * @param _s ECDSA signature parameters s.\n   * @return True if signature is correct.\n   */\n  function verifyLinkPrivateKey(\n\t\t\t   address _transitAddress,\n\t\t\t   address _addressSigned,\n\t\t\t   address _referralAddress,\n\t\t\t   uint8 _v,\n\t\t\t   bytes32 _r,\n\t\t\t   bytes32 _s)\n    public pure returns(bool success) {\n    bytes32 prefixedHash = keccak256(\"\\x19Ethereum Signed Message:\\n32\", _addressSigned, _referralAddress);\n    address retAddr = ecrecover(prefixedHash, _v, _r, _s);\n    return retAddr == _transitAddress;\n  }\n  \n  \n   /**\n   * @dev Verify that address is signed with needed private key.\n   * @param _transitAddress transit address assigned to transfer\n   * @param _addressSigned address Signed address.\n   * @param _v ECDSA signature parameter v.\n   * @param _r ECDSA signature parameters r.\n   * @param _s ECDSA signature parameters s.\n   * @return True if signature is correct.\n   */\n  function verifyReceiverAddress(\n\t\t\t   address _transitAddress,\n\t\t\t   address _addressSigned,\n\t\t\t   uint8 _v,\n\t\t\t   bytes32 _r,\n\t\t\t   bytes32 _s)\n    public pure returns(bool success) {\n    bytes32 prefixedHash = keccak256(\"\\x19Ethereum Signed Message:\\n32\", _addressSigned);\n    address retAddr = ecrecover(prefixedHash, _v, _r, _s);\n    return retAddr == _transitAddress;\n  }\n  \n/**\n   * @dev Verify that claim params are correct and the link key wasn't used before.  \n   * @param _recipient address to receive tokens.\n   * @param _transitAddress transit address provided by the airdropper\n   * @param _keyV ECDSA signature parameter v. Signed by the airdrop transit key.\n   * @param _keyR ECDSA signature parameters r. Signed by the airdrop transit key.\n   * @param _keyS ECDSA signature parameters s. Signed by the airdrop transit key.\n   * @param _recipientV ECDSA signature parameter v. Signed by the link key.\n   * @param _recipientR ECDSA signature parameters r. Signed by the link key.\n   * @param _recipientS ECDSA signature parameters s. Signed by the link key.\n   * @return True if claim params are correct. \n   */\n  function checkWithdrawal(\n            address _recipient, \n            address _referralAddress, \n\t\t    address _transitAddress,\n\t\t    uint8 _keyV, \n\t\t    bytes32 _keyR,\n\t\t\tbytes32 _keyS,\n\t\t\tuint8 _recipientV, \n\t\t    bytes32 _recipientR,\n\t\t\tbytes32 _recipientS) \n    public view returns(bool success) {\n    \n        // verify that link wasn't used before  \n        require(usedTransitAddresses[_transitAddress] == false);\n\n        // verifying that key is legit and signed by AIRDROP_TRANSIT_ADDRESS's key\n        require(verifyLinkPrivateKey(AIRDROP_TRANSIT_ADDRESS, _transitAddress, _referralAddress, _keyV, _keyR, _keyS));\n    \n        // verifying that recepients address signed correctly\n        require(verifyReceiverAddress(_transitAddress, _recipient, _recipientV, _recipientR, _recipientS));\n        \n        // verifying that there is enough ether to make transfer\n        require(address(this).balance >= CLAIM_AMOUNT_ETH);\n        \n        return true;\n  }\n  \n  /**\n   * @dev Withdraw tokens to receiver address if withdraw params are correct.\n   * @param _recipient address to receive tokens.\n   * @param _transitAddress transit address provided to receiver by the airdropper\n   * @param _keyV ECDSA signature parameter v. Signed by the airdrop transit key.\n   * @param _keyR ECDSA signature parameters r. Signed by the airdrop transit key.\n   * @param _keyS ECDSA signature parameters s. Signed by the airdrop transit key.\n   * @param _recipientV ECDSA signature parameter v. Signed by the link key.\n   * @param _recipientR ECDSA signature parameters r. Signed by the link key.\n   * @param _recipientS ECDSA signature parameters s. Signed by the link key.\n   * @return True if tokens (and ether) were successfully sent to receiver.\n   */\n  function withdraw(\n\t\t    address _recipient, \n\t\t    address _referralAddress, \n\t\t    address _transitAddress,\n\t\t    uint8 _keyV, \n\t\t    bytes32 _keyR,\n\t\t\tbytes32 _keyS,\n\t\t\tuint8 _recipientV, \n\t\t    bytes32 _recipientR,\n\t\t\tbytes32 _recipientS\n\t\t    )\n    public\n    whenNotPaused\n    whenNotStopped\n    returns (bool success) {\n    \n    require(checkWithdrawal(_recipient, \n    \t\t_referralAddress,\n\t\t    _transitAddress,\n\t\t    _keyV, \n\t\t    _keyR,\n\t\t\t_keyS,\n\t\t\t_recipientV, \n\t\t    _recipientR,\n\t\t\t_recipientS));\n        \n\n    // save to state that address was used\n    usedTransitAddresses[_transitAddress] = true;\n\n    // send tokens\n    if (CLAIM_AMOUNT > 0 && TOKEN_ADDRESS != 0x0000000000000000000000000000000000000000) {\n        StandardToken token = StandardToken(TOKEN_ADDRESS);\n        token.transferFrom(AIRDROPPER, _recipient, CLAIM_AMOUNT);\n    }\n    \n    // send tokens to the address who refferred the airdrop \n    if (REFERRAL_AMOUNT > 0 && _referralAddress != 0x0000000000000000000000000000000000000000) {\n        token.transferFrom(AIRDROPPER, _referralAddress, REFERRAL_AMOUNT);\n    }\n\n    \n    // send ether (if needed)\n    if (CLAIM_AMOUNT_ETH > 0) {\n        _recipient.transfer(CLAIM_AMOUNT_ETH);\n    }\n    \n    // Log Withdrawal\n    emit LogWithdraw(_transitAddress, _recipient, now);\n    \n    return true;\n  }\n\n /**\n   * @dev Get boolean if link is already claimed. \n   * @param _transitAddress transit address provided to receiver by the airdropper\n   * @return True if the transit address was already used. \n   */\n  function isLinkClaimed(address _transitAddress) \n    public view returns (bool claimed) {\n        return usedTransitAddresses[_transitAddress];\n  }\n\n   /**\n   * @dev Withdraw ether back deposited to the smart contract.  \n   * @return True if ether was withdrawn. \n   */\n  function getEtherBack() public returns (bool success) { \n    require(msg.sender == AIRDROPPER);\n      \n    AIRDROPPER.transfer(address(this).balance);\n      \n    return true;\n  }\n}",
  "bytecode": "608060405260008060146101000a81548160ff02191690831515021790555060008060156101000a81548160ff02191690831515021790555060405160a0806116118339810180604052810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600281905550826003819055508160048190555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050611463806101ae6000396000f3006080604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806307da68f5146101015780630bdf5300146101185780630c82ed841461016f578063270ef38514610233578063368a5e341461025e5780633d8d020a146102b55780633f4ba83a146103a25780635c975abb146103b9578063611f1931146103e857806375f12b21146104135780638456cb59146104425780638da5cb5b14610459578063998ac104146104b0578063b2e357b414610507578063c90c205b14610562578063cd26ac831461058d578063df5f53f114610631578063fd68610f1461071e575b600080fd5b34801561010d57600080fd5b5061011661074d565b005b34801561012457600080fd5b5061012d61080d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561017b57600080fd5b50610219600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050610833565b604051808215151515815260200191505060405180910390f35b34801561023f57600080fd5b506102486109b6565b6040518082815260200191505060405180910390f35b34801561026a57600080fd5b506102736109bc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c157600080fd5b50610388600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190803560ff169060200190929190803560001916906020019092919080356000191690602001909291905050506109e2565b604051808215151515815260200191505060405180910390f35b3480156103ae57600080fd5b506103b7610ed6565b005b3480156103c557600080fd5b506103ce610f94565b604051808215151515815260200191505060405180910390f35b3480156103f457600080fd5b506103fd610fa7565b6040518082815260200191505060405180910390f35b34801561041f57600080fd5b50610428610fad565b604051808215151515815260200191505060405180910390f35b34801561044e57600080fd5b50610457610fc0565b005b34801561046557600080fd5b5061046e611080565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104bc57600080fd5b506104c56110a5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561051357600080fd5b50610548600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110cb565b604051808215151515815260200191505060405180910390f35b34801561056e57600080fd5b50610577611121565b6040518082815260200191505060405180910390f35b34801561059957600080fd5b50610617600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050611127565b604051808215151515815260200191505060405180910390f35b34801561063d57600080fd5b50610704600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190803560ff16906020019092919080356000191690602001909291908035600019169060200190929190505050611266565b604051808215151515815260200191505060405180910390f35b34801561072a57600080fd5b50610733611352565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107a857600080fd5b600060159054906101000a900460ff161515156107c457600080fd5b6001600060156101000a81548160ff0219169083151502179055507fbedf0f4abfe86d4ffad593d9607fe70e83ea706033d44d24b3b6283cf3fc4f6b60405160405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000878760405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019250505060405180910390209150600182878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af115801561096d573d6000803e3d6000fd5b5050506020604051035190508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614925050509695505050505050565b60025481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600060149054906101000a900460ff16151515610a0157600080fd5b600060159054906101000a900460ff16151515610a1d57600080fd5b610a2e8b8b8b8b8b8b8b8b8b611266565b1515610a3957600080fd5b6001600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600254118015610af25750600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15610c5457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168d6002546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610c1757600080fd5b505af1158015610c2b573d6000803e3d6000fd5b505050506040513d6020811015610c4157600080fd5b8101908080519060200190929190505050505b6000600354118015610c935750600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614155b15610dd0578073ffffffffffffffffffffffffffffffffffffffff166323b872dd600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168c6003546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015610d9357600080fd5b505af1158015610da7573d6000803e3d6000fd5b505050506040513d6020811015610dbd57600080fd5b8101908080519060200190929190505050505b60006004541115610e25578a73ffffffffffffffffffffffffffffffffffffffff166108fc6004549081150290604051600060405180830381858888f19350505050158015610e23573d6000803e3d6000fd5b505b7f9207361cc2a04b9c7a06691df1eb87c6a63957ae88bf01d0d18c81e3d1272099898c42604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a160019150509998505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f3157600080fd5b600060149054906101000a900460ff161515610f4c57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600060149054906101000a900460ff1681565b60035481565b600060159054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561101b57600080fd5b600060149054906101000a900460ff1615151561103757600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60045481565b60008060008660405180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390209150600182878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af115801561121e573d6000803e3d6000fd5b5050506020604051035190508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149250505095945050505050565b6000801515600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156112c657600080fd5b6112f6600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16898b8a8a8a610833565b151561130157600080fd5b61130e888b868686611127565b151561131957600080fd5b6004543073ffffffffffffffffffffffffffffffffffffffff16311015151561134157600080fd5b600190509998505050505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113b057600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015801561142f573d6000803e3d6000fd5b5060019050905600a165627a7a72305820f0fea2675527e4efccbf62fd8de96e747c14073ee8b901064cf2c6fe7e2747430029000000000000000000000000a3b5fdeb5dbc592ffc5e222223376464b9c56fb80000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008fe9cd5a43598701dd8dcbf599b6dab2d5416760",
  "constructorArguments": "000000000000000000000000a3b5fdeb5dbc592ffc5e222223376464b9c56fb80000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008fe9cd5a43598701dd8dcbf599b6dab2d5416760"
}