{
  "address": "0xc76378c467c819d93ddad8b474e3338bcd74baee",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PublicResolver",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\n// File: contracts/ens/AbstractENS.sol\n\npragma solidity ^0.5.0;\n\ncontract AbstractENS {\n    function owner(bytes32 _node) public view returns(address);\n    function resolver(bytes32 _node) public view returns(address);\n    function ttl(bytes32 _node) public view returns(uint64);\n    function setOwner(bytes32 _node, address _owner) public;\n    function setSubnodeOwner(bytes32 _node, bytes32 _label, address _owner) public;\n    function setResolver(bytes32 _node, address _resolver) public;\n    function setTTL(bytes32 _node, uint64 _ttl) public;\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n}\n\n// File: contracts/ens/PublicResolver.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * A simple resolver anyone can use; only allows the owner of a node to set its\n * address.\n */\ncontract PublicResolver {\n    AbstractENS ens;\n    mapping(bytes32=>address) addresses;\n    mapping(bytes32=>bytes32) hashes;\n\n    modifier only_owner(bytes32 _node) {\n        require(ens.owner(_node) == msg.sender);\n        _;\n    }\n\n    /**\n     * Constructor.\n     * @param _ensAddr The ENS registrar contract.\n     */\n    constructor(AbstractENS _ensAddr) public {\n        ens = _ensAddr;\n    }\n\n    /**\n     * Returns true if the specified node has the specified record type.\n     * @param _node The ENS node to query.\n     * @param _kind The record type name, as specified in EIP137.\n     * @return True if this resolver has a record of the provided type on the\n     *         provided node.\n     */\n    function has(bytes32 _node, bytes32 _kind) public view returns (bool) {\n        return (_kind == \"addr\" && addresses[_node] != address(0)) || (_kind == \"hash\" && hashes[_node] != 0);\n    }\n\n    /**\n     * Returns true if the resolver implements the interface specified by the provided hash.\n     * @param _interfaceID The ID of the interface to check for.\n     * @return True if the contract implements the requested interface.\n     */\n    function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n        return _interfaceID == 0x3b3b57de || _interfaceID == 0xd8389dc5;\n    }\n\n    /**\n     * Returns the address associated with an ENS node.\n     * @param _node The ENS node to query.\n     * @return The associated address.\n     */\n    function addr(bytes32 _node) public view returns (address ret) {\n        ret = addresses[_node];\n    }\n\n    /**\n     * Sets the address associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * @param _node The node to update.\n     * @param _addr The address to set.\n     */\n    function setAddr(bytes32 _node, address _addr) public only_owner(_node) {\n        addresses[_node] = _addr;\n    }\n\n    /**\n     * Returns the content hash associated with an ENS node.\n     * Note that this resource type is not standardized, and will likely change\n     * in future to a resource type based on multihash.\n     * @param _node The ENS node to query.\n     * @return The associated content hash.\n     */\n    function content(bytes32 _node) public view returns (bytes32 ret) {\n        ret = hashes[_node];\n    }\n\n    /**\n     * Sets the content hash associated with an ENS node.\n     * May only be called by the owner of that node in the ENS registry.\n     * Note that this resource type is not standardized, and will likely change\n     * in future to a resource type based on multihash.\n     * @param _node The node to update.\n     * @param _hash The content hash to set\n     */\n    function setContent(bytes32 _node, bytes32 _hash) public only_owner(_node) {\n        hashes[_node] = _hash;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"content\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"name\":\"ret\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_kind\",\"type\":\"bytes32\"}],\"name\":\"has\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ensAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]",
  "bytecode": "608060405234801561001057600080fd5b506040516020806104408339810180604052602081101561003057600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556103de806100626000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806301ffc9a7146100675780632dff6941146100a25780633b3b57de146100d157806341b9dc2b1461010a578063c3d014d61461012d578063d5fa2b0014610152575b600080fd5b61008e6004803603602081101561007d57600080fd5b50356001600160e01b03191661017e565b604080519115158252519081900360200190f35b6100bf600480360360208110156100b857600080fd5b50356101bb565b60408051918252519081900360200190f35b6100ee600480360360208110156100e757600080fd5b50356101cd565b604080516001600160a01b039092168252519081900360200190f35b61008e6004803603604081101561012057600080fd5b50803590602001356101e8565b6101506004803603604081101561014357600080fd5b508035906020013561024c565b005b6101506004803603604081101561016857600080fd5b50803590602001356001600160a01b03166102f1565b6000600160e11b631d9dabef026001600160e01b0319831614806101b55750600160e01b63d8389dc5026001600160e01b03198316145b92915050565b60009081526002602052604090205490565b6000908152600160205260409020546001600160a01b031690565b600081600160e11b6330b232390214801561021957506000838152600160205260409020546001600160a01b031615155b80610245575081600160e31b630d0c2e6d02148015610245575060008381526002602052604090205415155b9392505050565b60005460408051600160e01b6302571be3028152600481018590529051849233926001600160a01b03909116916302571be391602480820192602092909190829003018186803b15801561029f57600080fd5b505afa1580156102b3573d6000803e3d6000fd5b505050506040513d60208110156102c957600080fd5b50516001600160a01b0316146102de57600080fd5b5060009182526002602052604090912055565b60005460408051600160e01b6302571be3028152600481018590529051849233926001600160a01b03909116916302571be391602480820192602092909190829003018186803b15801561034457600080fd5b505afa158015610358573d6000803e3d6000fd5b505050506040513d602081101561036e57600080fd5b50516001600160a01b03161461038357600080fd5b5060009182526001602052604090912080546001600160a01b0319166001600160a01b0390921691909117905556fea165627a7a723058203c3e383e560d04b8cb1eeb22fb7ef32b3b6b5aafdd284e48ce9d3a19fa07695a0029000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b",
  "constructorArguments": "000000000000000000000000314159265dd8dbb310642f98f50c066173c1259b"
}