{
  "address": "0x70052a651eec65f98925e845820a0aa5749b033d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ATxBuyback",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-11-30\n*/\n\npragma solidity ^0.4.18;\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/// @title ServiceAllowance.\n///\n/// Provides a way to delegate operation allowance decision to a service contract\ncontract ServiceAllowance {\n    function isTransferAllowed(address _from, address _to, address _sender, address _token, uint _value) public view returns (bool);\n}\n\ncontract ATxPlatformInterface {\n    mapping(bytes32 => address) public proxies;\n    function name(bytes32 _symbol) public view returns (string);\n    function setProxy(address _address, bytes32 _symbol) public returns (uint errorCode);\n    function isOwner(address _owner, bytes32 _symbol) public view returns (bool);\n    function totalSupply(bytes32 _symbol) public view returns (uint);\n    function balanceOf(address _holder, bytes32 _symbol) public view returns (uint);\n    function allowance(address _from, address _spender, bytes32 _symbol) public view returns (uint);\n    function baseUnit(bytes32 _symbol) public view returns (uint8);\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns (uint errorCode);\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns (uint errorCode);\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) public returns (uint errorCode);\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) public returns (uint errorCode);\n    function reissueAsset(bytes32 _symbol, uint _value) public returns (uint errorCode);\n    function revokeAsset(bytes32 _symbol, uint _value) public returns (uint errorCode);\n    function isReissuable(bytes32 _symbol) public view returns (bool);\n    function changeOwnership(bytes32 _symbol, address _newOwner) public returns (uint errorCode);\n}\n\n/**\n * @title Owned contract with safe ownership pass.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract Owned {\n    /**\n     * Contract owner address\n     */\n    address public contractOwner;\n\n    /**\n     * Contract owner address\n     */\n    address public pendingContractOwner;\n\n    function Owned() {\n        contractOwner = msg.sender;\n    }\n\n    /**\n    * @dev Owner check modifier\n    */\n    modifier onlyContractOwner() {\n        if (contractOwner == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * @dev Destroy contract and scrub a data\n     * @notice Only owner can call it\n     */\n    function destroy() onlyContractOwner {\n        suicide(msg.sender);\n    }\n\n    /**\n     * Prepares ownership pass.\n     *\n     * Can only be called by current owner.\n     *\n     * @param _to address of the next owner. 0x0 is not allowed.\n     *\n     * @return success.\n     */\n    function changeContractOwnership(address _to) onlyContractOwner() returns(bool) {\n        if (_to  == 0x0) {\n            return false;\n        }\n\n        pendingContractOwner = _to;\n        return true;\n    }\n\n    /**\n     * Finalize ownership pass.\n     *\n     * Can only be called by pending owner.\n     *\n     * @return success.\n     */\n    function claimContractOwnership() returns(bool) {\n        if (pendingContractOwner != msg.sender) {\n            return false;\n        }\n\n        contractOwner = pendingContractOwner;\n        delete pendingContractOwner;\n\n        return true;\n    }\n}\n\ncontract ERC20Interface {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed spender, uint256 value);\n    string public symbol;\n\n    function totalSupply() constant returns (uint256 supply);\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n}\n\n/**\n * @title Generic owned destroyable contract\n */\ncontract Object is Owned {\n    /**\n    *  Common result code. Means everything is fine.\n    */\n    uint constant OK = 1;\n    uint constant OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER = 8;\n\n    function withdrawnTokens(address[] tokens, address _to) onlyContractOwner returns(uint) {\n        for(uint i=0;i<tokens.length;i++) {\n            address token = tokens[i];\n            uint balance = ERC20Interface(token).balanceOf(this);\n            if(balance != 0)\n                ERC20Interface(token).transfer(_to,balance);\n        }\n        return OK;\n    }\n\n    function checkOnlyContractOwner() internal constant returns(uint) {\n        if (contractOwner == msg.sender) {\n            return OK;\n        }\n\n        return OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER;\n    }\n}\n\n/// @title Provides possibility manage holders? country limits and limits for holders.\ncontract DataControllerInterface {\n\n    /// @notice Checks user is holder.\n    /// @param _address - checking address.\n    /// @return `true` if _address is registered holder, `false` otherwise.\n    function isHolderAddress(address _address) public view returns (bool);\n\n    function allowance(address _user) public view returns (uint);\n\n    function changeAllowance(address _holder, uint _value) public returns (uint);\n}\n\n/// @title ServiceController\n///\n/// Base implementation\n/// Serves for managing service instances\ncontract ServiceControllerInterface {\n\n    /// @notice Check target address is service\n    /// @param _address target address\n    /// @return `true` when an address is a service, `false` otherwise\n    function isService(address _address) public view returns (bool);\n}\n\ncontract ATxAssetInterface {\n\n    DataControllerInterface public dataController;\n    ServiceControllerInterface public serviceController;\n\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) public returns (bool);\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns (bool);\n    function __approve(address _spender, uint _value, address _sender) public returns (bool);\n    function __process(bytes /*_data*/, address /*_sender*/) payable public {\n        revert();\n    }\n}\n\ncontract ERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed from, address indexed spender, uint256 value);\n    string public symbol;\n\n    function totalSupply() constant returns (uint256 supply);\n    function balanceOf(address _owner) constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n    function approve(address _spender, uint256 _value) returns (bool success);\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n}\n\ncontract Platform {\n    mapping(bytes32 => address) public proxies;\n    function name(bytes32 _symbol) public view returns (string);\n    function setProxy(address _address, bytes32 _symbol) public returns (uint errorCode);\n    function isOwner(address _owner, bytes32 _symbol) public view returns (bool);\n    function totalSupply(bytes32 _symbol) public view returns (uint);\n    function balanceOf(address _holder, bytes32 _symbol) public view returns (uint);\n    function allowance(address _from, address _spender, bytes32 _symbol) public view returns (uint);\n    function baseUnit(bytes32 _symbol) public view returns (uint8);\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns (uint errorCode);\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns (uint errorCode);\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) public returns (uint errorCode);\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) public returns (uint errorCode);\n    function reissueAsset(bytes32 _symbol, uint _value) public returns (uint errorCode);\n    function revokeAsset(bytes32 _symbol, uint _value) public returns (uint errorCode);\n    function isReissuable(bytes32 _symbol) public view returns (bool);\n    function changeOwnership(bytes32 _symbol, address _newOwner) public returns (uint errorCode);\n}\n\ncontract ATxAssetProxy is ERC20, Object, ServiceAllowance {\n\n    using SafeMath for uint;\n\n    /**\n     * Indicates an upgrade freeze-time start, and the next asset implementation contract.\n     */\n    event UpgradeProposal(address newVersion);\n\n    // Current asset implementation contract address.\n    address latestVersion;\n\n    // Assigned platform, immutable.\n    Platform public platform;\n\n    // Assigned symbol, immutable.\n    bytes32 public smbl;\n\n    // Assigned name, immutable.\n    string public name;\n\n    /**\n     * Only platform is allowed to call.\n     */\n    modifier onlyPlatform() {\n        if (msg.sender == address(platform)) {\n            _;\n        }\n    }\n\n    /**\n     * Only current asset owner is allowed to call.\n     */\n    modifier onlyAssetOwner() {\n        if (platform.isOwner(msg.sender, smbl)) {\n            _;\n        }\n    }\n\n    /**\n     * Only asset implementation contract assigned to sender is allowed to call.\n     */\n    modifier onlyAccess(address _sender) {\n        if (getLatestVersion() == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * Resolves asset implementation contract for the caller and forwards there transaction data,\n     * along with the value. This allows for proxy interface growth.\n     */\n    function() public payable {\n        _getAsset().__process.value(msg.value)(msg.data, msg.sender);\n    }\n\n    /**\n     * Sets platform address, assigns symbol and name.\n     *\n     * Can be set only once.\n     *\n     * @param _platform platform contract address.\n     * @param _symbol assigned symbol.\n     * @param _name assigned name.\n     *\n     * @return success.\n     */\n    function init(Platform _platform, string _symbol, string _name) public returns (bool) {\n        if (address(platform) != 0x0) {\n            return false;\n        }\n        platform = _platform;\n        symbol = _symbol;\n        smbl = stringToBytes32(_symbol);\n        name = _name;\n        return true;\n    }\n\n    /**\n     * Returns asset total supply.\n     *\n     * @return asset total supply.\n     */\n    function totalSupply() public view returns (uint) {\n        return platform.totalSupply(smbl);\n    }\n\n    /**\n     * Returns asset balance for a particular holder.\n     *\n     * @param _owner holder address.\n     *\n     * @return holder balance.\n     */\n    function balanceOf(address _owner) public view returns (uint) {\n        return platform.balanceOf(_owner, smbl);\n    }\n\n    /**\n     * Returns asset allowance from one holder to another.\n     *\n     * @param _from holder that allowed spending.\n     * @param _spender holder that is allowed to spend.\n     *\n     * @return holder to spender allowance.\n     */\n    function allowance(address _from, address _spender) public view returns (uint) {\n        return platform.allowance(_from, _spender, smbl);\n    }\n\n    /**\n     * Returns asset decimals.\n     *\n     * @return asset decimals.\n     */\n    function decimals() public view returns (uint8) {\n        return platform.baseUnit(smbl);\n    }\n\n    /**\n     * Transfers asset balance from the caller to specified receiver.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     *\n     * @return success.\n     */\n    function transfer(address _to, uint _value) public returns (bool) {\n        if (_to != 0x0) {\n            return _transferWithReference(_to, _value, \"\");\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Transfers asset balance from the caller to specified receiver adding specified comment.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     *\n     * @return success.\n     */\n    function transferWithReference(address _to, uint _value, string _reference) public returns (bool) {\n        if (_to != 0x0) {\n            return _transferWithReference(_to, _value, _reference);\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Performs transfer call on the platform by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) public onlyAccess(_sender) returns (bool) {\n        return platform.proxyTransferWithReference(_to, _value, smbl, _reference, _sender) == OK;\n    }\n\n    /**\n     * Prforms allowance transfer of asset balance between holders.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     *\n     * @return success.\n     */\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n        if (_to != 0x0) {\n            return _getAsset().__transferFromWithReference(_from, _to, _value, \"\", msg.sender);\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Performs allowance transfer call on the platform by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public onlyAccess(_sender) returns (bool) {\n        return platform.proxyTransferFromWithReference(_from, _to, _value, smbl, _reference, _sender) == OK;\n    }\n\n    /**\n     * Sets asset spending allowance for a specified spender.\n     *\n     * @param _spender holder address to set allowance to.\n     * @param _value amount to allow.\n     *\n     * @return success.\n     */\n    function approve(address _spender, uint _value) public returns (bool) {\n        if (_spender != 0x0) {\n            return _getAsset().__approve(_spender, _value, msg.sender);\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Performs allowance setting call on the platform by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _spender holder address to set allowance to.\n     * @param _value amount to allow.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function __approve(address _spender, uint _value, address _sender) public onlyAccess(_sender) returns (bool) {\n        return platform.proxyApprove(_spender, _value, smbl, _sender) == OK;\n    }\n\n    /**\n     * Emits ERC20 Transfer event on this contract.\n     *\n     * Can only be, and, called by assigned platform when asset transfer happens.\n     */\n    function emitTransfer(address _from, address _to, uint _value) public onlyPlatform() {\n        Transfer(_from, _to, _value);\n    }\n\n    /**\n     * Emits ERC20 Approval event on this contract.\n     *\n     * Can only be, and, called by assigned platform when asset allowance set happens.\n     */\n    function emitApprove(address _from, address _spender, uint _value) public onlyPlatform() {\n        Approval(_from, _spender, _value);\n    }\n\n    /**\n     * Returns current asset implementation contract address.\n     *\n     * @return asset implementation contract address.\n     */\n    function getLatestVersion() public view returns (address) {\n        return latestVersion;\n    }\n\n    /**\n     * Propose next asset implementation contract address.\n     *\n     * Can only be called by current asset owner.\n     *\n     * Note: freeze-time should not be applied for the initial setup.\n     *\n     * @param _newVersion asset implementation contract address.\n     *\n     * @return success.\n     */\n    function proposeUpgrade(address _newVersion) public onlyAssetOwner returns (bool) {\n        // New version address should be other than 0x0.\n        if (_newVersion == 0x0) {\n            return false;\n        }\n        \n        latestVersion = _newVersion;\n\n        UpgradeProposal(_newVersion); \n        return true;\n    }\n\n    function isTransferAllowed(address, address, address, address, uint) public view returns (bool) {\n        return true;\n    }\n\n    /**\n     * Returns asset implementation contract for current caller.\n     *\n     * @return asset implementation contract.\n     */\n    function _getAsset() internal view returns (ATxAssetInterface) {\n        return ATxAssetInterface(getLatestVersion());\n    }\n\n    /**\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\n     * the caller address.\n     *\n     * @return success.\n     */\n    function _transferWithReference(address _to, uint _value, string _reference) internal returns (bool) {\n        return _getAsset().__transferWithReference(_to, _value, _reference, msg.sender);\n    }\n\n    function stringToBytes32(string memory source) private pure returns (bytes32 result) {\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n}\n\ncontract ATxBuybackInterface {\n\n\tevent EtherReceived(uint amount);\n\tevent TokenExchanged(\n\t\taddress recepient, \n\t\taddress token, \n\t\tuint tokenAmount, \n\t\tuint etherAmount, \n\t\tuint feeAmount, \n\t\taddress feeReceiver, \n\t\tuint price\n\t);\n}\n\n/// @title Token Buyback contract.\n/// @notice Plays role of token exchange to Ether.\n/// Has only one token at a contract. To support other tokens\n/// there should be created other ATxBuyback contracts.\ncontract ATxBuyback is Object, ATxBuybackInterface, ServiceAllowance {\n\n\tusing SafeMath for uint;\n\n    struct FeeData {\n        uint feeValue;\n        uint feeDecimals;\n    }\n\n\t/// @dev Redemption fee collector address\n\taddress public rdCollectorAddress;\n\t/// @dev Fee value\n\tFeeData rdFee;\n\n\t/// @dev Token to exchange.\n\tATxAssetProxy public token;\n\t/// @dev Price for 1 token\n\tuint public price;\n\t/// @dev Active flag\n\tbool public active;\n\n\t/// @dev Guards from invocation only when state is active\n\tmodifier onlyActive {\n\t\tif (active) {\n\t\t\t_;\n\t\t}\n\t}\n\n\tfunction ATxBuyback(ATxAssetProxy _token) public {\n\t\trequire(address(_token) != 0x0);\n\t\ttoken = _token;\n\t}\n\n\t/// @notice Sets a price (in wei) for selling one token\n\t/// @param _price \"in wei\" = 1 ATx\n\tfunction setPrice(uint _price) onlyContractOwner external returns (uint) {\n\t\tprice = _price;\n\t\treturn OK;\n\t}\n\n\t/// @notice Sets contract to active/non active state.\n\t/// Should be performed only by contract owner.\n\t/// @param _active next state of contract. True to activate a contract\n\t/// @return result code of an operation\n\tfunction setActive(bool _active) onlyContractOwner external returns (uint) {\n\t\tif (active == _active) {\n\t\t\treturn;\n\t\t}\n\n        active = _active;\n\t\treturn OK;\n\t}\n\n\t/// @notice Setup redemption destination address\n\t/// @param _collectorAddress address where all redemptiom fee will be directed\n\t/// @return result code of an operation\n\tfunction setRdCollectorAddress(address _collectorAddress) onlyContractOwner external returns (uint) {\n\t\trequire(_collectorAddress != 0x0);\n\t\t\n\t\trdCollectorAddress = _collectorAddress;\n\t\treturn OK;\n\t}\n\n\t/// @notice Setup redemption fee value\n\t/// @param _feeValue fee amount; the minimal value is 1\n\t/// @param _feeDecimals fee decimals, sets a precision for fee value\n\t/// @return result code of an operation\n\tfunction setRdFee(uint _feeValue, uint _feeDecimals) onlyContractOwner external returns (uint) {\n\t\trequire(_validFee(_feeValue, _feeDecimals));\n\n\t\trdFee = FeeData(_feeValue, _feeDecimals);\n\t\treturn OK;\n\t}\n\n\t/// @notice Gets redemption fee value\n\t/// @return {\n\t/// \t\"_value\": \"amount of percents\",\n\t///\t\t\"_decimals\": \"percent's precision\"\n\t/// }\n\tfunction getRdFee() public view returns (uint _value, uint _decimals) {\n\t\tFeeData memory _fee = rdFee;\n\t\treturn (_fee.feeValue, _fee.feeDecimals);\n\t}\n\n\t/// @notice Withdraws all Ether from buyback contract to specified address.\n\t/// Allowed only for contract owner.\n\t/// @param _to destination address to send Ether\n\t/// @return result code of an operation\n\tfunction withdrawAllEth(address _to) onlyContractOwner external returns (uint) {\n\t\tuint _balance = address(this).balance;\n\t\tif (_balance == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t_to.transfer(_balance);\n\n\t\treturn OK;\n\t}\n\n\t/// ServiceAllowance\n    ///\n    /// @notice ServiceAllowance interface implementation\n    /// @dev Should cover conditions for allowance of transfers\n    function isTransferAllowed(address, address _to, address, address _token, uint) onlyActive public view returns (bool) {\n        if (_token == address(token) && _to == address(this)) {\n            return true;\n        }\n    }\n\n\t/// @notice Fallback function for ERC223 standard.\n\t/// Allowed to work only in active state.\n\t/// @param _sender original sender of token transfer\n\t/// @param _value amount of tokens that has been sent\n\tfunction tokenFallback(address _sender, uint _value, bytes) external {\n\t\t/// Don't allow to transfer and exchange tokens when Buyback contract\n\t\t/// is not in 'active' state\n\t\tif (!active) {\n\t\t\trevert();\n\t\t}\n\t\t\n\t\t/// This call should be produced by AssetProxy's backend - an Asset contract.\n\t\t/// Any other call will be followed by revert()\n\t\tATxAssetProxy _token = token;\n\t\tif (msg.sender != _token.getLatestVersion()) {\n\t\t\trevert();\n\t\t}\n\n\t\t/// Need to check available ETH balance in order to fulfill holder's request\n\t\t/// about exchanging ATx Token to ETH equivalent\n\t\tuint _etherToExchange = _value.mul(price) / (10 ** uint(_token.decimals()));\n\t\tif (this.balance < _etherToExchange) {\n\t\t\trevert();\n\t\t}\n\n\t\t/// To prevent double spending we revoke transferred assets from foundation platform,\n\t\tATxPlatformInterface _platform = ATxPlatformInterface(address(_token.platform()));\n\t\trequire(OK == _platform.revokeAsset(_token.smbl(), _value));\n\n\t\t/// Take redemption fee and return left amount of Ether to transfer it to a holder\n\t\tuint _restEther = _takeRdFee(_etherToExchange);\n\t\t/// Transfer the rest to holder's account\n\t\t_sender.transfer(_restEther);\n\n\t\t/// Voila! Just emit the event to say to the world that one more exchange action was finished\n\t\tTokenExchanged(_sender, _token, _value, _restEther, _etherToExchange.sub(_restEther), rdCollectorAddress, price);\n\t}\n\n\t/// @notice Accepts Ether and emits EtherReceived event\n\tfunction() payable external {\n\t\tif (msg.value > 0) {\n\t\t\tEtherReceived(msg.value);\n\t\t}\n\t}\n\n\t/* Internal */\n\n\tfunction _takeRdFee(uint _fromValue) private returns (uint _restValue) {\n\t\t/// Here we check if redemption fee was setup after the contract initialization\n\t\tFeeData memory _fee = rdFee;\n\t\trequire(_validFee(_fee.feeValue, _fee.feeDecimals));\n\n\t\t/// Calculate amount of redemption fee that we have to take from the whole sum\n\t\tuint _rdFeeEther;\n\t\t_rdFeeEther = _fromValue.mul(_fee.feeValue).div(10 ** _fee.feeDecimals);\n\t\t_restValue = _fromValue.sub(_rdFeeEther);\n\n\t\t/// At first use method collector.transfer() to ensure that if this move is not possible\n\t\t/// then revert all changes\n\t\taddress _rdCollectorAddress = rdCollectorAddress;\n\t\trequire(_rdCollectorAddress != 0x0);\n\t\t_rdCollectorAddress.transfer(_rdFeeEther);\n\t}\n\n\tfunction _validFee(uint _value, uint _decimals) private pure returns (bool) {\n        return _value != 0 && _value / 10 ** _decimals.sub(1) >= 0 && _value / 10 ** _decimals.sub(1) < 10;\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b604051602080610db58339810160405280805160008054600160a060020a03191633600160a060020a039081169190911790915590925082161515905061005557600080fd5b60058054600160a060020a031916600160a060020a0392909216919091179055610d31806100846000396000f3006060604052600436106100e25763ffffffff60e060020a60003504166302fb0c5e811461012157806308ee33af146101485780634592cd1d14610173578063557f4bc9146101865780635aa77d3c146101a557806375ace438146101d457806383197ef01461020557806391b7f5ed14610218578063a035b1fe1461022e578063acec338a14610241578063c03bdbae14610259578063c0ee0b8a14610272578063c270ce28146102a1578063c32ee591146102b4578063ce606ee0146102e8578063d46d79bb146102fb578063d8f9659b1461031a578063fc0c546a14610374575b600034111561011f577f0a34e3d4f1e6b837dbce1011b61499fa1a483a0abee6a7a6697660b4b2d971323460405190815260200160405180910390a15b005b341561012c57600080fd5b610134610387565b604051901515815260200160405180910390f35b341561015357600080fd5b61015b610390565b60405191825260208201526040908101905180910390f35b341561017e57600080fd5b6101346103c8565b341561019157600080fd5b610134600160a060020a0360043516610420565b34156101b057600080fd5b6101b861047f565b604051600160a060020a03909116815260200160405180910390f35b34156101df57600080fd5b6101f3600160a060020a036004351661048e565b60405190815260200160405180910390f35b341561021057600080fd5b61011f6104ed565b341561022357600080fd5b6101f3600435610512565b341561023957600080fd5b6101f3610533565b341561024c57600080fd5b6101f36004351515610539565b341561026457600080fd5b6101f360043560243561057e565b341561027d57600080fd5b61011f60048035600160a060020a03169060248035916044359182019101356105da565b34156102ac57600080fd5b6101b861092f565b34156102bf57600080fd5b610134600160a060020a036004358116906024358116906044358116906064351660843561093e565b34156102f357600080fd5b6101b861098c565b341561030657600080fd5b6101f3600160a060020a036004351661099b565b341561032557600080fd5b6101f3600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965050509235600160a060020a03169250610a0d915050565b341561037f57600080fd5b6101b8610b5c565b60075460ff1681565b60008061039b610cee565b60036040805190810160405281548152600190910154602082015290508051816020015192509250509091565b60015460009033600160a060020a039081169116146103e95750600061041d565b50600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038416179091551681555b90565b6000805433600160a060020a039081169116141561047a57600160a060020a03821615156104505750600061047a565b506001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161781555b919050565b600154600160a060020a031681565b6000805433600160a060020a039081169116141561047a57600160a060020a03821615156104bb57600080fd5b5060028054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60005433600160a060020a03908116911614156105105733600160a060020a0316ff5b565b6000805433600160a060020a039081169116141561047a5750600655600190565b60065481565b6000805433600160a060020a039081169116141561047a5760075460ff16151582151514156105675761047a565b506007805460ff1916911515919091179055600190565b6000805433600160a060020a03908116911614156105d4576105a08383610b6b565b15156105ab57600080fd5b604080519081016040528381526020810183905260038151815560208201516001918201559150505b92915050565b60075460009081908190819060ff1615156105f457600080fd5b600554600160a060020a0316935083630e6d1de96000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561063f57600080fd5b6102c65a03f1151561065057600080fd5b50505060405180519050600160a060020a031633600160a060020a031614151561067957600080fd5b83600160a060020a031663313ce5676000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156106bf57600080fd5b6102c65a03f115156106d057600080fd5b5050506040518051905060ff16600a0a6106f560065489610bcc90919063ffffffff16565b8115156106fe57fe5b0492508230600160a060020a031631101561071857600080fd5b83600160a060020a0316634bde38c86000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561075e57600080fd5b6102c65a03f1151561076f57600080fd5b50505060405180519050915081600160a060020a031663ca448a8885600160a060020a031663cb4e75bb6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156107d057600080fd5b6102c65a03f115156107e157600080fd5b505050604051805190508960006040516020015260405160e060020a63ffffffff851602815260048101929092526024820152604401602060405180830381600087803b151561083057600080fd5b6102c65a03f1151561084157600080fd5b5050506040518051600114905061085757600080fd5b61086083610bf0565b9050600160a060020a03881681156108fc0282604051600060405180830381858888f19350505050151561089357600080fd5b7fbf7cd8c76679a5af7e65803ef600bcf955fbbaf7972de3861a1f848b3a50159f888589846108c8888263ffffffff610cc516565b600254600654600160a060020a0390911690604051600160a060020a03978816815295871660208701526040808701959095526060860193909352608085019190915290931660a083015260c082019290925260e001905180910390a15050505050505050565b600254600160a060020a031681565b60075460009060ff161561098357600554600160a060020a03848116911614801561097a575030600160a060020a031685600160a060020a0316145b15610983575060015b95945050505050565b600054600160a060020a031681565b60008054819033600160a060020a0390811691161415610a075750600160a060020a033016318015156109d15760009150610a07565b600160a060020a03831681156108fc0282604051600060405180830381858888f193505050501515610a0257600080fd5b600191505b50919050565b6000805481908190819033600160a060020a0390811691161415610b5357600092505b8551831015610b4e57858381518110610a4557fe5b90602001906020020151915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610aa857600080fd5b6102c65a03f11515610ab957600080fd5b50505060405180519150508015610b435781600160a060020a031663a9059cbb868360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b2757600080fd5b6102c65a03f11515610b3857600080fd5b505050604051805150505b600190920191610a30565b600193505b50505092915050565b600554600160a060020a031681565b60008215801590610b9b57506000610b8a83600163ffffffff610cc516565b600a0a84811515610b9757fe5b0410155b8015610bc55750600a610bb583600163ffffffff610cc516565b600a0a84811515610bc257fe5b04105b9392505050565b6000828202831580610be85750828482811515610be557fe5b04145b1515610bc557fe5b6000610bfa610cee565b6000806003604080519081016040528154815260019091015460208201529250610c2983518460200151610b6b565b1515610c3457600080fd5b610c5d8360200151600a0a610c518551889063ffffffff610bcc16565b9063ffffffff610cd716565b9150610c6f858363ffffffff610cc516565b600254909450600160a060020a03169050801515610c8c57600080fd5b600160a060020a03811682156108fc0283604051600060405180830381858888f193505050501515610cbd57600080fd5b505050919050565b600082821115610cd157fe5b50900390565b6000808284811515610ce557fe5b04949350505050565b6040805190810160405260008082526020820152905600a165627a7a7230582024146a208c2968760ea777436a8a60ef318c25418b8ad987114c87c8b751652f0029000000000000000000000000e9b149d1d7025abbc2ff664e9d4e2e61950226c9",
  "constructorArguments": "000000000000000000000000e9b149d1d7025abbc2ff664e9d4e2e61950226c9"
}