{
  "address": "0x6f01db6f6497ff89f08f6b611f7f9bb3f5b7f627",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "HODL",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-16\n*/\n\npragma solidity ^0.4.24;\n\n// compiler: 0.4.24+commit.e67f0147\n// optimization: ON\n// dev: LuÃ­s Freitas @ HODL Media Inc., Dec-2018\n// for more check github.com/LewisFreitas or github.com/hodlfinance ...\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\ncontract PauserRole {\n    using Roles for Roles.Role;\n\n    event PauserAdded(address indexed account);\n    event PauserRemoved(address indexed account);\n\n    Roles.Role private _pausers;\n\n    constructor () internal {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender));\n        _;\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return _pausers.has(account);\n    }\n\n    function addPauser(address account) public onlyPauser {\n        _addPauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) internal {\n        _pausers.add(account);\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) internal {\n        _pausers.remove(account);\n        emit PauserRemoved(account);\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @return true if the contract is paused, false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyPauser whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyPauser whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n}\n\ncontract HODL is Pausable {\n\n    modifier hashDoesNotExist(string _hash){\n        if(hashExistsMap[_hash] == true) revert();\n        _;\n    }\n\n    mapping (string => bool) hashExistsMap;\n    mapping (string => uint256) hashToIndex;\n    \n    mapping (address => uint256[]) senderToIndexArray;\n    \n    mapping (address => mapping (address => bool)) userOptOut;\n    \n    struct Hash {\n        string hash;\n        address sender;\n        uint256 timestamp;\n    }\n    \n    Hash[] public hashes;\n\n    event AddedBatch(address indexed from, string hash, uint256 timestamp);\n    event UserOptOut(address user, address appAddress, uint256 timestamp);\n    event UserOptIn(address user, address appAddress, uint256 timestamp);\n\n    function storeBatch(string _hash) public whenNotPaused hashDoesNotExist(_hash) {\n\n        Hash memory newHash = Hash({\n            hash: _hash,\n            sender: msg.sender,\n            timestamp: now\n        });\n        \n        uint256 newHashIndex = hashes.push(newHash) - 1;\n        \n        hashToIndex[_hash] = newHashIndex;\n        senderToIndexArray[msg.sender].push(newHashIndex);\n        \n        hashExistsMap[_hash] = true;\n        \n        emit AddedBatch(msg.sender, _hash, now);\n    }\n\n    \n    function opt(address appAddress) public whenNotPaused {\n        \n        bool userOptState = userOptOut[msg.sender][appAddress];\n        \n        if(userOptState == false){\n            userOptOut[msg.sender][appAddress] = true;\n            emit UserOptIn(msg.sender, appAddress, now);\n        }\n        else{\n            userOptOut[msg.sender][appAddress] = false;\n            emit UserOptOut(msg.sender, appAddress, now);\n        }\n    }\n\n    function getUserOptOut(address userAddress, address appAddress) public view returns (bool){\n        return userOptOut[userAddress][appAddress];\n    }\n    \n    function getIndexByHash (string _hash) public view returns (uint256){\n        return hashToIndex[_hash];\n    }\n\n\tfunction getHashExists(string _hash) public view returns (bool){\n        return hashExistsMap[_hash];\n    }\n    \n    function getAllIndexesByAddress (address sender) public view returns (uint256[]){\n        return senderToIndexArray[sender];\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"storeBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hashes\",\"outputs\":[{\"name\":\"hash\",\"type\":\"string\"},{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"getIndexByHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getAllIndexesByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"opt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"getHashExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"appAddress\",\"type\":\"address\"}],\"name\":\"getUserOptOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AddedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"appAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserOptOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"appAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserOptIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}]",
  "bytecode": "608060405261001633640100000000610025810204565b6001805460ff19169055610102565b61003d600082640100000000610c5b61007482021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a038116151561008957600080fd5b61009c82826401000000006100cb810204565b156100a657600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821615156100e257600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610d98806101116000396000f3006080604052600436106100c45763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633f4ba83a81146100c957806346fbf68e146100e05780634aa4ba9b14610115578063501895ae1461016e5780635c975abb1461021e5780636ef8d66d14610233578063703e905b14610248578063755fa815146102b357806382dc1ec41461032457806383442b1e146103455780638456cb5914610366578063919823df1461037b578063b0cc0596146103d4575b600080fd5b3480156100d557600080fd5b506100de6103fb565b005b3480156100ec57600080fd5b50610101600160a060020a036004351661045f565b604080519115158252519081900360200190f35b34801561012157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100de9436949293602493928401919081908401838280828437509497506104779650505050505050565b34801561017a57600080fd5b50610186600435610757565b604051808060200184600160a060020a0316600160a060020a03168152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156101e15781810151838201526020016101c9565b50505050905090810190601f16801561020e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561022a57600080fd5b5061010161081e565b34801561023f57600080fd5b506100de610828565b34801561025457600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102a19436949293602493928401919081908401838280828437509497506108339650505050505050565b60408051918252519081900360200190f35b3480156102bf57600080fd5b506102d4600160a060020a036004351661089b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103105781810151838201526020016102f8565b505050509050019250505060405180910390f35b34801561033057600080fd5b506100de600160a060020a0360043516610907565b34801561035157600080fd5b506100de600160a060020a0360043516610927565b34801561037257600080fd5b506100de610a4a565b34801561038757600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610101943694929360249392840191908190840183828082843750949750610aaf9650505050505050565b3480156103e057600080fd5b50610101600160a060020a0360043581169060243516610b1a565b6104043361045f565b151561040f57600080fd5b60015460ff16151561042057600080fd5b6001805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b6000610471818363ffffffff610b4816565b92915050565b61047f610ca9565b60015460009060ff161561049257600080fd5b826002816040518082805190602001908083835b602083106104c55780518252601f1990920191602091820191016104a6565b51815160001960209485036101000a0190811690199190911617905292019485525060405193849003019092205460ff161515600114159150610509905057600080fd5b604080516060810182528581523360208083019190915242928201929092526006805460018181018084556000939093528351805194985090949293889360039093027ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f019261057d928492910190610cd4565b5060208201518160010160006101000a815481600160a060020a030219169083600160a060020a03160217905550604082015181600201555050039150816003856040518082805190602001908083835b602083106105ed5780518252601f1990920191602091820191016105ce565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201852095909555336000908152600482529485208054600180820183559187529582902090950187905588516002948a9450925082918401908083835b602083106106725780518252601f199092019160209182019101610653565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520805460ff19169615159690961790955542848201819052858552895195850195909552885133957fa798139774ba5164a3f51aaae45161603d02d5fc60895b4c75e931fe67710888958b9550909350918291606083019186019080838360005b838110156107165781810151838201526020016106fe565b50505050905090810190601f1680156107435780820380516001836020036101000a031916815260200191505b50935050505060405180910390a250505050565b600680548290811061076557fe5b60009182526020918290206003919091020180546040805160026001841615610100026000190190931692909204601f8101859004850283018501909152808252919350918391908301828280156107fe5780601f106107d3576101008083540402835291602001916107fe565b820191906000526020600020905b8154815290600101906020018083116107e157829003601f168201915b5050505060018301546002909301549192600160a060020a031691905083565b60015460ff165b90565b61083133610b7f565b565b60006003826040518082805190602001908083835b602083106108675780518252601f199092019160209182019101610848565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922054949350505050565b600160a060020a0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156108fb57602002820191906000526020600020905b8154815260200190600101908083116108e7575b50505050509050919050565b6109103361045f565b151561091b57600080fd5b61092481610bc7565b50565b60015460009060ff161561093a57600080fd5b50336000908152600560209081526040808320600160a060020a038516845290915290205460ff168015156109db57336000818152600560209081526040808320600160a060020a03871680855290835292819020805460ff191660011790558051938452908301919091524282820152517f08c3fe27ebd8e474ac737717ed106c4aff97156517256e38a938fcd265f1adbd9181900360600190a1610a46565b336000818152600560209081526040808320600160a060020a03871680855290835292819020805460ff191690558051938452908301919091524282820152517f3ba40060727f875430f0c17b84afb0974a655b049f6c6c7c63e2dc8f2b7ea3d59181900360600190a15b5050565b610a533361045f565b1515610a5e57600080fd5b60015460ff1615610a6e57600080fd5b6001805460ff1916811790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60006002826040518082805190602001908083835b60208310610ae35780518252601f199092019160209182019101610ac4565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205460ff16949350505050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000600160a060020a0382161515610b5f57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610b9060008263ffffffff610c0f16565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b610bd860008263ffffffff610c5b16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a0381161515610c2457600080fd5b610c2e8282610b48565b1515610c3957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381161515610c7057600080fd5b610c7a8282610b48565b15610c8457600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b606060405190810160405280606081526020016000600160a060020a03168152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d1557805160ff1916838001178555610d42565b82800160010185558215610d42579182015b82811115610d42578251825591602001919060010190610d27565b50610d4e929150610d52565b5090565b61082591905b80821115610d4e5760008155600101610d585600a165627a7a723058204b40e8868b3765a938507b4fd7d62418ee17e9c3785e1a4f0b0d6f933ed9d3b50029"
}