{
  "address": "0xb970105093a0fdd2d0d3264608e01a77e5cf47a4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ECToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-30\n*/\n\npragma solidity ^0.4.25;\n\ncontract ERC20Token {\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n    function transfer(address to, uint256 tokens) public returns (bool success);\n    function approve(address spender, uint256 tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n}\n\ncontract Owned {\n    address owner;\n    constructor() public {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner public returns (bool success) {\n        require (newOwner != address(0));\n        owner = newOwner;\n        return true;\n    }\n}\n\ncontract ECToken is ERC20Token, Owned {\n    using SafeMath for uint256;\n    \n    constructor() public {\n        symbol = \"EC\";\n        name = \"ElephantChain\";\n        decimals = 8;\n        totalSupply = 21000000 * 10 ** uint256(decimals);\n        \n        balances[owner] = totalSupply;\n        emit Transfer(address(0), owner, totalSupply);\n    }\n\n    //ERC20Token\n    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n        return balances[tokenOwner];\n    }\n    \n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    function transfer(address to, uint256 tokens) public returns (bool success) {\n        _transfer(msg.sender,to,tokens);\n        return true;\n    }\n\n    function approve(address spender, uint256 tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n    //end ERC20Token\n    \n    //frozenAccount\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n    \n    function freezeAccount(address target) onlyOwner public returns (bool success) {\n        require (target != address(0));\n        frozenAccount[target] = true;\n        emit FrozenFunds(target, true);\n        return true;\n    }\n    \n\tfunction unfreezeAccount(address target) onlyOwner public returns (bool success) {\n\t    require (target != address(0));\n        frozenAccount[target] = false;\n        emit FrozenFunds(target, false);\n        return true;\n    }\n    //end frozenAccount\n    \n    function increaseSupply(uint256 tokens) onlyOwner public returns (bool success) {\n        require(tokens > 0);\n        totalSupply = totalSupply.add(tokens);\n        balances[owner] = balances[owner].add(tokens);\n        _transfer(msg.sender, owner, tokens);\n        return true;\n    }\n\n    function decreaseSupply(uint256 tokens) onlyOwner public returns (bool success) {\n        require(tokens > 0);\n        require(balances[owner] >= tokens);\n        balances[owner] = balances[owner].sub(tokens);\n        totalSupply = totalSupply.sub(tokens);\n        _transfer(owner, msg.sender, tokens);\n        return true;\n    }\n    \n    function _transfer(address spender, address target, uint256 tokens) private {\n        require (target != address(0));\n        require(tokens > 0);\n        require (balances[spender] >= tokens);\n        require (balances[target].add(tokens) >= balances[target]);\n        require(!frozenAccount[spender]);\n        require(!frozenAccount[target]);\n        uint256 previousBalances = balances[spender].add(balances[target]);\n        balances[spender] = balances[spender].sub(tokens);\n        balances[target] = balances[target].add(tokens);\n        emit Transfer(spender, target, tokens);\n        assert(balances[spender].add(balances[target]) == previousBalances);\n    }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require(b > 0);\n        c = a / b;\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060068054600160a060020a031916331790556040805180820190915260028082527f4543000000000000000000000000000000000000000000000000000000000000602090920191825261006791600091610132565b5060408051808201909152600d8082527f456c657068616e74436861696e0000000000000000000000000000000000000060209092019182526100ac91600191610132565b5060028054600860ff19909116179081905560ff16600a0a6301406f4002600381905560068054600160a060020a039081166000908152600460209081526040808320869055935484519586529351939092169390927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a36101cd565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017357805160ff19168380011785556101a0565b828001600101855582156101a0579182015b828111156101a0578251825591602001919060010190610185565b506101ac9291506101b0565b5090565b6101ca91905b808211156101ac57600081556001016101b6565b90565b610b5b806101dc6000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100df578063095ea7b31461016957806318160ddd146101a157806323b872dd146101c8578063313ce567146101f257806370a082311461021d578063788649ea1461023e57806395d89b411461025f57806398e52f9a14610274578063a9059cbb1461028c578063b414d4b6146102b0578063b921e163146102d1578063dd62ed3e146102e9578063f26c159f14610310578063f2fde38b14610331575b600080fd5b3480156100eb57600080fd5b506100f4610352565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012e578181015183820152602001610116565b50505050905090810190601f16801561015b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017557600080fd5b5061018d600160a060020a03600435166024356103df565b604080519115158252519081900360200190f35b3480156101ad57600080fd5b506101b6610446565b60408051918252519081900360200190f35b3480156101d457600080fd5b5061018d600160a060020a036004358116906024351660443561044c565b3480156101fe57600080fd5b50610207610557565b6040805160ff9092168252519081900360200190f35b34801561022957600080fd5b506101b6600160a060020a0360043516610560565b34801561024a57600080fd5b5061018d600160a060020a036004351661057b565b34801561026b57600080fd5b506100f461060d565b34801561028057600080fd5b5061018d600435610668565b34801561029857600080fd5b5061018d600160a060020a0360043516602435610731565b3480156102bc57600080fd5b5061018d600160a060020a0360043516610747565b3480156102dd57600080fd5b5061018d60043561075c565b3480156102f557600080fd5b506101b6600160a060020a03600435811690602435166107f3565b34801561031c57600080fd5b5061018d600160a060020a036004351661081e565b34801561033d57600080fd5b5061018d600160a060020a03600435166108b4565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103d75780601f106103ac576101008083540402835291602001916103d7565b820191906000526020600020905b8154815290600101906020018083116103ba57829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60035481565b600160a060020a038316600090815260046020526040812054610475908363ffffffff61091516565b600160a060020a03851660009081526004602090815260408083209390935560058152828220338352905220546104b2908363ffffffff61091516565b600160a060020a0380861660009081526005602090815260408083203384528252808320949094559186168152600490915220546104f6908363ffffffff61092a16565b600160a060020a0380851660008181526004602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60025460ff1681565b600160a060020a031660009081526004602052604090205490565b600654600090600160a060020a0316331461059557600080fd5b600160a060020a03821615156105aa57600080fd5b600160a060020a0382166000818152600760209081526040808320805460ff1916905580519384529083019190915280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a1506001919050565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103d75780601f106103ac576101008083540402835291602001916103d7565b600654600090600160a060020a0316331461068257600080fd5b6000821161068f57600080fd5b600654600160a060020a03166000908152600460205260409020548211156106b657600080fd5b600654600160a060020a03166000908152600460205260409020546106e1908363ffffffff61091516565b600654600160a060020a031660009081526004602052604090205560035461070f908363ffffffff61091516565b60035560065461072990600160a060020a0316338461093a565b506001919050565b600061073e33848461093a565b50600192915050565b60076020526000908152604090205460ff1681565b600654600090600160a060020a0316331461077657600080fd5b6000821161078357600080fd5b600354610796908363ffffffff61092a16565b600355600654600160a060020a03166000908152600460205260409020546107c4908363ffffffff61092a16565b60068054600160a060020a0390811660009081526004602052604090209290925554610729913391168461093a565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600654600090600160a060020a0316331461083857600080fd5b600160a060020a038216151561084d57600080fd5b600160a060020a038216600081815260076020908152604091829020805460ff1916600190811790915582519384529083015280517f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a59281900390910190a1506001919050565b600654600090600160a060020a031633146108ce57600080fd5b600160a060020a03821615156108e357600080fd5b5060068054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60008282111561092457600080fd5b50900390565b8181018281101561044057600080fd5b6000600160a060020a038316151561095157600080fd5b6000821161095e57600080fd5b600160a060020a03841660009081526004602052604090205482111561098357600080fd5b600160a060020a0383166000908152600460205260409020546109ac818463ffffffff61092a16565b10156109b757600080fd5b600160a060020a03841660009081526007602052604090205460ff16156109dd57600080fd5b600160a060020a03831660009081526007602052604090205460ff1615610a0357600080fd5b600160a060020a03808416600090815260046020526040808220549287168252902054610a359163ffffffff61092a16565b600160a060020a038516600090815260046020526040902054909150610a61908363ffffffff61091516565b600160a060020a038086166000908152600460205260408082209390935590851681522054610a96908363ffffffff61092a16565b600160a060020a0380851660008181526004602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3600160a060020a038084166000908152600460205260408082205492871682529020548291610b22919063ffffffff61092a16565b14610b2957fe5b505050505600a165627a7a72305820840706b62a21849020aabf861a2e41539be6a698d9d12df220f352f57b15e20b0029"
}