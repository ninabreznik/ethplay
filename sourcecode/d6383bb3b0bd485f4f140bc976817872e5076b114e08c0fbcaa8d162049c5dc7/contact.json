{
  "address": "0xb9d18804c207e20fb6e9e41273be290c8a53bd6c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-17\n*/\n\n//Copyright (c) 2016-2019 zOS Global Limited, licensed under the MIT license.\n//https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\n\npragma solidity ^0.5.2;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);    \n    function transfer(address to, uint256 value) external returns (bool);\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);    \n    function approve(address spender, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        require(address(token).isContract());\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success);\n\n        if (returndata.length > 0) {\n            require(abi.decode(returndata, (bool)));\n        }\n    }\n}\n\ncontract ReentrancyGuard {\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        _guardCounter = 1;\n    }\n\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n\ncontract Crowdsale is ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 private _token;\n    address payable private _wallet;\n\n    uint256 private _rate;\n    uint256 private _weiRaised;\n\n    uint256 private _openingTime;\n    uint256 private _closingTime;\n\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n    constructor () public {\n        _rate = 10000000000;\n        _wallet = 0x4b09b4aeA5f9C616ebB6Ee0097B62998Cb332275;\n        _token = IERC20(0x1a9ECb05376Bf8BB32F7F038A845DbAfb22041cd);\n        \n        _openingTime = block.timestamp;\n        _closingTime = 1567296000;\n    }\n    \n    function isOpen() public view returns (bool) {\n        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n    }\n\n    modifier onlyWhileOpen {\n        require(isOpen());\n        _;\n    }\n    \n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n        require(beneficiary != address(0));\n        require(weiAmount != 0);\n    }\n\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n        return weiAmount.div(_rate);\n    }\n    \n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n        _token.safeTransfer(beneficiary, tokenAmount);\n    }\n    \n    function _forwardFunds() internal {\n        _wallet.transfer(msg.value);\n    }\n    \n    function buyTokens(address beneficiary) public nonReentrant payable {\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(beneficiary, weiAmount);\n\n        uint256 tokens = _getTokenAmount(weiAmount);\n\n        _weiRaised = _weiRaised.add(weiAmount);\n\n        _deliverTokens(beneficiary, tokens);\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n\n        _forwardFunds();\n    }\n\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n    \n    function token() public view returns (IERC20) {\n        return _token;\n    }\n    function wallet() public view returns (address payable) {\n        return _wallet;\n    }\n    \n    function rate() public view returns (uint256) {\n        return _rate;\n    }\n    function weiRaised() public view returns (uint256) {\n        return _weiRaised;\n    }\n\n    function openingTime() public view returns (uint256) {\n        return _openingTime;\n    }\n    function closingTime() public view returns (uint256) {\n        return _closingTime;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50600160008190556402540be40060035560028054600160a060020a0319908116734b09b4aea5f9c616ebb6ee0097b62998cb33227517909155815416731a9ecb05376bf8bb32f7f038a845dbafb22041cd17905542600555635d6b0a0060065561053c806100806000396000f3fe608060405260043610610098576000357c010000000000000000000000000000000000000000000000000000000090048063521eb2731161006b578063521eb2731461011d578063b7a8807c1461014e578063ec8ac4d814610163578063fc0c546a1461018957610098565b80632c4e722e146100a35780634042b66f146100ca57806347535d7b146100df5780634b6753bc14610108575b6100a13361019e565b005b3480156100af57600080fd5b506100b8610246565b60408051918252519081900360200190f35b3480156100d657600080fd5b506100b861024c565b3480156100eb57600080fd5b506100f4610252565b604080519115158252519081900360200190f35b34801561011457600080fd5b506100b861026d565b34801561012957600080fd5b50610132610273565b60408051600160a060020a039092168252519081900360200190f35b34801561015a57600080fd5b506100b8610282565b6100a16004803603602081101561017957600080fd5b5035600160a060020a031661019e565b34801561019557600080fd5b50610132610288565b6000805460010190819055346101b48382610297565b60006101bf826102cb565b6004549091506101d5908363ffffffff6102e816565b6004556101e28482610301565b60408051838152602081018390528151600160a060020a0387169233927f6faf93231a456e552dbc9961f58d9713ee4f2e69d15f1975b050ef0911053a7b929081900390910190a361023261031e565b5050600054811461024257600080fd5b5050565b60035490565b60045490565b6000600554421015801561026857506006544211155b905090565b60065490565b600254600160a060020a031690565b60055490565b600154600160a060020a031690565b61029f610252565b15156102aa57600080fd5b600160a060020a03821615156102bf57600080fd5b80151561024257600080fd5b60006102e26003548361035a90919063ffffffff16565b92915050565b6000828201838110156102fa57600080fd5b9392505050565b60015461024290600160a060020a0316838363ffffffff61037e16565b600254604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610357573d6000803e3d6000fd5b50565b600080821161036857600080fd5b6000828481151561037557fe5b04949350505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526103fe908490610403565b505050565b61041582600160a060020a0316610508565b151561042057600080fd5b6000606083600160a060020a0316836040518082805190602001908083835b6020831061045e5780518252601f19909201916020918201910161043f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146104c0576040519150601f19603f3d011682016040523d82523d6000602084013e6104c5565b606091505b50915091508115156104d657600080fd5b600081511115610502578080602001905160208110156104f557600080fd5b5051151561050257600080fd5b50505050565b6000903b119056fea165627a7a723058205dc6855d8520358ca75e2509c1d7c3bf70681834796e3c1bfbc62fb4099b6cb10029"
}