{
  "address": "0x87897374ea98260343d8d3e5076b12dd0d09956a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TokenERC20",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-03\n*/\n\npragma solidity ^0.4.21;\n\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n \ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract TokenERC20 is Ownable {\n\t\n    using SafeMath for uint256;\n    \n    string public constant name       = \"QOP云配送\";\n    string public constant symbol     = \"QOP\";\n    uint32 public constant decimals   = 18;\n    uint256 public totalSupply;\n    uint256 public currentTotalSupply = 0;\n\tuint256 public airdrop;\n    uint256 public startBalance;\n  \tuint256 public buyPrice ;\n\t\n    mapping(address => bool) touched; \n    mapping(address => uint256) balances;\n\tmapping(address => mapping (address => uint256)) internal allowed;\n\tmapping(address => bool) public frozenAccount;   \n\t\n\tevent FrozenFunds(address target, bool frozen);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\tevent Burn(address indexed burner, uint256 value);   \n\t\n\tfunction TokenERC20(\n        uint256 initialSupply\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balances[msg.sender] = totalSupply;                // Give the creator all initial tokens\n    }\n\t\n    function totalSupply() public view returns (uint256) {\n\t\treturn totalSupply;\n\t}\t\n\t\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\t \n\t\tif( !touched[msg.sender] && currentTotalSupply < totalSupply && currentTotalSupply < airdrop ){\n            balances[msg.sender] = balances[msg.sender].add( startBalance );\n            touched[msg.sender] = true;\n            currentTotalSupply = currentTotalSupply.add( startBalance );\n        }\n\t\t\n\t\trequire(!frozenAccount[msg.sender]); \n\t\trequire(_value <= balances[msg.sender]);\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\t\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire(_to != address(0));\n\t\trequire(_value <= balances[_from]);\n\t\trequire(_value <= allowed[_from][msg.sender]);\t\n\t\trequire(!frozenAccount[_from]); \n\t\t\n        if( !touched[_from] && currentTotalSupply < totalSupply && currentTotalSupply < airdrop  ){\n            touched[_from] = true;\n            balances[_from] = balances[_from].add( startBalance );\n            currentTotalSupply = currentTotalSupply.add( startBalance );\n        }\n\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\n\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\t\tuint oldValue = allowed[msg.sender][_spender];\n\t\tif (_subtractedValue > oldValue) {\n\t\t\tallowed[msg.sender][_spender] = 0;\n\t\t} else {\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\t\t}\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\t\treturn true;\n\t}\n\t\n\tfunction getBalance(address _a) internal constant returns(uint256) {\n        if( currentTotalSupply < totalSupply ){\n            if( touched[_a] )\n                return balances[_a];\n            else\n                return balances[_a].add( startBalance );\n        } else {\n            return balances[_a];\n        }\n    }\n    \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return getBalance( _owner );\n    }\n\n\tfunction burn(address _who, uint256 _value) onlyOwner public {\n\t\trequire(_value <= balances[_who]);\n\t\tbalances[_who] = balances[_who].sub(_value);\n\t\ttotalSupply = totalSupply.sub(_value);\n\t\temit Burn(_who, _value);\n\t\temit Transfer(_who, address(0), _value);\n\t}\n\t\n \n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balances[target] = balances[target].add(mintedAmount);\n        totalSupply = totalSupply.add(mintedAmount);\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n\t\n \n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\t\n \n\tfunction setPrices(uint256 newBuyPrice) onlyOwner public {\n        buyPrice = newBuyPrice;\n    }\n\t\n\tfunction () payable public {\n    \tuint amount = msg.value * buyPrice;               \n    \tbalances[msg.sender] = balances[msg.sender].add(amount);                  \n        balances[owner] = balances[owner].sub(amount);                        \n        emit Transfer(owner, msg.sender, amount);    \n    }\n\t\n \n    function selfdestructs() payable  public onlyOwner {\n    \tselfdestruct(owner);\n    }\n    \n \n    function getEth(uint num) payable public onlyOwner {\n    \towner.transfer(num);\n    }\n\t\n \n\tfunction modifyairdrop(uint256 _airdrop,uint256 _startBalance ) public onlyOwner {\n\t\tairdrop = _airdrop;\n\t\tstartBalance = _startBalance;\n\t}\n \n\t\n}",
  "bytecode": "60606040526000600255341561001457600080fd5b6040516020806111a98339810160405280805160008054600160a060020a033316600160a060020a031990911681178255670de0b6b3a76400009092026001819055918152600760205260409020555050611135806100746000396000f3006060604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101fc578063095ea7b31461028657806318160ddd146102bc57806323b872dd146102e15780632bb9ffef14610309578063313ce5671461031c5780633884d63514610348578063410b1da81461035b5780634ed0efd11461036e578063661884631461037857806370a082311461039a57806379c65068146103b95780638620410b146103db5780638da5cb5b146103ee5780638e3073a61461041d57806395d89b41146104285780639dc29fac1461043b578063a3201daa1461045d578063a9059cbb14610473578063b414d4b614610495578063d73dd623146104b4578063dd62ed3e146104d6578063e0c012ff146104fb578063e724529c14610514578063f2fde38b14610538575b600554600160a060020a0333166000908152600760205260409020543490910290610179908263ffffffff61055716565b600160a060020a03338116600090815260076020526040808220939093558054909116815220546101b0908263ffffffff61056a16565b60008054600160a060020a03908116825260076020526040808320939093559054338216929116906000805160206110ea8339815191529084905190815260200160405180910390a350005b341561020757600080fd5b61020f61057c565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024b578082015183820152602001610233565b50505050905090810190601f1680156102785780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029157600080fd5b6102a8600160a060020a03600435166024356105b3565b604051901515815260200160405180910390f35b34156102c757600080fd5b6102cf61061f565b60405190815260200160405180910390f35b34156102ec57600080fd5b6102a8600160a060020a0360043581169060243516604435610625565b341561031457600080fd5b6102cf61086e565b341561032757600080fd5b61032f610874565b60405163ffffffff909116815260200160405180910390f35b341561035357600080fd5b6102cf610879565b341561036657600080fd5b6102cf61087f565b610376610885565b005b341561038357600080fd5b6102a8600160a060020a03600435166024356108ae565b34156103a557600080fd5b6102cf600160a060020a03600435166109a8565b34156103c457600080fd5b610376600160a060020a03600435166024356109bb565b34156103e657600080fd5b6102cf610a94565b34156103f957600080fd5b610401610a9a565b604051600160a060020a03909116815260200160405180910390f35b610376600435610aa9565b341561043357600080fd5b61020f610afa565b341561044657600080fd5b610376600160a060020a0360043516602435610b31565b341561046857600080fd5b610376600435610c37565b341561047e57600080fd5b6102a8600160a060020a0360043516602435610c57565b34156104a057600080fd5b6102a8600160a060020a0360043516610e19565b34156104bf57600080fd5b6102a8600160a060020a0360043516602435610e2e565b34156104e157600080fd5b6102cf600160a060020a0360043581169060243516610ed2565b341561050657600080fd5b610376600435602435610efd565b341561051f57600080fd5b610376600160a060020a03600435166024351515610f23565b341561054357600080fd5b610376600160a060020a0360043516610faf565b8181018281101561056457fe5b92915050565b60008282111561057657fe5b50900390565b60408051908101604052600c81527f514f50e4ba91e9858de980810000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260086020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60015490565b6000600160a060020a038316151561063c57600080fd5b600160a060020a03841660009081526007602052604090205482111561066157600080fd5b600160a060020a038085166000908152600860209081526040808320339094168352929052205482111561069457600080fd5b600160a060020a03841660009081526009602052604090205460ff16156106ba57600080fd5b600160a060020a03841660009081526006602052604090205460ff161580156106e65750600154600254105b80156106f55750600354600254105b1561076d57600160a060020a0384166000908152600660209081526040808320805460ff1916600117905560045460079092529091205461073b9163ffffffff61055716565b600160a060020a0385166000908152600760205260409020556004546002546107699163ffffffff61055716565b6002555b600160a060020a038416600090815260076020526040902054610796908363ffffffff61056a16565b600160a060020a0380861660009081526007602052604080822093909355908516815220546107cb908363ffffffff61055716565b600160a060020a03808516600090815260076020908152604080832094909455878316825260088152838220339093168252919091522054610813908363ffffffff61056a16565b600160a060020a03808616600081815260086020908152604080832033861684529091529081902093909355908516916000805160206110ea8339815191529085905190815260200160405180910390a35060019392505050565b60045481565b601281565b60035481565b60025481565b60005433600160a060020a039081169116146108a057600080fd5b600054600160a060020a0316ff5b600160a060020a0333811660009081526008602090815260408083209386168352929052908120548083111561090b57600160a060020a033381166000908152600860209081526040808320938816835292905290812055610942565b61091b818463ffffffff61056a16565b600160a060020a033381166000908152600860209081526040808320938916835292905220555b600160a060020a0333811660008181526008602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60006109b38261104a565b90505b919050565b60005433600160a060020a039081169116146109d657600080fd5b600160a060020a0382166000908152600760205260409020546109ff908263ffffffff61055716565b600160a060020a038316600090815260076020526040902055600154610a2b908263ffffffff61055716565b600155600160a060020a03301660006000805160206110ea8339815191528360405190815260200160405180910390a381600160a060020a031630600160a060020a03166000805160206110ea8339815191528360405190815260200160405180910390a35050565b60055481565b600054600160a060020a031681565b60005433600160a060020a03908116911614610ac457600080fd5b600054600160a060020a031681156108fc0282604051600060405180830381858888f193505050501515610af757600080fd5b50565b60408051908101604052600381527f514f500000000000000000000000000000000000000000000000000000000000602082015281565b60005433600160a060020a03908116911614610b4c57600080fd5b600160a060020a038216600090815260076020526040902054811115610b7157600080fd5b600160a060020a038216600090815260076020526040902054610b9a908263ffffffff61056a16565b600160a060020a038316600090815260076020526040902055600154610bc6908263ffffffff61056a16565b600155600160a060020a0382167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58260405190815260200160405180910390a26000600160a060020a0383166000805160206110ea8339815191528360405190815260200160405180910390a35050565b60005433600160a060020a03908116911614610c5257600080fd5b600555565b6000600160a060020a0383161515610c6e57600080fd5b600160a060020a03331660009081526006602052604090205460ff16158015610c9a5750600154600254105b8015610ca95750600354600254105b15610d2157600454600160a060020a033316600090815260076020526040902054610cd99163ffffffff61055716565b600160a060020a0333166000908152600760209081526040808320939093556006905220805460ff19166001179055600454600254610d1d9163ffffffff61055716565b6002555b600160a060020a03331660009081526009602052604090205460ff1615610d4757600080fd5b600160a060020a033316600090815260076020526040902054821115610d6c57600080fd5b600160a060020a033316600090815260076020526040902054610d95908363ffffffff61056a16565b600160a060020a033381166000908152600760205260408082209390935590851681522054610dca908363ffffffff61055716565b600160a060020a0380851660008181526007602052604090819020939093559133909116906000805160206110ea8339815191529085905190815260200160405180910390a350600192915050565b60096020526000908152604090205460ff1681565b600160a060020a033381166000908152600860209081526040808320938616835292905290812054610e66908363ffffffff61055716565b600160a060020a0333811660008181526008602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260086020908152604080832093909416825291909152205490565b60005433600160a060020a03908116911614610f1857600080fd5b600391909155600455565b60005433600160a060020a03908116911614610f3e57600080fd5b600160a060020a03821660009081526009602052604090819020805460ff19168315151790557f48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b60005433600160a060020a03908116911614610fca57600080fd5b600160a060020a0381161515610fdf57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600060015460025410156110ca57600160a060020a03821660009081526006602052604090205460ff16156110985750600160a060020a0381166000908152600760205260409020546109b6565b600454600160a060020a0383166000908152600760205260409020546110c39163ffffffff61055716565b90506109b6565b50600160a060020a0381166000908152600760205260409020546109b65600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820033ab5cb1fde617b086d8f2d3e84cad7cb9f8e3d776ff2aeebe32373197a368b0029000000000000000000000000000000000000000000000000000000003b9aca00",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000003b9aca00"
}