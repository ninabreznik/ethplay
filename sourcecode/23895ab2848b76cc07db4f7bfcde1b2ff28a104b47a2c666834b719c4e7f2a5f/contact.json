{
  "address": "0xdfeae09d170ca8169991e9cf678b67cb572cb954",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "opterium",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-08\n*/\n\npragma solidity ^0.4.25;\n\ncontract opterium {\n    /*\n *   See: http://opterium.ru/\n * \n *   No one can change this smart contract, including the community creators.  \n *   The profit is : (interest is accrued continuously).\n * Up to 100  ETH = 1.0 % in 36 hours of your invested amount\n * From 100   ETH = 1.5 % in 36 hours *\n * From 200   ETH = 1.8 % in 36 hours *\n * From 500   ETH = 2.0 % in 36 hours *\n * From 1000  ETH = 1.6 % in 36 hours *\n * From 3000  ETH = 1.4 % in 36 hours *\n * From 5000  ETH = 1.2 % in 36 hours *\n * From 7000  ETH = 1.0 % in 36 hours *\n * From 10000 ETH = 2.5 % in 36 hours *\n *   Minimum deposit is 0.011 ETH.\n *\n *  How to make a deposit:\n *   Send cryptocurrency from ETH wallet (at least 0.011 ETH) to the address\n *   of the smart contract - opterium\n *   It is not allowed to make transfers from cryptocurrency exchanges.\n *   Only personal ETH wallet with private keys is allowed.\n * \n *   Recommended limits are 200000 ETH, check the current ETH rate at\n *   the following link: https://ethgasstation.info/\n * \n * How to get paid:\n *   Request your profit by sending 0 ETH to the address of the smart contract.\n *\n  */  \n    \n    mapping (address => uint256) public invested;\n    mapping (address => uint256) public atBlock;\n    address techSupport = 0x720497fce7D8f7D7B89FB27E5Ae48b7DA884f582;\n    uint techSupportPercent = 2;\n    address defaultReferrer = 0x720497fce7D8f7D7B89FB27E5Ae48b7DA884f582;\n    uint refPercent = 2;\n    uint refBack = 2;\n\n    function calculateProfitPercent(uint bal) private pure returns (uint) {\n        if (bal >= 1e22) {\n            return 25;\n        }\n        if (bal >= 7e21) {\n            return 10;\n        }\n        if (bal >= 5e21) {\n            return 12;\n        }\n        if (bal >= 3e21) {\n            return 14;\n        }\n        if (bal >= 1e21) {\n            return 16;\n        }\n        if (bal >= 5e20) {\n            return 20;\n        }\n        if (bal >= 2e20) {\n            return 18;\n        }\n        if (bal >= 1e20) {\n            return 15;\n        } else {\n            return 10;\n        }\n    }\n\n    function transferDefaultPercentsOfInvested(uint value) private {\n        techSupport.transfer(value * techSupportPercent / 100);\n    }\n\n    function bytesToAddress(bytes bys) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n    function transferRefPercents(uint value, address sender) private {\n        if (msg.data.length != 0) {\n            address referrer = bytesToAddress(msg.data);\n            if(referrer != sender) {\n                sender.transfer(value * refBack / 100);\n                referrer.transfer(value * refPercent / 100);\n            } else {\n                defaultReferrer.transfer(value * refPercent / 100);\n            }\n        } else {\n            defaultReferrer.transfer(value * refPercent / 100);\n        }\n    }\n\n  \n    function () external payable {\n        if (invested[msg.sender] != 0) {\n            \n            uint thisBalance = address(this).balance;\n            uint amount = invested[msg.sender] * calculateProfitPercent(thisBalance) / 1000 * (block.number - atBlock[msg.sender]) / 9150;\n\n            address sender = msg.sender;\n            sender.transfer(amount);\n        }\n        if (msg.value > 0) {\n            transferDefaultPercentsOfInvested(msg.value);\n            transferRefPercents(msg.value, msg.sender);\n        }\n        atBlock[msg.sender] = block.number;\n        invested[msg.sender] += (msg.value);\n    }\n}",
  "bytecode": "60806040526002805473720497fce7d8f7d7b89fb27e5ae48b7da884f582600160a060020a031991821681178355600383905560048054909216179055600581905560065534801561005057600080fd5b5061046f806100606000396000f30060806040526004361061004b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166366b3f6bf81146101285780638aac13621461015b575b3360009081526020819052604081205481908190156100e65733600090815260016020526040902054303193506123be9043036103e861008a8661017c565b33600090815260208190526040902054028115156100a457fe5b04028115156100af57fe5b6040519190049250339150819083156108fc029084906000818181858888f193505050501580156100e4573d6000803e3d6000fd5b505b6000341115610102576100f83461024a565b6101023433610292565b505033600090815260016020908152604080832043905590829052902080543401905550005b34801561013457600080fd5b50610149600160a060020a0360043516610418565b60408051918252519081900360200190f35b34801561016757600080fd5b50610149600160a060020a036004351661042a565b600069021e19e0c9bab2400000821061019757506019610245565b69017b7883c0691660000082106101b05750600a610245565b69010f0cf064dd5920000082106101c95750600c610245565b68a2a15d09519be0000082106101e15750600e610245565b683635c9adc5dea0000082106101f957506010610245565b681b1ae4d6e2ef500000821061021157506014610245565b680ad78ebc5ac6200000821061022957506012610245565b68056bc75e2d6310000082106102415750600f610245565b50600a5b919050565b600254600354604051600160a060020a039092169160649184029190910480156108fc02916000818181858888f1935050505015801561028e573d6000803e3d6000fd5b5050565b600036156103cd576102d46000368080601f0160208091040260200160405190810160405280939291908181526020018383808284375061043c945050505050565b9050600160a060020a03808216908316146103825781600160a060020a03166108fc6064600654860281151561030657fe5b049081150290604051600060405180830381858888f19350505050158015610332573d6000803e3d6000fd5b5080600160a060020a03166108fc6064600554860281151561035057fe5b049081150290604051600060405180830381858888f1935050505015801561037c573d6000803e3d6000fd5b506103c8565b600454600554604051600160a060020a039092169160649186029190910480156108fc02916000818181858888f193505050501580156103c6573d6000803e3d6000fd5b505b610413565b600454600554604051600160a060020a039092169160649186029190910480156108fc02916000818181858888f19350505050158015610411573d6000803e3d6000fd5b505b505050565b60006020819052908152604090205481565b60016020526000908152604090205481565b60140151905600a165627a7a7230582058da05d2d2e7fb260f570bcf72db74343be624f621f74b194068ec055539f1010029"
}