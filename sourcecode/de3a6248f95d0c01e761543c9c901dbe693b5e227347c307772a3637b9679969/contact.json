{
  "address": "0x5699dbfe52146465074e2331046e941262f0446f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ReserveRightsToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-09\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\ncontract PauserRole {\n  using Roles for Roles.Role;\n\n  event PauserAdded(address indexed account);\n  event PauserRemoved(address indexed account);\n\n  Roles.Role private pausers;\n\n  constructor() internal {\n    _addPauser(msg.sender);\n  }\n\n  modifier onlyPauser() {\n    require(isPauser(msg.sender));\n    _;\n  }\n\n  function isPauser(address account) public view returns (bool) {\n    return pausers.has(account);\n  }\n\n  function addPauser(address account) public onlyPauser {\n    _addPauser(account);\n  }\n\n  function renouncePauser() public {\n    _removePauser(msg.sender);\n  }\n\n  function _addPauser(address account) internal {\n    pausers.add(account);\n    emit PauserAdded(account);\n  }\n\n  function _removePauser(address account) internal {\n    pausers.remove(account);\n    emit PauserRemoved(account);\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is PauserRole {\n  event Paused(address account);\n  event Unpaused(address account);\n\n  bool private _paused;\n\n  constructor() internal {\n    _paused = false;\n  }\n\n  /**\n   * @return true if the contract is paused, false otherwise.\n   */\n  function paused() public view returns(bool) {\n    return _paused;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!_paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(_paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyPauser whenNotPaused {\n    _paused = true;\n    emit Paused(msg.sender);\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyPauser whenPaused {\n    _paused = false;\n    emit Unpaused(msg.sender);\n  }\n}\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n **/\ncontract ERC20Pausable is ERC20, Pausable {\n\n  function transfer(\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transfer(to, value);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.transferFrom(from, to, value);\n  }\n\n  function approve(\n    address spender,\n    uint256 value\n  )\n    public\n    whenNotPaused\n    returns (bool)\n  {\n    return super.approve(spender, value);\n  }\n\n  function increaseAllowance(\n    address spender,\n    uint addedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.increaseAllowance(spender, addedValue);\n  }\n\n  function decreaseAllowance(\n    address spender,\n    uint subtractedValue\n  )\n    public\n    whenNotPaused\n    returns (bool success)\n  {\n    return super.decreaseAllowance(spender, subtractedValue);\n  }\n}\n\ncontract ReserveRightsToken is ERC20Pausable {\n  string public name = \"Reserve Rights\";\n  string public symbol = \"RSR\";\n  uint8 public decimals = 18;\n\n  // Tokens belonging to Reserve team members and early investors are locked until network launch.\n  mapping (address => bool) public reserveTeamMemberOrEarlyInvestor;\n  event AccountLocked(address indexed lockedAccount);\n\n  // Hard-coded addresses from the previous deployment, which should be locked and contain token allocations. \n  address[] previousAddresses = [\n    0x8ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f,\n    0xb268c230720d16c69a61cbee24731e3b2a3330a1,\n    0x082705fabf49bd30de8f0222821f6d940713b89d,\n    0xc3aa4ced5dea58a3d1ca76e507515c79ca1e4436,\n    0x66f25f036eb4463d8a45c6594a325f9e89baa6db,\n    0x9e454fe7d8e087fcac4ec8c40562de781004477e,\n    0x4fcc7ca22680aed155f981eeb13089383d624aa9,\n    0x5a66650e5345d76eb8136ea1490cbcce1c08072e,\n    0x698a10b5d0972bffea306ba5950bd74d2af3c7ca,\n    0xdf437625216cca3d7148e18d09f4aab0d47c763b,\n    0x24b4a6847ccb32972de40170c02fda121ddc6a30,\n    0x8d29a24f91df381feb4ee7f05405d3fb888c643e,\n    0x5a7350d95b9e644dcab4bc642707f43a361bf628,\n    0xfc2e9a5cd1bb9b3953ffa7e6ddf0c0447eb95f11,\n    0x3ac7a6c3a2ff08613b611485f795d07e785cbb95,\n    0x47fc47cbcc5217740905e16c4c953b2f247369d2,\n    0xd282337950ac6e936d0f0ebaaff1ffc3de79f3d5,\n    0xde59cd3aa43a2bf863723662b31906660c7d12b6,\n    0x5f84660cabb98f7b7764cd1ae2553442da91984e,\n    0xefbaaf73fc22f70785515c1e2be3d5ba2fb8e9b0,\n    0x63c5ffb388d83477a15eb940cfa23991ca0b30f0,\n    0x14f018cce044f9d3fb1e1644db6f2fab70f6e3cb,\n    0xbe30069d27a250f90c2ee5507bcaca5f868265f7,\n    0xcfef27288bedcd587a1ed6e86a996c8c5b01d7c1,\n    0x5f57bbccc7ffa4c46864b5ed999a271bc36bb0ce,\n    0xbae85de9858375706dde5907c8c9c6ee22b19212,\n    0x5cf4bbb0ff093f3c725abec32fba8f34e4e98af1,\n    0xcb2d434bf72d3cd43d0c368493971183640ffe99,\n    0x02fc8e99401b970c265480140721b28bb3af85ab,\n    0xe7ad11517d7254f6a0758cee932bffa328002dd0,\n    0x6b39195c164d693d3b6518b70d99877d4f7c87ef,\n    0xc59119d8e4d129890036a108aed9d9fe94db1ba9,\n    0xd28661e4c75d177d9c1f3c8b821902c1abd103a6,\n    0xba385610025b1ea8091ae3e4a2e98913e2691ff7,\n    0xcd74834b8f3f71d2e82c6240ae0291c563785356,\n    0x657a127639b9e0ccccfbe795a8e394d5ca158526\n  ];\n\n  constructor() public {\n    IERC20 previousToken = IERC20(0xc2646eda7c2d4bf131561141c1d5696c4f01eb53);\n\n    address reservePrimaryWallet = 0xfa3bd0b2ac6e63f16d16d7e449418837a8a3ae27;\n    _mint(reservePrimaryWallet, previousToken.balanceOf(reservePrimaryWallet));\n\n    for (uint i = 0; i < previousAddresses.length; i++) {\n      reserveTeamMemberOrEarlyInvestor[previousAddresses[i]] = true;\n      _mint(previousAddresses[i], previousToken.balanceOf(previousAddresses[i]));\n      emit AccountLocked(previousAddresses[i]);\n    }\n  }\n\n  function transfer(address to, uint256 value) public returns (bool) {\n    // Tokens belonging to Reserve team members and early investors are locked until network launch.\n    require(!reserveTeamMemberOrEarlyInvestor[msg.sender]);\n    super.transfer(to, value);\n  }\n\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n    // Tokens belonging to Reserve team members and early investors are locked until network launch.\n    require(!reserveTeamMemberOrEarlyInvestor[from]);\n    super.transferFrom(from, to, value);\n  }\n\n  /// This function is intended to be used only by Reserve team members and investors.\n  /// You can call it yourself, but you almost certainly don’t want to.\n  /// Anyone who calls this function will cause their own tokens to be subject to\n  /// a long lockup. Reserve team members and some investors do this to commit\n  /// ourselves to not dumping tokens early. If you are not a Reserve team member\n  /// or investor, you don’t need to limit yourself in this way.\n  ///\n  /// THIS FUNCTION LOCKS YOUR TOKENS. ONLY USE IT IF YOU KNOW WHAT YOU ARE DOING.\n  function lockMyTokensForever(string consent) public returns (bool) {\n    require(keccak256(abi.encodePacked(consent)) == keccak256(abi.encodePacked(\n      \"I understand that I am locking my account forever, or at least until the next token upgrade.\"\n    )));\n    reserveTeamMemberOrEarlyInvestor[msg.sender] = true;\n    emit AccountLocked(msg.sender);\n  }\n}",
  "bytecode": "60c0604052600e60808190527f526573657276652052696768747300000000000000000000000000000000000060a090815262000040916005919062000895565b506040805180820190915260038082527f52535200000000000000000000000000000000000000000000000000000000006020909201918252620000879160069162000895565b506007805460ff191660121790556040805161048081018252738ad9c8ebe26eadab9251b8fc36cd06a1ec399a7f815273b268c230720d16c69a61cbee24731e3b2a3330a1602082015273082705fabf49bd30de8f0222821f6d940713b89d9181019190915273c3aa4ced5dea58a3d1ca76e507515c79ca1e443660608201527366f25f036eb4463d8a45c6594a325f9e89baa6db6080820152739e454fe7d8e087fcac4ec8c40562de781004477e60a0820152734fcc7ca22680aed155f981eeb13089383d624aa960c0820152735a66650e5345d76eb8136ea1490cbcce1c08072e60e082015273698a10b5d0972bffea306ba5950bd74d2af3c7ca61010082015273df437625216cca3d7148e18d09f4aab0d47c763b6101208201527324b4a6847ccb32972de40170c02fda121ddc6a30610140820152738d29a24f91df381feb4ee7f05405d3fb888c643e610160820152735a7350d95b9e644dcab4bc642707f43a361bf62861018082015273fc2e9a5cd1bb9b3953ffa7e6ddf0c0447eb95f116101a0820152733ac7a6c3a2ff08613b611485f795d07e785cbb956101c08201527347fc47cbcc5217740905e16c4c953b2f247369d26101e082015273d282337950ac6e936d0f0ebaaff1ffc3de79f3d561020082015273de59cd3aa43a2bf863723662b31906660c7d12b6610220820152735f84660cabb98f7b7764cd1ae2553442da91984e61024082015273efbaaf73fc22f70785515c1e2be3d5ba2fb8e9b06102608201527363c5ffb388d83477a15eb940cfa23991ca0b30f06102808201527314f018cce044f9d3fb1e1644db6f2fab70f6e3cb6102a082015273be30069d27a250f90c2ee5507bcaca5f868265f76102c082015273cfef27288bedcd587a1ed6e86a996c8c5b01d7c16102e0820152735f57bbccc7ffa4c46864b5ed999a271bc36bb0ce61030082015273bae85de9858375706dde5907c8c9c6ee22b19212610320820152735cf4bbb0ff093f3c725abec32fba8f34e4e98af161034082015273cb2d434bf72d3cd43d0c368493971183640ffe996103608201527302fc8e99401b970c265480140721b28bb3af85ab61038082015273e7ad11517d7254f6a0758cee932bffa328002dd06103a0820152736b39195c164d693d3b6518b70d99877d4f7c87ef6103c082015273c59119d8e4d129890036a108aed9d9fe94db1ba96103e082015273d28661e4c75d177d9c1f3c8b821902c1abd103a661040082015273ba385610025b1ea8091ae3e4a2e98913e2691ff761042082015273cd74834b8f3f71d2e82c6240ae0291c56378535661044082015273657a127639b9e0ccccfbe795a8e394d5ca158526610460820152620004739060099060246200091a565b503480156200048157600080fd5b50600080806200049a33640100000000620006d7810204565b6004805460ff19168155604080517f70a0823100000000000000000000000000000000000000000000000000000000815273fa3bd0b2ac6e63f16d16d7e449418837a8a3ae27928101839052905173c2646eda7c2d4bf131561141c1d5696c4f01eb5395509193506200057191849186916370a08231916024808201926020929091908290030181600087803b1580156200053457600080fd5b505af115801562000549573d6000803e3d6000fd5b505050506040513d60208110156200056057600080fd5b505164010000000062000729810204565b5060005b600954811015620006ce576001600860006009848154811015156200059657fe5b600091825260208083209190910154600160a060020a031683528201929092526040019020805460ff19169115159190911790556009805462000679919083908110620005df57fe5b60009182526020909120015460098054600160a060020a03928316928716916370a0823191869081106200060f57fe5b6000918252602080832090910154604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8716028152600160a060020a0390921660048301525160248083019491928390030190829087803b1580156200053457600080fd5b60098054829081106200068857fe5b6000918252602082200154604051600160a060020a03909116917f78be06d07afe380e04d6deeba0f33c892db454f303fb739d9b768987a5ec6aca91a260010162000575565b505050620009c7565b620006f260038264010000000062000cce620007e882021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b600160a060020a03821615156200073f57600080fd5b6002546200075c908264010000000062000c706200084382021704565b600255600160a060020a03821660009081526020819052604090205462000792908264010000000062000c706200084382021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a0381161515620007fe57600080fd5b6200081382826401000000006200085d810204565b156200081e57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000828201838110156200085657600080fd5b9392505050565b6000600160a060020a03821615156200087557600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620008d857805160ff191683800117855562000908565b8280016001018555821562000908579182015b8281111562000908578251825591602001919060010190620008eb565b506200091692915062000980565b5090565b82805482825590600052602060002090810192821562000972579160200282015b82811115620009725782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906200093b565b5062000916929150620009a0565b6200099d91905b8082111562000916576000815560010162000987565b90565b6200099d91905b8082111562000916578054600160a060020a0319168155600101620009a7565b610e6780620009d76000396000f3006080604052600436106101065763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303ff0fec811461010b57806306fdde0314610178578063095ea7b31461020257806318160ddd1461022657806323b872dd1461024d578063313ce5671461027757806339509351146102a25780633f4ba83a146102c657806346fbf68e146102dd5780635c975abb146102fe5780636ef8d66d1461031357806370a082311461032857806382dc1ec4146103495780638456cb591461036a57806391cdccec1461037f57806395d89b41146103a0578063a457c2d7146103b5578063a9059cbb146103d9578063dd62ed3e146103fd575b600080fd5b34801561011757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101649436949293602493928401919081908401838280828437509497506104249650505050505050565b604080519115158252519081900360200190f35b34801561018457600080fd5b5061018d610621565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c75781810151838201526020016101af565b50505050905090810190601f1680156101f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020e57600080fd5b50610164600160a060020a03600435166024356106af565b34801561023257600080fd5b5061023b6106d3565b60408051918252519081900360200190f35b34801561025957600080fd5b50610164600160a060020a03600435811690602435166044356106d9565b34801561028357600080fd5b5061028c610712565b6040805160ff9092168252519081900360200190f35b3480156102ae57600080fd5b50610164600160a060020a036004351660243561071b565b3480156102d257600080fd5b506102db610738565b005b3480156102e957600080fd5b50610164600160a060020a036004351661079c565b34801561030a57600080fd5b506101646107b5565b34801561031f57600080fd5b506102db6107be565b34801561033457600080fd5b5061023b600160a060020a03600435166107c9565b34801561035557600080fd5b506102db600160a060020a03600435166107e4565b34801561037657600080fd5b506102db610804565b34801561038b57600080fd5b50610164600160a060020a036004351661086a565b3480156103ac57600080fd5b5061018d61087f565b3480156103c157600080fd5b50610164600160a060020a03600435166024356108da565b3480156103e557600080fd5b50610164600160a060020a03600435166024356108f7565b34801561040957600080fd5b5061023b600160a060020a0360043581169060243516610925565b600060405160200180807f4920756e6465727374616e642074686174204920616d206c6f636b696e67206d81526020017f79206163636f756e7420666f72657665722c206f72206174206c65617374207581526020017f6e74696c20746865206e65787420746f6b656e20757067726164652e00000000815250605c0190506040516020818303038152906040526040518082805190602001908083835b602083106104e15780518252601f1990920191602091820191016104c2565b51815160209384036101000a60001901801990921691161790526040519190930181900381208751909550879450908301928392508401908083835b6020831061053c5780518252601f19909201916020918201910161051d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831061059f5780518252601f199092019160209182019101610580565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415156105dc57600080fd5b33600081815260086020526040808220805460ff19166001179055517f78be06d07afe380e04d6deeba0f33c892db454f303fb739d9b768987a5ec6aca9190a2919050565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106a75780601f1061067c576101008083540402835291602001916106a7565b820191906000526020600020905b81548152906001019060200180831161068a57829003601f168201915b505050505081565b60045460009060ff16156106c257600080fd5b6106cc8383610950565b9392505050565b60025490565b600160a060020a03831660009081526008602052604081205460ff16156106ff57600080fd5b61070a8484846109ce565b509392505050565b60075460ff1681565b60045460009060ff161561072e57600080fd5b6106cc83836109f4565b6107413361079c565b151561074c57600080fd5b60045460ff16151561075d57600080fd5b6004805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b60006107af60038363ffffffff610aa416565b92915050565b60045460ff1690565b6107c733610adb565b565b600160a060020a031660009081526020819052604090205490565b6107ed3361079c565b15156107f857600080fd5b61080181610b23565b50565b61080d3361079c565b151561081857600080fd5b60045460ff161561082857600080fd5b6004805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60086020526000908152604090205460ff1681565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106a75780601f1061067c576101008083540402835291602001916106a7565b60045460009060ff16156108ed57600080fd5b6106cc8383610b6b565b3360009081526008602052604081205460ff161561091457600080fd5b61091e8383610bb6565b5092915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000600160a060020a038316151561096757600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60045460009060ff16156109e157600080fd5b6109ec848484610bd3565b949350505050565b6000600160a060020a0383161515610a0b57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610a3f908363ffffffff610c7016565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000600160a060020a0382161515610abb57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b610aec60038263ffffffff610c8216565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b610b3460038263ffffffff610cce16565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6000600160a060020a0383161515610b8257600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610a3f908363ffffffff610d1c16565b60045460009060ff1615610bc957600080fd5b6106cc8383610d33565b600160a060020a0383166000908152600160209081526040808320338452909152812054821115610c0357600080fd5b600160a060020a0384166000908152600160209081526040808320338452909152902054610c37908363ffffffff610d1c16565b600160a060020a0385166000908152600160209081526040808320338452909152902055610c66848484610d49565b5060019392505050565b6000828201838110156106cc57600080fd5b600160a060020a0381161515610c9757600080fd5b610ca18282610aa4565b1515610cac57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381161515610ce357600080fd5b610ced8282610aa4565b15610cf757600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b60008083831115610d2c57600080fd5b5050900390565b6000610d40338484610d49565b50600192915050565b600160a060020a038316600090815260208190526040902054811115610d6e57600080fd5b600160a060020a0382161515610d8357600080fd5b600160a060020a038316600090815260208190526040902054610dac908263ffffffff610d1c16565b600160a060020a038085166000908152602081905260408082209390935590841681522054610de1908263ffffffff610c7016565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35050505600a165627a7a7230582035ca3c61410d40b9788a82587f07cb45c5568527aa574359eb3b4ddc261c88ac0029"
}