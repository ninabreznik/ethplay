{
  "address": "0x0a6d9d8e98146d5c36ef97c752df215854573536",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Factory",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-10\n*/\n\npragma solidity ^0.5.3;\n\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract RelayRegistry is Ownable {\n    \n    event AddedRelay(address relay);\n    event RemovedRelay(address relay);\n    \n    mapping (address => bool) public relays;\n    \n    constructor(address initialRelay) public {\n        relays[initialRelay] = true;\n    }\n    \n    function triggerRelay(address relay, bool value) onlyOwner public returns (bool) {\n        relays[relay] = value;\n        if(value) {\n            emit AddedRelay(relay);\n        } else {\n            emit RemovedRelay(relay);\n        }\n        return true;\n    }\n    \n}\n\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n}\n\n// All functions of SmartWallet Implementations should be called using delegatecall\ncontract SmartWallet {\n\n    event Upgrade(address indexed newImplementation);\n\n    // Shared key value store. Data should be encoded and decoded using abi.encode()/abi.decode() by different implementations\n    mapping (bytes32 => bytes) public store;\n    \n    modifier onlyRelay {\n        RelayRegistry registry = RelayRegistry(0xd23e2F482005a90FC2b8dcDd58affc05D5776cb7); // relay registry address\n        require(registry.relays(msg.sender));\n        _;\n    }\n    \n    modifier onlyOwner {\n        require(msg.sender == abi.decode(store[\"owner\"], (address)) || msg.sender == abi.decode(store[\"factory\"], (address)));\n        _;\n    }\n    \n    function initiate(address owner) public returns (bool) {\n        // this function can only be called by the factory\n        if(msg.sender != abi.decode(store[\"factory\"], (address))) return false;\n        // store current owner in key store\n        store[\"owner\"] = abi.encode(owner);\n        store[\"nonce\"] = abi.encode(0);\n        return true;\n    }\n    \n    // Called by factory to initiate state if deployment was relayed\n    function initiate(address owner, address relay, uint fee, address token) public returns (bool) {\n        require(initiate(owner), \"internal initiate failed\");\n        // Access ERC20 token\n        IERC20 tokenContract = IERC20(token);\n        // Send fee to relay\n        require(tokenContract.transfer(relay, fee), \"fee transfer failed\");\n        return true;\n    }\n    \n    function pay(address to, uint value, uint fee, address tokenContract, uint8 v, bytes32 r, bytes32 s) onlyRelay public returns (bool) {\n        uint currentNonce = abi.decode(store[\"nonce\"], (uint));\n        require(abi.decode(store[\"owner\"], (address)) == recover(keccak256(abi.encodePacked(msg.sender, to, tokenContract, abi.decode(store[\"factory\"], (address)), value, fee, tx.gasprice, currentNonce)), v, r, s));\n        IERC20 token = IERC20(tokenContract);\n        store[\"nonce\"] = abi.encode(currentNonce+1);\n        require(token.transfer(to, value));\n        require(token.transfer(msg.sender, fee));\n        return true;\n    }\n    \n    function pay(address to, uint value, address tokenContract) onlyOwner public returns (bool) {\n        IERC20 token = IERC20(tokenContract);\n        require(token.transfer(to, value));\n        return true;\n    }\n    \n    function pay(address[] memory to, uint[] memory value, address[] memory tokenContract) onlyOwner public returns (bool) {\n        for (uint i; i < to.length; i++) {\n            IERC20 token = IERC20(tokenContract[i]);\n            require(token.transfer(to[i], value[i]));\n        }\n        return true;\n    }\n    \n    function upgrade(address implementation, uint fee, address feeContract, uint8 v, bytes32 r, bytes32 s) onlyRelay public returns (bool) {\n        uint currentNonce = abi.decode(store[\"nonce\"], (uint));\n        address owner = abi.decode(store[\"owner\"], (address));\n        address factory = abi.decode(store[\"factory\"], (address));\n        require(owner == recover(keccak256(abi.encodePacked(msg.sender, implementation, feeContract, factory, fee, tx.gasprice, currentNonce)), v, r, s));\n        store[\"nonce\"] = abi.encode(currentNonce+1);\n        store[\"fallback\"] = abi.encode(implementation);\n        IERC20 feeToken = IERC20(feeContract);\n        require(feeToken.transfer(msg.sender, fee));\n        emit Upgrade(implementation);\n        return true;\n        \n    }\n    \n    function upgrade(address implementation) onlyOwner public returns (bool) {\n        store[\"fallback\"] = abi.encode(implementation);\n        emit Upgrade(implementation);\n        return true;\n    }\n    \n    \n    function recover(bytes32 messageHash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedMessageHash = keccak256(abi.encodePacked(prefix, messageHash));\n        return ecrecover(prefixedMessageHash, v, r, s);\n    }\n    \n}\n\ncontract Proxy {\n    \n    // Shared key value store. Data should be encoded and decoded using abi.encode()/abi.decode() by different implementations\n    mapping (bytes32 => bytes) public store;\n    \n    constructor() public {\n        // set implementation address in storage\n        store[\"fallback\"] = abi.encode(0x09892527914356473380b3Aebe1F96ce0DC6982C); // SmartWallet address\n        // set factory address in storage\n        store[\"factory\"] = abi.encode(msg.sender);\n    }\n    \n    // forwards everything as a delegatecall to appropriate address\n    function() external {\n        address impl = abi.decode(store[\"fallback\"], (address));\n        assembly {\n          let ptr := mload(0x40)\n        \n          // (1) copy incoming call data\n          calldatacopy(ptr, 0, calldatasize)\n        \n          // (2) forward call to logic contract\n          let result := delegatecall(gas, impl, ptr, calldatasize, 0, 0)\n          let size := returndatasize\n        \n          // (3) retrieve return data\n          returndatacopy(ptr, 0, size)\n\n          // (4) forward return data back to caller\n          switch result\n          case 0 { revert(ptr, size) }\n          default { return(ptr, size) }\n        }\n    }\n}\n\ncontract Factory {\n    \n    event Deployed(address indexed addr, address indexed owner);\n\n    modifier onlyRelay {\n        RelayRegistry registry = RelayRegistry(0xd23e2F482005a90FC2b8dcDd58affc05D5776cb7); // Relay Registry address\n        require(registry.relays(msg.sender));\n        _;\n    }\n\n    // internal create2 deployer\n    function deployCreate2(address owner) internal returns (address) {\n        bytes memory code = type(Proxy).creationCode;\n        address addr;\n        assembly {\n            // create2\n            addr := create2(0, add(code, 0x20), mload(code), owner)\n            // revert if contract was not created\n            if iszero(extcodesize(addr)) {revert(0, 0)}\n        }\n        return addr;\n    }\n\n    // create2 with a relayer\n    function deployWallet(uint fee, address token, uint8 v, bytes32 r, bytes32 s) onlyRelay public returns (address) {\n        address signer = recover(keccak256(abi.encodePacked(address(this), msg.sender, token, tx.gasprice, fee)), v, r, s);\n        address addr = deployCreate2(signer);\n        SmartWallet wallet = SmartWallet(uint160(addr));\n        require(wallet.initiate(signer, msg.sender, fee, token));\n        emit Deployed(addr, signer);\n        return addr;\n    }\n    \n    function deployWallet(uint fee, address token, address to, uint value, uint8 v, bytes32 r, bytes32 s) onlyRelay public returns (address addr) {\n        address signer = recover(keccak256(abi.encodePacked(address(this), msg.sender, token, to, tx.gasprice, fee, value)), v, r, s);\n        addr = deployCreate2(signer);\n        SmartWallet wallet = SmartWallet(uint160(addr));\n        require(wallet.initiate(signer, msg.sender, fee, token));\n        require(wallet.pay(to, value, token));\n        emit Deployed(addr, signer);\n    }\n    \n    // create2 directly from owner\n    function deployWallet() public returns (address) {\n        address addr = deployCreate2(msg.sender);\n        SmartWallet wallet = SmartWallet(uint160(addr));\n        require(wallet.initiate(msg.sender));\n        emit Deployed(addr, msg.sender);\n        return addr;\n        \n    }\n\n    // get create2\n    function getCreate2Address(address owner) public view returns (address) {\n        bytes32 temp = keccak256(abi.encodePacked(bytes1(0xff), address(this), uint(owner), bytes32(keccak256(type(Proxy).creationCode))));\n        address ret;\n        uint mask = 2 ** 160 - 1;\n        assembly {\n            ret := and(temp, mask)\n        }\n        return ret;\n    }\n    \n    function getCreate2Address() public view returns (address) {\n        return getCreate2Address(msg.sender);\n    }\n    \n    function canDeploy(address owner) public view returns (bool inexistent) {\n        address wallet = getCreate2Address(owner);\n        assembly {\n            inexistent := eq(extcodesize(wallet), 0)\n        }\n    }\n    \n    function canDeploy() public view returns (bool) {\n        return canDeploy(msg.sender);\n    }\n    \n    function recover(bytes32 messageHash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 prefixedMessageHash = keccak256(abi.encodePacked(prefix, messageHash));\n        return ecrecover(prefixedMessageHash, v, r, s);\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"deployWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"canDeploy\",\"outputs\":[{\"name\":\"inexistent\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getCreate2Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canDeploy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCreate2Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"deployWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"deployWallet\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5061162d806100206000396000f3fe608060405234801561001057600080fd5b506004361061009a576000357c01000000000000000000000000000000000000000000000000000000009004806380c60de91161007857806380c60de9146101c9578063bb36e10e146101eb578063ef0a9a4e14610235578063f0300e9c146102e45761009a565b806353535db91461009f578063569e0d29146100e957806367e3cb9414610145575b600080fd5b6100a76103bd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61012b600480360360208110156100ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610513565b604051808215151515815260200191505060405180910390f35b6101876004803603602081101561015b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061052e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101d1610677565b604051808215151515815260200191505060405180910390f35b6101f3610687565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102a2600480360360a081101561024b57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050610697565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61037b600480360360e08110156102fa57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050610a64565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000806103c933610f95565b905060008190508073ffffffffffffffffffffffffffffffffffffffff1663ca3d1598336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561046b57600080fd5b505af115801561047f573d6000803e3d6000fd5b505050506040513d602081101561049557600080fd5b810190808051906020019092919050505015156104b157600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f09e48df7857bd0c1e0d31bb8a85d42cf1874817895f171c917f6ee2cea73ec2060405160405180910390a3819250505090565b60008061051f8361052e565b90506000813b14915050919050565b60008060ff7f010000000000000000000000000000000000000000000000000000000000000002308473ffffffffffffffffffffffffffffffffffffffff166040518060200161057d9061110c565b602082018103825280604052508051906020012060405160200180857effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526001018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140183815260200182815260200194505050505060405160208183030381529060405280519060200120905060008073ffffffffffffffffffffffffffffffffffffffff90508083169150819350505050919050565b600061068233610513565b905090565b60006106923361052e565b905090565b60008073d23e2f482005a90fc2b8dcdd58affc05d5776cb790508073ffffffffffffffffffffffffffffffffffffffff1663cb8d406f336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561074a57600080fd5b505afa15801561075e573d6000803e3d6000fd5b505050506040513d602081101561077457600080fd5b8101908080519060200190929190505050151561079057600080fd5b60006108953033893a8c604051602001808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018381526020018281526020019550505050505060405160208183030381529060405280519060200120878787610fdd565b905060006108a282610f95565b905060008190508073ffffffffffffffffffffffffffffffffffffffff1663c8f0538184338d8d6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050602060405180830381600087803b1580156109b457600080fd5b505af11580156109c8573d6000803e3d6000fd5b505050506040513d60208110156109de57600080fd5b810190808051906020019092919050505015156109fa57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f09e48df7857bd0c1e0d31bb8a85d42cf1874817895f171c917f6ee2cea73ec2060405160405180910390a38194505050505095945050505050565b60008073d23e2f482005a90fc2b8dcdd58affc05d5776cb790508073ffffffffffffffffffffffffffffffffffffffff1663cb8d406f336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b1757600080fd5b505afa158015610b2b573d6000803e3d6000fd5b505050506040513d6020811015610b4157600080fd5b81019080805190602001909291905050501515610b5d57600080fd5b6000610cad30338b8b3a8f8d604051602001808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140184815260200183815260200182815260200197505050505050505060405160208183030381529060405280519060200120878787610fdd565b9050610cb881610f95565b925060008390508073ffffffffffffffffffffffffffffffffffffffff1663c8f0538183338e8e6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050602060405180830381600087803b158015610dca57600080fd5b505af1158015610dde573d6000803e3d6000fd5b505050506040513d6020811015610df457600080fd5b81019080805190602001909291905050501515610e1057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663f0fcc6bb8a8a8d6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050602060405180830381600087803b158015610ee757600080fd5b505af1158015610efb573d6000803e3d6000fd5b505050506040513d6020811015610f1157600080fd5b81019080805190602001909291905050501515610f2d57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f09e48df7857bd0c1e0d31bb8a85d42cf1874817895f171c917f6ee2cea73ec2060405160405180910390a3505050979650505050505050565b6000606060405180602001610fa99061110c565b6020820181038252806040525090506000838251602084016000f59050803b1515610fd357600080fd5b8092505050919050565b600060606040805190810160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152509050600081876040516020018083805190602001908083835b6020831015156110555780518252602082019150602081019050602083039250611030565b6001836020036101000a0380198251168184511680821785525050505050509050018281526020019250505060405160208183030381529060405280519060200120905060018187878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156110f6573d6000803e3d6000fd5b5050506020604051035192505050949350505050565b6104e88061111a8339019056fe608060405234801561001057600080fd5b507309892527914356473380b3aebe1f96ce0dc6982c604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040526000807f66616c6c6261636b000000000000000000000000000000000000000000000000815260200190815260200160002090805190602001906100b692919061014e565b5033604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040526000807f666163746f7279000000000000000000000000000000000000000000000000008152602001908152602001600020908051906020019061014892919061014e565b506101f3565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018f57805160ff19168380011785556101bd565b828001600101855582156101bd579182015b828111156101bc5782518255916020019190600101906101a1565b5b5090506101ca91906101ce565b5090565b6101f091905b808211156101ec5760008160009055506001016101d4565b5090565b90565b6102e6806102026000396000f3fe608060405234801561001057600080fd5b5060043610610048576000357c010000000000000000000000000000000000000000000000000000000090048063654cf88c14610163575b60008060007f66616c6c6261636b00000000000000000000000000000000000000000000000081526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101105780601f106100e557610100808354040283529160200191610110565b820191906000526020600020905b8154815290600101906020018083116100f357829003601f168201915b5050505050806020019051602081101561012957600080fd5b8101908080519060200190929190505050905060405136600082376000803683855af43d806000843e816000811461015f578184f35b8184fd5b61018f6004803603602081101561017957600080fd5b810190808035906020019092919050505061020a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cf5780820151818401526020810190506101b4565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60006020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102b25780601f10610287576101008083540402835291602001916102b2565b820191906000526020600020905b81548152906001019060200180831161029557829003601f168201915b50505050508156fea165627a7a72305820c3491345da30a25316f1a8cd1e2c4260ebdcdcdf4b94bfe3e623b46b928642450029a165627a7a7230582014ba335a4005d5e128242d50fd605d3bf991a4161c9085529c33b38981025cb90029"
}