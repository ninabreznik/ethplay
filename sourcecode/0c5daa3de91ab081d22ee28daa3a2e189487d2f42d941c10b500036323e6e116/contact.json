{
  "address": "0x521550e569bc80f1b4957c4f3fd3d677d9ca31f1",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KyberConnector",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-18\n*/\n\npragma solidity 0.4.24;\n\ncontract Utils {\n\n    modifier addressValid(address _address) {\n        require(_address != address(0), \"Utils::_ INVALID_ADDRESS\");\n        _;\n    }\n\n}\n\n\ncontract DSNote {\n    event LogNote(\n        bytes4   indexed  sig,\n        address  indexed  guy,\n        bytes32  indexed  foo,\n        bytes32  indexed  bar,\n        uint              wad,\n        bytes             fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n\ncontract WETH9 {\n    string public name     = \"Wrapped Ether\";\n    string public symbol   = \"WETH\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed _owner, address indexed _spender, uint _value);\n    event  Transfer(address indexed _from, address indexed _to, uint _value);\n    event  Deposit(address indexed _owner, uint _value);\n    event  Withdrawal(address indexed _owner, uint _value);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    function() public payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        msg.sender.transfer(wad);\n        Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return this.balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n        public\n        returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\ninterface ERC20 {\n\n    function name() external view returns(string);\n    function symbol() external view returns(string);\n    function decimals() external view returns(uint8);\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address tokenOwner) external view returns (uint balance);\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function approve(address spender, uint tokens) external returns (bool success);\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\ncontract DSAuthority {\n    function canCall(address src, address dst, bytes4 sig) public view returns (bool);\n}\n\ncontract DSAuthEvents {\n    event LogSetAuthority (address indexed authority);\n    event LogSetOwner     (address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority  public  authority;\n    address      public  owner;\n\n    constructor() public {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_)\n        public\n        auth\n    {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_)\n        public\n        auth\n    {\n        authority = authority_;\n        emit LogSetAuthority(authority);\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"DSAuth::_ SENDER_NOT_AUTHORIZED\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(0)) {\n            return false;\n        } else {\n            return authority.canCall(src, this, sig);\n        }\n    }\n}\n\n\ncontract ErrorUtils {\n\n    event LogError(string methodSig, string errMsg);\n    event LogErrorWithHintBytes32(bytes32 indexed bytes32Value, string methodSig, string errMsg);\n    event LogErrorWithHintAddress(address indexed addressValue, string methodSig, string errMsg);\n\n}\n\n\ncontract SelfAuthorized {\n    modifier authorized() {\n        require(msg.sender == address(this), \"Method can only be called from this contract\");\n        _;\n    }\n}\n\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n\n    // custom : not in original DSMath, putting it here for consistency, copied from SafeMath\n    function div(uint x, uint y) internal pure returns (uint z) {\n        z = x / y;\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n\ncontract MasterCopy is SelfAuthorized {\n  // masterCopy always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\n  // It should also always be ensured that the address is stored alone (uses a full word)\n    address masterCopy;\n\n  /// @dev Allows to upgrade the contract. This can only be done via a Safe transaction.\n  /// @param _masterCopy New contract address.\n    function changeMasterCopy(address _masterCopy)\n        public\n        authorized\n    {\n        // Master copy address cannot be null.\n        require(_masterCopy != 0, \"Invalid master copy address provided\");\n        masterCopy = _masterCopy;\n    }\n}\n\ninterface KyberNetworkProxy {\n\n    function maxGasPrice() external view returns(uint);\n    function getUserCapInWei(address user) external view returns(uint);\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\n    function enabled() external view returns(bool);\n    function info(bytes32 id) external view returns(uint);\n\n    function swapTokenToToken(ERC20 src, uint srcAmount, ERC20 dest, uint minConversionRate) external returns(uint);\n    function swapEtherToToken(ERC20 token, uint minConversionRate) external payable returns(uint);\n    function swapTokenToEther(ERC20 token, uint srcAmount, uint minConversionRate) external returns(uint);\n\n    function getExpectedRate\n    (\n        ERC20 src,\n        ERC20 dest, \n        uint srcQty\n    ) \n        external\n        view\n        returns \n    (\n        uint expectedRate,\n        uint slippageRate\n    );\n\n    function tradeWithHint\n    (\n        ERC20 src,\n        uint srcAmount,\n        ERC20 dest,\n        address destAddress,\n        uint maxDestAmount,\n        uint minConversionRate,\n        address walletId,\n        bytes hint\n    )\n        external \n        payable \n        returns(uint);\n        \n}\n\ncontract DSThing is DSNote, DSAuth, DSMath {\n\n    function S(string s) internal pure returns (bytes4) {\n        return bytes4(keccak256(s));\n    }\n\n}\n\n\ncontract Config is DSNote, DSAuth, Utils {\n\n    WETH9 public weth9;\n    mapping (address => bool) public isAccountHandler;\n    mapping (address => bool) public isAdmin;\n    address[] public admins;\n    bool public disableAdminControl = false;\n    \n    event LogAdminAdded(address indexed _admin, address _by);\n    event LogAdminRemoved(address indexed _admin, address _by);\n\n    constructor() public {\n        admins.push(msg.sender);\n        isAdmin[msg.sender] = true;\n    }\n\n    modifier onlyAdmin(){\n        require(isAdmin[msg.sender], \"Config::_ SENDER_NOT_AUTHORIZED\");\n        _;\n    }\n\n    function setWETH9\n    (\n        address _weth9\n    ) \n        public\n        auth\n        note\n        addressValid(_weth9) \n    {\n        weth9 = WETH9(_weth9);\n    }\n\n    function setAccountHandler\n    (\n        address _accountHandler,\n        bool _isAccountHandler\n    )\n        public\n        auth\n        note\n        addressValid(_accountHandler)\n    {\n        isAccountHandler[_accountHandler] = _isAccountHandler;\n    }\n\n    function toggleAdminsControl() \n        public\n        auth\n        note\n    {\n        disableAdminControl = !disableAdminControl;\n    }\n\n    function isAdminValid(address _admin)\n        public\n        view\n        returns (bool)\n    {\n        if(disableAdminControl) {\n            return true;\n        } else {\n            return isAdmin[_admin];\n        }\n    }\n\n    function getAllAdmins()\n        public\n        view\n        returns(address[])\n    {\n        return admins;\n    }\n\n    function addAdmin\n    (\n        address _admin\n    )\n        external\n        note\n        onlyAdmin\n        addressValid(_admin)\n    {   \n        require(!isAdmin[_admin], \"Config::addAdmin ADMIN_ALREADY_EXISTS\");\n\n        admins.push(_admin);\n        isAdmin[_admin] = true;\n\n        emit LogAdminAdded(_admin, msg.sender);\n    }\n\n    function removeAdmin\n    (\n        address _admin\n    ) \n        external\n        note\n        onlyAdmin\n        addressValid(_admin)\n    {   \n        require(isAdmin[_admin], \"Config::removeAdmin ADMIN_DOES_NOT_EXIST\");\n        require(msg.sender != _admin, \"Config::removeAdmin ADMIN_NOT_AUTHORIZED\");\n\n        isAdmin[_admin] = false;\n\n        for (uint i = 0; i < admins.length - 1; i++) {\n            if (admins[i] == _admin) {\n                admins[i] = admins[admins.length - 1];\n                admins.length -= 1;\n                break;\n            }\n        }\n\n        emit LogAdminRemoved(_admin, msg.sender);\n    }\n}\n\nlibrary ECRecovery {\n\n    function recover(bytes32 _hash, bytes _sig)\n        internal\n        pure\n    returns (address)\n    {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (_sig.length != 65) {\n            return (address(0));\n        }\n\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            v := byte(0, mload(add(_sig, 96)))\n        }\n\n        if (v < 27) {\n            v += 27;\n        }\n\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(_hash, v, r, s);\n        }\n    }\n\n    function toEthSignedMessageHash(bytes32 _hash)\n        internal\n        pure\n    returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\n        );\n    }\n}\n\n\ncontract Utils2 {\n    using ECRecovery for bytes32;\n    \n    function _recoverSigner(bytes32 _hash, bytes _signature) \n        internal\n        pure\n        returns(address _signer)\n    {\n        return _hash.toEthSignedMessageHash().recover(_signature);\n    }\n\n}\n\n\ncontract Account is MasterCopy, DSNote, Utils, Utils2, ErrorUtils {\n\n    address[] public users;\n    mapping (address => bool) public isUser;\n    mapping (bytes32 => bool) public actionCompleted;\n\n    WETH9 public weth9;\n    Config public config;\n    bool public isInitialized = false;\n\n    event LogTransferBySystem(address indexed token, address indexed to, uint value, address by);\n    event LogTransferByUser(address indexed token, address indexed to, uint value, address by);\n    event LogUserAdded(address indexed user, address by);\n    event LogUserRemoved(address indexed user, address by);\n    event LogImplChanged(address indexed newImpl, address indexed oldImpl);\n\n    modifier initialized() {\n        require(isInitialized, \"Account::_ ACCOUNT_NOT_INITIALIZED\");\n        _;\n    }\n\n    modifier notInitialized() {\n        require(!isInitialized, \"Account::_ ACCOUNT_ALREADY_INITIALIZED\");\n        _;\n    }\n\n    modifier userExists(address _user) {\n        require(isUser[_user], \"Account::_ INVALID_USER\");\n        _;\n    }\n\n    modifier userDoesNotExist(address _user) {\n        require(!isUser[_user], \"Account::_ USER_DOES_NOT_EXISTS\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(config.isAdminValid(msg.sender), \"Account::_ INVALID_ADMIN_ACCOUNT\");\n        _;\n    }\n\n    modifier onlyHandler(){\n        require(config.isAccountHandler(msg.sender), \"Account::_ INVALID_ACC_HANDLER\");\n        _;\n    }\n\n    function init(address _user, address _config)\n        public \n        notInitialized\n    {\n        users.push(_user);\n        isUser[_user] = true;\n        config = Config(_config);\n        weth9 = config.weth9();\n        isInitialized = true;\n    }\n    \n    function getAllUsers() public view returns (address[]) {\n        return users;\n    }\n\n    function balanceFor(address _token) public view returns (uint _balance){\n        _balance = ERC20(_token).balanceOf(this);\n    }\n    \n    function transferBySystem\n    (   \n        address _token,\n        address _to,\n        uint _value\n    ) \n        external \n        onlyHandler\n        note \n        initialized\n    {\n        require(ERC20(_token).balanceOf(this) >= _value, \"Account::transferBySystem INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n        ERC20(_token).transfer(_to, _value);\n\n        emit LogTransferBySystem(_token, _to, _value, msg.sender);\n    }\n    \n    function transferByUser\n    (   \n        address _token,\n        address _to,\n        uint _value,\n        uint _salt,\n        bytes _signature\n    )\n        external\n        addressValid(_to)\n        note\n        initialized\n        onlyAdmin\n    {\n        bytes32 actionHash = _getTransferActionHash(_token, _to, _value, _salt);\n\n        if(actionCompleted[actionHash]) {\n            emit LogError(\"Account::transferByUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        if(ERC20(_token).balanceOf(this) < _value){\n            emit LogError(\"Account::transferByUser\", \"INSUFFICIENT_BALANCE_IN_ACCOUNT\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::transferByUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n        \n        if (_token == address(weth9)) {\n            weth9.withdraw(_value);\n            _to.transfer(_value);\n        } else {\n            require(ERC20(_token).transfer(_to, _value), \"Account::transferByUser TOKEN_TRANSFER_FAILED\");\n        }\n\n        emit LogTransferByUser(_token, _to, _value, signer);\n    }\n\n    function addUser\n    (\n        address _user,\n        uint _salt,\n        bytes _signature\n    )\n        external \n        note \n        addressValid(_user)\n        userDoesNotExist(_user)\n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_user, \"ADD_USER\", _salt);\n        if(actionCompleted[actionHash])\n        {\n            emit LogError(\"Account::addUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::addUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n\n        users.push(_user);\n        isUser[_user] = true;\n\n        emit LogUserAdded(_user, signer);\n    }\n\n    function removeUser\n    (\n        address _user,\n        uint _salt,\n        bytes _signature\n    ) \n        external\n        note\n        userExists(_user) \n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_user, \"REMOVE_USER\", _salt);\n\n        if(actionCompleted[actionHash]) {\n            emit LogError(\"Account::removeUser\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n        \n        if(users.length == 1){\n            emit LogError(\"Account::removeUser\",  \"ACC_SHOULD_HAVE_ATLEAST_ONE_USER\");\n            return;\n        }\n        \n        if(!isUser[signer]){\n            emit LogError(\"Account::removeUser\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n        \n        actionCompleted[actionHash] = true;\n\n        // should delete value from isUser map? delete isUser[_user]?\n        isUser[_user] = false;\n        for (uint i = 0; i < users.length - 1; i++) {\n            if (users[i] == _user) {\n                users[i] = users[users.length - 1];\n                users.length -= 1;\n                break;\n            }\n        }\n\n        emit LogUserRemoved(_user, signer);\n    }\n\n    function _getTransferActionHash\n    ( \n        address _token,\n        address _to,\n        uint _value,\n        uint _salt\n    ) \n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                address(this),\n                _token,\n                _to,\n                _value,\n                _salt\n            )\n        );\n    }\n\n    function _getUserActionHash\n    ( \n        address _user,\n        string _action,\n        uint _salt\n    ) \n        internal\n        view\n        returns (bytes32)\n    {\n        return keccak256(\n            abi.encodePacked(\n                address(this),\n                _user,\n                _action,\n                _salt\n            )\n        );\n    }\n\n    // to directly send ether to contract\n    function() external payable {\n        require(msg.data.length == 0 && msg.value > 0, \"Account::fallback INVALID_ETHER_TRANSFER\");\n\n        if(msg.sender != address(weth9)){\n            weth9.deposit.value(msg.value)();\n        }\n    }\n\n    function changeImpl\n    (\n        address _to,\n        uint _salt,\n        bytes _signature\n    )\n        external \n        note \n        addressValid(_to)\n        initialized\n        onlyAdmin\n    {   \n        bytes32 actionHash = _getUserActionHash(_to, \"CHANGE_ACCOUNT_IMPLEMENTATION\", _salt);\n        if(actionCompleted[actionHash])\n        {\n            emit LogError(\"Account::changeImpl\", \"ACTION_ALREADY_PERFORMED\");\n            return;\n        }\n\n        address signer = _recoverSigner(actionHash, _signature);\n\n        if(!isUser[signer]) {\n            emit LogError(\"Account::changeImpl\", \"SIGNER_NOT_AUTHORIZED_WITH_ACCOUNT\");\n            return;\n        }\n\n        actionCompleted[actionHash] = true;\n\n        address oldImpl = masterCopy;\n        this.changeMasterCopy(_to);\n        \n        emit LogImplChanged(_to, oldImpl);\n    }\n\n}\n\n\ncontract Escrow is DSNote, DSAuth {\n\n    event LogTransfer(address indexed token, address indexed to, uint value);\n    event LogTransferFromAccount(address indexed account, address indexed token, address indexed to, uint value);\n\n    function transfer\n    (\n        address _token,\n        address _to,\n        uint _value\n    )\n        public\n        note\n        auth\n    {\n        require(ERC20(_token).transfer(_to, _value), \"Escrow::transfer TOKEN_TRANSFER_FAILED\");\n        emit LogTransfer(_token, _to, _value);\n    }\n\n    function transferFromAccount\n    (\n        address _account,\n        address _token,\n        address _to,\n        uint _value\n    )\n        public\n        note\n        auth\n    {   \n        Account(_account).transferBySystem(_token, _to, _value);\n        emit LogTransferFromAccount(_account, _token, _to, _value);\n    }\n\n}\n\n// issue with deploying multiple instances of same type in truffle, hence the following two contracts\ncontract KernelEscrow is Escrow {\n\n}\n\ncontract ReserveEscrow is Escrow {\n    \n}\n\n\ninterface ExchangeConnector {\n\n    function tradeWithInputFixed\n    (   \n        Escrow _escrow,\n        address _srcToken,\n        address _destToken,\n        uint _srcTokenValue\n    )\n        external\n        returns (uint _destTokenValue, uint _srcTokenValueLeft);\n\n    function tradeWithOutputFixed\n    (   \n        Escrow _escrow,\n        address _srcToken,\n        address _destToken,\n        uint _srcTokenValue,\n        uint _maxDestTokenValue\n    )\n        external\n        returns (uint _destTokenValue, uint _srcTokenValueLeft);\n    \n\n    function getExpectedRate(address _srcToken, address _destToken, uint _srcTokenValue) \n        external\n        view\n        returns(uint _expectedRate, uint _slippageRate);\n    \n    function isTradeFeasible(address _srcToken, address _destToken, uint _srcTokenValue) \n        external\n        view\n        returns(bool);\n\n}\ncontract KyberConnector is ExchangeConnector, DSThing, Utils {\n    KyberNetworkProxy public kyber;\n    address public feeWallet;\n\n    uint constant internal KYBER_MAX_QTY = (10**28);\n\n    constructor(KyberNetworkProxy _kyber, address _feeWallet) public {\n        kyber = _kyber;\n        feeWallet = _feeWallet;\n    }\n\n    function setKyber(KyberNetworkProxy _kyber) \n        public\n        auth\n        addressValid(_kyber)\n    {\n        kyber = _kyber;\n    }\n\n    function setFeeWallet(address _feeWallet) \n        public \n        note \n        auth\n        addressValid(_feeWallet)\n    {\n        feeWallet = _feeWallet;\n    }\n    \n\n    event LogTrade\n    (\n        address indexed _from,\n        address indexed _srcToken,\n        address indexed _destToken,\n        uint _srcTokenValue,\n        uint _maxDestTokenValue,\n        uint _destTokenValue,\n        uint _srcTokenValueLeft,\n        uint _exchangeRate\n    );\n\n    function tradeWithInputFixed\n    (   \n        Escrow _escrow,\n        address _srcToken,\n        address _destToken,\n        uint _srcTokenValue\n    )\n        public    \n        note\n        auth\n        returns (uint _destTokenValue, uint _srcTokenValueLeft)\n    {\n        return tradeWithOutputFixed(_escrow, _srcToken, _destToken, _srcTokenValue, KYBER_MAX_QTY);\n    }\n\n    function tradeWithOutputFixed\n    (   \n        Escrow _escrow,\n        address _srcToken,\n        address _destToken,\n        uint _srcTokenValue,\n        uint _maxDestTokenValue\n    )\n        public\n        note\n        auth\n        returns (uint _destTokenValue, uint _srcTokenValueLeft)\n    {   \n        require(_srcToken != _destToken, \"KyberConnector::tradeWithOutputFixed TOKEN_ADDRS_SHOULD_NOT_MATCH\");\n\n        uint _slippageRate;\n        (, _slippageRate) = getExpectedRate(_srcToken, _destToken, _srcTokenValue);\n\n        uint initialSrcTokenBalance = ERC20(_srcToken).balanceOf(this);\n\n        require(ERC20(_srcToken).balanceOf(_escrow) >= _srcTokenValue, \"KyberConnector::tradeWithOutputFixed INSUFFICIENT_BALANCE_IN_ESCROW\");\n        _escrow.transfer(_srcToken, this, _srcTokenValue);\n\n        require(ERC20(_srcToken).approve(kyber, 0), \"KyberConnector::tradeWithOutputFixed SRC_APPROVAL_FAILED\");\n        require(ERC20(_srcToken).approve(kyber, _srcTokenValue), \"KyberConnector::tradeWithOutputFixed SRC_APPROVAL_FAILED\");\n        \n        _destTokenValue = kyber.tradeWithHint(\n            ERC20(_srcToken),\n            _srcTokenValue,\n            ERC20(_destToken),\n            this,\n            _maxDestTokenValue,\n            _slippageRate, // no min coversation rate\n            feeWallet, \n            \"\"\n        );\n\n        _srcTokenValueLeft = sub(ERC20(_srcToken).balanceOf(this), initialSrcTokenBalance);\n\n        require(_transfer(_destToken, _escrow, _destTokenValue), \"KyberConnector::tradeWithOutputFixed DEST_TOKEN_TRANSFER_FAILED\");\n        \n        if(_srcTokenValueLeft > 0) {\n            require(_transfer(_srcToken, _escrow, _srcTokenValueLeft), \"KyberConnector::tradeWithOutputFixed SRC_TOKEN_TRANSFER_FAILED\");\n        }\n\n        emit LogTrade(_escrow, _srcToken, _destToken, _srcTokenValue, _maxDestTokenValue, _destTokenValue, _srcTokenValueLeft, _slippageRate);\n    } \n\n    function getExpectedRate(address _srcToken, address _destToken, uint _srcTokenValue) \n        public\n        view\n        returns(uint _expectedRate, uint _slippageRate)\n    {\n        (_expectedRate, _slippageRate) = kyber.getExpectedRate(ERC20(_srcToken), ERC20(_destToken), _srcTokenValue);\n    }\n\n    function isTradeFeasible(address _srcToken, address _destToken, uint _srcTokenValue) \n        public\n        view\n        returns(bool)\n    {\n        uint slippageRate; \n\n        (, slippageRate) = getExpectedRate(\n            _srcToken,\n            _destToken,\n            _srcTokenValue\n        );\n\n         return slippageRate == 0 ? false : true;\n    }\n\n    function _transfer\n    (\n        address _token,\n        address _to,\n        uint _value\n    )\n        internal\n        returns (bool)\n    {\n        return ERC20(_token).transfer(_to, _value);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcTokenValue\",\"type\":\"uint256\"}],\"name\":\"tradeWithInputFixed\",\"outputs\":[{\"name\":\"_destTokenValue\",\"type\":\"uint256\"},{\"name\":\"_srcTokenValueLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyber\",\"type\":\"address\"}],\"name\":\"setKyber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcTokenValue\",\"type\":\"uint256\"}],\"name\":\"isTradeFeasible\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"authority_\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcTokenValue\",\"type\":\"uint256\"}],\"name\":\"getExpectedRate\",\"outputs\":[{\"name\":\"_expectedRate\",\"type\":\"uint256\"},{\"name\":\"_slippageRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyber\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_escrow\",\"type\":\"address\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_srcTokenValue\",\"type\":\"uint256\"},{\"name\":\"_maxDestTokenValue\",\"type\":\"uint256\"}],\"name\":\"tradeWithOutputFixed\",\"outputs\":[{\"name\":\"_destTokenValue\",\"type\":\"uint256\"},{\"name\":\"_srcTokenValueLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kyber\",\"type\":\"address\"},{\"name\":\"_feeWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_srcToken\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_destToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_srcTokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_maxDestTokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_destTokenValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_srcTokenValueLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"LogTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"LogSetAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogSetOwner\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"foo\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"bar\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fax\",\"type\":\"bytes\"}],\"name\":\"LogNote\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755000000000000000000000000f12c4e73868a4a028382ac51b57482b627a323d2"
}