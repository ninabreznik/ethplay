{
  "address": "0xd7c49cee7e9188cca6ad8ff264c1da2e69d4cf3b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NXMToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-30\n*/\n\npragma solidity 0.5.7;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value)\n        external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value)\n        external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external view returns (uint256);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/* Copyright (C) 2017 NexusMutual.io\n\n  This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\n\n\n\n\n\n\n\ncontract NXMToken is IERC20 {\n    using SafeMath for uint256;\n\n    event WhiteListed(address indexed member);\n\n    event BlackListed(address indexed member);\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    mapping (address => bool) public whiteListed;\n\n    mapping(address => uint) public isLockedForMV;\n\n    uint256 private _totalSupply;\n\n    string public name = \"NXM\";\n    string public symbol = \"NXM\";\n    uint8 public decimals = 18;\n    address public operator;\n\n    modifier canTransfer(address _to) {\n        require(whiteListed[_to]);\n        _;\n    }\n\n    modifier onlyOperator() {\n        if (operator != address(0))\n            require(msg.sender == operator);\n        _;\n    }\n\n    constructor(address _founderAddress, uint _initialSupply) public {\n        _mint(_founderAddress, _initialSupply);\n    }\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n    * @param owner address The address which owns the funds.\n    * @param spender address The address which will spend the funds.\n    * @return A uint256 specifying the amount of tokens still available for the spender.\n    */\n    function allowance(\n        address owner,\n        address spender\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    * @param spender The address which will spend the funds.\n    * @param value The amount of tokens to be spent.\n    */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To increment\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param spender The address which will spend the funds.\n    * @param addedValue The amount of tokens to increase the allowance by.\n    */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    )\n        public\n        returns (bool)\n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].add(addedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n    * approve should be called when allowed_[_spender] == 0. To decrement\n    * allowed value is better to use this function to avoid 2 calls (and wait until\n    * the first transaction is mined)\n    * From MonolithDAO Token.sol\n    * @param spender The address which will spend the funds.\n    * @param subtractedValue The amount of tokens to decrease the allowance by.\n    */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    )\n        public\n        returns (bool)\n    {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = (\n        _allowed[msg.sender][spender].sub(subtractedValue));\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Adds a user to whitelist\n    * @param _member address to add to whitelist\n    */\n    function addToWhiteList(address _member) public onlyOperator returns (bool) {\n        whiteListed[_member] = true;\n        emit WhiteListed(_member);\n        return true;\n    }\n\n    /**\n    * @dev removes a user from whitelist\n    * @param _member address to remove from whitelist\n    */\n    function removeFromWhiteList(address _member) public onlyOperator returns (bool) {\n        whiteListed[_member] = false;\n        emit BlackListed(_member);\n        return true;\n    }\n\n    /**\n    * @dev change operator address \n    * @param _newOperator address of new operator\n    */\n    function changeOperator(address _newOperator) public onlyOperator returns (bool) {\n        operator = _newOperator;\n        return true;\n    }\n\n    /**\n    * @dev burns an amount of the tokens of the message sender\n    * account.\n    * @param amount The amount that will be burnt.\n    */\n    function burn(uint256 amount) public returns (bool) {\n        _burn(msg.sender, amount);\n        return true;\n    }\n\n    /**\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n    * @param from address The address which you want to send tokens from\n    * @param value uint256 The amount of token to be burned\n    */\n    function burnFrom(address from, uint256 value) public returns (bool) {\n        _burnFrom(from, value);\n        return true;\n    }\n\n    /**\n    * @dev function that mints an amount of the token and assigns it to\n    * an account.\n    * @param account The account that will receive the created tokens.\n    * @param amount The amount that will be created.\n    */\n    function mint(address account, uint256 amount) public onlyOperator {\n        _mint(account, amount);\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public canTransfer(to) returns (bool) {\n\n        require(isLockedForMV[msg.sender] < now); // if not voted under governance\n        require(value <= _balances[msg.sender]);\n        _transfer(to, value); \n        return true;\n    }\n\n    /**\n    * @dev Transfer tokens to the operator from the specified address\n    * @param from The address to transfer from.\n    * @param value The amount to be transferred.\n    */\n    function operatorTransfer(address from, uint256 value) public onlyOperator returns (bool) {\n        require(value <= _balances[from]);\n        _transferFrom(from, operator, value);\n        return true;\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param from address The address which you want to send tokens from\n    * @param to address The address which you want to transfer to\n    * @param value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        public\n        canTransfer(to)\n        returns (bool)\n    {\n        require(isLockedForMV[from] < now); // if not voted under governance\n        require(value <= _balances[from]);\n        require(value <= _allowed[from][msg.sender]);\n        _transferFrom(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Lock the user's tokens \n     * @param _of user's address.\n     */\n    function lockForMemberVote(address _of, uint _days) public onlyOperator {\n        if (_days.add(now) > isLockedForMV[_of])\n            isLockedForMV[_of] = _days.add(now);\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address to, uint256 value) internal {\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(msg.sender, to, value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param from address The address which you want to send tokens from\n    * @param to address The address which you want to transfer to\n    * @param value uint256 the amount of tokens to be transferred\n    */\n    function _transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        internal\n    {\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n    * @dev Internal function that mints an amount of the token and assigns it to\n    * an account. This encapsulates the modification of balances such that the\n    * proper events are emitted.\n    * @param account The account that will receive the created tokens.\n    * @param amount The amount that will be created.\n    */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0));\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account.\n    * @param account The account whose tokens will be burnt.\n    * @param amount The amount that will be burnt.\n    */\n    function _burn(address account, uint256 amount) internal {\n        require(amount <= _balances[account]);\n\n        _totalSupply = _totalSupply.sub(amount);\n        _balances[account] = _balances[account].sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n    * @dev Internal function that burns an amount of the token of a given\n    * account, deducting from the sender's allowance for said account. Uses the\n    * internal burn function.\n    * @param account The account whose tokens will be burnt.\n    * @param value The amount that will be burnt.\n    */\n    function _burnFrom(address account, uint256 value) internal {\n        require(value <= _allowed[account][msg.sender]);\n\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n        value);\n        _burn(account, value);\n    }\n}",
  "bytecode": "60c0604052600360808190527f4e584d000000000000000000000000000000000000000000000000000000000060a0908152620000409160059190620001bd565b506040805180820190915260038082527f4e584d000000000000000000000000000000000000000000000000000000000060209092019182526200008791600691620001bd565b506007805460ff19166012179055348015620000a257600080fd5b506040516040806200123383398101806040526040811015620000c457600080fd5b5080516020918201519091620000e29083908390620000ea811b901c565b505062000262565b6001600160a01b038216620000fe57600080fd5b6200011a81600454620001a360201b62000ce11790919060201c565b6004556001600160a01b038216600090815260208181526040909120546200014d91839062000ce1620001a3821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082820183811015620001b657600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020057805160ff191683800117855562000230565b8280016001018555821562000230579182015b828111156200023057825182559160200191906001019062000213565b506200023e92915062000242565b5090565b6200025f91905b808211156200023e576000815560010162000249565b90565b610fc180620002726000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80634c47e71d116100b857806398fd371f1161007c57806398fd371f14610405578063a457c2d71461042b578063a9059cbb14610457578063b0e65d0714610483578063dd62ed3e146104af578063fa0fca84146104dd57610142565b80634c47e71d1461035b578063570ca7351461038757806370a08231146103ab57806379cc6790146103d157806395d89b41146103fd57610142565b806323b872dd1161010a57806323b872dd1461026a578063313ce567146102a057806339509351146102be57806340c10f19146102ea57806342966c681461031857806347ee03941461033557610142565b806301bf66481461014757806306394c9b1461018157806306fdde03146101a7578063095ea7b31461022457806318160ddd14610250575b600080fd5b61016d6004803603602081101561015d57600080fd5b50356001600160a01b0316610503565b604080519115158252519081900360200190f35b61016d6004803603602081101561019757600080fd5b50356001600160a01b0316610586565b6101af6105e5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101e95781810151838201526020016101d1565b50505050905090810190601f1680156102165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61016d6004803603604081101561023a57600080fd5b506001600160a01b038135169060200135610673565b6102586106ef565b60408051918252519081900360200190f35b61016d6004803603606081101561028057600080fd5b506001600160a01b038135811691602081013590911690604001356106f5565b6102a86107ab565b6040805160ff9092168252519081900360200190f35b61016d600480360360408110156102d457600080fd5b506001600160a01b0381351690602001356107b4565b6103166004803603604081101561030057600080fd5b506001600160a01b038135169060200135610862565b005b61016d6004803603602081101561032e57600080fd5b50356108a2565b61016d6004803603602081101561034b57600080fd5b50356001600160a01b03166108b6565b6103166004803603604081101561037157600080fd5b506001600160a01b03813516906020013561093c565b61038f6109ca565b604080516001600160a01b039092168252519081900360200190f35b610258600480360360208110156103c157600080fd5b50356001600160a01b03166109de565b61016d600480360360408110156103e757600080fd5b506001600160a01b0381351690602001356109f9565b6101af610a0e565b6102586004803603602081101561041b57600080fd5b50356001600160a01b0316610a69565b61016d6004803603604081101561044157600080fd5b506001600160a01b038135169060200135610a7b565b61016d6004803603604081101561046d57600080fd5b506001600160a01b038135169060200135610ac4565b61016d6004803603604081101561049957600080fd5b506001600160a01b038135169060200135610b36565b610258600480360360408110156104c557600080fd5b506001600160a01b0381358116916020013516610bad565b61016d600480360360208110156104f357600080fd5b50356001600160a01b0316610bd8565b60075460009061010090046001600160a01b0316156105385760075461010090046001600160a01b0316331461053857600080fd5b6001600160a01b038216600081815260026020526040808220805460ff19169055517f7fd26be6fc92aff63f1f4409b2b2ddeb272a888031d7f55ec830485ec61941869190a2506001919050565b60075460009061010090046001600160a01b0316156105bb5760075461010090046001600160a01b031633146105bb57600080fd5b50600780546001600160a01b03831661010002610100600160a81b03199091161790556001919050565b6005805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561066b5780601f106106405761010080835404028352916020019161066b565b820191906000526020600020905b81548152906001019060200180831161064e57829003601f168201915b505050505081565b60006001600160a01b03831661068857600080fd5b3360008181526001602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60045490565b6001600160a01b038216600090815260026020526040812054839060ff1661071c57600080fd5b6001600160a01b038516600090815260036020526040902054421161074057600080fd5b6001600160a01b03851660009081526020819052604090205483111561076557600080fd5b6001600160a01b038516600090815260016020908152604080832033845290915290205483111561079557600080fd5b6107a0858585610bed565b506001949350505050565b60075460ff1681565b60006001600160a01b0383166107c957600080fd5b3360009081526001602090815260408083206001600160a01b03871684529091529020546107fd908363ffffffff610ce116565b3360008181526001602090815260408083206001600160a01b0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60075461010090046001600160a01b0316156108945760075461010090046001600160a01b0316331461089457600080fd5b61089e8282610cfa565b5050565b60006108ae3383610d90565b506001919050565b60075460009061010090046001600160a01b0316156108eb5760075461010090046001600160a01b031633146108eb57600080fd5b6001600160a01b038216600081815260026020526040808220805460ff19166001179055517f2e00aa132a0165955a7de5481083fd2933e22d472949147a9c3c69eec84c17009190a2506001919050565b60075461010090046001600160a01b03161561096e5760075461010090046001600160a01b0316331461096e57600080fd5b6001600160a01b038216600090815260036020526040902054610997824263ffffffff610ce116565b111561089e576109ad814263ffffffff610ce116565b6001600160a01b0383166000908152600360205260409020555050565b60075461010090046001600160a01b031681565b6001600160a01b031660009081526020819052604090205490565b6000610a058383610e37565b50600192915050565b6006805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561066b5780601f106106405761010080835404028352916020019161066b565b60036020526000908152604090205481565b60006001600160a01b038316610a9057600080fd5b3360009081526001602090815260408083206001600160a01b03871684529091529020546107fd908363ffffffff610ec916565b6001600160a01b038216600090815260026020526040812054839060ff16610aeb57600080fd5b336000908152600360205260409020544211610b0657600080fd5b33600090815260208190526040902054831115610b2257600080fd5b610b2c8484610ede565b5060019392505050565b60075460009061010090046001600160a01b031615610b6b5760075461010090046001600160a01b03163314610b6b57600080fd5b6001600160a01b038316600090815260208190526040902054821115610b9057600080fd5b600754610a0590849061010090046001600160a01b031684610bed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60026020526000908152604090205460ff1681565b6001600160a01b038316600090815260208190526040902054610c16908263ffffffff610ec916565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610c4b908263ffffffff610ce116565b6001600160a01b03808416600090815260208181526040808320949094559186168152600182528281203382529091522054610c8d908263ffffffff610ec916565b6001600160a01b0380851660008181526001602090815260408083203384528252918290209490945580518581529051928616939192600080516020610f76833981519152929181900390910190a3505050565b600082820183811015610cf357600080fd5b9392505050565b6001600160a01b038216610d0d57600080fd5b600454610d20908263ffffffff610ce116565b6004556001600160a01b038216600090815260208190526040902054610d4c908263ffffffff610ce116565b6001600160a01b038316600081815260208181526040808320949094558351858152935192939192600080516020610f768339815191529281900390910190a35050565b6001600160a01b038216600090815260208190526040902054811115610db557600080fd5b600454610dc8908263ffffffff610ec916565b6004556001600160a01b038216600090815260208190526040902054610df4908263ffffffff610ec916565b6001600160a01b03831660008181526020818152604080832094909455835185815293519193600080516020610f76833981519152929081900390910190a35050565b6001600160a01b0382166000908152600160209081526040808320338452909152902054811115610e6757600080fd5b6001600160a01b0382166000908152600160209081526040808320338452909152902054610e9b908263ffffffff610ec916565b6001600160a01b038316600090815260016020908152604080832033845290915290205561089e8282610d90565b600082821115610ed857600080fd5b50900390565b33600090815260208190526040902054610efe908263ffffffff610ec916565b33600090815260208190526040808220929092556001600160a01b03841681522054610f30908263ffffffff610ce116565b6001600160a01b03831660008181526020818152604091829020939093558051848152905191923392600080516020610f768339815191529281900390910190a3505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058205636618aaebcf707688f128e207c726f9916ddb1842350c4643f002d76b0e31c002900000000000000000000000087b2a7559d85f4653f13e6546a14189cd5455d450000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000087b2a7559d85f4653f13e6546a14189cd5455d450000000000000000000000000000000000000000000000000000000000000000"
}