{
  "address": "0xdfa4fd648a62408e141fb3f7977871f51ac82390",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InstaSave",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-01\n*/\n\npragma solidity ^0.5.0;\n\ninterface TubInterface {\n    function open() external returns (bytes32);\n    function join(uint) external;\n    function exit(uint) external;\n    function lock(bytes32, uint) external;\n    function free(bytes32, uint) external;\n    function draw(bytes32, uint) external;\n    function wipe(bytes32, uint) external;\n    function give(bytes32, address) external;\n    function shut(bytes32) external;\n    function cups(bytes32) external view returns (address, uint, uint, uint);\n    function gem() external view returns (TokenInterface);\n    function gov() external view returns (TokenInterface);\n    function skr() external view returns (TokenInterface);\n    function sai() external view returns (TokenInterface);\n    function ink(bytes32) external view returns (uint);\n    function tab(bytes32) external returns (uint);\n    function rap(bytes32) external returns (uint);\n    function per() external view returns (uint);\n    function pep() external view returns (PepInterface);\n}\n\ninterface PepInterface {\n    function peek() external returns (bytes32, bool);\n}\n\n\ninterface oracleInterface {\n    function read() external view returns (bytes32);\n}\n\ninterface UniswapExchange {\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns (uint256 ethSold);\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns (uint256 tokensSold);\n    function tokenToTokenSwapOutput(\n        uint256 tokensBought,\n        uint256 maxTokensSold,\n        uint256 maxEthSold,\n        uint256 deadline,\n        address tokenAddr\n        ) external returns (uint256  tokensSold);\n}\n\n\ninterface TokenInterface {\n    function allowance(address, address) external view returns (uint);\n    function balanceOf(address) external view returns (uint);\n    function approve(address, uint) external;\n    function transfer(address, uint) external returns (bool);\n    function transferFrom(address, address, uint) external returns (bool);\n    function deposit() external payable;\n    function withdraw(uint) external;\n}\n\ninterface KyberInterface {\n    function trade(\n        address src,\n        uint srcAmount,\n        address dest,\n        address destAddress,\n        uint maxDestAmount,\n        uint minConversionRate,\n        address walletId\n        ) external payable returns (uint);\n\n    function getExpectedRate(\n        address src,\n        address dest,\n        uint srcQty\n        ) external view returns (uint, uint);\n}\n\n\ncontract DSMath {\n\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"math-not-safe\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n}\n\n\ncontract Helpers is DSMath {\n\n    /**\n     * @dev get MakerDAO CDP engine\n     */\n    function getSaiTubAddress() public pure returns (address sai) {\n        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n    }\n\n    /**\n     * @dev get MakerDAO Oracle for ETH price\n     */\n    function getOracleAddress() public pure returns (address oracle) {\n        oracle = 0x729D19f657BD0614b4985Cf1D82531c67569197B;\n    }\n\n    /**\n     * @dev get uniswap MKR exchange\n     */\n    function getUniswapMKRExchange() public pure returns (address ume) {\n        ume = 0x2C4Bd064b998838076fa341A83d007FC2FA50957;\n    }\n\n    /**\n     * @dev get uniswap DAI exchange\n     */\n    function getUniswapDAIExchange() public pure returns (address ude) {\n        ude = 0x09cabEC1eAd1c0Ba254B09efb3EE13841712bE14;\n    }\n\n    /**\n     * @dev get ethereum address for trade\n     */\n    function getAddressETH() public pure returns (address eth) {\n        eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    }\n\n    /**\n     * @dev get ethereum address for trade\n     */\n    function getAddressDAI() public pure returns (address dai) {\n        dai = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359;\n    }\n\n    /**\n     * @dev get kyber proxy address\n     */\n    function getAddressKyber() public pure returns (address kyber) {\n        kyber = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    }\n\n    /**\n     * @dev get admin address\n     */\n    function getAddressAdmin() public pure returns (address payable admin) {\n        admin = 0x7284a8451d9a0e7Dc62B3a71C0593eA2eC5c5638;\n    }\n\n    function getCDPStats(bytes32 cup) internal view returns (uint ethCol, uint daiDebt, uint usdPerEth) {\n        TubInterface tub = TubInterface(getSaiTubAddress());\n        usdPerEth = uint(oracleInterface(getOracleAddress()).read());\n        (, uint pethCol, uint debt,) = tub.cups(cup);\n        ethCol = rmul(pethCol, tub.per()); // get ETH col from PETH col\n        daiDebt = debt;\n    }\n\n}\n\n\ncontract MakerHelpers is Helpers {\n\n    event LogLock(uint cdpNum, uint amtETH, uint amtPETH, address owner);\n    event LogFree(uint cdpNum, uint amtETH, uint amtPETH, address owner);\n    event LogDraw(uint cdpNum, uint amtDAI, address owner);\n    event LogWipe(uint cdpNum, uint daiAmt, uint mkrFee, uint daiFee, address owner);\n\n    function setAllowance(TokenInterface _token, address _spender) internal {\n        if (_token.allowance(address(this), _spender) != uint(-1)) {\n            _token.approve(_spender, uint(-1));\n        }\n    }\n\n    function lock(uint cdpNum, uint ethAmt) internal {\n        if (ethAmt > 0) {\n            bytes32 cup = bytes32(cdpNum);\n            address tubAddr = getSaiTubAddress();\n\n            TubInterface tub = TubInterface(tubAddr);\n            TokenInterface weth = tub.gem();\n            TokenInterface peth = tub.skr();\n\n            (address lad,,,) = tub.cups(cup);\n            require(lad == address(this), \"cup-not-owned\");\n\n            weth.deposit.value(ethAmt)();\n\n            uint ink = rdiv(ethAmt, tub.per());\n            ink = rmul(ink, tub.per()) <= ethAmt ? ink : ink - 1;\n\n            setAllowance(weth, tubAddr);\n            tub.join(ink);\n\n            setAllowance(peth, tubAddr);\n            tub.lock(cup, ink);\n\n            emit LogLock(\n                cdpNum,\n                ethAmt,\n                ink,\n                address(this)\n            );\n        }\n    }\n\n    function free(uint cdpNum, uint jam) internal {\n        if (jam > 0) {\n            bytes32 cup = bytes32(cdpNum);\n            address tubAddr = getSaiTubAddress();\n\n            TubInterface tub = TubInterface(tubAddr);\n            TokenInterface peth = tub.skr();\n            TokenInterface weth = tub.gem();\n\n            uint ink = rdiv(jam, tub.per());\n            ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\n            tub.free(cup, ink);\n\n            setAllowance(peth, tubAddr);\n\n            tub.exit(ink);\n            uint freeJam = weth.balanceOf(address(this)); // withdraw possible previous stuck WETH as well\n            weth.withdraw(freeJam);\n\n            emit LogFree(\n                cdpNum,\n                freeJam,\n                ink,\n                address(this)\n            );\n        }\n    }\n\n    function draw(uint cdpNum, uint _wad) internal {\n        bytes32 cup = bytes32(cdpNum);\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n\n            tub.draw(cup, _wad);\n\n            emit LogDraw(cdpNum, _wad, address(this));\n        }\n    }\n\n    function wipe(uint cdpNum, uint _wad) internal {\n        if (_wad > 0) {\n            TubInterface tub = TubInterface(getSaiTubAddress());\n            UniswapExchange daiEx = UniswapExchange(getUniswapDAIExchange());\n            UniswapExchange mkrEx = UniswapExchange(getUniswapMKRExchange());\n            TokenInterface dai = tub.sai();\n            TokenInterface mkr = tub.gov();\n\n            bytes32 cup = bytes32(cdpNum);\n\n            (address lad,,,) = tub.cups(cup);\n            require(lad == address(this), \"cup-not-owned\");\n\n            setAllowance(dai, getSaiTubAddress());\n            setAllowance(mkr, getSaiTubAddress());\n            setAllowance(dai, getUniswapDAIExchange());\n\n            (bytes32 val, bool ok) = tub.pep().peek();\n\n            // tub.rap(cup) = stability fee in $, tub.tab(cup) = total DAI debt\n            uint mkrFee = wdiv(rmul(_wad, rdiv(tub.rap(cup), tub.tab(cup))), uint(val));\n\n            uint daiFeeAmt = daiEx.getTokenToEthOutputPrice(mkrEx.getEthToTokenOutputPrice(mkrFee));\n            uint daiAmt = sub(_wad, daiFeeAmt);\n\n            if (ok && val != 0) {\n                daiEx.tokenToTokenSwapOutput(\n                    mkrFee,\n                    daiFeeAmt,\n                    uint(999000000000000000000),\n                    uint(1899063809), // 6th March 2030 GMT // no logic\n                    address(mkr)\n                );\n            }\n\n            tub.wipe(cup, daiAmt);\n\n            emit LogWipe(\n                cdpNum,\n                _wad,\n                mkrFee,\n                daiFeeAmt,\n                address(this)\n            );\n\n        }\n    }\n\n}\n\n\ncontract GetDetails is MakerHelpers {\n\n    function getMax(uint cdpID) public view returns (uint maxColToFree, uint maxDaiToDraw) {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        uint colToUSD = wmul(ethCol, usdPerEth) - 10;\n        uint minColNeeded = wmul(daiDebt, 1500000000000000000) + 10;\n        maxColToFree = wdiv(sub(colToUSD, minColNeeded), usdPerEth);\n        uint maxDebtLimit = wdiv(colToUSD, 1500000000000000000) - 10;\n        maxDaiToDraw = sub(maxDebtLimit, daiDebt);\n    }\n\n    function getSave(uint cdpID, uint ethToSwap) public view returns (uint finalEthCol, uint finalDaiDebt, uint finalColToUSD, bool canSave) {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        (finalEthCol, finalDaiDebt, finalColToUSD, canSave) = checkSave(\n            ethCol,\n            daiDebt,\n            usdPerEth,\n            ethToSwap\n        );\n    }\n\n    function checkSave(\n        uint ethCol,\n        uint daiDebt,\n        uint usdPerEth,\n        uint ethToSwap\n    ) internal view returns\n    (\n        uint finalEthCol,\n        uint finalDaiDebt,\n        uint finalColToUSD,\n        bool canSave\n    )\n    {\n        uint colToUSD = wmul(ethCol, usdPerEth) - 10;\n        uint minColNeeded = wmul(daiDebt, 1500000000000000000) + 10;\n        uint colToFree = wdiv(sub(colToUSD, minColNeeded), usdPerEth);\n        if (ethToSwap < colToFree) {\n            colToFree = ethToSwap;\n        }\n        (uint expectedRate,) = KyberInterface(getAddressKyber()).getExpectedRate(getAddressETH(), getAddressDAI(), colToFree);\n        expectedRate = wdiv(wmul(expectedRate, 99750000000000000000), 100000000000000000000);\n        uint expectedDAI = wmul(colToFree, expectedRate);\n        if (expectedDAI < daiDebt) {\n            finalEthCol = sub(ethCol, colToFree);\n            finalDaiDebt = sub(daiDebt, expectedDAI);\n            finalColToUSD = wmul(finalEthCol, usdPerEth);\n            canSave = true;\n        } else {\n            finalEthCol = 0;\n            finalDaiDebt = 0;\n            finalColToUSD = 0;\n            canSave = false;\n        }\n    }\n\n    function getLeverage(\n        uint cdpID,\n        uint daiToSwap\n    ) public view returns (\n        uint finalEthCol,\n        uint finalDaiDebt,\n        uint finalColToUSD,\n        bool canLeverage\n    )\n    {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        (finalEthCol, finalDaiDebt, finalColToUSD, canLeverage) = checkLeverage(\n            ethCol,\n            daiDebt,\n            usdPerEth,\n            daiToSwap\n        );\n    }\n\n    function checkLeverage(\n        uint ethCol,\n        uint daiDebt,\n        uint usdPerEth,\n        uint daiToSwap\n    ) internal view returns\n    (\n        uint finalEthCol,\n        uint finalDaiDebt,\n        uint finalColToUSD,\n        bool canLeverage\n    )\n    {\n        uint colToUSD = wmul(ethCol, usdPerEth) - 10;\n        uint maxDebtLimit = wdiv(colToUSD, 1500000000000000000) - 10;\n        uint debtToBorrow = sub(maxDebtLimit, daiDebt);\n        if (daiToSwap < debtToBorrow) {\n            debtToBorrow = daiToSwap;\n        }\n        (uint expectedRate,) = KyberInterface(getAddressKyber()).getExpectedRate(getAddressDAI(), getAddressETH(), debtToBorrow);\n        expectedRate = wdiv(wmul(expectedRate, 99750000000000000000), 100000000000000000000);\n        uint expectedETH = wmul(debtToBorrow, expectedRate);\n        if (ethCol != 0) {\n            finalEthCol = add(ethCol, expectedETH);\n            finalDaiDebt = maxDebtLimit;\n            finalColToUSD = wmul(finalEthCol, usdPerEth);\n            canLeverage = true;\n        } else {\n            finalEthCol = 0;\n            finalDaiDebt = 0;\n            finalColToUSD = 0;\n            canLeverage = false;\n        }\n    }\n\n}\n\n\ncontract Save is GetDetails {\n\n    /**\n     * @param what 2 for SAVE & 3 for LEVERAGE\n     */\n    event LogTrade(\n        uint what, // 2 for SAVE & 3 for LEVERAGE\n        address src,\n        uint srcAmt,\n        address dest,\n        uint destAmt,\n        address beneficiary,\n        uint minConversionRate,\n        address affiliate\n    );\n\n    function getColToFree(uint ethCol, uint daiDebt, uint usdPerEth) internal pure returns (uint colToFree) {\n        uint colToUSD = sub(wmul(ethCol, usdPerEth), 10);\n        uint minColNeeded = add(wmul(daiDebt, 1500000000000000000), 10);\n        colToFree = sub(wdiv(sub(colToUSD, minColNeeded), usdPerEth), 10);\n    }\n\n    function save(uint cdpID, uint colToSwap) public {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        uint colToFree = getColToFree(ethCol, daiDebt, usdPerEth);\n        require(colToFree != 0, \"No-collatral-to-free\");\n        if (colToSwap < colToFree) {\n            colToFree = colToSwap;\n        }\n        uint thisBalance = address(this).balance;\n        free(cdpID, colToFree);\n        uint ethToSwap = wdiv(wmul(colToFree, 99750000000000000000), 100000000000000000000);\n        getAddressAdmin().transfer(sub(colToFree, ethToSwap));\n        uint destAmt = KyberInterface(getAddressKyber()).trade.value(ethToSwap)(\n            getAddressETH(),\n            colToFree,\n            getAddressDAI(),\n            address(this),\n            daiDebt,\n            0,\n            getAddressAdmin()\n        );\n        wipe(cdpID, destAmt);\n\n        if (thisBalance < address(this).balance) {\n            uint balToLock = address(this).balance - thisBalance;\n            lock(cdpID, balToLock);\n        }\n\n        emit LogTrade(\n            2,\n            getAddressETH(),\n            colToFree,\n            getAddressDAI(),\n            destAmt,\n            address(this),\n            0,\n            getAddressAdmin()\n        );\n    }\n\n    function getDebtToBorrow(uint ethCol, uint daiDebt, uint usdPerEth) internal pure returns (uint debtToBorrow) {\n        uint colToUSD = sub(wmul(ethCol, usdPerEth), 10);\n        uint maxDebtLimit = sub(wdiv(colToUSD, 1500000000000000000), 10);\n        debtToBorrow = sub(maxDebtLimit, daiDebt);\n    }\n\n    function leverage(uint cdpID, uint daiToSwap) public {\n        bytes32 cup = bytes32(cdpID);\n        (uint ethCol, uint daiDebt, uint usdPerEth) = getCDPStats(cup);\n        uint debtToBorrow = getDebtToBorrow(ethCol, daiDebt, usdPerEth);\n        require(debtToBorrow != 0, \"No-debt-to-borrow\");\n        if (daiToSwap < debtToBorrow) {\n            debtToBorrow = daiToSwap;\n        }\n        draw(cdpID, debtToBorrow);\n        setAllowance(TokenInterface(getAddressDAI()), getAddressKyber());\n        uint destAmt = KyberInterface(getAddressKyber()).trade.value(0)(\n            getAddressDAI(),\n            debtToBorrow,\n            getAddressETH(),\n            address(this),\n            2**255,\n            0,\n            getAddressAdmin()\n        );\n        uint ethToDeposit = wdiv(wmul(destAmt, 99750000000000000000), 100000000000000000000);\n        getAddressAdmin().transfer(sub(destAmt, ethToDeposit));\n        lock(cdpID, ethToDeposit);\n        emit LogTrade(\n            3,\n            getAddressDAI(),\n            debtToBorrow,\n            getAddressETH(),\n            destAmt,\n            address(this),\n            0,\n            getAddressAdmin()\n        );\n    }\n\n}\n\n\ncontract InstaSave is Save {\n\n    uint public version;\n\n    /**\n     * @dev setting up variables on deployment\n     * 1...2...3 versioning in each subsequent deployments\n     */\n    constructor(uint _version) public {\n        version = _version;\n    }\n\n    function() external payable {}\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516020806133958339810180604052602081101561003057600080fd5b8101908080519060200190929190505050806000819055505061333d806100586000396000f3fe6080604052600436106100ca576000357c01000000000000000000000000000000000000000000000000000000009004806354fd4d50146100cc57806357fc0363146100f75780635e96263c1461013c5780636c47c7ed1461018157806391b0b618146101f357806394c4a1241461024a578063ab1be686146102a1578063adbd80b0146102f8578063b18b78dd1461034f578063c865463c146103a6578063db5a5d99146103fd578063e254ae5a14610454578063e688f89d146104c6578063f1d9a1501461051c575b005b3480156100d857600080fd5b506100e1610573565b6040518082815260200191505060405180910390f35b34801561010357600080fd5b5061013a6004803603604081101561011a57600080fd5b810190808035906020019092919080359060200190929190505050610579565b005b34801561014857600080fd5b5061017f6004803603604081101561015f57600080fd5b810190808035906020019092919080359060200190929190505050610a10565b005b34801561018d57600080fd5b506101c4600480360360408110156101a457600080fd5b810190808035906020019092919080359060200190929190505050610e7a565b604051808581526020018481526020018381526020018215151515815260200194505050505060405180910390f35b3480156101ff57600080fd5b50610208610ec5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025657600080fd5b5061025f610ee1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ad57600080fd5b506102b6610efd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561030457600080fd5b5061030d610f19565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561035b57600080fd5b50610364610f35565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b257600080fd5b506103bb610f51565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561040957600080fd5b50610412610f6d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046057600080fd5b506104976004803603604081101561047757600080fd5b810190808035906020019092919080359060200190929190505050610f89565b604051808581526020018481526020018381526020018215151515815260200194505050505060405180910390f35b3480156104d257600080fd5b506104ff600480360360208110156104e957600080fd5b8101908080359060200190929190505050610fd4565b604051808381526020018281526020019250505060405180910390f35b34801561052857600080fd5b50610531611063565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60005481565b6000826001029050600080600061058f8461107f565b92509250925060006105a28484846112bd565b90506000811415151561061d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f2d636f6c6c617472616c2d746f2d6672656500000000000000000000000081525060200191505060405180910390fd5b80861015610629578590505b60003073ffffffffffffffffffffffffffffffffffffffff1631905061064f888361131e565b6000610676610667846805684f3080793700006118ec565b68056bc75e2d63100000611930565b9050610680610f19565b73ffffffffffffffffffffffffffffffffffffffff166108fc6106a3858461196c565b9081150290604051600060405180830381858888f193505050501580156106ce573d6000803e3d6000fd5b5060006106d9610ec5565b73ffffffffffffffffffffffffffffffffffffffff1663cb3c28c7836106fd610efd565b87610706610f51565b308c6000610712610f19565b6040518963ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019750505050505050506020604051808303818588803b15801561083d57600080fd5b505af1158015610851573d6000803e3d6000fd5b50505050506040513d602081101561086857600080fd5b810190808051906020019092919050505090506108858a826119f1565b3073ffffffffffffffffffffffffffffffffffffffff16318310156108ce576000833073ffffffffffffffffffffffffffffffffffffffff16310390506108cc8b8261236b565b505b7f11e25872c1ff01460756fe30988d586790d81915aa1ed26f716b966a0fcc196c60026108f9610efd565b86610902610f51565b8530600061090e610f19565b604051808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019850505050505050505060405180910390a150505050505050505050565b60008260010290506000806000610a268461107f565b9250925092506000610a398484846129d1565b905060008114151515610ab4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4e6f2d646562742d746f2d626f72726f7700000000000000000000000000000081525060200191505060405180910390fd5b80861015610ac0578590505b610aca8782612a1f565b610ae2610ad5610f51565b610add610ec5565b612b45565b6000610aec610ec5565b73ffffffffffffffffffffffffffffffffffffffff1663cb3c28c76000610b11610f51565b85610b1a610efd565b307f80000000000000000000000000000000000000000000000000000000000000006000610b46610f19565b6040518963ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019750505050505050506020604051808303818588803b158015610c7157600080fd5b505af1158015610c85573d6000803e3d6000fd5b50505050506040513d6020811015610c9c57600080fd5b810190808051906020019092919050505090506000610cd6610cc7836805684f3080793700006118ec565b68056bc75e2d63100000611930565b9050610ce0610f19565b73ffffffffffffffffffffffffffffffffffffffff166108fc610d03848461196c565b9081150290604051600060405180830381858888f19350505050158015610d2e573d6000803e3d6000fd5b50610d39898261236b565b7f11e25872c1ff01460756fe30988d586790d81915aa1ed26f716b966a0fcc196c6003610d64610f51565b85610d6d610efd565b86306000610d79610f19565b604051808981526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019850505050505050505060405180910390a1505050505050505050565b60008060008060008660010290506000806000610e968461107f565b925092509250610ea88383838c612d55565b809850819950829a50839b50505050505050505092959194509250565b600073818e6fecd516ecc3849daf6845e3ec868087b755905090565b6000732c4bd064b998838076fa341a83d007fc2fa50957905090565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee905090565b6000737284a8451d9a0e7dc62b3a71c0593ea2ec5c5638905090565b600073729d19f657bd0614b4985cf1d82531c67569197b905090565b60007389d24a6b4ccb1b6faa2625fe562bdd9a23260359905090565b60007309cabec1ead1c0ba254b09efb3ee13841712be14905090565b60008060008060008660010290506000806000610fa58461107f565b925092509250610fb78383838c612f66565b809850819950829a50839b50505050505050505092959194509250565b60008060008360010290506000806000610fed8461107f565b9250925092506000600a61100185846118ec565b0390506000600a61101a856714d1120d7b1600006118ec565b01905061103061102a838361196c565b84611930565b97506000600a611048846714d1120d7b160000611930565b039050611055818661196c565b975050505050505050915091565b600073448a5065aebb8e423f0896e6c5d525c040f59af3905090565b60008060008061108d611063565b9050611097610f35565b73ffffffffffffffffffffffffffffffffffffffff166357de26a46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156110f857600080fd5b505afa15801561110c573d6000803e3d6000fd5b505050506040513d602081101561112257600080fd5b81019080805190602001909291905050506001900491506000808273ffffffffffffffffffffffffffffffffffffffff1663fdac0025886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060806040518083038186803b1580156111a957600080fd5b505afa1580156111bd573d6000803e3d6000fd5b505050506040513d60808110156111d357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050505092509250506112ae828473ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561126e57600080fd5b505afa158015611282573d6000803e3d6000fd5b505050506040513d602081101561129857600080fd5b8101908080519060200190929190505050613167565b95508094505050509193909250565b6000806112d46112cd86856118ec565b600a61196c565b905060006112f46112ed866714d1120d7b1600006118ec565b600a6131b3565b905061131361130c611306848461196c565b86611930565b600a61196c565b925050509392505050565b60008111156118e85760008260010290506000611339611063565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff16630f8a771e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156113a457600080fd5b505afa1580156113b8573d6000803e3d6000fd5b505050506040513d60208110156113ce57600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561144557600080fd5b505afa158015611459573d6000803e3d6000fd5b505050506040513d602081101561146f57600080fd5b81019080805190602001909291905050509050600061152a878573ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156114ea57600080fd5b505afa1580156114fe573d6000803e3d6000fd5b505050506040513d602081101561151457600080fd5b8101908080519060200190929190505050613238565b9050866115d3828673ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d60208110156115bd57600080fd5b8101908080519060200190929190505050613167565b11156115e257600181036115e4565b805b90508373ffffffffffffffffffffffffffffffffffffffff1663a5cd184e87836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561165d57600080fd5b505af1158015611671573d6000803e3d6000fd5b5050505061167f8386612b45565b8373ffffffffffffffffffffffffffffffffffffffff16637f8661a1826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b1580156116ee57600080fd5b505af1158015611702573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156117a157600080fd5b505afa1580156117b5573d6000803e3d6000fd5b505050506040513d60208110156117cb57600080fd5b810190808051906020019092919050505090508273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561184d57600080fd5b505af1158015611861573d6000803e3d6000fd5b505050507fbc364e2c948b1a58aa818f1d663cbf625acb9d3e827d8ba7661ee805ae63506089828430604051808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505050505b5050565b6000670de0b6b3a764000061191e6119048585613278565b6002670de0b6b3a764000081151561191857fe5b046131b3565b81151561192757fe5b04905092915050565b60008161195a61194885670de0b6b3a7640000613278565b60028581151561195457fe5b046131b3565b81151561196357fe5b04905092915050565b600082828403915081111515156119eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f64732d6d6174682d7375622d756e646572666c6f77000000000000000000000081525060200191505060405180910390fd5b92915050565b6000811115612367576000611a04611063565b90506000611a10610f6d565b90506000611a1c610ee1565b905060008373ffffffffffffffffffffffffffffffffffffffff16639166cba46040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611a8257600080fd5b505afa158015611a96573d6000803e3d6000fd5b505050506040513d6020811015611aac57600080fd5b8101908080519060200190929190505050905060008473ffffffffffffffffffffffffffffffffffffffff166312d43a516040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611b2357600080fd5b505afa158015611b37573d6000803e3d6000fd5b505050506040513d6020811015611b4d57600080fd5b81019080805190602001909291905050509050600087600102905060008673ffffffffffffffffffffffffffffffffffffffff1663fdac0025836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060806040518083038186803b158015611bd757600080fd5b505afa158015611beb573d6000803e3d6000fd5b505050506040513d6080811015611c0157600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611cd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6375702d6e6f742d6f776e65640000000000000000000000000000000000000081525060200191505060405180910390fd5b611ce984611ce4611063565b612b45565b611cfa83611cf5611063565b612b45565b611d0b84611d06610f6d565b612b45565b6000808873ffffffffffffffffffffffffffffffffffffffff1663ace237f56040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611d7057600080fd5b505afa158015611d84573d6000803e3d6000fd5b505050506040513d6020811015611d9a57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff166359e02dd76040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016040805180830381600087803b158015611e0d57600080fd5b505af1158015611e21573d6000803e3d6000fd5b505050506040513d6040811015611e3757600080fd5b810190808051906020019092919080519060200190929190505050915091506000611fca611fc08c611fbb8d73ffffffffffffffffffffffffffffffffffffffff16636f78ee0d8a6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611ed157600080fd5b505af1158015611ee5573d6000803e3d6000fd5b505050506040513d6020811015611efb57600080fd5b81019080805190602001909291905050508e73ffffffffffffffffffffffffffffffffffffffff1663f7c8d6348b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015611f7b57600080fd5b505af1158015611f8f573d6000803e3d6000fd5b505050506040513d6020811015611fa557600080fd5b8101908080519060200190929190505050613238565b613167565b8460019004611930565b905060008973ffffffffffffffffffffffffffffffffffffffff16632640f62c8a73ffffffffffffffffffffffffffffffffffffffff166359e94862856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561205757600080fd5b505afa15801561206b573d6000803e3d6000fd5b505050506040513d602081101561208157600080fd5b81019080805190602001909291905050506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156120e257600080fd5b505afa1580156120f6573d6000803e3d6000fd5b505050506040513d602081101561210c57600080fd5b81019080805190602001909291905050509050600061212b8d8361196c565b905083801561213e575060006001028514155b15612248578a73ffffffffffffffffffffffffffffffffffffffff1663b040d5458484683627e8f712373c00006371316a018d6040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200195505050505050602060405180830381600087803b15801561220b57600080fd5b505af115801561221f573d6000803e3d6000fd5b505050506040513d602081101561223557600080fd5b8101908080519060200190929190505050505b8b73ffffffffffffffffffffffffffffffffffffffff166373b3810188836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b1580156122bf57600080fd5b505af11580156122d3573d6000803e3d6000fd5b505050507fc61fae64789cde417503f7bd67082d71c8379712017e446877dd1c26b1bf4c9c8e8e858530604051808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a15050505050505050505050505b5050565b60008111156129cd5760008260010290506000612386611063565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156123f157600080fd5b505afa158015612405573d6000803e3d6000fd5b505050506040513d602081101561241b57600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff16630f8a771e6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561249257600080fd5b505afa1580156124a6573d6000803e3d6000fd5b505050506040513d60208110156124bc57600080fd5b8101908080519060200190929190505050905060008373ffffffffffffffffffffffffffffffffffffffff1663fdac0025876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060806040518083038186803b15801561253e57600080fd5b505afa158015612552573d6000803e3d6000fd5b505050506040513d608081101561256857600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919050505050505090503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151561263f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6375702d6e6f742d6f776e65640000000000000000000000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b1580156126a357600080fd5b505af11580156126b7573d6000803e3d6000fd5b50505050506000612764888673ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b15801561272457600080fd5b505afa158015612738573d6000803e3d6000fd5b505050506040513d602081101561274e57600080fd5b8101908080519060200190929190505050613238565b90508761280d828773ffffffffffffffffffffffffffffffffffffffff16637ec9c3b86040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156127cd57600080fd5b505afa1580156127e1573d6000803e3d6000fd5b505050506040513d60208110156127f757600080fd5b8101908080519060200190929190505050613167565b111561281c576001810361281e565b805b905061282a8487612b45565b8473ffffffffffffffffffffffffffffffffffffffff1663049878f3826040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561289957600080fd5b505af11580156128ad573d6000803e3d6000fd5b505050506128bb8387612b45565b8473ffffffffffffffffffffffffffffffffffffffff1663b3b77a5188836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b15801561293257600080fd5b505af1158015612946573d6000803e3d6000fd5b505050507fa66947e0e444664290dad9ea8bdc946a0662a93c04cc0db7dc993a19319d39ed89898330604051808581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200194505050505060405180910390a1505050505050505b5050565b6000806129e86129e186856118ec565b600a61196c565b90506000612a08612a01836714d1120d7b160000611930565b600a61196c565b9050612a14818661196c565b925050509392505050565b60008260010290506000821115612b40576000612a3a611063565b90508073ffffffffffffffffffffffffffffffffffffffff1663440f19ba83856040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b158015612ab357600080fd5b505af1158015612ac7573d6000803e3d6000fd5b505050507f2552409de7c93ad237013bdc31f6351559f2d50c8b43d20b83fc75639a55e431848430604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505b505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8273ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015612c3357600080fd5b505afa158015612c47573d6000803e3d6000fd5b505050506040513d6020811015612c5d57600080fd5b8101908080519060200190929190505050141515612d51578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612d3857600080fd5b505af1158015612d4c573d6000803e3d6000fd5b505050505b5050565b6000806000806000600a612d698a896118ec565b0390506000600a612d828a6714d1120d7b1600006118ec565b0190506000612d9a612d94848461196c565b8a611930565b905080881015612da8578790505b6000612db2610ec5565b73ffffffffffffffffffffffffffffffffffffffff1663809a9e55612dd5610efd565b612ddd610f51565b856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604080518083038186803b158015612e9357600080fd5b505afa158015612ea7573d6000803e3d6000fd5b505050506040513d6040811015612ebd57600080fd5b810190808051906020019092919080519060200190929190505050509050612f00612ef1826805684f3080793700006118ec565b68056bc75e2d63100000611930565b90506000612f0e83836118ec565b90508b811015612f4557612f228d8461196c565b9850612f2e8c8261196c565b9750612f3a898c6118ec565b965060019550612f56565b600098506000975060009650600095505b5050505050945094509450949050565b6000806000806000600a612f7a8a896118ec565b0390506000600a612f93836714d1120d7b160000611930565b0390506000612fa2828b61196c565b905080881015612fb0578790505b6000612fba610ec5565b73ffffffffffffffffffffffffffffffffffffffff1663809a9e55612fdd610f51565b612fe5610efd565b856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604080518083038186803b15801561309b57600080fd5b505afa1580156130af573d6000803e3d6000fd5b505050506040513d60408110156130c557600080fd5b8101908080519060200190929190805190602001909291905050505090506131086130f9826805684f3080793700006118ec565b68056bc75e2d63100000611930565b9050600061311683836118ec565b905060008d1415156131465761312c8d826131b3565b985083975061313b898c6118ec565b965060019550613157565b600098506000975060009650600095505b5050505050945094509450949050565b60006b033b2e3c9fd0803ce80000006131a16131838585613278565b60026b033b2e3c9fd0803ce800000081151561319b57fe5b046131b3565b8115156131aa57fe5b04905092915050565b60008282840191508110151515613232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b600081613266613254856b033b2e3c9fd0803ce8000000613278565b60028581151561326057fe5b046131b3565b81151561326f57fe5b04905092915050565b6000808214806132975750828283850292508281151561329457fe5b04145b151561330b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6d6174682d6e6f742d736166650000000000000000000000000000000000000081525060200191505060405180910390fd5b9291505056fea165627a7a72305820fe02f444daf7569c092053b9f2e6a534d3721c2d36f88f6a7c4d62bd5e2eee3500290000000000000000000000000000000000000000000000000000000000000001",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000001"
}