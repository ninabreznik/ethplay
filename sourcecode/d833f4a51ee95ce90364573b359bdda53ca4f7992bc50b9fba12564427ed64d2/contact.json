{
  "address": "0x53b04999c1ff2d77fcdde98935bb936a67209e4c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "VeilEther",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-13\n*/\n\npragma solidity 0.4.24;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract UnlimitedAllowanceToken is IERC20 {\n  using SafeMath for uint256;\n\n  /* ============ State variables ============ */\n\n  uint256 public totalSupply;\n  mapping (address => uint256) public  balances;\n  mapping (address => mapping (address => uint256)) public allowed;\n\n  /* ============ Events ============ */\n\n  event Approval(address indexed src, address indexed spender, uint256 amount);\n  event Transfer(address indexed src, address indexed dest, uint256 amount);\n\n  /* ============ Constructor ============ */\n\n  constructor () public { }\n\n  /* ============ Public functions ============ */\n\n  function approve(address _spender, uint256 _amount) public returns (bool) {\n    allowed[msg.sender][_spender] = _amount;\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  function transfer(address _dest, uint256 _amount) public returns (bool) {\n    return transferFrom(msg.sender, _dest, _amount);\n  }\n\n  function transferFrom(address _src, address _dest, uint256 _amount) public returns (bool) {\n    require(balances[_src] >= _amount, \"Insufficient user balance\");\n\n    if (_src != msg.sender && allowance(_src, msg.sender) != uint256(-1)) {\n      require(allowance(_src, msg.sender) >= _amount, \"Insufficient user allowance\");\n      allowed[_src][msg.sender] = allowed[_src][msg.sender].sub(_amount);\n    }\n\n    balances[_src] = balances[_src].sub(_amount);\n    balances[_dest] = balances[_dest].add(_amount);\n\n    emit Transfer(_src, _dest, _amount);\n\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return totalSupply;\n  }\n}\n\n\n/**\n * @title VeilEther\n * @author Veil\n *\n * WETH-like token with the ability to deposit ETH and approve in a single transaction\n */\ncontract VeilEther is UnlimitedAllowanceToken {\n  using SafeMath for uint256;\n\n  /* ============ Constants ============ */\n\n  string constant public name = \"Veil Ether\"; // solium-disable-line uppercase\n  string constant public symbol = \"Veil ETH\"; // solium-disable-line uppercase\n  uint256 constant public decimals = 18; // solium-disable-line uppercase\n\n  /* ============ Events ============ */\n\n  event Deposit(address indexed dest, uint256 amount);\n  event Withdrawal(address indexed src, uint256 amount);\n\n  /* ============ Constructor ============ */\n\n  constructor () public { }\n\n  /* ============ Public functions ============ */\n\n  /**\n   * @dev Fallback function can be used to buy tokens by proxying the call to deposit()\n   */\n  function() public payable {\n    deposit();\n  }\n\n  /* ============ New functionality ============ */\n\n  /**\n   * Buys tokens with Ether, exchanging them 1:1 and sets the spender allowance\n   *\n   * @param _spender          Spender address for the allowance\n   * @param _allowance        Allowance amount\n   */\n  function depositAndApprove(address _spender, uint256 _allowance) public payable returns (bool) {\n    deposit();\n    approve(_spender, _allowance);\n    return true;\n  }\n\n  /**\n   * Withdraws from msg.sender's balance and transfers to a target address instead of msg.sender\n   *\n   * @param _amount           Amount to withdraw\n   * @param _target           Address to send the withdrawn ETH\n   */\n  function withdrawAndTransfer(uint256 _amount, address _target) public returns (bool) {\n    require(balances[msg.sender] >= _amount, \"Insufficient user balance\");\n    require(_target != address(0), \"Invalid target address\");\n\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    totalSupply = totalSupply.sub(_amount);\n    _target.transfer(_amount);\n\n    emit Withdrawal(msg.sender, _amount);\n    return true;\n  }\n\n  /* ============ Standard WETH functionality ============ */\n\n  function deposit() public payable returns (bool) {\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\n    totalSupply = totalSupply.add(msg.value);\n    emit Deposit(msg.sender, msg.value);\n    return true;\n  }\n\n  function withdraw(uint256 _amount) public returns (bool) {\n    require(balances[msg.sender] >= _amount, \"Insufficient user balance\");\n\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    totalSupply = totalSupply.sub(_amount);\n    msg.sender.transfer(_amount);\n\n    emit Withdrawal(msg.sender, _amount);\n    return true;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"withdrawAndTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_src\",\"type\":\"address\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_allowance\",\"type\":\"uint256\"}],\"name\":\"depositAndApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50610a40806100206000396000f3006080604052600436106100da5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e5578063095ea7b31461016f57806317d9bfcb146101a757806318160ddd146101cb57806323b872dd146101f257806327e235e31461021c57806328026ace1461023d5780632e1a7d4d14610254578063313ce5671461026c5780635c6581651461028157806370a08231146102a857806395d89b41146102c9578063a9059cbb146102de578063d0e30db014610302578063dd62ed3e1461030a575b6100e2610331565b50005b3480156100f157600080fd5b506100fa6103b4565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561013457818101518382015260200161011c565b50505050905090810190601f1680156101615780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017b57600080fd5b50610193600160a060020a03600435166024356103eb565b604080519115158252519081900360200190f35b3480156101b357600080fd5b50610193600435600160a060020a0360243516610451565b3480156101d757600080fd5b506101e06105d5565b60408051918252519081900360200190f35b3480156101fe57600080fd5b50610193600160a060020a03600435811690602435166044356105db565b34801561022857600080fd5b506101e0600160a060020a03600435166107ed565b610193600160a060020a03600435166024356107ff565b34801561026057600080fd5b5061019360043561081e565b34801561027857600080fd5b506101e0610938565b34801561028d57600080fd5b506101e0600160a060020a036004358116906024351661093d565b3480156102b457600080fd5b506101e0600160a060020a036004351661095a565b3480156102d557600080fd5b506100fa610975565b3480156102ea57600080fd5b50610193600160a060020a03600435166024356109ac565b610193610331565b34801561031657600080fd5b506101e0600160a060020a03600435811690602435166109c0565b33600090815260016020526040812054610351903463ffffffff6109eb16565b3360009081526001602052604081209190915554610375903463ffffffff6109eb16565b60005560408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a250600190565b60408051808201909152600a81527f5665696c20457468657200000000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b336000908152600160205260408120548311156104b8576040805160e560020a62461bcd02815260206004820152601960248201527f496e73756666696369656e7420757365722062616c616e636500000000000000604482015290519081900360640190fd5b600160a060020a0382161515610518576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c696420746172676574206164647265737300000000000000000000604482015290519081900360640190fd5b33600090815260016020526040902054610538908463ffffffff6109fd16565b336000908152600160205260408120919091555461055c908463ffffffff6109fd16565b6000908155604051600160a060020a0384169185156108fc02918691818181858888f19350505050158015610595573d6000803e3d6000fd5b5060408051848152905133917f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65919081900360200190a250600192915050565b60005490565b600160a060020a03831660009081526001602052604081205482111561064b576040805160e560020a62461bcd02815260206004820152601960248201527f496e73756666696369656e7420757365722062616c616e636500000000000000604482015290519081900360640190fd5b600160a060020a038416331480159061066f575060001961066c85336109c0565b14155b1561072e578161067f85336109c0565b10156106d5576040805160e560020a62461bcd02815260206004820152601b60248201527f496e73756666696369656e74207573657220616c6c6f77616e63650000000000604482015290519081900360640190fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054610709908363ffffffff6109fd16565b600160a060020a03851660009081526002602090815260408083203384529091529020555b600160a060020a038416600090815260016020526040902054610757908363ffffffff6109fd16565b600160a060020a03808616600090815260016020526040808220939093559085168152205461078c908363ffffffff6109eb16565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b60016020526000908152604090205481565b6000610809610331565b5061081483836103eb565b5060019392505050565b33600090815260016020526040812054821115610885576040805160e560020a62461bcd02815260206004820152601960248201527f496e73756666696369656e7420757365722062616c616e636500000000000000604482015290519081900360640190fd5b336000908152600160205260409020546108a5908363ffffffff6109fd16565b33600090815260016020526040812091909155546108c9908363ffffffff6109fd16565b6000908155604051339184156108fc02918591818181858888f193505050501580156108f9573d6000803e3d6000fd5b5060408051838152905133917f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65919081900360200190a2506001919050565b601281565b600260209081526000928352604080842090915290825290205481565b600160a060020a031660009081526001602052604090205490565b60408051808201909152600881527f5665696c20455448000000000000000000000000000000000000000000000000602082015281565b60006109b93384846105db565b9392505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b6000828201838110156109b957600080fd5b60008083831115610a0d57600080fd5b50509003905600a165627a7a72305820477b4d0c0102260a075d1f8320bdd91de3ae743e7aefaf16928e62cd2bcbf06c0029"
}