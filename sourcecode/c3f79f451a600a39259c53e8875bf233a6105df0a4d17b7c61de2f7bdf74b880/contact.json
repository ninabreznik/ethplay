{
  "address": "0x7e9d365c0c97fe5fcadcc1b513af974b768c5867",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OctusToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-22\n*/\n\npragma solidity ^0.4.15;\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\nlibrary SafeMath {\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value > 0);\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_value > 0);\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require(_value > 0);\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    require(_addedValue > 0);\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    require(_subtractedValue > 0);\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  function burn(uint256 _value) public {\n    require(_value > 0);\n    require(_value <= balances[msg.sender]);\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    Burn(burner, _value);\n  }\n}\n\n\ncontract OctusToken is StandardToken, BurnableToken {\n\n  string public constant name = \"Octus\"; \n  string public constant symbol = \"OCT\"; \n  uint8 public constant decimals = 18; \n\n  uint256 public constant INITIAL_SUPPLY = 2500000 * (10 ** uint256(decimals));\n\n  function OctusToken() public {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n  }\n\n}",
  "bytecode": "6060604052341561000f57600080fd5b6a02116545850052128000006000818155600160a060020a0333168082526001602052604080832084905590927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef915190815260200160405180910390a36109968061007c6000396000f3006060604052600436106100c45763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100c9578063095ea7b31461015357806318160ddd1461018957806323b872dd146101ae5780632ff2e9dc146101d6578063313ce567146101e957806342966c6814610212578063661884631461022a57806370a082311461024c57806395d89b411461026b578063a9059cbb1461027e578063d73dd623146102a0578063dd62ed3e146102c2575b600080fd5b34156100d457600080fd5b6100dc6102e7565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610118578082015183820152602001610100565b50505050905090810190601f1680156101455780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015e57600080fd5b610175600160a060020a036004351660243561031e565b604051901515815260200160405180910390f35b341561019457600080fd5b61019c610395565b60405190815260200160405180910390f35b34156101b957600080fd5b610175600160a060020a036004358116906024351660443561039b565b34156101e157600080fd5b61019c610529565b34156101f457600080fd5b6101fc610538565b60405160ff909116815260200160405180910390f35b341561021d57600080fd5b61022860043561053d565b005b341561023557600080fd5b610175600160a060020a0360043516602435610606565b341561025757600080fd5b61019c600160a060020a036004351661070e565b341561027657600080fd5b6100dc610729565b341561028957600080fd5b610175600160a060020a0360043516602435610760565b34156102ab57600080fd5b610175600160a060020a0360043516602435610867565b34156102cd57600080fd5b61019c600160a060020a0360043581169060243516610917565b60408051908101604052600581527f4f63747573000000000000000000000000000000000000000000000000000000602082015281565b600080821161032c57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b60008082116103a957600080fd5b600160a060020a03831615156103be57600080fd5b600160a060020a0384166000908152600160205260409020548211156103e357600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561041657600080fd5b600160a060020a03841660009081526001602052604090205461043f908363ffffffff61094216565b600160a060020a038086166000908152600160205260408082209390935590851681522054610474908363ffffffff61095416565b600160a060020a038085166000908152600160209081526040808320949094558783168252600281528382203390931682529190915220546104bc908363ffffffff61094216565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b6a021165458500521280000081565b601281565b600080821161054b57600080fd5b600160a060020a03331660009081526001602052604090205482111561057057600080fd5b5033600160a060020a0381166000908152600160205260409020546105959083610942565b600160a060020a038216600090815260016020526040812091909155546105c2908363ffffffff61094216565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b60008080831161061557600080fd5b50600160a060020a033381166000908152600260209081526040808320938716835292905220548083111561067157600160a060020a0333811660009081526002602090815260408083209388168352929052908120556106a8565b610681818463ffffffff61094216565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60408051908101604052600381527f4f43540000000000000000000000000000000000000000000000000000000000602082015281565b600080821161076e57600080fd5b600160a060020a038316151561078357600080fd5b600160a060020a0333166000908152600160205260409020548211156107a857600080fd5b600160a060020a0333166000908152600160205260409020546107d1908363ffffffff61094216565b600160a060020a033381166000908152600160205260408082209390935590851681522054610806908363ffffffff61095416565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600080821161087557600080fd5b600160a060020a033381166000908152600260209081526040808320938716835292905220546108ab908363ffffffff61095416565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561094e57fe5b50900390565b60008282018381101561096357fe5b93925050505600a165627a7a723058203b2b12c18fb3e5647c759514e15cddd3b90a7e89c81b0893e89311093c41c9f80029"
}