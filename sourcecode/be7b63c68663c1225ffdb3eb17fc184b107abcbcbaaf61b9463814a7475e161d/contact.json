{
  "address": "0x8b3d70d628ebd30d4a2ea82db95ba2e906c71633",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BZxVault",
  "compilerVersion": "v0.5.2+commit.1df8f40c",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-24\n*/\n\n/**\n * Copyright 2017â€“2019, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n \npragma solidity 0.5.2;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract BZxOwnable is Ownable {\n\n    address public bZxContractAddress;\n\n    event BZxOwnershipTransferred(address indexed previousBZxContract, address indexed newBZxContract);\n\n    // modifier reverts if bZxContractAddress isn't set\n    modifier onlyBZx() {\n        require(msg.sender == bZxContractAddress, \"only bZx contracts can call this function\");\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer the bZx contract owner to a new contract address\n    * @param newBZxContractAddress The bZx contract address to transfer ownership to.\n    */\n    function transferBZxOwnership(address newBZxContractAddress) public onlyOwner {\n        require(newBZxContractAddress != address(0) && newBZxContractAddress != owner, \"transferBZxOwnership::unauthorized\");\n        emit BZxOwnershipTransferred(bZxContractAddress, newBZxContractAddress);\n        bZxContractAddress = newBZxContractAddress;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    * This overrides transferOwnership in Ownable to prevent setting the new owner the same as the bZxContract\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0) && newOwner != bZxContractAddress, \"transferOwnership::unauthorized\");\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ninterface NonCompliantEIP20 {\n    function transfer(address _to, uint256 _value) external;\n    function transferFrom(address _from, address _to, uint256 _value) external;\n    function approve(address _spender, uint256 _value) external;\n}\n\ncontract EIP20Wrapper {\n\n    function eip20Transfer(\n        address token,\n        address to,\n        uint256 value)\n        internal\n        returns (bool result) {\n\n        NonCompliantEIP20(token).transfer(to, value);\n\n        assembly {\n            switch returndatasize()   \n            case 0 {                        // non compliant ERC20\n                result := not(0)            // result is true\n            }\n            case 32 {                       // compliant ERC20\n                returndatacopy(0, 0, 32) \n                result := mload(0)          // result == returndata of external call\n            }\n            default {                       // not an not an ERC20 token\n                revert(0, 0) \n            }\n        }\n\n        require(result, \"eip20Transfer failed\");\n    }\n\n    function eip20TransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value)\n        internal\n        returns (bool result) {\n\n        NonCompliantEIP20(token).transferFrom(from, to, value);\n\n        assembly {\n            switch returndatasize()   \n            case 0 {                        // non compliant ERC20\n                result := not(0)            // result is true\n            }\n            case 32 {                       // compliant ERC20\n                returndatacopy(0, 0, 32) \n                result := mload(0)          // result == returndata of external call\n            }\n            default {                       // not an not an ERC20 token\n                revert(0, 0) \n            }\n        }\n\n        require(result, \"eip20TransferFrom failed\");\n    }\n\n    function eip20Approve(\n        address token,\n        address spender,\n        uint256 value)\n        internal\n        returns (bool result) {\n\n        NonCompliantEIP20(token).approve(spender, value);\n\n        assembly {\n            switch returndatasize()   \n            case 0 {                        // non compliant ERC20\n                result := not(0)            // result is true\n            }\n            case 32 {                       // compliant ERC20\n                returndatacopy(0, 0, 32) \n                result := mload(0)          // result == returndata of external call\n            }\n            default {                       // not an not an ERC20 token\n                revert(0, 0) \n            }\n        }\n\n        require(result, \"eip20Approve failed\");\n    }\n}\n\ncontract BZxVault is EIP20Wrapper, BZxOwnable {\n\n    // Only the bZx contract can directly deposit ether\n    function() external payable onlyBZx {}\n\n    function withdrawEther(\n        address payable to,\n        uint256 value)\n        public\n        onlyBZx\n        returns (bool)\n    {\n        uint256 amount = value;\n        if (amount > address(this).balance) {\n            amount = address(this).balance;\n        }\n\n        return (to.send(amount));\n    }\n\n    function depositToken(\n        address token,\n        address from,\n        uint256 tokenAmount)\n        public\n        onlyBZx\n        returns (bool)\n    {\n        if (tokenAmount == 0) {\n            return false;\n        }\n\n        eip20TransferFrom(\n            token,\n            from,\n            address(this),\n            tokenAmount);\n\n        return true;\n    }\n\n    function withdrawToken(\n        address token,\n        address to,\n        uint256 tokenAmount)\n        public\n        onlyBZx\n        returns (bool)\n    {\n        if (tokenAmount == 0) {\n            return false;\n        }\n\n        eip20Transfer(\n            token,\n            to,\n            tokenAmount);\n\n        return true;\n    }\n\n    function transferTokenFrom(\n        address token,\n        address from,\n        address to,\n        uint256 tokenAmount)\n        public\n        onlyBZx\n        returns (bool)\n    {\n        if (tokenAmount == 0) {\n            return false;\n        }\n\n        eip20TransferFrom(\n            token,\n            from,\n            to,\n            tokenAmount);\n\n        return true;\n    }\n}",
  "bytecode": "608060405260008054600160a060020a031916331790556109a7806100256000396000f3fe6080604052600436106100a3576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b116100765780638da5cb5b146101c9578063e4a72b13146101fa578063e59949051461020f578063f2fde38b14610258578063fb0f97a81461028b576100a3565b806301e33667146100f1578063522f681514610148578063715018a61461018157806372e98a7914610196575b600154600160a060020a031633146100ef5760405160e560020a62461bcd0281526004018080602001828103825260298152602001806109316029913960400191505060405180910390fd5b005b3480156100fd57600080fd5b506101346004803603606081101561011457600080fd5b50600160a060020a038135811691602081013590911690604001356102ce565b604080519115158252519081900360200190f35b34801561015457600080fd5b506101346004803603604081101561016b57600080fd5b50600160a060020a038135169060200135610344565b34801561018d57600080fd5b506100ef6103cd565b3480156101a257600080fd5b506100ef600480360360208110156101b957600080fd5b5035600160a060020a0316610439565b3480156101d557600080fd5b506101de61051f565b60408051600160a060020a039092168252519081900360200190f35b34801561020657600080fd5b506101de61052e565b34801561021b57600080fd5b506101346004803603608081101561023257600080fd5b50600160a060020a0381358116916020810135821691604082013516906060013561053d565b34801561026457600080fd5b506100ef6004803603602081101561027b57600080fd5b5035600160a060020a03166105b5565b34801561029757600080fd5b50610134600480360360608110156102ae57600080fd5b50600160a060020a038135811691602081013590911690604001356106b0565b600154600090600160a060020a0316331461031d5760405160e560020a62461bcd0281526004018080602001828103825260298152602001806109316029913960400191505060405180910390fd5b81151561032c5750600061033d565b61033784848461071a565b50600190505b9392505050565b600154600090600160a060020a031633146103935760405160e560020a62461bcd0281526004018080602001828103825260298152602001806109316029913960400191505060405180910390fd5b8130318111156103a1575030315b604051600160a060020a0385169082156108fc029083906000818181858888f198975050505050505050565b600054600160a060020a031633146103e457600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a0316331461045057600080fd5b600160a060020a038116158015906104765750600054600160a060020a03828116911614155b15156104b65760405160e560020a62461bcd02815260040180806020018281038252602281526020018061095a6022913960400191505060405180910390fd5b600154604051600160a060020a038084169216907f275474e6a50395ffcbf8e9ecf8250fc1a6baa73c802ea8809292f5021c9980bf90600090a36001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a031681565b600154600160a060020a031681565b600154600090600160a060020a0316331461058c5760405160e560020a62461bcd0281526004018080602001828103825260298152602001806109316029913960400191505060405180910390fd5b81151561059b575060006105ad565b6105a785858585610821565b50600190505b949350505050565b600054600160a060020a031633146105cc57600080fd5b600160a060020a038116158015906105f25750600154600160a060020a03828116911614155b1515610648576040805160e560020a62461bcd02815260206004820152601f60248201527f7472616e736665724f776e6572736869703a3a756e617574686f72697a656400604482015290519081900360640190fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600154600090600160a060020a031633146106ff5760405160e560020a62461bcd0281526004018080602001828103825260298152602001806109316029913960400191505060405180910390fd5b81151561070e5750600061033d565b61033784843085610821565b604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015260248201849052915160009286169163a9059cbb916044808301928692919082900301818387803b15801561078557600080fd5b505af1158015610799573d6000803e3d6000fd5b505050503d600081146107b357602081146107bd57600080fd5b60001991506107c9565b60206000803e60005191505b5080151561033d576040805160e560020a62461bcd02815260206004820152601460248201527f65697032305472616e73666572206661696c6564000000000000000000000000604482015290519081900360640190fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015284811660248301526044820184905291516000928716916323b872dd916064808301928692919082900301818387803b15801561089457600080fd5b505af11580156108a8573d6000803e3d6000fd5b505050503d600081146108c257602081146108cc57600080fd5b60001991506108d8565b60206000803e60005191505b508015156105ad576040805160e560020a62461bcd02815260206004820152601860248201527f65697032305472616e7366657246726f6d206661696c65640000000000000000604482015290519081900360640190fdfe6f6e6c7920625a7820636f6e7472616374732063616e2063616c6c20746869732066756e6374696f6e7472616e73666572425a784f776e6572736869703a3a756e617574686f72697a6564a165627a7a7230582085e12a768e81aca03bd227e9f1edaa028e75ad086b88d6f957668cc4f18017b80029"
}