{
  "address": "0x7dd7f56d697cc0f2b52bd55c057f378f1fe6ab4b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "STEAK",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-01\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract STEAK is StandardToken {\n\n    uint256 public initialSupply;\n    // the original supply, just for posterity, since totalSupply\n    //  will decrement on burn\n\n    string public constant name   = \"$TEAK\";\n    string public constant symbol = \"$TEAK\";\n    // ^ whether or not to include the `$` here will probably be contested\n    //   but it's more important to me that the joke is obvious, even if it's overdone\n    //   by displaying as `$$TEAK`\n    uint8 public constant decimals = 18;\n    //  (^ can we please get around to standardizing on 18 decimals?)\n\n    address public tokenSaleContract;\n\n    modifier validDestination(address to)\n    {\n        require(to != address(this));\n        _;\n    }\n\n    function STEAK(uint tokenTotalAmount)\n    public\n    {\n        initialSupply = tokenTotalAmount * (10 ** uint256(decimals));\n        totalSupply = initialSupply;\n\n        // Mint all tokens to crowdsale.\n        balances[msg.sender] = totalSupply;\n        Transfer(address(0x0), msg.sender, totalSupply);\n\n        tokenSaleContract = msg.sender;\n    }\n\n    /**\n     * @dev override transfer token for a specified address to add validDestination\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint _value)\n        public\n        validDestination(_to)\n        returns (bool)\n    {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev override transferFrom token for a specified address to add validDestination\n     * @param _from The address to transfer from.\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transferFrom(address _from, address _to, uint _value)\n        public\n        validDestination(_to)\n        returns (bool)\n    {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    event Burn(address indexed _burner, uint _value);\n\n    /**\n     * @dev burn tokens\n     * @param _value The amount to be burned.\n     * @return always true (necessary in case of override)\n     */\n    function burn(uint _value)\n        public\n        returns (bool)\n    {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(msg.sender, _value);\n        Transfer(msg.sender, address(0x0), _value);\n        return true;\n    }\n\n    /**\n     * @dev burn tokens on the behalf of someone\n     * @param _from The address of the owner of the token.\n     * @param _value The amount to be burned.\n     * @return always true (necessary in case of override)\n     */\n    function burnFrom(address _from, uint256 _value)\n        public\n        returns(bool)\n    {\n        assert(transferFrom(_from, msg.sender, _value));\n        return burn(_value);\n    }\n}\n\ncontract StandardCrowdsale {\n    using SafeMath for uint256;\n\n    // The token being sold\n    StandardToken public token; // Request Modification : change to not mintable\n\n    // start and end timestamps where investments are allowed (both inclusive)\n    uint256 public startTime;\n    uint256 public endTime;\n\n    // address where funds are collected\n    address public wallet;\n\n    // how many token units a buyer gets per wei\n    uint256 public rate;\n\n    // amount of raised money in wei\n    uint256 public weiRaised;\n\n    /**\n     * event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param value weis paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n\n    function StandardCrowdsale(\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _rate,\n        address _wallet)\n        public\n    {\n        // require(_startTime >= now); // Steak Network Modification\n        require(_endTime >= _startTime);\n        require(_rate > 0);\n        require(_wallet != 0x0);\n\n        startTime = _startTime;\n        endTime = _endTime;\n        rate = _rate;\n        wallet = _wallet;\n\n        token = createTokenContract(); // Request Modification : change to StandardToken + position\n    }\n\n    // creates the token to be sold.\n    // Request Modification : change to StandardToken\n    // override this method to have crowdsale of a specific mintable token.\n    function createTokenContract()\n        internal\n        returns(StandardToken)\n    {\n        return new StandardToken();\n    }\n\n    // fallback function can be used to buy tokens\n    function ()\n        public\n        payable\n    {\n        buyTokens();\n    }\n\n    // low level token purchase function\n    // Request Modification : change to not mint but transfer from this contract\n    function buyTokens()\n        public\n        payable\n    {\n        require(validPurchase());\n\n        uint256 weiAmount = msg.value;\n\n        // calculate token amount to be created\n        uint256 tokens = weiAmount.mul(rate);\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n\n        require(token.transfer(msg.sender, tokens)); // Request Modification : changed here - tranfer instead of mintable\n        TokenPurchase(msg.sender, weiAmount, tokens);\n\n        forwardFunds();\n    }\n\n    // send ether to the fund collection wallet\n    // override to create custom fund forwarding mechanisms\n    function forwardFunds()\n        internal\n    {\n        wallet.transfer(msg.value);\n    }\n\n    // @return true if the transaction can buy tokens\n    function validPurchase()\n        internal\n        returns(bool)\n    {\n        bool withinPeriod = now >= startTime && now <= endTime;\n        bool nonZeroPurchase = msg.value != 0;\n        return withinPeriod && nonZeroPurchase;\n    }\n\n    // @return true if crowdsale event has ended\n    function hasEnded()\n        public\n        constant\n        returns(bool)\n    {\n        return now > endTime;\n    }\n\n    modifier onlyBeforeSale() {\n        require(now < startTime);\n        _;\n    }\n}\n\ncontract CappedCrowdsale is StandardCrowdsale {\n  using SafeMath for uint256;\n\n  uint256 public cap;\n\n  function CappedCrowdsale(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  // overriding Crowdsale#validPurchase to add extra cap logic\n  // @return true if investors can buy at the moment\n  // Request Modification : delete constant because needed in son contract\n  function validPurchase() internal returns (bool) {\n    bool withinCap = weiRaised.add(msg.value) <= cap;\n    return super.validPurchase() && withinCap;\n  }\n\n  // overriding Crowdsale#hasEnded to add cap logic\n  // @return true if crowdsale event has ended\n  function hasEnded() public constant returns (bool) {\n    bool capReached = weiRaised >= cap;\n    return super.hasEnded() || capReached;\n  }\n\n}\n\ncontract InfiniteCappedCrowdsale is StandardCrowdsale, CappedCrowdsale {\n    using SafeMath for uint256;\n\n    /**\n        @param _cap the maximum number of tokens\n        @param _rate tokens per wei received\n        @param _wallet the wallet that receives the funds\n     */\n    function InfiniteCappedCrowdsale(uint256 _cap, uint256 _rate, address _wallet)\n        CappedCrowdsale(_cap)\n        StandardCrowdsale(0, uint256(int256(-1)), _rate, _wallet)\n        public\n    {\n\n    }\n}\n\ncontract ICS is InfiniteCappedCrowdsale {\n\n    uint256 public constant TOTAL_SUPPLY = 975220000000;\n    uint256 public constant ARBITRARY_VALUATION_IN_ETH = 33;\n    // ^ arbitrary valuation of ~$10k\n    uint256 public constant ETH_TO_WEI = (10 ** 18);\n    uint256 public constant TOKEN_RATE = (TOTAL_SUPPLY / ARBITRARY_VALUATION_IN_ETH);\n    // 29552121212 $TEAK per wei\n\n\n    function ICS(address _wallet)\n        InfiniteCappedCrowdsale(ARBITRARY_VALUATION_IN_ETH * ETH_TO_WEI, TOKEN_RATE, _wallet)\n        public\n    {\n\n    }\n\n    function createTokenContract() internal returns (StandardToken) {\n        return new STEAK(TOTAL_SUPPLY);\n    }\n}",
  "bytecode": "6060604052341561000f57600080fd5b6040516020806116bb83398101604052808051906020019091905050601260ff16600a0a8102600381905550600354600081905550600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000546040518082815260200191505060405180910390a333600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611578806101436000396000f3006060604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e0578063095ea7b31461016e57806318160ddd146101c857806323b872dd146101f1578063313ce5671461026a578063378dc3dc1461029957806342966c68146102c25780635d5aa277146102fd578063661884631461035257806370a08231146103ac57806379cc6790146103f957806395d89b4114610453578063a9059cbb146104e1578063d73dd6231461053b578063dd62ed3e14610595575b600080fd5b34156100eb57600080fd5b6100f3610601565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610133578082015181840152602081019050610118565b50505050905090810190601f1680156101605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017957600080fd5b6101ae600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061063a565b604051808215151515815260200191505060405180910390f35b34156101d357600080fd5b6101db61072c565b6040518082815260200191505060405180910390f35b34156101fc57600080fd5b610250600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610732565b604051808215151515815260200191505060405180910390f35b341561027557600080fd5b61027d610785565b604051808260ff1660ff16815260200191505060405180910390f35b34156102a457600080fd5b6102ac61078a565b6040518082815260200191505060405180910390f35b34156102cd57600080fd5b6102e36004808035906020019091905050610790565b604051808215151515815260200191505060405180910390f35b341561030857600080fd5b6103106108ff565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561035d57600080fd5b610392600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610925565b604051808215151515815260200191505060405180910390f35b34156103b757600080fd5b6103e3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bb6565b6040518082815260200191505060405180910390f35b341561040457600080fd5b610439600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610bff565b604051808215151515815260200191505060405180910390f35b341561045e57600080fd5b610466610c25565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104a657808201518184015260208101905061048b565b50505050905090810190601f1680156104d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104ec57600080fd5b610521600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c5e565b604051808215151515815260200191505060405180910390f35b341561054657600080fd5b61057b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610caf565b604051808215151515815260200191505060405180910390f35b34156105a057600080fd5b6105eb600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610eab565b6040518082815260200191505060405180910390f35b6040805190810160405280600581526020017f245445414b00000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b6000823073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561077057600080fd5b61077b858585610f32565b9150509392505050565b601281565b60035481565b60006107e482600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112f190919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061083c826000546112f190919063ffffffff16565b6000819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610a36576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610aca565b610a4983826112f190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000610c0c833384610732565b1515610c1457fe5b610c1d82610790565b905092915050565b6040805190810160405280600581526020017f245445414b00000000000000000000000000000000000000000000000000000081525081565b6000823073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610c9c57600080fd5b610ca6848461130a565b91505092915050565b6000610d4082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461152e90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f6f57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610fbd57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561104857600080fd5b61109a82600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112f190919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061112f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461152e90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061120182600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112f190919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008282111515156112ff57fe5b818303905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561134757600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561139557600080fd5b6113e782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112f190919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061147c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461152e90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080828401905083811015151561154257fe5b80915050929150505600a165627a7a72305820ea18a6f1d7a7c4e0ae972043b1e02727856084347da06c818d18d5d2a00b0ec20029000000000000000000000000000000000000000000000000000000e30fa44500",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000E30FA44500"
}