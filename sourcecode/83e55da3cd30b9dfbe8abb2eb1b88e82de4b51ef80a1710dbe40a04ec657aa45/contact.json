{
  "address": "0xb69a50f98a49f85fd2042813e1647b02dc43d71f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EbyteDistribution",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-25\n*/\n\npragma solidity ^0.4.19;\n\ncontract ForeignToken {\n    function balanceOf(address _owner) constant returns (uint256);\n    function transfer(address _to, uint256 _value) returns (bool);\n}\n\ninterface Token { \n    function transfer(address _to, uint256 _value) returns (bool);\n    function totalSupply() constant returns (uint256 supply);\n    function balanceOf(address _owner) constant returns (uint256 balance);\n}\n\ncontract EbyteDistribution {\n    \n    mapping (address => uint256) balances;\n    mapping (address => bool) public blacklist;\n    Token public ebyteToken;\n    address public owner;\n    uint256 public rate = 100000000;\n    uint256 public percentage = 20;\n    uint256 public ethBalance = 10000000000;\n    uint256 public ebyteBalance = 100;\n    bool public contractLocked = true;\n    \n    event sendTokens(address indexed to, uint256 value);\n    event Locked();\n    event Unlocked();\n\n    function EbyteDistribution(address _tokenAddress, address _owner) {\n        ebyteToken = Token(_tokenAddress);\n        owner = _owner;\n    }\n    \n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n        owner = newOwner;\n        }\n    }\n    \n    function setParameters(uint256 _Rate, uint256 _Percentage, uint256 _EthBalance, \n    uint256 _EbyteBalance) onlyOwner public {\n        rate = _Rate;\n        percentage = _Percentage;\n        ethBalance = _EthBalance;\n        ebyteBalance = _EbyteBalance;\n    }\n    \n    modifier onlyWhitelist() {\n        require(blacklist[msg.sender] == false);\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender);\n        _;\n    }\n    \n    modifier isUnlocked() {\n        require(!contractLocked);\n        _;\n    }\n    \n    function enableWhitelist(address[] addresses) onlyOwner {\n        for (uint i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = false;\n        }\n    }\n\n    function disableWhitelist(address[] addresses) onlyOwner {\n        for (uint i = 0; i < addresses.length; i++) {\n            blacklist[addresses[i]] = true;\n        }\n    }\n    \n    function lockContract() onlyOwner public returns (bool) {\n        contractLocked = true;\n        Locked();\n        return true;\n    }\n    \n    function unlockContract() onlyOwner public returns (bool) {\n        contractLocked = false;\n        Unlocked();\n        return false;\n    }\n\n    function balanceOf(address _holder) constant returns (uint256 balance) {\n        return balances[_holder];\n    }\n    \n    function getTokenBalance(address who) constant public returns (uint){\n        uint bal = ebyteToken.balanceOf(who);\n        return bal;\n    }\n    \n    function getEthBalance(address _addr) constant public returns(uint) {\n        return _addr.balance;\n    }\n    \n    function distributeEbyte(address[] addresses, uint256 value) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            sendTokens(addresses[i], value);\n            ebyteToken.transfer(addresses[i], value);\n        }\n    }\n\n    function distributeEbyteForETH(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            if (getEthBalance(addresses[i]) < ethBalance) {\n                continue;\n            }\n            uint256 ethMulti = getEthBalance(addresses[i]) / 1000000000;\n            uint256 toDistr = (rate * ethMulti) / 1000000000;\n            sendTokens(addresses[i], toDistr);\n            ebyteToken.transfer(addresses[i], toDistr);\n        }\n    }\n    \n    function distributeEbyteForEBYTE(address[] addresses) onlyOwner public {\n        for (uint i = 0; i < addresses.length; i++) {\n            if (getTokenBalance(addresses[i]) < ebyteBalance) {\n                continue;\n            }\n            uint256 toDistr = (getTokenBalance(addresses[i]) / 100) * percentage;\n            sendTokens(addresses[i], toDistr);\n            ebyteToken.transfer(addresses[i], toDistr);\n        }\n    }\n    \n    function distribution(address[] addresses) onlyOwner public {\n\n        for (uint i = 0; i < addresses.length; i++) {\n            distributeEbyteForEBYTE(addresses);\n            distributeEbyteForETH(addresses);\n            break;\n        }\n    }\n  \n    function () payable onlyWhitelist isUnlocked public {\n        address investor = msg.sender;\n        uint256 toGiveT = (getTokenBalance(investor) / 100) * percentage;\n        uint256 ethMulti = getEthBalance(investor) / 1000000000;\n        uint256 toGiveE = (rate * ethMulti) / 1000000000;\n        sendTokens(investor, toGiveT);\n        ebyteToken.transfer(investor, toGiveT);\n        sendTokens(investor, toGiveE);\n        ebyteToken.transfer(investor, toGiveE);\n        blacklist[investor] = true;\n    }\n    \n    function tokensAvailable() constant returns (uint256) {\n        return ebyteToken.balanceOf(this);\n    }\n    \n    function withdraw() onlyOwner public {\n        uint256 etherBalance = this.balance;\n        owner.transfer(etherBalance);\n    }\n    \n    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n        ForeignToken token = ForeignToken(_tokenContract);\n        uint256 amount = token.balanceOf(address(this));\n        return token.transfer(owner, amount);\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"distribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ebyteBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"distributeEbyteForETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"enableWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ebyteToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"distributeEbyte\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"distributeEbyteForEBYTE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Rate\",\"type\":\"uint256\"},{\"name\":\"_Percentage\",\"type\":\"uint256\"},{\"name\":\"_EthBalance\",\"type\":\"uint256\"},{\"name\":\"_EbyteBalance\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"}]",
  "bytecode": "60606040526305f5e10060045560146005556402540be40060065560646007556008805460ff19166001179055341561003757600080fd5b6040516040806110ef833981016040528080519190602001805160028054600160a060020a03958616600160a060020a03199182161790915560038054929095169116179092555061105f9050806100906000396000f3006060604052600436106101235763ffffffff60e060020a6000350416627b66438114610323578063169742f61461037457806322f0f2f9146103995780632c4e722e146103c0578063324cb3cb146103d35780633aecd0e3146103e65780633ccfd60b146104055780634d2301cc146104185780634e6630b014610437578063502dadb01461044a57806360659a921461049957806370a08231146104ac578063753868e3146104cb5780638da5cb5b146104de578063932e1c761461050d5780639c09c8351461055c578063a720e0a8146105ab578063c29988db146105be578063c78ad77f1461060f578063e58fc54c14610622578063ee26ab6614610641578063f2fde38b14610690578063f9f92be4146106af578063fcd9da44146106ce575b600160a060020a03331660009081526001602052604081205481908190819060ff161561014f57600080fd5b60085460ff161561015f57600080fd5b3393506005546064610170866106ed565b81151561017957fe5b04029250633b9aca0061018b8561076b565b81151561019457fe5b049150633b9aca0082600454028115156101aa57fe5b04905083600160a060020a03166000805160206110148339815191528460405190815260200160405180910390a2600254600160a060020a031663a9059cbb858560006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561023757600080fd5b6102c65a03f1151561024857600080fd5b50505060405180515050600160a060020a0384166000805160206110148339815191528260405190815260200160405180910390a2600254600160a060020a031663a9059cbb858360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156102dc57600080fd5b6102c65a03f115156102ed57600080fd5b5050506040518051505050600160a060020a039092166000908152600160208190526040909120805460ff191690911790555050005b341561032e57600080fd5b610372600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061077895505050505050565b005b341561037f57600080fd5b6103876107b8565b60405190815260200160405180910390f35b34156103a457600080fd5b6103ac6107be565b604051901515815260200160405180910390f35b34156103cb57600080fd5b610387610818565b34156103de57600080fd5b6103ac61081e565b34156103f157600080fd5b610387600160a060020a03600435166106ed565b341561041057600080fd5b610372610827565b341561042357600080fd5b610387600160a060020a036004351661076b565b341561044257600080fd5b610387610881565b341561045557600080fd5b610372600460248135818101908301358060208181020160405190810160405280939291908181526020018383602002808284375094965061088795505050505050565b34156104a457600080fd5b6103876108fd565b34156104b757600080fd5b610387600160a060020a0360043516610977565b34156104d657600080fd5b6103ac610992565b34156104e957600080fd5b6104f16109ef565b604051600160a060020a03909116815260200160405180910390f35b341561051857600080fd5b61037260046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496506109fe95505050505050565b341561056757600080fd5b6103726004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610b7195505050505050565b34156105b657600080fd5b6104f1610be8565b34156105c957600080fd5b61037260046024813581810190830135806020818102016040519081016040528093929190818152602001838360200280828437509496505093359350610bf792505050565b341561061a57600080fd5b610387610cfe565b341561062d57600080fd5b6103ac600160a060020a0360043516610d04565b341561064c57600080fd5b6103726004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650610e2295505050505050565b341561069b57600080fd5b610372600160a060020a0360043516610f78565b34156106ba57600080fd5b6103ac600160a060020a0360043516610fcf565b34156106d957600080fd5b610372600435602435604435606435610fe4565b6002546000908190600160a060020a03166370a0823184836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561074a57600080fd5b6102c65a03f1151561075b57600080fd5b5050506040518051949350505050565b600160a060020a03163190565b60035460009033600160a060020a0390811691161461079657600080fd5b50600081518110156107b4576107ab82610e22565b6107b4826109fe565b5050565b60075481565b60035460009033600160a060020a039081169116146107dc57600080fd5b6008805460ff191690557f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd660405160405180910390a150600090565b60045481565b60085460ff1681565b60035460009033600160a060020a0390811691161461084557600080fd5b50600354600160a060020a0330811631911681156108fc0282604051600060405180830381858888f19350505050151561087e57600080fd5b50565b60065481565b60035460009033600160a060020a039081169116146108a557600080fd5b5060005b81518110156107b45760018060008484815181106108c357fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff19169115159190911790556001016108a9565b600254600090600160a060020a03166370a0823130836040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561095857600080fd5b6102c65a03f1151561096957600080fd5b505050604051805191505090565b600160a060020a031660009081526020819052604090205490565b60035460009033600160a060020a039081169116146109b057600080fd5b6008805460ff191660011790557f0f2e5b6c72c6a4491efd919a9f9a409f324ef0708c11ee57d410c2cb06c0992b60405160405180910390a150600190565b600354600160a060020a031681565b6003546000908190819033600160a060020a03908116911614610a2057600080fd5b600092505b8351831015610b6b57600654610a4f858581518110610a4057fe5b9060200190602002015161076b565b1015610a5a57610b60565b633b9aca00610a6e858581518110610a4057fe5b811515610a7757fe5b049150633b9aca008260045402811515610a8d57fe5b049050838381518110610a9c57fe5b90602001906020020151600160a060020a03166000805160206110148339815191528260405190815260200160405180910390a2600254600160a060020a031663a9059cbb858581518110610aed57fe5b906020019060200201518360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b4457600080fd5b6102c65a03f11515610b5557600080fd5b505050604051805150505b600190920191610a25565b50505050565b60035460009033600160a060020a03908116911614610b8f57600080fd5b5060005b81518110156107b457600060016000848481518110610bae57fe5b90602001906020020151600160a060020a031681526020810191909152604001600020805460ff1916911515919091179055600101610b93565b600254600160a060020a031681565b60035460009033600160a060020a03908116911614610c1557600080fd5b5060005b8251811015610cf957828181518110610c2e57fe5b90602001906020020151600160a060020a03166000805160206110148339815191528360405190815260200160405180910390a2600254600160a060020a031663a9059cbb848381518110610c7f57fe5b906020019060200201518460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610cd657600080fd5b6102c65a03f11515610ce757600080fd5b50505060405180515050600101610c19565b505050565b60055481565b6003546000908190819033600160a060020a03908116911614610d2657600080fd5b83915081600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610d8057600080fd5b6102c65a03f11515610d9157600080fd5b5050506040518051600354909250600160a060020a03808516925063a9059cbb91168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610e0057600080fd5b6102c65a03f11515610e1157600080fd5b505050604051805195945050505050565b600354600090819033600160a060020a03908116911614610e4257600080fd5b600091505b8251821015610cf957600754610e71848481518110610e6257fe5b906020019060200201516106ed565b1015610e7c57610f6d565b6005546064610e90858581518110610e6257fe5b811515610e9957fe5b04029050828281518110610ea957fe5b90602001906020020151600160a060020a03166000805160206110148339815191528260405190815260200160405180910390a2600254600160a060020a031663a9059cbb848481518110610efa57fe5b906020019060200201518360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610f5157600080fd5b6102c65a03f11515610f6257600080fd5b505050604051805150505b600190910190610e47565b60035433600160a060020a03908116911614610f9357600080fd5b600160a060020a0381161561087e5760038054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff1990911617905550565b60016020526000908152604090205460ff1681565b60035433600160a060020a03908116911614610fff57600080fd5b600493909355600591909155600655600755560005ab421db3ef8c5a462565b136217be2b6664744f719e18e0e839e84fc334453a165627a7a723058201f36a8bb5fa3464c393426c4d5a42128f6a8d5b7f216ae0728c037cdace4213a0029000000000000000000000000a65ee5fd259d94294c4ef030d1a62eeb465b9438000000000000000000000000cc0e068fb54f16abec3c5d9e008133a518bb244a",
  "constructorArguments": "000000000000000000000000a65Ee5Fd259d94294c4eF030d1a62EeB465b9438000000000000000000000000CC0e068fB54F16abeC3c5D9e008133a518BB244A"
}