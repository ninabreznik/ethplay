{
  "address": "0x7d8b9f24320dab5369144eb46927667f4a58dc49",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NRCToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-11\n*/\n\npragma solidity ^ 0.4.18;\n\n/**\n * @title Owned\n * @dev The Owned contract has an owner address, and provides basic authorization control\n */\ncontract Owned {\n    address public owner;\n   \n    /*Set owner of the contract*/\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    /*only owner can be modifier*/\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Owned {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() public onlyOwner whenPaused {\n    paused = false;\n    Unpause();\n  }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}\n\n/*ERC20*/\ncontract TokenERC20 is Pausable {\n    using SafeMath for uint256;\n    // Public variables of the token\n    string public name = \"NRC\";\n    string public symbol = \"R\";\n    uint8 public decimals = 0;\n    // how many token units a buyer gets per wei\n    uint256 public rate = 50000;\n    // address where funds are collected\n    address public wallet = 0xd3C8326064044c36B73043b009155a59e92477D0;\n    // contributors address\n    address public contributorsAddress = 0xa7db53CB73DBe640DbD480a928dD06f03E2aE7Bd;\n    // company address\n    address public companyAddress = 0x9c949b51f2CafC3A5efc427621295489B63D861D;\n    // market Address \n    address public marketAddress = 0x199EcdFaC25567eb4D21C995B817230050d458d9;\n    // share of all token \n    uint8 public constant ICO_SHARE = 20;\n    uint8 public constant CONTRIBUTORS_SHARE = 30;\n    uint8 public constant COMPANY_SHARE = 20;\n    uint8 public constant MARKET_SHARE = 30;\n    // unfronzen periods \n    uint8 constant COMPANY_PERIODS = 10;\n    uint8 constant CONTRIBUTORS_PERIODS = 3;\n    // token totalsupply amount\n    uint256 public constant TOTAL_SUPPLY = 80000000000;\n    // ico token amount\n    uint256 public icoTotalAmount = 16000000000;\n    uint256 public companyPeriodsElapsed;\n    uint256 public contributorsPeriodsElapsed;\n    // token frozened amount\n    uint256 public frozenSupply;\n    uint256 public initDate;\n    uint8 public contributorsCurrentPeriod;\n    uint8 public companyCurrentPeriod;\n    // This creates an array with all balances\n    mapping(address => uint256) public balanceOf;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event InitialToken(string desc, address indexed target, uint256 value);    \n    \n    /**\n     * Constrctor function\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n    ) public {\n        // contributors share 30% of totalSupply,but get all by 3 years\n        uint256 tempContributors = TOTAL_SUPPLY.mul(CONTRIBUTORS_SHARE).div(100).div(CONTRIBUTORS_PERIODS);\n        contributorsPeriodsElapsed = tempContributors;\n        balanceOf[contributorsAddress] = tempContributors;\n        InitialToken(\"contributors\", contributorsAddress, tempContributors);\n        \n        // company shares 20% of totalSupply,but get all by 10 years\n        uint256 tempCompany = TOTAL_SUPPLY.mul(COMPANY_SHARE).div(100).div(COMPANY_PERIODS);\n        companyPeriodsElapsed = tempCompany;\n        balanceOf[companyAddress] = tempCompany;\n        InitialToken(\"company\", companyAddress, tempCompany);\n\n        // ico takes 20% of totalSupply\n        uint256 tempIco = TOTAL_SUPPLY.mul(ICO_SHARE).div(100);\n        icoTotalAmount = tempIco;\n\n        // expand the market cost 30% of totalSupply\n        uint256 tempMarket = TOTAL_SUPPLY.mul(MARKET_SHARE).div(100);\n        balanceOf[marketAddress] = tempMarket;\n        InitialToken(\"market\", marketAddress, tempMarket);\n\n        // frozenSupply waitting for being unfrozen\n        uint256 tempFrozenSupply = TOTAL_SUPPLY.sub(tempContributors).sub(tempIco).sub(tempCompany).sub(tempMarket);\n        frozenSupply = tempFrozenSupply;\n        initDate = block.timestamp;\n        contributorsCurrentPeriod = 1;\n        companyCurrentPeriod = 1;\n        paused = true;\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        // Add the same to the recipient\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n}\n/******************************************/\n/*       NRCToken STARTS HERE       */\n/******************************************/\n\ncontract NRCToken is Owned, TokenERC20 {\n    uint256 private etherChangeRate = 10 ** 18;\n    uint256 private minutesOneYear = 365*24*60 minutes;\n    bool public  tokenSaleActive = true;\n    // token have been sold\n    uint256 public totalSoldToken;\n    // all frozenAccount addresses\n    mapping(address => bool) public frozenAccount;\n\n    /* This generates a public log event on the blockchain that will notify clients */\n    event LogFrozenAccount(address target, bool frozen);\n    event LogUnfrozenTokens(string desc, address indexed targetaddress, uint256 unfrozenTokensAmount);\n    event LogSetTokenPrice(uint256 tokenPrice);\n    event TimePassBy(string desc, uint256 times );\n    /**\n     * event for token purchase logging\n     * @param purchaser who paid for the tokens\n     * @param value ehter paid for purchase\n     * @param amount amount of tokens purchased\n     */\n    event LogTokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n    // ICO finished Event\n    event TokenSaleFinished(string desc, address indexed contributors, uint256 icoTotalAmount, uint256 totalSoldToken, uint256 leftAmount);\n    \n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function NRCToken() TokenERC20() public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_from != _to);\n        require(_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead\n        require(balanceOf[_from] >= _value); // Check if the sender has enough\n        require(balanceOf[_to].add(_value) > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]); // Check if sender is frozen\n        require(!frozenAccount[_to]); // Check if recipient is frozen\n        balanceOf[_from] = balanceOf[_from].sub(_value); // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value); // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n       /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) public onlyOwner whenNotPaused {\n        require(target != 0x0);\n        require(target != owner);\n        require(frozenAccount[target] != freeze);\n        frozenAccount[target] = freeze;\n        LogFrozenAccount(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newTokenRate` eth\n    /// @param newTokenRate Price users can buy from the contract\n    function setPrices(uint256 newTokenRate) public onlyOwner whenNotPaused {\n        require(newTokenRate > 0);\n        require(newTokenRate <= icoTotalAmount);\n        require(tokenSaleActive);\n        rate = newTokenRate;\n        LogSetTokenPrice(newTokenRate);\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    function buy() public payable whenNotPaused {\n        // if ICO finished ,can not buy any more!\n        require(!frozenAccount[msg.sender]); \n        require(tokenSaleActive);\n        require(validPurchase());\n        uint tokens = getTokenAmount(msg.value); // calculates the amount\n        require(!validSoldOut(tokens));\n        LogTokenPurchase(msg.sender, msg.value, tokens);\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(tokens);\n        calcTotalSoldToken(tokens);\n        forwardFunds();\n    }\n\n    // Override this method to have a way to add business logic to your crowdsale when buying\n    function getTokenAmount(uint256 etherAmount) internal view returns(uint256) {\n        uint256 temp = etherAmount.mul(rate);\n        uint256 amount = temp.div(etherChangeRate);\n        return amount;\n    }\n\n    // send ether to the funder wallet\n    function forwardFunds() internal {\n        wallet.transfer(msg.value);\n    }\n\n    // calc totalSoldToken\n    function calcTotalSoldToken(uint256 soldAmount) internal {\n        totalSoldToken = totalSoldToken.add(soldAmount);\n        if (totalSoldToken >= icoTotalAmount) { \n            tokenSaleActive = false;\n        }\n    }\n\n    // @return true if the transaction can buy tokens\n    function validPurchase() internal view returns(bool) {\n        bool limitPurchase = msg.value >= 1 ether;\n        bool isNotTheOwner = msg.sender != owner;\n        bool isNotTheCompany = msg.sender != companyAddress;\n        bool isNotWallet = msg.sender != wallet;\n        bool isNotContributors = msg.sender != contributorsAddress;\n        bool isNotMarket = msg.sender != marketAddress;\n        return limitPurchase && isNotTheOwner && isNotTheCompany && isNotWallet && isNotContributors && isNotMarket;\n    }\n\n    // @return true if the ICO is in progress.\n    function validSoldOut(uint256 soldAmount) internal view returns(bool) {\n        return totalSoldToken.add(soldAmount) > icoTotalAmount;\n    }\n    // @return current timestamp\n    function time() internal constant returns (uint) {\n        return block.timestamp;\n    }\n\n    /// @dev send the rest of the tokens after the crowdsale end and\n    /// send to contributors address\n    function finaliseICO() public onlyOwner whenNotPaused {\n        require(tokenSaleActive == true);        \n        uint256 tokensLeft = icoTotalAmount.sub(totalSoldToken);\n        tokenSaleActive = false;\n        require(tokensLeft > 0);\n        balanceOf[contributorsAddress] = balanceOf[contributorsAddress].add(tokensLeft);\n        TokenSaleFinished(\"finaliseICO\", contributorsAddress, icoTotalAmount, totalSoldToken, tokensLeft);\n        totalSoldToken = icoTotalAmount;\n    }\n\n\n    /// @notice freeze unfrozenAmount\n    function unfrozenTokens() public onlyOwner whenNotPaused {\n        require(frozenSupply >= 0);\n        if (contributorsCurrentPeriod < CONTRIBUTORS_PERIODS) {\n            unfrozenContributorsTokens();\n            unfrozenCompanyTokens();\n        } else {\n            unfrozenCompanyTokens();\n        }\n    }\n\n    // unfrozen contributors token year by year\n    function unfrozenContributorsTokens() internal {\n        require(contributorsCurrentPeriod < CONTRIBUTORS_PERIODS);\n        uint256 contributortimeShouldPassBy = contributorsCurrentPeriod * (minutesOneYear);\n        TimePassBy(\"contributortimeShouldPassBy\", contributortimeShouldPassBy);\n        uint256 contributorsTimePassBy = time() - initDate;\n        TimePassBy(\"contributortimePassBy\", contributorsTimePassBy);\n\n        contributorsCurrentPeriod = contributorsCurrentPeriod + 1;\n        require(contributorsTimePassBy >= contributortimeShouldPassBy);\n        frozenSupply = frozenSupply.sub(contributorsPeriodsElapsed);\n        balanceOf[contributorsAddress] = balanceOf[contributorsAddress].add(contributorsPeriodsElapsed);\n        LogUnfrozenTokens(\"contributors\", contributorsAddress, contributorsPeriodsElapsed);\n    }\n\n    // unfrozen company token year by year\n    function unfrozenCompanyTokens() internal {\n        require(companyCurrentPeriod < COMPANY_PERIODS);\n        uint256 companytimeShouldPassBy = companyCurrentPeriod * (minutesOneYear);\n        TimePassBy(\"CompanytimeShouldPassBy\", companytimeShouldPassBy);\n        uint256 companytimePassBy = time() - initDate;\n        TimePassBy(\"CompanytimePassBy\", companytimePassBy);\n\n        require(companytimePassBy >= companytimeShouldPassBy);\n        companyCurrentPeriod = companyCurrentPeriod + 1;\n        frozenSupply = frozenSupply.sub(companyPeriodsElapsed);\n        balanceOf[companyAddress] = balanceOf[companyAddress].add(companyPeriodsElapsed);\n        LogUnfrozenTokens(\"company\", companyAddress, companyPeriodsElapsed);\n    }\n\n    // fallback function - do not allow any eth transfers to this contract\n    function() external {\n        revert();\n    }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyCurrentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTORS_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"COMPANY_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finaliseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyPeriodsElapsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfrozenTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsCurrentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenRate\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_SHARE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsPeriodsElapsed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSaleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"LogFrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"targetaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"unfrozenTokensAmount\",\"type\":\"uint256\"}],\"name\":\"LogUnfrozenTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"LogSetTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"TimePassBy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"contributors\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"icoTotalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSoldToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leftAmount\",\"type\":\"uint256\"}],\"name\":\"TokenSaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"desc\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InitialToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]",
  "bytecode": "606060409081526000805460a060020a60ff02191690558051908101604052600381527f4e52430000000000000000000000000000000000000000000000000000000000602082015260019080516200005d929160200190620004d9565b5060408051908101604052600181527f520000000000000000000000000000000000000000000000000000000000000060208201526002908051620000a7929160200190620004d9565b506003805460ff1990811690915561c35060045560058054600160a060020a031990811673d3c8326064044c36b73043b009155a59e92477d01790915560068054821673a7db53cb73dbe640dbd480a928dd06f03e2ae7bd179055600780548216739c949b51f2cafc3a5efc427621295489b63d861d1790556008805490911673199ecdfac25567eb4d21c995b817230050d458d91790556403b9aca000600955670de0b6b3a76400006010556301e1338060115560128054909116600117905534156200017457600080fd5b60008054600160a060020a03191633600160a060020a031617815580808080620001d16003620001bc6064816412a05f2000601e640100000000620004748102620013671704565b9064010000000062001392620004ae82021704565b600b81905560068054600160a060020a039081166000908152600f60205260409081902084905591549297509190911690600080516020620019838339815191529087905160208101919091526040808252600c818301527f636f6e7472696275746f7273000000000000000000000000000000000000000060608301526080909101905180910390a262000284600a620001bc6064816412a05f20006014640100000000620013676200047482021704565b600a81905560078054600160a060020a039081166000908152600f602052604090819020849055915492965091909116906000805160206200198383398151915290869051602081019190915260408082526007818301527f636f6d70616e790000000000000000000000000000000000000000000000000060608301526080909101905180910390a2620003346064620001bc6412a05f20006014640100000000620013676200047482021704565b60098190559250620003616064620001bc6412a05f2000601e640100000000620013676200047482021704565b60088054600160a060020a039081166000908152600f602052604090819020849055915492945091909116906000805160206200198383398151915290849051602081019190915260408082526006818301527f6d61726b6574000000000000000000000000000000000000000000000000000060608301526080909101905180910390a262000423826200040e868187816412a05f20008c64010000000062000c97620004c682021704565b9064010000000062000c97620004c682021704565b600c55505042600d555050600e805461ff001960ff1990911660011716610100179055506000805460a060020a60ff021916740100000000000000000000000000000000000000001790556200057e565b600080831515620004895760009150620004a7565b508282028284828115156200049a57fe5b0414620004a357fe5b8091505b5092915050565b6000808284811515620004bd57fe5b04949350505050565b600082821115620004d357fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200051c57805160ff19168380011785556200054c565b828001600101855582156200054c579182015b828111156200054c5782518255916020019190600101906200052f565b506200055a9291506200055e565b5090565b6200057b91905b808211156200055a576000815560010162000565565b90565b6113f5806200058e6000396000f3006060604052600436106101ab5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101bb57806318fc651314610245578063193629211461026e57806321b133ed146102815780632c4e722e146102a6578063306e3e99146102b957806330dd6a42146102cc578063313ce567146102df57806339f95e63146102f25780633f4ba83a14610307578063521eb2731461031a57806353e1ead91461034957806358491ecb1461035c5780635c975abb1461036f57806370a08231146103965780638356027e146103b55780638456cb59146103c8578063871e5fac146103db5780638da5cb5b146103ee578063902d55a514610401578063956236411461041457806395d89b4114610427578063a3201daa1461043a578063a6f2ae3a14610450578063a9059cbb14610458578063b414d4b61461047a578063c7be7ae314610499578063cb985dd11461026e578063d1bb8688146102b9578063d36b9e64146104ac578063d65a4184146104bf578063e724529c146104d2578063e9aa80b1146104f6578063ffa6883914610509575b34156101b657600080fd5b600080fd5b34156101c657600080fd5b6101ce61051c565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561020a5780820151838201526020016101f2565b50505050905090810190601f1680156102375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025057600080fd5b6102586105ba565b60405160ff909116815260200160405180910390f35b341561027957600080fd5b6102586105c8565b341561028c57600080fd5b6102946105cd565b60405190815260200160405180910390f35b34156102b157600080fd5b6102946105d3565b34156102c457600080fd5b6102586105d9565b34156102d757600080fd5b6102946105de565b34156102ea57600080fd5b6102586105e4565b34156102fd57600080fd5b6103056105ed565b005b341561031257600080fd5b610305610740565b341561032557600080fd5b61032d6107bf565b604051600160a060020a03909116815260200160405180910390f35b341561035457600080fd5b61032d6107ce565b341561036757600080fd5b6102946107dd565b341561037a57600080fd5b6103826107e3565b604051901515815260200160405180910390f35b34156103a157600080fd5b610294600160a060020a03600435166107f3565b34156103c057600080fd5b610305610805565b34156103d357600080fd5b610305610877565b34156103e657600080fd5b6102586108fb565b34156103f957600080fd5b61032d610904565b341561040c57600080fd5b610294610913565b341561041f57600080fd5b61032d61091c565b341561043257600080fd5b6101ce61092b565b341561044557600080fd5b610305600435610996565b610305610a30565b341561046357600080fd5b610305600160a060020a0360043516602435610b4a565b341561048557600080fd5b610382600160a060020a0360043516610b59565b34156104a457600080fd5b610294610b6e565b34156104b757600080fd5b610294610b74565b34156104ca57600080fd5b610382610b7a565b34156104dd57600080fd5b610305600160a060020a03600435166024351515610b83565b341561050157600080fd5b61032d610c82565b341561051457600080fd5b610294610c91565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b25780601f10610587576101008083540402835291602001916105b2565b820191906000526020600020905b81548152906001019060200180831161059557829003601f168201915b505050505081565b600e54610100900460ff1681565b601e81565b60095481565b60045481565b601481565b60135481565b60035460ff1681565b6000805433600160a060020a0390811691161461060957600080fd5b60005460a060020a900460ff161561062057600080fd5b60125460ff16151560011461063457600080fd5b6013546009546106499163ffffffff610c9716565b6012805460ff1916905590506000811161066257600080fd5b600654600160a060020a03166000908152600f602052604090205461068d908263ffffffff610ca916565b60068054600160a060020a039081166000908152600f60205260409081902093909355905460095460135491909216927f8d8bd44f8eed1829ade982fb3b12494a93e071af8a169e93f26a6430f7109d18929190859051602081019390935260408084019290925260608301526080808352600b908301527f66696e616c69736549434f00000000000000000000000000000000000000000060a083015260c0909101905180910390a250600954601355565b60005433600160a060020a0390811691161461075b57600080fd5b60005460a060020a900460ff16151561077357600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600554600160a060020a031681565b600754600160a060020a031681565b600a5481565b60005460a060020a900460ff1681565b600f6020526000908152604090205481565b60005433600160a060020a0390811691161461082057600080fd5b60005460a060020a900460ff161561083757600080fd5b600c54600090101561084857600080fd5b600e54600360ff909116101561086d57610860610cc3565b610868610ea6565b610875565b610875610ea6565b565b60005433600160a060020a0390811691161461089257600080fd5b60005460a060020a900460ff16156108a957600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600e5460ff1681565b600054600160a060020a031681565b6412a05f200081565b600854600160a060020a031681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b25780601f10610587576101008083540402835291602001916105b2565b60005433600160a060020a039081169116146109b157600080fd5b60005460a060020a900460ff16156109c857600080fd5b600081116109d557600080fd5b6009548111156109e457600080fd5b60125460ff1615156109f557600080fd5b60048190557f2d690f283e8813c6df6df961b8105f5301efc2aac1f3baadd7ca331244d3e9ae8160405190815260200160405180910390a150565b6000805460a060020a900460ff1615610a4857600080fd5b600160a060020a03331660009081526014602052604090205460ff1615610a6e57600080fd5b60125460ff161515610a7f57600080fd5b610a8761109b565b1515610a9257600080fd5b610a9b3461111a565b9050610aa681611153565b15610ab057600080fd5b33600160a060020a03167f75cc499fa7ad681dd662361f334f9bc3ddc2716d66675f7448b58ef241672ad8348360405191825260208201526040908101905180910390a2600160a060020a0333166000908152600f6020526040902054610b1d908263ffffffff610ca916565b600160a060020a0333166000908152600f6020526040902055610b3f81611174565b610b476111a2565b50565b610b553383836111d6565b5050565b60146020526000908152604090205460ff1681565b600c5481565b600b5481565b60125460ff1681565b60005433600160a060020a03908116911614610b9e57600080fd5b60005460a060020a900460ff1615610bb557600080fd5b600160a060020a0382161515610bca57600080fd5b600054600160a060020a0383811691161415610be557600080fd5b600160a060020a03821660009081526014602052604090205460ff1615158115151415610c1157600080fd5b600160a060020a03821660009081526014602052604090819020805460ff19168315151790557fced29978bbbc67ce053cc90ba375cc38860cfd43247e5875f622cbf46d44e8c5908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b600654600160a060020a031681565b600d5481565b600082821115610ca357fe5b50900390565b600082820183811015610cb857fe5b8091505b5092915050565b600e546000908190600360ff90911610610cdc57600080fd5b601154600e5460ff160291506000805160206113aa8339815191528260405160208101919091526040808252601b818301527f636f6e7472696275746f7274696d6553686f756c64506173734279000000000060608301526080909101905180910390a1600d54610d4b611363565b0390506000805160206113aa83398151915281604051602081019190915260408082526015818301527f636f6e7472696275746f7274696d65506173734279000000000000000000000060608301526080909101905180910390a1600e805460ff8082166001011660ff1990911617905581811015610dc957600080fd5b600b54600c54610dde9163ffffffff610c9716565b600c55600b54600654600160a060020a03166000908152600f6020526040902054610e0e9163ffffffff610ca916565b60068054600160a060020a039081166000908152600f602052604090819020939093559054600b549116917fa0895ec1bad6cc817db6bf78f87afdf41abb0ed94fdd2d33f57878e5f51f16d291905160208101919091526040808252600c818301527f636f6e7472696275746f7273000000000000000000000000000000000000000060608301526080909101905180910390a25050565b600e546000908190600a61010090910460ff1610610ec357600080fd5b601154600e54610100900460ff160291506000805160206113aa83398151915282604051602081019190915260408082526017818301527f436f6d70616e7974696d6553686f756c6450617373427900000000000000000060608301526080909101905180910390a1600d54610f37611363565b0390506000805160206113aa83398151915281604051602081019190915260408082526011818301527f436f6d70616e7974696d6550617373427900000000000000000000000000000060608301526080909101905180910390a181811015610f9f57600080fd5b600e805460ff61010080830482166001019091160261ff0019909116179055600a54600c54610fd39163ffffffff610c9716565b600c55600a54600754600160a060020a03166000908152600f60205260409020546110039163ffffffff610ca916565b60078054600160a060020a039081166000908152600f602052604090819020939093559054600a549116917fa0895ec1bad6cc817db6bf78f87afdf41abb0ed94fdd2d33f57878e5f51f16d2919051602081019190915260408082526007818301527f636f6d70616e790000000000000000000000000000000000000000000000000060608301526080909101905180910390a25050565b60008054600754600554600654600854670de0b6b3a7640000341080159533600160a060020a03908116918116821415968116821415958116821415948116821415931614159086906110eb5750845b80156110f45750835b80156110fd5750825b80156111065750815b801561110f5750805b965050505050505090565b60008060006111346004548561136790919063ffffffff16565b915061114b6010548361139290919063ffffffff16565b949350505050565b600060095461116d83601354610ca990919063ffffffff16565b1192915050565b601354611187908263ffffffff610ca916565b60138190556009549010610b47576012805460ff1916905550565b600554600160a060020a03163480156108fc0290604051600060405180830381858888f19350505050151561087557600080fd5b600160a060020a0383811690831614156111ef57600080fd5b600160a060020a038216151561120457600080fd5b600160a060020a0383166000908152600f60205260409020548190101561122a57600080fd5b600160a060020a0382166000908152600f6020526040902054611253818363ffffffff610ca916565b1161125d57600080fd5b600160a060020a03831660009081526014602052604090205460ff161561128357600080fd5b600160a060020a03821660009081526014602052604090205460ff16156112a957600080fd5b600160a060020a0383166000908152600f60205260409020546112d2908263ffffffff610c9716565b600160a060020a038085166000908152600f60205260408082209390935590841681522054611307908263ffffffff610ca916565b600160a060020a038084166000818152600f6020526040908190209390935591908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9084905190815260200160405180910390a3505050565b4290565b60008083151561137a5760009150610cbc565b5082820282848281151561138a57fe5b0414610cb857fe5b60008082848115156113a057fe5b04949350505050560034ad6f008ebea2fcf8cb3ee55d9fcf362860784770999b1ddaba718ef46c55d5a165627a7a72305820ff57f6e7643b5477d338549ee584a58328783bb6a6db7856eef29ad7dcb1faf5002911878333c4e6bcd29a2995a354b32ab47b99245eed5a277acf6313fbb1b0a19d",
  "constructorArguments": "11878333c4e6bcd29a2995a354b32ab47b99245eed5a277acf6313fbb1b0a19d"
}