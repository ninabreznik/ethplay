{
  "address": "0x1556a3ddb4fa2e9e8d6355380e4d22f9d32592cc",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "SCI: Old Token",
  "contractName": "ScienceBlockchainToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-13\n*/\n\n/*\n * Safe Math Smart Contract.\n * Author: Mikhail Vladimirov <[email protected]>\n */\npragma solidity ^0.4.16;\n\n/**\n * Provides methods to safely add, subtract and multiply uint256 numbers.\n */\ncontract SafeMath {\n  uint256 constant private MAX_UINT256 =\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Add two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to add\n   * @param y second value to add\n   * @return x + y\n   */\n  function safeAdd (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    assert (x <= MAX_UINT256 - y);\n    return x + y;\n  }\n\n  /**\n   * Subtract one uint256 value from another, throw in case of underflow.\n   *\n   * @param x value to subtract from\n   * @param y value to subtract\n   * @return x - y\n   */\n  function safeSub (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    assert (x >= y);\n    return x - y;\n  }\n\n  /**\n   * Multiply two uint256 values, throw in case of overflow.\n   *\n   * @param x first value to multiply\n   * @param y second value to multiply\n   * @return x * y\n   */\n  function safeMul (uint256 x, uint256 y)\n  constant internal\n  returns (uint256 z) {\n    if (y == 0) return 0; // Prevent division by zero at the next line\n    assert (x <= MAX_UINT256 / y);\n    return x * y;\n  }\n} \n\n/*\n * ERC-20 Standard Token Smart Contract Interface.\n * Author: Mikhail Vladimirov <[email protected]>\n */\npragma solidity ^0.4.16;\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\n */\ncontract Token {\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () constant returns (uint256 supply);\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) constant returns (uint256 balance);\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value) returns (bool success);\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  returns (bool success);\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value) returns (bool success);\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender) constant\n  returns (uint256 remaining);\n\n  /**\n   * Logged when tokens were transferred from one owner to another.\n   *\n   * @param _from address of the owner, tokens were transferred from\n   * @param _to address of the owner, tokens were transferred to\n   * @param _value number of tokens transferred\n   */\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * Logged when owner approved his tokens to be transferred by some spender.\n   *\n   * @param _owner owner who approved his tokens to be transferred\n   * @param _spender spender who were allowed to transfer the tokens belonging\n   *        to the owner\n   * @param _value number of tokens belonging to the owner, approved to be\n   *        transferred by the spender\n   */\n  event Approval (\n    address indexed _owner, address indexed _spender, uint256 _value);\n} \n\n/*\n * Abstract base contract for Token Smart Contracts that may create snapshots of\n * token holder balances.\n * Author: Mikhail Vladimirov <[email protected]>\n */\npragma solidity ^0.4.16;\n\n\n/**\n * Abstract base contract Token Smart Contracts that support snapshots of token\n * holder balances.\n */\ncontract AbstractSnapshottableToken is SafeMath, Token {\n  /**\n   * Maximum number of tokens in circulation (2^256 - 1).\n   */\n  uint256 constant MAX_TOKENS = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Maximum value of uint256 type, i.e. 2^256-1.\n   */\n  uint256 constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * Maximum value of address represented as uint256, i.e. 2^160-1.\n   */\n  uint256 constant MAX_ADDRESS = 0x00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n  /**\n   * 2^160.\n   */\n  uint256 constant TWO_160 = 0x00010000000000000000000000000000000000000000;\n\n  /**\n   * Create new Abstract Snapshottable Token smart contract.\n   */\n  function AbstractSnapshottableToken () {\n    snapshots.length = 1; // Reserve zero ID.\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () constant returns (uint256 supply) {\n    return tokensCount;\n  }\n\n  /**\n   * Get total number of tokens in circulation as is was at the moment when\n   * snapshot with given index was created.\n   *\n   * @param _index index of the snapshot to get total number of tokens in\n   *        circulation at the moment of\n   * @return total number of tokens in circulation at the moment snapshot with\n   *         given index was created\n   */\n  function totalSupplyAt (uint256 _index) constant returns (uint256 supply) {\n    require (_index > 0);\n    require (_index < snapshots.length);\n\n    return snapshots [_index].tokensCount;\n  }\n\n  /**\n   * Get number of tokens currently belonging to the owner of given address.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) constant returns (uint256 balance) {\n    return accounts [_owner].balance;\n  }\n\n  /**\n   * Get number of tokens owner of the given address had at the moment when\n   * snapshot with given index was created.\n   *\n   * @param _owner address to get number of tokens for the owner of\n   * @param _index index of the snapshot to get number of tokens at the time of\n   * @return number of tokens owner of the given address had at the moment the\n   *         snapshot with given index was created\n   */\n  function balanceOfAt (address _owner, uint256 _index)\n    constant returns (uint256 balance) {\n    require (_index > 0);\n    require (_index < snapshots.length);\n\n    if (_index > accounts [_owner].lastSnapshotIndex)\n      return accounts [_owner].balance;\n    else {\n      uint8 level = 0;\n      while (_index > 0) {\n        uint256 v = historicalBalances [_owner][level][_index];\n        if (v != 0) return v;\n\n        _index >>= 1;\n        level += 1; // Overflow is possible here, but is harmless\n      }\n\n      return 0;\n    }\n  }\n\n  /**\n   * Get first address that probably had non-zero token balance at the moment\n   * snapshot with given index was created.\n   *\n   * @param _index index of the snapshot to get first address the probably had\n   *        non-zero token balance at the moment of\n   * @return flag that tells whether there is at least one address that probably\n   *         had non-zero token balance at the moment of snapshot with given\n   *         index (hasResult); and the fist address that probably had non-zero\n   *         token balance at the moment snapshot with given index was created\n   *         or zero if there are no such addresses (result)\n   */\n  function firstAddressAt (uint256 _index)\n    constant returns (bool hasResult, address result) {\n    require (_index > 0);\n    require (_index < snapshots.length);\n    uint256 rawFirstAddress = snapshots [_index].firstAddress;\n    hasResult = rawFirstAddress != MAX_UINT256;\n    result = hasResult ?\n      address (rawFirstAddress & MAX_ADDRESS) :\n        0;\n  }\n\n  /**\n   * Get next address that probably had non-zero token balance at the moment\n   * certain snapshot was created.\n   *\n   * @param _address previous address that probably had non-zero token balance\n   *        at the moment of certain snapshot\n   * @return flag that tells whether there is next address that probably had\n   *         non-zero token balance at the moment of snapshot with given index\n   *         (hasResult); and the next address that probably had non-zero\n   *         token balance at the moment of snapshot with given index was\n   *         created or zero if there are no such addresses (result)\n   */\n  function nextAddress (address _address)\n    constant returns (bool hasResult, address result) {\n    uint256 rawNextAddress = nextAddresses [_address];\n    require (rawNextAddress != 0);\n    hasResult = rawNextAddress != MAX_UINT256;\n    result = hasResult ?\n      address (rawNextAddress & MAX_ADDRESS) :\n        0;\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value) returns (bool success) {\n    return doTransfer (msg.sender, _to, _value);\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  returns (bool success) {\n    if (_value > approved [_from][msg.sender]) return false;\n    else if (doTransfer (_from, _to, _value)) {\n      approved [_from][msg.sender] =\n        safeSub (approved[_from][msg.sender], _value);\n      return true;\n    } else return false;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value) returns (bool success) {\n    approved [msg.sender][_spender] = _value;\n    Approval (msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender) constant\n  returns (uint256 remaining) {\n    return approved [_owner][_spender];\n  }\n\n  /**\n   * Create snapshot of token holder balances.\n   *\n   * @return index of new created snapshot\n   */\n  function snapshot () returns (uint256 index) {\n    index = snapshots.length++;\n    snapshots [index].tokensCount = tokensCount;\n    snapshots [index].firstAddress = firstAddress;\n    Snapshot (index);\n  }\n\n  /**\n   * Transfer given number of tokens from the owner of given from address to the\n   * owner of given to address.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function doTransfer (address _from, address _to, uint256 _value)\n    internal returns (bool success) {\n    if (_value > accounts [_from].balance) return false;\n    else if (_value > 0 && _from != _to) {\n      saveAddress (_to);\n      updateHistoricalBalances (_from);\n      updateHistoricalBalances (_to);\n      accounts [_from].balance = safeSub (accounts [_from].balance, _value);\n      accounts [_to].balance = safeAdd (accounts [_to].balance, _value);\n      Transfer (_from, _to, _value);\n      return true;\n    } else return true;\n  }\n\n  /**\n   * Create given number of tokens and give them to message sender.\n   *\n   * @param _value number of tokens to create\n   * @return true on success, false on error\n   */\n  function doCreateTokens (uint256 _value) internal returns (bool success) {\n    if (_value > safeSub (MAX_TOKENS, tokensCount)) return false;\n    else if (_value > 0) {\n      saveAddress (msg.sender);\n      updateHistoricalBalances (msg.sender);\n      accounts [msg.sender].balance =\n        safeAdd (accounts [msg.sender].balance, _value);\n      tokensCount = safeAdd (tokensCount, _value);\n      return true;\n    } else return true;\n  }\n\n  /**\n   * Update historical balances for given token owner.\n   *\n   * @param _owner token owner to update historical balances for\n   */\n  function updateHistoricalBalances (address _owner) internal {\n    uint256 balance = accounts [_owner].balance;\n    uint256 nextSnapshotIndex = snapshots.length;\n    uint256 lastNextSnapshotIndex =\n      safeAdd (accounts [_owner].lastSnapshotIndex, 1);\n    if (nextSnapshotIndex > lastNextSnapshotIndex) {\n      if (balance > 0) {\n        setHistoricalBalance (\n          _owner, lastNextSnapshotIndex, nextSnapshotIndex, balance);\n      }\n      accounts [_owner].lastSnapshotIndex =\n        safeSub (nextSnapshotIndex, 1);\n    }\n  }\n\n  /**\n   * Set historical balance for the owner of given address as it was at the\n   * moments of snapshots with indexes in given range.\n   *\n   * @param _owner address to set the historical balance for the owner of\n   * @param _from beginning of the snapshot index range (inclusive)\n   * @param _to end of the snapshot index range (exclusive)\n   * @param _balance value to set balance to\n   */\n  function setHistoricalBalance (\n    address _owner, uint256 _from, uint256 _to, uint256 _balance)\n    internal {\n    assert (_from > 0);\n    assert (_to >= _from);\n    assert (_balance > 0);\n\n    uint8 level = 0;\n    while (_from < _to) {\n      if (_from & 1 == 1) {\n        // Overflow is not possible here because _from < _to\n        historicalBalances [_owner][level][_from++] = _balance;\n      }\n\n      if (_to & 1 == 1) {\n        // Underflow is not possible here, because _to & 1 == 1\n        historicalBalances [_owner][level][--_to] = _balance;\n      }\n\n      _from >>= 1;\n      _to >>= 1;\n      level += 1; // Even for snapshot index range 1..2^256-1 overflow will\n                  // not happen here\n    }\n  }\n\n  /**\n   * Add address to the list of addresses that ever had non-zero token balance.\n   *\n   * @param _address address to be added to the list of addresses that ever had\n   *        non-zero token balance\n   */\n  function saveAddress (address _address) internal {\n    if (nextAddresses [_address] == 0) {\n      nextAddresses [_address] = firstAddress;\n      firstAddress = TWO_160 | uint256(_address);\n    }\n  }\n\n  /**\n   * Total number of tokens in circulation.\n   */\n  uint256 tokensCount;\n\n  /**\n   * All snapshots ever created.\n   */\n  SnapshotInfo [] snapshots;\n\n  /**\n   * Maps addresses of token owners to states of their accounts.\n   */\n  mapping (address => Account) accounts;\n\n  /**\n   * First address that ever had non-zero token balance plus 2^160, or 2^256-1\n   * if there are no such addresses.\n   */\n  uint256 firstAddress = MAX_UINT256;\n\n  /**\n   * Mapping from address that ever had non-zero token balance to the next\n   * address that ever had non-zero token balance plus 2^160 or 2^256-1 if there\n   * are no more such addresses.\n   */\n  mapping (address => uint256) nextAddresses;\n\n  /**\n   * Historical balances of token owners.  If for some address, level and index,\n   * where level >= 0 and index > 0, historicalBalances[address][level][index]\n   * is non-zero, then owner of given address had this many tokens at the\n   * time moments of snapshots with indexes from (index * 2^level) to\n   * ((index + 1) * 2^level - 1) inclusive.\n   * For each snapshot, there should be at most one level with non-zero\n   * value at corresponding index.\n   */\n  mapping (address => mapping (uint8 => mapping (uint256 => uint256)))\n    historicalBalances;\n\n  /**\n   * Maps addresses of token owners to mappings from addresses of spenders to\n   * how many tokens belonging to the owner, the spender is currently allowed to\n   * transfer.\n   */\n  mapping (address => mapping (address => uint256)) approved;\n\n  /**\n   * Encapsulates information about snapshot.\n   */\n  struct SnapshotInfo {\n    /**\n     * Total number of tokens in circulation at the moment of snapshot.\n     */\n    uint256 tokensCount;\n\n    /**\n     * Value of firstAddress field at the moment of snapshot.\n     */\n    uint256 firstAddress;\n  }\n\n  /**\n   * Encapsulates information about token owner's balance.\n   */\n  struct Account {\n    /**\n     * Number of tokens currently belonging to the token owner.\n     */\n    uint256 balance;\n\n    /**\n     * Index of the last snapshot before the moment historical balances were\n     * last updated for this token owner.\n     */\n    uint256 lastSnapshotIndex;\n  }\n\n  /**\n   * Logged when new snapshot was created.\n   *\n   * @param _index index of the new snapshot\n   */\n  event Snapshot (uint256 indexed _index);\n}\n\n\n/*\n * Standard Snapshottable Token Smart Contract.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * Standard Snapshottable Token Smart Contract.\n */\ncontract StandardSnapshottableToken is AbstractSnapshottableToken {\n  /**\n   * Create new Standard Snapshottable Token Smart Contract and make\n   * message sender the owner of the smart contract.\n   */\n  function StandardSnapshottableToken ()\n    AbstractSnapshottableToken () {\n    owner = msg.sender;\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value) returns (bool success) {\n    if (frozen) return false;\n    else return AbstractSnapshottableToken.transfer (_to, _value);\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  returns (bool success) {\n    if (frozen) return false;\n    else\n      return AbstractSnapshottableToken.transferFrom (_from, _to, _value);\n  }\n\n  /**\n   * Create given number of tokens and give them to message sender.  May only be\n   * called by the owner of the smart contract.\n   *\n   * @param _value number of tokens to create\n   * @return true on success, false on error\n   */\n  function createTokens (uint256 _value) returns (bool success) {\n    require (msg.sender == owner);\n\n    return doCreateTokens (_value);\n  }\n\n  /**\n   * Freeze token transfers.  May only be called by the owner of the smart\n   * contract.\n   */\n  function freezeTransfers () {\n    require (msg.sender == owner);\n\n    if (!frozen)\n    {\n      frozen = true;\n      Freeze ();\n    }\n  }\n\n  /**\n   * Unfreeze token transfers.  May only be called by the owner of the smart\n   * contract.\n   */\n  function unfreezeTransfers () {\n    require (msg.sender == owner);\n\n    if (frozen) {\n      frozen = false;\n      Unfreeze ();\n    }\n  }\n\n  /**\n   * Set new owner address.  May only be called by the owner of the smart\n   * contract.\n   *\n   * @param _newOwner new owner address\n   */\n  function setOwner (address _newOwner) {\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n\n  /**\n   * Owner of this smart contract.\n   */\n  address owner;\n\n  /**\n   * Whether token transfers are currently frozen.\n   */\n  bool frozen;\n\n  /**\n   * Logged when token transfers were frozen.\n   */\n  event Freeze ();\n\n  /**\n   * Logged when token transfers were unfrozen.\n   */\n  event Unfreeze ();\n}\n\n\n/*\n * Science Blockchain Token Smart Contract.\n * Author: Mikhail Vladimirov <[email protected]>\n */\n\n/**\n * Science Blockchain Token Smart Contract.\n */\ncontract ScienceBlockchainToken is StandardSnapshottableToken {\n  /**\n   * Create new Science Blockchain Token smart contract and make message sender\n   * to be the owner of smart contract and to be a snapshot creator.\n   */\n  function ScienceBlockchainToken ()\n    StandardSnapshottableToken () {\n    snapshotCreator = msg.sender;\n  }\n\n  /**\n   * Create snapshot of token holder balances.\n   *\n   * @return index of new created snapshot\n   */\n  function snapshot () returns (uint256 index) {\n    require (msg.sender == snapshotCreator);\n    return AbstractSnapshottableToken.snapshot ();\n  }\n\n  /**\n   * Get name of this token.\n   *\n   * @return name of this token\n   */\n  function name () constant returns (string result) {\n    return \"SCIENCE BLOCKCHAIN\";\n  }\n\n  /**\n   * Get symbol of this token.\n   *\n   * @return symbol of this token\n   */\n  function symbol () constant returns (string result) {\n    return \"SCI\";\n  }\n\n  /**\n   * Get number of decimals for this token.\n   *\n   * @return number of decimals for this token\n   */\n  function decimals () constant returns (uint8 result) {\n    return 0;\n  }\n\n  /**\n   * Burn given number of tokens belonging to message sender.\n   *\n   * @param _value number of tokens to burn\n   * @return true if tokens were burned successfully, false otherwise\n   */\n  function burnTokens (uint256 _value) returns (bool success) {\n    uint256 balance = accounts [msg.sender].balance;\n    if (_value > balance) return false;\n    if (_value > 0) {\n      updateHistoricalBalances (msg.sender);\n      accounts [msg.sender].balance = safeSub (balance, _value);\n      tokensCount = safeSub (tokensCount, _value);\n      return true;\n    }\n    return true;\n  }\n\n  /**\n   * Set new snapshot creator address.\n   *\n   * @param _snapshotCreator new snapshot creator address\n   */\n  function setSnapshotCreator (address _snapshotCreator) {\n    require (msg.sender == owner);\n    snapshotCreator = _snapshotCreator;\n  }\n\n  /**\n   * Address of snapshot creator, i.e. the one allowed to create snapshots.\n   */\n  address snapshotCreator;\n}",
  "bytecode": ""
}