{
  "address": "0x22cca8405084e6f074f50573870d29eea5065c10",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "atToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-29\n*/\n\n//---------------------------------------------------------\n//      _  _____    ____ ___ ___ _   _\n//     / \\|_   _|  / ___/ _ \\_ _| \\ | |\n//    / _ \\ | |   | |  | | | | ||  \\| |\n//   / ___ \\| |   | |__| |_| | || |\\  |\n//  /_/   \\_\\_|    \\____\\___/___|_| \\_|\n//\n//---------------------------------------------------------\n//  新增  1、setCtrlToken\n//        2、approveAuto\n//  用于BANCOR自动批准代币的转账限额\n//---------------------------------------------------------\n\npragma solidity ^0.4.25;\n\ncontract ERC20ext\n{\n    // stand\n    function totalSupply() public constant returns (uint supply);\n    function balanceOf(address who) public constant returns (uint value);\n    function allowance(address owner, address spender) public constant returns (uint _allowance);\n\n    function transfer(address to, uint value) public returns (bool ok);\n    function transferFrom(address from, address to, uint value) public returns (bool ok);\n    function approve(address spender, uint value) public returns (bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    // extand\n    function setCtrlToken(address newToken) public returns (bool ok);\n    function approveAuto(address spender, uint value ) public returns (bool ok);\n\n    function appointNewCFO(address newCFO) public returns (bool ok);\n    function melt(address dst, uint256 wad) public returns (bool ok);\n    function mint(address dst, uint256 wad) public returns (bool ok);\n    function freeze(address dst, bool flag) public returns (bool ok);\n\n    event MeltEvent(address indexed dst, uint256 wad);\n    event MintEvent(address indexed dst, uint256 wad);\n    event FreezeEvent(address indexed dst, bool flag);\n}\n\n//---------------------------------------------------------\n// SafeMath 是一个安全数字运算的合约\n//---------------------------------------------------------\ncontract SafeMath\n{\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c)\n    {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n//---------------------------------------------------------\n// atToken 是一个增强版ERC20合约\n//---------------------------------------------------------\ncontract atToken is ERC20ext,SafeMath\n{\n    string public name;\n    string public symbol;\n    uint8  public decimals = 18;\n\n    // 用于设置批准的TOKEN地址\n    address _token;\n\n    address _cfo;\n    uint256 _supply;\n\n    //帐户的余额列表\n    mapping (address => uint256) _balances;\n\n    //帐户的转账限额\n    mapping (address => mapping (address => uint256)) _allowance;\n\n    //帐户的资金冻结\n    mapping (address => bool) public _frozen;\n\n    //-----------------------------------------------\n    // 初始化合约，并把所有代币都给CFO\n    //-----------------------------------------------\n    //   @param initialSupply 发行总量\n    //   @param tokenName     代币名称\n    //   @param tokenSymbol   代币符号\n    //-----------------------------------------------\n    constructor(uint256 initialSupply,string tokenName,string tokenSymbol) public\n    {\n        // validate input\n        require(bytes(tokenName).length > 0 && bytes(tokenSymbol).length > 0);\n\n        _token  = msg.sender;\n        _cfo    = msg.sender;\n\n        _supply = initialSupply * 10 ** uint256(decimals);\n        _balances[_cfo] = _supply;\n\n        name   = tokenName;\n        symbol = tokenSymbol;\n    }\n\n    //-----------------------------------------------\n    // 判断合约调用者是否 CFO\n    //-----------------------------------------------\n    modifier onlyCFO()\n    {\n        require(msg.sender == _cfo);\n        _;\n    }\n\n    //-----------------------------------------------\n    // 判断合约调用者是否 Ctrl Token\n    //-----------------------------------------------\n    modifier onlyCtrlToken()\n    {\n        require(msg.sender == _token);\n        _;\n    }\n\n    //-----------------------------------------------\n    // 获取货币供应量\n    //-----------------------------------------------\n    function totalSupply() public constant returns (uint256)\n    {\n        return _supply;\n    }\n\n    //-----------------------------------------------\n    // 查询账户余额\n    //-----------------------------------------------\n    // @param  src 帐户地址\n    //-----------------------------------------------\n    function balanceOf(address src) public constant returns (uint256)\n    {\n        return _balances[src];\n    }\n\n    //-----------------------------------------------\n    // 查询账户转账限额\n    //-----------------------------------------------\n    // @param  src 来源帐户地址\n    // @param  dst 目标帐户地址\n    //-----------------------------------------------\n    function allowance(address src, address dst) public constant returns (uint256)\n    {\n        return _allowance[src][dst];\n    }\n\n    //-----------------------------------------------\n    // 账户转账\n    //-----------------------------------------------\n    // @param  dst 目标帐户地址\n    // @param  wad 转账金额\n    //-----------------------------------------------\n    function transfer(address dst, uint wad) public returns (bool)\n    {\n        //检查冻结帐户\n        require(!_frozen[msg.sender]);\n        require(!_frozen[dst]);\n\n        //检查帐户余额\n        require(_balances[msg.sender] >= wad);\n\n        _balances[msg.sender] = sub(_balances[msg.sender],wad);\n        _balances[dst]        = add(_balances[dst], wad);\n\n        emit Transfer(msg.sender, dst, wad);\n\n        return true;\n    }\n\n\n    //-----------------------------------------------\n    // 账户转账带检查限额\n    //-----------------------------------------------\n    // @param  src 来源帐户地址\n    // @param  dst 目标帐户地址\n    // @param  wad 转账金额\n    //-----------------------------------------------\n    function transferFrom(address src, address dst, uint wad) public returns (bool)\n    {\n        //检查冻结帐户\n        require(!_frozen[msg.sender]);\n        require(!_frozen[dst]);\n\n        //检查帐户余额\n        require(_balances[src] >= wad);\n\n        //检查帐户限额\n        require(_allowance[src][msg.sender] >= wad);\n\n        _allowance[src][msg.sender] = sub(_allowance[src][msg.sender],wad);\n\n        _balances[src] = sub(_balances[src],wad);\n        _balances[dst] = add(_balances[dst],wad);\n\n        //转账事件\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n\n    //-----------------------------------------------\n    // 设置转账限额\n    //-----------------------------------------------\n    // @param  dst 目标帐户地址\n    // @param  wad 限制金额\n    //-----------------------------------------------\n    function approve(address dst, uint256 wad) public returns (bool)\n    {\n        _allowance[msg.sender][dst] = wad;\n\n        //设置事件\n        emit Approval(msg.sender, dst, wad);\n        return true;\n    }\n\n    //-----------------------------------------------\n    // 设置自动累计转账限额\n    //-----------------------------------------------\n    // @param  dst 目标帐户地址\n    // @param  wad 限制金额\n    //-----------------------------------------------\n    function approveAuto(address src, uint256 wad) onlyCtrlToken public returns (bool)\n    {\n        _allowance[src][msg.sender] = wad;\n        return true;\n    }\n\n    //-----------------------------------------------\n    // 设置 CTRL TOKEN 地址\n    //-----------------------------------------------\n    // @param  token 新的CTRL TOKEN地址\n    //-----------------------------------------------\n    function setCtrlToken(address NewToken) onlyCFO public returns (bool)\n    {\n        if (NewToken != _token)\n        {\n            _token = NewToken;\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    //-----------------------------------------------\n    // 任命新的CFO\n    //-----------------------------------------------\n    // @param  newCFO 新的CFO帐户地址\n    //-----------------------------------------------\n    function appointNewCFO(address newCFO) onlyCFO public returns (bool)\n    {\n        if (newCFO != _cfo)\n        {\n            _cfo = newCFO;\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    //-----------------------------------------------\n    // 冻结帐户\n    //-----------------------------------------------\n    // @param  dst  目标帐户地址\n    // @param  flag 冻结\n    //-----------------------------------------------\n    function freeze(address dst, bool flag) onlyCFO public returns (bool)\n    {\n        _frozen[dst] = flag;\n\n        //冻结帐户事件\n        emit FreezeEvent(dst, flag);\n        return true;\n    }\n\n    //-----------------------------------------------\n    // 铸造代币\n    //-----------------------------------------------\n    // @param  dst  目标帐户地址\n    // @param  wad  铸造金额\n    //-----------------------------------------------\n    function mint(address dst, uint256 wad) onlyCFO public returns (bool)\n    {\n        //目标帐户地址铸造代币,同时更新总量\n        _balances[dst] = add(_balances[dst],wad);\n        _supply        = add(_supply,wad);\n\n        //铸造代币事件\n        emit MintEvent(dst, wad);\n        return true;\n    }\n\n    //-----------------------------------------------\n    // 销毁代币\n    //-----------------------------------------------\n    // @param  dst  目标帐户地址\n    // @param  wad  销毁金额\n    //-----------------------------------------------\n    function melt(address dst, uint256 wad) onlyCFO public returns (bool)\n    {\n        //检查帐户余额\n        require(_balances[dst] >= wad);\n\n        //销毁目标帐户地址代币,同时更新总量\n        _balances[dst] = sub(_balances[dst],wad);\n        _supply        = sub(_supply,wad);\n\n        //销毁代币事件\n        emit MeltEvent(dst, wad);\n        return true;\n    }\n}",
  "bytecode": "60806040526002805460ff1916601217905534801561001d57600080fd5b50604051610cf0380380610cf0833981016040908152815160208301519183015191830180519193909201906000108015610059575060008151115b151561006457600080fd5b6002805461010060a860020a031916336101008102919091179182905560038054600160a060020a0319169091179081905560ff909116600a0a84026004819055600160a060020a03909116600090815260056020908152604082209290925583516100d2928501906100ef565b5080516100e69060019060208401906100ef565b5050505061018a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013057805160ff191683800117855561015d565b8280016001018555821561015d579182015b8281111561015d578251825591602001919060010190610142565b5061016992915061016d565b5090565b61018791905b808211156101695760008155600101610173565b90565b610b57806101996000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100ea578063095ea7b31461017457806318160ddd146101ac57806323b872dd146101d35780632cace49c146101fd578063313ce5671461021e578063325719841461024957806340c10f191461026d578063519f95901461029157806370a08231146102b25780638f8d322e146102d357806395d89b41146102f7578063a9059cbb1461030c578063bf120ae514610330578063c5b40c5d14610356578063dd62ed3e14610377575b600080fd5b3480156100f657600080fd5b506100ff61039e565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610139578181015183820152602001610121565b50505050905090810190601f1680156101665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018057600080fd5b50610198600160a060020a036004351660243561042c565b604080519115158252519081900360200190f35b3480156101b857600080fd5b506101c1610492565b60408051918252519081900360200190f35b3480156101df57600080fd5b50610198600160a060020a0360043581169060243516604435610498565b34801561020957600080fd5b50610198600160a060020a0360043516610629565b34801561022a57600080fd5b5061023361069b565b6040805160ff9092168252519081900360200190f35b34801561025557600080fd5b50610198600160a060020a03600435166024356106a4565b34801561027957600080fd5b50610198600160a060020a03600435166024356106ef565b34801561029d57600080fd5b50610198600160a060020a036004351661079d565b3480156102be57600080fd5b506101c1600160a060020a03600435166107fc565b3480156102df57600080fd5b50610198600160a060020a0360043516602435610817565b34801561030357600080fd5b506100ff6108ea565b34801561031857600080fd5b50610198600160a060020a0360043516602435610944565b34801561033c57600080fd5b50610198600160a060020a03600435166024351515610a47565b34801561036257600080fd5b50610198600160a060020a0360043516610ac6565b34801561038357600080fd5b506101c1600160a060020a0360043581169060243516610adb565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b505050505081565b336000818152600660209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60045490565b3360009081526007602052604081205460ff16156104b557600080fd5b600160a060020a03831660009081526007602052604090205460ff16156104db57600080fd5b600160a060020a03841660009081526005602052604090205482111561050057600080fd5b600160a060020a038416600090815260066020908152604080832033845290915290205482111561053057600080fd5b600160a060020a038416600090815260066020908152604080832033845290915290205461055e9083610b06565b600160a060020a0385166000818152600660209081526040808320338452825280832094909455918152600590915220546105999083610b06565b600160a060020a0380861660009081526005602052604080822093909355908516815220546105c89083610b18565b600160a060020a0380851660008181526005602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a35060019392505050565b600354600090600160a060020a0316331461064357600080fd5b600254600160a060020a03838116610100909204161461069257506002805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a038416021790556001610696565b5060005b919050565b60025460ff1681565b6002546000906101009004600160a060020a031633146106c357600080fd5b50600160a060020a03919091166000908152600660209081526040808320338452909152902055600190565b600354600090600160a060020a0316331461070957600080fd5b600160a060020a03831660009081526005602052604090205461072c9083610b18565b600160a060020a0384166000908152600560205260409020556004546107529083610b18565b600455604080518381529051600160a060020a038516917f3fffaa5804a26fcec0d70b1d0fb0a2d0031df3a5f9c8af2127c2f4360e97b463919081900360200190a250600192915050565b600354600090600160a060020a031633146107b757600080fd5b600354600160a060020a0383811691161461069257506003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790556001610696565b600160a060020a031660009081526005602052604090205490565b600354600090600160a060020a0316331461083157600080fd5b600160a060020a03831660009081526005602052604090205482111561085657600080fd5b600160a060020a0383166000908152600560205260409020546108799083610b06565b600160a060020a03841660009081526005602052604090205560045461089f9083610b06565b600455604080518381529051600160a060020a038516917f86fca26ade5c81a8e49bb09cf2e8968aa2aa0be873b839e21caa5794709a8750919081900360200190a250600192915050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104245780601f106103f957610100808354040283529160200191610424565b3360009081526007602052604081205460ff161561096157600080fd5b600160a060020a03831660009081526007602052604090205460ff161561098757600080fd5b336000908152600560205260409020548211156109a357600080fd5b336000908152600560205260409020546109bd9083610b06565b3360009081526005602052604080822092909255600160a060020a038516815220546109e99083610b18565b600160a060020a0384166000818152600560209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600354600090600160a060020a03163314610a6157600080fd5b600160a060020a038316600081815260076020908152604091829020805460ff1916861515908117909155825190815291517f214e012bfb855983ab4586d1b234c17d1f29b44af16a1f261db8817267731ac49281900390910190a250600192915050565b60076020526000908152604090205460ff1681565b600160a060020a03918216600090815260066020908152604080832093909416825291909152205490565b600082821115610b1257fe5b50900390565b81810182811015610b2557fe5b929150505600a165627a7a723058209dc61da39ca84e0533e58e63db681ec15a85ea8d43bc3c261c86029e14fc741600290000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004504c4159000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004504c415900000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000023c34600000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004504c4159000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004504c415900000000000000000000000000000000000000000000000000000000"
}