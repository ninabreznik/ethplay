{
  "address": "0xcb5d0f12ad82506cbe5120890070312249acf536",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Exchanger",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-01-30\n*/\n\npragma solidity ^0.4.18;\n\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/ExchangerI.sol\n\ncontract ExchangerI {\n  ERC20Basic public wpr;\n\n  /// @notice This method should be called by the WCT holders to collect their\n  ///  corresponding WPRs\n  function collect(address caller) public;\n}\n\n// File: contracts/MiniMeToken.sol\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n    /// @param _owner The address that sent the ether to create tokens\n    /// @return True if the ether is accepted, false if it throws\n    function proxyPayment(address _owner) payable returns(bool);\n\n    /// @notice Notifies the controller about a token transfer allowing the\n    ///  controller to react if desired\n    /// @param _from The origin of the transfer\n    /// @param _to The destination of the transfer\n    /// @param _amount The amount of the transfer\n    /// @return False if the controller does not authorize the transfer\n    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n\n    /// @notice Notifies the controller about an approval allowing the\n    ///  controller to react if desired\n    /// @param _owner The address that calls `approve()`\n    /// @param _spender The spender in the `approve()` call\n    /// @param _amount The amount in the `approve()` call\n    /// @return False if the controller does not authorize the approval\n    function onApprove(address _owner, address _spender, uint _amount)\n        returns(bool);\n}\n\ncontract Controlled {\n    /// @notice The address of the controller is the only address that can call\n    ///  a function with this modifier\n    modifier onlyController { require(msg.sender == controller); _; }\n\n    address public controller;\n\n    function Controlled() { controller = msg.sender;}\n\n    /// @notice Changes the controller of the contract\n    /// @param _newController The new controller of the contract\n    function changeController(address _newController) onlyController {\n        controller = _newController;\n    }\n}\n\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n}\n\n/// @dev The actual token contract, the default controller is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token controller contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Controlled {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    MiniMeToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n    // Flag that determines if the token is transferable or not.\n    bool public transfersEnabled;\n\n    // The factory used to create new clone tokens\n    MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n    /// @notice Constructor to create a MiniMeToken\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n    ///  will create the Clone token contracts, the token factory needs to be\n    ///  deployed first\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    function MiniMeToken(\n        address _tokenFactory,\n        address _parentToken,\n        uint _parentSnapShotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) {\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n        name = _tokenName;                                 // Set the name\n        decimals = _decimalUnits;                          // Set the decimals\n        symbol = _tokenSymbol;                             // Set the symbol\n        parentToken = MiniMeToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock;\n        transfersEnabled = _transfersEnabled;\n        creationBlock = block.number;\n    }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        require(transfersEnabled);\n        return doTransfer(msg.sender, _to, _amount);\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount\n    ) returns (bool success) {\n\n        // The controller of this contract can move tokens around at will,\n\n        //  controller of this contract, which in most situations should be\n        //  another open source smart contract or 0x0\n        if (msg.sender != controller) {\n            require(transfersEnabled);\n\n            // The standard ERC 20 transferFrom functionality\n            if (allowed[_from][msg.sender] < _amount) return false;\n            allowed[_from][msg.sender] -= _amount;\n        }\n        return doTransfer(_from, _to, _amount);\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount\n    ) internal returns(bool) {\n\n           if (_amount == 0) {\n               return true;\n           }\n\n           require(parentSnapShotBlock < block.number);\n\n           // Do not allow transfer to 0x0 or the token contract itself\n           require((_to != 0) && (_to != address(this)));\n\n           // If the amount being transfered is more than the balance of the\n           //  account the transfer returns false\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\n           if (previousBalanceFrom < _amount) {\n               return false;\n           }\n\n           // Alerts the token controller of the transfer\n           if (isContract(controller)) {\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\n           }\n\n           // First update the balance array with the new value for the address\n           //  sending the tokens\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n           // Then update the balance array with the new value for the address\n           //  receiving the tokens\n           var previousBalanceTo = balanceOfAt(_to, block.number);\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n           // An event to make the transfer easy to find on the blockchain\n           Transfer(_from, _to, _amount);\n\n           return true;\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        require(transfersEnabled);\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        // Alerts the token controller of the approve function call\n        if (isContract(controller)) {\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n        }\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender\n    ) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n    ///  its behalf, and then a function is triggered in the contract that is\n    ///  being approved, `_spender`. This allows users to use their tokens to\n    ///  interact with contracts in one function call instead of two\n    /// @param _spender The address of the contract able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the function call was successful\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n    ) returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ApproveAndCallFallBack(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() constant returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) constant\n        returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n        // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != 0) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n        // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n////////////////\n// Clone Token Method\n////////////////\n\n    /// @notice Creates a new clone token with the initial distribution being\n    ///  this token at `_snapshotBlock`\n    /// @param _cloneTokenName Name of the clone token\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n    /// @param _cloneTokenSymbol Symbol of the clone token\n    /// @param _snapshotBlock Block when the distribution of the parent token is\n    ///  copied to set the initial distribution of the new clone token;\n    ///  if the block is zero than the actual block, the current block is used\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    /// @return The address of the new MiniMeToken Contract\n    function createCloneToken(\n        string _cloneTokenName,\n        uint8 _cloneDecimalUnits,\n        string _cloneTokenSymbol,\n        uint _snapshotBlock,\n        bool _transfersEnabled\n        ) returns(address) {\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n            this,\n            _snapshotBlock,\n            _cloneTokenName,\n            _cloneDecimalUnits,\n            _cloneTokenSymbol,\n            _transfersEnabled\n            );\n\n        cloneToken.changeController(msg.sender);\n\n        // An event to make the token easy to find on the blockchain\n        NewCloneToken(address(cloneToken), _snapshotBlock);\n        return address(cloneToken);\n    }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function generateTokens(address _owner, uint _amount\n    ) onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        Transfer(0, _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function destroyTokens(address _owner, uint _amount\n    ) onlyController returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        Transfer(_owner, 0, _amount);\n        return true;\n    }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n    /// @notice Enables token holders to transfer their tokens freely if true\n    /// @param _transfersEnabled True if transfers are allowed in the clone\n    function enableTransfers(bool _transfersEnabled) onlyController {\n        transfersEnabled = _transfersEnabled;\n    }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n    ) constant internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n    ) internal  {\n        if ((checkpoints.length == 0)\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n           } else {\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n           }\n    }\n\n    /// @dev Internal function to determine if an address is a contract\n    /// @param _addr The address being queried\n    /// @return True if `_addr` is a contract\n    function isContract(address _addr) constant internal returns(bool) {\n        uint size;\n        if (_addr == 0) return false;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size>0;\n    }\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n    /// @notice The fallback function: If the contract's controller has not been\n    ///  set to 0, then the `proxyPayment` method is called which relays the\n    ///  ether and creates tokens as described in the token controller contract\n    function ()  payable {\n        require(isContract(controller));\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n    }\n\n//////////\n// Safety Methods\n//////////\n\n    /// @notice This method can be used by the controller to extract mistakenly\n    ///  sent tokens to this contract.\n    /// @param _token The address of the token contract that you want to recover\n    ///  set to 0 in case you want to extract ether.\n    function claimTokens(address _token) onlyController {\n        if (_token == 0x0) {\n            controller.transfer(this.balance);\n            return;\n        }\n\n        MiniMeToken token = MiniMeToken(_token);\n        uint balance = token.balanceOf(this);\n        token.transfer(controller, balance);\n        ClaimedTokens(_token, controller, balance);\n    }\n\n////////////////\n// Events\n////////////////\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount\n        );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n\n    /// @notice Update the DApp by creating a new token with new functionalities\n    ///  the msg.sender becomes the controller of this clone token\n    /// @param _parentToken Address of the token being cloned\n    /// @param _snapshotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token\n    /// @param _tokenName Name of the new token\n    /// @param _decimalUnits Number of decimals of the new token\n    /// @param _tokenSymbol Token Symbol for the new token\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\n    /// @return The address of the new token contract\n    function createCloneToken(\n        address _parentToken,\n        uint _snapshotBlock,\n        string _tokenName,\n        uint8 _decimalUnits,\n        string _tokenSymbol,\n        bool _transfersEnabled\n    ) returns (MiniMeToken) {\n        MiniMeToken newToken = new MiniMeToken(\n            this,\n            _parentToken,\n            _snapshotBlock,\n            _tokenName,\n            _decimalUnits,\n            _tokenSymbol,\n            _transfersEnabled\n            );\n\n        newToken.changeController(msg.sender);\n        return newToken;\n    }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/PausableToken.sol\n\n/**\n * @title Pausable token\n *\n * @dev StandardToken modified with pausable transfers.\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\n// File: contracts/WPR.sol\n\n/**\n * @title WePower Contribution Token\n */\ncontract WPR is MintableToken, PausableToken {\n  string constant public name = \"WePower Token\";\n  string constant public symbol = \"WPR\";\n  uint constant public decimals = 18;\n\n  function WPR() {\n  }\n\n  //////////\n  // Safety Methods\n  //////////\n\n  /// @notice This method can be used by the controller to extract mistakenly\n  ///  sent tokens to this contract.\n  /// @param _token The address of the token contract that you want to recover\n  ///  set to 0 in case you want to extract ether.\n  function claimTokens(address _token) public onlyOwner {\n    if (_token == 0x0) {\n      owner.transfer(this.balance);\n      return;\n    }\n\n    ERC20 token = ERC20(_token);\n    uint balance = token.balanceOf(this);\n    token.transfer(owner, balance);\n    ClaimedTokens(_token, owner, balance);\n  }\n\n  event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n\n  function disown() public onlyOwner {\n    OwnershipTransferred(owner, address(0));\n    owner = address(0);\n  }\n}\n\n// File: contracts/Contribution.sol\n\ncontract Contribution is Ownable {\n  using SafeMath for uint256;\n\n  WPR public wpr;\n  address public contributionWallet;\n  address public teamHolder;\n  address public communityHolder;\n  address public futureHolder;\n  address public exchanger;\n\n  // Wings Integration\n  uint256 public totalCollected;\n\n  uint256 public totalWeiCap;             // Total Wei to be collected\n  uint256 public totalWeiCollected;       // How much Wei has been collected\n  uint256 public presaleTokensIssued;\n\n  uint256 public minimumPerTransaction = 0.01 ether;\n\n  uint256 public numWhitelistedInvestors;\n  mapping (address => bool) public canPurchase;\n  mapping (address => uint256) public individualWeiCollected;\n\n  uint256 public startTime;\n  uint256 public endTime;\n\n  uint256 public initializedTime;\n  uint256 public finalizedTime;\n\n  uint256 public initializedBlock;\n  uint256 public finalizedBlock;\n\n  bool public paused;\n\n  modifier initialized() {\n    require(initializedBlock != 0);\n    _;\n  }\n\n  modifier contributionOpen() {\n    require(getBlockTimestamp() >= startTime &&\n           getBlockTimestamp() <= endTime &&\n           finalizedTime == 0);\n    _;\n  }\n\n  modifier notPaused() {\n    require(!paused);\n    _;\n  }\n\n  function Contribution(address _wpr) {\n    require(_wpr != 0x0);\n    wpr = WPR(_wpr);\n  }\n\n  function initialize(\n      address _wct1,\n      address _wct2,\n      address _exchanger,\n      address _contributionWallet,\n      address _futureHolder,\n      address _teamHolder,\n      address _communityHolder,\n      uint256 _totalWeiCap,\n      uint256 _startTime,\n      uint256 _endTime\n  ) public onlyOwner {\n    // Initialize only once\n    require(initializedBlock == 0);\n    require(initializedTime == 0);\n    assert(wpr.totalSupply() == 0);\n    assert(wpr.owner() == address(this));\n    assert(wpr.decimals() == 18);  // Same amount of decimals as ETH\n    wpr.pause();\n\n    require(_contributionWallet != 0x0);\n    contributionWallet = _contributionWallet;\n\n    require(_futureHolder != 0x0);\n    futureHolder = _futureHolder;\n\n    require(_teamHolder != 0x0);\n    teamHolder = _teamHolder;\n\n    require(_communityHolder != 0x0);\n    communityHolder = _communityHolder;\n\n    require(_startTime >= getBlockTimestamp());\n    require(_startTime < _endTime);\n    startTime = _startTime;\n    endTime = _endTime;\n\n    require(_totalWeiCap > 0);\n    totalWeiCap = _totalWeiCap;\n\n    initializedBlock = getBlockNumber();\n    initializedTime = getBlockTimestamp();\n\n    require(_wct1 != 0x0);\n    require(_wct2 != 0x0);\n    require(_exchanger != 0x0);\n\n    presaleTokensIssued = MiniMeToken(_wct1).totalSupplyAt(initializedBlock);\n    presaleTokensIssued = presaleTokensIssued.add(\n      MiniMeToken(_wct2).totalSupplyAt(initializedBlock)\n    );\n\n    // Exchange rate from wct to wpr 10000\n    require(wpr.mint(_exchanger, presaleTokensIssued.mul(10000)));\n    exchanger = _exchanger;\n\n    Initialized(initializedBlock);\n  }\n\n  /// @notice interface for founders to blacklist investors\n  /// @param _investors array of investors\n  function blacklistAddresses(address[] _investors) public onlyOwner {\n    for (uint256 i = 0; i < _investors.length; i++) {\n      blacklist(_investors[i]);\n    }\n  }\n\n  /// @notice Notifies if an investor is whitelisted for contribution\n  /// @param _investor investor address\n  /// @return status\n  function isWhitelisted(address _investor) public onlyOwner constant returns(bool) {\n    return canPurchase[_investor];\n  }\n\n  /// @notice interface for founders to whitelist investors\n  /// @param _investors array of investors\n  function whitelistAddresses(address[] _investors) public onlyOwner {\n    for (uint256 i = 0; i < _investors.length; i++) {\n      whitelist(_investors[i]);\n    }\n  }\n\n  function whitelist(address investor) public onlyOwner {\n    if (canPurchase[investor]) return;\n    numWhitelistedInvestors++;\n    canPurchase[investor] = true;\n  }\n\n  function blacklist(address investor) public onlyOwner {\n    if (!canPurchase[investor]) return;\n    numWhitelistedInvestors--;\n    canPurchase[investor] = false;\n  }\n\n  // ETH-WPR exchange rate\n  function exchangeRate() constant public initialized returns (uint256) {\n    return 8000;\n  }\n\n  function tokensToGenerate(uint256 toFund) internal returns (uint256 generatedTokens) {\n    generatedTokens = toFund.mul(exchangeRate());\n  }\n\n  /// @notice If anybody sends Ether directly to this contract, consider he is\n  /// getting WPRs.\n  function () public payable notPaused {\n    proxyPayment(msg.sender);\n  }\n\n  //////////\n  // TokenController functions\n  //////////\n\n  /// @notice This method will generally be called by the WPR token contract to\n  ///  acquire WPRs. Or directly from third parties that want to acquire WPRs in\n  ///  behalf of a token holder.\n  /// @param _th WPR holder where the WPRs will be minted.\n  function proxyPayment(address _th) public payable notPaused initialized contributionOpen returns (bool) {\n    require(_th != 0x0);\n    if (msg.value == 0) {\n      wpr.unpause();\n      ExchangerI(exchanger).collect(_th);\n      wpr.pause();\n    } else {\n      doBuy(_th);\n    }\n    return true;\n  }\n\n  function doBuy(address _th) internal {\n    // whitelisting only during the first day\n    // if (getBlockTimestamp() <= startTime + 1 days) {\n    require(canPurchase[_th]);\n    // }\n    require(msg.value >= minimumPerTransaction);\n    uint256 toFund = msg.value;\n    uint256 toCollect = weiToCollectByInvestor(_th);\n\n    require(toCollect > 0);\n\n    // Check total supply cap reached, sell the all remaining tokens\n    if (toFund > toCollect) {\n      toFund = toCollect;\n    }\n    uint256 tokensGenerated = tokensToGenerate(toFund);\n    require(tokensGenerated > 0);\n    require(wpr.mint(_th, tokensGenerated));\n\n    contributionWallet.transfer(toFund);\n    // Wings Integration\n    totalCollected = totalCollected.add(toFund);\n    individualWeiCollected[_th] = individualWeiCollected[_th].add(toFund);\n    totalWeiCollected = totalWeiCollected.add(toFund);\n    NewSale(_th, toFund, tokensGenerated);\n\n    uint256 toReturn = msg.value.sub(toFund);\n    if (toReturn > 0) {\n      _th.transfer(toReturn);\n    }\n  }\n\n  /// @notice This method will can be called by the controller before the contribution period\n  ///  end or by anybody after the `endTime`. This method finalizes the contribution period\n  ///  by creating the remaining tokens and transferring the controller to the configured\n  ///  controller.\n  function finalize() public initialized {\n    require(finalizedBlock == 0);\n    require(finalizedTime == 0);\n    require(getBlockTimestamp() >= startTime);\n    require(msg.sender == owner || getBlockTimestamp() > endTime || weiToCollect() == 0);\n\n    uint CROWDSALE_PCT = 62;\n    uint TEAMHOLDER_PCT = 20;\n    uint COMMUNITYHOLDER_PCT = 15;\n    uint FUTUREHOLDER_PCT = 3;\n    assert(CROWDSALE_PCT + TEAMHOLDER_PCT + COMMUNITYHOLDER_PCT + FUTUREHOLDER_PCT == 100);\n\n    // WPR generated so far is 62% of total\n    uint256 tokenCap = wpr.totalSupply().mul(100).div(CROWDSALE_PCT);\n    // team Wallet will have 20% of the total Tokens and will be in a 36 months\n    // vesting contract with 3 months cliff.\n    wpr.mint(teamHolder, tokenCap.mul(TEAMHOLDER_PCT).div(100));\n    // community Wallet will have access to 15% of the total Tokens.\n    wpr.mint(communityHolder, tokenCap.mul(COMMUNITYHOLDER_PCT).div(100));\n    // future Wallet will have 3% of the total Tokens and will be able to retrieve\n    // after a 4 years.\n    wpr.mint(futureHolder, tokenCap.mul(FUTUREHOLDER_PCT).div(100));\n\n    require(wpr.finishMinting());\n    wpr.transferOwnership(owner);\n\n    finalizedBlock = getBlockNumber();\n    finalizedTime = getBlockTimestamp();\n\n    Finalized(finalizedBlock);\n  }\n\n  //////////\n  // Constant functions\n  //////////\n\n  /// @return Total eth that still available for collection in weis.\n  function weiToCollect() public constant returns(uint256) {\n    return totalWeiCap > totalWeiCollected ? totalWeiCap.sub(totalWeiCollected) : 0;\n  }\n\n  /// @return Total eth that still available for collection in weis.\n  function weiToCollectByInvestor(address investor) public constant returns(uint256) {\n    uint256 cap;\n    uint256 collected;\n    // adding 1 day as a placeholder for X hours.\n    // This should change into a variable or coded into the contract.\n    if (getBlockTimestamp() <= startTime + 5 hours) {\n      cap = totalWeiCap.div(numWhitelistedInvestors);\n      collected = individualWeiCollected[investor];\n    } else {\n      cap = totalWeiCap;\n      collected = totalWeiCollected;\n    }\n    return cap > collected ? cap.sub(collected) : 0;\n  }\n\n  //////////\n  // Testing specific methods\n  //////////\n\n  /// @notice This function is overridden by the test Mocks.\n  function getBlockNumber() internal constant returns (uint256) {\n    return block.number;\n  }\n\n  function getBlockTimestamp() internal constant returns (uint256) {\n    return block.timestamp;\n  }\n\n  //////////\n  // Safety Methods\n  //////////\n\n  // Wings Integration\n  // This function can be used by the contract owner to add ether collected\n  // outside of this contract, such as from a presale\n  function setTotalCollected(uint _totalCollected) public onlyOwner {\n    totalCollected = _totalCollected;\n  }\n\n  /// @notice This method can be used by the controller to extract mistakenly\n  ///  sent tokens to this contract.\n  /// @param _token The address of the token contract that you want to recover\n  ///  set to 0 in case you want to extract ether.\n  function claimTokens(address _token) public onlyOwner {\n    if (wpr.owner() == address(this)) {\n      wpr.claimTokens(_token);\n    }\n\n    if (_token == 0x0) {\n      owner.transfer(this.balance);\n      return;\n    }\n\n    ERC20 token = ERC20(_token);\n    uint256 balance = token.balanceOf(this);\n    token.transfer(owner, balance);\n    ClaimedTokens(_token, owner, balance);\n  }\n\n  /// @notice Pauses the contribution if there is any issue\n  function pauseContribution(bool _paused) onlyOwner {\n    paused = _paused;\n  }\n\n  event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\n  event NewSale(address indexed _th, uint256 _amount, uint256 _tokens);\n  event Initialized(uint _now);\n  event Finalized(uint _now);\n}\n\n// File: contracts/Exchanger.sol\n\n/*\n  Copyright 2017, Klaus Hott (BlockChainLabs.nz)\n  Copyright 2017, Jordi Baylina (Giveth)\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/// @title Exchanger Contract\n/// @author Klaus Hott\n/// @dev This contract will be used to distribute WPR between WCT holders.\n///  WCT token is not transferable, and we just keep an accounting between all tokens\n///  deposited and the tokens collected.\n\n\n\n\ncontract Exchanger is ExchangerI, Ownable {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) public collected;\n  uint256 public totalCollected;\n  MiniMeToken public wct1;\n  MiniMeToken public wct2;\n  Contribution public contribution;\n\n  function Exchanger(address _wct1, address _wct2, address _wpr, address _contribution) {\n    wct1 = MiniMeToken(_wct1);\n    wct2 = MiniMeToken(_wct2);\n    wpr = ERC20Basic(_wpr);\n    contribution = Contribution(_contribution);\n  }\n\n  function () public {\n    if (contribution.finalizedBlock() == 0) {\n      contribution.proxyPayment(msg.sender);\n    } else {\n      collect(msg.sender);\n    }\n  }\n\n  /// @notice This method should be called by the WCT holders to collect their\n  ///  corresponding WPRs\n  function collect(address caller) public {\n    // WCT sholder could collect WPR right after contribution started\n    require(getBlockTimestamp() > contribution.startTime());\n\n    uint256 pre_sale_fixed_at = contribution.initializedBlock();\n\n    // Get current WPR ballance at contributions initialization-\n    uint256 balance = wct1.balanceOfAt(caller, pre_sale_fixed_at);\n    balance = balance.add(wct2.balanceOfAt(caller, pre_sale_fixed_at));\n\n    uint256 totalSupplied = wct1.totalSupplyAt(pre_sale_fixed_at);\n    totalSupplied = totalSupplied.add(wct2.totalSupplyAt(pre_sale_fixed_at));\n\n    // total of wpr to be distributed.\n    uint256 total = totalCollected.add(wpr.balanceOf(address(this)));\n\n    // First calculate how much correspond to him\n    assert(totalSupplied > 0);\n    uint256 amount = total.mul(balance).div(totalSupplied);\n\n    // And then subtract the amount already collected\n    amount = amount.sub(collected[caller]);\n\n    // Notify the user that there are no tokens to exchange\n    require(amount > 0);\n\n    totalCollected = totalCollected.add(amount);\n    collected[caller] = collected[caller].add(amount);\n\n    require(wpr.transfer(caller, amount));\n\n    TokensCollected(caller, amount);\n  }\n\n  //////////\n  // Testing specific methods\n  //////////\n\n  /// @notice This function is overridden by the test Mocks.\n  function getBlockNumber() internal constant returns (uint256) {\n    return block.number;\n  }\n\n  /// @notice This function is overridden by the test Mocks.\n  function getBlockTimestamp() internal constant returns (uint256) {\n    return block.timestamp;\n  }\n\n  //////////\n  // Safety Method\n  //////////\n\n  /// @notice This method can be used by the controller to extract mistakenly\n  ///  sent tokens to this contract.\n  /// @param _token The address of the token contract that you want to recover\n  ///  set to 0 in case you want to extract ether.\n  function claimTokens(address _token) public onlyOwner {\n    assert(_token != address(wpr));\n    if (_token == 0x0) {\n      owner.transfer(this.balance);\n      return;\n    }\n\n    ERC20 token = ERC20(_token);\n    uint256 balance = token.balanceOf(this);\n    token.transfer(owner, balance);\n    ClaimedTokens(_token, owner, balance);\n  }\n\n  event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\n  event TokensCollected(address indexed _holder, uint256 _amount);\n}",
  "bytecode": "6060604052341561000f57600080fd5b6040516080806115928339810160405280805190602001909190805190602001909190805190602001909190805190602001909190505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506113f58061019d6000396000f3006060604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306ec16f8146102525780630747e4eb1461028b57806338e43840146102e057806350520b1f1461032d5780636a16ae40146103825780638da5cb5b146103d7578063df8de3e71461042c578063e29eb83614610465578063f2fde38b1461048e578063f562db76146104c7575b34156100af57600080fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634084c3ab6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561013f57600080fd5b6102c65a03f1151561015057600080fd5b50505060405180519050141561024657600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f48c3054336000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561022557600080fd5b6102c65a03f1151561023657600080fd5b5050506040518051905050610250565b61024f3361051c565b5b005b341561025d57600080fd5b610289600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061051c565b005b341561029657600080fd5b61029e610d73565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102eb57600080fd5b610317600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d98565b6040518082815260200191505060405180910390f35b341561033857600080fd5b610340610db0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561038d57600080fd5b610395610dd6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103e257600080fd5b6103ea610dfc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561043757600080fd5b610463600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e22565b005b341561047057600080fd5b6104786111b0565b6040518082815260200191505060405180910390f35b341561049957600080fd5b6104c5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111b6565b005b34156104d257600080fd5b6104da61130e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000806000806000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166378e979256000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156105b257600080fd5b6102c65a03f115156105c357600080fd5b505050604051805190506105d5611334565b1115156105e157600080fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ada5cf636000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561066f57600080fd5b6102c65a03f1151561068057600080fd5b505050604051805190509450600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e87876000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561075957600080fd5b6102c65a03f1151561076a57600080fd5b505050604051805190509350610870600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e88886000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561084657600080fd5b6102c65a03f1151561085757600080fd5b505050604051805190508561133c90919063ffffffff16565b9350600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d0866000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561090b57600080fd5b6102c65a03f1151561091c57600080fd5b5050506040518051905092506109ee600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663981b24d0876000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156109c457600080fd5b6102c65a03f115156109d557600080fd5b505050604051805190508461133c90919063ffffffff16565b9250610ae36000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515610ab757600080fd5b6102c65a03f11515610ac857600080fd5b5050506040518051905060035461133c90919063ffffffff16565b9150600083111515610af157fe5b610b1683610b08868561135a90919063ffffffff16565b61139590919063ffffffff16565b9050610b6a600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826113b090919063ffffffff16565b9050600081111515610b7b57600080fd5b610b908160035461133c90919063ffffffff16565b600381905550610be881600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133c90919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1515610cf757600080fd5b6102c65a03f11515610d0857600080fd5b505050604051805190501515610d1d57600080fd5b8573ffffffffffffffffffffffffffffffffffffffff167f9381e53ffdc9733a6783a6f8665be3f89c231bb81a6771996ed553b4e75c0fe3826040518082815260200191505060405180910390a2505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e8157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610eda57fe5b60008373ffffffffffffffffffffffffffffffffffffffff161415610f7757600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515610f7257600080fd5b6111ab565b8291508173ffffffffffffffffffffffffffffffffffffffff166370a08231306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561101d57600080fd5b6102c65a03f1151561102e57600080fd5b5050506040518051905090508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561110757600080fd5b6102c65a03f1151561111857600080fd5b5050506040518051905050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c836040518082815260200191505060405180910390a35b505050565b60035481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561121257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561124e57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600042905090565b600080828401905083811015151561135057fe5b8091505092915050565b600080600084141561136f576000915061138e565b828402905082848281151561138057fe5b0414151561138a57fe5b8091505b5092915050565b60008082848115156113a357fe5b0490508091505092915050565b60008282111515156113be57fe5b8183039050929150505600a165627a7a72305820592e2b76d414f23eca78b07b9e61b71053ab1669dd20aee4ad5345839f75465b00290000000000000000000000000fac98902b1ba4faf3424d19137ffb464ced802a000000000000000000000000310e33962f5f64db7884c6b33103f442698d4d6a0000000000000000000000004cf488387f035ff08c371515562cba712f9015d400000000000000000000000089dd662cc0651a6f3631a617724525f2ff373b1e",
  "constructorArguments": "0000000000000000000000000fac98902b1ba4faf3424d19137ffb464ced802a000000000000000000000000310e33962f5f64db7884c6b33103f442698d4d6a0000000000000000000000004cf488387f035ff08c371515562cba712f9015d400000000000000000000000089dd662cc0651a6f3631a617724525f2ff373b1e"
}