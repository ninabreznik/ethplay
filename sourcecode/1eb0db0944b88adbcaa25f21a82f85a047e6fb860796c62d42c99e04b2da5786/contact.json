{
  "address": "0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EthToErc20Swap",
  "compilerVersion": "v0.5.9+commit.e560f70d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-07\n*/\n\npragma solidity >=0.5.0 <0.6.0;\n\n// we need only a single method of Maker's Medianizer contract\ninterface IMakerPriceFeed {\n    // https://github.com/makerdao/medianizer/blob/master/src/medianizer.sol#L87\n    function read() external view returns (bytes32);\n}\n\ninterface IERC20 {\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n}\n\n/**\n * Simple swap contract which allows anybody to swap ETH for a specific ERC-20 token (chosen on deploy) for an USD denominated price.\n * The price in ETH is calculated using the Maker Feeds of the DAI Stablecoin System.\n */\ncontract EthToErc20Swap {\n    address public owner;\n\n    // price of 1 erc20 token in milli-USD\n    uint256 public erc20mUSDPrice;\n    IMakerPriceFeed ethPriceFeedContract;\n    IERC20 erc20TokenContract;\n\n    event Swapped(address account, uint256 ethAmount, uint256 erc20Amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"no permission\");\n        _;\n    }\n\n    // \"0x729D19f657BD0614b4985Cf1D82531c67569197B\" for the feed on Ethereum\n    // \"0xe41dd6e41f8f9962c5103d95d95f5d9b82d90fdf\" for ATS20 on Ethereum\n    constructor(address ethPriceFeedAddr, address erc20TokenAddr, uint256 initialErc20mUSDPrice) public {\n        owner = msg.sender;\n        ethPriceFeedContract = IMakerPriceFeed(ethPriceFeedAddr);\n        erc20TokenContract = IERC20(erc20TokenAddr);\n        setPriceInmUSD(initialErc20mUSDPrice);\n    }\n\n    // Sending ETH to the contract triggers the swap. If it fails for some reason, the sender won't lose anything (except the tx fee).\n    function () external payable {\n        // returns the price with 18 digits as bytes32 which can safely be casted to uint256. Will throw if the system has no reliable price.\n        // 15 digits are cut off in order to get mUSD\n        uint256 ethmUSDPrice = uint256(ethPriceFeedContract.read()) / 1E15;\n        uint256 erc20Amount = msg.value * ethmUSDPrice / erc20mUSDPrice;\n\n        // will throw if the sender (our) balance is insufficient\n        erc20TokenContract.transfer(msg.sender, erc20Amount);\n\n        emit Swapped(msg.sender, msg.value, erc20Amount);\n    }\n\n    function setOwner(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    function setPriceInmUSD(uint256 newPrice) public onlyOwner {\n        require(newPrice > 0);\n        erc20mUSDPrice = newPrice;\n    }\n\n    // withdraw all tokens owned by the contract to the given receiver\n    function withdrawErc20To(address receiver) external onlyOwner  {\n        uint256 amount = erc20TokenContract.balanceOf(address(this));\n        erc20TokenContract.transfer(receiver, amount);\n    }\n\n    function withdrawEthTo(address payable receiver) external onlyOwner {\n        receiver.transfer(address(this).balance);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051610c30380380610c308339818101604052606081101561003357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101298161013160201b60201c565b50505061020a565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6e6f207065726d697373696f6e0000000000000000000000000000000000000081525060200191505060405180910390fd5b6000811161020057600080fd5b8060018190555050565b610a17806102196000396000f3fe6080604052600436106100555760003560e01c806313af40351461027d5780638da5cb5b146102ce5780638f59eda514610325578063c57ac7b614610376578063c8daa402146103b1578063fb16700314610402575b600066038d7ea4c68000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357de26a46040518163ffffffff1660e01b815260040160206040518083038186803b1580156100c757600080fd5b505afa1580156100db573d6000803e3d6000fd5b505050506040513d60208110156100f157600080fd5b810190808051906020019092919050505060001c8161010c57fe5b04905060006001548234028161011e57fe5b049050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156101ca57600080fd5b505af11580156101de573d6000803e3d6000fd5b505050506040513d60208110156101f457600080fd5b8101908080519060200190929190505050507f3a9a9f34f5831e9c8ecb66ab3aa308b2ff31eaca434615f6c9cadc656a9af71c333483604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a15050005b34801561028957600080fd5b506102cc600480360360208110156102a057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061042d565b005b3480156102da57600080fd5b506102e3610532565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561033157600080fd5b506103746004803603602081101561034857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610557565b005b34801561038257600080fd5b506103af6004803603602081101561039957600080fd5b81019080803590602001909291905050506107e0565b005b3480156103bd57600080fd5b50610400600480360360208110156103d457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108b9565b005b34801561040e57600080fd5b506104176109dc565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6e6f207065726d697373696f6e0000000000000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6e6f207065726d697373696f6e0000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156106ba57600080fd5b505afa1580156106ce573d6000803e3d6000fd5b505050506040513d60208110156106e457600080fd5b81019080805190602001909291905050509050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156107a057600080fd5b505af11580156107b4573d6000803e3d6000fd5b505050506040513d60208110156107ca57600080fd5b8101908080519060200190929190505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6e6f207065726d697373696f6e0000000000000000000000000000000000000081525060200191505060405180910390fd5b600081116108af57600080fd5b8060018190555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461097b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f6e6f207065726d697373696f6e0000000000000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156109d8573d6000803e3d6000fd5b5050565b6001548156fea265627a7a723058202b8f6c38bbbcb69043fe09748ccc21189f8e5a8fbf12b34076a04c71e148695c64736f6c63430005090032000000000000000000000000729d19f657bd0614b4985cf1d82531c67569197b000000000000000000000000e41dd6e41f8f9962c5103d95d95f5d9b82d90fdf0000000000000000000000000000000000000000000000000000000000000064",
  "constructorArguments": "000000000000000000000000729d19f657bd0614b4985cf1d82531c67569197b000000000000000000000000e41dd6e41f8f9962c5103d95d95f5d9b82d90fdf0000000000000000000000000000000000000000000000000000000000000064"
}