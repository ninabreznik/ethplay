{
  "address": "0xda96eb2fa67642c171650c428f93abdfb8a63a2d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BancorX",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-23\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/bancorx/interfaces/IBancorXUpgrader.sol\n\n/*\n    Bancor X Upgrader interface\n*/\ncontract IBancorXUpgrader {\n    function upgrade(uint16 _version, address[] _reporters) public;\n}\n\n// File: contracts/bancorx/interfaces/IBancorX.sol\n\ncontract IBancorX {\n    function xTransfer(bytes32 _toBlockchain, bytes32 _to, uint256 _amount, uint256 _id) public;\n    function getXTransferAmount(uint256 _xTransferId, address _for) public view returns (uint256);\n}\n\n// File: contracts/ContractIds.sol\n\n/**\n    Id definitions for bancor contracts\n\n    Can be used in conjunction with the contract registry to get contract addresses\n*/\ncontract ContractIds {\n    // generic\n    bytes32 public constant CONTRACT_FEATURES = \"ContractFeatures\";\n    bytes32 public constant CONTRACT_REGISTRY = \"ContractRegistry\";\n\n    // bancor logic\n    bytes32 public constant BANCOR_NETWORK = \"BancorNetwork\";\n    bytes32 public constant BANCOR_FORMULA = \"BancorFormula\";\n    bytes32 public constant BANCOR_GAS_PRICE_LIMIT = \"BancorGasPriceLimit\";\n    bytes32 public constant BANCOR_CONVERTER_UPGRADER = \"BancorConverterUpgrader\";\n    bytes32 public constant BANCOR_CONVERTER_FACTORY = \"BancorConverterFactory\";\n\n    // BNT core\n    bytes32 public constant BNT_TOKEN = \"BNTToken\";\n    bytes32 public constant BNT_CONVERTER = \"BNTConverter\";\n\n    // BancorX\n    bytes32 public constant BANCOR_X = \"BancorX\";\n    bytes32 public constant BANCOR_X_UPGRADER = \"BancorXUpgrader\";\n}\n\n// File: contracts/token/interfaces/IERC20Token.sol\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public view returns (string) {}\n    function symbol() public view returns (string) {}\n    function decimals() public view returns (uint8) {}\n    function totalSupply() public view returns (uint256) {}\n    function balanceOf(address _owner) public view returns (uint256) { _owner; }\n    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n// File: contracts/utility/interfaces/IWhitelist.sol\n\n/*\n    Whitelist interface\n*/\ncontract IWhitelist {\n    function isWhitelisted(address _address) public view returns (bool);\n}\n\n// File: contracts/converter/interfaces/IBancorConverter.sol\n\n/*\n    Bancor Converter interface\n*/\ncontract IBancorConverter {\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256, uint256);\n    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n    function conversionWhitelist() public view returns (IWhitelist) {}\n    function conversionFee() public view returns (uint32) {}\n    function connectors(address _address) public view returns (uint256, uint32, bool, bool, bool) { _address; }\n    function getConnectorBalance(IERC20Token _connectorToken) public view returns (uint256);\n    function claimTokens(address _from, uint256 _amount) public;\n    // deprecated, backward compatibility\n    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n}\n\n// File: contracts/utility/interfaces/IContractRegistry.sol\n\n/*\n    Contract Registry interface\n*/\ncontract IContractRegistry {\n    function addressOf(bytes32 _contractName) public view returns (address);\n\n    // deprecated, backward compatibility\n    function getAddress(bytes32 _contractName) public view returns (address);\n}\n\n// File: contracts/utility/interfaces/IOwned.sol\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public view returns (address) {}\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n// File: contracts/utility/Owned.sol\n\n/*\n    Provides support and utilities for contract ownership\n*/\ncontract Owned is IOwned {\n    address public owner;\n    address public newOwner;\n\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n\n    /**\n        @dev constructor\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    // allows execution by the owner only\n    modifier ownerOnly {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n        @dev allows transferring the contract ownership\n        the new owner still needs to accept the transfer\n        can only be called by the contract owner\n\n        @param _newOwner    new contract owner\n    */\n    function transferOwnership(address _newOwner) public ownerOnly {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n    }\n\n    /**\n        @dev used by a new owner to accept an ownership transfer\n    */\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n// File: contracts/utility/SafeMath.sol\n\n/*\n    Library for basic math operations with overflow/underflow protection\n*/\nlibrary SafeMath {\n    /**\n        @dev returns the sum of _x and _y, reverts if the calculation overflows\n\n        @param _x   value 1\n        @param _y   value 2\n\n        @return sum\n    */\n    function add(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        uint256 z = _x + _y;\n        require(z >= _x);\n        return z;\n    }\n\n    /**\n        @dev returns the difference of _x minus _y, reverts if the calculation underflows\n\n        @param _x   minuend\n        @param _y   subtrahend\n\n        @return difference\n    */\n    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        require(_x >= _y);\n        return _x - _y;\n    }\n\n    /**\n        @dev returns the product of multiplying _x by _y, reverts if the calculation overflows\n\n        @param _x   factor 1\n        @param _y   factor 2\n\n        @return product\n    */\n    function mul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        // gas optimization\n        if (_x == 0)\n            return 0;\n\n        uint256 z = _x * _y;\n        require(z / _x == _y);\n        return z;\n    }\n\n      /**\n        @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n\n        @param _x   dividend\n        @param _y   divisor\n\n        @return quotient\n    */\n    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\n        require(_y > 0);\n        uint256 c = _x / _y;\n\n        return c;\n    }\n}\n\n// File: contracts/utility/Utils.sol\n\n/*\n    Utilities & Common Modifiers\n*/\ncontract Utils {\n    /**\n        constructor\n    */\n    constructor() public {\n    }\n\n    // verifies that an amount is greater than zero\n    modifier greaterThanZero(uint256 _amount) {\n        require(_amount > 0);\n        _;\n    }\n\n    // validates an address - currently only checks that it isn't null\n    modifier validAddress(address _address) {\n        require(_address != address(0));\n        _;\n    }\n\n    // verifies that the address is different than this contract address\n    modifier notThis(address _address) {\n        require(_address != address(this));\n        _;\n    }\n\n}\n\n// File: contracts/utility/interfaces/ITokenHolder.sol\n\n/*\n    Token Holder interface\n*/\ncontract ITokenHolder is IOwned {\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\n}\n\n// File: contracts/utility/TokenHolder.sol\n\n/*\n    We consider every contract to be a 'token holder' since it's currently not possible\n    for a contract to deny receiving tokens.\n\n    The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\n    the owner to send tokens that were sent to the contract by mistake back to their sender.\n*/\ncontract TokenHolder is ITokenHolder, Owned, Utils {\n    /**\n        @dev constructor\n    */\n    constructor() public {\n    }\n\n    /**\n        @dev withdraws tokens held by the contract and sends them to an account\n        can only be called by the owner\n\n        @param _token   ERC20 token contract address\n        @param _to      account to receive the new amount\n        @param _amount  amount to withdraw\n    */\n    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\n        public\n        ownerOnly\n        validAddress(_token)\n        validAddress(_to)\n        notThis(_to)\n    {\n        assert(_token.transfer(_to, _amount));\n    }\n}\n\n// File: contracts/token/interfaces/ISmartToken.sol\n\n/*\n    Smart Token interface\n*/\ncontract ISmartToken is IOwned, IERC20Token {\n    function disableTransfers(bool _disable) public;\n    function issue(address _to, uint256 _amount) public;\n    function destroy(address _from, uint256 _amount) public;\n}\n\n// File: contracts/bancorx/BancorX.sol\n\n/*\n    The BancorX contract allows cross chain token transfers.\n\n    There are two processes that take place in the contract -\n    - Initiate a cross chain transfer to a target blockchain (locks tokens from the caller account on Ethereum)\n    - Report a cross chain transfer initiated on a source blockchain (releases tokens to an account on Ethereum)\n\n    Reporting cross chain transfers works similar to standard multisig contracts, meaning that multiple\n    callers are required to report a transfer before tokens are released to the target account.\n*/\ncontract BancorX is IBancorX, Owned, TokenHolder, ContractIds {\n    using SafeMath for uint256;\n\n    // represents a transaction on another blockchain where BNT was destroyed/locked\n    struct Transaction {\n        uint256 amount;\n        bytes32 fromBlockchain;\n        address to;\n        uint8 numOfReports;\n        bool completed;\n    }\n\n    uint16 public version = 2;\n\n    uint256 public maxLockLimit;            // the maximum amount of BNT that can be locked in one transaction\n    uint256 public maxReleaseLimit;         // the maximum amount of BNT that can be released in one transaction\n    uint256 public minLimit;                // the minimum amount of BNT that can be transferred in one transaction\n    uint256 public prevLockLimit;           // the lock limit *after* the last transaction\n    uint256 public prevReleaseLimit;        // the release limit *after* the last transaction\n    uint256 public limitIncPerBlock;        // how much the limit increases per block\n    uint256 public prevLockBlockNumber;     // the block number of the last lock transaction\n    uint256 public prevReleaseBlockNumber;  // the block number of the last release transaction\n    uint256 public minRequiredReports;      // minimum number of required reports to release tokens\n    \n    IContractRegistry public registry;      // contract registry\n    IContractRegistry public prevRegistry;  // address of previous registry as security mechanism\n    IBancorConverter public bntConverter;   // BNT converter\n    ISmartToken public bntToken;            // BNT token\n\n    bool public xTransfersEnabled = true;   // true if x transfers are enabled, false if not\n    bool public reportingEnabled = true;    // true if reporting is enabled, false if not\n    bool public allowRegistryUpdate = true; // allows the owner to prevent/allow the registry to be updated\n\n    // txId -> Transaction\n    mapping (uint256 => Transaction) public transactions;\n\n    // xTransferId -> txId\n    mapping (uint256 => uint256) public transactionIds;\n\n    // txId -> reporter -> true if reporter already reported txId\n    mapping (uint256 => mapping (address => bool)) public reportedTxs;\n\n    // address -> true if address is reporter\n    mapping (address => bool) public reporters;\n\n    // triggered when BNT is locked in smart contract\n    event TokensLock(\n        address indexed _from,\n        uint256 _amount\n    );\n\n    // triggered when BNT is released by the smart contract\n    event TokensRelease(\n        address indexed _to,\n        uint256 _amount\n    );\n\n    // triggered when xTransfer is successfully called\n    event XTransfer(\n        address indexed _from,\n        bytes32 _toBlockchain,\n        bytes32 indexed _to,\n        uint256 _amount,\n        uint256 _id\n    );\n\n    // triggered when report is successfully submitted\n    event TxReport(\n        address indexed _reporter,\n        bytes32 _fromBlockchain,\n        uint256 _txId,\n        address _to,\n        uint256 _amount,\n        uint256 _xTransferId\n    );\n\n    // triggered when final report is successfully submitted\n    event XTransferComplete(\n        address _to,\n        uint256 _id\n    );\n\n    /**\n        @dev constructor\n\n        @param _maxLockLimit          maximum amount of BNT that can be locked in one transaction\n        @param _maxReleaseLimit       maximum amount of BNT that can be released in one transaction\n        @param _minLimit              minimum amount of BNT that can be transferred in one transaction\n        @param _limitIncPerBlock      how much the limit increases per block\n        @param _minRequiredReports    minimum number of reporters to report transaction before tokens can be released\n        @param _registry              address of contract registry\n     */\n    constructor(\n        uint256 _maxLockLimit,\n        uint256 _maxReleaseLimit,\n        uint256 _minLimit,\n        uint256 _limitIncPerBlock,\n        uint256 _minRequiredReports,\n        address _registry\n    )\n        public\n    {\n        // the maximum limits, minimum limit, and limit increase per block\n        maxLockLimit = _maxLockLimit;\n        maxReleaseLimit = _maxReleaseLimit;\n        minLimit = _minLimit;\n        limitIncPerBlock = _limitIncPerBlock;\n        minRequiredReports = _minRequiredReports;\n\n        // previous limit is _maxLimit, and previous block number is current block number\n        prevLockLimit = _maxLockLimit;\n        prevReleaseLimit = _maxReleaseLimit;\n        prevLockBlockNumber = block.number;\n        prevReleaseBlockNumber = block.number;\n\n        registry = IContractRegistry(_registry);\n        prevRegistry = IContractRegistry(_registry);\n        bntToken = ISmartToken(registry.addressOf(ContractIds.BNT_TOKEN));\n        bntConverter = IBancorConverter(registry.addressOf(ContractIds.BNT_CONVERTER));\n    }\n\n    // validates that the caller is a reporter\n    modifier isReporter {\n        require(reporters[msg.sender]);\n        _;\n    }\n\n    // allows execution only when x transfers are enabled\n    modifier whenXTransfersEnabled {\n        require(xTransfersEnabled);\n        _;\n    }\n\n    // allows execution only when reporting is enabled\n    modifier whenReportingEnabled {\n        require(reportingEnabled);\n        _;\n    }\n\n    /**\n        @dev setter\n\n        @param _maxLockLimit    new maxLockLimit\n     */\n    function setMaxLockLimit(uint256 _maxLockLimit) public ownerOnly {\n        maxLockLimit = _maxLockLimit;\n    }\n    \n    /**\n        @dev setter\n\n        @param _maxReleaseLimit    new maxReleaseLimit\n     */\n    function setMaxReleaseLimit(uint256 _maxReleaseLimit) public ownerOnly {\n        maxReleaseLimit = _maxReleaseLimit;\n    }\n    \n    /**\n        @dev setter\n\n        @param _minLimit    new minLimit\n     */\n    function setMinLimit(uint256 _minLimit) public ownerOnly {\n        minLimit = _minLimit;\n    }\n\n    /**\n        @dev setter\n\n        @param _limitIncPerBlock    new limitIncPerBlock\n     */\n    function setLimitIncPerBlock(uint256 _limitIncPerBlock) public ownerOnly {\n        limitIncPerBlock = _limitIncPerBlock;\n    }\n\n    /**\n        @dev setter\n\n        @param _minRequiredReports    new minRequiredReports\n     */\n    function setMinRequiredReports(uint256 _minRequiredReports) public ownerOnly {\n        minRequiredReports = _minRequiredReports;\n    }\n\n    /**\n        @dev allows the owner to set/remove reporters\n\n        @param _reporter    reporter whos status is to be set\n        @param _active      true if the reporter is approved, false otherwise\n     */\n    function setReporter(address _reporter, bool _active) public ownerOnly {\n        reporters[_reporter] = _active;\n    }\n\n    /**\n        @dev allows the owner enable/disable the xTransfer method\n\n        @param _enable     true to enable, false to disable\n     */\n    function enableXTransfers(bool _enable) public ownerOnly {\n        xTransfersEnabled = _enable;\n    }\n\n    /**\n        @dev allows the owner enable/disable the reportTransaction method\n\n        @param _enable     true to enable, false to disable\n     */\n    function enableReporting(bool _enable) public ownerOnly {\n        reportingEnabled = _enable;\n    }\n\n    /**\n        @dev disables the registry update functionality\n        this is a safety mechanism in case of a emergency\n        can only be called by the manager or owner\n\n        @param _disable    true to disable registry updates, false to re-enable them\n    */\n    function disableRegistryUpdate(bool _disable) public ownerOnly {\n        allowRegistryUpdate = !_disable;\n    }\n\n    /**\n        @dev allows the owner to set the BNT converters address to wherever the\n        contract registry currently points to\n     */\n    function setBNTConverterAddress() public ownerOnly {\n        bntConverter = IBancorConverter(registry.addressOf(ContractIds.BNT_CONVERTER));\n    }\n\n    /**\n        @dev sets the contract registry to whichever address the current registry is pointing to\n     */\n    function updateRegistry() public {\n        // require that upgrading is allowed or that the caller is the owner\n        require(allowRegistryUpdate || msg.sender == owner);\n\n        // get the address of whichever registry the current registry is pointing to\n        address newRegistry = registry.addressOf(ContractIds.CONTRACT_REGISTRY);\n\n        // if the new registry hasn't changed or is the zero address, revert\n        require(newRegistry != address(registry) && newRegistry != address(0));\n\n        // set the previous registry as current registry and current registry as newRegistry\n        prevRegistry = registry;\n        registry = IContractRegistry(newRegistry);\n    }\n\n    /**\n        @dev security mechanism allowing the converter owner to revert to the previous registry,\n        to be used in emergency scenario\n    */\n    function restoreRegistry() public ownerOnly {\n        // set the registry as previous registry\n        registry = prevRegistry;\n\n        // after a previous registry is restored, only the owner can allow future updates\n        allowRegistryUpdate = false;\n    }\n\n    /**\n        @dev upgrades the contract to the latest version\n        can only be called by the owner\n        note that the owner needs to call acceptOwnership on the new contract after the upgrade\n\n        @param _reporters    new list of reporters\n    */\n    function upgrade(address[] _reporters) public ownerOnly {\n        IBancorXUpgrader bancorXUpgrader = IBancorXUpgrader(registry.addressOf(ContractIds.BANCOR_X_UPGRADER));\n\n        transferOwnership(bancorXUpgrader);\n        bancorXUpgrader.upgrade(version, _reporters);\n        acceptOwnership();\n    }\n\n    /**\n        @dev claims BNT from msg.sender to be converted to BNT on another blockchain\n\n        @param _toBlockchain    blockchain BNT will be issued on\n        @param _to              address to send the BNT to\n        @param _amount          the amount to transfer\n     */\n    function xTransfer(bytes32 _toBlockchain, bytes32 _to, uint256 _amount) public whenXTransfersEnabled {\n        // get the current lock limit\n        uint256 currentLockLimit = getCurrentLockLimit();\n\n        // require that; minLimit <= _amount <= currentLockLimit\n        require(_amount >= minLimit && _amount <= currentLockLimit);\n        \n        lockTokens(_amount);\n\n        // set the previous lock limit and block number\n        prevLockLimit = currentLockLimit.sub(_amount);\n        prevLockBlockNumber = block.number;\n\n        // emit XTransfer event with id of 0\n        emit XTransfer(msg.sender, _toBlockchain, _to, _amount, 0);\n    }\n\n    /**\n        @dev claims BNT from msg.sender to be converted to BNT on another blockchain\n\n        @param _toBlockchain    blockchain BNT will be issued on\n        @param _to              address to send the BNT to\n        @param _amount          the amount to transfer\n        @param _id              pre-determined unique (if non zero) id which refers to this transaction \n     */\n    function xTransfer(bytes32 _toBlockchain, bytes32 _to, uint256 _amount, uint256 _id) public whenXTransfersEnabled {\n        // get the current lock limit\n        uint256 currentLockLimit = getCurrentLockLimit();\n\n        // require that; minLimit <= _amount <= currentLockLimit\n        require(_amount >= minLimit && _amount <= currentLockLimit);\n        \n        lockTokens(_amount);\n\n        // set the previous lock limit and block number\n        prevLockLimit = currentLockLimit.sub(_amount);\n        prevLockBlockNumber = block.number;\n\n        // emit XTransfer event\n        emit XTransfer(msg.sender, _toBlockchain, _to, _amount, _id);\n    }\n\n    /**\n        @dev allows reporter to report transaction which occured on another blockchain\n\n        @param _fromBlockchain  blockchain BNT was destroyed in\n        @param _txId            transactionId of transaction thats being reported\n        @param _to              address to receive BNT\n        @param _amount          amount of BNT destroyed on another blockchain\n        @param _xTransferId     unique (if non zero) pre-determined id (unlike _txId which is determined after the transactions been mined)\n     */\n    function reportTx(\n        bytes32 _fromBlockchain,\n        uint256 _txId,\n        address _to,\n        uint256 _amount,\n        uint256 _xTransferId \n    )\n        public\n        isReporter\n        whenReportingEnabled\n    {\n        // require that the transaction has not been reported yet by the reporter\n        require(!reportedTxs[_txId][msg.sender]);\n\n        // set reported as true\n        reportedTxs[_txId][msg.sender] = true;\n\n        Transaction storage txn = transactions[_txId];\n\n        // If the caller is the first reporter, set the transaction details\n        if (txn.numOfReports == 0) {\n            txn.to = _to;\n            txn.amount = _amount;\n            txn.fromBlockchain = _fromBlockchain;\n\n            if (_xTransferId != 0) {\n                // verify uniqueness of xTransfer id to prevent overwriting\n                require(transactionIds[_xTransferId] == 0);\n                transactionIds[_xTransferId] = _txId;\n            }\n        } else {\n            // otherwise, verify transaction details\n            require(txn.to == _to && txn.amount == _amount && txn.fromBlockchain == _fromBlockchain);\n            \n            if (_xTransferId != 0) {\n                require(transactionIds[_xTransferId] == _txId);\n            }\n        }\n        \n        // increment the number of reports\n        txn.numOfReports++;\n\n        emit TxReport(msg.sender, _fromBlockchain, _txId, _to, _amount, _xTransferId);\n\n        // if theres enough reports, try to release tokens\n        if (txn.numOfReports >= minRequiredReports) {\n            require(!transactions[_txId].completed);\n\n            // set the transaction as completed\n            transactions[_txId].completed = true;\n\n            emit XTransferComplete(_to, _xTransferId);\n\n            releaseTokens(_to, _amount);\n        }\n    }\n\n    /**\n        @dev gets x transfer amount by xTransferId (not txId)\n\n        @param _xTransferId    unique (if non zero) pre-determined id (unlike _txId which is determined after the transactions been broadcasted)\n        @param _for            address corresponding to xTransferId\n\n        @return amount that was sent in xTransfer corresponding to _xTransferId\n    */\n    function getXTransferAmount(uint256 _xTransferId, address _for) public view returns (uint256) {\n        // xTransferId -> txId -> Transaction\n        Transaction storage transaction = transactions[transactionIds[_xTransferId]];\n\n        // verify that the xTransferId is for _for\n        require(transaction.to == _for);\n\n        return transaction.amount;\n    }\n\n    /**\n        @dev method for calculating current lock limit\n\n        @return the current maximum limit of BNT that can be locked\n     */\n    function getCurrentLockLimit() public view returns (uint256) {\n        // prevLockLimit + ((currBlockNumber - prevLockBlockNumber) * limitIncPerBlock)\n        uint256 currentLockLimit = prevLockLimit.add(((block.number).sub(prevLockBlockNumber)).mul(limitIncPerBlock));\n        if (currentLockLimit > maxLockLimit)\n            return maxLockLimit;\n        return currentLockLimit;\n    }\n \n    /**\n        @dev method for calculating current release limit\n\n        @return the current maximum limit of BNT that can be released\n     */\n    function getCurrentReleaseLimit() public view returns (uint256) {\n        // prevReleaseLimit + ((currBlockNumber - prevReleaseBlockNumber) * limitIncPerBlock)\n        uint256 currentReleaseLimit = prevReleaseLimit.add(((block.number).sub(prevReleaseBlockNumber)).mul(limitIncPerBlock));\n        if (currentReleaseLimit > maxReleaseLimit)\n            return maxReleaseLimit;\n        return currentReleaseLimit;\n    }\n\n    /**\n        @dev claims and locks BNT from msg.sender to be converted to BNT on another blockchain\n\n        @param _amount  the amount to lock\n     */\n    function lockTokens(uint256 _amount) private {\n        // lock the BNT from msg.sender in this contract\n        bntConverter.claimTokens(msg.sender, _amount);\n\n        emit TokensLock(msg.sender, _amount);\n    }\n\n    /**\n        @dev private method to release BNT the contract holds\n\n        @param _to      the address to release BNT to\n        @param _amount  the amount to release\n     */\n    function releaseTokens(address _to, uint256 _amount) private {\n        // get the current release limit\n        uint256 currentReleaseLimit = getCurrentReleaseLimit();\n\n        require(_amount >= minLimit && _amount <= currentReleaseLimit);\n        \n        // update the previous release limit and block number\n        prevReleaseLimit = currentReleaseLimit.sub(_amount);\n        prevReleaseBlockNumber = block.number;\n\n        // no need to require, reverts on failure\n        bntToken.transfer(_to, _amount);\n\n        emit TokensRelease(_to, _amount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"bntConverter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reporters\",\"type\":\"address[]\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_CONVERTER_UPGRADER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevLockLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentLockLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevLockBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNT_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentReleaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowRegistryUpdate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_REGISTRY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reporters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toBlockchain\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"xTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toBlockchain\",\"type\":\"bytes32\"},{\"name\":\"_to\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"xTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setBNTConverterAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevReleaseBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReleaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_CONVERTER_FACTORY\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BNT_CONVERTER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_FORMULA\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromBlockchain\",\"type\":\"bytes32\"},{\"name\":\"_txId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_xTransferId\",\"type\":\"uint256\"}],\"name\":\"reportTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minLimit\",\"type\":\"uint256\"}],\"name\":\"setMinLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitIncPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACT_FEATURES\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"reportedTxs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_NETWORK\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_GAS_PRICE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reportingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"fromBlockchain\",\"type\":\"bytes32\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"numOfReports\",\"type\":\"uint8\"},{\"name\":\"completed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limitIncPerBlock\",\"type\":\"uint256\"}],\"name\":\"setLimitIncPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableXTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxLockLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_xTransferId\",\"type\":\"uint256\"},{\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"getXTransferAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxLockLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxLockLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bntToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restoreRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxReleaseLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxReleaseLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_X\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRequiredReports\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_X_UPGRADER\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minRequiredReports\",\"type\":\"uint256\"}],\"name\":\"setMinRequiredReports\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reporter\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setReporter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactionIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"enableReporting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevReleaseLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_disable\",\"type\":\"bool\"}],\"name\":\"disableRegistryUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"xTransfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_maxLockLimit\",\"type\":\"uint256\"},{\"name\":\"_maxReleaseLimit\",\"type\":\"uint256\"},{\"name\":\"_minLimit\",\"type\":\"uint256\"},{\"name\":\"_limitIncPerBlock\",\"type\":\"uint256\"},{\"name\":\"_minRequiredReports\",\"type\":\"uint256\"},{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_toBlockchain\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"XTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_reporter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fromBlockchain\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_txId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_xTransferId\",\"type\":\"uint256\"}],\"name\":\"TxReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"XTransferComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]",
  "bytecode": "6080604052600180547402000000000000000000000000000000000000000060a060020a61ffff0219909116179055600e805460b060020a60ff021960a860020a60ff021960a060020a60ff0219909216740100000000000000000000000000000000000000001791909116750100000000000000000000000000000000000000000017167601000000000000000000000000000000000000000000001790553480156100ab57600080fd5b5060405160c080611e0b8339810160408181528251602080850151838601516060870151608088015160a09098015160008054600160a060020a0319908116331782556002889055600386905560048581556007859055600a8c905560058990556006879055436008819055600955600b8054600160a060020a03808716918516821792839055600c80549095169091179093557fbb34534c000000000000000000000000000000000000000000000000000000008c527f424e54546f6b656e000000000000000000000000000000000000000000000000918c01919091529851979a9599949893979596929593169363bb34534c936024808301949391928390030190829087803b1580156101c057600080fd5b505af11580156101d4573d6000803e3d6000fd5b505050506040513d60208110156101ea57600080fd5b5051600e8054600160a060020a031916600160a060020a03928316179055600b54604080517fbb34534c0000000000000000000000000000000000000000000000000000000081527f424e54436f6e766572746572000000000000000000000000000000000000000060048201529051919092169163bb34534c9160248083019260209291908290030181600087803b15801561028657600080fd5b505af115801561029a573d6000803e3d6000fd5b505050506040513d60208110156102b057600080fd5b5051600d8054600160a060020a03909216600160a060020a0319909216919091179055505050505050611b23806102e86000396000f30060806040526004361061029d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663011857d081146102a25780630183592b146102d35780630c87355e1461032a57806316c76c271461035157806319967439146103665780631aff29eb1461037b5780631d000b61146103905780631e04a593146103a55780631fd8088d146103ba57806320d7d367146103cf57806325f9bfef146103f85780632cc1cd9e1461040d578063427c03741461042e578063492825381461044f57806349d10b641461046d5780634a453af1146104825780634b3e475c1461049757806352e94ce3146104ac57806354fd4d50146104c15780635a46f06c146104ed5780635e35359e1461050257806361cd756e1461052c57806362614ae6146105415780636d7bd3fc146105565780636dc6a01b1461056b5780636ec6d4a61461059857806372f43d19146105b057806379ba5097146105c55780637b103999146105da57806383315b6e146105ef5780638544c52d146106045780638da5cb5b146106285780639232494e1461063d5780639249993a146106525780639390701c146106675780639ace38c21461067c578063a50c326c146106cc578063a5c670ca146106e4578063a8c36a90146106fe578063aafd6b7614610713578063af2b961814610737578063af6c0f601461074f578063b4a176d314610764578063bf28ece414610779578063c4a8598e14610791578063ca27e011146107a6578063cc97b38f146107bb578063d4ee1d90146107d0578063df68ab02146107e5578063e1bb5133146107fd578063e36f8dc514610823578063ed1d73a61461083b578063f2fde38b14610855578063f7385f7614610876578063fa1c594e1461088b578063fbb24692146108a5575b600080fd5b3480156102ae57600080fd5b506102b76108ba565b60408051600160a060020a039092168252519081900360200190f35b3480156102df57600080fd5b5060408051602060048035808201358381028086018501909652808552610328953695939460249493850192918291850190849080828437509497506108c99650505050505050565b005b34801561033657600080fd5b5061033f610a74565b60408051918252519081900360200190f35b34801561035d57600080fd5b5061033f610a98565b34801561037257600080fd5b5061033f610a9e565b34801561038757600080fd5b5061033f610af8565b34801561039c57600080fd5b5061033f610afe565b3480156103b157600080fd5b5061033f610b22565b3480156103c657600080fd5b5061033f610b68565b3480156103db57600080fd5b506103e4610b6e565b604080519115158252519081900360200190f35b34801561040457600080fd5b5061033f610b91565b34801561041957600080fd5b506103e4600160a060020a0360043516610bb5565b34801561043a57600080fd5b50610328600435602435604435606435610bca565b34801561045b57600080fd5b50610328600435602435604435610c77565b34801561047957600080fd5b50610328610d23565b34801561048e57600080fd5b50610328610e89565b3480156104a357600080fd5b5061033f610f80565b3480156104b857600080fd5b5061033f610f86565b3480156104cd57600080fd5b506104d6610f8c565b6040805161ffff9092168252519081900360200190f35b3480156104f957600080fd5b5061033f610f9d565b34801561050e57600080fd5b50610328600160a060020a0360043581169060243516604435610fc1565b34801561053857600080fd5b506102b76110d3565b34801561054d57600080fd5b5061033f6110e2565b34801561056257600080fd5b5061033f611106565b34801561057757600080fd5b50610328600435602435600160a060020a036044351660643560843561112a565b3480156105a457600080fd5b506103286004356113de565b3480156105bc57600080fd5b5061033f6113fa565b3480156105d157600080fd5b50610328611400565b3480156105e657600080fd5b506102b7611488565b3480156105fb57600080fd5b5061033f611497565b34801561061057600080fd5b506103e4600435600160a060020a03602435166114bb565b34801561063457600080fd5b506102b76114db565b34801561064957600080fd5b5061033f6114ea565b34801561065e57600080fd5b5061033f61150e565b34801561067357600080fd5b506103e4611532565b34801561068857600080fd5b50610694600435611542565b604080519586526020860194909452600160a060020a039092168484015260ff16606084015215156080830152519081900360a00190f35b3480156106d857600080fd5b50610328600435611582565b3480156106f057600080fd5b50610328600435151561159e565b34801561070a57600080fd5b5061033f6115e4565b34801561071f57600080fd5b5061033f600435600160a060020a03602435166115ea565b34801561074357600080fd5b5061032860043561162d565b34801561075b57600080fd5b506102b7611649565b34801561077057600080fd5b50610328611658565b34801561078557600080fd5b506103286004356116c0565b34801561079d57600080fd5b5061033f6116dc565b3480156107b257600080fd5b5061033f611700565b3480156107c757600080fd5b5061033f611706565b3480156107dc57600080fd5b506102b761172a565b3480156107f157600080fd5b50610328600435611739565b34801561080957600080fd5b50610328600160a060020a03600435166024351515611755565b34801561082f57600080fd5b5061033f600435611797565b34801561084757600080fd5b5061032860043515156117a9565b34801561086157600080fd5b50610328600160a060020a03600435166117f0565b34801561088257600080fd5b5061033f611851565b34801561089757600080fd5b506103286004351515611857565b3480156108b157600080fd5b506103e46118af565b600d54600160a060020a031681565b60008054600160a060020a031633146108e157600080fd5b600b54604080517fbb34534c0000000000000000000000000000000000000000000000000000000081527f42616e636f72585570677261646572000000000000000000000000000000000060048201529051600160a060020a039092169163bb34534c916024808201926020929091908290030181600087803b15801561096757600080fd5b505af115801561097b573d6000803e3d6000fd5b505050506040513d602081101561099157600080fd5b5051905061099e816117f0565b600154604080517f546872cc00000000000000000000000000000000000000000000000000000000815260a060020a90920461ffff166004830181815260248401928352855160448501528551600160a060020a0386169463546872cc948893929091606401906020808601910280838360005b83811015610a2a578181015183820152602001610a12565b505050509050019350505050600060405180830381600087803b158015610a5057600080fd5b505af1158015610a64573d6000803e3d6000fd5b50505050610a70611400565b5050565b7f42616e636f72436f6e766572746572557067726164657200000000000000000081565b60055481565b600080610ada610acb600754610abf600854436118bf90919063ffffffff16565b9063ffffffff6118d416565b6005549063ffffffff61190916565b9050600254811115610af0576002549150610af4565b8091505b5090565b60085481565b7f424e54546f6b656e00000000000000000000000000000000000000000000000081565b600080610b52610b43600754610abf600954436118bf90919063ffffffff16565b6006549063ffffffff61190916565b9050600354811115610af0576003549150610af4565b60045481565b600e54760100000000000000000000000000000000000000000000900460ff1681565b7f436f6e747261637452656769737472790000000000000000000000000000000081565b60126020526000908152604090205460ff1681565b600e5460009060a060020a900460ff161515610be557600080fd5b610bed610a9e565b90506004548310158015610c015750808311155b1515610c0c57600080fd5b610c158361191b565b610c25818463ffffffff6118bf16565b6005554360085560408051868152602081018590528082018490529051859133917f4780f3edc9124597ede658e04ed3d8887b58c86943b2a805dc961cf512570b629181900360600190a35050505050565b600e5460009060a060020a900460ff161515610c9257600080fd5b610c9a610a9e565b90506004548210158015610cae5750808211155b1515610cb957600080fd5b610cc28261191b565b610cd2818363ffffffff6118bf16565b6005554360085560408051858152602081018490526000818301529051849133917f4780f3edc9124597ede658e04ed3d8887b58c86943b2a805dc961cf512570b629181900360600190a350505050565b600e54600090760100000000000000000000000000000000000000000000900460ff1680610d5b5750600054600160a060020a031633145b1515610d6657600080fd5b600b54604080517fbb34534c0000000000000000000000000000000000000000000000000000000081527f436f6e747261637452656769737472790000000000000000000000000000000060048201529051600160a060020a039092169163bb34534c916024808201926020929091908290030181600087803b158015610dec57600080fd5b505af1158015610e00573d6000803e3d6000fd5b505050506040513d6020811015610e1657600080fd5b5051600b54909150600160a060020a03808316911614801590610e415750600160a060020a03811615155b1515610e4c57600080fd5b600b8054600c8054600160a060020a0380841673ffffffffffffffffffffffffffffffffffffffff19928316179092559091169216919091179055565b600054600160a060020a03163314610ea057600080fd5b600b54604080517fbb34534c0000000000000000000000000000000000000000000000000000000081527f424e54436f6e766572746572000000000000000000000000000000000000000060048201529051600160a060020a039092169163bb34534c916024808201926020929091908290030181600087803b158015610f2657600080fd5b505af1158015610f3a573d6000803e3d6000fd5b505050506040513d6020811015610f5057600080fd5b5051600d805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055565b60095481565b60035481565b60015460a060020a900461ffff1681565b7f42616e636f72436f6e766572746572466163746f72790000000000000000000081565b600054600160a060020a03163314610fd857600080fd5b82600160a060020a0381161515610fee57600080fd5b82600160a060020a038116151561100457600080fd5b83600160a060020a03811630141561101b57600080fd5b85600160a060020a031663a9059cbb86866040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561109757600080fd5b505af11580156110ab573d6000803e3d6000fd5b505050506040513d60208110156110c157600080fd5b505115156110cb57fe5b505050505050565b600c54600160a060020a031681565b7f424e54436f6e766572746572000000000000000000000000000000000000000081565b7f42616e636f72466f726d756c610000000000000000000000000000000000000081565b3360009081526012602052604081205460ff16151561114857600080fd5b600e5460a860020a900460ff16151561116057600080fd5b600085815260116020908152604080832033845290915290205460ff161561118757600080fd5b5060008481526011602090815260408083203384528252808320805460ff19166001179055868352600f9091529020600281015460a060020a900460ff1615156112355760028101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038616179055828155600181018690558115611230576000828152601060205260409020541561121e57600080fd5b60008281526010602052604090208590555b61128e565b6002810154600160a060020a0385811691161480156112545750805483145b80156112635750600181015486145b151561126e57600080fd5b811561128e57600082815260106020526040902054851461128e57600080fd5b600281018054600160ff60a060020a808404821692909201160274ff0000000000000000000000000000000000000000199091161790556040805187815260208101879052600160a060020a038616818301526060810185905260808101849052905133917f5e77831e701760f7f4a1e61a8e9834d773b52c45d91ba9006b7d2afb7a144739919081900360a00190a2600a54600282015460a060020a900460ff16106110cb576000858152600f602052604090206002015460a860020a900460ff161561135b57600080fd5b6000858152600f6020908152604091829020600201805475ff000000000000000000000000000000000000000000191660a860020a1790558151600160a060020a038716815290810184905281517fd87906b7fce534fc5e6dde30064e777d92d0aaf3a28c72315de8ef2e4134dfef929181900390910190a16110cb84846119d8565b600054600160a060020a031633146113f557600080fd5b600455565b60075481565b600154600160a060020a0316331461141757600080fd5b60015460008054604051600160a060020a0393841693909116917f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a91a3600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600b54600160a060020a031681565b7f436f6e747261637446656174757265730000000000000000000000000000000081565b601160209081526000928352604080842090915290825290205460ff1681565b600054600160a060020a031681565b7f42616e636f724e6574776f726b0000000000000000000000000000000000000081565b7f42616e636f7247617350726963654c696d69740000000000000000000000000081565b600e5460a860020a900460ff1681565b600f60205260009081526040902080546001820154600290920154909190600160a060020a0381169060ff60a060020a820481169160a860020a90041685565b600054600160a060020a0316331461159957600080fd5b600755565b600054600160a060020a031633146115b557600080fd5b600e805491151560a060020a0274ff000000000000000000000000000000000000000019909216919091179055565b60025481565b6000828152601060209081526040808320548352600f90915281206002810154600160a060020a0384811691161461162157600080fd5b805491505b5092915050565b600054600160a060020a0316331461164457600080fd5b600255565b600e54600160a060020a031681565b600054600160a060020a0316331461166f57600080fd5b600c54600b805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055600e805476ff0000000000000000000000000000000000000000000019169055565b600054600160a060020a031633146116d757600080fd5b600355565b7f42616e636f72580000000000000000000000000000000000000000000000000081565b600a5481565b7f42616e636f72585570677261646572000000000000000000000000000000000081565b600154600160a060020a031681565b600054600160a060020a0316331461175057600080fd5b600a55565b600054600160a060020a0316331461176c57600080fd5b600160a060020a03919091166000908152601260205260409020805460ff1916911515919091179055565b60106020526000908152604090205481565b600054600160a060020a031633146117c057600080fd5b600e805491151560a860020a0275ff00000000000000000000000000000000000000000019909216919091179055565b600054600160a060020a0316331461180757600080fd5b600054600160a060020a038281169116141561182257600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60065481565b600054600160a060020a0316331461186e57600080fd5b600e805476ff000000000000000000000000000000000000000000001916911576010000000000000000000000000000000000000000000002919091179055565b600e5460a060020a900460ff1681565b6000818310156118ce57600080fd5b50900390565b6000808315156118e75760009150611626565b508282028284828115156118f757fe5b041461190257600080fd5b9392505050565b60008282018381101561190257600080fd5b600d54604080517ffe417fa5000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a039092169163fe417fa59160448082019260009290919082900301818387803b15801561198757600080fd5b505af115801561199b573d6000803e3d6000fd5b50506040805184815290513393507ff5d7535a395393675f56d066384113754ca9cf4abd37298469934e2e9c2ec90292509081900360200190a250565b60006119e2610b22565b905060045482101580156119f65750808211155b1515611a0157600080fd5b611a11818363ffffffff6118bf16565b60065543600955600e54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015611a8757600080fd5b505af1158015611a9b573d6000803e3d6000fd5b505050506040513d6020811015611ab157600080fd5b5050604080518381529051600160a060020a038516917fbfdc1f3c02b4715077e0be4a262f967d53d4d0fcd76c6987fa2ad6e2257d7c8f919081900360200190a25050505600a165627a7a72305820688b3469b60f1ec3b91e23388d8c1541c0de1c1ba4fcad66367d889524f06b8d0029000000000000000000000000000000000000000000000878678326eac90000000000000000000000000000000000000000000000000010f0cf064dd5920000000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000001a055690d9db80000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4",
  "constructorArguments": "000000000000000000000000000000000000000000000878678326eac90000000000000000000000000000000000000000000000000010f0cf064dd5920000000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000001a055690d9db80000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000052ae12abe5d8bd778bd5397f99ca900624cfadd4"
}