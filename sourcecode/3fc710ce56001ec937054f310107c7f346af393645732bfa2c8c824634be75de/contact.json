{
  "address": "0xd90f5ebc01914bbd357b754956aafb199f4d1624",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KydyCore",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-08\n*/\n\npragma solidity ^0.4.24;\n\n/// @title New Child Kydy's Genes\ncontract GeneSynthesisInterface {\n    /// @dev boolean to check this is the contract we expect to be\n    function isGeneSynthesis() public pure returns (bool);\n\n    /**\n     * @dev Synthesizes the genes of yin and yang Kydy, and returns the result as the child's genes. \n     * @param gene1 genes of yin Kydy\n     * @param gene2 genes of yang Kydy\n     * @return the genes of the child\n     */\n    function synthGenes(uint256 gene1, uint256 gene2) public returns (uint256);\n}\n\n/**\n * @title Part of KydyCore that manages special access controls.\n * @author VREX Lab Co., Ltd\n * @dev See the KydyCore contract documentation to understand how the various contracts are arranged.\n */\ncontract KydyAccessControl {\n    /**\n     * This contract defines access control for the following important roles of the Dyverse:\n     *\n     *     - The CEO: The CEO can assign roles and change the addresses of the smart contracts. \n     *         It can also solely unpause the smart contract. \n     *\n     *     - The CFO: The CFO can withdraw funds from the KydyCore and the auction contracts.\n     *\n     *     - The COO: The COO can release Generation 0 Kydys and create promotional-type Kydys.\n     *\n     */\n\n    /// @dev Used when contract is upgraded. \n    event ContractUpgrade(address newContract);\n\n    // The assigned addresses of each role, as defined in this contract. \n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n\n    /// @dev Checks if the contract is paused. When paused, most of the functions of this contract will also be stopped.\n    bool public paused = false;\n\n    /// @dev Access modifier for CEO-only\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for CFO-only\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for COO-only\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n    /// @dev Access modifier for CEO, CFO, COO\n    modifier onlyCLevel() {\n        require(\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress ||\n            msg.sender == cooAddress\n        );\n        _;\n    }\n\n    /**\n     * @dev Assigns a new address to the CEO. Only the current CEO has the authority.\n     * @param _newCEO The address of the new CEO\n     */\n    function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    /**\n     * @dev Assigns a new address to the CFO. Only the current CEO has the authority.\n     * @param _newCFO The address of the new CFO\n     */\n    function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    /**\n     * @dev Assigns a new address to the COO. Only the current CEO has the authority.\n     * @param _newCOO The address of the new COO\n     */\n    function setCOO(address _newCOO) external onlyCEO {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev Called by any \"C-level\" role to pause the contract. Used only when\n     *  a bug or exploit is detected to limit the damage.\n     */\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    /**\n     * @dev Unpauses the smart contract. Can only be called by the CEO, since\n     *  one reason we may pause the contract is when CFO or COO accounts are\n     *  compromised.\n     * @notice This is public rather than external so it can be called by\n     *  derived contracts.\n     */\n    function unpause() public onlyCEO whenPaused {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }\n}\n\ncontract ERC165Interface {\n    /**\n     * @notice Query if a contract implements an interface\n     * @param interfaceID The interface identifier, as specified in ERC-165\n     * @dev Interface identification is specified in ERC-165. This function\n     *  uses less than 30,000 gas.\n     * @return `true` if the contract implements `interfaceID` and\n     *  `interfaceID` is not 0xffffffff, `false` otherwise\n     */\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\ncontract ERC165 is ERC165Interface {\n    /**\n     * @dev a mapping of interface id to whether or not it's supported\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev implement supportsInterface(bytes4) using a lookup table\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev internal method for registering an interface\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff);\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n// Every ERC-721 compliant contract must implement the ERC721 and ERC165 interfaces.\n/** \n * @title ERC-721 Non-Fungible Token Standard\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n * Note: the ERC-165 identifier for this interface is 0x80ac58cd.\n */\ncontract ERC721Basic is ERC165 {\n    // Below is MUST\n\n    /**\n     * @dev This emits when ownership of any NFT changes by any mechanism.\n     *  This event emits when NFTs are created (`from` == 0) and destroyed\n     *  (`to` == 0). Exception: during contract creation, any number of NFTs\n     *  may be created and assigned without emitting Transfer. At the time of\n     *  any transfer, the approved address for that NFT (if any) is reset to none.\n     */\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /**\n     * @dev This emits when the approved address for an NFT is changed or\n     *  reaffirmed. The zero address indicates there is no approved address.\n     *  When a Transfer event emits, this also indicates that the approved\n     *  address for that NFT (if any) is reset to none.\n     */\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /**\n     * @dev This emits when an operator is enabled or disabled for an owner.\n     *  The operator can manage all NFTs of the owner.\n     */\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /**\n     * @notice Count all NFTs assigned to an owner\n     * @dev NFTs assigned to the zero address are considered invalid, and this\n     *  function throws for queries about the zero address.\n     * @param _owner An address for whom to query the balance\n     * @return The number of NFTs owned by `_owner`, possibly zero\n     */\n    function balanceOf(address _owner) public view returns (uint256);\n\n    /**\n     * @notice Find the owner of an NFT\n     * @dev NFTs assigned to zero address are considered invalid, and queries\n     *  about them do throw.\n     * @param _tokenId The identifier for an NFT\n     * @return The address of the owner of the NFT\n     */\n    function ownerOf(uint256 _tokenId) public view returns (address);\n\n    /**\n     * @notice Transfers the ownership of an NFT from one address to another address\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\n     *  operator, or the approved address for this NFT. Throws if `_from` is\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\n     *  `_tokenId` is not a valid NFT. When transfer is complete, this function\n     *  checks if `_to` is a smart contract (code size > 0). If so, it calls\n     *  `onERC721Received` on `_to` and throws if the return value is not\n     *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n     * @param _from The current owner of the NFT\n     * @param _to The new owner\n     * @param _tokenId The NFT to transfer\n     * @param data Additional data with no specified format, sent in call to `_to`\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) public;\n\n    /**\n     * @notice Transfers the ownership of an NFT from one address to another address\n     * @dev This works identically to the other function with an extra data parameter,\n     *  except this function just sets data to \"\".\n     * @param _from The current owner of the NFT\n     * @param _to The new owner\n     * @param _tokenId The NFT to transfer\n     */\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n\n    /**\n     * @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n     *  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n     *  THEY MAY BE PERMANENTLY LOST\n     * @dev Throws unless `msg.sender` is the current owner, an authorized\n     *  operator, or the approved address for this NFT. Throws if `_from` is\n     *  not the current owner. Throws if `_to` is the zero address. Throws if\n     *  `_tokenId` is not a valid NFT.\n     * @param _from The current owner of the NFT\n     * @param _to The new owner\n     * @param _tokenId The NFT to transfer\n     */\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n\n    /**\n     * @notice Change or reaffirm the approved address for an NFT\n     * @dev The zero address indicates there is no approved address.\n     *  Throws unless `msg.sender` is the current NFT owner, or an authorized\n     *  operator of the current owner.\n     * @param _approved The new approved NFT controller\n     * @param _tokenId The NFT to approve\n     */\n    function approve(address _approved, uint256 _tokenId) external;\n\n    /**\n     * @notice Enable or disable approval for a third party (\"operator\") to manage\n     *  all of `msg.sender`'s assets\n     * @dev Emits the ApprovalForAll event. The contract MUST allow\n     *  multiple operators per owner.\n     * @param _operator Address to add to the set of authorized operators\n     * @param _approved True if the operator is approved, false to revoke approval\n     */\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /**\n     * @notice Get the approved address for a single NFT\n     * @dev Throws if `_tokenId` is not a valid NFT.\n     * @param _tokenId The NFT to find the approved address for\n     * @return The approved address for this NFT, or the zero address if there is none\n     */\n    function getApproved(uint256 _tokenId) public view returns (address);\n\n    /**\n     * @notice Query if an address is an authorized operator for another address\n     * @param _owner The address that owns the NFTs\n     * @param _operator The address that acts on behalf of the owner\n     * @return True if `_operator` is an approved operator for `_owner`, false otherwise\n     */\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n    // Below is OPTIONAL\n\n    // ERC721Metadata\n    // The metadata extension is OPTIONAL for ERC-721 smart contracts (see \"caveats\", below). This allows your smart contract to be interrogated for its name and for details about the assets which your NFTs represent.\n    \n    /**\n     * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n     * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n     *  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n     */\n\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external view returns (string _name);\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external view returns (string _symbol);\n\n    /**\n     * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n     * @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n     *  3986. The URI may point to a JSON file that conforms to the \"ERC721\n     *  Metadata JSON Schema\".\n     */\n    function tokenURI(uint256 _tokenId) external view returns (string);\n\n    // ERC721Enumerable\n    // The enumeration extension is OPTIONAL for ERC-721 smart contracts (see \"caveats\", below). This allows your contract to publish its full list of NFTs and make them discoverable.\n\n    /**\n     * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n     * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n     *  Note: the ERC-165 identifier for this interface is 0x780e9d63.\n     */\n\n    /**\n     * @notice Count NFTs tracked by this contract\n     * @return A count of valid NFTs tracked by this contract, where each one of\n     *  them has an assigned and queryable owner not equal to the zero address\n     */\n    function totalSupply() public view returns (uint256);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n/**\n * @title The base contract of Dyverse. ERC-721 compliant.\n * @author VREX Lab Co., Ltd\n * @dev See the KydyCore contract for more info on details. \n */\ncontract KydyBase is KydyAccessControl, ERC721Basic {\n    using SafeMath for uint256;\n    using Address for address;\n\n    /*** EVENT ***/\n\n    /**\n     * @dev The Creation event takes place whenever a new Kydy is created via Synthesis or minted by the COO.  \n     */\n    event Created(address indexed owner, uint256 kydyId, uint256 yinId, uint256 yangId, uint256 genes);\n\n    /*** DATA TYPES ***/\n\n    /**\n     * @dev Every Kydy in the Dyverse is a copy of this structure. \n     */\n    struct Kydy {\n        // The Kydy's genetic code is stored into 256-bits and never changes.\n        uint256 genes;\n\n        // The timestamp of the block when this Kydy was created\n        uint64 createdTime;\n\n        // The timestamp of when this Kydy can synthesize again.\n        uint64 rechargeEndBlock;\n\n        // The ID of the parents (Yin, female, and Yang, male). It is 0 for Generation 0 Kydys.\n        uint32 yinId;\n        uint32 yangId;\n\n        // The ID of the yang Kydy that the yin Kydy is creating with. \n        uint32 synthesizingWithId;\n\n        // The recharge index that represents the duration of the recharge for this Kydy. \n        // After each synthesis, this increases by one for both yin and yang Kydys of the synthesis. \n        uint16 rechargeIndex;\n\n        // The generation index of this Kydy. The newly created Kydy takes the generation index of the parent \n        // with a larger generation index. \n        uint16 generation;\n    }\n\n    /*** CONSTANTS ***/\n\n    /**\n     * @dev An array table of the recharge duration. Referred to as \"creation time\" for yin \n     *  and \"synthesis recharge\" for yang Kydys. Maximum duration is 4 days. \n     */\n    uint32[14] public recharges = [\n        uint32(1 minutes),\n        uint32(2 minutes),\n        uint32(5 minutes),\n        uint32(10 minutes),\n        uint32(30 minutes),\n        uint32(1 hours),\n        uint32(2 hours),\n        uint32(4 hours),\n        uint32(8 hours),\n        uint32(16 hours),\n        uint32(1 days),\n        uint32(2 days),\n        uint32(4 days)\n    ];\n\n    // An approximation of seconds between blocks.\n    uint256 public secondsPerBlock = 15;\n\n    /*** STORAGE ***/\n\n    /**\n     * @dev This array contains the ID of every Kydy as an index. \n     */\n    Kydy[] kydys;\n\n    /**\n     * @dev This maps each Kydy ID to the address of the owner. Every Kydy must have an owner, even Gen 0 Kydys.\n     *  You can view this mapping via `ownerOf()`.\n     */\n    mapping (uint256 => address) internal kydyIndexToOwner;\n\n    /**\n     * @dev This maps the owner's address to the number of Kydys that the address owns.\n     *  You can view this mapping via `balanceOf()`.\n     */\n    mapping (address => uint256) internal ownershipTokenCount;\n\n    /**\n     * @dev This maps transferring Kydy IDs to the the approved address to call safeTransferFrom().\n     *  You can view this mapping via `getApproved()`.\n     */\n    mapping (uint256 => address) internal kydyIndexToApproved;\n\n    /**\n     * @dev This maps KydyIDs to the address approved to synthesize via synthesizeWithAuto().\n     *  You can view this mapping via `getSynthesizeApproved()`.\n     */\n    mapping (uint256 => address) internal synthesizeAllowedToAddress;\n\n    /**\n     * @dev This maps the owner to operator approvals, for the usage of setApprovalForAll().\n     */\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Returns the owner of the given Kydy ID. Required for ERC-721 compliance.\n     * @param _tokenId uint256 ID of the Kydy in query\n     * @return the address of the owner of the given Kydy ID\n     */\n    function ownerOf(uint256 _tokenId) public view returns (address) {\n        address owner = kydyIndexToOwner[_tokenId];\n        require(owner != address(0));\n        return owner;\n    }\n\n    /**\n     * @dev Returns the approved address of the receiving owner for a Kydy ID. Required for ERC-721 compliance.\n     * @param tokenId uint256 ID of the Kydy in query\n     * @return the address of the approved, receiving owner for the given Kydy ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId));\n        return kydyIndexToApproved[tokenId];\n    }\n\n    /**\n     * @dev Returns the synthesize approved address of the Kydy ID.\n     * @param tokenId uint256 ID of the Kydy in query\n     * @return the address of the synthesizing approved of the given Kydy ID\n     */\n    function getSynthesizeApproved(uint256 tokenId) external view returns (address) {\n        require(_exists(tokenId));\n        return synthesizeAllowedToAddress[tokenId];\n    }\n\n    /**\n     * @dev Returns whether an operator is approved by the owner. Required for ERC-721 compliance.\n     * @param owner owner address to check whether it is approved\n     * @param operator operator address to check whether it is approved\n     * @return bool whether the operator is approved or not\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of the operator. Required for ERC-721 compliance.\n     * @param to operator address to set the approval\n     * @param approved the status to be set\n     */\n    function setApprovalForAll(address to, bool approved) external {\n        require(to != msg.sender);\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /// @dev Assigns ownership of this Kydy to an address.\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to] = ownershipTokenCount[_to].add(1);\n        // Transfers the ownership of this Kydy.\n        kydyIndexToOwner[_tokenId] = _to;\n\n        ownershipTokenCount[_from] = ownershipTokenCount[_from].sub(1);\n        // After a transfer, synthesis allowance is also reset.\n        delete synthesizeAllowedToAddress[_tokenId];\n        // Clears any previously approved transfer.\n        delete kydyIndexToApproved[_tokenId];\n\n        // Emit the transfer event.\n        emit Transfer(_from, _to, _tokenId);\n    }\n\n    /**\n     * @dev Returns whether the given Kydy ID exists\n     * @param _tokenId uint256 ID of the Kydy in query\n     * @return whether the Kydy exists\n     */\n    function _exists(uint256 _tokenId) internal view returns (bool) {\n        address owner = kydyIndexToOwner[_tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer the Kydy ID\n     * @param _spender address of the spender to query\n     * @param _tokenId uint256 ID of the Kydy to be transferred\n     * @return bool whether the msg.sender is approved\n     */\n    function _isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n        address owner = ownerOf(_tokenId);\n        // Disable solium check because of\n        // https://github.com/duaraghav8/Solium/issues/175\n        // solium-disable-next-line operator-whitespace\n        return (_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender));\n    }\n\n    /**\n     * @dev Internal function to add a Kydy ID to the new owner's list.\n     * @param _to address the new owner's address\n     * @param _tokenId uint256 ID of the transferred Kydy \n     */\n    function _addTokenTo(address _to, uint256 _tokenId) internal {\n        // Checks if the owner of the Kydy is 0x0 before the transfer.\n        require(kydyIndexToOwner[_tokenId] == address(0));\n        // Transfers the ownership to the new owner.\n        kydyIndexToOwner[_tokenId] = _to;\n        // Increases the total Kydy count of the new owner.\n        ownershipTokenCount[_to] = ownershipTokenCount[_to].add(1);\n    }\n\n    /**\n     * @dev Internal function to remove a Kydy ID from the previous owner's list.\n     * @param _from address the previous owner's address\n     * @param _tokenId uint256 ID of the transferred Kydy \n     */\n    function _removeTokenFrom(address _from, uint256 _tokenId) internal {\n        // Checks the current owner of the Kydy is '_from'.\n        require(ownerOf(_tokenId) == _from);\n        // Reduces the total Kydy count of the previous owner.\n        ownershipTokenCount[_from] = ownershipTokenCount[_from].sub(1);\n        // Deletes the transferred Kydy from the current owner's list.\n        kydyIndexToOwner[_tokenId] = address(0);\n    }\n\n    /**\n     * @dev Internal function to mint a new Kydy.\n     * @param _to The address that owns the newly minted Kydy\n     * @param _tokenId uint256 ID of the newly minted Kydy\n     */\n    function _mint(address _to, uint256 _tokenId) internal {\n        require(!_exists(_tokenId));\n        _addTokenTo(_to, _tokenId);\n        emit Transfer(address(0), _to, _tokenId);\n    }\n\n    /**\n     * @dev Internal function to clear current approvals of a given Kydy ID.\n     * @param _owner owner of the Kydy\n     * @param _tokenId uint256 ID of the Kydy to be transferred\n     */\n    function _clearApproval(address _owner, uint256 _tokenId) internal {\n        require(ownerOf(_tokenId) == _owner);\n        if (kydyIndexToApproved[_tokenId] != address(0)) {\n            kydyIndexToApproved[_tokenId] = address(0);\n        }\n        if (synthesizeAllowedToAddress[_tokenId] != address(0)) {\n            synthesizeAllowedToAddress[_tokenId] = address(0);\n        }\n    }\n\n    /**\n     * @dev Internal function that creates a new Kydy and stores it. \n     * @param _yinId The ID of the yin Kydy (zero for Generation 0 Kydy)\n     * @param _yangId The ID of the yang Kydy (zero for Generation 0 Kydy)\n     * @param _generation The generation number of the new Kydy.\n     * @param _genes The Kydy's gene code\n     * @param _owner The owner of this Kydy, must be non-zero (except for the ID 0)\n     */\n    function _createKydy(\n        uint256 _yinId,\n        uint256 _yangId,\n        uint256 _generation,\n        uint256 _genes,\n        address _owner\n    )\n        internal\n        returns (uint)\n    {\n        require(_yinId == uint256(uint32(_yinId)));\n        require(_yangId == uint256(uint32(_yangId)));\n        require(_generation == uint256(uint16(_generation)));\n\n        // New Kydy's recharge index is its generation / 2.\n        uint16 rechargeIndex = uint16(_generation / 2);\n        if (rechargeIndex > 13) {\n            rechargeIndex = 13;\n        }\n\n        Kydy memory _kyd = Kydy({\n            genes: _genes,\n            createdTime: uint64(now),\n            rechargeEndBlock: 0,\n            yinId: uint32(_yinId),\n            yangId: uint32(_yangId),\n            synthesizingWithId: 0,\n            rechargeIndex: rechargeIndex,\n            generation: uint16(_generation)\n        });\n        uint256 newbabyKydyId = kydys.push(_kyd) - 1;\n\n        // Just in case.\n        require(newbabyKydyId == uint256(uint32(newbabyKydyId)));\n\n        // Emits the Created event.\n        emit Created(\n            _owner,\n            newbabyKydyId,\n            uint256(_kyd.yinId),\n            uint256(_kyd.yangId),\n            _kyd.genes\n        );\n\n        // Here grants ownership, and also emits the Transfer event.\n        _mint(_owner, newbabyKydyId);\n\n        return newbabyKydyId;\n    }\n\n    // Any C-level roles can change the seconds per block\n    function setSecondsPerBlock(uint256 secs) external onlyCLevel {\n        require(secs < recharges[0]);\n        secondsPerBlock = secs;\n    }\n}\n\n/**\n * @notice This is MUST to be implemented.\n *  A wallet/broker/auction application MUST implement the wallet interface if it will accept safe transfers.\n * @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\n */\ncontract ERC721TokenReceiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     *  after a `transfer`. This function MAY throw to revert and reject the\n     *  transfer. Return of other than the magic value MUST result in the\n     *  transaction being reverted.\n     *  Note: the contract address is always the message sender.\n     * @param _operator The address which called `safeTransferFrom` function\n     * @param _from The address which previously owned the token\n     * @param _tokenId The NFT identifier which is being transferred\n     * @param _data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     *  unless throwing\n     */\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) public returns (bytes4);\n}\n\n// File: contracts/lib/Strings.sol\n\nlibrary Strings {\n    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function uint2str(uint i) internal pure returns (string) {\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\n/**\n * @title Part of the KydyCore contract that manages ownership, ERC-721 compliant.\n * @author VREX Lab Co., Ltd\n * @dev Ref: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n *  See the KydyCore contract documentation to understand how the various contracts are arranged.\n */\ncontract KydyOwnership is KydyBase {\n    using Strings for string;\n\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n    string public constant _name = \"Dyverse\";\n    string public constant _symbol = \"KYDY\";\n\n    // Base Server Address for Token MetaData URI\n    string internal tokenURIBase = \"http://testapi.dyver.se/api/KydyMetadata/\";\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `ERC721TokenReceiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n    /**\n     * 0x01ffc9a7 ===\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\n     */\n\n    bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n    /*\n     * 0x80ac58cd ===\n     *     bytes4(keccak256('balanceOf(address)')) ^\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\n     *     bytes4(keccak256('approve(address,uint256)')) ^\n     *     bytes4(keccak256('getApproved(uint256)')) ^\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n     */\n\n    bytes4 private constant _InterfaceId_ERC721Metadata = 0x5b5e139f;\n    /**\n     * 0x5b5e139f ===\n     *     bytes4(keccak256('name()')) ^\n     *     bytes4(keccak256('symbol()')) ^\n     *     bytes4(keccak256('tokenURI(uint256)'))\n     */\n\n    constructor() public {\n        _registerInterface(_InterfaceId_ERC165);\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_InterfaceId_ERC721);\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_InterfaceId_ERC721Metadata);\n    }\n\n    /**\n     * @dev Checks if a given address is the current owner of this Kydy.\n     * @param _claimant the address which we want to query the ownership of the Kydy ID.\n     * @param _tokenId Kydy id, only valid when > 0\n     */\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return kydyIndexToOwner[_tokenId] == _claimant;\n    }\n\n    /**\n     * @dev Grants an approval to the given address for safeTransferFrom(), overwriting any\n     *  previous approval. Setting _approved to address(0) clears all transfer approval.\n     *  Note that _approve() does NOT emit the Approval event. This is intentional because\n     *  _approve() and safeTransferFrom() are used together when putting Kydys to the auction,\n     *  and there is no need to spam the log with Approval events in that case.\n     */\n    function _approve(uint256 _tokenId, address _approved) internal {\n        kydyIndexToApproved[_tokenId] = _approved;\n    }\n\n    /**\n     * @dev Transfers a Kydy owned by this contract to the specified address.\n     *  Used to rescue lost Kydys. (There is no \"proper\" flow where this contract\n     *  should be the owner of any Kydy. This function exists for us to reassign\n     *  the ownership of Kydys that users may have accidentally sent to our address.)\n     * @param _kydyId ID of the lost Kydy\n     * @param _recipient address to send the Kydy to\n     */\n    function rescueLostKydy(uint256 _kydyId, address _recipient) external onlyCOO whenNotPaused {\n        require(_owns(this, _kydyId));\n        _transfer(this, _recipient, _kydyId);\n    }\n\n    /**\n     * @dev Gets the number of Kydys owned by the given address.\n     *  Required for ERC-721 compliance.\n     * @param _owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address _owner) public view returns (uint256) {\n        require(_owner != address(0));\n        return ownershipTokenCount[_owner];\n    }\n\n    /**\n     * @dev Approves another address to transfer the given Kydy ID.\n     *  The zero address indicates that there is no approved address.\n     *  There can only be one approved address per Kydy at a given time.\n     *  Can only be called by the Kydy owner or an approved operator.\n     *  Required for ERC-721 compliance.\n     * @param to address to be approved for the given Kydy ID\n     * @param tokenId uint256 ID of the Kydy to be approved\n     */\n    function approve(address to, uint256 tokenId) external whenNotPaused {\n        address owner = ownerOf(tokenId);\n        require(to != owner);\n        // Owner or approved operator by owner can approve the another address\n        // to transfer the Kydy.\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n        // Approves the given address.\n        _approve(tokenId, to);\n\n        // Emits the Approval event.\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Transfers the ownership of the Kydy to another address.\n     *  Usage of this function is discouraged, use `safeTransferFrom` whenever possible.\n     *  Requires the msg sender to be the owner, approved, or operator.\n     *  Required for ERC-721 compliance.\n     * @param from current owner of the Kydy\n     * @param to address to receive the ownership of the given Kydy ID\n     * @param tokenId uint256 ID of the Kydy to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public whenNotPaused {\n        // Checks the caller is the owner or approved one or an operator.\n        require(_isApprovedOrOwner(msg.sender, tokenId));\n        // Safety check to prevent from transferring Kydy to 0x0 address.\n        require(to != address(0));\n\n        // Clears approval from current owner.\n        _clearApproval(from, tokenId);\n        // Resets the ownership of this Kydy from current owner and sets it to 0x0.\n        _removeTokenFrom(from, tokenId);\n        // Grants the ownership of this Kydy to new owner.\n        _addTokenTo(to, tokenId);\n\n        // Emits the Transfer event.\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given Kydy to another address.\n     *  If the target address is a contract, it must implement `onERC721Received`,\n     *  which is called upon a safe transfer, and return the magic value\n     *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`;\n     *  Otherwise, the transfer is reverted.\n     *  Requires the msg sender to be the owner, approved, or operator.\n     *  Required for ERC-721 compliance.\n     * @param from current owner of the Kydy\n     * @param to address to receive the ownership of the given Kydy ID\n     * @param tokenId uint256 ID of the Kydy to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        // solium-disable-next-line arg-overflow\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given Kydy to another address.\n     *  If the target address is a contract, it must implement `onERC721Received`,\n     *  which is called upon a safe transfer, and return the magic value\n     *  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`;\n     *  Otherwise, the transfer is reverted.\n     *  Requires the msg sender to be the owner, approved, or operator.\n     *  Required for ERC-721 compliance.\n     * @param from current owner of the Kydy\n     * @param to address to receive the ownership of the given Kydy ID\n     * @param tokenId uint256 ID of the Kydy to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) public {\n        transferFrom(from, to, tokenId);\n        // solium-disable-next-line arg-overflow\n        require(_checkOnERC721Received(from, to, tokenId, _data));\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address.\n     *  This function is not executed if the target address is not a contract.\n     * @param _from address representing the previous owner of the given Kydy ID\n     * @param _to target address that will receive the Kydys\n     * @param _tokenId uint256 ID of the Kydy to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address _from, address _to, uint256 _tokenId, bytes _data) internal returns (bool) {\n        if (!_to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n    \n    /**\n     * @dev Gets the token name.\n     *  Required for ERC721Metadata compliance.\n     * @return string representing the token name\n     */\n    function name() external view returns (string) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol.\n     *  Required for ERC721Metadata compliance.\n     * @return string representing the token symbol\n     */\n    function symbol() external view returns (string) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns an URI for a given Kydy ID.\n     *  Throws if the token ID does not exist. May return an empty string.\n     *  Required for ERC721Metadata compliance.\n     * @param tokenId uint256 ID of the token to query\n     */\n    function tokenURI(uint256 tokenId) external view returns (string) {\n        require(_exists(tokenId));\n        return Strings.strConcat(\n            tokenURIBase,\n            Strings.uint2str(tokenId)\n        );\n    }\n\n    /**\n     * @dev Gets the total amount of Kydys stored in the contract\n     * @return uint256 representing the total amount of Kydys\n     */\n    function totalSupply() public view returns (uint256) {\n        return kydys.length - 1;\n    }\n\n    /**\n     * @notice Returns a list of all Kydy IDs assigned to an address.\n     * @param _owner The owner whose Kydys we are interested in.\n     * @dev This function MUST NEVER be called by smart contract code. It's pretty\n     *  expensive (it looks into the entire Kydy array looking for Kydys belonging to owner),\n     *  and it also returns a dynamic array, which is only supported for web3 calls, and\n     *  not contract-to-contract calls.\n     */\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalKydys = totalSupply();\n            uint256 resultIndex = 0;\n\n            // All Kydys have IDs starting at 1 and increasing sequentially up to the totalKydy count.\n            uint256 kydyId;\n\n            for (kydyId = 1; kydyId <= totalKydys; kydyId++) {\n                if (kydyIndexToOwner[kydyId] == _owner) {\n                    result[resultIndex] = kydyId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n}\n\n/**\n * @title This manages synthesis and creation of Kydys.\n * @author VREX Lab Co., Ltd\n * @dev Please reference the KydyCore contract for details. \n */\ncontract KydySynthesis is KydyOwnership {\n\n    /**\n     * @dev The Creating event is emitted when two Kydys synthesize and the creation\n     *  timer begins by the yin.\n     */\n    event Creating(address owner, uint256 yinId, uint256 yangId, uint256 rechargeEndBlock);\n\n    /**\n     * @notice The minimum payment required for synthesizeWithAuto(). This fee is for\n     *  the gas cost paid by whoever calls bringKydyHome(), and can be updated by the COO address.\n     */\n    uint256 public autoCreationFee = 14 finney;\n\n    // Number of the Kydys that are creating a new Kydy.\n    uint256 public creatingKydys;\n\n    /**\n     * @dev The address of the sibling contract that mixes and combines genes of the two parent Kydys. \n     */\n    GeneSynthesisInterface public geneSynthesis;\n\n    /**\n     * @dev Updates the address of the genetic contract. Only CEO may call this function.\n     * @param _address An address of the new GeneSynthesis contract instance.\n     */\n    function setGeneSynthesisAddress(address _address) external onlyCEO {\n        GeneSynthesisInterface candidateContract = GeneSynthesisInterface(_address);\n\n        // Verifies that the contract is valid.\n        require(candidateContract.isGeneSynthesis());\n\n        // Sets the new GeneSynthesis contract address.\n        geneSynthesis = candidateContract;\n    }\n\n    /**\n     * @dev Checks that the Kydy is able to synthesize. \n     */\n    function _isReadyToSynthesize(Kydy _kyd) internal view returns (bool) {\n        // Double-checking if there is any pending creation event. \n        return (_kyd.synthesizingWithId == 0) && (_kyd.rechargeEndBlock <= uint64(block.number));\n    }\n\n    /**\n     * @dev Checks if a yang Kydy has been approved to synthesize with this yin Kydy.\n     */\n    function _isSynthesizingAllowed(uint256 _yangId, uint256 _yinId) internal view returns (bool) {\n        address yinOwner = kydyIndexToOwner[_yinId];\n        address yangOwner = kydyIndexToOwner[_yangId];\n\n        return (yinOwner == yangOwner || synthesizeAllowedToAddress[_yangId] == yinOwner);\n    }\n\n    /**\n     * @dev Sets the rechargeEndTime for the given Kydy, based on its current rechargeIndex.\n     *  The rechargeIndex increases until it hits the cap.\n     * @param _kyd A reference to the Kydy that needs its timer to be started.\n     */\n    function _triggerRecharge(Kydy storage _kyd) internal {\n        // Computes the approximation of the end of recharge time in blocks (based on current rechargeIndex).\n        _kyd.rechargeEndBlock = uint64((recharges[_kyd.rechargeIndex] / secondsPerBlock) + block.number);\n\n        // Increases this Kydy's synthesizing count, and the cap is fixed at 12.\n        if (_kyd.rechargeIndex < 12) {\n            _kyd.rechargeIndex += 1;\n        }\n    }\n\n    /**\n     * @notice Grants approval to another user to synthesize with one of your Kydys.\n     * @param _address The approved address of the yin Kydy that can synthesize with your yang Kydy. \n     * @param _yangId Your kydy that _address can now synthesize with.\n     */\n    function approveSynthesizing(address _address, uint256 _yangId)\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _yangId));\n        synthesizeAllowedToAddress[_yangId] = _address;\n    }\n\n    /**\n     * @dev Updates the minimum payment required for calling bringKydyHome(). Only COO\n     *  can call this function. \n     */\n    function setAutoCreationFee(uint256 value) external onlyCOO {\n        autoCreationFee = value;\n    }\n\n    /// @dev Checks if this Kydy is creating and if the creation period is complete. \n    function _isReadyToBringKydyHome(Kydy _yin) private view returns (bool) {\n        return (_yin.synthesizingWithId != 0) && (_yin.rechargeEndBlock <= uint64(block.number));\n    }\n\n    /**\n     * @notice Checks if this Kydy is able to synthesize \n     * @param _kydyId reference the ID of the Kydy\n     */\n    function isReadyToSynthesize(uint256 _kydyId)\n        public\n        view\n        returns (bool)\n    {\n        require(_kydyId > 0);\n        Kydy storage kyd = kydys[_kydyId];\n        return _isReadyToSynthesize(kyd);\n    }\n\n    /**\n     * @dev Checks if the Kydy is currently creating.\n     * @param _kydyId reference the ID of the Kydy\n     */\n    function isCreating(uint256 _kydyId)\n        public\n        view\n        returns (bool)\n    {\n        require(_kydyId > 0);\n\n        return kydys[_kydyId].synthesizingWithId != 0;\n    }\n\n    /**\n     * @dev Internal check to see if these yang and yin are a valid couple. \n     * @param _yin A reference to the Kydy struct of the potential yin.\n     * @param _yinId The yin's ID.\n     * @param _yang A reference to the Kydy struct of the potential yang.\n     * @param _yangId The yang's ID\n     */\n    function _isValidCouple(\n        Kydy storage _yin,\n        uint256 _yinId,\n        Kydy storage _yang,\n        uint256 _yangId\n    )\n        private\n        view\n        returns(bool)\n    {\n        // Kydy can't synthesize with itself.\n        if (_yinId == _yangId) {\n            return false;\n        }\n\n        // Kydys can't synthesize with their parents.\n        if (_yin.yinId == _yangId || _yin.yangId == _yangId) {\n            return false;\n        }\n        if (_yang.yinId == _yinId || _yang.yangId == _yinId) {\n            return false;\n        }\n\n        // Skip sibling check for Gen 0\n        if (_yang.yinId == 0 || _yin.yinId == 0) {\n            return true;\n        }\n\n        // Kydys can't synthesize with full or half siblings.\n        if (_yang.yinId == _yin.yinId || _yang.yinId == _yin.yangId) {\n            return false;\n        }\n        if (_yang.yangId == _yin.yinId || _yang.yangId == _yin.yangId) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @dev Internal check to see if these yang and yin Kydys, connected via market, are a valid couple for synthesis. \n     */\n    function _canSynthesizeWithViaAuction(uint256 _yinId, uint256 _yangId)\n        internal\n        view\n        returns (bool)\n    {\n        Kydy storage yin = kydys[_yinId];\n        Kydy storage yang = kydys[_yangId];\n        return _isValidCouple(yin, _yinId, yang, _yangId);\n    }\n\n    /**\n     * @dev Checks if the two Kydys can synthesize together, including checks for ownership and synthesizing approvals. \n     * @param _yinId ID of the yin Kydy\n     * @param _yangId ID of the yang Kydy\n     */\n    function canSynthesizeWith(uint256 _yinId, uint256 _yangId)\n        external\n        view\n        returns(bool)\n    {\n        require(_yinId > 0);\n        require(_yangId > 0);\n        Kydy storage yin = kydys[_yinId];\n        Kydy storage yang = kydys[_yangId];\n        return _isValidCouple(yin, _yinId, yang, _yangId) &&\n            _isSynthesizingAllowed(_yangId, _yinId);\n    }\n\n    /**\n     * @dev Internal function to start synthesizing, when all the conditions are met\n     */\n    function _synthesizeWith(uint256 _yinId, uint256 _yangId) internal {\n        Kydy storage yang = kydys[_yangId];\n        Kydy storage yin = kydys[_yinId];\n\n        // Marks this yin as creating, and make note of who the yang Kydy is.\n        yin.synthesizingWithId = uint32(_yangId);\n\n        // Triggers the recharge for both parents.\n        _triggerRecharge(yang);\n        _triggerRecharge(yin);\n\n        // Clears synthesizing permission for both parents, just in case.\n        delete synthesizeAllowedToAddress[_yinId];\n        delete synthesizeAllowedToAddress[_yangId];\n\n        // When a Kydy starts creating, this number is increased. \n        creatingKydys++;\n\n        // Emits the Creating event.\n        emit Creating(kydyIndexToOwner[_yinId], _yinId, _yangId, yin.rechargeEndBlock);\n    }\n\n    /**\n     * @dev Synthesis between two approved Kydys. Requires a pre-payment of the fee to the first caller of bringKydyHome().\n     * @param _yinId ID of the Kydy which will be a yin (will start creation if successful)\n     * @param _yangId ID of the Kydy which will be a yang (will begin its synthesizing cooldown if successful)\n     */\n    function synthesizeWithAuto(uint256 _yinId, uint256 _yangId)\n        external\n        payable\n        whenNotPaused\n    {\n        // Checks for pre-payment.\n        require(msg.value >= autoCreationFee);\n\n        // Caller must be the yin's owner.\n        require(_owns(msg.sender, _yinId));\n\n        // Checks if the caller has valid authority for this synthesis\n        require(_isSynthesizingAllowed(_yangId, _yinId));\n\n        // Gets a reference of the potential yin.\n        Kydy storage yin = kydys[_yinId];\n\n        // Checks that the potential yin is ready to synthesize\n        require(_isReadyToSynthesize(yin));\n\n        // Gets a reference of the potential yang.\n        Kydy storage yang = kydys[_yangId];\n\n        // Checks that the potential yang is ready to synthesize\n        require(_isReadyToSynthesize(yang));\n\n        // Checks that these Kydys are a valid couple.\n        require(_isValidCouple(\n            yin,\n            _yinId,\n            yang,\n            _yangId\n        ));\n\n        // All checks passed! Yin Kydy starts creating.\n        _synthesizeWith(_yinId, _yangId);\n\n    }\n\n    /**\n     * @notice Let's bring the new Kydy to it's home!\n     * @param _yinId A Kydy which is ready to bring the newly created Kydy to home.\n     * @return The Kydy ID of the newly created Kydy.\n     * @dev The newly created Kydy is transferred to the owner of the yin Kydy. Anyone is welcome to call this function.\n     */\n    function bringKydyHome(uint256 _yinId)\n        external\n        whenNotPaused\n        returns(uint256)\n    {\n        // Gets a reference of the yin from storage.\n        Kydy storage yin = kydys[_yinId];\n\n        // Checks that the yin is a valid Kydy.\n        require(yin.createdTime != 0);\n\n        // Checks that the yin is in creation mode, and the creating period is over.\n        require(_isReadyToBringKydyHome(yin));\n\n        // Gets a reference of the yang from storage.\n        uint256 yangId = yin.synthesizingWithId;\n        Kydy storage yang = kydys[yangId];\n\n        // Ascertains which has the higher generation number between the two parents.\n        uint16 parentGen = yin.generation;\n        if (yang.generation > yin.generation) {\n            parentGen = yang.generation;\n        }\n\n        // The baby Kydy receives its genes \n        uint256 childGenes = geneSynthesis.synthGenes(yin.genes, yang.genes);\n\n        // The baby Kydy is now on blockchain\n        address owner = kydyIndexToOwner[_yinId];\n        uint256 kydyId = _createKydy(_yinId, yin.synthesizingWithId, parentGen + 1, childGenes, owner);\n\n        // Clears the synthesis status of the parents\n        delete yin.synthesizingWithId;\n\n        // When a baby Kydy is created, this number is decreased back. \n        creatingKydys--;\n\n        // Sends the fee to the person who called this. \n        msg.sender.transfer(autoCreationFee);\n\n        // Returns the new Kydy's ID.\n        return kydyId;\n    }\n}\n\ncontract ERC721Holder is ERC721TokenReceiver {\n    function onERC721Received(address, address, uint256, bytes) public returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n\n/**\n * @title Base auction contract of the Dyverse\n * @author VREX Lab Co., Ltd\n * @dev Contains necessary functions and variables for the auction.\n *  Inherits `ERC721Holder` contract which is the implementation of the `ERC721TokenReceiver`.\n *  This is to accept safe transfers.\n */\ncontract AuctionBase is ERC721Holder {\n    using SafeMath for uint256;\n\n    // Represents an auction on an NFT\n    struct Auction {\n        // Current owner of NFT\n        address seller;\n        // Price (in wei) of NFT\n        uint128 price;\n        // Time when the auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n    }\n\n    // Reference to contract tracking NFT ownership\n    ERC721Basic public nonFungibleContract;\n\n    // The amount owner takes from the sale, (in basis points, which are 1/100 of a percent).\n    uint256 public ownerCut;\n\n    // Maps token ID to it's corresponding auction.\n    mapping (uint256 => Auction) tokenIdToAuction;\n\n    event AuctionCreated(uint256 tokenId, uint256 price);\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address bidder);\n    event AuctionCanceled(uint256 tokenId);\n\n    /// @dev Disables sending funds to this contract.\n    function() external {}\n\n    /// @dev A modifier to check if the given value can fit in 64-bits.\n    modifier canBeStoredWith64Bits(uint256 _value) {\n        require(_value <= (2**64 - 1));\n        _;\n    }\n\n    /// @dev A modifier to check if the given value can fit in 128-bits.\n    modifier canBeStoredWith128Bits(uint256 _value) {\n        require(_value <= (2**128 - 1));\n        _;\n    }\n\n    /**\n     * @dev Returns true if the claimant owns the token.\n     * @param _claimant An address which to query the ownership of the token.\n     * @param _tokenId ID of the token to query the owner of.\n     */\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }\n\n    /**\n     * @dev Escrows the NFT. Grants the ownership of the NFT to this contract safely.\n     *  Throws if the escrow fails.\n     * @param _owner Current owner of the token.\n     * @param _tokenId ID of the token to escrow.\n     */\n    function _escrow(address _owner, uint256 _tokenId) internal {\n        nonFungibleContract.safeTransferFrom(_owner, this, _tokenId);\n    }\n\n    /**\n     * @dev Transfers an NFT owned by this contract to another address safely.\n     * @param _receiver The receiving address of NFT.\n     * @param _tokenId ID of the token to transfer.\n     */\n    function _transfer(address _receiver, uint256 _tokenId) internal {\n        nonFungibleContract.safeTransferFrom(this, _receiver, _tokenId);\n    }\n\n    /**\n     * @dev Adds an auction to the list of open auctions. \n     * @param _tokenId ID of the token to be put on auction.\n     * @param _auction Auction information of this token to open.\n     */\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\n        tokenIdToAuction[_tokenId] = _auction;\n\n        emit AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.price)\n        );\n    }\n\n    /// @dev Cancels the auction which the _seller wants.\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        emit AuctionCanceled(_tokenId);\n    }\n\n    /**\n     * @dev Computes the price and sends it to the seller.\n     *  Note that this does NOT transfer the ownership of the token.\n     */\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        // Gets a reference of the token from auction storage.\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Checks that this auction is currently open\n        require(_isOnAuction(auction));\n\n        // Checks that the bid is greater than or equal to the current token price.\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Gets a reference of the seller before the auction gets deleted.\n        address seller = auction.seller;\n\n        // Removes the auction before sending the proceeds to the sender\n        _removeAuction(_tokenId);\n\n        // Transfers proceeds to the seller.\n        if (price > 0) {\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price.sub(auctioneerCut);\n\n            seller.transfer(sellerProceeds);\n        }\n\n        // Computes the excess funds included with the bid and transfers it back to bidder. \n        uint256 bidExcess = _bidAmount - price;\n\n        // Returns the exceeded funds.\n        msg.sender.transfer(bidExcess);\n\n        // Emits the AuctionSuccessful event.\n        emit AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }\n\n    /**\n     * @dev Removes an auction from the list of open auctions.\n     * @param _tokenId ID of the NFT on auction to be removed.\n     */\n    function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }\n\n    /**\n     * @dev Returns true if the NFT is on auction.\n     * @param _auction An auction to check if it exists.\n     */\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }\n\n    /// @dev Returns the current price of an NFT on auction.\n    function _currentPrice(Auction storage _auction)\n        internal\n        view\n        returns (uint256)\n    {\n        return _auction.price;\n    }\n\n    /**\n     * @dev Computes the owner's receiving amount from the sale.\n     * @param _price Sale price of the NFT.\n     */\n    function _computeCut(uint256 _price) internal view returns (uint256) {\n        return _price * ownerCut / 10000;\n    }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\n/**\n * @title Auction for NFT.\n * @author VREX Lab Co., Ltd\n */\ncontract Auction is Pausable, AuctionBase {\n\n    /**\n     * @dev Removes all Ether from the contract to the NFT contract.\n     */\n    function withdrawBalance() external {\n        address nftAddress = address(nonFungibleContract);\n\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n        nftAddress.transfer(address(this).balance);\n    }\n\n    /**\n     * @dev Creates and begins a new auction.\n     * @param _tokenId ID of the token to creat an auction, caller must be it's owner.\n     * @param _price Price of the token (in wei).\n     * @param _seller Seller of this token.\n     */\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _price,\n        address _seller\n    )\n        external\n        whenNotPaused\n        canBeStoredWith128Bits(_price)\n    {\n        require(_owns(msg.sender, _tokenId));\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_price),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /**\n     * @dev Bids on an open auction, completing the auction and transferring\n     *  ownership of the NFT if enough Ether is supplied.\n     * @param _tokenId - ID of token to bid on.\n     */\n    function bid(uint256 _tokenId)\n        external\n        payable\n        whenNotPaused\n    {\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    /**\n     * @dev Cancels an auction and returns the NFT to the current owner.\n     * @param _tokenId ID of the token on auction to cancel.\n     * @param _seller The seller's address.\n     */\n    function cancelAuction(uint256 _tokenId, address _seller)\n        external\n    {\n        // Requires that this function should only be called from the\n        // `cancelSaleAuction()` of NFT ownership contract. This function gets\n        // the _seller directly from it's arguments, so if this check doesn't\n        // exist, then anyone can cancel the auction! OMG!\n        require(msg.sender == address(nonFungibleContract));\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(_seller == seller);\n        _cancelAuction(_tokenId, seller);\n    }\n\n    /**\n     * @dev Cancels an auction when the contract is paused.\n     * Only the owner may do this, and NFTs are returned to the seller. \n     * @param _tokenId ID of the token on auction to cancel.\n     */\n    function cancelAuctionWhenPaused(uint256 _tokenId)\n        external\n        whenPaused\n        onlyOwner\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }\n\n    /**\n     * @dev Returns the auction information for an NFT\n     * @param _tokenId ID of the NFT on auction\n     */\n    function getAuction(uint256 _tokenId)\n        external\n        view\n        returns\n    (\n        address seller,\n        uint256 price,\n        uint256 startedAt\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.price,\n            auction.startedAt\n        );\n    }\n\n    /**\n     * @dev Returns the current price of the token on auction.\n     * @param _tokenId ID of the token\n     */\n    function getCurrentPrice(uint256 _tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n}\n\n/**\n * @title  Auction for synthesizing\n * @author VREX Lab Co., Ltd\n * @notice Reset fallback function to prevent accidental fund sending to this contract.\n */\ncontract SynthesizingAuction is Auction {\n\n    /**\n     * @dev Sanity check that allows us to ensure that we are pointing to the\n     *  right auction in our `setSynthesizingAuctionAddress()` call.\n     */\n    bool public isSynthesizingAuction = true;\n\n    /**\n     * @dev Creates a reference to the NFT ownership contract and checks the owner cut is valid\n     * @param _nftAddress Address of a deployed NFT interface contract\n     * @param _cut Percent cut which the owner takes on each auction, between 0-10,000.\n     */\n    constructor(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        ERC721Basic candidateContract = ERC721Basic(_nftAddress);\n        nonFungibleContract = candidateContract;\n    }\n\n    /**\n     * @dev Creates and begins a new auction. Since this function is wrapped,\n     *  requires the caller to be KydyCore contract.\n     * @param _tokenId ID of token to auction, sender must be it's owner.\n     * @param _price Price of the token (in wei).\n     * @param _seller Seller of this token.\n     */\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _price,\n        address _seller\n    )\n        external\n        canBeStoredWith128Bits(_price)\n    {\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_price),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /**\n     * @dev Places a bid for synthesizing. Requires the caller\n     *  is the KydyCore contract because all bid functions\n     *  should be wrapped. Also returns the Kydy to the\n     *  seller rather than the bidder.\n     */\n    function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        require(msg.sender == address(nonFungibleContract));\n        address seller = tokenIdToAuction[_tokenId].seller;\n        // _bid() checks that the token ID is valid and will throw if bid fails\n        _bid(_tokenId, msg.value);\n        // Transfers the Kydy back to the seller, and the bidder will get\n        // the baby Kydy.\n        _transfer(seller, _tokenId);\n    }\n}\n\n/**\n * @title Auction for sale of Kydys.\n * @author VREX Lab Co., Ltd\n */\ncontract SaleAuction is Auction {\n\n    /**\n     * @dev To make sure we are addressing to the right auction. \n     */\n    bool public isSaleAuction = true;\n\n    // Last 5 sale price of Generation 0 Kydys.\n    uint256[5] public lastGen0SalePrices;\n    \n    // Total number of Generation 0 Kydys sold.\n    uint256 public gen0SaleCount;\n\n    /**\n     * @dev Creates a reference to the NFT ownership contract and checks the owner cut is valid\n     * @param _nftAddress Address of a deployed NFT interface contract\n     * @param _cut Percent cut which the owner takes on each auction, between 0-10,000.\n     */\n    constructor(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        ERC721Basic candidateContract = ERC721Basic(_nftAddress);\n        nonFungibleContract = candidateContract;\n    }\n\n    /**\n     * @dev Creates and begins a new auction.\n     * @param _tokenId ID of token to auction, sender must be it's owner.\n     * @param _price Price of the token (in wei).\n     * @param _seller Seller of this token.\n     */\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _price,\n        address _seller\n    )\n        external\n        canBeStoredWith128Bits(_price)\n    {\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_price),\n            uint64(now)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /**\n     * @dev Updates lastSalePrice only if the seller is nonFungibleContract. \n     */\n    function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        // _bid verifies token ID\n        address seller = tokenIdToAuction[_tokenId].seller;\n        uint256 price = _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n\n        // If the last sale was not Generation 0 Kydy's, the lastSalePrice doesn't change.\n        if (seller == address(nonFungibleContract)) {\n            // Tracks gen0's latest sale prices.\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }\n    }\n\n    /// @dev Gives the new average Generation 0 sale price after each Generation 0 Kydy sale.\n    function averageGen0SalePrice() external view returns (uint256) {\n        uint256 sum = 0;\n        for (uint256 i = 0; i < 5; i++) {\n            sum = sum.add(lastGen0SalePrices[i]);\n        }\n        return sum / 5;\n    }\n}\n\n/**\n * @title This contract defines how sales and synthesis auctions for Kydys are created. \n * @author VREX Lab Co., Ltd\n */\ncontract KydyAuction is KydySynthesis {\n\n    /**\n     * @dev The address of the Auction contract which handles ALL sales of Kydys, both user-generated and Generation 0. \n     */\n    SaleAuction public saleAuction;\n\n    /**\n     * @dev The address of another Auction contract which handles synthesis auctions. \n     */\n    SynthesizingAuction public synthesizingAuction;\n\n    /**\n     * @dev Sets the address for the sales auction. Only CEO may call this function. \n     * @param _address The address of the sale contract.\n     */\n    function setSaleAuctionAddress(address _address) external onlyCEO {\n        SaleAuction candidateContract = SaleAuction(_address);\n\n        // Verifies that the contract is correct\n        require(candidateContract.isSaleAuction());\n\n        // Sets the new sale auction contract address.\n        saleAuction = candidateContract;\n    }\n\n    /**\n     * @dev Sets the address to the synthesis auction. Only CEO may call this function.\n     * @param _address The address of the synthesis contract.\n     */\n    function setSynthesizingAuctionAddress(address _address) external onlyCEO {\n        SynthesizingAuction candidateContract = SynthesizingAuction(_address);\n\n        require(candidateContract.isSynthesizingAuction());\n\n        synthesizingAuction = candidateContract;\n    }\n\n    /**\n     * @dev Creates a Kydy sale.\n     */\n    function createSaleAuction(\n        uint256 _kydyId,\n        uint256 _price\n    )\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _kydyId));\n        require(!isCreating(_kydyId));\n        _approve(_kydyId, saleAuction);\n \n        saleAuction.createAuction(\n            _kydyId,\n            _price,\n            msg.sender\n        );\n    }\n\n    /**\n     * @dev Creates a synthesis auction. \n     */\n    function createSynthesizingAuction(\n        uint256 _kydyId,\n        uint256 _price\n    )\n        external\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _kydyId));\n        require(isReadyToSynthesize(_kydyId));\n        _approve(_kydyId, synthesizingAuction);\n\n        synthesizingAuction.createAuction(\n            _kydyId,\n            _price,\n            msg.sender\n        );\n    }\n\n    /**\n     * @dev After bidding for a synthesis auction is accepted, this starts the actual synthesis process.\n     * @param _yangId ID of the yang Kydy on the synthesis auction.\n     * @param _yinId ID of the yin Kydy owned by the bidder.\n     */\n    function bidOnSynthesizingAuction(\n        uint256 _yangId,\n        uint256 _yinId\n    )\n        external\n        payable\n        whenNotPaused\n    {\n        require(_owns(msg.sender, _yinId));\n        require(isReadyToSynthesize(_yinId));\n        require(_canSynthesizeWithViaAuction(_yinId, _yangId));\n\n        uint256 currentPrice = synthesizingAuction.getCurrentPrice(_yangId);\n\n        require (msg.value >= currentPrice + autoCreationFee);\n\n        synthesizingAuction.bid.value(msg.value - autoCreationFee)(_yangId);\n\n        _synthesizeWith(uint32(_yinId), uint32(_yangId));\n    }\n\n    /**\n     * @dev Cancels a sale and returns the Kydy back to the owner.\n     * @param _kydyId ID of the Kydy on sale that the owner wishes to cancel.\n     */\n    function cancelSaleAuction(\n        uint256 _kydyId\n    )\n        external\n        whenNotPaused\n    {\n        // Checks if the Kydy is in auction. \n        require(_owns(saleAuction, _kydyId));\n        // Gets the seller of the Kydy.\n        (address seller,,) = saleAuction.getAuction(_kydyId);\n        // Checks that the caller is the real seller.\n        require(msg.sender == seller);\n        // Cancels the sale auction of this kydy by it's seller's request.\n        saleAuction.cancelAuction(_kydyId, msg.sender);\n    }\n\n    /**\n     * @dev Cancels an synthesis auction. \n     * @param _kydyId ID of the Kydy on the synthesis auction. \n     */\n    function cancelSynthesizingAuction(\n        uint256 _kydyId\n    )\n        external\n        whenNotPaused\n    {\n        require(_owns(synthesizingAuction, _kydyId));\n        (address seller,,) = synthesizingAuction.getAuction(_kydyId);\n        require(msg.sender == seller);\n        synthesizingAuction.cancelAuction(_kydyId, msg.sender);\n    }\n\n    /**\n     * @dev Transfers the balance. \n     */\n    function withdrawAuctionBalances() external onlyCLevel {\n        saleAuction.withdrawBalance();\n        synthesizingAuction.withdrawBalance();\n    }\n}\n\n/**\n * @title All functions related to creating Kydys\n * @author VREX Lab Co., Ltd\n */\ncontract KydyMinting is KydyAuction {\n\n    // Limits of the number of Kydys that COO can create.\n    uint256 public constant promoCreationLimit = 888;\n    uint256 public constant gen0CreationLimit = 8888;\n\n    uint256 public constant gen0StartingPrice = 10 finney;\n\n    // Counts the number of Kydys that COO has created.\n    uint256 public promoCreatedCount;\n    uint256 public gen0CreatedCount;\n\n    /**\n     * @dev Creates promo Kydys, up to a limit. Only COO can call this function.\n     * @param _genes Encoded genes of the Kydy to be created.\n     * @param _owner Future owner of the created Kydys. COO is the default owner.\n     */\n    function createPromoKydy(uint256 _genes, address _owner) external onlyCOO {\n        address kydyOwner = _owner;\n        if (kydyOwner == address(0)) {\n            kydyOwner = cooAddress;\n        }\n        require(promoCreatedCount < promoCreationLimit);\n\n        promoCreatedCount++;\n        _createKydy(0, 0, 0, _genes, kydyOwner);\n    }\n\n    /**\n     * @dev Creates a new gen0 Kydy with the given genes and\n     *  creates an sale auction of it.\n     */\n    function createGen0Auction(uint256 _genes) external onlyCOO {\n        require(gen0CreatedCount < gen0CreationLimit);\n\n        uint256 kydyId = _createKydy(0, 0, 0, _genes, address(this));\n        _approve(kydyId, saleAuction);\n\n        saleAuction.createAuction(\n            kydyId,\n            _computeNextGen0Price(),\n            address(this)\n        );\n\n        gen0CreatedCount++;\n    }\n\n    /**\n     * @dev Computes the next gen0 auction price. It will be\n     *  the average of the past 5 prices + 50%.\n     */\n    function _computeNextGen0Price() internal view returns (uint256) {\n        uint256 averagePrice = saleAuction.averageGen0SalePrice();\n\n        // Sanity check to ensure not to overflow arithmetic.\n        require(averagePrice == uint256(uint128(averagePrice)));\n\n        uint256 nextPrice = averagePrice.add(averagePrice / 2);\n\n        // New gen0 auction price will not be less than the\n        // starting price always.\n        if (nextPrice < gen0StartingPrice) {\n            nextPrice = gen0StartingPrice;\n        }\n\n        return nextPrice;\n    }\n}\n\ncontract KydyTravelInterface {\n    function balanceOfUnclaimedTT(address _user) public view returns(uint256);\n    function transferTTProduction(address _from, address _to, uint256 _kydyId) public;\n    function getProductionOf(address _user) public view returns (uint256);\n}\n\n/**\n * @title The Dyverse : A decentralized universe of Kydys, the unique 3D characters and avatars on the Blockchain.\n * @author VREX Lab Co., Ltd\n * @dev This is the main KydyCore contract. It keeps track of the kydys over the blockchain, and manages\n *  general operation of the contracts, metadata and important addresses, including defining who can withdraw \n *  the balance from the contract.\n */\ncontract KydyCore is KydyMinting {\n\n    // This is the main Kydy contract. To keep the code upgradable and secure, we broke up the code in two different ways.  \n    // First, we separated auction and gene combination functions into several sibling contracts. This allows us to securely \n    // fix bugs and upgrade contracts, if necessary. Please note that while we try to make most code open source, \n    // some code regarding gene combination is not open-source to make it more intriguing for users. \n    // However, as always, advanced users will be able to figure out how it works. \n    //\n    // We also break the core function into a few files, having one contract for each of the major functionalities of the Dyverse. \n    // The breakdown is as follows:\n    //\n    //      - KydyBase: This contract defines the most fundamental core functionalities, including data storage and management.\n    //\n    //      - KydyAccessControl: This contract manages the roles, addresses and constraints for CEO, CFO and COO.\n    //\n    //      - KydyOwnership: This contract provides the methods required for basic non-fungible token transactions.\n    //\n    //      - KydySynthesis: This contract contains how new baby Kydy is created via a process called the Synthesis. \n    //\n    //      - KydyAuction: This contract manages auction creation and bidding. \n    //\n    //      - KydyMinting: This contract defines how we create new Generation 0 Kydys. There is a limit of 8,888 Gen 0 Kydys. \n\n    // Upgraded version of the core contract.\n    // Should be used when the core contract is broken and an upgrade is required.\n    address public newContractAddress;\n\n    /// @notice Creates the main Kydy smart contract instance.\n    constructor() public {\n        // Starts with the contract is paused.\n        paused = true;\n\n        // The creator of the contract is the initial CEO\n        ceoAddress = msg.sender;\n\n        // Starts with the Kydy ID 0 which is invalid one.\n        // So we don't have generation-0 parent issues.\n        _createKydy(0, 0, 0, uint256(-1), address(0));\n    }\n\n    /**\n     * @dev Used to mark the smart contract as upgraded when an upgrade happens. \n     * @param _v2Address Upgraded version of the core contract.\n     */\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\n        // We'll announce if the upgrade is needed.\n        newContractAddress = _v2Address;\n        emit ContractUpgrade(_v2Address);\n    }\n\n    /**\n     * @dev Rejects all Ether being sent from unregistered addresses, so that users don't accidentally end us Ether.\n     */\n    function() external payable {\n        require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(synthesizingAuction)\n        );\n    }\n\n    /**\n     * @notice Returns all info about a given Kydy. \n     * @param _id ID of the Kydy you are enquiring about. \n     */\n    function getKydy(uint256 _id)\n        external\n        view\n        returns (\n        bool isCreating,\n        bool isReady,\n        uint256 rechargeIndex,\n        uint256 nextActionAt,\n        uint256 synthesizingWithId,\n        uint256 createdTime,\n        uint256 yinId,\n        uint256 yangId,\n        uint256 generation,\n        uint256 genes\n    ) {\n        Kydy storage kyd = kydys[_id];\n\n        // If this is setted to 0 then it's not at creating mode.\n        isCreating = (kyd.synthesizingWithId != 0);\n        isReady = (kyd.rechargeEndBlock <= block.number);\n        rechargeIndex = uint256(kyd.rechargeIndex);\n        nextActionAt = uint256(kyd.rechargeEndBlock);\n        synthesizingWithId = uint256(kyd.synthesizingWithId);\n        createdTime = uint256(kyd.createdTime);\n        yinId = uint256(kyd.yinId);\n        yangId = uint256(kyd.yangId);\n        generation = uint256(kyd.generation);\n        genes = kyd.genes;\n    }\n\n    /**\n     * @dev Overrides unpause() to make sure that all external contract addresses are set before unpause. \n     * @notice This should be public rather than external.\n     */\n    function unpause() public onlyCEO whenPaused {\n        require(saleAuction != address(0));\n        require(synthesizingAuction != address(0));\n        require(geneSynthesis != address(0));\n        require(newContractAddress == address(0));\n\n        // Now the contract actually unpauses.\n        super.unpause();\n    }\n\n    /// @dev CFO can withdraw the balance available from the contract.\n    function withdrawBalance() external onlyCFO {\n        uint256 balance = address(this).balance;\n\n        // Subtracts all creation fees needed to be given to the bringKydyHome() callers,\n        // and plus 1 of margin.\n        uint256 subtractFees = (creatingKydys + 1) * autoCreationFee;\n\n        if (balance > subtractFees) {\n            cfoAddress.transfer(balance - subtractFees);\n        }\n    }\n\n    /// @dev Sets new tokenURI API for token metadata.\n    function setNewTokenURI(string _newTokenURI) external onlyCLevel {\n        tokenURIBase = _newTokenURI;\n    }\n\n    // An address of Kydy Travel Plugin.\n    KydyTravelInterface public travelCore;\n\n    /**\n     * @dev Adds the Kydy Travel Plugin contract to the Kydy Core contract.\n     * @notice We have a plan to add some fun features to the Dyverse. \n     *  Your Kydy will travel all over our world while you carry on with your life.\n     *  During their travel, they will earn some valuable coins which will then be given to you.\n     *  Please stay tuned!\n     */\n    function setTravelCore(address _newTravelCore) external onlyCEO whenPaused {\n        travelCore = KydyTravelInterface(_newTravelCore);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_yinId\",\"type\":\"uint256\"}],\"name\":\"bringKydyHome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneSynthesisAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"synthesizingAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kydyId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getKydy\",\"outputs\":[{\"name\":\"isCreating\",\"type\":\"bool\"},{\"name\":\"isReady\",\"type\":\"bool\"},{\"name\":\"rechargeIndex\",\"type\":\"uint256\"},{\"name\":\"nextActionAt\",\"type\":\"uint256\"},{\"name\":\"synthesizingWithId\",\"type\":\"uint256\"},{\"name\":\"createdTime\",\"type\":\"uint256\"},{\"name\":\"yinId\",\"type\":\"uint256\"},{\"name\":\"yangId\",\"type\":\"uint256\"},{\"name\":\"generation\",\"type\":\"uint256\"},{\"name\":\"genes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_yangId\",\"type\":\"uint256\"}],\"name\":\"approveSynthesizing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recharges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSynthesizeApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_yangId\",\"type\":\"uint256\"},{\"name\":\"_yinId\",\"type\":\"uint256\"}],\"name\":\"bidOnSynthesizingAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTravelCore\",\"type\":\"address\"}],\"name\":\"setTravelCore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreationLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_yinId\",\"type\":\"uint256\"},{\"name\":\"_yangId\",\"type\":\"uint256\"}],\"name\":\"synthesizeWithAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"setSecondsPerBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneSynthesis\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondsPerBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAuctionBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSynthesizingAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoCreationFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoKydy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_yinId\",\"type\":\"uint256\"},{\"name\":\"_yangId\",\"type\":\"uint256\"}],\"name\":\"canSynthesizeWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kydyId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createSynthesizingAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kydyId\",\"type\":\"uint256\"}],\"name\":\"isCreating\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0StartingPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreationLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kydyId\",\"type\":\"uint256\"}],\"name\":\"cancelSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"}],\"name\":\"createGen0Auction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kydyId\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLostKydy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kydyId\",\"type\":\"uint256\"}],\"name\":\"cancelSynthesizingAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"travelCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTokenURI\",\"type\":\"string\"}],\"name\":\"setNewTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creatingKydys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAutoCreationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_kydyId\",\"type\":\"uint256\"}],\"name\":\"isReadyToSynthesize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"yinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"yangId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rechargeEndBlock\",\"type\":\"uint256\"}],\"name\":\"Creating\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"kydyId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"yinId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"yangId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]",
  "bytecode": "6002805460a060020a60ff0219169055610220604052603c6080908152607860a05261012c60c05261025860e05261070861010052610e1061012052611c2061014052613840610160526170806101805261e1006101a052620151806101c0526202a3006101e05262054600610200526200007f90600490600d6200069a565b50600f6006556040805160608101825260298082527f687474703a2f2f746573746170692e64797665722e73652f6170692f4b796479602083019081527f4d657461646174612f00000000000000000000000000000000000000000000009290930191909152620000f391600d916200073d565b506631bced02db0000600e553480156200010c57600080fd5b50620001417f01ffc9a70000000000000000000000000000000000000000000000000000000064010000000062000203810204565b620001757f80ac58cd0000000000000000000000000000000000000000000000000000000064010000000062000203810204565b620001a97f5b5e139f0000000000000000000000000000000000000000000000000000000064010000000062000203810204565b6002805460a060020a60ff0219167401000000000000000000000000000000000000000017905560008054600160a060020a03191633178155620001fc9080806000198164010000000062000270810204565b5062000846565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200023357600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152600360205260409020805460ff19166001179055565b6000806200027d620007be565b600063ffffffff891689146200029257600080fd5b63ffffffff88168814620002a557600080fd5b61ffff87168714620002b657600080fd5b600287049250600d8361ffff161115620002cf57600d92505b505060408051610100810182528581524267ffffffffffffffff90811660208301908152600093830184815263ffffffff8c8116606086019081528c82166080870190815260a0870188815261ffff8a811660c08a019081528f821660e08b01908152600780546001810182559c528a517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68860028e029081019190915598517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c689909901805498519651955194519251915167ffffffffffffffff19909916998b1699909917604060020a608060020a0319166801000000000000000096909a169590950298909817608060020a63ffffffff021916700100000000000000000000000000000000938616939093029290921760a060020a63ffffffff02191674010000000000000000000000000000000000000000918516919091021760c060020a63ffffffff0219167801000000000000000000000000000000000000000000000000968416969096029590951760e060020a61ffff0219167c01000000000000000000000000000000000000000000000000000000009186169190910217600160f060020a03167e01000000000000000000000000000000000000000000000000000000000000929094169190910292909217905590919081168114620004d757600080fd5b60608281015160808085015185516040805187815263ffffffff95861660208201529490921684830152938301939093529151600160a060020a038816927f7191c0804172ee8ac080b63e93fd6c2f26bbea256aed023d843c2a9f3dee0d3b928290030190a26200055285826401000000006200055e810204565b98975050505050505050565b6200057281640100000000620005ce810204565b156200057d57600080fd5b620005928282640100000000620005eb810204565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600090815260086020526040902054600160a060020a0316151590565b600081815260086020526040902054600160a060020a0316156200060e57600080fd5b60008181526008602090815260408083208054600160a060020a031916600160a060020a0387169081179091558352600990915290205462000660906001640100000000620006808102620037661704565b600160a060020a0390921660009081526009602052604090209190915550565b6000828201838110156200069357600080fd5b9392505050565b6002830191839082156200072b5791602002820160005b83821115620006f757835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302620006b1565b8015620007295782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620006f7565b505b506200073992915062000802565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200078057805160ff1916838001178555620007b0565b82800160010185558215620007b0579182015b82811115620007b057825182559160200191906001019062000793565b506200073992915062000829565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b6200082691905b808211156200073957805463ffffffff1916815560010162000809565b90565b6200082691905b8082111562000739576000815560010162000830565b613bd280620008566000396000f3006080604052600436106102f25763ffffffff60e060020a60003504166301ffc9a781146103225780630519ce791461036d57806305e455461461039e57806306fdde03146103c5578063081812fc1461044f5780630910c71514610467578063095ea7b31461047f5780630a0f8168146104a35780630f401cbc146104b857806318160ddd146104d9578063192ec99d146104ee57806319d70e0b1461050357806323b872dd1461051e57806324dc793f14610548578063254b1ddf146105b257806327d7874c146105d65780632b11654a146105f75780632ba73c1514610628578063380862b21461064957806339e395e2146106615780633f4ba83a1461066f5780633fe0522c14610684578063404d0e3e146106a557806342842e0e146106ba57806348e68e30146106e45780634e0a3379146106f25780635663896e146107135780635c975abb1461072b5780635fd8c7101461074057806361a4b168146107555780636352211e1461076a5780636af04a57146107825780636fbde40d1461079757806370a08231146107b857806371587988146107d95780637a7d4937146107fa5780638456cb591461080f5780638462151c1461082457806391876e57146108955780639307cdf4146108aa57806395b138f6146108cb57806395d89b41146108e0578063978f8934146108f557806398ba2453146109195780639bacf1ed14610934578063a22cb4651461094f578063aabd390414610975578063ae4d0ff71461098d578063b047fb50146109a2578063b09f1266146109b7578063b5319335146109cc578063b88d4fde146109e1578063c31f586d14610a50578063c3bea9af14610a68578063c87b56dd14610a80578063cd47f39014610a98578063d28d885214610abc578063d5f48e7614610ad1578063e07974e614610ae9578063e5af0e8914610afe578063e6cbe35114610b1e578063e985e9c514610b33578063e9c0b8e914610b5a578063f1ca941014610b6f578063f3d89c4914610b84578063fa061d4814610b9c575b601154600160a060020a03163314806103155750601254600160a060020a031633145b151561032057600080fd5b005b34801561032e57600080fd5b506103597bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610bb4565b604080519115158252519081900360200190f35b34801561037957600080fd5b50610382610be8565b60408051600160a060020a039092168252519081900360200190f35b3480156103aa57600080fd5b506103b3610bf7565b60408051918252519081900360200190f35b3480156103d157600080fd5b506103da610bfd565b6040805160208082528351818301528351919283929083019185019080838360005b838110156104145781810151838201526020016103fc565b50505050905090810190601f1680156104415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561045b57600080fd5b50610382600435610c35565b34801561047357600080fd5b506103b3600435610c67565b34801561048b57600080fd5b50610320600160a060020a0360043516602435610f2d565b3480156104af57600080fd5b50610382610fe2565b3480156104c457600080fd5b50610320600160a060020a0360043516610ff1565b3480156104e557600080fd5b506103b36110a4565b3480156104fa57600080fd5b506103826110ae565b34801561050f57600080fd5b506103206004356024356110bd565b34801561052a57600080fd5b50610320600160a060020a03600435811690602435166044356111a2565b34801561055457600080fd5b50610560600435611247565b604080519a15158b5298151560208b0152898901979097526060890195909552608088019390935260a087019190915260c086015260e085015261010084015261012083015251908190036101400190f35b3480156105be57600080fd5b50610320600160a060020a03600435166024356113a8565b3480156105e257600080fd5b50610320600160a060020a0360043516611402565b34801561060357600080fd5b5061060f600435611450565b6040805163ffffffff9092168252519081900360200190f35b34801561063457600080fd5b50610320600160a060020a036004351661147d565b34801561065557600080fd5b506103826004356114cb565b6103206004356024356114fd565b34801561067b57600080fd5b5061032061169c565b34801561069057600080fd5b50610320600160a060020a0360043516611730565b3480156106b157600080fd5b506103b3611781565b3480156106c657600080fd5b50610320600160a060020a0360043581169060243516604435611787565b6103206004356024356117a3565b3480156106fe57600080fd5b50610320600160a060020a03600435166119a7565b34801561071f57600080fd5b506103206004356119f5565b34801561073757600080fd5b50610359611a51565b34801561074c57600080fd5b50610320611a61565b34801561076157600080fd5b50610382611ad5565b34801561077657600080fd5b50610382600435611ae4565b34801561078e57600080fd5b50610382611b0e565b3480156107a357600080fd5b50610320600160a060020a0360043516611b1d565b3480156107c457600080fd5b506103b3600160a060020a0360043516611bd0565b3480156107e557600080fd5b50610320600160a060020a0360043516611c03565b34801561080657600080fd5b506103b3611c86565b34801561081b57600080fd5b50610320611c8c565b34801561083057600080fd5b50610845600160a060020a0360043516611d0c565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610881578181015183820152602001610869565b505050509050019250505060405180910390f35b3480156108a157600080fd5b50610320611dde565b3480156108b657600080fd5b50610320600160a060020a0360043516611ef3565b3480156108d757600080fd5b506103b3611fa6565b3480156108ec57600080fd5b506103da611fac565b34801561090157600080fd5b50610320600435600160a060020a0360243516611fe3565b34801561092557600080fd5b50610359600435602435612044565b34801561094057600080fd5b506103206004356024356120c4565b34801561095b57600080fd5b50610320600160a060020a0360043516602435151561218e565b34801561098157600080fd5b50610359600435612212565b34801561099957600080fd5b506103b3612257565b3480156109ae57600080fd5b50610382612262565b3480156109c357600080fd5b506103da612271565b3480156109d857600080fd5b506103b36122a8565b3480156109ed57600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261032094600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506122ae9650505050505050565b348015610a5c57600080fd5b506103206004356122d0565b348015610a7457600080fd5b50610320600435612421565b348015610a8c57600080fd5b506103da60043561250d565b348015610aa457600080fd5b50610320600435600160a060020a03602435166125c3565b348015610ac857600080fd5b506103da612611565b348015610add57600080fd5b50610320600435612648565b348015610af557600080fd5b50610382612799565b348015610b0a57600080fd5b5061032060048035602481019101356127a8565b348015610b2a57600080fd5b506103826127f7565b348015610b3f57600080fd5b50610359600160a060020a0360043581169060243516612806565b348015610b6657600080fd5b506103b3612834565b348015610b7b57600080fd5b506103b361283a565b348015610b9057600080fd5b50610320600435612840565b348015610ba857600080fd5b5061035960043561285c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526003602052604090205460ff1690565b600154600160a060020a031681565b60135481565b60408051808201909152600781527f447976657273650000000000000000000000000000000000000000000000000060208201525b90565b6000610c408261292b565b1515610c4b57600080fd5b506000908152600a6020526040902054600160a060020a031690565b600080600080600080600080600260149054906101000a900460ff16151515610c8f57600080fd5b600780548a908110610c9d57fe5b60009182526020909120600290910201600181015490975067ffffffffffffffff161515610cca57600080fd5b604080516101008101825288548152600189015467ffffffffffffffff8082166020840152680100000000000000008204169282019290925263ffffffff608060020a83048116606083015260a060020a83048116608083015260c060020a83041660a082015261ffff60e060020a8304811660c083015260f060020a90920490911660e0820152610d5b90612948565b1515610d6657600080fd5b60018701546007805460c060020a90920463ffffffff1697509087908110610d8a57fe5b600091825260209091206001808a015460029093029091019081015490965061ffff60f060020a928390048116965091900416841015610dd757600185015460f060020a900461ffff1693505b60105487548654604080517f960fa70f0000000000000000000000000000000000000000000000000000000081526004810193909352602483019190915251600160a060020a039092169163960fa70f916044808201926020929091908290030181600087803b158015610e4a57600080fd5b505af1158015610e5e573d6000803e3d6000fd5b505050506040513d6020811015610e7457600080fd5b505160008a815260086020526040902054600189810154929550600160a060020a039091169350610ebd918b9160c060020a90910463ffffffff1690870161ffff168686612978565b6001880180547bffffffff00000000000000000000000000000000000000000000000019169055600f8054600019019055600e54604051919250339181156108fc0291906000818181858888f19350505050158015610f20573d6000803e3d6000fd5b5098975050505050505050565b60025460009060a060020a900460ff1615610f4757600080fd5b610f5082611ae4565b9050600160a060020a038381169082161415610f6b57600080fd5b33600160a060020a0382161480610f875750610f878133612806565b1515610f9257600080fd5b610f9c8284612c4b565b8183600160a060020a031682600160a060020a03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600054600160a060020a031681565b60008054600160a060020a0316331461100957600080fd5b81905080600160a060020a0316632e39ff846040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561104a57600080fd5b505af115801561105e573d6000803e3d6000fd5b505050506040513d602081101561107457600080fd5b5051151561108157600080fd5b60108054600160a060020a031916600160a060020a039290921691909117905550565b6007546000190190565b601254600160a060020a031681565b60025460a060020a900460ff16156110d457600080fd5b6110de3383612c79565b15156110e957600080fd5b6110f282612212565b156110fc57600080fd5b601154611113908390600160a060020a0316612c4b565b601154604080517f54279bdd00000000000000000000000000000000000000000000000000000000815260048101859052602481018490523360448201529051600160a060020a03909216916354279bdd9160648082019260009290919082900301818387803b15801561118657600080fd5b505af115801561119a573d6000803e3d6000fd5b505050505050565b60025460a060020a900460ff16156111b957600080fd5b6111c33382612c99565b15156111ce57600080fd5b600160a060020a03821615156111e357600080fd5b6111ed8382612cf8565b6111f78382612d94565b6112018282612e1d565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600080600080600080600080600080600060078c81548110151561126757fe5b906000526020600020906002020190508060010160189054906101000a900463ffffffff1663ffffffff16600014159a50438160010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff161115995080600101601c9054906101000a900461ffff1661ffff1698508060010160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1697508060010160189054906101000a900463ffffffff1663ffffffff1696508060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1695508060010160109054906101000a900463ffffffff1663ffffffff1694508060010160149054906101000a900463ffffffff1663ffffffff16935080600101601e9054906101000a900461ffff1661ffff16925080600001549150509193959799509193959799565b60025460a060020a900460ff16156113bf57600080fd5b6113c93382612c79565b15156113d457600080fd5b6000908152600b602052604090208054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a0316331461141957600080fd5b600160a060020a038116151561142e57600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b600481600e811061145d57fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b600054600160a060020a0316331461149457600080fd5b600160a060020a03811615156114a957600080fd5b60028054600160a060020a031916600160a060020a0392909216919091179055565b60006114d68261292b565b15156114e157600080fd5b506000908152600b6020526040902054600160a060020a031690565b60025460009060a060020a900460ff161561151757600080fd5b6115213383612c79565b151561152c57600080fd5b6115358261285c565b151561154057600080fd5b61154a8284612ea1565b151561155557600080fd5b601254604080517fc55d0f56000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163c55d0f56916024808201926020929091908290030181600087803b1580156115bc57600080fd5b505af11580156115d0573d6000803e3d6000fd5b505050506040513d60208110156115e657600080fd5b5051600e5490915081013410156115fc57600080fd5b601254600e54604080517f454a2ab3000000000000000000000000000000000000000000000000000000008152600481018790529051600160a060020a039093169263454a2ab39234039160248082019260009290919082900301818588803b15801561166857600080fd5b505af115801561167c573d6000803e3d6000fd5b50505050506116978263ffffffff168463ffffffff16612ef0565b505050565b600054600160a060020a031633146116b357600080fd5b60025460a060020a900460ff1615156116cb57600080fd5b601154600160a060020a031615156116e257600080fd5b601254600160a060020a031615156116f957600080fd5b601054600160a060020a0316151561171057600080fd5b601554600160a060020a03161561172657600080fd5b61172e61302e565b565b600054600160a060020a0316331461174757600080fd5b60025460a060020a900460ff16151561175f57600080fd5b60168054600160a060020a031916600160a060020a0392909216919091179055565b6122b881565b61169783838360206040519081016040528060008152506122ae565b600254600090819060a060020a900460ff16156117bf57600080fd5b600e543410156117ce57600080fd5b6117d83385612c79565b15156117e357600080fd5b6117ed838561307d565b15156117f857600080fd5b600780548590811061180657fe5b60009182526020918290206040805161010081018252600290930290910180548352600181015467ffffffffffffffff808216958501959095526801000000000000000081049094169183019190915263ffffffff608060020a84048116606084015260a060020a84048116608084015260c060020a84041660a083015261ffff60e060020a8404811660c084015260f060020a90930490921660e08201529092506118b1906130d2565b15156118bc57600080fd5b60078054849081106118ca57fe5b60009182526020918290206040805161010081018252600290930290910180548352600181015467ffffffffffffffff808216958501959095526801000000000000000081049094169183019190915263ffffffff608060020a84048116606084015260a060020a84048116608084015260c060020a84041660a083015261ffff60e060020a8404811660c084015260f060020a90930490921660e0820152909150611975906130d2565b151561198057600080fd5b61198c82858386613101565b151561199757600080fd5b6119a18484612ef0565b50505050565b600054600160a060020a031633146119be57600080fd5b600160a060020a03811615156119d357600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600054600160a060020a0316331480611a185750600154600160a060020a031633145b80611a2d5750600254600160a060020a031633145b1515611a3857600080fd5b60045463ffffffff168110611a4c57600080fd5b600655565b60025460a060020a900460ff1681565b6001546000908190600160a060020a03163314611a7d57600080fd5b5050600e54600f5430319160019091010280821115611ad157600154604051600160a060020a039091169082840380156108fc02916000818181858888f19350505050158015611697573d6000803e3d6000fd5b5050565b601054600160a060020a031681565b600081815260086020526040812054600160a060020a0316801515611b0857600080fd5b92915050565b601554600160a060020a031681565b60008054600160a060020a03163314611b3557600080fd5b81905080600160a060020a031663d25c07676040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611b7657600080fd5b505af1158015611b8a573d6000803e3d6000fd5b505050506040513d6020811015611ba057600080fd5b50511515611bad57600080fd5b60118054600160a060020a031916600160a060020a039290921691909117905550565b6000600160a060020a0382161515611be757600080fd5b50600160a060020a031660009081526009602052604090205490565b600054600160a060020a03163314611c1a57600080fd5b60025460a060020a900460ff161515611c3257600080fd5b60158054600160a060020a038316600160a060020a0319909116811790915560408051918252517f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa4461993059181900360200190a150565b60065481565b600054600160a060020a0316331480611caf5750600154600160a060020a031633145b80611cc45750600254600160a060020a031633145b1515611ccf57600080fd5b60025460a060020a900460ff1615611ce657600080fd5b6002805474ff0000000000000000000000000000000000000000191660a060020a179055565b6060600060606000806000611d2087611bd0565b9450841515611d3f576040805160008152602081019091529550611dd4565b84604051908082528060200260200182016040528015611d69578160200160208202803883390190505b509350611d746110a4565b925060009150600190505b828111611dd057600081815260086020526040902054600160a060020a0388811691161415611dc857808483815181101515611db757fe5b602090810290910101526001909101905b600101611d7f565b8395505b5050505050919050565b600054600160a060020a0316331480611e015750600154600160a060020a031633145b80611e165750600254600160a060020a031633145b1515611e2157600080fd5b601160009054906101000a9004600160a060020a0316600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611e7457600080fd5b505af1158015611e88573d6000803e3d6000fd5b50505050601260009054906101000a9004600160a060020a0316600160a060020a0316635fd8c7106040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015611edf57600080fd5b505af11580156119a1573d6000803e3d6000fd5b60008054600160a060020a03163314611f0b57600080fd5b81905080600160a060020a031663994b2dd06040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611f4c57600080fd5b505af1158015611f60573d6000803e3d6000fd5b505050506040513d6020811015611f7657600080fd5b50511515611f8357600080fd5b60128054600160a060020a031916600160a060020a039290921691909117905550565b600e5481565b60408051808201909152600481527f4b59445900000000000000000000000000000000000000000000000000000000602082015290565b600254600090600160a060020a03163314611ffd57600080fd5b5080600160a060020a038116151561201d5750600254600160a060020a03165b6013546103781161202d57600080fd5b6013805460010190556119a1600080808685612978565b6000808080851161205457600080fd5b6000841161206157600080fd5b600780548690811061206f57fe5b9060005260206000209060020201915060078481548110151561208e57fe5b906000526020600020906002020190506120aa82868387613101565b80156120bb57506120bb848661307d565b95945050505050565b60025460a060020a900460ff16156120db57600080fd5b6120e53383612c79565b15156120f057600080fd5b6120f98261285c565b151561210457600080fd5b60125461211b908390600160a060020a0316612c4b565b601254604080517f54279bdd00000000000000000000000000000000000000000000000000000000815260048101859052602481018490523360448201529051600160a060020a03909216916354279bdd9160648082019260009290919082900301818387803b15801561118657600080fd5b600160a060020a0382163314156121a457600080fd5b336000818152600c60209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600080821161222057600080fd5b600780548390811061222e57fe5b600091825260209091206002909102016001015460c060020a900463ffffffff16151592915050565b662386f26fc1000081565b600254600160a060020a031681565b60408051808201909152600481527f4b59445900000000000000000000000000000000000000000000000000000000602082015281565b61037881565b6122b98484846111a2565b6122c584848484613280565b15156119a157600080fd5b60025460009060a060020a900460ff16156122ea57600080fd5b60115461230090600160a060020a031683612c79565b151561230b57600080fd5b601154604080517f78bd7935000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a03909216916378bd7935916024808201926060929091908290030181600087803b15801561237257600080fd5b505af1158015612386573d6000803e3d6000fd5b505050506040513d606081101561239c57600080fd5b5051905033600160a060020a038216146123b557600080fd5b601154604080517f4e8eaa13000000000000000000000000000000000000000000000000000000008152600481018590523360248201529051600160a060020a0390921691634e8eaa139160448082019260009290919082900301818387803b15801561118657600080fd5b600254600090600160a060020a0316331461243b57600080fd5b6014546122b81161244b57600080fd5b61245a60008060008530612978565b601154909150612474908290600160a060020a0316612c4b565b601154600160a060020a03166354279bdd8261248e613402565b306040518463ffffffff1660e060020a0281526004018084815260200183815260200182600160a060020a0316600160a060020a031681526020019350505050600060405180830381600087803b1580156124e857600080fd5b505af11580156124fc573d6000803e3d6000fd5b505060148054600101905550505050565b60606125188261292b565b151561252357600080fd5b600d8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152611b0893909290918301828280156125b05780601f10612585576101008083540402835291602001916125b0565b820191906000526020600020905b81548152906001019060200180831161259357829003601f168201915b50505050506125be846134d3565b6135c6565b600254600160a060020a031633146125da57600080fd5b60025460a060020a900460ff16156125f157600080fd5b6125fb3083612c79565b151561260657600080fd5b611ad13082846135fb565b60408051808201909152600781527f4479766572736500000000000000000000000000000000000000000000000000602082015281565b60025460009060a060020a900460ff161561266257600080fd5b60125461267890600160a060020a031683612c79565b151561268357600080fd5b601254604080517f78bd7935000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a03909216916378bd7935916024808201926060929091908290030181600087803b1580156126ea57600080fd5b505af11580156126fe573d6000803e3d6000fd5b505050506040513d606081101561271457600080fd5b5051905033600160a060020a0382161461272d57600080fd5b601254604080517f4e8eaa13000000000000000000000000000000000000000000000000000000008152600481018590523360248201529051600160a060020a0390921691634e8eaa139160448082019260009290919082900301818387803b15801561118657600080fd5b601654600160a060020a031681565b600054600160a060020a03163314806127cb5750600154600160a060020a031633145b806127e05750600254600160a060020a031633145b15156127eb57600080fd5b611697600d8383613aca565b601154600160a060020a031681565b600160a060020a039182166000908152600c6020908152604080832093909416825291909152205460ff1690565b600f5481565b60145481565b600254600160a060020a0316331461285757600080fd5b600e55565b60008080831161286b57600080fd5b600780548490811061287957fe5b60009182526020918290206040805161010081018252600290930290910180548352600181015467ffffffffffffffff808216958501959095526801000000000000000081049094169183019190915263ffffffff608060020a84048116606084015260a060020a84048116608084015260c060020a84041660a083015261ffff60e060020a8404811660c084015260f060020a90930490921660e0820152909150612924906130d2565b9392505050565b600090815260086020526040902054600160a060020a0316151590565b60008160a0015163ffffffff16600014158015611b085750506040015167ffffffffffffffff4381169116111590565b600080612983613b48565b600063ffffffff8916891461299757600080fd5b63ffffffff881688146129a957600080fd5b61ffff871687146129b957600080fd5b600287049250600d8361ffff1611156129d157600d92505b505060408051610100810182528581524267ffffffffffffffff90811660208301908152600093830184815263ffffffff8c8116606086019081528c82166080870190815260a0870188815261ffff8a811660c08a019081528f821660e08b01908152600780546001810182559c528a517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68860028e029081019190915598517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c689909901805498519651955194519251915167ffffffffffffffff19909916998b16999099176fffffffffffffffff000000000000000019166801000000000000000096909a16959095029890981773ffffffff000000000000000000000000000000001916608060020a938616939093029290921777ffffffff0000000000000000000000000000000000000000191660a060020a91851691909102177bffffffff000000000000000000000000000000000000000000000000191660c060020a96841696909602959095177fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660e060020a91861691909102177dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660f060020a929094169190910292909217905590919081168114612bcf57600080fd5b60608281015160808085015185516040805187815263ffffffff95861660208201529490921684830152938301939093529151600160a060020a038816927f7191c0804172ee8ac080b63e93fd6c2f26bbea256aed023d843c2a9f3dee0d3b928290030190a2612c3f85826136f6565b98975050505050505050565b6000918252600a60205260409091208054600160a060020a031916600160a060020a03909216919091179055565b600090815260086020526040902054600160a060020a0391821691161490565b600080612ca583611ae4565b905080600160a060020a031684600160a060020a03161480612ce0575083600160a060020a0316612cd584610c35565b600160a060020a0316145b80612cf05750612cf08185612806565b949350505050565b81600160a060020a0316612d0b82611ae4565b600160a060020a031614612d1e57600080fd5b6000818152600a6020526040902054600160a060020a031615612d58576000818152600a602052604090208054600160a060020a03191690555b6000818152600b6020526040902054600160a060020a031615611ad1576000908152600b602052604090208054600160a060020a031916905550565b81600160a060020a0316612da782611ae4565b600160a060020a031614612dba57600080fd5b600160a060020a038216600090815260096020526040902054612de490600163ffffffff61374f16565b600160a060020a039092166000908152600960209081526040808320949094559181526008909152208054600160a060020a0319169055565b600081815260086020526040902054600160a060020a031615612e3f57600080fd5b60008181526008602090815260408083208054600160a060020a031916600160a060020a03871690811790915583526009909152902054612e81906001613766565b600160a060020a0390921660009081526009602052604090209190915550565b6000806000600785815481101515612eb557fe5b90600052602060002090600202019150600784815481101515612ed457fe5b906000526020600020906002020190506120bb82868387613101565b600080600783815481101515612f0257fe5b90600052602060002090600202019150600784815481101515612f2157fe5b600091825260209091206002909102016001810180547bffffffff000000000000000000000000000000000000000000000000191660c060020a63ffffffff8716021790559050612f7182613778565b612f7a81613778565b6000848152600b602090815260408083208054600160a060020a031990811690915586845281842080549091169055600f80546001908101909155878452600883529281902054928401548151600160a060020a0390941684529183018790528281018690526801000000000000000090910467ffffffffffffffff166060830152517f0424154dc3e27f052d934e01126bedb53185fe060b7bcf8799972a1c8b7015ff916080908290030190a150505050565b600054600160a060020a0316331461304557600080fd5b60025460a060020a900460ff16151561305d57600080fd5b6002805474ff000000000000000000000000000000000000000019169055565b6000818152600860205260408082205484835290822054600160a060020a039182169116808214806120bb57506000858152600b6020526040902054600160a060020a03908116908316149250505092915050565b60008160a0015163ffffffff166000148015611b085750506040015167ffffffffffffffff4381169116111590565b60008184141561311357506000612cf0565b6001850154608060020a900463ffffffff168214806131425750600185015460a060020a900463ffffffff1682145b1561314f57506000612cf0565b6001830154608060020a900463ffffffff1684148061317e5750600183015460a060020a900463ffffffff1684145b1561318b57506000612cf0565b6001830154608060020a900463ffffffff1615806131b857506001850154608060020a900463ffffffff16155b156131c557506001612cf0565b60018581015490840154608060020a9182900463ffffffff90811692909104161480613210575060018086015490840154608060020a900463ffffffff90811660a060020a90920416145b1561321d57506000612cf0565b6001808601549084015460a060020a900463ffffffff908116608060020a90920416148061326857506001858101549084015460a060020a9182900463ffffffff9081169290910416145b1561327557506000612cf0565b506001949350505050565b60008061329585600160a060020a0316613861565b15156132a457600191506133f9565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b8381101561333757818101518382015260200161331f565b50505050905090810190601f1680156133645780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561338657600080fd5b505af115801561339a573d6000803e3d6000fd5b505050506040513d60208110156133b057600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b6000806000601160009054906101000a9004600160a060020a0316600160a060020a031663eac9d94c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561345a57600080fd5b505af115801561346e573d6000803e3d6000fd5b505050506040513d602081101561348457600080fd5b505191506fffffffffffffffffffffffffffffffff821682146134a657600080fd5b6134b38260028104613766565b9050662386f26fc10000811015611b085750662386f26fc1000092915050565b6060600080828185151561351c5760408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015294506135bd565b8593505b831561353757600190920191600a84049350613520565b826040519080825280601f01601f191660200182016040528015613565578160200160208202803883390190505b5091505060001982015b85156135b957815160001982019160f860020a6030600a8a06010291849190811061359657fe5b906020010190600160f860020a031916908160001a905350600a8604955061356f565b8194505b50505050919050565b604080516020818101835260008083528351808301855281815284519283019094528152606092612924928692869290613869565b600160a060020a03821660009081526009602052604090205461362590600163ffffffff61376616565b600160a060020a03808416600081815260096020818152604080842096909655868352600881528583208054600160a060020a0319169094179093559287168152919052205461367c90600163ffffffff61374f16565b600160a060020a03808516600081815260096020908152604080832095909555858252600b81528482208054600160a060020a0319908116909155600a9091528482208054909116905592518493928616927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6136ff8161292b565b1561370957600080fd5b6137138282612e1d565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000808383111561375f57600080fd5b5050900390565b60008282018381101561292457600080fd5b600654600182015443919060049060e060020a900461ffff16600e811061379b57fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff168115156137c657fe5b6001840180546fffffffffffffffff0000000000000000191668010000000000000000939092049390930167ffffffffffffffff16919091021790819055600c60e060020a90910461ffff16101561385e576001818101805461ffff60e060020a8083048216909401169092027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169190911790555b50565b6000903b1190565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f1916602001820160405280156138c2578160200160208202803883390190505b50935083925060009150600090505b885181101561392f5788818151811015156138e857fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561390f57fe5b906020010190600160f860020a031916908160001a9053506001016138d1565b5060005b875181101561399157878181518110151561394a57fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561397157fe5b906020010190600160f860020a031916908160001a905350600101613933565b5060005b86518110156139f35786818151811015156139ac57fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156139d357fe5b906020010190600160f860020a031916908160001a905350600101613995565b5060005b8551811015613a55578581815181101515613a0e57fe5b90602001015160f860020a900460f860020a028383806001019450815181101515613a3557fe5b906020010190600160f860020a031916908160001a9053506001016139f7565b5060005b8451811015613ab7578481815181101515613a7057fe5b90602001015160f860020a900460f860020a028383806001019450815181101515613a9757fe5b906020010190600160f860020a031916908160001a905350600101613a59565b50909d9c50505050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613b0b5782800160ff19823516178555613b38565b82800160010185558215613b38579182015b82811115613b38578235825591602001919060010190613b1d565b50613b44929150613b8c565b5090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b610c3291905b80821115613b445760008155600101613b925600a165627a7a72305820984728e95ce5f0c01a687d1e7a73daa4abbc56d2875bd49459d0d51c1a2448050029"
}