{
  "address": "0xf023fc65d9f2cead7e12e3aec7768e94ab707d0c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "NormalToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-08-13\n*/\n\npragma solidity ^0.4.23;\n\ninterface ERC20 {\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract NormalToken is ERC20 {\n    using SafeMath for uint256;\n    string public name;\n    string public symbol;\n    uint256 public totalSupply;\n    uint8 public decimals;\n    mapping (address => uint256) private balances;   \n    mapping (address => mapping (address => uint256)) private allowed;\n\n    function NormalToken(string _tokenName, string _tokenSymbol,uint256 _initialSupply,uint8 _decimals) public {\n        decimals = _decimals;\n        totalSupply = _initialSupply * 10 ** uint256(decimals);  // 这里确定了总发行量\n        name = _tokenName;\n        symbol = _tokenSymbol;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n}",
  "bytecode": "608060405234801561001057600080fd5b506040516107fe3803806107fe83398101604090815281516020808401519284015160608501516003805460ff191660ff808416919091179182905516600a0a8202600255928501805190959490940193909291610073916000918701906100a5565b5082516100879060019060208601906100a5565b50506002543360009081526004602052604090205550610140915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e657805160ff1916838001178555610113565b82800160010185558215610113579182015b828111156101135782518255916020019190600101906100f8565b5061011f929150610123565b5090565b61013d91905b8082111561011f5760008155600101610129565b90565b6106af8061014f6000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d578063095ea7b31461012757806318160ddd1461015f57806323b872dd14610186578063313ce567146101b057806370a08231146101db57806395d89b41146101fc578063a9059cbb14610211578063dd62ed3e14610235575b600080fd5b3480156100a957600080fd5b506100b261025c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100ec5781810151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013357600080fd5b5061014b600160a060020a03600435166024356102ea565b604080519115158252519081900360200190f35b34801561016b57600080fd5b50610174610350565b60408051918252519081900360200190f35b34801561019257600080fd5b5061014b600160a060020a0360043581169060243516604435610356565b3480156101bc57600080fd5b506101c56104cf565b6040805160ff9092168252519081900360200190f35b3480156101e757600080fd5b50610174600160a060020a03600435166104d8565b34801561020857600080fd5b506100b26104f3565b34801561021d57600080fd5b5061014b600160a060020a036004351660243561054d565b34801561024157600080fd5b50610174600160a060020a0360043581169060243516610630565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102e25780601f106102b7576101008083540402835291602001916102e2565b820191906000526020600020905b8154815290600101906020018083116102c557829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60025481565b6000600160a060020a038316151561036d57600080fd5b600160a060020a03841660009081526004602052604090205482111561039257600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020548211156103c257600080fd5b600160a060020a0384166000908152600460205260409020546103eb908363ffffffff61065b16565b600160a060020a038086166000908152600460205260408082209390935590851681522054610420908363ffffffff61066d16565b600160a060020a038085166000908152600460209081526040808320949094559187168152600582528281203382529091522054610464908363ffffffff61065b16565b600160a060020a03808616600081815260056020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60035460ff1681565b600160a060020a031660009081526004602052604090205490565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102e25780601f106102b7576101008083540402835291602001916102e2565b6000600160a060020a038316151561056457600080fd5b3360009081526004602052604090205482111561058057600080fd5b336000908152600460205260409020546105a0908363ffffffff61065b16565b3360009081526004602052604080822092909255600160a060020a038516815220546105d2908363ffffffff61066d16565b600160a060020a0384166000818152600460209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60008282111561066757fe5b50900390565b60008282018381101561067c57fe5b93925050505600a165627a7a7230582086280805b040bc1fa4f75cb5a79788ed6b5d577551284864b8ce2eeb63dfbf140029000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a5769746b657973746172000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002574f000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a5769746b657973746172000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002574f000000000000000000000000000000000000000000000000000000000000"
}