{
  "address": "0xA674E1Cc4Ac13B01bD42351A9903B231aa9Cb5D4",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RetroArtStemToken",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.5.0;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\n// input  C:\\github\\privateCode\\retroArt\\reactWebsite\\contracts\\RetroArtStemToken.sol\n// flattened :  Monday, 22-Apr-19 22:14:31 UTC\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes memory _data \n  )\n    public\n    returns(bytes4);\n}\n\nlibrary RecordKeeping {\n    struct priceRecord {\n        uint256 price;\n        address owner;\n        uint256 timestamp;\n\n    }\n}\ncontract ERC721Basic is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data \n  )\n    public;\n}\n\ncontract SupportsInterfaceWithLookup is ERC165 {\n\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\ncontract Withdrawable  is Ownable {\n    \n    // _changeType is used to indicate the type of the transaction\n    // 0 - normal withdraw \n    // 1 - deposit from selling asset\n    // 2 - deposit from profit sharing of new token\n    // 3 - deposit from auction\n    // 4 - failed auction refund\n    // 5 - referral commission\n\n    event BalanceChanged(address indexed _owner, int256 _change,  uint256 _balance, uint8 _changeType);\n  \n    mapping (address => uint256) internal pendingWithdrawals;\n  \n    //total pending amount\n    uint256 internal totalPendingAmount;\n\n    function _deposit(address addressToDeposit, uint256 amount, uint8 changeType) internal{      \n        if (amount > 0) {\n            _depositWithoutEvent(addressToDeposit, amount);\n            emit BalanceChanged(addressToDeposit, int256(amount), pendingWithdrawals[addressToDeposit], changeType);\n        }\n    }\n\n    function _depositWithoutEvent(address addressToDeposit, uint256 amount) internal{\n        pendingWithdrawals[addressToDeposit] += amount;\n        totalPendingAmount += amount;       \n    }\n\n    function getBalance(address addressToCheck) public view returns (uint256){\n        return pendingWithdrawals[addressToCheck];\n    }\n\n    function withdrawOwnFund(address payable recipient_address) public {\n        require(msg.sender==recipient_address);\n\n        uint amount = pendingWithdrawals[recipient_address];\n        require(amount > 0);\n        // Remember to zero the pending refund before\n        // sending to prevent re-entrancy attacks\n        pendingWithdrawals[recipient_address] = 0;\n        totalPendingAmount -= amount;\n        recipient_address.transfer(amount);\n        emit BalanceChanged(recipient_address, -1 * int256(amount),  0, 0);\n    }\n\n    function checkAvailableContractBalance() public view returns (uint256){\n        if (address(this).balance > totalPendingAmount){\n            return address(this).balance - totalPendingAmount;\n        } else{\n            return 0;\n        }\n    }\n    function withdrawContractFund(address payable recipient_address) public onlyOwner  {\n        uint256 amountToWithdraw = checkAvailableContractBalance();\n        if (amountToWithdraw > 0){\n            recipient_address.transfer(amountToWithdraw);\n        }\n    }\n} \ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    public\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string memory _name);\n  function symbol() external view returns (string memory _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string memory);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract ERC721WithState is ERC721BasicToken {\n    mapping (uint256 => uint8) internal tokenState;\n\n    event TokenStateSet(uint256 indexed _tokenId,  uint8 _state);\n\n    function setTokenState(uint256  _tokenId,  uint8 _state) public  {\n        require(isApprovedOrOwner(msg.sender, _tokenId));\n        require(exists(_tokenId)); \n        tokenState[_tokenId] = _state;      \n        emit TokenStateSet(_tokenId, _state);\n    }\n\n    function getTokenState(uint256  _tokenId) public view returns (uint8){\n        require(exists(_tokenId));\n        return tokenState[_tokenId];\n    } \n\n\n}\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string memory _name, string memory _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string memory) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string memory) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string memory) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string memory _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    ownedTokens[_from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    hasMintPermission\n    canMint\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner canMint returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\ncontract StandardBurnableToken is BurnableToken, StandardToken {\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    require(_value <= allowed[_from][msg.sender]);\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    _burn(_from, _value);\n  }\n}\n\ncontract RetroArt is ERC721Token, Ownable, Withdrawable, ERC721WithState {\n    \n    address public stemTokenContractAddress; \n    uint256 public currentPrice;\n    uint256 constant initiailPrice = 0.03 ether;\n    //new asset price increase at the rate that determined by the variable below\n    //it is caculated from the current price + (current price / ( price rate * totalTokens / slowDownRate ))\n    uint public priceRate = 10;\n    uint public slowDownRate = 7;\n    //Commission will be charged if a profit is made\n    //Commission is the pure profit / profit Commission  \n    // measured in basis points (1/100 of a percent) \n    // Values 0-10,000 map to 0%-100%\n    uint public profitCommission = 500;\n\n    //the referral percentage of the commission of selling of aset\n    // measured in basis points (1/100 of a percent) \n    // Values 0-10,000 map to 0%-100%\n    uint public referralCommission = 3000;\n\n    //share will be given to all tokens equally if a new asset is acquired. \n    //the amount of total shared value is assetValue/sharePercentage   \n    // measured in basis points (1/100 of a percent) \n    // Values 0-10,000 map to 0%-100%\n    uint public sharePercentage = 3000;\n\n    //number of shares for acquiring new asset. \n    uint public numberOfShares = 10;\n\n    string public uriPrefix =\"\";\n\n\n    // Mapping from owner to list of owned token IDs\n    mapping (uint256 => string) internal tokenTitles;\n    mapping (uint256 => RecordKeeping.priceRecord) internal initialPriceRecords;\n    mapping (uint256 => RecordKeeping.priceRecord) internal lastPriceRecords;\n    mapping (uint256 => uint256) internal currentTokenPrices;\n\n\n    event AssetAcquired(address indexed _owner, uint256 indexed _tokenId, string  _title, uint256 _price);\n    event TokenPriceSet(uint256 indexed _tokenId,  uint256 _price);\n    event TokenBrought(address indexed _from, address indexed _to, uint256 indexed _tokenId, uint256 _price);\n    event PriceRateChanged(uint _priceRate);\n    event SlowDownRateChanged(uint _slowDownRate);\n    event ProfitCommissionChanged(uint _profitCommission);\n    event MintPriceChanged(uint256 _price);\n    event SharePercentageChanged(uint _sharePercentage);\n    event NumberOfSharesChanged(uint _numberOfShares);\n    event ReferralCommissionChanged(uint _referralCommission);\n    event Burn(address indexed _owner, uint256 _tokenId);\n\n   \n\n    bytes4 private constant InterfaceId_RetroArt = 0x94fb30be;\n    /*\n    bytes4(keccak256(\"buyTokenFrom(address,address,uint256)\"))^\n    bytes4(keccak256(\"setTokenPrice(uint256,uint256)\"))^\n    bytes4(keccak256(\"setTokenState(uint256,uint8)\"))^\n    bytes4(keccak256(\"getTokenState(uint256)\"));\n    */\n\n    address[] internal auctionContractAddresses;\n \n   \n\n    function tokenTitle(uint256 _tokenId) public view returns (string memory) {\n        require(exists(_tokenId));\n        return tokenTitles[_tokenId];\n    }\n    function lastPriceOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  lastPriceRecords[_tokenId].price;\n    }   \n\n    function lastTransactionTimeOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  lastPriceRecords[_tokenId].timestamp;\n    }\n\n    function firstPriceOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  initialPriceRecords[_tokenId].price;\n    }   \n    function creatorOf(uint256 _tokenId) public view returns (address) {\n        require(exists(_tokenId));\n        return  initialPriceRecords[_tokenId].owner;\n    }\n    function firstTransactionTimeOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  initialPriceRecords[_tokenId].timestamp;\n    }\n    \n  \n    //problem with current web3.js that can't return an array of struct\n    function lastHistoryOf(uint256 _tokenId) internal view returns (RecordKeeping.priceRecord storage) {\n        require(exists(_tokenId));\n        return lastPriceRecords[_tokenId];\n    }\n\n    function firstHistoryOf(uint256 _tokenId) internal view returns (RecordKeeping.priceRecord storage) {\n        require(exists(_tokenId)); \n        return   initialPriceRecords[_tokenId];\n    }\n\n    function setPriceRate(uint _priceRate) public onlyOwner {\n        priceRate = _priceRate;\n        emit PriceRateChanged(priceRate);\n    }\n\n    function setSlowDownRate(uint _slowDownRate) public onlyOwner {\n        slowDownRate = _slowDownRate;\n        emit SlowDownRateChanged(slowDownRate);\n    }\n \n    function setprofitCommission(uint _profitCommission) public onlyOwner {\n        require(_profitCommission <= 10000);\n        profitCommission = _profitCommission;\n        emit ProfitCommissionChanged(profitCommission);\n    }\n\n    function setSharePercentage(uint _sharePercentage) public onlyOwner  {\n        require(_sharePercentage <= 10000);\n        sharePercentage = _sharePercentage;\n        emit SharePercentageChanged(sharePercentage);\n    }\n\n    function setNumberOfShares(uint _numberOfShares) public onlyOwner  {\n        numberOfShares = _numberOfShares;\n        emit NumberOfSharesChanged(numberOfShares);\n    }\n\n    function setReferralCommission(uint _referralCommission) public onlyOwner  {\n        require(_referralCommission <= 10000);\n        referralCommission = _referralCommission;\n        emit ReferralCommissionChanged(referralCommission);\n    }\n\n    function setUriPrefix(string memory _uri) public onlyOwner  {\n       uriPrefix = _uri;\n    }\n  \n    //use the token name, symbol as usual\n    //this contract create another ERC20 as stemToken,\n    //the constructure takes the stemTokenName and stemTokenSymbol\n\n    constructor(string memory _name, string memory _symbol , address _stemTokenAddress) \n        ERC721Token(_name, _symbol) Ownable() public {\n       \n        currentPrice = initiailPrice;\n        stemTokenContractAddress = _stemTokenAddress;\n        _registerInterface(InterfaceId_RetroArt);\n    }\n\n    function getAllAssets() public view returns (uint256[] memory){\n        return allTokens;\n    }\n\n    function getAllAssetsForSale() public view returns  (uint256[] memory){\n      \n        uint arrayLength = allTokens.length;\n        uint forSaleCount = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0) {\n                forSaleCount++;              \n            }\n        }\n        \n        uint256[] memory tokensForSale = new uint256[](forSaleCount);\n\n        uint j = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0) {                \n                tokensForSale[j] = allTokens[i];\n                j++;\n            }\n        }\n\n        return tokensForSale;\n    }\n\n    function getAssetsForSale(address _owner) public view returns (uint256[] memory) {\n      \n        uint arrayLength = allTokens.length;\n        uint forSaleCount = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0 && tokenOwner[allTokens[i]] == _owner) {\n                forSaleCount++;              \n            }\n        }\n        \n        uint256[] memory tokensForSale = new uint256[](forSaleCount);\n\n        uint j = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0 && tokenOwner[allTokens[i]] == _owner) {                \n                tokensForSale[j] = allTokens[i];\n                j++;\n            }\n        }\n\n        return tokensForSale;\n    }\n\n    function getAssetsByState(uint8 _state) public view returns (uint256[] memory){\n        \n        uint arrayLength = allTokens.length;\n        uint matchCount = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (tokenState[allTokens[i]] == _state) {\n                matchCount++;              \n            }\n        }\n        \n        uint256[] memory matchedTokens = new uint256[](matchCount);\n\n        uint j = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (tokenState[allTokens[i]] == _state) {                \n                matchedTokens[j] = allTokens[i];\n                j++;\n            }\n        }\n\n        return matchedTokens;\n    }\n      \n\n    function acquireAsset(uint256 _tokenId, string memory _title) public payable{\n        acquireAssetWithReferral(_tokenId, _title, address(0));\n    }\n\n    function acquireAssetFromStemToken(address _tokenOwner, uint256 _tokenId, string calldata _title) external {     \n         require(msg.sender == stemTokenContractAddress);\n        _acquireAsset(_tokenId, _title, _tokenOwner, 0);\n    }\n\n    function acquireAssetWithReferral(uint256 _tokenId, string memory _title, address referralAddress) public payable{\n        require(msg.value >= currentPrice);\n        \n        uint totalShares = numberOfShares;\n        if (referralAddress != address(0)) totalShares++;\n\n        uint numberOfTokens = allTokens.length;\n     \n        if (numberOfTokens > 0 && sharePercentage > 0) {\n\n            uint256 perShareValue = 0;\n            uint256 totalShareValue = msg.value * sharePercentage / 10000 ;\n\n            if (totalShares > numberOfTokens) {\n                               \n                if (referralAddress != address(0)) \n                    perShareValue = totalShareValue / (numberOfTokens + 1);\n                else\n                    perShareValue = totalShareValue / numberOfTokens;\n            \n                for (uint i = 0; i < numberOfTokens; i++) {\n                    //turn off events if there are too many tokens in the loop\n                    if (numberOfTokens > 100) {\n                        _depositWithoutEvent(tokenOwner[allTokens[i]], perShareValue);\n                    }else{\n                        _deposit(tokenOwner[allTokens[i]], perShareValue, 2);\n                    }\n                }\n                \n            }else{\n               \n                if (referralAddress != address(0)) \n                    perShareValue = totalShareValue / (totalShares + 1);\n                else\n                    perShareValue = totalShareValue / totalShares;\n              \n                uint[] memory randomArray = random(numberOfShares);\n\n                for (uint i = 0; i < numberOfShares; i++) {\n                    uint index = randomArray[i] % numberOfTokens;\n\n                    if (numberOfShares > 100) {\n                        _depositWithoutEvent(tokenOwner[allTokens[index]], perShareValue);\n                    }else{\n                        _deposit(tokenOwner[allTokens[index]], perShareValue, 2);\n                    }\n                }\n            }\n                    \n            if (referralAddress != address(0) && perShareValue > 0) _deposit(referralAddress, perShareValue, 5);\n\n        }\n\n        _acquireAsset(_tokenId, _title, msg.sender, msg.value);\n     \n    }\n\n    function _acquireAsset(uint256 _tokenId, string memory _title, address _purchaser, uint256 _value) internal {\n        \n        currentPrice = CalculateNextPrice();\n        _mint(_purchaser, _tokenId);        \n      \n        tokenTitles[_tokenId] = _title;\n       \n        RecordKeeping.priceRecord memory pr = RecordKeeping.priceRecord(_value, _purchaser, block.timestamp);\n        initialPriceRecords[_tokenId] = pr;\n        lastPriceRecords[_tokenId] = pr;     \n\n        emit AssetAcquired(_purchaser,_tokenId, _title, _value);\n        emit TokenBrought(address(0), _purchaser, _tokenId, _value);\n        emit MintPriceChanged(currentPrice);\n    }\n\n    function CalculateNextPrice() public view returns (uint256){      \n        return currentPrice + currentPrice * slowDownRate / ( priceRate * (allTokens.length + 2));\n    }\n\n    function tokensOf(address _owner) public view returns (uint256[] memory){\n        return ownedTokens[_owner];\n    }\n\n    function _buyTokenFromWithReferral(address _from, address _to, uint256 _tokenId, address referralAddress, address _depositTo) internal {\n        require(currentTokenPrices[_tokenId] != 0);\n        require(msg.value >= currentTokenPrices[_tokenId]);\n        \n        tokenApprovals[_tokenId] = _to;\n        safeTransferFrom(_from,_to,_tokenId);\n\n        uint256 valueTransferToOwner = msg.value;\n        uint256 lastRecordPrice = lastPriceRecords[_tokenId].price;\n        if (msg.value >  lastRecordPrice){\n            uint256 profit = msg.value - lastRecordPrice;           \n            uint256 commission = profit * profitCommission / 10000;\n            valueTransferToOwner = msg.value - commission;\n            if (referralAddress != address(0)){\n                _deposit(referralAddress, commission * referralCommission / 10000, 5);\n            }           \n        }\n        \n        if (valueTransferToOwner > 0) _deposit(_depositTo, valueTransferToOwner, 1);\n        writePriceRecordForAssetSold(_depositTo, msg.sender, _tokenId, msg.value);\n        \n    }\n\n    function buyTokenFromWithReferral(address _from, address _to, uint256 _tokenId, address referralAddress) public payable {\n        _buyTokenFromWithReferral(_from, _to, _tokenId, referralAddress, _from);        \n    }\n\n    function buyTokenFrom(address _from, address _to, uint256 _tokenId) public payable {\n        buyTokenFromWithReferral(_from, _to, _tokenId, address(0));        \n    }   \n\n    function writePriceRecordForAssetSold(address _from, address _to, uint256 _tokenId, uint256 _value) internal {\n       RecordKeeping.priceRecord memory pr = RecordKeeping.priceRecord(_value, _to, block.timestamp);\n       lastPriceRecords[_tokenId] = pr;\n       \n       tokenApprovals[_tokenId] = address(0);\n       currentTokenPrices[_tokenId] = 0;\n       emit TokenBrought(_from, _to, _tokenId, _value);       \n    }\n\n    function recordAuctionPriceRecord(address _from, address _to, uint256 _tokenId, uint256 _value)\n       external {\n\n       require(findAuctionContractIndex(msg.sender) >= 0); //make sure the sender is from one of the auction addresses\n       writePriceRecordForAssetSold(_from, _to, _tokenId, _value);\n\n    }\n\n    function setTokenPrice(uint256 _tokenId, uint256 _newPrice) public  {\n        require(isApprovedOrOwner(msg.sender, _tokenId));\n        currentTokenPrices[_tokenId] = _newPrice;\n        emit TokenPriceSet(_tokenId, _newPrice);\n    }\n\n    function getTokenPrice(uint256 _tokenId)  public view returns(uint256) {\n        return currentTokenPrices[_tokenId];\n    }\n\n    function random(uint num) private view returns (uint[] memory) {\n        \n        uint base = uint(keccak256(abi.encodePacked(block.difficulty, now, tokenOwner[allTokens[allTokens.length-1]])));\n        uint[] memory randomNumbers = new uint[](num);\n        \n        for (uint i = 0; i<num; i++) {\n            randomNumbers[i] = base;\n            base = base * 2 ** 3;\n        }\n        return  randomNumbers;\n        \n    }\n\n\n    function getAsset(uint256 _tokenId)  external\n        view\n        returns\n    (\n        string memory title,            \n        address owner,     \n        address creator,      \n        uint256 currentTokenPrice,\n        uint256 lastPrice,\n        uint256 initialPrice,\n        uint256 lastDate,\n        uint256 createdDate\n    ) {\n        require(exists(_tokenId));\n        RecordKeeping.priceRecord memory lastPriceRecord = lastPriceRecords[_tokenId];\n        RecordKeeping.priceRecord memory initialPriceRecord = initialPriceRecords[_tokenId];\n\n        return (\n             \n            tokenTitles[_tokenId],        \n            tokenOwner[_tokenId],   \n            initialPriceRecord.owner,           \n            currentTokenPrices[_tokenId],      \n            lastPriceRecord.price,           \n            initialPriceRecord.price,\n            lastPriceRecord.timestamp,\n            initialPriceRecord.timestamp\n        );\n    }\n\n    function getAssetUpdatedInfo(uint256 _tokenId) external\n        view\n        returns\n    (         \n        address owner, \n        address approvedAddress,\n        uint256 currentTokenPrice,\n        uint256 lastPrice,      \n        uint256 lastDate\n      \n    ) {\n        require(exists(_tokenId));\n        RecordKeeping.priceRecord memory lastPriceRecord = lastPriceRecords[_tokenId];\n     \n        return (\n            tokenOwner[_tokenId],   \n            tokenApprovals[_tokenId],  \n            currentTokenPrices[_tokenId],      \n            lastPriceRecord.price,   \n            lastPriceRecord.timestamp           \n        );\n    }\n\n    function getAssetStaticInfo(uint256 _tokenId)  external\n        view\n        returns\n    (\n        string memory title,            \n        string memory tokenURI,    \n        address creator,            \n        uint256 initialPrice,       \n        uint256 createdDate\n    ) {\n        require(exists(_tokenId));      \n        RecordKeeping.priceRecord memory initialPriceRecord = initialPriceRecords[_tokenId];\n\n        return (\n             \n            tokenTitles[_tokenId],        \n            tokenURIs[_tokenId],\n            initialPriceRecord.owner,\n            initialPriceRecord.price,         \n            initialPriceRecord.timestamp\n        );\n         \n    }\n\n    function burnExchangeToken(address _tokenOwner, uint256 _tokenId) external  {\n        require(msg.sender == stemTokenContractAddress);       \n        _burn(_tokenOwner, _tokenId);       \n        emit Burn(_tokenOwner, _tokenId);\n    }\n\n    function findAuctionContractIndex(address _addressToFind) public view returns (int)  {\n        \n        for (int i = 0; i < int(auctionContractAddresses.length); i++){\n            if (auctionContractAddresses[uint256(i)] == _addressToFind){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function addAuctionContractAddress(address _auctionContractAddress) public onlyOwner {\n        require(findAuctionContractIndex(_auctionContractAddress) == -1);\n        auctionContractAddresses.push(_auctionContractAddress);\n    }\n\n    function removeAuctionContractAddress(address _auctionContractAddress) public onlyOwner {\n        int index = findAuctionContractIndex(_auctionContractAddress);\n        require(index >= 0);        \n\n        for (uint i = uint(index); i < auctionContractAddresses.length-1; i++){\n            auctionContractAddresses[i] = auctionContractAddresses[i+1];         \n        }\n        auctionContractAddresses.length--;\n    }\n\n    function setStemTokenContractAddress(address _stemTokenContractAddress) public onlyOwner {        \n        stemTokenContractAddress = _stemTokenContractAddress;\n    }          \n   \n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        require(exists(_tokenId));   \n        return string(abi.encodePacked(uriPrefix, uint256ToString(_tokenId)));\n\n    }\n    // Functions used for generating the URI\n    function amountOfZeros(uint256 num, uint256 base) public pure returns(uint256){\n        uint256 result = 0;\n        num /= base;\n        while (num > 0){\n            num /= base;\n            result += 1;\n        }\n        return result;\n    }\n\n      function uint256ToString(uint256 num) public pure returns(string memory){\n        if (num == 0){\n            return \"0\";\n        }\n        uint256 numLen = amountOfZeros(num, 10) + 1;\n        bytes memory result = new bytes(numLen);\n        while(num != 0){\n            numLen -= 1;\n            result[numLen] = byte(uint8((num - (num / 10 * 10)) + 48));\n            num /= 10;\n        }\n        return string(result);\n    }\n\n    //  function initialImport(uint256[] memory _tokenIds,\n    //                         uint256[] memory _lastPrices, address[] memory _owners, uint256[] memory _lastDates,\n    //                         uint256[] memory _initialPrices, address[] memory _creators, uint256[] memory _initialDates,\n    //                         string[] memory _titles ) public onlyOwner {\n    \n    //     require( _tokenIds.length == _lastPrices.length &&\n    //             _tokenIds.length == _owners.length &&\n    //             _tokenIds.length == _lastDates.length &&\n    //             _tokenIds.length == _initialPrices.length &&\n    //             _tokenIds.length == _creators.length &&\n    //             _tokenIds.length == _initialDates.length &&\n    //             _tokenIds.length == _titles.length \n    //             );\n\n    //     for (uint i = 0; i < _tokenIds.length; i++){\n\n    //         allTokensIndex[_tokenIds[i]] = allTokens.length;\n    //         allTokens.push(_tokenIds[i]);\n\n    //         tokenTitles[_tokenIds[i]] = _titles[i];\n\n    //         addTokenTo(_owners[i],_tokenIds[i]);\n\n    //         RecordKeeping.priceRecord memory prInitial = RecordKeeping.priceRecord(_initialPrices[i], _creators[i], _initialDates[i]);\n    //         initialPriceRecords[_tokenIds[i]] = prInitial;      \n\n    //         RecordKeeping.priceRecord memory prLast = RecordKeeping.priceRecord(_lastPrices[i], _owners[i], _lastDates[i]);\n    //         lastPriceRecords[_tokenIds[i]] = prLast;  \n\n               \n\n    //     }\n    // }\n}\n\n\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\ncontract StemToken is CappedToken, StandardBurnableToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    constructor(string memory _name, string memory _symbol, uint256 _cap) CappedToken(_cap)  public {\n        name = _name;\n        symbol = _symbol;\n        decimals = 0;    \n    }\n}\ncontract RetroArtStemToken is StemToken {    \n\n    address public retroArtAddress;\n\n    constructor(string memory _name, string memory _symbol, uint256 _cap) StemToken(_name, _symbol, _cap )  public {\n        \n    }\n\n  \n    function setRetroArtAddress(address _retroArtAddress) public onlyOwner {        \n        retroArtAddress = _retroArtAddress;\n    }\n\n    function sellback(uint256 _tokenId) public {\n     \n        RetroArt retroArt = RetroArt(retroArtAddress);\n        require(retroArt.ownerOf(_tokenId) == msg.sender);\n        retroArt.burnExchangeToken(msg.sender, _tokenId);\n        totalSupply_ = totalSupply_.add(1);\n        balances[msg.sender] = balances[msg.sender].add(1);\n        emit Mint(msg.sender, 1);\n        emit Transfer(address(0), msg.sender, 1);\n    }\n\n    //acquire a new asset using one stem token\n    //usually _tokenOwner should just be the msg.sender, as the address who pay with the stem token\n    //however it can be used to pay on behalf of someone else if _tokenOwner is a different address\n    function acquireAssetForOther(uint256 _tokenId, string memory _title, address _tokenOwner) public {\n        require(balanceOf(msg.sender) >= 1);           \n        _burn(msg.sender, uint256(1));\n        RetroArt retroArt = RetroArt(retroArtAddress);\n        retroArt.acquireAssetFromStemToken(_tokenOwner, _tokenId, _title);\n    }\n\n    function acquireAsset(uint256 _tokenId, string memory _title) public {\n        acquireAssetForOther(_tokenId, _title, msg.sender);\n    }\n\n}",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000000c526574726f4172745374656d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037274730000000000000000000000000000000000000000000000000000000000"
}