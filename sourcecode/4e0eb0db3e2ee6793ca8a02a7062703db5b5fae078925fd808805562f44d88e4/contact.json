{
  "address": "0xc975512C02031e225cd3Bb347dcA57eEFf0e0E9A",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RetroArtTokenAuction",
  "compilerVersion": "v0.5.0+commit.1d4f565a",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-22\n*/\n\npragma solidity ^0.5.0;\n// produced by the Solididy File Flattener (c) David Appleton 2018\n// contact : [emailÂ protected]\n// released under Apache 2.0 licence\n// input  C:\\github\\privateCode\\retroArt\\reactWebsite\\contracts\\RetroArtTokenAuction.sol\n// flattened :  Monday, 22-Apr-19 22:17:45 UTC\ncontract ERC721Receiver {\n  /**\n   * @dev Magic value to be returned upon successful reception of an NFT\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n   */\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n\n  /**\n   * @notice Handle the receipt of an NFT\n   * @dev The ERC721 smart contract calls this function on the recipient\n   * after a `safetransfer`. This function MAY throw to revert and reject the\n   * transfer. Return of other than the magic value MUST result in the\n   * transaction being reverted.\n   * Note: the contract address is always the message sender.\n   * @param _operator The address which called `safeTransferFrom` function\n   * @param _from The address which previously owned the token\n   * @param _tokenId The NFT identifier which is being transferred\n   * @param _data Additional data with no specified format\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n   */\n  function onERC721Received(\n    address _operator,\n    address _from,\n    uint256 _tokenId,\n    bytes memory _data \n  )\n    public\n    returns(bytes4);\n}\n\nlibrary AddressUtils {\n\n  /**\n   * Returns whether the target address is a contract\n   * @dev This function will return false if invoked during the constructor of a contract,\n   * as the code is not actually created until after the constructor finishes.\n   * @param _addr address to check\n   * @return whether the target address is a contract\n   */\n  function isContract(address _addr) internal view returns (bool) {\n    uint256 size;\n    // XXX Currently there is no better way to check if there is a contract in an address\n    // than to check the size of the code at that address.\n    // See https://ethereum.stackexchange.com/a/14016/36603\n    // for more details about how this works.\n    // TODO Check this again before the Serenity release, because all addresses will be\n    // contracts then.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly { size := extcodesize(_addr) }\n    return size > 0;\n  }\n\n}\n\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\nlibrary RecordKeeping {\n    struct priceRecord {\n        uint256 price;\n        address owner;\n        uint256 timestamp;\n\n    }\n}\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\ncontract Withdrawable  is Ownable {\n    \n    // _changeType is used to indicate the type of the transaction\n    // 0 - normal withdraw \n    // 1 - deposit from selling asset\n    // 2 - deposit from profit sharing of new token\n    // 3 - deposit from auction\n    // 4 - failed auction refund\n    // 5 - referral commission\n\n    event BalanceChanged(address indexed _owner, int256 _change,  uint256 _balance, uint8 _changeType);\n  \n    mapping (address => uint256) internal pendingWithdrawals;\n  \n    //total pending amount\n    uint256 internal totalPendingAmount;\n\n    function _deposit(address addressToDeposit, uint256 amount, uint8 changeType) internal{      \n        if (amount > 0) {\n            _depositWithoutEvent(addressToDeposit, amount);\n            emit BalanceChanged(addressToDeposit, int256(amount), pendingWithdrawals[addressToDeposit], changeType);\n        }\n    }\n\n    function _depositWithoutEvent(address addressToDeposit, uint256 amount) internal{\n        pendingWithdrawals[addressToDeposit] += amount;\n        totalPendingAmount += amount;       \n    }\n\n    function getBalance(address addressToCheck) public view returns (uint256){\n        return pendingWithdrawals[addressToCheck];\n    }\n\n    function withdrawOwnFund(address payable recipient_address) public {\n        require(msg.sender==recipient_address);\n\n        uint amount = pendingWithdrawals[recipient_address];\n        require(amount > 0);\n        // Remember to zero the pending refund before\n        // sending to prevent re-entrancy attacks\n        pendingWithdrawals[recipient_address] = 0;\n        totalPendingAmount -= amount;\n        recipient_address.transfer(amount);\n        emit BalanceChanged(recipient_address, -1 * int256(amount),  0, 0);\n    }\n\n    function checkAvailableContractBalance() public view returns (uint256){\n        if (address(this).balance > totalPendingAmount){\n            return address(this).balance - totalPendingAmount;\n        } else{\n            return 0;\n        }\n    }\n    function withdrawContractFund(address payable recipient_address) public onlyOwner  {\n        uint256 amountToWithdraw = checkAvailableContractBalance();\n        if (amountToWithdraw > 0){\n            recipient_address.transfer(amountToWithdraw);\n        }\n    }\n} \ncontract ERC721Holder is ERC721Receiver {\n  function onERC721Received(\n    address,\n    address,\n    uint256,\n    bytes memory\n  )\n    public\n    returns(bytes4)\n  {\n    return ERC721_RECEIVED;\n  }\n}\n\ncontract ERC721Basic is ERC165 {\n\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n  /*\n   * 0x80ac58cd ===\n   *   bytes4(keccak256('balanceOf(address)')) ^\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\n   *   bytes4(keccak256('approve(address,uint256)')) ^\n   *   bytes4(keccak256('getApproved(uint256)')) ^\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n  /*\n   * 0x4f558e79 ===\n   *   bytes4(keccak256('exists(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n  /**\n   * 0x780e9d63 ===\n   *   bytes4(keccak256('totalSupply()')) ^\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\n   */\n\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n  /**\n   * 0x5b5e139f ===\n   *   bytes4(keccak256('name()')) ^\n   *   bytes4(keccak256('symbol()')) ^\n   *   bytes4(keccak256('tokenURI(uint256)'))\n   */\n\n  event Transfer(\n    address indexed _from,\n    address indexed _to,\n    uint256 indexed _tokenId\n  );\n  event Approval(\n    address indexed _owner,\n    address indexed _approved,\n    uint256 indexed _tokenId\n  );\n  event ApprovalForAll(\n    address indexed _owner,\n    address indexed _operator,\n    bool _approved\n  );\n\n  function balanceOf(address _owner) public view returns (uint256 _balance);\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n  function exists(uint256 _tokenId) public view returns (bool _exists);\n\n  function approve(address _to, uint256 _tokenId) public;\n  function getApproved(uint256 _tokenId)\n    public view returns (address _operator);\n\n  function setApprovalForAll(address _operator, bool _approved) public;\n  function isApprovedForAll(address _owner, address _operator)\n    public view returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n    public;\n\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data \n  )\n    public;\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n\n    /**\n    * @dev modifier to allow actions only when the contract IS paused\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev modifier to allow actions only when the contract IS NOT paused\n    */\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public onlyOwner whenNotPaused returns (bool)  {\n        paused = true;\n        emit Pause();\n        return true;\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() public onlyOwner whenPaused returns (bool) {\n        paused = false;\n        emit Unpause();\n        return true;\n    }\n}\ncontract SupportsInterfaceWithLookup is ERC165 {\n\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n  /**\n   * 0x01ffc9a7 ===\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\n   */\n\n  /**\n   * @dev a mapping of interface id to whether or not it's supported\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev A contract implementing SupportsInterfaceWithLookup\n   * implement ERC165 itself\n   */\n  constructor()\n    public\n  {\n    _registerInterface(InterfaceId_ERC165);\n  }\n\n  /**\n   * @dev implement supportsInterface(bytes4) using a lookup table\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceId];\n  }\n\n  /**\n   * @dev private method for registering an interface\n   */\n  function _registerInterface(bytes4 _interfaceId)\n    internal\n  {\n    require(_interfaceId != 0xffffffff);\n    supportedInterfaces[_interfaceId] = true;\n  }\n}\n\ncontract TokenAuctionBase is ERC721Holder, Withdrawable {\n\n    // Represents an auction on an NFT\n    struct Auction {\n        // Current owner of NFT\n        address seller;\n        // Mminimum selling Price (in wei) \n        uint128 minPrice;\n        // Duration (in seconds) of auction\n        uint64 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n        //current highest Bid price\n        uint128 highestPrice;\n        //current highest Bidder\n        address highestBidder;        \n    }\n\n    // Reference to contract tracking NFT ownership\n    ERC721Basic public nonFungibleContract;\n\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n    // Values 0-10,000 map to 0%-100%\n    uint256 public ownerCut;\n\n    // Map from token ID to their corresponding auction.\n    mapping (uint256 => Auction) tokenIdToAuction;\n \n    event AuctionCreated(uint256 indexed tokenId, uint128 minPrice, uint64 duration);\n    event AuctionSuccessful(uint256 indexed tokenId, uint128 totalPrice, address winner);\n    event AuctionCancelled(uint256 indexed tokenId);\n    event AuctionExpired(uint256 indexed tokenId);\n    event HighestBidIncreased(uint256 indexed tokenId, address bidder, uint128 amount);\n\n    /// @dev Returns true if the claimant owns the token.\n    /// @param _claimant - Address claiming to own the token.\n    /// @param _tokenId - ID of token whose ownership to verify.\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }\n\n    /// @dev Escrows the NFT, assigning ownership to this contract.\n    /// Throws if the escrow fails.\n    /// @param _owner - Current owner address of token to escrow.\n    /// @param _tokenId - ID of token whose approval to verify.\n    function _escrow(address _owner, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.safeTransferFrom(_owner, address(this), _tokenId);\n    }\n\n    /// @dev Transfers an NFT owned by this contract to another address.\n    /// Returns true if the transfer succeeds.\n    /// @param _receiver - Address to transfer NFT to.\n    /// @param _tokenId - ID of token to transfer.\n    function _transfer(address _receiver, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.safeTransferFrom(address(this), _receiver, _tokenId);\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuction(uint256 _tokenId, Auction memory _auction) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        emit AuctionCreated(\n            _tokenId,\n            uint128(_auction.minPrice),\n            uint64(_auction.duration)\n        );\n    }\n\n    /// @dev Cancels an auction unconditionally.\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        emit AuctionCancelled(_tokenId);\n    }\n\n    function _bidWithDeposit (uint256 _tokenId, uint256 _additionalAmount) internal{\n        uint256 totalAmount = _additionalAmount + pendingWithdrawals[msg.sender];\n        pendingWithdrawals[msg.sender] = 0;\n        _bid(_tokenId, totalAmount);\n    }\n\n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.   \n    function _bid(uint256 _tokenId, uint256 _bidAmount)\n        internal\n       \n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isAuctionActive(auction));\n        \n        // Check that the bid is greater than the highest price      \n        require(_bidAmount > auction.highestPrice && _bidAmount > auction.minPrice);\n\n        //refund the current highest bidder\n        if (auction.highestPrice != 0){\n            _deposit(auction.highestBidder, auction.highestPrice, 4);\n\n            //make sure we unlock the amount from the withheld amount\n            if (totalPendingAmount > auction.highestPrice) {\n                totalPendingAmount -= auction.highestPrice;\n            }else{\n                totalPendingAmount = 0;\n            }\n        }\n        \n        auction.highestPrice = uint128(msg.value);\n        auction.highestBidder = msg.sender;\n\n        //make sure we lock the escrow amount of the highest price to prevent withdrawing from the contract\n        totalPendingAmount += auction.highestPrice;\n\n        emit HighestBidIncreased(_tokenId,auction.highestBidder, auction.highestPrice);\n     \n    }\n\n    function _concludeAuction(uint256 _tokenId) internal returns (uint256) {\n      \n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));       \n\n        uint256 secondsPassed = now - auction.startedAt;\n        require(secondsPassed > auction.duration);\n\n      \n\n        if (auction.highestPrice > auction.minPrice && auction.highestPrice > 0) {\n            uint256 auctioneerCut = _computeCut(auction.highestPrice);\n            uint256 sellerProceeds = auction.highestPrice - auctioneerCut;          \n            emit AuctionSuccessful(_tokenId, auction.highestPrice, auction.highestBidder);\n            return sellerProceeds;\n        }else{\n      \n            emit AuctionExpired(_tokenId);\n            return 0;\n        }\n\n   \n    }\n\n    /// @dev Removes an auction from the list of open auctions.\n    /// @param _tokenId - ID of NFT on auction.\n    function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }\n\n    /// @dev Returns true if the NFT is on auction.\n    /// @param _auction - Auction to check.\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {     \n        return (_auction.startedAt > 0);\n    }\n\n    function _isAuctionActive(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0 && now - _auction.startedAt < _auction.duration);      \n    }\n\n    \n\n    /// @dev Computes owner's cut of a sale.\n    /// @param _price - Sale price of NFT.\n    function _computeCut(uint256 _price) internal view returns (uint256) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the ClockAuction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n        return _price * ownerCut / 10000;\n    }  \n\n\n\n}\n\ncontract ERC721Enumerable is ERC721Basic {\n  function totalSupply() public view returns (uint256);\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256 _tokenId);\n\n  function tokenByIndex(uint256 _index) public view returns (uint256);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Metadata is ERC721Basic {\n  function name() external view returns (string memory _name);\n  function symbol() external view returns (string memory _symbol);\n  function tokenURI(uint256 _tokenId) public view returns (string memory);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n}\n\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n\n  using SafeMath for uint256;\n  using AddressUtils for address;\n\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n\n  // Mapping from token ID to owner\n  mapping (uint256 => address) internal tokenOwner;\n\n  // Mapping from token ID to approved address\n  mapping (uint256 => address) internal tokenApprovals;\n\n  // Mapping from owner to number of owned token\n  mapping (address => uint256) internal ownedTokensCount;\n\n  // Mapping from owner to operator approvals\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\n\n  constructor()\n    public\n  {\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721);\n    _registerInterface(InterfaceId_ERC721Exists);\n  }\n\n  /**\n   * @dev Gets the balance of the specified address\n   * @param _owner address to query the balance of\n   * @return uint256 representing the amount owned by the passed address\n   */\n  function balanceOf(address _owner) public view returns (uint256) {\n    require(_owner != address(0));\n    return ownedTokensCount[_owner];\n  }\n\n  /**\n   * @dev Gets the owner of the specified token ID\n   * @param _tokenId uint256 ID of the token to query the owner of\n   * @return owner address currently marked as the owner of the given token ID\n   */\n  function ownerOf(uint256 _tokenId) public view returns (address) {\n    address owner = tokenOwner[_tokenId];\n    require(owner != address(0));\n    return owner;\n  }\n\n  /**\n   * @dev Returns whether the specified token exists\n   * @param _tokenId uint256 ID of the token to query the existence of\n   * @return whether the token exists\n   */\n  function exists(uint256 _tokenId) public view returns (bool) {\n    address owner = tokenOwner[_tokenId];\n    return owner != address(0);\n  }\n\n  /**\n   * @dev Approves another address to transfer the given token ID\n   * The zero address indicates there is no approved address.\n   * There can only be one approved address per token at a given time.\n   * Can only be called by the token owner or an approved operator.\n   * @param _to address to be approved for the given token ID\n   * @param _tokenId uint256 ID of the token to be approved\n   */\n  function approve(address _to, uint256 _tokenId) public {\n    address owner = ownerOf(_tokenId);\n    require(_to != owner);\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n\n    tokenApprovals[_tokenId] = _to;\n    emit Approval(owner, _to, _tokenId);\n  }\n\n  /**\n   * @dev Gets the approved address for a token ID, or zero if no address set\n   * @param _tokenId uint256 ID of the token to query the approval of\n   * @return address currently approved for the given token ID\n   */\n  function getApproved(uint256 _tokenId) public view returns (address) {\n    return tokenApprovals[_tokenId];\n  }\n\n  /**\n   * @dev Sets or unsets the approval of a given operator\n   * An operator is allowed to transfer all tokens of the sender on their behalf\n   * @param _to operator address to set the approval\n   * @param _approved representing the status of the approval to be set\n   */\n  function setApprovalForAll(address _to, bool _approved) public {\n    require(_to != msg.sender);\n    operatorApprovals[msg.sender][_to] = _approved;\n    emit ApprovalForAll(msg.sender, _to, _approved);\n  }\n\n  /**\n   * @dev Tells whether an operator is approved by a given owner\n   * @param _owner owner address which you want to query the approval of\n   * @param _operator operator address which you want to query the approval of\n   * @return bool whether the given operator is approved by the given owner\n   */\n  function isApprovedForAll(\n    address _owner,\n    address _operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    return operatorApprovals[_owner][_operator];\n  }\n\n  /**\n   * @dev Transfers the ownership of a given token ID to another address\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    require(isApprovedOrOwner(msg.sender, _tokenId));\n    require(_from != address(0));\n    require(_to != address(0));\n\n    clearApproval(_from, _tokenId);\n    removeTokenFrom(_from, _tokenId);\n    addTokenTo(_to, _tokenId);\n\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   *\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n  */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  )\n    public\n  {\n    // solium-disable-next-line arg-overflow\n    safeTransferFrom(_from, _to, _tokenId, \"\");\n  }\n\n  /**\n   * @dev Safely transfers the ownership of a given token ID to another address\n   * If the target address is a contract, it must implement `onERC721Received`,\n   * which is called upon a safe transfer, and return the magic value\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n   * the transfer is reverted.\n   * Requires the msg sender to be the owner, approved, or operator\n   * @param _from current owner of the token\n   * @param _to address to receive the ownership of the given token ID\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes data to send along with a safe transfer check\n   */\n  function safeTransferFrom(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    public\n  {\n    transferFrom(_from, _to, _tokenId);\n    // solium-disable-next-line arg-overflow\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n  }\n\n  /**\n   * @dev Returns whether the given spender can transfer a given token ID\n   * @param _spender address of the spender to query\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @return bool whether the msg.sender is approved for the given token ID,\n   *  is an operator of the owner, or is the owner of the token\n   */\n  function isApprovedOrOwner(\n    address _spender,\n    uint256 _tokenId\n  )\n    internal\n    view\n    returns (bool)\n  {\n    address owner = ownerOf(_tokenId);\n    // Disable solium check because of\n    // https://github.com/duaraghav8/Solium/issues/175\n    // solium-disable-next-line operator-whitespace\n    return (\n      _spender == owner ||\n      getApproved(_tokenId) == _spender ||\n      isApprovedForAll(owner, _spender)\n    );\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to The address that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    require(_to != address(0));\n    addTokenTo(_to, _tokenId);\n    emit Transfer(address(0), _to, _tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    clearApproval(_owner, _tokenId);\n    removeTokenFrom(_owner, _tokenId);\n    emit Transfer(_owner, address(0), _tokenId);\n  }\n\n  /**\n   * @dev Internal function to clear current approval of a given token ID\n   * Reverts if the given address is not indeed the owner of the token\n   * @param _owner owner of the token\n   * @param _tokenId uint256 ID of the token to be transferred\n   */\n  function clearApproval(address _owner, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _owner);\n    if (tokenApprovals[_tokenId] != address(0)) {\n      tokenApprovals[_tokenId] = address(0);\n    }\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    require(tokenOwner[_tokenId] == address(0));\n    tokenOwner[_tokenId] = _to;\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    require(ownerOf(_tokenId) == _from);\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n    tokenOwner[_tokenId] = address(0);\n  }\n\n  /**\n   * @dev Internal function to invoke `onERC721Received` on a target address\n   * The call is not executed if the target address is not a contract\n   * @param _from address representing the previous owner of the given token ID\n   * @param _to target address that will receive the tokens\n   * @param _tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return whether the call correctly returned the expected magic value\n   */\n  function checkAndCallSafeTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId,\n    bytes memory _data\n  )\n    internal\n    returns (bool)\n  {\n    if (!_to.isContract()) {\n      return true;\n    }\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n      msg.sender, _from, _tokenId, _data);\n    return (retval == ERC721_RECEIVED);\n  }\n}\n\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n\n  // Token name\n  string internal name_;\n\n  // Token symbol\n  string internal symbol_;\n\n  // Mapping from owner to list of owned token IDs\n  mapping(address => uint256[]) internal ownedTokens;\n\n  // Mapping from token ID to index of the owner tokens list\n  mapping(uint256 => uint256) internal ownedTokensIndex;\n\n  // Array with all token ids, used for enumeration\n  uint256[] internal allTokens;\n\n  // Mapping from token id to position in the allTokens array\n  mapping(uint256 => uint256) internal allTokensIndex;\n\n  // Optional mapping for token URIs\n  mapping(uint256 => string) internal tokenURIs;\n\n  /**\n   * @dev Constructor function\n   */\n  constructor(string memory _name, string memory _symbol) public {\n    name_ = _name;\n    symbol_ = _symbol;\n\n    // register the supported interfaces to conform to ERC721 via ERC165\n    _registerInterface(InterfaceId_ERC721Enumerable);\n    _registerInterface(InterfaceId_ERC721Metadata);\n  }\n\n  /**\n   * @dev Gets the token name\n   * @return string representing the token name\n   */\n  function name() external view returns (string memory) {\n    return name_;\n  }\n\n  /**\n   * @dev Gets the token symbol\n   * @return string representing the token symbol\n   */\n  function symbol() external view returns (string memory) {\n    return symbol_;\n  }\n\n  /**\n   * @dev Returns an URI for a given token ID\n   * Throws if the token ID does not exist. May return an empty string.\n   * @param _tokenId uint256 ID of the token to query\n   */\n  function tokenURI(uint256 _tokenId) public view returns (string memory) {\n    require(exists(_tokenId));\n    return tokenURIs[_tokenId];\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n   * @param _owner address owning the tokens list to be accessed\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n   */\n  function tokenOfOwnerByIndex(\n    address _owner,\n    uint256 _index\n  )\n    public\n    view\n    returns (uint256)\n  {\n    require(_index < balanceOf(_owner));\n    return ownedTokens[_owner][_index];\n  }\n\n  /**\n   * @dev Gets the total amount of tokens stored by the contract\n   * @return uint256 representing the total amount of tokens\n   */\n  function totalSupply() public view returns (uint256) {\n    return allTokens.length;\n  }\n\n  /**\n   * @dev Gets the token ID at a given index of all the tokens in this contract\n   * Reverts if the index is greater or equal to the total number of tokens\n   * @param _index uint256 representing the index to be accessed of the tokens list\n   * @return uint256 token ID at the given index of the tokens list\n   */\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\n    require(_index < totalSupply());\n    return allTokens[_index];\n  }\n\n  /**\n   * @dev Internal function to set the token URI for a given token\n   * Reverts if the token ID does not exist\n   * @param _tokenId uint256 ID of the token to set its URI\n   * @param _uri string URI to assign\n   */\n  function _setTokenURI(uint256 _tokenId, string memory _uri) internal {\n    require(exists(_tokenId));\n    tokenURIs[_tokenId] = _uri;\n  }\n\n  /**\n   * @dev Internal function to add a token ID to the list of a given address\n   * @param _to address representing the new owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n   */\n  function addTokenTo(address _to, uint256 _tokenId) internal {\n    super.addTokenTo(_to, _tokenId);\n    uint256 length = ownedTokens[_to].length;\n    ownedTokens[_to].push(_tokenId);\n    ownedTokensIndex[_tokenId] = length;\n  }\n\n  /**\n   * @dev Internal function to remove a token ID from the list of a given address\n   * @param _from address representing the previous owner of the given token ID\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n   */\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n    super.removeTokenFrom(_from, _tokenId);\n\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n    // then delete the last slot.\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n\n    ownedTokens[_from][tokenIndex] = lastToken;\n    // This also deletes the contents at the last position of the array\n    ownedTokens[_from].length--;\n\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n\n    ownedTokensIndex[_tokenId] = 0;\n    ownedTokensIndex[lastToken] = tokenIndex;\n  }\n\n  /**\n   * @dev Internal function to mint a new token\n   * Reverts if the given token ID already exists\n   * @param _to address the beneficiary that will own the minted token\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n   */\n  function _mint(address _to, uint256 _tokenId) internal {\n    super._mint(_to, _tokenId);\n\n    allTokensIndex[_tokenId] = allTokens.length;\n    allTokens.push(_tokenId);\n  }\n\n  /**\n   * @dev Internal function to burn a specific token\n   * Reverts if the token does not exist\n   * @param _owner owner of the token to burn\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n   */\n  function _burn(address _owner, uint256 _tokenId) internal {\n    super._burn(_owner, _tokenId);\n\n    // Clear metadata (if any)\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\n      delete tokenURIs[_tokenId];\n    }\n\n    // Reorg all tokens array\n    uint256 tokenIndex = allTokensIndex[_tokenId];\n    uint256 lastTokenIndex = allTokens.length.sub(1);\n    uint256 lastToken = allTokens[lastTokenIndex];\n\n    allTokens[tokenIndex] = lastToken;\n    allTokens[lastTokenIndex] = 0;\n\n    allTokens.length--;\n    allTokensIndex[_tokenId] = 0;\n    allTokensIndex[lastToken] = tokenIndex;\n  }\n\n}\n\ncontract TokenAuction is TokenAuctionBase, Pausable  {\n    \n    /// @dev The ERC-165 interface signature for ERC-721.\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x80ac58cd);\n\n    /// @dev Constructor creates a reference to the NFT ownership contract\n    ///  and verifies the owner cut is in the valid range.\n    /// @param _nftAddress - address of a deployed contract implementing\n    ///  the Nonfungible Interface.\n    /// @param _cut - percent cut the owner takes on each auction, must be\n    ///  between 0-10,000.\n    constructor (address _nftAddress, uint256 _cut) public  {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n        ERC165 testContract = ERC165(_nftAddress);\n        require(testContract.supportsInterface(InterfaceSignature_ERC721));\n        ERC721Basic candidateContract = ERC721Basic(_nftAddress);       \n        nonFungibleContract = candidateContract;\n    }\n\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\n    ///  as well as any Ether sent directly to the contract address.\n    ///  Always transfers to the NFT contract, but can be called either by\n    ///  the owner or the NFT contract.\n    function withdrawContractBalance(address payable recipient_address) external {\n        address nftAddress = address(nonFungibleContract);\n        require(recipient_address==nftAddress);\n\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n\n        require (address(this).balance - totalPendingAmount > 0, \"no fund\");\n        // We are using this boolean method to make sure that even if one fails it will still work\n        recipient_address.transfer(address(this).balance - totalPendingAmount);\n    }\n\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _minPrice - minimum price of auction.  \n    /// @param _duration - Length of time to move between starting\n    ///  price and ending price (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _minPrice, \n        uint256 _duration,\n        address _seller\n    )\n        external\n        whenNotPaused\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_minPrice == uint256(uint128(_minPrice)));      \n        require(_duration == uint256(uint64(_duration)));\n        require(_owns(msg.sender, _tokenId));\n        _createAuction(_tokenId, _minPrice, _duration, _seller);\n    }\n\n    function _createAuction(\n        uint256 _tokenId,\n        uint256 _minPrice, \n        uint256 _duration,\n        address _seller\n    ) internal {\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction =  Auction(\n            _seller,\n            uint128(_minPrice),         \n            uint64(_duration),\n            uint64(now),\n            0,\n            address(0)\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Bids on an open auction, completing the auction and transferring\n    ///  ownership of the NFT if enough Ether is supplied.\n    /// @param _tokenId - ID of token to bid on.\n    function bid(uint256 _tokenId)\n        external\n        payable\n        whenNotPaused\n    {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_tokenId, msg.value);\n       \n    }\n\n    /// @dev Cancels an auction that hasn't been won yet.\n    ///  Returns the NFT to original owner.\n    /// @notice This is a state-modifying function that can\n    ///  be called while the contract is paused.\n    /// @param _tokenId - ID of token on auction\n    function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isAuctionActive(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        \n        if (auction.highestPrice != 0){\n            _deposit(auction.highestBidder, auction.highestPrice, 4);    \n            auction.startedAt = 0;\n            auction.highestPrice = 0;      \n        }\n        _cancelAuction(_tokenId, seller);\n    }\n\n    /// @dev Cancels an auction when the contract is paused.\n    ///  Only the owner may do this, and NFTs are returned to\n    ///  the seller. This should only be used in emergencies.\n    /// @param _tokenId - ID of the NFT on auction to cancel.\n    function cancelAuctionWhenPaused(uint256 _tokenId)\n        whenPaused\n        onlyOwner\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        \n        if (auction.highestPrice != 0){\n            _deposit(auction.highestBidder, auction.highestPrice, 4);   \n            auction.startedAt = 0;\n            auction.highestPrice = 0;           \n        }\n        _cancelAuction(_tokenId, auction.seller);\n    }\n\n    /// @dev Returns auction info for an NFT on auction.\n    /// @param _tokenId - ID of NFT on auction.\n    function getAuction(uint256 _tokenId)\n        external\n        view\n        returns\n    (\n        address seller,\n        uint256 minPrice,     \n        uint256 duration,\n        uint256 startedAt,\n        uint256 highestPrice,\n        address highestBidder\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.minPrice,\n            auction.duration,         \n            auction.startedAt,\n            auction.highestPrice,\n            auction.highestBidder\n        );\n    }\n\n    function concludeAuction(uint256 _tokenId) public {\n      \n        Auction storage auction = tokenIdToAuction[_tokenId];\n        uint256 sellerProceeds = _concludeAuction(_tokenId);\n\n        if (totalPendingAmount > sellerProceeds) {\n            totalPendingAmount -= sellerProceeds;\n        }else{\n            totalPendingAmount = 0;\n        }\n\n        if (sellerProceeds > 0) {\n            _transfer(auction.highestBidder, _tokenId);\n            _deposit(auction.seller, sellerProceeds, 3);\n        } else {\n             _transfer(auction.seller, _tokenId);\n             _deposit(auction.highestBidder, auction.highestPrice, 4);\n        }    \n        auction.startedAt = 0;\n        _removeAuction(_tokenId);     \n    }\n\n   \n\n}\n\ncontract ERC721WithState is ERC721BasicToken {\n    mapping (uint256 => uint8) internal tokenState;\n\n    event TokenStateSet(uint256 indexed _tokenId,  uint8 _state);\n\n    function setTokenState(uint256  _tokenId,  uint8 _state) public  {\n        require(isApprovedOrOwner(msg.sender, _tokenId));\n        require(exists(_tokenId)); \n        tokenState[_tokenId] = _state;      \n        emit TokenStateSet(_tokenId, _state);\n    }\n\n    function getTokenState(uint256  _tokenId) public view returns (uint8){\n        require(exists(_tokenId));\n        return tokenState[_tokenId];\n    } \n\n\n}\ncontract RetroArt is ERC721Token, Ownable, Withdrawable, ERC721WithState {\n    \n    address public stemTokenContractAddress; \n    uint256 public currentPrice;\n    uint256 constant initiailPrice = 0.03 ether;\n    //new asset price increase at the rate that determined by the variable below\n    //it is caculated from the current price + (current price / ( price rate * totalTokens / slowDownRate ))\n    uint public priceRate = 10;\n    uint public slowDownRate = 7;\n    //Commission will be charged if a profit is made\n    //Commission is the pure profit / profit Commission  \n    // measured in basis points (1/100 of a percent) \n    // Values 0-10,000 map to 0%-100%\n    uint public profitCommission = 500;\n\n    //the referral percentage of the commission of selling of aset\n    // measured in basis points (1/100 of a percent) \n    // Values 0-10,000 map to 0%-100%\n    uint public referralCommission = 3000;\n\n    //share will be given to all tokens equally if a new asset is acquired. \n    //the amount of total shared value is assetValue/sharePercentage   \n    // measured in basis points (1/100 of a percent) \n    // Values 0-10,000 map to 0%-100%\n    uint public sharePercentage = 3000;\n\n    //number of shares for acquiring new asset. \n    uint public numberOfShares = 10;\n\n    string public uriPrefix =\"\";\n\n\n    // Mapping from owner to list of owned token IDs\n    mapping (uint256 => string) internal tokenTitles;\n    mapping (uint256 => RecordKeeping.priceRecord) internal initialPriceRecords;\n    mapping (uint256 => RecordKeeping.priceRecord) internal lastPriceRecords;\n    mapping (uint256 => uint256) internal currentTokenPrices;\n\n\n    event AssetAcquired(address indexed _owner, uint256 indexed _tokenId, string  _title, uint256 _price);\n    event TokenPriceSet(uint256 indexed _tokenId,  uint256 _price);\n    event TokenBrought(address indexed _from, address indexed _to, uint256 indexed _tokenId, uint256 _price);\n    event PriceRateChanged(uint _priceRate);\n    event SlowDownRateChanged(uint _slowDownRate);\n    event ProfitCommissionChanged(uint _profitCommission);\n    event MintPriceChanged(uint256 _price);\n    event SharePercentageChanged(uint _sharePercentage);\n    event NumberOfSharesChanged(uint _numberOfShares);\n    event ReferralCommissionChanged(uint _referralCommission);\n    event Burn(address indexed _owner, uint256 _tokenId);\n\n   \n\n    bytes4 private constant InterfaceId_RetroArt = 0x94fb30be;\n    /*\n    bytes4(keccak256(\"buyTokenFrom(address,address,uint256)\"))^\n    bytes4(keccak256(\"setTokenPrice(uint256,uint256)\"))^\n    bytes4(keccak256(\"setTokenState(uint256,uint8)\"))^\n    bytes4(keccak256(\"getTokenState(uint256)\"));\n    */\n\n    address[] internal auctionContractAddresses;\n \n   \n\n    function tokenTitle(uint256 _tokenId) public view returns (string memory) {\n        require(exists(_tokenId));\n        return tokenTitles[_tokenId];\n    }\n    function lastPriceOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  lastPriceRecords[_tokenId].price;\n    }   \n\n    function lastTransactionTimeOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  lastPriceRecords[_tokenId].timestamp;\n    }\n\n    function firstPriceOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  initialPriceRecords[_tokenId].price;\n    }   \n    function creatorOf(uint256 _tokenId) public view returns (address) {\n        require(exists(_tokenId));\n        return  initialPriceRecords[_tokenId].owner;\n    }\n    function firstTransactionTimeOf(uint256 _tokenId) public view returns (uint256) {\n        require(exists(_tokenId));\n        return  initialPriceRecords[_tokenId].timestamp;\n    }\n    \n  \n    //problem with current web3.js that can't return an array of struct\n    function lastHistoryOf(uint256 _tokenId) internal view returns (RecordKeeping.priceRecord storage) {\n        require(exists(_tokenId));\n        return lastPriceRecords[_tokenId];\n    }\n\n    function firstHistoryOf(uint256 _tokenId) internal view returns (RecordKeeping.priceRecord storage) {\n        require(exists(_tokenId)); \n        return   initialPriceRecords[_tokenId];\n    }\n\n    function setPriceRate(uint _priceRate) public onlyOwner {\n        priceRate = _priceRate;\n        emit PriceRateChanged(priceRate);\n    }\n\n    function setSlowDownRate(uint _slowDownRate) public onlyOwner {\n        slowDownRate = _slowDownRate;\n        emit SlowDownRateChanged(slowDownRate);\n    }\n \n    function setprofitCommission(uint _profitCommission) public onlyOwner {\n        require(_profitCommission <= 10000);\n        profitCommission = _profitCommission;\n        emit ProfitCommissionChanged(profitCommission);\n    }\n\n    function setSharePercentage(uint _sharePercentage) public onlyOwner  {\n        require(_sharePercentage <= 10000);\n        sharePercentage = _sharePercentage;\n        emit SharePercentageChanged(sharePercentage);\n    }\n\n    function setNumberOfShares(uint _numberOfShares) public onlyOwner  {\n        numberOfShares = _numberOfShares;\n        emit NumberOfSharesChanged(numberOfShares);\n    }\n\n    function setReferralCommission(uint _referralCommission) public onlyOwner  {\n        require(_referralCommission <= 10000);\n        referralCommission = _referralCommission;\n        emit ReferralCommissionChanged(referralCommission);\n    }\n\n    function setUriPrefix(string memory _uri) public onlyOwner  {\n       uriPrefix = _uri;\n    }\n  \n    //use the token name, symbol as usual\n    //this contract create another ERC20 as stemToken,\n    //the constructure takes the stemTokenName and stemTokenSymbol\n\n    constructor(string memory _name, string memory _symbol , address _stemTokenAddress) \n        ERC721Token(_name, _symbol) Ownable() public {\n       \n        currentPrice = initiailPrice;\n        stemTokenContractAddress = _stemTokenAddress;\n        _registerInterface(InterfaceId_RetroArt);\n    }\n\n    function getAllAssets() public view returns (uint256[] memory){\n        return allTokens;\n    }\n\n    function getAllAssetsForSale() public view returns  (uint256[] memory){\n      \n        uint arrayLength = allTokens.length;\n        uint forSaleCount = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0) {\n                forSaleCount++;              \n            }\n        }\n        \n        uint256[] memory tokensForSale = new uint256[](forSaleCount);\n\n        uint j = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0) {                \n                tokensForSale[j] = allTokens[i];\n                j++;\n            }\n        }\n\n        return tokensForSale;\n    }\n\n    function getAssetsForSale(address _owner) public view returns (uint256[] memory) {\n      \n        uint arrayLength = allTokens.length;\n        uint forSaleCount = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0 && tokenOwner[allTokens[i]] == _owner) {\n                forSaleCount++;              \n            }\n        }\n        \n        uint256[] memory tokensForSale = new uint256[](forSaleCount);\n\n        uint j = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (currentTokenPrices[allTokens[i]] > 0 && tokenOwner[allTokens[i]] == _owner) {                \n                tokensForSale[j] = allTokens[i];\n                j++;\n            }\n        }\n\n        return tokensForSale;\n    }\n\n    function getAssetsByState(uint8 _state) public view returns (uint256[] memory){\n        \n        uint arrayLength = allTokens.length;\n        uint matchCount = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (tokenState[allTokens[i]] == _state) {\n                matchCount++;              \n            }\n        }\n        \n        uint256[] memory matchedTokens = new uint256[](matchCount);\n\n        uint j = 0;\n        for (uint i = 0; i<arrayLength; i++) {\n            if (tokenState[allTokens[i]] == _state) {                \n                matchedTokens[j] = allTokens[i];\n                j++;\n            }\n        }\n\n        return matchedTokens;\n    }\n      \n\n    function acquireAsset(uint256 _tokenId, string memory _title) public payable{\n        acquireAssetWithReferral(_tokenId, _title, address(0));\n    }\n\n    function acquireAssetFromStemToken(address _tokenOwner, uint256 _tokenId, string calldata _title) external {     \n         require(msg.sender == stemTokenContractAddress);\n        _acquireAsset(_tokenId, _title, _tokenOwner, 0);\n    }\n\n    function acquireAssetWithReferral(uint256 _tokenId, string memory _title, address referralAddress) public payable{\n        require(msg.value >= currentPrice);\n        \n        uint totalShares = numberOfShares;\n        if (referralAddress != address(0)) totalShares++;\n\n        uint numberOfTokens = allTokens.length;\n     \n        if (numberOfTokens > 0 && sharePercentage > 0) {\n\n            uint256 perShareValue = 0;\n            uint256 totalShareValue = msg.value * sharePercentage / 10000 ;\n\n            if (totalShares > numberOfTokens) {\n                               \n                if (referralAddress != address(0)) \n                    perShareValue = totalShareValue / (numberOfTokens + 1);\n                else\n                    perShareValue = totalShareValue / numberOfTokens;\n            \n                for (uint i = 0; i < numberOfTokens; i++) {\n                    //turn off events if there are too many tokens in the loop\n                    if (numberOfTokens > 100) {\n                        _depositWithoutEvent(tokenOwner[allTokens[i]], perShareValue);\n                    }else{\n                        _deposit(tokenOwner[allTokens[i]], perShareValue, 2);\n                    }\n                }\n                \n            }else{\n               \n                if (referralAddress != address(0)) \n                    perShareValue = totalShareValue / (totalShares + 1);\n                else\n                    perShareValue = totalShareValue / totalShares;\n              \n                uint[] memory randomArray = random(numberOfShares);\n\n                for (uint i = 0; i < numberOfShares; i++) {\n                    uint index = randomArray[i] % numberOfTokens;\n\n                    if (numberOfShares > 100) {\n                        _depositWithoutEvent(tokenOwner[allTokens[index]], perShareValue);\n                    }else{\n                        _deposit(tokenOwner[allTokens[index]], perShareValue, 2);\n                    }\n                }\n            }\n                    \n            if (referralAddress != address(0) && perShareValue > 0) _deposit(referralAddress, perShareValue, 5);\n\n        }\n\n        _acquireAsset(_tokenId, _title, msg.sender, msg.value);\n     \n    }\n\n    function _acquireAsset(uint256 _tokenId, string memory _title, address _purchaser, uint256 _value) internal {\n        \n        currentPrice = CalculateNextPrice();\n        _mint(_purchaser, _tokenId);        \n      \n        tokenTitles[_tokenId] = _title;\n       \n        RecordKeeping.priceRecord memory pr = RecordKeeping.priceRecord(_value, _purchaser, block.timestamp);\n        initialPriceRecords[_tokenId] = pr;\n        lastPriceRecords[_tokenId] = pr;     \n\n        emit AssetAcquired(_purchaser,_tokenId, _title, _value);\n        emit TokenBrought(address(0), _purchaser, _tokenId, _value);\n        emit MintPriceChanged(currentPrice);\n    }\n\n    function CalculateNextPrice() public view returns (uint256){      \n        return currentPrice + currentPrice * slowDownRate / ( priceRate * (allTokens.length + 2));\n    }\n\n    function tokensOf(address _owner) public view returns (uint256[] memory){\n        return ownedTokens[_owner];\n    }\n\n    function _buyTokenFromWithReferral(address _from, address _to, uint256 _tokenId, address referralAddress, address _depositTo) internal {\n        require(currentTokenPrices[_tokenId] != 0);\n        require(msg.value >= currentTokenPrices[_tokenId]);\n        \n        tokenApprovals[_tokenId] = _to;\n        safeTransferFrom(_from,_to,_tokenId);\n\n        uint256 valueTransferToOwner = msg.value;\n        uint256 lastRecordPrice = lastPriceRecords[_tokenId].price;\n        if (msg.value >  lastRecordPrice){\n            uint256 profit = msg.value - lastRecordPrice;           \n            uint256 commission = profit * profitCommission / 10000;\n            valueTransferToOwner = msg.value - commission;\n            if (referralAddress != address(0)){\n                _deposit(referralAddress, commission * referralCommission / 10000, 5);\n            }           \n        }\n        \n        if (valueTransferToOwner > 0) _deposit(_depositTo, valueTransferToOwner, 1);\n        writePriceRecordForAssetSold(_depositTo, msg.sender, _tokenId, msg.value);\n        \n    }\n\n    function buyTokenFromWithReferral(address _from, address _to, uint256 _tokenId, address referralAddress) public payable {\n        _buyTokenFromWithReferral(_from, _to, _tokenId, referralAddress, _from);        \n    }\n\n    function buyTokenFrom(address _from, address _to, uint256 _tokenId) public payable {\n        buyTokenFromWithReferral(_from, _to, _tokenId, address(0));        \n    }   \n\n    function writePriceRecordForAssetSold(address _from, address _to, uint256 _tokenId, uint256 _value) internal {\n       RecordKeeping.priceRecord memory pr = RecordKeeping.priceRecord(_value, _to, block.timestamp);\n       lastPriceRecords[_tokenId] = pr;\n       \n       tokenApprovals[_tokenId] = address(0);\n       currentTokenPrices[_tokenId] = 0;\n       emit TokenBrought(_from, _to, _tokenId, _value);       \n    }\n\n    function recordAuctionPriceRecord(address _from, address _to, uint256 _tokenId, uint256 _value)\n       external {\n\n       require(findAuctionContractIndex(msg.sender) >= 0); //make sure the sender is from one of the auction addresses\n       writePriceRecordForAssetSold(_from, _to, _tokenId, _value);\n\n    }\n\n    function setTokenPrice(uint256 _tokenId, uint256 _newPrice) public  {\n        require(isApprovedOrOwner(msg.sender, _tokenId));\n        currentTokenPrices[_tokenId] = _newPrice;\n        emit TokenPriceSet(_tokenId, _newPrice);\n    }\n\n    function getTokenPrice(uint256 _tokenId)  public view returns(uint256) {\n        return currentTokenPrices[_tokenId];\n    }\n\n    function random(uint num) private view returns (uint[] memory) {\n        \n        uint base = uint(keccak256(abi.encodePacked(block.difficulty, now, tokenOwner[allTokens[allTokens.length-1]])));\n        uint[] memory randomNumbers = new uint[](num);\n        \n        for (uint i = 0; i<num; i++) {\n            randomNumbers[i] = base;\n            base = base * 2 ** 3;\n        }\n        return  randomNumbers;\n        \n    }\n\n\n    function getAsset(uint256 _tokenId)  external\n        view\n        returns\n    (\n        string memory title,            \n        address owner,     \n        address creator,      \n        uint256 currentTokenPrice,\n        uint256 lastPrice,\n        uint256 initialPrice,\n        uint256 lastDate,\n        uint256 createdDate\n    ) {\n        require(exists(_tokenId));\n        RecordKeeping.priceRecord memory lastPriceRecord = lastPriceRecords[_tokenId];\n        RecordKeeping.priceRecord memory initialPriceRecord = initialPriceRecords[_tokenId];\n\n        return (\n             \n            tokenTitles[_tokenId],        \n            tokenOwner[_tokenId],   \n            initialPriceRecord.owner,           \n            currentTokenPrices[_tokenId],      \n            lastPriceRecord.price,           \n            initialPriceRecord.price,\n            lastPriceRecord.timestamp,\n            initialPriceRecord.timestamp\n        );\n    }\n\n    function getAssetUpdatedInfo(uint256 _tokenId) external\n        view\n        returns\n    (         \n        address owner, \n        address approvedAddress,\n        uint256 currentTokenPrice,\n        uint256 lastPrice,      \n        uint256 lastDate\n      \n    ) {\n        require(exists(_tokenId));\n        RecordKeeping.priceRecord memory lastPriceRecord = lastPriceRecords[_tokenId];\n     \n        return (\n            tokenOwner[_tokenId],   \n            tokenApprovals[_tokenId],  \n            currentTokenPrices[_tokenId],      \n            lastPriceRecord.price,   \n            lastPriceRecord.timestamp           \n        );\n    }\n\n    function getAssetStaticInfo(uint256 _tokenId)  external\n        view\n        returns\n    (\n        string memory title,            \n        string memory tokenURI,    \n        address creator,            \n        uint256 initialPrice,       \n        uint256 createdDate\n    ) {\n        require(exists(_tokenId));      \n        RecordKeeping.priceRecord memory initialPriceRecord = initialPriceRecords[_tokenId];\n\n        return (\n             \n            tokenTitles[_tokenId],        \n            tokenURIs[_tokenId],\n            initialPriceRecord.owner,\n            initialPriceRecord.price,         \n            initialPriceRecord.timestamp\n        );\n         \n    }\n\n    function burnExchangeToken(address _tokenOwner, uint256 _tokenId) external  {\n        require(msg.sender == stemTokenContractAddress);       \n        _burn(_tokenOwner, _tokenId);       \n        emit Burn(_tokenOwner, _tokenId);\n    }\n\n    function findAuctionContractIndex(address _addressToFind) public view returns (int)  {\n        \n        for (int i = 0; i < int(auctionContractAddresses.length); i++){\n            if (auctionContractAddresses[uint256(i)] == _addressToFind){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function addAuctionContractAddress(address _auctionContractAddress) public onlyOwner {\n        require(findAuctionContractIndex(_auctionContractAddress) == -1);\n        auctionContractAddresses.push(_auctionContractAddress);\n    }\n\n    function removeAuctionContractAddress(address _auctionContractAddress) public onlyOwner {\n        int index = findAuctionContractIndex(_auctionContractAddress);\n        require(index >= 0);        \n\n        for (uint i = uint(index); i < auctionContractAddresses.length-1; i++){\n            auctionContractAddresses[i] = auctionContractAddresses[i+1];         \n        }\n        auctionContractAddresses.length--;\n    }\n\n    function setStemTokenContractAddress(address _stemTokenContractAddress) public onlyOwner {        \n        stemTokenContractAddress = _stemTokenContractAddress;\n    }          \n   \n\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\n        require(exists(_tokenId));   \n        return string(abi.encodePacked(uriPrefix, uint256ToString(_tokenId)));\n\n    }\n    // Functions used for generating the URI\n    function amountOfZeros(uint256 num, uint256 base) public pure returns(uint256){\n        uint256 result = 0;\n        num /= base;\n        while (num > 0){\n            num /= base;\n            result += 1;\n        }\n        return result;\n    }\n\n      function uint256ToString(uint256 num) public pure returns(string memory){\n        if (num == 0){\n            return \"0\";\n        }\n        uint256 numLen = amountOfZeros(num, 10) + 1;\n        bytes memory result = new bytes(numLen);\n        while(num != 0){\n            numLen -= 1;\n            result[numLen] = byte(uint8((num - (num / 10 * 10)) + 48));\n            num /= 10;\n        }\n        return string(result);\n    }\n\n    //  function initialImport(uint256[] memory _tokenIds,\n    //                         uint256[] memory _lastPrices, address[] memory _owners, uint256[] memory _lastDates,\n    //                         uint256[] memory _initialPrices, address[] memory _creators, uint256[] memory _initialDates,\n    //                         string[] memory _titles ) public onlyOwner {\n    \n    //     require( _tokenIds.length == _lastPrices.length &&\n    //             _tokenIds.length == _owners.length &&\n    //             _tokenIds.length == _lastDates.length &&\n    //             _tokenIds.length == _initialPrices.length &&\n    //             _tokenIds.length == _creators.length &&\n    //             _tokenIds.length == _initialDates.length &&\n    //             _tokenIds.length == _titles.length \n    //             );\n\n    //     for (uint i = 0; i < _tokenIds.length; i++){\n\n    //         allTokensIndex[_tokenIds[i]] = allTokens.length;\n    //         allTokens.push(_tokenIds[i]);\n\n    //         tokenTitles[_tokenIds[i]] = _titles[i];\n\n    //         addTokenTo(_owners[i],_tokenIds[i]);\n\n    //         RecordKeeping.priceRecord memory prInitial = RecordKeeping.priceRecord(_initialPrices[i], _creators[i], _initialDates[i]);\n    //         initialPriceRecords[_tokenIds[i]] = prInitial;      \n\n    //         RecordKeeping.priceRecord memory prLast = RecordKeeping.priceRecord(_lastPrices[i], _owners[i], _lastDates[i]);\n    //         lastPriceRecords[_tokenIds[i]] = prLast;  \n\n               \n\n    //     }\n    // }\n}\n\n\ncontract RetroArtTokenAuction is TokenAuction {\n\n   \n    // Delegate constructor\n    constructor (address _nftAddr, uint256 _cut) public TokenAuction(_nftAddr, _cut) {}\n\n    event ownerCutChanged(uint256 _ownerCut);\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _minPrice - minimum price of auction.  \n    /// @param _duration - Length of time to move between starting\n    ///  price and ending price (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _minPrice, \n        uint256 _duration,\n        address _seller\n    )\n        external\n        whenNotPaused\n    {\n        require(_minPrice == uint256(uint128(_minPrice)));      \n        require(_duration == uint256(uint64(_duration)));\n        require(_owns(msg.sender, _tokenId));\n\n        super._createAuction(_tokenId, _minPrice, _duration, _seller);\n\n        address nonFungibleContractAddress = address(nonFungibleContract);\n        ERC165 nftContract = ERC165(nonFungibleContractAddress);\n        //bytes4 public constant InterfaceSignature_RetroArt = 0x94fb30be;\n        if (nftContract.supportsInterface(0x94fb30be)) {\n          \n            RetroArt retroArt = RetroArt(nonFungibleContractAddress);\n            //state 2 is onAuction\n            retroArt.setTokenState(_tokenId,2);    \n        }\n    }\n\n    /// @dev Removes an auction from the list of open auctions.\n    /// @param _tokenId - ID of NFT on auction.\n    function _removeAuction(uint256 _tokenId) internal {\n\n        delete tokenIdToAuction[_tokenId];\n\n        address nonFungibleContractAddress = address(nonFungibleContract);\n        ERC165 nftContract = ERC165(nonFungibleContractAddress);\n        //bytes4 public constant InterfaceSignature_RetroArt = 0x94fb30be;\n        if (nftContract.supportsInterface(0x94fb30be)) {\n          \n            RetroArt retroArt = RetroArt(nonFungibleContractAddress);\n            //state 0 is the original state\n            retroArt.setTokenState(_tokenId,0);    \n        }\n    }\n\n\n    function concludeAuction(uint256 _tokenId) public {\n        //todo: should it check who has permission to call this function?\n     \n        address nonFungibleContractAddress = address(nonFungibleContract);\n        ERC165 nftContract = ERC165(nonFungibleContractAddress);\n        \n        Auction memory auction = tokenIdToAuction[_tokenId];\n        uint256 sellerProceeds = _concludeAuction(_tokenId); \n\n        if (auction.highestPrice > 0){\n            if (totalPendingAmount > auction.highestPrice) {\n                totalPendingAmount -= auction.highestPrice;\n            }else{\n                totalPendingAmount = 0;\n            }      \n        }\n     \n        _removeAuction(_tokenId);      \n        \n        //bytes4 public constant InterfaceSignature_RetroArt = 0x94fb30be;\n\n        if (sellerProceeds > 0) {\n            _transfer(auction.highestBidder, _tokenId);\n            _deposit(auction.seller, sellerProceeds, 3);\n\n            if (nftContract.supportsInterface(0x94fb30be)) {           \n                RetroArt retroArt = RetroArt(nonFungibleContractAddress);             \n                retroArt.recordAuctionPriceRecord(auction.seller, auction.highestBidder, _tokenId, sellerProceeds);\n            }\n        }  \n        \n        if (sellerProceeds == 0){\n            _transfer(auction.seller, _tokenId);\n            if ( auction.highestPrice > 0 && auction.highestBidder != address(0))  _deposit(auction.highestBidder, auction.highestPrice, 4);\n        }\n        \n       // auction.startedAt = 0;\n  \n        \n    }\n\n       /// @dev Returns auction info for an NFT on auction.\n    /// @param _tokenId - ID of NFT on auction.\n    function getAuction(uint256 _tokenId)\n        external\n        view\n        returns\n    (\n        address seller,\n        uint256 minPrice,     \n        uint256 duration,\n        uint256 startedAt,\n        uint256 highestPrice,\n        address highestBidder\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];     \n        return (\n            auction.seller,\n            auction.minPrice,\n            auction.duration,         \n            auction.startedAt,\n            auction.highestPrice,\n            auction.highestBidder\n        );\n    }\n\n    function setOwnerCut(uint256 _cut) public onlyOwner {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n        emit ownerCutChanged(ownerCut);\n    }\n}",
  "bytecode": "60806040526006805460ff1916905534801561001a57600080fd5b50604051604080611c0f8339810180604052604081101561003a57600080fd5b50805160209091015160008054600160a060020a03191633179055818161271081111561006657600080fd5b6004818155604080517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd0000000000000000000000000000000000000000000000000000000092810192909252518391600160a060020a038316916301ffc9a791602480820192602092909190829003018186803b1580156100ee57600080fd5b505afa158015610102573d6000803e3d6000fd5b505050506040513d602081101561011857600080fd5b5051151561012557600080fd5b505060038054600160a060020a03909216600160a060020a03199092169190911790555050611ab6806101596000396000f3fe60806040526004361061011c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663150b7a0281146101215780633f4ba83a14610229578063454a2ab31461025257806357fbb9df146102715780635c975abb146102a45780636ab3f557146102b9578063715018a6146102ec578063757de5731461030157806378bd79351461032b578063819c9e4c1461039657806383b5ff8b146103db5780638456cb5914610402578063878eb368146104175780638da5cb5b1461044157806396b5a75514610472578063b87613011461049c578063cf2f7adc146104c6578063dd1b7a0f146104db578063f2fde38b146104f0578063f8b2cb4f14610523578063fdf06c2914610556575b600080fd5b34801561012d57600080fd5b506101f46004803603608081101561014457600080fd5b600160a060020a0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561017f57600080fd5b82018360208201111561019157600080fd5b803590602001918460018302840111640100000000831117156101b357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610589945050505050565b604080517fffffffff000000000000000000000000000000000000000000000000000000009092168252519081900360200190f35b34801561023557600080fd5b5061023e6105b2565b604080519115158252519081900360200190f35b61026f6004803603602081101561026857600080fd5b5035610615565b005b34801561027d57600080fd5b5061026f6004803603602081101561029457600080fd5b5035600160a060020a0316610632565b3480156102b057600080fd5b5061023e610730565b3480156102c557600080fd5b5061026f600480360360208110156102dc57600080fd5b5035600160a060020a0316610739565b3480156102f857600080fd5b5061026f610813565b34801561030d57600080fd5b5061026f6004803603602081101561032457600080fd5b503561087f565b34801561033757600080fd5b506103556004803603602081101561034e57600080fd5b50356108e0565b60408051600160a060020a0397881681526020810196909652858101949094526060850192909252608084015290921660a082015290519081900360c00190f35b3480156103a257600080fd5b5061026f600480360360808110156103b957600080fd5b5080359060208101359060408101359060600135600160a060020a0316610949565b3480156103e757600080fd5b506103f0610aeb565b60408051918252519081900360200190f35b34801561040e57600080fd5b5061023e610af1565b34801561042357600080fd5b5061026f6004803603602081101561043a57600080fd5b5035610b55565b34801561044d57600080fd5b50610456610c32565b60408051600160a060020a039092168252519081900360200190f35b34801561047e57600080fd5b5061026f6004803603602081101561049557600080fd5b5035610c41565b3480156104a857600080fd5b5061026f600480360360208110156104bf57600080fd5b5035610cfd565b3480156104d257600080fd5b506103f0610fd8565b3480156104e757600080fd5b50610456610ffa565b3480156104fc57600080fd5b5061026f6004803603602081101561051357600080fd5b5035600160a060020a0316611009565b34801561052f57600080fd5b506103f06004803603602081101561054657600080fd5b5035600160a060020a0316611029565b34801561056257600080fd5b5061026f6004803603602081101561057957600080fd5b5035600160a060020a0316611048565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b60008054600160a060020a031633146105ca57600080fd5b60065460ff1615156105db57600080fd5b6006805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a15060015b90565b60065460ff161561062557600080fd5b61062f81346110aa565b50565b600354600160a060020a03908116908216811461064e57600080fd5b600054600160a060020a031633148061066f575033600160a060020a038216145b151561067a57600080fd5b6002546000303191909103116106f157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f6e6f2066756e6400000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604051600160a060020a0384169130310380156108fc02916000818181858888f1935050505015801561072b573d6000803e3d6000fd5b505050565b60065460ff1681565b33600160a060020a0382161461074e57600080fd5b600160a060020a03811660009081526001602052604081205490811161077357600080fd5b600160a060020a0382166000818152600160205260408082208290556002805485900390555183156108fc0291849190818181858888f193505050501580156107c0573d6000803e3d6000fd5b50604080516000838103825260208201819052818301529051600160a060020a038416917fd42531819f80124cde4ecc43aa387c9096d233d17d863735d0b00f1e98b0dc87919081900360600190a25050565b600054600160a060020a0316331461082a57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a0316331461089657600080fd5b6127108111156108a557600080fd5b60048190556040805182815290517f245998fdefded69e9a8f6a1f76bf125cc1ea82a2346d19bc8384a95c6b9a32439181900360200190a150565b6000908152600560205260409020805460018201546002830154600390930154600160a060020a03928316946001608060020a038084169567ffffffffffffffff700100000000000000000000000000000000860481169660c060020a90960416949116921690565b60065460ff161561095957600080fd5b6001608060020a038316831461096e57600080fd5b67ffffffffffffffff8216821461098457600080fd5b61098e338561121c565b151561099957600080fd5b6109a5848484846112c4565b600354604080517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f94fb30be0000000000000000000000000000000000000000000000000000000060048201529051600160a060020a0390921691829182916301ffc9a791602480820192602092909190829003018186803b158015610a2d57600080fd5b505afa158015610a41573d6000803e3d6000fd5b505050506040513d6020811015610a5757600080fd5b505115610ae357604080517f6f81582b000000000000000000000000000000000000000000000000000000008152600481018890526002602482015290518391600160a060020a03831691636f81582b9160448082019260009290919082900301818387803b158015610ac957600080fd5b505af1158015610add573d6000803e3d6000fd5b50505050505b505050505050565b60045481565b60008054600160a060020a03163314610b0957600080fd5b60065460ff1615610b1957600080fd5b6006805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a150600190565b60065460ff161515610b6657600080fd5b600054600160a060020a03163314610b7d57600080fd5b6000818152600560205260409020610b9481611330565b1515610b9f57600080fd5b60028101546001608060020a031615610c185760038101546002820154610bda91600160a060020a0316906001608060020a0316600461134c565b60018101805477ffffffffffffffffffffffffffffffffffffffffffffffff1690556002810180546fffffffffffffffffffffffffffffffff191690555b8054610c2e908390600160a060020a03166113be565b5050565b600054600160a060020a031681565b6000818152600560205260409020610c5881611400565b1515610c6357600080fd5b8054600160a060020a0316338114610c7a57600080fd5b60028201546001608060020a031615610cf35760038201546002830154610cb591600160a060020a0316906001608060020a0316600461134c565b60018201805477ffffffffffffffffffffffffffffffffffffffffffffffff1690556002820180546fffffffffffffffffffffffffffffffff191690555b61072b83826113be565b600354600160a060020a031680610d12611a55565b506000838152600560209081526040808320815160c0810183528154600160a060020a03908116825260018301546001608060020a038082169684019690965267ffffffffffffffff700100000000000000000000000000000000820481169584019590955260c060020a9004909316606082015260028201549093166080840152600301541660a082015290610da885611459565b9050600082608001516001608060020a03161115610dfb5781608001516001608060020a03166002541115610df5576080820151600280546001608060020a039092169091039055610dfb565b60006002555b610e04856115a9565b6000811115610f7357610e1b8260a001518661173f565b8151610e299082600361134c565b604080517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f94fb30be0000000000000000000000000000000000000000000000000000000060048201529051600160a060020a038516916301ffc9a7916024808301926020929190829003018186803b158015610ea857600080fd5b505afa158015610ebc573d6000803e3d6000fd5b505050506040513d6020811015610ed257600080fd5b505115610f7357815160a0830151604080517f29476c8f000000000000000000000000000000000000000000000000000000008152600160a060020a039384166004820152918316602483015260448201889052606482018490525186928316916329476c8f91608480830192600092919082900301818387803b158015610f5957600080fd5b505af1158015610f6d573d6000803e3d6000fd5b50505050505b801515610fd1578151610f86908661173f565b600082608001516001608060020a0316118015610faf575060a0820151600160a060020a031615155b15610fd157610fd18260a0015183608001516001608060020a0316600461134c565b5050505050565b60025460009030311115610ff25750600254303103610612565b506000610612565b600354600160a060020a031681565b600054600160a060020a0316331461102057600080fd5b61062f816117c7565b600160a060020a0381166000908152600160205260409020545b919050565b600054600160a060020a0316331461105f57600080fd5b6000611069610fd8565b90506000811115610c2e57604051600160a060020a0383169082156108fc029083906000818181858888f1935050505015801561072b573d6000803e3d6000fd5b60008281526005602052604090206110c181611400565b15156110cc57600080fd5b60028101546001608060020a0316821180156110f4575060018101546001608060020a031682115b15156110ff57600080fd5b60028101546001608060020a031615611175576003810154600282015461113a91600160a060020a0316906001608060020a0316600461134c565b60028082015490546001608060020a03909116101561116f5760028082015481546001608060020a0390911690039055611175565b60006002555b600281810180546001608060020a033481166fffffffffffffffffffffffffffffffff199092169190911780835560038501805473ffffffffffffffffffffffffffffffffffffffff19163317815584549183169091019093559154905460408051600160a060020a03909316835292166020820152815185927f6c3c751361bbb5cace323f43c378fc45decb8e2e1366ae4233bf61dcc512ef2f928290030190a2505050565b600354604080517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490529051600092600160a060020a0380871693911691636352211e91602480820192602092909190829003018186803b15801561128757600080fd5b505afa15801561129b573d6000803e3d6000fd5b505050506040513d60208110156112b157600080fd5b5051600160a060020a0316149392505050565b6112ce3385611844565b6112d6611a55565b506040805160c081018252600160a060020a03831681526001608060020a038516602082015267ffffffffffffffff8085169282019290925242909116606082015260006080820181905260a0820152610fd185826118b8565b60010154600060c060020a90910467ffffffffffffffff161190565b600082111561072b5761135f8383611a1f565b600160a060020a0383166000818152600160209081526040918290205482518681529182015260ff84168183015290517fd42531819f80124cde4ecc43aa387c9096d233d17d863735d0b00f1e98b0dc879181900360600190a2505050565b6113c7826115a9565b6113d1818361173f565b60405182907f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df90600090a25050565b600181015460009060c060020a900467ffffffffffffffff16811080156114535750600182015467ffffffffffffffff7001000000000000000000000000000000008204811660c060020a909204164203105b92915050565b600081815260056020526040812061147081611330565b151561147b57600080fd5b600181015467ffffffffffffffff60c060020a8204811642039170010000000000000000000000000000000090041681116114b557600080fd5b600182015460028301546001608060020a0391821691161180156114e85750600282015460006001608060020a03909116115b15611573576002820154600090611507906001608060020a0316611a49565b60028401546003850154604080516001608060020a03909316808452600160a060020a0390921660208401528051939450908490039288927f8f8bb2ffd7fdea48eb5a17d78b4973ff5559b967bf46a2c750942036046fbee992908290030190a2935061104392505050565b60405184907fb5e6cbc8a13a6bedcfd3d4a24613565c9c6d87e4d62d6e92135b8729cd38916190600090a2600092505050611043565b6000818152600560209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19908116825560018201949094556002810180546fffffffffffffffffffffffffffffffff1916905560039081018054909416909355915482517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f94fb30be0000000000000000000000000000000000000000000000000000000060048201529251600160a060020a0390911692839283926301ffc9a7926024808201939291829003018186803b15801561168857600080fd5b505afa15801561169c573d6000803e3d6000fd5b505050506040513d60208110156116b257600080fd5b50511561072b57604080517f6f81582b0000000000000000000000000000000000000000000000000000000081526004810185905260006024820181905291518492600160a060020a03841692636f81582b926044808301939282900301818387803b15801561172157600080fd5b505af1158015611735573d6000803e3d6000fd5b5050505050505050565b600354604080517f42842e0e000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a03858116602483015260448201859052915191909216916342842e0e91606480830192600092919082900301818387803b1580156117b357600080fd5b505af1158015610ae3573d6000803e3d6000fd5b600160a060020a03811615156117dc57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600354604080517f42842e0e000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015230602483015260448201859052915191909216916342842e0e91606480830192600092919082900301818387803b1580156117b357600080fd5b603c816040015167ffffffffffffffff16101515156118d657600080fd5b6000828152600560209081526040918290208351815473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03928316178355858401516001840180548888015160608a01516fffffffffffffffffffffffffffffffff199283166001608060020a0395861690811777ffffffffffffffff00000000000000000000000000000000191670010000000000000000000000000000000067ffffffffffffffff9485169081029190911777ffffffffffffffffffffffffffffffffffffffffffffffff1660c060020a94909316939093029190911790935560808a0151600288018054909316941693909317905560a08801516003909501805490931694909316939093179055835190815291820152815184927f6fd490b931712b637c655f609b6744971d6902d00d0cd2cd545892f57ea2c0fd928290030190a25050565b600160a060020a039091166000908152600160205260409020805482019055600280549091019055565b60045461271091020490565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091529056fea165627a7a72305820c73334f6299aebdc01889161e3ded7467aaefd8be36c2052a9631de3458049940029000000000000000000000000f155559e016ce2ece37b22d1bfeb62a24bc7690f00000000000000000000000000000000000000000000000000000000000001f4",
  "constructorArguments": "000000000000000000000000f155559e016ce2ece37b22d1bfeb62a24bc7690f00000000000000000000000000000000000000000000000000000000000001f4"
}