{
  "address": "0x2467aa6b5a2351416fd4c3def8462d841feeecec",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "QiibeeToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-12-21\n*/\n\npragma solidity ^0.4.13;\n\nlibrary Math {\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract LimitedTransferToken is ERC20 {\n\n  /**\n   * @dev Checks whether it can transfer or otherwise throws.\n   */\n  modifier canTransfer(address _sender, uint256 _value) {\n   require(_value <= transferableTokens(_sender, uint64(now)));\n   _;\n  }\n\n  /**\n   * @dev Checks modifier and allows transfer if tokens are not locked.\n   * @param _to The address that will receive the tokens.\n   * @param _value The amount of tokens to be transferred.\n   */\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  /**\n  * @dev Checks modifier and allows transfer if tokens are not locked.\n  * @param _from The address that will send the tokens.\n  * @param _to The address that will receive the tokens.\n  * @param _value The amount of tokens to be transferred.\n  */\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  /**\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n   * specific logic for limiting token transferability for a holder over time.\n   */\n  function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n    return balanceOf(holder);\n  }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n\n    uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(0x0, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n}\n\ncontract VestedToken is StandardToken, LimitedTransferToken {\n\n  uint256 MAX_GRANTS_PER_ADDRESS = 20;\n\n  struct TokenGrant {\n    address granter;     // 20 bytes\n    uint256 value;       // 32 bytes\n    uint64 cliff;\n    uint64 vesting;\n    uint64 start;        // 3 * 8 = 24 bytes\n    bool revokable;\n    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\n  } // total 78 bytes = 3 sstore per operation (32 per sstore)\n\n  mapping (address => TokenGrant[]) public grants;\n\n  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\n\n  /**\n   * @dev Grant tokens to a specified address\n   * @param _to address The address which the tokens will be granted to.\n   * @param _value uint256 The amount of tokens to be granted.\n   * @param _start uint64 Time of the beginning of the grant.\n   * @param _cliff uint64 Time of the cliff period.\n   * @param _vesting uint64 The vesting period.\n   */\n  function grantVestedTokens(\n    address _to,\n    uint256 _value,\n    uint64 _start,\n    uint64 _cliff,\n    uint64 _vesting,\n    bool _revokable,\n    bool _burnsOnRevoke\n  ) public {\n\n    // Check for date inconsistencies that may cause unexpected behavior\n    require(_cliff >= _start && _vesting >= _cliff);\n\n    require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n\n    uint256 count = grants[_to].push(\n                TokenGrant(\n                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\n                  _value,\n                  _cliff,\n                  _vesting,\n                  _start,\n                  _revokable,\n                  _burnsOnRevoke\n                )\n              );\n\n    transfer(_to, _value);\n\n    NewTokenGrant(msg.sender, _to, _value, count - 1);\n  }\n\n  /**\n   * @dev Revoke the grant of tokens of a specifed address.\n   * @param _holder The address which will have its tokens revoked.\n   * @param _grantId The id of the token grant.\n   */\n  function revokeTokenGrant(address _holder, uint256 _grantId) public {\n    TokenGrant storage grant = grants[_holder][_grantId];\n\n    require(grant.revokable);\n    require(grant.granter == msg.sender); // Only granter can revoke it\n\n    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n\n    uint256 nonVested = nonVestedTokens(grant, uint64(now));\n\n    // remove grant from array\n    delete grants[_holder][_grantId];\n    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\n    grants[_holder].length -= 1;\n\n    balances[receiver] = balances[receiver].add(nonVested);\n    balances[_holder] = balances[_holder].sub(nonVested);\n\n    Transfer(_holder, receiver, nonVested);\n  }\n\n\n  /**\n   * @dev Calculate the total amount of transferable tokens of a holder at a given time\n   * @param holder address The address of the holder\n   * @param time uint64 The specific time.\n   * @return An uint256 representing a holder's total amount of transferable tokens.\n   */\n  function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n    uint256 grantIndex = tokenGrantsCount(holder);\n\n    if (grantIndex == 0) return super.transferableTokens(holder, time); // shortcut for holder without grants\n\n    // Iterate through all the grants the holder has, and add all non-vested tokens\n    uint256 nonVested = 0;\n    for (uint256 i = 0; i < grantIndex; i++) {\n      nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\n    }\n\n    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n    uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\n\n    // Return the minimum of how many vested can transfer and other value\n    // in case there are other limiting transferability factors (default is balanceOf)\n    return Math.min256(vestedTransferable, super.transferableTokens(holder, time));\n  }\n\n  /**\n   * @dev Check the amount of grants that an address has.\n   * @param _holder The holder of the grants.\n   * @return A uint256 representing the total amount of grants.\n   */\n  function tokenGrantsCount(address _holder) public constant returns (uint256 index) {\n    return grants[_holder].length;\n  }\n\n  /**\n   * @dev Calculate amount of vested tokens at a specific time\n   * @param tokens uint256 The amount of tokens granted\n   * @param time uint64 The time to be checked\n   * @param start uint64 The time representing the beginning of the grant\n   * @param cliff uint64  The cliff period, the period before nothing can be paid out\n   * @param vesting uint64 The vesting period\n   * @return An uint256 representing the amount of vested tokens of a specific grant\n   *  transferableTokens\n   *   |                         _/--------   vestedTokens rect\n   *   |                       _/\n   *   |                     _/\n   *   |                   _/\n   *   |                 _/\n   *   |                /\n   *   |              .|\n   *   |            .  |\n   *   |          .    |\n   *   |        .      |\n   *   |      .        |\n   *   |    .          |\n   *   +===+===========+---------+----------> time\n   *      Start       Cliff    Vesting\n   */\n  function calculateVestedTokens(\n    uint256 tokens,\n    uint256 time,\n    uint256 start,\n    uint256 cliff,\n    uint256 vesting) public constant returns (uint256)\n    {\n      // Shortcuts for before cliff and after vesting cases.\n      if (time < cliff) return 0;\n      if (time >= vesting) return tokens;\n\n      // Interpolate all vested tokens.\n      // As before cliff the shortcut returns 0, we can use just calculate a value\n      // in the vesting rect (as shown in above's figure)\n\n      // vestedTokens = (tokens * (time - start)) / (vesting - start)\n      uint256 vestedTokens = SafeMath.div(\n                                    SafeMath.mul(\n                                      tokens,\n                                      SafeMath.sub(time, start)\n                                      ),\n                                    SafeMath.sub(vesting, start)\n                                    );\n\n      return vestedTokens;\n  }\n\n  /**\n   * @dev Get all information about a specific grant.\n   * @param _holder The address which will have its tokens revoked.\n   * @param _grantId The id of the token grant.\n   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n   */\n  function tokenGrant(address _holder, uint256 _grantId) public constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n    TokenGrant storage grant = grants[_holder][_grantId];\n\n    granter = grant.granter;\n    value = grant.value;\n    start = grant.start;\n    cliff = grant.cliff;\n    vesting = grant.vesting;\n    revokable = grant.revokable;\n    burnsOnRevoke = grant.burnsOnRevoke;\n\n    vested = vestedTokens(grant, uint64(now));\n  }\n\n  /**\n   * @dev Get the amount of vested tokens at a specific time.\n   * @param grant TokenGrant The grant to be checked.\n   * @param time The time to be checked\n   * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\n   */\n  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n    return calculateVestedTokens(\n      grant.value,\n      uint256(time),\n      uint256(grant.start),\n      uint256(grant.cliff),\n      uint256(grant.vesting)\n    );\n  }\n\n  /**\n   * @dev Calculate the amount of non vested tokens at a specific time.\n   * @param grant TokenGrant The grant to be checked.\n   * @param time uint64 The time to be checked\n   * @return An uint256 representing the amount of non vested tokens of a specific grant on the\n   * passed time frame.\n   */\n  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n    return grant.value.sub(vestedTokens(grant, time));\n  }\n\n  /**\n   * @dev Calculate the date when the holder can transfer all its tokens\n   * @param holder address The address of the holder\n   * @return An uint256 representing the date of the last transferable tokens.\n   */\n  function lastTokenIsTransferableDate(address holder) public constant returns (uint64 date) {\n    date = uint64(now);\n    uint256 grantIndex = grants[holder].length;\n    for (uint256 i = 0; i < grantIndex; i++) {\n      date = Math.max64(grants[holder][i].vesting, date);\n    }\n  }\n}\n\ncontract MigrationAgentInterface {\n  function migrateFrom(address _from, uint256 _value);\n  function setSourceToken(address _qbxSourceToken);\n  function updateSupply();\n  function qbxSourceToken() returns (address);\n}\n\ncontract QiibeeToken is BurnableToken, PausableToken, VestedToken, MintableToken {\n    using SafeMath for uint256;\n\n    string public constant symbol = \"QBX\";\n    string public constant name = \"qiibeeToken\";\n    uint8 public constant decimals = 18;\n\n    // migration vars\n    uint256 public totalMigrated;\n    uint256 public newTokens; // amount of tokens minted after migrationAgent has been set\n    uint256 public burntTokens; // amount of tokens burnt after migrationAgent has been set\n    address public migrationAgent;\n    address public migrationMaster;\n\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n    event NewVestedToken(address indexed from, address indexed to, uint256 value, uint256 grantId);\n\n    modifier onlyMigrationMaster {\n        require(msg.sender == migrationMaster);\n        _;\n    }\n\n    /*\n     * Constructor.\n     */\n    function QiibeeToken(address _migrationMaster) {\n      require(_migrationMaster != address(0));\n      migrationMaster = _migrationMaster;\n    }\n\n    /**\n      @dev Similar to grantVestedTokens but minting tokens instead of transferring.\n    */\n    function mintVestedTokens (\n      address _to,\n      uint256 _value,\n      uint64 _start,\n      uint64 _cliff,\n      uint64 _vesting,\n      bool _revokable,\n      bool _burnsOnRevoke,\n      address _wallet\n    ) onlyOwner public returns (bool) {\n      // Check for date inconsistencies that may cause unexpected behavior\n      require(_cliff >= _start && _vesting >= _cliff);\n\n      require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n\n      uint256 count = grants[_to].push(\n                  TokenGrant(\n                    _revokable ? _wallet : 0, // avoid storing an extra 20 bytes when it is non-revokable\n                    _value,\n                    _cliff,\n                    _vesting,\n                    _start,\n                    _revokable,\n                    _burnsOnRevoke\n                  )\n                );\n\n      NewVestedToken(msg.sender, _to, _value, count - 1);\n      return mint(_to, _value); //mint tokens\n    }\n\n    /**\n      @dev Overrides VestedToken#grantVestedTokens(). Only owner can call it.\n    */\n    function grantVestedTokens (\n      address _to,\n      uint256 _value,\n      uint64 _start,\n      uint64 _cliff,\n      uint64 _vesting,\n      bool _revokable,\n      bool _burnsOnRevoke\n    ) onlyOwner public {\n      super.grantVestedTokens(_to, _value, _start, _cliff, _vesting, _revokable, _burnsOnRevoke);\n    }\n\n    /**\n      @dev Set address of migration agent contract and enable migration process.\n      @param _agent The address of the MigrationAgent contract\n     */\n    function setMigrationAgent(address _agent) public onlyMigrationMaster {\n      require(MigrationAgentInterface(_agent).qbxSourceToken() == address(this));\n      require(migrationAgent == address(0));\n      require(_agent != address(0));\n      migrationAgent = _agent;\n    }\n\n    /**\n      @dev Migrates the tokens to the target token through the MigrationAgent.\n      @param _value The amount of tokens (in atto) to be migrated.\n     */\n    function migrate(uint256 _value) public whenNotPaused {\n      require(migrationAgent != address(0));\n      require(_value != 0);\n      require(_value <= balances[msg.sender]);\n      require(_value <= transferableTokens(msg.sender, uint64(now)));\n      balances[msg.sender] = balances[msg.sender].sub(_value);\n      totalSupply = totalSupply.sub(_value);\n      totalMigrated = totalMigrated.add(_value);\n      MigrationAgentInterface(migrationAgent).migrateFrom(msg.sender, _value);\n      Migrate(msg.sender, migrationAgent, _value);\n    }\n\n    /**\n     * @dev Overrides mint() function so as to keep track of the tokens minted after the\n     * migrationAgent has been set. This is to ensure that the migration agent has always the\n     * totalTokens variable up to date. This prevents the failure of the safetyInvariantCheck().\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n      bool mint = super.mint(_to, _amount);\n      if (mint && migrationAgent != address(0)) {\n        newTokens = newTokens.add(_amount);\n      }\n      return mint;\n    }\n\n\n    /*\n     * @dev Changes the migration master.\n     * @param _master The address of the migration master.\n     */\n    function setMigrationMaster(address _master) public onlyMigrationMaster {\n      require(_master != address(0));\n      migrationMaster = _master;\n    }\n\n    /*\n     * @dev Resets newTokens to zero. Can only be called by the migrationAgent\n     */\n    function resetNewTokens() {\n      require(msg.sender == migrationAgent);\n      newTokens = 0;\n    }\n\n    /*\n     * @dev Resets burntTokens to zero. Can only be called by the migrationAgent\n     */\n    function resetBurntTokens() {\n      require(msg.sender == migrationAgent);\n      burntTokens = 0;\n    }\n\n    /*\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of tokens to be burnt.\n     */\n    function burn(uint256 _value) whenNotPaused onlyOwner public {\n      super.burn(_value);\n      if (migrationAgent != address(0)) {\n        burntTokens = burntTokens.add(_value);\n      }\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"tokenGrantsCount\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"},{\"name\":\"_burnsOnRevoke\",\"type\":\"bool\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"mintVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_master\",\"type\":\"address\"}],\"name\":\"setMigrationMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"tokenGrant\",\"outputs\":[{\"name\":\"granter\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"vested\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"},{\"name\":\"burnsOnRevoke\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetBurntTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lastTokenIsTransferableDate\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vesting\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"},{\"name\":\"_burnsOnRevoke\",\"type\":\"bool\"}],\"name\":\"grantVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetNewTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"transferableTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"cliff\",\"type\":\"uint256\"},{\"name\":\"vesting\",\"type\":\"uint256\"}],\"name\":\"calculateVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"revokeTokenGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burntTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_migrationMaster\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"grantId\",\"type\":\"uint256\"}],\"name\":\"NewVestedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"grantId\",\"type\":\"uint256\"}],\"name\":\"NewTokenGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "60606040526003805460a060020a60ff021916905560146004556006805460ff19169055341561002e57600080fd5b60405160208061282f833981016040528080519150505b5b60038054600160a060020a03191633600160a060020a03161790555b600160a060020a038116151561007757600080fd5b600b8054600160a060020a031916600160a060020a0383161790555b505b61278b806100a46000396000f300606060405236156101c75763ffffffff60e060020a60003504166302a72a4c81146101cc57806305d2035b146101fd57806306fdde0314610224578063095ea7b3146102af57806316038be8146102e557806318160ddd1461034857806323b872dd1461036d57806326316e58146103a95780632c71e60a146103ca578063313ce567146104455780633f4ba83a1461046e57806340c10f191461048357806342966c68146104b9578063454b0608146104d15780635c975abb146104e9578063600e85b71461051057806365b1c9871461059157806366188463146105a6578063676d2e62146105dc5780636c182e991461060b57806370a082311461064757806375e2ff65146106785780637d64bcb4146106995780638328dbcd146106c05780638456cb59146106ef57806387b4e60a146107045780638da5cb5b1461072957806395a0f5eb1461075857806395d89b411461077d5780639754a4d914610808578063a9059cbb1461084f578063ca8695a414610885578063d347c2051461089a578063d73dd623146108d8578063dd62ed3e1461090e578063df3c211b14610945578063eb944e4c14610979578063f2fde38b1461099d578063fa20e77d146109be575b600080fd5b34156101d757600080fd5b6101eb600160a060020a03600435166109e3565b60405190815260200160405180910390f35b341561020857600080fd5b610210610a02565b604051901515815260200160405180910390f35b341561022f57600080fd5b610237610a0b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102745780820151818401525b60200161025b565b50505050905090810190601f1680156102a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102ba57600080fd5b610210600160a060020a0360043516602435610a42565b604051901515815260200160405180910390f35b34156102f057600080fd5b610210600160a060020a036004358116906024359067ffffffffffffffff604435811691606435821691608435169060a43515159060c43515159060e43516610a70565b604051901515815260200160405180910390f35b341561035357600080fd5b6101eb610d0c565b60405190815260200160405180910390f35b341561037857600080fd5b610210600160a060020a0360043581169060243516604435610d12565b604051901515815260200160405180910390f35b34156103b457600080fd5b6103c8600160a060020a0360043516610d44565b005b34156103d557600080fd5b6103ec600160a060020a0360043516602435610d94565b604051600160a060020a039097168752602087019590955267ffffffffffffffff93841660408088019190915292841660608701529216608085015290151560a084015290151560c083015260e0909101905180910390f35b341561045057600080fd5b610458610e1a565b60405160ff909116815260200160405180910390f35b341561047957600080fd5b6103c8610e1f565b005b341561048e57600080fd5b610210600160a060020a0360043516602435610ea1565b604051901515815260200160405180910390f35b34156104c457600080fd5b6103c8600435610f1d565b005b34156104dc57600080fd5b6103c8600435610f86565b005b34156104f457600080fd5b61021061111d565b604051901515815260200160405180910390f35b341561051b57600080fd5b610532600160a060020a036004351660243561112d565b604051600160a060020a039098168852602088019690965260408088019590955267ffffffffffffffff9384166060880152918316608087015290911660a0850152151560c084015290151560e0830152610100909101905180910390f35b341561059c57600080fd5b6103c861127a565b005b34156105b157600080fd5b610210600160a060020a036004351660243561129d565b604051901515815260200160405180910390f35b34156105e757600080fd5b6105ef6112cb565b604051600160a060020a03909116815260200160405180910390f35b341561061657600080fd5b61062a600160a060020a03600435166112da565b60405167ffffffffffffffff909116815260200160405180910390f35b341561065257600080fd5b6101eb600160a060020a036004351661136c565b60405190815260200160405180910390f35b341561068357600080fd5b6103c8600160a060020a036004351661138b565b005b34156106a457600080fd5b610210611471565b604051901515815260200160405180910390f35b34156106cb57600080fd5b6105ef6114d0565b604051600160a060020a03909116815260200160405180910390f35b34156106fa57600080fd5b6103c86114df565b005b341561070f57600080fd5b6101eb611566565b60405190815260200160405180910390f35b341561073457600080fd5b6105ef61156c565b604051600160a060020a03909116815260200160405180910390f35b341561076357600080fd5b6101eb61157b565b60405190815260200160405180910390f35b341561078857600080fd5b610237611581565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156102745780820151818401525b60200161025b565b50505050905090810190601f1680156102a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561081357600080fd5b6103c8600160a060020a036004351660243567ffffffffffffffff6044358116906064358116906084351660a435151560c43515156115b8565b005b341561085a57600080fd5b610210600160a060020a03600435166024356115ed565b604051901515815260200160405180910390f35b341561089057600080fd5b6103c861161d565b005b34156108a557600080fd5b6101eb600160a060020a036004351667ffffffffffffffff60243516611640565b60405190815260200160405180910390f35b34156108e357600080fd5b610210600160a060020a036004351660243561178d565b604051901515815260200160405180910390f35b341561091957600080fd5b6101eb600160a060020a03600435811690602435166117bb565b60405190815260200160405180910390f35b341561095057600080fd5b6101eb6004356024356044356064356084356117e8565b60405190815260200160405180910390f35b341561098457600080fd5b6103c8600160a060020a0360043516602435611840565b005b34156109a857600080fd5b6103c8600160a060020a0360043516611c3b565b005b34156109c957600080fd5b6101eb611cc7565b60405190815260200160405180910390f35b600160a060020a0381166000908152600560205260409020545b919050565b60065460ff1681565b60408051908101604052600b81527f716969626565546f6b656e000000000000000000000000000000000000000000602082015281565b60035460009060a060020a900460ff1615610a5c57600080fd5b610a668383611ccd565b90505b5b92915050565b600354600090819033600160a060020a03908116911614610a9057600080fd5b8767ffffffffffffffff168767ffffffffffffffff1610158015610ac857508667ffffffffffffffff168667ffffffffffffffff1610155b1515610ad357600080fd5b600454610adf8b6109e3565b10610ae957600080fd5b600160a060020a038a166000908152600560205260409020805460018101610b118382612684565b916000526020600020906003020160005b60e06040519081016040528089610b3a576000610b3c565b875b600160a060020a03168152602081018e905267ffffffffffffffff808d1660408301528b811660608301528d16608082015289151560a082015288151560c09091015291905081518154600160a060020a031916600160a060020a039190911617815560208201518160010155604082015160028201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560608201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a082015160028201805491151560c060020a0278ff0000000000000000000000000000000000000000000000001990921691909117905560c08201516002909101805491151560c860020a0279ff0000000000000000000000000000000000000000000000000019909216919091179055509050600160a060020a03808b169033167ff1665a488ebfee5d0dbca519588d62f4b5d05f9bca0a64dfb32acdf6bb70bc998b600019850160405191825260208201526040908101905180910390a3610cfb8a8a610ea1565b91505b5b5098975050505050505050565b60005481565b60008382610d208242611640565b811115610d2c57600080fd5b610d37868686611d3a565b92505b5b50509392505050565b600b5433600160a060020a03908116911614610d5f57600080fd5b600160a060020a0381161515610d7457600080fd5b600b8054600160a060020a031916600160a060020a0383161790555b5b50565b600560205281600052604060002081815481101515610daf57fe5b906000526020600020906003020160005b5080546001820154600290920154600160a060020a03909116935090915067ffffffffffffffff80821691680100000000000000008104821691608060020a8204169060ff60c060020a820481169160c860020a90041687565b601281565b60035433600160a060020a03908116911614610e3a57600080fd5b60035460a060020a900460ff161515610e5257600080fd5b6003805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a15b5b5b565b600354600090819033600160a060020a03908116911614610ec157600080fd5b60065460ff1615610ed157600080fd5b610edb8484611d6a565b9050808015610ef45750600a54600160a060020a031615155b15610f1057600854610f0c908463ffffffff611e6116565b6008555b8091505b5b5b5092915050565b60035460a060020a900460ff1615610f3457600080fd5b60035433600160a060020a03908116911614610f4f57600080fd5b610f5881611e7b565b600a54600160a060020a031615610d9057600954610f7c908263ffffffff611e6116565b6009555b5b5b5b50565b60035460a060020a900460ff1615610f9d57600080fd5b600a54600160a060020a03161515610fb457600080fd5b801515610fc057600080fd5b600160a060020a033316600090815260016020526040902054811115610fe557600080fd5b610fef3342611640565b811115610ffb57600080fd5b600160a060020a033316600090815260016020526040902054611024908263ffffffff611f2016565b600160a060020a03331660009081526001602052604081209190915554611051908263ffffffff611f2016565b600055600754611067908263ffffffff611e6116565b600755600a54600160a060020a0316637a3130e3338360405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156110c057600080fd5b6102c65a03f115156110d157600080fd5b5050600a54600160a060020a03908116915033167f18df02dcc52b9c494f391df09661519c0069bd8540141946280399408205ca1a8360405190815260200160405180910390a35b5b50565b60035460a060020a900460ff1681565b6000806000806000806000806000600560008c600160a060020a0316600160a060020a031681526020019081526020016000208a81548110151561116d57fe5b906000526020600020906003020160005b50805460018201546002830154600160a060020a039092169b50995067ffffffffffffffff608060020a820481169850808216975068010000000000000000820416955060ff60c060020a82048116955060c860020a90910416925090506112698160e060405190810160409081528254600160a060020a031682526001830154602083015260029092015467ffffffffffffffff8082169383019390935268010000000000000000810483166060830152608060020a8104909216608082015260ff60c060020a83048116151560a083015260c860020a909204909116151560c082015242611f37565b96505b509295985092959890939650565b600a5433600160a060020a0390811691161461129557600080fd5b60006009555b565b60035460009060a060020a900460ff16156112b757600080fd5b610a668383611f87565b90505b5b92915050565b600b54600160a060020a031681565b600160a060020a03811660009081526005602052604081205442915b8181101561136457600160a060020a0384166000908152600560205260409020805461135991908390811061132757fe5b906000526020600020906003020160005b506002015468010000000000000000900467ffffffffffffffff1684612083565b92505b6001016112f6565b5b5050919050565b600160a060020a0381166000908152600160205260409020545b919050565b600b5433600160a060020a039081169116146113a657600080fd5b30600160a060020a031681600160a060020a031663a02c40e16000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156113f657600080fd5b6102c65a03f1151561140757600080fd5b50505060405180519050600160a060020a031614151561142657600080fd5b600a54600160a060020a03161561143c57600080fd5b600160a060020a038116151561145157600080fd5b600a8054600160a060020a031916600160a060020a0383161790555b5b50565b60035460009033600160a060020a0390811691161461148f57600080fd5b6006805460ff191660011790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a15060015b5b90565b600a54600160a060020a031681565b60035433600160a060020a039081169116146114fa57600080fd5b60035460a060020a900460ff161561151157600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a15b5b5b565b60085481565b600354600160a060020a031681565b60075481565b60408051908101604052600381527f5142580000000000000000000000000000000000000000000000000000000000602082015281565b60035433600160a060020a039081169116146115d357600080fd5b6115e2878787878787876120b2565b5b5b50505050505050565b600033826115fb8242611640565b81111561160757600080fd5b6116118585612330565b92505b5b505092915050565b600a5433600160a060020a0390811691161461163857600080fd5b60006008555b565b6000806000806000611651876109e3565b935083151561166b57611664878761235e565b9450611783565b60009250600091505b8382101561175957600160a060020a0387166000908152600560205260409020805461174b9185916117469190869081106116ab57fe5b906000526020600020906003020160005b5060e060405190810160409081528254600160a060020a031682526001830154602083015260029092015467ffffffffffffffff8082169383019390935268010000000000000000810483166060830152608060020a8104909216608082015260ff60c060020a83048116151560a083015260c860020a909204909116151560c082015289612372565b611e61565b92505b600190910190611674565b61176b6117658861136c565b84611f20565b90506117808161177b898961235e565b61239b565b94505b5050505092915050565b60035460009060a060020a900460ff16156117a757600080fd5b610a6683836123b5565b90505b5b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b600080838610156117fc5760009150611836565b82861061180b57869150611836565b6118306118218861181c8989611f20565b61245a565b61182b8588611f20565b612489565b90508091505b5095945050505050565b600160a060020a03821660009081526005602052604081208054829182918590811061186857fe5b906000526020600020906003020160005b50600281015490935060c060020a900460ff16151561189757600080fd5b825433600160a060020a039081169116146118b157600080fd5b600283015460c860020a900460ff166118ca57336118ce565b61dead5b915061195d8360e060405190810160409081528254600160a060020a031682526001830154602083015260029092015467ffffffffffffffff8082169383019390935268010000000000000000810483166060830152608060020a8104909216608082015260ff60c060020a83048116151560a083015260c860020a909204909116151560c082015242612372565b600160a060020a03861660009081526005602052604090208054919250908590811061198557fe5b906000526020600020906003020160005b508054600160a060020a0319168155600060018083018290556002909201805479ffffffffffffffffffffffffffffffffffffffffffffffffffff19169055600160a060020a0387168152600560205260409020805490916119fe919063ffffffff611f2016565b81548110611a0857fe5b906000526020600020906003020160005b50600160a060020a0386166000908152600560205260409020805486908110611a3e57fe5b906000526020600020906003020160005b5081548154600160a060020a031916600160a060020a03918216178255600180840154908301556002928301805493909201805467ffffffffffffffff191667ffffffffffffffff94851617808255835468010000000000000000908190048616026fffffffffffffffff000000000000000019909116178082558354608060020a9081900490951690940277ffffffffffffffff000000000000000000000000000000001990941693909317808455825460ff60c060020a918290048116151590910278ff0000000000000000000000000000000000000000000000001990921691909117808555925460c860020a9081900490911615150279ff0000000000000000000000000000000000000000000000000019909216919091179091558516600090815260056020526040902080546000190190611b909082612684565b50600160a060020a038216600090815260016020526040902054611bba908263ffffffff611e6116565b600160a060020a038084166000908152600160205260408082209390935590871681522054611bef908263ffffffff611f2016565b600160a060020a038087166000818152600160205260409081902093909355908416916000805160206127408339815191529084905190815260200160405180910390a35b5050505050565b60035433600160a060020a03908116911614611c5657600080fd5b600160a060020a0381161515611c6b57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360038054600160a060020a031916600160a060020a0383161790555b5b50565b60095481565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60035460009060a060020a900460ff1615611d5457600080fd5b611d5f8484846124a5565b90505b5b9392505050565b60035460009033600160a060020a03908116911614611d8857600080fd5b60065460ff1615611d9857600080fd5b600054611dab908363ffffffff611e6116565b6000908155600160a060020a038416815260016020526040902054611dd6908363ffffffff611e6116565b600160a060020a0384166000818152600160205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a282600160a060020a031660006000805160206127408339815191528460405190815260200160405180910390a35060015b5b5b92915050565b600082820183811015610f1057fe5b8091505b5092915050565b6000808211611e8957600080fd5b5033600160a060020a038116600090815260016020526040902054611eae9083611f20565b600160a060020a03821660009081526001602052604081209190915554611edb908363ffffffff611f2016565b600055600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25b5050565b600082821115611f2c57fe5b508082035b92915050565b6000610a6683602001518367ffffffffffffffff16856080015167ffffffffffffffff16866040015167ffffffffffffffff16876060015167ffffffffffffffff166117e8565b90505b92915050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115611fe457600160a060020a03338116600090815260026020908152604080832093881683529290529081205561201b565b611ff4818463ffffffff611f2016565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b60008167ffffffffffffffff168367ffffffffffffffff1610156120a75781610a66565b825b90505b92915050565b60008567ffffffffffffffff168567ffffffffffffffff16101580156120ec57508467ffffffffffffffff168467ffffffffffffffff1610155b15156120f757600080fd5b600454612103896109e3565b1061210d57600080fd5b600160a060020a03881660009081526005602052604090208054600181016121358382612684565b916000526020600020906003020160005b60e0604051908101604052808761215e576000612160565b335b600160a060020a03168152602081018c905267ffffffffffffffff808b16604083015289811660608301528b16608082015287151560a082015286151560c09091015291905081518154600160a060020a031916600160a060020a039190911617815560208201518160010155604082015160028201805467ffffffffffffffff191667ffffffffffffffff9290921691909117905560608201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a082015160028201805491151560c060020a0278ff0000000000000000000000000000000000000000000000001990921691909117905560c08201516002909101805491151560c860020a0279ff00000000000000000000000000000000000000000000000000199092169190911790555090506122d388886115ed565b5087600160a060020a031633600160a060020a03167ff9565aecd648a0466ffb964a79eeccdf1120ad6276189c687a6e9fe73984d9bb896001850360405191825260208201526040908101905180910390a35b5050505050505050565b60035460009060a060020a900460ff161561234a57600080fd5b610a6683836125bf565b90505b5b92915050565b6000610a668361136c565b90505b92915050565b6000610a666123818484611f37565b84602001519063ffffffff611f2016565b90505b92915050565b60008183106120a75781610a66565b825b90505b92915050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546123ed908363ffffffff611e6116565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b6000828202831580612476575082848281151561247357fe5b04145b1515610f1057fe5b8091505b5092915050565b600080828481151561249757fe5b0490508091505b5092915050565b600080600160a060020a03841615156124bd57600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054612503908463ffffffff611f2016565b600160a060020a038087166000908152600160205260408082209390935590861681522054612538908463ffffffff611e6116565b600160a060020a038516600090815260016020526040902055612561818463ffffffff611f2016565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616916000805160206127408339815191529086905190815260200160405180910390a3600191505b509392505050565b6000600160a060020a03831615156125d657600080fd5b600160a060020a0333166000908152600160205260409020546125ff908363ffffffff611f2016565b600160a060020a033381166000908152600160205260408082209390935590851681522054612634908363ffffffff611e6116565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206127408339815191529085905190815260200160405180910390a35060015b92915050565b8154818355818115116126b0576003028160030283600052602060002091820191016126b091906126e8565b5b505050565b8154818355818115116126b0576003028160030283600052602060002091820191016126b091906126e8565b5b505050565b6114cc91905b80821115612738578054600160a060020a03191681556000600182015560028101805479ffffffffffffffffffffffffffffffffffffffffffffffffffff191690556003016126ee565b5090565b905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058208eddb4551a1867a46546ae7ef3f74421115982b9d7b061d5fafdcfaa08cbc004002900000000000000000000000073feb4c73465c71291052af2282e9292f8807f14",
  "constructorArguments": "00000000000000000000000073feb4c73465c71291052af2282e9292f8807f14"
}