{
  "address": "0xb4d95449f1d4a793c7d32ab23a52ab58af5fe095",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ShrimpFarmer",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-21\n*/\n\npragma solidity ^0.4.18; // solhint-disable-line\n\n\n\ncontract VerifyToken {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    bool public activated;\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\ncontract EthVerifyCore{\n  mapping (address => bool) public verifiedUsers;\n}\ncontract ShrimpFarmer is ApproveAndCallFallBack{\n    using SafeMath for uint;\n    address vrfAddress=0x5BD574410F3A2dA202bABBa1609330Db02aD64C2;\n    VerifyToken vrfcontract=VerifyToken(vrfAddress);\n\n    //257977574257854071311765966\n    //                10000000000\n    //uint256 EGGS_PER_SHRIMP_PER_SECOND=1;\n    uint256 public EGGS_TO_HATCH_1SHRIMP=86400;//86400\n    uint public VRF_EGG_COST=(1000000000000000000*300)/EGGS_TO_HATCH_1SHRIMP;\n    uint256 public STARTING_SHRIMP=300;\n    uint256 PSN=100000000000000;\n    uint256 PSNH=50000000000000;\n    uint public potDrainTime=2 hours;//\n    uint public POT_DRAIN_INCREMENT=1 hours;\n    uint public POT_DRAIN_MAX=3 days;\n    uint public HATCH_COOLDOWN_MAX=6 hours;//6 hours;\n    bool public initialized=false;\n    //bool public completed=false;\n\n    address public ceoAddress;\n    address public dev2;\n    mapping (address => uint256) public hatchCooldown;//the amount of time you must wait now varies per user\n    mapping (address => uint256) public hatcheryShrimp;\n    mapping (address => uint256) public claimedEggs;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => bool) public hasClaimedFree;\n    uint256 public marketEggs;\n    EthVerifyCore public ethVerify=EthVerifyCore(0x1c307A39511C16F74783fCd0091a921ec29A0b51);\n\n    uint public lastBidTime;//last time someone bid for the pot\n    address public currentWinner;\n    uint public potEth=0;//eth specifically set aside for the pot\n    uint public totalHatcheryShrimp=0;\n    uint public prizeEth=0;\n\n    function ShrimpFarmer() public{\n        ceoAddress=msg.sender;\n        dev2=address(0x95096780Efd48FA66483Bc197677e89f37Ca0CB5);\n        lastBidTime=now;\n        currentWinner=msg.sender;\n    }\n    function finalizeIfNecessary() public{\n      if(lastBidTime.add(potDrainTime)<now){\n        currentWinner.transfer(this.balance);//winner gets everything\n        initialized=false;\n        //completed=true;\n      }\n    }\n    function getPotCost() public view returns(uint){\n        return totalHatcheryShrimp.div(100);\n    }\n    function stealPot() public {\n\n      if(initialized){\n          _hatchEggs(0);\n          uint cost=getPotCost();\n          hatcheryShrimp[msg.sender]=hatcheryShrimp[msg.sender].sub(cost);//cost is 1% of total shrimp\n          totalHatcheryShrimp=totalHatcheryShrimp.sub(cost);\n          setNewPotWinner();\n          hatchCooldown[msg.sender]=0;\n      }\n    }\n    function setNewPotWinner() private {\n      finalizeIfNecessary();\n      if(initialized && msg.sender!=currentWinner){\n        potDrainTime=lastBidTime.add(potDrainTime).sub(now).add(POT_DRAIN_INCREMENT);//time left plus one hour\n        if(potDrainTime>POT_DRAIN_MAX){\n          potDrainTime=POT_DRAIN_MAX;\n        }\n        lastBidTime=now;\n        currentWinner=msg.sender;\n      }\n    }\n    function isHatchOnCooldown() public view returns(bool){\n      return lastHatch[msg.sender].add(hatchCooldown[msg.sender])<now;\n    }\n    function hatchEggs(address ref) public{\n      require(isHatchOnCooldown());\n      _hatchEggs(ref);\n    }\n    function _hatchEggs(address ref) private{\n        require(initialized);\n\n        uint256 eggsUsed=getMyEggs();\n        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\n        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\n        totalHatcheryShrimp=totalHatcheryShrimp.add(newShrimp);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        hatchCooldown[msg.sender]=HATCH_COOLDOWN_MAX;\n        //send referral eggs\n        require(ref!=msg.sender);\n        if(ref!=0){\n          claimedEggs[ref]=claimedEggs[ref].add(eggsUsed.div(7));\n        }\n        //boost market to nerf shrimp hoarding\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,7));\n    }\n    function getHatchCooldown(uint eggs) public view returns(uint){\n      uint targetEggs=marketEggs.div(50);\n      if(eggs>=targetEggs){\n        return HATCH_COOLDOWN_MAX;\n      }\n      return (HATCH_COOLDOWN_MAX.mul(eggs)).div(targetEggs);\n    }\n    function reduceHatchCooldown(address addr,uint eggs) private{\n      uint reduction=getHatchCooldown(eggs);\n      if(reduction>=hatchCooldown[addr]){\n        hatchCooldown[addr]=0;\n      }\n      else{\n        hatchCooldown[addr]=hatchCooldown[addr].sub(reduction);\n      }\n    }\n    function sellEggs() public{\n        require(initialized);\n        finalizeIfNecessary();\n        uint256 hasEggs=getMyEggs();\n        uint256 eggValue=calculateEggSell(hasEggs);\n        //uint256 fee=devFee(eggValue);\n        uint potfee=potFee(eggValue);\n        claimedEggs[msg.sender]=0;\n        lastHatch[msg.sender]=now;\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\n        //ceoAddress.transfer(fee);\n        prizeEth=prizeEth.add(potfee);\n        msg.sender.transfer(eggValue.sub(potfee));\n    }\n    function buyEggs() public payable{\n        require(initialized);\n        uint256 eggsBought=calculateEggBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n        eggsBought=eggsBought.sub(devFee(eggsBought));\n        eggsBought=eggsBought.sub(devFee2(eggsBought));\n        ceoAddress.transfer(devFee(msg.value));\n        dev2.transfer(devFee2(msg.value));\n        claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);\n        reduceHatchCooldown(msg.sender,eggsBought); //reduce the hatching cooldown based on eggs bought\n\n        //steal the pot if bought enough\n        uint potEggCost=getPotCost().mul(EGGS_TO_HATCH_1SHRIMP);//the equivalent number of eggs to the pot cost in shrimp\n        if(eggsBought>potEggCost){\n          //hatcheryShrimp[msg.sender]=hatcheryShrimp[msg.sender].add(getPotCost());//to compensate for the shrimp that will be lost when calling the following\n          //stealPot();\n          setNewPotWinner();\n        }\n    }\n    //magic trade balancing algorithm\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n    }\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\n        return calculateTrade(eggs,marketEggs,this.balance.sub(prizeEth));\n    }\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n        return calculateTrade(eth,contractBalance.sub(prizeEth),marketEggs);\n    }\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\n        return calculateEggBuy(eth,this.balance);\n    }\n    function potFee(uint amount) public view returns(uint){\n        return SafeMath.div(SafeMath.mul(amount,20),100);\n    }\n    function devFee(uint256 amount) public view returns(uint256){\n        return SafeMath.div(SafeMath.mul(amount,4),100);\n    }\n    function devFee2(uint256 amount) public view returns(uint256){\n        return SafeMath.div(amount,100);\n    }\n    function seedMarket(uint256 eggs) public payable{\n        require(msg.sender==ceoAddress);\n        require(!initialized);\n        //require(marketEggs==0);\n        initialized=true;\n        marketEggs=eggs;\n        lastBidTime=now;\n    }\n    //Tokens are exchanged for shrimp by sending them to this contract with ApproveAndCall\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public{\n        require(!initialized);\n        require(msg.sender==vrfAddress);\n        require(ethVerify.verifiedUsers(from));//you must now be verified for this\n        require(claimedEggs[from].add(tokens.div(VRF_EGG_COST))<=1001*EGGS_TO_HATCH_1SHRIMP);//you may now trade for a max of 1000 eggs\n        vrfcontract.transferFrom(from,this,tokens);\n        claimedEggs[from]=claimedEggs[from].add(tokens.div(VRF_EGG_COST));\n    }\n    //allow sending eth to the contract\n    function () public payable {}\n\n    function claimFreeEggs() public{\n//  RE ENABLE THIS BEFORE DEPLOYING MAINNET\n        require(ethVerify.verifiedUsers(msg.sender));\n        require(initialized);\n        require(!hasClaimedFree[msg.sender]);\n        claimedEggs[msg.sender]=claimedEggs[msg.sender].add(getFreeEggs());\n        _hatchEggs(0);\n        hatchCooldown[msg.sender]=0;\n        hasClaimedFree[msg.sender]=true;\n        //require(hatcheryShrimp[msg.sender]==0);\n        //lastHatch[msg.sender]=now;\n        //hatcheryShrimp[msg.sender]=hatcheryShrimp[msg.sender].add(STARTING_SHRIMP);\n    }\n    function getFreeEggs() public view returns(uint){\n        return min(calculateEggBuySimple(this.balance.div(400)),calculateEggBuySimple(0.01 ether));\n    }\n    function getBalance() public view returns(uint256){\n        return this.balance;\n    }\n    function getMyShrimp() public view returns(uint256){\n        return hatcheryShrimp[msg.sender];\n    }\n    function getMyEggs() public view returns(uint256){\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\n    }\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\n        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\n    }\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "608060405260008054600160a060020a0319908116735bd574410f3a2da202babba1609330db02ad64c217808355600180548316600160a060020a0390921691909117905562015180600255660c55f7bc23038e60035561012c600455655af3107a4000600555652d79883d2000600655611c20600755610e106008556203f480600955615460600a55600b805460ff1916905560138054909116731c307a39511c16f74783fcd0091a921ec29a0b51179055601681905560178190556018553480156100cb57600080fd5b50600b805461010060a860020a03191633610100810291909117909155600c80547395096780efd48fa66483bc197677e89f37ca0cb5600160a060020a031991821617909155426014556015805490911690911790556113ce806101306000396000f3006080604052600436106102245763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302b8230c81146102265780630618e0511461025b57806308722e78146102825780630a0f8168146102b35780630ec0692a146102c857806312065fe0146102dd578063158ef93e146102f25780632029e96f14610307578063229824c41461031c57806322e585571461033a57806323d7e0891461034f57806326fd8422146103645780632b9fd4461461037f5780632e9392bb14610394578063349a5205146103a95780633955f0fe146103be5780633b653755146103d35780633bc0461a146103de5780633ec862a8146103f6578063421a57271461041757806343ce74221461042c578063467ece79146104415780634f74acfe146104625780635616f7df1461046a578063642ab4b1146104825780636bc46fb21461049757806372670361146104ac578063732e77d0146104cd5780637e2cb974146104e25780637e56fde5146105035780638013f3a71461051b57806388af6534146105305780638e316327146105455780638f4ffcb11461055d578063aabe2fe3146105cd578063ae20bf15146105e2578063b1a8158c146105f7578063b24612d01461060c578063c2127e031461062d578063ce8883af14610642578063cf99d9351461065a578063d7c8843b1461066f578063e83aafd214610690578063ea3f190e146106a5578063fb05594f146106bd575b005b34801561023257600080fd5b50610247600160a060020a03600435166106d2565b604080519115158252519081900360200190f35b34801561026757600080fd5b506102706106e7565b60408051918252519081900360200190f35b34801561028e57600080fd5b506102976106ed565b60408051600160a060020a039092168252519081900360200190f35b3480156102bf57600080fd5b506102976106fc565b3480156102d457600080fd5b50610270610710565b3480156102e957600080fd5b50610270610716565b3480156102fe57600080fd5b5061024761071b565b34801561031357600080fd5b50610270610724565b34801561032857600080fd5b5061027060043560243560443561072a565b34801561034657600080fd5b50610270610777565b34801561035b57600080fd5b506102706107b1565b34801561037057600080fd5b506102706004356024356107c8565b34801561038b57600080fd5b506102476107f2565b3480156103a057600080fd5b50610270610825565b3480156103b557600080fd5b5061027061082b565b3480156103ca57600080fd5b50610224610831565b6102246004356108f9565b3480156103ea57600080fd5b5061027060043561093b565b34801561040257600080fd5b50610224600160a060020a0360043516610958565b34801561042357600080fd5b50610224610977565b34801561043857600080fd5b506102706109fb565b34801561044d57600080fd5b50610270600160a060020a0360043516610a1b565b610224610a2d565b34801561047657600080fd5b50610270600435610b71565b34801561048e57600080fd5b50610270610bcb565b3480156104a357600080fd5b50610270610bd1565b3480156104b857600080fd5b50610270600160a060020a0360043516610bd7565b3480156104d957600080fd5b50610270610be9565b3480156104ee57600080fd5b50610270600160a060020a0360043516610bef565b34801561050f57600080fd5b50610270600435610c01565b34801561052757600080fd5b50610297610c0e565b34801561053c57600080fd5b50610270610c1d565b34801561055157600080fd5b50610270600435610c23565b34801561056957600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261022494600160a060020a03813581169560248035966044359093169536956084949201918190840183828082843750949750610c509650505050505050565b3480156105d957600080fd5b50610297610e65565b3480156105ee57600080fd5b50610224610e74565b34801561060357600080fd5b50610270610fab565b34801561061857600080fd5b50610270600160a060020a0360043516610fb1565b34801561063957600080fd5b50610270610fc3565b34801561064e57600080fd5b50610270600435610fd6565b34801561066657600080fd5b50610224610fe6565b34801561067b57600080fd5b50610270600160a060020a036004351661104c565b34801561069c57600080fd5b506102706110ab565b3480156106b157600080fd5b506102706004356110b1565b3480156106c957600080fd5b506102706110be565b60116020526000908152604090205460ff1681565b60095481565b601354600160a060020a031681565b600b546101009004600160a060020a031681565b60185481565b303190565b600b5460ff1681565b60165481565b600061076f61073b600554846110c4565b61076a60065461075f6107646107536005548a6110c4565b61075f6006548c6110c4565b6110fa565b89611109565b611109565b949350505050565b60006107ac610797610792303161019063ffffffff61110916565b610c01565b6107a7662386f26fc10000610c01565b611120565b905090565b6017546000906107ac90606463ffffffff61110916565b60006107eb836107e36018548561113690919063ffffffff16565b60125461072a565b9392505050565b336000908152600d60209081526040808320546010909252822054429161081f919063ffffffff6110fa16565b10905090565b60125481565b60075481565b600b546000908190819060ff16151561084957600080fd5b610851610fe6565b6108596109fb565b925061086483610c23565b915061086f82610fd6565b336000908152600f602090815260408083208390556010909152902042905560125490915061089e90846110fa565b6012556018546108b4908263ffffffff6110fa16565b601855336108fc6108cb848463ffffffff61113616565b6040518115909202916000818181858888f193505050501580156108f3573d6000803e3d6000fd5b50505050565b600b546101009004600160a060020a0316331461091557600080fd5b600b5460ff161561092557600080fd5b600b805460ff1916600117905560125542601455565b600061095261094b8360046110c4565b6064611109565b92915050565b6109606107f2565b151561096b57600080fd5b61097481611148565b50565b600b5460009060ff16156109745761098f6000611148565b6109976107b1565b336000908152600e60205260409020549091506109ba908263ffffffff61113616565b336000908152600e60205260409020556017546109dd908263ffffffff61113616565b6017556109e8611272565b336000908152600d602052604081205550565b336000818152600f602052604081205490916107ac919061075f9061104c565b60106020526000908152604090205481565b600b54600090819060ff161515610a4357600080fd5b610a5734610a52303182611136565b6107c8565b9150610a72610a658361093b565b839063ffffffff61113616565b9150610a80610a65836110b1565b600b549092506101009004600160a060020a03166108fc610aa03461093b565b6040518115909202916000818181858888f19350505050158015610ac8573d6000803e3d6000fd5b50600c54600160a060020a03166108fc610ae1346110b1565b6040518115909202916000818181858888f19350505050158015610b09573d6000803e3d6000fd5b50336000908152600f6020526040902054610b2490836110fa565b336000818152600f6020526040902091909155610b41908361130f565b610b5b600254610b4f6107b1565b9063ffffffff6110c416565b905080821115610b6d57610b6d611272565b5050565b600080610b8a603260125461110990919063ffffffff16565b9050808310610b9d57600a549150610bc5565b610bc281610bb685600a546110c490919063ffffffff16565b9063ffffffff61110916565b91505b50919050565b60145481565b60175481565b600f6020526000908152604090205481565b60025481565b600e6020526000908152604090205481565b60006109528230316107c8565b600c54600160a060020a031681565b60035481565b600061095282601254610c4b60185430600160a060020a03163161113690919063ffffffff16565b61072a565b600b5460ff1615610c6057600080fd5b600054600160a060020a03163314610c7757600080fd5b601354604080517fe35fe366000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151919092169163e35fe3669160248083019260209291908290030181600087803b158015610cdf57600080fd5b505af1158015610cf3573d6000803e3d6000fd5b505050506040513d6020811015610d0957600080fd5b50511515610d1657600080fd5b6002546103e902610d5a610d356003548661110990919063ffffffff16565b600160a060020a0387166000908152600f60205260409020549063ffffffff6110fa16565b1115610d6557600080fd5b600154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015230602483015260448201879052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610dda57600080fd5b505af1158015610dee573d6000803e3d6000fd5b505050506040513d6020811015610e0457600080fd5b5050600354610e4390610e1e90859063ffffffff61110916565b600160a060020a0386166000908152600f60205260409020549063ffffffff6110fa16565b600160a060020a039094166000908152600f6020526040902093909355505050565b601554600160a060020a031681565b601354604080517fe35fe3660000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a039092169163e35fe366916024808201926020929091908290030181600087803b158015610eda57600080fd5b505af1158015610eee573d6000803e3d6000fd5b505050506040513d6020811015610f0457600080fd5b50511515610f1157600080fd5b600b5460ff161515610f2257600080fd5b3360009081526011602052604090205460ff1615610f3f57600080fd5b610f66610f4a610777565b336000908152600f60205260409020549063ffffffff6110fa16565b336000908152600f6020526040812091909155610f8290611148565b336000908152600d6020908152604080832083905560119091529020805460ff19166001179055565b60085481565b600d6020526000908152604090205481565b336000908152600e602052604090205490565b600061095261094b8360146110c4565b42610ffe6007546014546110fa90919063ffffffff16565b101561104a57601554604051600160a060020a0390911690303180156108fc02916000818181858888f1935050505015801561103e573d6000803e3d6000fd5b50600b805460ff191690555b565b6000806110846002546107a7426010600088600160a060020a0316600160a060020a0316815260200190815260200160002054611136565b600160a060020a0384166000908152600e6020526040902054909150610bc29082906110c4565b600a5481565b6000610952826064611109565b60045481565b6000808315156110d757600091506110f3565b508282028284828115156110e757fe5b04146110ef57fe5b8091505b5092915050565b6000828201838110156110ef57fe5b600080828481151561111757fe5b04949350505050565b600081831061112f57816107eb565b5090919050565b60008282111561114257fe5b50900390565b600b54600090819060ff16151561115e57600080fd5b6111666109fb565b915061117482600254611109565b336000908152600e602052604090205490915061119190826110fa565b336000908152600e60205260409020556017546111b4908263ffffffff6110fa16565b601755336000818152600f6020908152604080832083905560108252808320429055600a54600d90925290912055600160a060020a03841614156111f757600080fd5b600160a060020a038316156112595761123f61121a83600763ffffffff61110916565b600160a060020a0385166000908152600f60205260409020549063ffffffff6110fa16565b600160a060020a0384166000908152600f60205260409020555b61126a60125461075f846007611109565b601255505050565b61127a610fe6565b600b5460ff1680156112975750601554600160a060020a03163314155b1561104a576112d56008546112c9426112bd6007546014546110fa90919063ffffffff16565b9063ffffffff61113616565b9063ffffffff6110fa16565b600781905560095410156112ea576009546007555b426014556015805473ffffffffffffffffffffffffffffffffffffffff191633179055565b600061131a82610b71565b600160a060020a0384166000908152600d6020526040902054909150811061135a57600160a060020a0383166000908152600d602052604081205561139d565b600160a060020a0383166000908152600d6020526040902054611383908263ffffffff61113616565b600160a060020a0384166000908152600d60205260409020555b5050505600a165627a7a723058208f7f05e68bd9178d17deb4edc9414caa906b96ab5d0e1f0dc60a2fb682cc302e0029"
}