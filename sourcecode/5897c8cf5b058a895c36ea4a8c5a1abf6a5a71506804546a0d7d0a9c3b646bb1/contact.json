{
  "address": "0xbdb686ac471b374bdc844615c768c2595c2ff2fe",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "BoostContainer",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-07\n*/\n\npragma solidity ^0.4.17;\n\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMathForBoost {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      revert();\n    }\n  }\n}\n\n\ncontract Boost {\n    using SafeMathForBoost for uint256;\n\n    string public name = \"Boost\";         // トークン名\n    uint8 public decimals = 0;            // 小数点以下何桁か\n    string public symbol = \"BST\";         // トークンの単位\n    uint256 public totalSupply = 100000000;  // 総供給量\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint256 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint256 value;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n\n    /// @notice constructor\n    function Boost() public {\n        balances[msg.sender].push(Checkpoint({\n            fromBlock:block.number,\n            value:totalSupply\n        }));\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n\n        // The standard ERC 20 transferFrom functionality\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n            return 0;\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount) internal {\n\n        // Do not allow transfer to 0x0 or the token contract itself\n        require((_to != 0) && (_to != address(this)) && (_amount != 0));\n\n        // First update the balance array with the new value for the address\n        // sending the tokens\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\n        updateValueAtNow(balances[_from], previousBalanceFrom.sub(_amount));\n\n        // Then update the balance array with the new value for the address\n        // receiving the tokens\n        var previousBalanceTo = balanceOfAt(_to, block.number);\n        updateValueAtNow(balances[_to], previousBalanceTo.add(_amount));\n\n        // An event to make the transfer easy to find on the blockchain\n        Transfer(_from, _to, _amount);\n\n    }\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view  returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length - 1].fromBlock)\n            return checkpoints[checkpoints.length - 1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length - 1;\n        while (max > min) {\n            uint mid = (max + min + 1) / 2;\n            if (checkpoints[mid].fromBlock <= _block) {\n                min = mid;\n            } else {\n                max = mid - 1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n            newCheckPoint.fromBlock = block.number;\n            newCheckPoint.value = _value;\n        } else {\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\n            oldCheckPoint.value = _value;\n        }\n    }\n\n    /// @dev Helper function to return a min between the two uints\n    function min(uint a, uint b) internal pure returns (uint) {\n        return a < b ? a : b;\n    }\n}\n\n\n// @title EtherContainer to store ether for investor to withdraw\ncontract BoostContainer {\n    using SafeMathForBoost for uint256;\n\n    // multiSigAddress\n    address public multiSigAddress;\n    bool public paused = false;\n\n    // Boost token\n    Boost public boost;\n\n    // Array about ether information per month for dividend\n    InfoForDeposit[] public arrayInfoForDeposit;\n\n    // Mapping to check this account has already withdrawn\n    mapping(address => uint256) public mapCompletionNumberForWithdraw;\n\n    // Event\n    event LogDepositForDividend(uint256 blockNumber, uint256 etherAountForDividend);\n    event LogWithdrawal(address indexed tokenHolder, uint256 etherValue);\n    event LogPause();\n    event LogUnpause();\n\n    // Struct of deposit infomation for dividend\n    struct InfoForDeposit {\n        uint256 blockNumber;\n        uint256 depositedEther;\n    }\n\n    // Check this msg.sender has right to withdraw\n    modifier isNotCompletedForWithdrawal(address _address) {\n        require(mapCompletionNumberForWithdraw[_address] != arrayInfoForDeposit.length);\n        _;\n    }\n\n    // Check whether msg.sender is multiSig or not\n    modifier onlyMultiSig() {\n        require(msg.sender == multiSigAddress);\n        _;\n    }\n\n    // Modifier to make a function callable only when the contract is not paused.\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    // Modifier to make a function callable only when the contract is paused.\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /// @dev constructor\n    /// @param _boostAddress The address of boost token\n    /// @param _multiSigAddress The address of multiSigWallet to send ether\n    function BoostContainer(address _boostAddress, address _multiSigAddress) public {\n        boost = Boost(_boostAddress);\n        multiSigAddress = _multiSigAddress;\n    }\n\n    /// @dev Deposit `msg.value` in arrayInfoForDeposit\n    /// @param _blockNumber The blockNumber to specify the token amount that each address has at this blockNumber\n    function depositForDividend(uint256 _blockNumber) public payable onlyMultiSig whenNotPaused {\n        require(msg.value > 0);\n\n        arrayInfoForDeposit.push(InfoForDeposit({blockNumber:_blockNumber, depositedEther:msg.value}));\n\n        LogDepositForDividend(_blockNumber, msg.value);\n    }\n\n    /// @dev Withdraw dividendEther\n    function withdraw() public isNotCompletedForWithdrawal(msg.sender) whenNotPaused {\n\n        // get withdrawAmount that msg.sender can withdraw\n        uint256 withdrawAmount = getWithdrawValue(msg.sender);\n\n        require(withdrawAmount > 0);\n\n        // set the arrayInfoForDeposit.length to mapCompletionNumberForWithdraw\n        mapCompletionNumberForWithdraw[msg.sender] = arrayInfoForDeposit.length;\n\n        // execute transfer\n        msg.sender.transfer(withdrawAmount);\n\n        // send event\n        LogWithdrawal(msg.sender, withdrawAmount);\n    }\n\n    /// @dev Change multiSigAddress\n    /// @param _address MultiSigAddress\n    function changeMultiSigAddress(address _address) public onlyMultiSig {\n        require(_address != address(0));\n        multiSigAddress = _address;\n    }\n\n    /// @dev Get the row length of arrayInfoForDeposit\n    /// @return The length of arrayInfoForDeposit\n    function getArrayInfoForDepositCount() public view returns (uint256 result) {\n        return arrayInfoForDeposit.length;\n    }\n\n    /// @dev Get withdraw value\n    /// @param _address The account that has this information\n    /// @return WithdrawAmount that account can withdraw\n    function getWithdrawValue(address _address) public view returns (uint256 withdrawAmount) {\n        uint256 validNumber = mapCompletionNumberForWithdraw[_address];\n        uint256 blockNumber;\n        uint256 depositedEther;\n        uint256 tokenAmount;\n\n        for (uint256 i = 0; i < arrayInfoForDeposit.length; i++) {\n            if (i < validNumber) {\n                continue;\n            }\n\n            // get blockNumber and depositedEther based on the validNumber\n            blockNumber = arrayInfoForDeposit[i].blockNumber;\n            depositedEther = arrayInfoForDeposit[i].depositedEther;\n\n            // get the amount of Boost token that msg.sender had based on blockNumber\n            tokenAmount = boost.balanceOfAt(_address, blockNumber);\n\n            // tokenAmount * depositedEther / totalSupply(100,000,000)\n            withdrawAmount = withdrawAmount.add(tokenAmount.mul(depositedEther).div(boost.totalSupply()));\n        }\n    }\n\n    /// @dev destroy this contract to return ether to multiSigAddress stored in this contract\n    function destroy() public onlyMultiSig whenPaused {\n        selfdestruct(multiSigAddress);\n    }\n\n    /// @dev called by the multiSigWallet to pause, triggers stopped state\n    function pause() public onlyMultiSig whenNotPaused {\n        paused = true;\n        LogPause();\n    }\n\n    /// @dev called by the multiSigWallet to unpause, returns to normal state\n    function unpause() public onlyMultiSig whenPaused {\n        paused = false;\n        LogUnpause();\n    }\n\n    /// @dev send profit to investor when stack depth happened. This require multisig and paused state\n    /// @param _address The account receives eth\n    /// @param _amount ether value that investor will receive\n    function sendProfit(address _address, uint256 _amount) public isNotCompletedForWithdrawal(_address) onlyMultiSig whenPaused {\n        require(_address != address(0));\n        require(_amount > 0);\n\n        mapCompletionNumberForWithdraw[_address] = arrayInfoForDeposit.length;\n\n        // execute transfer\n        _address.transfer(_amount);\n\n        // send event\n        LogWithdrawal(_address, _amount);\n    }\n}",
  "bytecode": "606060405260008060146101000a81548160ff021916908315150217905550341561002957600080fd5b6040516040806110688339810160405280805190602001909190805190602001909190505081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610f88806100e06000396000f3006060604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631516def7146100d55780631df43c461461012a5780633ccfd60b146101635780633f4ba83a146101785780634469981f1461018d5780635b440596146101cb5780635c975abb146102185780636fbdae471461024557806376bfba561461026e57806383197ef0146102865780638456cb591461029b578063a66f42c0146102b0578063b166c1ba14610305578063cc77468114610347575b600080fd5b34156100e057600080fd5b6100e8610394565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561013557600080fd5b610161600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506103b9565b005b341561016e57600080fd5b610176610493565b005b341561018357600080fd5b61018b6105fa565b005b341561019857600080fd5b6101ae60048080359060200190919050506106b8565b604051808381526020018281526020019250505060405180910390f35b34156101d657600080fd5b610202600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106eb565b6040518082815260200191505060405180910390f35b341561022357600080fd5b61022b61097e565b604051808215151515815260200191505060405180910390f35b341561025057600080fd5b610258610991565b6040518082815260200191505060405180910390f35b610284600480803590602001909190505061099e565b005b341561029157600080fd5b610299610abb565b005b34156102a657600080fd5b6102ae610b6b565b005b34156102bb57600080fd5b6102c3610c2b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561031057600080fd5b610345600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c51565b005b341561035257600080fd5b61037e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e42565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561041457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561045057600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033600280549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515156104e957600080fd5b600060149054906101000a900460ff1615151561050557600080fd5b61050e336106eb565b915060008211151561051f57600080fd5b600280549050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015156105a857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167fb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e91836040518082815260200191505060405180910390a25050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561065557600080fd5b600060149054906101000a900460ff16151561067057600080fd5b60008060146101000a81548160ff0219169083151502179055507f730c1faaa977b67dacf1e2451ef54556e04a07d577785ff79f6d31f73502efc960405160405180910390a1565b6002818154811015156106c757fe5b90600052602060002090600202016000915090508060000154908060010154905082565b600080600080600080600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549450600090505b600280549050811015610974578481101561075557610967565b60028181548110151561076457fe5b906000526020600020906002020160000154935060028181548110151561078757fe5b9060005260206000209060020201600101549250600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ee2cd7e88866000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b151561086857600080fd5b6102c65a03f1151561087957600080fd5b505050604051805190509150610964610955600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561091957600080fd5b6102c65a03f1151561092a57600080fd5b505050604051805190506109478686610e5a90919063ffffffff16565b610e8d90919063ffffffff16565b87610ece90919063ffffffff16565b95505b808060010191505061073b565b5050505050919050565b600060149054906101000a900460ff1681565b6000600280549050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109f957600080fd5b600060149054906101000a900460ff16151515610a1557600080fd5b600034111515610a2457600080fd5b60028054806001018281610a389190610efb565b91600052602060002090600202016000604080519081016040528085815260200134815250909190915060008201518160000155602082015181600101555050507ff764eb930ef4c19abb135b13461346a7a8cfc11ecbac25922f0c668007f24b7e8134604051808381526020018281526020019250505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b1657600080fd5b600060149054906101000a900460ff161515610b3157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610bc657600080fd5b600060149054906101000a900460ff16151515610be257600080fd5b6001600060146101000a81548160ff0219169083151502179055507f4b314b34e912fda7f95e7d23e9c8c95f82f0aff1984e4ce592a0b005f905562460405160405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b81600280549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515610ca557600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d0057600080fd5b600060149054906101000a900460ff161515610d1b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610d5757600080fd5b600082111515610d6657600080fd5b600280549050600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515610def57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff167fb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e91836040518082815260200191505060405180910390a2505050565b60036020528060005260406000206000915090505481565b6000808284029050610e836000851480610e7e5750838583811515610e7b57fe5b04145b610eec565b8091505092915050565b600080610e9c60008411610eec565b8284811515610ea757fe5b049050610ec48385811515610eb857fe5b06828502018514610eec565b8091505092915050565b6000808284019050610ee284821015610eec565b8091505092915050565b801515610ef857600080fd5b50565b815481835581811511610f2857600202816002028360005260206000209182019101610f279190610f2d565b5b505050565b610f5991905b80821115610f5557600080820160009055600182016000905550600201610f33565b5090565b905600a165627a7a72305820af773937914e3d1a638bcd4ae9d94c0e7d1177bd2028b8f72b258a1230e6ec380029000000000000000000000000fada6a9bc9a5c7ca147ee6a7cdc428938deb7662000000000000000000000000949085bde8425f619cbf35a538da538dc0aa570d",
  "constructorArguments": "000000000000000000000000fada6a9bc9a5c7ca147ee6a7cdc428938deb7662000000000000000000000000949085bde8425f619cbf35a538da538dc0aa570d"
}