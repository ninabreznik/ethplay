{
  "address": "0xfd8971d5e8e1740ce2d0a84095fca4de729d0c16",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Zilla Token",
  "contractName": "ZillaToken",
  "compilerVersion": "v0.4.18+commit.9cf6e910",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-30\n*/\n\npragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\ncontract ZillaToken is StandardToken, Ownable {\n  uint256 constant zilla = 1 ether;\n\n  string public name = 'Zilla Token';\n  string public symbol = 'ZLA';\n  uint public decimals = 18;\n  uint256 public initialSupply = 60000000 * zilla;\n  bool public tradeable;\n\n  function ZillaToken() public {\n    totalSupply = initialSupply;\n    balances[msg.sender] = initialSupply;\n    tradeable = false;\n  }\n\n  /**\n   * @dev modifier to determine if the token is tradeable\n   */\n  modifier isTradeable() {\n    require( tradeable == true );\n    _;\n  }\n\n  /**\n   * @dev allow the token to be freely tradeable\n   */\n  function allowTrading() public onlyOwner {\n    require( tradeable == false );\n    tradeable = true;\n  }\n\n  /**\n   * @dev allow the token to be freely tradeable\n   * @param _to the address to transfer ZLA to\n   * @param _value the amount of ZLA to transfer\n   */\n  function crowdsaleTransfer(address _to, uint256 _value) public onlyOwner returns (bool) {\n    require( tradeable == false );\n    return super.transfer(_to, _value);\n  } \n\n  function transfer(address _to, uint256 _value) public isTradeable returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public isTradeable returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public isTradeable returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public isTradeable returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public isTradeable returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n\n}\n\n\n\n\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract ZillaCrowdsale is Ownable {\n  using SafeMath for uint256;\n\n  // public events\n  event StartCrowdsale();\n  event FinalizeCrowdsale();\n  event TokenSold(address recipient, uint eth_amount, uint zla_amount);\n \n  // crowdsale constants\n  uint256 constant presale_eth_to_zilla   = 1200;\n  uint256 constant crowdsale_eth_to_zilla =  750;\n\n  // our ZillaToken contract\n  ZillaToken public token;\n\n  // crowdsale token limit\n  uint256 public zilla_remaining;\n\n  // our Zilla multisig vault address\n  address public vault;\n\n  // crowdsale state\n  enum CrowdsaleState { Waiting, Running, Ended }\n  CrowdsaleState public state = CrowdsaleState.Waiting;\n  uint256 public start;\n  uint256 public unlimited;\n  uint256 public end;\n\n  // participants state\n  struct Participant {\n    bool    whitelist;\n    uint256 remaining;\n  }\n  mapping (address => Participant) private participants;\n\n  /**\n   * @dev constructs ZillaCrowdsale\n   */\n  function ZillaCrowdsale() public {\n    token = new ZillaToken();\n    zilla_remaining = token.totalSupply();\n  }\n\n  /**\n   * @dev modifier to determine if the crowdsale has been initialized\n   */\n  modifier isStarted() {\n    require( (state == CrowdsaleState.Running) );\n    _;\n  }\n\n  /**\n   * @dev modifier to determine if the crowdsale is active\n   */\n  modifier isRunning() {\n    require( (state == CrowdsaleState.Running) && (now >= start) && (now < end) );\n    _;\n  }\n\n  /**\n   * @dev start the Zilla Crowdsale\n   * @param _start is the epoch time the crowdsale starts\n   * @param _end is the epoch time the crowdsale ends\n   * @param _vault is the multisig wallet the ethereum is transfered to\n   */\n  function startCrowdsale(uint256 _start, uint256 _unlimited, uint256 _end, address _vault) public onlyOwner {\n    require(state == CrowdsaleState.Waiting);\n    require(_start >= now);\n    require(_unlimited > _start);\n    require(_unlimited < _end);\n    require(_end > _start);\n    require(_vault != 0x0);\n\n    start     = _start;\n    unlimited = _unlimited;\n    end       = _end;\n    vault     = _vault;\n    state     = CrowdsaleState.Running;\n    StartCrowdsale();\n  }\n\n  /**\n   * @dev Finalize the Zilla Crowdsale, unsold tokens are moved to the vault account\n   */\n  function finalizeCrowdsale() public onlyOwner {\n    require(state == CrowdsaleState.Running);\n    require(end < now);\n    // transfer remaining tokens to vault\n    _transferTokens( vault, 0, zilla_remaining );\n    // end the crowdsale\n    state = CrowdsaleState.Ended;\n    // allow the token to be traded\n    token.allowTrading();\n    FinalizeCrowdsale();\n  }\n\n  /**\n   * @dev Allow owner to increase the end date of the crowdsale as long as the crowdsale is still running\n   * @param _end the new end date for the crowdsale\n   */\n  function setEndDate(uint256 _end) public onlyOwner {\n    require(state == CrowdsaleState.Running);\n    require(_end > now);\n    require(_end > start);\n    require(_end > end);\n\n    end = _end;\n  }\n\n  /**\n   * @dev Allow owner to change the multisig wallet\n   * @param _vault the new address of the multisig wallet\n   */\n  function setVault(address _vault) public onlyOwner {\n    require(_vault != 0x0);\n\n    vault = _vault;    \n  }\n\n  /**\n   * @dev Allow owner to add to the whitelist\n   * @param _addresses array of addresses to add to the whitelist\n   */\n  function whitelistAdd(address[] _addresses) public onlyOwner {\n    for (uint i=0; i<_addresses.length; i++) {\n      Participant storage p = participants[ _addresses[i] ];\n      p.whitelist = true;\n      p.remaining = 15 ether;\n    }\n  }\n\n  /**\n   * @dev Allow owner to remove from the whitelist\n   * @param _addresses array of addresses to remove from the whitelist\n   */\n  function whitelistRemove(address[] _addresses) public onlyOwner {\n    for (uint i=0; i<_addresses.length; i++) {\n      delete participants[ _addresses[i] ];\n    }\n  }\n\n  /**\n   * @dev Fallback function which buys tokens when sent ether\n   */\n  function() external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev Apply our fixed buy rate and verify we are not sold out.\n   * @param eth the amount of ether being used to purchase tokens.\n   */\n  function _allocateTokens(uint256 eth) private view returns(uint256 tokens) {\n    tokens = crowdsale_eth_to_zilla.mul(eth);\n    require( zilla_remaining >= tokens );\n  }\n\n  /**\n   * @dev Apply our fixed presale rate and verify we are not sold out.\n   * @param eth the amount of ether used to purchase presale tokens.\n   */\n  function _allocatePresaleTokens(uint256 eth) private view returns(uint256 tokens) {\n    tokens = presale_eth_to_zilla.mul(eth);\n    require( zilla_remaining >= tokens );\n  }\n\n  /**\n   * @dev Transfer tokens to the recipient and update our token availability.\n   * @param recipient the recipient to receive tokens.\n   * @param eth the amount of Ethereum spent.\n   * @param zla the amount of Zilla Tokens received.\n   */\n  function _transferTokens(address recipient, uint256 eth, uint256 zla) private {\n    require( token.crowdsaleTransfer( recipient, zla ) );\n    zilla_remaining = zilla_remaining.sub( zla );\n    TokenSold(recipient, eth, zla);\n  }\n\n  /**\n   * @dev Allows the owner to grant presale participants their tokens.\n   * @param recipient the recipient to receive tokens. \n   * @param eth the amount of ether from the presale.\n   */\n  function _grantPresaleTokens(address recipient, uint256 eth) private {\n    uint256 tokens = _allocatePresaleTokens(eth);\n    _transferTokens( recipient, eth, tokens );\n  }\n\n  /**\n   * @dev Allows anyone to create tokens by depositing ether.\n   * @param recipient the recipient to receive tokens. \n   */\n  function buyTokens(address recipient) public isRunning payable {\n    Participant storage p = participants[ recipient ];    \n    require( p.whitelist );\n    // check for the first session buy limits\n    if( unlimited > now ) {\n      require( p.remaining >= msg.value );\n      p.remaining.sub( msg.value );\n    }\n    uint256 tokens = _allocateTokens(msg.value);\n    require( vault.send(msg.value) );\n    _transferTokens( recipient, msg.value, tokens );\n  }\n\n  /**\n   * @dev Allows owner to transfer tokens to any address.\n   * @param recipient is the address to receive tokens. \n   * @param zla is the amount of Zilla to transfer\n   */\n  function grantTokens(address recipient, uint256 zla) public isStarted onlyOwner {\n    require( zilla_remaining >= zla );\n    _transferTokens( recipient, 0, zla );\n  }\n\n  /**\n   * @dev Allows the owner to grant presale participants their tokens.\n   * @param recipients array of recipients to receive tokens. \n   * @param eths array of ether from the presale.\n   */\n  function grantPresaleTokens(address[] recipients, uint256[] eths) public isStarted onlyOwner {\n    require( recipients.length == eths.length );\n    for (uint i=0; i<recipients.length; i++) {\n      _grantPresaleTokens( recipients[i], eths[i] );\n    }\n  }\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"crowdsaleTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "606060405260408051908101604052600b81527f5a696c6c6120546f6b656e0000000000000000000000000000000000000000006020820152600490805161004b9291602001906100f6565b5060408051908101604052600381527f5a4c410000000000000000000000000000000000000000000000000000000000602082015260059080516100939291602001906100f6565b5060126006556a31a17e847807b1bc00000060075534156100b357600080fd5b60038054600160a060020a03191633600160a060020a0316908117909155600754600081815591825260016020526040909120556008805460ff19169055610191565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061013757805160ff1916838001178555610164565b82800160010185558215610164579182015b82811115610164578251825591602001919060010190610149565b50610170929150610174565b5090565b61018e91905b80821115610170576000815560010161017a565b90565b610b82806101a06000396000f3006060604052600436106100f05763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100f5578063095ea7b31461017f57806318160ddd146101b557806323b872dd146101da5780632e5b4c4314610202578063313ce56714610217578063378dc3dc1461022a578063661884631461023d57806369dd45241461025f57806370a08231146102815780638da5cb5b146102a057806395d89b41146102cf578063a9059cbb146102e2578063d73dd62314610304578063dd62ed3e14610326578063f2fde38b1461034b578063f5ac9db61461036a575b600080fd5b341561010057600080fd5b61010861037d565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561014457808201518382015260200161012c565b50505050905090810190601f1680156101715780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018a57600080fd5b6101a1600160a060020a036004351660243561041b565b604051901515815260200160405180910390f35b34156101c057600080fd5b6101c8610443565b60405190815260200160405180910390f35b34156101e557600080fd5b6101a1600160a060020a0360043581169060243516604435610449565b341561020d57600080fd5b610215610473565b005b341561022257600080fd5b6101c86104ad565b341561023557600080fd5b6101c86104b3565b341561024857600080fd5b6101a1600160a060020a03600435166024356104b9565b341561026a57600080fd5b6101a1600160a060020a03600435166024356104da565b341561028c57600080fd5b6101c8600160a060020a0360043516610512565b34156102ab57600080fd5b6102b361052d565b604051600160a060020a03909116815260200160405180910390f35b34156102da57600080fd5b61010861053c565b34156102ed57600080fd5b6101a1600160a060020a03600435166024356105a7565b341561030f57600080fd5b6101a1600160a060020a03600435166024356105be565b341561033157600080fd5b6101c8600160a060020a03600435811690602435166105df565b341561035657600080fd5b610215600160a060020a036004351661060a565b341561037557600080fd5b6101a16106a5565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104135780601f106103e857610100808354040283529160200191610413565b820191906000526020600020905b8154815290600101906020018083116103f657829003601f168201915b505050505081565b60085460009060ff16151560011461043257600080fd5b61043c83836106ae565b9392505050565b60005481565b60085460009060ff16151560011461046057600080fd5b61046b84848461071a565b949350505050565b60035433600160a060020a0390811691161461048e57600080fd5b60085460ff161561049e57600080fd5b6008805460ff19166001179055565b60065481565b60075481565b60085460009060ff1615156001146104d057600080fd5b61043c838361089c565b60035460009033600160a060020a039081169116146104f857600080fd5b60085460ff161561050857600080fd5b61043c8383610996565b600160a060020a031660009081526001602052604090205490565b600354600160a060020a031681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104135780601f106103e857610100808354040283529160200191610413565b60085460009060ff16151560011461050857600080fd5b60085460009060ff1615156001146105d557600080fd5b61043c8383610a91565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461062557600080fd5b600160a060020a038116151561063a57600080fd5b600354600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60085460ff1681565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000600160a060020a038316151561073157600080fd5b600160a060020a03841660009081526001602052604090205482111561075657600080fd5b600160a060020a038085166000908152600260209081526040808320339094168352929052205482111561078957600080fd5b600160a060020a0384166000908152600160205260409020546107b2908363ffffffff610b3516565b600160a060020a0380861660009081526001602052604080822093909355908516815220546107e7908363ffffffff610b4716565b600160a060020a0380851660009081526001602090815260408083209490945587831682526002815283822033909316825291909152205461082f908363ffffffff610b3516565b600160a060020a03808616600081815260026020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156108f957600160a060020a033381166000908152600260209081526040808320938816835292905290812055610930565b610909818463ffffffff610b3516565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b6000600160a060020a03831615156109ad57600080fd5b600160a060020a0333166000908152600160205260409020548211156109d257600080fd5b600160a060020a0333166000908152600160205260409020546109fb908363ffffffff610b3516565b600160a060020a033381166000908152600160205260408082209390935590851681522054610a30908363ffffffff610b4716565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610ac9908363ffffffff610b4716565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600082821115610b4157fe5b50900390565b60008282018381101561043c57fe00a165627a7a723058205b75c93dfcf1fd428a3aec37e405d1d43d16082a369398a039807d6feb4228af0029"
}