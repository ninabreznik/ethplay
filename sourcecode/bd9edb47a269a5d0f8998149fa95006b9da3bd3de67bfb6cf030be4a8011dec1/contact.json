{
  "address": "0x908d81a4961c4a40b38c91f16d216c6307a89954",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "V12Voting",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-31\n*/\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: contracts/MerkleProof.sol\n\npragma solidity 0.5.8;\n\n/**\n * @title MerkleProof\n * @dev Merkle proof verification based on\n * https://github.com/ameensol/merkle-tree-solidity/blob/master/src/MerkleProof.sol\n */\nlibrary MerkleProof {\n    /**\n    * @dev Verifies a Merkle proof proving the existence of a leaf in a Merkle tree. Assumes that each pair of leaves\n    * and each pair of pre-images are sorted.\n    * @param proof Merkle proof containing sibling hashes on the branch from the leaf to the root of the Merkle tree\n    * @param root Merkle root\n    * @param leaf Leaf of Merkle tree\n    */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash < proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n\n// File: contracts/V12Voting.sol\n\npragma solidity 0.5.8;\n\n\n\n/**\n * @title VGT (Vault Guardian Token) voting smart contract.\n * @author https://peppersec.com\n * @notice This smart contract implements voting based on ERC20 token. One token equals one vote.\n * The voting goes up to date chosen by a voting creator. During the voting time, each token holder\n * can cast for one of three options: \"No Change\", \"Dual token\" and \"Transaction Split\". Read more\n * about options at https://voting.vault12.com.\n * @dev Voting creator deploys the contract Merkle Tree root and expiration date.\n * And then, each VGT holder whose included in the Merkle Tree can vote via `vote` method.\n */\ncontract V12Voting {\n    using SafeMath for uint256;\n\n    // soliditySha3('No Change')\n    bytes32 constant public NO_CHANGE = 0x9c7e52ebd85b19725c2fa45fea14ef32d24aa2665b667e9be796bb2811b936fc;\n    // soliditySha3('Dual Token')\n    bytes32 constant public DUAL_TOKEN = 0x0524f98cf62601e849aa545adff164c0f9b0303697043eddaf6d59d4fb4e4736;\n    // soliditySha3('Transaction Split')\n    bytes32 constant public TX_SPLIT = 0x84501b56c2648bdca07999c3b30e6edba0fa8c3178028b395e92f9bb53b4beba;\n\n    /// @dev The voting offers tree options only. Read more here https://voting.vault12.com\n    mapping(bytes32 => bool) public votingOption;\n\n    /// @dev IPFS hash of the published Merkle Tree that contains VGT holders.\n    string public ipfs;\n\n    /// @dev Stores vote of each holder.\n    mapping (address => bytes32) public votes;\n    mapping (bytes32 => uint256) public votingResult;\n\n    /// @dev Date up to which votes are accepted (timestamp).\n    uint256 public expirationDate;\n\n    /// @dev Merkle Tree root loaded by the voting creator, which is base for voters' proofs.\n    bytes32 public merkleTreeRoot;\n\n    /// @dev The event is fired when a holder makes a choice.\n    event NewVote(address indexed who, string vote, uint256 amount);\n\n    /**\n    * @dev V12Voting contract constructor.\n    * @param _merkleTreeRoot Merkle Tree root of token holders.\n    * @param _ipfs IPFS hash where the Merkle Tree is stored.\n    * @param _expirationDate Date up to which votes are accepted (timestamp).\n    */\n    constructor(\n      bytes32 _merkleTreeRoot,\n      string memory _ipfs,\n      uint256 _expirationDate\n    ) public {\n        require(_expirationDate > block.timestamp, \"wrong expiration date\");\n        merkleTreeRoot = _merkleTreeRoot;\n        ipfs = _ipfs;\n        expirationDate = _expirationDate;\n\n        votingOption[NO_CHANGE] = true;\n        votingOption[DUAL_TOKEN] = true;\n        votingOption[TX_SPLIT] = true;\n    }\n\n    /**\n    * @dev V12Voting vote function.\n    * @param _vote Holder's vote decision.\n    * @param _amount Holder's voting power (VGT token amount).\n    * @param _proof Array of hashes that proofs that a sender is in the Merkle Tree.\n    */\n    function vote(string calldata _vote, uint256 _amount, bytes32[] calldata _proof) external {\n        require(canVote(msg.sender), \"already voted\");\n        require(isVotingOpen(), \"voting finished\");\n        bytes32 hashOfVote = keccak256(abi.encodePacked(_vote));\n        require(votingOption[hashOfVote], \"invalid vote option\");\n        bytes32 _leaf = keccak256(abi.encodePacked(keccak256(abi.encode(msg.sender, _amount))));\n        require(verify(_proof, merkleTreeRoot, _leaf), \"the proof is wrong\");\n\n        votes[msg.sender] = hashOfVote;\n        votingResult[hashOfVote] = votingResult[hashOfVote].add(_amount);\n\n        emit NewVote(msg.sender, _vote, _amount);\n    }\n\n    /**\n    * @dev Returns current results of the voting. All the percents have 2 decimal places.\n    * e.g. value 1337 has to be interpreted as 13.37%\n    * @param _expectedVotingAmount Total amount of tokens of all the holders.\n    * @return noChangePercent Percent of votes casted for \"No Change\" option.\n    * @return noChangeVotes Amount of tokens casted for \"No Change\" option.\n    * @return dualTokenPercent Percent of votes casted for \"Dual Token\" option.\n    * @return dualTokenVotes Amount of tokens casted for \"Dual Token\" option.\n    * @return txSplitPercent Percent of votes casted for \"Transaction Split\" option.\n    * @return txSplitVotes Amount of tokens casted for \"Transaction Split\" option.\n    * @return totalVoted Total amount of tokens voted.\n    * @return turnoutPercent Percent of votes casted so far.\n    */\n    function votingPercentages(uint256 _expectedVotingAmount) external view returns(\n        uint256 noChangePercent,\n        uint256 noChangeVotes,\n        uint256 dualTokenPercent,\n        uint256 dualTokenVotes,\n        uint256 txSplitPercent,\n        uint256 txSplitVotes,\n        uint256 totalVoted,\n        uint256 turnoutPercent\n    ) {\n        noChangeVotes = votingResult[NO_CHANGE];\n        dualTokenVotes = votingResult[DUAL_TOKEN];\n        txSplitVotes = votingResult[TX_SPLIT];\n        totalVoted = noChangeVotes.add(dualTokenVotes).add(txSplitVotes);\n\n        uint256 oneHundredPercent = 10000;\n        noChangePercent = noChangeVotes.mul(oneHundredPercent).div(totalVoted);\n        dualTokenPercent = dualTokenVotes.mul(oneHundredPercent).div(totalVoted);\n        txSplitPercent = oneHundredPercent.sub(noChangePercent).sub(dualTokenPercent);\n\n        turnoutPercent = totalVoted.mul(oneHundredPercent).div(_expectedVotingAmount);\n\n    }\n\n    /**\n    * @dev Returns true if the voting is open.\n    * @return if the holders still can vote.\n    */\n    function isVotingOpen() public view returns(bool) {\n        return block.timestamp <= expirationDate;\n    }\n\n    /**\n    * @dev Returns true if the holder has not voted yet. Notice, it does not check\n    the `_who` in the Merkle Tree.\n    * @param _who Holder address to check.\n    * @return if the holder can vote.\n    */\n    function canVote(address _who) public view returns(bool) {\n        return votes[_who] == bytes32(0);\n    }\n\n    /**\n    * @dev Allows to verify Merkle Tree proof.\n    * @param _proof Array of hashes that proofs that the `_leaf` is in the Merkle Tree.\n    * @param _root Merkle Tree root.\n    * @param _leaf Bottom element of the Merkle Tree.\n    * @return verification result (true of false).\n    */\n    function verify(bytes32[] memory _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\n        return MerkleProof.verify(_proof, _root, _leaf);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_vote\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_expectedVotingAmount\",\"type\":\"uint256\"}],\"name\":\"votingPercentages\",\"outputs\":[{\"name\":\"noChangePercent\",\"type\":\"uint256\"},{\"name\":\"noChangeVotes\",\"type\":\"uint256\"},{\"name\":\"dualTokenPercent\",\"type\":\"uint256\"},{\"name\":\"dualTokenVotes\",\"type\":\"uint256\"},{\"name\":\"txSplitPercent\",\"type\":\"uint256\"},{\"name\":\"txSplitVotes\",\"type\":\"uint256\"},{\"name\":\"totalVoted\",\"type\":\"uint256\"},{\"name\":\"turnoutPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votingOption\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"name\":\"_root\",\"type\":\"bytes32\"},{\"name\":\"_leaf\",\"type\":\"bytes32\"}],\"name\":\"verify\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DUAL_TOKEN\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expirationDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TX_SPLIT\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ipfs\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"votingResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"merkleTreeRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isVotingOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NO_CHANGE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_merkleTreeRoot\",\"type\":\"bytes32\"},{\"name\":\"_ipfs\",\"type\":\"string\"},{\"name\":\"_expirationDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vote\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewVote\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051610d73380380610d738339810180604052606081101561003357600080fd5b81516020830180519193928301929164010000000081111561005457600080fd5b8201602081018481111561006757600080fd5b815164010000000081118282018710171561008157600080fd5b505060209091015190925090504281116100fc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f77726f6e672065787069726174696f6e20646174650000000000000000000000604482015290519081900360640190fd5b600583905581516101149060019060208501906101cc565b506004555050600060208190527ff67e439ec95a7fa952a7d724344c620f3df2028b4c7cafc2a0b2eeb3795ddfb88054600160ff1991821681179092557fbd6e31e187828f866dd8f072d63d88b6bc041ad03b0ddbd6a73e8421871df27e80548216831790557f84501b56c2648bdca07999c3b30e6edba0fa8c3178028b395e92f9bb53b4beba9092527f99c0192e359c631fa81b0b24257127c61980a14266fd7abe182dd9ed2a1999198054909216179055610267565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061020d57805160ff191683800117855561023a565b8280016001018555821561023a579182015b8281111561023a57825182559160200191906001019061021f565b5061024692915061024a565b5090565b61026491905b808211156102465760008155600101610250565b90565b610afd806102766000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063d56de55c1161008c578063ec9e594011610066578063ec9e5940146103e1578063f716aee9146103fe578063fa7f1bae14610406578063ff302aa01461040e576100ea565b8063d56de55c14610336578063d7959cf91461033e578063d8bff5a5146103bb576100ea565b80635a9a49c7116100c85780635a9a49c71461024657806379706467146102ee5780638f62048714610308578063adfaa72e14610310576100ea565b8063171a7590146100ef5780633aa22b59146101b75780635258a02714610215575b600080fd5b6101b56004803603606081101561010557600080fd5b81019060208101813564010000000081111561012057600080fd5b82018360208201111561013257600080fd5b8035906020019184600183028401116401000000008311171561015457600080fd5b9193909282359260408101906020013564010000000081111561017657600080fd5b82018360208201111561018857600080fd5b803590602001918460208302840111640100000000831117156101aa57600080fd5b509092509050610416565b005b6101d4600480360360208110156101cd57600080fd5b50356106fb565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b6102326004803603602081101561022b57600080fd5b5035610836565b604080519115158252519081900360200190f35b6102326004803603606081101561025c57600080fd5b81019060208101813564010000000081111561027757600080fd5b82018360208201111561028957600080fd5b803590602001918460208302840111640100000000831117156102ab57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020013561084b565b6102f6610860565b60408051918252519081900360200190f35b6102f6610884565b6102326004803603602081101561032657600080fd5b50356001600160a01b031661088a565b6102f66108a6565b6103466108ca565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610380578181015183820152602001610368565b50505050905090810190601f1680156103ad5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102f6600480360360208110156103d157600080fd5b50356001600160a01b0316610957565b6102f6600480360360208110156103f757600080fd5b5035610969565b6102f661097b565b610232610981565b6102f661098a565b61041f3361088a565b6104735760408051600160e51b62461bcd02815260206004820152600d60248201527f616c726561647920766f74656400000000000000000000000000000000000000604482015290519081900360640190fd5b61047b610981565b6104cf5760408051600160e51b62461bcd02815260206004820152600f60248201527f766f74696e672066696e69736865640000000000000000000000000000000000604482015290519081900360640190fd5b60008585604051602001808383808284376040805191909301818103601f1901825283528051602091820120600081815291829052929020549195505060ff1692506105689150505760408051600160e51b62461bcd02815260206004820152601360248201527f696e76616c696420766f7465206f7074696f6e00000000000000000000000000604482015290519081900360640190fd5b60408051336020808301919091528183018790528251808303840181526060830184528051908201206080808401919091528351808403909101815260a0830180855281519183019190912060c09287028085018401909552868252936105f29391928892889283929091019084908082843760009201919091525050600554915084905061084b565b6106465760408051600160e51b62461bcd02815260206004820152601260248201527f7468652070726f6f662069732077726f6e670000000000000000000000000000604482015290519081900360640190fd5b3360009081526002602090815260408083208590558483526003909152902054610676908663ffffffff6109ae16565b600083815260036020908152604091829020929092558051918201879052808252810187905233907e4587ec768055d74bec3581952a1617e6e22ea1b1cd382eef99abe5958a5ca2908990899089908060608101858580828437600083820152604051601f909101601f1916909201829003965090945050505050a250505050505050565b60036020527fa6e555a0b65368472975e2c4651e252393584c3f058751bbcbce9df68340689b547f547f129c797a3c344d1810710121162ddc1653e58a0b068e03ee03a68bf5932b547f84501b56c2648bdca07999c3b30e6edba0fa8c3178028b395e92f9bb53b4beba60009081527f7b675a57c9dc5ea3326e1061834948b27493e2e6dd7b8dc989b9c370d1e99587549092918391829081806107b5836107a9898863ffffffff6109ae16565b9063ffffffff6109ae16565b91506127106107da836107ce8a8463ffffffff6109c916565b9063ffffffff6109f016565b98506107f0836107ce888463ffffffff6109c916565b965061081287610806838c63ffffffff610a1216565b9063ffffffff610a1216565b94506108288a6107ce858463ffffffff6109c916565b915050919395975091939597565b60006020819052908152604090205460ff1681565b6000610858848484610a27565b949350505050565b7f0524f98cf62601e849aa545adff164c0f9b0303697043eddaf6d59d4fb4e473681565b60045481565b6001600160a01b03166000908152600260205260409020541590565b7f84501b56c2648bdca07999c3b30e6edba0fa8c3178028b395e92f9bb53b4beba81565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561094f5780601f106109245761010080835404028352916020019161094f565b820191906000526020600020905b81548152906001019060200180831161093257829003601f168201915b505050505081565b60026020526000908152604090205481565b60036020526000908152604090205481565b60055481565b60045442111590565b7f9c7e52ebd85b19725c2fa45fea14ef32d24aa2665b667e9be796bb2811b936fc81565b6000828201838110156109c057600080fd5b90505b92915050565b6000826109d8575060006109c3565b828202828482816109e557fe5b04146109c057600080fd5b60008082116109fe57600080fd5b6000828481610a0957fe5b04949350505050565b600082821115610a2157600080fd5b50900390565b600081815b8551811015610ac6576000868281518110610a4357fe5b6020026020010151905080831015610a8b5782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250610abd565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b50600101610a2c565b50909214939250505056fea165627a7a72305820ea8e4ab01df2372981c8adb249010130a284088785ab579adb566c793718185e002946a926e07c0a26911817ab0da37e5c356e4c7b86308cf0c97a9854691e9bf4f20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000005d0040bc000000000000000000000000000000000000000000000000000000000000002e516d58586a44456f466e346e4770784d51484471587967706f643269525744594250336e6571475161666a785278000000000000000000000000000000000000",
  "constructorArguments": "46a926e07c0a26911817ab0da37e5c356e4c7b86308cf0c97a9854691e9bf4f20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000005d0040bc000000000000000000000000000000000000000000000000000000000000002e516d58586a44456f466e346e4770784d51484471587967706f643269525744594250336e6571475161666a785278000000000000000000000000000000000000"
}