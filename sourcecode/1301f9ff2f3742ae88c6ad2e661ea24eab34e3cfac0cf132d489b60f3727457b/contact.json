{
  "address": "0xaf9c1035fad1e520161e5ea5b3701f1e48d319fa",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ZodiaqToken",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-21\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableByOwnerToken is BasicToken, Ownable {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(address _who, uint256 _value) public onlyOwner {\n    _burn(_who, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\ncontract MultiTransferableToken is BasicToken {\n    function multiTransfer(address[] _to, uint256[] _values) public returns (bool) {\n        require(_to.length == _values.length);\n        uint sum = 0;\n        uint i;\n        for (i = 0; i < _values.length; i++) {\n            sum = sum.add(_values[i]);\n        }\n        require(sum <= balances[msg.sender]);\n    \n        for (i = 0; i < _to.length; i++) {\n            require(_to[i] != address(0));\n            \n            balances[_to[i]] = balances[_to[i]].add(_values[i]);\n            emit Transfer(msg.sender, _to[i], _values[i]);\n        }\n        \n        balances[msg.sender] = balances[msg.sender].sub(sum);\n        return true;\n    }\n}\n\ncontract ZodiaqToken is StandardToken, MintableToken, BurnableByOwnerToken, MultiTransferableToken {\n    string public name = 'Zodiaq Token';\n    string public symbol = 'ZOD';\n    uint8 public decimals = 8;\n}\n\ncontract Managable is Ownable {\n    address public manager = 0x0;\n\n    event ManagerIsChanged(address indexed previousManager, address indexed newManager);\n    \n    modifier onlyManager() {\n        require(msg.sender == owner || msg.sender == manager);\n        _;\n    }\n\n    function changeManager(address newManager) public onlyOwner {\n        manager = newManager;\n        \n        emit ManagerIsChanged(manager, newManager);\n    }\n}\n\nlibrary SafeMathExtended {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n    function mulToFraction(uint256 number, uint256 numerator, uint256 denominator) internal pure returns (uint256) {\n        return div(mul(number, numerator), denominator);\n    }\n}\n\ncontract ZodiaqDistribution is Managable {\n    using SafeMathExtended for uint256;\n\n    ZodiaqToken public token;\n    uint256 public BASE = 10 ** 8;\n\n    address public bountyOwner;\n    address public referralProgramOwner;\n    address public team;\n    address public partners;\n\n    bool    public isICOFinished = false;\n    uint256 public icoFinishedDate = 0;\n\n    uint256 public teamReward = 0;\n    uint256 public partnersReward = 0;\n\n    constructor(address zodiaqToken) public {\n        require(zodiaqToken != 0x0);\n        token = ZodiaqToken(zodiaqToken);\n    }\n    \n    modifier isICORunning {\n        require(!isICOFinished);\n        _;\n    }\n    \n    function init(address _bountyOwner, address _referralProgramOwner, address _team, address _partners) public onlyOwner {\n        // can be called only once\n        require(bountyOwner == 0x0);\n\n        require(_bountyOwner != 0x0);\n        require(_referralProgramOwner != 0x0);\n        require(_team != 0x0);\n        require(_partners != 0x0);\n        \n        bountyOwner = _bountyOwner;\n        referralProgramOwner = _referralProgramOwner;\n        team = _team;\n        partners = _partners;\n        \n        token.mint(address(this), 240000000 * BASE);\n        token.mint(bountyOwner,          9000000 * BASE);\n        token.mint(referralProgramOwner, 6000000 * BASE);\n    }\n    \n    function sendTokensTo(address[] recipients, uint256[] values) public onlyManager isICORunning {\n        require(recipients.length == values.length);\n        for (uint256 i = 0; i < recipients.length; i++) {\n            assert(token.transfer(recipients[i], values[i]));\n        }\n    }\n    \n    function stopICO() public onlyOwner isICORunning {\n        token.burn(address(this), token.balanceOf(address(this)));\n        token.burn(referralProgramOwner, token.balanceOf(referralProgramOwner));\n        token.burn(bountyOwner, token.balanceOf(bountyOwner));\n\n        uint256 totalSupply = token.totalSupply().mulToFraction(100, 85);\n        teamReward = totalSupply.mulToFraction(10, 100);\n        partnersReward = totalSupply.mulToFraction(5, 100);\n\n        token.mint(address(this), teamReward + partnersReward);\n\n        token.finishMinting();\n\n        isICOFinished = true;\n        icoFinishedDate = now;\n    }\n\n    function payPartners() public {\n        require(partnersReward != 0);\n        uint secondsInYear = 31536000;\n        require(icoFinishedDate + secondsInYear / 2 < now);\n        assert(token.transfer(partners, partnersReward));\n        partnersReward = 0;\n    }\n\n    function payTeam() public {\n        require(teamReward != 0);\n        uint secondsInYear = 31536000;\n        require(icoFinishedDate + secondsInYear * 2 < now);\n        assert(token.transfer(team, teamReward));\n        teamReward = 0;\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6003805460a060020a60ff021916905560c0604052600c60808190527f5a6f6469617120546f6b656e000000000000000000000000000000000000000060a090815261004e91600491906100c3565b506040805180820190915260038082527f5a4f4400000000000000000000000000000000000000000000000000000000006020909201918252610093916005916100c3565b506006805460ff1916600817905560038054600160a060020a033316600160a060020a031990911617905561015e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010457805160ff1916838001178555610131565b82800160010185558215610131579182015b82811115610131578251825591602001919060010190610116565b5061013d929150610141565b5090565b61015b91905b8082111561013d5760008155600101610147565b90565b610fff806200016e6000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461010057806306fdde0314610129578063095ea7b3146101b357806318160ddd146101d75780631e89d545146101fe57806323b872dd1461028c578063313ce567146102b657806340c10f19146102e1578063661884631461030557806370a08231146103295780637d64bcb41461034a5780638da5cb5b1461035f57806395d89b41146103905780639dc29fac146103a5578063a9059cbb146103cb578063d73dd623146103ef578063dd62ed3e14610413578063f2fde38b1461043a575b600080fd5b34801561010c57600080fd5b5061011561045b565b604080519115158252519081900360200190f35b34801561013557600080fd5b5061013e61047c565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610178578181015183820152602001610160565b50505050905090810190601f1680156101a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101bf57600080fd5b50610115600160a060020a036004351660243561050a565b3480156101e357600080fd5b506101ec610574565b60408051918252519081900360200190f35b34801561020a57600080fd5b506040805160206004803580820135838102808601850190965280855261011595369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061057a9650505050505050565b34801561029857600080fd5b50610115600160a060020a036004358116906024351660443561077d565b3480156102c257600080fd5b506102cb6108eb565b6040805160ff9092168252519081900360200190f35b3480156102ed57600080fd5b50610115600160a060020a03600435166024356108f4565b34801561031157600080fd5b50610115600160a060020a0360043516602435610a01565b34801561033557600080fd5b506101ec600160a060020a0360043516610afa565b34801561035657600080fd5b50610115610b15565b34801561036b57600080fd5b50610374610bbf565b60408051600160a060020a039092168252519081900360200190f35b34801561039c57600080fd5b5061013e610bce565b3480156103b157600080fd5b506103c9600160a060020a0360043516602435610c29565b005b3480156103d757600080fd5b50610115600160a060020a0360043516602435610c52565b3480156103fb57600080fd5b50610115600160a060020a0360043516602435610d39565b34801561041f57600080fd5b506101ec600160a060020a0360043581169060243516610ddb565b34801561044657600080fd5b506103c9600160a060020a0360043516610e06565b60035474010000000000000000000000000000000000000000900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105025780601f106104d757610100808354040283529160200191610502565b820191906000526020600020905b8154815290600101906020018083116104e557829003601f168201915b505050505081565b600160a060020a03338116600081815260026020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60015490565b60008060008351855114151561058f57600080fd5b5060009050805b83518110156105d1576105c784828151811015156105b057fe5b60209081029091010151839063ffffffff610e9f16565b9150600101610596565b600160a060020a0333166000908152602081905260409020548211156105f657600080fd5b5060005b845181101561073057845160009086908390811061061457fe5b60209081029091010151600160a060020a0316141561063257600080fd5b61068d848281518110151561064357fe5b90602001906020020151600080888581518110151561065e57fe5b6020908102909101810151600160a060020a03168252810191909152604001600020549063ffffffff610e9f16565b600080878481518110151561069e57fe5b6020908102909101810151600160a060020a031682528101919091526040016000205584518590829081106106cf57fe5b90602001906020020151600160a060020a031633600160a060020a0316600080516020610fb4833981519152868481518110151561070957fe5b906020019060200201516040518082815260200191505060405180910390a36001016105fa565b600160a060020a033316600090815260208190526040902054610759908363ffffffff610eb216565b33600160a060020a0316600090815260208190526040902055506001949350505050565b6000600160a060020a038316151561079457600080fd5b600160a060020a0384166000908152602081905260409020548211156107b957600080fd5b600160a060020a03808516600090815260026020908152604080832033909416835292905220548211156107ec57600080fd5b600160a060020a038416600090815260208190526040902054610815908363ffffffff610eb216565b600160a060020a03808616600090815260208190526040808220939093559085168152205461084a908363ffffffff610e9f16565b600160a060020a0380851660009081526020818152604080832094909455878316825260028152838220339093168252919091522054610890908363ffffffff610eb216565b600160a060020a03808616600081815260026020908152604080832033861684528252918290209490945580518681529051928716939192600080516020610fb4833981519152929181900390910190a35060019392505050565b60065460ff1681565b60035460009033600160a060020a0390811691161461091257600080fd5b60035474010000000000000000000000000000000000000000900460ff161561093a57600080fd5b60015461094d908363ffffffff610e9f16565b600155600160a060020a038316600090815260208190526040902054610979908363ffffffff610e9f16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a03851691600091600080516020610fb48339815191529181900360200190a350600192915050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610a5e57600160a060020a033381166000908152600260209081526040808320938816835292905290812055610a95565b610a6e818463ffffffff610eb216565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902054825190815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60035460009033600160a060020a03908116911614610b3357600080fd5b60035474010000000000000000000000000000000000000000900460ff1615610b5b57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105025780601f106104d757610100808354040283529160200191610502565b60035433600160a060020a03908116911614610c4457600080fd5b610c4e8282610ec4565b5050565b6000600160a060020a0383161515610c6957600080fd5b600160a060020a033316600090815260208190526040902054821115610c8e57600080fd5b600160a060020a033316600090815260208190526040902054610cb7908363ffffffff610eb216565b600160a060020a033381166000908152602081905260408082209390935590851681522054610cec908363ffffffff610e9f16565b600160a060020a0380851660008181526020818152604091829020949094558051868152905191933390931692600080516020610fb483398151915292918290030190a350600192915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610d71908363ffffffff610e9f16565b600160a060020a0333811660008181526002602090815260408083209489168084529482529182902085905581519485529051929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a03908116911614610e2157600080fd5b600160a060020a0381161515610e3657600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b81810182811015610eac57fe5b92915050565b600082821115610ebe57fe5b50900390565b600160a060020a038216600090815260208190526040902054811115610ee957600080fd5b600160a060020a038216600090815260208190526040902054610f12908263ffffffff610eb216565b600160a060020a038316600090815260208190526040902055600154610f3e908263ffffffff610eb216565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020610fb48339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582074fd467db232beb3cb6de09bda8a2b3dd7772a14abc6a7eb5ba1a01e02bfeb140029"
}