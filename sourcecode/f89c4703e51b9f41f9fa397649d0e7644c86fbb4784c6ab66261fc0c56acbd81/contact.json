{
  "address": "0x48da10957081fca6947b369f67fe1bee1dc3010c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "EtherDrop",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-13\n*/\n\npragma solidity ^0.4.20;\n\n\ncontract Ownable {\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n\taddress public owner;\n\n    constructor() public { owner = msg.sender; }\n\n    modifier onlyOwner() { require(msg.sender == owner); _; }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract Pausable is Ownable {\n\n    event Pause();\n\t\n    event Unpause();\n\n    bool public paused = false;\n\n    modifier whenNotPaused() { require(!paused); _; }\n\n    modifier whenPaused() { require(paused); _; }\n\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract EtherDrop is Pausable {\n\n    /*\n     * subscription ticket price\n     */\n    uint priceWei;\n\n    /*\n     * subscription queue size: power of 10\n     */\n\tuint qMax;\n    \n\t/*\n     * Queue Order - Log10 qMax\n     * e.g. random [0 to 999] is of order 3 => rand = 100*x + 10*y + z\n     */\n\t uint dMax;\n\n\t/*\n     * log a new subscription\n     */\n    event NewSubscriber(address indexed addr, uint indexed round, uint place);\n    \n\t/*\n     * log a new round - drop out\n     */\n\tevent NewDropOut(address indexed addr, uint indexed round, uint place, uint price);\n\t\n\t/*\n     * round lock - future block hash lock\n     */\n\tuint _lock;\n\t\n\t/*\n     * last round block\n     */\n\tuint _block;\n    \n\t/*\n     * active round\n     */\n\tuint _round; \n\t\n    /*\n     * team support\n     */\n    uint _collectibles;\n\t\n\t/*\n     * active subscription queue\n     */\n\taddress[] _queue;\n\t\n    /*\n     * last user subscriptions\n     */\n\tmapping(address => uint) _userRound;\n\t\n\t/*\n\t * starting by round one\n\t * set round block\n\t */\n\tconstructor(uint order, uint price) public {\n\t\t\n\t\t/* \n\t\t * queue order and price limits \n\t\t */\n\t\trequire(0 < order && order < 4 && price >= 1e16 && price <= 1e18);\n\t\t\n\t\t/*\n\t\t * queue size\n\t\t */\n\t\tdMax = order;\n\t\tqMax = 10**order;\n\n        /*\n\t     * subscription price\n\t     */\n\t    priceWei = price;\n\t\t\n\t\t/*\n\t\t * initial round & block start\n\t\t */\n\t    _round = 1;\n\t    _block = block.number;\n\t}\n\t\n\t/*\n\t * returns current drop stats: [ round, position, max, price, block, lock]\n\t */\n    function stat() public view returns (uint round, uint position, uint max, \n        uint price, uint blok, uint lock) {\n        return ( _round - (_queue.length == qMax ? 1 : 0), _queue.length, qMax, \n            priceWei, _block, _lock);\n    }\n\t\n\t/*\n\t * returns user's stats: [last_subscription_round, current_drop_round]\n\t */\n\tfunction userRound(address user) public view returns (uint lastRound, uint currentRound) {\n\t\treturn (_userRound[user], _round - (_queue.length == qMax ? 1 : 0));\n\t}\n\n\t/*\n\t * fallback subscription\n\t */\n    function() public payable whenNotPaused {\n\n\t\t/*\n\t\t * contracts are not allowed to participate\n\t\t */\n        require(tx.origin == msg.sender && msg.value >= priceWei);\n\t\n\t\t/*\n\t\t * unlock new round condition\n\t\t */\n\t\tif (_lock > 0 && block.number >= _lock) {\t\n\t\t\t/*\n\t\t\t * random winner ticket position\n\t\t\t * block hash number derivation\n\t\t\t */\n\t\t\tuint _r = dMax;\n            uint _winpos = 0;\n\t\t\tbytes32 _a = blockhash(_lock);\n\t\t\tfor (uint i = 31; i >= 1; i--) {\n\t\t\t\tif (uint8(_a[i]) >= 48 && uint8(_a[i]) <= 57) {\n\t\t\t\t\t_winpos = 10 * _winpos + (uint8(_a[i]) - 48);\n\t\t\t\t\tif (--_r == 0) break;\n\t\t\t\t}\n\t\t\t}\n            \n\t\t\t/*\n\t\t\t * rewards and collection\n\t\t\t */\n\t\t\tuint _reward = (qMax * priceWei * 90) / 100;\n            _collectibles += address(this).balance - _reward;\n\t\t\t_queue[_winpos].transfer(_reward);\n            \n\t\t\t/*\n\t\t\t * log ether drop event\n\t\t\t */\n\t\t\temit NewDropOut(_queue[_winpos], _round - 1, _winpos + 1, _reward);\n\t\t\t\n\t\t\t/*\n\t\t\t * update the block number\n\t\t\t */\n            _block = block.number;\n            \n            /*\n\t\t\t * reset lock\n\t\t\t */\n            _lock = 0;\n\t\t\t\n\t\t\t/*\n\t\t\t * queue reset\n\t\t\t */\n\t\t\tdelete _queue;\n        }\n\t\t/*\n\t\t * prevent round Txn(s) in one block overflow\n\t\t */\n\t\telse if (block.number + 1 == _lock) {\n\t\t\trevert();\n\t\t}\n        \n\t\t/*\n\t\t * only one address per round\n\t\t */\n\t\trequire(_userRound[msg.sender] != _round);\n\t\t\n\t\t/*\n\t\t * set address subscription flag\n\t\t */\n\t\t_userRound[msg.sender] = _round;\n\t\t\n\t\t/*\n\t\t * save subscription\n\t\t */\n        _queue.push(msg.sender);\n\n\t\t/*\n\t\t * log ticket subscription event\n\t\t */\n        emit NewSubscriber(msg.sender, _round, _queue.length);\n        \n\t\t/*\n\t\t * new round handler\n\t\t */\n        if (_queue.length == qMax) {\n            _round++;\n            _lock = block.number + 1;\n        }\n    }\n\n    /*\n\t * team R&D support\n\t */\n    function support() public onlyOwner {\n        owner.transfer(_collectibles);\n\t\t_collectibles = 0;\n    }\n}",
  "bytecode": "608060405260008060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b50604051604080610d5b8339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160001080156100a75750600482105b80156100ba5750662386f26fc100008110155b80156100ce5750670de0b6b3a76400008111155b15156100d957600080fd5b8160038190555081600a0a600281905550806001819055506001600681905550436005819055505050610c4a806101116000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630435a7451461058b578063119f8747146105d95780633f4ba83a146105f05780635c975abb146106075780638456cb59146106365780638da5cb5b1461064d578063af63066e146106a4578063f2fde38b14610702575b60008060008060008060149054906101000a900460ff161515156100b157600080fd5b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161480156100ee57506001543410155b15156100f957600080fd5b600060045411801561010d57506004544310155b156103f357600354945060009350600454409250601f91505b600182101515610278576030838360208110151561014057fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff16101580156101ee5750603983836020811015156101a257fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1611155b1561026a576030838360208110151561020357fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090040360ff1684600a0201935060008560019003955085141561026957610278565b5b818060019003925050610126565b6064605a600154600254020281151561028d57fe5b049050803073ffffffffffffffffffffffffffffffffffffffff1631036007600082825401925050819055506008848154811015156102c857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610338573d6000803e3d6000fd5b5060016006540360088581548110151561034e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f3a30c9c4406921df4a5b5fe6259ec9c954de0778dcff889e534f3b082553691d6001870184604051808381526020018281526020019250505060405180910390a3436005819055506000600481905550600860006103ee9190610bd8565b610406565b60045460014301141561040557600080fd5b5b600654600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415151561045657600080fd5b600654600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060083390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506006543373ffffffffffffffffffffffffffffffffffffffff167f22b226107ec1da0d46132d25ddafce043ecbc1da54fbdafd80c1e2300d15ce416008805490506040518082815260200191505060405180910390a3600254600880549050141561058457600660008154809291906001019190505550600143016004819055505b5050505050005b34801561059757600080fd5b506105a0610745565b60405180878152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b3480156105e557600080fd5b506105ee610793565b005b3480156105fc57600080fd5b50610605610862565b005b34801561061357600080fd5b5061061c610920565b604051808215151515815260200191505060405180910390f35b34801561064257600080fd5b5061064b610933565b005b34801561065957600080fd5b506106626109f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106b057600080fd5b506106e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a18565b604051808381526020018281526020019250505060405180910390f35b34801561070e57600080fd5b50610743600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a83565b005b60008060008060008060025460088054905014610763576000610766565b60015b60ff1660065403600880549050600254600154600554600454955095509550955095509550909192939495565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156107ee57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6007549081150290604051600060405180830381858888f19350505050158015610857573d6000803e3d6000fd5b506000600781905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108bd57600080fd5b600060149054906101000a900460ff1615156108d857600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561098e57600080fd5b600060149054906101000a900460ff161515156109aa57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460025460088054905014610a70576000610a73565b60015b60ff166006540391509150915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ade57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b1a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5080546000825590600052602060002090810190610bf69190610bf9565b50565b610c1b91905b80821115610c17576000816000905550600101610bff565b5090565b905600a165627a7a723058206e70f5e7e1bc82284b96064ad2cd60ad22eb4c6610d5b5eae5b317a7916f533100290000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002386f26fc10000"
}