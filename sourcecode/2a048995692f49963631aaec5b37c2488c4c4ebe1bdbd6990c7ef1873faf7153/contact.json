{
  "address": "0xb42f5366792ed7c08995451c1a93780b7554762b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SpinToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n\t// Public variables of the token\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals = 18;\n\t// 18 decimals is the strongly suggested default, avoid changing it\n\tuint256 public totalSupply;\n\n\t// This creates an array with all balances\n\tmapping (address => uint256) public balanceOf;\n\tmapping (address => mapping (address => uint256)) public allowance;\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t// This generates a public event on the blockchain that will notify clients\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n\t// This notifies clients about the amount burnt\n\tevent Burn(address indexed from, uint256 value);\n\n\t/**\n\t * Constructor function\n\t *\n\t * Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor(\n\t\tuint256 initialSupply,\n\t\tstring tokenName,\n\t\tstring tokenSymbol\n\t) public {\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n\t\tbalanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n\t\tname = tokenName;                                   // Set the name for display purposes\n\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n\t}\n\n\t/**\n\t * Internal transfer, only can be called by this contract\n\t */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != 0x0);\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\t// Check for overflows\n\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] -= _value;\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] += _value;\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] -= _value;\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\t\tpublic\n\t\treturns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n\t\ttotalSupply -= _value;                      // Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n\t\ttotalSupply -= _value;                              // Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n}\n\ncontract developed {\n\taddress public developer;\n\n\t/**\n\t * Constructor\n\t */\n\tconstructor() public {\n\t\tdeveloper = msg.sender;\n\t}\n\n\t/**\n\t * @dev Checks only developer address is calling\n\t */\n\tmodifier onlyDeveloper {\n\t\trequire(msg.sender == developer);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Allows developer to switch developer address\n\t * @param _developer The new developer address to be set\n\t */\n\tfunction changeDeveloper(address _developer) public onlyDeveloper {\n\t\tdeveloper = _developer;\n\t}\n\n\t/**\n\t * @dev Allows developer to withdraw ERC20 Token\n\t */\n\tfunction withdrawToken(address tokenContractAddress) public onlyDeveloper {\n\t\tTokenERC20 _token = TokenERC20(tokenContractAddress);\n\t\tif (_token.balanceOf(this) > 0) {\n\t\t\t_token.transfer(developer, _token.balanceOf(this));\n\t\t}\n\t}\n}\n\ncontract MyAdvancedToken is developed, TokenERC20 {\n\n\tuint256 public sellPrice;\n\tuint256 public buyPrice;\n\n\tmapping (address => bool) public frozenAccount;\n\n\t/* This generates a public event on the blockchain that will notify clients */\n\tevent FrozenFunds(address target, bool frozen);\n\n\t/* Initializes contract with initial supply tokens to the creator of the contract */\n\tconstructor (\n\t\tuint256 initialSupply,\n\t\tstring tokenName,\n\t\tstring tokenSymbol\n\t) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n\t/* Internal transfer, only can be called by this contract */\n\tfunction _transfer(address _from, address _to, uint _value) internal {\n\t\trequire (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire (balanceOf[_from] >= _value);               // Check if the sender has enough\n\t\trequire (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n\t\trequire(!frozenAccount[_from]);                     // Check if sender is frozen\n\t\trequire(!frozenAccount[_to]);                       // Check if recipient is frozen\n\t\tbalanceOf[_from] -= _value;                         // Subtract from the sender\n\t\tbalanceOf[_to] += _value;                           // Add the same to the recipient\n\t\temit Transfer(_from, _to, _value);\n\t}\n\n\t/// @notice Create `mintedAmount` tokens and send it to `target`\n\t/// @param target Address to receive the tokens\n\t/// @param mintedAmount the amount of tokens it will receive\n\tfunction mintToken(address target, uint256 mintedAmount) onlyDeveloper public {\n\t\tbalanceOf[target] += mintedAmount;\n\t\ttotalSupply += mintedAmount;\n\t\temit Transfer(0, this, mintedAmount);\n\t\temit Transfer(this, target, mintedAmount);\n\t}\n\n\t/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n\t/// @param target Address to be frozen\n\t/// @param freeze either to freeze it or not\n\tfunction freezeAccount(address target, bool freeze) onlyDeveloper public {\n\t\tfrozenAccount[target] = freeze;\n\t\temit FrozenFunds(target, freeze);\n\t}\n\n\t/// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n\t/// @param newSellPrice Price the users can sell to the contract\n\t/// @param newBuyPrice Price users can buy from the contract\n\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyDeveloper public {\n\t\tsellPrice = newSellPrice;\n\t\tbuyPrice = newBuyPrice;\n\t}\n\n\t/// @notice Buy tokens from contract by sending ether\n\tfunction buy() payable public {\n\t\tuint amount = msg.value / buyPrice;               // calculates the amount\n\t\t_transfer(this, msg.sender, amount);              // makes the transfers\n\t}\n\n\t/// @notice Sell `amount` tokens to contract\n\t/// @param amount amount of tokens to be sold\n\tfunction sell(uint256 amount) public {\n\t\taddress myAddress = this;\n\t\trequire(myAddress.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n\t\t_transfer(msg.sender, this, amount);              // makes the transfers\n\t\tmsg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n\t}\n}\n\n/**\n * @title SpinToken\n */\ncontract SpinToken is MyAdvancedToken {\n\tusing SafeMath for uint256;\n\n\tbool public paused;\n\n\tmapping (address => bool) public allowMintTransfer;\n\tmapping (address => bool) public allowBurn;\n\n\tevent Mint(address indexed account, uint256 value);\n\n\t/**\n\t * @dev Checks if account address is allowed to mint and transfer\n\t */\n\tmodifier onlyMintTransferBy(address account) {\n\t\trequire(allowMintTransfer[account] == true || account == developer);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Checks if account address is allowed to burn token\n\t */\n\tmodifier onlyBurnBy(address account) {\n\t\trequire(allowBurn[account] == true || account == developer);\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Checks if contract is currently active\n\t */\n\tmodifier contractIsActive {\n\t\trequire(paused == false);\n\t\t_;\n\t}\n\n\t/**\n\t * Constructor\n\t * @dev Initializes contract with initial supply tokens to the creator of the contract\n\t */\n\tconstructor(\n\t\tuint256 initialSupply,\n\t\tstring tokenName,\n\t\tstring tokenSymbol\n\t) MyAdvancedToken(initialSupply, tokenName, tokenSymbol) public {}\n\n\t/******************************************/\n\t/*       DEVELOPER ONLY METHODS           */\n\t/******************************************/\n\t/**\n\t * @dev Only developer can pause contract\n\t * @param _paused The boolean value to be set\n\t */\n\tfunction setPaused(bool _paused) public onlyDeveloper {\n\t\tpaused = _paused;\n\t}\n\n\t/**\n\t * @dev Only developer can allow `_account` address to mint transfer\n\t * @param _account The address of the sender\n\t * @param _allowed The boolean value to be set\n\t */\n\tfunction setAllowMintTransfer(address _account, bool _allowed) public onlyDeveloper {\n\t\tallowMintTransfer[_account] = _allowed;\n\t}\n\n\t/**\n\t * @dev Only developer can allow `_account` address to burn token\n\t * @param _account The address of the sender\n\t * @param _allowed The boolean value to be set\n\t */\n\tfunction setAllowBurn(address _account, bool _allowed) public onlyDeveloper {\n\t\tallowBurn[_account] = _allowed;\n\t}\n\n\t/******************************************/\n\t/*            PUBLIC METHODS              */\n\t/******************************************/\n\n\t/**\n\t * @dev Get total supply\n\t * @return The token total supply\n\t */\n\tfunction getTotalSupply() public constant returns (uint256) {\n\t\treturn totalSupply;\n\t}\n\n\t/**\n\t * @dev Get balance of an account\n\t * @param account The account to be checked\n\t * @return The token balance of the account\n\t */\n\tfunction getBalanceOf(address account) public constant returns (uint256) {\n\t\treturn balanceOf[account];\n\t}\n\n\t/**\n\t * Transfer tokens\n\t *\n\t * Send `_value` tokens to `_to` from your account\n\t *\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transfer(address _to, uint256 _value) public contractIsActive returns (bool success) {\n\t\t_transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Transfer tokens from other address\n\t *\n\t * Send `_value` tokens to `_to` in behalf of `_from`\n\t *\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction transferFrom(address _from, address _to, uint256 _value) public contractIsActive returns (bool success) {\n\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n\t\tallowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n\t\t_transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t */\n\tfunction approve(address _spender, uint256 _value) public contractIsActive returns (bool success) {\n\t\tallowance[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set allowance for other address and notify\n\t *\n\t * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n\t *\n\t * @param _spender The address authorized to spend\n\t * @param _value the max amount they can spend\n\t * @param _extraData some extra information to send to the approved contract\n\t */\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\n\t\tpublic\n\t\tcontractIsActive\n\t\treturns (bool success) {\n\t\ttokenRecipient spender = tokenRecipient(_spender);\n\t\tif (approve(_spender, _value)) {\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Destroy tokens\n\t *\n\t * Remove `_value` tokens from the system irreversibly\n\t *\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burn(uint256 _value) public contractIsActive returns (bool success) {\n\t\trequire(balanceOf[msg.sender] >= _value);\t\t\t\t\t\t// Check if the sender has enough\n\t\tbalanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\t\t// Subtract from the sender\n\t\ttotalSupply = totalSupply.sub(_value);\t\t\t\t\t\t\t// Updates totalSupply\n\t\temit Burn(msg.sender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Destroy tokens from other account\n\t *\n\t * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n\t *\n\t * @param _from the address of the sender\n\t * @param _value the amount of money to burn\n\t */\n\tfunction burnFrom(address _from, uint256 _value) public contractIsActive returns (bool success) {\n\t\trequire(balanceOf[_from] >= _value);\t\t\t\t\t\t\t\t\t// Check if the targeted balance is enough\n\t\trequire(_value <= allowance[_from][msg.sender]);\t\t\t\t\t\t// Check allowance\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\t\t\t\t\t\t// Subtract from the targeted balance\n\t\tallowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);// Subtract from the sender's allowance\n\t\ttotalSupply = totalSupply.sub(_value);\t\t\t\t\t\t\t\t\t// Update totalSupply\n\t\temit Burn(_from, _value);\n\t\treturn true;\n\t}\n\n\t/// @notice Buy tokens from contract by sending ether\n\tfunction buy() payable public contractIsActive {\n\t\tuint amount = msg.value.div(buyPrice);\t\t\t\t// calculates the amount\n\t\t_transfer(this, msg.sender, amount);\t\t\t\t// makes the transfers\n\t}\n\n\t/// @notice Sell `amount` tokens to contract\n\t/// @param amount amount of tokens to be sold\n\tfunction sell(uint256 amount) public contractIsActive {\n\t\taddress myAddress = this;\n\t\trequire(myAddress.balance >= amount.mul(sellPrice));\t// checks if the contract has enough ether to buy\n\t\t_transfer(msg.sender, this, amount);\t\t\t\t\t// makes the transfers\n\t\tmsg.sender.transfer(amount.mul(sellPrice));\t\t\t\t// sends ether to the seller. It's important to do this last to avoid recursion attacks\n\t}\n\n\t/**\n\t * @dev Mints and transfers token to `_to` address.\n\t * @param _to The address of the recipient\n\t * @param _value The amount of token to mint and transfer\n\t * @return Return true if success\n\t */\n\tfunction mintTransfer(address _to, uint _value) public contractIsActive\n\t\tonlyMintTransferBy(msg.sender)\n\t\treturns (bool) {\n\t\trequire(_value > 0);\n\t\ttotalSupply = totalSupply.add(_value);\n\t\t/*\n\t\t * We are actually minting to msg.sender\n\t\t * and then transfer from msg.sender to to address\n\t\t *\n\t\t * Since they cancel out each other, we don't need\n\t\t * these executions:\n\t\t * balances[msg.sender] = balances[msg.sender].add(value);\n\t\t * balances[msg.sender] = balances[msg.sender].sub(value);\n\t\t */\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);\n\t\temit Mint(msg.sender, _value);\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Burns token at specific address.\n\t * @param _at the address of the sender\n\t * @param _value the amount of token to burn\n\t * @return true if success\n\t */\n\tfunction burnAt(address _at, uint _value) public contractIsActive\n\t\tonlyBurnBy(msg.sender)\n\t\treturns (bool) {\n\t\tbalanceOf[_at] = balanceOf[_at].sub(_value);\n\t\ttotalSupply = totalSupply.sub(_value);\n\t\temit Burn(_at, _value);\n\t\treturn true;\n\t}\n\n\t/******************************************/\n\t/*          INTERNAL METHODS              */\n\t/******************************************/\n\n\t/**\n\t * @dev Internal transfer, only can be called by this contract\n\t * @param _from The address of the sender\n\t * @param _to The address of the recipient\n\t * @param _value the amount to send\n\t */\n\tfunction _transfer(address _from, address _to, uint256 _value) internal contractIsActive {\n\t\t// Prevent transfer to 0x0 address. Use burn() instead\n\t\trequire(_to != 0x0);\n\t\t// Check if the sender has enough\n\t\trequire(balanceOf[_from] >= _value);\n\t\trequire(!frozenAccount[_from]);                     // Check if sender is frozen\n\t\trequire(!frozenAccount[_to]);                       // Check if recipient is frozen\n\t\t// Save this for an assertion in the future\n\t\tuint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n\t\t// Subtract from the sender\n\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);\n\t\t// Add the same to the recipient\n\t\tbalanceOf[_to] = balanceOf[_to].add(_value);\n\t\temit Transfer(_from, _to, _value);\n\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n\t\tassert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n\t}\n}",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000a5350494e20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045350494e00000000000000000000000000000000000000000000000000000000"
}