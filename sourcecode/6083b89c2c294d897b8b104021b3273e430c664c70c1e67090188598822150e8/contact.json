{
  "address": "0x25b6bcc5f4a774fbe6de84eb52fd35f668eba990",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Proxy",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-19\n*/\n\npragma solidity ^0.4.18;\n\n// File: contracts/library/Ownable.sol\n\n/*\n * Ownable\n *\n * Base contract with an owner.\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n */\ncontract Ownable {\n  address public owner;\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n\n    _;\n  }\n\n  function transferOwnership(address newOwner) onlyOwner public {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n// File: contracts/library/upgradeable/Proxied.sol\n\ncontract Proxied is Ownable {\n    address public target;\n    mapping (address => bool) public initialized;\n\n    event EventUpgrade(address indexed newTarget, address indexed oldTarget, address indexed admin);\n    event EventInitialized(address indexed target);\n\n    function upgradeTo(address _target) public;\n}\n\n// File: contracts/library/upgradeable/Proxy.sol\n\ncontract Proxy is Proxied {\n    /*\n     * @notice Constructor sets the target and emmits an event with the first target\n     * @param _target - The target Upgradeable contracts address\n     */\n    constructor(address _target) public {\n        upgradeTo(_target);\n    }\n\n    /*\n     * @notice Upgrades the contract to a different target that has a changed logic. Can only be called by owner\n     * @dev See https://github.com/jackandtheblockstalk/upgradeable-proxy for what can and cannot be done in Upgradeable\n     * contracts\n     * @param _target - The target Upgradeable contracts address\n     */\n    function upgradeTo(address _target) public onlyOwner {\n        assert(target != _target);\n\n        address oldTarget = target;\n        target = _target;\n\n        emit EventUpgrade(_target, oldTarget, msg.sender);\n    }\n\n    /*\n     * @notice Performs an upgrade and then executes a transaction. Intended use to upgrade and initialize atomically\n     */\n    function upgradeTo(address _target, bytes _data) public onlyOwner {\n        upgradeTo(_target);\n        assert(target.delegatecall(_data));\n    }\n\n    /*\n     * @notice Fallback function that will execute code from the target contract to process a function call.\n     * @dev Will use the delegatecall opcode to retain the current state of the Proxy contract and use the logic\n     * from the target contract to process it.\n     */\n    function () payable public {\n        bytes memory data = msg.data;\n        address impl = target;\n\n        assembly {\n            let result := delegatecall(gas, impl, add(data, 0x20), mload(data), 0, 0)\n            let size := returndatasize\n\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newTarget\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldTarget\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"EventUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"EventInitialized\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b5060405160208061095b83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061008b81610091640100000000026401000000009004565b50610223565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156100ee57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561014857fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fe79b6a8d68293faecf550170958caa9dcab36cab525137e61050eefa170dd93a60405160405180910390a45050565b610729806102326000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633659cfe6146100fc5780636fbc15e91461013f5780638da5cb5b146101c8578063cbca47db1461021f578063d4b839921461027a578063f2fde38b146102d1575b6060600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080835160208501845af43d604051816000823e82600081146100f8578282f35b8282fd5b34801561010857600080fd5b5061013d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610314565b005b34801561014b57600080fd5b506101c6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506104a6565b005b3480156101d457600080fd5b506101dd6105bd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022b57600080fd5b50610260600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105e2565b604051808215151515815260200191505060405180910390f35b34801561028657600080fd5b5061028f610602565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102dd57600080fd5b50610312600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610628565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561037157600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156103cb57fe5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fe79b6a8d68293faecf550170958caa9dcab36cab525137e61050eefa170dd93a60405160405180910390a45050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561050157600080fd5b61050a82610314565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160405180828051906020019080838360005b83811015610571578082015181840152602081019050610556565b50505050905090810190601f16801561059e5780820380516001836020036101000a031916815260200191505b50915050600060405180830381855af491505015156105b957fe5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561068357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156106fa57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505600a165627a7a7230582061332b072dbfeb821e24b5c37693200772be7bba86f48d7e842d7739e04527cd00290000000000000000000000003cef32633e160e303640fb51d72947d795d3407e",
  "constructorArguments": "0000000000000000000000003cef32633e160e303640fb51d72947d795d3407e"
}