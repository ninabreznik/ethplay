{
  "address": "0xf01eab46ade80e599209681a5aaa13260ae8735c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FriendsFingersBuilder",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-02-20\n*/\n\npragma solidity ^0.4.19;\n\n// File: contracts/utility/ContractReceiverInterface.sol\n\ncontract ContractReceiverInterface {\n    function receiveApproval(\n        address from,\n        uint256 _amount,\n        address _token,\n        bytes _data) public;\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts/utility/SafeContract.sol\n\ncontract SafeContract is Ownable {\n\n    /**\n     * @notice Owner can transfer out any accidentally sent ERC20 tokens\n     */\n    function transferAnyERC20Token(address _tokenAddress, uint256 _tokens, address _beneficiary) public onlyOwner returns (bool success) {\n        return ERC20Basic(_tokenAddress).transfer(_beneficiary, _tokens);\n    }\n}\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    require(_value <= balances[msg.sender]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    address burner = msg.sender;\n    balances[burner] = balances[burner].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    Burn(burner, _value);\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n// File: contracts/token/FriendsFingersToken.sol\n\n/**\n * @title FriendsFingersToken\n */\ncontract FriendsFingersToken is DetailedERC20, MintableToken, BurnableToken, SafeContract {\n\n    address public builder;\n\n    modifier canTransfer() {\n        require(mintingFinished);\n        _;\n    }\n\n    function FriendsFingersToken(\n        string _name,\n        string _symbol,\n        uint8 _decimals\n    )\n    DetailedERC20 (_name, _symbol, _decimals)\n    public\n    {\n        builder = owner;\n    }\n\n    function transfer(address _to, uint _value) canTransfer public returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value) canTransfer public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\n        require(approve(_spender, _amount));\n\n        ContractReceiverInterface(_spender).receiveApproval(\n            msg.sender,\n            _amount,\n            this,\n            _extraData\n        );\n\n        return true;\n    }\n\n}\n\n// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end timestamps, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n  using SafeMath for uint256;\n\n  // The token being sold\n  MintableToken public token;\n\n  // start and end timestamps where investments are allowed (both inclusive)\n  uint256 public startTime;\n  uint256 public endTime;\n\n  // address where funds are collected\n  address public wallet;\n\n  // how many token units a buyer gets per wei\n  uint256 public rate;\n\n  // amount of raised money in wei\n  uint256 public weiRaised;\n\n  /**\n   * event for token purchase logging\n   * @param purchaser who paid for the tokens\n   * @param beneficiary who got the tokens\n   * @param value weis paid for purchase\n   * @param amount amount of tokens purchased\n   */\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n    require(_startTime >= now);\n    require(_endTime >= _startTime);\n    require(_rate > 0);\n    require(_wallet != address(0));\n\n    token = createTokenContract();\n    startTime = _startTime;\n    endTime = _endTime;\n    rate = _rate;\n    wallet = _wallet;\n  }\n\n  // fallback function can be used to buy tokens\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  // low level token purchase function\n  function buyTokens(address beneficiary) public payable {\n    require(beneficiary != address(0));\n    require(validPurchase());\n\n    uint256 weiAmount = msg.value;\n\n    // calculate token amount to be created\n    uint256 tokens = getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n\n    token.mint(beneficiary, tokens);\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n    forwardFunds();\n  }\n\n  // @return true if crowdsale event has ended\n  function hasEnded() public view returns (bool) {\n    return now > endTime;\n  }\n\n  // creates the token to be sold.\n  // override this method to have crowdsale of a specific mintable token.\n  function createTokenContract() internal returns (MintableToken) {\n    return new MintableToken();\n  }\n\n  // Override this method to have a way to add business logic to your crowdsale when buying\n  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n    return weiAmount.mul(rate);\n  }\n\n  // send ether to the fund collection wallet\n  // override to create custom fund forwarding mechanisms\n  function forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n\n  // @return true if the transaction can buy tokens\n  function validPurchase() internal view returns (bool) {\n    bool withinPeriod = now >= startTime && now <= endTime;\n    bool nonZeroPurchase = msg.value != 0;\n    return withinPeriod && nonZeroPurchase;\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/crowdsale/CappedCrowdsale.sol\n\n/**\n * @title CappedCrowdsale\n * @dev Extension of Crowdsale with a max amount of funds raised\n */\ncontract CappedCrowdsale is Crowdsale {\n  using SafeMath for uint256;\n\n  uint256 public cap;\n\n  function CappedCrowdsale(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  // overriding Crowdsale#hasEnded to add cap logic\n  // @return true if crowdsale event has ended\n  function hasEnded() public view returns (bool) {\n    bool capReached = weiRaised >= cap;\n    return capReached || super.hasEnded();\n  }\n\n  // overriding Crowdsale#validPurchase to add extra cap logic\n  // @return true if investors can buy at the moment\n  function validPurchase() internal view returns (bool) {\n    bool withinCap = weiRaised.add(msg.value) <= cap;\n    return withinCap && super.validPurchase();\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\n\n/**\n * @title FinalizableCrowdsale\n * @dev Extension of Crowdsale where an owner can do extra work\n * after finishing.\n */\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasEnded());\n\n    finalization();\n    Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n  }\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n// File: contracts/crowdsale/FriendsFingersCrowdsale.sol\n\n/**\n * @title FriendsFingersCrowdsale\n */\ncontract FriendsFingersCrowdsale is CappedCrowdsale, FinalizableCrowdsale, Pausable, SafeContract {\n\n    enum State { Active, Refunding, Closed, Blocked, Expired }\n\n    uint256 public id;\n    uint256 public previousRoundId;\n    uint256 public nextRoundId;\n\n    // The token being sold\n    FriendsFingersToken public token;\n\n    // the round of crowdsale\n    uint256 public round;\n\n    // minimum amount of funds to be raised in weis\n    uint256 public goal;\n\n    string public crowdsaleInfo;\n\n    uint256 public friendsFingersRatePerMille;\n    address public friendsFingersWallet;\n\n    uint256 public investorCount = 0;\n    mapping (address => uint256) public deposited;\n    State public state;\n\n    event Closed();\n    event Expired();\n    event RefundsEnabled();\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\n\n    function FriendsFingersCrowdsale(\n        uint256 _id,\n        uint256 _cap,\n        uint256 _goal,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _rate,\n        address _wallet,\n        FriendsFingersToken _token,\n        string _crowdsaleInfo,\n        uint256 _round,\n        uint256 _previousRoundId,\n        uint256 _friendsFingersRatePerMille,\n        address _friendsFingersWallet\n    ) public\n    CappedCrowdsale (_cap)\n    FinalizableCrowdsale ()\n    Crowdsale (_startTime, _endTime, _rate, _wallet)\n    {\n        require(_endTime <= _startTime + 30 days);\n        require(_token != address(0));\n\n        require(_round <= 5);\n        if (_round == 1) {\n            if (_id == 1) {\n                require(_goal >= 0);\n            } else {\n                require(_goal > 0);\n            }\n        } else {\n            require(_goal == 0);\n        }\n        require(_cap > 0);\n        require(_cap >= _goal);\n\n        goal = _goal;\n\n        crowdsaleInfo = _crowdsaleInfo;\n\n        token = _token;\n\n        round = _round;\n        previousRoundId = _previousRoundId;\n        state = State.Active;\n\n        id = _id;\n\n        friendsFingersRatePerMille = _friendsFingersRatePerMille;\n        friendsFingersWallet = _friendsFingersWallet;\n    }\n\n    // low level token purchase function\n    function buyTokens(address beneficiary) whenNotPaused public payable {\n        require(beneficiary != address(0));\n        require(validPurchase());\n\n        uint256 weiAmount = msg.value;\n\n        // calculate token amount to be created\n        uint256 tokens = getTokenAmount(weiAmount);\n\n        // update state\n        weiRaised = weiRaised.add(weiAmount);\n\n        token.mint(beneficiary, tokens);\n        TokenPurchase(\n            msg.sender,\n            beneficiary,\n            weiAmount,\n            tokens\n        );\n\n        forwardFunds();\n    }\n\n    // Public methods\n\n    // if crowdsale is unsuccessful or blocked, investors can claim refunds here\n    function claimRefund() whenNotPaused public {\n        require(state == State.Refunding || state == State.Blocked);\n        address investor = msg.sender;\n\n        uint256 depositedValue = deposited[investor];\n        deposited[investor] = 0;\n        investor.transfer(depositedValue);\n        Refunded(investor, depositedValue);\n    }\n\n    function finalize() whenNotPaused public {\n        super.finalize();\n    }\n\n    // View methods\n\n    function goalReached() view public returns (bool) {\n        return weiRaised >= goal;\n    }\n\n    // Only owner methods\n\n    function updateCrowdsaleInfo(string _crowdsaleInfo) onlyOwner public {\n        require(!hasEnded());\n        crowdsaleInfo = _crowdsaleInfo;\n    }\n\n    function blockCrowdsale() onlyOwner public {\n        require(state == State.Active);\n        state = State.Blocked;\n    }\n\n    function setnextRoundId(uint256 _nextRoundId) onlyOwner public {\n        nextRoundId = _nextRoundId;\n    }\n\n    function setFriendsFingersRate(uint256 _newFriendsFingersRatePerMille) onlyOwner public {\n        require(_newFriendsFingersRatePerMille >= 0);\n        require(_newFriendsFingersRatePerMille <= friendsFingersRatePerMille);\n        friendsFingersRatePerMille = _newFriendsFingersRatePerMille;\n    }\n\n    function setFriendsFingersWallet(address _friendsFingersWallet) onlyOwner public {\n        require(_friendsFingersWallet != address(0));\n        friendsFingersWallet = _friendsFingersWallet;\n    }\n\n    // Emergency methods\n\n    function safeWithdrawal() onlyOwner public {\n        require(now >= endTime + 1 years);\n        friendsFingersWallet.transfer(this.balance);\n    }\n\n    function setExpiredAndWithdraw() onlyOwner public {\n        require((state == State.Refunding || state == State.Blocked) && now >= endTime + 1 years);\n        state = State.Expired;\n        friendsFingersWallet.transfer(this.balance);\n        Expired();\n    }\n\n    // Internal methods\n\n    /**\n     * @dev Create new instance of token contract\n     */\n    function createTokenContract() internal returns (MintableToken) {\n        return MintableToken(address(0));\n    }\n\n    // overriding CappedCrowdsale#validPurchase to add extra cap logic\n    // @return true if investors can buy at the moment\n    function validPurchase() internal view returns (bool) {\n        bool isActive = state == State.Active;\n        return isActive && super.validPurchase();\n    }\n\n    // We're overriding the fund forwarding from Crowdsale.\n    function forwardFunds() internal {\n        if (deposited[msg.sender] == 0) {\n            investorCount++;\n        }\n        deposited[msg.sender] = deposited[msg.sender].add(msg.value);\n    }\n\n    // vault finalization task, called when owner calls finalize()\n    function finalization() internal {\n        require(state == State.Active);\n\n        if (goalReached()) {\n            state = State.Closed;\n            Closed();\n\n            if (friendsFingersRatePerMille > 0) {\n                uint256 friendsFingersFee = weiRaised.mul(friendsFingersRatePerMille).div(1000);\n                friendsFingersWallet.transfer(friendsFingersFee);\n            }\n\n            wallet.transfer(this.balance);\n        } else {\n            state = State.Refunding;\n            RefundsEnabled();\n        }\n\n        if (friendsFingersRatePerMille > 0) {\n            uint256 friendsFingersSupply = cap.mul(rate).mul(friendsFingersRatePerMille).div(1000);\n            token.mint(owner, friendsFingersSupply);\n        }\n\n        token.transferOwnership(owner);\n\n        super.finalization();\n    }\n\n}\n\n// File: contracts/FriendsFingersBuilder.sol\n\n/**\n * @title FriendsFingersBuilder\n */\ncontract FriendsFingersBuilder is Pausable, SafeContract {\n    using SafeMath for uint256;\n\n    event CrowdsaleStarted(address ffCrowdsale);\n    event CrowdsaleClosed(address ffCrowdsale);\n\n    uint public version = 1;\n    string public website = \"https://www.friendsfingers.com\";\n    uint256 public friendsFingersRatePerMille = 50; //5%\n    address public friendsFingersWallet;\n    mapping (address => bool) public enabledAddresses;\n\n    uint256 public crowdsaleCount = 0;\n    mapping (uint256 => address) public crowdsaleList;\n    mapping (address => address) public crowdsaleCreators;\n\n    modifier onlyOwnerOrEnabledAddress() {\n        require(enabledAddresses[msg.sender] || msg.sender == owner);\n        _;\n    }\n\n    modifier onlyOwnerOrCreator(address _ffCrowdsale) {\n        require(msg.sender == crowdsaleCreators[_ffCrowdsale] || msg.sender == owner);\n        _;\n    }\n\n    function FriendsFingersBuilder(address _friendsFingersWallet) public {\n        setMainWallet(_friendsFingersWallet);\n    }\n\n    /**\n     * @notice This is for people who want to donate ETH to FriendsFingers\n     */\n    function () public payable {\n        require(msg.value != 0);\n        friendsFingersWallet.transfer(msg.value);\n    }\n\n    // crowdsale utility methods\n\n    function startCrowdsale(\n        string _tokenName,\n        string _tokenSymbol,\n        uint8 _tokenDecimals,\n        uint256 _cap,\n        uint256 _goal,\n        uint256 _creatorSupply,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _rate,\n        address _wallet,\n        string _crowdsaleInfo\n    ) whenNotPaused public returns (FriendsFingersCrowdsale)\n    {\n        crowdsaleCount++;\n        uint256 _round = 1;\n\n        FriendsFingersToken token = new FriendsFingersToken(\n            _tokenName,\n            _tokenSymbol,\n            _tokenDecimals\n        );\n\n        if (_creatorSupply > 0) {\n            token.mint(_wallet, _creatorSupply);\n        }\n\n        FriendsFingersCrowdsale ffCrowdsale = new FriendsFingersCrowdsale(\n        crowdsaleCount,\n        _cap,\n        _goal,\n        _startTime,\n        _endTime,\n        _rate,\n        _wallet,\n        token,\n        _crowdsaleInfo,\n        _round,\n        0,\n        friendsFingersRatePerMille,\n        friendsFingersWallet\n        );\n\n        if (crowdsaleCount > 1) {\n            ffCrowdsale.pause();\n        }\n\n        token.transferOwnership(address(ffCrowdsale));\n\n        addCrowdsaleToList(address(ffCrowdsale));\n\n        return ffCrowdsale;\n    }\n\n    function restartCrowdsale(\n        address _ffCrowdsale,\n        uint256 _cap,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _rate,\n        string _crowdsaleInfo\n    ) whenNotPaused onlyOwnerOrCreator(_ffCrowdsale) public returns (FriendsFingersCrowdsale)\n    {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        // can't restart twice\n        require(ffCrowdsale.nextRoundId() == 0);\n        // can't restart if goal not reached or rate greater or equal old rate\n        require(ffCrowdsale.goalReached());\n        require(_rate < ffCrowdsale.rate());\n\n        ffCrowdsale.finalize();\n\n        crowdsaleCount++;\n        uint256 _round = ffCrowdsale.round();\n        _round++;\n\n        FriendsFingersToken token = ffCrowdsale.token();\n\n        FriendsFingersCrowdsale newFriendsFingersCrowdsale = new FriendsFingersCrowdsale(\n            crowdsaleCount,\n            _cap,\n            0,\n            _startTime,\n            _endTime,\n            _rate,\n            ffCrowdsale.wallet(),\n            token,\n            _crowdsaleInfo,\n            _round,\n            ffCrowdsale.id(),\n            friendsFingersRatePerMille,\n            friendsFingersWallet\n        );\n\n        token.transferOwnership(address(newFriendsFingersCrowdsale));\n\n        ffCrowdsale.setnextRoundId(crowdsaleCount);\n\n        addCrowdsaleToList(address(newFriendsFingersCrowdsale));\n\n        return newFriendsFingersCrowdsale;\n    }\n\n    function closeCrowdsale(address _ffCrowdsale) onlyOwnerOrCreator(_ffCrowdsale) public {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        ffCrowdsale.finalize();\n\n        FriendsFingersToken token = ffCrowdsale.token();\n        token.finishMinting();\n        token.transferOwnership(crowdsaleCreators[_ffCrowdsale]);\n\n        CrowdsaleClosed(ffCrowdsale);\n    }\n\n    function updateCrowdsaleInfo(address _ffCrowdsale, string _crowdsaleInfo) onlyOwnerOrCreator(_ffCrowdsale) public {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        ffCrowdsale.updateCrowdsaleInfo(_crowdsaleInfo);\n    }\n\n    // Only builder owner methods\n\n    function changeEnabledAddressStatus(address _address, bool _status) onlyOwner public {\n        require(_address != address(0));\n        enabledAddresses[_address] = _status;\n    }\n\n    function setDefaultFriendsFingersRate(uint256 _newFriendsFingersRatePerMille) onlyOwner public {\n        require(_newFriendsFingersRatePerMille >= 0);\n        require(_newFriendsFingersRatePerMille < friendsFingersRatePerMille);\n        friendsFingersRatePerMille = _newFriendsFingersRatePerMille;\n    }\n\n    function setMainWallet(address _newFriendsFingersWallet) onlyOwner public {\n        require(_newFriendsFingersWallet != address(0));\n        friendsFingersWallet = _newFriendsFingersWallet;\n    }\n\n    function setFriendsFingersRateForCrowdsale(address _ffCrowdsale, uint256 _newFriendsFingersRatePerMille) onlyOwner public {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        ffCrowdsale.setFriendsFingersRate(_newFriendsFingersRatePerMille);\n    }\n\n    function setFriendsFingersWalletForCrowdsale(address _ffCrowdsale, address _newFriendsFingersWallet) onlyOwner public {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        ffCrowdsale.setFriendsFingersWallet(_newFriendsFingersWallet);\n    }\n\n    // Emergency methods (only builder owner or enabled addresses)\n\n    function pauseCrowdsale(address _ffCrowdsale) onlyOwnerOrEnabledAddress public {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        ffCrowdsale.pause();\n    }\n\n    function unpauseCrowdsale(address _ffCrowdsale) onlyOwnerOrEnabledAddress public {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        ffCrowdsale.unpause();\n    }\n\n    function blockCrowdsale(address _ffCrowdsale) onlyOwnerOrEnabledAddress public {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        ffCrowdsale.blockCrowdsale();\n    }\n\n    function safeTokenWithdrawalFromCrowdsale(address _ffCrowdsale, address _tokenAddress, uint256 _tokens) onlyOwnerOrEnabledAddress public {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        ffCrowdsale.transferAnyERC20Token(_tokenAddress, _tokens, friendsFingersWallet);\n    }\n\n    function safeWithdrawalFromCrowdsale(address _ffCrowdsale) onlyOwnerOrEnabledAddress public {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        ffCrowdsale.safeWithdrawal();\n    }\n\n    function setExpiredAndWithdraw(address _ffCrowdsale) onlyOwnerOrEnabledAddress public {\n        FriendsFingersCrowdsale ffCrowdsale = FriendsFingersCrowdsale(_ffCrowdsale);\n        ffCrowdsale.setExpiredAndWithdraw();\n    }\n\n    // Internal methods\n\n    function addCrowdsaleToList(address ffCrowdsale) internal {\n        crowdsaleList[crowdsaleCount] = ffCrowdsale;\n        crowdsaleCreators[ffCrowdsale] = msg.sender;\n\n        CrowdsaleStarted(ffCrowdsale);\n    }\n\n}",
  "bytecode": "606060409081526000805460a060020a60ff0219169055600180558051908101604052601e81527f68747470733a2f2f7777772e667269656e647366696e676572732e636f6d000060208201526002908051620000619291602001906200011f565b506032600355600060065534156200007857600080fd5b604051602080620048228339810160405280805160008054600160a060020a03191633600160a060020a03161790559150620000c4905081640100000000620000cb810262001b071704565b50620001c4565b60005433600160a060020a03908116911614620000e757600080fd5b600160a060020a0381161515620000fd57600080fd5b60048054600160a060020a031916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016257805160ff191683800117855562000192565b8280016001018555821562000192579182015b828111156200019257825182559160200191906001019062000175565b50620001a0929150620001a4565b5090565b620001c191905b80821115620001a05760008155600101620001ab565b90565b61464e80620001d46000396000f300606060405260043610620001795763ffffffff60e060020a60003504166302404bee8114620001bd5780630b522abf14620001e5578063190a597b14620002075780632965486a14620002965780632a23475f14620002c1578063397fa01514620002e35780633f4ba83a1462000345578063512a9c33146200035b57806354fd4d5014620004725780635982a30f14620004885780635c975abb14620004ad57806382eed60c14620004d75780638456cb5914620004f95780638da5cb5b146200050f57806395969ba41462000525578063a10b10f51462000547578063a886d66f146200056f578063aab324ae1462000588578063abcf033c14620005b4578063beb0a41614620005d6578063c0435e291462000666578063c0e789cc146200067f578063c738a8361462000695578063d0a5eb4e14620006bc578063d6bec80314620006de578063e7fac7281462000700578063f003a4871462000716578063f2fde38b1462000738578063fa5bbcd2146200075a575b3415156200018657600080fd5b600454600160a060020a03163480156108fc0290604051600060405180830381858888f193505050501515620001bb57600080fd5b005b3415620001c957600080fd5b620001d36200077c565b60405190815260200160405180910390f35b3415620001f157600080fd5b620001bb600160a060020a036004351662000782565b34156200021357600080fd5b6200027a60048035600160a060020a031690602480359160443591606435916084359160c49060a43590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650620009a995505050505050565b604051600160a060020a03909116815260200160405180910390f35b3415620002a257600080fd5b620001bb600160a060020a036004358116906024351660443562000f63565b3415620002cd57600080fd5b620001bb600160a060020a03600435166200103c565b3415620002ef57600080fd5b620001bb60048035600160a060020a03169060446024803590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650620010d795505050505050565b34156200035157600080fd5b620001bb620011ed565b34156200036757600080fd5b6200027a60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949660ff8735169660208082013597506040808301359750606083013596506080830135955060a0830135945060c083013593600160a060020a0360e085013516939092610120820192610100909201358401808201929035918291601f83018290048202909101905190810160405281815292919060208401838380828437509496506200126e95505050505050565b34156200047e57600080fd5b620001d36200164f565b34156200049457600080fd5b620001bb600160a060020a036004351660243562001655565b3415620004b957600080fd5b620004c3620016d5565b604051901515815260200160405180910390f35b3415620004e357600080fd5b620001bb600160a060020a0360043516620016e5565b34156200050557600080fd5b620001bb62001767565b34156200051b57600080fd5b6200027a620017ed565b34156200053157600080fd5b620004c3600160a060020a0360043516620017fc565b34156200055357600080fd5b620001bb600160a060020a036004358116906024351662001811565b34156200057b57600080fd5b6200027a6004356200187f565b34156200059457600080fd5b620004c3600160a060020a0360043581169060243590604435166200189a565b3415620005c057600080fd5b620001bb600160a060020a036004351662001938565b3415620005e257600080fd5b620005ec620019ba565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156200062a57808201518382015260200162000610565b50505050905090810190601f168015620006585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156200067257600080fd5b620001bb60043562001a5c565b34156200068b57600080fd5b6200027a62001a9b565b3415620006a157600080fd5b620001bb600160a060020a0360043516602435151562001aaa565b3415620006c857600080fd5b620001bb600160a060020a036004351662001b07565b3415620006ea57600080fd5b620001bb600160a060020a036004351662001b68565b34156200070c57600080fd5b620001d362001bea565b34156200072257600080fd5b620001bb600160a060020a036004351662001bf0565b34156200074457600080fd5b620001bb600160a060020a036004351662001c72565b34156200076657600080fd5b6200027a600160a060020a036004351662001d0f565b60065481565b600160a060020a0380821660009081526008602052604081205490918291849133811691161480620007c2575060005433600160a060020a039081169116145b1515620007ce57600080fd5b83925082600160a060020a0316634bb278f36040518163ffffffff1660e060020a028152600401600060405180830381600087803b15156200080f57600080fd5b6102c65a03f115156200082157600080fd5b50505082600160a060020a031663fc0c546a6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156200086b57600080fd5b6102c65a03f115156200087d57600080fd5b5050506040518051925050600160a060020a038216637d64bcb46000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515620008cf57600080fd5b6102c65a03f11515620008e157600080fd5b50505060405180515050600160a060020a0384811660009081526008602052604090819020548285169263f2fde38b929116905160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156200095157600080fd5b6102c65a03f115156200096357600080fd5b5050507f2a6b157a3657e33e5e8d0edfd23395833d4241ec1834db5523867157650dc6d283604051600160a060020a03909116815260200160405180910390a150505050565b60008054819081908190819060a060020a900460ff1615620009ca57600080fd5b600160a060020a03808c166000908152600860205260409020548c913381169116148062000a06575060005433600160a060020a039081169116145b151562000a1257600080fd5b8b945084600160a060020a0316634002eda66000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151562000a5c57600080fd5b6102c65a03f1151562000a6e57600080fd5b505050604051805115905062000a8357600080fd5b84600160a060020a0316637d3d65226000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151562000aca57600080fd5b6102c65a03f1151562000adc57600080fd5b50505060405180519050151562000af257600080fd5b84600160a060020a0316632c4e722e6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151562000b3957600080fd5b6102c65a03f1151562000b4b57600080fd5b50505060405180518910905062000b6157600080fd5b84600160a060020a0316634bb278f36040518163ffffffff1660e060020a028152600401600060405180830381600087803b151562000b9f57600080fd5b6102c65a03f1151562000bb157600080fd5b505060068054600101905550600160a060020a03851663146ca5316000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151562000c0457600080fd5b6102c65a03f1151562000c1657600080fd5b5050506040518051600101945050600160a060020a03851663fc0c546a6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151562000c6b57600080fd5b6102c65a03f1151562000c7d57600080fd5b5050506040518051905092506006548b60008c8c8c8a600160a060020a031663521eb2736000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151562000cd957600080fd5b6102c65a03f1151562000ceb57600080fd5b50505060405180519050898e8c8e600160a060020a031663af640d0f6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151562000d3f57600080fd5b6102c65a03f1151562000d5157600080fd5b505050604051805160035460045491925090600160a060020a031662000d7662001dc4565b808e81526020018d81526020018c81526020018b81526020018a815260200189815260200188600160a060020a0316600160a060020a0316815260200187600160a060020a0316600160a060020a031681526020018060200186815260200185815260200184815260200183600160a060020a0316600160a060020a03168152602001828103825287818151815260200191508051906020019080838360005b8381101562000e3057808201518382015260200162000e16565b50505050905090810190601f16801562000e5e5780820380516001836020036101000a031916815260200191505b509e505050505050505050505050505050604051809103906000f080151562000e8657600080fd5b915082600160a060020a031663f2fde38b8360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151562000ed757600080fd5b6102c65a03f1151562000ee957600080fd5b50505084600160a060020a0316629af85760065460405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b151562000f3457600080fd5b6102c65a03f1151562000f4657600080fd5b50505062000f548262001d2a565b509a9950505050505050505050565b600160a060020a03331660009081526005602052604081205460ff168062000f99575060005433600160a060020a039081169116145b151562000fa557600080fd5b506004548390600160a060020a038083169163aab324ae91869186911660006040516020015260405160e060020a63ffffffff8616028152600160a060020a03938416600482015260248101929092529091166044820152606401602060405180830381600087803b15156200101a57600080fd5b6102c65a03f115156200102c57600080fd5b5050506040518051505050505050565b600160a060020a03331660009081526005602052604081205460ff168062001072575060005433600160a060020a039081169116145b15156200107e57600080fd5b5080600160a060020a03811663a8cbabb76040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515620010be57600080fd5b6102c65a03f11515620010d057600080fd5b5050505050565b600160a060020a03808316600090815260086020526040812054909184913382169116148062001115575060005433600160a060020a039081169116145b15156200112157600080fd5b83915081600160a060020a03166343d84d49846040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620011855780820151838201526020016200116b565b50505050905090810190601f168015620011b35780820380516001836020036101000a031916815260200191505b5092505050600060405180830381600087803b1515620011d257600080fd5b6102c65a03f11515620011e457600080fd5b50505050505050565b60005433600160a060020a039081169116146200120957600080fd5b60005460a060020a900460ff1615156200122257600080fd5b6000805474ff0000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000805481908190819060a060020a900460ff16156200128d57600080fd5b60068054600190810190915592508e8e8e620012a862001dd5565b60ff82166040820152606080825281906020820190820186818151815260200191508051906020019080838360005b83811015620012f1578082015183820152602001620012d7565b50505050905090810190601f1680156200131f5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015620013575780820151838201526020016200133d565b50505050905090810190601f168015620013855780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f0801515620013a457600080fd5b915060008a11156200142b5781600160a060020a03166340c10f19878c60006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200140e57600080fd5b6102c65a03f115156200142057600080fd5b505050604051805150505b6006548c8c8b8b8b8b888c8b6000600354600460009054906101000a9004600160a060020a03166200145c62001dc4565b808e81526020018d81526020018c81526020018b81526020018a815260200189815260200188600160a060020a0316600160a060020a0316815260200187600160a060020a0316600160a060020a031681526020018060200186815260200185815260200184815260200183600160a060020a0316600160a060020a03168152602001828103825287818151815260200191508051906020019080838360005b8381101562001516578082015183820152602001620014fc565b50505050905090810190601f168015620015445780820380516001836020036101000a031916815260200191505b509e505050505050505050505050505050604051809103906000f08015156200156c57600080fd5b905060016006541115620015ce5780600160a060020a0316638456cb596040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515620015b857600080fd5b6102c65a03f11515620015ca57600080fd5b5050505b81600160a060020a031663f2fde38b8260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156200161d57600080fd5b6102c65a03f115156200162f57600080fd5b5050506200163d8162001d2a565b9e9d5050505050505050505050505050565b60015481565b6000805433600160a060020a039081169116146200167257600080fd5b5081600160a060020a03811663bcbd98818360405160e060020a63ffffffff84160281526004810191909152602401600060405180830381600087803b1515620016bb57600080fd5b6102c65a03f11515620016cd57600080fd5b505050505050565b60005460a060020a900460ff1681565b600160a060020a03331660009081526005602052604081205460ff16806200171b575060005433600160a060020a039081169116145b15156200172757600080fd5b5080600160a060020a038116638456cb596040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515620010be57600080fd5b60005433600160a060020a039081169116146200178357600080fd5b60005460a060020a900460ff16156200179b57600080fd5b6000805474ff0000000000000000000000000000000000000000191660a060020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600054600160a060020a031681565b60056020526000908152604090205460ff1681565b6000805433600160a060020a039081169116146200182e57600080fd5b5081600160a060020a03811663ae0395ad8360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515620016bb57600080fd5b600760205260009081526040902054600160a060020a031681565b6000805433600160a060020a03908116911614620018b757600080fd5b83600160a060020a031663a9059cbb838560006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156200191557600080fd5b6102c65a03f115156200192757600080fd5b505050604051805195945050505050565b600160a060020a03331660009081526005602052604081205460ff16806200196e575060005433600160a060020a039081169116145b15156200197a57600080fd5b5080600160a060020a03811663fd6b7ef86040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515620010be57600080fd5b60028054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801562001a545780601f1062001a285761010080835404028352916020019162001a54565b820191906000526020600020905b81548152906001019060200180831162001a3657829003601f168201915b505050505081565b60005433600160a060020a0390811691161462001a7857600080fd5b600081101562001a8757600080fd5b600354811062001a9657600080fd5b600355565b600454600160a060020a031681565b60005433600160a060020a0390811691161462001ac657600080fd5b600160a060020a038216151562001adc57600080fd5b600160a060020a03919091166000908152600560205260409020805460ff1916911515919091179055565b60005433600160a060020a0390811691161462001b2357600080fd5b600160a060020a038116151562001b3957600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03331660009081526005602052604081205460ff168062001b9e575060005433600160a060020a039081169116145b151562001baa57600080fd5b5080600160a060020a03811663d156549f6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515620010be57600080fd5b60035481565b600160a060020a03331660009081526005602052604081205460ff168062001c26575060005433600160a060020a039081169116145b151562001c3257600080fd5b5080600160a060020a038116633f4ba83a6040518163ffffffff1660e060020a028152600401600060405180830381600087803b1515620010be57600080fd5b60005433600160a060020a0390811691161462001c8e57600080fd5b600160a060020a038116151562001ca457600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600860205260009081526040902054600160a060020a031681565b6006546000908152600760209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a0387811691821790935585526008909352928190208054909216339093169290921790557fecf477d5a93a9ad7c04ef5d0acde5c9766d02fc48fa420785e50457cd1b1248d90829051600160a060020a03909116815260200160405180910390a150565b60405161171b8062001de783390190565b604051611121806200350283390190560060606040526007805460a060020a61ffff0219169055600060115534156200002657600080fd5b6040516200171b3803806200171b83398101604052808051919060200180519190602001805191906020018051919060200180519190602001805191906020018051919060200180519190602001805182019190602001805191906020018051919060200180519190602001805191508c90508a8a8a8a42841015620000ab57600080fd5b83831015620000b957600080fd5b60008211620000c757600080fd5b600160a060020a0381161515620000dd57600080fd5b620000f5640100000000620013bf6200027382021704565b60008054600160a060020a0319908116600160a060020a039384161782556001969096556002949094556004929092556003805490941691161790915581116200013e57600080fd5b60065560078054600160a060020a03191633600160a060020a031617905562278d008a018911156200016f57600080fd5b600160a060020a03861615156200018557600080fd5b60058411156200019457600080fd5b8360011415620001d1578c60011415620001bd5760008b1015620001b757600080fd5b620001cb565b60008b11620001cb57600080fd5b620001dd565b8a15620001dd57600080fd5b60008c11620001eb57600080fd5b8a8c1015620001f957600080fd5b600d8b9055600e8580516200021392916020019062000279565b50600b8054600160a060020a03978816600160a060020a031991821617909155600c949094556009929092556013805460ff1916905560089b909b55600f9a909a55601080549a9093169916989098179055506200031b95505050505050565b60005b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002bc57805160ff1916838001178555620002ec565b82800160010185558215620002ec579182015b82811115620002ec578251825591602001919060010190620002cf565b50620002fa929150620002fe565b5090565b6200027691905b80821115620002fa576000815560010162000305565b6113f0806200032b6000396000f3006060604052600436106101b25763ffffffff60e060020a6000350416629af85781146101bd578063146ca531146101d35780632c4e722e146101f85780633197cbb61461020b578063355274ea1461021e5780633f4ba83a146102315780634002eda61461024457806340193883146102575780634042b66f1461026a57806343d84d491461027d5780634bb278f3146102ce578063521eb273146102e15780635c975abb1461031057806378e97925146103375780637d3d65221461034a5780638456cb591461035d5780638d4e4083146103705780638da5cb5b1461038357806390db78f9146103965780639e8fcbe914610420578063a8cbabb714610433578063aab324ae14610446578063ae0395ad1461046f578063af640d0f1461048e578063b5545a3c146104a1578063bcbd9881146104b4578063c0e789cc146104ca578063c19d93fb146104dd578063cb13cddb14610514578063d156549f14610533578063d7e64c0014610546578063e7fac72814610559578063ec8ac4d81461056c578063ecb70fb714610580578063f2fde38b14610593578063fc0c546a146105b2578063fd6b7ef8146105c5575b6101bb336105d8565b005b34156101c857600080fd5b6101bb600435610717565b34156101de57600080fd5b6101e6610737565b60405190815260200160405180910390f35b341561020357600080fd5b6101e661073d565b341561021657600080fd5b6101e6610743565b341561022957600080fd5b6101e6610749565b341561023c57600080fd5b6101bb61074f565b341561024f57600080fd5b6101e66107cf565b341561026257600080fd5b6101e66107d5565b341561027557600080fd5b6101e66107db565b341561028857600080fd5b6101bb60046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506107e195505050505050565b34156102d957600080fd5b6101bb610825565b34156102ec57600080fd5b6102f4610846565b604051600160a060020a03909116815260200160405180910390f35b341561031b57600080fd5b610323610855565b604051901515815260200160405180910390f35b341561034257600080fd5b6101e6610865565b341561035557600080fd5b61032361086b565b341561036857600080fd5b6101bb610877565b341561037b57600080fd5b6103236108fc565b341561038e57600080fd5b6102f461091d565b34156103a157600080fd5b6103a961092c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156103e55780820151838201526020016103cd565b50505050905090810190601f1680156104125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561042b57600080fd5b6101e66109ca565b341561043e57600080fd5b6101bb6109d0565b341561045157600080fd5b610323600160a060020a036004358116906024359060443516610a17565b341561047a57600080fd5b6101bb600160a060020a0360043516610ab4565b341561049957600080fd5b6101e6610b13565b34156104ac57600080fd5b6101bb610b19565b34156104bf57600080fd5b6101bb600435610bfb565b34156104d557600080fd5b6102f4610c38565b34156104e857600080fd5b6104f0610c47565b6040518082600481111561050057fe5b60ff16815260200191505060405180910390f35b341561051f57600080fd5b6101e6600160a060020a0360043516610c50565b341561053e57600080fd5b6101bb610c62565b341561055157600080fd5b6101e6610d41565b341561056457600080fd5b6101e6610d47565b6101bb600160a060020a03600435166105d8565b341561058b57600080fd5b610323610d4d565b341561059e57600080fd5b6101bb600160a060020a0360043516610d6f565b34156105bd57600080fd5b6102f4610e0a565b34156105d057600080fd5b6101bb610e19565b600754600090819060a860020a900460ff16156105f457600080fd5b600160a060020a038316151561060957600080fd5b610611610e82565b151561061c57600080fd5b34915061062882610eaa565b60055490915061063e908363ffffffff610ec716565b600555600b54600160a060020a03166340c10f19848360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156106a057600080fd5b6102c65a03f115156106b157600080fd5b505050604051805190505082600160a060020a031633600160a060020a03167f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18848460405191825260208201526040908101905180910390a3610712610ee1565b505050565b60075433600160a060020a0390811691161461073257600080fd5b600a55565b600c5481565b60045481565b60025481565b60065481565b60075433600160a060020a0390811691161461076a57600080fd5b60075460a860020a900460ff16151561078257600080fd5b6007805475ff000000000000000000000000000000000000000000191690557f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600a5481565b600d5481565b60055481565b60075433600160a060020a039081169116146107fc57600080fd5b610804610d4d565b1561080e57600080fd5b600e818051610821929160200190611331565b5050565b60075460a860020a900460ff161561083c57600080fd5b610844610f4e565b565b600354600160a060020a031681565b60075460a860020a900460ff1681565b60015481565b600d5460055410155b90565b60075433600160a060020a0390811691161461089257600080fd5b60075460a860020a900460ff16156108a957600080fd5b6007805475ff000000000000000000000000000000000000000000191660a860020a1790557f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60075474010000000000000000000000000000000000000000900460ff1681565b600754600160a060020a031681565b600e8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b505050505081565b60095481565b60075433600160a060020a039081169116146109eb57600080fd5b600060135460ff1660048111156109fe57fe5b14610a0857600080fd5b6013805460ff19166003179055565b60075460009033600160a060020a03908116911614610a3557600080fd5b83600160a060020a031663a9059cbb838560006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a9257600080fd5b6102c65a03f11515610aa357600080fd5b505050604051805195945050505050565b60075433600160a060020a03908116911614610acf57600080fd5b600160a060020a0381161515610ae457600080fd5b6010805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60085481565b600754600090819060a860020a900460ff1615610b3557600080fd5b600160135460ff166004811115610b4857fe5b1480610b645750600360135460ff166004811115610b6257fe5b145b1515610b6f57600080fd5b505033600160a060020a03811660008181526012602052604080822080549290559091906108fc83150290839051600060405180830381858888f193505050501515610bba57600080fd5b81600160a060020a03167fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d06518260405190815260200160405180910390a25050565b60075433600160a060020a03908116911614610c1657600080fd5b6000811015610c2457600080fd5b600f54811115610c3357600080fd5b600f55565b601054600160a060020a031681565b60135460ff1681565b60126020526000908152604090205481565b60075433600160a060020a03908116911614610c7d57600080fd5b600160135460ff166004811115610c9057fe5b1480610cac5750600360135460ff166004811115610caa57fe5b145b8015610cc057506002546301e13380014210155b1515610ccb57600080fd5b60138054600460ff19909116179055601054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f193505050501515610d1357600080fd5b7f203d82d8d99f63bfecc8335216735e0271df4249ea752b030f9ab305b94e5afe60405160405180910390a1565b60115481565b600f5481565b6006546005546000919010158080610d685750610d6861100f565b91505b5090565b60075433600160a060020a03908116911614610d8a57600080fd5b600160a060020a0381161515610d9f57600080fd5b600754600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600b54600160a060020a031681565b60075433600160a060020a03908116911614610e3457600080fd5b6002546301e1338001421015610e4957600080fd5b601054600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561084457600080fd5b6000808060135460ff166004811115610e9757fe5b149050808015610d685750610d68611017565b6000610ec16004548361104690919063ffffffff16565b92915050565b600082820183811015610ed657fe5b8091505b5092915050565b600160a060020a0333166000908152601260205260409020541515610f0a576011805460010190555b600160a060020a033316600090815260126020526040902054610f33903463ffffffff610ec716565b600160a060020a033316600090815260126020526040902055565b60075433600160a060020a03908116911614610f6957600080fd5b60075474010000000000000000000000000000000000000000900460ff1615610f9157600080fd5b610f99610d4d565b1515610fa457600080fd5b610fac611071565b7f6823b073d48d6e3a7d385eeb601452d680e74bb46afe3255a7d778f3a9b1768160405160405180910390a16007805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055565b600254421190565b60008060065461103234600554610ec790919063ffffffff16565b11159050808015610d685750610d686112ea565b6000808315156110595760009150610eda565b5082820282848281151561106957fe5b0414610ed657fe5b6000808060135460ff16600481111561108657fe5b1461109057600080fd5b61109861086b565b1561117e576013805460ff191660021790557f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a60405160405180910390a16000600f5411156111405761110a6103e86110fe600f5460055461104690919063ffffffff16565b9063ffffffff61131a16565b601054909250600160a060020a031682156108fc0283604051600060405180830381858888f19350505050151561114057600080fd5b600354600160a060020a039081169030163180156108fc0290604051600060405180830381858888f19350505050151561117957600080fd5b6111b8565b6013805460ff191660011790557f599d8e5a83cffb867d051598c4d70e805d59802d8081c1c7d6dffc5b6aca2b8960405160405180910390a15b6000600f541115611277576111f26103e86110fe600f546111e660045460065461104690919063ffffffff16565b9063ffffffff61104616565b600b54600754919250600160a060020a03908116916340c10f1991168360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561125b57600080fd5b6102c65a03f1151561126c57600080fd5b505050604051805150505b600b54600754600160a060020a039182169163f2fde38b911660405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b15156112ce57600080fd5b6102c65a03f115156112df57600080fd5b505050610821610844565b6000806000600154421015801561130357506002544211155b9150503415158180156113135750805b9250505090565b600080828481151561132857fe5b04949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061137257805160ff191683800117855561139f565b8280016001018555821561139f579182015b8281111561139f578251825591602001919060010190611384565b50610d6b926108749250905b80821115610d6b57600081556001016113ab565b6000905600a165627a7a723058202ca7a0f689784860e5cfdf0618626248625580bedea70e38e7bc61c1fe39b73b002960606040526006805460a060020a60ff021916905534156200002057600080fd5b60405162001121380380620011218339810160405280805182019190602001805182019190602001805191508390508282600083805162000066929160200190620000cd565b5060018280516200007c929160200190620000cd565b506002805460ff90921660ff19909216919091179055505060068054600160a060020a03338116600160a060020a031992831617928390556007805490921692169190911790555062000172915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011057805160ff191683800117855562000140565b8280016001018555821562000140579182015b828111156200014057825182559160200191906001019062000123565b506200014e92915062000152565b5090565b6200016f91905b808211156200014e576000815560010162000159565b90565b610f9f80620001826000396000f3006060604052600436106100f85763ffffffff60e060020a60003504166305d2035b81146100fd57806306fdde0314610124578063095ea7b3146101ae57806318160ddd146101d057806323b872dd146101f5578063313ce5671461021d57806340c10f191461024657806342966c6814610268578063661884631461028057806370a08231146102a25780637d64bcb4146102c15780638da5cb5b146102d457806395d89b4114610303578063a9059cbb14610316578063aab324ae14610338578063cae9ca5114610361578063d73dd623146103c6578063d7e84fbf146103e8578063dd62ed3e146103fb578063f2fde38b14610420575b600080fd5b341561010857600080fd5b61011061043f565b604051901515815260200160405180910390f35b341561012f57600080fd5b61013761044f565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561017357808201518382015260200161015b565b50505050905090810190601f1680156101a05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101b957600080fd5b610110600160a060020a03600435166024356104ed565b34156101db57600080fd5b6101e3610559565b60405190815260200160405180910390f35b341561020057600080fd5b610110600160a060020a036004358116906024351660443561055f565b341561022857600080fd5b61023061058d565b60405160ff909116815260200160405180910390f35b341561025157600080fd5b610110600160a060020a0360043516602435610596565b341561027357600080fd5b61027e6004356106a4565b005b341561028b57600080fd5b610110600160a060020a036004351660243561075e565b34156102ad57600080fd5b6101e3600160a060020a0360043516610858565b34156102cc57600080fd5b610110610873565b34156102df57600080fd5b6102e76108fe565b604051600160a060020a03909116815260200160405180910390f35b341561030e57600080fd5b61013761090d565b341561032157600080fd5b610110600160a060020a0360043516602435610978565b341561034357600080fd5b610110600160a060020a0360043581169060243590604435166109a4565b341561036c57600080fd5b61011060048035600160a060020a03169060248035919060649060443590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610a4195505050505050565b34156103d157600080fd5b610110600160a060020a0360043516602435610b5c565b34156103f357600080fd5b6102e7610c00565b341561040657600080fd5b6101e3600160a060020a0360043581169060243516610c0f565b341561042b57600080fd5b61027e600160a060020a0360043516610c3a565b60065460a060020a900460ff1681565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104e55780601f106104ba576101008083540402835291602001916104e5565b820191906000526020600020905b8154815290600101906020018083116104c857829003601f168201915b505050505081565b600160a060020a03338116600081815260056020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60045490565b60065460009060a060020a900460ff16151561057a57600080fd5b610585848484610cd5565b949350505050565b60025460ff1681565b60065460009033600160a060020a039081169116146105b457600080fd5b60065460a060020a900460ff16156105cb57600080fd5b6004546105de908363ffffffff610e5716565b600455600160a060020a03831660009081526003602052604090205461060a908363ffffffff610e5716565b600160a060020a0384166000818152600360205260409081902092909255907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859084905190815260200160405180910390a2600160a060020a03831660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350600192915050565b600160a060020a0333166000908152600360205260408120548211156106c957600080fd5b5033600160a060020a0381166000908152600360205260409020546106ee9083610e66565b600160a060020a03821660009081526003602052604090205560045461071a908363ffffffff610e6616565b600455600160a060020a0381167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca58360405190815260200160405180910390a25050565b600160a060020a033381166000908152600560209081526040808320938616835292905290812054808311156107bb57600160a060020a0333811660009081526005602090815260408083209388168352929052908120556107f2565b6107cb818463ffffffff610e6616565b600160a060020a033381166000908152600560209081526040808320938916835292905220555b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526003602052604090205490565b60065460009033600160a060020a0390811691161461089157600080fd5b60065460a060020a900460ff16156108a857600080fd5b6006805474ff0000000000000000000000000000000000000000191660a060020a1790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a150600190565b600654600160a060020a031681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104e55780601f106104ba576101008083540402835291602001916104e5565b60065460009060a060020a900460ff16151561099357600080fd5b61099d8383610e78565b9392505050565b60065460009033600160a060020a039081169116146109c257600080fd5b83600160a060020a031663a9059cbb838560006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610a1f57600080fd5b6102c65a03f11515610a3057600080fd5b505050604051805195945050505050565b6000610a4d84846104ed565b1515610a5857600080fd5b83600160a060020a0316638f4ffcb1338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610af0578082015183820152602001610ad8565b50505050905090810190601f168015610b1d5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1515610b3e57600080fd5b6102c65a03f11515610b4f57600080fd5b5060019695505050505050565b600160a060020a033381166000908152600560209081526040808320938616835292905290812054610b94908363ffffffff610e5716565b600160a060020a0333811660008181526005602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600754600160a060020a031681565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60065433600160a060020a03908116911614610c5557600080fd5b600160a060020a0381161515610c6a57600080fd5b600654600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610cec57600080fd5b600160a060020a038416600090815260036020526040902054821115610d1157600080fd5b600160a060020a0380851660009081526005602090815260408083203390941683529290522054821115610d4457600080fd5b600160a060020a038416600090815260036020526040902054610d6d908363ffffffff610e6616565b600160a060020a038086166000908152600360205260408082209390935590851681522054610da2908363ffffffff610e5716565b600160a060020a03808516600090815260036020908152604080832094909455878316825260058152838220339093168252919091522054610dea908363ffffffff610e6616565b600160a060020a03808616600081815260056020908152604080832033861684529091529081902093909355908516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060019392505050565b60008282018381101561099d57fe5b600082821115610e7257fe5b50900390565b6000600160a060020a0383161515610e8f57600080fd5b600160a060020a033316600090815260036020526040902054821115610eb457600080fd5b600160a060020a033316600090815260036020526040902054610edd908363ffffffff610e6616565b600160a060020a033381166000908152600360205260408082209390935590851681522054610f12908363ffffffff610e5716565b600160a060020a0380851660008181526003602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3506001929150505600a165627a7a72305820e69d6a104d0807d74a9c38bead230d32a3e29fa1901ef25e58bc90d0528ff2010029a165627a7a72305820073d930c6764c1ae84c8358324396e6ffd7c3faa1cc1aa14d7a8d856aaa66b88002900000000000000000000000086486e4329c7f29cf6cc6fbdea6f00040f272856",
  "constructorArguments": "00000000000000000000000086486e4329c7f29cf6cc6fbdea6f00040f272856"
}