{
  "address": "0x28b15fbf3fec9eeb65f7f0c2f892d471a3d75ea0",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "RaeMintContract",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "byzantium",
  "sourceCode": "pragma solidity 0.5.7;\n\nimport \"./RaeToken.sol\";\nimport \"Ownable.sol\";\n\ncontract RaeMintContract is Ownable {\n    using SafeMath for uint256;\n\n    RaeToken private _token;\n    uint256 constant _pct = 28;\n\n    \n    \n    /**\n    * @dev create minting contract, passing token contract that will be the target of minting.\n    * On deployment, deployer of RaeToken contract will be given minterRole. With that minterRole the deployer will\n    * assign minterRole to this contract, and finally the deployer will revoke minterRole from himself so \n    * that this contract is the only possible minter for RaeToken. Owner of this contract will be the only person\n    * who can issue mint, bulkMint functions\n     */\n    constructor(RaeToken token) Ownable() public \n    {\n        _token = token;\n    }\n\n    /**\n    * @dev perform a bulk mint, only callable by addresses that have mintRole. aggregators[i] will be minted _pct * values[i] and\n    * addresses[i] will be minted values[i] - pct * values[i]\n    * Will revert if:\n    * addresses.length <= 0\n    * the adresses.length != values.length or addresses.length != aggregators.length\n    * totalSent != _mintAmount\n\n    * @param addresses array of addresses where amount minted to addresses[i] is values[i] - _pct * values[i]\n    * @param values array of mint values\n    * @param aggregators array of addresses where amount minted to aggregators[i] is _pct * values[i]\n    * @return A boolean that indicates the operation was successful\n     */\n    function bulkMintAggregator(address[] memory addresses, uint256[] memory values, address[] memory aggregators) public onlyOwner returns (bool)\n    {\n        if(_token.period() != 0)\n        {\n            uint256 totalSent = 0;\n            require(addresses.length > 0);\n            require(addresses.length == values.length);\n            require(addresses.length == aggregators.length);\n\n            uint256 addrSize = addresses.length;\n            uint256 size = addrSize.add(addrSize);\n            address[] memory bulkAddresses = new address[](size);\n            uint256[] memory bulkValues = new uint256[](size);\n\n            uint256 j = 0;\n            for(uint256 i = 0; i < addresses.length; ++i)\n            {\n                uint256 aggregatorReward = values[i].mul(_pct).div(100);\n                uint256 creatorReward = values[i].sub(aggregatorReward);\n                totalSent = totalSent.add(aggregatorReward + creatorReward);\n                \n                // add address[i] and aggregators[i] to bulkAddresses\n                bulkAddresses[j] = addresses[i];\n                bulkValues[j] = creatorReward;\n\n                bulkAddresses[j+1] = aggregators[i];\n                bulkValues[j+1] = aggregatorReward;\n\n                // increment j by 2\n                j = j + 2;\n            }\n            require(totalSent <= _token.remainingInPeriod());\n            _token.mintBulk(bulkAddresses, bulkValues); // perform the mint or parts of mint for this period       \n            return true;\n        }\n        else \n        {\n            _bulkMintFirstPeriod(addresses, values);\n            return true;\n        }\n    }\n\n    /**\n    @dev function can only only be called when token mint period is 0, this is to handle the first minting period gracefully, without burning extra tokens\n     */\n    function _bulkMintFirstPeriod(address[] memory addresses, uint256[] memory values) internal returns (bool) {\n        require(_token.period() == 0);\n        require(addresses.length != 0);\n        require(addresses.length == values.length);\n\n        uint256 totalSent = 0;\n        for(uint256 i =0; i < addresses.length; ++i) totalSent = totalSent.add(values[i]);\n        require(totalSent <= _token.remainingInPeriod());\n        _token.mintBulk(addresses, values);\n        return true;\n    }\n\n\n\n     /**\n     * @dev function addMinter should be used if switching minting contracts. Minting contracts will be switched\n     * in the future to include a sufficient reward to incentivize federated servers to work for the network. \n     * This amount will be determined after the costs of running federated servers are known after \n     * a period of initial network usage. \n     * Decision was made to switch contracts rather than use malleable variables for transparency \n     * First add address of new minting contract as minter, then renounce\n     * mintingRole for this contract, making it unable to mint\n     */ \n    function addMinter(address addr) external onlyOwner returns (bool)\n    {\n        _token.addMinter(addr);\n        return true;\n    }\n\n    /**\n     * @dev renounce minting role from this smart contract, should be used if switching minting contracts\n     */\n    function renounceMintingRole() external onlyOwner returns (bool)\n    {\n        _token.renounceMinter();\n        return true;\n    }\n\n    \n    function period() external view returns (uint256){\n        return _token.period();\n    }\n\n    function mintAmount() external view returns (uint256){\n        return _token.mintAmount();\n    }\n\n\n    function tokensRemainingInPeriod() external view returns (uint256) {\n        return _token.remainingInPeriod();\n    }\n\n    function tokensInPeriod() external view returns (uint256) {\n        return _token.totalInPeriod();\n    }\n\n    /**\n    @dev get the token contract's address to which this contract is issuing minting calls\n    @return address of token contract\n     */\n    function token() external view returns (address)\n    {\n        return address(_token);\n    }\n\n\n    \n\n    \n\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"mintAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMintingRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"aggregators\",\"type\":\"address[]\"}],\"name\":\"bulkMintAggregator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensInPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRemainingInPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610f528339810180604052602081101561003057600080fd5b505160008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a360018054600160a060020a031916600160a060020a0392909216919091179055610ea8806100aa6000396000f3fe608060405234801561001057600080fd5b50600436106100b85760003560e060020a90048063983b2d5611610075578063983b2d56146102d4578063e207b334146102fa578063ecd4e02814610302578063ef78d4fd1461030a578063f2fde38b14610312578063fc0c546a14610338576100b8565b80635a2bcc18146100bd5780635d58bf42146100d7578063715018a6146100f3578063884a727b146100fd5780638da5cb5b146102a85780638f32d59b146102cc575b600080fd5b6100c5610340565b60408051918252519081900360200190f35b6100df6103cf565b604080519115158252519081900360200190f35b6100fb610454565b005b6100df6004803603606081101561011357600080fd5b81019060208101813564010000000081111561012e57600080fd5b82018360208201111561014057600080fd5b8035906020019184602083028401116401000000008311171561016257600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156101b257600080fd5b8201836020820111156101c457600080fd5b803590602001918460208302840111640100000000831117156101e657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561023657600080fd5b82018360208201111561024857600080fd5b8035906020019184602083028401116401000000008311171561026a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506104bc945050505050565b6102b0610902565b60408051600160a060020a039092168252519081900360200190f35b6100df610911565b6100df600480360360208110156102ea57600080fd5b5035600160a060020a0316610922565b6100c56109bc565b6100c5610a1a565b6100c5610a78565b6100fb6004803603602081101561032857600080fd5b5035600160a060020a0316610ad6565b6102b0610af3565b600154604080517f5a2bcc180000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691635a2bcc18916004808301926020929190829003018186803b15801561039e57600080fd5b505afa1580156103b2573d6000803e3d6000fd5b505050506040513d60208110156103c857600080fd5b5051905090565b60006103d9610911565b6103e257600080fd5b600160009054906101000a9004600160a060020a0316600160a060020a031663986502756040518163ffffffff1660e060020a028152600401600060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b505050506001905090565b61045c610911565b61046557600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60006104c6610911565b6104cf57600080fd5b600160009054906101000a9004600160a060020a0316600160a060020a031663ef78d4fd6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561052057600080fd5b505afa158015610534573d6000803e3d6000fd5b505050506040513d602081101561054a57600080fd5b5051156108eb57835160009061055f57600080fd5b835185511461056d57600080fd5b825185511461057b57600080fd5b8451600061058f828063ffffffff610b0216565b90506060816040519080825280602002602001820160405280156105bd578160200160208202803883390190505b5090506060826040519080825280602002602001820160405280156105ec578160200160208202803883390190505b5090506000805b8a5181101561073d576000610636606461062a601c8e868151811061061457fe5b6020026020010151610b1d90919063ffffffff16565b9063ffffffff610b4416565b90506000610660828d858151811061064a57fe5b6020026020010151610b6690919063ffffffff16565b90506106748983830163ffffffff610b0216565b98508c838151811061068257fe5b602002602001015186858151811061069657fe5b6020026020010190600160a060020a03169081600160a060020a031681525050808585815181106106c357fe5b6020026020010181815250508a83815181106106db57fe5b60200260200101518685600101815181106106f257fe5b6020026020010190600160a060020a03169081600160a060020a0316815250508185856001018151811061072257fe5b602090810291909101015250506002909101906001016105f3565b50600160009054906101000a9004600160a060020a0316600160a060020a031663b5b80f126040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561078f57600080fd5b505afa1580156107a3573d6000803e3d6000fd5b505050506040513d60208110156107b957600080fd5b50518611156107c757600080fd5b600154604080517f7fd30df000000000000000000000000000000000000000000000000000000000815260048101918252855160448201528551600160a060020a0390931692637fd30df09287928792829160248101916064909101906020808801910280838360005b83811015610849578181015183820152602001610831565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610888578181015183820152602001610870565b50505050905001945050505050602060405180830381600087803b1580156108af57600080fd5b505af11580156108c3573d6000803e3d6000fd5b505050506040513d60208110156108d957600080fd5b50600197506108fb9650505050505050565b6108f58484610b7b565b50600190505b9392505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b600061092c610911565b61093557600080fd5b600154604080517f983b2d56000000000000000000000000000000000000000000000000000000008152600160a060020a0385811660048301529151919092169163983b2d5691602480830192600092919082900301818387803b15801561099c57600080fd5b505af11580156109b0573d6000803e3d6000fd5b50600195945050505050565b600154604080517f1efe93950000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691631efe9395916004808301926020929190829003018186803b15801561039e57600080fd5b600154604080517fb5b80f120000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163b5b80f12916004808301926020929190829003018186803b15801561039e57600080fd5b600154604080517fef78d4fd0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163ef78d4fd916004808301926020929190829003018186803b15801561039e57600080fd5b610ade610911565b610ae757600080fd5b610af081610e01565b50565b600154600160a060020a031690565b600082820183811015610b1457600080fd5b90505b92915050565b600082610b2c57506000610b17565b82820282848281610b3957fe5b0414610b1457600080fd5b6000808211610b5257600080fd5b6000828481610b5d57fe5b04949350505050565b600082821115610b7557600080fd5b50900390565b600154604080517fef78d4fd0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163ef78d4fd916004808301926020929190829003018186803b158015610bd957600080fd5b505afa158015610bed573d6000803e3d6000fd5b505050506040513d6020811015610c0357600080fd5b505115610c0f57600080fd5b8251610c1a57600080fd5b8151835114610c2857600080fd5b6000805b8451811015610c6557610c5b848281518110610c4457fe5b602002602001015183610b0290919063ffffffff16565b9150600101610c2c565b50600160009054906101000a9004600160a060020a0316600160a060020a031663b5b80f126040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610cb757600080fd5b505afa158015610ccb573d6000803e3d6000fd5b505050506040513d6020811015610ce157600080fd5b5051811115610cef57600080fd5b600154604080517f7fd30df000000000000000000000000000000000000000000000000000000000815260048101918252865160448201528651600160a060020a0390931692637fd30df09288928892829160248101916064909101906020808801910280838360005b83811015610d71578181015183820152602001610d59565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610db0578181015183820152602001610d98565b50505050905001945050505050602060405180830381600087803b158015610dd757600080fd5b505af1158015610deb573d6000803e3d6000fd5b505050506040513d60208110156109b057600080fd5b600160a060020a038116610e1457600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820ae6118d001f9476558c34b1ed02a114cea88fc6677c9454af710206d139770420029000000000000000000000000e5a3229ccb22b6484594973a03a3851dcd948756",
  "constructorArguments": "000000000000000000000000e5a3229ccb22b6484594973a03a3851dcd948756"
}