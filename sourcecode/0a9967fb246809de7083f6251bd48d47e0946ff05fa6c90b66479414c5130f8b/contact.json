{
  "address": "0xf34405afd5d3a159600f2a847cc22b2e2b09ad8f",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TrebitToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-17\n*/\n\npragma solidity 0.4.24;\n\n// File: contracts\\Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: contracts\\ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: contracts\\SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n// File: contracts\\BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: contracts\\BurnableToken.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: contracts\\ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts\\StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts\\TrebitToken.sol\n\n/** @title Trebit Token\n  * An ERC20-compliant token.\n  */\ncontract TrebitToken is StandardToken, Ownable, BurnableToken {\n    using SafeMath for uint256;\n\n    string public name = \"TREBIT COIN\";\n    string public symbol = \"TCO\";\n    uint256 public decimals = 18;\n\n    // global token transfer lock\n    bool public globalTokenTransferLock;\n\n    // mapping that provides address based lock. default at the time of issueance\n    // is locked, and will not be transferrable until explicit unlock call for\n    // the address.\n    mapping( address => bool ) public lockedStatusAddress;\n\n    event GlobalLocked();\n    event GlobalUnlocked();\n    event Locked(address lockedAddress);\n    event Unlocked(address unlockedaddress);\n\n    // Check for global lock status to be unlocked\n    modifier checkGlobalTokenTransferLock {\n        require(!globalTokenTransferLock);\n        _;\n    }\n\n    // Check for address lock to be unlocked\n    modifier checkAddressLock {\n        require(!lockedStatusAddress[msg.sender]);\n        _;\n    }\n\n    constructor() public {\n        totalSupply_ = 150000000000 * (10**18);\n        balances[msg.sender] = 150000000000 * (10**18);\n    }\n\n    function setGlobalTokenTransferLock(bool locked) public\n    onlyOwner\n    returns (bool)\n    {\n        globalTokenTransferLock = locked;\n        if (globalTokenTransferLock) {\n            emit GlobalLocked();\n        } else {\n            emit GlobalUnlocked();\n        }\n        return globalTokenTransferLock;\n    }\n\n    /**\n      * @dev Allows token issuer to lock token transfer for an address.\n      * @param target Target address to lock token transfer.\n      */\n    function lockAddress(address target) public\n    onlyOwner\n    {\n        require(owner != target);\n        lockedStatusAddress[target] = true;\n        emit Locked(target);\n    }\n\n    /**\n      * @dev Allows token issuer to unlock token transfer for an address.\n      * @param target Target address to unlock token transfer.\n      */\n    function unlockAddress(address target) public\n    onlyOwner\n    {\n        lockedStatusAddress[target] = false;\n        emit Unlocked(target);\n    }\n\n    /** @dev Transfer `_value` token to `_to` from `msg.sender`, on the condition\n      * that global token lock and individual address lock in the `msg.sender`\n      * accountare both released.\n      * @param _to The address of the recipient.\n      * @param _value The amount of token to be transferred.\n      * @return Whether the transfer was successful or not.\n      */\n    function transfer(address _to, uint256 _value)\n    public\n    checkGlobalTokenTransferLock\n    checkAddressLock\n    returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public\n    checkGlobalTokenTransferLock\n    checkAddressLock\n    returns (bool)\n    {\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(_to != address(0));\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n}",
  "bytecode": "60c0604052600b60808190527f54524542495420434f494e00000000000000000000000000000000000000000060a090815261003e91600491906100d3565b506040805180820190915260038082527f54434f00000000000000000000000000000000000000000000000000000000006020909201918252610083916005916100d3565b50601260065534801561009557600080fd5b5060038054600160a060020a031916339081179091556c01e4ad1785a42b23aff000000060018190556000918252602082905260409091205561016e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011457805160ff1916838001178555610141565b82800160010185558215610141579182015b82811115610141578251825591602001919060010190610126565b5061014d929150610151565b5090565b61016b91905b8082111561014d5760008155600101610157565b90565b610e208061017d6000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610116578063095ea7b3146101a05780631701c1fa146101d857806318160ddd146101f957806323b872dd14610220578063313ce5671461024a57806334a90d021461025f57806342966c681461028257806354a598b01461029a57806366188463146102af57806370a08231146102d3578063715018a6146102f457806374398d45146103095780638da5cb5b1461032357806395d89b4114610354578063a9059cbb14610369578063b7eb5e0a1461038d578063d73dd623146103ae578063dd62ed3e146103d2578063f2fde38b146103f9575b600080fd5b34801561012257600080fd5b5061012b61041a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ac57600080fd5b506101c4600160a060020a03600435166024356104a8565b604080519115158252519081900360200190f35b3480156101e457600080fd5b506101c4600160a060020a036004351661050e565b34801561020557600080fd5b5061020e610523565b60408051918252519081900360200190f35b34801561022c57600080fd5b506101c4600160a060020a0360043581169060243516604435610529565b34801561025657600080fd5b5061020e6106ce565b34801561026b57600080fd5b50610280600160a060020a03600435166106d4565b005b34801561028e57600080fd5b50610280600435610761565b3480156102a657600080fd5b506101c461076e565b3480156102bb57600080fd5b506101c4600160a060020a0360043516602435610777565b3480156102df57600080fd5b5061020e600160a060020a0360043516610866565b34801561030057600080fd5b50610280610881565b34801561031557600080fd5b506101c460043515156108ef565b34801561032f57600080fd5b50610338610984565b60408051600160a060020a039092168252519081900360200190f35b34801561036057600080fd5b5061012b610993565b34801561037557600080fd5b506101c4600160a060020a03600435166024356109ee565b34801561039957600080fd5b50610280600160a060020a0360043516610afd565b3480156103ba57600080fd5b506101c4600160a060020a0360043516602435610b6c565b3480156103de57600080fd5b5061020e600160a060020a0360043581169060243516610c05565b34801561040557600080fd5b50610280600160a060020a0360043516610c30565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a05780601f10610475576101008083540402835291602001916104a0565b820191906000526020600020905b81548152906001019060200180831161048357829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60086020526000908152604090205460ff1681565b60015490565b60075460009060ff161561053c57600080fd5b3360009081526008602052604090205460ff161561055957600080fd5b600160a060020a03841660009081526020819052604090205482111561057e57600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156105ae57600080fd5b600160a060020a03831615156105c357600080fd5b600160a060020a0384166000908152602081905260409020546105ec908363ffffffff610c5016565b600160a060020a038086166000908152602081905260408082209390935590851681522054610621908363ffffffff610c6216565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610663908363ffffffff610c5016565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b60065481565b600354600160a060020a031633146106eb57600080fd5b600354600160a060020a038281169116141561070657600080fd5b600160a060020a038116600081815260086020908152604091829020805460ff19166001179055815192835290517f44427e3003a08f22cf803894075ac0297524e09e521fc1c15bc91741ce3dc1599281900390910190a150565b61076b3382610c75565b50565b60075460ff1681565b336000908152600260209081526040808320600160a060020a03861684529091528120548083106107cb57336000908152600260209081526040808320600160a060020a0388168452909152812055610800565b6107db818463ffffffff610c5016565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461089857600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a0316331461090957600080fd5b6007805460ff1916831515179081905560ff161561094f576040517fb85cf10bd822b94b5eab69d0f78f0333175064b551dab3bccd6ac8b2d4ec2d2390600090a1610979565b6040517f1a8206594b2958f00beef441f19318b0b0577e2c96d44c262017b20b10f2f0a390600090a15b505060075460ff1690565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a05780601f10610475576101008083540402835291602001916104a0565b60075460009060ff1615610a0157600080fd5b3360009081526008602052604090205460ff1615610a1e57600080fd5b600160a060020a0383161515610a3357600080fd5b33600090815260208190526040902054821115610a4f57600080fd5b33600090815260208190526040902054610a6f908363ffffffff610c5016565b3360009081526020819052604080822092909255600160a060020a03851681522054610aa1908363ffffffff610c6216565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600354600160a060020a03163314610b1457600080fd5b600160a060020a038116600081815260086020908152604091829020805460ff19169055815192835290517f7e6adfec7e3f286831a0200a754127c171a2da564078722cb97704741bbdb0ea9281900390910190a150565b336000908152600260209081526040808320600160a060020a0386168452909152812054610ba0908363ffffffff610c6216565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610c4757600080fd5b61076b81610d76565b600082821115610c5c57fe5b50900390565b81810182811015610c6f57fe5b92915050565b600160a060020a038216600090815260208190526040902054811115610c9a57600080fd5b600160a060020a038216600090815260208190526040902054610cc3908263ffffffff610c5016565b600160a060020a038316600090815260208190526040902055600154610cef908263ffffffff610c5016565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b600160a060020a0381161515610d8b57600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820375ba190d36e089a308f6bd3a69dd76e25b5c462482287e9ed06d3d36cf4be220029"
}