{
  "address": "0xe8940b7d6f17f24583894f807bc2764aa635d36b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "JCB",
  "compilerVersion": "v0.4.23+commit.124ca40d",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-11\n*/\n\npragma solidity ^0.4.23;\n\nlibrary SafeMathLib {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract DateTimeLib {\n\n    struct _DateTime {\n        uint16 year;\n        uint8 month;\n        uint8 day;\n        uint8 hour;\n        uint8 minute;\n        uint8 second;\n        uint8 weekday;\n    }\n\n    uint constant DAY_IN_SECONDS = 86400;\n    uint constant YEAR_IN_SECONDS = 31536000;\n    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n    uint constant HOUR_IN_SECONDS = 3600;\n    uint constant MINUTE_IN_SECONDS = 60;\n\n    uint16 constant ORIGIN_YEAR = 1970;\n\n    function isLeapYear(uint16 year) internal pure returns (bool) {\n        if (year % 4 != 0) {\n            return false;\n        }\n        if (year % 100 != 0) {\n            return true;\n        }\n        if (year % 400 != 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function leapYearsBefore(uint year) internal pure returns (uint) {\n        year -= 1;\n        return year / 4 - year / 100 + year / 400;\n    }\n\n    function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            return 31;\n        }\n        else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            return 30;\n        }\n        else if (isLeapYear(year)) {\n            return 29;\n        }\n        else {\n            return 28;\n        }\n    }\n\n    function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n        uint secondsAccountedFor = 0;\n        uint buf;\n        uint8 i;\n\n        dt.year = getYear(timestamp);\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n        uint secondsInMonth;\n        for (i = 1; i <= 12; i++) {\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\n                dt.month = i;\n                break;\n            }\n            secondsAccountedFor += secondsInMonth;\n        }\n\n        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                dt.day = i;\n                break;\n            }\n            secondsAccountedFor += DAY_IN_SECONDS;\n        }\n        dt.hour = getHour(timestamp);\n        dt.minute = getMinute(timestamp);\n        dt.second = getSecond(timestamp);\n        dt.weekday = getWeekday(timestamp);\n    }\n\n    function getYear(uint timestamp) internal pure returns (uint16) {\n        uint secondsAccountedFor = 0;\n        uint16 year;\n        uint numLeapYears;\n\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n        while (secondsAccountedFor > timestamp) {\n            if (isLeapYear(uint16(year - 1))) {\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n            }\n            else {\n                secondsAccountedFor -= YEAR_IN_SECONDS;\n            }\n            year -= 1;\n        }\n        return year;\n    }\n\n    function getMonth(uint timestamp) internal pure returns (uint8) {\n        return parseTimestamp(timestamp).month;\n    }\n\n    function getDay(uint timestamp) internal pure returns (uint8) {\n        return parseTimestamp(timestamp).day;\n    }\n\n    function getHour(uint timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / 60 / 60) % 24);\n    }\n\n    function getMinute(uint timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / 60) % 60);\n    }\n\n    function getSecond(uint timestamp) internal pure returns (uint8) {\n        return uint8(timestamp % 60);\n    }\n\n    function getWeekday(uint timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day) internal pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, 0, 0, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) internal pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, hour, 0, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) internal pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, hour, minute, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) internal pure returns (uint timestamp) {\n        uint16 i;\n        for (i = ORIGIN_YEAR; i < year; i++) {\n            if (isLeapYear(i)) {\n                timestamp += LEAP_YEAR_IN_SECONDS;\n            }\n            else {\n                timestamp += YEAR_IN_SECONDS;\n            }\n        }\n\n        uint8[12] memory monthDayCounts;\n        monthDayCounts[0] = 31;\n        if (isLeapYear(year)) {\n            monthDayCounts[1] = 29;\n        }\n        else {\n            monthDayCounts[1] = 28;\n        }\n        monthDayCounts[2] = 31;\n        monthDayCounts[3] = 30;\n        monthDayCounts[4] = 31;\n        monthDayCounts[5] = 30;\n        monthDayCounts[6] = 31;\n        monthDayCounts[7] = 31;\n        monthDayCounts[8] = 30;\n        monthDayCounts[9] = 31;\n        monthDayCounts[10] = 30;\n        monthDayCounts[11] = 31;\n\n        for (i = 1; i < month; i++) {\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n        }\n\n        timestamp += DAY_IN_SECONDS * (day - 1);\n        timestamp += HOUR_IN_SECONDS * (hour);\n        timestamp += MINUTE_IN_SECONDS * (minute);\n        timestamp += second;\n\n        return timestamp;\n    }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external constant returns (uint256);\n    function balanceOf(address _owner) external constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address _spender, uint256 _value);\n}\n\ncontract StandardToken is IERC20,DateTimeLib {\n\n    using SafeMathLib for uint256;\n\n    mapping(address => uint256) balances;\n\n    mapping(address => mapping(address => uint256)) allowed;\n    \n    string public constant symbol = \"JCB\";\n    \n    string public constant name = \"JoinCoin\";\n    \n    uint _totalSupply = 1000000000 * 10 ** 8;\n    \n    uint8 public constant decimals = 8;\n    \n    function totalSupply() external constant returns (uint256) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address _owner) external constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        return transferInternal(msg.sender, _to, _value);\n    }\n\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\n        require(_value > 0 && balances[_from] >= _value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value > 0 && allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract LockableToken is StandardToken {\n    \n    address internal developerReservedAddress = 0xf4ab0e0269E05163E65608F44E80A125A511a916;\n    \n    uint[4] internal developerReservedUnlockTimes;\n    \n    uint256[4] internal developerReservedBalanceLimits;\n    \n    function getDeveloperReservedBalanceLimit() internal returns (uint256 balanceLimit) {\n        uint time = now;\n        for (uint index = 0; index < developerReservedUnlockTimes.length; index++) {\n            if (developerReservedUnlockTimes[index] == 0x0) {\n                continue;\n            }\n            if (time > developerReservedUnlockTimes[index]) {\n                developerReservedUnlockTimes[index] = 0x0;\n            } else {\n                return developerReservedBalanceLimits[index];\n            }\n        }\n        return 0;\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        return transferInternal(msg.sender, _to, _value);\n    }\n\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\n        require(_from != 0x0 && _to != 0x0 && _value > 0x0);\n        if (_from == developerReservedAddress) {\n            uint256 balanceLimit = getDeveloperReservedBalanceLimit();\n            require(balances[_from].sub(balanceLimit) >= _value);\n        }\n        return super.transferInternal(_from, _to, _value);\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_from != 0x0 && _to != 0x0 && _value > 0x0);\n        if (_from == developerReservedAddress) {\n            uint256 balanceLimit = getDeveloperReservedBalanceLimit();\n            require(balances[_from].sub(balanceLimit) >= _value);\n        }\n        return super.transferFrom(_from, _to, _value);\n    }\n    \n    event UnlockTimeChanged(uint index, uint unlockTime, uint newUnlockTime);\n    event LockInfo(address indexed publicOfferingAddress, uint index, uint unlockTime, uint256 balanceLimit);\n}\n\ncontract TradeableToken is LockableToken {\n\n    address internal publicOfferingAddress = 0xbdB45923Bf511801F71EAeD4fbd926E48bA43DB5;\n\n    uint256 public exchangeRate = 4000;\n\n    function buy(address _beneficiary, uint256 _weiAmount) internal {\n        require(_beneficiary != 0x0);\n        require(publicOfferingAddress != 0x0);\n        require(exchangeRate > 0x0);\n        require(_weiAmount > 0x0);\n\n        uint256 exchangeToken = _weiAmount.mul(exchangeRate);\n        exchangeToken = exchangeToken.div(1 * 10 ** 10);\n\n        publicOfferingAddress.transfer(_weiAmount);\n        super.transferInternal(publicOfferingAddress, _beneficiary, exchangeToken);\n    }\n    \n    event ExchangeRateChanged(uint256 oldExchangeRate,uint256 newExchangeRate);\n}\n\ncontract OwnableToken is TradeableToken {\n    \n    address internal owner = 0xfe71ea94aD48c03a8B1D5c8A371E36Fc0E05856A;\n    \n    mapping(address => uint) administrators;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyAdministrator() {\n        require(msg.sender == owner || administrators[msg.sender] > 0x0);\n        _;\n    }\n    \n    function transferOwnership(address _newOwner) onlyOwner public {\n        require(_newOwner != address(0));\n        owner = _newOwner;\n        emit OwnershipTransferred(owner, _newOwner);\n    }\n    \n    function addAdministrator(address _adminAddress) onlyOwner public {\n        require(_adminAddress != address(0));\n        require(administrators[_adminAddress] <= 0x0);\n        administrators[_adminAddress] = 0x1;\n        emit AddAdministrator(_adminAddress);\n    }\n    \n    function removeAdministrator(address _adminAddress) onlyOwner public {\n        require(_adminAddress != address(0));\n        require(administrators[_adminAddress] > 0x0);\n        administrators[_adminAddress] = 0x0;\n        emit RemoveAdministrator(_adminAddress);\n    }\n    \n    function setExchangeRate(uint256 _exchangeRate) public onlyAdministrator returns (bool success) {\n        require(_exchangeRate > 0x0);\n        uint256 oldExchangeRate = exchangeRate;\n        exchangeRate = _exchangeRate;\n        emit ExchangeRateChanged(oldExchangeRate, exchangeRate);\n        return true;\n    }\n    \n    function changeUnlockTime(uint _index, uint _unlockTime) public onlyAdministrator returns (bool success) {\n        require(_index >= 0x0 && _index < developerReservedUnlockTimes.length && _unlockTime > 0x0);\n        if(_index > 0x0) {\n            uint beforeUnlockTime = developerReservedUnlockTimes[_index - 1];\n            require(beforeUnlockTime == 0x0 || beforeUnlockTime < _unlockTime);\n        }\n        if(_index < developerReservedUnlockTimes.length - 1) {\n            uint afterUnlockTime = developerReservedUnlockTimes[_index + 1];\n            require(afterUnlockTime == 0x0 || _unlockTime < afterUnlockTime);\n        }\n        uint oldUnlockTime = developerReservedUnlockTimes[_index];\n        developerReservedUnlockTimes[_index] = _unlockTime;\n        emit UnlockTimeChanged(_index,oldUnlockTime,_unlockTime);\n        return true;\n    }\n    \n    function getDeveloperReservedLockInfo(uint _index) public onlyAdministrator returns (uint, uint256) {\n        require(_index >= 0x0 && _index < developerReservedUnlockTimes.length && _index < developerReservedBalanceLimits.length);\n        emit LockInfo(developerReservedAddress,_index,developerReservedUnlockTimes[_index],developerReservedBalanceLimits[_index]);\n        return (developerReservedUnlockTimes[_index], developerReservedBalanceLimits[_index]);\n    }\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event AddAdministrator(address indexed adminAddress);\n    event RemoveAdministrator(address indexed adminAddress);\n}\n\ncontract JCB is OwnableToken {\n    \n    function JCB() public {\n        balances[owner] = 500000000 * 10 ** 8;\n        balances[publicOfferingAddress] = 300000000 * 10 ** 8;\n\n        uint256 developerReservedBalance = 200000000 * 10 ** 8;\n        balances[developerReservedAddress] = developerReservedBalance;\n        developerReservedUnlockTimes =\n        [\n        DateTimeLib.toTimestamp(2019, 7, 1),\n        DateTimeLib.toTimestamp(2020, 7, 1),\n        DateTimeLib.toTimestamp(2021, 7, 1),\n        DateTimeLib.toTimestamp(2022, 7, 1)\n        ];\n        developerReservedBalanceLimits = \n        [\n            developerReservedBalance,\n            developerReservedBalance - (developerReservedBalance / 4) * 1,\n            developerReservedBalance - (developerReservedBalance / 4) * 2,\n            developerReservedBalance - (developerReservedBalance / 4) * 3\n        ];\n    }\n    \n    function() public payable {\n        buy(msg.sender, msg.value);\n    }\n}",
  "bytecode": "608060405267016345785d8a000060025573f4ab0e0269e05163e65608f44e80a125a511a916600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073bdb45923bf511801f71eaed4fbd926e48ba43db5600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610fa0600d5573fe71ea94ad48c03a8b1d5c8a371e36fc0e05856a600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200012257600080fd5b50600066b1a2bc2ec50000600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550666a94d74f430000600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555066470de4df820000905080600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506080604051908101604052806200029d6107e360076001620003a36401000000000262001bef176401000000009004565b8152602001620002c76107e460076001620003a36401000000000262001bef176401000000009004565b8152602001620002f16107e560076001620003a36401000000000262001bef176401000000009004565b81526020016200031b6107e660076001620003a36401000000000262001bef176401000000009004565b8152506004906004620003309291906200073a565b5060806040519081016040528082815260200160016004848115156200035257fe5b04028303815260200160026004848115156200036a57fe5b04028303815260200160036004848115156200038257fe5b0402830381525060089060046200039b9291906200073a565b5050620007cb565b6000620003c68484846000806000620003cf640100000000026401000000009004565b90509392505050565b600080620003dc6200077f565b6107b291505b8861ffff168261ffff1610156200043a576200040d82620006b0640100000000026401000000009004565b1562000422576301e28500830192506200042c565b6301e13380830192505b8180600101925050620003e2565b601f816000600c811015156200044c57fe5b602002019060ff16908160ff16815250506200047789620006b0640100000000026401000000009004565b15620004a657601d816001600c811015156200048f57fe5b602002019060ff16908160ff1681525050620004ca565b601c816001600c81101515620004b857fe5b602002019060ff16908160ff16815250505b601f816002600c81101515620004dc57fe5b602002019060ff16908160ff1681525050601e816003600c81101515620004ff57fe5b602002019060ff16908160ff1681525050601f816004600c811015156200052257fe5b602002019060ff16908160ff1681525050601e816005600c811015156200054557fe5b602002019060ff16908160ff1681525050601f816006600c811015156200056857fe5b602002019060ff16908160ff1681525050601f816007600c811015156200058b57fe5b602002019060ff16908160ff1681525050601e816008600c81101515620005ae57fe5b602002019060ff16908160ff1681525050601f816009600c81101515620005d157fe5b602002019060ff16908160ff1681525050601e81600a600c81101515620005f457fe5b602002019060ff16908160ff1681525050601f81600b600c811015156200061757fe5b602002019060ff16908160ff1681525050600191505b8760ff168261ffff1610156200067257806001830361ffff16600c811015156200065357fe5b602002015160ff1662015180028301925081806001019250506200062d565b6001870360ff166201518002830192508560ff16610e1002830192508460ff16603c02830192508360ff168301925082925050509695505050505050565b60008060048361ffff16811515620006c457fe5b0661ffff16141515620006db576000905062000735565b600060648361ffff16811515620006ee57fe5b0661ffff1614151562000705576001905062000735565b60006101908361ffff168115156200071957fe5b0661ffff1614151562000730576000905062000735565b600190505b919050565b82600481019282156200076c579160200282015b828111156200076b5782518255916020019190600101906200074e565b5b5090506200077b9190620007a3565b5090565b61018060405190810160405280600c90602082028038833980820191505090505090565b620007c891905b80821115620007c4576000816000905550600101620007aa565b5090565b90565b611f8280620007db6000396000f3006080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f2578063095ea7b31461018257806318160ddd146101e757806323b872dd14610212578063313ce567146102975780633ba0b9a9146102c857806368fa8134146102f357806370a082311461033657806395d89b411461038d578063a9059cbb1461041d578063aad7104014610482578063c9991176146104d1578063db068e0e14610514578063dd62ed3e14610559578063f2fde38b146105d0578063f6988b7914610613575b6100f0333461065b565b005b3480156100fe57600080fd5b506101076107b7565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014757808201518184015260208101905061012c565b50505050905090810190601f1680156101745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018e57600080fd5b506101cd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107f0565b604051808215151515815260200191505060405180910390f35b3480156101f357600080fd5b506101fc6108ff565b6040518082815260200191505060405180910390f35b34801561021e57600080fd5b5061027d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610909565b604051808215151515815260200191505060405180910390f35b3480156102a357600080fd5b506102ac610a36565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102d457600080fd5b506102dd610a3b565b6040518082815260200191505060405180910390f35b3480156102ff57600080fd5b50610334600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a41565b005b34801561034257600080fd5b50610377600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bb2565b6040518082815260200191505060405180910390f35b34801561039957600080fd5b506103a2610bfa565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103e25780820151818401526020810190506103c7565b50505050905090810190601f16801561040f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042957600080fd5b50610468600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c33565b604051808215151515815260200191505060405180910390f35b34801561048e57600080fd5b506104b76004803603810190808035906020019092919080359060200190929190505050610c48565b604051808215151515815260200191505060405180910390f35b3480156104dd57600080fd5b50610512600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e0d565b005b34801561052057600080fd5b5061053f60048036038101908080359060200190929190505050610f7f565b604051808215151515815260200191505060405180910390f35b34801561056557600080fd5b506105ba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061108e565b6040518082815260200191505060405180910390f35b3480156105dc57600080fd5b50610611600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611115565b005b34801561061f57600080fd5b5061063e6004803603810190808035906020019092919050505061126d565b604051808381526020018281526020019250505060405180910390f35b6000808373ffffffffffffffffffffffffffffffffffffffff161415151561068257600080fd5b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156106ca57600080fd5b6000600d541115156106db57600080fd5b6000821115156106ea57600080fd5b6106ff600d548361140990919063ffffffff16565b90506107196402540be4008261143c90919063ffffffff16565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610783573d6000803e3d6000fd5b506107b1600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848361147d565b50505050565b6040805190810160405280600881526020017f4a6f696e436f696e00000000000000000000000000000000000000000000000081525081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258484604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a26001905092915050565b6000600254905090565b60008060008573ffffffffffffffffffffffffffffffffffffffff161415801561094a575060008473ffffffffffffffffffffffffffffffffffffffff1614155b80156109565750600083115b151561096157600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610a21576109bf6115aa565b905082610a13826000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461164190919063ffffffff16565b10151515610a2057600080fd5b5b610a2c85858561165a565b9150509392505050565b600881565b600d5481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a9d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ad957600080fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610b2757600080fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167f5e40a439a19faa971f5d14cf300dcd7ee0d236808b9a988c9b4ca89cb833e96160405160405180910390a250565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f4a4342000000000000000000000000000000000000000000000000000000000081525081565b6000610c4033848461147d565b905092915050565b600080600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ce957506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b1515610cf457600080fd5b60008610158015610d055750600486105b8015610d115750600085115b1515610d1c57600080fd5b6000861115610d5557600460018703600481101515610d3757fe5b015492506000831480610d4957508483105b1515610d5457600080fd5b5b6001600403861015610d9157600460018701600481101515610d7357fe5b015491506000821480610d8557508185105b1515610d9057600080fd5b5b600486600481101515610da057fe5b0154905084600487600481101515610db457fe5b01819055507f64848c65ffb9a9e4ef4aec8bcc21d1047934e7af916b2cbc867f6a7fae0f346186828760405180848152602001838152602001828152602001935050505060405180910390a16001935050505092915050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e6957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ea557600080fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151515610ef457600080fd5b6001600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167f6e5eedde7d0d690d55dea362660be04ef1eb36252e48817545afb1ae6b245a4060405160405180910390a250565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061101d57506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b151561102857600080fd5b60008311151561103757600080fd5b600d54905082600d819055507fb01b0304cdcaffa13e4b57ecbe280da183afb719becd1d56e9211cc3781ea42181600d54604051808381526020018281526020019250505060405180910390a16001915050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561117157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111ad57600080fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600080600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061130b57506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b151561131657600080fd5b600083101580156113275750600483105b80156113335750600483105b151561133e57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f280ff1c31d08649729d9b5d2935b6285be80fe36921694c515dd7ae310b14c12846004866004811015156113a857fe5b01546008876004811015156113b957fe5b015460405180848152602001838152602001828152602001935050505060405180910390a26004836004811015156113ed57fe5b01546008846004811015156113fe57fe5b015491509150915091565b6000808284029050600084148061142a575082848281151561142757fe5b04145b151561143257fe5b8091505092915050565b60008060008311151561144b57fe5b828481151561145657fe5b049050828481151561146457fe5b06818402018414151561147357fe5b8091505092915050565b60008060008573ffffffffffffffffffffffffffffffffffffffff16141580156114be575060008473ffffffffffffffffffffffffffffffffffffffff1614155b80156114ca5750600083115b15156114d557600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611595576115336115aa565b905082611587826000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461164190919063ffffffff16565b1015151561159457600080fd5b5b6115a08585856119e1565b9150509392505050565b6000806000429150600090505b60048110156116375760006004826004811015156115d157fe5b015414156115de5761162a565b6004816004811015156115ed57fe5b015482111561161157600060048260048110151561160757fe5b0181905550611629565b60088160048110151561162057fe5b0154925061163c565b5b80806001019150506115b7565b600092505b505090565b600082821115151561164f57fe5b818303905092915050565b600080821180156116e7575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156117315750816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b151561173c57600080fd5b61178d826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461164190919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611820826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118f182600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461164190919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60008082118015611a305750816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1515611a3b57600080fd5b611a8c826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461164190919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611b1f826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bd190919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b6000808284019050838110151515611be557fe5b8091505092915050565b6000611c018484846000806000611c0a565b90509392505050565b600080611c15611f32565b6107b291505b8861ffff168261ffff161015611c5e57611c3482611eb1565b15611c47576301e2850083019250611c51565b6301e13380830192505b8180600101925050611c1b565b601f816000600c81101515611c6f57fe5b602002019060ff16908160ff1681525050611c8989611eb1565b15611cb557601d816001600c81101515611c9f57fe5b602002019060ff16908160ff1681525050611cd8565b601c816001600c81101515611cc657fe5b602002019060ff16908160ff16815250505b601f816002600c81101515611ce957fe5b602002019060ff16908160ff1681525050601e816003600c81101515611d0b57fe5b602002019060ff16908160ff1681525050601f816004600c81101515611d2d57fe5b602002019060ff16908160ff1681525050601e816005600c81101515611d4f57fe5b602002019060ff16908160ff1681525050601f816006600c81101515611d7157fe5b602002019060ff16908160ff1681525050601f816007600c81101515611d9357fe5b602002019060ff16908160ff1681525050601e816008600c81101515611db557fe5b602002019060ff16908160ff1681525050601f816009600c81101515611dd757fe5b602002019060ff16908160ff1681525050601e81600a600c81101515611df957fe5b602002019060ff16908160ff1681525050601f81600b600c81101515611e1b57fe5b602002019060ff16908160ff1681525050600191505b8760ff168261ffff161015611e7357806001830361ffff16600c81101515611e5557fe5b602002015160ff166201518002830192508180600101925050611e31565b6001870360ff166201518002830192508560ff16610e1002830192508460ff16603c02830192508360ff168301925082925050509695505050505050565b60008060048361ffff16811515611ec457fe5b0661ffff16141515611ed95760009050611f2d565b600060648361ffff16811515611eeb57fe5b0661ffff16141515611f005760019050611f2d565b60006101908361ffff16811515611f1357fe5b0661ffff16141515611f285760009050611f2d565b600190505b919050565b61018060405190810160405280600c906020820280388339808201915050905050905600a165627a7a72305820dee25009e9ffd314bc7376d31e5fb13f358dc668feac7a52a3d5de9ddd1e4a870029"
}