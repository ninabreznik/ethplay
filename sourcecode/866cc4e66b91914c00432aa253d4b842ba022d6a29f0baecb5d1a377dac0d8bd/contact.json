{
  "address": "0xc58603dcd0cfa4b257409dfff6402ab638de99b9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "OrgonToken",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-18\n*/\n\n/** Orgon Token Smart Contract.  Copyright Â© 2019 by Oris.Space. v25 */\npragma solidity ^0.4.25;\n\nlibrary SafeMath {\n \n  /**\n   * Add two uint256 values, throw in case of overflow.\n   * @param x first value to add\n   * @param y second value to add\n   * @return x + y\n   */\n  function safeAdd (uint256 x, uint256 y) internal pure returns (uint256) {\n    uint256 z = x + y;\n    require(z >= x);\n    return z;\n  }\n\n  /**\n   * Subtract one uint256 value from another, throw in case of underflow.\n   * @param x value to subtract from\n   * @param y value to subtract\n   * @return x - y\n   */\n  function safeSub (uint256 x, uint256 y) internal pure returns (uint256) {\n    require (x >= y);\n    uint256 z = x - y;\n    return z;\n  }\n}\n\ncontract Token {\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply () public view returns (uint256 supply);\n\n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf (address _owner) public view returns (uint256 balance);\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer (address _to, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom (address _from, address _to, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   *\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n  public returns (bool success);\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance (address _owner, address _spender)\n  public view returns (uint256 remaining);\n\n  /**\n   * Logged when tokens were transferred from one owner to another.\n   *\n   * @param _from address of the owner, tokens were transferred from\n   * @param _to address of the owner, tokens were transferred to\n   * @param _value number of tokens transferred\n   */\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n\n  /**\n   * Logged when owner approved his tokens to be transferred by some spender.\n   *\n   * @param _owner owner who approved his tokens to be transferred\n   * @param _spender spender who were allowed to transfer the tokens belonging\n   *        to the owner\n   * @param _value number of tokens belonging to the owner, approved to be\n   *        transferred by the spender\n   */\n  event Approval (\n    address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n/** Orgon Token smart contract */\ncontract OrgonToken is Token {\n    \nusing SafeMath for uint256;\n\n/* Maximum allowed number of tokens in circulation (2^256 - 1). */\nuint256 constant MAX_TOKEN_COUNT =\n0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n/* Full life start time (2021-10-18 18:10:21 UTC) */\nuint256 private constant LIFE_START_TIME = 1634559021;\n\n/* Number of tokens to be send for Full life start 642118523.280000000000000000 */\nuint256 private constant LIFE_START_TOKENS = 642118523280000000000000000;\n  \n/** Deploy Orgon Token smart contract and make message sender to be the owner\n   of the smart contract */\n/* *********************************************** */\nconstructor() public {\n    owner = msg.sender;\n    mint = msg.sender;\n}\n  \n  \n/** Get name,symbol of this token, number of decimals for this token  \n * @return name of this token */\n/* *********************************************** */\nfunction name () public pure returns (string) {\n    \n    return \"ORGON\";\n}\n\n/* *********************************************** */\nfunction symbol () public pure returns (string) {\n    \n    return \"ORGON\";\n}\n/* *********************************************** */\nfunction decimals () public pure returns (uint8) {\n    \n    return 18;\n}\n\n/** Get total number of tokens in circulation\n * @return total number of tokens in circulation */\n \n/* *********************************************** */ \nfunction totalSupply () public view returns (uint256 supply) {\n     \n     return tokenCount;\n }\n\n/* *********************************************** */\nfunction totalICO () public view returns (uint256) {\n     \n     return tokenICO;\n }\n\n/* *********************************************** */\nfunction theMint () public view returns (address) {\n     \n     return mint;\n }\n \n /* *********************************************** */\nfunction theStage () public view returns (Stage) {\n     \n     return stage;\n }\n \n /* *********************************************** */\nfunction theOwner () public view returns (address) {\n     \n     return owner;\n }\n \n \n/** Get balance */\n\n/* *********************************************** */\nfunction balanceOf (address _owner) public view returns (uint256 balance) {\n\n    return accounts [_owner];\n}\n\n\n/** Transfer given number of tokens from message sender to given recipient.\n * @param _to address to transfer tokens to the owner of\n * @param _value number of tokens to transfer to the owner of given address\n * @return true if tokens were transferred successfully, false otherwise */\n \n /* *********************************************** */\n function transfer (address _to, uint256 _value)\n public validDestination(_to) returns (bool success) {\n    \n    require (accounts [msg.sender]>=_value);\n    \n    uint256 fromBalance = accounts [msg.sender];\n    if (fromBalance < _value) return false;\n    \n    if (stage != Stage.ICO){\n        accounts [msg.sender] = fromBalance.safeSub(_value);\n        accounts [_to] = accounts[_to].safeAdd(_value);\n    }\n    else if (msg.sender == owner){ // stage == Stage.ICO\n        accounts [msg.sender] = fromBalance.safeSub(_value);\n        accounts [_to] = accounts[_to].safeAdd(_value);\n        tokenICO = tokenICO.safeAdd(_value);\n    }\n    else if (_to == owner){ // stage == Stage.ICO\n        accounts [msg.sender] = fromBalance.safeSub(_value);\n        accounts [_to] = accounts[_to].safeAdd(_value);\n        tokenICO = tokenICO.safeSub(_value);\n    }\n    else if (forPartners[msg.sender] >= _value){ // (sender is Partner)\n        accounts [msg.sender] = fromBalance.safeSub(_value);\n        forPartners [msg.sender] = forPartners[msg.sender].safeSub(_value);\n        accounts [_to] = accounts[_to].safeAdd(_value);\n    }\n    else revert();\n    \n    emit Transfer (msg.sender, _to, _value);\n    return true;\n}\n\n\n/** Transfer given number of tokens from given owner to given recipient.\n * @param _from address to transfer tokens from the owner of\n * @param _to address to transfer tokens to the owner of\n * @param _value number of tokens to transfer from given owner to given\n *        recipient\n * @return true if tokens were transferred successfully, false otherwise */\n \n/* *********************************************** */\nfunction transferFrom (address _from, address _to, uint256 _value)\npublic validDestination(_to) returns (bool success) {\n\n    require (stage != Stage.ICO);\n    require(_from!=_to);\n    uint256 spenderAllowance = allowances [_from][msg.sender];\n    if (spenderAllowance < _value) return false;\n    uint256 fromBalance = accounts [_from];\n    if (fromBalance < _value) return false;\n\n    allowances [_from][msg.sender] =  spenderAllowance.safeSub(_value);\n\n    if (_value > 0) {\n      accounts [_from] = fromBalance.safeSub(_value);\n      accounts [_to] = accounts[_to].safeAdd(_value);\n    }\n    emit Transfer (_from, _to, _value);\n    return true;\n}\n\n\n/** Allow given spender to transfer given number of tokens from message sender\n * @param _spender address to allow the owner of to transfer tokens from\n *        message sender\n * @param _value number of tokens to allow to transfer\n * @return true if token transfer was successfully approved, false otherwise */\n \n/* *********************************************** */\nfunction approve (address _spender, uint256 _value)\npublic returns (bool success) {\n    require(_spender != address(0));\n    \n    allowances [msg.sender][_spender] = _value;\n    emit Approval (msg.sender, _spender, _value);\n    return true;\n}\n\n\n/** Allow Partner to transfer given number of tokens \n * @param _partner Partner address \n * @param _value number of tokens to allow to transfer\n * @return true if token transfer was successfully approved, false otherwise */\n \n/* *********************************************** */\nfunction addToPartner (address _partner, uint256 _value)\npublic returns (bool success) {\n    \n    require (msg.sender == owner);\n    forPartners [_partner] = forPartners[_partner].safeAdd(_value);\n    return true;\n}\n\n/** Disallow Partner to transfer given number of tokens \n * @param _partner Partner address\n * @param _value number of tokens to allow to transfer\n * @return true if token transfer was successfully approved, false otherwise */\n\n/* *********************************************** */\nfunction subFromPartner (address _partner, uint256 _value)\npublic returns (bool success) {\n    \n    require (msg.sender == owner);\n    if (forPartners [_partner] < _value) {\n        forPartners [_partner] = 0;\n    }\n    else {\n        forPartners [_partner] = forPartners[_partner].safeSub(_value);\n    }\n    return true;\n}\n\n/** Tell how many tokens given partner is currently allowed to transfer from\n  given him.\n  @param _partner address to get number of tokens allowed to be transferred         \n  @return number of tokens given spender is currently allowed to transfer\n  from given owner */\n  \n/* *********************************************** */\nfunction partners (address _partner)\npublic view returns (uint256 remaining) {\n\n    return forPartners [_partner];\n  }\n\n\n/** Create _value new tokens and give new created tokens to msg.sender.\n * May only be called by smart contract owner.\n * @param _value number of tokens to create\n * @return true if tokens were created successfully, false otherwise*/\n \n/* *********************************************** */\nfunction createTokens (uint256 _value) public returns (bool) {\n\n    require (msg.sender == mint);\n    \n    if (_value > 0) {\n        if (_value > MAX_TOKEN_COUNT.safeSub(tokenCount)) return false;\n        accounts [msg.sender] = accounts[msg.sender].safeAdd(_value);\n        tokenCount = tokenCount.safeAdd(_value);\n        emit Transfer (address (0), msg.sender, _value);\n    }\n    return true;\n}\n\n\n/** Burn given number of tokens belonging to owner.\n * May only be called by smart contract owner.\n * @param _value number of tokens to burn\n * @return true on success, false on error */\n \n/* *********************************************** */\nfunction burnTokens (uint256 _value) public returns (bool) {\n\n    require (msg.sender == mint);\n    require (accounts [msg.sender]>=_value);\n    \n    if (_value > accounts [mint]) return false;\n    else if (_value > 0) {\n        accounts [mint] = accounts[mint].safeSub(_value);\n        tokenCount = tokenCount.safeSub(_value);\n        emit Transfer (mint, address (0), _value);\n        return true;\n    }\n    else return true;\n}\n\n\n/** Set new owner for the smart contract.\n * May only be called by smart contract owner.\n * @param _newOwner address of new owner of the smart contract */\n \n/* *********************************************** */\nfunction setOwner (address _newOwner) public validDestination(_newOwner) {\n \n    require (msg.sender == owner);\n    \n    owner = _newOwner;\n    uint256 fromBalance = accounts [msg.sender];\n    if (fromBalance > 0 && msg.sender != _newOwner) {\n        accounts [msg.sender] = fromBalance.safeSub(fromBalance);\n        accounts [_newOwner] = accounts[_newOwner].safeAdd(fromBalance);\n        emit Transfer (msg.sender, _newOwner, fromBalance);\n    }\n}\n\n/** Set new owner for the smart contract.\n * May only be called by smart contract owner.\n * @param _newMint address of new owner of the smart contract */\n\n/* *********************************************** */\nfunction setMint (address _newMint) public {\n \n if (stage != Stage.LIFE && (msg.sender == owner || msg.sender == mint )){\n    mint = _newMint;\n }\n else if (msg.sender == mint){\n    mint = _newMint;\n }\n else revert();\n}\n\n/** Chech and Get current stage\n * @return current stage */\n \n/* *********************************************** */\nfunction checkStage () public returns (Stage) {\n\n    require (stage != Stage.LIFE);\n    \n    Stage currentStage = stage;\n    if (currentStage == Stage.ICO) {\n        if (block.timestamp >= LIFE_START_TIME || tokenICO > LIFE_START_TOKENS) {\n            currentStage = Stage.LIFE;\n            stage = Stage.LIFE;\n        }\n    else return currentStage;\n    }\n    return currentStage;\n}\n\n/** Change stage by Owner */\n\n/* *********************************************** */\nfunction changeStage () public {\n    \n    require (msg.sender == owner);\n    require (stage != Stage.LIFE);\n    if (stage == Stage.ICO) {stage = Stage.LIFEBYOWNER;}\n    else stage = Stage.ICO;\n}\n\n\n\n/** Tell how many tokens given spender is currently allowed to transfer from\n * given owner.\n * @param _owner address to get number of tokens allowed to be transferred\n *        from the owner of\n * @param _spender address to get number of tokens allowed to be transferred\n *        by the owner of\n * @return number of tokens given spender is currently allowed to transfer\n *         from given owner */\n \n/* *********************************************** */\nfunction allowance (address _owner, address _spender)\npublic view returns (uint256 remaining) {\n\n    return allowances [_owner][_spender];\n  }\n\n/**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n   \n/* *********************************************** */\nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool)\n  {\n    require(spender != address(0));\n\n    allowances[msg.sender][spender] = allowances[msg.sender][spender].safeAdd(addedValue);\n    emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    allowances[msg.sender][spender] = allowances[msg.sender][spender].safeSub(subtractedValue);\n    emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\n    return true;\n  }\n\n\n\n/** Get current time in seconds since epoch.\n * @return current time in seconds since epoch */\nfunction currentTime () public view returns (uint256) {\n    return block.timestamp;\n}\n\n/** Total number of tokens in circulation */\nuint256 private  tokenCount;\n\n/** Total number of tokens in ICO */\nuint256 private  tokenICO;\n\n/** Owner of the smart contract */\naddress private  owner;\n\n/** Mint of the smart contract */\naddress private  mint;\n\n\n  \nenum Stage {\n    ICO, // \n    LIFEBYOWNER,\n    LIFE// \n}\n  \n/** Last known stage of token*/\nStage private stage = Stage.ICO;\n  \n/** Mapping from addresses of token holders to the numbers of tokens belonging\n * to these token holders */\nmapping (address => uint256) private accounts;\n\n/** Mapping from addresses of partners to the numbers of tokens belonging\n * to these partners. */\nmapping (address => uint256) private forPartners;\n\n/** Mapping from addresses of token holders to the mapping of addresses of\n * spenders to the allowances set by these token holders to these spenders */\nmapping (address => mapping (address => uint256)) private allowances;\n\nmodifier validDestination (address to) {\n    require (to != address(0x0));\n    require (to != address(this));\n    _;\n}\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addToPartner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMint\",\"type\":\"address\"}],\"name\":\"setMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theMint\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"}],\"name\":\"partners\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partner\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"subFromPartner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": ""
}