{
  "address": "0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SlotToken",
  "compilerVersion": "v0.5.3+commit.10d17f24",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-02-26\n*/\n\npragma solidity ^0.5.3;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    require(value <= _balances[msg.sender]);\n    require(to != address(0));\n\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _balances[from]);\n    require(value <= _allowed[from][msg.sender]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    emit Transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param amount The amount that will be created.\n   */\n  function _mint(address account, uint256 amount) internal {\n    require(account != 0x0000000000000000000000000000000000000000);\n    _totalSupply = _totalSupply.add(amount);\n    _balances[account] = _balances[account].add(amount);\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param amount The amount that will be burnt.\n   */\n  function _burn(address account, uint256 amount) internal {\n    require(account != 0x0000000000000000000000000000000000000000);\n    require(amount <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(amount);\n    _balances[account] = _balances[account].sub(amount);\n    emit Transfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param amount The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 amount) internal {\n    require(amount <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      amount);\n    _burn(account, amount);\n  }\n}\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n\n\n/**\n * @title SlotToken\n * @dev Very simple ERC20 Token example, where some tokens are pre-assigned one contract, and the others arre assigned to another\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `ERC20` functions.\n */\ncontract SlotToken is ERC20, ERC20Detailed {\n    using SafeMath for uint256;\n    \n    uint8 public constant DECIMALS = 18;\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(DECIMALS));\n    \n    mapping (address => address) private _vote_target_one;\n    mapping (address => address) private _vote_target_two;\n    mapping (address => uint256) private _vote_target_three;\n    event VoteOne(address indexed from, address indexed to);\n    event VoteTwo(address indexed from, address indexed to);\n    event VoteThree(address indexed from, uint256 value);\n\n    /**\n     * @dev Function to check the vote target one of a token holder\n     * @param holder address The address which owns the funds.\n     * @return A address specifying the voting position held by the holder\n     */\n    function getTypeOneHolderVote(address holder) public view returns (address) {\n        return _vote_target_one[holder];\n    }\n\n    /**\n     * @dev Set type one holder vote\n     * @param target The address to vote for\n     */\n    function setTypeOneHolderVote(address target) public returns (bool) {\n        _vote_target_one[msg.sender] = target;\n        \n        emit VoteOne(msg.sender, target);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the vote target two of a token holder\n     * @param holder address The address which owns the funds.\n     * @return A address specifying the voting position held by the holder\n     */\n    function getTypeTwoHolderVote(address holder) public view returns (address) {\n        return _vote_target_two[holder];\n    }\n\n    /**\n     * @dev Set type two holder vote\n     * @param target The address to vote for\n     */\n    function setTypeTwoHolderVote(address target) public returns (bool) {\n        _vote_target_two[msg.sender] = target;\n        \n        emit VoteTwo(msg.sender, target);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the vote target three of a token holder\n     * @param holder address The address which owns the funds.\n     * @return A address specifying the voting position held by the holder\n     */\n    function getTypeThreeHolderVote(address holder) public view returns (uint256) {\n        return _vote_target_three[holder];\n    }\n\n    /**\n     * @dev Set type three holder vote\n     * @param value The address to vote for\n     */\n    function setTypeThreeHolderVote(uint256 value) public returns (bool) {\n        _vote_target_three[msg.sender] = value;\n        \n        emit VoteThree(msg.sender, value);\n        return true;\n    }\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor (address communityGovAddress, address econSupportAddress, uint256 econSupportAmount) public ERC20Detailed(\"Alphaslot\", \"SLOT\", DECIMALS) {\n        require(econSupportAmount > 0);\n        require(communityGovAddress != address(0));\n        require(econSupportAddress != address(0));\n        require(econSupportAmount<INITIAL_SUPPLY && INITIAL_SUPPLY-econSupportAmount>0);\n        uint256 communityGovAmount = INITIAL_SUPPLY - econSupportAmount;\n        require(communityGovAmount<INITIAL_SUPPLY && econSupportAmount+communityGovAmount == INITIAL_SUPPLY);\n        \n        _mint(communityGovAddress, communityGovAmount);\n        _mint(econSupportAddress, econSupportAmount);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getTypeThreeHolderVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setTypeTwoHolderVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setTypeOneHolderVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTypeThreeHolderVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getTypeOneHolderVote\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getTypeTwoHolderVote\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"communityGovAddress\",\"type\":\"address\"},{\"name\":\"econSupportAddress\",\"type\":\"address\"},{\"name\":\"econSupportAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VoteOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VoteTwo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"VoteThree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "60806040523480156200001157600080fd5b5060405160608062000ebc833981018060405260608110156200003357600080fd5b50805160208083015160409384015184518086018652600981527f416c706861736c6f7400000000000000000000000000000000000000000000008185019081528651808801909752600487527f534c4f5400000000000000000000000000000000000000000000000000000000948701949094528051949592949193909291601291620000c59160039190620002a9565b508151620000db906004906020850190620002a9565b506005805460ff191660ff929092169190911790555050600081116200010057600080fd5b600160a060020a03831615156200011657600080fd5b600160a060020a03821615156200012c57600080fd5b6b033b2e3c9fd0803ce80000008110801562000157575060006b033b2e3c9fd0803ce8000000829003115b15156200016357600080fd5b6b033b2e3c9fd0803ce800000081810390811080156200019057508181016b033b2e3c9fd0803ce8000000145b15156200019c57600080fd5b620001b18482640100000000620001d0810204565b620001c68383640100000000620001d0810204565b505050506200034e565b600160a060020a0382161515620001e657600080fd5b60025462000203908264010000000062000b196200028f82021704565b600255600160a060020a03821660009081526020819052604090205462000239908264010000000062000b196200028f82021704565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082820183811015620002a257600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002ec57805160ff19168380011785556200031c565b828001600101855582156200031c579182015b828111156200031c578251825591602001919060010190620002ff565b506200032a9291506200032e565b5090565b6200034b91905b808211156200032a576000815560010162000335565b90565b610b5e806200035e6000396000f3fe608060405234801561001057600080fd5b506004361061013e576000357c01000000000000000000000000000000000000000000000000000000009004806367f9647a116100ca578063a457c2d71161008e578063a457c2d714610367578063a6f343b614610393578063a9059cbb146103d5578063dd62ed3e14610401578063e3fa659e1461042f5761013e565b806367f9647a146102d057806370a08231146102f657806373634a811461031c5780637e493cda1461034257806395d89b411461035f5761013e565b80632e0f2625116101115780632e0f2625146102505780632ff2e9dc1461026e578063313ce56714610276578063395093511461027e5780636163be7c146102aa5761013e565b806306fdde0314610143578063095ea7b3146101c057806318160ddd1461020057806323b872dd1461021a575b600080fd5b61014b610455565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018557818101518382015260200161016d565b50505050905090810190601f1680156101b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ec600480360360408110156101d657600080fd5b50600160a060020a0381351690602001356104eb565b604080519115158252519081900360200190f35b610208610569565b60408051918252519081900360200190f35b6101ec6004803603606081101561023057600080fd5b50600160a060020a0381358116916020810135909116906040013561056f565b6102586106e4565b6040805160ff9092168252519081900360200190f35b6102086106e9565b6102586106f9565b6101ec6004803603604081101561029457600080fd5b50600160a060020a038135169060200135610702565b610208600480360360208110156102c057600080fd5b5035600160a060020a03166107b2565b6101ec600480360360208110156102e657600080fd5b5035600160a060020a03166107cd565b6102086004803603602081101561030c57600080fd5b5035600160a060020a0316610839565b6101ec6004803603602081101561033257600080fd5b5035600160a060020a0316610854565b6101ec6004803603602081101561035857600080fd5b50356108c0565b61014b610912565b6101ec6004803603604081101561037d57600080fd5b50600160a060020a038135169060200135610973565b6103b9600480360360208110156103a957600080fd5b5035600160a060020a03166109be565b60408051600160a060020a039092168252519081900360200190f35b6101ec600480360360408110156103eb57600080fd5b50600160a060020a0381351690602001356109dc565b6102086004803603604081101561041757600080fd5b50600160a060020a0381358116916020013516610abb565b6103b96004803603602081101561044557600080fd5b5035600160a060020a0316610ae6565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104e15780601f106104b6576101008083540402835291602001916104e1565b820191906000526020600020905b8154815290600101906020018083116104c457829003601f168201915b5050505050905090565b6000600160a060020a038316151561050257600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526020819052604081205482111561059457600080fd5b600160a060020a03841660009081526001602090815260408083203384529091529020548211156105c457600080fd5b600160a060020a03831615156105d957600080fd5b600160a060020a038416600090815260208190526040902054610602908363ffffffff610b0416565b600160a060020a038086166000908152602081905260408082209390935590851681522054610637908363ffffffff610b1916565b600160a060020a03808516600090815260208181526040808320949094559187168152600182528281203382529091522054610679908363ffffffff610b0416565b600160a060020a03808616600081815260016020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b601281565b6b033b2e3c9fd0803ce800000081565b60055460ff1690565b6000600160a060020a038316151561071957600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461074d908363ffffffff610b1916565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526008602052604090205490565b33600081815260076020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386169081179091559051919290917f955c82378ec25e64da925d96087e1ab86f768d8777cb5454ff5817cc43724ffa908490a3506001919050565b600160a060020a031660009081526020819052604090205490565b33600081815260066020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386169081179091559051919290917f9c9a99405534f35c5b5a03fb2b97fffc7a6e889c95786412bf030ad5f39b67b6908490a3506001919050565b336000818152600860209081526040808320859055805185815290519293927f1b0055c90c44455af4e816b306960fae2c1f4b05bb8b760da340dfc5cc23fe8b929181900390910190a2506001919050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104e15780601f106104b6576101008083540402835291602001916104e1565b6000600160a060020a038316151561098a57600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461074d908363ffffffff610b0416565b600160a060020a039081166000908152600660205260409020541690565b336000908152602081905260408120548211156109f857600080fd5b600160a060020a0383161515610a0d57600080fd5b33600090815260208190526040902054610a2d908363ffffffff610b0416565b3360009081526020819052604080822092909255600160a060020a03851681522054610a5f908363ffffffff610b1916565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600160a060020a039081166000908152600760205260409020541690565b600082821115610b1357600080fd5b50900390565b600082820183811015610b2b57600080fd5b939250505056fea165627a7a7230582084e53978889e60a3f5d0c4c33ad99a9d8d9c419b29c0697bcb73c1254bf7bab70029000000000000000000000000562c99931d2372e3e299ab3b87ba976e4e511b000000000000000000000000006f393c49187bc384a58ab9110e8cc6f1cf009312000000000000000000000000000000000000000000422ca8b0a00a4250000000",
  "constructorArguments": "000000000000000000000000562c99931d2372e3e299ab3b87ba976e4e511b000000000000000000000000006f393c49187bc384a58ab9110e8cc6f1cf009312000000000000000000000000000000000000000000422ca8b0a00a4250000000"
}