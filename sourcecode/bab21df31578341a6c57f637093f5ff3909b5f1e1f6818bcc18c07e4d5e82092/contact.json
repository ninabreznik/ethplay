{
  "address": "0x5ac203c782fe5b74ece9cb4ed13b0597bb5c872e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ICO",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-09\n*/\n\npragma solidity 0.5.8;\n\n//TODO: third party auditory\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token Standard Interface\n// ----------------------------------------------------------------------------\ninterface ERC20Interface {\n    function totalSupply() external returns(uint);\n    function balanceOf(address tokenOwner) external returns(uint balance);\n    function allowance(address tokenOwner, address spender) external returns(uint remaining);\n    function transfer(address to, uint tokens) external returns(bool success);\n    function approve(address spender, uint tokens) external returns(bool success);\n    function transferFrom(address from, address to, uint tokens) external returns(bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n/**\n * @title admined\n * @notice This contract is administered\n */\ncontract admined {\n    //mapping to user levels\n    mapping(address => uint8) public level;\n    //0 normal user\n    //1 basic admin\n    //2 master admin\n\n    constructor() internal {\n        level[0x7a3a57c620fA468b304b5d1826CDcDe28E2b2b98] = 2; //Set initial admin to contract creator\n        emit AdminshipUpdated(0x7a3a57c620fA468b304b5d1826CDcDe28E2b2b98, 2); //Log the admin set\n    }\n\n    /**\n     * @dev This modifier limits function execution to the admin\n     */\n    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\n        //It require the user level to be more or equal than _level\n        require(level[msg.sender] >= _level, \"You dont have rights for this transaction\");\n        _;\n    }\n\n    /**\n     * @notice This function transfer the adminship of the contract to _newAdmin\n     * @param _newAdmin The new admin of the contract\n     * @param _level Level to assign to the new admin of the contract\n     */\n    function adminshipLevel(address _newAdmin, uint8 _level) public onlyAdmin(2) {//Admin can be set\n        require(_newAdmin != address(0), \"Address cannot be zero\"); //The new admin must not be zero address\n        level[_newAdmin] = _level; //New level is set\n        emit AdminshipUpdated(_newAdmin, _level); //Log the admin set\n    }\n\n    /**\n     * @dev Log Events\n     */\n    event AdminshipUpdated(address _newAdmin, uint8 _level);\n\n}\n\n// ----------------------------------------------------------------------------\n// Main Contract definition\n// ----------------------------------------------------------------------------\ncontract ICO is admined {\n\n    using SafeMath for uint256;\n\n    enum State {\n        //This ico have these states\n        OnSale,\n        Successful\n    }\n\n    //public variables\n\n    //state related\n    State public state = State.OnSale; //Set initial stage\n\n    //time related\n    uint256 public SaleStartTime = now;\n    uint256 public completedAt;\n\n    //token related\n    ERC20Interface public tokenReward;\n\n    //funding related\n    uint256 public totalRaised; //eth in wei\n    uint256 public totalDistributed; //tokens distributed\n    uint256 public totalBonusDistributed; //bonus tokens distributed\n    uint256 public constant rate = 2941; //Rate\n    uint256 public constant trancheSize = 52500000 * 1e18;\n    uint256 public constant hardCap = 420000000 * 1e18;\n    uint256 public constant softCap = 3000000 * 1e18;\n    mapping(address => uint256) public invested;\n    mapping(address => uint256) public received;\n    mapping(address => uint256) public bonusReceived;\n\n    //info\n    address public owner;\n    address payable public beneficiary;\n    string public version = '1';\n\n    //events for log\n    event LogFundingInitialized(address _owner);\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n    event LogContributorsPayout(address _addr, uint _amount);\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\n    event LogFundingSuccessful(uint _totalRaised);\n\n    modifier notFinished() {\n        require(state != State.Successful, \"Sale have finished\");\n        _;\n    }\n\n    /**\n     * @notice ICO constructor\n     * @param _addressOfTokenUsedAsReward is the token to distributed\n     */\n    constructor(ERC20Interface _addressOfTokenUsedAsReward) public {\n\n        tokenReward = _addressOfTokenUsedAsReward;\n        owner = 0x7a3a57c620fA468b304b5d1826CDcDe28E2b2b98;\n        beneficiary = 0x8605409D35f707714A83410BE9C8025dcefa9faC;\n\n        emit LogFundingInitialized(owner);\n\n    }\n\n    /**\n     * @notice contribution handler\n     */\n    function contribute(address _target, uint256 _value) public notFinished payable {\n\n        address user;\n        uint valueHandler;\n\n        uint tokenBought;\n        uint tokenBonus;\n\n        uint bonusStack;\n        uint trancheLeft;\n        uint remaining;\n\n        if (_target != address(0) && level[msg.sender] >= 1) {\n            user = _target;\n            valueHandler = _value;\n        } else {\n            user = msg.sender;\n            valueHandler = msg.value;\n            //Refund through contract for eth contributors only\n            invested[msg.sender] = invested[msg.sender].add(msg.value);\n        }\n\n        require(valueHandler >= 0.1 ether, \"Not enough value for this transaction\");\n\n        totalRaised = totalRaised.add(valueHandler); //ether received updated\n\n        //This keep the tokens bought\n        tokenBought = valueHandler.mul(rate);\n        //This keep the tokens to be bonus-analized\n        remaining = valueHandler.mul(rate);\n\n        //First Tranche Handler\n        if (remaining > 0 &&\n            totalDistributed < trancheSize\n        ) {\n            trancheLeft = trancheSize.sub(totalDistributed);\n\n            if (remaining < trancheLeft) {\n                bonusStack = remaining.mul(4);\n                tokenBonus = bonusStack.div(10);\n\n                totalDistributed = totalDistributed.add(remaining);\n\n                remaining = 0;\n                bonusStack = 0;\n                trancheLeft = 0;\n            } else {\n                bonusStack = trancheLeft.mul(4);\n                tokenBonus = bonusStack.div(10);\n\n                totalDistributed = totalDistributed.add(trancheLeft);\n\n                remaining = remaining.sub(trancheLeft);\n                bonusStack = 0;\n                trancheLeft = 0;\n            }\n        }\n\n        //Second Tranche Handler\n        if (remaining > 0 &&\n            totalDistributed >= trancheSize &&\n            totalDistributed < trancheSize.mul(2)\n        ) {\n            trancheLeft = trancheSize.mul(2).sub(totalDistributed);\n\n            if (remaining < trancheLeft) {\n                bonusStack = remaining.mul(35);\n                tokenBonus = tokenBonus.add(bonusStack.div(100));\n\n                totalDistributed = totalDistributed.add(remaining);\n\n                remaining = 0;\n                bonusStack = 0;\n                trancheLeft = 0;\n            } else {\n                bonusStack = trancheLeft.mul(35);\n                tokenBonus = tokenBonus.add(bonusStack.div(100));\n\n                totalDistributed = totalDistributed.add(trancheLeft);\n\n                remaining = remaining.sub(trancheLeft);\n                bonusStack = 0;\n                trancheLeft = 0;\n            }\n        }\n\n        //Third Tranche Handler\n        if (remaining > 0 &&\n            totalDistributed >= trancheSize.mul(2) &&\n            totalDistributed < trancheSize.mul(3)\n        ) {\n            trancheLeft = trancheSize.mul(3).sub(totalDistributed);\n\n            if (remaining < trancheLeft) {\n                bonusStack = remaining.mul(3);\n                tokenBonus = tokenBonus.add(bonusStack.div(10));\n\n                totalDistributed = totalDistributed.add(remaining);\n\n                remaining = 0;\n                bonusStack = 0;\n                trancheLeft = 0;\n            } else {\n                bonusStack = trancheLeft.mul(3);\n                tokenBonus = tokenBonus.add(bonusStack.div(10));\n\n                totalDistributed = totalDistributed.add(trancheLeft);\n\n                remaining = remaining.sub(trancheLeft);\n                bonusStack = 0;\n                trancheLeft = 0;\n            }\n        }\n\n        //Fourth Tranche Handler\n        if (remaining > 0 &&\n            totalDistributed >= trancheSize.mul(3) &&\n            totalDistributed < trancheSize.mul(4)\n        ) {\n            trancheLeft = trancheSize.mul(4).sub(totalDistributed);\n\n            if (remaining < trancheLeft) {\n                bonusStack = remaining.mul(2);\n                tokenBonus = tokenBonus.add(bonusStack.div(10));\n\n                totalDistributed = totalDistributed.add(remaining);\n\n                remaining = 0;\n                bonusStack = 0;\n                trancheLeft = 0;\n            } else {\n                bonusStack = trancheLeft.mul(2);\n                tokenBonus = tokenBonus.add(bonusStack.div(10));\n\n                totalDistributed = totalDistributed.add(trancheLeft);\n\n                remaining = remaining.sub(trancheLeft);\n                bonusStack = 0;\n                trancheLeft = 0;\n            }\n        }\n\n        //Fifth Tranche Handler\n        if (remaining > 0 &&\n            totalDistributed >= trancheSize.mul(4) &&\n            totalDistributed < trancheSize.mul(5)\n        ) {\n            trancheLeft = trancheSize.mul(5).sub(totalDistributed);\n\n            if (remaining < trancheLeft) {\n                tokenBonus = tokenBonus.add(remaining.div(10));\n\n                totalDistributed = totalDistributed.add(remaining);\n\n                remaining = 0;\n                bonusStack = 0;\n                trancheLeft = 0;\n            } else {\n                tokenBonus = tokenBonus.add(trancheLeft.div(10));\n\n                totalDistributed = totalDistributed.add(trancheLeft);\n\n                remaining = remaining.sub(trancheLeft);\n                bonusStack = 0;\n                trancheLeft = 0;\n            }\n        }\n\n        //Sixth Tranche Handler\n        if (remaining > 0 &&\n            totalDistributed >= trancheSize.mul(5) &&\n            totalDistributed < trancheSize.mul(6)\n        ) {\n            trancheLeft = trancheSize.mul(6).sub(totalDistributed);\n\n            if (remaining < trancheLeft) {\n                bonusStack = remaining.mul(5);\n                tokenBonus = tokenBonus.add(bonusStack.div(100));\n\n                totalDistributed = totalDistributed.add(remaining);\n\n                remaining = 0;\n                bonusStack = 0;\n                trancheLeft = 0;\n            } else {\n                bonusStack = trancheLeft.mul(5);\n                tokenBonus = tokenBonus.add(bonusStack.div(100));\n\n                totalDistributed = totalDistributed.add(trancheLeft);\n\n                remaining = remaining.sub(trancheLeft);\n                bonusStack = 0;\n                trancheLeft = 0;\n            }\n        }\n\n        totalDistributed = totalDistributed.add(remaining);\n        totalBonusDistributed = totalBonusDistributed.add(tokenBonus);\n\n        tokenReward.transfer(user, tokenBought.add(tokenBonus));\n        received[user] = received[user].add(tokenBought);\n        bonusReceived[user] = bonusReceived[user].add(tokenBonus);\n\n        emit LogFundingReceived(user, valueHandler, totalRaised); //Log the purchase\n\n        checkIfFundingCompleteOrExpired(); //Execute state checks\n    }\n\n    /**\n     * @notice check status\n     */\n    function checkIfFundingCompleteOrExpired() public {\n\n        if (totalDistributed.add(totalBonusDistributed) > hardCap.sub(rate)) { //If we reach the PubSale deadline\n\n            state = State.Successful; //ico becomes Successful\n\n            completedAt = now; //ICO is complete\n\n            emit LogFundingSuccessful(totalRaised); //we log the finish\n            finished(); //and execute closure\n\n        }\n    }\n\n    function withdrawEth() public onlyAdmin(2) {\n        require(totalDistributed >= softCap, \"Too early to retrieve funds\");\n        beneficiary.transfer(address(this).balance);\n    }\n\n    function getRefund() public notFinished {\n        require(totalDistributed >= softCap, \"Too early to retrieve funds\");\n        require(invested[msg.sender] > 0, \"No eth to refund\");\n        require(\n            tokenReward.transferFrom(\n                msg.sender,\n                address(this),\n                received[msg.sender].add(bonusReceived[msg.sender])\n            ),\n            \"Cannot retrieve tokens\"\n        );\n\n        totalDistributed = totalDistributed.sub(received[msg.sender]);\n        totalBonusDistributed = totalBonusDistributed.sub(bonusReceived[msg.sender]);\n        received[msg.sender] = 0;\n        bonusReceived[msg.sender] = 0;\n        uint toTransfer = invested[msg.sender];\n        invested[msg.sender] = 0;\n        msg.sender.transfer(toTransfer);\n    }\n\n    /**\n     * @notice closure handler\n     */\n    function finished() public { //When finished, eth are transfered to beneficiary\n        //Only on sucess\n        require(state == State.Successful, \"Wrong Stage\");\n\n        uint256 remanent = tokenReward.balanceOf(address(this));\n\n        require(tokenReward.transfer(beneficiary, remanent), \"Transfer could not be made\");\n\n        beneficiary.transfer(address(this).balance);\n        emit LogBeneficiaryPaid(beneficiary);\n    }\n\n    /*\n     * @notice direct payments handler\n     */\n    function () external payable {\n        contribute(address(0), 0);\n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trancheSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBonusDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"adminshipLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"level\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"received\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"LogFundingInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"AdminshipUpdated\",\"type\":\"event\"}]",
  "bytecode": "6001805460ff191681554260025560c060405260808190527f310000000000000000000000000000000000000000000000000000000000000060a09081526200004c91600d91906200019f565b503480156200005a57600080fd5b5060405160208062001c2d833981018060405260208110156200007c57600080fd5b5051737a3a57c620fa468b304b5d1826cdcde28e2b2b98600081815260209081527f20ff2b71966e417ff31e7aefbd4a9cbef4f9b34adb50a290da4ca712bf3feec7805460ff19166002908117909155604080519384529183015280517f9b810ace296ded7f98c91fe8d22aa69c4ef152d64f1fbf1cfa9d6bb10627b3009281900390910190a1600480546001600160a01b038084166001600160a01b031992831617909255600b80548216737a3a57c620fa468b304b5d1826cdcde28e2b2b981790819055600c8054909216738605409d35f707714a83410be9c8025dcefa9fac179091556040805191909216815290517f0f86c49ed41b6756ea41809436957b2b1aa2d8d572baf39352362c95e5dee0f19181900360200190a15062000244565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e257805160ff191683800117855562000212565b8280016001018555821562000212579182015b8281111562000212578251825591602001919060010190620001f5565b506200022092915062000224565b5090565b6200024191905b808211156200022057600081556001016200022b565b90565b6119d980620002546000396000f3fe60806040526004361061014b5760003560e01c8063a0ef91df116100b6578063c5c4744c1161006f578063c5c4744c146103ec578063c9c80a5614610401578063d41b6db61461043d578063df0cb93414610486578063efca2eed146104b9578063fb86a404146104ce5761014b565b8063a0ef91df1461034a578063ab11417f1461035f578063b2d5ae4414610374578063b42f84a214610389578063bef4876b1461039e578063c19d93fb146103b35761014b565b80636cfc82ed116101085780636cfc82ed146102b55780636e66f6e9146102ca5780638418cd99146102df57806386f325861461030b5780638da5cb5b14610320578063906a26e0146103355761014b565b80632c4e722e14610158578063387712421461017f57806338af3eed1461019457806354fd4d50146101c557806363f44d1e1461024f57806366b3f6bf14610282575b6101566000806104e3565b005b34801561016457600080fd5b5061016d610ea3565b60408051918252519081900360200190f35b34801561018b57600080fd5b5061016d610ea9565b3480156101a057600080fd5b506101a9610eaf565b604080516001600160a01b039092168252519081900360200190f35b3480156101d157600080fd5b506101da610ebe565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102145781810151838201526020016101fc565b50505050905090810190601f1680156102415780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025b57600080fd5b5061016d6004803603602081101561027257600080fd5b50356001600160a01b0316610f4c565b34801561028e57600080fd5b5061016d600480360360208110156102a557600080fd5b50356001600160a01b0316610f5e565b3480156102c157600080fd5b5061016d610f70565b3480156102d657600080fd5b506101a9610f7f565b610156600480360360408110156102f557600080fd5b506001600160a01b0381351690602001356104e3565b34801561031757600080fd5b50610156610f8e565b34801561032c57600080fd5b506101a9611016565b34801561034157600080fd5b5061016d611025565b34801561035657600080fd5b50610156611034565b34801561036b57600080fd5b5061016d61112e565b34801561038057600080fd5b50610156611134565b34801561039557600080fd5b5061016d611412565b3480156103aa57600080fd5b50610156611418565b3480156103bf57600080fd5b506103c861164a565b604051808260018111156103d857fe5b60ff16815260200191505060405180910390f35b3480156103f857600080fd5b5061016d611653565b34801561040d57600080fd5b506101566004803603604081101561042457600080fd5b5080356001600160a01b0316906020013560ff16611659565b34801561044957600080fd5b506104706004803603602081101561046057600080fd5b50356001600160a01b0316611772565b6040805160ff9092168252519081900360200190f35b34801561049257600080fd5b5061016d600480360360208110156104a957600080fd5b50356001600160a01b0316611787565b3480156104c557600080fd5b5061016d611799565b3480156104da57600080fd5b5061016d61179f565b6001805460ff16818111156104f457fe5b14156105425760408051600160e51b62461bcd0281526020600482015260126024820152600160721b7114d85b19481a185d9948199a5b9a5cda195902604482015290519081900360640190fd5b60008080808080806001600160a01b03891615801590610577575033600090815260208190526040902054600160ff90911610155b15610587578896508795506105be565b336000818152600860205260409020549097503496506105ad908763ffffffff6117af16565b336000908152600860205260409020555b67016345785d8a000086101561060857604051600160e51b62461bcd0281526004018080602001828103825260258152602001806119606025913960400191505060405180910390fd5b60055461061b908763ffffffff6117af16565b60055561063086610b7d63ffffffff61181516565b945061064486610b7d63ffffffff61181516565b905060008111801561066257506a2b6d4eb3e906bb84800000600654105b1561073357600654610686906a2b6d4eb3e906bb848000009063ffffffff61187116565b9150818110156106db576106a181600463ffffffff61181516565b92506106b483600a63ffffffff6118d116565b6006549094506106ca908263ffffffff6117af16565b600655506000915081905080610733565b6106ec82600463ffffffff61181516565b92506106ff83600a63ffffffff6118d116565b600654909450610715908363ffffffff6117af16565b600655610728818363ffffffff61187116565b905060009250600091505b60008111801561075057506a2b6d4eb3e906bb8480000060065410155b801561077857506107736a2b6d4eb3e906bb84800000600263ffffffff61181516565b600654105b1561086c576006546107ac906107a06a2b6d4eb3e906bb84800000600263ffffffff61181516565b9063ffffffff61187116565b915081811015610811576107c781602363ffffffff61181516565b92506107ea6107dd84606463ffffffff6118d116565b859063ffffffff6117af16565b600654909450610800908263ffffffff6117af16565b60065550600091508190508061086c565b61082282602363ffffffff61181516565b92506108386107dd84606463ffffffff6118d116565b60065490945061084e908363ffffffff6117af16565b600655610861818363ffffffff61187116565b905060009250600091505b60008111801561089957506108936a2b6d4eb3e906bb84800000600263ffffffff61181516565b60065410155b80156108c157506108bc6a2b6d4eb3e906bb84800000600363ffffffff61181516565b600654105b1561099c576006546108e9906107a06a2b6d4eb3e906bb84800000600363ffffffff61181516565b9150818110156109415761090481600363ffffffff61181516565b925061091a6107dd84600a63ffffffff6118d116565b600654909450610930908263ffffffff6117af16565b60065550600091508190508061099c565b61095282600363ffffffff61181516565b92506109686107dd84600a63ffffffff6118d116565b60065490945061097e908363ffffffff6117af16565b600655610991818363ffffffff61187116565b905060009250600091505b6000811180156109c957506109c36a2b6d4eb3e906bb84800000600363ffffffff61181516565b60065410155b80156109f157506109ec6a2b6d4eb3e906bb84800000600463ffffffff61181516565b600654105b15610acc57600654610a19906107a06a2b6d4eb3e906bb84800000600463ffffffff61181516565b915081811015610a7157610a3481600263ffffffff61181516565b9250610a4a6107dd84600a63ffffffff6118d116565b600654909450610a60908263ffffffff6117af16565b600655506000915081905080610acc565b610a8282600263ffffffff61181516565b9250610a986107dd84600a63ffffffff6118d116565b600654909450610aae908363ffffffff6117af16565b600655610ac1818363ffffffff61187116565b905060009250600091505b600081118015610af95750610af36a2b6d4eb3e906bb84800000600463ffffffff61181516565b60065410155b8015610b215750610b1c6a2b6d4eb3e906bb84800000600563ffffffff61181516565b600654105b15610bd657600654610b49906107a06a2b6d4eb3e906bb84800000600563ffffffff61181516565b915081811015610b8e57610b676107dd82600a63ffffffff6118d116565b600654909450610b7d908263ffffffff6117af16565b600655506000915081905080610bd6565b610ba26107dd83600a63ffffffff6118d116565b600654909450610bb8908363ffffffff6117af16565b600655610bcb818363ffffffff61187116565b905060009250600091505b600081118015610c035750610bfd6a2b6d4eb3e906bb84800000600563ffffffff61181516565b60065410155b8015610c2b5750610c266a2b6d4eb3e906bb84800000600663ffffffff61181516565b600654105b15610d0857610c556006546107a060066a2b6d4eb3e906bb8480000061181590919063ffffffff16565b915081811015610cad57610c7081600563ffffffff61181516565b9250610c866107dd84606463ffffffff6118d116565b600654909450610c9c908263ffffffff6117af16565b600655506000915081905080610d08565b610cbe82600563ffffffff61181516565b9250610cd46107dd84606463ffffffff6118d116565b600654909450610cea908363ffffffff6117af16565b600655610cfd818363ffffffff61187116565b905060009250600091505b600654610d1b908263ffffffff6117af16565b600655600754610d31908563ffffffff6117af16565b6007556004546001600160a01b031663a9059cbb88610d56888863ffffffff6117af16565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015610da557600080fd5b505af1158015610db9573d6000803e3d6000fd5b505050506040513d6020811015610dcf57600080fd5b50506001600160a01b038716600090815260096020526040902054610dfa908663ffffffff6117af16565b6001600160a01b038816600090815260096020908152604080832093909355600a90522054610e2f908563ffffffff6117af16565b6001600160a01b0388166000818152600a60209081526040918290209390935560055481519283529282018990528181019290925290517f304e48bb03eae5e9bf3575d270648664895983e116a51773a65e9f3341b3b40e9181900360600190a1610e98610f8e565b505050505050505050565b610b7d81565b60035481565b600c546001600160a01b031681565b600d805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610f445780601f10610f1957610100808354040283529160200191610f44565b820191906000526020600020905b815481529060010190602001808311610f2757829003601f168201915b505050505081565b600a6020526000908152604090205481565b60086020526000908152604090205481565b6a2b6d4eb3e906bb8480000081565b6004546001600160a01b031681565b610fac6b015b6a759f4835dc24000000610b7d63ffffffff61187116565b600754600654610fc19163ffffffff6117af16565b1115611014576001805460ff1916811790554260035560055460408051918252517fee94ee98208684c00eeba940c34a6060b93671b249abd182b4771b74bf94e2dd9181900360200190a1611014611418565b565b600b546001600160a01b031681565b6a027b46536c66c8e300000081565b3360009081526020819052604090205460029060ff1681111561108b57604051600160e51b62461bcd0281526004018080602001828103825260298152602001806119856029913960400191505060405180910390fd5b6a027b46536c66c8e300000060065410156110f05760408051600160e51b62461bcd02815260206004820152601b60248201527f546f6f206561726c7920746f2072657472696576652066756e64730000000000604482015290519081900360640190fd5b600c546040516001600160a01b0390911690303180156108fc02916000818181858888f1935050505015801561112a573d6000803e3d6000fd5b5050565b60075481565b6001805460ff168181111561114557fe5b14156111935760408051600160e51b62461bcd0281526020600482015260126024820152600160721b7114d85b19481a185d9948199a5b9a5cda195902604482015290519081900360640190fd5b6a027b46536c66c8e300000060065410156111f85760408051600160e51b62461bcd02815260206004820152601b60248201527f546f6f206561726c7920746f2072657472696576652066756e64730000000000604482015290519081900360640190fd5b3360009081526008602052604090205461125c5760408051600160e51b62461bcd02815260206004820152601060248201527f4e6f2065746820746f20726566756e6400000000000000000000000000000000604482015290519081900360640190fd5b600454336000818152600a60209081526040808320546009909252909120546001600160a01b03909316926323b872dd9291309161129f9163ffffffff6117af16565b6040805163ffffffff861660e01b81526001600160a01b0394851660048201529290931660248301526044820152905160648083019260209291908290030181600087803b1580156112f057600080fd5b505af1158015611304573d6000803e3d6000fd5b505050506040513d602081101561131a57600080fd5b50516113705760408051600160e51b62461bcd02815260206004820152601660248201527f43616e6e6f7420726574726965766520746f6b656e7300000000000000000000604482015290519081900360640190fd5b336000908152600960205260409020546006546113929163ffffffff61187116565b600655336000908152600a60205260409020546007546113b79163ffffffff61187116565b600755336000818152600960209081526040808320839055600a82528083208390556008909152808220805490839055905190929183156108fc02918491818181858888f1935050505015801561112a573d6000803e3d6000fd5b60025481565b6001805460ff168181111561142957fe5b1461146f5760408051600160e51b62461bcd02815260206004820152600b6024820152600160a81b6a57726f6e6720537461676502604482015290519081900360640190fd5b6004805460408051600160e01b6370a082310281523093810193909352516000926001600160a01b03909216916370a0823191602480830192602092919082900301818787803b1580156114c257600080fd5b505af11580156114d6573d6000803e3d6000fd5b505050506040513d60208110156114ec57600080fd5b505160048054600c5460408051600160e01b63a9059cbb0281526001600160a01b03928316948101949094526024840185905251939450169163a9059cbb916044808201926020929091908290030181600087803b15801561154d57600080fd5b505af1158015611561573d6000803e3d6000fd5b505050506040513d602081101561157757600080fd5b50516115cd5760408051600160e51b62461bcd02815260206004820152601a60248201527f5472616e7366657220636f756c64206e6f74206265206d616465000000000000604482015290519081900360640190fd5b600c546040516001600160a01b0390911690303180156108fc02916000818181858888f19350505050158015611607573d6000803e3d6000fd5b50600c54604080516001600160a01b039092168252517f101a889b1c7c3bf4e0c37353cfe1554e47e39c747e25a6d330d0553dd93bd1eb9181900360200190a150565b60015460ff1681565b60055481565b3360009081526020819052604090205460029060ff168111156116b057604051600160e51b62461bcd0281526004018080602001828103825260298152602001806119856029913960400191505060405180910390fd5b6001600160a01b03831661170e5760408051600160e51b62461bcd02815260206004820152601660248201527f416464726573732063616e6e6f74206265207a65726f00000000000000000000604482015290519081900360640190fd5b6001600160a01b03831660008181526020818152604091829020805460ff191660ff871690811790915582519384529083015280517f9b810ace296ded7f98c91fe8d22aa69c4ef152d64f1fbf1cfa9d6bb10627b3009281900390910190a1505050565b60006020819052908152604090205460ff1681565b60096020526000908152604090205481565b60065481565b6b015b6a759f4835dc2400000081565b60008282018381101561180c5760408051600160e51b62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000826118245750600061180f565b8282028284828161183157fe5b041461180c57604051600160e51b62461bcd02815260040180806020018281038252602181526020018061193f6021913960400191505060405180910390fd5b6000828211156118cb5760408051600160e51b62461bcd02815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080821161192a5760408051600160e51b62461bcd02815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b600082848161193557fe5b0494935050505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774e6f7420656e6f7567682076616c756520666f722074686973207472616e73616374696f6e596f7520646f6e7420686176652072696768747320666f722074686973207472616e73616374696f6ea165627a7a72305820cb074fb41919da8712cac4c7fb1d74aa83f74c9d055cda095326807c3cdf7ae800290000000000000000000000004e84a65b5664d33b67750771f8beaec458bd6729",
  "constructorArguments": "0000000000000000000000004e84a65b5664d33b67750771f8beaec458bd6729"
}