{
  "address": "0xb28a9dccd099dc19bd1112fa33dfa640dd07d961",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "GlobalWhitelist",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-06\n*/\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/utils/Utils.sol\n\n/**\n * @title Manageable Contract\n * @author Validity Labs AG <[email protected]>\n */\n \npragma solidity 0.5.7;\n\n\ncontract Utils {\n    /** MODIFIERS **/\n    modifier onlyValidAddress(address _address) {\n        require(_address != address(0), \"invalid address\");\n        _;\n    }\n}\n\n// File: contracts/management/Manageable.sol\n\n/**\n * @title Manageable Contract\n * @author Validity Labs AG <[email protected]>\n */\n \n pragma solidity 0.5.7;\n\n\n\ncontract Manageable is Ownable, Utils {\n    mapping(address => bool) public isManager;     // manager accounts\n\n    /** EVENTS **/\n    event ChangedManager(address indexed manager, bool active);\n\n    /** MODIFIERS **/\n    modifier onlyManager() {\n        require(isManager[msg.sender], \"is not manager\");\n        _;\n    }\n\n    /**\n    * @notice constructor sets the deployer as a manager\n    */\n    constructor() public {\n        setManager(msg.sender, true);\n    }\n\n    /**\n     * @notice enable/disable an account to be a manager\n     * @param _manager address address of the manager to create/alter\n     * @param _active bool flag that shows if the manager account is active\n     */\n    function setManager(address _manager, bool _active) public onlyOwner onlyValidAddress(_manager) {\n        isManager[_manager] = _active;\n        emit ChangedManager(_manager, _active);\n    }\n\n    /** OVERRIDE \n    * @notice does not allow owner to give up ownership\n    */\n    function renounceOwnership() public onlyOwner {\n        revert(\"Cannot renounce ownership\");\n    }\n}\n\n// File: contracts/whitelist/GlobalWhitelist.sol\n\n/**\n * @title Global Whitelist Contract\n * @author Validity Labs AG <[email protected]>\n */\n\npragma solidity 0.5.7;\n\n\n\n\ncontract GlobalWhitelist is Ownable, Manageable {\n    mapping(address => bool) public isWhitelisted; // addresses of who's whitelisted\n    bool public isWhitelisting = true;             // whitelisting enabled by default\n\n    /** EVENTS **/\n    event ChangedWhitelisting(address indexed registrant, bool whitelisted);\n    event GlobalWhitelistDisabled(address indexed manager);\n    event GlobalWhitelistEnabled(address indexed manager);\n\n    /**\n    * @dev add an address to the whitelist\n    * @param _address address\n    */\n    function addAddressToWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\n        isWhitelisted[_address] = true;\n        emit ChangedWhitelisting(_address, true);\n    }\n\n    /**\n    * @dev add addresses to the whitelist\n    * @param _addresses addresses array\n    */\n    function addAddressesToWhitelist(address[] calldata _addresses) external {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            addAddressToWhitelist(_addresses[i]);\n        }\n    }\n\n    /**\n    * @dev remove an address from the whitelist\n    * @param _address address\n    */\n    function removeAddressFromWhitelist(address _address) public onlyManager onlyValidAddress(_address) {\n        isWhitelisted[_address] = false;\n        emit ChangedWhitelisting(_address, false);\n    }\n\n    /**\n    * @dev remove addresses from the whitelist\n    * @param _addresses addresses\n    */\n    function removeAddressesFromWhitelist(address[] calldata _addresses) external {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            removeAddressFromWhitelist(_addresses[i]);\n        }\n    }\n\n    /** \n    * @notice toggle the whitelist by the parent contract; ExporoTokenFactory\n    */\n    function toggleWhitelist() external onlyOwner {\n        isWhitelisting = isWhitelisting ? false : true;\n\n        if (isWhitelisting) {\n            emit GlobalWhitelistEnabled(msg.sender);\n        } else {\n            emit GlobalWhitelistDisabled(msg.sender);\n        }\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWhitelisting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registrant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"ChangedWhitelisting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"GlobalWhitelistDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"GlobalWhitelistEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ChangedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60806040526001600360006101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36100ec3360016100f160201b60201c565b6102b1565b6100ff61025a60201b60201c565b61010857600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156101ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167fc805cd93de579d61b0924c5b5ed9db042198f72031750f8c95608d1cf7d8385583604051808215151515815260200191505060405180910390a2505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b610de9806102c06000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063a5e90eee11610066578063a5e90eee146102d3578063e2ec6ec314610323578063f2fde38b1461039c578063f3ae2415146103e0576100cf565b80638da5cb5b146102455780638f32d59b1461028f578063914f5207146102b1576100cf565b806324953eaa146100d4578063286dd3f51461014d5780633af32abf14610191578063715018a6146101ed5780637b9417c8146101f75780637e15144b1461023b575b600080fd5b61014b600480360360208110156100ea57600080fd5b810190808035906020019064010000000081111561010757600080fd5b82018360208201111561011957600080fd5b8035906020019184602083028401116401000000008311171561013b57600080fd5b909192939192939050505061043c565b005b61018f6004803603602081101561016357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610490565b005b6101d3600480360360208110156101a757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106a2565b604051808215151515815260200191505060405180910390f35b6101f56106c2565b005b6102396004803603602081101561020d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610741565b005b610243610953565b005b61024d610a3e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610297610a67565b604051808215151515815260200191505060405180910390f35b6102b9610abe565b604051808215151515815260200191505060405180910390f35b610321600480360360408110156102e957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610ad1565b005b61039a6004803603602081101561033957600080fd5b810190808035906020019064010000000081111561035657600080fd5b82018360208201111561036857600080fd5b8035906020019184602083028401116401000000008311171561038a57600080fd5b9091929391929390505050610c34565b005b6103de600480360360208110156103b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c88565b005b610422600480360360208110156103f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ca5565b604051808215151515815260200191505060405180910390f35b60008090505b8282905081101561048b5761047e83838381811061045c57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16610490565b8080600101915050610442565b505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661054f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6973206e6f74206d616e6167657200000000000000000000000000000000000081525060200191505060405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2a736166684304e488f1424d0715ffafeeb10369d5a2cb89e8dcd461df98e8ee6000604051808215151515815260200191505060405180910390a25050565b60026020528060005260406000206000915054906101000a900460ff1681565b6106ca610a67565b6106d357600080fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f43616e6e6f742072656e6f756e6365206f776e6572736869700000000000000081525060200191505060405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610800576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f6973206e6f74206d616e6167657200000000000000000000000000000000000081525060200191505060405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f2a736166684304e488f1424d0715ffafeeb10369d5a2cb89e8dcd461df98e8ee6001604051808215151515815260200191505060405180910390a25050565b61095b610a67565b61096457600080fd5b600360009054906101000a900460ff1661097f576001610982565b60005b600360006101000a81548160ff021916908315150217905550600360009054906101000a900460ff16156109f8573373ffffffffffffffffffffffffffffffffffffffff167f4187a1d9334614efc7154317a7629706817b5689a59fdacc8bb99503f5fdec1a60405160405180910390a2610a3c565b3373ffffffffffffffffffffffffffffffffffffffff167f5deb3bddb16fec24c019d2d69d2f66a0208c7fbbc38eefd033a0ce7cbb6a0f6e60405160405180910390a25b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b600360009054906101000a900460ff1681565b610ad9610a67565b610ae257600080fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f696e76616c69642061646472657373000000000000000000000000000000000081525060200191505060405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff167fc805cd93de579d61b0924c5b5ed9db042198f72031750f8c95608d1cf7d8385583604051808215151515815260200191505060405180910390a2505050565b60008090505b82829050811015610c8357610c76838383818110610c5457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16610741565b8080600101915050610c3a565b505050565b610c90610a67565b610c9957600080fd5b610ca281610cc5565b50565b60016020528060005260406000206000915054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cff57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a7230582087597829c98b520dc22f901e558dfd8bef26cf3c6a9648f0f4646de17076da040029"
}