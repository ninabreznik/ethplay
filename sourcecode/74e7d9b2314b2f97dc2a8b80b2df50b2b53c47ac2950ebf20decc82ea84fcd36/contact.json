{
  "address": "0xbbbcb0856866c4f40d772993f12e86dd36b9a888",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Bitdepositary: BDT20 Token",
  "contractName": "ERC677BridgeToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-12\n*/\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is BasicToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.4.23;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n\npragma solidity ^0.4.23;\n\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n\npragma solidity ^0.4.23;\n\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n// File: contracts/ERC677.sol\n\npragma solidity 0.4.24;\n\n\n\ncontract ERC677 is ERC20 {\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n\n    function transferAndCall(address, uint, bytes) external returns (bool);\n\n}\n\n// File: contracts/IBurnableMintableERC677Token.sol\n\npragma solidity 0.4.24;\n\n\n\ncontract IBurnableMintableERC677Token is ERC677 {\n    function mint(address, uint256) public returns (bool);\n    function burn(uint256 _value) public;\n    function claimTokens(address _token, address _to) public;\n}\n\n// File: contracts/ERC677Receiver.sol\n\npragma solidity 0.4.24;\n\n\ncontract ERC677Receiver {\n  function onTokenTransfer(address _from, uint _value, bytes _data) external returns(bool);\n}\n\n// File: contracts/ERC677BridgeToken.sol\n\npragma solidity 0.4.24;\n\n\n\n\n\n\n\ncontract ERC677BridgeToken is\n    IBurnableMintableERC677Token,\n    DetailedERC20,\n    BurnableToken,\n    MintableToken {\n\n    address public bridgeContract;\n\n    event ContractFallbackCallFailed(address from, address to, uint value);\n\n    constructor(\n        string _name,\n        string _symbol,\n        uint8 _decimals)\n    public DetailedERC20(_name, _symbol, _decimals) {}\n\n    function setBridgeContract(address _bridgeContract) onlyOwner public {\n        require(_bridgeContract != address(0) && isContract(_bridgeContract));\n        bridgeContract = _bridgeContract;\n    }\n\n    modifier validRecipient(address _recipient) {\n        require(_recipient != address(0) && _recipient != address(this));\n        _;\n    }\n\n    function transferAndCall(address _to, uint _value, bytes _data)\n        external validRecipient(_to) returns (bool)\n    {\n        require(superTransfer(_to, _value));\n        emit Transfer(msg.sender, _to, _value, _data);\n\n        if (isContract(_to)) {\n            require(contractFallback(_to, _value, _data));\n        }\n        return true;\n    }\n\n    function getTokenInterfacesVersion() public pure returns(uint64 major, uint64 minor, uint64 patch) {\n        return (2, 0, 0);\n    }\n\n    function superTransfer(address _to, uint256 _value) internal returns(bool)\n    {\n        return super.transfer(_to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool)\n    {\n        require(superTransfer(_to, _value));\n        if (isContract(_to) && !contractFallback(_to, _value, new bytes(0))) {\n            if (_to == bridgeContract) {\n                revert();\n            } else {\n                emit ContractFallbackCallFailed(msg.sender, _to, _value);\n            }\n        }\n        return true;\n    }\n\n    function contractFallback(address _to, uint _value, bytes _data)\n        private\n        returns(bool)\n    {\n        return _to.call(abi.encodeWithSignature(\"onTokenTransfer(address,uint256,bytes)\",  msg.sender, _value, _data));\n    }\n\n    function isContract(address _addr)\n        private\n        view\n        returns (bool)\n    {\n        uint length;\n        assembly { length := extcodesize(_addr) }\n        return length > 0;\n    }\n\n    function finishMinting() public returns (bool) {\n        revert();\n    }\n\n    function renounceOwnership() public onlyOwner {\n        revert();\n    }\n\n    function claimTokens(address _token, address _to) public onlyOwner {\n        require(_to != address(0));\n        if (_token == address(0)) {\n            _to.transfer(address(this).balance);\n            return;\n        }\n\n        DetailedERC20 token = DetailedERC20(_token);\n        uint256 balance = token.balanceOf(address(this));\n        require(token.transfer(_to, balance));\n    }\n\n\n}",
  "bytecode": "60806040526006805460a060020a60ff02191690553480156200002157600080fd5b5060405162001496380380620014968339810160409081528151602080840151928401519184018051909493909301928491849184916200006891600091860190620000b2565b5081516200007e906001906020850190620000b2565b506002805460ff90921660ff19909216919091179055505060068054600160a060020a031916331790555062000157915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000f557805160ff191683800117855562000125565b8280016001018555821562000125579182015b828111156200012557825182559160200191906001019062000108565b506200013392915062000137565b5090565b6200015491905b808211156200013357600081556001016200013e565b90565b61132f80620001676000396000f3006080604052600436106101325763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461013757806306fdde0314610160578063095ea7b3146101ea5780630b26cf661461020e57806318160ddd1461023157806323b872dd14610258578063313ce567146102825780634000aea0146102ad57806340c10f19146102de57806342966c6814610302578063661884631461031a57806369ffa08a1461033e57806370a0823114610365578063715018a6146103865780637d64bcb41461039b578063859ba28c146103b05780638da5cb5b146103f157806395d89b4114610422578063a9059cbb14610437578063cd5965831461045b578063d73dd62314610470578063dd62ed3e14610494578063f2fde38b146104bb575b600080fd5b34801561014357600080fd5b5061014c6104dc565b604080519115158252519081900360200190f35b34801561016c57600080fd5b506101756104fd565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101af578181015183820152602001610197565b50505050905090810190601f1680156101dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f657600080fd5b5061014c600160a060020a036004351660243561058b565b34801561021a57600080fd5b5061022f600160a060020a03600435166105f1565b005b34801561023d57600080fd5b5061024661065e565b60408051918252519081900360200190f35b34801561026457600080fd5b5061014c600160a060020a0360043581169060243516604435610664565b34801561028e57600080fd5b506102976107cb565b6040805160ff9092168252519081900360200190f35b3480156102b957600080fd5b5061014c60048035600160a060020a03169060248035916044359182019101356107d4565b3480156102ea57600080fd5b5061014c600160a060020a03600435166024356108e4565b34801561030e57600080fd5b5061022f6004356109ef565b34801561032657600080fd5b5061014c600160a060020a03600435166024356109fc565b34801561034a57600080fd5b5061022f600160a060020a0360043581169060243516610aec565b34801561037157600080fd5b50610246600160a060020a0360043516610ca5565b34801561039257600080fd5b5061022f610cc0565b3480156103a757600080fd5b5061014c610cd7565b3480156103bc57600080fd5b506103c5610cde565b6040805167ffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b3480156103fd57600080fd5b50610406610ce8565b60408051600160a060020a039092168252519081900360200190f35b34801561042e57600080fd5b50610175610cf7565b34801561044357600080fd5b5061014c600160a060020a0360043516602435610d51565b34801561046757600080fd5b50610406610e08565b34801561047c57600080fd5b5061014c600160a060020a0360043516602435610e17565b3480156104a057600080fd5b50610246600160a060020a0360043581169060243516610eb0565b3480156104c757600080fd5b5061022f600160a060020a0360043516610edb565b60065474010000000000000000000000000000000000000000900460ff1681565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105835780601f1061055857610100808354040283529160200191610583565b820191906000526020600020905b81548152906001019060200180831161056657829003601f168201915b505050505081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600654600160a060020a0316331461060857600080fd5b600160a060020a03811615801590610624575061062481610efb565b151561062f57600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045490565b6000600160a060020a038316151561067b57600080fd5b600160a060020a0384166000908152600360205260409020548211156106a057600080fd5b600160a060020a03841660009081526005602090815260408083203384529091529020548211156106d057600080fd5b600160a060020a0384166000908152600360205260409020546106f9908363ffffffff610f0316565b600160a060020a03808616600090815260036020526040808220939093559085168152205461072e908363ffffffff610f1516565b600160a060020a038085166000908152600360209081526040808320949094559187168152600582528281203382529091522054610772908363ffffffff610f0316565b600160a060020a03808616600081815260056020908152604080832033845282529182902094909455805186815290519287169391926000805160206112e4833981519152929181900390910190a35060019392505050565b60025460ff1681565b600084600160a060020a038116158015906107f85750600160a060020a0381163014155b151561080357600080fd5b61080d8686610f28565b151561081857600080fd5b85600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16878787604051808481526020018060200182810382528484828181526020019250808284376040519201829003965090945050505050a361088d86610efb565b156108d8576108cd868686868080601f01602080910402602001604051908101604052809392919081815260200183838082843750610f3b945050505050565b15156108d857600080fd5b50600195945050505050565b600654600090600160a060020a031633146108fe57600080fd5b60065474010000000000000000000000000000000000000000900460ff161561092657600080fd5b600454610939908363ffffffff610f1516565b600455600160a060020a038316600090815260036020526040902054610965908363ffffffff610f1516565b600160a060020a038416600081815260036020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000916000805160206112e48339815191529181900360200190a350600192915050565b6109f933826110a5565b50565b336000908152600560209081526040808320600160a060020a038616845290915281205480831115610a5157336000908152600560209081526040808320600160a060020a0388168452909152812055610a86565b610a61818463ffffffff610f0316565b336000908152600560209081526040808320600160a060020a03891684529091529020555b336000818152600560209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6006546000908190600160a060020a03163314610b0857600080fd5b600160a060020a0383161515610b1d57600080fd5b600160a060020a0384161515610b6957604051600160a060020a03841690303180156108fc02916000818181858888f19350505050158015610b63573d6000803e3d6000fd5b50610c9f565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051859350600160a060020a038416916370a082319160248083019260209291908290030181600087803b158015610bcd57600080fd5b505af1158015610be1573d6000803e3d6000fd5b505050506040513d6020811015610bf757600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301526024820184905291519293509084169163a9059cbb916044808201926020929091908290030181600087803b158015610c6857600080fd5b505af1158015610c7c573d6000803e3d6000fd5b505050506040513d6020811015610c9257600080fd5b50511515610c9f57600080fd5b50505050565b600160a060020a031660009081526003602052604090205490565b600654600160a060020a0316331461013257600080fd5b6000806000fd5b6002600080909192565b600654600160a060020a031681565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105835780601f1061055857610100808354040283529160200191610583565b6000610d5d8383610f28565b1515610d6857600080fd5b610d7183610efb565b8015610d965750604080516000815260208101909152610d949084908490610f3b565b155b15610dff57600754600160a060020a0384811691161415610db657600080fd5b60408051338152600160a060020a038516602082015280820184905290517f11249f0fc79fc134a15a10d1da8291b79515bf987e036ced05b9ec119614070b9181900360600190a15b50600192915050565b600754600160a060020a031681565b336000908152600560209081526040808320600160a060020a0386168452909152812054610e4b908363ffffffff610f1516565b336000818152600560209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b600654600160a060020a03163314610ef257600080fd5b6109f981611194565b6000903b1190565b600082821115610f0f57fe5b50900390565b81810182811015610f2257fe5b92915050565b6000610f348383611212565b9392505050565b600083600160a060020a03163384846040516024018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fa8578181015183820152602001610f90565b50505050905090810190601f168015610fd55780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa4c0ed36000000000000000000000000000000000000000000000000000000001781529051825192975095508594509250905080838360005b8381101561105c578181015183820152602001611044565b50505050905090810190601f1680156110895780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af19695505050505050565b600160a060020a0382166000908152600360205260409020548111156110ca57600080fd5b600160a060020a0382166000908152600360205260409020546110f3908263ffffffff610f0316565b600160a060020a03831660009081526003602052604090205560045461111f908263ffffffff610f0316565b600455604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a038516916000805160206112e48339815191529181900360200190a35050565b600160a060020a03811615156111a957600080fd5b600654604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a038316151561122957600080fd5b3360009081526003602052604090205482111561124557600080fd5b33600090815260036020526040902054611265908363ffffffff610f0316565b3360009081526003602052604080822092909255600160a060020a03851681522054611297908363ffffffff610f1516565b600160a060020a0384166000818152600360209081526040918290209390935580518581529051919233926000805160206112e48339815191529281900390910190a3506001929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a7230582018ba6bef9d6478c1e619376f192dc739bb6e7e624047e5039a25e6fe2c556c730029000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000009424454204552433230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054244543230000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000009424454204552433230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054244543230000000000000000000000000000000000000000000000000000000"
}