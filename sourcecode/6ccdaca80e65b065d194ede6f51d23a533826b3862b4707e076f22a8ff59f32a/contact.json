{
  "address": "0x9d3d6f1913cd694b8b7d5415930bab32c6fa718c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SecuredNotes",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-19\n*/\n\npragma solidity ^0.4.18;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract HasNoEther is Ownable {\n\n  /**\n  * @dev Constructor that rejects incoming Ether\n  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n  * we could use assembly to access msg.value.\n  */\n  function HasNoEther() public payable {\n    require(msg.value == 0);\n  }\n\n  /**\n   * @dev Disallows direct send by settings a default function without the `payable` flag.\n   */\n  function() external {\n  }\n\n  /**\n   * @dev Transfer all Ether held by the contract to the owner.\n   */\n  function reclaimEther() external onlyOwner {\n    assert(owner.send(this.balance));\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\ncontract BurnableToken is StandardToken {\n\n    event Burn(address indexed burner, uint256 value);\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param _value The amount of token to be burned.\n     */\n    function burn(uint256 _value) public {\n        require(_value > 0);\n        require(_value <= balances[msg.sender]);\n        // no need to require value <= totalSupply, since that would imply the\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n        Burn(burner, _value);\n    }\n\t\n\n}\n\ncontract NotesToken is BurnableToken, Ownable\n{\n    // Map of all notes for all addresses\n    mapping( address => string[] ) notes;\n    \n    // Price per character\n    uint256 public CharPrice;\n    \n    /**\n    * @dev Set new price per character (only for Owner). Return true.\n    * @param newPrice The new price per character.\n    */\n    function setCharPrice( uint256 newPrice ) public onlyOwner returns (bool result )\n    {\n        CharPrice = newPrice;\n        return true;\n    }\n    \n    /**\n    * @dev Return notes count for sender.\n    */\n    function getNotesCount() public view returns (uint256 count) \n    {\n        return notes[msg.sender].length;\n    }\n  \n    /**\n    * @dev Add note to sender. Return true when done. \n    * @param s The note-string.\n    */\n    function addNote(string s) public \n    {\n        uint256 needValue = bytes(s).length * CharPrice;\n        require ( needValue <= balances[msg.sender] );\n        \n        balances[msg.sender] = balances[msg.sender].sub(needValue);\n        totalSupply = totalSupply.sub(needValue);\n        notes[msg.sender].push(s);\n    }\n    \n    /**\n    * @dev Return note-string by index for sender. \n    * @param index The index of note in note-list.\n    */\n    function getNoteByIndex(uint index) public constant returns (string) {\n        if ( notes[msg.sender].length == 0 ) return \"false\";\n        if ( index > notes[msg.sender].length ) return \"false\";\n        return notes[msg.sender][index];\n    }\n}\n\ncontract SecuredNotes is NotesToken, HasNoEther {\n\n    string public constant name = \"Secured Notes\";\n    string public constant symbol = \"SEC\";\n    uint8 public constant decimals = 18;\n    uint256 constant INITIAL_SUPPLY = 10000000 * (10 ** uint256(decimals));\n\n    /**\n    * @dev Constructor that gives msg.sender all of existing tokens.\n    */\n    function SecuredNotes() public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n        Transfer(address(0), msg.sender, totalSupply);\n    }\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    /**\n    * @dev Transfer tokens from one address to another\n    * @param _from address The address which you want to send tokens from\n    * @param _to address The address which you want to transfer to\n    * @param _value uint256 the amount of tokens to be transferred\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function multiTransfer(address[] recipients, uint256[] amounts) public {\n        require(recipients.length == amounts.length);\n        for (uint i = 0; i < recipients.length; i++) {\n            transfer(recipients[i], amounts[i]);\n        }\n    }\n\t\n\t/**\n\t* @dev Create `mintedAmount` tokens\n    * @param mintedAmount The amount of tokens it will minted\n\t**/\n    function mintToken(uint256 mintedAmount) public onlyOwner {\n\t\t\ttotalSupply += mintedAmount;\n\t\t\tbalances[owner] += mintedAmount;\n\t\t\tTransfer(address(0), owner, mintedAmount);\n    }\n}",
  "bytecode": "608060405234801561001057600080fd5b5060038054600160a060020a03191633179055341561002e57600080fd5b6a084595161401484a00000060008181553380825260016020908152604080842085905580519485525191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3610ffb806100946000396000f3006080604052600436106101275763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610136578063095ea7b3146101c057806318160ddd146101f85780631e89d5451461021f57806323b872dd146102af5780632e25aa96146102d9578063313ce567146102f157806342966c681461031c5780634c21fa4514610334578063661884631461034c57806370a08231146103705780638596982d146103915780638da5cb5b146103a657806395d89b41146103d75780639f727c27146103ec578063a4edff4714610401578063a9059cbb1461045a578063bde7cac01461047e578063c634d03214610493578063d73dd623146104ab578063dd62ed3e146104cf578063f2fde38b146104f6575b34801561013357600080fd5b50005b34801561014257600080fd5b5061014b610517565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018557818101518382015260200161016d565b50505050905090810190601f1680156101b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101cc57600080fd5b506101e4600160a060020a036004351660243561054e565b604080519115158252519081900360200190f35b34801561020457600080fd5b5061020d6105b4565b60408051918252519081900360200190f35b34801561022b57600080fd5b50604080516020600480358082013583810280860185019096528085526102ad95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506105ba9650505050505050565b005b3480156102bb57600080fd5b506101e4600160a060020a036004358116906024351660443561061e565b3480156102e557600080fd5b506101e4600435610633565b3480156102fd57600080fd5b5061030661065b565b6040805160ff9092168252519081900360200190f35b34801561032857600080fd5b506102ad600435610660565b34801561034057600080fd5b5061014b60043561071e565b34801561035857600080fd5b506101e4600160a060020a0360043516602435610877565b34801561037c57600080fd5b5061020d600160a060020a0360043516610967565b34801561039d57600080fd5b5061020d610982565b3480156103b257600080fd5b506103bb610996565b60408051600160a060020a039092168252519081900360200190f35b3480156103e357600080fd5b5061014b6109a5565b3480156103f857600080fd5b506102ad6109dc565b34801561040d57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102ad943694929360249392840191908190840183828082843750949750610a269650505050505050565b34801561046657600080fd5b506101e4600160a060020a0360043516602435610acb565b34801561048a57600080fd5b5061020d610ade565b34801561049f57600080fd5b506102ad600435610ae4565b3480156104b757600080fd5b506101e4600160a060020a0360043516602435610b61565b3480156104db57600080fd5b5061020d600160a060020a0360043581169060243516610bfa565b34801561050257600080fd5b506102ad600160a060020a0360043516610c25565b60408051808201909152600d81527f53656375726564204e6f74657300000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60005481565b80518251600091146105cb57600080fd5b5060005b82518110156106195761061083828151811015156105e957fe5b90602001906020020151838381518110151561060157fe5b90602001906020020151610acb565b506001016105cf565b505050565b600061062b848484610cba565b949350505050565b600354600090600160a060020a0316331461064d57600080fd5b50600581905560015b919050565b601281565b600080821161066e57600080fd5b3360009081526001602052604090205482111561068a57600080fd5b50336000818152600160205260409020546106ab908363ffffffff610e3316565b600160a060020a038216600090815260016020526040812091909155546106d8908363ffffffff610e3316565b600055604080518381529051600160a060020a038316917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a25050565b336000908152600460205260409020546060901515610771575060408051808201909152600581527f66616c73650000000000000000000000000000000000000000000000000000006020820152610656565b336000908152600460205260409020548211156107c2575060408051808201909152600581527f66616c73650000000000000000000000000000000000000000000000000000006020820152610656565b3360009081526004602052604090208054839081106107dd57fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561086b5780601f106108405761010080835404028352916020019161086b565b820191906000526020600020905b81548152906001019060200180831161084e57829003601f168201915b50505050509050919050565b336000908152600260209081526040808320600160a060020a0386168452909152812054808311156108cc57336000908152600260209081526040808320600160a060020a0388168452909152812055610901565b6108dc818463ffffffff610e3316565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526001602052604090205490565b336000908152600460205260409020545b90565b600354600160a060020a031681565b60408051808201909152600381527f5345430000000000000000000000000000000000000000000000000000000000602082015281565b600354600160a060020a031633146109f357600080fd5b600354604051600160a060020a0390911690303180156108fc02916000818181858888f193505050501515610a2457fe5b565b600554815133600090815260016020526040902054910290811115610a4a57600080fd5b33600090815260016020526040902054610a6a908263ffffffff610e3316565b3360009081526001602052604081209190915554610a8e908263ffffffff610e3316565b600090815533815260046020908152604082208054600181018083559184529282902085519193610ac59391019190860190610f37565b50505050565b6000610ad78383610e45565b9392505050565b60055481565b600354600160a060020a03163314610afb57600080fd5b600080548201815560038054600160a060020a039081168352600160209081526040808520805487019055925483518681529351921693927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a350565b336000908152600260209081526040808320600160a060020a0386168452909152812054610b95908363ffffffff610f2816565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a03163314610c3c57600080fd5b600160a060020a0381161515610c5157600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000600160a060020a0383161515610cd157600080fd5b600160a060020a038416600090815260016020526040902054821115610cf657600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610d2657600080fd5b600160a060020a038416600090815260016020526040902054610d4f908363ffffffff610e3316565b600160a060020a038086166000908152600160205260408082209390935590851681522054610d84908363ffffffff610f2816565b600160a060020a038085166000908152600160209081526040808320949094559187168152600282528281203382529091522054610dc8908363ffffffff610e3316565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600082821115610e3f57fe5b50900390565b6000600160a060020a0383161515610e5c57600080fd5b33600090815260016020526040902054821115610e7857600080fd5b33600090815260016020526040902054610e98908363ffffffff610e3316565b3360009081526001602052604080822092909255600160a060020a03851681522054610eca908363ffffffff610f2816565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b600082820183811015610ad757fe5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610f7857805160ff1916838001178555610fa5565b82800160010185558215610fa5579182015b82811115610fa5578251825591602001919060010190610f8a565b50610fb1929150610fb5565b5090565b61099391905b80821115610fb15760008155600101610fbb5600a165627a7a7230582085632156ce44f0568ffa777995007aabd2fb9a91a29ae9d225b0e4d90fab11e60029"
}