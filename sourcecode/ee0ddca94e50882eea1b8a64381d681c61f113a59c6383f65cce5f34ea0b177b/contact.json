{
  "address": "0x410af23334e26aa13c1f3e630bae006bdd313264",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ClearToken",
  "compilerVersion": "v0.4.19+commit.c4cbbb05",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-05-08\n*/\n\npragma solidity ^0.4.11;\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping (address => mapping (address => uint256)) allowed;\n\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n\n        uint256 _allowance = allowed[_from][msg.sender];\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n        // require (_value <= _allowance);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\nlibrary Bonus {\n    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n\n    uint16 constant ORIGIN_YEAR = 1970;\n\n    function getBonusFactor(uint256 basisTokens, uint timestamp)\n    internal pure returns (uint256 factor)\n    {\n        uint256[4][5] memory factors = [[uint256(300), 400, 500, 750],\n        [uint256(200), 300, 400, 600],\n        [uint256(150), 250, 300, 500],\n        [uint256(100), 150, 250, 400],\n        [uint256(0),   100, 150, 300]];\n\n        uint[4] memory cutofftimes = [toTimestamp(2018, 3, 24),\n        toTimestamp(2018, 4, 5),\n        toTimestamp(2018, 5, 5),\n        toTimestamp(2018, 6, 5)];\n\n        //compare whole tokens\n        uint256 tokenAmount = basisTokens / pointMultiplier;\n\n        //set default to the 0% bonus\n        uint256 timeIndex = 4;\n        uint256 amountIndex = 0;\n\n        // 0.02 NZD per token = 50 tokens per NZD\n        if (tokenAmount >= 500000000) {\n            // >10M NZD\n            amountIndex = 3;\n        } else if (tokenAmount >= 100000000) {\n            // >2M NZD\n            amountIndex = 2;\n        } else if (tokenAmount >= 25000000) {\n            // >500K NZD\n            amountIndex = 1;\n        } else {\n            // <500K NZD\n            //amountIndex = 0;\n        }\n\n        uint256 maxcutoffindex = cutofftimes.length;\n        for (uint256 i = 0; i < maxcutoffindex; i++) {\n            if (timestamp < cutofftimes[i]) {\n                timeIndex = i;\n                break;\n            }\n        }\n\n        return factors[timeIndex][amountIndex];\n    }\n\n    // Timestamp functions based on\n    // https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\n    function toTimestamp(uint16 year, uint8 month, uint8 day)\n    internal pure returns (uint timestamp) {\n        uint16 i;\n\n        // Year\n        timestamp += (year - ORIGIN_YEAR) * 1 years;\n        timestamp += (leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR)) * 1 days;\n\n        // Month\n        uint8[12] memory monthDayCounts;\n        monthDayCounts[0] = 31;\n        if (isLeapYear(year)) {\n            monthDayCounts[1] = 29;\n        }\n        else {\n            monthDayCounts[1] = 28;\n        }\n        monthDayCounts[2] = 31;\n        monthDayCounts[3] = 30;\n        monthDayCounts[4] = 31;\n        monthDayCounts[5] = 30;\n        monthDayCounts[6] = 31;\n        monthDayCounts[7] = 31;\n        monthDayCounts[8] = 30;\n        monthDayCounts[9] = 31;\n        monthDayCounts[10] = 30;\n        monthDayCounts[11] = 31;\n\n        for (i = 1; i < month; i++) {\n            timestamp += monthDayCounts[i - 1] * 1 days;\n        }\n\n        // Day\n        timestamp += (day - 1) * 1 days;\n\n        // Hour, Minute, and Second are assumed as 0 (we calculate in GMT)\n\n        return timestamp;\n    }\n\n    function leapYearsBefore(uint year)\n    internal pure returns (uint) {\n        year -= 1;\n        return year / 4 - year / 100 + year / 400;\n    }\n\n    function isLeapYear(uint16 year)\n    internal pure returns (bool) {\n        if (year % 4 != 0) {\n            return false;\n        }\n        if (year % 100 != 0) {\n            return true;\n        }\n        if (year % 400 != 0) {\n            return false;\n        }\n        return true;\n    }\n}\n\ncontract ClearToken is StandardToken {\n\n    // data structures\n    enum States {\n        Initial, // deployment time\n        ValuationSet,\n        Ico, // whitelist addresses, accept funds, update balances\n        Underfunded, // ICO time finished and minimal amount not raised\n        Operational, // production phase\n        Paused         // for contract upgrades\n    }\n\n    mapping(address => uint256) public ethPossibleRefunds;\n\n    uint256 public soldTokens;\n\n    string public constant name = \"CLEAR Token\";\n\n    string public constant symbol = \"CLEAR\";\n\n    uint8 public constant decimals = 18;\n\n    mapping(address => bool) public whitelist;\n\n    address public reserves;\n\n    address public stateControl;\n\n    address public whitelistControl;\n\n    address public withdrawControl;\n\n    address public tokenAssignmentControl;\n\n    States public state;\n\n    uint256 public startAcceptingFundsBlock;\n\n    uint256 public endTimestamp;\n\n    uint256 public ETH_CLEAR; //number of tokens per ETH\n\n    uint256 public constant NZD_CLEAR = 50; //fixed rate of 50 CLEAR to 1 NZD\n\n    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n\n    uint256 public constant maxTotalSupply = 102400000000 * pointMultiplier; //102.4B tokens\n\n    uint256 public constant percentForSale = 50;\n\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n\n    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n    function ClearToken(\n        address _stateControl\n    , address _whitelistControl\n    , address _withdrawControl\n    , address _tokenAssignmentControl\n    , address _reserves\n    ) public\n    {\n        stateControl = _stateControl;\n        whitelistControl = _whitelistControl;\n        withdrawControl = _withdrawControl;\n        tokenAssignmentControl = _tokenAssignmentControl;\n        moveToState(States.Initial);\n        endTimestamp = 0;\n        ETH_CLEAR = 0;\n        totalSupply = maxTotalSupply;\n        soldTokens = 0;\n        reserves = _reserves;\n        balances[reserves] = totalSupply;\n        Mint(reserves, totalSupply);\n        Transfer(0x0, reserves, totalSupply);\n    }\n\n    event Whitelisted(address addr);\n\n    event StateTransition(States oldState, States newState);\n\n    modifier onlyWhitelist() {\n        require(msg.sender == whitelistControl);\n        _;\n    }\n\n    modifier onlyStateControl() {\n        require(msg.sender == stateControl);\n        _;\n    }\n\n    modifier onlyTokenAssignmentControl() {\n        require(msg.sender == tokenAssignmentControl);\n        _;\n    }\n\n    modifier onlyWithdraw() {\n        require(msg.sender == withdrawControl);\n        _;\n    }\n\n    modifier requireState(States _requiredState) {\n        require(state == _requiredState);\n        _;\n    }\n\n    /**\n    BEGIN ICO functions\n    */\n\n    //this is the main funding function, it updates the balances of tokens during the ICO.\n    //no particular incentive schemes have been implemented here\n    //it is only accessible during the \"ICO\" phase.\n    function() payable\n    public\n    requireState(States.Ico)\n    {\n        require(whitelist[msg.sender] == true);\n\n        require(block.timestamp < endTimestamp);\n        require(block.number >= startAcceptingFundsBlock);\n\n        uint256 soldToTuserWithBonus = calcBonus(msg.value);\n\n        issueTokensToUser(msg.sender, soldToTuserWithBonus);\n        ethPossibleRefunds[msg.sender] = ethPossibleRefunds[msg.sender].add(msg.value);\n    }\n\n    function issueTokensToUser(address beneficiary, uint256 amount)\n    internal\n    {\n        uint256 soldTokensAfterInvestment = soldTokens.add(amount);\n        require(soldTokensAfterInvestment <= maxTotalSupply.mul(percentForSale).div(100));\n\n        balances[beneficiary] = balances[beneficiary].add(amount);\n        balances[reserves] = balances[reserves].sub(amount);\n        soldTokens = soldTokensAfterInvestment;\n        Transfer(reserves, beneficiary, amount);\n    }\n\n    function calcBonus(uint256 weiAmount)\n    constant\n    public\n    returns (uint256 resultingTokens)\n    {\n        uint256 basisTokens = weiAmount.mul(ETH_CLEAR);\n        //percentages are integer numbers as per mill (promille) so we can accurately calculate 0.5% = 5. 100% = 1000\n        uint256 perMillBonus = Bonus.getBonusFactor(basisTokens, now);\n        //100% + bonus % times original amount divided by 100%.\n        return basisTokens.mul(per_mill + perMillBonus).div(per_mill);\n    }\n\n    uint256 constant per_mill = 1000;\n\n\n    function moveToState(States _newState)\n    internal\n    {\n        StateTransition(state, _newState);\n        state = _newState;\n    }\n    // ICO contract configuration function\n    // new_ETH_NZD is the new rate of ETH in NZD (from which to derive tokens per ETH)\n    // newTimestamp is the number of seconds since 1970-01-01 00:00:00 GMT at which the ICO must stop. It must be set in the future.\n    function updateEthICOVariables(uint256 _new_ETH_NZD, uint256 _newEndTimestamp)\n    public\n    onlyStateControl\n    {\n        require(state == States.Initial || state == States.ValuationSet);\n        require(_new_ETH_NZD > 0);\n        require(block.timestamp < _newEndTimestamp);\n        endTimestamp = _newEndTimestamp;\n        // initial conversion rate of ETH_CLEAR set now, this is used during the Ico phase.\n        ETH_CLEAR = _new_ETH_NZD.mul(NZD_CLEAR);\n        // check pointMultiplier\n        moveToState(States.ValuationSet);\n    }\n\n    function updateETHNZD(uint256 _new_ETH_NZD)\n    public\n    onlyTokenAssignmentControl\n    requireState(States.Ico)\n    {\n        require(_new_ETH_NZD > 0);\n        ETH_CLEAR = _new_ETH_NZD.mul(NZD_CLEAR);\n    }\n\n    function startICO()\n    public\n    onlyStateControl\n    requireState(States.ValuationSet)\n    {\n        require(block.timestamp < endTimestamp);\n        startAcceptingFundsBlock = block.number;\n        moveToState(States.Ico);\n    }\n\n    function addPresaleAmount(address beneficiary, uint256 amount)\n    public\n    onlyTokenAssignmentControl\n    {\n        require(state == States.ValuationSet || state == States.Ico);\n        issueTokensToUser(beneficiary, amount);\n    }\n\n\n    function endICO()\n    public\n    onlyStateControl\n    requireState(States.Ico)\n    {\n        finishMinting();\n        moveToState(States.Operational);\n    }\n\n    function anyoneEndICO()\n    public\n    requireState(States.Ico)\n    {\n        require(block.timestamp > endTimestamp);\n        finishMinting();\n        moveToState(States.Operational);\n    }\n\n    function finishMinting()\n    internal\n    {\n        mintingFinished = true;\n        MintFinished();\n    }\n\n    function addToWhitelist(address _whitelisted)\n    public\n    onlyWhitelist\n        //    requireState(States.Ico)\n    {\n        whitelist[_whitelisted] = true;\n        Whitelisted(_whitelisted);\n    }\n\n\n    //emergency pause for the ICO\n    function pause()\n    public\n    onlyStateControl\n    requireState(States.Ico)\n    {\n        moveToState(States.Paused);\n    }\n\n    //in case we want to completely abort\n    function abort()\n    public\n    onlyStateControl\n    requireState(States.Paused)\n    {\n        moveToState(States.Underfunded);\n    }\n\n    //un-pause\n    function resumeICO()\n    public\n    onlyStateControl\n    requireState(States.Paused)\n    {\n        moveToState(States.Ico);\n    }\n\n    //in case of a failed/aborted ICO every investor can get back their money\n    function requestRefund()\n    public\n    requireState(States.Underfunded)\n    {\n        require(ethPossibleRefunds[msg.sender] > 0);\n        //there is no need for updateAccount(msg.sender) since the token never became active.\n        uint256 payout = ethPossibleRefunds[msg.sender];\n        //reverse calculate the amount to pay out\n        ethPossibleRefunds[msg.sender] = 0;\n        msg.sender.transfer(payout);\n    }\n\n    //after the ico has run its course, the withdraw account can drain funds bit-by-bit as needed.\n    function requestPayout(uint _amount)\n    public\n    onlyWithdraw //very important!\n    requireState(States.Operational)\n    {\n        msg.sender.transfer(_amount);\n    }\n\n    //if this contract gets a balance in some other ERC20 contract - or even iself - then we can rescue it.\n    function rescueToken(ERC20Basic _foreignToken, address _to)\n    public\n    onlyTokenAssignmentControl\n    requireState(States.Operational)\n    {\n        _foreignToken.transfer(_to, _foreignToken.balanceOf(this));\n    }\n    /**\n    END ICO functions\n    */\n\n    /**\n    BEGIN ERC20 functions\n    */\n    function transfer(address _to, uint256 _value)\n    public\n    requireState(States.Operational)\n    returns (bool success) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)\n    public\n    requireState(States.Operational)\n    returns (bool success) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function balanceOf(address _account)\n    public\n    constant\n    returns (uint256 balance) {\n        return balances[_account];\n    }\n\n    /**\n    END ERC20 functions\n    */\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"stateControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calcBonus\",\"outputs\":[{\"name\":\"resultingTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"anyoneEndICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_ETH_NZD\",\"type\":\"uint256\"},{\"name\":\"_newEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateEthICOVariables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foreignToken\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserves\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestPayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startAcceptingFundsBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_CLEAR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NZD_CLEAR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAssignmentControl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addPresaleAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelisted\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_ETH_NZD\",\"type\":\"uint256\"}],\"name\":\"updateETHNZD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethPossibleRefunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_stateControl\",\"type\":\"address\"},{\"name\":\"_whitelistControl\",\"type\":\"address\"},{\"name\":\"_withdrawControl\",\"type\":\"address\"},{\"name\":\"_tokenAssignmentControl\",\"type\":\"address\"},{\"name\":\"_reserves\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldState\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"newState\",\"type\":\"uint8\"}],\"name\":\"StateTransition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]",
  "bytecode": "6060604052600e805460ff19169055341561001957600080fd5b60405160a08062001c6b833981016040528080519190602001805191906020018051919060200180519190602001805160078054600160a060020a03808a16600160a060020a0319928316179092556008805489841690831617905560098054888416908316179055600a80549287169290911691909117905591506100ae9050600064010000000061166d61018882021704565b6000600c819055600d8190556c014adf4b7320334b9000000000808255600482905560068054600160a060020a031916600160a060020a0385811691909117808355811684526001602052604093849020839055905416917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591905190815260200160405180910390a260065460008054600160a060020a03909216917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060405190815260200160405180910390a3505050505061023c565b600a547f3a779de46631dd65116ae538600f1bc3c338200c6aef638429b5de43301c28f79074010000000000000000000000000000000000000000900460ff1682604051808360058111156101d957fe5b60ff1681526020018260058111156101ed57fe5b60ff1681526020019250505060405180910390a1600a805482919060a060020a60ff0219167401000000000000000000000000000000000000000083600581111561023457fe5b021790555050565b611a1f806200024c6000396000f3006060604052600436106101df5763ffffffff60e060020a60003504166304b2bf9981146102a857806305d2035b146102d757806306fdde03146102fe578063095ea7b31461038857806309f3ad26146103aa57806318160ddd146103d257806323b872dd146103e55780632ab4d0521461040d578063313ce5671461042057806332b3c3231461044957806334bb3ee11461045e57806335a063b41461047757806341f1d4dd1461048a5780634707d0001461049d5780634f248409146104c25780635ed9ebfc146104d557806366188463146104e85780636aa9c82b1461050a57806370a082311461051d57806375172a8b1461053c5780637fa8c1581461054f5780638456cb59146105625780638f97e3a01461057557806390c79af91461058b57806395d89b411461059e5780639b19251a146105b15780639cbd7da5146105d0578063a1391297146105e3578063a85adeab146105f6578063a9059cbb14610609578063b21ed44e1461062b578063c19d93fb1461063e578063c6e9ce111461062b578063c8c2ed5414610675578063cc577f3814610688578063d5cef133146106aa578063d73dd623146106bd578063dd62ed3e146106df578063e43252d714610704578063f80e77d214610723578063f8b1fb1214610739575b6000600280600a5460a060020a900460ff1660058111156101fc57fe5b1461020657600080fd5b600160a060020a03331660009081526005602052604090205460ff16151560011461023057600080fd5b600c54421061023e57600080fd5b600b5443101561024d57600080fd5b61025634610758565b915061026233836107ac565b600160a060020a03331660009081526003602052604090205461028b903463ffffffff6108bd16565b600160a060020a0333166000908152600360205260409020555050005b34156102b357600080fd5b6102bb6108d3565b604051600160a060020a03909116815260200160405180910390f35b34156102e257600080fd5b6102ea6108e2565b604051901515815260200160405180910390f35b341561030957600080fd5b6103116108eb565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561034d578082015183820152602001610335565b50505050905090810190601f16801561037a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561039357600080fd5b6102ea600160a060020a0360043516602435610922565b34156103b557600080fd5b6103c0600435610758565b60405190815260200160405180910390f35b34156103dd57600080fd5b6103c061098e565b34156103f057600080fd5b6102ea600160a060020a0360043581169060243516604435610994565b341561041857600080fd5b6103c06109cf565b341561042b57600080fd5b6104336109e0565b60405160ff909116815260200160405180910390f35b341561045457600080fd5b61045c6109e5565b005b341561046957600080fd5b61045c600435602435610a2d565b341561048257600080fd5b61045c610ad1565b341561049557600080fd5b6102bb610b1b565b34156104a857600080fd5b61045c600160a060020a0360043581169060243516610b2a565b34156104cd57600080fd5b61045c610c4f565b34156104e057600080fd5b6103c0610c8f565b34156104f357600080fd5b6102ea600160a060020a0360043516602435610c95565b341561051557600080fd5b6102bb610d8f565b341561052857600080fd5b6103c0600160a060020a0360043516610d9e565b341561054757600080fd5b6102bb610dbd565b341561055a57600080fd5b61045c610dcc565b341561056d57600080fd5b61045c610e28565b341561058057600080fd5b61045c600435610e72565b341561059657600080fd5b6103c0610ee3565b34156105a957600080fd5b610311610ee9565b34156105bc57600080fd5b6102ea600160a060020a0360043516610f20565b34156105db57600080fd5b61045c610f35565b34156105ee57600080fd5b6103c0610f7f565b341561060157600080fd5b6103c0610f85565b341561061457600080fd5b6102ea600160a060020a0360043516602435610f8b565b341561063657600080fd5b6103c0610fbc565b341561064957600080fd5b610651610fc1565b6040518082600581111561066157fe5b60ff16815260200191505060405180910390f35b341561068057600080fd5b6102bb610fd1565b341561069357600080fd5b61045c600160a060020a0360043516602435610fe0565b34156106b557600080fd5b61045c61104d565b34156106c857600080fd5b6102ea600160a060020a03600435166024356110df565b34156106ea57600080fd5b6103c0600160a060020a0360043581169060243516611183565b341561070f57600080fd5b61045c600160a060020a03600435166111ae565b341561072e57600080fd5b61045c60043561122e565b341561074457600080fd5b6103c0600160a060020a0360043516611293565b6000806000610772600d54856112a590919063ffffffff16565b915061077e82426112c9565b90506107a46103e86107988482850163ffffffff6112a516565b9063ffffffff6114df16565b949350505050565b6004546000906107c2908363ffffffff6108bd16565b90506107e760646107986c014adf4b7320334b9000000000603263ffffffff6112a516565b8111156107f357600080fd5b600160a060020a03831660009081526001602052604090205461081c908363ffffffff6108bd16565b600160a060020a038085166000908152600160205260408082209390935560065490911681522054610854908363ffffffff6114f616565b60068054600160a060020a03908116600090815260016020526040908190209390935560048490559054858216929116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a3505050565b6000828201838110156108cc57fe5b9392505050565b600754600160a060020a031681565b600e5460ff1681565b60408051908101604052600b81527f434c45415220546f6b656e000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b6000600480600a5460a060020a900460ff1660058111156109b157fe5b146109bb57600080fd5b6109c6858585611508565b95945050505050565b6c014adf4b7320334b900000000081565b601281565b600280600a5460a060020a900460ff166005811115610a0057fe5b14610a0a57600080fd5b600c544211610a1857600080fd5b610a20611632565b610a2a600461166d565b50565b60075433600160a060020a03908116911614610a4857600080fd5b6000600a5460a060020a900460ff166005811115610a6257fe5b1480610a8557506001600a5460a060020a900460ff166005811115610a8357fe5b145b1515610a9057600080fd5b60008211610a9d57600080fd5b42819010610aaa57600080fd5b600c819055610ac082603263ffffffff6112a516565b600d55610acd600161166d565b5050565b60075433600160a060020a03908116911614610aec57600080fd5b600580600a5460a060020a900460ff166005811115610b0757fe5b14610b1157600080fd5b610a2a600361166d565b600854600160a060020a031681565b600a5433600160a060020a03908116911614610b4557600080fd5b600480600a5460a060020a900460ff166005811115610b6057fe5b14610b6a57600080fd5b600160a060020a03831663a9059cbb83826370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515610bc857600080fd5b6102c65a03f11515610bd957600080fd5b5050506040518051905060006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610c2f57600080fd5b6102c65a03f11515610c4057600080fd5b50505060405180515050505050565b60075433600160a060020a03908116911614610c6a57600080fd5b600280600a5460a060020a900460ff166005811115610c8557fe5b14610a1857600080fd5b60045481565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205480831115610cf257600160a060020a033381166000908152600260209081526040808320938816835292905290812055610d29565b610d02818463ffffffff6114f616565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600954600160a060020a031681565b600160a060020a0381166000908152600160205260409020545b919050565b600654600160a060020a031681565b60075433600160a060020a03908116911614610de757600080fd5b600180600a5460a060020a900460ff166005811115610e0257fe5b14610e0c57600080fd5b600c544210610e1a57600080fd5b43600b55610a2a600261166d565b60075433600160a060020a03908116911614610e4357600080fd5b600280600a5460a060020a900460ff166005811115610e5e57fe5b14610e6857600080fd5b610a2a600561166d565b60095433600160a060020a03908116911614610e8d57600080fd5b600480600a5460a060020a900460ff166005811115610ea857fe5b14610eb257600080fd5b600160a060020a03331682156108fc0283604051600060405180830381858888f193505050501515610acd57600080fd5b600b5481565b60408051908101604052600581527f434c454152000000000000000000000000000000000000000000000000000000602082015281565b60056020526000908152604090205460ff1681565b60075433600160a060020a03908116911614610f5057600080fd5b600580600a5460a060020a900460ff166005811115610f6b57fe5b14610f7557600080fd5b610a2a600261166d565b600d5481565b600c5481565b6000600480600a5460a060020a900460ff166005811115610fa857fe5b14610fb257600080fd5b6107a4848461170d565b603281565b600a5460a060020a900460ff1681565b600a54600160a060020a031681565b600a5433600160a060020a03908116911614610ffb57600080fd5b6001600a5460a060020a900460ff16600581111561101557fe5b148061103857506002600a5460a060020a900460ff16600581111561103657fe5b145b151561104357600080fd5b610acd82826107ac565b6000600380600a5460a060020a900460ff16600581111561106a57fe5b1461107457600080fd5b600160a060020a0333166000908152600360205260408120541161109757600080fd5b600160a060020a033316600081815260036020526040808220805492905590935083156108fc0290849051600060405180830381858888f193505050501515610acd57600080fd5b600160a060020a033381166000908152600260209081526040808320938616835292905290812054611117908363ffffffff6108bd16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60085433600160a060020a039081169116146111c957600080fd5b600160a060020a03811660009081526005602052604090819020805460ff191660011790557faab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a5490829051600160a060020a03909116815260200160405180910390a150565b600a5433600160a060020a0390811691161461124957600080fd5b600280600a5460a060020a900460ff16600581111561126457fe5b1461126e57600080fd5b6000821161127b57600080fd5b61128c82603263ffffffff6112a516565b600d555050565b60036020526000908152604090205481565b60008282028315806112c157508284828115156112be57fe5b04145b15156108cc57fe5b60006112d3611975565b6112db6119a3565b600080600080600060a06040519081016040528060806040519081016040528061012c815260200161019081526020016101f481526020016102ee815250815260200160806040519081016040528060c8815260200161012c8152602001610190815260200161025881525081526020016080604051908101604052806096815260200160fa815260200161012c81526020016101f48152508152602001608060405190810160405280606481526020016096815260200160fa8152602001610190815250815260200160806040519081016040528060008152602001606481526020016096815260200161012c81525081525096506080604051908101604052806113ec6107e2600360186117e3565b81526020016114006107e2600460056117e3565b81526020016114136107e26005806117e3565b81526020016114276107e2600660056117e3565b90529550670de0b6b3a76400008a0494506004935060009250631dcd650085106114545760039250611478565b6305f5e10085106114685760029250611478565b63017d7840851061147857600192505b506004905060005b818110156114b05785816004811061149457fe5b60200201518910156114a8578093506114b0565b600101611480565b8684600581106114bc57fe5b602002015183600481106114cc57fe5b60200201519a9950505050505050505050565b60008082848115156114ed57fe5b04949350505050565b60008282111561150257fe5b50900390565b600080600160a060020a038416151561152057600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054611566908463ffffffff6114f616565b600160a060020a03808716600090815260016020526040808220939093559086168152205461159b908463ffffffff6108bd16565b600160a060020a0385166000908152600160205260409020556115c4818463ffffffff6114f616565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b600e805460ff191660011790557fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a1565b600a547f3a779de46631dd65116ae538600f1bc3c338200c6aef638429b5de43301c28f79060a060020a900460ff1682604051808360058111156116ad57fe5b60ff1681526020018260058111156116c157fe5b60ff1681526020019250505060405180910390a1600a805482919074ff0000000000000000000000000000000000000000191660a060020a83600581111561170557fe5b021790555050565b6000600160a060020a038316151561172457600080fd5b600160a060020a03331660009081526001602052604090205461174d908363ffffffff6114f616565b600160a060020a033381166000908152600160205260408082209390935590851681522054611782908363ffffffff6108bd16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b6000806117ee6119ca565b63ffffffff6301e1338061ffff6107b119890116021692909201916118146107b2611904565b6118218761ffff16611904565b601f835203620151800292909201916118398661191f565b1561184a57601d6020820152611852565b601c60208201525b601f60408201819052601e606083018190526080830182905260a0830181905260c0830182905260e0830182905261010083018190526101208301829052610140830152610160820152600191505b8460ff168261ffff1610156118e7578061ffff600019840116600c81106118c457fe5b602002015160ff16620151800262ffffff168301925081806001019250506118a1565b50506000199190910160ff16620151800262ffffff160192915050565b60001901600061019082046064830460048404030192915050565b6000600461ffff83160661ffff161561193a57506000610db8565b606461ffff83160661ffff161561195357506001610db8565b61019061ffff83160661ffff161561196d57506000610db8565b506001919050565b6102806040519081016040526005815b61198d6119a3565b8152602001906001900390816119855790505090565b60806040519081016040526004815b60008152602001906001900390816119b25790505090565b610180604051908101604052600c815b6000815260001990910190602001816119da57905050905600a165627a7a72305820843e51ff42d875b7a418603310fefd64d3ae268e1bbff7ccea3e52579e58d130002900000000000000000000000009848f88307e6e2adf95ebeced073d63802ece69000000000000000000000000be0ace1e742a5cc246d719bf20be908b2ed905e80000000000000000000000008b5ab35b50deb29d84dff4053bb013d1fa82fcfb00000000000000000000000071ab6571680f7745008b3adfb4081f7e20429e1600000000000000000000000002c4e5d881e22c094731ad3073ee8afe5dfb4163",
  "constructorArguments": "00000000000000000000000009848f88307e6e2adf95ebeced073d63802ece69000000000000000000000000be0ace1e742a5cc246d719bf20be908b2ed905e80000000000000000000000008b5ab35b50deb29d84dff4053bb013d1fa82fcfb00000000000000000000000071ab6571680f7745008b3adfb4081f7e20429e1600000000000000000000000002c4e5d881e22c094731ad3073ee8afe5dfb4163"
}