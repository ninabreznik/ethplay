{
  "address": "0xc88b58e72029ec8397aa57731268e4c5aec6fe5b",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "InbestTokenDistributor",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-29\n*/\n\npragma solidity ^0.4.18;\n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n// File: contracts/InbestToken.sol\n\n/**\n * @title InbestToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\ncontract InbestToken is StandardToken {\n\n  string public constant name = \"Inbest Token\";\n  string public constant symbol = \"IBST\";\n  uint8 public constant decimals = 18;\n\n  // TBD\n  uint256 public constant INITIAL_SUPPLY = 17656263110 * (10 ** uint256(decimals));\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  function InbestToken() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n  }\n\n}\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/InbestDistribution.sol\n\n/**\n * @title Inbest Token initial distribution\n *\n * @dev Distribute Investors' and Company's tokens\n */\ncontract InbestDistribution is Ownable {\n  using SafeMath for uint256;\n\n  // Token\n  InbestToken public IBST;\n\n  // Status of admins\n  mapping (address => bool) public admins;\n\n  // Number of decimal places for tokens\n  uint256 private constant DECIMALFACTOR = 10**uint256(18);\n\n  // Cliff period = 6 months\n  uint256 CLIFF = 180 days;  \n  // Vesting period = 12 months after cliff\n  uint256 VESTING = 365 days; \n\n  // Total of tokens\n  uint256 public constant INITIAL_SUPPLY   =    17656263110 * DECIMALFACTOR; // 14.000.000.000 IBST\n  // Total of available tokens\n  uint256 public AVAILABLE_TOTAL_SUPPLY    =    17656263110 * DECIMALFACTOR; // 14.000.000.000 IBST\n  // Total of available tokens for presale allocations\n  uint256 public AVAILABLE_PRESALE_SUPPLY  =    16656263110 * DECIMALFACTOR; // 500.000.000 IBST, 18 months vesting, 6 months cliff\n  // Total of available tokens for company allocation\n  uint256 public AVAILABLE_COMPANY_SUPPLY  =    1000000000 * DECIMALFACTOR; // 13.500.000.000 INST at token distribution event\n\n  // Allocation types\n  enum AllocationType { PRESALE, COMPANY}\n\n  // Amount of total tokens claimed\n  uint256 public grandTotalClaimed = 0;\n  // Time when InbestDistribution goes live\n  uint256 public startTime;\n\n  // The only wallet allowed for Company supply\n  address public companyWallet;\n\n  // Allocation with vesting and cliff information\n  struct Allocation {\n    uint8 allocationType;   // Type of allocation\n    uint256 endCliff;       // Tokens are locked until\n    uint256 endVesting;     // This is when the tokens are fully unvested\n    uint256 totalAllocated; // Total tokens allocated\n    uint256 amountClaimed;  // Total tokens claimed\n  }\n  mapping (address => Allocation) public allocations;\n\n  // Modifier to control who executes functions\n  modifier onlyOwnerOrAdmin() {\n    require(msg.sender == owner || admins[msg.sender]);\n    _;\n  }\n\n  // Event fired when a new allocation is made\n  event LogNewAllocation(address indexed _recipient, AllocationType indexed _fromSupply, uint256 _totalAllocated, uint256 _grandTotalAllocated);\n  // Event fired when IBST tokens are claimed\n  event LogIBSTClaimed(address indexed _recipient, uint8 indexed _fromSupply, uint256 _amountClaimed, uint256 _totalAllocated, uint256 _grandTotalClaimed);\n  // Event fired when admins are modified\n  event SetAdmin(address _caller, address _admin, bool _allowed);\n  // Event fired when refunding tokens mistakenly sent to contract\n  event RefundTokens(address _token, address _refund, uint256 _value);\n\n  /**\n    * @dev Constructor function - Set the inbest token address\n    * @param _startTime The time when InbestDistribution goes live\n    * @param _companyWallet The wallet to allocate Company tokens\n    */\n  function InbestDistribution(uint256 _startTime, address _companyWallet) public {\n    require(_companyWallet != address(0));\n    require(_startTime >= now);\n    require(AVAILABLE_TOTAL_SUPPLY == AVAILABLE_PRESALE_SUPPLY.add(AVAILABLE_COMPANY_SUPPLY));\n    startTime = _startTime;\n    companyWallet = _companyWallet;\n    IBST = new InbestToken();\n    require(AVAILABLE_TOTAL_SUPPLY == IBST.totalSupply()); //To verify that totalSupply is correct\n\n    // Allocate Company Supply\n    uint256 tokensToAllocate = AVAILABLE_COMPANY_SUPPLY;\n    AVAILABLE_COMPANY_SUPPLY = 0;\n    allocations[companyWallet] = Allocation(uint8(AllocationType.COMPANY), 0, 0, tokensToAllocate, 0);\n    AVAILABLE_TOTAL_SUPPLY = AVAILABLE_TOTAL_SUPPLY.sub(tokensToAllocate);\n    LogNewAllocation(companyWallet, AllocationType.COMPANY, tokensToAllocate, grandTotalAllocated());\n  }\n\n  /**\n    * @dev Allow the owner or admins of the contract to assign a new allocation\n    * @param _recipient The recipient of the allocation\n    * @param _totalAllocated The total amount of IBST tokens available to the receipient (after vesting and cliff)\n    */\n  function setAllocation (address _recipient, uint256 _totalAllocated) public onlyOwnerOrAdmin {\n    require(_recipient != address(0));\n    require(startTime > now); //Allocations are allowed only before starTime\n    require(AVAILABLE_PRESALE_SUPPLY >= _totalAllocated); //Current allocation must be less than remaining presale supply\n    require(allocations[_recipient].totalAllocated == 0 && _totalAllocated > 0); // Must be the first and only allocation for this recipient\n    require(_recipient != companyWallet); // Receipient of presale allocation can't be company wallet\n\n    // Allocate\n    AVAILABLE_PRESALE_SUPPLY = AVAILABLE_PRESALE_SUPPLY.sub(_totalAllocated);\n    allocations[_recipient] = Allocation(uint8(AllocationType.PRESALE), startTime.add(CLIFF), startTime.add(CLIFF).add(VESTING), _totalAllocated, 0);\n    AVAILABLE_TOTAL_SUPPLY = AVAILABLE_TOTAL_SUPPLY.sub(_totalAllocated);\n    LogNewAllocation(_recipient, AllocationType.PRESALE, _totalAllocated, grandTotalAllocated());\n  }\n\n  /**\n   * @dev Transfer a recipients available allocation to their address\n   * @param _recipient The address to withdraw tokens for\n   */\n function transferTokens (address _recipient) public {\n   require(_recipient != address(0));\n   require(now >= startTime); //Tokens can't be transfered until start date\n   require(_recipient != companyWallet); // Tokens allocated to COMPANY can't be withdrawn.\n   require(now >= allocations[_recipient].endCliff); // Cliff period must be ended\n   // Receipient can't claim more IBST tokens than allocated\n   require(allocations[_recipient].amountClaimed < allocations[_recipient].totalAllocated);\n\n   uint256 newAmountClaimed;\n   if (allocations[_recipient].endVesting > now) {\n     // Transfer available amount based on vesting schedule and allocation\n     newAmountClaimed = allocations[_recipient].totalAllocated.mul(now.sub(allocations[_recipient].endCliff)).div(allocations[_recipient].endVesting.sub(allocations[_recipient].endCliff));\n   } else {\n     // Transfer total allocated (minus previously claimed tokens)\n     newAmountClaimed = allocations[_recipient].totalAllocated;\n   }\n\n   //Transfer\n   uint256 tokensToTransfer = newAmountClaimed.sub(allocations[_recipient].amountClaimed);\n   allocations[_recipient].amountClaimed = newAmountClaimed;\n   require(IBST.transfer(_recipient, tokensToTransfer));\n   grandTotalClaimed = grandTotalClaimed.add(tokensToTransfer);\n   LogIBSTClaimed(_recipient, allocations[_recipient].allocationType, tokensToTransfer, newAmountClaimed, grandTotalClaimed);\n }\n\n /**\n  * @dev Transfer IBST tokens from Company allocation to reicipient address - Only owner and admins can execute\n  * @param _recipient The address to transfer tokens for\n  * @param _tokensToTransfer The amount of IBST tokens to transfer\n  */\n function manualContribution(address _recipient, uint256 _tokensToTransfer) public onlyOwnerOrAdmin {\n   require(_recipient != address(0));\n   require(_recipient != companyWallet); // Company can't withdraw tokens for itself\n   require(_tokensToTransfer > 0); // The amount must be valid\n   require(now >= startTime); // Tokens cant't be transfered until start date\n   //Company can't trasnfer more tokens than allocated\n   require(allocations[companyWallet].amountClaimed.add(_tokensToTransfer) <= allocations[companyWallet].totalAllocated);\n\n   //Transfer\n   allocations[companyWallet].amountClaimed = allocations[companyWallet].amountClaimed.add(_tokensToTransfer);\n   require(IBST.transfer(_recipient, _tokensToTransfer));\n   grandTotalClaimed = grandTotalClaimed.add(_tokensToTransfer);\n   LogIBSTClaimed(_recipient, uint8(AllocationType.COMPANY), _tokensToTransfer, allocations[companyWallet].amountClaimed, grandTotalClaimed);\n }\n\n /**\n  * @dev Returns remaining Company allocation\n  * @return Returns remaining Company allocation\n  */\n function companyRemainingAllocation() public view returns (uint256) {\n   return allocations[companyWallet].totalAllocated.sub(allocations[companyWallet].amountClaimed);\n }\n\n /**\n  * @dev Returns the amount of IBST allocated\n  * @return Returns the amount of IBST allocated\n  */\n  function grandTotalAllocated() public view returns (uint256) {\n    return INITIAL_SUPPLY.sub(AVAILABLE_TOTAL_SUPPLY);\n  }\n\n  /**\n   * @dev Admin management\n   * @param _admin Address of the admin to modify\n   * @param _allowed Status of the admin\n   */\n  function setAdmin(address _admin, bool _allowed) public onlyOwner {\n    require(_admin != address(0));\n    admins[_admin] = _allowed;\n     SetAdmin(msg.sender,_admin,_allowed);\n  }\n\n  function refundTokens(address _token, address _refund, uint256 _value) public onlyOwner {\n    require(_refund != address(0));\n    require(_token != address(0));\n    require(_token != address(IBST));\n    ERC20 token = ERC20(_token);\n    require(token.transfer(_refund, _value));\n    RefundTokens(_token, _refund, _value);\n  }\n}\n\n// File: contracts/InbestTokenDistributor.sol\n\ncontract InbestTokenDistributor  is Ownable {\n  InbestDistribution public inbestDistribution;\n  address[] public walletsToDistribute;\n  mapping (address => address) public walletsToDistributeMapp;\n  mapping (address => bool) public admins;\n\n  /**\n   * @dev Constructor recibe the inbestDistribution address contract.\n   */\n  function InbestTokenDistributor (InbestDistribution _inbestDistribution) public {\n    require(_inbestDistribution != address(0));\n    inbestDistribution = _inbestDistribution;\n  }\n  /**\n   * For each wallet on walletsToDistribute call to transferTokens over the inbestDistribution contract.\n   */\n  function distributeTokens() public{\n    require(walletsToDistribute.length > 0);\n    uint arrayLength = walletsToDistribute.length;\n    for (uint i=0; i < arrayLength; i++) {\n      inbestDistribution.transferTokens(walletsToDistribute[i]);\n    }\n  }\n\n  /**\n   * For each wallet on walletsToDistribute call to transferTokens over the inbestDistribution contract.\n   */\n  function distributeTokensToWallets(address[] _addresses) public onlyOwner{\n    require(_addresses.length > 0);\n    uint arrayLength = _addresses.length;\n    for (uint i=0; i < arrayLength; i++) {\n      inbestDistribution.transferTokens(_addresses[i]);\n    }\n  }\n\n  /**\n   * Add wallet to distribute\n   * @param _newAddress address [description]\n   */\n  function addWallet(address _newAddress) public onlyOwner{\n    require(_newAddress != address(0));\n    require(walletsToDistributeMapp[_newAddress] == address(0));\n    walletsToDistribute.push(_newAddress);\n    walletsToDistributeMapp[_newAddress] = _newAddress;\n  }\n\n  // set the addresses in store\n  function addWallets(address[] _addresses) public onlyOwner{\n      for(uint i = 0; i < _addresses.length; i++){\n        addWallet(_addresses[i]);\n      }\n  }\n  /**\n   * Remove wallet to distribute\n   * @param  _removeAddress Address to be removed.\n   */\n  function removeWallet(address  _removeAddress) public onlyOwner {\n    for (uint i = 0; i < walletsToDistribute.length; i++){\n      if (_removeAddress == walletsToDistribute[i]) {\n        walletsToDistribute[i] = walletsToDistribute[walletsToDistribute.length-1];\n        walletsToDistribute.length--;\n        delete walletsToDistributeMapp[_removeAddress];\n      }\n    }\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051602080610811833981016040525160008054600160a060020a03191633179055600160a060020a038116151561004957600080fd5b60018054600160a060020a031916600160a060020a0392909216919091179055610799806100786000396000f3006080604052600436106100955763ffffffff60e060020a600035041663156a657b811461009a5780632ad635b4146100d7578063429b62e5146100ef5780634ad9b1c3146101245780634dfe13e71461017b57806378c6f83f146101d05780638da5cb5b146101e55780639ab1b484146101fa578063a75fe8e11461020f578063efeb5f1f14610230578063f2fde38b14610251575b600080fd5b3480156100a657600080fd5b506100bb600160a060020a0360043516610272565b60408051600160a060020a039092168252519081900360200190f35b3480156100e357600080fd5b506100bb60043561028d565b3480156100fb57600080fd5b50610110600160a060020a03600435166102b5565b604080519115158252519081900360200190f35b34801561013057600080fd5b5060408051602060048035808201358381028086018501909652808552610179953695939460249493850192918291850190849080828437509497506102ca9650505050505050565b005b34801561018757600080fd5b50604080516020600480358082013583810280860185019096528085526101799536959394602494938501929182918501908490808284375094975061031b9650505050505050565b3480156101dc57600080fd5b506100bb6103f3565b3480156101f157600080fd5b506100bb610402565b34801561020657600080fd5b50610179610411565b34801561021b57600080fd5b50610179600160a060020a03600435166104c7565b34801561023c57600080fd5b50610179600160a060020a03600435166105d8565b34801561025d57600080fd5b50610179600160a060020a0360043516610699565b600360205260009081526040902054600160a060020a031681565b600280548290811061029b57fe5b600091825260209091200154600160a060020a0316905081565b60046020526000908152604090205460ff1681565b60008054600160a060020a031633146102e257600080fd5b5060005b81518110156103175761030f828281518110151561030057fe5b906020019060200201516105d8565b6001016102e6565b5050565b600080548190600160a060020a0316331461033557600080fd5b825160001061034357600080fd5b5050805160005b818110156103ee576001548351600160a060020a0390911690630c89a0df9085908490811061037557fe5b906020019060200201516040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b1580156103ca57600080fd5b505af11580156103de573d6000803e3d6000fd5b50506001909201915061034a9050565b505050565b600154600160a060020a031681565b600054600160a060020a031681565b6002546000908190811061042457600080fd5b505060025460005b818110156103175760015460028054600160a060020a0390921691630c89a0df91908490811061045857fe5b60009182526020822001546040805160e060020a63ffffffff8616028152600160a060020a039092166004830152516024808301939282900301818387803b1580156104a357600080fd5b505af11580156104b7573d6000803e3d6000fd5b50506001909201915061042c9050565b60008054600160a060020a031633146104df57600080fd5b5060005b6002548110156103175760028054829081106104fb57fe5b600091825260209091200154600160a060020a03838116911614156105d05760028054600019810190811061052c57fe5b60009182526020909120015460028054600160a060020a03909216918390811061055257fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055600280549061059b90600019830161072d565b50600160a060020a0382166000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b6001016104e3565b600054600160a060020a031633146105ef57600080fd5b600160a060020a038116151561060457600080fd5b600160a060020a03818116600090815260036020526040902054161561062957600080fd5b60028054600181019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff19928316811790915560008181526003602052604090208054909216179055565b600054600160a060020a031633146106b057600080fd5b600160a060020a03811615156106c557600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b8154818355818111156103ee576000838152602090206103ee91810190830161076a91905b808211156107665760008155600101610752565b5090565b905600a165627a7a7230582025f2bd5bd119e0c83ef17578d4e2d112db89a517aee6ba8363459beda8c04f1e0029000000000000000000000000fe0a38f4e1a8833f5db7830bf62d93e80568e7eb",
  "constructorArguments": "000000000000000000000000fe0a38f4e1a8833f5db7830bf62d93e80568e7eb"
}