{
  "address": "0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Ethfinex: Old Contract 2",
  "contractName": "TrustlessOTC",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-03\n*/\n\npragma solidity ^0.5.5;\n\n/*\n    This contract is open source under the MIT license\n    Ethfinex Inc - 2019\n\n/*\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     * @notice Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ninterface Token {\n\n    function transfer(address _to, uint _value) external returns (bool);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool);\n    function approve(address _spender, uint _value) external returns (bool);\n    function balanceOf(address _owner) external view returns (uint);\n    function allowance(address _owner, address _spender) external view returns (uint);\n\n    event Transfer(address indexed _from, address indexed _to, uint _value); // solhint-disable-line\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface TokenNoReturn {\n\n    function transfer(address _to, uint _value) external;\n    function transferFrom(address _from, address _to, uint _value) external;\n    function balanceOf(address _owner) external view returns (uint);\n}\n\ncontract TrustlessOTC is Ownable {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) public balanceTracker;\n    mapping(address => uint256) public feeTracker;\n    mapping(address => uint[]) public tradeTracker;\n\n    mapping(address => bool) public noERC20Return;\n\n    event OfferCreated(uint indexed tradeID);\n    event OfferCancelled(uint indexed tradeID);\n    event OfferTaken(uint indexed tradeID);\n\n    uint256 public feeBasisPoints;\n\n    constructor (uint256 _feeBasisPoints) public {\n      feeBasisPoints = _feeBasisPoints;\n      noERC20Return[0xdAC17F958D2ee523a2206206994597C13D831ec7] = true;\n      noERC20Return[0xB97048628DB6B661D4C2aA833e95Dbe1A905B280] = true;\n      noERC20Return[0x4470BB87d77b963A013DB939BE332f927f2b992e] = true;\n      noERC20Return[0xd26114cd6EE289AccF82350c8d8487fedB8A0C07] = true;\n      noERC20Return[0xB8c77482e45F1F44dE1745F52C74426C631bDD52] = true;\n      noERC20Return[0xF433089366899D83a9f26A773D59ec7eCF30355e] = true;\n      noERC20Return[0xe3818504c1B32bF1557b16C238B2E01Fd3149C17] = true;\n      noERC20Return[0x81c9151de0C8bafCd325a57E3dB5a5dF1CEBf79c] = true;\n    }\n\n    struct TradeOffer {\n        address tokenFrom;\n        address tokenTo;\n        uint256 amountFrom;\n        uint256 amountTo;\n        address payable creator;\n        address optionalTaker;\n        bool active;\n        bool completed;\n        uint tradeID;\n    }\n\n    TradeOffer[] public offers;\n\n    function initiateTrade(\n        address _tokenFrom,\n        address _tokenTo,\n        uint256 _amountFrom,\n        uint256 _amountTo,\n        address _optionalTaker\n        ) public payable returns (uint newTradeID) {\n            if (_tokenFrom == address(0)) {\n                require(msg.value == _amountFrom);\n            } else {\n                require(msg.value == 0);\n                if(noERC20Return[_tokenFrom]) {\n                  TokenNoReturn(_tokenFrom).transferFrom(msg.sender, address(this), _amountFrom);\n                } else {\n                  Token(_tokenFrom).transferFrom(msg.sender, address(this), _amountFrom);\n                }\n            }\n            newTradeID = offers.length;\n            offers.length++;\n            TradeOffer storage o = offers[newTradeID];\n            balanceTracker[_tokenFrom] = balanceTracker[_tokenFrom].add(_amountFrom);\n            o.tokenFrom = _tokenFrom;\n            o.tokenTo = _tokenTo;\n            o.amountFrom = _amountFrom;\n            o.amountTo = _amountTo;\n            o.creator = msg.sender;\n            o.optionalTaker = _optionalTaker;\n            o.active = true;\n            o.tradeID = newTradeID;\n            tradeTracker[msg.sender].push(newTradeID);\n            emit OfferCreated(newTradeID);\n    }\n\n    function cancelTrade(uint tradeID) public returns (bool) {\n        TradeOffer storage o = offers[tradeID];\n        require(msg.sender == o.creator);\n        if (o.tokenFrom == address(0)) {\n          msg.sender.transfer(o.amountFrom);\n        } else {\n          if(noERC20Return[o.tokenFrom]) {\n            TokenNoReturn(o.tokenFrom).transfer(o.creator, o.amountFrom);\n          } else {\n            Token(o.tokenFrom).transfer(o.creator, o.amountFrom);\n          }\n        }\n        balanceTracker[o.tokenFrom] -= o.amountFrom;\n        o.active = false;\n        emit OfferCancelled(tradeID);\n        return true;\n    }\n\n    function take(uint tradeID) public payable returns (bool) {\n        TradeOffer storage o = offers[tradeID];\n        require(o.optionalTaker == msg.sender || o.optionalTaker == address(0));\n        require(o.active == true);\n        o.active = false;\n        balanceTracker[o.tokenFrom] = balanceTracker[o.tokenFrom].sub(o.amountFrom);\n        uint256 fee = o.amountFrom.mul(feeBasisPoints).div(10000);\n        feeTracker[o.tokenFrom] = feeTracker[o.tokenFrom].add(fee);\n        tradeTracker[msg.sender].push(tradeID);\n\n        if (o.tokenFrom == address(0)) {\n            msg.sender.transfer(o.amountFrom.sub(fee));\n        } else {\n          if(noERC20Return[o.tokenFrom]) {\n            TokenNoReturn(o.tokenFrom).transfer(msg.sender, o.amountFrom.sub(fee));\n          } else {\n            Token(o.tokenFrom).transfer(msg.sender, o.amountFrom.sub(fee));\n          }\n        }\n\n        if (o.tokenTo == address(0)) {\n            require(msg.value == o.amountTo);\n            o.creator.transfer(msg.value);\n        } else {\n            require(msg.value == 0);\n            if(noERC20Return[o.tokenTo]) {\n              TokenNoReturn(o.tokenTo).transferFrom(msg.sender, o.creator, o.amountTo);\n            } else {\n              Token(o.tokenTo).transferFrom(msg.sender, o.creator, o.amountTo);\n            }\n        }\n        o.completed = true;\n        emit OfferTaken(tradeID);\n        return true;\n    }\n\n    function getOfferDetails(uint tradeID) external view returns (\n        address _tokenFrom,\n        address _tokenTo,\n        uint256 _amountFrom,\n        uint256 _amountTo,\n        address _creator,\n        uint256 _fee,\n        bool _active,\n        bool _completed\n    ) {\n        TradeOffer storage o = offers[tradeID];\n        _tokenFrom = o.tokenFrom;\n        _tokenTo = o.tokenTo;\n        _amountFrom = o.amountFrom;\n        _amountTo = o.amountTo;\n        _creator = o.creator;\n        _fee = o.amountFrom.mul(feeBasisPoints).div(10000);\n        _active = o.active;\n        _completed = o.completed;\n    }\n\n    function getUserTrades(address user) external view returns (uint[] memory){\n      return tradeTracker[user];\n    }\n\n    function reclaimToken(Token _token) external onlyOwner {\n        uint256 balance = _token.balanceOf(address(this));\n        uint256 excess = balance.sub(balanceTracker[address(_token)]);\n        require(excess > 0);\n        if (address(_token) == address(0)) {\n            msg.sender.transfer(excess);\n        } else {\n            _token.transfer(owner(), excess);\n        }\n    }\n\n    function reclaimTokenNoReturn(TokenNoReturn _token) external onlyOwner {\n        uint256 balance = _token.balanceOf(address(this));\n        uint256 excess = balance.sub(balanceTracker[address(_token)]);\n        require(excess > 0);\n        if (address(_token) == address(0)) {\n            msg.sender.transfer(excess);\n        } else {\n            _token.transfer(owner(), excess);\n        }\n    }\n\n    function claimFees(Token _token) external onlyOwner {\n        uint256 feesToClaim = feeTracker[address(_token)];\n        feeTracker[address(_token)] = 0;\n        require(feesToClaim > 0);\n        if (address(_token) == address(0)) {\n            msg.sender.transfer(feesToClaim);\n        } else {\n            _token.transfer(owner(), feesToClaim);\n        }\n    }\n\n}",
  "abi": "[{\"constant\":false,\"inputs\":[{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"cancelTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"name\":\"_tokenTo\",\"type\":\"address\"},{\"name\":\"_amountFrom\",\"type\":\"uint256\"},{\"name\":\"_amountTo\",\"type\":\"uint256\"},{\"name\":\"_optionalTaker\",\"type\":\"address\"}],\"name\":\"initiateTrade\",\"outputs\":[{\"name\":\"newTradeID\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"noERC20Return\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradeTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"getOfferDetails\",\"outputs\":[{\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"name\":\"_tokenTo\",\"type\":\"address\"},{\"name\":\"_amountFrom\",\"type\":\"uint256\"},{\"name\":\"_amountTo\",\"type\":\"uint256\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_active\",\"type\":\"bool\"},{\"name\":\"_completed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"take\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offers\",\"outputs\":[{\"name\":\"tokenFrom\",\"type\":\"address\"},{\"name\":\"tokenTo\",\"type\":\"address\"},{\"name\":\"amountFrom\",\"type\":\"uint256\"},{\"name\":\"amountTo\",\"type\":\"uint256\"},{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"optionalTaker\",\"type\":\"address\"},{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"completed\",\"type\":\"bool\"},{\"name\":\"tradeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTrades\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceTracker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeBasisPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimTokenNoReturn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeBasisPoints\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tradeID\",\"type\":\"uint256\"}],\"name\":\"OfferTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000000000000000000000000000000000000000000002"
}