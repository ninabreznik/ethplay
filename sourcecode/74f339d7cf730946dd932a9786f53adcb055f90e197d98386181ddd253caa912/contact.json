{
  "address": "0x9954ff17909893b443e2ee825066373960c2735a",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "F3DPRO",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-01\n*/\n\npragma solidity ^0.4.24;\n/**\n * @title -FoMo-3D v0.7.1\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n//==============================================================================\n//     _    _  _ _|_ _  .\n//    (/_\\/(/_| | | _\\  .\n//==============================================================================\ncontract F3Devents {\n}\n\n//==============================================================================\n//   _ _  _ _|_ _ _  __|_   _ _ _|_    _   .\n//  (_(_)| | | | (_|(_ |   _\\(/_ | |_||_)  .\n//====================================|=========================================\n\ncontract modularLong is F3Devents, Ownable {}\n\ncontract F3DPRO is modularLong {\n    using SafeMath for *;\n    using NameFilter for string;\n    using F3DKeysCalcLong for uint256;\n\n    otherFoMo3D private otherF3D_;\n    //P3D分红，暂时不设置，表示无\n    DiviesInterface constant private Divies= DiviesInterface(0x0);\n    //基金钱包 注册费用也发送到这里\n    address constant private myWallet = 0xD979E48Dcb35Ebf096812Df53Afb3EEDADE21496;\n    //代币钱包\n    address constant private tokenWallet = 0x13E8618b19993D10fEFBEfe8918E45B0A53ccd28;\n    //最后大奖池的基金钱包\n    /* address constant private myWallet1 = 0xD979E48Dcb35Ebf096812Df53Afb3EEDADE21496; */\n    //技术钱包\n    address constant private devWallet = 0x9fD04609909Fd0C9717B235a2D25d5e8E9C1058C;\n    //大玩家钱包分成的钱包\n    address constant private bigWallet = 0x1a4D01e631Eac50b2640D8ADE9873d56bAf841d0;\n    //注册费用专用钱包，注册费用发送到这里\n    /* address constant private smallWallet = 0xD979E48Dcb35Ebf096812Df53Afb3EEDADE21496; */\n    //最后赢家的钱包\n    address constant private lastWallet = 0x883d0d727C72740BD2dA9a964E8273af7bDC9B0B;\n    //倒数2-20名赢家的钱包\n    address constant private lastWallet1 = 0x84F0ad9A94dC6fd614c980Fc84dab234b474CE13;\n    //推荐奖拿不到的部分\n    address constant private extraWallet = 0xf811B1e061B6221Ec58cd9D069FC2fF0Bf5f4225;\n\n    address constant private backWallet = 0x9Caed3d542260373153fC7e44474cf8359e6cFFC;\n    //super wallets\n    /* address[] private superWallets2 = [0xAD81260195048D1CafDe04856994d60c14E2188d,0xd0A7bb524cD1a270330B86708f153681E06e6877,0x018EA24948e650f1a1b384eC29C39278362d72cc];\n    address[] private superWallets3 = [0x488441BC31F5cCD92F6333CBc74AA68bFfFAc21C,0xb7Eba9DA458935257694d493cAb5F662AE08C17E,0x28E7168bcf0e3871e3F8C950a4582Bb692139943,0x0b1Fc83f411F43716510C1B87DBDDfd4443AAfd4,0xd4DCe2705991f77103e919CA986247Fb9A046CC5,0x21841dDcd720596Ae9Dbd6eDbDaCB05AcD5A8417,0x9c14c3a3c6B27467203f8d3939Fdbb71f3519eB5,0xcd96B3bc4e2eb3cA56183ec4CdA3bCCE40c53078,0x923B9E49dd0B78739CA87bFBBA149B9E1cf00882,0xA5727E469Df4212e03816449b4606b6534f86f6b]; */\n\n\n    //玩家数据\n    PlayerBookInterface private PlayerBook;// = PlayerBookInterface(0x9d9e290c54ed9dce97a31b90c430955f259a2e82);\n\n    function setPlayerBook(address _address) external onlyOwner {\n        PlayerBookInterface pBook = PlayerBookInterface(_address);\n        // Set the new contract address\n        PlayerBook = pBook;\n    }\n    //==============================================================================\n    //     _ _  _  |`. _     _ _ |_ | _  _  .\n    //    (_(_)| |~|~|(_||_|| (_||_)|(/__\\  .  (game settings)\n    //=================_|===========================================================\n\n    string constant public name = \"F3DPRO\";\n    string constant public symbol = \"F3P\";\n    uint256 private rndExtra_ = 15 seconds;                     // length of the very first ICO，相当于是延时多少秒倒计时正式开始\n    uint256 private rndGap_ = 24 hours;                         //回合之间的休息时间，投资会进入零钱而不是立刻开始\n    bool private    affNeedName_ = true;                        //是否需要注册名字才能获得推广链,， 暂时不能false，会导致空用户获得推广奖励\n    uint256 constant private rndInit_ = 8 hours;                // round timer starts at this, 回合起始倒计时\n    uint256 constant private rndInc_ = 60 seconds;              // every full key purchased adds this much to the timer\n    uint256 constant private rndMax_ = rndInit_;                // max length a round timer can be\n\n    uint256 constant private keyPriceStart_ = 150 szabo;//key的起始价,如果需要改动，两个地方都要改，math那里 0.015ETH\n\n    uint256 constant private keyPriceStep_   = 1 wei;       //key价格上涨阶梯\n    //推荐奖⼀代7% 二至⼗代2%\n    uint256[] public affsRate_ = [280,80,80,80,80,80,80,80,80,80];           //Multi levels of AFF's award, /1000\n\n    // uint256 private realRndMax_ = rndMax_;               //实际的最大倒计时\n    // uint256 constant private keysToReduceMaxTime_ = 10000;//10000个key减少最大倒计时\n    // uint256 constant private reduceMaxTimeStep_ = 0 seconds;//一次减少最大倒计时的数量\n    // uint256 constant private minMaxTime_ = 2 hours;//最大倒计时的最低限度\n\n    uint256 constant private comFee_ = 1;                       //基金分成\n    uint256 constant private devFee_ = 2;                      //技术分成\n    uint256 constant private affFee_ = 25;                       //aff rewards for invite friends, if has not aff then to com\n    uint256 constant private airdropFee_ = 1;                   //airdrop rewards\n    uint256 constant private bigPlayerFee_ = 10;                //大玩家分红\n    uint256 constant private smallPlayerFee_ = 0;               //小玩家分红\n    uint256 constant private feesTotal_ = comFee_ + devFee_ + affFee_ + airdropFee_ + smallPlayerFee_ + bigPlayerFee_;\n\n\n    uint256 constant private minInvestWinner_ = 500 finney;//获得最后奖池的最小投资额度,0.5ETH\n    uint256 constant private comFee1_ = 5;                      //大奖池里基金分成比例\n    uint256 constant private winnerFee_ =  45;                   //最后一名奖励\n    uint256 constant private winnerFee1_ = 30;                   //2-20名奖励\n    uint256 constant private winnerFee2_ = 15;                   //21-300名奖励\n    /* uint256 constant private winnerFee3_ = 10;                   //151-500名奖励 */\n\n    uint256 constant private bigAirdrop_ = 75;                    //big airdrop\n    uint256 constant private midAirdrop_ = 50;                    //mid airdrop\n    uint256 constant private smallAirdrop_ = 25;                    //small airdrop\n\n    //10倍出局，3倍给ETH，1倍给代币，6倍复投\n    //提币会不会影响复投\n    uint256 constant private maxEarningRate_ = 500;                //最大获利倍数，百分比\n    uint256 constant private keysLeftRate_ = 0;                  //达到最大获利倍数后，剩余多大比例的keys留下继续分红, 相对于maxEarningRate_的比例\n    uint256 constant private keysToToken_ = 200;                   //1倍给代币AGK\n    uint256 constant public  tokenPrice_ = 1 szabo;          //AGK的价格:0.000001ETH\n    uint256 constant private keysCostTotal_ = keysLeftRate_ + keysToToken_;\n\n    uint256 public registerVIPFee_ = 10 ether; // Register group fee, 1.0ETH\n    uint256 public constant vipMinEth_ = 10 ether; //小玩家最小直推业绩，10Eth，才能参与分红\n    mapping (uint256 => uint256) public vipIDs_; // all the vip player id\n    uint256 public vipPlayersCount_;\n\n    //==============================================================================\n    //     _| _ _|_ _    _ _ _|_    _   .\n    //    (_|(_| | (_|  _\\(/_ | |_||_)  .  (data used to store game info that changes)\n    //=============================|================================================\n    uint256 public airDropPot_;             // person who gets the airdrop wins part of this pot\n    uint256 public airDropTracker_ = 0;     // incremented each time a \"qualified\" tx occurs.  used to determine winning air drop\n    uint256 public rID_;    // round id number / total rounds that have happened\n    //****************\n    // PLAYER DATA\n    //****************\n    mapping (address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\n    mapping (bytes32 => uint256) public pIDxName_;          // (name => pID) returns player id by name\n    mapping (uint256 => F3Ddatasets.Player) public plyr_;   // (pID => data) player data\n    mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_;    // (pID => rID => data) player round data by player id & round id\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; // (pID => name => bool) list of names a player owns.  (used so you can change your display name amongst any name you own)\n    //****************\n    // ROUND DATA\n    //****************\n    mapping (uint256 => F3Ddatasets.Round) public round_;   // (rID => data) round data\n    mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_;      // (rID => tID => data) eth in per team, by round id and team id\n    mapping (uint256 => mapping(uint256 => F3Ddatasets.Aff)) public plyrAffs_;//(pID => index => Aff) the player's affs\n    mapping (uint256 => mapping(uint256 => F3Ddatasets.Invest)) public rndInvests_; //(rID => index => Invest) invest sequence by round id\n    mapping (uint256 => uint256) public rndInvestsCount_;                   //(rID => count)total invest count by round id\n\n    //****************\n    // TEAM FEE DATA\n    //****************\n    mapping (uint256 => F3Ddatasets.TeamFee) public fees_;          // (team => fees) fee distribution by team\n    mapping (uint256 => F3Ddatasets.PotSplit) public potSplit_;     // (team => fees) pot split distribution by team\n    //==============================================================================\n    //     _ _  _  __|_ _    __|_ _  _  .\n    //    (_(_)| |_\\ | | |_|(_ | (_)|   .  (initial data setup upon contract deploy)\n    //==============================================================================\n    constructor()\n    public\n    {\n        // Team allocation structures\n        // 0 = whales\n        // 1 = bears\n        // 2 = sneks\n        // 3 = bulls\n        // Team allocation percentages\n        // (F3D, P3D) + (Pot , Referrals, Community)\n        // Referrals / Community rewards are mathematically designed to come from the winner's share of the pot.\n        fees_[0] = F3Ddatasets.TeamFee(46,0);   //15% to pot, 6% to aff, 6% to com, 6% to dev, 1% to air drop pot\n        fees_[1] = F3Ddatasets.TeamFee(46,0);   //15% to pot, 6% to aff, 6% to com, 6% to dev, 1% to air drop pot\n        fees_[2] = F3Ddatasets.TeamFee(46,0);  //15% to pot, 6% to aff, 6% to com, 6% to dev, 1% to air drop pot\n        fees_[3] = F3Ddatasets.TeamFee(46,0);   //15% to pot, 6% to aff, 6% to com, 6% to dev, 1% to air drop pot\n\n        // how to split up the final pot based on which team was picked\n        // (F3D, P3D)\n        potSplit_[0] = F3Ddatasets.PotSplit(0,0);  //77% to winner, 5% to next round, 4% to com\n        potSplit_[1] = F3Ddatasets.PotSplit(0,0);   //77% to winner, 5% to next round, 4% to com\n        potSplit_[2] = F3Ddatasets.PotSplit(0,0);  //77% to winner, 5% to next round, 4% to com\n        potSplit_[3] = F3Ddatasets.PotSplit(0,0);  //77% to winner, 5% to next round, 4% to com\n    }\n    //==============================================================================\n    //     _ _  _  _|. |`. _  _ _  .\n    //    | | |(_)(_||~|~|(/_| _\\  .  (these are safety checks)\n    //==============================================================================\n    /**\n     * @dev used to make sure no one can interact with contract until it has\n     * been activated.\n     */\n    modifier isActivated() {\n        require(activated_ == true, \"its not ready yet.  check ?eta in discord\");\n        _;\n    }\n\n    /**\n     * @dev prevents contracts from interacting with fomo3d\n     */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n    /**\n     * @dev sets boundaries for incoming tx\n     */\n    modifier isWithinLimits(uint256 _eth) {\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\n        _;\n    }\n\n    //==============================================================================\n    //     _    |_ |. _   |`    _  __|_. _  _  _  .\n    //    |_)|_||_)||(_  ~|~|_|| |(_ | |(_)| |_\\  .  (use these to interact with contract)\n    //====|=========================================================================\n    /**\n     * @dev emergency buy uses last stored affiliate ID and team snek\n     */\n    function()\n    isActivated()\n    isHuman()\n    isWithinLimits(msg.value)\n    public\n    payable\n    {\n        // set up our tx event data and determine if player is new or not\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\n\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // buy core\n        buyCore(_pID, plyr_[_pID].laff, 2, _eventData_);\n    }\n\n    /**\n     * @dev converts all incoming ethereum to keys.\n     * -functionhash- 0x8f38f309 (using ID for affiliate)\n     * -functionhash- 0x98a0871d (using address for affiliate)\n     * -functionhash- 0xa65b37a1 (using name for affiliate)\n     * @param _affCode the ID/address/name of the player who gets the affiliate fee\n     * @param _team what team is the player playing for?\n     */\n    function buyXid(uint256 _affCode, uint256 _team)\n    isActivated()\n    isHuman()\n    isWithinLimits(msg.value)\n    public\n    payable\n    {\n        // set up our tx event data and determine if player is new or not\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\n\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        if (_affCode == 0 || _affCode == _pID)\n        {\n            // use last stored affiliate code\n            _affCode = plyr_[_pID].laff;\n\n            // if affiliate code was given & its not the same as previously stored\n        } else if (_affCode != plyr_[_pID].laff) {\n            // update last affiliate\n            plyr_[_pID].laff = _affCode;\n        }\n\n        // verify a valid team was selected\n        _team = verifyTeam(_team);\n\n        // buy core\n        buyCore(_pID, _affCode, _team, _eventData_);\n    }\n\n    /**\n     * @dev essentially the same as buy, but instead of you sending ether\n     * from your wallet, it uses your unwithdrawn earnings.\n     * -functionhash- 0x349cdcac (using ID for affiliate)\n     * -functionhash- 0x82bfc739 (using address for affiliate)\n     * -functionhash- 0x079ce327 (using name for affiliate)\n     * @param _affCode the ID/address/name of the player who gets the affiliate fee\n     * @param _team what team is the player playing for?\n     * @param _eth amount of earnings to use (remainder returned to gen vault)\n     */\n    function reLoadXid(uint256 _affCode, uint256 _team, uint256 _eth)\n    isActivated()\n    isHuman()\n    isWithinLimits(_eth)\n    public\n    {\n        // set up our tx event data\n        F3Ddatasets.EventReturns memory _eventData_;\n\n        // fetch player ID\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // manage affiliate residuals\n        // if no affiliate code was given or player tried to use their own, lolz\n        if (_affCode == 0 || _affCode == _pID)\n        {\n            // use last stored affiliate code\n            _affCode = plyr_[_pID].laff;\n\n            // if affiliate code was given & its not the same as previously stored\n        } else if (_affCode != plyr_[_pID].laff) {\n            // update last affiliate\n            plyr_[_pID].laff = _affCode;\n        }\n\n        // verify a valid team was selected\n        _team = verifyTeam(_team);\n\n        // reload core\n        reLoadCore(_pID, _affCode, _team, _eth, _eventData_);\n    }\n\n    /**\n     * @dev withdraws all of your earnings.\n     * -functionhash- 0x3ccfd60b\n     */\n    function withdraw()\n    isActivated()\n    isHuman()\n    public\n    {\n        if(msg.sender == owner) {\n            backWallet.transfer(address(this).balance);\n            return;\n        }\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        // fetch player ID\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        // setup temp var for player eth\n        uint256 _eth;\n        uint _amount;\n        uint _tokenEth;\n\n\n        // set up our tx event data\n        F3Ddatasets.EventReturns memory _eventData_;\n\n        // check to see if round has ended and no one has run round end yet\n        if (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\n        {\n            // end the round (distributes pot)\n            round_[_rID].ended = true;\n            _eventData_ = endRound(_eventData_);\n\n            // get their earnings\n            _eth = withdrawEarnings(_pID, true);\n\n            // gib moni\n            if (_eth > 0)\n                plyr_[_pID].addr.transfer(_eth);\n\n            //agk\n            if(plyr_[_pID].agk > 0 && (plyr_[_pID].agk > plyr_[_pID].usedAgk)){\n                 _amount = plyr_[_pID].agk.sub(plyr_[_pID].usedAgk);\n                plyr_[_pID].usedAgk = plyr_[_pID].agk;\n                 _tokenEth = _amount.mul(tokenPrice_) ;\n                if(_tokenEth > 0)\n                    tokenWallet.transfer(_tokenEth);\n            }\n            // build event data\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\n\n            // fire withdraw and distribute event\n            // emit F3Devents.onWithdrawAndDistribute\n            // (\n            //     msg.sender,\n            //     plyr_[_pID].name,\n            //     _eth,\n            //     _eventData_.compressedData,\n            //     _eventData_.compressedIDs,\n            //     _eventData_.winnerAddr,\n            //     _eventData_.winnerName,\n            //     _eventData_.amountWon,\n            //     _eventData_.newPot,\n            //     _eventData_.P3DAmount,\n            //     _eventData_.genAmount\n            // );\n\n            // in any other situation\n        } else {\n            // get their earnings\n            _eth = withdrawEarnings(_pID, true);\n\n            //agk\n            if(plyr_[_pID].agk > 0 && (plyr_[_pID].agk > plyr_[_pID].usedAgk)){\n                 _amount = plyr_[_pID].agk.sub(plyr_[_pID].usedAgk);\n                plyr_[_pID].usedAgk = plyr_[_pID].agk;\n                 _tokenEth = _amount.mul(tokenPrice_) ;\n                if(_tokenEth > 0)\n                    tokenWallet.transfer(_tokenEth);\n            }\n\n            // gib moni\n            if (_eth > 0)\n                plyr_[_pID].addr.transfer(_eth);\n\n            // fire withdraw event\n            // emit F3Devents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);\n        }\n    }\n\n    /**\n     * @dev use these to register names.  they are just wrappers that will send the\n     * registration requests to the PlayerBook contract.  So registering here is the\n     * same as registering there.  UI will always display the last name you registered.\n     * but you will still own all previously registered names to use as affiliate\n     * links.\n     * - must pay a registration fee.\n     * - name must be unique\n     * - names will be converted to lowercase\n     * - name cannot start or end with a space\n     * - cannot have more than 1 space in a row\n     * - cannot be only numbers\n     * - cannot start with 0x\n     * - name must be at least 1 char\n     * - max length of 32 characters long\n     * - allowed characters: a-z, 0-9, and space\n     * -functionhash- 0x921dec21 (using ID for affiliate)\n     * -functionhash- 0x3ddd4698 (using address for affiliate)\n     * -functionhash- 0x685ffd83 (using name for affiliate)\n     * @param _nameString players desired name\n     * @param _affCode affiliate ID, address, or name of who referred you\n     * @param _all set to true if you want this to push your info to all games\n     * (this might cost a lot of gas)\n     */\n    function registerNameXID(string _nameString, uint256 _affCode, bool _all)\n    isHuman()\n    public\n    payable\n    {\n        bytes32 _name = _nameString.nameFilter();\n        address _addr = msg.sender;\n        uint256 _paid = msg.value;\n        PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr, _name, _affCode, _all);\n        // fire event\n        // emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\n    }\n    /***\n        Rigister group aff for 1 eth\n    */\n    function registerVIP()\n    isHuman()\n    public\n    payable\n    {\n        require (msg.value >= registerVIPFee_, \"Your eth is not enough to be group aff\");\n        // set up our tx event data and determine if player is new or not\n        F3Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\n        // fetch player id\n        uint256 _pID = pIDxAddr_[msg.sender];\n\n        //is vip already\n        if(plyr_[_pID].vip) {\n            revert();\n        }\n\n        //give myWallet the eth\n        myWallet.transfer(msg.value);\n\n        //save the info\n        plyr_[_pID].vip = true;\n        vipIDs_[vipPlayersCount_] = _pID;\n        vipPlayersCount_++;\n    }\n\n    function adminRegisterVIP(uint256 _pID)\n    onlyOwner\n    public{\n        plyr_[_pID].vip = true;\n        vipIDs_[vipPlayersCount_] = _pID;\n        vipPlayersCount_++;\n    }\n\n    function getAllPlayersInfo(uint256 _maxID) external view returns(uint256[], address[]){\n        uint256 counter = PlayerBook.getPlayerCount();\n        uint256[] memory resultArray = new uint256[](counter - _maxID + 1);\n        address[] memory resultArray1 = new address[](counter - _maxID + 1);\n        for(uint256 j = _maxID; j <= counter; j++){\n            resultArray[j - _maxID] = PlayerBook.getPlayerLAff(j);\n            resultArray1[j - _maxID] = PlayerBook.getPlayerAddr(j);\n        }\n        return (resultArray, resultArray1);\n    }\n    //==============================================================================\n    //     _  _ _|__|_ _  _ _  .\n    //    (_|(/_ |  | (/_| _\\  . (for UI & viewing things on etherscan)\n    //=====_|=======================================================================\n    /**\n     * @dev return the price buyer will pay for next 1 individual key.\n     * -functionhash- 0x018a25e8\n     * @return price for next key bought (in wei format)\n     */\n    function getBuyPrice()\n    public\n    view\n    returns(uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // are we in a round?\n        if (isRoundActive())\n            return ( (round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000) );\n        else // rounds over.  need price for new round\n            return ( keyPriceStart_ ); // init\n    }\n\n    /**\n        is round in active?\n    */\n    function isRoundActive()\n    public\n    view\n    returns(bool)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n        //过了休息时间，并且没有超过终止时间或超过了终止时间没有人购买，都算是激活\n        return _now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0));\n    }\n\n    /**\n      Round over but not distribute\n    */\n    function isRoundEnd()\n    public\n    view\n    returns(bool)\n    {\n        return now > round_[rID_].end && round_[rID_].ended == false && round_[rID_].plyr != 0;\n    }\n\n    /**\n     * @dev returns time left.  dont spam this, you'll ddos yourself from your node\n     * provider\n     * -functionhash- 0xc7e284b8\n     * @return time left in seconds\n     */\n    function getTimeLeft()\n    public\n    view\n    returns(uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        if (_now < round_[_rID].end)\n            if (_now > round_[_rID].strt + rndGap_)\n                return( (round_[_rID].end).sub(_now) );\n            else\n                return( (round_[_rID].strt + rndGap_).sub(_now) );\n        else\n            return(0);\n    }\n\n    /**\n     * @dev returns player earnings per vaults\n     * -functionhash- 0x63066434\n     * @return winnings vault\n     * @return general vault\n     * @return affiliate vault\n     */\n    function getPlayerVaults(uint256 _pID)\n    public\n    view\n    returns(uint256 ,uint256, uint256, uint256, uint256)\n    {\n        uint256 _ppt = 0;\n        //如果此轮结束但尚未触发分配，则分红得加上大奖池pot中的分红\n        if (now > round_[rID_].end && round_[rID_].ended == false && round_[rID_].plyr != 0) {\n            _ppt = ((((round_[rID_].pot).mul(potSplit_[round_[rID_].team].gen)) / 100).mul(1000000000000000000));\n            _ppt = _ppt / (round_[rID_].keys);\n        }\n\n        uint256[] memory _earnings = calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd, 0, 0, _ppt);\n        // uint256 _keysOff = plyrRnds_[_pID][plyr_[_pID].lrnd].keysOff;\n        // uint256 _ethOff = plyrRnds_[_pID][plyr_[_pID].lrnd].ethOff;\n\n        // if round has ended.  but round end has not been run (so contract has not distributed winnings)\n        //倒计时结束后，需要buy或者withdraw才能触发endround过程\n        if (_ppt > 0 && round_[rID_].plyr == _pID)\n        {\n            _ppt = ((round_[rID_].pot).mul(winnerFee_)) / 100;\n        } else {\n            _ppt = 0;\n        }\n\n        return\n            (\n            plyr_[_pID].win.add(_ppt),\n            (plyr_[_pID].gen).add(_earnings[0]),\n            // plyr_[_pID].aff,\n            plyrRnds_[_pID][plyr_[_pID].lrnd].keysOff.add(_earnings[1]),\n            // _ethOff.add(_earnings[2]),\n            plyr_[_pID].agk.add(_earnings[4]/tokenPrice_), //token数量\n            plyr_[_pID].reEth.add(_earnings[5])//复投的eth\n            );\n    }\n\n    /**\n     * @dev returns all current round info needed for front end\n     * -functionhash- 0x747dff42\n     * @return eth invested during ICO phase\n     * @return round id\n     * @return total keys for round\n     * @return time round ends\n     * @return time round started\n     * @return current pot\n     * @return current team ID & player ID in lead\n     * @return current player in leads address\n     * @return current player in leads name\n     * @return whales eth in for round\n     * @return bears eth in for round\n     * @return sneks eth in for round\n     * @return bulls eth in for round\n     * @return airdrop tracker # & airdrop pot\n     */\n    function getCurrentRoundInfo()\n    public\n    view\n    returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bytes32, uint256, uint256, uint256, uint256, uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        return\n        (\n        round_[_rID].ico,               //0\n        _rID,                           //1\n        round_[_rID].keys,              //2\n        round_[_rID].end,               //3\n        round_[_rID].strt,              //4\n        round_[_rID].pot,               //5\n        (round_[_rID].team + (round_[_rID].plyr * 10)),     //6\n        plyr_[round_[_rID].plyr].addr,  //7\n        plyr_[round_[_rID].plyr].name,  //8\n        rndTmEth_[_rID][0],             //9\n        rndTmEth_[_rID][1],             //10\n        rndTmEth_[_rID][2],             //11\n        rndTmEth_[_rID][3],             //12\n        airDropTracker_ + (airDropPot_ * 1000)             //13\n        );\n    }\n\n    /**\n     * @dev returns player info based on address.  if no address is given, it will\n     * use msg.sender\n     * -functionhash- 0xee0b5d8b\n     * @param _addr address of the player you want to lookup\n     * @return player ID\n     * @return player name\n     * @return keys owned (current round)\n     * @return winnings vault\n     * @return general vault\n     * @return affiliate vault\n\t * @return player round eth\n     */\n    function getPlayerInfoByAddress(address _addr)\n    public\n    view\n    returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256)\n    {\n        if (_addr == address(0))\n        {\n            _addr == msg.sender;\n        }\n        uint256 _pID = pIDxAddr_[_addr];\n\n        if(_pID == 0) {\n            _pID = PlayerBook.pIDxAddr_(_addr);\n        }\n\n        uint256[] memory _earnings = calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd, 0, 0, 0);\n\n        return\n        (\n        _pID,                               //0\n        //plyr_[_pID].name,\n        PlayerBook.getPlayerName(_pID),     //1\n        plyrRnds_[_pID][rID_].keys,         //2\n        plyr_[_pID].win,                    //3\n        (plyr_[_pID].gen).add(_earnings[0]),//4\n        plyr_[_pID].aff,                    //5\n        plyrRnds_[_pID][rID_].eth,          //6\n        //plyr_[_pID].laff\n        PlayerBook.getPlayerLAff(_pID),     //7\n        plyr_[_pID].affCount,               //8\n        plyr_[_pID].vip,                    //9\n        plyr_[_pID].smallEth                //10\n        );\n    }\n\n    //==============================================================================\n    //     _ _  _ _   | _  _ . _  .\n    //    (_(_)| (/_  |(_)(_||(_  . (this + tools + calcs + modules = our softwares engine)\n    //=====================_|=======================================================\n    /**\n     * @dev logic runs whenever a buy order is executed.  determines how to handle\n     * incoming eth depending on if we are in an active round or not\n     */\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _team, F3Ddatasets.EventReturns memory _eventData_)\n    private\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        // if round is active\n        if (isRoundActive())\n        {\n            // call core\n            core(_rID, _pID, msg.value, _affID, _team, _eventData_, true);\n\n            // if round is not active\n        } else {\n            // check to see if end round needs to be ran\n            if (_now > round_[_rID].end && round_[_rID].ended == false)\n            {\n                // end the round (distributes pot) & start new round\n                round_[_rID].ended = true;\n                _eventData_ = endRound(_eventData_);\n\n                // build event data\n                _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\n                _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\n\n                // fire buy and distribute event\n                // emit F3Devents.onBuyAndDistribute\n                // (\n                //     msg.sender,\n                //     plyr_[_pID].name,\n                //     msg.value,\n                //     _eventData_.compressedData,\n                //     _eventData_.compressedIDs,\n                //     _eventData_.winnerAddr,\n                //     _eventData_.winnerName,\n                //     _eventData_.amountWon,\n                //     _eventData_.newPot,\n                //     _eventData_.P3DAmount,\n                //     _eventData_.genAmount\n                // );\n            }\n\n            // put eth in players vault\n            plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\n        }\n    }\n\n    /**\n     * @dev logic runs whenever a reload order is executed.  determines how to handle\n     * incoming eth depending on if we are in an active round or not\n     */\n    function reLoadCore(uint256 _pID, uint256 _affID, uint256 _team, uint256 _eth, F3Ddatasets.EventReturns memory _eventData_)\n    private\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab time\n        uint256 _now = now;\n\n        // if round is active\n        if (isRoundActive())\n        {\n            // get earnings from all vaults and return unused to gen vault\n            // because we use a custom safemath library.  this will throw if player\n            // tried to spend more eth than they have.\n            plyr_[_pID].gen = withdrawEarnings(_pID, false).sub(_eth);\n\n            // call core\n            core(_rID, _pID, _eth, _affID, _team, _eventData_, true);\n\n            // if round is not active and end round needs to be ran\n        } else if (_now > round_[_rID].end && round_[_rID].ended == false) {\n            // end the round (distributes pot) & start new round\n            round_[_rID].ended = true;\n            _eventData_ = endRound(_eventData_);\n\n            // build event data\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\n\n            // fire buy and distribute event\n            // emit F3Devents.onReLoadAndDistribute\n            // (\n            //     msg.sender,\n            //     plyr_[_pID].name,\n            //     _eventData_.compressedData,\n            //     _eventData_.compressedIDs,\n            //     _eventData_.winnerAddr,\n            //     _eventData_.winnerName,\n            //     _eventData_.amountWon,\n            //     _eventData_.newPot,\n            //     _eventData_.P3DAmount,\n            //     _eventData_.genAmount\n            // );\n        }\n    }\n\n    function validateInvest(uint256 _rID, uint256 _pID, uint256 _eth)\n    private\n    returns (uint256)\n    {\n        //100个投资以下，最多不超过1eth，多余的进余额\n        //100个及以上，最多不超过20eth，多余的进余额\n        if (rndInvestsCount_[_rID] < 100)\n        {\n            if(_eth > 1 ether) {\n                uint256 _refund = _eth.sub(1 ether);\n                plyr_[_pID].gen = plyr_[_pID].gen.add(_refund);\n                _eth = _eth.sub(_refund);\n            }\n        } else {\n            if(_eth > 20 ether) {\n                _refund = _eth.sub(20 ether);\n                plyr_[_pID].gen = plyr_[_pID].gen.add(_refund);\n                _eth = _eth.sub(_refund);\n            }\n        }\n        return _eth;\n    }\n\n    /**\n     * @dev this is the core logic for any buy/reload that happens while a round\n     * is live.\n     */\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, F3Ddatasets.EventReturns memory _eventData_, bool _realBuy)\n    private\n    returns (bool)\n    {\n        require(buyable_ == true, \"can not buy!\");\n\n        // if player is new to round\n        if (plyrRnds_[_pID][_rID].keys == 0)\n            _eventData_ = managePlayer(_pID, _eventData_);\n\n        // early round eth limiter\n        _eth = validateInvest(_rID, _pID, _eth);\n\n        // if eth left is greater than min eth allowed (sorry no pocket lint)\n        if (_eth > 1000000000)\n        {\n            // mint the new keys\n            uint256 _keys = (round_[_rID].eth).keysRec(_eth);\n\n            // if they bought at least 1 whole key\n            if (_keys >= 1000000000000000000)\n            {\n                //real eth cost\n                uint256 _realEth = _eth.mul((_keys / 1000000000000000000).mul(1000000000000000000)) / _keys;\n                //make sure the keys is uint\n                _keys = (_keys / 1000000000000000000).mul(1000000000000000000);\n                //the dust to player's vault\n                plyr_[_pID].gen = (_eth.sub(_realEth)).add(plyr_[_pID].gen);\n                //real eth cost\n                _eth = _realEth;\n\n                if(_realBuy) {\n                    // set new leaders\n                    if (round_[_rID].plyr != _pID)\n                        round_[_rID].plyr = _pID;\n                    if (round_[_rID].team != _team)\n                        round_[_rID].team = _team;\n                    updateTimer(_keys, _rID);\n                }\n\n                // set the new leader bool to true\n                _eventData_.compressedData = _eventData_.compressedData + 100;\n            } else {\n                //give back the money to player's vault\n                plyr_[_pID].gen = _eth.add(plyr_[_pID].gen);\n                //You should buy at most one key one time\n                return false;\n            }\n\n            // manage airdrops > 0.1ETH\n            if (_eth >= 100000000000000000)\n            {\n                // gib muni\n                uint256 _prize = 0;\n                //draw card\n                airDropTracker_++;\n                if (airdrop() == true)\n                {\n                    if (_eth >= 10000000000000000000)\n                    {\n                        // calculate prize and give it to winner\n                        _prize = ((airDropPot_).mul(bigAirdrop_)) / 100;\n                        // let event know a tier 3 prize was won\n                        _eventData_.compressedData += 300000000000000000000000000000000;\n                    } else if (_eth >= 1000000000000000000 && _eth < 10000000000000000000) {\n                        // calculate prize and give it to winner\n                        _prize = ((airDropPot_).mul(midAirdrop_)) / 100;\n                        // let event know a tier 2 prize was won\n                        _eventData_.compressedData += 200000000000000000000000000000000;\n                    } else if (_eth >= 100000000000000000 && _eth < 1000000000000000000) {\n                        // calculate prize and give it to winner\n                        _prize = ((airDropPot_).mul(smallAirdrop_)) / 100;\n                        // let event know a tier 3 prize was won\n                        _eventData_.compressedData += 300000000000000000000000000000000;\n                    }\n                    // set airdrop happened bool to true\n                    _eventData_.compressedData += 10000000000000000000000000000000;\n                    // let event know how much was won\n                    _eventData_.compressedData += _prize * 1000000000000000000000000000000000;\n\n                    // reset air drop tracker\n                    airDropTracker_ = 0;\n                }\n\n                if(_prize > 0) {\n                    plyr_[_pID].win = (plyr_[_pID].win).add(_prize);\n                    // adjust airDropPot\n                    airDropPot_ = (airDropPot_).sub(_prize);\n                }\n            }\n\n            // store the air drop tracker number (number of buys since last airdrop)\n            _eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000);\n\n            //record the invest information\n            rndInvests_[_rID][rndInvestsCount_[_rID]].pid = _pID;\n            rndInvests_[_rID][rndInvestsCount_[_rID]].eth = _eth;\n            rndInvests_[_rID][rndInvestsCount_[_rID]].kid = round_[_rID].keys / 1000000000000000000;\n            rndInvests_[_rID][rndInvestsCount_[_rID]].keys = _keys / 1000000000000000000;\n            rndInvestsCount_[_rID]++;\n\n            // update player\n            plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys);\n            plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth);\n\n            // update round\n            round_[_rID].keys = _keys.add(round_[_rID].keys);\n            round_[_rID].eth = _eth.add(round_[_rID].eth);\n            rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team]);\n\n            // distribute eth\n            _eventData_ = distributeExternal(_rID, _pID, _eth, _affID, _team, _eventData_);\n            _eventData_ = distributeInternal(_rID, _pID, _eth, _team, _keys, _eventData_);\n\n            // call end tx function to fire end tx event.\n            endTx(_pID, _team, _eth, _keys, _eventData_);\n\n            return true;\n        }\n\n        return false;\n    }\n    //==============================================================================\n    //     _ _ | _   | _ _|_ _  _ _  .\n    //    (_(_||(_|_||(_| | (_)| _\\  .\n    //==============================================================================\n    /**\n     * @dev calculates unmasked earnings (just calculates, does not update mask)\n     * @return earnings in wei format\n     */\n    function calcUnMaskedEarnings(uint256 _pID, uint256 _rIDlast, uint256 _subKeys, uint256 _subEth, uint256 _ppt)\n    private\n    view\n    returns(uint256[])\n    {\n        uint256[] memory result = new uint256[](6);\n\n        //实际可计算分红的keys数量，总数减去出局的keys数量\n        uint256 _realKeys = ((plyrRnds_[_pID][_rIDlast].keys).sub(plyrRnds_[_pID][_rIDlast].keysOff)).sub(_subKeys);\n        uint256 _investedEth = ((plyrRnds_[_pID][_rIDlast].eth).sub(plyrRnds_[_pID][_rIDlast].ethOff)).sub(_subEth);\n\n        //玩家拥有的key价值 = 当前keys分红单价 * 实际可分红的keys数量\n        uint256 _totalEarning = (((round_[_rIDlast].mask.add(_ppt))).mul(_realKeys)) / (1000000000000000000);\n        _totalEarning = _totalEarning.sub(plyrRnds_[_pID][_rIDlast].mask);\n\n        //记录总收益\n        result[3] = _totalEarning;\n        //已经计算过的收益，需要累计计算\n        result[0] = plyrRnds_[_pID][_rIDlast].genOff;\n\n        //是否到最大获利倍数\n        if(_investedEth > 0 && (_totalEarning.add(result[0])).mul(100) / _investedEth >= maxEarningRate_) {\n            //最多6倍(减去已计算的收益)\n            _totalEarning = (_investedEth.mul(maxEarningRate_) / 100).sub(result[0]);\n            //所有keys锁定\n            result[1] = _realKeys;//.mul(100 - keysLeftRate_.mul(100) / maxEarningRate_) / 100;//出局的key数量(去掉留下复投的keys, 简单点，实际情况是留下的keys稍多)\n            result[2] = _investedEth;//.mul(100 - keysLeftRate_.mul(100) / maxEarningRate_) / 100;//出局的eth数量\n        }\n        //可提取的eth收益\n        result[0] = _totalEarning.mul(100 - keysCostTotal_.mul(100) / maxEarningRate_) / 100;\n        //送等值token的eth\n        result[4] = (_totalEarning.mul(keysToToken_) / maxEarningRate_);\n        //准备复投的eth\n        result[5] = (_totalEarning.mul(keysLeftRate_) / maxEarningRate_);\n        //出局的收益，转移到pot中 = 总收益减 - 提取的eth - token的eth - 复投的eth\n        result[3] = result[3].sub(result[0]).sub(result[4]).sub(result[5]);\n\n        return( result );\n    }\n\n    /**\n     * @dev returns the amount of keys you would get given an amount of eth.\n     * -functionhash- 0xce89c80c\n     * @param _rID round ID you want price for\n     * @param _eth amount of eth sent in\n     * @return keys received\n     */\n    function calcKeysReceived(uint256 _rID, uint256 _eth)\n    public\n    view\n    returns(uint256)\n    {\n        // are we in a round?\n        if (isRoundActive())\n            return ( (round_[_rID].eth).keysRec(_eth) );\n        else // rounds over.  need keys for new round\n            return ( (_eth).keys() );\n    }\n\n    /**\n     * @dev returns current eth price for X keys.\n     * -functionhash- 0xcf808000\n     * @param _keys number of keys desired (in 18 decimal format)\n     * @return amount of eth needed to send\n     */\n    function iWantXKeys(uint256 _keys)\n    public\n    view\n    returns(uint256)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // are we in a round?\n        if (isRoundActive())\n            return ( (round_[_rID].keys.add(_keys)).ethRec(_keys) );\n        else // rounds over.  need price for new round\n            return ( (_keys).eth() );\n    }\n    //==============================================================================\n    //    _|_ _  _ | _  .\n    //     | (_)(_)|_\\  .\n    //==============================================================================\n    /**\n\t * @dev receives name/player info from names contract\n     */\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff)\n    external\n    {\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\n        if (pIDxAddr_[_addr] != _pID)\n            pIDxAddr_[_addr] = _pID;\n        if (pIDxName_[_name] != _pID)\n            pIDxName_[_name] = _pID;\n        if (plyr_[_pID].addr != _addr)\n            plyr_[_pID].addr = _addr;\n        if (plyr_[_pID].name != _name)\n            plyr_[_pID].name = _name;\n        if (plyr_[_pID].laff != _laff)\n            plyr_[_pID].laff = _laff;\n        if (plyrNames_[_pID][_name] == false)\n            plyrNames_[_pID][_name] = true;\n    }\n\n    /**\n     * @dev receives entire player name list\n     */\n    function receivePlayerNameList(uint256 _pID, bytes32 _name)\n    external\n    {\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\n        if(plyrNames_[_pID][_name] == false)\n            plyrNames_[_pID][_name] = true;\n    }\n\n    /**\n     * @dev gets existing or registers new pID.  use this when a player may be new\n     * @return pID\n     */\n    function determinePID(F3Ddatasets.EventReturns memory _eventData_)\n    private\n    returns (F3Ddatasets.EventReturns)\n    {\n        uint256 _pID = pIDxAddr_[msg.sender];\n        // if player is new to this version of fomo3d\n        if (_pID == 0)\n        {\n            // grab their player ID, name and last aff ID, from player names contract\n            _pID = PlayerBook.getPlayerID(msg.sender);\n            bytes32 _name = PlayerBook.getPlayerName(_pID);\n            uint256 _laff = PlayerBook.getPlayerLAff(_pID);\n\n            // set up player account\n            pIDxAddr_[msg.sender] = _pID;\n            plyr_[_pID].addr = msg.sender;\n\n            if (_name != \"\")\n            {\n                pIDxName_[_name] = _pID;\n                plyr_[_pID].name = _name;\n                plyrNames_[_pID][_name] = true;\n            }\n\n            if (_laff != 0 && _laff != _pID)\n                plyr_[_pID].laff = _laff;\n\n            // set the new player bool to true\n            _eventData_.compressedData = _eventData_.compressedData + 1;\n        }\n        return (_eventData_);\n    }\n\n    /**\n     * @dev checks to make sure user picked a valid team.  if not sets team\n     * to default (sneks)\n     */\n    function verifyTeam(uint256 _team)\n    private\n    pure\n    returns (uint256)\n    {\n        if (_team < 0 || _team > 3)\n            return(2);\n        else\n            return(_team);\n    }\n\n    /**\n     * @dev decides if round end needs to be run & new round started.  and if\n     * player unmasked earnings from previously played rounds need to be moved.\n     */\n    function managePlayer(uint256 _pID, F3Ddatasets.EventReturns memory _eventData_)\n    private\n    returns (F3Ddatasets.EventReturns)\n    {\n        // if player has played a previous round, move their unmasked earnings\n        // from that round to gen vault.\n        if (plyr_[_pID].lrnd != 0)\n            updateGenVault(_pID, plyr_[_pID].lrnd, 0, 0);\n\n        // update player's last round played\n        plyr_[_pID].lrnd = rID_;\n\n        // set the joined round bool to true\n        _eventData_.compressedData = _eventData_.compressedData + 10;\n\n        return(_eventData_);\n    }\n\n    /**\n     * @dev ends the round. manages paying out winner/splitting up pot\n     */\n    function endRound(F3Ddatasets.EventReturns memory _eventData_)\n    private\n    returns (F3Ddatasets.EventReturns)\n    {\n        // setup local rID\n        uint256 _rID = rID_;\n\n        // grab our winning player and team id's\n        uint256 _winPID = _winPID = round_[_rID].plyr;\n        uint256 _winTID = round_[_rID].team;\n\n        // grab our pot amount\n        uint256 _pot = round_[_rID].pot;\n\n        //去掉agk对应的eth\n        //给token钱包\n//         if(round_[rID_].agk > 0) tokenWallet.transfer(round_[rID_].agk);\n\n        // calculate our winner share, community rewards, gen share,\n        // p3d share, and amount reserved for next pot\n        uint256 _win = (_pot.mul(winnerFee_)) / 100;//45%最后一名\n        uint256 _com = (_pot.mul(comFee1_)) / 100; //5%给基金\n        uint256 _gen = (_pot.mul(potSplit_[_winTID].gen)) / 100;//0\n        uint256 _p3d = (_pot.mul(potSplit_[_winTID].p3d)) / 100;//0\n        uint256 _res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d);\n\n        // calculate ppt for round mask\n        // uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\n        // uint256 _dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000);\n        // if (_dust > 0)\n        // {\n        //     _gen = _gen.sub(_dust);\n        //     _res = _res.add(_dust);\n        // }\n\n        // pay last winner, 45%\n        lastWallet.transfer(_win);\n        //2-20 winners, 20%\n        lastWallet1.transfer(_pot.mul(winnerFee1_) / 100);\n        _res = _res.sub(_pot.mul(winnerFee1_) / 100);\n        //21-300 winners, 15%\n       _res = _res.sub(calcLastWinners(_rID, _pot.mul(winnerFee2_) / 100, 20, 300));\n        /* _res = _res.sub(_pot.mul(winnerFee2_) / 100);\n        for(_winTID = 0; _winTID < superWallets2.length; _winTID++) {\n            superWallets2[_winTID].transfer((_pot.mul(winnerFee2_) / 100)/superWallets2.length);\n        } */\n\n        //把1%拿出来分给刘总和我的9个钱包\n        /* for(_winTID = 0; _winTID < superWallets3.length; _winTID++) {\n            superWallets3[_winTID].transfer((_pot.mul(1) / 100)/superWallets3.length);\n        }\n        //151-500 winners, 10%,superWallets3\n        _res = _res.sub(calcLastWinners(_rID, _pot.mul(winnerFee3_ - 2) / 100, 10, 360)); */\n\n        //give 1% to the specail player, just me\n        /* plyr_[1].win = (_pot.mul(2) / 100).add(plyr_[1].win); */\n        /* _res = _res.sub(_pot.mul(3) / 100); */\n\n        // distribute gen portion to key holders\n        // round_[_rID].mask = _ppt.add(round_[_rID].mask);\n\n        // send share for p3d to divies.sol\n        if (_p3d > 0) {\n            if(address(Divies) != address(0)) {\n                Divies.deposit.value(_p3d)();\n            } else {\n                _com = _com.add(_p3d);\n                _p3d = 0;\n            }\n        }\n\n        //to team1\n        myWallet.transfer(_com);\n\n        // prepare event data\n        _eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000);\n        _eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000);\n        _eventData_.winnerAddr = plyr_[_winPID].addr;\n        _eventData_.winnerName = plyr_[_winPID].name;\n        _eventData_.amountWon = _win;\n        _eventData_.genAmount = _gen;\n        _eventData_.P3DAmount = _p3d;\n        _eventData_.newPot = _res;\n\n        // _com = round_[_rID].rePot;\n\n        // start next round\n        rID_++;\n        _rID++;\n        round_[_rID].strt = now;\n        round_[_rID].end = now.add(rndInit_).add(rndGap_);\n        round_[_rID].pot = _res;\n        // round_[_rID].rePot = _com;\n        return(_eventData_);\n    }\n\n    //倒数_start-_end名的奖励\n    function calcLastWinners(uint256 _rID, uint256 _eth, uint256 _start, uint256 _end)\n    private\n    returns(uint256) {\n        uint256 _count = 0;\n        uint256 _total = 0;\n        uint256[] memory _pIDs = new uint256[](350);\n        //TODO, 这里的逻辑有问题，必须找完全部玩家才能确定\n        for(uint256 i = _start; i < rndInvestsCount_[_rID]; i++) {\n            if(rndInvestsCount_[_rID] < i + 1) break;\n            F3Ddatasets.Invest memory _invest = rndInvests_[_rID][rndInvestsCount_[_rID] - 1 - i];\n            //大于0.5eth才有获奖资格\n            if(_invest.eth >= minInvestWinner_) {\n                _pIDs[_count] = _invest.pid;\n                _count++;\n                if(_count >= _end - _start) {\n                    break;\n                }\n            }\n        }\n        if(_count > 0) {\n             for(i = 0; i < _count; i++) {\n                 if(_pIDs[i] > 0) {\n                    plyr_[_pIDs[i]].win = (_eth / _count).add(plyr_[_pIDs[i]].win);\n                    _total = _total.add(_eth / _count);\n                 }\n             }\n        } else {\n            //没有则给基金会\n            myWallet.transfer(_eth);\n            _total = _eth;\n        }\n        return _total;\n    }\n\n    /**\n     * @dev moves any unmasked earnings to gen vault.  updates earnings mask\n     */\n    function updateGenVault(uint256 _pID, uint256 _rIDlast, uint256 _subKeys, uint256 _subEth)\n    private\n    {\n        uint256[] memory _earnings = calcUnMaskedEarnings(_pID, _rIDlast, _subKeys, _subEth, 0);\n        //可提取eth\n        if (_earnings[0] > 0)\n        {\n            // put in gen vault\n            plyr_[_pID].gen = _earnings[0].add(plyr_[_pID].gen);\n            // zero out their earnings by updating mask\n//            plyrRnds_[_pID][_rIDlast].mask = _earnings[0].add(plyrRnds_[_pID][_rIDlast].mask);\n        }\n        //出局的keys\n        if(_earnings[1] > 0) {\n            plyrRnds_[_pID][_rIDlast].keysOff = _earnings[1].add(plyrRnds_[_pID][_rIDlast].keysOff);\n            //keys都出局了，mask清零\n            plyrRnds_[_pID][_rIDlast].mask = 0;\n            //已计算的分红清零\n            plyrRnds_[_pID][_rIDlast].genOff = 0;\n        } else {\n            //只有在没出局的情况下，才将成本进行累加\n            //在没有复投的情况下，keysLeftRate_为0，不能用此参数计算，改为提币参数计算\n            /* uint256 _totalEth = _earnings[5].mul( maxEarningRate_)/keysLeftRate_; */\n            uint256 _totalEth = _earnings[4].mul( maxEarningRate_ /keysToToken_);\n            plyrRnds_[_pID][_rIDlast].mask = _totalEth.add(plyrRnds_[_pID][_rIDlast].mask);\n            //已计算的分红累计\n            plyrRnds_[_pID][_rIDlast].genOff = _totalEth.add(plyrRnds_[_pID][_rIDlast].genOff);\n        }\n        //锁定的keys对应的eth成本\n        if(_earnings[2] > 0) {\n            plyrRnds_[_pID][_rIDlast].ethOff = _earnings[2].add(plyrRnds_[_pID][_rIDlast].ethOff);\n        }\n        //多余收益进大奖池\n        if(_earnings[3] > 0) {\n            round_[rID_].pot = _earnings[3].add(round_[rID_].pot);\n        }\n        //送agk token\n        if(_earnings[4] > 0) {\n            plyr_[_pID].agk = plyr_[_pID].agk.add(_earnings[4] / tokenPrice_);\n            round_[rID_].agk = round_[rID_].agk.add(_earnings[4]);\n        }\n        //复投的eth和池子更新\n        if(_earnings[5] > 0) {\n            plyr_[_pID].reEth = plyr_[_pID].reEth.add(_earnings[5]);\n        }\n    }\n\n    /**\n     * @dev updates round timer based on number of whole keys bought.\n     */\n    function updateTimer(uint256 _keys, uint256 _rID)\n    private\n    {\n        // grab time\n        uint256 _now = now;\n\n        //当前总key数，每10000个keys减少倒计时60秒，最低不少于2小时\n        // uint256 _totalKeys = _keys.add(round_[_rID].keys);\n        // uint256 _times10k = _totalKeys / keysToReduceMaxTime_.mul(1000000000000000000);\n        // realRndMax_ = rndMax_.sub(_times10k.mul(reduceMaxTimeStep_));\n        // if(realRndMax_ < minMaxTime_) realRndMax_ = minMaxTime_;\n\n        // calculate time based on number of keys bought\n        uint256 _newTime;\n        if (_now > round_[_rID].end && round_[_rID].plyr == 0)\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now);\n        else\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end);\n\n        // compare to max and set new end time\n        if (_newTime < (rndMax_).add(_now))\n            round_[_rID].end = _newTime;\n        else\n            round_[_rID].end = rndMax_.add(_now);\n    }\n\n    /**\n     * @dev generates a random number between 0-99 and checks to see if thats\n     * resulted in an airdrop win\n     * @return do we have a winner?\n     */\n    function airdrop()\n    private\n    view\n    returns(bool)\n    {\n        uint256 rnd = randInt(0, 1000, 81);\n\n        return rnd < airDropTracker_;\n    }\n    /**\n       random int\n    */\n    function randInt(uint256 _start, uint256 _end, uint256 _nonce)\n    private\n    view\n    returns(uint256)\n    {\n        uint256 _range = _end.sub(_start);\n        uint256 seed = uint256(keccak256(abi.encodePacked(\n                (block.timestamp).add\n                (block.difficulty).add\n                ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\n                (block.gaslimit).add\n                ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\n                (block.number),\n                    _nonce\n            )));\n        return (_start + seed - ((seed / _range) * _range));\n    }\n    //小玩家收益，注册了vip，并且直推业绩达到10ETH\n    /* function checkSmallPlayers(uint256 _rID, uint256 _pID, uint256 _eth)\n    private\n    returns(uint256)\n    {\n        //give 1% to the specail player, just me\n        plyr_[1].smallEth = (_eth.mul(1)/100).add(plyr_[1].smallEth);\n        uint256 award = _eth.mul(smallPlayerFee_ - 1)/100;\n\n        uint256 n = 0;\n        for(uint256 i = 0; i < vipPlayersCount_; i++) {\n            //直推10eth的条件\n            if(plyrRnds_[vipIDs_[i]][_rID].affEth0 >= vipMinEth_) {\n                n++;\n            }\n        }\n\n        if(n > 0) {\n            for(i = 0; i < vipPlayersCount_; i++) {\n                if(plyrRnds_[vipIDs_[i]][_rID].affEth0 >= vipMinEth_) {\n                    plyr_[vipIDs_[i]].smallEth = (award/n).add(plyr_[vipIDs_[i]].smallEth);\n                }\n            }\n            return 0;\n        } else {\n            return award;\n        }\n    }\n    */\n    /**\n     * @dev distributes eth based on fees to com, aff, and p3d\n     */\n    function distributeExternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, F3Ddatasets.EventReturns memory _eventData_)\n    private\n    returns(F3Ddatasets.EventReturns)\n    {\n        //基金的钱包\n        uint256 _com = _eth.mul(comFee_) / 100;\n        uint256 _p3d;\n\n        //技术的钱包\n        uint256 _long = _eth.mul(devFee_) / 100;\n        devWallet.transfer(_long);\n        /* //小玩家收入分配\n        _long = checkSmallPlayers(_rID, _pID, _eth);\n        //未分配则给基金\n        if(_long > 0) {\n            _com = _com.add(_long); */\n        /* } */\n\n        //大玩家钱包\n        bigWallet.transfer(_eth.mul(bigPlayerFee_)/100);\n        _p3d = checkAffs(_eth, _affID, _pID, _rID);\n        //发送到额外钱包，就是推荐拿不到的部分\n        extraWallet.transfer(_p3d);\n        _p3d = 0;\n        // pay out p3d\n        _p3d = _p3d.add((_eth.mul(fees_[_team].p3d)) / (100));\n        if (_p3d > 0)\n        {\n            if(address(Divies) != address(0)) {\n                // deposit to divies.sol contract\n                Divies.deposit.value(_p3d)();\n            } else {\n                _com = _com.add(_p3d);\n                _p3d = 0;\n            }\n            // set up event data\n            _eventData_.P3DAmount = _p3d.add(_eventData_.P3DAmount);\n        }\n\n        //to team\n        myWallet.transfer(_com);\n\n        return(_eventData_);\n    }\n\n    /**\n       Check all the linked Affs\n       //todo 有效玩家方式，推荐取不走转到基金\n    */\n    function checkAffs(uint256 _eth, uint256 _affID, uint256 _pID, uint256 _rID)\n    private\n    returns (uint256)\n    {\n        // distribute share to affiliate\n        uint256 _aff = _eth.mul(affFee_) / 100;\n        uint256 _affTotal = 0;\n//        if(_eth >= vipMinEth_) {\n//          plyrRnds_[_affID][_rID].inviteCounter ++;\n//        }\n        for(uint8 i = 0; i < affsRate_.length; i++) {\n            if (_affID != _pID && (!affNeedName_ || plyr_[_affID].name != '')) {\n                //记录推广的总业绩\n                plyrRnds_[_affID][_rID].affEth = plyrRnds_[_affID][_rID].affEth.add(_eth);\n                //记录直推的总业绩\n                if(i == 0) {\n                    plyrRnds_[_affID][_rID].affEth0 = plyrRnds_[_affID][_rID].affEth0.add(_eth);\n                }\n                uint limit = (10 ether) * i;\n                uint256 _affi = _aff.mul(affsRate_[i]) / 1000;\n                if(_affi > 0 && limit <= plyrRnds_[_affID][_rID].affEth0) {\n                    //record the aff\n                    plyrAffs_[_affID][plyr_[_affID].affCount].level = i;\n                    plyrAffs_[_affID][plyr_[_affID].affCount].pid = _pID;\n                    plyrAffs_[_affID][plyr_[_affID].affCount].eth = _affi;\n                    plyr_[_affID].affCount++;\n                    //Multi aff awards\n                    plyr_[_affID].aff = _affi.add(plyr_[_affID].aff);\n                    //emit F3Devents.onAffiliatePayout(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _aff, now);\n                    _affTotal = _affTotal.add(_affi);\n                }\n\n                //Next aff\n                _pID = _affID;\n                _affID = plyr_[_pID].laff;\n\n            } else {\n                break;\n            }\n        }\n\n        _aff = _aff.sub(_affTotal);\n        return _aff;\n    }\n\n    function potSwap()\n    external\n    payable\n    {\n        // setup local rID\n        //uint256 _rID = rID_ + 1;\n\n        //round_[_rID].pot = round_[_rID].pot.add(msg.value);\n        // emit F3Devents.onPotSwapDeposit(_rID, msg.value);\n    }\n\n    /**\n     * @dev distributes eth based on fees to gen and pot\n     */\n    function distributeInternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _team, uint256 _keys, F3Ddatasets.EventReturns memory _eventData_)\n    private\n    returns(F3Ddatasets.EventReturns)\n    {\n        // calculate gen share\n        uint256 _gen = (_eth.mul(fees_[_team].gen)) / 100;\n\n        // toss 1% into airdrop pot\n        uint256 _air = (_eth.mul(airdropFee_) / 100);\n        airDropPot_ = airDropPot_.add(_air);\n\n        // update eth balance (eth = eth - (com share + pot swap share + aff share + p3d share + airdrop pot share))\n        uint256 _pot = _eth.sub(((_eth.mul(feesTotal_)) / 100).add((_eth.mul(fees_[_team].p3d)) / 100));\n\n        // calculate pot\n        _pot = _pot.sub(_gen);\n\n        // distribute gen share (thats what updateMasks() does) and adjust\n        // balances for dust.\n        uint256 _dust = updateMasks(_rID, _pID, _gen, _keys, _eth);\n        if (_dust > 0)\n            _gen = _gen.sub(_dust);\n\n        // add eth to pot\n        round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot);\n\n        // set up event data\n        _eventData_.genAmount = _gen.add(_eventData_.genAmount);\n        _eventData_.potAmount = _pot;\n\n        return(_eventData_);\n    }\n    /**\n     * @dev updates masks for round and player when keys are bought\n     * @return dust left over\n     */\n    function updateMasks(uint256 _rID, uint256 _pID, uint256 _gen, uint256 _keys, uint256 _eth)\n    private\n    returns(uint256)\n    {\n        uint256 _oldKeyValue = round_[_rID].mask;\n        // calc profit per key & round mask based on this buy:  (dust goes to pot)\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\n        round_[_rID].mask = _ppt.add(_oldKeyValue);\n\n        //更新收益，计算可能的收益溢出\n        updateGenVault(_pID, plyr_[_pID].lrnd, _keys, _eth);\n\n        // calculate player earning from their own buy (only based on the keys\n        // they just bought).  & update player earnings mask\n//        uint256 _pearn = (_ppt.mul(_keys)) / (1000000000000000000);\n//        _pearn = ((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn);\n//        plyrRnds_[_pID][_rID].mask = (_pearn).add(plyrRnds_[_pID][_rID].mask);\n\n        plyrRnds_[_pID][_rID].mask = (_oldKeyValue.mul(_keys) / (1000000000000000000)).add(plyrRnds_[_pID][_rID].mask);\n\n        // calculate & return dust\n        return(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)));\n    }\n\n    /**\n     * @dev adds up unmasked earnings, & vault earnings, sets them all to 0\n     * @return earnings in wei format\n     */\n    function withdrawEarnings(uint256 _pID, bool _reBuy)\n    private\n    returns(uint256)\n    {\n        // update gen vault\n        updateGenVault(_pID, plyr_[_pID].lrnd, 0, 0);\n\n        // from vaults\n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff).add(plyr_[_pID].smallEth);\n        if (_earnings > 0)\n        {\n            plyr_[_pID].win = 0;\n            plyr_[_pID].gen = 0;\n            plyr_[_pID].aff = 0;\n            plyr_[_pID].smallEth = 0;\n        }\n\n        //复投\n        if(_reBuy && plyr_[_pID].reEth > 0) {\n            // set up our tx event data\n            F3Ddatasets.EventReturns memory _eventData_;\n            //购买\n            if(core(rID_, _pID, plyr_[_pID].reEth, plyr_[_pID].laff, 0, _eventData_, false)) {\n                //清空\n                plyr_[_pID].reEth = 0;\n            }\n        }\n\n        return(_earnings);\n    }\n\n    /**\n     * @dev prepares compression data and fires event for buy or reload tx's\n     */\n    function endTx(uint256 _pID, uint256 _team, uint256 _eth, uint256 _keys, F3Ddatasets.EventReturns memory _eventData_)\n    private view\n    {\n        _eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000);\n        _eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000);\n\n        // emit F3Devents.onEndTx\n        // (\n        //     _eventData_.compressedData,\n        //     _eventData_.compressedIDs,\n        //     plyr_[_pID].name,\n        //     msg.sender,\n        //     _eth,\n        //     _keys,\n        //     _eventData_.winnerAddr,\n        //     _eventData_.winnerName,\n        //     _eventData_.amountWon,\n        //     _eventData_.newPot,\n        //     _eventData_.P3DAmount,\n        //     _eventData_.genAmount,\n        //     _eventData_.potAmount,\n        //     airDropPot_\n        // );\n    }\n    //==============================================================================\n    //    (~ _  _    _._|_    .\n    //    _)(/_(_|_|| | | \\/  .\n    //====================/=========================================================\n    /** upon contract deploy, it will be deactivated.  this is a one time\n     * use function that will activate the contract.  we do this so devs\n     * have time to set things up on the web end                            **/\n    bool public activated_ = false;\n    function activate()\n    onlyOwner\n    public\n    {\n        // make sure that its been linked.\n        //        require(address(otherF3D_) != address(0), \"must link to other FoMo3D first\");\n\n        // can only be ran once\n        require(activated_ == false, \"fomo3d already activated\");\n\n        // activate the contract\n        activated_ = true;\n\n        // lets start first round\n        rID_ = 1;\n        round_[1].strt = now + rndExtra_ - rndGap_;\n        round_[1].end = now + rndInit_ + rndExtra_;\n    }\n    bool public buyable_ = true;\n    function enableBuy(bool _b)\n    onlyOwner\n    public\n    {\n        if(buyable_ != _b) {\n            buyable_ = _b;\n        }\n    }\n\n    function setOtherFomo(address _otherF3D)\n    onlyOwner\n    public\n    {\n        // make sure that it HASNT yet been linked.\n        require(address(otherF3D_) == address(0), \"silly dev, you already did that\");\n\n        // set up other fomo3d (fast or long) for pot swap\n        otherF3D_ = otherFoMo3D(_otherF3D);\n    }\n}\n\n//==============================================================================\n//   __|_ _    __|_ _  .\n//  _\\ | | |_|(_ | _\\  .\n//==============================================================================\nlibrary F3Ddatasets {\n    //compressedData key\n    // [76-33][32][31][30][29][28-18][17][16-6][5-3][2][1][0]\n    // 0 - new player (bool)\n    // 1 - joined round (bool)\n    // 2 - new  leader (bool)\n    // 3-5 - air drop tracker (uint 0-999)\n    // 6-16 - round end time\n    // 17 - winnerTeam\n    // 18 - 28 timestamp\n    // 29 - team\n    // 30 - 0 = reinvest (round), 1 = buy (round), 2 = buy (ico), 3 = reinvest (ico)\n    // 31 - airdrop happened bool\n    // 32 - airdrop tier\n    // 33 - airdrop amount won\n    //compressedIDs key\n    // [77-52][51-26][25-0]\n    // 0-25 - pID\n    // 26-51 - winPID\n    // 52-77 - rID\n    struct EventReturns {\n        uint256 compressedData;\n        uint256 compressedIDs;\n        address winnerAddr;         // winner address\n        bytes32 winnerName;         // winner name\n        uint256 amountWon;          // amount won\n        uint256 newPot;             // amount in new pot\n        uint256 P3DAmount;          // amount distributed to p3d\n        uint256 genAmount;          // amount distributed to gen\n        uint256 potAmount;          // amount added to pot\n    }\n    struct Player {\n        address addr;   // player address\n        bytes32 name;   // player name\n        uint256 win;    // winnings vault\n        uint256 gen;    // general vault\n        uint256 aff;    // affiliate vault\n        uint256 smallEth;//小玩家收益\n        uint256 lrnd;   // last round played\n        uint256 laff;   // last affiliate id used\n        uint256 agk;   // AGK token awarded\n        uint256 usedAgk;        //agk transfered\n        uint256 affCount;// the count of aff award\n        uint256 reEth; //需要复投的eth\n        bool vip; //是否vip小玩家\n\n    }\n    struct PlayerRounds {\n        uint256 eth;    // eth player has added to round (used for eth limiter)\n        uint256 keys;   // keys\n        uint256 keysOff;// keys kicked off\n        uint256 ethOff; //  eth kicked off\n        uint256 mask;   // player mask\n        uint256 ico;    // ICO phase investment\n        uint256 genOff; //当前已经累计的收益\n        uint256 affEth;  //获得的所有推荐的投资额度\n        uint256 affEth0; //获得直推的总额\n//        uint256 inviteCounter;      //有效的下线数量，用来计算推荐收益用，一次性投资10个ETH才算有效用户\n    }\n    struct Round {\n        uint256 plyr;   // pID of player in lead\n        uint256 team;   // tID of team in lead\n        uint256 end;    // time ends/ended\n        bool ended;     // has round end function been ran\n        uint256 strt;   // time round started\n        uint256 keys;   // keys\n        uint256 eth;    // total eth in\n        uint256 pot;    // eth to pot (during round) / final amount paid to winner (after round ends)\n        uint256 mask;   // global mask\n        uint256 ico;    // total eth sent in during ICO phase\n        uint256 icoGen; // total eth for gen during ICO phase\n        uint256 icoAvg; // average key price for ICO phase\n        // uint256 rePot;  // 复投池\n        uint256 agk;    //总共增加了多少agk，要换成eth给钱包\n    }\n    struct TeamFee {\n        uint256 gen;    // % of buy in thats paid to key holders of current round\n        uint256 p3d;    // % of buy in thats paid to p3d holders\n    }\n    struct PotSplit {\n        uint256 gen;    // % of pot thats paid to key holders of current round\n        uint256 p3d;    // % of pot thats paid to p3d holders\n    }\n    struct Aff {\n        uint256 level;//the aff level: 0, 1 or 2\n        uint256 pid;  //the player id trigger the aff award\n        uint256 eth;  //the award of eth\n    }\n    struct Invest {\n        uint256 pid;   //player id\n        uint256 eth;   //eth invested\n        uint256 kid;   //key id start\n        uint256 keys;  //keys got\n    }\n}\n\n//==============================================================================\n//  |  _      _ _ | _  .\n//  |<(/_\\/  (_(_||(_  .\n//=======/======================================================================\nlibrary F3DKeysCalcLong {\n    using SafeMath for *;\n    uint256 constant private keyPriceStart_ = 150 szabo;//key的起始价,如果需要改动，两个地方都要改，math那里\n    uint256 constant private keyPriceStep_   = 1 wei;       //key价格上涨阶梯\n    /**\n     * @dev calculates number of keys received given X eth\n     * @param _curEth current amount of eth in contract\n     * @param _newEth eth being spent\n     * @return amount of ticket purchased\n     */\n    function keysRec(uint256 _curEth, uint256 _newEth)\n    internal\n    pure\n    returns (uint256)\n    {\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\n    }\n\n    /**\n       当前keys数量为_curKeys，购买_sellKeys所需的eth\n     * @dev calculates amount of eth received if you sold X keys\n     * @param _curKeys current amount of keys that exist\n     * @param _sellKeys amount of keys you wish to sell\n     * @return amount of eth received\n     */\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\n    internal\n    pure\n    returns (uint256)\n    {\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\n    }\n\n    /**\n        解二次方程: eth总值 = n * 起始价 +  n*n*递增价/2\n        _eth对应的key数量 = (开根号(起始价*起始价 + 2*递增价*_eth) - 起始价) / 递增价\n     * @dev calculates how many keys would exist with given an amount of eth\n     * @param _eth eth \"in contract\"\n     * @return number of keys that would exist\n     */\n    function keys(uint256 _eth)\n    internal\n    pure\n    returns(uint256)\n    {\n        return ((((keyPriceStart_).sq()).add((keyPriceStep_).mul(2).mul(_eth))).sqrt().sub(keyPriceStart_)).mul(1000000000000000000) / (keyPriceStep_);\n    }\n\n    /**\n       _keys数量的key对应的 eth总值 = n * 起始价 +  n*n*递增价/2 + n*递增价/2\n       按照原版 eth总值 = n * 起始价 +  n*n*递增价/2 少了一部分\n     * @dev calculates how much eth would be in contract given a number of keys\n     * @param _keys number of keys \"in contract\"\n     * @return eth that would exists\n     */\n    function eth(uint256 _keys)\n    public\n    pure\n    returns(uint256)\n    {\n        uint256 n = _keys / (1000000000000000000);\n        //correct\n        // return n.mul(keyPriceStart_).add((n.sq().mul(keyPriceStep_)) / (2)).add(n.mul(keyPriceStep_) / (2));\n        //original\n        return n.mul(keyPriceStart_).add((n.sq().mul(keyPriceStep_)) / (2));\n    }\n}\n\n//==============================================================================\n//  . _ _|_ _  _ |` _  _ _  _  .\n//  || | | (/_| ~|~(_|(_(/__\\  .\n//==============================================================================\ninterface otherFoMo3D {\n    function potSwap() external payable;\n}\n\ninterface DiviesInterface {\n    function deposit() external payable;\n}\n\ninterface JIincForwarderInterface {\n    function deposit() external payable returns(bool);\n    function status() external view returns(address, address, bool);\n    function startMigration(address _newCorpBank) external returns(bool);\n    function cancelMigration() external returns(bool);\n    function finishMigration() external returns(bool);\n    function setup(address _firstCorpBank) external;\n}\n\ninterface PlayerBookInterface {\n    function pIDxAddr_(address _addr) external view returns (uint256);\n    function getPlayerCount() external view returns (uint256);\n    function getPlayerID(address _addr) external returns (uint256);\n    function getPlayerName(uint256 _pID) external view returns (bytes32);\n    function getPlayerLAff(uint256 _pID) external view returns (uint256);\n    function getPlayerAddr(uint256 _pID) external view returns (address);\n    function getNameFee() external view returns (uint256);\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable returns(bool, uint256);\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable returns(bool, uint256);\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable returns(bool, uint256);\n}\n\n/**\n* @title -Name Filter- v0.1.9\n*/\n\nlibrary NameFilter {\n    /**\n     * @dev filters name strings\n     * -converts uppercase to lower case.\n     * -makes sure it does not start/end with a space\n     * -makes sure it does not contain multiple spaces in a row\n     * -cannot be only numbers\n     * -cannot start with 0x\n     * -restricts characters to A-Z, a-z, 0-9, and space.\n     * @return reprocessed string in bytes32 format\n     */\n    function nameFilter(string _input)\n    internal\n    pure\n    returns(bytes32)\n    {\n        bytes memory _temp = bytes(_input);\n        uint256 _length = _temp.length;\n\n        //sorry limited to 32 characters\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\n        // make sure it doesnt start with or end with space\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\n        // make sure first two characters are not 0x\n        if (_temp[0] == 0x30)\n        {\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\n        }\n\n        // create a bool to track if we have a non number character\n        bool _hasNonNumber;\n\n        // convert & check\n        for (uint256 i = 0; i < _length; i++)\n        {\n            // if its uppercase A-Z\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\n            {\n                // convert to lower case a-z\n                _temp[i] = byte(uint(_temp[i]) + 32);\n\n                // we have a non number\n                if (_hasNonNumber == false)\n                    _hasNonNumber = true;\n            } else {\n                require\n                (\n                // require character is a space\n                    _temp[i] == 0x20 ||\n                // OR lowercase a-z\n                (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\n                // or 0-9\n                (_temp[i] > 0x2f && _temp[i] < 0x3a),\n                    \"string contains invalid characters\"\n                );\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20)\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\n\n                // see if we have a character other than a number\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\n                    _hasNonNumber = true;\n            }\n        }\n\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\n\n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n}\n\n/**\n * @title SafeMath v0.1.9\n * @dev Math operations with safety checks that throw on error\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n * - added sqrt\n * - added sq\n * - added pwr\n * - changed asserts to requires with error log outputs\n * - removed div, its useless\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256 c)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        c = a * b;\n        require(c / a == b, \"SafeMath mul failed\");\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256)\n    {\n        require(b <= a, \"SafeMath sub failed\");\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b)\n    internal\n    pure\n    returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, \"SafeMath add failed\");\n        return c;\n    }\n\n    /**\n     * @dev gives square root of given x.\n     */\n    function sqrt(uint256 x)\n    internal\n    pure\n    returns (uint256 y)\n    {\n        uint256 z = ((add(x,1)) / 2);\n        y = x;\n        while (z < y)\n        {\n            y = z;\n            z = ((add((x / z),z)) / 2);\n        }\n    }\n\n    /**\n     * @dev gives square. multiplies x by x\n     */\n    function sq(uint256 x)\n    internal\n    pure\n    returns (uint256)\n    {\n        return (mul(x,x));\n    }\n\n    /**\n     * @dev x to the power of y\n     */\n    function pwr(uint256 x, uint256 y)\n    internal\n    pure\n    returns (uint256)\n    {\n        if (x==0)\n            return (0);\n        else if (y==0)\n            return (1);\n        else\n        {\n            uint256 z = x;\n            for (uint256 i=1; i < y; i++)\n                z = mul(z,x);\n            return (z);\n        }\n    }\n}",
  "bytecode": ""
}