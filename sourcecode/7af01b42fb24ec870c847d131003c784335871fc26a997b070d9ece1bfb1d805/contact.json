{
  "address": "0xab79c29008f763ba2c79414a1ae919d3bc46d664",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WorldClassSmartFarmToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-06-01\n*/\n\npragma solidity ^0.5.7;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error.\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\nlibrary StringUtils {\n    \n    function toAsciiString(address x) internal pure returns (string memory) {\n        bytes memory s = new bytes(40);\n        for (uint i = 0; i < 20; i++) {\n            byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n            byte hi = byte(uint8(b) / 16);\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\n            s[2*i] = _char(hi);\n            s[2*i+1] = _char(lo);            \n        }\n        return string(s);\n    }\n    \n    function _char(byte b) internal pure returns (byte c) {\n        if (uint8(b) < 10) return byte(uint8(b) + 0x30);\n        else return byte(uint8(b) + 0x57);\n    }\n    \n    function append(string memory a, string memory b) internal pure returns (string memory) {\n        return string(abi.encodePacked(a, b));\n    }\n    \n    function append3(string memory a, string memory b, string memory c) internal pure returns (string memory) {\n        return string(abi.encodePacked(a, b, c));\n    }\n    \n    function append4(string memory a, string memory b, string memory c, string memory d) internal pure returns (string memory) {\n        return string(abi.encodePacked(a, b, c, d));\n    }\n    \n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n\nlibrary IterableMap {\n    \n    struct IMap {\n        mapping(address => uint256) mapToData;\n        mapping(address => uint256) mapToIndex; // start with index 1\n        address[] indexes;\n    }\n    \n    function insert(IMap storage self, address _address, uint256 _value) internal returns (bool replaced) {\n      \n        require(_address != address(0));\n        \n        if(self.mapToIndex[_address] == 0){\n            \n            // add new\n            self.indexes.push(_address);\n            self.mapToIndex[_address] = self.indexes.length;\n            self.mapToData[_address] = _value;\n            return false;\n        }\n        \n        // replace\n        self.mapToData[_address] = _value;\n        return true;\n    }\n    \n    function remove(IMap storage self, address _address) internal returns (bool success) {\n       \n        require(_address != address(0));\n        \n        // not existing\n        if(self.mapToIndex[_address] == 0){\n            return false;   \n        }\n        \n        uint256 deleteIndex = self.mapToIndex[_address];\n        if(deleteIndex <= 0 || deleteIndex > self.indexes.length){\n            return false;\n        }\n       \n         // if index to be deleted is not the last index, swap position.\n        if (deleteIndex < self.indexes.length) {\n            // swap \n            self.indexes[deleteIndex-1] = self.indexes[self.indexes.length-1];\n            self.mapToIndex[self.indexes[deleteIndex-1]] = deleteIndex;\n        }\n        self.indexes.length -= 1;\n        delete self.mapToData[_address];\n        delete self.mapToIndex[_address];\n       \n        return true;\n    }\n  \n    function contains(IMap storage self, address _address) internal view returns (bool exists) {\n        return self.mapToIndex[_address] > 0;\n    }\n      \n    function size(IMap storage self) internal view returns (uint256) {\n        return self.indexes.length;\n    }\n  \n    function get(IMap storage self, address _address) internal view returns (uint256) {\n        return self.mapToData[_address];\n    }\n\n    // start with index 0\n    function getKey(IMap storage self, uint256 _index) internal view returns (address) {\n        \n        if(_index < self.indexes.length){\n            return self.indexes[_index];\n        }\n        return address(0);\n    }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n\ncontract ERC20Votable is ERC20{\n    \n    // Use itmap for all functions on the struct\n    using IterableMap for IterableMap.IMap;\n    using SafeMath for uint256;\n    \n    // event\n    event MintToken(uint256 sessionID, address indexed beneficiary, uint256 amount);\n    event MintFinished(uint256 sessionID);\n    event BurnToken(uint256 sessionID, address indexed beneficiary, uint256 amount);\n    event AddAuthority(uint256 sessionID, address indexed authority);\n    event RemoveAuthority(uint256 sessionID, address indexed authority);\n    event ChangeRequiredApproval(uint256 sessionID, uint256 from, uint256 to);\n    \n    event VoteAccept(uint256 sessionID, address indexed authority);\n    event VoteReject(uint256 sessionID, address indexed authority);\n    \n    // constant\n    uint256 constant NUMBER_OF_BLOCK_FOR_SESSION_EXPIRE = 5760;\n\n    // Declare an iterable mapping\n    IterableMap.IMap authorities;\n    \n    bool public isMintingFinished;\n    \n    struct Topic {\n        uint8 BURN;\n        uint8 MINT;\n        uint8 MINT_FINISHED;\n        uint8 ADD_AUTHORITY;\n        uint8 REMOVE_AUTHORITY;\n        uint8 CHANGE_REQUIRED_APPROVAL;\n    }\n    \n    struct Session {\n        uint256 id;\n        uint8 topic;\n        uint256 blockNo;\n        uint256 referNumber;\n        address referAddress;\n        uint256 countAccept;\n        uint256 countReject;\n       // number of approval from authories to accept the current session\n        uint256 requireAccept;\n    }\n    \n    ERC20Votable.Topic topic;\n    ERC20Votable.Session session;\n    \n    constructor() public {\n        \n        topic.BURN = 1;\n        topic.MINT = 2;\n        topic.MINT_FINISHED = 3;\n        topic.ADD_AUTHORITY = 4;\n        topic.REMOVE_AUTHORITY = 5;\n        topic.CHANGE_REQUIRED_APPROVAL = 6;\n        \n        session.id = 1;\n        session.requireAccept = 1;\n    \n        authorities.insert(msg.sender, session.id);\n    }\n    \n    /**\n     * @dev modifier\n     */\n    modifier onlyAuthority() {\n        require(authorities.contains(msg.sender));\n        _;\n    }\n    \n    modifier onlySessionAvailable() {\n        require(_isSessionAvailable());\n        _;\n    }\n    \n     modifier onlyHasSession() {\n        require(!_isSessionAvailable());\n        _;\n    }\n    \n    function isAuthority(address _address) public view returns (bool){\n        return authorities.contains(_address);\n    }\n\n    /**\n     * @dev get session detail\n     */\n    function getSessionName() public view returns (string memory){\n        \n        bool isSession = !_isSessionAvailable();\n        \n        if(isSession){\n            return (_getSessionName());\n        }\n        \n        return \"None\";\n    }\n    \n    function getSessionExpireAtBlockNo() public view returns (uint256){\n        \n        bool isSession = !_isSessionAvailable();\n        \n        if(isSession){\n            return (session.blockNo.add(NUMBER_OF_BLOCK_FOR_SESSION_EXPIRE));\n        }\n        \n        return 0;\n    }\n    \n    function getSessionVoteAccept() public view returns (uint256){\n      \n        bool isSession = !_isSessionAvailable();\n        \n        if(isSession){\n            return session.countAccept;\n        }\n        \n        return 0;\n    }\n    \n    function getSessionVoteReject() public view returns (uint256){\n      \n        bool isSession = !_isSessionAvailable();\n        \n        if(isSession){\n            return session.countReject;\n        }\n        \n        return 0;\n    }\n    \n    function getSessionRequiredAcceptVote() public view returns (uint256){\n      \n        return session.requireAccept;\n    }\n    \n    function getTotalAuthorities() public view returns (uint256){\n      \n        return authorities.size();\n    }\n    \n\n    \n    /**\n     * @dev create session\n     */\n     \n    function createSessionMintToken(address _beneficiary, uint256 _amount) public onlyAuthority onlySessionAvailable {\n        \n        require(!isMintingFinished);\n        require(_amount > 0);\n        require(_beneficiary != address(0));\n       \n        _createSession(topic.MINT);\n        session.referNumber = _amount;\n        session.referAddress = _beneficiary;\n    }\n    \n    function createSessionMintFinished() public onlyAuthority onlySessionAvailable {\n        \n        require(!isMintingFinished);\n        _createSession(topic.MINT_FINISHED);\n        session.referNumber = 0;\n        session.referAddress = address(0);\n    }\n    \n    function createSessionBurnAuthorityToken(address _authority, uint256 _amount) public onlyAuthority onlySessionAvailable {\n        \n        require(_amount > 0);\n        require(_authority != address(0));\n        require(isAuthority(_authority));\n       \n        _createSession(topic.BURN);\n        session.referNumber = _amount;\n        session.referAddress = _authority;\n    }\n    \n    function createSessionAddAuthority(address _authority) public onlyAuthority onlySessionAvailable {\n        \n        require(!authorities.contains(_authority));\n        \n        _createSession(topic.ADD_AUTHORITY);\n        session.referNumber = 0;\n        session.referAddress = _authority;\n    }\n    \n    function createSessionRemoveAuthority(address _authority) public onlyAuthority onlySessionAvailable {\n        \n        require(authorities.contains(_authority));\n        \n        // at least 1 authority remain\n        require(authorities.size() > 1);\n      \n        _createSession(topic.REMOVE_AUTHORITY);\n        session.referNumber = 0;\n        session.referAddress = _authority;\n    }\n    \n    function createSessionChangeRequiredApproval(uint256 _to) public onlyAuthority onlySessionAvailable {\n        \n        require(_to != session.requireAccept);\n        require(_to <= authorities.size());\n\n        _createSession(topic.CHANGE_REQUIRED_APPROVAL);\n        session.referNumber = _to;\n        session.referAddress = address(0);\n    }\n    \n    /**\n     * @dev vote\n     */\n    function voteAccept() public onlyAuthority onlyHasSession {\n        \n        // already vote\n        require(authorities.get(msg.sender) != session.id);\n        \n        authorities.insert(msg.sender, session.id);\n        session.countAccept = session.countAccept.add(1);\n        \n        emit VoteAccept(session.id, session.referAddress);\n        \n        // execute\n        if(session.countAccept >= session.requireAccept){\n            \n            if(session.topic == topic.BURN){\n                \n                _burnToken();\n                \n            }else if(session.topic == topic.MINT){\n                \n                _mintToken();\n                \n            }else if(session.topic == topic.MINT_FINISHED){\n                \n                _finishMinting();\n                \n            }else if(session.topic == topic.ADD_AUTHORITY){\n                \n                _addAuthority();    \n            \n            }else if(session.topic == topic.REMOVE_AUTHORITY){\n                \n                _removeAuthority();  \n                \n            }else if(session.topic == topic.CHANGE_REQUIRED_APPROVAL){\n                \n                _changeRequiredApproval();  \n                \n            }\n        }\n    }\n    \n    function voteReject() public onlyAuthority onlyHasSession {\n        \n        // already vote\n        require(authorities.get(msg.sender) != session.id);\n        \n        authorities.insert(msg.sender, session.id);\n        session.countReject = session.countReject.add(1);\n        \n        emit VoteReject(session.id, session.referAddress);\n    }\n    \n    /**\n     * @dev private\n     */\n    function _createSession(uint8 _topic) internal {\n        \n        session.topic = _topic;\n        session.countAccept = 0;\n        session.countReject = 0;\n        session.id = session.id.add(1);\n        session.blockNo = block.number;\n    }\n    \n    function _getSessionName() internal view returns (string memory){\n        \n        string memory topicName = \"\";\n        \n        if(session.topic == topic.BURN){\n          \n           topicName = StringUtils.append3(\"Burn \", StringUtils.uint2str(session.referNumber) , \" token(s)\");\n           \n        }else if(session.topic == topic.MINT){\n          \n           topicName = StringUtils.append4(\"Mint \", StringUtils.uint2str(session.referNumber) , \" token(s) to address 0x\", StringUtils.toAsciiString(session.referAddress));\n         \n        }else if(session.topic == topic.MINT_FINISHED){\n          \n           topicName = \"Finish minting\";\n         \n        }else if(session.topic == topic.ADD_AUTHORITY){\n          \n           topicName = StringUtils.append3(\"Add 0x\", StringUtils.toAsciiString(session.referAddress), \" to authorities\");\n           \n        }else if(session.topic == topic.REMOVE_AUTHORITY){\n            \n            topicName = StringUtils.append3(\"Remove 0x\", StringUtils.toAsciiString(session.referAddress), \" from authorities\");\n            \n        }else if(session.topic == topic.CHANGE_REQUIRED_APPROVAL){\n            \n            topicName = StringUtils.append4(\"Change approval from \", StringUtils.uint2str(session.requireAccept), \" to \", StringUtils.uint2str(session.referNumber));\n            \n        }\n        \n        return topicName;\n    }\n    \n    function _isSessionAvailable() internal view returns (bool){\n        \n        // vote result accept\n        if(session.countAccept >= session.requireAccept) return true;\n        \n         // vote result reject\n        if(session.countReject > authorities.size().sub(session.requireAccept)) return true;\n        \n        // vote expire (1 day)\n        if(block.number.sub(session.blockNo) > NUMBER_OF_BLOCK_FOR_SESSION_EXPIRE) return true;\n        \n        return false;\n    }   \n    \n    function _addAuthority() internal {\n        \n        authorities.insert(session.referAddress, session.id);\n        emit AddAuthority(session.id, session.referAddress);\n    }\n    \n    function _removeAuthority() internal {\n        \n        authorities.remove(session.referAddress);\n        if(authorities.size() < session.requireAccept){\n            emit ChangeRequiredApproval(session.id, session.requireAccept, authorities.size());\n            session.requireAccept = authorities.size();\n        }\n        emit RemoveAuthority(session.id, session.referAddress);\n    }\n    \n    function _changeRequiredApproval() internal {\n        \n        emit ChangeRequiredApproval(session.id, session.requireAccept, session.referNumber);\n        session.requireAccept = session.referNumber;\n        session.countAccept = session.requireAccept;\n    }\n    \n    function _mintToken() internal {\n        \n        require(!isMintingFinished);\n        _mint(session.referAddress, session.referNumber);\n        emit MintToken(session.id, session.referAddress, session.referNumber);\n    }\n    \n    function _finishMinting() internal {\n        \n        require(!isMintingFinished);\n        isMintingFinished = true;\n        emit MintFinished(session.id);\n    }\n    \n    function _burnToken() internal {\n        \n        _burn(session.referAddress, session.referNumber);\n        emit BurnToken(session.id, session.referAddress, session.referNumber);\n    }\n}\n\ncontract WorldClassSmartFarmToken is ERC20Detailed, ERC20Votable {\n    constructor (string memory name, string memory symbol, uint8 decimals)\n        public\n        ERC20Detailed(name, symbol, decimals)\n    {\n        \n    }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSessionVoteAccept\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"createSessionAddAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSessionRequiredAcceptVote\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAuthority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSessionVoteReject\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSessionName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createSessionMintFinished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalAuthorities\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"createSessionRemoveAuthority\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteReject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"createSessionChangeRequiredApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_authority\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createSessionBurnAuthorityToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSessionExpireAtBlockNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteAccept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createSessionMintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"}],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AddAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"RemoveAuthority\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"ChangeRequiredApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"VoteAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sessionID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"VoteReject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a5743534620546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045743534600000000000000000000000000000000000000000000000000000000"
}