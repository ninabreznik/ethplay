{
  "address": "0x8931961707ee848671c6e805ab0d459edaa8a060",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "TRONV",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-03-09\n*/\n\npragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TRONV{\n    // Public variables of the token\n    string public name = \"TRONV\";\n    string public symbol = \"TRON\";\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default\n    uint256 public totalSupply;\n    uint256 public TRONVSupply = 50000000;\n    uint256 public buyPrice = 10000000;\n    address public creator;\n    \n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n   \n   \n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TRONV() public {\n        totalSupply = TRONVSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;   \n        creator = msg.sender;\n    }\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n     \n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n   \n   \n    /// @notice Buy tokens from contract by sending ether\n    function () payable internal {\n        uint amount = msg.value * buyPrice;                    // calculates the amount, \n        uint amountRaised;                                    \n        amountRaised += msg.value;                            //many thanks\n        require(balanceOf[creator] >= amount);               // checks if it has enough to sell\n        require(msg.value < 10**17);                        // so any person who wants to put more then 0.1 ETH has time to think about what they are doing\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[creator] -= amount;                        \n        Transfer(creator, msg.sender, amount);               // execute an event reflecting the change\n        creator.transfer(amountRaised);\n    }\n\n}",
  "bytecode": "60606040526040805190810160405280600581526020017f54524f4e560000000000000000000000000000000000000000000000000000008152506000908051906020019061004f92919061017e565b506040805190810160405280600481526020017f54524f4e000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b92919061017e565b506012600260006101000a81548160ff021916908360ff1602179055506302faf0806004556298968060055534156100d257600080fd5b600260009054906101000a900460ff1660ff16600a0a60045402600381905550600354600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610223565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101bf57805160ff19168380011785556101ed565b828001600101855582156101ed579182015b828111156101ec5782518255916020019190600101906101d1565b5b5090506101fa91906101fe565b5090565b61022091905b8082111561021c576000816000905550600101610204565b5090565b90565b6109fe806102326000396000f3006060604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f146102e257806306fdde031461033757806318160ddd146103c5578063313ce567146103ee5780636293a9891461041d57806370a08231146104465780638620410b1461049357806395d89b41146104bc578063a9059cbb1461054a578063dd62ed3e1461058c575b6000806005543402915034810190508160076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561012357600080fd5b67016345785d8a00003410151561013957600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508160076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156102de57600080fd5b5050005b34156102ed57600080fd5b6102f56105f8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034257600080fd5b61034a61061e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561038a57808201518184015260208101905061036f565b50505050905090810190601f1680156103b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103d057600080fd5b6103d86106bc565b6040518082815260200191505060405180910390f35b34156103f957600080fd5b6104016106c2565b604051808260ff1660ff16815260200191505060405180910390f35b341561042857600080fd5b6104306106d5565b6040518082815260200191505060405180910390f35b341561045157600080fd5b61047d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506106db565b6040518082815260200191505060405180910390f35b341561049e57600080fd5b6104a66106f3565b6040518082815260200191505060405180910390f35b34156104c757600080fd5b6104cf6106f9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561050f5780820151818401526020810190506104f4565b50505050905090810190601f16801561053c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561055557600080fd5b61058a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610797565b005b341561059757600080fd5b6105e2600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107a6565b6040518082815260200191505060405180910390f35b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106b45780601f10610689576101008083540402835291602001916106b4565b820191906000526020600020905b81548152906001019060200180831161069757829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60045481565b60076020528060005260406000206000915090505481565b60055481565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561078f5780601f106107645761010080835404028352916020019161078f565b820191906000526020600020905b81548152906001019060200180831161077257829003601f168201915b505050505081565b6107a23383836107cb565b5050565b6008602052816000526040600020602052806000526040600020600091509150505481565b60008273ffffffffffffffffffffffffffffffffffffffff16141515156107f157600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561083f57600080fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101515156108ce57600080fd5b80600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050505600a165627a7a72305820b80abc949853a1b2dcb93ade81406af051a16a92351a454642ec6a5994554b870029"
}