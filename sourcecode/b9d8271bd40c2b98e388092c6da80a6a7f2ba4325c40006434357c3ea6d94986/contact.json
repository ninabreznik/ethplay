{
  "address": "0xdb13025b219db5e4529f48b65ff009a26b6ae733",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Ubricoin Token",
  "contractName": "Ubricoin",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-20\n*/\n\npragma solidity ^0.4.25;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function balanceOf(address _owner) external view returns (uint256);\n  function allowance(address _owner, address spender) external view returns (uint256);\n  function transfer(address to, uint256 value) external returns (bool);\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n  function approve(address spender, uint256 value) external returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner=0xE2d9b8259F74a46b5E3f74A30c7867be0a5f5185;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n constructor() internal {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /// @dev counter to allow mutex lock with only one SSTORE operation\n  uint256 private _guardCounter;\n\n  constructor() internal {\n    // The counter starts at one to prevent changing it from zero to a non-zero\n    // value, which is a more expensive operation.\n    _guardCounter = 1;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    _guardCounter += 1;\n    uint256 localCounter = _guardCounter;\n    _;\n    require(localCounter == _guardCounter);\n  }\n\n}\ncontract Haltable is Ownable  {\n    \n  bool public halted;\n  \n   modifier stopInEmergency {\n    if (halted) revert();\n    _;\n  }\n\n  modifier stopNonOwnersInEmergency {\n    if (halted && msg.sender != owner) revert();\n    _;\n  }\n\n  modifier onlyInEmergency {\n    if (!halted) revert();\n    _;\n  }\n\n  // called by the owner on emergency, triggers stopped state\n  function halt() external onlyOwner {\n    halted = true;\n  }\n\n  // called by the owner on end of emergency, returns to normal state\n  function unhalt() external onlyOwner onlyInEmergency {\n    halted = false;\n  }\n\n}\ncontract Ubricoin is IERC20,Ownable,ReentrancyGuard,Haltable{\n  \n  using SafeMath for uint256;\n\n  // UBN Token parameters\n  string public name = 'Ubricoin';\n  string public symbol = 'UBN';\n  string public version = '2.0';\n  uint256 public constant RATE = 1000;  //1 ether = 1000 Ubricoins tokens\n  \n  // min tokens to be a holder, 0.1\n  uint256 public constant MIN_HOLDER_TOKENS = 10 ** uint256(decimals - 1);\n  \n  // 18 decimals is the strongly suggested default, avoid changing it\n  uint8   public constant decimals = 18;\n  uint256 public constant decimalFactor = 10 ** uint256(decimals);\n  uint256 public totalSupply_;           // amount of tokens already sold/supply                                 \n  uint256 public constant TOTAL_SUPPLY = 10000000000 * decimalFactor; // The initialSupply or totalSupply of  100% Released at Token Distribution (TD)\n  uint256 public constant SALES_SUPPLY =  1300000000 * decimalFactor; // 2.30% Released at Token Distribution (TD)\n  \n  // Funds supply constants // tokens to be Distributed at every stage \n  uint256 public AVAILABLE_FOUNDER_SUPPLY  =  1500000000 * decimalFactor; // 17.3% Released at TD \n  uint256 public AVAILABLE_AIRDROP_SUPPLY  =  2000000000 * decimalFactor; // 22.9% Released at TD/Eco System Allocated\n  uint256 public AVAILABLE_OWNER_SUPPLY    =  2000000000 * decimalFactor; // 22.9% Released at TD \n  uint256 public AVAILABLE_TEAMS_SUPPLY    =  3000000000 * decimalFactor; // 34.5% Released at TD \n  uint256 public AVAILABLE_BONUS_SUPPLY    =   200000000 * decimalFactor; // 0.10% Released at TD \n  uint256 public claimedTokens = 0;\n  \n  // Funds supply addresses constants // tokens distribution\n  address public constant AVAILABLE_FOUNDER_SUPPLY_ADDRESS = 0xAC762012330350DDd97Cc64B133536F8E32193a8; //AVAILABLE_FOUNDER_SUPPLY_ADDRESS 1\n  address public constant AVAILABLE_AIRDROP_SUPPLY_ADDRESS = 0x28970854Bfa61C0d6fE56Cc9daAAe5271CEaEC09; //AVAILABLE_AIRDROP_SUPPLY_ADDRESS 2 Eco system Allocated\n  address public constant AVAILABLE_OWNER_SUPPLY_ADDRESS = 0xE2d9b8259F74a46b5E3f74A30c7867be0a5f5185;   //AVAILABLE_OWNER_SUPPLY_ADDRESS   3\n  address public constant AVAILABLE_BONUS_SUPPLY_ADDRESS = 0xDE59297Bf5D1D1b9d38D8F50e55A270eb9aE136e;   //AVAILABLE_BONUS1_SUPPLY_ADDRESS  4\n  address public constant AVAILABLE_TEAMS_SUPPLY_ADDRESS = 0x9888375f4663891770DaaaF9286d97d44FeFC82E;   //AVAILABLE_RESERVE_TEAM_SUPPLY_ADDRESS 5\n\n  // Token holders\n  address[] public holders;\n  \n\n  // ICO address\n  address public icoAddress;\n  mapping (address => uint256) balances;  // This creates an array with all balances\n  mapping (address => mapping (address => uint256)) internal allowed;\n  \n  // Keeps track of whether or not an Ubricoin airdrop has been made to a particular address\n  mapping (address => bool) public airdrops;\n  \n  mapping (address => uint256) public holderNumber; // Holders number\n  \n  // This generates a public event on the blockchain that will notify clients\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n  event TransferredToken(address indexed to, uint256 value);\n  event FailedTransfer(address indexed to, uint256 value);\n  // This notifies clients about the amount burnt , only admin is able to burn the contract\n  event Burn(address from, uint256 value); \n  event AirDropped ( address[] _recipient, uint256 _amount, uint256 claimedTokens);\n  event AirDrop_many ( address[] _recipient, uint256[] _amount, uint256 claimedTokens);\n  \n \n    /**\n     * @dev Constructor that gives a portion of all existing tokens to various addresses.\n     * @dev Distribute founder, airdrop,owner, reserve_team and bonus_supply tokens\n     * @dev and Ico address for the remaining tokens\n     */\n  constructor () public  { \n      \n        // Allocate tokens to the available_founder_supply_address fund 1\n        balances[AVAILABLE_FOUNDER_SUPPLY_ADDRESS] = AVAILABLE_FOUNDER_SUPPLY;\n        holders.push(AVAILABLE_FOUNDER_SUPPLY_ADDRESS);\n        emit Transfer(0x0, AVAILABLE_FOUNDER_SUPPLY_ADDRESS, AVAILABLE_FOUNDER_SUPPLY);\n\n        // Allocate tokens to the available_airdrop_supply_address fund 2 eco system allocated\n        balances[AVAILABLE_AIRDROP_SUPPLY_ADDRESS] = AVAILABLE_AIRDROP_SUPPLY;\n        holders.push(AVAILABLE_AIRDROP_SUPPLY_ADDRESS);\n        emit Transfer(0x0, AVAILABLE_AIRDROP_SUPPLY_ADDRESS, AVAILABLE_AIRDROP_SUPPLY);\n\n        // Allocate tokens to the available_owner_supply_address fund 3\n        balances[AVAILABLE_OWNER_SUPPLY_ADDRESS] = AVAILABLE_OWNER_SUPPLY;\n        holders.push(AVAILABLE_OWNER_SUPPLY_ADDRESS);\n        emit Transfer(0x0, AVAILABLE_OWNER_SUPPLY_ADDRESS, AVAILABLE_OWNER_SUPPLY);\n\n        // Allocate tokens to the available_reserve_team_supply_address fund 4\n        balances[AVAILABLE_TEAMS_SUPPLY_ADDRESS] = AVAILABLE_TEAMS_SUPPLY;\n        holders.push(AVAILABLE_TEAMS_SUPPLY_ADDRESS);\n        emit Transfer(0x0, AVAILABLE_TEAMS_SUPPLY_ADDRESS, AVAILABLE_TEAMS_SUPPLY);\n        \n        // Allocate tokens to the available_reserve_team_supply_address fund 5\n        balances[AVAILABLE_BONUS_SUPPLY_ADDRESS] = AVAILABLE_BONUS_SUPPLY;\n        holders.push(AVAILABLE_BONUS_SUPPLY_ADDRESS);\n        emit Transfer(0x0, AVAILABLE_BONUS_SUPPLY_ADDRESS, AVAILABLE_BONUS_SUPPLY);\n\n        totalSupply_ = TOTAL_SUPPLY.sub(SALES_SUPPLY);\n        \n    }\n    \n   /**\n     * @dev Function fallback/payable to buy tokens from contract by sending ether.\n     * @notice Buy tokens from contract by sending ether\n     * @dev This are the tokens allocated for sale's supply\n     */\n  function () payable nonReentrant external  {\n      \n    require(msg.data.length == 0);\n    require(msg.value > 0);\n    \n      uint256 tokens = msg.value.mul(RATE); // calculates the aamount\n      balances[msg.sender] = balances[msg.sender].add(tokens);\n      totalSupply_ = totalSupply_.add(tokens);\n      owner.transfer(msg.value);  //make transfer\n      \n    }\n\n    /**\n     * @dev set ICO address and allocate sale supply to it\n     *      Tokens left for payment using ethers\n     */\n  function setICO(address _icoAddress) public onlyOwner {\n      \n    require(_icoAddress != address(0));\n    require(icoAddress  == address(0));\n    require(totalSupply_ == TOTAL_SUPPLY.sub(SALES_SUPPLY));\n      \n       // Allocate tokens to the ico contract\n       balances[_icoAddress] = SALES_SUPPLY;\n       emit Transfer(0x0, _icoAddress, SALES_SUPPLY);\n\n       icoAddress = _icoAddress;\n       totalSupply_ = TOTAL_SUPPLY;\n       \n    }\n\n    /**\n     * @dev total number of tokens in existence\n     */\n  function totalSupply() public view returns (uint256) {\n      \n      return totalSupply_;\n      \n    }\n    \n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n      \n      return balances[_owner];\n      \n    }\n  \n\n   /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining ) {\n      \n      return allowed[_owner][_spender];\n      \n    }\n    \n    /**\n     * Internal transfer, only can be called by this contract\n     */\n  function _transfer(address _from, address _to, uint256 _value) internal {\n      \n    require(_to != 0x0);                 // Prevent transfer to 0x0 address. Use burn() instead\n    require(balances[_from] >= _value);  // Check if the sender has enough\n    require(balances[_to] + _value >= balances[_to]);             // Check for overflows\n     \n      uint256 previousBalances = balances[_from] + balances[_to];   // Save this for an assertion in the future\n      balances[_from] -= _value;   // Subtract from the sender\n      balances[_to] += _value;     // Add the same to the recipient\n      emit Transfer(_from, _to, _value);\n      \n      // Asserts are used to use static analysis to find bugs in your code. They should never fail\n      assert(balances[_from] + balances[_to] == previousBalances);  \n      \n    }\n    \n   \n    /**\n     * Standard transfer function \n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n      \n       require(balances[msg.sender] > 0);                     \n       require(balances[msg.sender] >= _value);  // Check if the sender has enough  \n       require(_to != address(0x0));             // Prevent transfer to 0x0 address. Use burn() instead\n       \n       require(_value > 0);\t\n       require(_to != msg.sender);               // Check if sender and receiver is not same\n       require(_value <= balances[msg.sender]);\n\n       // SafeMath.sub will throw if there is not enough balance.\n       balances[msg.sender] = balances[msg.sender].sub(_value); // Subtract value from sender\n       balances[_to] = balances[_to].add(_value);               // Add the value to the receiver\n       emit Transfer(msg.sender, _to, _value);                  // Notify all clients about the transfer events\n       return true;\n       \n    }\n    \n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n      \n    require(_to != address(0x0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);  // Check allowance\n\n      balances[_from] = balances[_from].sub(_value);\n      balances[_to] = balances[_to].add(_value);\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n      emit Transfer(_from, _to, _value);\n      return true;\n      \n   }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n    */\n  function approve(address _spender, uint256 _value) public returns (bool success) {\n      \n      allowed[msg.sender][_spender] = _value;\n      emit  Approval(msg.sender, _spender, _value);\n      return true;\n      \n    }\n    \n  // get holders count\n  function getHoldersCount() public view returns (uint256) {\n      \n        return holders.length;\n    }\n    \n  // preserve holders list\n  function preserveHolders(address _from, address _to, uint256 _value) internal {\n      \n        if (balances[_from].sub(_value) < MIN_HOLDER_TOKENS) \n            removeHolder(_from);\n        if (balances[_to].add(_value) >= MIN_HOLDER_TOKENS) \n            addHolder(_to);   \n    }\n\n  // remove holder from the holders list\n  function removeHolder(address _holder) internal {\n      \n        uint256 _number = holderNumber[_holder];\n\n        if (_number == 0 || holders.length == 0 || _number > holders.length)\n            return;\n\n        uint256 _index = _number.sub(1);\n        uint256 _lastIndex = holders.length.sub(1);\n        address _lastHolder = holders[_lastIndex];\n\n        if (_index != _lastIndex) {\n            holders[_index] = _lastHolder;\n            holderNumber[_lastHolder] = _number;\n        }\n\n        holderNumber[_holder] = 0;\n        holders.length = _lastIndex;\n    } \n\n  // add holder to the holders list\n  function addHolder(address _holder) internal {\n      \n        if (holderNumber[_holder] == 0) {\n            holders.push(_holder);\n            holderNumber[_holder] = holders.length;\n            \n        }\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n function _burn(address account, uint256 value) external onlyOwner {\n     \n      require(balances[msg.sender] >= value);   // Check if the sender has enough\n      balances[msg.sender] -= value;            // Subtract from the sender\n      totalSupply_ -= value;                    // Updates totalSupply\n      emit Burn(msg.sender, value);\n      //return true;\n      \n      require(account != address(0x0));\n\n      totalSupply_ = totalSupply_.sub(value);\n      balances[account] = balances[account].sub(value);\n      emit Transfer(account, address(0X0), value);\n     \n    }\n    \n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n  function _burnFrom(address account, uint256 value) external onlyOwner {\n      \n      require(balances[account] >= value);               // Check if the targeted balance is enough\n      require(value <= allowed[account][msg.sender]);    // Check allowance\n      balances[account] -= value;                        // Subtract from the targeted balance\n      allowed[account][msg.sender] -= value;             // Subtract from the sender's allowance\n      totalSupply_ -= value;                             // Update totalSupply\n      emit Burn(account, value);\n      // return true; \n      \n      allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\n      emit Burn(account, value);\n      emit Approval(account, msg.sender, allowed[account][msg.sender]);\n      \n    }\n    \n  function validPurchase() internal returns (bool) {\n      \n      bool lessThanMaxInvestment = msg.value <= 1000 ether; // change the value to whatever you need\n      return validPurchase() && lessThanMaxInvestment;\n      \n    }\n    \n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param target The account that will receive the created tokens.\n     * @param mintedAmount The amount that will be created.\n     * @dev  perform a minting/create new UBN's for new allocations\n     * @param  target is the address to mint tokens to\n     * \n     */\n  function mintToken(address target, uint256 mintedAmount) public onlyOwner {\n      \n      balances[target] += mintedAmount;\n      totalSupply_ += mintedAmount;\n      \n      emit Transfer(0, owner, mintedAmount);\n      emit Transfer(owner, target, mintedAmount);\n      \n    }\n    \n    /**\n    * @dev perform a transfer of allocations\n    * @param _recipient is a list of recipients\n    * \n    * Below function can be used when you want to send every recipeint with different number of tokens\n    * \n    */\n  function airDrop_many(address[] _recipient, uint256[] _amount) public onlyOwner {\n        \n        require(msg.sender == owner);\n        require(_recipient.length == _amount.length);\n        uint256 amount = _amount[i] * uint256(decimalFactor);\n        uint256 airdropped;\n    \n        for (uint i=0; i < _recipient.length; i++) {\n           if (!airdrops[_recipient[i]]) {\n                airdrops[_recipient[i]] = true;\n                require(Ubricoin.transfer(_recipient[i], _amount[i] * decimalFactor));\n                //Ubricoin.transfer(_recipient[i], _amount[i]);\n                airdropped = airdropped.add(amount );\n            } else{\n                \n                 emit FailedTransfer(_recipient[i], airdropped); \n        }\n        \n    AVAILABLE_AIRDROP_SUPPLY = AVAILABLE_AIRDROP_SUPPLY.sub(airdropped);\n    //totalSupply_ = totalSupply_.sub(airdropped);\n    claimedTokens = claimedTokens.add(airdropped);\n    emit AirDrop_many(_recipient, _amount, claimedTokens);\n    \n        }\n    }\n    \n   /**\n    * @dev perform a transfer of allocations\n    * @param _recipient is a list of recipients\n    * \n    * this function can be used when you want to send same number of tokens to all the recipients\n    * \n    */\n  function airDrop(address[] _recipient, uint256 _amount) public onlyOwner {\n      \n        require(_amount > 0);\n        uint256 airdropped;\n        uint256 amount = _amount * uint256(decimalFactor);\n        for (uint256 index = 0; index < _recipient.length; index++) {\n            if (!airdrops[_recipient[index]]) {\n                airdrops[_recipient[index]] = true;\n                require(Ubricoin.transfer(_recipient[index], amount * decimalFactor ));\n                airdropped = airdropped.add(amount );\n            }else{\n            \n            emit FailedTransfer(_recipient[index], airdropped); \n        }\n    }\n        \n    AVAILABLE_AIRDROP_SUPPLY = AVAILABLE_AIRDROP_SUPPLY.sub(airdropped);\n    //totalSupply_ = totalSupply_.sub(airdropped);\n    claimedTokens = claimedTokens.add(airdropped);\n    emit AirDropped(_recipient, _amount, claimedTokens);\n    \n    }\n    \n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_FOUNDER_SUPPLY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_BONUS_SUPPLY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_AIRDROP_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_FOUNDER_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_TEAMS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_BONUS_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_OWNER_SUPPLY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SALES_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHoldersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_TEAMS_SUPPLY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_AIRDROP_SUPPLY_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdrops\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"_burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoAddress\",\"type\":\"address\"}],\"name\":\"setICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airDrop_many\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_HOLDER_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AVAILABLE_OWNER_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferredToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_recipient\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"claimedTokens\",\"type\":\"uint256\"}],\"name\":\"AirDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_recipient\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"claimedTokens\",\"type\":\"uint256\"}],\"name\":\"AirDrop_many\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "60008054600160a060020a03191673e2d9b8259f74a46b5e3f74a30c7867be0a5f518517905560c0604052600860808190527f55627269636f696e00000000000000000000000000000000000000000000000060a0908152620000669160039190620004b0565b506040805180820190915260038082527f55424e00000000000000000000000000000000000000000000000000000000006020909201918252620000ad91600491620004b0565b506040805180820190915260038082527f322e3000000000000000000000000000000000000000000000000000000000006020909201918252620000f491600591620004b0565b506b04d8c55aefb8c05b5c0000006007556b06765c793fa10079d000000060088190556009556b09b18ab5df7180b6b8000000600a556aa56fa5b99019a5c8000000600b556000600c553480156200014b57600080fd5b506000805433600160a060020a0319918216178255600180805560078054600f60209081527fb6cd2a33a564eabc74fdae75cd5164196c68bd13bb14f254474836bb3398e7a191909155600d80549384018155855260008051602062001f02833981519152909201805473ac762012330350ddd97cc64b133536f8e32193a894168417905554604080519182525192939260008051602062001f22833981519152929181900390910190a360088054600f60209081527f47c43e76d0b251ec1523c45274bee8b90356c3e5787bc884f72bc465bc123a2c91909155600d8054600181018255600091825260008051602062001f02833981519152018054600160a060020a0319167328970854bfa61c0d6fe56cc9daaae5271ceaec0990811790915592546040805191825251919260008051602062001f2283398151915292918290030190a360098054600f60209081527f579aeb1a9f25d49be6afb2d2539e774ac8efb5ddb72f8061ea989c1f41b2901e91909155600d8054600181018255600091825260008051602062001f02833981519152018054600160a060020a03191673e2d9b8259f74a46b5e3f74a30c7867be0a5f518590811790915592546040805191825251919260008051602062001f2283398151915292918290030190a3600a8054600f60209081527fc8cc0923e26065f45e8bc7f1eab33448b4dece5675c503db4f4a521076ce3c1291909155600d8054600181018255600091825260008051602062001f02833981519152018054600160a060020a031916739888375f4663891770daaaf9286d97d44fefc82e90811790915592546040805191825251919260008051602062001f2283398151915292918290030190a3600b8054600f60209081527fa20cfc11db55039657f2a958d5887a848da78f0256636e9d9ff3fc046c0b7f6c91909155600d8054600181018255600091825260008051602062001f02833981519152018054600160a060020a03191673de59297bf5d1d1b9d38d8f50e55a270eb9ae136e90811790915592546040805191825251919260008051602062001f2283398151915292918290030190a3620004946b204fce5e3e250261100000006b043355b53628a6b5940000006401000000006200193f6200049d82021704565b60065562000555565b600082821115620004aa57fe5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620004f357805160ff191683800117855562000523565b8280016001018555821562000523579182015b828111156200052357825182559160200191906001019062000506565b506200053192915062000535565b5090565b6200055291905b808211156200053157600081556001016200053c565b90565b61199d80620005656000396000f30060806040526004361061020e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146102db5780630918d47a14610365578063095ea7b3146103965780630d92e3e8146103ce578063151f0a90146103f5578063162cbefe1461040a57806318160ddd1461041f57806323b872dd146104345780632a11ced01461045e578063313ce56714610476578063324536eb146104a157806334ac6f5e146104b657806337dac678146104cb578063385d545e146104e05780633baf4899146104f557806354fd4d501461050a5780635eaaa6991461051f5780635ed7ca5b146105345780636161eb181461054b578063664e97041461056f5780636d6a6a4d1461058457806370a082311461059957806373889f4a146105ba5780637572f479146105cf578063788ce6f2146105e457806379c65068146105f95780638132044f1461061d5780638c86f0a7146106325780638da5cb5b14610653578063902d55a51461066857806395d89b411461067d578063a22b35ce14610692578063a9059cbb146106b6578063b6f50c29146106da578063b9b8af0b146106fb578063cb3e64fd14610710578063dd62ed3e14610725578063ee6f9dbc1461074c578063ee9b4152146107da578063f2fde38b146107ef578063f315b70d14610810578063fb6e655814610825578063fd1fc4a014610846575b60018054810190819055600090361561022657600080fd5b6000341161023357600080fd5b610245346103e863ffffffff61089d16565b336000908152600f6020526040902054909250610268908363ffffffff6108d316565b336000908152600f602052604090205560065461028b908363ffffffff6108d316565b60065560008054604051600160a060020a03909116913480156108fc02929091818181858888f193505050501580156102c8573d6000803e3d6000fd5b5060015481146102d757600080fd5b5050005b3480156102e757600080fd5b506102f06108e2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032a578181015183820152602001610312565b50505050905090810190601f1680156103575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561037157600080fd5b5061037a610970565b60408051600160a060020a039092168252519081900360200190f35b3480156103a257600080fd5b506103ba600160a060020a0360043516602435610988565b604080519115158252519081900360200190f35b3480156103da57600080fd5b506103e36109ee565b60408051918252519081900360200190f35b34801561040157600080fd5b5061037a6109f4565b34801561041657600080fd5b506103e3610a0c565b34801561042b57600080fd5b506103e3610a12565b34801561044057600080fd5b506103ba600160a060020a0360043581169060243516604435610a18565b34801561046a57600080fd5b5061037a600435610b7f565b34801561048257600080fd5b5061048b610ba7565b6040805160ff9092168252519081900360200190f35b3480156104ad57600080fd5b506103e3610bac565b3480156104c257600080fd5b506103e3610bb2565b3480156104d757600080fd5b506103e3610bb8565b3480156104ec57600080fd5b506103e3610bbe565b34801561050157600080fd5b5061037a610bc4565b34801561051657600080fd5b506102f0610bdc565b34801561052b57600080fd5b506103e3610c37565b34801561054057600080fd5b50610549610c47565b005b34801561055757600080fd5b50610549600160a060020a0360043516602435610c6d565b34801561057b57600080fd5b506103e3610d92565b34801561059057600080fd5b506103e3610d98565b3480156105a557600080fd5b506103e3600160a060020a0360043516610da4565b3480156105c657600080fd5b506103e3610dbf565b3480156105db57600080fd5b5061037a610dc5565b3480156105f057600080fd5b5061037a610ddd565b34801561060557600080fd5b50610549600160a060020a0360043516602435610dec565b34801561062957600080fd5b5061037a610e89565b34801561063e57600080fd5b506103ba600160a060020a0360043516610ea1565b34801561065f57600080fd5b5061037a610eb6565b34801561067457600080fd5b506103e3610ec5565b34801561068957600080fd5b506102f0610ed5565b34801561069e57600080fd5b50610549600160a060020a0360043516602435610f30565b3480156106c257600080fd5b506103ba600160a060020a0360043516602435611108565b3480156106e657600080fd5b50610549600160a060020a0360043516611231565b34801561070757600080fd5b506103ba611333565b34801561071c57600080fd5b5061054961133c565b34801561073157600080fd5b506103e3600160a060020a0360043581169060243516611370565b34801561075857600080fd5b506040805160206004803580820135838102808601850190965280855261054995369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061139b9650505050505050565b3480156107e657600080fd5b506103e3611655565b3480156107fb57600080fd5b50610549600160a060020a0360043516611661565b34801561081c57600080fd5b506103e36116f5565b34801561083157600080fd5b506103e3600160a060020a03600435166116fb565b34801561085257600080fd5b506040805160206004803580820135838102808601850190965280855261054995369593946024949385019291829185019084908082843750949750509335945061170d9350505050565b6000808315156108b057600091506108cc565b508282028284828115156108c057fe5b04146108c857fe5b8091505b5092915050565b6000828201838110156108c857fe5b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109685780601f1061093d57610100808354040283529160200191610968565b820191906000526020600020905b81548152906001019060200180831161094b57829003601f168201915b505050505081565b73ac762012330350ddd97cc64b133536f8e32193a881565b336000818152601060209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600c5481565b73de59297bf5d1d1b9d38d8f50e55a270eb9ae136e81565b60085481565b60065490565b6000600160a060020a0383161515610a2f57600080fd5b600160a060020a0384166000908152600f6020526040902054821115610a5457600080fd5b600160a060020a0384166000908152601060209081526040808320338452909152902054821115610a8457600080fd5b600160a060020a0384166000908152600f6020526040902054610aad908363ffffffff61193f16565b600160a060020a038086166000908152600f60205260408082209390935590851681522054610ae2908363ffffffff6108d316565b600160a060020a038085166000908152600f60209081526040808320949094559187168152601082528281203382529091522054610b26908363ffffffff61193f16565b600160a060020a0380861660008181526010602090815260408083203384528252918290209490945580518681529051928716939192600080516020611952833981519152929181900390910190a35060019392505050565b600d805482908110610b8d57fe5b600091825260209091200154600160a060020a0316905081565b601281565b60065481565b60075481565b600a5481565b600b5481565b73e2d9b8259f74a46b5e3f74a30c7867be0a5f518581565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109685780601f1061093d57610100808354040283529160200191610968565b6b043355b53628a6b59400000081565b600054600160a060020a03163314610c5e57600080fd5b6002805460ff19166001179055565b600054600160a060020a03163314610c8457600080fd5b336000908152600f6020526040902054811115610ca057600080fd5b336000818152600f6020908152604091829020805485900390556006805485900390558151928352820183905280517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a1600160a060020a0382161515610d0e57600080fd5b600654610d21908263ffffffff61193f16565b600655600160a060020a0382166000908152600f6020526040902054610d4d908263ffffffff61193f16565b600160a060020a0383166000818152600f6020908152604080832094909455835185815293519193600080516020611952833981519152929081900390910190a35050565b6103e881565b670de0b6b3a764000081565b600160a060020a03166000908152600f602052604090205490565b600d5490565b739888375f4663891770daaaf9286d97d44fefc82e81565b600e54600160a060020a031681565b600054600160a060020a03163314610e0357600080fd5b600160a060020a038083166000908152600f602090815260408083208054860190556006805486019055825481518681529151941693600080516020611952833981519152929181900390910190a3600054604080518381529051600160a060020a03808616931691600080516020611952833981519152919081900360200190a35050565b7328970854bfa61c0d6fe56cc9daaae5271ceaec0981565b60116020526000908152604090205460ff1681565b600054600160a060020a031681565b6b204fce5e3e2502611000000081565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109685780601f1061093d57610100808354040283529160200191610968565b600054600160a060020a03163314610f4757600080fd5b600160a060020a0382166000908152600f6020526040902054811115610f6c57600080fd5b600160a060020a0382166000908152601060209081526040808320338452909152902054811115610f9c57600080fd5b600160a060020a0382166000818152600f602090815260408083208054869003905560108252808320338452825291829020805485900390556006805485900390558151928352820183905280517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59281900390910190a1600160a060020a0382166000908152601060209081526040808320338452909152902054611048908263ffffffff61193f16565b600160a060020a038316600081815260106020908152604080832033845282529182902093909355805191825291810183905281517fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5929181900390910190a1600160a060020a0382166000818152601060209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35050565b336000908152600f6020526040812054811061112357600080fd5b336000908152600f602052604090205482111561113f57600080fd5b600160a060020a038316151561115457600080fd5b6000821161116157600080fd5b600160a060020a03831633141561117757600080fd5b336000908152600f602052604090205482111561119357600080fd5b336000908152600f60205260409020546111b3908363ffffffff61193f16565b336000908152600f602052604080822092909255600160a060020a038516815220546111e5908363ffffffff6108d316565b600160a060020a0384166000818152600f60209081526040918290209390935580518581529051919233926000805160206119528339815191529281900390910190a350600192915050565b600054600160a060020a0316331461124857600080fd5b600160a060020a038116151561125d57600080fd5b600e54600160a060020a03161561127357600080fd5b61129b6b204fce5e3e250261100000006b043355b53628a6b59400000063ffffffff61193f16565b600654146112a857600080fd5b600160a060020a0381166000818152600f602090815260408083206b043355b53628a6b5940000009081905581519081529051600080516020611952833981519152929181900390910190a3600e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790556b204fce5e3e25026110000000600655565b60025460ff1681565b600054600160a060020a0316331461135357600080fd5b60025460ff16151561136457600080fd5b6002805460ff19169055565b600160a060020a03918216600090815260106020908152604080832093909416825291909152205490565b6000805481908190600160a060020a031633146113b757600080fd5b600054600160a060020a031633146113ce57600080fd5b83518551146113dc57600080fd5b8351670de0b6b3a7640000908590839081106113f457fe5b90602001906020020151029250600090505b845181101561164e5760116000868381518110151561142157fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff1615156114f957600160116000878481518110151561146157fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905584516114d7908690839081106114a557fe5b602090810290910101518551670de0b6b3a7640000908790859081106114c757fe5b9060200190602002015102611108565b15156114e257600080fd5b6114f2828463ffffffff6108d316565b9150611552565b848181518110151561150757fe5b90602001906020020151600160a060020a03167f3506b32cea6b36a739c1c2a71a9e1b3d6222104389c07219059fa6eb6d2e0563836040518082815260200191505060405180910390a25b600854611565908363ffffffff61193f16565b600855600c5461157b908363ffffffff6108d316565b600c819055507fa0078abe206b24dc2673adfbca6433fddc4aa887eca9fd15557c29f3b74922e68585600c54604051808060200180602001848152602001838103835286818151815260200191508051906020019060200280838360005b838110156115f15781810151838201526020016115d9565b50505050905001838103825285818151815260200191508051906020019060200280838360005b83811015611630578181015183820152602001611618565b505050509050019550505050505060405180910390a1600101611406565b5050505050565b67016345785d8a000081565b600054600160a060020a0316331461167857600080fd5b600160a060020a038116151561168d57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60095481565b60126020526000908152604090205481565b6000805481908190600160a060020a0316331461172957600080fd5b6000841161173657600080fd5b5050670de0b6b3a7640000820260005b84518110156118825760116000868381518110151561176157fe5b6020908102909101810151600160a060020a031682528101919091526040016000205460ff1615156118215760016011600087848151811015156117a157fe5b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff191691151591909117905584516117ff908690839081106117e557fe5b60209081029091010151670de0b6b3a76400008402611108565b151561180a57600080fd5b61181a838363ffffffff6108d316565b925061187a565b848181518110151561182f57fe5b90602001906020020151600160a060020a03167f3506b32cea6b36a739c1c2a71a9e1b3d6222104389c07219059fa6eb6d2e0563846040518082815260200191505060405180910390a25b600101611746565b600854611895908463ffffffff61193f16565b600855600c546118ab908463ffffffff6108d316565b600c819055507f71dae88d65232818f63a7ceb3e8fb3ebbf4ac03c9ae6c5d896d3832147c100cd8585600c546040518080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561192357818101518382015260200161190b565b5050505090500194505050505060405180910390a15050505050565b60008282111561194b57fe5b509003905600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058201c5731f585faeaa66f531489bc95cdf75f22b95e03a38f5a224e307089b0f0540029d7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "constructorArguments": "d7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
}