{
  "address": "0x7982d996cd2bf4dfa329d91ce139779c23d30fa9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MuskTokenVault",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-13\n*/\n\npragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Token {\n\n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint256 supply) {}\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) returns (bool success) {}\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n}\n\n\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n}\n\n\n//name this contract whatever you'd like\ncontract MuskToken is StandardToken {\n\n    function () {\n        //if ether is sent to this address, send it back.\n        throw;\n    }\n\n    /* Public variables of the token */\n\n    /*\n    NOTE:\n    The following variables are OPTIONAL vanities. One does not have to include them.\n    They allow one to customise the token contract & in no way influences the core functionality.\n    Some wallets/interfaces might not even bother to look at this information.\n    */\n    string public name;                   //fancy name: eg Simon Bucks\n    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    string public symbol;                 //An identifier: eg SBX\n    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n\n//\n// CHANGE THESE VALUES FOR YOUR TOKEN\n//\n\n//make sure this function name matches the contract name above. So if you're token is called TutorialToken, make sure the \n//contract name above is also TutorialToken instead of MuskToken\n\n    function MuskToken(\n        ) {\n        balances[msg.sender] = 1000000000000000000000000000;               // Give the creator all initial tokens (100000 for example)\n        totalSupply = 1000000000000000000000000000;                        // Update total supply (100000 for example)\n        name = \"Musk Token\";                                   // Set the name for display purposes\n        decimals = 18;                            // Amount of decimals for display purposes\n        symbol = \"MUSK\";                               // Set the symbol for display purposes\n    }\n\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        return true;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract MuskTokenVault is Ownable {\n    using SafeMath for uint256;\n\n    //Wallet Addresses for allocation\n    address public teamReserveWallet = 0xBf7E6DC9317dF0e9Fde7847577154e6C5114370d;\n    address public finalReserveWallet = 0xBf7E6DC9317dF0e9Fde7847577154e6C5114370d;\n\n    //Token Allocations\n    uint256 public teamReserveAllocation = 240 * (10 ** 6) * (10 ** 18);\n    uint256 public finalReserveAllocation = 10 * (10 ** 6) * (10 ** 18);\n\n    //Total Token Allocations\n    uint256 public totalAllocation = 250 * (10 ** 6) * (10 ** 18);\n\n    uint256 public teamTimeLock = 2 * 365 days;\n    uint256 public teamVestingStages = 8;\n    uint256 public finalReserveTimeLock = 2 * 365 days;\n\n    /** Reserve allocations */\n    mapping(address => uint256) public allocations;\n\n    /** When timeLocks are over (UNIX Timestamp)  */  \n    mapping(address => uint256) public timeLocks;\n\n    /** How many tokens each reserve wallet has claimed */\n    mapping(address => uint256) public claimed;\n\n    /** When this vault was locked (UNIX Timestamp)*/\n    uint256 public lockedAt = 0;\n\n    MuskToken public token;\n\n    /** Allocated reserve tokens */\n    event Allocated(address wallet, uint256 value);\n\n    /** Distributed reserved tokens */\n    event Distributed(address wallet, uint256 value);\n\n    /** Tokens have been locked */\n    event Locked(uint256 lockTime);\n\n    //Any of the three reserve wallets\n    modifier onlyReserveWallets {\n        require(allocations[msg.sender] > 0);\n        _;\n    }\n\n    //Only Musk team reserve wallet\n    modifier onlyTeamReserve {\n        require(msg.sender == teamReserveWallet);\n        require(allocations[msg.sender] > 0);\n        _;\n    }\n\n    //Only final token reserve wallet\n    modifier onlyTokenReserve {\n        require(msg.sender == finalReserveWallet);\n        require(allocations[msg.sender] > 0);\n        _;\n    }\n\n    //Has not been locked yet\n    modifier notLocked {\n        require(lockedAt == 0);\n        _;\n    }\n\n    modifier locked {\n        require(lockedAt > 0);\n        _;\n    }\n\n    //Token allocations have not been set\n    modifier notAllocated {\n        require(allocations[teamReserveWallet] == 0);\n        require(allocations[finalReserveWallet] == 0);\n        _;\n    }\n\n    function MuskTokenVault(Token _token) public {\n\n        owner = msg.sender;\n        token = MuskToken(_token);\n        \n    }\n\n    function allocate() public notLocked notAllocated onlyOwner {\n\n        //Makes sure Token Contract has the exact number of tokens\n        require(token.balanceOf(address(this)) == totalAllocation);\n        \n        allocations[teamReserveWallet] = teamReserveAllocation;\n        allocations[finalReserveWallet] = finalReserveAllocation;\n\n        Allocated(teamReserveWallet, teamReserveAllocation);\n        Allocated(finalReserveWallet, finalReserveAllocation);\n\n        lock();\n    }\n\n    //Lock the vault for the wallets\n    function lock() internal notLocked onlyOwner {\n\n        lockedAt = block.timestamp;\n\n        timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock);\n        timeLocks[finalReserveWallet] = lockedAt.add(finalReserveTimeLock);\n\n        Locked(lockedAt);\n    }\n\n    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\n    //Recover Tokens in case incorrect amount was sent to contract.\n    function recoverFailedLock() external notLocked notAllocated onlyOwner {\n\n        // Transfer all tokens on this contract back to the owner\n        require(token.transfer(owner, token.balanceOf(address(this))));\n    }\n\n    // Total number of tokens currently in the vault\n    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\n\n        return token.balanceOf(address(this));\n\n    }\n\n    // Number of tokens that are still locked\n    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\n\n        return allocations[msg.sender].sub(claimed[msg.sender]);\n\n    }\n\n    //Claim tokens for final reserve wallet\n    function claimTokenReserve() onlyTokenReserve locked public {\n\n        address reserveWallet = msg.sender;\n\n        // Can't claim before Lock ends\n        require(block.timestamp > timeLocks[reserveWallet]);\n\n        // Must Only claim once\n        require(claimed[reserveWallet] == 0);\n\n        uint256 amount = allocations[reserveWallet];\n\n        claimed[reserveWallet] = amount;\n\n        require(token.transfer(reserveWallet, amount));\n\n        Distributed(reserveWallet, amount);\n    }\n\n    //Claim tokens for Musk team reserve wallet\n    function claimTeamReserve() onlyTeamReserve locked public {\n\n        uint256 vestingStage = teamVestingStage();\n\n        //Amount of tokens the team should have at this vesting stage\n        uint256 totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages);\n\n        require(totalUnlocked <= allocations[teamReserveWallet]);\n\n        //Previously claimed tokens must be less than what is unlocked\n        require(claimed[teamReserveWallet] < totalUnlocked);\n\n        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\n\n        claimed[teamReserveWallet] = totalUnlocked;\n\n        require(token.transfer(teamReserveWallet, payment));\n\n        Distributed(teamReserveWallet, payment);\n    }\n\n    //Current Vesting stage for Musk team \n    function teamVestingStage() public view onlyTeamReserve returns(uint256){\n        \n        // Every 3 months\n        uint256 vestingMonths = teamTimeLock.div(teamVestingStages); \n\n        uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);\n\n        //Ensures team vesting stage doesn't go past teamVestingStages\n        if(stage > teamVestingStages){\n            stage = teamVestingStages;\n        }\n\n        return stage;\n\n    }\n\n    // Checks if msg.sender can collect tokens\n    function canCollect() public view onlyReserveWallets returns(bool) {\n\n        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\n\n    }\n\n}",
  "bytecode": "608060405273bf7e6dc9317df0e9fde7847577154e6c5114370d600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073bf7e6dc9317df0e9fde7847577154e6c5114370d600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506ac685fa11e01ec6f00000006003556a084595161401484a0000006004556acecb8f27f4200f3a0000006005556303c2670060065560086007556303c267006008556000600c5534801561010157600080fd5b5060405160208061207b83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611e86806101f56000396000f300608060405260043610610133576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312b58349146101385780632549e0b114610163578063342c17cd1461018e5780633743f0bf146101b957806338dacaab146101e45780634fb0a3cd1461020f57806352a9039c1461022657806379203dc41461027d5780637ae2aa34146102a85780637b777517146102d35780637f76b223146102fe5780638da5cb5b146103555780639d9afce9146103ac5780639f83008a146103c3578063abaa99161461041a578063b216348214610431578063c884ef831461045c578063c9b0d97b146104b3578063d6a3bc16146104e2578063e0fdf33614610539578063f2fde38b14610564578063f85b2160146105a7578063fc0c546a146105be575b600080fd5b34801561014457600080fd5b5061014d610615565b6040518082815260200191505060405180910390f35b34801561016f57600080fd5b50610178610714565b6040518082815260200191505060405180910390f35b34801561019a57600080fd5b506101a36107f9565b6040518082815260200191505060405180910390f35b3480156101c557600080fd5b506101ce6107ff565b6040518082815260200191505060405180910390f35b3480156101f057600080fd5b506101f9610805565b6040518082815260200191505060405180910390f35b34801561021b57600080fd5b5061022461080b565b005b34801561023257600080fd5b50610267600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cd9565b6040518082815260200191505060405180910390f35b34801561028957600080fd5b50610292610cf1565b6040518082815260200191505060405180910390f35b3480156102b457600080fd5b506102bd610cf7565b6040518082815260200191505060405180910390f35b3480156102df57600080fd5b506102e8610e00565b6040518082815260200191505060405180910390f35b34801561030a57600080fd5b5061033f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e06565b6040518082815260200191505060405180910390f35b34801561036157600080fd5b5061036a610e1e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b857600080fd5b506103c1610e43565b005b3480156103cf57600080fd5b506103d861119f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561042657600080fd5b5061042f6111c5565b005b34801561043d57600080fd5b50610446611610565b6040518082815260200191505060405180910390f35b34801561046857600080fd5b5061049d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611616565b6040518082815260200191505060405180910390f35b3480156104bf57600080fd5b506104c861162e565b604051808215151515815260200191505060405180910390f35b3480156104ee57600080fd5b506104f761170f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054557600080fd5b5061054e611735565b6040518082815260200191505060405180910390f35b34801561057057600080fd5b506105a5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061173b565b005b3480156105b357600080fd5b506105bc611890565b005b3480156105ca57600080fd5b506105d3611c01565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050506040513d60208110156106fe57600080fd5b8101908080519060200190929190505050905090565b600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561076357600080fd5b6107f4600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c2790919063ffffffff16565b905090565b60045481565b60035481565b60065481565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561086c57600080fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115156108ba57600080fd5b6000600c541115156108cb57600080fd5b6108d3610cf7565b925061095d60075461094f60096000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205486611c4090919063ffffffff16565b611c7b90919063ffffffff16565b915060096000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156109cf57600080fd5b81600b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515610a3e57600080fd5b610ab2600b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611c2790919063ffffffff16565b905081600b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c0157600080fd5b505af1158015610c15573d6000803e3d6000fd5b505050506040513d6020811015610c2b57600080fd5b81019080805190602001909291905050501515610c4757600080fd5b7fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b60096020528060005260406000206000915090505481565b60055481565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d5857600080fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610da657600080fd5b610dbd600754600654611c7b90919063ffffffff16565b9150610de682610dd8600c5442611c2790919063ffffffff16565b611c7b90919063ffffffff16565b9050600754811115610df85760075490505b809250505090565b60075481565b600a6020528060005260406000206000915090505481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ea257600080fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111515610ef057600080fd5b6000600c54111515610f0157600080fd5b339150600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205442111515610f5157600080fd5b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515610f9f57600080fd5b600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156110ea57600080fd5b505af11580156110fe573d6000803e3d6000fd5b505050506040513d602081101561111457600080fd5b8101908080519060200190929190505050151561113057600080fd5b7fb649c98f58055c520df0dcb5709eff2e931217ff2fb1e21376130d31bbb1c0af8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c541415156111d657600080fd5b600060096000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561124657600080fd5b600060096000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415156112b657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561131157600080fd5b600554600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156113d157600080fd5b505af11580156113e5573d6000803e3d6000fd5b505050506040513d60208110156113fb57600080fd5b810190808051906020019092919050505014151561141857600080fd5b60035460096000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060045460096000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f472f36e28bb47edb7c69c9e2ac00a77c66b505df54e9c818ac57110b0629e8c3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a17f472f36e28bb47edb7c69c9e2ac00a77c66b505df54e9c818ac57110b0629e8c3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600454604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a161160e611c96565b565b600c5481565b600b6020528060005260406000206000915090505481565b600080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411151561167d57600080fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544211801561170a57506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561179657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156117d257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600c541415156118a157600080fd5b600060096000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561191157600080fd5b600060096000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561198157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119dc57600080fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611af957600080fd5b505af1158015611b0d573d6000803e3d6000fd5b505050506040513d6020811015611b2357600080fd5b81019080805190602001909291905050506040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611bb957600080fd5b505af1158015611bcd573d6000803e3d6000fd5b505050506040513d6020811015611be357600080fd5b81019080805190602001909291905050501515611bff57600080fd5b565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000828211151515611c3557fe5b818303905092915050565b6000806000841415611c555760009150611c74565b8284029050828482811515611c6657fe5b04141515611c7057fe5b8091505b5092915050565b6000808284811515611c8957fe5b0490508091505092915050565b6000600c54141515611ca757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d0257600080fd5b42600c81905550611d20600654600c54611e3c90919063ffffffff16565b600a6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d9c600854600c54611e3c90919063ffffffff16565b600a6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f032bc66be43dbccb7487781d168eb7bda224628a3b2c3388bdf69b532a3a1611600c546040518082815260200191505060405180910390a1565b6000808284019050838110151515611e5057fe5b80915050929150505600a165627a7a723058200c34ad42e7a84e1b21b5e439248b92f563fd98b06a07bac1db339fc78322ea1e00290000000000000000000000005003b168b457b663c3c18ffcf5b6a24bee8f59c7",
  "constructorArguments": "0000000000000000000000005003b168b457b663c3c18ffcf5b6a24bee8f59c7"
}