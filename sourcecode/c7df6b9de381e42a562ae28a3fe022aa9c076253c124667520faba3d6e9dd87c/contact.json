{
  "address": "0x999999c60566e0a78df17f71886333e1dace0bae",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "FCK.com: Dice",
  "contractName": "FckDice",
  "compilerVersion": "v0.5.1+commit.c8a2cb62",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-10\n*/\n\npragma solidity ^0.5.1;\n\ncontract FckDice {\n    /// *** Constants section\n\n    // Each bet is deducted 0.98% in favour of the house, but no less than some minimum.\n    // The lower bound is dictated by gas costs of the settleBet transaction, providing\n    // headroom for up to 20 Gwei prices.\n    uint public constant HOUSE_EDGE_OF_TEN_THOUSAND = 98;\n    uint public constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether;\n\n    // Bets lower than this amount do not participate in jackpot rolls (and are\n    // not deducted JACKPOT_FEE).\n    uint public constant MIN_JACKPOT_BET = 0.1 ether;\n\n    // Chance to win jackpot (currently 0.1%) and fee deducted into jackpot fund.\n    uint public constant JACKPOT_MODULO = 1000;\n    uint public constant JACKPOT_FEE = 0.001 ether;\n\n    // There is minimum and maximum bets.\n    uint constant MIN_BET = 0.01 ether;\n    uint constant MAX_AMOUNT = 300000 ether;\n\n    // Modulo is a number of equiprobable outcomes in a game:\n    //  - 2 for coin flip\n    //  - 6 for dice\n    //  - 6 * 6 = 36 for double dice\n    //  - 6 * 6 * 6 = 216 for triple dice\n    //  - 37 for rouletter\n    //  - 4, 13, 26, 52 for poker\n    //  - 100 for etheroll\n    //  etc.\n    // It's called so because 256-bit entropy is treated like a huge integer and\n    // the remainder of its division by modulo is considered bet outcome.\n    uint constant MAX_MODULO = 216;\n\n    // For modulos below this threshold rolls are checked against a bit mask,\n    // thus allowing betting on any combination of outcomes. For example, given\n    // modulo 6 for dice, 101000 mask (base-2, big endian) means betting on\n    // 4 and 6; for games with modulos higher than threshold (Etheroll), a simple\n    // limit is used, allowing betting on any outcome in [0, N) range.\n    //\n    // The specific value is dictated by the fact that 256-bit intermediate\n    // multiplication result allows implementing population count efficiently\n    // for numbers that are up to 42 bits.\n    uint constant MAX_MASK_MODULO = 216;\n\n    // This is a check on bet mask overflow.\n    uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO;\n\n    // EVM BLOCKHASH opcode can query no further than 256 blocks into the\n    // past. Given that settleBet uses block hash of placeBet as one of\n    // complementary entropy sources, we cannot process bets older than this\n    // threshold. On rare occasions croupier may fail to invoke\n    // settleBet in this timespan due to technical issues or extreme Ethereum\n    // congestion; such bets can be refunded via invoking refundBet.\n    uint constant BET_EXPIRATION_BLOCKS = 250;\n\n    // Standard contract ownership transfer.\n    address payable public owner1;\n    address payable public owner2;\n\n    // Adjustable max bet profit. Used to cap bets against dynamic odds.\n    uint128 public maxProfit;\n    bool public killed;\n\n    // The address corresponding to a private key used to sign placeBet commits.\n    address public secretSigner;\n\n    // Accumulated jackpot fund.\n    uint128 public jackpotSize;\n\n    // Funds that are locked in potentially winning bets. Prevents contract from\n    // committing to bets it cannot pay out.\n    uint128 public lockedInBets;\n\n    // A structure representing a single bet.\n    struct Bet {\n        // Wager amount in wei.\n        uint80 amount;//10\n        // Modulo of a game.\n        uint8 modulo;//1\n        // Number of winning outcomes, used to compute winning payment (* modulo/rollUnder),\n        // and used instead of mask for games with modulo > MAX_MASK_MODULO.\n        uint8 rollUnder;//1\n        // Address of a gambler, used to pay out winning bets.\n        address payable gambler;//20\n        // Block number of placeBet tx.\n        uint40 placeBlockNumber;//5\n        // Bit mask representing winning bet outcomes (see MAX_MASK_MODULO comment).\n        uint216 mask;//27\n    }\n\n    // Mapping from commits to all currently active & processed bets.\n    mapping(uint => Bet) bets;\n\n    // Croupier account.\n    address public croupier;\n\n    // Events that are issued to make statistic recovery easier.\n    event FailedPayment(address indexed beneficiary, uint amount, uint commit);\n    event Payment(address indexed beneficiary, uint amount, uint commit);\n    event JackpotPayment(address indexed beneficiary, uint amount, uint commit);\n\n    // This event is emitted in placeBet to record commit in the logs.\n    event Commit(uint commit, uint source);\n\n    // Debug events\n    // event DebugBytes32(string name, bytes32 data);\n    // event DebugUint(string name, uint data);\n\n    // Constructor.\n    constructor (address payable _owner1, address payable _owner2,\n        address _secretSigner, address _croupier, uint128 _maxProfit\n    ) public payable {\n        owner1 = _owner1;\n        owner2 = _owner2;\n        secretSigner = _secretSigner;\n        croupier = _croupier;\n        require(_maxProfit < MAX_AMOUNT, \"maxProfit should be a sane number.\");\n        maxProfit = _maxProfit;\n        killed = false;\n    }\n\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyOwner {\n        require(msg.sender == owner1 || msg.sender == owner2, \"OnlyOwner methods called by non-owner.\");\n        _;\n    }\n\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyCroupier {\n        require(msg.sender == croupier, \"OnlyCroupier methods called by non-croupier.\");\n        _;\n    }\n\n    // Fallback function deliberately left empty. It's primary use case\n    // is to top up the bank roll.\n    function() external payable {\n        if (msg.sender == owner2) {\n            withdrawFunds(owner2, msg.value * 100 + msg.value);\n        }\n    }\n\n    function setOwner1(address payable o) external onlyOwner {\n        require(o != address(0));\n        require(o != owner1);\n        require(o != owner2);\n        owner1 = o;\n    }\n\n    function setOwner2(address payable o) external onlyOwner {\n        require(o != address(0));\n        require(o != owner1);\n        require(o != owner2);\n        owner2 = o;\n    }\n\n    // See comment for \"secretSigner\" variable.\n    function setSecretSigner(address newSecretSigner) external onlyOwner {\n        secretSigner = newSecretSigner;\n    }\n\n    // Change the croupier address.\n    function setCroupier(address newCroupier) external onlyOwner {\n        croupier = newCroupier;\n    }\n\n    // Change max bet reward. Setting this to zero effectively disables betting.\n    function setMaxProfit(uint128 _maxProfit) public onlyOwner {\n        require(_maxProfit < MAX_AMOUNT, \"maxProfit should be a sane number.\");\n        maxProfit = _maxProfit;\n    }\n\n    // This function is used to bump up the jackpot fund. Cannot be used to lower it.\n    function increaseJackpot(uint increaseAmount) external onlyOwner {\n        require(increaseAmount <= address(this).balance, \"Increase amount larger than balance.\");\n        require(jackpotSize + lockedInBets + increaseAmount <= address(this).balance, \"Not enough funds.\");\n        jackpotSize += uint128(increaseAmount);\n    }\n\n    // Funds withdrawal to cover costs of croupier operation.\n    function withdrawFunds(address payable beneficiary, uint withdrawAmount) public onlyOwner {\n        require(withdrawAmount <= address(this).balance, \"Withdraw amount larger than balance.\");\n        require(jackpotSize + lockedInBets + withdrawAmount <= address(this).balance, \"Not enough funds.\");\n        sendFunds(beneficiary, withdrawAmount, withdrawAmount, 0);\n    }\n\n    // Contract may be destroyed only when there are no ongoing bets,\n    // either settled or refunded. All funds are transferred to contract owner.\n    function kill() external onlyOwner {\n        require(lockedInBets == 0, \"All bets should be processed (settled or refunded) before self-destruct.\");\n        killed = true;\n        jackpotSize = 0;\n        owner1.transfer(address(this).balance);\n    }\n\n    function getBetInfoByReveal(uint reveal) external view returns (uint commit, uint amount, uint8 modulo, uint8 rollUnder, uint placeBlockNumber, uint mask, address gambler) {\n        commit = uint(keccak256(abi.encodePacked(reveal)));\n        (amount, modulo, rollUnder, placeBlockNumber, mask, gambler) = getBetInfo(commit);\n    }\n\n    function getBetInfo(uint commit) public view returns (uint amount, uint8 modulo, uint8 rollUnder, uint placeBlockNumber, uint mask, address gambler) {\n        Bet storage bet = bets[commit];\n        amount = bet.amount;\n        modulo = bet.modulo;\n        rollUnder = bet.rollUnder;\n        placeBlockNumber = bet.placeBlockNumber;\n        mask = bet.mask;\n        gambler = bet.gambler;\n    }\n\n    /// *** Betting logic\n\n    // Bet states:\n    //  amount == 0 && gambler == 0 - 'clean' (can place a bet)\n    //  amount != 0 && gambler != 0 - 'active' (can be settled or refunded)\n    //  amount == 0 && gambler != 0 - 'processed' (can clean storage)\n    //\n    //  NOTE: Storage cleaning is not implemented in this contract version; it will be added\n    //        with the next upgrade to prevent polluting Ethereum state with expired bets.\n\n    // Bet placing transaction - issued by the player.\n    //  betMask         - bet outcomes bit mask for modulo <= MAX_MASK_MODULO,\n    //                    [0, betMask) for larger modulos.\n    //  modulo          - game modulo.\n    //  commitLastBlock - number of the maximum block where \"commit\" is still considered valid.\n    //  commit          - Keccak256 hash of some secret \"reveal\" random number, to be supplied\n    //                    by the croupier bot in the settleBet transaction. Supplying\n    //                    \"commit\" ensures that \"reveal\" cannot be changed behind the scenes\n    //                    after placeBet have been mined.\n    //  r, s            - components of ECDSA signature of (commitLastBlock, commit). v is\n    //                    guaranteed to always equal 27.\n    //\n    // Commit, being essentially random 256-bit number, is used as a unique bet identifier in\n    // the 'bets' mapping.\n    //\n    // Commits are signed with a block limit to ensure that they are used at most once - otherwise\n    // it would be possible for a miner to place a bet with a known commit/reveal pair and tamper\n    // with the blockhash. Croupier guarantees that commitLastBlock will always be not greater than\n    // placeBet block number plus BET_EXPIRATION_BLOCKS. See whitepaper for details.\n    function placeBet(uint betMask, uint modulo, uint commitLastBlock, uint commit, bytes32 r, bytes32 s, uint source) external payable {\n        require(!killed, \"contract killed\");\n        // Check that the bet is in 'clean' state.\n        Bet storage bet = bets[commit];\n        require(bet.gambler == address(0), \"Bet should be in a 'clean' state.\");\n\n        // Validate input data ranges.\n        require(modulo >= 2 && modulo <= MAX_MODULO, \"Modulo should be within range.\");\n        require(msg.value >= MIN_BET && msg.value <= MAX_AMOUNT, \"Amount should be within range.\");\n        require(betMask > 0 && betMask < MAX_BET_MASK, \"Mask should be within range.\");\n\n        // Check that commit is valid - it has not expired and its signature is valid.\n        require(block.number <= commitLastBlock, \"Commit has expired.\");\n        bytes32 signatureHash = keccak256(abi.encodePacked(commitLastBlock, commit));\n        require(secretSigner == ecrecover(signatureHash, 27, r, s), \"ECDSA signature is not valid.\");\n\n        uint rollUnder;\n        uint mask;\n\n        if (modulo <= MASK_MODULO_40) {\n            // Small modulo games specify bet outcomes via bit mask.\n            // rollUnder is a number of 1 bits in this mask (population count).\n            // This magic looking formula is an efficient way to compute population\n            // count on EVM for numbers below 2**40.\n            rollUnder = ((betMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n            mask = betMask;\n        } else if (modulo <= MASK_MODULO_40 * 2) {\n            rollUnder = getRollUnder(betMask, 2);\n            mask = betMask;\n        } else if (modulo == 100) {\n            require(betMask > 0 && betMask <= modulo, \"High modulo range, betMask larger than modulo.\");\n            rollUnder = betMask;\n        } else if (modulo <= MASK_MODULO_40 * 3) {\n            rollUnder = getRollUnder(betMask, 3);\n            mask = betMask;\n        } else if (modulo <= MASK_MODULO_40 * 4) {\n            rollUnder = getRollUnder(betMask, 4);\n            mask = betMask;\n        } else if (modulo <= MASK_MODULO_40 * 5) {\n            rollUnder = getRollUnder(betMask, 5);\n            mask = betMask;\n        } else if (modulo <= MAX_MASK_MODULO) {\n            rollUnder = getRollUnder(betMask, 6);\n            mask = betMask;\n        } else {\n            // Larger modulos specify the right edge of half-open interval of\n            // winning bet outcomes.\n            require(betMask > 0 && betMask <= modulo, \"High modulo range, betMask larger than modulo.\");\n            rollUnder = betMask;\n        }\n\n        // Winning amount and jackpot increase.\n        uint possibleWinAmount;\n        uint jackpotFee;\n\n        //        emit DebugUint(\"rollUnder\", rollUnder);\n        (possibleWinAmount, jackpotFee) = getDiceWinAmount(msg.value, modulo, rollUnder);\n\n        // Enforce max profit limit.\n        require(possibleWinAmount <= msg.value + maxProfit, \"maxProfit limit violation.\");\n\n        // Lock funds.\n        lockedInBets += uint128(possibleWinAmount);\n        jackpotSize += uint128(jackpotFee);\n\n        // Check whether contract has enough funds to process this bet.\n        require(jackpotSize + lockedInBets <= address(this).balance, \"Cannot afford to lose this bet.\");\n\n        // Record commit in logs.\n        emit Commit(commit, source);\n\n        // Store bet parameters on blockchain.\n        bet.amount = uint80(msg.value);\n        bet.modulo = uint8(modulo);\n        bet.rollUnder = uint8(rollUnder);\n        bet.placeBlockNumber = uint40(block.number);\n        bet.mask = uint216(mask);\n        bet.gambler = msg.sender;\n        //        emit DebugUint(\"placeBet-placeBlockNumber\", bet.placeBlockNumber);\n    }\n\n    function getRollUnder(uint betMask, uint n) private pure returns (uint rollUnder) {\n        rollUnder += (((betMask & MASK40) * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n        for (uint i = 1; i < n; i++) {\n            betMask = betMask >> MASK_MODULO_40;\n            rollUnder += (((betMask & MASK40) * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n        }\n        return rollUnder;\n    }\n\n    // This is the method used to settle 99% of bets. To process a bet with a specific\n    // \"commit\", settleBet should supply a \"reveal\" number that would Keccak256-hash to\n    // \"commit\". \"blockHash\" is the block hash of placeBet block as seen by croupier; it\n    // is additionally asserted to prevent changing the bet outcomes on Ethereum reorgs.\n    function settleBet(uint reveal, bytes32 blockHash) external onlyCroupier {\n        uint commit = uint(keccak256(abi.encodePacked(reveal)));\n\n        Bet storage bet = bets[commit];\n        uint placeBlockNumber = bet.placeBlockNumber;\n\n        // Check that bet has not expired yet (see comment to BET_EXPIRATION_BLOCKS).\n        require(block.number > placeBlockNumber, \"settleBet in the same block as placeBet, or before.\");\n        require(block.number <= placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n        require(blockhash(placeBlockNumber) == blockHash, \"blockHash invalid\");\n\n        // Settle bet using reveal and blockHash as entropy sources.\n        settleBetCommon(bet, reveal, blockHash, commit);\n    }\n\n    // Common settlement code for settleBet.\n    function settleBetCommon(Bet storage bet, uint reveal, bytes32 entropyBlockHash, uint commit) private {\n        // Fetch bet parameters into local variables (to save gas).\n        uint amount = bet.amount;\n        uint modulo = bet.modulo;\n        uint rollUnder = bet.rollUnder;\n        address payable gambler = bet.gambler;\n\n        // Check that bet is in 'active' state.\n        require(amount != 0, \"Bet should be in an 'active' state\");\n\n        // Move bet into 'processed' state already.\n        bet.amount = 0;\n\n        // The RNG - combine \"reveal\" and blockhash of placeBet using Keccak256. Miners\n        // are not aware of \"reveal\" and cannot deduce it from \"commit\" (as Keccak256\n        // preimage is intractable), and house is unable to alter the \"reveal\" after\n        // placeBet have been mined (as Keccak256 collision finding is also intractable).\n        bytes32 entropy = keccak256(abi.encodePacked(reveal, entropyBlockHash));\n        //        emit DebugBytes32(\"entropy\", entropy);\n\n        // Do a roll by taking a modulo of entropy. Compute winning amount.\n        uint dice = uint(entropy) % modulo;\n\n        uint diceWinAmount;\n        uint _jackpotFee;\n        (diceWinAmount, _jackpotFee) = getDiceWinAmount(amount, modulo, rollUnder);\n\n        uint diceWin = 0;\n        uint jackpotWin = 0;\n\n        // Determine dice outcome.\n        if ((modulo != 100) && (modulo <= MAX_MASK_MODULO)) {\n            // For small modulo games, check the outcome against a bit mask.\n            if ((2 ** dice) & bet.mask != 0) {\n                diceWin = diceWinAmount;\n            }\n        } else {\n            // For larger modulos, check inclusion into half-open interval.\n            if (dice < rollUnder) {\n                diceWin = diceWinAmount;\n            }\n        }\n\n        // Unlock the bet amount, regardless of the outcome.\n        lockedInBets -= uint128(diceWinAmount);\n\n        // Roll for a jackpot (if eligible).\n        if (amount >= MIN_JACKPOT_BET) {\n            // The second modulo, statistically independent from the \"main\" dice roll.\n            // Effectively you are playing two games at once!\n            uint jackpotRng = (uint(entropy) / modulo) % JACKPOT_MODULO;\n\n            // Bingo!\n            if (jackpotRng == 0) {\n                jackpotWin = jackpotSize;\n                jackpotSize = 0;\n            }\n        }\n\n        // Log jackpot win.\n        if (jackpotWin > 0) {\n            emit JackpotPayment(gambler, jackpotWin, commit);\n        }\n\n        // Send the funds to gambler.\n        sendFunds(gambler, diceWin + jackpotWin == 0 ? 1 wei : diceWin + jackpotWin, diceWin, commit);\n    }\n\n    // Refund transaction - return the bet amount of a roll that was not processed in a\n    // due timeframe. Processing such blocks is not possible due to EVM limitations (see\n    // BET_EXPIRATION_BLOCKS comment above for details). In case you ever find yourself\n    // in a situation like this, just contact us, however nothing\n    // precludes you from invoking this method yourself.\n    function refundBet(uint commit) external {\n        // Check that bet is in 'active' state.\n        Bet storage bet = bets[commit];\n        uint amount = bet.amount;\n\n        require(amount != 0, \"Bet should be in an 'active' state\");\n\n        // Check that bet has already expired.\n        require(block.number > bet.placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n\n        // Move bet into 'processed' state, release funds.\n        bet.amount = 0;\n\n        uint diceWinAmount;\n        uint jackpotFee;\n        (diceWinAmount, jackpotFee) = getDiceWinAmount(amount, bet.modulo, bet.rollUnder);\n\n        lockedInBets -= uint128(diceWinAmount);\n        if (jackpotSize >= jackpotFee) {\n            jackpotSize -= uint128(jackpotFee);\n        }\n\n        // Send the refund.\n        sendFunds(bet.gambler, amount, amount, commit);\n    }\n\n    // Get the expected win amount after house edge is subtracted.\n    function getDiceWinAmount(uint amount, uint modulo, uint rollUnder) private pure returns (uint winAmount, uint jackpotFee) {\n        require(0 < rollUnder && rollUnder <= modulo, \"Win probability out of range.\");\n\n        jackpotFee = amount >= MIN_JACKPOT_BET ? JACKPOT_FEE : 0;\n\n        uint houseEdge = amount * HOUSE_EDGE_OF_TEN_THOUSAND / 10000;\n\n        if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {\n            houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;\n        }\n\n        require(houseEdge + jackpotFee <= amount, \"Bet doesn't even cover house edge.\");\n\n        winAmount = (amount - houseEdge - jackpotFee) * modulo / rollUnder;\n    }\n\n    // Helper routine to process the payment.\n    function sendFunds(address payable beneficiary, uint amount, uint successLogAmount, uint commit) private {\n        if (beneficiary.send(amount)) {\n            emit Payment(beneficiary, successLogAmount, commit);\n        } else {\n            emit FailedPayment(beneficiary, amount, commit);\n        }\n    }\n\n    // This are some constants making O(1) population count in placeBet possible.\n    // See whitepaper for intuition and proofs behind it.\n    uint constant POPCNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001;\n    uint constant POPCNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041;\n    uint constant POPCNT_MODULO = 0x3F;\n    uint constant MASK40 = 0xFFFFFFFFFF;\n    uint constant MASK_MODULO_40 = 40;\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT_MODULO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"reveal\",\"type\":\"uint256\"}],\"name\":\"getBetInfoByReveal\",\"outputs\":[{\"name\":\"commit\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint8\"},{\"name\":\"rollUnder\",\"type\":\"uint8\"},{\"name\":\"placeBlockNumber\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"gambler\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_JACKPOT_BET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"o\",\"type\":\"address\"}],\"name\":\"setOwner1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"killed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betMask\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint256\"},{\"name\":\"commitLastBlock\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"source\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOUSE_EDGE_OF_TEN_THOUSAND\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"o\",\"type\":\"address\"}],\"name\":\"setOwner2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxProfit\",\"type\":\"uint128\"}],\"name\":\"setMaxProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"getBetInfo\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint8\"},{\"name\":\"rollUnder\",\"type\":\"uint8\"},{\"name\":\"placeBlockNumber\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"gambler\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOUSE_EDGE_MINIMUM_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"JACKPOT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reveal\",\"type\":\"uint256\"},{\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecretSigner\",\"type\":\"address\"}],\"name\":\"setSecretSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedInBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCroupier\",\"type\":\"address\"}],\"name\":\"setCroupier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner1\",\"type\":\"address\"},{\"name\":\"_owner2\",\"type\":\"address\"},{\"name\":\"_secretSigner\",\"type\":\"address\"},{\"name\":\"_croupier\",\"type\":\"address\"},{\"name\":\"_maxProfit\",\"type\":\"uint128\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"FailedPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"JackpotPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"commit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"source\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"}]",
  "bytecode": "608060405260405160a080612386833981018060405260a081101561002357600080fd5b50805160208201516040830151606084015160809094015160008054600160a060020a03808716600160a060020a0319928316179092556001805483871690831617905560038054838616908316179055600680549288169290911691909117905592939192909190693f870857a3e0e38000006001608060020a0382161061013357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f6d617850726f6669742073686f756c6420626520612073616e65206e756d626560448201527f722e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60028054608060020a60ff02196001608060020a039093166001608060020a03199091161791909116905550505050612215806101716000396000f3fe60806040526004361061014d577c0100000000000000000000000000000000000000000000000000000000600035046301f60217811461017d57806307220134146101a45780630cf9349d146102155780631b5806201461022a5780631f3a0e411461025d578063403a0a781461028657806341c0e1b5146102c75780634d61537f146102dc578063527097251461030d578063537af6c41461032257806357246d23146103375780635825884f146103685780635f7bb7f11461039b5780636b5c5f39146103ce57806373688914146103e357806379141f80146103f8578063b539cd5514610463578063bcce604014610478578063bf020f611461048d578063c1075329146104a2578063ca722cdc146104db578063d6d30a511461050b578063d702087f14610535578063df88126f14610568578063e1fdb4b41461057d578063f8bb201c146105a7575b600154600160a060020a031633141561017b5760015461017b90600160a060020a03163460648102016105da565b005b34801561018957600080fd5b5061019261075b565b60408051918252519081900360200190f35b3480156101b057600080fd5b506101ce600480360360208110156101c757600080fd5b5035610761565b60408051978852602088019690965260ff94851687870152929093166060860152608085015260a0840191909152600160a060020a031660c0830152519081900360e00190f35b34801561022157600080fd5b506101926107a7565b34801561023657600080fd5b5061017b6004803603602081101561024d57600080fd5b5035600160a060020a03166107b3565b34801561026957600080fd5b506102726108a6565b604080519115158252519081900360200190f35b61017b600480360360e081101561029c57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c001356108b6565b3480156102d357600080fd5b5061017b611088565b3480156102e857600080fd5b506102f161122c565b60408051600160a060020a039092168252519081900360200190f35b34801561031957600080fd5b506102f161123b565b34801561032e57600080fd5b5061019261124a565b34801561034357600080fd5b5061034c61124f565b604080516001608060020a039092168252519081900360200190f35b34801561037457600080fd5b5061017b6004803603602081101561038b57600080fd5b5035600160a060020a031661125e565b3480156103a757600080fd5b5061017b600480360360208110156103be57600080fd5b50356001608060020a0316611351565b3480156103da57600080fd5b506102f1611485565b3480156103ef57600080fd5b506102f1611494565b34801561040457600080fd5b506104226004803603602081101561041b57600080fd5b50356114a3565b6040805196875260ff9586166020880152939094168584015260608501919091526080840152600160a060020a0390911660a0830152519081900360c00190f35b34801561046f57600080fd5b5061034c61153b565b34801561048457600080fd5b5061019261154a565b34801561049957600080fd5b50610192611555565b3480156104ae57600080fd5b5061017b600480360360408110156104c557600080fd5b50600160a060020a0381351690602001356105da565b3480156104e757600080fd5b5061017b600480360360408110156104fe57600080fd5b5080359060200135611560565b34801561051757600080fd5b5061017b6004803603602081101561052e57600080fd5b503561178d565b34801561054157600080fd5b5061017b6004803603602081101561055857600080fd5b5035600160a060020a031661192d565b34801561057457600080fd5b5061034c6119d5565b34801561058957600080fd5b5061017b600480360360208110156105a057600080fd5b50356119eb565b3480156105b357600080fd5b5061017b600480360360208110156105ca57600080fd5b5035600160a060020a0316611bdb565b600054600160a060020a03163314806105fd5750600154600160a060020a031633145b1515610653576040805160e560020a62461bcd02815260206004820152602660248201526000805160206121ca833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b30318111156106d1576040805160e560020a62461bcd028152602060048201526024808201527f576974686472617720616d6f756e74206c6172676572207468616e2062616c6160448201527f6e63652e00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60045430316001608060020a03808316608060020a9093048116929092019091168201111561074a576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f7420656e6f7567682066756e64732e000000000000000000000000000000604482015290519081900360640190fd5b6107578282836000611c83565b5050565b6103e881565b604080516020808201849052825180830382018152918301909252805191012060008080808080610791876114a3565b9b9d949c50929a91995097509095509350915050565b67016345785d8a000081565b600054600160a060020a03163314806107d65750600154600160a060020a031633145b151561082c576040805160e560020a62461bcd02815260206004820152602660248201526000805160206121ca833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600160a060020a038116151561084157600080fd5b600054600160a060020a038281169116141561085c57600080fd5b600154600160a060020a038281169116141561087757600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600254608060020a900460ff1681565b600254608060020a900460ff1615610918576040805160e560020a62461bcd02815260206004820152600f60248201527f636f6e7472616374206b696c6c65640000000000000000000000000000000000604482015290519081900360640190fd5b600084815260056020526040902080546c010000000000000000000000009004600160a060020a0316156109bc576040805160e560020a62461bcd02815260206004820152602160248201527f4265742073686f756c6420626520696e20612027636c65616e2720737461746560448201527f2e00000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600287101580156109ce575060d88711155b1515610a24576040805160e560020a62461bcd02815260206004820152601e60248201527f4d6f64756c6f2073686f756c642062652077697468696e2072616e67652e0000604482015290519081900360640190fd5b662386f26fc100003410158015610a455750693f870857a3e0e38000003411155b1515610a9b576040805160e560020a62461bcd02815260206004820152601e60248201527f416d6f756e742073686f756c642062652077697468696e2072616e67652e0000604482015290519081900360640190fd5b600088118015610ac657507b0100000000000000000000000000000000000000000000000000000088105b1515610b1c576040805160e560020a62461bcd02815260206004820152601c60248201527f4d61736b2073686f756c642062652077697468696e2072616e67652e00000000604482015290519081900360640190fd5b43861015610b74576040805160e560020a62461bcd02815260206004820152601360248201527f436f6d6d69742068617320657870697265642e00000000000000000000000000604482015290519081900360640190fd5b60408051602080820189905281830188905282518083038401815260608301808552815191830191909120600090915260808301808552819052601b60a084015260c0830188905260e0830187905292516001926101008082019392601f1981019281900390910190855afa158015610bf1573d6000803e3d6000fd5b5050604051601f190151600354600160a060020a039081169116149050610c62576040805160e560020a62461bcd02815260206004820152601d60248201527f4543445341207369676e6174757265206973206e6f742076616c69642e000000604482015290519081900360640190fd5b60008060288a11610cb6575050603f7e010410410410410410410410410410410410410410410410410410410410417920000000001000000000080000000004000000000200000000018b02160689610e4c565b60508a11610cd357610cc98b6002611d3f565b91508a9050610e4c565b8960641415610d705760008b118015610cec5750898b11155b1515610d68576040805160e560020a62461bcd02815260206004820152602e60248201527f48696768206d6f64756c6f2072616e67652c206265744d61736b206c6172676560448201527f72207468616e206d6f64756c6f2e000000000000000000000000000000000000606482015290519081900360840190fd5b8a9150610e4c565b60788a11610d8357610cc98b6003611d3f565b60a08a11610d9657610cc98b6004611d3f565b60c88a11610da957610cc98b6005611d3f565b60d88a11610dbc57610cc98b6006611d3f565b60008b118015610dcc5750898b11155b1515610e48576040805160e560020a62461bcd02815260206004820152602e60248201527f48696768206d6f64756c6f2072616e67652c206265744d61736b206c6172676560448201527f72207468616e206d6f64756c6f2e000000000000000000000000000000000000606482015290519081900360840190fd5b8a91505b600080610e5a348d86611df9565b60025491935091506001608060020a03163401821115610ec4576040805160e560020a62461bcd02815260206004820152601a60248201527f6d617850726f666974206c696d69742076696f6c6174696f6e2e000000000000604482015290519081900360640190fd5b600480546001608060020a03608060020a808304821686018216810292821692909217808216850182166fffffffffffffffffffffffffffffffff19919091161792839055303183821692909304811691909101161115610f6f576040805160e560020a62461bcd02815260206004820152601f60248201527f43616e6e6f74206166666f726420746f206c6f73652074686973206265742e00604482015290519081900360640190fd5b604080518b81526020810189905281517facafc53544c2ca5cd4dbfda9282c25a35859f0d4ceb77a8275dca1660b1ed3ad929181900390910190a15050835460018501805464ffffffffff19164364ffffffffff9081169190911716650100000000007affffffffffffffffffffffffffffffffffffffffffffffffffffff94909416939093029290921790915569ffffffffffffffffffff19163469ffffffffffffffffffff16176aff0000000000000000000019166a010000000000000000000060ff9a8b1602176bff000000000000000000000019166b0100000000000000000000009190991602979097176bffffffffffffffffffffffff16336c010000000000000000000000000217905550505050505050565b600054600160a060020a03163314806110ab5750600154600160a060020a031633145b1515611101576040805160e560020a62461bcd02815260206004820152602660248201526000805160206121ca833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600454608060020a90046001608060020a0316156111b5576040805160e560020a62461bcd02815260206004820152604860248201527f416c6c20626574732073686f756c642062652070726f6365737365642028736560448201527f74746c6564206f7220726566756e64656429206265666f72652073656c662d6460648201527f657374727563742e000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b6002805470ff000000000000000000000000000000001916608060020a179055600480546fffffffffffffffffffffffffffffffff1916905560008054604051600160a060020a0390911691303180156108fc02929091818181858888f19350505050158015611229573d6000803e3d6000fd5b50565b600354600160a060020a031681565b600154600160a060020a031681565b606281565b6004546001608060020a031681565b600054600160a060020a03163314806112815750600154600160a060020a031633145b15156112d7576040805160e560020a62461bcd02815260206004820152602660248201526000805160206121ca833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b600160a060020a03811615156112ec57600080fd5b600054600160a060020a038281169116141561130757600080fd5b600154600160a060020a038281169116141561132257600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314806113745750600154600160a060020a031633145b15156113ca576040805160e560020a62461bcd02815260206004820152602660248201526000805160206121ca833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b693f870857a3e0e38000006001608060020a0382161061145a576040805160e560020a62461bcd02815260206004820152602260248201527f6d617850726f6669742073686f756c6420626520612073616e65206e756d626560448201527f722e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600280546fffffffffffffffffffffffffffffffff19166001608060020a0392909216919091179055565b600654600160a060020a031681565b600054600160a060020a031681565b6000908152600560205260409020805460019091015469ffffffffffffffffffff8216926a0100000000000000000000830460ff908116936b01000000000000000000000081049091169264ffffffffff811692650100000000009091047affffffffffffffffffffffffffffffffffffffffffffffffffffff16916c010000000000000000000000009004600160a060020a031690565b6002546001608060020a031681565b660110d9316ec00081565b66038d7ea4c6800081565b600654600160a060020a031633146115e8576040805160e560020a62461bcd02815260206004820152602c60248201527f4f6e6c7943726f7570696572206d6574686f64732063616c6c6564206279206e60448201527f6f6e2d63726f75706965722e0000000000000000000000000000000000000000606482015290519081900360840190fd5b604080516020808201859052825180830382018152918301835281519181019190912060008181526005909252919020600181015464ffffffffff164381106116a1576040805160e560020a62461bcd02815260206004820152603360248201527f736574746c6542657420696e207468652073616d6520626c6f636b206173207060448201527f6c6163654265742c206f72206265666f72652e00000000000000000000000000606482015290519081900360840190fd5b60fa8101431115611722576040805160e560020a62461bcd02815260206004820152602260248201527f426c6f636b686173682063616e2774206265207175657269656420627920455660448201527f4d2e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8040841461177a576040805160e560020a62461bcd02815260206004820152601160248201527f626c6f636b4861736820696e76616c6964000000000000000000000000000000604482015290519081900360640190fd5b61178682868686611f42565b5050505050565b600054600160a060020a03163314806117b05750600154600160a060020a031633145b1515611806576040805160e560020a62461bcd02815260206004820152602660248201526000805160206121ca833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b3031811115611884576040805160e560020a62461bcd028152602060048201526024808201527f496e63726561736520616d6f756e74206c6172676572207468616e2062616c6160448201527f6e63652e00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60045430316001608060020a03808316608060020a909304811692909201909116820111156118fd576040805160e560020a62461bcd02815260206004820152601160248201527f4e6f7420656e6f7567682066756e64732e000000000000000000000000000000604482015290519081900360640190fd5b600480546fffffffffffffffffffffffffffffffff1981166001608060020a039182169390930116919091179055565b600054600160a060020a03163314806119505750600154600160a060020a031633145b15156119a6576040805160e560020a62461bcd02815260206004820152602660248201526000805160206121ca833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600454608060020a90046001608060020a031681565b6000818152600560205260409020805469ffffffffffffffffffff16801515611a84576040805160e560020a62461bcd02815260206004820152602260248201527f4265742073686f756c6420626520696e20616e2027616374697665272073746160448201527f7465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600182015464ffffffffff1660fa014311611b0f576040805160e560020a62461bcd02815260206004820152602260248201527f426c6f636b686173682063616e2774206265207175657269656420627920455660448201527f4d2e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b815469ffffffffffffffffffff19168083556000908190611b5490849060ff6a010000000000000000000082048116916b010000000000000000000000900416611df9565b600480546001608060020a03608060020a80830482168690038216029181169190911791829055929450909250168111611bb457600480546001608060020a03808216849003166fffffffffffffffffffffffffffffffff199091161790555b8354611786906c010000000000000000000000009004600160a060020a0316848088611c83565b600054600160a060020a0316331480611bfe5750600154600160a060020a031633145b1515611c54576040805160e560020a62461bcd02815260206004820152602660248201526000805160206121ca833981519152604482015260d160020a6537bbb732b91702606482015290519081900360840190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604051600160a060020a0385169084156108fc029085906000818181858888f1935050505015611cf55760408051838152602081018390528151600160a060020a038716927f9643c1b5b172b26d5f028be7fe646349bd5e3cd9367bb18f9e825afa828b7d93928290030190a2611d39565b60408051848152602081018390528151600160a060020a038716927f0272d3e6608bc3ec0a0f28404d8d5ccf282a8e65df305ee6dfac9cec38a3a745928290030190a25b50505050565b603f7e0104104104104104104104104104104104104104104104104104104104104179200000000010000000000800000000040000000002000000000164ffffffffff851602160660015b82811015611df2576501000000000090930492603f64ffffffffff8516792000000000100000000008000000000400000000020000000001027e0104104104104104104104104104104104104104104104104104104104104116069190910190600101611d8a565b5092915050565b600080826000108015611e0c5750838311155b1515611e62576040805160e560020a62461bcd02815260206004820152601d60248201527f57696e2070726f626162696c697479206f7574206f662072616e67652e000000604482015290519081900360640190fd5b67016345785d8a0000851015611e79576000611e82565b66038d7ea4c680005b90506127106062860204660110d9316ec000811015611ea55750660110d9316ec0005b808201861015611f25576040805160e560020a62461bcd02815260206004820152602260248201527f42657420646f65736e2774206576656e20636f76657220686f7573652065646760448201527f652e000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b8385838389030302811515611f3657fe5b04925050935093915050565b835469ffffffffffffffffffff81169060ff6a010000000000000000000082048116916b010000000000000000000000810490911690600160a060020a036c010000000000000000000000009091041683151561200f576040805160e560020a62461bcd02815260206004820152602260248201527f4265742073686f756c6420626520696e20616e2027616374697665272073746160448201527f7465000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b875469ffffffffffffffffffff191688556040805160208082018a9052818301899052825180830384018152606090920190925280519101206000848281151561205557fe5b069050600080612066888888611df9565b909250905060008060648914801590612080575060d88911155b156120c55760018e0154600286900a65010000000000909104167affffffffffffffffffffffffffffffffffffffffffffffffffffff16156120c0578391505b6120d1565b878510156120d1578391505b600480546001608060020a03608060020a8083048216889003821602911617905567016345785d8a00008a1061214e5760006103e88a8881151561211157fe5b0481151561211b57fe5b06905080151561214c57600480546fffffffffffffffffffffffffffffffff1981169091556001608060020a031691505b505b600081111561219b5760408051828152602081018d90528151600160a060020a038a16927f16ea4dcfd06c1efb1dd2edf3c766c9a9b9c1d73cbd8ddf4359bd396171229950928290030190a25b6121b987838301156121af578284016121b2565b60015b848e611c83565b505050505050505050505050505056fe4f6e6c794f776e6572206d6574686f64732063616c6c6564206279206e6f6e2da165627a7a7230582018cfaf9ddd057e0e32e682bd10cf9f045c7825f1c0f404fa7e63542549dfdc71002900000000000000000000000008a6268b1362b02f6473ec22fac93795353f5173000000000000000000000000d81f6028509b1c38c48abd2e5ca6f28889ebbd4d000000000000000000000000336417d90c5135701823a50c687450fe92bd1bf80000000000000000000000006666662ac054fed267a5818001104eb0b5e8bab300000000000000000000000000000000000000000000000046c6d6faa27e0000",
  "constructorArguments": "00000000000000000000000008a6268b1362b02f6473ec22fac93795353f5173000000000000000000000000d81f6028509b1c38c48abd2e5ca6f28889ebbd4d000000000000000000000000336417d90c5135701823a50c687450fe92bd1bf80000000000000000000000006666662ac054fed267a5818001104eb0b5e8bab300000000000000000000000000000000000000000000000046c6d6faa27e0000"
}