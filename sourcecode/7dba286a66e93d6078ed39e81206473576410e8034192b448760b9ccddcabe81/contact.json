{
  "address": "0x5824d62f4f3c875c906f4e16d488bed05a87a2ea",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Crowdsale",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-09-02\n*/\n\npragma solidity ^0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n     * @dev Multiplies two numbers, throws on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two numbers, truncating the quotient.\n     */\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n     * @dev Adds two numbers, throws on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address _newOwner) public onlyOwner {\n        _transferOwnership(_newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param _newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address _newOwner) internal {\n        require(_newOwner != address(0));\n        emit OwnershipTransferred(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n        require(token.transfer(to, value));\n    }\n}\n\n/**\n * @title Oraclize contract interface (returns uint256 USD)\n */\ncontract OraclizeInterface {\n  function getEthPrice() public view returns (uint256);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address _who) public view returns (uint256);\n\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transfer(address _to, uint256 _value) public returns (bool);\n\n  function approve(address _spender, uint256 _value)\n    public returns (bool);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private balances;\n\n  mapping (address => mapping (address => uint256)) private allowed;\n\n  uint256 private totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance( address _owner, address _spender ) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param _account The account that will receive the created tokens.\n   * @param _amount The amount that will be created.\n   */\n  function _mint(address _account, uint256 _amount) internal {\n    require(_account != 0);\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_account] = balances[_account].add(_amount);\n    emit Transfer(address(0), _account, _amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param _account The account whose tokens will be burnt.\n   * @param _amount The amount that will be burnt.\n   */\n  function _burn(address _account, uint256 _amount) internal {\n    require(_account != 0);\n    require(_amount <= balances[_account]);\n\n    totalSupply_ = totalSupply_.sub(_amount);\n    balances[_account] = balances[_account].sub(_amount);\n    emit Transfer(_account, address(0), _amount);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal _burn function.\n   * @param _account The account whose tokens will be burnt.\n   * @param _amount The amount that will be burnt.\n   */\n  function _burnFrom(address _account, uint256 _amount) internal {\n    require(_amount <= allowed[_account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount);\n    _burn(_account, _amount);\n  }\n}\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract BurnableToken is StandardToken {\n\n  event Burn(address indexed burner, uint256 value);\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) public {\n    _burn(msg.sender, _value);\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n   * @param _from address The address which you want to send tokens from\n   * @param _value uint256 The amount of token to be burned\n   */\n  function burnFrom(address _from, uint256 _value) public {\n    _burnFrom(_from, _value);\n  }\n\n  /**\n   * @dev Overrides StandardToken._burn in order for burn and burnFrom to emit\n   * an additional Burn event.\n   */\n  function _burn(address _who, uint256 _value) internal {\n    super._burn(_who, _value);\n    emit Burn(_who, _value);\n  }\n}\n\n/**\n * @title EVOAIToken\n */\ncontract EVOAIToken is BurnableToken {\n    string public constant name = \"EVOAI\";\n    string public constant symbol = \"EVOT\";\n    uint8 public constant decimals = 18;\n\n    uint256 public constant INITIAL_SUPPLY = 10000000 * 1 ether; // Need to change\n\n    /**\n     * @dev Constructor\n     */\n    constructor() public {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n}\n\n/**\n * @title Crowdsale\n */\ncontract Crowdsale is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for EVOAIToken;\n\n    struct State {\n        string roundName;\n        uint256 round;    // Round index\n        uint256 tokens;   // Tokens amaunt for current round\n        uint256 rate;     // USD rate of tokens\n    }\n\n    State public state;\n    EVOAIToken public token;\n    OraclizeInterface public oraclize;\n\n    bool public open;\n    address public fundsWallet;\n    uint256 public weiRaised;\n    uint256 public usdRaised;\n    uint256 public privateSaleMinContrAmount = 1000;   // Min 1k\n    uint256 public privateSaleMaxContrAmount = 10000;  // Max 10k\n\n    /**\n    * Event for token purchase logging\n    * @param purchaser who paid for the tokens\n    * @param beneficiary who got the tokens\n    * @param value weis paid for purchase\n    * @param amount amount of tokens purchased\n    */\n    event TokensPurchased(\n        address indexed purchaser,\n        address indexed beneficiary,\n        uint256 value,\n        uint256 amount\n    );\n\n    event RoundStarts(uint256 timestamp, string round);\n\n    /**\n    * Constructor\n    */\n    constructor(address _tokenColdWallet, address _fundsWallet, address _oraclize) public {\n        token = new EVOAIToken();\n        oraclize = OraclizeInterface(_oraclize);\n        open = false;\n        fundsWallet = _fundsWallet;\n        state.roundName = \"Crowdsale doesnt started yet\";\n        token.safeTransfer(_tokenColdWallet, 3200000 * 1 ether);\n    }\n\n    // -----------------------------------------\n    // Crowdsale external interface\n    // -----------------------------------------\n\n    /**\n    * @dev fallback function ***DO NOT OVERRIDE***\n    */\n    function () external payable {\n        buyTokens(msg.sender);\n    }\n\n    /**\n    * @dev low level token purchase ***DO NOT OVERRIDE***\n    * @param _beneficiary Address performing the token purchase\n    */\n    function buyTokens(address _beneficiary) public payable {\n        uint256 weiAmount = msg.value;\n        _preValidatePurchase(_beneficiary, weiAmount);\n\n        // calculate wei to usd amount\n        uint256 usdAmount = _getEthToUsdPrice(weiAmount);\n\n        if(state.round == 1) {\n            _validateUSDAmount(usdAmount);\n        }\n\n        // calculate token amount to be created\n        uint256 tokens = _getTokenAmount(usdAmount);\n\n        assert(tokens <= state.tokens);\n\n        usdAmount = usdAmount.div(100); // Removing cents after whole calculation\n\n        // update state\n        state.tokens = state.tokens.sub(tokens);\n        weiRaised = weiRaised.add(weiAmount);\n        usdRaised = usdRaised.add(usdAmount);\n\n        _processPurchase(_beneficiary, tokens);\n\n        emit TokensPurchased(\n        msg.sender,\n        _beneficiary,\n        weiAmount,\n        tokens\n        );\n\n        _forwardFunds();\n    }\n\n    function changeFundsWallet(address _newFundsWallet) public onlyOwner {\n        require(_newFundsWallet != address(0));\n        fundsWallet = _newFundsWallet;\n    }\n\n    function burnUnsoldTokens() public onlyOwner {\n        require(state.round > 8, \"Crowdsale does not finished yet\");\n\n        uint256 unsoldTokens = token.balanceOf(this);\n        token.burn(unsoldTokens);\n    }\n\n    function changeRound() public onlyOwner {\n        if(state.round == 0) {\n            state = State(\"Private sale\", 1, 300000 * 1 ether, 35);\n            emit RoundStarts(now, \"Private sale starts.\");\n        } else if(state.round == 1) {\n            state = State(\"Pre sale\", 2, 500000 * 1 ether, 45);\n            emit RoundStarts(now, \"Pre sale starts.\");\n        } else if(state.round == 2) {\n            state = State(\"1st round\", 3, 1000000 * 1 ether, 55);\n            emit RoundStarts(now, \"1st round starts.\");\n        } else if(state.round == 3) {\n            state = State(\"2nd round\",4, 1000000 * 1 ether, 65);\n            emit RoundStarts(now, \"2nd round starts.\");\n        } else if(state.round == 4) {\n            state = State(\"3th round\",5, 1000000 * 1 ether, 75);\n            emit RoundStarts(now, \"3th round starts.\");\n        } else if(state.round == 5) {\n            state = State(\"4th round\",6, 1000000 * 1 ether, 85);\n            emit RoundStarts(now, \"4th round starts.\");\n        } else if(state.round == 6) {\n            state = State(\"5th round\",7, 1000000 * 1 ether, 95);\n            emit RoundStarts(now, \"5th round starts.\");\n        } else if(state.round == 7) {\n            state = State(\"6th round\",8, 1000000 * 1 ether, 105);\n            emit RoundStarts(now, \"6th round starts.\");\n        } else if(state.round >= 8) {\n            state = State(\"Crowdsale finished!\",9, 0, 0);\n            emit RoundStarts(now, \"Crowdsale finished!\");\n        }\n    }\n\n    function endCrowdsale() external onlyOwner {\n        open = false;\n    }\n\n    function startCrowdsale() external onlyOwner {\n        open = true;\n    }\n\n    // -----------------------------------------\n    // Internal interface\n    // -----------------------------------------\n\n    /**\n    * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n    * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n    *   super._preValidatePurchase(_beneficiary, _weiAmount);\n    *   require(weiRaised.add(_weiAmount) <= cap);\n    * @param _beneficiary Address performing the token purchase\n    * @param _weiAmount Value in wei involved in the purchase\n    */\n    function _preValidatePurchase( address _beneficiary, uint256 _weiAmount ) internal view {\n        require(open);\n        require(_beneficiary != address(0));\n        require(_weiAmount != 0);\n    }\n\n    /**\n    * @dev Validate usd amount for private sale\n    */\n    function _validateUSDAmount( uint256 _usdAmount) internal view {\n        require(_usdAmount.div(100) > privateSaleMinContrAmount);\n        require(_usdAmount.div(100) < privateSaleMaxContrAmount);\n    }\n\n    /**\n    * @dev Convert ETH to USD and return amount\n    * @param _weiAmount ETH amount which will convert to USD\n    */\n    function _getEthToUsdPrice(uint256 _weiAmount) internal view returns(uint256) {\n        return _weiAmount.mul(_getEthUsdPrice()).div(1 ether);\n    }\n\n    /**\n    * @dev Getting price from oraclize contract\n    */\n    function _getEthUsdPrice() internal view returns (uint256) {\n        return oraclize.getEthPrice();\n    }\n\n    /**\n    * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n    * @param _beneficiary Address performing the token purchase\n    * @param _tokenAmount Number of tokens to be emitted\n    */\n    function _deliverTokens( address _beneficiary, uint256 _tokenAmount ) internal {\n        token.safeTransfer(_beneficiary, _tokenAmount);\n    }\n\n    /**\n    * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n    * @param _beneficiary Address receiving the tokens\n    * @param _tokenAmount Number of tokens to be purchased\n    */\n    function _processPurchase( address _beneficiary, uint256 _tokenAmount ) internal {\n        _deliverTokens(_beneficiary, _tokenAmount);\n    }\n\n    /**\n    * @dev Override to extend the way in which usd is converted to tokens.\n    * @param _usdAmount Value in usd to be converted into tokens\n    * @return Number of tokens that can be purchased with the specified _usdAmount\n    */\n    function _getTokenAmount(uint256 _usdAmount) internal view returns (uint256) {\n        return _usdAmount.div(state.rate).mul(1 ether);\n    }\n\n    /**\n    * @dev Determines how ETH is stored/forwarded on purchases.\n    */\n    function _forwardFunds() internal {\n        fundsWallet.transfer(msg.value);\n    }\n}",
  "abi": "[{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oraclize\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFundsWallet\",\"type\":\"address\"}],\"name\":\"changeFundsWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleMinContrAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnUnsoldTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"roundName\",\"type\":\"string\"},{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleMaxContrAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenColdWallet\",\"type\":\"address\"},{\"name\":\"_fundsWallet\",\"type\":\"address\"},{\"name\":\"_oraclize\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"string\"}],\"name\":\"RoundStarts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "000000000000000000000000c1ee8cbb5584170012c6ee94b1b3b038c2adfa0800000000000000000000000066b18668423ef9b1e2436ed25920e0506b2dfb6a00000000000000000000000097d8061df1370cbac097ede6a10ca10714c7774a"
}