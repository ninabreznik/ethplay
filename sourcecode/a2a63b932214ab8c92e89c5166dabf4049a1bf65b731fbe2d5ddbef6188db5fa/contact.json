{
  "address": "0xe556519e728e6e13079a5bdf7675b196831e1454",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "MadScienceKittyUnit",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "pragma solidity ^0.4.25;\n\n/**\n * \n * World War Goo - Competitive Idle Game\n * \n * https://ethergoo.io\n * \n */\n\ninterface ERC20 {\n    function totalSupply() external constant returns (uint);\n    function balanceOf(address tokenOwner) external constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\n    function transfer(address to, uint tokens) external returns (bool success);\n    function approve(address spender, uint tokens) external returns (bool success);\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract PremiumUnit {\n    function mintUnit(address player, uint256 amount) external;\n    function equipUnit(address player, uint80 amount, uint8 chosenPosition) external;\n    uint256 public unitId;\n    uint256 public unitProductionSeconds;\n}\n\ncontract MadScienceKittyUnit is ERC20, PremiumUnit {\n    using SafeMath for uint;\n    \n    string public constant name = \"WWG Premium Unit - MAD SCIENTIST\";\n    string public constant symbol = \"MAD SCIENCE\";\n    uint256 public constant unitId = 6;\n    uint256 public unitProductionSeconds = 86400; // Num seconds for factory to produce a single unit\n    uint8 public constant decimals = 0;\n    \n    Units constant units = Units(0xf936AA9e1f22C915Abf4A66a5a6e94eb8716BA5e);\n    address constant factories = 0xC767B1CEc507f1584469E8efE1a94AD4c75e02ed;\n    \n    mapping(address => uint256) balances;\n    mapping(address => uint256) lastEquipTime;\n    mapping(address => mapping(address => uint256)) allowed;\n    uint256 public totalSupply;\n    \n    function totalSupply() external view returns (uint) {\n        return totalSupply.sub(balances[address(0)]);\n    }\n    \n    function balanceOf(address tokenOwner) external view returns (uint256) {\n        return balances[tokenOwner];\n    }\n    \n    function transfer(address to, uint tokens) external returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint tokens) external returns (bool) {\n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n    \n    function approve(address spender, uint tokens) external returns (bool) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    \n    function approveAndCall(address spender, uint256 tokens, bytes data) external returns (bool) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n    \n    function allowance(address tokenOwner, address spender) external view returns (uint256) {\n        return allowed[tokenOwner][spender];\n    }\n    \n    function mintUnit(address player, uint256 amount) external {\n        require(msg.sender == factories);\n        balances[player] += amount;\n        totalSupply += amount;\n        emit Transfer(address(0), player, amount);\n    }\n    \n    function equipUnit(address player, uint80 amount, uint8 chosenPosition) external {\n        require(msg.sender == player || msg.sender == factories);\n        units.mintUnitExternal(unitId, amount, player, chosenPosition);\n        \n        // Burn token\n        balances[player] = balances[player].sub(amount);\n        //lastEquipTime[player] = now; // Only for army premium units\n        totalSupply = totalSupply.sub(amount);\n        emit Transfer(player, address(0), amount);\n    }\n    \n    function unequipUnit(uint80 amount) external {\n        (uint80 unitsOwned,) = units.unitsOwned(msg.sender, unitId);\n        require(unitsOwned >= amount);\n        //require(lastEquipTime[msg.sender] + 24 hours < now); // To reduce unequip abuse (only for army premium units)\n        units.deleteUnitExternal(amount, unitId, msg.sender);\n        \n        // Mint token\n        balances[msg.sender] += amount;\n        totalSupply += amount;\n        emit Transfer(address(0), msg.sender, amount);\n    }\n    \n}\n\n\ninterface ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) external;\n}\n\ncontract Units {\n    mapping(address => mapping(uint256 => UnitsOwned)) public unitsOwned;\n    function mintUnitExternal(uint256 unit, uint80 amount, address player, uint8 chosenPosition) external;\n    function deleteUnitExternal(uint80 amount, uint256 unit, address player) external;\n    \n    struct UnitsOwned {\n        uint80 units;\n        uint8 factoryBuiltFlag;\n    }\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "bytecode": "60806040526201518060025534801561001757600080fd5b50610bb6806100276000396000f3006080604052600436106100d95763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416626843d981146100de57806306fdde0314610104578063095ea7b31461018e57806318160ddd146101c657806323b872dd146101ed578063313ce5671461021757806370a082311461024257806395d89b4114610263578063a9059cbb14610278578063c7830eef1461029c578063cae9ca51146102c0578063d04cf173146102f1578063dca5655314610327578063dd62ed3e1461033c578063ebd1036914610363575b600080fd5b3480156100ea57600080fd5b50610102600160a060020a0360043516602435610378565b005b34801561011057600080fd5b506101196103e5565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015357818101518382015260200161013b565b50505050905090810190601f1680156101805780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019a57600080fd5b506101b2600160a060020a036004351660243561041e565b604080519115158252519081900360200190f35b3480156101d257600080fd5b506101db610484565b60408051918252519081900360200190f35b3480156101f957600080fd5b506101b2600160a060020a03600435811690602435166044356104c7565b34801561022357600080fd5b5061022c6105c0565b6040805160ff9092168252519081900360200190f35b34801561024e57600080fd5b506101db600160a060020a03600435166105c5565b34801561026f57600080fd5b506101196105e0565b34801561028457600080fd5b506101b2600160a060020a0360043516602435610617565b3480156102a857600080fd5b5061010269ffffffffffffffffffff600435166106b5565b3480156102cc57600080fd5b506101b260048035600160a060020a0316906024803591604435918201910135610861565b3480156102fd57600080fd5b50610102600160a060020a036004351669ffffffffffffffffffff6024351660ff60443516610979565b34801561033357600080fd5b506101db610b0c565b34801561034857600080fd5b506101db600160a060020a0360043581169060243516610b11565b34801561036f57600080fd5b506101db610b3c565b3373c767b1cec507f1584469e8efe1a94ad4c75e02ed1461039857600080fd5b600160a060020a0382166000818152600360209081526040808320805486019055600680548601905580518581529051600080516020610b6b833981519152929181900390910190a35050565b6040805190810160405280602081526020017f575747205072656d69756d20556e6974202d204d414420534349454e5449535481525081565b336000818152600560209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600080805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff546006546104c29163ffffffff610b4216565b905090565b600160a060020a0383166000908152600360205260408120546104f0908363ffffffff610b4216565b600160a060020a038516600090815260036020908152604080832093909355600581528282203383529052205461052d908363ffffffff610b4216565b600160a060020a038086166000908152600560209081526040808320338452825280832094909455918616815260039091522054610571908363ffffffff610b5416565b600160a060020a038085166000818152600360209081526040918290209490945580518681529051919392881692600080516020610b6b83398151915292918290030190a35060019392505050565b600081565b600160a060020a031660009081526003602052604090205490565b60408051808201909152600b81527f4d414420534349454e4345000000000000000000000000000000000000000000602082015281565b33600090815260036020526040812054610637908363ffffffff610b4216565b3360009081526003602052604080822092909255600160a060020a03851681522054610669908363ffffffff610b5416565b600160a060020a038416600081815260036020908152604091829020939093558051858152905191923392600080516020610b6b8339815191529281900390910190a350600192915050565b604080517fc1431eda00000000000000000000000000000000000000000000000000000000815233600482015260066024820152815160009273f936aa9e1f22c915abf4a66a5a6e94eb8716ba5e9263c1431eda926044808301939282900301818787803b15801561072657600080fd5b505af115801561073a573d6000803e3d6000fd5b505050506040513d604081101561075057600080fd5b5051905069ffffffffffffffffffff808316908216101561077057600080fd5b604080517f11d5aa9300000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff8416600482015260066024820152336044820152905173f936aa9e1f22c915abf4a66a5a6e94eb8716ba5e916311d5aa9391606480830192600092919082900301818387803b1580156107f457600080fd5b505af1158015610808573d6000803e3d6000fd5b5050336000818152600360209081526040808320805469ffffffffffffffffffff8a16908101909155600680548201905581519081529051939550919350600080516020610b6b83398151915292918290030190a35050565b336000818152600560209081526040808320600160a060020a038916808552908352818420889055815188815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a36040517f8f4ffcb1000000000000000000000000000000000000000000000000000000008152336004820181815260248301879052306044840181905260806064850190815260848501879052600160a060020a038a1694638f4ffcb194938a93928a928a92919060a40184848082843782019150509650505050505050600060405180830381600087803b15801561095657600080fd5b505af115801561096a573d6000803e3d6000fd5b50600198975050505050505050565b33600160a060020a03841614806109a357503373c767b1cec507f1584469e8efe1a94ad4c75e02ed145b15156109ae57600080fd5b604080517f43f4e4dc0000000000000000000000000000000000000000000000000000000081526006600482015269ffffffffffffffffffff84166024820152600160a060020a038516604482015260ff83166064820152905173f936aa9e1f22c915abf4a66a5a6e94eb8716ba5e916343f4e4dc91608480830192600092919082900301818387803b158015610a4457600080fd5b505af1158015610a58573d6000803e3d6000fd5b505050600160a060020a038416600090815260036020526040902054610a91915069ffffffffffffffffffff841663ffffffff610b4216565b600160a060020a038416600090815260036020526040902055600654610ac99069ffffffffffffffffffff841663ffffffff610b4216565b6006556040805169ffffffffffffffffffff841681529051600091600160a060020a03861691600080516020610b6b8339815191529181900360200190a3505050565b600681565b600160a060020a03918216600090815260056020908152604080832093909416825291909152205490565b60025481565b600082821115610b4e57fe5b50900390565b600082820183811015610b6357fe5b93925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058202f5bc25821091a1fc6e013e185880d50b58a6ed68b19ef7895f4e92acc19e2670029"
}