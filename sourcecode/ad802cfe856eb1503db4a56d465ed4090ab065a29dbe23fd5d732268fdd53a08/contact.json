{
  "address": "0xd6595dfaf834201402c5aa52b2c137fcfbb07824",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "DividendToken",
  "compilerVersion": "v0.5.7+commit.6da8b019",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-04-26\n*/\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: lib/CanReclaimToken.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @title Contracts that should be able to recover tokens\n * @author SylTi\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n * This will prevent any accidental loss of tokens.\n */\ncontract CanReclaimToken is Ownable {\n\n  /**\n   * @dev Reclaim all ERC20 compatible tokens\n   * @param token ERC20 The address of the token contract\n   */\n  function reclaimToken(IERC20 token) external onlyOwner {\n    address payable owner = address(uint160(owner()));\n\n    if (address(token) == address(0)) {\n      owner.transfer(address(this).balance);\n      return;\n    }\n    uint256 balance = token.balanceOf(address(this));\n    token.transfer(owner, balance);\n  }\n\n}\n\n// File: contracts/CHDT_TRON.sol\n\npragma solidity ^0.5.0;\n\n/// @title DividendToken Contract\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\n\n\n/// @dev The actual token contract, the default owner is the msg.sender\ncontract DividendToken is IERC20, CanReclaimToken {\n\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\n    uint8 public decimals;             //Number of decimals of the smallest unit\n    string public symbol;              //An identifier: e.g. REP\n\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\n    ///  given value, the block number attached is the one that last changed the\n    ///  value\n    struct  Checkpoint {\n\n        // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n        // `value` is the amount of tokens at a specific block number\n        uint128 value;\n    }\n\n    // `parentToken` is the Token address that was cloned to produce this token;\n    //  it will be 0x0 for a token that was not cloned\n    DividendToken public parentToken;\n\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\n    //  used to determine the initial distribution of the Clone Token\n    uint public parentSnapShotBlock;\n\n    // `creationBlock` is the block number that the Clone Token was created\n    uint public creationBlock;\n\n    // `balances` is the map that tracks the balance of each address, in this\n    //  contract when the balance changes the block number that the change\n    //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n    mapping (address => mapping (address => uint256)) allowed;\n\n    // Tracks the history of the `totalSupply` of the token\n    Checkpoint[] totalSupplyHistory;\n\n\n    ////////////////\n    // Constructor\n    ////////////////\n\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n    ///  new token\n    /// @param _parentSnapShotBlock Block of the parent token that will\n    ///  determine the initial distribution of the clone token, set to 0 if it\n    ///  is a new token\n    constructor (address _parentToken, uint _parentSnapShotBlock) public {\n        name = \"CH Dividend Token TRON\";\n        symbol = \"CHDT TRON\";\n        decimals = 18;\n        parentToken = DividendToken(_parentToken);\n        parentSnapShotBlock = _parentSnapShotBlock == 0 ? block.number : _parentSnapShotBlock;\n        creationBlock = block.number;\n\n        //initial emission\n        uint _amount = 7000000 * (10 ** uint256(decimals));\n        updateValueAtNow(totalSupplyHistory, _amount);\n        updateValueAtNow(balances[msg.sender], _amount);\n        emit Transfer(address(0), msg.sender, _amount);\n    }\n\n    /// @notice The fallback function\n    function () external {}\n\n\n    ///////////////////\n    // ERC20 Methods\n    ///////////////////\n\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _amount) external returns (bool success) {\n        doTransfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n    ///  is approved by `_from`\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool success) {\n        // The standard ERC 20 transferFrom functionality\n        require(allowed[_from][msg.sender] >= _amount);\n        allowed[_from][msg.sender] -= _amount;\n        doTransfer(_from, _to, _amount);\n        return true;\n    }\n\n    /// @dev This is the actual transfer function in the token contract, it can\n    ///  only be called by other functions in this contract.\n    /// @param _from The address holding the tokens being transferred\n    /// @param _to The address of the recipient\n    /// @param _amount The amount of tokens to be transferred\n    /// @return True if the transfer was successful\n    function doTransfer(address _from, address _to, uint _amount) internal {\n\n        if (_amount == 0) {\n            emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n            return;\n        }\n\n        require(parentSnapShotBlock < block.number);\n\n        // Do not allow transfer to 0x0 or the token contract itself\n        require((_to != address(0)) && (_to != address(this)));\n\n        // If the amount being transfered is more than the balance of the\n        //  account the transfer throws\n        uint previousBalanceFrom = balanceOfAt(_from, block.number);\n\n        require(previousBalanceFrom >= _amount);\n\n        // First update the balance array with the new value for the address\n        //  sending the tokens\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n        // Then update the balance array with the new value for the address\n        //  receiving the tokens\n        uint previousBalanceTo = balanceOfAt(_to, block.number);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n        // An event to make the transfer easy to find on the blockchain\n        emit Transfer(_from, _to, _amount);\n\n    }\n\n    /// @param _owner The address that's balance is being requested\n    /// @return The balance of `_owner` at the current block\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n    ///  its behalf. This is a modified version of the ERC20 approve function\n    ///  to be a little bit safer\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _amount The amount of tokens to be approved for transfer\n    /// @return True if the approval was successful\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowance[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedAmount The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint _addedAmount) external returns (bool) {\n        require(allowed[msg.sender][_spender] + _addedAmount >= allowed[msg.sender][_spender]); // Check for overflow\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + _addedAmount;\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowance[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedAmount The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint _subtractedAmount) external returns (bool)\n    {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedAmount >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue - _subtractedAmount;\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n\n    /// @dev This function makes it easy to read the `allowed[]` map\n    /// @param _owner The address of the account that owns the token\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\n    ///  to spend\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n\n    /// @dev This function makes it easy to get the total number of tokens\n    /// @return The total number of tokens\n    function totalSupply() public view returns (uint) {\n        return totalSupplyAt(block.number);\n    }\n\n\n    ////////////////\n    // Query balance and totalSupply in History\n    ////////////////\n\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n    /// @param _owner The address from which the balance will be retrieved\n    /// @param _blockNumber The block number when the balance is queried\n    /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint) {\n\n        // These next few lines are used when the balance of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.balanceOfAt` be queried at the\n        //  genesis block for that token as this contains initial balance of\n        //  this token\n        if ((balances[_owner].length == 0)\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != address(0)) {\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n            } else {\n                // Has no parent\n                return 0;\n            }\n\n            // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\n    /// @param _blockNumber The block number when the totalSupply is queried\n    /// @return The total amount of tokens at `_blockNumber`\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n\n        // These next few lines are used when the totalSupply of the token is\n        //  requested before a check point was ever created for this token, it\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\n        //  genesis block for this token as that contains totalSupply of this\n        //  token at this block number.\n        if ((totalSupplyHistory.length == 0)\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            if (address(parentToken) != address(0)) {\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n            } else {\n                return 0;\n            }\n\n            // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n\n    ////////////////\n    // Mint and burn tokens\n    ////////////////\n\n    /// @notice Mints `_amount` tokens that are assigned to `_owner`\n    /// @param _owner The address that will be assigned the new tokens\n    /// @param _amount The quantity of tokens generated\n    /// @return True if the tokens are generated correctly\n    function mint(address _owner, uint _amount) external onlyOwner returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint previousBalanceTo = balanceOf(_owner);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n        emit Transfer(address(0), _owner, _amount);\n        return true;\n    }\n\n\n    /// @notice Burns `_amount` tokens from `_owner`\n    /// @param _owner The address that will lose the tokens\n    /// @param _amount The quantity of tokens to burn\n    /// @return True if the tokens are burned correctly\n    function burn(address _owner, uint _amount) external onlyOwner returns (bool) {\n        uint curTotalSupply = totalSupply();\n        require(curTotalSupply >= _amount);\n        uint previousBalanceFrom = balanceOf(_owner);\n        require(previousBalanceFrom >= _amount);\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n        emit Transfer(_owner, address(0), _amount);\n        return true;\n    }\n\n\n    ////////////////\n    // Internal helper functions to query and set a value in a snapshot array\n    ////////////////\n\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n    /// @param checkpoints The history of values being queried\n    /// @param _block The block number to retrieve the value at\n    /// @return The number of tokens being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) view internal returns (uint) {\n        if (checkpoints.length == 0) return 0;\n\n        // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\n    ///  `totalSupplyHistory`\n    /// @param checkpoints The history of data being updated\n    /// @param _value The new number of tokens\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal  {\n        if ((checkpoints.length == 0)\n            || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n            Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n            newCheckPoint.fromBlock =  uint128(block.number);\n            newCheckPoint.value = uint128(_value);\n        } else {\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n            oldCheckPoint.value = uint128(_value);\n        }\n    }\n\n\n    /// @dev Helper function to return a min betwen the two uints\n    function min(uint a, uint b) pure internal returns (uint) {\n        return a < b ? a : b;\n    }\n\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b5060405160408062001631833981018060405260408110156200003357600080fd5b508051602090910151600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36040805180820190915260168082527f4348204469766964656e6420546f6b656e2054524f4e000000000000000000006020909201918252620000cb91600191620002cc565b506040805180820190915260098082527f434844542054524f4e000000000000000000000000000000000000000000000060209092019182526200011291600391620002cc565b506002805460ff19166012179055600480546001600160a01b0384166001600160a01b031990911617905580156200014b57806200014d565b435b6005554360065560025460ff16600a0a626acfc00262000176600982620001da602090811b901c565b33600090815260076020908152604090912062000199918390620001da811b901c565b60408051828152905133916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050506200039d565b815415806200021057508154439083906000198101908110620001f957fe5b6000918252602090912001546001600160801b0316105b156200028057815460009083906200022c826001830162000351565b815481106200023757fe5b600091825260209091200180546001600160801b03848116700100000000000000000000000000000000024382166001600160801b0319909316929092171617905550620002c8565b8154600090839060001981019081106200029657fe5b600091825260209091200180546001600160801b03808516700100000000000000000000000000000000029116179055505b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200030f57805160ff19168380011785556200033f565b828001600101855582156200033f579182015b828111156200033f57825182559160200191906001019062000322565b506200034d9291506200037d565b5090565b8154818355818111156200037857600083815260209020620003789181019083016200037d565b505050565b6200039a91905b808211156200034d576000815560010162000384565b90565b61128480620003ad6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c35780639dc29fac1161007c5780639dc29fac146103b3578063a9059cbb146103df578063c5bcc4f11461040b578063d73dd62314610413578063dd62ed3e1461043f578063f2fde38b1461046d5761014d565b8063715018a61461035257806380a540011461035a5780638da5cb5b1461037e5780638f32d59b1461038657806395d89b411461038e578063981b24d0146103965761014d565b806323b872dd1161011557806323b872dd14610254578063313ce5671461028a57806340c10f19146102a85780634ee2cd7e146102d4578063661884631461030057806370a082311461032c5761014d565b806306fdde031461014f578063095ea7b3146101cc578063176345141461020c57806317ffc3201461022657806318160ddd1461024c575b005b610157610493565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610191578181015183820152602001610179565b50505050905090810190601f1680156101be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f8600480360360408110156101e257600080fd5b506001600160a01b038135169060200135610520565b604080519115158252519081900360200190f35b6102146105c1565b60408051918252519081900360200190f35b61014d6004803603602081101561023c57600080fd5b50356001600160a01b03166105c7565b610214610733565b6101f86004803603606081101561026a57600080fd5b506001600160a01b03813581169160208101359091169060400135610744565b6102926107b3565b6040805160ff9092168252519081900360200190f35b6101f8600480360360408110156102be57600080fd5b506001600160a01b0381351690602001356107bc565b610214600480360360408110156102ea57600080fd5b506001600160a01b038135169060200135610871565b6101f86004803603604081101561031657600080fd5b506001600160a01b0381351690602001356109b7565b6102146004803603602081101561034257600080fd5b50356001600160a01b0316610a9a565b61014d610aae565b610362610b09565b604080516001600160a01b039092168252519081900360200190f35b610362610b18565b6101f8610b27565b610157610b38565b610214600480360360208110156103ac57600080fd5b5035610b93565b6101f8600480360360408110156103c957600080fd5b506001600160a01b038135169060200135610c80565b6101f8600480360360408110156103f557600080fd5b506001600160a01b038135169060200135610d31565b610214610d47565b6101f86004803603604081101561042957600080fd5b506001600160a01b038135169060200135610d4d565b6102146004803603604081101561045557600080fd5b506001600160a01b0381358116916020013516610deb565b61014d6004803603602081101561048357600080fd5b50356001600160a01b0316610e16565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105185780601f106104ed57610100808354040283529160200191610518565b820191906000526020600020905b8154815290600101906020018083116104fb57829003601f168201915b505050505081565b600081158061055057503360009081526008602090815260408083206001600160a01b0387168452909152902054155b61055957600080fd5b3360008181526008602090815260408083206001600160a01b03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60065481565b6105cf610b27565b6105d857600080fd5b60006105e2610b18565b90506001600160a01b03821661062f576040516001600160a01b03821690303180156108fc02916000818181858888f19350505050158015610628573d6000803e3d6000fd5b5050610730565b60408051600160e01b6370a0823102815230600482015290516000916001600160a01b038516916370a0823191602480820192602092909190829003018186803b15801561067c57600080fd5b505afa158015610690573d6000803e3d6000fd5b505050506040513d60208110156106a657600080fd5b505160408051600160e01b63a9059cbb0281526001600160a01b0385811660048301526024820184905291519293509085169163a9059cbb916044808201926020929091908290030181600087803b15801561070157600080fd5b505af1158015610715573d6000803e3d6000fd5b505050506040513d602081101561072b57600080fd5b505050505b50565b600061073e43610b93565b90505b90565b6001600160a01b038316600090815260086020908152604080832033845290915281205482111561077457600080fd5b6001600160a01b03841660009081526008602090815260408083203384529091529020805483900390556107a9848484610e30565b5060019392505050565b60025460ff1681565b60006107c6610b27565b6107cf57600080fd5b60006107d9610733565b90508083820110156107ea57600080fd5b60006107f585610a9a565b905080848201101561080657600080fd5b6108136009858401610f6c565b6001600160a01b038516600090815260076020526040902061083790828601610f6c565b6040805185815290516001600160a01b038716916000916000805160206112398339815191529181900360200190a3506001949350505050565b6001600160a01b03821660009081526007602052604081205415806108cb57506001600160a01b038316600090815260076020526040812080548492906108b457fe5b6000918252602090912001546001600160801b0316115b1561098e576004546001600160a01b031615610986576004546005546001600160a01b0390911690634ee2cd7e908590610906908690611045565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b031681526020018281526020019250505060206040518083038186803b15801561095357600080fd5b505afa158015610967573d6000803e3d6000fd5b505050506040513d602081101561097d57600080fd5b505190506105bb565b5060006105bb565b6001600160a01b03831660009081526007602052604090206109b0908361105d565b90506105bb565b3360009081526008602090815260408083206001600160a01b0386168452909152812054808310610a0b573360009081526008602090815260408083206001600160a01b0388168452909152812055610a34565b3360009081526008602090815260408083206001600160a01b0388168452909152902083820390555b3360008181526008602090815260408083206001600160a01b0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000610aa68243610871565b90505b919050565b610ab6610b27565b610abf57600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6004546001600160a01b031681565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156105185780601f106104ed57610100808354040283529160200191610518565b6009546000901580610bc65750816009600081548110610baf57fe5b6000918252602090912001546001600160801b0316115b15610c6e576004546001600160a01b031615610c66576004546005546001600160a01b039091169063981b24d090610bff908590611045565b6040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c3357600080fd5b505afa158015610c47573d6000803e3d6000fd5b505050506040513d6020811015610c5d57600080fd5b50519050610aa9565b506000610aa9565b610c7960098361105d565b9050610aa9565b6000610c8a610b27565b610c9357600080fd5b6000610c9d610733565b905082811015610cac57600080fd5b6000610cb785610a9a565b905083811015610cc657600080fd5b610cd36009858403610f6c565b6001600160a01b0385166000908152600760205260409020610cf790858303610f6c565b6040805185815290516000916001600160a01b038816916000805160206112398339815191529181900360200190a3506001949350505050565b6000610d3e338484610e30565b50600192915050565b60055481565b3360009081526008602090815260408083206001600160a01b03861684529091528120548281011015610d7f57600080fd5b3360008181526008602090815260408083206001600160a01b038816808552908352928190208054870190819055815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b610e1e610b27565b610e2757600080fd5b6107308161118d565b80610e7357816001600160a01b0316836001600160a01b0316600080516020611239833981519152836040518082815260200191505060405180910390a3610f67565b4360055410610e8157600080fd5b6001600160a01b03821615801590610ea257506001600160a01b0382163014155b610eab57600080fd5b6000610eb78443610871565b905081811015610ec657600080fd5b6001600160a01b0384166000908152600760205260409020610eea90838303610f6c565b6000610ef68443610871565b9050808382011015610f0757600080fd5b6001600160a01b0384166000908152600760205260409020610f2b90828501610f6c565b836001600160a01b0316856001600160a01b0316600080516020611239833981519152856040518082815260200191505060405180910390a350505b505050565b81541580610fa057508154439083906000198101908110610f8957fe5b6000918252602090912001546001600160801b0316105b156110075781546000908390610fb982600183016111fb565b81548110610fc357fe5b600091825260209091200180546001600160801b03848116600160801b024382166fffffffffffffffffffffffffffffffff19909316929092171617905550611041565b81546000908390600019810190811061101c57fe5b600091825260209091200180546001600160801b03808516600160801b029116179055505b5050565b60008183106110545781611056565b825b9392505050565b815460009061106e575060006105bb565b82548390600019810190811061108057fe5b6000918252602090912001546001600160801b031682106110d0578254839060001981019081106110ad57fe5b600091825260209091200154600160801b90046001600160801b031690506105bb565b826000815481106110dd57fe5b6000918252602090912001546001600160801b0316821015611101575060006105bb565b8254600090600019015b8181111561115c57600060026001838501010490508486828154811061112d57fe5b6000918252602090912001546001600160801b03161161114f57809250611156565b6001810391505b5061110b565b84828154811061116857fe5b600091825260209091200154600160801b90046001600160801b031695945050505050565b6001600160a01b0381166111a057600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b815481835581811115610f6757600083815260209020610f6791810190830161074191905b808211156112345760008155600101611220565b509056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820ec24e130de533890ef8825421fdbdc3c454d3129526db6655a79059ffb979498002900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
}