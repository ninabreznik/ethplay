{
  "address": "0xfab46e002bbf0b4509813474841e0716e6730136",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "FaucetToken",
  "compilerVersion": "v0.5.5+commit.47a71e8f",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-08\n*/\n\n/**                                                                         \n* ________                                                ____                                                           \n* `MMMMMMMb.                                             6MMMMb\\                                                         \n*  MM    `Mb                                            6M'    `                                                         \n*  MM     MM   ____  __ ____  __ ____     ____  ___  __ MM         ____     ____         ____     _____  ___  __    __   \n*  MM     MM  6MMMMb `M6MMMMb `M6MMMMb   6MMMMb `MM 6MM YM.       6MMMMb   6MMMMb.      6MMMMb.  6MMMMMb `MM 6MMb  6MMb  \n*  MM    .M9 6M'  `Mb MM'  `Mb MM'  `Mb 6M'  `Mb MM69 \"  YMMMMb  6M'  `Mb 6M'   Mb     6M'   Mb 6M'   `Mb MM69 `MM69 `Mb \n*  MMMMMMM9' MM    MM MM    MM MM    MM MM    MM MM'         `Mb MM    MM MM    `'     MM    `' MM     MM MM'   MM'   MM \n*  MM        MMMMMMMM MM    MM MM    MM MMMMMMMM MM           MM MMMMMMMM MM           MM       MM     MM MM    MM    MM \n*  MM        MM       MM    MM MM    MM MM       MM           MM MM       MM           MM       MM     MM MM    MM    MM \n*  MM        YM    d9 MM.  ,M9 MM.  ,M9 YM    d9 MM     L    ,M9 YM    d9 YM.   d9 68b YM.   d9 YM.   ,M9 MM    MM    MM \n* _MM_        YMMMM9  MMYMMM9  MMYMMM9   YMMMM9 _MM_    MYMMMM9   YMMMM9   YMMMM9  Y89  YMMMM9   YMMMMM9 _MM_  _MM_  _MM_\n*                     MM       MM                                                                                        \n*                     MM       MM                                                                                        \n*                    _MM_     _MM_                                                                                       \n*/\n\n\n// Get a free estimate for your Solidity audit @ [emailÂ protected] \n// https://peppersec.com\n\n/**\n*   _______    _                ______                   _   \n*  |__   __|  | |              |  ____|                 | |  \n*     | | ___ | | _____ _ __   | |__ __ _ _   _  ___ ___| |_ \n*     | |/ _ \\| |/ / _ \\ '_ \\  |  __/ _` | | | |/ __/ _ \\ __|\n*     | | (_) |   <  __/ | | | | | | (_| | |_| | (_|  __/ |_ \n*     |_|\\___/|_|\\_\\___|_| |_| |_|  \\__,_|\\__,_|\\___\\___|\\__|\n*/\npragma solidity ^0.5.5;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://eips.ethereum.org/EIPS/eip-20\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title ERC20Detailed token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/Roles.sol\n\npragma solidity ^0.5.2;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\n\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n\npragma solidity ^0.5.2;\n\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n\npragma solidity ^0.5.2;\n\n\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\npragma solidity ^0.5.2;\n\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The account whose tokens will be burned.\n     * @param value uint256 The amount of token to be burned.\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: contracts/FaucetToken.sol\n\npragma solidity 0.5.5;\n\n\n\n\n\ncontract FaucetToken is ERC20, ERC20Detailed, ERC20Mintable, ERC20Burnable {\n    uint8 public constant DECIMALS = 18;\n    uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(DECIMALS));\n\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor () public ERC20Detailed(\"FaucetToken\", \"FAU\", DECIMALS) {\n    }\n\n    function() external {\n        mint(msg.sender, 1 ether);\n    }\n\n    function mint(address to, uint256 value) public returns (bool) {\n        require(value <= 10000000 ether, \"dont be greedy\");\n        _mint(to, value);\n        return true;\n    }\n\n}",
  "bytecode": "60806040523480156200001157600080fd5b506040518060400160405280600b81526020017f466175636574546f6b656e0000000000000000000000000000000000000000008152506040518060400160405280600381526020017f46415500000000000000000000000000000000000000000000000000000000008152506012826003908051906020019062000098929190620001c0565b508151620000ae906004906020850190620001c0565b506005805460ff191660ff9290921691909117905550620000d8905033620000de602090811b901c565b62000265565b620000f98160066200013060201b62000b1e1790919060201c565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b6001600160a01b03811615156200014657600080fd5b6200015882826200018860201b60201c565b156200016357600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382161515620001a057600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020357805160ff191683800117855562000233565b8280016001018555821562000233579182015b828111156200023357825182559160200191906001019062000216565b506200024192915062000245565b5090565b6200026291905b808211156200024157600081556001016200024c565b90565b610be480620002756000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806342966c68116100ad57806398650275116100715780639865027514610368578063a457c2d714610370578063a9059cbb1461039c578063aa271e1a146103c8578063dd62ed3e146103ee57610121565b806342966c68146102c957806370a08231146102e857806379cc67901461030e57806395d89b411461033a578063983b2d561461034257610121565b80632e0f2625116100f45780632e0f2625146102435780632ff2e9dc14610261578063313ce56714610269578063395093511461027157806340c10f191461029d57610121565b806306fdde0314610136578063095ea7b3146101b357806318160ddd146101f357806323b872dd1461020d575b61013333670de0b6b3a764000061041c565b50005b61013e610494565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610178578181015183820152602001610160565b50505050905090810190601f1680156101a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101df600480360360408110156101c957600080fd5b506001600160a01b03813516906020013561052a565b604080519115158252519081900360200190f35b6101fb610537565b60408051918252519081900360200190f35b6101df6004803603606081101561022357600080fd5b506001600160a01b0381358116916020810135909116906040013561053d565b61024b610594565b6040805160ff9092168252519081900360200190f35b6101fb610599565b61024b6105a7565b6101df6004803603604081101561028757600080fd5b506001600160a01b0381351690602001356105b0565b6101df600480360360408110156102b357600080fd5b506001600160a01b03813516906020013561041c565b6102e6600480360360208110156102df57600080fd5b50356105ec565b005b6101fb600480360360208110156102fe57600080fd5b50356001600160a01b03166105f9565b6102e66004803603604081101561032457600080fd5b506001600160a01b038135169060200135610614565b61013e610622565b6102e66004803603602081101561035857600080fd5b50356001600160a01b0316610683565b6102e66106a0565b6101df6004803603604081101561038657600080fd5b506001600160a01b0381351690602001356106ab565b6101df600480360360408110156103b257600080fd5b506001600160a01b0381351690602001356106e7565b6101df600480360360208110156103de57600080fd5b50356001600160a01b03166106f4565b6101fb6004803603604081101561040457600080fd5b506001600160a01b038135811691602001351661070d565b60006a084595161401484a0000008211156104815760408051600160e51b62461bcd02815260206004820152600e60248201527f646f6e7420626520677265656479000000000000000000000000000000000000604482015290519081900360640190fd5b61048b8383610738565b50600192915050565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105205780601f106104f557610100808354040283529160200191610520565b820191906000526020600020905b81548152906001019060200180831161050357829003601f168201915b5050505050905090565b600061048b3384846107e2565b60025490565b600061054a84848461086e565b6001600160a01b03841660009081526001602090815260408083203380855292529091205461058a918691610585908663ffffffff61093b16565b6107e2565b5060019392505050565b601281565b69021e19e0c9bab240000081565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161048b918590610585908663ffffffff61095016565b6105f63382610969565b50565b6001600160a01b031660009081526020819052604090205490565b61061e8282610a12565b5050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105205780601f106104f557610100808354040283529160200191610520565b61068c336106f4565b151561069757600080fd5b6105f681610a57565b6106a933610a9f565b565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161048b918590610585908663ffffffff61093b16565b600061048b33848461086e565b600061070760068363ffffffff610ae716565b92915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b038216151561074d57600080fd5b600254610760908263ffffffff61095016565b6002556001600160a01b03821660009081526020819052604090205461078c908263ffffffff61095016565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b03821615156107f757600080fd5b6001600160a01b038316151561080c57600080fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038216151561088357600080fd5b6001600160a01b0383166000908152602081905260409020546108ac908263ffffffff61093b16565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546108e1908263ffffffff61095016565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282111561094a57600080fd5b50900390565b60008282018381101561096257600080fd5b9392505050565b6001600160a01b038216151561097e57600080fd5b600254610991908263ffffffff61093b16565b6002556001600160a01b0382166000908152602081905260409020546109bd908263ffffffff61093b16565b6001600160a01b038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b610a1c8282610969565b6001600160a01b03821660009081526001602090815260408083203380855292529091205461061e918491610585908563ffffffff61093b16565b610a6860068263ffffffff610b1e16565b6040516001600160a01b038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b610ab060068263ffffffff610b6c16565b6040516001600160a01b038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b60006001600160a01b0382161515610afe57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b0381161515610b3357600080fd5b610b3d8282610ae7565b15610b4757600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b0381161515610b8157600080fd5b610b8b8282610ae7565b1515610b9657600080fd5b6001600160a01b0316600090815260209190915260409020805460ff1916905556fea165627a7a723058206eaa2278b590f1f38a08af8c8926ddd19ac3067fa9489efc7efa8f140c5c2f8c0029"
}