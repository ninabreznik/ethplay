{
  "address": "0xcda4c0eb3a2eab9ed29b37284249a89688cbc9b6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Populous",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\npragma solidity ^0.4.17;\n\n// File: contracts/iERC20Token.sol\n\n// Abstract contract for the full ERC 20 Token standard\n// https://github.com/ConsenSys/Tokens\n// https://github.com/ethereum/EIPs/issues/20\npragma solidity ^0.4.17;\n\n\n/// @title iERC20Token contract\ncontract iERC20Token {\n\n    // FIELDS\n\n    \n    uint256 public totalSupply = 0;\n    bytes32 public name;// token name, e.g, pounds for fiat UK pounds.\n    uint8 public decimals;// How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    bytes32 public symbol;// An identifier: eg SBX.\n\n\n    // NON-CONSTANT METHODS\n\n    /// @dev send `_value` tokens to `_to` address/wallet from `msg.sender`.\n    /// @param _to The address of the recipient.\n    /// @param _value The amount of token to be transferred.\n    /// @return Whether the transfer was successful or not.\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @dev send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens.\n    /// @param _spender The address of the account able to transfer the tokens.\n    /// @param _value The amount of tokens to be approved for transfer.\n    /// @return Whether the approval was successful or not.\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    // CONSTANT METHODS\n\n    /** @dev Checks the balance of an address without changing the state of the blockchain.\n      * @param _owner The address to check.\n      * @return balance An unsigned integer representing the token balance of the address.\n      */\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    /** @dev Checks for the balance of the tokens of that which the owner had approved another address owner to spend.\n      * @param _owner The address of the token owner.\n      * @param _spender The address of the allowed spender.\n      * @return remaining An unsigned integer representing the remaining approved tokens.\n      */\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n\n    // EVENTS\n\n    // An event triggered when a transfer of tokens is made from a _from address to a _to address.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    // An event triggered when an owner of tokens successfully approves another address to spend a specified amount of tokens.\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n// File: contracts/CurrencyToken.sol\n\n/// @title CurrencyToken contract\ncontract CurrencyToken {\n\n    address public server; // Address, which the platform website uses.\n    address public populous; // Address of the Populous bank contract.\n\n    uint256 public totalSupply;\n    bytes32 public name;// token name, e.g, pounds for fiat UK pounds.\n    uint8 public decimals;// How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n    bytes32 public symbol;// An identifier: eg SBX.\n\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowed;\n    //EVENTS\n    // An event triggered when a transfer of tokens is made from a _from address to a _to address.\n    event Transfer(\n        address indexed _from, \n        address indexed _to, \n        uint256 _value\n    );\n    // An event triggered when an owner of tokens successfully approves another address to spend a specified amount of tokens.\n    event Approval(\n        address indexed _owner, \n        address indexed _spender, \n        uint256 _value\n    );\n    event EventMintTokens(bytes32 currency, address owner, uint amount);\n    event EventDestroyTokens(bytes32 currency, address owner, uint amount);\n\n\n    // MODIFIERS\n\n    modifier onlyServer {\n        require(isServer(msg.sender) == true);\n        _;\n    }\n\n    modifier onlyServerOrOnlyPopulous {\n        require(isServer(msg.sender) == true || isPopulous(msg.sender) == true);\n        _;\n    }\n\n    modifier onlyPopulous {\n        require(isPopulous(msg.sender) == true);\n        _;\n    }\n    // NON-CONSTANT METHODS\n    \n    /** @dev Creates a new currency/token.\n      * param _decimalUnits The decimal units/places the token can have.\n      * param _tokenSymbol The token's symbol, e.g., GBP.\n      * param _decimalUnits The tokens decimal unites/precision\n      * param _amount The amount of tokens to create upon deployment\n      * param _owner The owner of the tokens created upon deployment\n      * param _server The server/admin address\n      */\n    function CurrencyToken ()\n        public\n    {\n        populous = server = 0xf8B3d742B245Ec366288160488A12e7A2f1D720D;\n        symbol = name = 0x55534443; // Set the name for display purposes\n        decimals = 6; // Amount of decimals for display purposes\n        balances[server] = safeAdd(balances[server], 10000000000000000);\n        totalSupply = safeAdd(totalSupply, 10000000000000000);\n    }\n\n    // ERC20\n\n    /** @dev Mints a specified amount of tokens \n      * @param owner The token owner.\n      * @param amount The amount of tokens to create.\n      */\n    function mint(uint amount, address owner) public onlyServerOrOnlyPopulous returns (bool success) {\n        balances[owner] = safeAdd(balances[owner], amount);\n        totalSupply = safeAdd(totalSupply, amount);\n        emit EventMintTokens(symbol, owner, amount);\n        return true;\n    }\n\n    /** @dev Destroys a specified amount of tokens \n      * @dev The method uses a modifier from withAccessManager contract to only permit populous to use it.\n      * @dev The method uses SafeMath to carry out safe token deductions/subtraction.\n      * @param amount The amount of tokens to create.\n      */\n    function destroyTokens(uint amount) public onlyServerOrOnlyPopulous returns (bool success) {\n        require(balances[msg.sender] >= amount);\n        balances[msg.sender] = safeSub(balances[msg.sender], amount);\n        totalSupply = safeSub(totalSupply, amount);\n        emit EventDestroyTokens(symbol, populous, amount);\n        return true;\n    }\n    \n    /** @dev Destroys a specified amount of tokens, from a user.\n      * @dev The method uses a modifier from withAccessManager contract to only permit populous to use it.\n      * @dev The method uses SafeMath to carry out safe token deductions/subtraction.\n      * @param amount The amount of tokens to create.\n      */\n    function destroyTokensFrom(uint amount, address from) public onlyServerOrOnlyPopulous returns (bool success) {\n        require(balances[from] >= amount);\n        balances[from] = safeSub(balances[from], amount);\n        totalSupply = safeSub(totalSupply, amount);\n        emit EventDestroyTokens(symbol, from, amount);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n\n    // ACCESS MANAGER\n\n    /** @dev Checks a given address to determine whether it is populous address.\n      * @param sender The address to be checked.\n      * @return bool returns true or false is the address corresponds to populous or not.\n      */\n    function isPopulous(address sender) public view returns (bool) {\n        return sender == populous;\n    }\n\n        /** @dev Changes the populous contract address.\n      * @dev The method requires the message sender to be the set server.\n      * @param _populous The address to be set as populous.\n      */\n    function changePopulous(address _populous) public {\n        require(isServer(msg.sender) == true);\n        populous = _populous;\n    }\n\n    // CONSTANT METHODS\n    \n    /** @dev Checks a given address to determine whether it is the server.\n      * @param sender The address to be checked.\n      * @return bool returns true or false is the address corresponds to the server or not.\n      */\n    function isServer(address sender) public view returns (bool) {\n        return sender == server;\n    }\n\n    /** @dev Changes the server address that is set by the constructor.\n      * @dev The method requires the message sender to be the set server.\n      * @param _server The new address to be set as the server.\n      */\n    function changeServer(address _server) public {\n        require(isServer(msg.sender) == true);\n        server = _server;\n    }\n\n\n    // SAFE MATH\n\n\n      /** @dev Safely multiplies two unsigned/non-negative integers.\n    * @dev Ensures that one of both numbers can be derived from dividing the product by the other.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeMul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n  /** @dev Safely subtracts one number from another\n    * @dev Ensures that the number to subtract is lower.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n  /** @dev Safely adds two unsigned/non-negative integers.\n    * @dev Ensures that the sum of both numbers is greater or equal to one of both.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n}\n\n// File: contracts/AccessManager.sol\n\n/// @title AccessManager contract\ncontract AccessManager {\n    // FIELDS\n\n    // fields that can be changed by constructor and functions\n\n    address public server; // Address, which the platform website uses.\n    address public populous; // Address of the Populous bank contract.\n\n    // NON-CONSTANT METHODS\n\n    /** @dev Constructor that sets the server when contract is deployed.\n      * @param _server The address to set as the server.\n      */\n    function AccessManager(address _server) public {\n        server = _server;\n        //guardian = _guardian;\n    }\n\n    /** @dev Changes the server address that is set by the constructor.\n      * @dev The method requires the message sender to be the set server.\n      * @param _server The new address to be set as the server.\n      */\n    function changeServer(address _server) public {\n        require(isServer(msg.sender) == true);\n        server = _server;\n    }\n\n    /** @dev Changes the guardian address that is set by the constructor.\n      * @dev The method requires the message sender to be the set guardian.\n      */\n    /* function changeGuardian(address _guardian) public {\n        require(isGuardian(msg.sender) == true);\n        guardian = _guardian;\n    } */\n\n    /** @dev Changes the populous contract address.\n      * @dev The method requires the message sender to be the set server.\n      * @param _populous The address to be set as populous.\n      */\n    function changePopulous(address _populous) public {\n        require(isServer(msg.sender) == true);\n        populous = _populous;\n    }\n\n    // CONSTANT METHODS\n    \n    /** @dev Checks a given address to determine whether it is the server.\n      * @param sender The address to be checked.\n      * @return bool returns true or false is the address corresponds to the server or not.\n      */\n    function isServer(address sender) public view returns (bool) {\n        return sender == server;\n    }\n\n    /** @dev Checks a given address to determine whether it is the guardian.\n      * @param sender The address to be checked.\n      * @return bool returns true or false is the address corresponds to the guardian or not.\n      */\n    /* function isGuardian(address sender) public view returns (bool) {\n        return sender == guardian;\n    } */\n\n    /** @dev Checks a given address to determine whether it is populous address.\n      * @param sender The address to be checked.\n      * @return bool returns true or false is the address corresponds to populous or not.\n      */\n    function isPopulous(address sender) public view returns (bool) {\n        return sender == populous;\n    }\n\n}\n\n// File: contracts/withAccessManager.sol\n\n/// @title withAccessManager contract\ncontract withAccessManager {\n\n    // FIELDS\n    \n    AccessManager public AM;\n\n    // MODIFIERS\n\n    // This modifier uses the isServer method in the AccessManager contract AM to determine\n    // whether the msg.sender address is server.\n    modifier onlyServer {\n        require(AM.isServer(msg.sender) == true);\n        _;\n    }\n\n    modifier onlyServerOrOnlyPopulous {\n        require(AM.isServer(msg.sender) == true || AM.isPopulous(msg.sender) == true);\n        _;\n    }\n\n    // This modifier uses the isGuardian method in the AccessManager contract AM to determine\n    // whether the msg.sender address is guardian.\n    /* modifier onlyGuardian {\n        require(AM.isGuardian(msg.sender) == true);\n        _;\n    } */\n\n    // This modifier uses the isPopulous method in the AccessManager contract AM to determine\n    // whether the msg.sender address is populous.\n    modifier onlyPopulous {\n        require(AM.isPopulous(msg.sender) == true);\n        _;\n    }\n\n    // NON-CONSTANT METHODS\n    \n    /** @dev Sets the AccessManager contract address while deploying this contract`.\n      * @param _accessManager The address to set.\n      */\n    function withAccessManager(address _accessManager) public {\n        AM = AccessManager(_accessManager);\n    }\n    \n    /** @dev Updates the AccessManager contract address if msg.sender is guardian.\n      * @param _accessManager The address to set.\n      */\n    function updateAccessManager(address _accessManager) public onlyServer {\n        AM = AccessManager(_accessManager);\n    }\n\n}\n\n// File: contracts/ERC1155SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary ERC1155SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n\n    /**\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n// File: contracts/Address.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n}\n\n// File: contracts/IERC1155.sol\n\n/// @dev Note: the ERC-165 identifier for this interface is 0xf23a6e61.\ninterface IERC1155TokenReceiver {\n    /// @notice Handle the receipt of an ERC1155 type\n    /// @dev The smart contract calls this function on the recipient\n    ///  after a `safeTransfer`. This function MAY throw to revert and reject the\n    ///  transfer. Return of other than the magic value MUST result in the\n    ///  transaction being reverted.\n    ///  Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _id The identifier of the item being transferred\n    /// @param _value The amount of the item being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes _data) external returns(bytes4);\n}\n\ninterface IERC1155 {\n    event Approval(address indexed _owner, address indexed _spender, uint256 indexed _id, uint256 _oldValue, uint256 _value);\n    event Transfer(address _spender, address indexed _from, address indexed _to, uint256 indexed _id, uint256 _value);\n\n    function transferFrom(address _from, address _to, uint256 _id, uint256 _value) external;\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data) external;\n    function approve(address _spender, uint256 _id, uint256 _currentValue, uint256 _value) external;\n    function balanceOf(uint256 _id, address _owner) external view returns (uint256);\n    function allowance(uint256 _id, address _owner, address _spender) external view returns (uint256);\n}\n\ninterface IERC1155Extended {\n    function transfer(address _to, uint256 _id, uint256 _value) external;\n    function safeTransfer(address _to, uint256 _id, uint256 _value, bytes _data) external;\n}\n\ninterface IERC1155BatchTransfer {\n    function batchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values) external;\n    function safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data) external;\n    function batchApprove(address _spender, uint256[] _ids,  uint256[] _currentValues, uint256[] _values) external;\n}\n\ninterface IERC1155BatchTransferExtended {\n    function batchTransfer(address _to, uint256[] _ids, uint256[] _values) external;\n    function safeBatchTransfer(address _to, uint256[] _ids, uint256[] _values, bytes _data) external;\n}\n\ninterface IERC1155Operators {\n    event OperatorApproval(address indexed _owner, address indexed _operator, uint256 indexed _id, bool _approved);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    function setApproval(address _operator, uint256[] _ids, bool _approved) external;\n    function isApproved(address _owner, address _operator, uint256 _id)  external view returns (bool);\n    function setApprovalForAll(address _operator, bool _approved) external;\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\n}\n\ninterface IERC1155Views {\n    function totalSupply(uint256 _id) external view returns (uint256);\n    function name(uint256 _id) external view returns (string);\n    function symbol(uint256 _id) external view returns (string);\n    function decimals(uint256 _id) external view returns (uint8);\n    function uri(uint256 _id) external view returns (string);\n}\n\n// File: contracts/ERC1155.sol\n\ncontract ERC1155 is IERC1155, IERC1155Extended, IERC1155BatchTransfer, IERC1155BatchTransferExtended {\n    using ERC1155SafeMath for uint256;\n    using Address for address;\n\n    // Variables\n    struct Items {\n        string name;\n        uint256 totalSupply;\n        mapping (address => uint256) balances;\n    }\n    mapping (uint256 => uint8) public decimals;\n    mapping (uint256 => string) public symbols;\n    mapping (uint256 => mapping(address => mapping(address => uint256))) public allowances;\n    mapping (uint256 => Items) public items;\n    mapping (uint256 => string) public metadataURIs;\n\n    bytes4 constant private ERC1155_RECEIVED = 0xf23a6e61;\n\n/////////////////////////////////////////// IERC1155 //////////////////////////////////////////////\n\n    // Events\n    event Approval(address indexed _owner, address indexed _spender, uint256 indexed _id, uint256 _oldValue, uint256 _value);\n    event Transfer(address _spender, address indexed _from, address indexed _to, uint256 indexed _id, uint256 _value);\n\n    function transferFrom(address _from, address _to, uint256 _id, uint256 _value) external {\n        if(_from != msg.sender) {\n            //require(allowances[_id][_from][msg.sender] >= _value);\n            allowances[_id][_from][msg.sender] = allowances[_id][_from][msg.sender].sub(_value);\n        }\n\n        items[_id].balances[_from] = items[_id].balances[_from].sub(_value);\n        items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\n\n        Transfer(msg.sender, _from, _to, _id, _value);\n    }\n\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data) external {\n        //this.transferFrom(_from, _to, _id, _value);\n\n        // solium-disable-next-line arg-overflow\n        require(_checkAndCallSafeTransfer(_from, _to, _id, _value, _data));\n        if(_from != msg.sender) {\n            //require(allowances[_id][_from][msg.sender] >= _value);\n            allowances[_id][_from][msg.sender] = allowances[_id][_from][msg.sender].sub(_value);\n        }\n\n        items[_id].balances[_from] = items[_id].balances[_from].sub(_value);\n        items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\n\n        Transfer(msg.sender, _from, _to, _id, _value);\n    }\n\n    function approve(address _spender, uint256 _id, uint256 _currentValue, uint256 _value) external {\n        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n        require(_value == 0 || allowances[_id][msg.sender][_spender] == _currentValue);\n        allowances[_id][msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _id, _currentValue, _value);\n    }\n\n    function balanceOf(uint256 _id, address _owner) external view returns (uint256) {\n        return items[_id].balances[_owner];\n    }\n\n    function allowance(uint256 _id, address _owner, address _spender) external view returns (uint256) {\n        return allowances[_id][_owner][_spender];\n    }\n\n/////////////////////////////////////// IERC1155Extended //////////////////////////////////////////\n\n    function transfer(address _to, uint256 _id, uint256 _value) external {\n        // Not needed. SafeMath will do the same check on .sub(_value)\n        //require(_value <= items[_id].balances[msg.sender]);\n        items[_id].balances[msg.sender] = items[_id].balances[msg.sender].sub(_value);\n        items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\n        Transfer(msg.sender, msg.sender, _to, _id, _value);\n    }\n\n    function safeTransfer(address _to, uint256 _id, uint256 _value, bytes _data) external {\n        //this.transfer(_to, _id, _value);\n                \n        // solium-disable-next-line arg-overflow\n        require(_checkAndCallSafeTransfer(msg.sender, _to, _id, _value, _data));\n        items[_id].balances[msg.sender] = items[_id].balances[msg.sender].sub(_value);\n        items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\n        Transfer(msg.sender, msg.sender, _to, _id, _value);\n    }\n\n//////////////////////////////////// IERC1155BatchTransfer ////////////////////////////////////////\n\n    function batchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values) external {\n        uint256 _id;\n        uint256 _value;\n\n        if(_from == msg.sender) {\n            for (uint256 i = 0; i < _ids.length; ++i) {\n                _id = _ids[i];\n                _value = _values[i];\n\n                items[_id].balances[_from] = items[_id].balances[_from].sub(_value);\n                items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\n\n                Transfer(msg.sender, _from, _to, _id, _value);\n            }\n        }\n        else {\n            for (i = 0; i < _ids.length; ++i) {\n                _id = _ids[i];\n                _value = _values[i];\n\n                allowances[_id][_from][msg.sender] = allowances[_id][_from][msg.sender].sub(_value);\n\n                items[_id].balances[_from] = items[_id].balances[_from].sub(_value);\n                items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\n\n                Transfer(msg.sender, _from, _to, _id, _value);\n            }\n        }\n    }\n\n    function safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data) external {\n        //this.batchTransferFrom(_from, _to, _ids, _values);\n\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            // solium-disable-next-line arg-overflow\n            require(_checkAndCallSafeTransfer(_from, _to, _ids[i], _values[i], _data));\n        }\n\n        uint256 _id;\n        uint256 _value;\n\n        if(_from == msg.sender) {\n            for (i = 0; i < _ids.length; ++i) {\n                _id = _ids[i];\n                _value = _values[i];\n\n                items[_id].balances[_from] = items[_id].balances[_from].sub(_value);\n                items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\n\n                Transfer(msg.sender, _from, _to, _id, _value);\n            }\n        }\n        else {\n            for (i = 0; i < _ids.length; ++i) {\n                _id = _ids[i];\n                _value = _values[i];\n\n                allowances[_id][_from][msg.sender] = allowances[_id][_from][msg.sender].sub(_value);\n\n                items[_id].balances[_from] = items[_id].balances[_from].sub(_value);\n                items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\n\n                Transfer(msg.sender, _from, _to, _id, _value);\n            }\n        }\n    }\n\n    function batchApprove(address _spender, uint256[] _ids,  uint256[] _currentValues, uint256[] _values) external {\n        uint256 _id;\n        uint256 _value;\n\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            _id = _ids[i];\n            _value = _values[i];\n\n            require(_value == 0 || allowances[_id][msg.sender][_spender] == _currentValues[i]);\n            allowances[_id][msg.sender][_spender] = _value;\n            Approval(msg.sender, _spender, _id, _currentValues[i], _value);\n        }\n    }\n\n//////////////////////////////// IERC1155BatchTransferExtended ////////////////////////////////////\n\n    function batchTransfer(address _to, uint256[] _ids, uint256[] _values) external {\n        uint256 _id;\n        uint256 _value;\n\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            _id = _ids[i];\n            _value = _values[i];\n\n            items[_id].balances[msg.sender] = items[_id].balances[msg.sender].sub(_value);\n            items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\n\n            Transfer(msg.sender, msg.sender, _to, _id, _value);\n        }\n    }\n\n    function safeBatchTransfer(address _to, uint256[] _ids, uint256[] _values, bytes _data) external {\n        //this.batchTransfer(_to, _ids, _values);\n\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            // solium-disable-next-line arg-overflow\n            require(_checkAndCallSafeTransfer(msg.sender, _to, _ids[i], _values[i], _data));\n        }\n\n        uint256 _id;\n        uint256 _value;\n\n        for (i = 0; i < _ids.length; ++i) {\n            _id = _ids[i];\n            _value = _values[i];\n\n            items[_id].balances[msg.sender] = items[_id].balances[msg.sender].sub(_value);\n            items[_id].balances[_to] = _value.add(items[_id].balances[_to]);\n\n            Transfer(msg.sender, msg.sender, _to, _id, _value);\n        }\n    }\n\n//////////////////////////////// IERC1155BatchTransferExtended ////////////////////////////////////\n\n    // Optional meta data view Functions\n    // consider multi-lingual support for name?\n    function name(uint256 _id) external view returns (string) {\n        return items[_id].name;\n    }\n\n    function symbol(uint256 _id) external view returns (string) {\n        return symbols[_id];\n    }\n\n    function decimals(uint256 _id) external view returns (uint8) {\n        return decimals[_id];\n    }\n\n    function totalSupply(uint256 _id) external view returns (uint256) {\n        return items[_id].totalSupply;\n    }\n\n    function uri(uint256 _id) external view returns (string) {\n        return metadataURIs[_id];\n    }\n\n////////////////////////////////////////// OPTIONALS //////////////////////////////////////////////\n\n\n    function multicastTransfer(address[] _to, uint256[] _ids, uint256[] _values) external {\n        for (uint256 i = 0; i < _to.length; ++i) {\n            uint256 _id = _ids[i];\n            uint256 _value = _values[i];\n            address _dst = _to[i];\n\n            items[_id].balances[msg.sender] = items[_id].balances[msg.sender].sub(_value);\n            items[_id].balances[_dst] = _value.add(items[_id].balances[_dst]);\n\n            Transfer(msg.sender, msg.sender, _dst, _id, _value);\n        }\n    }\n\n    function safeMulticastTransfer(address[] _to, uint256[] _ids, uint256[] _values, bytes _data) external {\n        //this.multicastTransfer(_to, _ids, _values);\n\n        for (uint256 i = 0; i < _ids.length; ++i) {\n            // solium-disable-next-line arg-overflow\n            require(_checkAndCallSafeTransfer(msg.sender, _to[i], _ids[i], _values[i], _data));\n        }\n\n        for (i = 0; i < _to.length; ++i) {\n            uint256 _id = _ids[i];\n            uint256 _value = _values[i];\n            address _dst = _to[i];\n\n            items[_id].balances[msg.sender] = items[_id].balances[msg.sender].sub(_value);\n            items[_id].balances[_dst] = _value.add(items[_id].balances[_dst]);\n\n            Transfer(msg.sender, msg.sender, _dst, _id, _value);\n        }\n    }\n\n////////////////////////////////////////// INTERNAL //////////////////////////////////////////////\n\n    function _checkAndCallSafeTransfer(\n        address _from,\n        address _to,\n        uint256 _id,\n        uint256 _value,\n        bytes _data\n    )\n    internal\n    returns (bool)\n    {\n        if (!_to.isContract()) {\n            return true;\n        }\n        bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(\n            msg.sender, _from, _id, _value, _data);\n        return (retval == ERC1155_RECEIVED);\n    }\n}\n\n// File: contracts/ERC165.sol\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface ERC165 {\n\n  /**\n   * @notice Query if a contract implements an interface\n   * @param _interfaceId The interface identifier, as specified in ERC-165\n   * @dev Interface identification is specified in ERC-165. This function\n   * uses less than 30,000 gas.\n   */\n  function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n\n// File: contracts/ERC721Basic.sol\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic interface\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Basic is ERC165 {\n\n    bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n    /*\n    * 0x80ac58cd ===\n    *   bytes4(keccak256('balanceOf(address)')) ^\n    *   bytes4(keccak256('ownerOf(uint256)')) ^\n    *   bytes4(keccak256('approve(address,uint256)')) ^\n    *   bytes4(keccak256('getApproved(uint256)')) ^\n    *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n    *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n    *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n    */\n\n    bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n    /*\n    * 0x4f558e79 ===\n    *   bytes4(keccak256('exists(uint256)'))\n    */\n\n    bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n    /**\n    * 0x780e9d63 ===\n    *   bytes4(keccak256('totalSupply()')) ^\n    *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n    *   bytes4(keccak256('tokenByIndex(uint256)'))\n    */\n\n    bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n    /**\n    * 0x5b5e139f ===\n    *   bytes4(keccak256('name()')) ^\n    *   bytes4(keccak256('symbol()')) ^\n    *   bytes4(keccak256('tokenURI(uint256)'))\n    */\n\n    event Transfer(\n      address indexed _from,\n      address indexed _to,\n      uint256 indexed _tokenId\n    );\n    event Approval(\n      address indexed _owner,\n      address indexed _approved,\n      uint256 indexed _tokenId\n    );\n    event ApprovalForAll(\n      address indexed _owner,\n      address indexed _operator,\n      bool _approved\n    );\n\n    function balanceOf(address _owner) public view returns (uint256 _balance);\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n    function exists(uint256 _tokenId) public view returns (bool _exists);\n\n    function approve(address _to, uint256 _tokenId) public;\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\n\n    function setApprovalForAll(address _operator, bool _approved) public;\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\n}\n\n// File: contracts/DepositContract.sol\n\n/// @title DepositContract contract\ncontract DepositContract is withAccessManager {\n\n    bytes32 public clientId; // client ID.\n    uint256 public version = 2;\n\n    // EVENTS\n    event EtherTransfer(address to, uint256 value);\n\n    // NON-CONSTANT METHODS \n\n    /** @dev Constructor that sets the _clientID when the contract is deployed.\n      * @dev The method also sets the manager to the msg.sender.\n      * @param _clientId A string of fixed length representing the client ID.\n      */\n    function DepositContract(bytes32 _clientId, address accessManager) public withAccessManager(accessManager) {\n        clientId = _clientId;\n    }\n     \n    /** @dev Transfers an amount '_value' of tokens from msg.sender to '_to' address/wallet.\n      * @param populousTokenContract The address of the ERC20 token contract which implements the transfer method.\n      * @param _value the amount of tokens to transfer.\n      * @param _to The address/wallet to send to.\n      * @return success boolean true or false indicating whether the transfer was successful or not.\n      */\n    function transfer(address populousTokenContract, address _to, uint256 _value) public\n        onlyServerOrOnlyPopulous returns (bool success) \n    {\n        return iERC20Token(populousTokenContract).transfer(_to, _value);\n    }\n\n    /** @dev This function will transfer iERC1155 tokens\n     */\n    function transferERC1155(address _erc1155Token, address _to, uint256 _id, uint256 _value) \n        public onlyServerOrOnlyPopulous returns (bool success) {\n        ERC1155(_erc1155Token).safeTransfer(_to, _id, _value, \"\");\n        return true;\n    }\n\n    /**\n    * @notice Handle the receipt of an NFT\n    * @dev The ERC721 smart contract calls this function on the recipient\n    * after a `safetransfer` if the recipient is a smart contract. This function MAY throw to revert and reject the\n    * transfer. Return of other than the magic value (0x150b7a02) MUST result in the\n    * transaction being reverted.\n    * Note: the contract address is always the message sender.\n    * @param _operator The address which called `safeTransferFrom` function\n    * @param _from The address which previously owned the token\n    * @param _tokenId The NFT identifier which is being transferred\n    * @param _data Additional data with no specified format\n    * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    */\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) public returns(bytes4) {\n        return 0x150b7a02; \n    }\n\n    /// @notice Handle the receipt of an ERC1155 type\n    /// @dev The smart contract calls this function on the recipient\n    ///  after a `safeTransfer`. This function MAY throw to revert and reject the\n    ///  transfer. Return of other than the magic value MUST result in the\n    ///  transaction being reverted.\n    ///  Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _id The identifier of the item being transferred\n    /// @param _value The amount of the item being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes _data) public returns(bytes4) {\n        return 0xf23a6e61;\n    }\n\n    /**\n    * @dev Safely transfers the ownership of a given token ID to another address\n    * If the target address is a contract, it must implement `onERC721Received`,\n    * which is called upon a safe transfer, and return the magic value\n    * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n    * the transfer is reverted.\n    *\n    * Requires the msg sender to be the owner, approved, or operator\n    * @param erc721Token address of the erc721 token to target\n    * @param _to address to receive the ownership of the given token ID\n    * @param _tokenId uint256 ID of the token to be transferred\n    */\n    function transferERC721(\n        address erc721Token,\n        address _to,\n        uint256 _tokenId\n    )\n        public onlyServerOrOnlyPopulous returns (bool success)\n    {\n        // solium-disable-next-line arg-overflow\n        ERC721Basic(erc721Token).safeTransferFrom(this, _to, _tokenId, \"\");\n        return true;\n    }\n\n    /** @dev Transfers ether from this contract to a specified wallet/address\n      * @param _to An address implementing to send ether to.\n      * @param _value The amount of ether to send in wei. \n      * @return bool Successful or unsuccessful transfer\n      */\n    function transferEther(address _to, uint256 _value) public \n        onlyServerOrOnlyPopulous returns (bool success) \n    {\n        require(this.balance >= _value);\n        require(_to.send(_value) == true);\n        EtherTransfer(_to, _value);\n        return true;\n    }\n\n    // payable function to allow this contract receive ether - for version 3\n    //function () public payable {}\n\n    // CONSTANT METHODS\n    \n    /** @dev Returns the ether or token balance of the current contract instance using the ERC20 balanceOf method.\n      * @param populousTokenContract An address implementing the ERC20 token standard. \n      * @return uint An unsigned integer representing the returned token balance.\n      */\n    function balanceOf(address populousTokenContract) public view returns (uint256) {\n        // ether\n        if (populousTokenContract == address(0)) {\n            return address(this).balance;\n        } else {\n            // erc20\n            return iERC20Token(populousTokenContract).balanceOf(this);\n        }\n    }\n\n    /**\n    * @dev Gets the balance of the specified address\n    * @param erc721Token address to erc721 token to target\n    * @return uint256 representing the amount owned by the passed address\n    */\n    function balanceOfERC721(address erc721Token) public view returns (uint256) {\n        return ERC721Basic(erc721Token).balanceOf(this);\n        // returns ownedTokensCount[_owner];\n    }\n\n    /**\n    * @dev Gets the balance of the specified address\n    * @param _id the token id\n    * @param erc1155Token address to erc1155 token to target\n    * @return uint256 representing the amount owned by the passed address\n    */\n    function balanceOfERC1155(address erc1155Token, uint256 _id) external view returns (uint256) {\n        return ERC1155(erc1155Token).balanceOf(_id, this);\n    }\n\n    /** @dev Gets the version of this deposit contract\n      * @return uint256 version\n      */\n    function getVersion() public view returns (uint256) {\n        return version;\n    }\n\n    // CONSTANT FUNCTIONS\n\n    /** @dev This function gets the client ID or deposit contract owner\n     * returns _clientId\n     */\n    function getClientId() public view returns (bytes32 _clientId) {\n        return clientId;\n    }\n}\n\n// File: contracts/SafeMath.sol\n\n/// @title Overflow aware uint math functions.\n/// @notice Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\nlibrary SafeMath {\n\n  /** @dev Safely multiplies two unsigned/non-negative integers.\n    * @dev Ensures that one of both numbers can be derived from dividing the product by the other.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeMul(uint a, uint b) internal pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n  /** @dev Safely subtracts one number from another\n    * @dev Ensures that the number to subtract is lower.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeSub(uint a, uint b) internal pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n  /** @dev Safely adds two unsigned/non-negative integers.\n    * @dev Ensures that the sum of both numbers is greater or equal to one of both.\n    * @param a The first number.\n    * @param b The second number.\n    * @return uint The expected result.\n    */\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        assert(c>=a && c>=b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n}\n\n// File: contracts/iDataManager.sol\n\n/// @title DataManager contract\ncontract iDataManager {\n    // FIELDS\n    uint256 public version;\n    // currency symbol => currency erc20 contract address\n    mapping(bytes32 => address) public currencyAddresses;\n    // currency address => currency symbol\n    mapping(address => bytes32) public currencySymbols;\n    // clientId => depositAddress\n    mapping(bytes32 => address) public depositAddresses;\n    // depositAddress => clientId\n    mapping(address => bytes32) public depositClientIds;\n    // blockchainActionId => boolean \n    mapping(bytes32 => bool) public actionStatus;\n    // blockchainActionData\n    struct actionData {\n        bytes32 currency;\n        uint amount;\n        bytes32 accountId;\n        address to;\n        uint pptFee;\n    }\n    // blockchainActionId => actionData\n    mapping(bytes32 => actionData) public blockchainActionIdData;\n    \n    //actionId => invoiceId\n    mapping(bytes32 => bytes32) public actionIdToInvoiceId;\n    // invoice provider company data\n    struct providerCompany {\n        //bool isEnabled;\n        bytes32 companyNumber;\n        bytes32 companyName;\n        bytes2 countryCode;\n    }\n    // companyCode => companyNumber => providerId\n    mapping(bytes2 => mapping(bytes32 => bytes32)) public providerData;\n    // providedId => providerCompany\n    mapping(bytes32 => providerCompany) public providerCompanyData;\n    // crowdsale invoiceDetails\n    struct _invoiceDetails {\n        bytes2 invoiceCountryCode;\n        bytes32 invoiceCompanyNumber;\n        bytes32 invoiceCompanyName;\n        bytes32 invoiceNumber;\n    }\n    // crowdsale invoiceData\n    struct invoiceData {\n        bytes32 providerUserId;\n        bytes32 invoiceCompanyName;\n    }\n\n    // country code => company number => invoice number => invoice data\n    mapping(bytes2 => mapping(bytes32 => mapping(bytes32 => invoiceData))) public invoices;\n    \n    \n    \n    \n    // NON-CONSTANT METHODS\n\n    /** @dev Adds a new deposit smart contract address linked to a client id\n      * @param _depositAddress the deposit smart contract address\n      * @param _clientId the client id\n      * @return success true/false denoting successful function call\n      */\n    function setDepositAddress(bytes32 _blockchainActionId, address _depositAddress, bytes32 _clientId) public returns (bool success);\n\n    /** @dev Adds a new currency sumbol and smart contract address  \n      * @param _currencyAddress the currency smart contract address\n      * @param _currencySymbol the currency symbol\n      * @return success true/false denoting successful function call\n      */\n    function setCurrency(bytes32 _blockchainActionId, address _currencyAddress, bytes32 _currencySymbol) public returns (bool success);\n\n    /** @dev Updates a currency sumbol and smart contract address  \n      * @param _currencyAddress the currency smart contract address\n      * @param _currencySymbol the currency symbol\n      * @return success true/false denoting successful function call\n      */\n    function _setCurrency(bytes32 _blockchainActionId, address _currencyAddress, bytes32 _currencySymbol) public returns (bool success);\n\n\n    /** @dev set blockchain action data in struct \n      * @param _blockchainActionId the blockchain action id\n      * @param currency the token currency symbol\n      * @param accountId the clientId\n      * @param to the blockchain address or smart contract address used in the transaction\n      * @param amount the amount of tokens in the transaction\n      * @return success true/false denoting successful function call\n      */\n    function setBlockchainActionData(\n        bytes32 _blockchainActionId, bytes32 currency, \n        uint amount, bytes32 accountId, address to, uint pptFee) \n        public \n        returns (bool success);\n\n    /** @dev upgrade deposit address \n      * @param _blockchainActionId the blockchain action id\n      * @param _clientId the client id\n      * @param _depositContract the deposit contract address for the client\n      * @return success true/false denoting successful function call\n      */\n    function upgradeDepositAddress(bytes32 _blockchainActionId, bytes32 _clientId, address _depositContract) public returns (bool success);\n  \n\n    /** @dev Updates a deposit address for client id\n      * @param _blockchainActionId the blockchain action id\n      * @param _clientId the client id\n      * @param _depositContract the deposit contract address for the client\n      * @return success true/false denoting successful function call\n      */\n    function _setDepositAddress(bytes32 _blockchainActionId, bytes32 _clientId, address _depositContract) public returns (bool success);\n\n    /** @dev Add a new invoice to the platform  \n      * @param _providerUserId the providers user id\n      * @param _invoiceCountryCode the country code of the provider\n      * @param _invoiceCompanyNumber the providers company number\n      * @param _invoiceCompanyName the providers company name\n      * @param _invoiceNumber the invoice number\n      * @return success true or false if function call is successful\n      */\n    function setInvoice(\n        bytes32 _blockchainActionId, bytes32 _providerUserId, bytes2 _invoiceCountryCode, \n        bytes32 _invoiceCompanyNumber, bytes32 _invoiceCompanyName, bytes32 _invoiceNumber) \n        public returns (bool success);\n\n    \n    /** @dev Add a new invoice provider to the platform  \n      * @param _blockchainActionId the blockchain action id\n      * @param _userId the user id of the provider\n      * @param _companyNumber the providers company number\n      * @param _companyName the providers company name\n      * @param _countryCode the providers country code\n      * @return success true or false if function call is successful\n      */\n    function setProvider(\n        bytes32 _blockchainActionId, bytes32 _userId, bytes32 _companyNumber, \n        bytes32 _companyName, bytes2 _countryCode) \n        public returns (bool success);\n\n    /** @dev Update an added invoice provider to the platform  \n      * @param _blockchainActionId the blockchain action id\n      * @param _userId the user id of the provider\n      * @param _companyNumber the providers company number\n      * @param _companyName the providers company name\n      * @param _countryCode the providers country code\n      * @return success true or false if function call is successful\n      */\n    function _setProvider(\n        bytes32 _blockchainActionId, bytes32 _userId, bytes32 _companyNumber, \n        bytes32 _companyName, bytes2 _countryCode) \n        public returns (bool success);\n    \n    // CONSTANT METHODS\n\n    /** @dev Gets a deposit address with the client id \n      * @return clientDepositAddress The client's deposit address\n      */\n    function getDepositAddress(bytes32 _clientId) public view returns (address clientDepositAddress);\n\n\n    /** @dev Gets a client id linked to a deposit address \n      * @return depositClientId The client id\n      */\n    function getClientIdWithDepositAddress(address _depositContract) public view returns (bytes32 depositClientId);\n\n\n    /** @dev Gets a currency smart contract address \n      * @return currencyAddress The currency address\n      */\n    function getCurrency(bytes32 _currencySymbol) public view returns (address currencyAddress);\n\n   \n    /** @dev Gets a currency symbol given it's smart contract address \n      * @return currencySymbol The currency symbol\n      */\n    function getCurrencySymbol(address _currencyAddress) public view returns (bytes32 currencySymbol);\n\n    /** @dev Gets details of a currency given it's smart contract address \n      * @return _symbol The currency symbol\n      * @return _name The currency name\n      * @return _decimals The currency decimal places/precision\n      */\n    function getCurrencyDetails(address _currencyAddress) public view returns (bytes32 _symbol, bytes32 _name, uint8 _decimals);\n\n    /** @dev Get the blockchain action Id Data for a blockchain Action id\n      * @param _blockchainActionId the blockchain action id\n      * @return bytes32 currency\n      * @return uint amount\n      * @return bytes32 accountId\n      * @return address to\n      */\n    function getBlockchainActionIdData(bytes32 _blockchainActionId) public view returns (bytes32 _currency, uint _amount, bytes32 _accountId, address _to);\n\n\n    /** @dev Get the bool status of a blockchain Action id\n      * @param _blockchainActionId the blockchain action id\n      * @return bool actionStatus\n      */\n    function getActionStatus(bytes32 _blockchainActionId) public view returns (bool _blockchainActionStatus);\n\n\n    /** @dev Gets the details of an invoice with the country code, company number and invocie number.\n      * @param _invoiceCountryCode The country code.\n      * @param _invoiceCompanyNumber The company number.\n      * @param _invoiceNumber The invoice number\n      * @return providerUserId The invoice provider user Id\n      * @return invoiceCompanyName the invoice company name\n      */\n    function getInvoice(bytes2 _invoiceCountryCode, bytes32 _invoiceCompanyNumber, bytes32 _invoiceNumber) \n        public \n        view \n        returns (bytes32 providerUserId, bytes32 invoiceCompanyName);\n\n\n    /** @dev Gets the details of an invoice provider with the country code and company number.\n      * @param _providerCountryCode The country code.\n      * @param _providerCompanyNumber The company number.\n      * @return isEnabled The boolean value true/false indicating whether invoice provider is enabled or not\n      * @return providerId The invoice provider user Id\n      * @return companyName the invoice company name\n      */\n    function getProviderByCountryCodeCompanyNumber(bytes2 _providerCountryCode, bytes32 _providerCompanyNumber) \n        public \n        view \n        returns (bytes32 providerId, bytes32 companyName);\n\n\n    /** @dev Gets the details of an invoice provider with the providers user Id.\n      * @param _providerUserId The provider user Id.\n      * @return countryCode The invoice provider country code\n      * @return companyName the invoice company name\n      */\n    function getProviderByUserId(bytes32 _providerUserId) public view \n        returns (bytes2 countryCode, bytes32 companyName, bytes32 companyNumber);\n\n\n    /** @dev Gets the version number for the current contract instance\n      * @return _version The version number\n      */\n    function getVersion() public view returns (uint256 _version);\n\n}\n\n// File: contracts/DataManager.sol\n\n/// @title DataManager contract\ncontract DataManager is iDataManager, withAccessManager {\n    \n\n    // NON-CONSTANT METHODS\n\n    /** @dev Constructor that sets the server when contract is deployed.\n      * @param _accessManager The address to set as the access manager.\n      */\n    function DataManager(address _accessManager, uint256 _version) public withAccessManager(_accessManager) {\n        version = _version;\n    }\n\n    /** @dev Adds a new deposit smart contract address linked to a client id\n      * @param _depositAddress the deposit smart contract address\n      * @param _clientId the client id\n      * @return success true/false denoting successful function call\n      */\n    function setDepositAddress(bytes32 _blockchainActionId, address _depositAddress, bytes32 _clientId) public onlyServerOrOnlyPopulous returns (bool success) {\n        require(actionStatus[_blockchainActionId] == false);\n        require(depositAddresses[_clientId] == 0x0 && depositClientIds[_depositAddress] == 0x0);\n        depositAddresses[_clientId] = _depositAddress;\n        depositClientIds[_depositAddress] = _clientId;\n        assert(depositAddresses[_clientId] != 0x0 && depositClientIds[_depositAddress] != 0x0);\n        return true;\n    }\n\n    /** @dev Adds a new currency sumbol and smart contract address  \n      * @param _currencyAddress the currency smart contract address\n      * @param _currencySymbol the currency symbol\n      * @return success true/false denoting successful function call\n      */\n    function setCurrency(bytes32 _blockchainActionId, address _currencyAddress, bytes32 _currencySymbol) public onlyServerOrOnlyPopulous returns (bool success) {\n        require(actionStatus[_blockchainActionId] == false);\n        require(currencySymbols[_currencyAddress] == 0x0 && currencyAddresses[_currencySymbol] == 0x0);\n        currencySymbols[_currencyAddress] = _currencySymbol;\n        currencyAddresses[_currencySymbol] = _currencyAddress;\n        assert(currencyAddresses[_currencySymbol] != 0x0 && currencySymbols[_currencyAddress] != 0x0);\n        return true;\n    }\n\n    /** @dev Updates a currency sumbol and smart contract address  \n      * @param _currencyAddress the currency smart contract address\n      * @param _currencySymbol the currency symbol\n      * @return success true/false denoting successful function call\n      */\n    function _setCurrency(bytes32 _blockchainActionId, address _currencyAddress, bytes32 _currencySymbol) public onlyServerOrOnlyPopulous returns (bool success) {\n        require(actionStatus[_blockchainActionId] == false);\n        currencySymbols[_currencyAddress] = _currencySymbol;\n        currencyAddresses[_currencySymbol] = _currencyAddress;\n        assert(currencyAddresses[_currencySymbol] != 0x0 && currencySymbols[_currencyAddress] != 0x0);\n        setBlockchainActionData(_blockchainActionId, _currencySymbol, 0, 0x0, _currencyAddress, 0);\n        return true;\n    }\n\n    /** @dev set blockchain action data in struct \n      * @param _blockchainActionId the blockchain action id\n      * @param currency the token currency symbol\n      * @param accountId the clientId\n      * @param to the blockchain address or smart contract address used in the transaction\n      * @param amount the amount of tokens in the transaction\n      * @return success true/false denoting successful function call\n      */\n    function setBlockchainActionData(\n        bytes32 _blockchainActionId, bytes32 currency, \n        uint amount, bytes32 accountId, address to, uint pptFee) \n        public\n        onlyServerOrOnlyPopulous \n        returns (bool success)\n    {\n        require(actionStatus[_blockchainActionId] == false);\n        blockchainActionIdData[_blockchainActionId].currency = currency;\n        blockchainActionIdData[_blockchainActionId].amount = amount;\n        blockchainActionIdData[_blockchainActionId].accountId = accountId;\n        blockchainActionIdData[_blockchainActionId].to = to;\n        blockchainActionIdData[_blockchainActionId].pptFee = pptFee;\n        actionStatus[_blockchainActionId] = true;\n        return true;\n    }\n    \n    /** @dev Updates a deposit address for client id\n      * @param _blockchainActionId the blockchain action id\n      * @param _clientId the client id\n      * @param _depositContract the deposit contract address for the client\n      * @return success true/false denoting successful function call\n      */\n    function _setDepositAddress(bytes32 _blockchainActionId, bytes32 _clientId, address _depositContract) public\n      onlyServerOrOnlyPopulous\n      returns (bool success)\n    {\n        require(actionStatus[_blockchainActionId] == false);\n        depositAddresses[_clientId] = _depositContract;\n        depositClientIds[_depositContract] = _clientId;\n        // check that deposit address has been stored for client Id\n        assert(depositAddresses[_clientId] == _depositContract && depositClientIds[_depositContract] == _clientId);\n        // set blockchain action data\n        setBlockchainActionData(_blockchainActionId, 0x0, 0, _clientId, depositAddresses[_clientId], 0);\n        return true;\n    }\n\n    /** @dev Add a new invoice to the platform  \n      * @param _providerUserId the providers user id\n      * @param _invoiceCountryCode the country code of the provider\n      * @param _invoiceCompanyNumber the providers company number\n      * @param _invoiceCompanyName the providers company name\n      * @param _invoiceNumber the invoice number\n      * @return success true or false if function call is successful\n      */\n    function setInvoice(\n        bytes32 _blockchainActionId, bytes32 _providerUserId, bytes2 _invoiceCountryCode, \n        bytes32 _invoiceCompanyNumber, bytes32 _invoiceCompanyName, bytes32 _invoiceNumber) \n        public \n        onlyServerOrOnlyPopulous \n        returns (bool success) \n    {   \n        require(actionStatus[_blockchainActionId] == false);\n        bytes32 providerUserId; \n        bytes32 companyName;\n        (providerUserId, companyName) = getInvoice(_invoiceCountryCode, _invoiceCompanyNumber, _invoiceNumber);\n        require(providerUserId == 0x0 && companyName == 0x0);\n        // country code => company number => invoice number => invoice data\n        invoices[_invoiceCountryCode][_invoiceCompanyNumber][_invoiceNumber].providerUserId = _providerUserId;\n        invoices[_invoiceCountryCode][_invoiceCompanyNumber][_invoiceNumber].invoiceCompanyName = _invoiceCompanyName;\n        \n        assert(\n            invoices[_invoiceCountryCode][_invoiceCompanyNumber][_invoiceNumber].providerUserId != 0x0 && \n            invoices[_invoiceCountryCode][_invoiceCompanyNumber][_invoiceNumber].invoiceCompanyName != 0x0\n        );\n        return true;\n    }\n    \n    /** @dev Add a new invoice provider to the platform  \n      * @param _blockchainActionId the blockchain action id\n      * @param _userId the user id of the provider\n      * @param _companyNumber the providers company number\n      * @param _companyName the providers company name\n      * @param _countryCode the providers country code\n      * @return success true or false if function call is successful\n      */\n    function setProvider(\n        bytes32 _blockchainActionId, bytes32 _userId, bytes32 _companyNumber, \n        bytes32 _companyName, bytes2 _countryCode) \n        public \n        onlyServerOrOnlyPopulous\n        returns (bool success)\n    {   \n        require(actionStatus[_blockchainActionId] == false);\n        require(\n            providerCompanyData[_userId].companyNumber == 0x0 && \n            providerCompanyData[_userId].countryCode == 0x0 &&\n            providerCompanyData[_userId].companyName == 0x0);\n        \n        providerCompanyData[_userId].countryCode = _countryCode;\n        providerCompanyData[_userId].companyName = _companyName;\n        providerCompanyData[_userId].companyNumber = _companyNumber;\n\n        providerData[_countryCode][_companyNumber] = _userId;\n        return true;\n    }\n\n\n    /** @dev Update an added invoice provider to the platform  \n      * @param _blockchainActionId the blockchain action id\n      * @param _userId the user id of the provider\n      * @param _companyNumber the providers company number\n      * @param _companyName the providers company name\n      * @param _countryCode the providers country code\n      * @return success true or false if function call is successful\n      */\n    function _setProvider(\n        bytes32 _blockchainActionId, bytes32 _userId, bytes32 _companyNumber, \n        bytes32 _companyName, bytes2 _countryCode) \n        public \n        onlyServerOrOnlyPopulous\n        returns (bool success)\n    {   \n        require(actionStatus[_blockchainActionId] == false);\n        providerCompanyData[_userId].countryCode = _countryCode;\n        providerCompanyData[_userId].companyName = _companyName;\n        providerCompanyData[_userId].companyNumber = _companyNumber;\n        providerData[_countryCode][_companyNumber] = _userId;\n        \n        setBlockchainActionData(_blockchainActionId, 0x0, 0, _userId, 0x0, 0);\n        return true;\n    }\n\n    // CONSTANT METHODS\n\n    /** @dev Gets a deposit address with the client id \n      * @return clientDepositAddress The client's deposit address\n      */\n    function getDepositAddress(bytes32 _clientId) public view returns (address clientDepositAddress){\n        return depositAddresses[_clientId];\n    }\n\n    /** @dev Gets a client id linked to a deposit address \n      * @return depositClientId The client id\n      */\n    function getClientIdWithDepositAddress(address _depositContract) public view returns (bytes32 depositClientId){\n        return depositClientIds[_depositContract];\n    }\n\n    /** @dev Gets a currency smart contract address \n      * @return currencyAddress The currency address\n      */\n    function getCurrency(bytes32 _currencySymbol) public view returns (address currencyAddress) {\n        return currencyAddresses[_currencySymbol];\n    }\n   \n    /** @dev Gets a currency symbol given it's smart contract address \n      * @return currencySymbol The currency symbol\n      */\n    function getCurrencySymbol(address _currencyAddress) public view returns (bytes32 currencySymbol) {\n        return currencySymbols[_currencyAddress];\n    }\n\n    /** @dev Gets details of a currency given it's smart contract address \n      * @return _symbol The currency symbol\n      * @return _name The currency name\n      * @return _decimals The currency decimal places/precision\n      */\n    function getCurrencyDetails(address _currencyAddress) public view returns (bytes32 _symbol, bytes32 _name, uint8 _decimals) {\n        return (CurrencyToken(_currencyAddress).symbol(), CurrencyToken(_currencyAddress).name(), CurrencyToken(_currencyAddress).decimals());\n    } \n\n    /** @dev Get the blockchain action Id Data for a blockchain Action id\n      * @param _blockchainActionId the blockchain action id\n      * @return bytes32 currency\n      * @return uint amount\n      * @return bytes32 accountId\n      * @return address to\n      */\n    function getBlockchainActionIdData(bytes32 _blockchainActionId) public view \n    returns (bytes32 _currency, uint _amount, bytes32 _accountId, address _to) \n    {\n        require(actionStatus[_blockchainActionId] == true);\n        return (blockchainActionIdData[_blockchainActionId].currency, \n        blockchainActionIdData[_blockchainActionId].amount,\n        blockchainActionIdData[_blockchainActionId].accountId,\n        blockchainActionIdData[_blockchainActionId].to);\n    }\n\n    /** @dev Get the bool status of a blockchain Action id\n      * @param _blockchainActionId the blockchain action id\n      * @return bool actionStatus\n      */\n    function getActionStatus(bytes32 _blockchainActionId) public view returns (bool _blockchainActionStatus) {\n        return actionStatus[_blockchainActionId];\n    }\n\n    /** @dev Gets the details of an invoice with the country code, company number and invocie number.\n      * @param _invoiceCountryCode The country code.\n      * @param _invoiceCompanyNumber The company number.\n      * @param _invoiceNumber The invoice number\n      * @return providerUserId The invoice provider user Id\n      * @return invoiceCompanyName the invoice company name\n      */\n    function getInvoice(bytes2 _invoiceCountryCode, bytes32 _invoiceCompanyNumber, bytes32 _invoiceNumber) \n        public \n        view \n        returns (bytes32 providerUserId, bytes32 invoiceCompanyName) \n    {   \n        bytes32 _providerUserId = invoices[_invoiceCountryCode][_invoiceCompanyNumber][_invoiceNumber].providerUserId;\n        bytes32 _invoiceCompanyName = invoices[_invoiceCountryCode][_invoiceCompanyNumber][_invoiceNumber].invoiceCompanyName;\n        return (_providerUserId, _invoiceCompanyName);\n    }\n\n    /** @dev Gets the details of an invoice provider with the country code and company number.\n      * @param _providerCountryCode The country code.\n      * @param _providerCompanyNumber The company number.\n      * @return isEnabled The boolean value true/false indicating whether invoice provider is enabled or not\n      * @return providerId The invoice provider user Id\n      * @return companyName the invoice company name\n      */\n    function getProviderByCountryCodeCompanyNumber(bytes2 _providerCountryCode, bytes32 _providerCompanyNumber) \n        public \n        view \n        returns (bytes32 providerId, bytes32 companyName) \n    {\n        bytes32 providerUserId = providerData[_providerCountryCode][_providerCompanyNumber];\n        return (providerUserId, \n        providerCompanyData[providerUserId].companyName);\n    }\n\n    /** @dev Gets the details of an invoice provider with the providers user Id.\n      * @param _providerUserId The provider user Id.\n      * @return countryCode The invoice provider country code\n      * @return companyName the invoice company name\n      */\n    function getProviderByUserId(bytes32 _providerUserId) public view \n        returns (bytes2 countryCode, bytes32 companyName, bytes32 companyNumber) \n    {\n        return (providerCompanyData[_providerUserId].countryCode,\n        providerCompanyData[_providerUserId].companyName,\n        providerCompanyData[_providerUserId].companyNumber);\n    }\n\n    /** @dev Gets the version number for the current contract instance\n      * @return _version The version number\n      */\n    function getVersion() public view returns (uint256 _version) {\n        return version;\n    }\n\n}\n\n// File: contracts/Populous.sol\n\n/**\nThis is the core module of the system. Currently it holds the code of\nthe Bank and crowdsale modules to avoid external calls and higher gas costs.\nIt might be a good idea in the future to split the code, separate Bank\nand crowdsale modules into external files and have the core interact with them\nwith addresses and interfaces. \n*/\n\n\n\n\n\n\n\n\n/// @title Populous contract\ncontract Populous is withAccessManager {\n    // EVENTS\n    // Bank events\n    event EventUSDCToUSDp(bytes32 _blockchainActionId, bytes32 _clientId, uint amount);\n    event EventUSDpToUSDC(bytes32 _blockchainActionId, bytes32 _clientId, uint amount);\n    event EventDepositAddressUpgrade(bytes32 blockchainActionId, address oldDepositContract, address newDepositContract, bytes32 clientId, uint256 version);\n    event EventWithdrawPPT(bytes32 blockchainActionId, bytes32 accountId, address depositContract, address to, uint amount);\n    event EventWithdrawPoken(bytes32 _blockchainActionId, bytes32 accountId, bytes32 currency, uint amount);\n    event EventNewDepositContract(bytes32 blockchainActionId, bytes32 clientId, address depositContractAddress, uint256 version);\n    event EventWithdrawXAUp(bytes32 _blockchainActionId, address erc1155Token, uint amount, uint token_id, bytes32 accountId, uint pptFee);\n\n    // FIELDS\n    struct tokens {   \n        address _token;\n        uint256 _precision;\n    }\n    mapping(bytes8 => tokens) public tokenDetails;\n\n    // NON-CONSTANT METHODS\n    // Constructor method called when contract instance is \n    // deployed with 'withAccessManager' modifier.\n    function Populous(address _accessManager) public withAccessManager(_accessManager) {\n        /*ropsten\n        \n        //pxt\n        tokenDetails[0x505854]._token = 0xD8A7C588f8DC19f49dAFd8ecf08eec58e64d4cC9;\n        tokenDetails[0x505854]._precision = 8;\n        //usdc\n        tokenDetails[0x55534443]._token = 0xF930f2C7Bc02F89D05468112520553FFc6D24801;\n        tokenDetails[0x55534443]._precision = 6;\n        //tusd\n        tokenDetails[0x54555344]._token = 0x78e7BEE398D66660bDF820DbDB415A33d011cD48;\n        tokenDetails[0x54555344]._precision = 18;\n        //ppt\n        tokenDetails[0x505054]._token = 0x0ff72e24AF7c09A647865820D4477F98fcB72a2c;        \n        tokenDetails[0x505054]._precision = 8;\n        //xau\n        tokenDetails[0x584155]._token = 0x9b935E3779098bC5E1ffc073CaF916F1E92A6145;\n        tokenDetails[0x584155]._precision = 0;\n        //usdp\n        tokenDetails[0x55534470]._token = 0xf4b1533b6F45fAC936fA508F7e5db6d4BbC4c8bd;\n        tokenDetails[0x55534470]._precision = 6;\n        */\n        \n        /*livenet*/\n\n        //pxt\n        tokenDetails[0x505854]._token = 0xc14830E53aA344E8c14603A91229A0b925b0B262;\n        tokenDetails[0x505854]._precision = 8;\n        //usdc\n        tokenDetails[0x55534443]._token = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n        tokenDetails[0x55534443]._precision = 6;\n        //tusd\n        tokenDetails[0x54555344]._token = 0x8dd5fbCe2F6a956C3022bA3663759011Dd51e73E;\n        tokenDetails[0x54555344]._precision = 18;\n        //ppt\n        tokenDetails[0x505054]._token = 0xd4fa1460F537bb9085d22C7bcCB5DD450Ef28e3a;        \n        tokenDetails[0x505054]._precision = 8;\n        //xau\n        tokenDetails[0x584155]._token = 0x73a3b7DFFE9af119621f8467D8609771AB4BC33f;\n        tokenDetails[0x584155]._precision = 0;\n        //usdp\n        tokenDetails[0x55534470]._token = 0xBaB5D0f110Be6f4a5b70a2FA22eD17324bFF6576;\n        tokenDetails[0x55534470]._precision = 6;\n    }\n\n    /**\n    BANK MODULE\n    */\n    // NON-CONSTANT METHODS\n\n    function usdcToUsdp(\n        address _dataManager, bytes32 _blockchainActionId, \n        bytes32 _clientId, uint amount)\n        public\n        onlyServer\n    {   \n        // client deposit smart contract address\n        address _depositAddress = DataManager(_dataManager).getDepositAddress(_clientId);\n        require(_dataManager != 0x0 && _depositAddress != 0x0 && amount > 0);\n        //transfer usdc from deposit contract to server/admin\n        require(DepositContract(_depositAddress).transfer(tokenDetails[0x55534443]._token, msg.sender, amount) == true);\n        // mint USDp into depositAddress with amount\n        require(CurrencyToken(tokenDetails[0x55534470]._token).mint(amount, _depositAddress) == true);     \n        //set action data\n        require(DataManager(_dataManager).setBlockchainActionData(_blockchainActionId, 0x55534470, amount, _clientId, _depositAddress, 0) == true); \n        //event\n        emit EventUSDCToUSDp(_blockchainActionId, _clientId, amount);\n    }\n\n    function usdpToUsdc(\n        address _dataManager, bytes32 _blockchainActionId, \n        bytes32 _clientId, uint amount) \n        public\n        onlyServer\n    {\n        // client deposit smart contract address\n        address _depositAddress = DataManager(_dataManager).getDepositAddress(_clientId);\n        require(_dataManager != 0x0 && _depositAddress != 0x0 && amount > 0);\n        //destroyFrom depositAddress USDp amount\n        require(CurrencyToken(tokenDetails[0x55534470]._token).destroyTokensFrom(amount, _depositAddress) == true);\n        //transferFrom USDC from server to depositAddress\n        require(CurrencyToken(tokenDetails[0x55534443]._token).transferFrom(msg.sender, _depositAddress, amount) == true);\n        //set action data\n        require(DataManager(_dataManager).setBlockchainActionData(_blockchainActionId, 0x55534470, amount, _clientId, _depositAddress, 0) == true); \n        //event\n        emit EventUSDpToUSDC(_blockchainActionId, _clientId, amount);\n    }\n\n    // Creates a new 'depositAddress' gotten from deploying a deposit contract linked to a client ID\n    function createAddress(address _dataManager, bytes32 _blockchainActionId, bytes32 clientId) \n        public\n        onlyServer\n    {   \n        require(_dataManager != 0x0);\n        DepositContract newDepositContract;\n        DepositContract dc;\n        if (DataManager(_dataManager).getDepositAddress(clientId) != 0x0) {\n            dc = DepositContract(DataManager(_dataManager).getDepositAddress(clientId));\n            newDepositContract = new DepositContract(clientId, AM);\n            require(!dc.call(bytes4(keccak256(\"getVersion()\")))); \n            // only checking version 1 now to upgrade to version 2\n            address PXT = tokenDetails[0x505854]._token;\n            address PPT = tokenDetails[0x505054]._token;            \n            if(dc.balanceOf(PXT) > 0){\n                require(dc.transfer(PXT, newDepositContract, dc.balanceOf(PXT)) == true);\n            }\n            if(dc.balanceOf(PPT) > 0) {\n                require(dc.transfer(PPT, newDepositContract, dc.balanceOf(PPT)) == true);\n            }\n            require(DataManager(_dataManager)._setDepositAddress(_blockchainActionId, clientId, newDepositContract) == true);\n            EventDepositAddressUpgrade(_blockchainActionId, address(dc), DataManager(_dataManager).getDepositAddress(clientId), clientId, newDepositContract.getVersion());\n        } else { \n            newDepositContract = new DepositContract(clientId, AM);\n            require(DataManager(_dataManager).setDepositAddress(_blockchainActionId, newDepositContract, clientId) == true);\n            require(DataManager(_dataManager).setBlockchainActionData(_blockchainActionId, 0x0, 0, clientId, DataManager(_dataManager).getDepositAddress(clientId), 0) == true);\n            EventNewDepositContract(_blockchainActionId, clientId, DataManager(_dataManager).getDepositAddress(clientId), newDepositContract.getVersion());\n        }\n    }\n\n    /* /// Ether to XAUP exchange between deposit contract and Populous.sol\n    function exchangeXAUP(\n        address _dataManager, bytes32 _blockchainActionId, \n        address erc20_tokenAddress, uint erc20_amount, uint xaup_amount, \n        uint _tokenId, bytes32 _clientId, address adminExternalWallet) \n        public \n        onlyServer\n    {    \n        ERC1155 xa = ERC1155(tokenDetails[0x584155]._token);\n        // client deposit smart contract address\n        address _depositAddress = DataManager(_dataManager).getDepositAddress(_clientId);\n        require(\n            // check dataManager contract is valid\n            _dataManager != 0x0 &&\n            // check deposit address of client\n            _depositAddress != 0x0 && \n            // check xaup token address\n            // tokenDetails[0x584155]._token != 0x0 && \n            erc20_tokenAddress != 0x0 &&\n            // check action id is unused\n            DataManager(_dataManager).getActionStatus(_blockchainActionId) == false &&\n            // deposit contract version >= 2\n            DepositContract(_depositAddress).getVersion() >= 2 &&\n            // populous server xaup balance\n            xa.balanceOf(_tokenId, msg.sender) >= xaup_amount\n        );\n        // transfer erc20 token balance from clients deposit contract to server/admin\n        require(DepositContract(_depositAddress).transfer(erc20_tokenAddress, adminExternalWallet, erc20_amount) == true);\n        // transfer xaup tokens to clients deposit address from populous server allowance\n        xa.safeTransferFrom(msg.sender, _depositAddress, _tokenId, xaup_amount, \"\");\n        // set action status in dataManager\n        require(DataManager(_dataManager).setBlockchainActionData(_blockchainActionId, 0x0, erc20_amount, _clientId, _depositAddress, 0) == true);\n        // emit event \n        EventExchangeXAUp(_blockchainActionId, erc20_tokenAddress, erc20_amount, xaup_amount, _tokenId, _clientId, _depositAddress);\n    } */\n\n\n    /** dev Import an amount of pokens of a particular currency from an ethereum wallet/address to bank\n      * @param _blockchainActionId the blockchain action id\n      * @param accountId the account id of the client\n      * @param from the blockchain address to import pokens from\n      * @param currency the poken currency\n      */\n    function withdrawPoken(\n        address _dataManager, bytes32 _blockchainActionId, \n        bytes32 currency, uint256 amount, uint256 amountUSD,\n        address from, address to, bytes32 accountId, \n        uint256 inCollateral,\n        uint256 pptFee, address adminExternalWallet) \n        public \n        onlyServer \n    {\n        require(_dataManager != 0x0);\n        //DataManager dm = DataManager(_dataManager);\n        require(DataManager(_dataManager).getActionStatus(_blockchainActionId) == false && DataManager(_dataManager).getDepositAddress(accountId) != 0x0);\n        require(adminExternalWallet != 0x0 && pptFee > 0 && amount > 0);\n        require(DataManager(_dataManager).getCurrency(currency) != 0x0);\n        DepositContract o = DepositContract(DataManager(_dataManager).getDepositAddress(accountId));\n        // check if pptbalance minus collateral held is more than pptFee then transfer pptFee from users ppt deposit to adminWallet\n        require(SafeMath.safeSub(o.balanceOf(tokenDetails[0x505054]._token), inCollateral) >= pptFee);\n        require(o.transfer(tokenDetails[0x505054]._token, adminExternalWallet, pptFee) == true);\n        // WITHDRAW PART / DEBIT\n        if(amount > CurrencyToken(DataManager(_dataManager).getCurrency(currency)).balanceOf(from)) {\n            // destroying total balance as user has less than pokens they want to withdraw\n            require(CurrencyToken(DataManager(_dataManager).getCurrency(currency)).destroyTokensFrom(CurrencyToken(DataManager(_dataManager).getCurrency(currency)).balanceOf(from), from) == true);\n            //remaining ledger balance of deposit address is 0\n        } else {\n            // destroy amount from balance as user has more than pokens they want to withdraw\n            require(CurrencyToken(DataManager(_dataManager).getCurrency(currency)).destroyTokensFrom(amount, from) == true);\n            //left over balance is deposit address balance.\n        }\n        // TRANSFER PART / CREDIT\n        // approve currency amount for populous for the next require to pass\n        if(amountUSD > 0) //give the user USDC\n        {\n            CurrencyToken(tokenDetails[0x55534443]._token).transferFrom(msg.sender, to, amountUSD);\n        }else { //give the user GBP / poken currency\n            CurrencyToken(DataManager(_dataManager).getCurrency(currency)).transferFrom(msg.sender, to, amount);\n        }\n        require(DataManager(_dataManager).setBlockchainActionData(_blockchainActionId, currency, amount, accountId, to, pptFee) == true); \n        EventWithdrawPoken(_blockchainActionId, accountId, currency, amount);\n    }\n\n    /** @dev Withdraw an amount of PPT Populous tokens to a blockchain address \n      * @param _blockchainActionId the blockchain action id\n      * @param pptAddress the address of the PPT smart contract\n      * @param accountId the account id of the client\n      * @param pptFee the amount of fees to pay in PPT tokens\n      * @param adminExternalWallet the platform admin wallet address to pay the fees to \n      * @param to the blockchain address to withdraw and transfer the pokens to\n      * @param inCollateral the amount of pokens withheld by the platform\n      */    \n    function withdrawERC20(\n        address _dataManager, bytes32 _blockchainActionId, \n        address pptAddress, bytes32 accountId, \n        address to, uint256 amount, uint256 inCollateral, \n        uint256 pptFee, address adminExternalWallet) \n        public \n        onlyServer \n    {   \n        require(_dataManager != 0x0);\n        require(DataManager(_dataManager).getActionStatus(_blockchainActionId) == false && DataManager(_dataManager).getDepositAddress(accountId) != 0x0);\n        require(adminExternalWallet != 0x0 && pptFee > 0 && amount > 0);\n        address depositContract = DataManager(_dataManager).getDepositAddress(accountId);\n        if(pptAddress == tokenDetails[0x505054]._token) {\n            uint pptBalance = SafeMath.safeSub(DepositContract(depositContract).balanceOf(tokenDetails[0x505054]._token), inCollateral);\n            require(pptBalance >= SafeMath.safeAdd(amount, pptFee));\n        } else {\n            uint erc20Balance = DepositContract(depositContract).balanceOf(pptAddress);\n            require(erc20Balance >= amount);\n        }\n        require(DepositContract(depositContract).transfer(tokenDetails[0x505054]._token, adminExternalWallet, pptFee) == true);\n        require(DepositContract(depositContract).transfer(pptAddress, to, amount) == true);\n        bytes32 tokenSymbol = iERC20Token(pptAddress).symbol();    \n        require(DataManager(_dataManager).setBlockchainActionData(_blockchainActionId, tokenSymbol, amount, accountId, to, pptFee) == true);\n        EventWithdrawPPT(_blockchainActionId, accountId, DataManager(_dataManager).getDepositAddress(accountId), to, amount);\n    }\n\n    // erc1155 withdraw function using transferFrom in erc1155 token contract\n/*     function withdrawERC1155(\n        address _dataManager, bytes32 _blockchainActionId,\n        address _to, uint256 _id, uint256 _value,\n        bytes32 accountId, uint256 pptFee, \n        address adminExternalWallet) \n        public\n        onlyServer \n    {\n        require(DataManager(_dataManager).getActionStatus(_blockchainActionId) == false && DataManager(_dataManager).getDepositAddress(accountId) != 0x0);\n        require(adminExternalWallet != 0x0 && pptFee > 0 && _value > 0);\n        DepositContract o = DepositContract(DataManager(_dataManager).getDepositAddress(accountId));\n        require(o.transfer(tokenDetails[0x505054]._token, adminExternalWallet, pptFee) == true);\n        // transfer xaup tokens to address from deposit contract\n        require(o.transferERC1155(tokenDetails[0x584155]._token, _to, _id, _value) == true);\n        // set action status in dataManager\n        require(DataManager(_dataManager).setBlockchainActionData(_blockchainActionId, 0x584155, _value, accountId, _to, pptFee) == true);\n        // emit event \n        EventWithdrawXAUp(_blockchainActionId, tokenDetails[0x584155]._token, _value, _id, accountId, pptFee);\n    } */\n}",
  "bytecode": "",
  "constructorArguments": "00000000000000000000000098ca4bf7e522cd6d2f69cf843dfab327a1e26497"
}