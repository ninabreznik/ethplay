{
  "address": "0x2a185c995373a766979e645d0912d30e27aa56f6",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "SnailFarm3",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-12-09\n*/\n\npragma solidity ^0.4.24;\n\n/* SNAILFARM 3\n\n// SnailFarm 3 is an idlegame in which you buy or sell eggs,\n// Which you can hatch into snails, who continuously produce more eggs\n// The goal of the game is to reach 1 million snails.\n// At that point, you win the round (and the ETH jackpot that comes with it)\n\n// SnailFarm 3 is the latest of a series of iterations over a few months.\n// We will attempt to identify the key strengths of each of these iterations\n// Focus on refining these features, in order to make for a fun, simple and\n// Sustainable experience.\n\n// Shrimpfarm's killer feature: buying and selling eggs directly to the smart contract.\n// Snailfarm 1: capturing and holding the Snailmaster position, a ruler collecting dividends.\n// Snailfarm 2: juggling with hot potato boosts to increase hatch size.\n\n// SnailFarm 3 in a nutshell:\n\n// The game is played in rounds.\n// Buy your starting snails once, play every round at your convenience.\n// Player snails are reinitialised at the end of each round.\n// Losing players receive \"red eggs\" as a percentage of their snails.\n// Red eggs persist from round to round.\n// Red eggs can be hatched as regular eggs for no ETH cost, or used to claim boosts.\n\n// Eggs can be bought and sold directly to the contract.\n// No more than 20% of the egg supply can be bought at once.\n// On sale, price is divided by 2.\n\n// Hatching eggs into snails come with a slight, fixed, ETH cost.\n// The size of a hatch can be improved with special boosts.\n// Each boost adds a fixed bonus of an extra full hatch.\n// One boost means double hatch. Three boosts means quadruple hatch.\n// Two types of boosts exist: hot potato, and personal.\n\n// Hot potato boosts: only one player can hold any of these at a time.\n// The price of hot potato boosts rises with each player claim.\n// The price of hot potato boosts is reinitialised as the round ends.\n// Owners keep hot potato boosts between rounds, until another player claims them.\n// SPIDERQUEEN- requires snails. Amount doubles with each claim.\n// SQUIRRELDUKE- requires red eggs. Amount doubles with each claim.\n// TADPOLEPRINCE- requires ETH. Amount raises by 20% with each claim,\n// and the previous owner receives 110% of the ETH he spent.\n\n// Personal boosts: all players can hold them.\n// Each personal boost has different rules.\n\n// SLUG- this boost persists between rounds.\n// Slug requires a snail sacrifice of at least 100,000 snails.\n// It will sacrifice ALL the snails the player own at the moment of the claim.\n\n// LETTUCE- this boost lasts for only one round.\n// Lettuce requires red eggs.\n// The price of lettuce starts high, and decreases with each lettuce buy.\n// The price of lettuce is reinitialised and increases from round to round.\n\n// CARROT- this boost lasts for three rounds in a row.\n// Carrot requires ETH.\n// The price of carrot is fixed at 0.02 ETH.\n\n// The Snailmaster position as in SnailFarm 1 returns with a twist.\n// While still a hot potato, becoming the Snailmaster now requires red eggs.\n// That requirement doubles with each claim, and halves between each round.\n// Being the Snailmaster persists between rounds.\n// The Snailmaster gets a significant cut of every ETH transaction.\n\n// New mechanic: Red Harvest\n// The red harvest lets players purchase red eggs for ETH.\n// The red harvest works as a dutch auction, similar to cryptokitties.\n// Starting price is equal to the current round pot.\n// End price is a trivial amount of ETH.\n// The auction lasts at most 4 hours.\n// Price drops sharply at first, and slower near the end.\n// The red harvest contains as many red eggs as the starting snail amount.\n// When a player buys the red harvest, a new one is immediately put for sale.\n\n// Bankroll: players can fund the game and receive acorns in exchange.\n// Acorns cannot be sold or actively used in any way.\n// Acorn holders receive 10% of the ETH invested, proportional to their share.\n// Acorns start at half-price to encourage early funding kickstarting the game.\n// After that, acorn price slowly decreases from round to round.\n// Potential dilution of early holdings encourages refunding the bankroll later on.\n\n// SnailFarm 3 is part of the SnailThrone ecosystem.\n// A portion of the ETH spent in SnailFarm 3 is saved as throneDivs.\n// SnailThrone holders are rewarded proportionally by throneDivs.\n\n// ETH of every SnailFarm 3 transaction is split as such:\n// 50% to the snailPot\n// 25% to the eggPot\n// 10% to the acorn holders\n// 10% to the throneDivs\n// 5% to the SnailMaster\n\n*/\n\ncontract SnailFarm3 {\n    using SafeMath for uint;\n    \n    /* Event */\n    \n    event FundedTree (address indexed player, uint eth, uint acorns);\n    event ClaimedShare (address indexed player, uint eth, uint acorns);\n    event BecameMaster (address indexed player, uint indexed round);\n    event WithdrewBalance (address indexed player, uint eth);\n    event Hatched (address indexed player, uint eggs, uint snails, uint hatchery);\n    event SoldEgg (address indexed player, uint eggs, uint eth);\n    event BoughtEgg (address indexed player, uint eggs, uint eth, uint playereggs);\n    event StartedSnailing (address indexed player, uint indexed round);\n    event BecameQueen (address indexed player, uint indexed round, uint spiderreq, uint hatchery);\n    event BecameDuke (address indexed player, uint indexed round, uint squirrelreq, uint playerreds);\n    event BecamePrince (address indexed player, uint indexed round, uint tadpolereq);\n    event WonRound (address indexed roundwinner, uint indexed round, uint eth);\n    event BeganRound (uint indexed round);\n    event JoinedRound (address indexed player, uint indexed round, uint playerreds);\n    event GrabbedHarvest (address indexed player, uint indexed round, uint eth, uint playerreds);\n    event UsedRed (address indexed player, uint eggs, uint snails, uint hatchery);\n    event FoundSlug (address indexed player, uint indexed round, uint snails);\n    event FoundLettuce (address indexed player, uint indexed round, uint lettucereq, uint playerreds);\n    event FoundCarrot (address indexed player, uint indexed round);\n    event PaidThrone (address indexed player, uint eth);\n    event BoostedPot (address indexed player, uint eth);\n\n    /* Constants */\n    \n    uint256 public constant FUND_TIMESTAMP       = 1544385600; // funding launch on 9th Dec 8pm GMT\n    uint256 public constant START_TIMESTAMP      = 1544904000; // game launch on 15th Dec 8pm GMT\n    uint256 public constant TIME_TO_HATCH_1SNAIL = 86400; //seconds in a day\n    uint256 public constant STARTING_SNAIL       = 300;\n    uint256 public constant FROGKING_REQ         = 1000000;\n    uint256 public constant ACORN_PRICE          = 0.001 ether;\n    uint256 public constant ACORN_MULT           = 10;\n    uint256 public constant STARTING_SNAIL_COST  = 0.004 ether;\n    uint256 public constant HATCHING_COST        = 0.0008 ether;\n    uint256 public constant SPIDER_BASE_REQ      = 80;\n    uint256 public constant SQUIRREL_BASE_REQ    = 2;\n    uint256 public constant TADPOLE_BASE_REQ     = 0.02 ether;\n    uint256 public constant SLUG_MIN_REQ         = 100000;\n    uint256 public constant LETTUCE_BASE_REQ     = 20;\n    uint256 public constant CARROT_COST          = 0.02 ether;\n    uint256 public constant HARVEST_COUNT        = 300;\n    uint256 public constant HARVEST_DURATION     = 14400; //4 hours in seconds\n    uint256 public constant HARVEST_DUR_ROOT     = 120; //saves computation\n    uint256 public constant HARVEST_MIN_COST     = 0.002 ether;\n    uint256 public constant SNAILMASTER_REQ      = 4096;\n    uint256 public constant ROUND_DOWNTIME       = 43200; //12 hours between rounds\n    address public constant SNAILTHRONE          = 0x261d650a521103428C6827a11fc0CBCe96D74DBc;\n\n    /* Variables */\n    \n\t//False for downtime between rounds, true when round is ongoing\n    bool public gameActive             = false;\n\t\n\t//Used to ensure a proper game start\n    address public dev;\n\t\n\t//Current round\n    uint256 public round                = 0;\n\t\n\t//Current top snail holder\n\taddress public currentLeader;\n\t\n\t//Owners of hot potatoes\n    address public currentSpiderOwner;\n    address public currentTadpoleOwner;\n\taddress public currentSquirrelOwner;\n\taddress public currentSnailmaster;\n\t\n\t//Current requirement for hot potatoes\n\tuint256 public spiderReq;\n    uint256 public tadpoleReq;\n\tuint256 public squirrelReq;\n\t\n\t//Current requirement for lettuce\n\tuint256 public lettuceReq;\n\t\n\t//Current requirement for Snailmaster\n\tuint256 public snailmasterReq       = SNAILMASTER_REQ;\n\t\n\t//Starting time for next round\n\tuint256 public nextRoundStart;\n\t\n\t//Starting price for Red Harvest auction\n\tuint256 public harvestStartCost;\n\t\n\t//Starting time for Red Harvest auction\n\tuint256 public harvestStartTime;\n\t\n\t//Current number of acorns over all holders\n\tuint256 public maxAcorn             = 0;\n\t\n\t//Current divs per acorn\n\tuint256 public divPerAcorn          = 0;\n\t\n\t//Current number of eggs for sale\n    uint256 public marketEgg            = 0;\n\t\t\n\t//Reserve pot and round jackpot\n    uint256 public snailPot             = 0;\n    uint256 public roundPot             = 0;\n    \n\t//Egg pot\n    uint256 public eggPot               = 0;\n    \n    //SnailThrone div pot\n    uint256 public thronePot            = 0;\n\n    /* Mappings */\n    \n\tmapping (address => bool) public hasStartingSnail;\n\tmapping (address => bool) public hasSlug;\n\tmapping (address => bool) public hasLettuce;\n\tmapping (address => uint256) public gotCarrot;\n\tmapping (address => uint256) public playerRound;\n    mapping (address => uint256) public hatcherySnail;\n    mapping (address => uint256) public claimedEgg;\n    mapping (address => uint256) public lastHatch;\n    mapping (address => uint256) public redEgg;\n    mapping (address => uint256) public playerBalance;\n    mapping (address => uint256) public prodBoost;\n    mapping (address => uint256) public acorn;\n    mapping (address => uint256) public claimedShare;\n    \n    /* Functions */\n    \n    // Constructor\n    // Assigns all hot potatoes to dev for a proper game start\n    // (dev is banned from playing the game)\n    \n    constructor() public {\n        nextRoundStart = START_TIMESTAMP;\n        \n        //Assigns hot potatoes to dev originally\n        dev = msg.sender;\n        currentSnailmaster = msg.sender;\n        currentTadpoleOwner = msg.sender;\n        currentSquirrelOwner = msg.sender;\n        currentSpiderOwner = msg.sender;\n        currentLeader = msg.sender;\n        prodBoost[msg.sender] = 4; //base+tadpole+squirrel+spider\n    }\n    \n    // BeginRound\n    // Can be called by anyone to start a new round once downtime is over\n    // Sets appropriate values, and starts new round\n    \n    function BeginRound() public {\n        require(gameActive == false, \"cannot start round while game is active\");\n        require(now > nextRoundStart, \"round downtime isn't over\");\n        require(snailPot > 0, \"cannot start round on empty pot\");\n        \n        round = round.add(1);\n\t\tmarketEgg = STARTING_SNAIL;\n        roundPot = snailPot.div(10);\n        spiderReq = SPIDER_BASE_REQ;\n        tadpoleReq = TADPOLE_BASE_REQ;\n        squirrelReq = SQUIRREL_BASE_REQ;\n        lettuceReq = LETTUCE_BASE_REQ.mul(round);\n        if(snailmasterReq > 2) {\n            snailmasterReq = snailmasterReq.div(2);\n        }\n        harvestStartTime = now;\n        harvestStartCost = roundPot;\n        \n        gameActive = true;\n        \n        emit BeganRound(round);\n    }\n    \n    // FundTree\n    // Buy a share of the bankroll\n    // Acorn price lowers from round to round\n    \n    function FundTree() public payable {\n        require(tx.origin == msg.sender, \"no contracts allowed\");\n        require(now > FUND_TIMESTAMP, \"funding hasn't started yet\");\n        \n        uint256 _acornsBought = ComputeAcornBuy(msg.value);\n        \n        //Previous divs are considered claimed\n        claimedShare[msg.sender] = claimedShare[msg.sender].add(_acornsBought.mul(divPerAcorn));\n        \n        //Add to maxAcorn\n        maxAcorn = maxAcorn.add(_acornsBought);\n        \n        //Split ETH to pot\n        PotSplit(msg.value);\n        \n        //Add player acorns\n        acorn[msg.sender] = acorn[msg.sender].add(_acornsBought);\n        \n        emit FundedTree(msg.sender, msg.value, _acornsBought);\n    }\n    \n    // ClaimAcornShare\n    // Sends unclaimed dividends to playerBalance\n    // Adjusts claimable dividends\n    \n    function ClaimAcornShare() public {\n        \n        uint256 _playerShare = ComputeMyShare();\n        \n        if(_playerShare > 0) {\n            \n            //Add new divs to claimed divs\n            claimedShare[msg.sender] = claimedShare[msg.sender].add(_playerShare);\n            \n            //Send divs to playerEarnings\n            playerBalance[msg.sender] = playerBalance[msg.sender].add(_playerShare);\n            \n            emit ClaimedShare(msg.sender, _playerShare, acorn[msg.sender]);\n        }\n    }\n    \n    // BecomeSnailmaster\n    // Hot potato with red eggs \n    // Receives 5% of all incoming ETH\n    // Requirement halves every round, doubles on every claim\n\t\n    function BecomeSnailmaster() public {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        require(redEgg[msg.sender] >= snailmasterReq, \"not enough red eggs\");\n        \n        redEgg[msg.sender] = redEgg[msg.sender].sub(snailmasterReq);\n        snailmasterReq = snailmasterReq.mul(2);\n        currentSnailmaster = msg.sender;\n        \n        emit BecameMaster(msg.sender, round);\n    }\n    \n    // WithdrawBalance\n    // Withdraws the ETH balance of a player to his wallet\n    \n    function WithdrawBalance() public {\n        require(playerBalance[msg.sender] > 0, \"no ETH in player balance\");\n        \n        uint _amount = playerBalance[msg.sender];\n        playerBalance[msg.sender] = 0;\n        msg.sender.transfer(_amount);\n        \n        emit WithdrewBalance(msg.sender, _amount);\n    }\n    \n    // PotSplit\n\t// Allocates the ETH of every transaction\n\t// 50% snailpot, 25% eggpot, 10% to acorn holders, 10% thronepot, 5% snailmaster\n    \n    function PotSplit(uint256 _msgValue) private {\n        \n        snailPot = snailPot.add(_msgValue.div(2));\n        eggPot = eggPot.add(_msgValue.div(4));\n        thronePot = thronePot.add(_msgValue.div(10));\n        \n        //Increase div per acorn proportionally\n        divPerAcorn = divPerAcorn.add(_msgValue.div(10).div(maxAcorn));\n        \n        //Snailmaster\n        playerBalance[currentSnailmaster] = playerBalance[currentSnailmaster].add(_msgValue.div(20));\n    }\n    \n    // JoinRound\n    // Gives red egg reward to player and lets them join the new round\n    \n    function JoinRound() public {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] != round, \"player already in current round\");\n        require(hasStartingSnail[msg.sender] == true, \"buy starting snails first\");\n        \n        uint256 _bonusRed = hatcherySnail[msg.sender].div(100);\n        hatcherySnail[msg.sender] = STARTING_SNAIL;\n        redEgg[msg.sender] = redEgg[msg.sender].add(_bonusRed);\n        \n        //Check if carrot is owned, remove 1 to count if so\n        if(gotCarrot[msg.sender] > 0) {\n            gotCarrot[msg.sender] = gotCarrot[msg.sender].sub(1);\n            \n            //Check if result puts us at 0, lower prodBoost if so\n            if(gotCarrot[msg.sender] == 0) {\n                prodBoost[msg.sender] = prodBoost[msg.sender].sub(1);\n            }\n        }\n        \n        //Check if lettuce is owned, lower prodBoost if so\n        if(hasLettuce[msg.sender]) {\n            prodBoost[msg.sender] = prodBoost[msg.sender].sub(1);\n            hasLettuce[msg.sender] = false;\n        }\n        \n\t\t//Set lastHatch to now\n\t\tlastHatch[msg.sender] = now;\n        playerRound[msg.sender] = round;\n        \n        emit JoinedRound(msg.sender, round, redEgg[msg.sender]);\n    }\n    \n    // WinRound\n    // Called when a player meets the snail requirement\n    // Gives his earnings to winner\n    // Pauses the game for 12 hours\n    \n    function WinRound(address _msgSender) private {\n        \n        gameActive = false;\n        nextRoundStart = now.add(ROUND_DOWNTIME);\n        \n        hatcherySnail[_msgSender] = 0;\n        snailPot = snailPot.sub(roundPot);\n        playerBalance[_msgSender] = playerBalance[_msgSender].add(roundPot);\n        \n        emit WonRound(_msgSender, round, roundPot);\n    }\n    \n    // HatchEgg\n    // Hatches eggs into snails for a slight fixed ETH cost\n    // If the player owns boosts, adjust result accordingly\n    \n    function HatchEgg() public payable {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        require(msg.value == HATCHING_COST, \"wrong ETH cost\");\n        \n        PotSplit(msg.value);\n        uint256 eggUsed = ComputeMyEgg(msg.sender);\n        uint256 newSnail = eggUsed.mul(prodBoost[msg.sender]);\n        claimedEgg[msg.sender] = 0;\n        lastHatch[msg.sender] = now;\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(newSnail);\n        \n        if(hatcherySnail[msg.sender] > hatcherySnail[currentLeader]) {\n            currentLeader = msg.sender;\n        }\n        \n        if(hatcherySnail[msg.sender] >= FROGKING_REQ) {\n            WinRound(msg.sender);\n        }\n        \n        emit Hatched(msg.sender, eggUsed, newSnail, hatcherySnail[msg.sender]);\n    }\n    \n    // SellEgg\n    // Exchanges player eggs for ETH\n\t// Eggs sold are added to the market\n    \n    function SellEgg() public {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        \n        uint256 eggSold = ComputeMyEgg(msg.sender);\n        uint256 eggValue = ComputeSell(eggSold);\n        claimedEgg[msg.sender] = 0;\n        lastHatch[msg.sender] = now;\n        marketEgg = marketEgg.add(eggSold);\n        eggPot = eggPot.sub(eggValue);\n        playerBalance[msg.sender] = playerBalance[msg.sender].add(eggValue);\n        \n        emit SoldEgg(msg.sender, eggSold, eggValue);\n    }\n    \n    // BuyEgg\n    // Buy a calculated amount of eggs for a given amount of ETH\n\t\n\t// Eggs bought are removed from the market\n    \n    function BuyEgg() public payable {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        \n        uint256 _eggBought = ComputeBuy(msg.value);\n        \n        //Define final buy price\n        uint256 _ethSpent = msg.value;\n        \n        //Refund player if he overpays. maxBuy is a fourth of eggPot\n        //(a/a+b) implies 1/4 of b gets the maximum 20% supply\n        uint256 _maxBuy = eggPot.div(4);\n        if (msg.value > _maxBuy) {\n            uint _excess = msg.value.sub(_maxBuy);\n            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);\n            _ethSpent = _maxBuy;\n        }  \n        \n        PotSplit(_ethSpent);\n        marketEgg = marketEgg.sub(_eggBought);\n        claimedEgg[msg.sender] = claimedEgg[msg.sender].add(_eggBought);\n        \n        emit BoughtEgg(msg.sender, _eggBought, _ethSpent, hatcherySnail[msg.sender]);\n    }\n    \n    // BuyStartingSnail\n    // Gives starting snails and sets prodBoost to 1\n    \n    function BuyStartingSnail() public payable {\n        require(gameActive, \"game is paused\");\n        require(tx.origin == msg.sender, \"no contracts allowed\");\n        require(hasStartingSnail[msg.sender] == false, \"player already active\");\n        require(msg.value == STARTING_SNAIL_COST, \"wrongETH cost\");\n        require(msg.sender != dev, \"shoo shoo, developer\");\n\n        PotSplit(msg.value);\n\t\thasStartingSnail[msg.sender] = true;\n        lastHatch[msg.sender] = now;\n\t\tprodBoost[msg.sender] = 1;\n\t\tplayerRound[msg.sender] = round;\n        hatcherySnail[msg.sender] = STARTING_SNAIL;\n        \n        emit StartedSnailing(msg.sender, round);\n    }\n    \n    // GrabRedHarvest\n    // Gets red eggs for ETH\n    // Works as a dutch auction\n    \n    function GrabRedHarvest() public payable {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        \n        //Check current harvest cost\n        uint256 _harvestCost = ComputeHarvest();\n        require(msg.value >= _harvestCost);\n        \n        //If player sent more ETH than needed, refund excess to playerBalance\n        if (msg.value > _harvestCost) {\n            uint _excess = msg.value.sub(_harvestCost);\n            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);\n        }\n        \n        PotSplit(_harvestCost);\n        \n        //Reset the harvest\n        harvestStartCost = roundPot;\n        harvestStartTime = now;\n        \n        //Give red eggs to player\n        redEgg[msg.sender] = redEgg[msg.sender].add(HARVEST_COUNT);\n        \n        emit GrabbedHarvest(msg.sender, round, msg.value, redEgg[msg.sender]);\n    }\n    \n    // UseRedEgg\n    // Hatches a defined number of red eggs into snails\n    // No ETH cost\n    \n    function UseRedEgg(uint256 _redAmount) public {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        require(redEgg[msg.sender] >= _redAmount, \"not enough red eggs\");\n        \n        redEgg[msg.sender] = redEgg[msg.sender].sub(_redAmount);\n        uint256 _newSnail = _redAmount.mul(prodBoost[msg.sender]);\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(_newSnail);\n        \n        if(hatcherySnail[msg.sender] > hatcherySnail[currentLeader]) {\n            currentLeader = msg.sender;\n        }\n        \n        if(hatcherySnail[msg.sender] >= FROGKING_REQ) {\n            WinRound(msg.sender);\n        }\n        \n        emit UsedRed(msg.sender, _redAmount, _newSnail, hatcherySnail[msg.sender]);\n    }\n    \n    // FindSlug\n    // Sacrifices all the snails the player owns (minimum 100k)\n    // Raises his prodBoost by 1 permanently\n    \n    function FindSlug() public {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        require(hasSlug[msg.sender] == false, \"already owns slug\");\n        require(hatcherySnail[msg.sender] >= SLUG_MIN_REQ, \"not enough snails\");\n        \n\t\tuint256 _sacrifice = hatcherySnail[msg.sender];\n        hatcherySnail[msg.sender] = 0;\n        hasSlug[msg.sender] = true;\n        prodBoost[msg.sender] = prodBoost[msg.sender].add(1);\n\n        emit FoundSlug(msg.sender, round, _sacrifice);\n    }\n    \n    // FindLettuce\n    // Exchanges red eggs for lettuce (+1 prodBoost for the round)\n    // Lowers next lettuce requirement\n    \n    function FindLettuce() public {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        require(hasLettuce[msg.sender] == false, \"already owns lettuce\");\n        require(redEgg[msg.sender] >= lettuceReq, \"not enough red eggs\");\n        \n        uint256 _eventLettuceReq = lettuceReq;\n        redEgg[msg.sender] = redEgg[msg.sender].sub(lettuceReq);\n        lettuceReq = lettuceReq.sub(LETTUCE_BASE_REQ);\n        if(lettuceReq < LETTUCE_BASE_REQ) {\n            lettuceReq = LETTUCE_BASE_REQ;\n        }\n        \n        hasLettuce[msg.sender] = true;\n        prodBoost[msg.sender] = prodBoost[msg.sender].add(1);\n\n        emit FoundLettuce(msg.sender, round, _eventLettuceReq, redEgg[msg.sender]);\n    }\n    \n    // FindCarrot\n    // Trades ETH for carrot (+1 prodBoost for 3 rounds)\n    \n    function FindCarrot() public payable {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        require(gotCarrot[msg.sender] == 0, \"already owns carrot\");\n        require(msg.value == CARROT_COST);\n        \n        PotSplit(msg.value);\n        gotCarrot[msg.sender] = 3;\n        prodBoost[msg.sender] = prodBoost[msg.sender].add(1);\n\n        emit FoundCarrot(msg.sender, round);\n    }\n    \n    // PayThrone\n    // Sends thronePot to SnailThrone\n    \n    function PayThrone() public {\n        uint256 _payThrone = thronePot;\n        thronePot = 0;\n        if (!SNAILTHRONE.call.value(_payThrone)()){\n            revert();\n        }\n        \n        emit PaidThrone(msg.sender, _payThrone);\n    }\n    \n    // BecomeSpiderQueen\n    // Increases playerProdBoost while held, obtained with a snail sacrifice\n\t// Hot potato item, requirement doubles with every buy\n    \n    function BecomeSpiderQueen() public {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        require(hatcherySnail[msg.sender] >= spiderReq, \"not enough snails\");\n\n        // Remove sacrificed snails, increase req\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].sub(spiderReq);\n        spiderReq = spiderReq.mul(2);\n        \n        // Lower prodBoost of old spider owner\n        prodBoost[currentSpiderOwner] = prodBoost[currentSpiderOwner].sub(1);\n        \n        // Give ownership to msg.sender, then increases his prodBoost\n        currentSpiderOwner = msg.sender;\n        prodBoost[currentSpiderOwner] = prodBoost[currentSpiderOwner].add(1);\n        \n        emit BecameQueen(msg.sender, round, spiderReq, hatcherySnail[msg.sender]);\n    }\n\t\n\t// BecomeSquirrelDuke\n\t// Increases playerProdBoost while held, obtained with a red egg sacrifice\n    // Hot potato item, requirement doubles with every buy\n    \n    function BecomeSquirrelDuke() public {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        require(redEgg[msg.sender] >= squirrelReq, \"not enough red eggs\");\n        \n        // Remove red eggs spent, increase req\n        redEgg[msg.sender] = redEgg[msg.sender].sub(squirrelReq);\n        squirrelReq = squirrelReq.mul(2);\n        \n        // Lower prodBoost of old squirrel owner\n        prodBoost[currentSquirrelOwner] = prodBoost[currentSquirrelOwner].sub(1);\n        \n        // Give ownership to msg.sender, then increases his prodBoost\n        currentSquirrelOwner = msg.sender;\n        prodBoost[currentSquirrelOwner] = prodBoost[currentSquirrelOwner].add(1);\n        \n        emit BecameDuke(msg.sender, round, squirrelReq, redEgg[msg.sender]);\n    }\n    \n    // BecomeTadpolePrince\n    // Increases playerProdBoost while held, obtained with ETH\n\t\n    // Hot potato item, price increases by 20% with every buy\n    \n    function BecomeTadpolePrince() public payable {\n        require(gameActive, \"game is paused\");\n        require(playerRound[msg.sender] == round, \"join new round to play\");\n        require(msg.value >= tadpoleReq, \"not enough ETH\");\n        \n        // If player sent more ETH than needed, refund excess to playerBalance\n        if (msg.value > tadpoleReq) {\n            uint _excess = msg.value.sub(tadpoleReq);\n            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);\n        }  \n        \n        // Calculate +10% from previous price\n        // Give result to the potsplit\n        uint _extra = tadpoleReq.div(12); \n        PotSplit(_extra);\n        \n        // Calculate 110% of previous price\n        // Give result to the previous owner\n        uint _previousFlip = tadpoleReq.mul(11).div(12);\n        playerBalance[currentTadpoleOwner] = playerBalance[currentTadpoleOwner].add(_previousFlip);\n        \n        // Increase ETH required for next buy by 20%\n        tadpoleReq = (tadpoleReq.mul(6)).div(5); \n        \n        // Lower prodBoost of old tadpole owner\n        prodBoost[currentTadpoleOwner] = prodBoost[currentTadpoleOwner].sub(1);\n        \n        // Give ownership to msg.sender, then increase his prodBoost\n        currentTadpoleOwner = msg.sender;\n        prodBoost[currentTadpoleOwner] = prodBoost[currentTadpoleOwner].add(1);\n        \n        emit BecamePrince(msg.sender, round, tadpoleReq);\n    }\n    \n    // fallback function\n    // Feeds the snailPot\n    \n    function() public payable {\n        snailPot = snailPot.add(msg.value);\n        \n        emit BoostedPot(msg.sender, msg.value);\n    }\n    \n    // ComputeAcornCost\n    // Returns acorn cost at the current time\n    // Before the game starts, acorns are at half cost\n    // After the game is started, cost is multiplied by 10/(10+round)\n    \n    function ComputeAcornCost() public view returns(uint256) {\n        uint256 _acornCost;\n        if(round != 0) {\n            _acornCost = ACORN_PRICE.mul(ACORN_MULT).div(ACORN_MULT.add(round));\n        } else {\n            _acornCost = ACORN_PRICE.div(2);\n        }\n        return _acornCost;\n    }\n    \n    // ComputeAcornBuy\n    // Returns acorn amount for a given amount of ETH\n    \n    function ComputeAcornBuy(uint256 _ether) public view returns(uint256) {\n        uint256 _costPerAcorn = ComputeAcornCost();\n        return _ether.div(_costPerAcorn);\n    }\n    \n    // ComputeMyShare\n    // Returns unclaimed share for the player\n    \n    function ComputeMyShare() public view returns(uint256) {\n        //Calculate share of player\n        uint256 _playerShare = divPerAcorn.mul(acorn[msg.sender]);\n\t\t\n        //Subtract already claimed divs\n    \t_playerShare = _playerShare.sub(claimedShare[msg.sender]);\n        return _playerShare;\n    }\n    \n    // ComputeHarvest\n    // Calculates current ETH cost to claim red harvest\n    // Dutch auction\n    \n    function ComputeHarvest() public view returns(uint256) {\n\n        //Time spent since auction start\n        uint256 _timeLapsed = now.sub(harvestStartTime);\n        \n        //Make sure we're not beyond the end point\n        if(_timeLapsed > HARVEST_DURATION) {\n            _timeLapsed = HARVEST_DURATION;\n        }\n        \n        //Get the square root of timeLapsed\n        _timeLapsed = ComputeSquare(_timeLapsed);\n        \n        //Price differential between start and end of auction\n        uint256 _priceChange = harvestStartCost.sub(HARVEST_MIN_COST);\n        \n        //Multiply priceChange by timeLapsed root then divide by end root\n        uint256 _harvestFactor = _priceChange.mul(_timeLapsed).div(HARVEST_DUR_ROOT);\n        \n        //Subtract result to starting price to get current price\n        return harvestStartCost.sub(_harvestFactor);\n    }\n    \n    // ComputeSquare\n    // Approximate square root\n    \n    function ComputeSquare(uint256 base) public pure returns (uint256 squareRoot) {\n        uint256 z = (base + 1) / 2;\n        squareRoot = base;\n        while (z < squareRoot) {\n            squareRoot = z;\n            z = (base / z + z) / 2;\n        }\n    }\n    \n    // ComputeSell\n\t// Calculates ether value for a given amount of eggs being sold\n\t// ETH = (eggs / (eggs + marketeggs)) * eggpot / 2\n\t// A sale can never give more than half of the eggpot\n    \n    function ComputeSell(uint256 eggspent) public view returns(uint256) {\n        uint256 _eggPool = eggspent.add(marketEgg);\n        uint256 _eggFactor = eggspent.mul(eggPot).div(_eggPool);\n        return _eggFactor.div(2);\n    }\n    \n    // ComputeBuy\n\t// Calculates number of eggs bought for a given amount of ether\n    // Eggs bought = ETH spent / (ETH spent + eggpot) * marketegg\n    // No more than 20% of the supply can be bought at once\n    \n    function ComputeBuy(uint256 ethspent) public view returns(uint256) {\n        uint256 _ethPool = ethspent.add(eggPot);\n        uint256 _ethFactor = ethspent.mul(marketEgg).div(_ethPool);\n        uint256 _maxBuy = marketEgg.div(5);\n        if(_ethFactor > _maxBuy) {\n            _ethFactor = _maxBuy;\n        }\n        return _ethFactor;\n    }\n    \n    // ComputeMyEgg\n    // Returns eggs produced since last hatch or sacrifice\n\t// Egg amount can never be above current snail count\n    \n    function ComputeMyEgg(address adr) public view returns(uint256) {\n        uint256 _eggs = now.sub(lastHatch[adr]);\n        _eggs = _eggs.mul(hatcherySnail[adr]).div(TIME_TO_HATCH_1SNAIL);\n        if (_eggs > hatcherySnail[adr]) {\n            _eggs = hatcherySnail[adr];\n        }\n        _eggs = _eggs.add(claimedEgg[adr]);\n        return _eggs;\n    }\n\n    // Gets\n    \n    function GetSnail(address adr) public view returns(uint256) {\n        return hatcherySnail[adr];\n    }\n    \n    function GetAcorn(address adr) public view returns(uint256) {\n        return acorn[adr];\n    }\n\t\n\tfunction GetProd(address adr) public view returns(uint256) {\n\t\treturn prodBoost[adr];\n\t}\n    \n    function GetMyEgg() public view returns(uint256) {\n        return ComputeMyEgg(msg.sender);\n    }\n\t\n\tfunction GetMyBalance() public view returns(uint256) {\n\t    return playerBalance[msg.sender];\n\t}\n\t\n\tfunction GetRed(address adr) public view returns(uint256) {\n\t    return redEgg[adr];\n\t}\n\t\n\tfunction GetLettuce(address adr) public view returns(bool) {\n\t    return hasLettuce[adr];\n\t}\n\t\n\tfunction GetCarrot(address adr) public view returns(uint256) {\n\t    return gotCarrot[adr];\n\t}\n\t\n\tfunction GetSlug(address adr) public view returns(bool) {\n\t    return hasSlug[adr];\n\t}\n\t\n\tfunction GetMyRound() public view returns(uint256) {\n\t    return playerRound[msg.sender];\n\t}\n}\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}",
  "abi": "[{\"constant\":true,\"inputs\":[],\"name\":\"ACORN_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LETTUCE_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPIDER_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetAcorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gotCarrot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeHarvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetRed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ClaimAcornShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"JoinRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyStartingSnail\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcherySnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasSlug\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divPerAcorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_redAmount\",\"type\":\"uint256\"}],\"name\":\"UseRedEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARVEST_MIN_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStartingSnail\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"ComputeSquare\",\"outputs\":[{\"name\":\"squareRoot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FundTree\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"ComputeAcornBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"redEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeAcornCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TADPOLE_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggspent\",\"type\":\"uint256\"}],\"name\":\"ComputeSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetSnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SNAILTHRONE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PayThrone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACORN_MULT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputeMyEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"acorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FindLettuce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SellEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetLettuce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSpiderQueen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyEgg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetProd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SQUIRREL_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_DOWNTIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GrabRedHarvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HATCHING_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetSlug\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailmasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SNAIL_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSpiderOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SLUG_MIN_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eggPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"HatchEgg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FROGKING_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BeginRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeTadpolePrince\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SNAILMASTER_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"prodBoost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FindCarrot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestStartCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SNAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeMyShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSnailmaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARVEST_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tadpoleReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thronePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethspent\",\"type\":\"uint256\"}],\"name\":\"ComputeBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAcorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spiderReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_TO_HATCH_1SNAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CARROT_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSquirrelDuke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetCarrot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasLettuce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRoundStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARVEST_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSnailmaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARVEST_DUR_ROOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lettuceReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FindSlug\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"squirrelReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSquirrelOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTadpoleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"acorns\",\"type\":\"uint256\"}],\"name\":\"FundedTree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"acorns\",\"type\":\"uint256\"}],\"name\":\"ClaimedShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"BecameMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WithdrewBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snails\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hatchery\",\"type\":\"uint256\"}],\"name\":\"Hatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"SoldEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playereggs\",\"type\":\"uint256\"}],\"name\":\"BoughtEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"StartedSnailing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"spiderreq\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hatchery\",\"type\":\"uint256\"}],\"name\":\"BecameQueen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"squirrelreq\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerreds\",\"type\":\"uint256\"}],\"name\":\"BecameDuke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tadpolereq\",\"type\":\"uint256\"}],\"name\":\"BecamePrince\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundwinner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WonRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"BeganRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerreds\",\"type\":\"uint256\"}],\"name\":\"JoinedRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerreds\",\"type\":\"uint256\"}],\"name\":\"GrabbedHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snails\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hatchery\",\"type\":\"uint256\"}],\"name\":\"UsedRed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snails\",\"type\":\"uint256\"}],\"name\":\"FoundSlug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lettucereq\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerreds\",\"type\":\"uint256\"}],\"name\":\"FoundLettuce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"FoundCarrot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"PaidThrone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BoostedPot\",\"type\":\"event\"}]",
  "bytecode": ""
}