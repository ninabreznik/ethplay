{
  "address": "0x07597255910a51509ca469568b048f2597e72504",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "Uptrennd Token",
  "contractName": "Uptrennd",
  "compilerVersion": "v0.4.21+commit.dfe3193c",
  "optimization": false,
  "runs": "0",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-25\n*/\n\npragma solidity ^0.4.21;\n\n//Decalre all functions to use in Token Smart Contract\ncontract EIP20Interface {\n    \n    /// total amount of tokens\n    uint256 public totalSupply;\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n\n    // solhint-disable-next-line no-simple-event-func-name\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n//Main Token Code Starts from here\ncontract Uptrennd is EIP20Interface {\n    \n    \n    //Code To Set onlyOwner\n    address public owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n        modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    //Code to Transfer the Ownership\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        uint _value = balances[msg.sender];\n        balances[msg.sender] -= _value;\n        balances[newOwner] += _value;\n        emit Transfer(msg.sender, newOwner, _value);\n    }\n\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public TokenPrice;\n\n    string public name;                   \n    uint256 public decimals;                \n    string public symbol;                 \n\n    //function to depoly the smart contract with functionality\n    function Uptrennd(\n        uint256 _initialAmount,\n        string _tokenName,\n        uint256 _decimalUnits,\n        string _tokenSymbol,\n        uint256 _price\n    ) public {\n        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n        totalSupply = _initialAmount;                        // Update total supply\n        name = _tokenName;                                   // Set the name for display purposes\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n        owner = msg.sender;\n        TokenPrice = _price;\n    }\n    \n    //Funtion to Set The Token Price\n    function setPrice(uint256 _price) onlyOwner public returns(bool success){\n        TokenPrice =  _price;\n        return true;\n    }\n\n    //Transfer Function for the Tokens!\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value); \n        return true;\n    }\n    \n    //User can purchase token using this method\n    function purchase(address _to, uint256 _value) public payable returns (bool success) {\n        uint amount = (msg.value * 1000000000000000000 ) / TokenPrice;\n        require(balances[owner] >= amount);\n        balances[owner] -= amount;\n        balances[_to] += amount;\n        emit Transfer(owner, _to, amount); \n        return true;\n    }\n\n    //Admin can give rights to the user to transfer token on his behafe.\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        emit Transfer(_from, _to, _value); \n        return true;\n    }\n\n    //To check the token balcance in his account.\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    //TO approve the user to Transfer the token on admin behafe.\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value); \n        return true;\n    }\n\n    //To allow the user to get the permission to tranfer the token.\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    //Code To Burn the token starts from here.\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        totalSupply = totalSupply - value;\n        balances[account] = balances[account] - value;\n        emit Transfer(account, address(0), value);\n    }\n   \n    //Admin functionality to burn number of tokens.\n    function burn(uint256 value) onlyOwner public {\n        _burn(msg.sender, value);\n    }\n\n    //User functionality to burn the token from his account.\n    function burnFrom(address to, uint256 value) public returns (bool success) {\n        require(balances[msg.sender] >= value);\n        balances[msg.sender] -= value;\n        emit Transfer(msg.sender, address(0), value); //solhint-disable-line indent, no-unused-vars\n        return true;\n    }\n}",
  "bytecode": "606060405234156200001057600080fd5b6040516200171c3803806200171c8339810160405280805190602001909190805182019190602001805190602001909190805182019190602001805190602001909190505084600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550846000819055508360059080519060200190620000b89291906200012c565b50826006819055508160079080519060200190620000d89291906200012c565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004819055505050505050620001db565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200016f57805160ff1916838001178555620001a0565b82800160010185558215620001a0579182015b828111156200019f57825182559160200191906001019062000182565b5b509050620001af9190620001b3565b5090565b620001d891905b80821115620001d4576000816000905550600101620001ba565b5090565b90565b61153180620001eb6000396000f3006060604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100eb578063095ea7b314610179578063141ddca7146101d357806318160ddd146101fc57806323b872dd14610225578063313ce5671461029e57806342966c68146102c757806370a08231146102ea57806379cc6790146103375780638da5cb5b146103915780638de93222146103e657806391b7f5ed1461043557806395d89b4114610470578063a9059cbb146104fe578063dd62ed3e14610558578063f2fde38b146105c4575b600080fd5b34156100f657600080fd5b6100fe6105fd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013e578082015181840152602081019050610123565b50505050905090810190601f16801561016b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561018457600080fd5b6101b9600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061069b565b604051808215151515815260200191505060405180910390f35b34156101de57600080fd5b6101e66107db565b6040518082815260200191505060405180910390f35b341561020757600080fd5b61020f6107e1565b6040518082815260200191505060405180910390f35b341561023057600080fd5b610284600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506107e7565b604051808215151515815260200191505060405180910390f35b34156102a957600080fd5b6102b1610a81565b6040518082815260200191505060405180910390f35b34156102d257600080fd5b6102e86004808035906020019091905050610a87565b005b34156102f557600080fd5b610321600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610af0565b6040518082815260200191505060405180910390f35b341561034257600080fd5b610377600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b39565b604051808215151515815260200191505060405180910390f35b341561039c57600080fd5b6103a4610c46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61041b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610c6c565b604051808215151515815260200191505060405180910390f35b341561044057600080fd5b6104566004808035906020019091905050610e47565b604051808215151515815260200191505060405180910390f35b341561047b57600080fd5b610483610eb5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104c35780820151818401526020810190506104a8565b50505050905090810190601f1680156104f05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561050957600080fd5b61053e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f53565b604051808215151515815260200191505060405180910390f35b341561056357600080fd5b6105ae600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110ac565b6040518082815260200191505060405180910390f35b34156105cf57600080fd5b6105fb600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611133565b005b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106935780601f1061066857610100808354040283529160200191610693565b820191906000526020600020905b81548152906001019060200180831161067657829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156106eb57600080fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60045481565b60005481565b600080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156108b85750828110155b15156108c357600080fd5b82600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811015610a105782600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ae357600080fd5b610aed33826113cf565b50565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610b8957600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600454670de0b6b3a76400003402811515610c8657fe5b0490508060026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610cf957600080fd5b8060026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3600191505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ea557600080fd5b8160048190555060019050919050565b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f4b5780601f10610f2057610100808354040283529160200191610f4b565b820191906000526020600020905b815481529060010190602001808311610f2e57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610fa357600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156111cd57600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a381600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561140b57600080fd5b806000540360008190555080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350505600a165627a7a7230582016f6ea2025a88320b398e6e300b845c96c8cffae93fff9e9bb7dc7e8300425b000290000000000000000000000000000000000000000204fce5e3e2502611000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000001476b081e8000000000000000000000000000000000000000000000000000000000000000000855707472656e6e6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033155500000000000000000000000000000000000000000000000000000000000",
  "constructorArguments": "0000000000000000000000000000000000000000204fce5e3e2502611000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000001476b081e8000000000000000000000000000000000000000000000000000000000000000000855707472656e6e6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000033155500000000000000000000000000000000000000000000000000000000000"
}