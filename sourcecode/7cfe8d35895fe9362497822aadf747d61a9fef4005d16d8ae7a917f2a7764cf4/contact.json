{
  "address": "0x9f7002b797ed7170d7e5c7326781bc0dd83055b9",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "CAPZ",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-10\n*/\n\npragma solidity ^0.5.8;\n\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n}\n\n\ninterface IERC20 {\n  function balanceOf(address owner) external view returns (uint256 balance);\n  function transfer(address to, uint256 value) external returns (bool success);\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n  function approve(address spender, uint256 value) external returns (bool success);\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/// @dev This is taken from https://github.com/OpenZeppelin/openzeppelin-solidity project.\n/// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/67bca857eedf99bf44a4b6a0fc5b5ed553135316/contracts/token/ERC20/ERC20.sol\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  string public constant name = \"CAPZ\";\n  string public constant symbol = \"CAPZ\";\n  uint8 public constant decimals = 18;\n\n  /// @dev Total number of tokens in existence.\n  uint256 public totalSupply;\n\n  mapping(address => uint256) internal balances;\n  mapping(address => mapping(address => uint256)) internal allowed;\n\n  /// @dev Gets the balance of the specified address.\n  /// @param owner The address to query the balance of.\n  /// @return A uint256 representing the amount owned by the passed address.\n  function balanceOf(address owner) external view returns (uint256) {\n    return balances[owner];\n  }\n\n  /// @dev Transfer token to a specified address.\n  /// @param to The address to transfer to.\n  /// @param value The amount to be transferred.\n  function transfer(address to, uint256 value) external returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /// @dev Transfer tokens from one address to another.\n  /// Note that while this function emits an Approval event, this is not required as per the specification,\n  /// and other compliant implementations may not emit the event.\n  /// @param from The address which you want to send tokens from\n  /// @param to The address which you want to transfer to\n  /// @param value The amount of tokens to be transferred\n  function transferFrom(address from, address to, uint256 value) external returns (bool) {\n    _transfer(from, to, value);\n    _approve(from, msg.sender, allowed[from][msg.sender].sub(value));\n    return true;\n  }\n\n  /// @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n  /// Beware that changing an allowance with this method brings the risk that someone may use both the old\n  /// and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n  /// race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n  /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n  /// @param spender The address which will spend the funds.\n  /// @param value The amount of tokens to be spent.\n  function approve(address spender, uint256 value) external returns (bool) {\n    _approve(msg.sender, spender, value);\n    return true;\n  }\n\n  /// @dev Function to check the amount of tokens that an owner allowed to a spender.\n  /// @param owner The address which owns the funds.\n  /// @param spender The address which will spend the funds.\n  /// @return A uint256 specifying the amount of tokens still available for the spender.\n  function allowance(address owner, address spender) external view returns (uint256) {\n    return allowed[owner][spender];\n  }\n\n  /// @dev Internal function that transfer token for a specified addresses.\n  /// @param from The address to transfer from.\n  /// @param to The address to transfer to.\n  /// @param value The amount to be transferred.\n  function _transfer(address from, address to, uint256 value) internal {\n    require(address(this) != to);\n    require(address(0) != to);\n\n    balances[from] = balances[from].sub(value);\n    balances[to] = balances[to].add(value);\n\n    emit Transfer(from, to, value);\n  }\n\n  /// @dev Approve an address to spend another addresses' tokens.\n  /// @param owner The address that owns the tokens.\n  /// @param spender The address that will spend the tokens.\n  /// @param value The number of tokens that can be spent.\n  function _approve(address owner, address spender, uint256 value) internal {\n    require(address(0) != owner);\n    require(address(0) != spender);\n\n    allowed[owner][spender] = value;\n\n    emit Approval(owner, spender, value);\n  }\n\n  /// @dev Internal function that mints an amount of the token and assigns it to\n  /// an account. This encapsulates the modification of balances such that the\n  /// proper events are emitted.\n  /// @param account The account that will receive the created tokens.\n  /// @param value The amount that will be created.\n  function _mint(address account, uint256 value) internal {\n    require(address(0) != account);\n\n    totalSupply = totalSupply.add(value);\n    balances[account] = balances[account].add(value);\n\n    emit Transfer(address(0), account, value);\n  }\n}\n\n\n/// @notice The CAPZ contract has a finite date span and a financial\n/// goal set in wei. While this contract is in force, users may buy\n/// tokens. After certain conditions are met, token holders may either\n/// refund the paid amount or claim the tokens in the form of points\n/// with us. The availability of each operation depends on the result\n/// of this contract. During the period that the contract is in force\n/// (w.r.t. the dates and goals) the funds are locked and can only be\n/// unlocked when status is GoalReached or GoalNotReached.\ncontract CAPZ is ERC20 {\n  using SafeMath for uint256;\n\n  /// @dev This is us. We use it internally to allow/deny usage of\n  /// admininstrative functions.\n  address internal owner;\n\n  /// @notice The current wei amount that this contract has\n  /// received. It also represents the number of tokens that have been\n  /// granted.\n  uint256 public balanceInWei;\n\n  /// @notice The soft limit that we check against for success at the\n  /// end of this contract. These limits may change over the course of\n  /// this crowdsale contract as we want to adjust these values to\n  /// match a certain amount in fiat currency.\n  uint256 public goalLimitMinInWei;\n\n  /// @title Same as goalLimitMinInWei but defines the hard limit. In\n  /// the event this amount is received we do not wait for the end\n  /// date to collect received funds and close the contract.\n  uint256 public goalLimitMaxInWei;\n\n  /// @notice The date (unix timestamp) which this contract terminates.\n  uint256 public endOn;\n\n  /// @notice The date (unix timestamp) which this contract starts.\n  uint256 public startOn;\n\n  /// @dev Internal struct that tracks the refunds made so far.\n  mapping(address => uint256) internal refunds;\n\n  /// @title The current status of this contract.\n  enum ICOStatus {\n    /// @notice The contract is not yet in force.\n    NotOpen,\n    /// @notice The contract is in force, accepting payments and\n    /// granting tokens.\n    Open,\n    /// @notice The contract has terminated with success and the owner\n    /// of this contract may withdraw the amount in wei. The contract\n    /// may terminate prior the endOn date on the event that the\n    /// goalLimitMaxInWei has been reached.\n    GoalReached,\n    /// @notice The contract has terminated and the goal not been\n    /// reached. Token holders may refund the invested value.\n    GoalNotReached\n  }\n\n  constructor (uint256 _startOn, uint256 _endOn, uint256 _goalLimitMinInWei, uint256 _goalLimitMaxInWei) public {\n    require(_startOn < _endOn);\n    require(_goalLimitMinInWei < _goalLimitMaxInWei);\n\n    owner = msg.sender;\n    endOn = _endOn;\n    startOn = _startOn;\n    goalLimitMaxInWei = _goalLimitMaxInWei;\n    goalLimitMinInWei = _goalLimitMinInWei;\n  }\n\n  function () external payable {\n    require(0 == msg.data.length);\n\n    buyTokens();\n  }\n\n  /// @notice The function that allow users to buy tokens. This\n  /// function shall grant the amount received in wei to tokens. As\n  /// this is an standard ERC20 contract you may trade these tokens at\n  /// any time if desirable. At the end of the contract, you may\n  /// either claim these tokens or refund the amount paid. Refer to\n  /// these two functions for more information about the rules.\n  /// @dev Receives wei and _mint the received amount to the\n  /// msg.sender. Emits a Transfer event, using address(0) as the\n  /// source address. It also increases the totalSupply and balanceInWei.\n  function buyTokens() public whenOpen payable {\n    uint256 receivedAmount = msg.value;\n    address beneficiary = msg.sender;\n    uint256 newBalance = balanceInWei.add(receivedAmount);\n    uint256 newRefundBalance = refunds[beneficiary].add(receivedAmount);\n\n    _mint(beneficiary, receivedAmount);\n    refunds[beneficiary] = newRefundBalance;\n    balanceInWei = newBalance;\n  }\n\n  /// @notice In the event the contract has terminated [status is\n  /// GoalNotReached] and the goal has not been reached users may\n  /// refund the amount paid [disregarding gas expenses].\n  function escrowRefund() external whenGoalNotReached {\n    uint256 amount = refunds[msg.sender];\n\n    require(address(0) != msg.sender);\n    require(0 < amount);\n\n    refunds[msg.sender] = 0;\n    msg.sender.transfer(amount);\n  }\n\n  /// @notice This is an administrative function and can only be\n  /// called by the contract's owner when the status is\n  /// GoalReached. If these conditions are met the balance is\n  /// transferred to the contract's owner.\n  function escrowWithdraw() external onlyOwner whenGoalReached {\n    uint256 amount = address(this).balance;\n\n    require(address(0) != msg.sender);\n    require(0 < amount);\n\n    msg.sender.transfer(amount);\n  }\n\n  /// @notice This function is used in the event the contract's status\n  /// is GoalReached. It allows the user to exchange tokens in\n  /// points. The conversion rate is variable and is not defined in\n  /// this contract.\n  /// @param amount The tokens you want to convert in points.\n  /// @dev Emits the Claim event.\n  function escrowClaim(uint256 amount) external whenGoalReached {\n    _transfer(msg.sender, owner, amount);\n    emit Claim(msg.sender, amount);\n  }\n\n  /// @notice Administrative function that allows the contract's owner\n  /// to change the goals. As the goals are set in fiat currency, this\n  /// mechanism might be used to adjust the goal so that the goal\n  /// won't suffer from severe ETH fluctuations. Notice this function\n  /// can't be used when the status is GoalNotReached or GoalReached.\n  /// @dev Emits the GoalChange event.\n  function alterGoal(uint256 _goalLimitMinInWei, uint256 _goalLimitMaxInWei) external onlyOwner {\n    ICOStatus status = status(block.timestamp);\n\n    require(ICOStatus.GoalReached != status);\n    require(ICOStatus.GoalNotReached != status);\n    require(_goalLimitMinInWei < _goalLimitMaxInWei);\n\n    goalLimitMinInWei = _goalLimitMinInWei;\n    goalLimitMaxInWei = _goalLimitMaxInWei;\n\n    emit GoalChange(_goalLimitMinInWei, _goalLimitMaxInWei);\n  }\n\n  /// @notice Administrative function.\n  function transferOwnership(address newOwner) external onlyOwner {\n    require(address(0) != newOwner);\n    require(address(this) != newOwner);\n\n    owner = newOwner;\n  }\n\n  /// @notice Returns the current status of the contract. All functions\n  /// depend on this to enforce invariants, like allowing/denying\n  /// refund or withdraw. Please refer to ICOStatus enum documentation\n  /// for more information about each status in detail.\n  function status() external view returns (ICOStatus) {\n    return status(block.timestamp);\n  }\n\n  /// @dev internal function that receives a timestamp instead of\n  /// reading from block.timestamp.\n  function status(uint256 timestamp) internal view returns (ICOStatus) {\n    if (timestamp < startOn) {\n      return ICOStatus.NotOpen;\n    } else if (timestamp < endOn && balanceInWei < goalLimitMaxInWei) {\n      return ICOStatus.Open;\n    } else if (balanceInWei >= goalLimitMinInWei) {\n      return ICOStatus.GoalReached;\n    } else {\n      return ICOStatus.GoalNotReached;\n    }\n  }\n\n  /// @notice Event emitted when the contract's owner has adjusted the\n  /// goal. Refer to alterGoal function for more information.\n  event GoalChange(uint256 goalLimitMinInWei, uint256 goalLimitMaxInWei);\n\n  /// @notice Event emitted when the user has exchanged tokens per\n  /// points.\n  event Claim(address beneficiary, uint256 value);\n\n  modifier onlyOwner() {\n    require(owner == msg.sender);\n    _;\n  }\n\n  modifier whenOpen() {\n    require(ICOStatus.Open == status(block.timestamp));\n    _;\n  }\n\n  modifier whenGoalReached() {\n    require(ICOStatus.GoalReached == status(block.timestamp));\n    _;\n  }\n\n  modifier whenGoalNotReached() {\n    require(ICOStatus.GoalNotReached == status(block.timestamp));\n    _;\n  }\n}",
  "bytecode": "608060405234801561001057600080fd5b50604051608080610c2f8339810180604052608081101561003057600080fd5b508051602082015160408301516060909301519192909182841061005357600080fd5b80821061005f57600080fd5b600380546001600160a01b03191633179055600792909255600892909255600655600555610b9d806100926000396000f3fe6080604052600436106101295760003560e01c80638f1f102d116100ab578063b26ce8051161006f578063b26ce805146103fd578063ceeac99214610412578063d0febe4c14610134578063dd62ed3e14610427578063e2d5606014610462578063f2fde38b1461047757610129565b80638f1f102d1461038557806395d89b41146101655780639872c88c1461039a578063a9059cbb146103af578063adbbfc10146103e857610129565b8063200d2ed2116100f2578063200d2ed21461028157806323b872dd146102ba578063313ce567146102fd5780636cf6250f1461032857806370a082311461035257610129565b806205e9651461013e57806306fdde0314610165578063095ea7b3146101ef5780630ae1cf111461023c57806318160ddd1461026c575b361561013457600080fd5b61013c6104aa565b005b34801561014a57600080fd5b50610153610540565b60408051918252519081900360200190f35b34801561017157600080fd5b5061017a610546565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b457818101518382015260200161019c565b50505050905090810190601f1680156101e15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101fb57600080fd5b506102286004803603604081101561021257600080fd5b506001600160a01b038135169060200135610569565b604080519115158252519081900360200190f35b34801561024857600080fd5b5061013c6004803603604081101561025f57600080fd5b5080359060200135610580565b34801561027857600080fd5b5061015361062c565b34801561028d57600080fd5b50610296610632565b604051808260038111156102a657fe5b60ff16815260200191505060405180910390f35b3480156102c657600080fd5b50610228600480360360608110156102dd57600080fd5b506001600160a01b03813581169160208101359091169060400135610642565b34801561030957600080fd5b50610312610699565b6040805160ff9092168252519081900360200190f35b34801561033457600080fd5b5061013c6004803603602081101561034b57600080fd5b503561069e565b34801561035e57600080fd5b506101536004803603602081101561037557600080fd5b50356001600160a01b0316610714565b34801561039157600080fd5b50610153610733565b3480156103a657600080fd5b5061013c610739565b3480156103bb57600080fd5b50610228600480360360408110156103d257600080fd5b506001600160a01b0381351690602001356107ba565b3480156103f457600080fd5b506101536107c7565b34801561040957600080fd5b5061013c6107cd565b34801561041e57600080fd5b5061015361084f565b34801561043357600080fd5b506101536004803603604081101561044a57600080fd5b506001600160a01b0381358116916020013516610855565b34801561046e57600080fd5b50610153610880565b34801561048357600080fd5b5061013c6004803603602081101561049a57600080fd5b50356001600160a01b0316610886565b6104b3426108e8565b60038111156104be57fe5b6001146104ca57600080fd5b600454349033906000906104e4908463ffffffff61093816565b6001600160a01b03831660009081526009602052604081205491925090610511908563ffffffff61093816565b905061051d8385610948565b6001600160a01b0390921660009081526009602052604090209190915560045550565b60075481565b604051806040016040528060048152602001600160e11b6321a0a82d0281525081565b60006105763384846109f1565b5060015b92915050565b6003546001600160a01b0316331461059757600080fd5b60006105a2426108e8565b90508060038111156105b057fe5b600214156105bd57600080fd5b8060038111156105c957fe5b600314156105d657600080fd5b8183106105e257600080fd5b60058390556006829055604080518481526020810184905281517f722465e0401cc4bbbb7755d18208623af4bd69c41c36456678ecd89c207881ad929181900390910190a1505050565b60005481565b600061063d426108e8565b905090565b600061064f848484610a79565b6001600160a01b03841660009081526002602090815260408083203380855292529091205461068f91869161068a908663ffffffff610b5c16565b6109f1565b5060019392505050565b601281565b6106a7426108e8565b60038111156106b257fe5b6002146106be57600080fd5b6003546106d69033906001600160a01b031683610a79565b604080513381526020810183905281517f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d4929181900390910190a150565b6001600160a01b0381166000908152600160205260409020545b919050565b60055481565b6003546001600160a01b0316331461075057600080fd5b610759426108e8565b600381111561076457fe5b60021461077057600080fd5b30313361077c57600080fd5b8060001061078957600080fd5b604051339082156108fc029083906000818181858888f193505050501580156107b6573d6000803e3d6000fd5b5050565b6000610576338484610a79565b60085481565b6107d6426108e8565b60038111156107e157fe5b6003146107ed57600080fd5b336000818152600960205260409020549061080757600080fd5b8060001061081457600080fd5b336000818152600960205260408082208290555183156108fc0291849190818181858888f193505050501580156107b6573d6000803e3d6000fd5b60065481565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b60045481565b6003546001600160a01b0316331461089d57600080fd5b6001600160a01b0381166108b057600080fd5b306001600160a01b03821614156108c657600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006008548210156108fc5750600061072e565b600754821080156109105750600654600454105b1561091d5750600161072e565b600554600454106109305750600261072e565b50600361072e565b8181018281101561057a57600080fd5b6001600160a01b03821661095b57600080fd5b60005461096e908263ffffffff61093816565b60009081556001600160a01b038316815260016020526040902054610999908263ffffffff61093816565b6001600160a01b03831660008181526001602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b038316610a0457600080fd5b6001600160a01b038216610a1757600080fd5b6001600160a01b03808416600081815260026020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b306001600160a01b0383161415610a8f57600080fd5b6001600160a01b038216610aa257600080fd5b6001600160a01b038316600090815260016020526040902054610acb908263ffffffff610b5c16565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610b00908263ffffffff61093816565b6001600160a01b0380841660008181526001602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115610b6b57600080fd5b5090039056fea165627a7a72305820c813660ededb7f35dd37929091d590e9580f39cde95ad67977b3d0c16b7b057f0029000000000000000000000000000000000000000000000000000000005cdabbd0000000000000000000000000000000000000000000000000000000005d5162d00000000000000000000000000000000000000000000000ccab92f10c8a8780000000000000000000000000000000000000000000000028ffe87c47beb1535800",
  "constructorArguments": "000000000000000000000000000000000000000000000000000000005cdabbd0000000000000000000000000000000000000000000000000000000005d5162d00000000000000000000000000000000000000000000000ccab92f10c8a8780000000000000000000000000000000000000000000000028ffe87c47beb1535800"
}