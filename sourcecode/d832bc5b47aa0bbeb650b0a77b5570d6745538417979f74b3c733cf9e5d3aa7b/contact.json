{
  "address": "0x9c09ff2c817fe87701b34717c8a6c2a163679c6d",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Tank",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-10-22\n*/\n\npragma solidity ^0.4.24;\n  \n\ncontract owned {\n    constructor() public { owner = msg.sender; }\n\n    address owner;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n}\n\n\ncontract ERC20 {\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n    function transfer(address to, uint256 tokens) public returns (bool success);\n}\n\n\ncontract Tank is owned {\n\n    function () payable public {}\n\n    function withdrawEther(address toAddress, uint256 amount) public onlyOwner {\n        toAddress.transfer(amount);\n    }\n\n    function withdrawToken(address token, address toAddress, uint256 amount) public onlyOwner {\n        ERC20(token).transfer(toAddress, amount);\n    }\n\n    function withdrawInBatch(address[] tokenList, address[] toAddressList, uint256[] amountList) public onlyOwner {\n        require(tokenList.length == toAddressList.length);\n        require(toAddressList.length == amountList.length);\n\n        for (uint i = 0; i < toAddressList.length; i++) {\n            if (tokenList[i] == 0) {\n                toAddressList[i].transfer(amountList[i]);\n            } else {\n                ERC20(tokenList[i]).transfer(toAddressList[i], amountList[i]);\n            }\n        }\n    }\n\n    function withdrawEtherInBatch(address[] toAddressList, uint256[] amountList) public onlyOwner {\n        require(toAddressList.length == amountList.length);\n\n        for (uint i = 0; i < toAddressList.length; i++) {\n            toAddressList[i].transfer(amountList[i]);\n        }\n    }\n}",
  "bytecode": "608060405260008054600160a060020a0319163317905561056d806100256000396000f3006080604052600436106100485763ffffffff60e060020a60003504166301e33667811461004a578063247956f11461007457806348de0cdc14610102578063522f6815146101c9575b005b34801561005657600080fd5b50610048600160a060020a03600435811690602435166044356101ed565b34801561008057600080fd5b506040805160206004803580820135838102808601850190965280855261004895369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506102989650505050505050565b34801561010e57600080fd5b506040805160206004803580820135838102808601850190965280855261004895369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061033d9650505050505050565b3480156101d557600080fd5b50610048600160a060020a03600435166024356104f4565b600054600160a060020a0316331461020457600080fd5b82600160a060020a031663a9059cbb83836040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b15801561026757600080fd5b505af115801561027b573d6000803e3d6000fd5b505050506040513d602081101561029157600080fd5b5050505050565b60008054600160a060020a031633146102b057600080fd5b81518351146102be57600080fd5b5060005b82518110156103385782818151811015156102d957fe5b90602001906020020151600160a060020a03166108fc83838151811015156102fd57fe5b602090810290910101516040518115909202916000818181858888f1935050505015801561032f573d6000803e3d6000fd5b506001016102c2565b505050565b60008054600160a060020a0316331461035557600080fd5b825184511461036357600080fd5b815183511461037157600080fd5b5060005b82518110156104ee57838181518110151561038c57fe5b90602001906020020151600160a060020a0316600014156104115782818151811015156103b557fe5b90602001906020020151600160a060020a03166108fc83838151811015156103d957fe5b602090810290910101516040518115909202916000818181858888f1935050505015801561040b573d6000803e3d6000fd5b506104e6565b838181518110151561041f57fe5b90602001906020020151600160a060020a031663a9059cbb848381518110151561044557fe5b90602001906020020151848481518110151561045d57fe5b906020019060200201516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b1580156104b957600080fd5b505af11580156104cd573d6000803e3d6000fd5b505050506040513d60208110156104e357600080fd5b50505b600101610375565b50505050565b600054600160a060020a0316331461050b57600080fd5b604051600160a060020a0383169082156108fc029083906000818181858888f19350505050158015610338573d6000803e3d6000fd00a165627a7a72305820ee2e28ff8479b59c8ca53414e0fdab69e0cf5a653afdd21b2907c6528d400efe0029"
}