{
  "address": "0x6D25cA31aA2BE914d3d1181fAA905A9C226f2857",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "KACHA",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-07\n*/\n\npragma solidity >= 0.4.24 < 0.6.0;\n\n/**\n * @title KACHA token - Issued by KACHA.\n * created by [emailÂ protected]\n */\n\n\n/**\n * @title ERC20 Standard Interface\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function transfer(address to, uint256 value) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Token implementation\n */\ncontract KACHA is IERC20 {\n    string public name = \"KACHA Token\";\n    string public symbol = \"KACHA\";\n    uint8 public decimals = 18;\n    \n    uint256 _totalSupply;\n    mapping(address => uint256) balances;\n\n    address public owner;\n\n\n    modifier isOwner {\n        require(owner == msg.sender);\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n\n        _totalSupply    = toWei(2000000000);  //2,000,000,000\n\n\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, balances[owner]);\n        \n    }\n    \n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address who) public view returns (uint256) {\n        return balances[who];\n    }\n    \n    function transfer(address to, uint256 value) public returns (bool success) {\n        require(msg.sender != to);\n        //require(msg.sender != owner);   // owner is not free to transfer\n        require(to != owner);\n        require(value > 0);\n        \n        require( balances[msg.sender] >= value );\n        require( balances[to] + value >= balances[to] );    // prevent overflow\n\n\n        if (to == address(0) || to == address(0x1) || to == address(0xdead)) {\n             _totalSupply -= value;\n        }\n\n\n        balances[msg.sender] -= value;\n        balances[to] += value;\n\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    function burnCoins(uint256 value) public {\n        require(msg.sender != owner);   // owner can't burn any coin\n        require(balances[msg.sender] >= value);\n        require(_totalSupply >= value);\n        \n        balances[msg.sender] -= value;\n        _totalSupply -= value;\n\n        emit Transfer(msg.sender, address(0), value);\n    }\n\n    function balanceOfOwner() public view returns (uint256) {\n        return balances[owner];\n    }\n    \n    function toWei(uint256 value) private constant returns (uint256) {\n        return value * (10 ** uint256(decimals));\n    }\n}",
  "bytecode": "60806040526040805190810160405280600b81526020017f4b4143484120546f6b656e0000000000000000000000000000000000000000008152506000908051906020019061004f92919061029f565b506040805190810160405280600581526020017f4b414348410000000000000000000000000000000000000000000000000000008152506001908051906020019061009b92919061029f565b506012600260006101000a81548160ff021916908360ff1602179055503480156100c457600080fd5b5033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610122637735940061027e640100000000026401000000009004565b60038190555060035460046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3610344565b6000600260009054906101000a900460ff1660ff16600a0a82029050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102e057805160ff191683800117855561030e565b8280016001018555821561030e579182015b8281111561030d5782518255916020019190600101906102f2565b5b50905061031b919061031f565b5090565b61034191905b8082111561033d576000816000905550600101610325565b5090565b90565b610aa8806103536000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305a8749d1461009e57806306fdde03146100cb57806318160ddd1461015b578063313ce567146101865780634975d202146101b757806370a08231146101e25780638da5cb5b1461023957806395d89b4114610290578063a9059cbb14610320575b600080fd5b3480156100aa57600080fd5b506100c960048036038101908080359060200190929190505050610385565b005b3480156100d757600080fd5b506100e0610507565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610120578082015181840152602081019050610105565b50505050905090810190601f16801561014d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016757600080fd5b506101706105a5565b6040518082815260200191505060405180910390f35b34801561019257600080fd5b5061019b6105af565b604051808260ff1660ff16815260200191505060405180910390f35b3480156101c357600080fd5b506101cc6105c2565b6040518082815260200191505060405180910390f35b3480156101ee57600080fd5b50610223600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061062b565b6040518082815260200191505060405180910390f35b34801561024557600080fd5b5061024e610674565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029c57600080fd5b506102a561069a565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e55780820151818401526020810190506102ca565b50505050905090810190601f1680156103125780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032c57600080fd5b5061036b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610738565b604051808215151515815260200191505060405180910390f35b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515156103e257600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561043057600080fd5b806003541015151561044157600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600360008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a350565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561059d5780601f106105725761010080835404028352916020019161059d565b820191906000526020600020905b81548152906001019060200180831161058057829003601f168201915b505050505081565b6000600354905090565b600260009054906101000a900460ff1681565b600060046000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107305780601f1061070557610100808354040283529160200191610730565b820191906000526020600020905b81548152906001019060200180831161071357829003601f168201915b505050505081565b60008273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415151561077557600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156107d257600080fd5b6000821115156107e157600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015151561082f57600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401101515156108be57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806109255750600173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b8061095d575061dead73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561097357816003600082825403925050819055505b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a723058204326d86a33000eba50a865b03c2e5ebf79269c6b704c869509cbb0e1608be6b60029"
}