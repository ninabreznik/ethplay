{
  "address": "0x8888882056160e5ff4a0f26607d4a05bc506ca8c",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "Lottery",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-01-12\n*/\n\npragma solidity ^0.4.24;\n\n/*\n*   gibmireinbier\n*   0xA4a799086aE18D7db6C4b57f496B081b44888888\n*   [emailÂ protected]\n*/\n\ninterface F2mInterface {\n    function joinNetwork(address[6] _contract) public;\n    // one time called\n    function disableRound0() public;\n    function activeBuy() public;\n    // Dividends from all sources (DApps, Donate ...)\n    function pushDividends() public payable;\n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    //function reinvest() public;\n    //function buy() public payable;\n    function buyFor(address _buyer) public payable;\n    function sell(uint256 _tokenAmount) public;\n    function exit() public;\n    function devTeamWithdraw() public returns(uint256);\n    function withdrawFor(address sender) public returns(uint256);\n    function transfer(address _to, uint256 _tokenAmount) public returns(bool);\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    function setAutoBuy() public;\n    /*==========================================\n    =            public FUNCTIONS            =\n    ==========================================*/\n    // function totalEthBalance() public view returns(uint256);\n    function ethBalance(address _address) public view returns(uint256);\n    function myBalance() public view returns(uint256);\n    function myEthBalance() public view returns(uint256);\n\n    function swapToken() public;\n    function setNewToken(address _newTokenAddress) public;\n}\n\ninterface CitizenInterface {\n \n    function joinNetwork(address[6] _contract) public;\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    function devTeamWithdraw() public;\n\n    /*----------  WRITE FUNCTIONS  ----------*/\n    function updateUsername(string _sNewUsername) public;\n    //Sources: Token contract, DApps\n    function pushRefIncome(address _sender) public payable;\n    function withdrawFor(address _sender) public payable returns(uint256);\n    function devTeamReinvest() public returns(uint256);\n\n    /*----------  READ FUNCTIONS  ----------*/\n    function getRefWallet(address _address) public view returns(uint256);\n}\n\ninterface DevTeamInterface {\n    function setF2mAddress(address _address) public;\n    function setLotteryAddress(address _address) public;\n    function setCitizenAddress(address _address) public;\n    function setBankAddress(address _address) public;\n    function setRewardAddress(address _address) public;\n    function setWhitelistAddress(address _address) public;\n\n    function setupNetwork() public;\n}\n\ninterface BankInterface {\n    function joinNetwork(address[6] _contract) public;\n    // Core functions\n    function pushToBank(address _player) public payable;\n}\n\ninterface RewardInterface {\n\n    function mintReward(\n        address _lucker,\n        uint256 curRoundId,\n        uint256 _tNumberFrom,\n        uint256 _tNumberTo,\n        uint256 _value,\n        uint256 _rewardType)\n        public;\n        \n    function joinNetwork(address[6] _contract) public;\n    function pushBounty(uint256 _curRoundId) public payable;\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\nlibrary Helper {\n    using SafeMath for uint256;\n\n    uint256 constant public ZOOM = 1000;\n    uint256 constant public SDIVIDER = 3450000;\n    uint256 constant public PDIVIDER = 3450000;\n    uint256 constant public RDIVIDER = 1580000;\n    // Starting LS price (SLP)\n    uint256 constant public SLP = 0.002 ether;\n    // Starting Added Time (SAT)\n    uint256 constant public SAT = 30; // seconds\n    // Price normalization (PN)\n    uint256 constant public PN = 777;\n    // EarlyIncome base\n    uint256 constant public PBASE = 13;\n    uint256 constant public PMULTI = 26;\n    uint256 constant public LBase = 15;\n\n    uint256 constant public ONE_HOUR = 3600;\n    uint256 constant public ONE_DAY = 24 * ONE_HOUR;\n    //uint256 constant public TIMEOUT0 = 3 * ONE_HOUR;\n    uint256 constant public TIMEOUT1 = 12 * ONE_HOUR;\n    \n    function bytes32ToString (bytes32 data)\n        public\n        pure\n        returns (string) \n    {\n        bytes memory bytesString = new bytes(32);\n        for (uint j=0; j<32; j++) {\n            byte char = byte(bytes32(uint(data) * 2 ** (8 * j)));\n            if (char != 0) {\n                bytesString[j] = char;\n            }\n        }\n        return string(bytesString);\n    }\n    \n    function uintToBytes32(uint256 n)\n        public\n        pure\n        returns (bytes32) \n    {\n        return bytes32(n);\n    }\n    \n    function bytes32ToUint(bytes32 n) \n        public\n        pure\n        returns (uint256) \n    {\n        return uint256(n);\n    }\n    \n    function stringToBytes32(string memory source) \n        public\n        pure\n        returns (bytes32 result) \n    {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n    \n    function stringToUint(string memory source) \n        public\n        pure\n        returns (uint256)\n    {\n        return bytes32ToUint(stringToBytes32(source));\n    }\n    \n    function uintToString(uint256 _uint) \n        public\n        pure\n        returns (string)\n    {\n        return bytes32ToString(uintToBytes32(_uint));\n    }\n\n/*     \n    function getSlice(uint256 begin, uint256 end, string text) public pure returns (string) {\n        bytes memory a = new bytes(end-begin+1);\n        for(uint i = 0; i <= end - begin; i++){\n            a[i] = bytes(text)[i + begin - 1];\n        }\n        return string(a);    \n    }\n */\n    function validUsername(string _username)\n        public\n        pure\n        returns(bool)\n    {\n        uint256 len = bytes(_username).length;\n        // Im Raum [4, 18]\n        if ((len < 4) || (len > 18)) return false;\n        // Letzte Char != ' '\n        if (bytes(_username)[len-1] == 32) return false;\n        // Erste Char != '0'\n        return uint256(bytes(_username)[0]) != 48;\n    }\n\n    // Lottery Helper\n\n    // Seconds added per LT = SAT - ((Current no. of LT + 1) / SDIVIDER)^6\n    function getAddedTime(uint256 _rTicketSum, uint256 _tAmount)\n        public\n        pure\n        returns (uint256)\n    {\n        //Luppe = 10000 = 10^4\n        uint256 base = (_rTicketSum + 1).mul(10000) / SDIVIDER;\n        uint256 expo = base;\n        expo = expo.mul(expo).mul(expo); // ^3\n        expo = expo.mul(expo); // ^6\n        // div 10000^6\n        expo = expo / (10**24);\n\n        if (expo > SAT) return 0;\n        return (SAT - expo).mul(_tAmount);\n    }\n\n    function getNewEndTime(uint256 toAddTime, uint256 slideEndTime, uint256 fixedEndTime)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _slideEndTime = (slideEndTime).add(toAddTime);\n        uint256 timeout = _slideEndTime.sub(block.timestamp);\n        // timeout capped at TIMEOUT1\n        if (timeout > TIMEOUT1) timeout = TIMEOUT1;\n        _slideEndTime = (block.timestamp).add(timeout);\n        // Capped at fixedEndTime\n        if (_slideEndTime > fixedEndTime)  return fixedEndTime;\n        return _slideEndTime;\n    }\n\n    // get random in range [1, _range] with _seed\n    function getRandom(uint256 _seed, uint256 _range)\n        public\n        pure\n        returns(uint256)\n    {\n        if (_range == 0) return _seed;\n        return (_seed % _range) + 1;\n    }\n\n\n    function getEarlyIncomeMul(uint256 _ticketSum)\n        public\n        pure\n        returns(uint256)\n    {\n        // Early-Multiplier = 1 + PBASE / (1 + PMULTI * ((Current No. of LT)/RDIVIDER)^6)\n        uint256 base = _ticketSum * ZOOM / RDIVIDER;\n        uint256 expo = base.mul(base).mul(base); //^3\n        expo = expo.mul(expo) / (ZOOM**6); //^6\n        return (1 + PBASE / (1 + expo.mul(PMULTI)));\n    }\n\n    // get reveiced Tickets, based on current round ticketSum\n    function getTAmount(uint256 _ethAmount, uint256 _ticketSum) \n        public\n        pure\n        returns(uint256)\n    {\n        uint256 _tPrice = getTPrice(_ticketSum);\n        return _ethAmount.div(_tPrice);\n    }\n\n    // Lotto-Multiplier = 1 + LBase * (Current No. of Tickets / PDivider)^6\n    function getTMul(uint256 _ticketSum) // Unit Wei\n        public\n        pure\n        returns(uint256)\n    {\n        uint256 base = _ticketSum * ZOOM / PDIVIDER;\n        uint256 expo = base.mul(base).mul(base);\n        expo = expo.mul(expo); // ^6\n        return 1 + expo.mul(LBase) / (10**18);\n    }\n\n    // get ticket price, based on current round ticketSum\n    //unit in ETH, no need / zoom^6\n    function getTPrice(uint256 _ticketSum)\n        public\n        pure\n        returns(uint256)\n    {\n        uint256 base = (_ticketSum + 1).mul(ZOOM) / PDIVIDER;\n        uint256 expo = base;\n        expo = expo.mul(expo).mul(expo); // ^3\n        expo = expo.mul(expo); // ^6\n        uint256 tPrice = SLP + expo / PN;\n        return tPrice;\n    }\n\n    // get weight of slot, chance to win grandPot\n    function getSlotWeight(uint256 _ethAmount, uint256 _ticketSum)\n        public\n        pure\n        returns(uint256)\n    {\n        uint256 _tAmount = getTAmount(_ethAmount, _ticketSum);\n        uint256 _tMul = getTMul(_ticketSum);\n        return (_tAmount).mul(_tMul);\n    }\n\n    // used to draw grandpot results\n    // weightRange = roundWeight * grandpot / (grandpot - initGrandPot)\n    // grandPot = initGrandPot + round investedSum(for grandPot)\n    function getWeightRange(uint256 grandPot, uint256 initGrandPot, uint256 curRWeight)\n        public\n        pure\n        returns(uint256)\n    {\n        //calculate round grandPot-investedSum\n        uint256 grandPotInvest = grandPot - initGrandPot;\n        if (grandPotInvest == 0) return 8;\n        uint256 zoomMul = grandPot * ZOOM / grandPotInvest;\n        uint256 weightRange = zoomMul * curRWeight / ZOOM;\n        if (weightRange < curRWeight) weightRange = curRWeight;\n        return weightRange;\n    }\n}\n\ncontract Lottery {\n    using SafeMath for uint256;\n\n    modifier withdrawRight(){\n        require(msg.sender == address(bankContract), \"Bank only\");\n        _;\n    }\n\n    modifier onlyDevTeam() {\n        require(msg.sender == devTeam, \"only for development team\");\n        _;\n    }\n\n    modifier buyable() {\n        require(block.timestamp > round[curRoundId].startTime, \"not ready to sell Ticket\");\n        require(block.timestamp < round[curRoundId].slideEndTime, \"round over\");\n        _;\n    }\n\n    enum RewardType {\n        Minor,\n        Major,\n        Grand,\n        Bounty\n    }\n\n    // 1 buy = 1 slot = _ethAmount => (tAmount, tMul) \n    struct Slot {\n        address buyer;\n        uint256 rId;\n        // ticket numbers in range and unique in all rounds\n        uint256 tNumberFrom;\n        uint256 tNumberTo;\n        // weight to, used for grandPot finalize\n        uint256 wTo;\n        uint256 ethAmount;\n        uint256 salt;\n    }\n\n    struct Round {\n        // earlyIncome weight sum\n        uint256 rEarlyIncomeWeight;\n        // blockNumber to get hash as random seed\n        uint256 keyBlockNr;\n        \n        mapping(address => uint256) pTicketSum;\n        mapping(address => uint256) pInvestedSum;\n\n        // early income weight by address\n        mapping(address => uint256) pEarlyIncomeWeight;\n        mapping(address => uint256) pEarlyIncomeCredit;\n        mapping(address => uint256) pEarlyIncomeClaimed;\n        // early income per weight\n        uint256 ppw;\n        // endTime increased every slot sold\n        // endTime limited by fixedEndTime\n        uint256 startTime;\n        uint256 slideEndTime;\n        uint256 fixedEndTime;\n\n        // ticketSum from round 1 to this round\n        uint256 ticketSum;\n        // investedSum from round 1 to this round\n        uint256 investedSum;\n        // number of slots from round 1 to this round\n        uint256 slotSum;\n    }\n\n    // round started with this grandPot amount,\n    // used to calculate the rate for grandPot results\n    // init in roundInit function\n    uint256 initGrandPot;\n\n    Slot[] slot;\n    // slotId logs by address\n    mapping( address => uint256[]) pSlot;\n    mapping( address => uint256) public pSlotSum;\n\n    // logs by address\n    mapping( address => uint256) public pTicketSum;\n    mapping( address => uint256) public pInvestedSum;\n\n    CitizenInterface public citizenContract;\n    F2mInterface public f2mContract;\n    BankInterface public bankContract;\n    RewardInterface public rewardContract;\n\n    address public devTeam;\n\n    uint256 constant public ZOOM = 1000;\n    uint256 constant public ONE_HOUR = 60 * 60;\n    uint256 constant public ONE_DAY = 24 * ONE_HOUR;\n    uint256 constant public TIMEOUT0 = 3 * ONE_HOUR;\n    uint256 constant public TIMEOUT1 = 12 * ONE_HOUR;\n    uint256 constant public TIMEOUT2 = 7 * ONE_DAY;\n    uint256 constant public FINALIZE_WAIT_DURATION = 60; // 60 Seconds\n    uint256 constant public NEWROUND_WAIT_DURATION = ONE_DAY; // 24 Hours\n\n    // 15 seconds on Ethereum, 12 seconds used instead to make sure blockHash unavaiable\n    // when slideEndTime reached\n    // keyBlockNumber will be estimated again after every slot buy\n    uint256 constant public BLOCK_TIME = 12;\n    uint256 constant public MAX_BLOCK_DISTANCE = 254;\n\n    uint256 constant public MAJOR_RATE = 1000;\n    uint256 constant public MINOR_RATE = 1000;\n    uint256 constant public MAJOR_MIN = 0.1 ether ;\n    uint256 constant public MINOR_MIN = 0.1 ether ;\n\n    //uint256 public toNextPotPercent = 27;\n    uint256 public grandRewardPercent = 20;\n    uint256 public jRewardPercent = 60;\n\n    uint256 public toTokenPercent = 12; // 10% dividends 2% fund\n    uint256 public toBuyTokenPercent = 1;\n    uint256 public earlyIncomePercent = 22;\n    uint256 public toRefPercent = 15;\n\n    // sum == 100% = toPotPercent/100 * investedSum\n    // uint256 public grandPercent = 68;\n    uint256 public majorPercent = 24;\n    uint256 public minorPercent = 8;\n\n    uint256 public grandPot;\n    uint256 public majorPot;\n    uint256 public minorPot;\n\n    uint256 public curRoundId;\n    uint256 public lastRoundId = 88888888;\n\n    uint256 constant public startPrice = 0.002 ether;\n\n    mapping (address => uint256) public rewardBalance;\n    // used to save gas on earlyIncome calculating, curRoundId never included\n    // only earlyIncome from round 1st to curRoundId-1 are fixed\n    mapping (address => uint256) public lastWithdrawnRound;\n    mapping (address => uint256) public earlyIncomeScannedSum;\n\n    mapping (uint256 => Round) public round;\n\n    // Current Round\n\n    // first SlotId in last Block to fire jackpot\n    uint256 public jSlot;\n    // jackpot results of all slots in same block will be drawed at the same time,\n    // by player, who buys the first slot in next block\n    uint256 public lastBlockNr;\n    // used to calculate grandPot results\n    uint256 public curRWeight;\n    // added by slot salt after every slot buy\n    // does not matter with overflow\n    uint256 public curRSalt;\n    // ticket sum of current round\n    uint256 public curRTicketSum;\n\n    constructor (address _devTeam)\n        public\n    {\n        // register address in network\n        DevTeamInterface(_devTeam).setLotteryAddress(address(this));\n        devTeam = _devTeam;\n    }\n\n    // _contract = [f2mAddress, bankAddress, citizenAddress, lotteryAddress, rewardAddress, whitelistAddress];\n    function joinNetwork(address[6] _contract)\n        public\n    {\n        require(address(citizenContract) == 0x0,\"already setup\");\n        f2mContract = F2mInterface(_contract[0]);\n        bankContract = BankInterface(_contract[1]);\n        citizenContract = CitizenInterface(_contract[2]);\n        //lotteryContract = LotteryInterface(lotteryAddress);\n        rewardContract = RewardInterface(_contract[4]);\n    }\n\n    function activeFirstRound()\n        public\n        onlyDevTeam()\n    {\n        require(curRoundId == 0, \"already activated\");\n        initRound();\n    }\n\n    // Core Functions\n\n    function pushToPot() \n        public \n        payable\n    {\n        addPot(msg.value);\n    }\n\n    function checkpoint() \n        private\n    {\n        // dummy slot between every 2 rounds\n        // dummy slot never win jackpot cause of min 0.1 ETH\n        Slot memory _slot;\n        _slot.tNumberTo = round[curRoundId].ticketSum;\n        slot.push(_slot);\n\n        Round memory _round;\n        _round.startTime = NEWROUND_WAIT_DURATION.add(block.timestamp);\n        // started with 3 hours timeout\n        _round.slideEndTime = TIMEOUT0 + _round.startTime;\n        _round.fixedEndTime = TIMEOUT2 + _round.startTime;\n        _round.keyBlockNr = genEstKeyBlockNr(_round.slideEndTime);\n        _round.ticketSum = round[curRoundId].ticketSum;\n        _round.investedSum = round[curRoundId].investedSum;\n        _round.slotSum = slot.length;\n\n        curRoundId = curRoundId + 1;\n        round[curRoundId] = _round;\n\n        initGrandPot = grandPot;\n        curRWeight = 0;\n        curRTicketSum = 0;\n    }\n\n    // from round 18+ function\n    function isLastRound()\n        public\n        view\n        returns(bool)\n    {\n        return (curRoundId == lastRoundId);\n    }\n\n    function goNext()\n        private\n    {\n        uint256 _totalPot = getTotalPot();\n        grandPot = 0;\n        majorPot = 0;\n        minorPot = 0;\n        f2mContract.pushDividends.value(_totalPot)();\n        // never start\n        round[curRoundId].startTime = block.timestamp * 10;\n        round[curRoundId].slideEndTime = block.timestamp * 10 + 1;\n    }\n\n    function initRound()\n        private\n    {\n        // update all Round Log\n        checkpoint();\n        if (isLastRound()) goNext();\n    }\n\n    function finalizeable() \n        public\n        view\n        returns(bool)\n    {\n        uint256 finalizeTime = FINALIZE_WAIT_DURATION.add(round[curRoundId].slideEndTime);\n        if (finalizeTime > block.timestamp) return false; // too soon to finalize\n        if (getEstKeyBlockNr(curRoundId) >= block.number) return false; //block hash not exist\n        return curRoundId > 0;\n    }\n\n    // bounty\n    function finalize()\n        public\n    {\n        require(finalizeable(), \"Not ready to draw results\");\n        // avoid txs blocked => curRTicket ==0 => die\n        require((round[curRoundId].pTicketSum[msg.sender] > 0) || (curRTicketSum == 0), \"must buy at least 1 ticket\");\n        endRound(msg.sender);\n        initRound();\n    }\n\n    function mintReward(\n        address _lucker,\n        uint256 _slotId,\n        uint256 _value,\n        RewardType _rewardType)\n        private\n    {\n        // add reward balance\n        rewardBalance[_lucker] = rewardBalance[_lucker].add(_value);\n        // reward log\n        rewardContract.mintReward(\n            _lucker,\n            curRoundId,\n            slot[_slotId].tNumberFrom,\n            slot[_slotId].tNumberTo,\n            _value,\n            uint256(_rewardType)\n        );\n    }\n\n    function jackpot()\n        private\n    {\n        // get blocknumber to get blockhash\n        uint256 keyBlockNr = getKeyBlockNr(lastBlockNr);//block.number;\n        // salt not effected by jackpot, too risk\n        uint256 seed = getSeed(keyBlockNr);\n        // slot numberic from 1 ... totalSlot(round)\n        // jackpot for all slot in last block, jSlot <= i <= lastSlotId (=slotSum - 1)\n        // _to = first Slot in new block\n        //uint256 _to = round[curRoundId].slotSum;\n\n        uint256 jReward;\n        uint256 toF2mAmount;\n        address winner;\n        // jackpot check for slots in last block\n        while (jSlot + 1 < round[curRoundId].slotSum) {\n            // majorPot\n            if ((seed % MAJOR_RATE == 6) &&\n                (slot[jSlot].ethAmount >= MAJOR_MIN)) {\n\n                winner = slot[jSlot].buyer;\n                jReward = majorPot / 100 * jRewardPercent;\n                mintReward(winner, jSlot, jReward, RewardType.Major);\n                toF2mAmount = majorPot / 100 * toTokenPercent;\n                f2mContract.pushDividends.value(toF2mAmount)();\n                majorPot = majorPot - jReward - toF2mAmount;\n            }\n\n            // minorPot\n            if (((seed + jSlot) % MINOR_RATE == 8) && \n                (slot[jSlot].ethAmount >= MINOR_MIN)) {\n\n                winner = slot[jSlot].buyer;\n                jReward = minorPot / 100 * jRewardPercent;\n                mintReward(winner, jSlot, jReward, RewardType.Minor);\n                toF2mAmount = minorPot / 100 * toTokenPercent;\n                f2mContract.pushDividends.value(toF2mAmount)();\n                minorPot = minorPot - jReward - toF2mAmount;\n            }\n            seed = seed + 1;\n            jSlot = jSlot + 1;\n        }\n    }\n\n    function endRound(address _bountyHunter)\n        private\n    {\n        uint256 _rId = curRoundId;\n        uint256 keyBlockNr = getKeyBlockNr(round[_rId].keyBlockNr);\n        uint256 _seed = getSeed(keyBlockNr) + curRSalt;\n        uint256 onePercent = grandPot / 100;\n        uint256 rGrandReward = onePercent * grandRewardPercent;\n\n        //PUSH DIVIDENDS\n        uint256 toF2mAmount = onePercent * toTokenPercent;\n        //uint256 _bountyAmount = onePercent * bountyPercent;\n        \n        grandPot = grandPot - toF2mAmount - onePercent;\n        f2mContract.pushDividends.value(toF2mAmount)();\n\n        // base on grand-intestedSum current grandPot\n        uint256 weightRange = getWeightRange();\n\n        // roll 3 turns\n        for (uint256 i = 0; i < 3; i++){\n            uint256 winNr = Helper.getRandom(_seed, weightRange);\n            // if winNr > curRoundWeight => no winner this turn\n            // win Slot : fromWeight <= winNr <= toWeight\n            // got winner this rolling turn\n            if (winNr <= curRWeight) {\n                grandPot -= rGrandReward;\n                uint256 _winSlot = getWinSlot(winNr);\n                address _winner = slot[_winSlot].buyer;\n                mintReward(_winner, _winSlot, rGrandReward, RewardType.Grand);\n                _seed = _seed + (_seed / 10);\n            }\n        }\n        mintReward(_bountyHunter, 0, onePercent * 3 / 10, RewardType.Bounty);\n        rewardContract.pushBounty.value(onePercent * 7 / 10)(curRoundId);\n    }\n\n    function buy(string _sSalt)\n        public\n        payable\n    {\n        buyFor(_sSalt, msg.sender);\n    }\n\n    function updateInvested(address _buyer, uint256 _ethAmount)\n        private\n    {\n        round[curRoundId].investedSum += _ethAmount;\n        round[curRoundId].pInvestedSum[_buyer] += _ethAmount;\n        pInvestedSum[_buyer] += _ethAmount;\n    }\n\n    function updateTicketSum(address _buyer, uint256 _tAmount)\n        private\n    {\n        round[curRoundId].ticketSum = round[curRoundId].ticketSum + _tAmount;\n        round[curRoundId].pTicketSum[_buyer] = round[curRoundId].pTicketSum[_buyer] + _tAmount;\n        curRTicketSum = curRTicketSum + _tAmount;\n        pTicketSum[_buyer] = pTicketSum[_buyer] + _tAmount;\n    }\n\n    function updateEarlyIncome(address _buyer, uint256 _pWeight)\n        private\n    {\n        round[curRoundId].rEarlyIncomeWeight = _pWeight.add(round[curRoundId].rEarlyIncomeWeight);\n        round[curRoundId].pEarlyIncomeWeight[_buyer] = _pWeight.add(round[curRoundId].pEarlyIncomeWeight[_buyer]);\n        round[curRoundId].pEarlyIncomeCredit[_buyer] = round[curRoundId].pEarlyIncomeCredit[_buyer].add(_pWeight.mul(round[curRoundId].ppw));\n    }\n\n    function buyFor(string _sSalt, address _sender) \n        public\n        payable\n        buyable()\n    {\n        uint256 _salt = Helper.stringToUint(_sSalt);\n        uint256 _ethAmount = msg.value;\n        uint256 _ticketSum = curRTicketSum;\n        require(_ethAmount >= Helper.getTPrice(_ticketSum), \"not enough to buy 1 ticket\");\n\n        // investedSum logs\n        updateInvested(_sender, _ethAmount);\n        // update salt\n        curRSalt = curRSalt + _salt;\n        // init new Slot, Slot Id = 1..curRSlotSum\n        Slot memory _slot;\n        _slot.rId = curRoundId;\n        _slot.buyer = _sender;\n        _slot.ethAmount = _ethAmount;\n        _slot.salt = _salt;\n        uint256 _tAmount = Helper.getTAmount(_ethAmount, _ticketSum);\n        uint256 _tMul = Helper.getTMul(_ticketSum);\n        uint256 _pMul = Helper.getEarlyIncomeMul(_ticketSum);\n        uint256 _pWeight = _pMul.mul(_tAmount);\n        uint256 _toAddTime = Helper.getAddedTime(_ticketSum, _tAmount);\n        addTime(curRoundId, _toAddTime);\n\n        // update weight\n        uint256 _slotWeight = (_tAmount).mul(_tMul);\n        curRWeight = curRWeight.add(_slotWeight);\n        _slot.wTo = curRWeight;\n        uint256 lastSlot = slot.length - 1;\n        // update ticket params\n        _slot.tNumberFrom = slot[lastSlot].tNumberTo + 1;\n        _slot.tNumberTo = slot[lastSlot].tNumberTo + _tAmount;\n        updateTicketSum(_sender, _tAmount);\n\n        // EarlyIncome Weight\n        // ppw and credit zoomed x1000\n        // earlyIncome mul of each ticket in this slot\n        updateEarlyIncome(_sender, _pWeight);\n     \n        // add Slot and update round data\n        slot.push(_slot);\n        round[curRoundId].slotSum = slot.length;\n        // add slot to player logs\n        pSlot[_sender].push(slot.length - 1);\n\n        // first slot in this block draw jacpot results for \n        // all slot in last block\n        if (lastBlockNr != block.number) {\n            jackpot();\n            lastBlockNr = block.number;\n        }\n\n        distributeSlotBuy(_sender, curRoundId, _ethAmount);\n\n        round[curRoundId].keyBlockNr = genEstKeyBlockNr(round[curRoundId].slideEndTime);\n    }\n\n    function distributeSlotBuy(address _sender, uint256 _rId, uint256 _ethAmount)\n        private\n    {\n        uint256 onePercent = _ethAmount / 100;\n        uint256 toF2mAmount = onePercent * toTokenPercent; // 12\n        uint256 toRefAmount = onePercent * toRefPercent; // 10\n        uint256 toBuyTokenAmount = onePercent * toBuyTokenPercent; //1\n        uint256 earlyIncomeAmount = onePercent * earlyIncomePercent; //27\n        uint256 taxAmount = toF2mAmount + toRefAmount + toBuyTokenAmount + earlyIncomeAmount; // 50\n        uint256 taxedEthAmount = _ethAmount.sub(taxAmount); // 50\n        addPot(taxedEthAmount);\n        \n        // 10% Ref\n        citizenContract.pushRefIncome.value(toRefAmount)(_sender);\n        // 2% Fund + 10% Dividends \n        f2mContract.pushDividends.value(toF2mAmount)();\n        // 1% buy Token\n        f2mContract.buyFor.value(toBuyTokenAmount)(_sender);\n        // 27% Early\n        uint256 deltaPpw = (earlyIncomeAmount * ZOOM).div(round[_rId].rEarlyIncomeWeight);\n        round[_rId].ppw = deltaPpw.add(round[_rId].ppw);\n    }\n\n    function claimEarlyIncomebyAddress(address _buyer)\n        private\n    {\n        if (curRoundId == 0) return;\n        claimEarlyIncomebyAddressRound(_buyer, curRoundId);\n        uint256 _rId = curRoundId - 1;\n        while ((_rId > lastWithdrawnRound[_buyer]) && (_rId + 20 > curRoundId)) {\n            earlyIncomeScannedSum[_buyer] += claimEarlyIncomebyAddressRound(_buyer, _rId);\n            _rId = _rId - 1;\n        }\n    }\n\n    function claimEarlyIncomebyAddressRound(address _buyer, uint256 _rId)\n        private\n        returns(uint256)\n    {\n        uint256 _amount = getCurEarlyIncomeByAddressRound(_buyer, _rId);\n        if (_amount == 0) return 0;\n        round[_rId].pEarlyIncomeClaimed[_buyer] = _amount.add(round[_rId].pEarlyIncomeClaimed[_buyer]);\n        rewardBalance[_buyer] = _amount.add(rewardBalance[_buyer]);\n        return _amount;\n    }\n\n    function withdrawFor(address _sender)\n        public\n        withdrawRight()\n        returns(uint256)\n    {\n        if (curRoundId == 0) return;\n        claimEarlyIncomebyAddress(_sender);\n        lastWithdrawnRound[_sender] = curRoundId - 1;\n        uint256 _amount = rewardBalance[_sender];\n        rewardBalance[_sender] = 0;\n        bankContract.pushToBank.value(_amount)(_sender);\n        return _amount;\n    }\n    \n    function addTime(uint256 _rId, uint256 _toAddTime)\n        private\n    {\n        round[_rId].slideEndTime = Helper.getNewEndTime(_toAddTime, round[_rId].slideEndTime, round[_rId].fixedEndTime);\n    }\n\n    // distribute to 3 pots Grand, Majorm Minor\n    function addPot(uint256 _amount)\n        private\n    {\n        uint256 onePercent = _amount / 100;\n        uint256 toMinor = onePercent * minorPercent;\n        uint256 toMajor = onePercent * majorPercent;\n        uint256 toGrand = _amount - toMinor - toMajor;\n\n        minorPot = minorPot + toMinor;\n        majorPot = majorPot + toMajor;\n        grandPot = grandPot + toGrand;\n    }\n\n\n    //////////////////////////////////////////////////////////////////\n    // READ FUNCTIONS\n    //////////////////////////////////////////////////////////////////\n\n    function isWinSlot(uint256 _slotId, uint256 _keyNumber)\n        public\n        view\n        returns(bool)\n    {\n        return (slot[_slotId - 1].wTo < _keyNumber) && (slot[_slotId].wTo >= _keyNumber);\n    }\n\n    function getWeightRange()\n        public\n        view\n        returns(uint256)\n    {\n        return Helper.getWeightRange(grandPot, initGrandPot, curRWeight);\n    }\n\n    function getWinSlot(uint256 _keyNumber)\n        public\n        view\n        returns(uint256)\n    {\n        // return 0 if not found\n        uint256 _to = slot.length - 1;\n        uint256 _from = round[curRoundId-1].slotSum + 1; // dummy slot ignore\n        uint256 _pivot;\n        //Slot memory _slot;\n        uint256 _pivotWTo;\n        // Binary search\n        while (_from <= _to) {\n            _pivot = (_from + _to) / 2;\n            //_slot = round[_rId].slot[_pivot];\n            _pivotWTo = slot[_pivot].wTo;\n            if (isWinSlot(_pivot, _keyNumber)) return _pivot;\n            if (_pivotWTo < _keyNumber) { // in right side\n                _from = _pivot + 1;\n            } else { // in left side\n                _to = _pivot - 1;\n            }\n        }\n        return _pivot; // never happens or smt gone wrong\n    }\n\n    // Key Block in future\n    function genEstKeyBlockNr(uint256 _endTime) \n        public\n        view\n        returns(uint256)\n    {\n        if (block.timestamp >= _endTime) return block.number + 8; \n        uint256 timeDist = _endTime - block.timestamp;\n        uint256 estBlockDist = timeDist / BLOCK_TIME;\n        return block.number + estBlockDist + 8;\n    }\n\n    // get block hash of first block with blocktime > _endTime\n    function getSeed(uint256 _keyBlockNr)\n        public\n        view\n        returns (uint256)\n    {\n        // Key Block not mined atm\n        if (block.number <= _keyBlockNr) return block.number;\n        return uint256(blockhash(_keyBlockNr));\n    }\n\n    // current reward balance\n    function getRewardBalance(address _buyer)\n        public\n        view\n        returns(uint256)\n    {\n        return rewardBalance[_buyer];\n    } \n\n    // GET endTime\n    function getSlideEndTime(uint256 _rId)\n        public\n        view\n        returns(uint256)\n    {\n        return(round[_rId].slideEndTime);\n    }\n\n    function getFixedEndTime(uint256 _rId)\n        public\n        view\n        returns(uint256)\n    {\n        return(round[_rId].fixedEndTime);\n    }\n\n    function getTotalPot()\n        public\n        view\n        returns(uint256)\n    {\n        return grandPot + majorPot + minorPot;\n    }\n\n    // EarlyIncome\n    function getEarlyIncomeByAddress(address _buyer)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _sum = earlyIncomeScannedSum[_buyer];\n        uint256 _fromRound = lastWithdrawnRound[_buyer] + 1; // >=1\n        if (_fromRound + 100 < curRoundId) _fromRound = curRoundId - 100;\n        uint256 _rId = _fromRound;\n        while (_rId <= curRoundId) {\n            _sum = _sum + getEarlyIncomeByAddressRound(_buyer, _rId);\n            _rId++;\n        }\n        return _sum;\n    }\n\n    // included claimed amount\n    function getEarlyIncomeByAddressRound(address _buyer, uint256 _rId)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _pWeight = round[_rId].pEarlyIncomeWeight[_buyer];\n        uint256 _ppw = round[_rId].ppw;\n        uint256 _rCredit = round[_rId].pEarlyIncomeCredit[_buyer];\n        uint256 _rEarlyIncome = ((_ppw.mul(_pWeight)).sub(_rCredit)).div(ZOOM);\n        return _rEarlyIncome;\n    }\n\n    function getCurEarlyIncomeByAddress(address _buyer)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _sum = 0;\n        uint256 _fromRound = lastWithdrawnRound[_buyer] + 1; // >=1\n        if (_fromRound + 100 < curRoundId) _fromRound = curRoundId - 100;\n        uint256 _rId = _fromRound;\n        while (_rId <= curRoundId) {\n            _sum = _sum.add(getCurEarlyIncomeByAddressRound(_buyer, _rId));\n            _rId++;\n        }\n        return _sum;\n    }\n\n    function getCurEarlyIncomeByAddressRound(address _buyer, uint256 _rId)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _rEarlyIncome = getEarlyIncomeByAddressRound(_buyer, _rId);\n        return _rEarlyIncome.sub(round[_rId].pEarlyIncomeClaimed[_buyer]);\n    }\n\n    ////////////////////////////////////////////////////////////////////\n\n    function getEstKeyBlockNr(uint256 _rId)\n        public\n        view\n        returns(uint256)\n    {\n        return round[_rId].keyBlockNr;\n    }\n\n    function getKeyBlockNr(uint256 _estKeyBlockNr)\n        public\n        view\n        returns(uint256)\n    {\n        require(block.number > _estKeyBlockNr, \"blockHash not avaiable\");\n        uint256 jump = (block.number - _estKeyBlockNr) / MAX_BLOCK_DISTANCE * MAX_BLOCK_DISTANCE;\n        return _estKeyBlockNr + jump;\n    }\n\n    // Logs\n    function getCurRoundId()\n        public\n        view\n        returns(uint256)\n    {\n        return curRoundId;\n    }\n\n    function getTPrice()\n        public\n        view\n        returns(uint256)\n    {\n        return Helper.getTPrice(curRTicketSum);\n    }\n\n    function getTMul()\n        public\n        view\n        returns(uint256)\n    {\n        return Helper.getTMul(curRTicketSum);\n    }\n\n    function getPMul()\n        public\n        view\n        returns(uint256)\n    {\n        return Helper.getEarlyIncomeMul(curRTicketSum);\n    }\n\n    function getPTicketSumByRound(uint256 _rId, address _buyer)\n        public\n        view\n        returns(uint256)\n    {\n        return round[_rId].pTicketSum[_buyer];\n    }\n\n    function getTicketSumToRound(uint256 _rId)\n        public\n        view\n        returns(uint256)\n    {\n        return round[_rId].ticketSum;\n    }\n\n    function getPInvestedSumByRound(uint256 _rId, address _buyer)\n        public\n        view\n        returns(uint256)\n    {\n        return round[_rId].pInvestedSum[_buyer];\n    }\n\n    function getInvestedSumToRound(uint256 _rId)\n        public\n        view\n        returns(uint256)\n    {\n        return round[_rId].investedSum;\n    }\n\n    function getPSlotLength(address _sender)\n        public\n        view\n        returns(uint256)\n    {\n        return pSlot[_sender].length;\n    }\n\n    function getSlotLength()\n        public\n        view\n        returns(uint256)\n    {\n        return slot.length;\n    }\n\n    function getSlotId(address _sender, uint256 i)\n        public\n        view\n        returns(uint256)\n    {\n        return pSlot[_sender][i];\n    }\n\n    function getSlotInfo(uint256 _slotId)\n        public\n        view\n        returns(address, uint256[4], string)\n    {\n        Slot memory _slot = slot[_slotId];\n        return (_slot.buyer,[_slot.rId, _slot.tNumberFrom, _slot.tNumberTo, _slot.ethAmount], Helper.uintToString(_slot.salt));\n    }\n\n    function cashoutable(address _address) \n        public\n        view\n        returns(bool)\n    {\n        // need 1 ticket or in waiting time to start new round\n        return (round[curRoundId].pTicketSum[_address] > 0) || (round[curRoundId].startTime > block.timestamp);\n    }\n\n    // set endRound, prepare to upgrade new version\n    function setLastRound(uint256 _lastRoundId) \n        public\n        onlyDevTeam()\n    {\n        require(_lastRoundId >= 18 && _lastRoundId > curRoundId, \"too early to end\");\n        require(lastRoundId == 88888888, \"already set\");\n        lastRoundId = _lastRoundId;\n    }\n}",
  "bytecode": "60806040526014600b55603c600c55600c600d556001600e556016600f55600f6010556018601155600860125563054c56386017553480156200004157600080fd5b5060405160208062005495833981018060405281019080805190602001909291905050508073ffffffffffffffffffffffffffffffffffffffff16632a332b2a306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200010157600080fd5b505af115801562000116573d6000803e3d6000fd5b5050505080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050615329806200016c6000396000f3006080604052600436106103c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806244c659146103ca5780628a5c23146103f5578063026db21d14610456578063034dc84c14610481578063060ccbc5146104ac57806307c2e449146104d757806308b254a71461052e578063095db925146105595780630a890a53146105845780630cafabd8146105af5780630e4b8389146105da578063131de5171461061b578063165035e21461065c578063182ef78e146106875780631b112541146106b25780631b681a281461071357806323ba467a1461076a5780632a6f7c39146107995780632c3f1304146107f05780632e10923f1461081b5780632fa23c711461084657806330b4d7521461089d5780633406eb9a146108c857806334d5f37b146108f35780633715a4f61461096c5780633865bf3a14610997578063388ca80f146109e957806338948c5314610a145780633d4cdb2214610a4357806343c0d38c14610a6e57806345f6e10d14610acf578063480bc31f14610afa57806348cd5a6014610b25578063492cc76914610b505780634bb278f314610bac57806350b0952b14610bc357806350f49db114610bee57806352620c7914610c2f57806358e5bc8814610c8a5780635a35eb7c14610cb55780635af8909414610d045780635c03cbe414610d2f5780636067be7914610d5a5780636713e2fe14610d9b57806367b40cf714610dc6578063683e292914610e1d578063690eb3f814610e745780636c85e31914610eb55780636ea69d6214610ee05780637289f28e14610f375780637495a1e414610f645780637bb8590d14610fe0578063863e76db1461100b57806398fc1d1e146110365780639c323436146110615780639eca672c146110a2578063a099d079146110f9578063a45d796514611150578063a5603f02146111a7578063a90c4ff2146111fe578063b70e286c14611229578063ba63abd614611254578063baf4e136146112b5578063bd11ab08146112e0578063be20f9ac1461130b578063be9ebd7114611413578063c90954a11461143e578063cac4977214611495578063d24bcf54146114ec578063d3dcc1751461154d578063d44a3d12146115a4578063d5a849e9146115cf578063dbe2e29614611626578063e0d4ea3714611630578063e5a758a414611671578063eb95f0bf1461169c578063f1671b56146116c7578063f1a9af89146116f2578063f215bc3e1461171d578063f2e1b1cc1461175e578063f5f6a5381461179f578063f6c6b731146117f6578063f93019101461180d575b600080fd5b3480156103d657600080fd5b506103df611838565b6040518082815260200191505060405180910390f35b34801561040157600080fd5b50610440600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061183e565b6040518082815260200191505060405180910390f35b34801561046257600080fd5b5061046b6118bc565b6040518082815260200191505060405180910390f35b34801561048d57600080fd5b506104966118c2565b6040518082815260200191505060405180910390f35b3480156104b857600080fd5b506104c16118c8565b6040518082815260200191505060405180910390f35b3480156104e357600080fd5b506104ec6118ce565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561053a57600080fd5b506105436118f4565b6040518082815260200191505060405180910390f35b34801561056557600080fd5b5061056e6118fa565b6040518082815260200191505060405180910390f35b34801561059057600080fd5b50610599611900565b6040518082815260200191505060405180910390f35b3480156105bb57600080fd5b506105c4611906565b6040518082815260200191505060405180910390f35b3480156105e657600080fd5b50610605600480360381019080803590602001909291905050506119b5565b6040518082815260200191505060405180910390f35b34801561062757600080fd5b50610646600480360381019080803590602001909291905050506119d5565b6040518082815260200191505060405180910390f35b34801561066857600080fd5b50610671611a6d565b6040518082815260200191505060405180910390f35b34801561069357600080fd5b5061069c611a73565b6040518082815260200191505060405180910390f35b3480156106be57600080fd5b506106fd60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b22565b6040518082815260200191505060405180910390f35b34801561071f57600080fd5b50610754600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b80565b6040518082815260200191505060405180910390f35b34801561077657600080fd5b5061077f611b98565b604051808215151515815260200191505060405180910390f35b3480156107a557600080fd5b506107ae611ba6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107fc57600080fd5b50610805611bcc565b6040518082815260200191505060405180910390f35b34801561082757600080fd5b50610830611bd9565b6040518082815260200191505060405180910390f35b34801561085257600080fd5b50610887600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bdf565b6040518082815260200191505060405180910390f35b3480156108a957600080fd5b506108b2611bf7565b6040518082815260200191505060405180910390f35b3480156108d457600080fd5b506108dd611c03565b6040518082815260200191505060405180910390f35b3480156108ff57600080fd5b5061091e60048036038101908080359060200190929190505050611c09565b604051808a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390f35b34801561097857600080fd5b50610981611c57565b6040518082815260200191505060405180910390f35b3480156109a357600080fd5b506109e76004803603810190808060c00190600680602002604051908101604052809291908260066020028082843782019150505050509192919290505050611c5c565b005b3480156109f557600080fd5b506109fe611e5f565b6040518082815260200191505060405180910390f35b348015610a2057600080fd5b50610a29611e65565b604051808215151515815260200191505060405180910390f35b348015610a4f57600080fd5b50610a58611ed0565b6040518082815260200191505060405180910390f35b348015610a7a57600080fd5b50610ab9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ed6565b6040518082815260200191505060405180910390f35b348015610adb57600080fd5b50610ae4611f37565b6040518082815260200191505060405180910390f35b348015610b0657600080fd5b50610b0f611f3d565b6040518082815260200191505060405180910390f35b348015610b3157600080fd5b50610b3a611f4f565b6040518082815260200191505060405180910390f35b610baa600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611f55565b005b348015610bb857600080fd5b50610bc1611f62565b005b348015610bcf57600080fd5b50610bd86120cb565b6040518082815260200191505060405180910390f35b348015610bfa57600080fd5b50610c19600480360381019080803590602001909291905050506120d0565b6040518082815260200191505060405180910390f35b348015610c3b57600080fd5b50610c70600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120f0565b604051808215151515815260200191505060405180910390f35b348015610c9657600080fd5b50610c9f612173565b6040518082815260200191505060405180910390f35b348015610cc157600080fd5b50610cea6004803603810190808035906020019092919080359060200190929190505050612179565b604051808215151515815260200191505060405180910390f35b348015610d1057600080fd5b50610d196121d4565b6040518082815260200191505060405180910390f35b348015610d3b57600080fd5b50610d44612283565b6040518082815260200191505060405180910390f35b348015610d6657600080fd5b50610d8560048036038101908080359060200190929190505050612289565b6040518082815260200191505060405180910390f35b348015610da757600080fd5b50610db06122a9565b6040518082815260200191505060405180910390f35b348015610dd257600080fd5b50610e07600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122b2565b6040518082815260200191505060405180910390f35b348015610e2957600080fd5b50610e5e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122ca565b6040518082815260200191505060405180910390f35b348015610e8057600080fd5b50610e9f60048036038101908080359060200190929190505050612316565b6040518082815260200191505060405180910390f35b348015610ec157600080fd5b50610eca612336565b6040518082815260200191505060405180910390f35b348015610eec57600080fd5b50610ef561233c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610f4357600080fd5b50610f6260048036038101908080359060200190929190505050612362565b005b610fde600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612534565b005b348015610fec57600080fd5b50610ff5612e46565b6040518082815260200191505060405180910390f35b34801561101757600080fd5b50611020612e4f565b6040518082815260200191505060405180910390f35b34801561104257600080fd5b5061104b612e58565b6040518082815260200191505060405180910390f35b34801561106d57600080fd5b5061108c60048036038101908080359060200190929190505050612e5e565b6040518082815260200191505060405180910390f35b3480156110ae57600080fd5b506110e3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e7e565b6040518082815260200191505060405180910390f35b34801561110557600080fd5b5061113a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061310f565b6040518082815260200191505060405180910390f35b34801561115c57600080fd5b50611191600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131e7565b6040518082815260200191505060405180910390f35b3480156111b357600080fd5b506111e8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131ff565b6040518082815260200191505060405180910390f35b34801561120a57600080fd5b506112136132a9565b6040518082815260200191505060405180910390f35b34801561123557600080fd5b5061123e6132b5565b6040518082815260200191505060405180910390f35b34801561126057600080fd5b5061129f60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132bb565b6040518082815260200191505060405180910390f35b3480156112c157600080fd5b506112ca613319565b6040518082815260200191505060405180910390f35b3480156112ec57600080fd5b506112f5613325565b6040518082815260200191505060405180910390f35b34801561131757600080fd5b506113366004803603810190808035906020019092919050505061332b565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600460200280838360005b83811015611393578082015181840152602081019050611378565b5050505090500180602001828103825283818151815260200191508051906020019080838360005b838110156113d65780820151818401526020810190506113bb565b50505050905090810190601f1680156114035780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561141f57600080fd5b50611428613541565b6040518082815260200191505060405180910390f35b34801561144a57600080fd5b5061147f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613547565b6040518082815260200191505060405180910390f35b3480156114a157600080fd5b506114aa61355f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156114f857600080fd5b50611537600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613585565b6040518082815260200191505060405180910390f35b34801561155957600080fd5b5061156261369a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156115b057600080fd5b506115b96136c0565b6040518082815260200191505060405180910390f35b3480156115db57600080fd5b50611610600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506136c9565b6040518082815260200191505060405180910390f35b61162e613712565b005b34801561163c57600080fd5b5061165b6004803603810190808035906020019092919050505061371d565b6040518082815260200191505060405180910390f35b34801561167d57600080fd5b5061168661373e565b6040518082815260200191505060405180910390f35b3480156116a857600080fd5b506116b1613744565b6040518082815260200191505060405180910390f35b3480156116d357600080fd5b506116dc61374e565b6040518082815260200191505060405180910390f35b3480156116fe57600080fd5b50611707613811565b6040518082815260200191505060405180910390f35b34801561172957600080fd5b506117486004803603810190808035906020019092919050505061381c565b6040518082815260200191505060405180910390f35b34801561176a57600080fd5b5061178960048036038101908080359060200190929190505050613859565b6040518082815260200191505060405180910390f35b3480156117ab57600080fd5b506117e0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061390d565b6040518082815260200191505060405180910390f35b34801561180257600080fd5b5061180b613925565b005b34801561181957600080fd5b50611822613a6e565b6040518082815260200191505060405180910390f35b600e5481565b60008061184b8484613585565b90506118b3601b600085815260200190815260200160002060060160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482613a7390919063ffffffff16565b91505092915050565b60155481565b60135481565b6103e881565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60165481565b600c5481565b601e5481565b600073fe00bdcee68a70bbb7559f83fcdb24da2a357ffe63dacc8e116020546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561197557600080fd5b505af4158015611989573d6000803e3d6000fd5b505050506040513d602081101561199f57600080fd5b8101908080519060200190929190505050905090565b6000601b6000838152602001908152602001600020600101549050919050565b6000808243111515611a4f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f626c6f636b48617368206e6f74206176616961626c650000000000000000000081525060200191505060405180910390fd5b60fe80844303811515611a5e57fe5b04029050808301915050919050565b610e1081565b600073fe00bdcee68a70bbb7559f83fcdb24da2a357ffe6312d6c7046020546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611ae257600080fd5b505af4158015611af6573d6000803e3d6000fd5b505050506040513d6020811015611b0c57600080fd5b8101908080519060200190929190505050905090565b6000601b600084815260200190815260200160002060020160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60196020528060005260406000206000915090505481565b600060175460165414905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600180549050905090565b60115481565b601a6020528060005260406000206000915090505481565b67016345785d8a000081565b601c5481565b601b60205280600052604060002060009150905080600001549080600101549080600701549080600801549080600901549080600a01549080600b01549080600c01549080600d0154905089565b603c81565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611d0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f616c72656164792073657475700000000000000000000000000000000000000081525060200191505060405180910390fd5b806000600681101515611d1b57fe5b6020020151600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001600681101515611d6f57fe5b6020020151600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002600681101515611dc357fe5b6020020151600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806004600681101515611e1757fe5b6020020151600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60175481565b600080611e94601b6000601654815260200190815260200160002060090154603c613a9490919063ffffffff16565b905042811115611ea75760009150611ecc565b43611eb36016546119b5565b101515611ec35760009150611ecc565b60006016541191505b5090565b600d5481565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515611f2457fe5b9060005260206000200154905092915050565b601f5481565b60006015546014546013540101905090565b60205481565b611f5f8133612534565b50565b611f6a611e65565b1515611fde576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4e6f7420726561647920746f206472617720726573756c74730000000000000081525060200191505060405180910390fd5b6000601b6000601654815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118061204457506000602054145b15156120b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6d75737420627579206174206c656173742031207469636b657400000000000081525060200191505060405180910390fd5b6120c133613ab5565b6120c9613e09565b565b60fe81565b6000601b6000838152602001908152602001600020600901549050919050565b600080601b6000601654815260200190815260200160002060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118061216c575042601b6000601654815260200190815260200160002060080154115b9050919050565b6103e881565b600081600180850381548110151561218d57fe5b9060005260206000209060070201600401541080156121cc5750816001848154811015156121b757fe5b90600052602060002090600702016004015410155b905092915050565b600073fe00bdcee68a70bbb7559f83fcdb24da2a357ffe6361129a806020546040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561224357600080fd5b505af4158015612257573d6000803e3d6000fd5b505050506040513d602081101561226d57600080fd5b8101908080519060200190929190505050905090565b60125481565b6000601b6000838152602001908152602001600020600c01549050919050565b610e10600c0281565b60186020528060005260406000206000915090505481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000601b6000838152602001908152602001600020600b01549050919050565b601d5481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612427576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f6f6e6c7920666f7220646576656c6f706d656e74207465616d0000000000000081525060200191505060405180910390fd5b60128110158015612439575060165481115b15156124ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f746f6f206561726c7920746f20656e640000000000000000000000000000000081525060200191505060405180910390fd5b63054c563860175414151561252a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f616c72656164792073657400000000000000000000000000000000000000000081525060200191505060405180910390fd5b8060178190555050565b6000806000612541615239565b6000806000806000806000601b6000601654815260200190815260200160002060080154421115156125db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6e6f7420726561647920746f2073656c6c205469636b6574000000000000000081525060200191505060405180910390fd5b601b60006016548152602001908152602001600020600901544210151561266a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600a8152602001807f726f756e64206f7665720000000000000000000000000000000000000000000081525060200191505060405180910390fd5b73fe00bdcee68a70bbb7559f83fcdb24da2a357ffe631bd951558e6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126f05780820151818401526020810190506126d5565b50505050905090810190601f16801561271d5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561273a57600080fd5b505af415801561274e573d6000803e3d6000fd5b505050506040513d602081101561276457600080fd5b81019080805190602001909291905050509a50349950602054985073fe00bdcee68a70bbb7559f83fcdb24da2a357ffe63dacc8e118a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156127ea57600080fd5b505af41580156127fe573d6000803e3d6000fd5b505050506040513d602081101561281457600080fd5b81019080805190602001909291905050508a1015151561289c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6e6f7420656e6f75676820746f206275792031207469636b657400000000000081525060200191505060405180910390fd5b6128a68c8b613e29565b8a601f5401601f819055506016548860200181815250508b886000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050898860a00181815250508a8860c001818152505073fe00bdcee68a70bbb7559f83fcdb24da2a357ffe6361101bed8b8b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b15801561297c57600080fd5b505af4158015612990573d6000803e3d6000fd5b505050506040513d60208110156129a657600080fd5b8101908080519060200190929190505050965073fe00bdcee68a70bbb7559f83fcdb24da2a357ffe6312d6c7048a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015612a2457600080fd5b505af4158015612a38573d6000803e3d6000fd5b505050506040513d6020811015612a4e57600080fd5b8101908080519060200190929190505050955073fe00bdcee68a70bbb7559f83fcdb24da2a357ffe6361129a808a6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015612acc57600080fd5b505af4158015612ae0573d6000803e3d6000fd5b505050506040513d6020811015612af657600080fd5b81019080805190602001909291905050509450612b1c8786613f0390919063ffffffff16565b935073fe00bdcee68a70bbb7559f83fcdb24da2a357ffe636acd8e4a8a896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b158015612b9157600080fd5b505af4158015612ba5573d6000803e3d6000fd5b505050506040513d6020811015612bbb57600080fd5b81019080805190602001909291905050509250612bda60165484613f41565b612bed8688613f0390919063ffffffff16565b9150612c0482601e54613a9490919063ffffffff16565b601e81905550601e548860800181815250506001808054905003905060018082815481101515612c3057fe5b9060005260206000209060070201600301540188604001818152505086600182815481101515612c5c57fe5b90600052602060002090600702016003015401886060018181525050612c828c88614041565b612c8c8c856141bd565b6001889080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505050600180549050601b60006016548152602001908152602001600020600d0181905550600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001808054905003908060018154018082558091505090600182039060005260206000200160009091929091909150555043601d54141515612ded57612de56143b4565b43601d819055505b612dfa8c6016548c61470a565b612e1b601b600060165481526020019081526020016000206009015461381c565b601b600060165481526020019081526020016000206001018190555050505050505050505050505050565b610e1060180281565b610e1060180281565b60145481565b6000601b6000838152602001908152602001600020600a01549050919050565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f42616e6b206f6e6c79000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60006016541415612f5657613109565b612f5f83614a32565b600160165403601960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550601860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000601860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e9288d7282856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b1580156130ec57600080fd5b505af1158015613100573d6000803e3d6000fd5b50505050508091505b50919050565b600080600080601a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205492506001601960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540191506016546064830110156131b25760646016540391505b8190505b601654811115156131dc576131cb8582613585565b8301925080806001019150506131b6565b829350505050919050565b60046020528060005260406000206000915090505481565b600080600080600092506001601960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540191506016546064830110156132645760646016540391505b8190505b6016548111151561329e5761328f613280868361183e565b84613a9490919063ffffffff16565b92508080600101915050613268565b829350505050919050565b67016345785d8a000081565b60105481565b6000601b600084815260200190815260200160002060030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610e1060180260070281565b6103e881565b600061333561528d565b606061333f615239565b60018581548110151561334e57fe5b906000526020600020906007020160e060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050905080600001516080604051908101604052808360200151815260200183604001518152602001836060015181526020018360a0015181525073fe00bdcee68a70bbb7559f83fcdb24da2a357ffe63e93956798460c001516040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b1580156134a257600080fd5b505af41580156134b6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156134e057600080fd5b8101908080516401000000008111156134f857600080fd5b8281019050602081018481111561350e57600080fd5b815185600182028301116401000000008211171561352b57600080fd5b5050929190505050935093509350509193909250565b600f5481565b60036020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000601b600087815260200190815260200160002060040160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549350601b6000878152602001908152602001600020600701549250601b600087815260200190815260200160002060050160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915061368b6103e861367d8461366f8888613f0390919063ffffffff16565b613a7390919063ffffffff16565b614b1690919063ffffffff16565b90508094505050505092915050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e1060030281565b6000601860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61371b34614b40565b565b6000814311151561373057439050613739565b81406001900490505b919050565b600b5481565b6000601654905090565b600073fe00bdcee68a70bbb7559f83fcdb24da2a357ffe63d114751e601354600054601e546040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001838152602001828152602001935050505060206040518083038186803b1580156137d157600080fd5b505af41580156137e5573d6000803e3d6000fd5b505050506040513d60208110156137fb57600080fd5b8101908080519060200190929190505050905090565b66071afd498d000081565b6000806000834210151561383557600843019250613852565b4284039150600c8281151561384657fe5b04905060088143010192505b5050919050565b6000806000806000600180805490500393506001601b60006001601654038152602001908152602001600020600d01540192505b83831115156139005760028484018115156138a457fe5b0491506001828154811015156138b657fe5b90600052602060002090600702016004015490506138d48287612179565b156138e157819450613904565b858110156138f4576001820192506138fb565b6001820393505b61388d565b8194505b50505050919050565b60056020528060005260406000206000915090505481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156139ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f6f6e6c7920666f7220646576656c6f706d656e74207465616d0000000000000081525060200191505060405180910390fd5b6000601654141515613a64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f616c72656164792061637469766174656400000000000000000000000000000081525060200191505060405180910390fd5b613a6c613e09565b565b600c81565b600080838311151515613a8557600080fd5b82840390508091505092915050565b6000808284019050838110151515613aab57600080fd5b8091505092915050565b60008060008060008060008060008060006016549a50613aea601b60008d8152602001908152602001600020600101546119d5565b9950601f54613af88b61371d565b0198506064601354811515613b0957fe5b049750600b5488029650600d548802955087866013540303601381905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdb66236876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b158015613bad57600080fd5b505af1158015613bc1573d6000803e3d6000fd5b5050505050613bce61374e565b9450600093505b6003841015613d235773fe00bdcee68a70bbb7559f83fcdb24da2a357ffe63655b08eb8a876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b158015613c5157600080fd5b505af4158015613c65573d6000803e3d6000fd5b505050506040513d6020811015613c7b57600080fd5b81019080805190602001909291905050509250601e5483111515613d165786601360008282540392505081905550613cb283613859565b9150600182815481101515613cc357fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050613d048183896002614b92565b600a89811515613d1057fe5b04890198505b8380600101945050613bd5565b613d408c6000600a60038c02811515613d3857fe5b046003614b92565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed6d9169600a60078b02811515613d8d57fe5b046016546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506000604051808303818588803b158015613de257600080fd5b505af1158015613df6573d6000803e3d6000fd5b5050505050505050505050505050505050565b613e11614d77565b613e19611b98565b15613e2757613e26614fb2565b5b565b80601b60006016548152602001908152602001600020600c016000828254019250508190555080601b6000601654815260200190815260200160002060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b6000806000841415613f185760009150613f3a565b8284029050828482811515613f2957fe5b04141515613f3657600080fd5b8091505b5092915050565b73fe00bdcee68a70bbb7559f83fcdb24da2a357ffe63abcd0d9d82601b600086815260200190815260200160002060090154601b6000878152602001908152602001600020600a01546040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001838152602001828152602001935050505060206040518083038186803b158015613fe857600080fd5b505af4158015613ffc573d6000803e3d6000fd5b505050506040513d602081101561401257600080fd5b8101908080519060200190929190505050601b6000848152602001908152602001600020600901819055505050565b80601b60006016548152602001908152602001600020600b015401601b60006016548152602001908152602001600020600b018190555080601b6000601654815260200190815260200160002060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401601b6000601654815260200190815260200160002060020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806020540160208190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6141e8601b600060165481526020019081526020016000206000015482613a9490919063ffffffff16565b601b600060165481526020019081526020016000206000018190555061426c601b6000601654815260200190815260200160002060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482613a9490919063ffffffff16565b601b6000601654815260200190815260200160002060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506143576142f3601b600060165481526020019081526020016000206007015483613f0390919063ffffffff16565b601b6000601654815260200190815260200160002060050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a9490919063ffffffff16565b601b6000601654815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008060008060006143c7601d546119d5565b94506143d28561371d565b93505b601b60006016548152602001908152602001600020600d01546001601c540110156147035760066103e88581151561440957fe5b06148015614441575067016345785d8a00006001601c5481548110151561442c57fe5b90600052602060002090600702016005015410155b15614571576001601c5481548110151561445757fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600c54606460145481151561449c57fe5b040292506144af81601c54856001614b92565b600d5460646014548115156144c057fe5b04029150600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdb66236836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561454a57600080fd5b505af115801561455e573d6000803e3d6000fd5b5050505050818360145403036014819055505b60086103e8601c54860181151561458457fe5b061480156145bc575067016345785d8a00006001601c548154811015156145a757fe5b90600052602060002090600702016005015410155b156146ec576001601c548154811015156145d257fe5b906000526020600020906007020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600c54606460155481151561461757fe5b0402925061462a81601c54856000614b92565b600d54606460155481151561463b57fe5b04029150600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdb66236836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b1580156146c557600080fd5b505af11580156146d9573d6000803e3d6000fd5b5050505050818360155403036015819055505b6001840193506001601c5401601c819055506143d5565b5050505050565b60008060008060008060008060648981151561472257fe5b049750600d548802965060105488029550600e5488029450600f548802935083858789010101925061475d838a613a7390919063ffffffff16565b915061476882614b40565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e947962b878d6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b15801561482557600080fd5b505af1158015614839573d6000803e3d6000fd5b5050505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdb66236886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b1580156148c457600080fd5b505af11580156148d8573d6000803e3d6000fd5b5050505050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636f0b5180868d6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506000604051808303818588803b15801561499a57600080fd5b505af11580156149ae573d6000803e3d6000fd5b50505050506149e0601b60008c8152602001908152602001600020600001546103e88602614b1690919063ffffffff16565b9050614a0b601b60008c81526020019081526020016000206007015482613a9490919063ffffffff16565b601b60008c8152602001908152602001600020600701819055505050505050505050505050565b6000806016541415614a4357614b12565b614a4f826016546150bb565b5060016016540390505b601960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481118015614aab575060165460148201115b15614b1157614aba82826150bb565b601a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600181039050614a59565b5b5050565b600080600083111515614b2857600080fd5b8284811515614b3357fe5b0490508091505092915050565b600080600080606485811515614b5257fe5b0493506012548402925060115484029150818386030390508260155401601581905550816014540160148190555080601354016013819055505050505050565b614be482601860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a9490919063ffffffff16565b601860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f9a01e9485601654600187815481101515614c7857fe5b906000526020600020906007020160020154600188815481101515614c9957fe5b90600052602060002090600702016003015487876003811115614cb857fe5b6040518763ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018381526020018281526020019650505050505050600060405180830381600087803b158015614d5957600080fd5b505af1158015614d6d573d6000803e3d6000fd5b5050505050505050565b614d7f615239565b614d876152b0565b601b60006016548152602001908152602001600020600b01548260600181815250506001829080600181540180825580915050906001820390600052602060002090600702016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155505050614e7542610e10601802613a9490919063ffffffff16565b8160600181815250508060600151610e10600302018160800181815250508060600151610e10601802600702018160a0018181525050614eb8816080015161381c565b816020018181525050601b60006016548152602001908152602001600020600b01548160c0018181525050601b60006016548152602001908152602001600020600c01548160e00181815250506001805490508161010001818152505060016016540160168190555080601b60006016548152602001908152602001600020600082015181600001556020820151816001015560408201518160070155606082015181600801556080820151816009015560a082015181600a015560c082015181600b015560e082015181600c015561010082015181600d01559050506013546000819055506000601e8190555060006020819055505050565b6000614fbc611f3d565b9050600060138190555060006014819055506000601581905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdb66236826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b15801561505c57600080fd5b505af1158015615070573d6000803e3d6000fd5b5050505050600a4202601b60006016548152602001908152602001600020600801819055506001600a420201601b600060165481526020019081526020016000206009018190555050565b6000806150c8848461183e565b905060008114156150dc5760009150615232565b615142601b600085815260200190815260200160002060060160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482613a9490919063ffffffff16565b601b600085815260200190815260200160002060060160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506151eb601860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482613a9490919063ffffffff16565b601860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508091505b5092915050565b60e060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b608060405190810160405280600490602082028038833980820191505090505090565b6101206040519081016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815250905600a165627a7a72305820e9fa52ef32ab54cf2b82a296f1d52806d2e994fbc0ce7174296c2fea9f393f59002900000000000000000000000096504e1f83e380984b1d4eccc0e8b9f0559b2ad2",
  "constructorArguments": "00000000000000000000000096504e1f83e380984b1d4eccc0e8b9f0559b2ad2",
  "libraries": [
    {
      "name": "Helper",
      "address": "0xfe00bdcee68a70bbb7559f83fcdb24da2a357ffe"
    }
  ]
}