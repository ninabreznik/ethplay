{
  "address": "0xb9df154925eff26e59a70d2be5b180b727e6c4e7",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ETOToken",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-14\n*/\n\npragma solidity ^0.5.2;\npragma experimental ABIEncoderV2;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev give an account access to this role\n     */\n    function add(Role storage role, address account) internal {\n        require(account != address(0));\n        require(!has(role, account));\n\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev remove an account's access to this role\n     */\n    function remove(Role storage role, address account) internal {\n        require(account != address(0));\n        require(has(role, account));\n\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0));\n        return role.bearer[account];\n    }\n}\ncontract ETORoles {\n        using Roles for Roles.Role;\n\n        constructor() internal {\n                _addAuditWriter(msg.sender);\n                _addAssetSeizer(msg.sender);\n                _addKycProvider(msg.sender);\n                _addAssetFreezer(msg.sender);\n                _addUserManager(msg.sender);\n        }\n\n        /*\n         * Audit Writer functions\n         */\n        event AuditWriterAdded(address indexed account);\n        event AuditWriterRemoved(address indexed account);\n\n        Roles.Role private _auditWriters;\n\n        modifier onlyAuditWriter() {\n                require(isAuditWriter(msg.sender));\n                _;\n        }\n\n        function isAuditWriter(address account) public view returns (bool) {\n                return _auditWriters.has(account);\n        }\n\n        function addAuditWriter(address account) public onlyUserManager {\n                _addAuditWriter(account);\n        }\n\n        function renounceAuditWriter() public {\n                _removeAuditWriter(msg.sender);\n        }\n\n        function _addAuditWriter(address account) internal {\n                _auditWriters.add(account);\n                emit AuditWriterAdded(account);\n        }\n\n        function _removeAuditWriter(address account) internal {\n                _auditWriters.remove(account);\n                emit AuditWriterRemoved(account);\n        }\n\n        /*\n         * KYC Provider functions\n         */\n        event KycProviderAdded(address indexed account);\n        event KycProviderRemoved(address indexed account);\n\n        Roles.Role private _kycProviders;\n\n        modifier onlyKycProvider() {\n                require(isKycProvider(msg.sender));\n                _;\n        }\n\n        function isKycProvider(address account) public view returns (bool) {\n                return _kycProviders.has(account);\n        }\n\n        function addKycProvider(address account) public onlyUserManager {\n                _addKycProvider(account);\n        }\n\n        function renounceKycProvider() public {\n                _removeKycProvider(msg.sender);\n        }\n\n        function _addKycProvider(address account) internal {\n                _kycProviders.add(account);\n                emit KycProviderAdded(account);\n        }\n\n        function _removeKycProvider(address account) internal {\n                _kycProviders.remove(account);\n                emit KycProviderRemoved(account);\n        }\n\n        /*\n         * Asset Seizer functions\n         */\n        event AssetSeizerAdded(address indexed account);\n        event AssetSeizerRemoved(address indexed account);\n\n        Roles.Role private _assetSeizers;\n\n        modifier onlyAssetSeizer() {\n                require(isAssetSeizer(msg.sender));\n                _;\n        }\n\n        function isAssetSeizer(address account) public view returns (bool) {\n                return _assetSeizers.has(account);\n        }\n\n        function addAssetSeizer(address account) public onlyUserManager {\n                _addAssetSeizer(account);\n        }\n\n        function renounceAssetSeizer() public {\n                _removeAssetSeizer(msg.sender);\n        }\n\n        function _addAssetSeizer(address account) internal {\n                _assetSeizers.add(account);\n                emit AssetSeizerAdded(account);\n        }\n\n        function _removeAssetSeizer(address account) internal {\n                _assetSeizers.remove(account);\n                emit AssetSeizerRemoved(account);\n        }\n\n        /*\n         * Asset Freezer functions\n         */\n        event AssetFreezerAdded(address indexed account);\n        event AssetFreezerRemoved(address indexed account);\n\n        Roles.Role private _assetFreezers;\n\n        modifier onlyAssetFreezer() {\n                require(isAssetFreezer(msg.sender));\n                _;\n        }\n\n        function isAssetFreezer(address account) public view returns (bool) {\n                return _assetFreezers.has(account);\n        }\n\n        function addAssetFreezer(address account) public onlyUserManager {\n                _addAssetFreezer(account);\n        }\n\n        function renounceAssetFreezer() public {\n                _removeAssetFreezer(msg.sender);\n        }\n\n        function _addAssetFreezer(address account) internal {\n                _assetFreezers.add(account);\n                emit AssetFreezerAdded(account);\n        }\n\n        function _removeAssetFreezer(address account) internal {\n                _assetFreezers.remove(account);\n                emit AssetFreezerRemoved(account);\n        }\n\n        /*\n         * User Manager functions\n         */\n        event UserManagerAdded(address indexed account);\n        event UserManagerRemoved(address indexed account);\n\n        Roles.Role private _userManagers;\n\n        modifier onlyUserManager() {\n                require(isUserManager(msg.sender));\n                _;\n        }\n\n        function isUserManager(address account) public view returns (bool) {\n                return _userManagers.has(account);\n        }\n\n        function addUserManager(address account) public onlyUserManager {\n                _addUserManager(account);\n        }\n\n        function renounceUserManager() public {\n                _removeUserManager(msg.sender);\n        }\n\n        function _addUserManager(address account) internal {\n                _userManagers.add(account);\n                emit UserManagerAdded(account);\n        }\n\n        function _removeUserManager(address account) internal {\n                _userManagers.remove(account);\n                emit UserManagerRemoved(account);\n        }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev Total number of tokens in existence\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner The address to query the balance of.\n     * @return A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n     * @dev Transfer token to a specified address\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _transfer(from, to, value);\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Transfer token for a specified addresses\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param value The amount to be transferred.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Approve an address to spend another addresses' tokens.\n     * @param owner The address that owns the tokens.\n     * @param spender The address that will spend the tokens.\n     * @param value The number of tokens that can be spent.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(spender != address(0));\n        require(owner != address(0));\n\n        _allowed[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _burn(account, value);\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n    }\n}\n\ncontract MinterRole {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(msg.sender);\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(msg.sender));\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(msg.sender);\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n}\n\n\ncontract ETOVotes {\n        event VoteOpen(uint256 _id, uint _deadline);\n        event VoteFinished(uint256 _id, bool _result);\n\n        // How many blocks should we wait before the vote can be closed\n        uint private VOTE_LENGTH;\n        mapping (uint256 => Vote) private votes;\n\n        struct Voter {\n                address id;\n                bool vote;\n        }\n\n        struct Vote {\n                uint256 deadline;\n                Voter[] voters;\n                mapping(address =>uint) votersIndex;\n        }\n\n        constructor() public {\n\n        }\n\n        function vote(uint256 _id, bool _vote) public {\n                // check only new voters\n                require (votes[_id].votersIndex[msg.sender] == 0, \"Address already voted\");\n                require (votes[_id].deadline > 0, \"Dispute not available\");\n                votes[_id].voters.push(Voter(msg.sender, _vote));\n                votes[_id].votersIndex[msg.sender] = votes[_id].voters.length;\n        }\n\n        function openDispute(uint256 _id) external {\n                require(votes[_id].deadline == 0, \"Dispute already ongoing\");\n                votes[_id].deadline = now + VOTE_LENGTH;\n                emit VoteOpen(_id, votes[_id].deadline);\n                vote(_id, true);\n        }\n\n        /**\n        * @dev Once the deadline is reached this function should be called to get decision.\n        * @param _id data source id.\n        */\n        function triggerDecision(uint256 _id) external {\n                // Maybe we can get rid of a require\n                require(votes[_id].deadline > 0, \"Dispute not available\");\n                require(now > votes[_id].deadline, \"Dispute deadline not reached\");\n                // prevent method to be called again before its done\n                votes[_id].deadline = 0;\n                uint256 negativeVotes = 0;\n                uint256 positiveVotes = 0;\n                uint totalVoters = votes[_id].voters.length;\n                for (uint i = 0; i < totalVoters; i++){\n                        if (votes[_id].voters[i].vote)\n                                negativeVotes++;\n                        else\n                                positiveVotes++;\n                }\n                bool result = (positiveVotes > negativeVotes);\n                delete votes[_id];\n                emit VoteFinished(_id, result);\n        }\n\n        /**\n        * @dev get dispute status.\n        * @param _id data source id.\n        */\n        function isDisputeOpen(uint256 _id) external view returns (bool) {\n                return (votes[_id].deadline > 0);\n        }\n\n        /**\n        * @dev check if address voted already.\n        * @param _id data source identifier.\n        */\n        function didCastVote(uint256 _id) external view returns (bool){\n                return (votes[_id].votersIndex[msg.sender]>0);\n        }\n}\n\ncontract ETOToken is ERC20Mintable, ETORoles, ETOVotes {\n        address owner;\n    \n        enum AssetStatuses {ACTIVE, FROZEN, ISSUED, LISTED, INESCROW}\n        enum CompanyStatuses {ININCORPORATION, ACTIVE, INLIQUIDATION}\n        struct TokenCapabilities {\n                bool Voting;\n                bool Dividend;\n                string[] CorporateActions;\n        }\n\n        /* ETO investors */\n        mapping(address => bool) investorWhitelist;\n        address[] investorWhitelistLUT;\n\n        /* ETO contract parameters */\n        string public constant tokenName = \"ETOToken\";\n        string public constant symbol = \"ETO\";\n        uint8 public constant decimals = 0;\n\n        /* Listing parameters */\n        string public ISIN;\n        string public ITIN;\n        string public ValorNumber;\n        AssetStatuses public AssetStatus;\n        //ufixed public LiquidationProceeds;\n        string public TaxDomicile;\n        TokenCapabilities public Capabilities;\n        //ufixed public VotePercentage;\n        //ufixed public IssuancePrice;\n        string[] public Currencies;\n        uint256 public SalesStart;\n        uint256 public SalesEnd;\n        uint256 public TradeStart;\n        uint256 public IssuanceStart;\n        uint256 public IssuePaymentDate;\n        uint256 public InitialFixingDate;\n        string public MarketMaker;\n        string public MainPayingAgent;\n        //ufixed public SmallestTradableDenomination;\n        uint256 public TickSize;\n        uint256 public NextDividendDate;\n        string public DividendType;\n        //ufixed public DividendTax;\n        //ufixed public PercentageDividend;\n        string public CompanyName;\n        CompanyStatuses public CompanyStatus;\n        string public CompanyLegalForm;\n\n        /* Tag- and Drag along parameters */\n        uint256 tagAlongLowerBound;\n        uint256 dragAlongUpperBound;\n        uint256 tagAlongPeriod;\n        uint256 dragAlongPeriod;\n\n        /* Audit logging */\n        mapping(uint256 => uint256) auditHashes;\n\n        /* Open transfer requests: receiver => (timestamp, amount) */\n        struct TransferRequest {\n                uint256 amount;\n                uint256 timestamp;\n        }\n\n        struct TagAlongEntry {\n                address from;\n                uint256 amount;\n        }\n        mapping(address => TransferRequest) transferRequests;\n        mapping(address => TagAlongEntry[]) tagAlongRegister;\n\n        /* Events in the ETO contract */\n        // Transaction related events\n        event AssetsSeized(address seizee, uint256 amount);\n        event AssetsUnseized(address seizee, uint256 amount);\n        event InvestorWhitelisted(address investor);\n        event InvestorBlacklisted(address investor);\n        event TagAlongOpportunity(address receiver, uint256 amount);\n        event DividendPayout(address receiver, uint256 amount);\n        event TokensGenerated(uint256 amount);\n\n        /**\n        * @dev Constructor that defines contract parameters\n        */\n        constructor() public {\n                AssetStatus = AssetStatuses.ACTIVE;\n                TaxDomicile = \"CH\";\n                Capabilities.Voting = true;\n                Capabilities.Dividend = true;\n                CompanyName = \"BlockState\";\n                CompanyStatus = CompanyStatuses.ACTIVE;\n                CompanyLegalForm = \"AG\";\n                \n                owner = msg.sender;\n        }\n        \n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n\n        /* Variable update events */\n        event ISINUpdated(string newValue);\n        event ITINUpdated(string newValue);\n        event ValorNumberUpdated(string newValue);\n        event AssetStatusUpdated(AssetStatuses newValue);\n        //event LiquidationProceedsUpdated(ufixed newValue);\n        event CurrenciesUpdated(string[]  newValue);\n        event TaxDomicileUpdated(string newValue);\n        event CapabilitiesUpdated(TokenCapabilities newValue);\n        //event VotePercentageUpdated(ufixed newValue);\n        //event IssuancePriceUpdated(ufixed newValue);\n        event SalesStartUpdated(uint256 newValue);\n        event SalesEndUpdated(uint256 newValue);\n        event TradeStartUpdated(uint256 newValue);\n        event IssuanceStartUpdated(uint256 newValue);\n        event IssuePaymentDateUpdated(uint256 newValue);\n        event InitialFixingDateUpdated(uint256 newValue);\n        event MarketMakerUpdated(string newValue);\n        event MainPayingAgentUpdated(string newValue);\n        //event SmallestTradableDenominationUpdated(ufixed newValue);\n        event TickSizeUpdated(uint256 newValue);\n        event NextDividendDateUpdated(uint256 newValue);\n        event DividendTypeUpdated(string newValue);\n        //event DividendTaxUpdated(ufixed newValue);\n        //event PercentageDividendUpdated(ufixed newValue);\n        event CompanyNameUpdated(string newValue);\n        event CompanyStatusUpdated(CompanyStatuses newValue);\n        event CompanyLegalFormUpdated(string newValue);\n\n        /* Variable Update Functions */\n        function setISIN(string memory newValue) public onlyOwner {\n                ISIN = newValue;\n                emit ISINUpdated(newValue);\n        }\n        function setITIN(string memory newValue) public onlyOwner {\n                ITIN = newValue;\n                emit ITINUpdated(newValue);\n        }\n        function setValorNumber(string memory newValue) public onlyOwner {\n                ValorNumber = newValue;\n                emit ValorNumberUpdated(newValue);\n        }\n        function setAssetStatus(AssetStatuses newValue) public onlyOwner {\n                AssetStatus = newValue;\n                emit AssetStatusUpdated(newValue);\n        }\n        /*function setLiquidationProceeds(ufixed newValue) public onlyOwner {\n                LiquidationProceeds = newValue;\n                emit LiquidationProceedsUpdated(newValue);\n        }*/\n        function setTaxDomicile(string memory newValue) public onlyOwner {\n                TaxDomicile= newValue;\n                emit TaxDomicileUpdated(newValue);\n        }\n        function setCapabilities(TokenCapabilities memory newValue) public onlyOwner {\n                Capabilities = newValue;\n                emit CapabilitiesUpdated(newValue);\n        }\n        /*function setVotePercentage(ufixed newValue) public onlyOwner {\n                VotePercentage = newValue;\n                emit VotePercentageUpdated(newValue);\n        }\n        function setIssuancePrice(ufixed newValue) public onlyOwner {\n                IssuancePrice = newValue;\n                emit IssuancePriceUpdated(newValue);\n        }*/\n        function setCurrencies(string[] memory newValue) public onlyOwner {\n                Currencies = newValue;\n                emit CurrenciesUpdated(newValue);\n        }\n        function setSalesStart(uint256 newValue) public onlyOwner {\n                SalesStart = newValue;\n                emit SalesStartUpdated(newValue);\n        }\n        function setSalesEnd(uint256 newValue) public onlyOwner {\n                SalesEnd = newValue;\n                emit SalesEndUpdated(newValue);\n        }\n        function setTradeStart(uint256 newValue) public onlyOwner {\n                TradeStart = newValue;\n                emit TradeStartUpdated(newValue);\n        }\n        function setIssuanceStart(uint256 newValue) public onlyOwner {\n                IssuanceStart = newValue;\n                emit IssuanceStartUpdated(newValue);\n        }\n        function setIssuePaymentDate(uint256 newValue) public onlyOwner {\n                IssuePaymentDate = newValue;\n                emit IssuePaymentDateUpdated(newValue);\n        }\n        function setInitialFixingDate(uint256 newValue) public onlyOwner {\n                InitialFixingDate = newValue;\n                emit InitialFixingDateUpdated(newValue);\n        }\n        function setMarketMaker(string memory newValue) public onlyOwner {\n                MarketMaker = newValue;\n                emit MarketMakerUpdated(newValue);\n        }\n        function setMainPayingAgent(string memory newValue) public onlyOwner {\n                MainPayingAgent = newValue;\n                emit MainPayingAgentUpdated(newValue);\n        }\n        /*function setSmallestTradableDenomination(ufixed newValue) public onlyOwner {\n                SmallestTradableDenomination = newValue;\n                emit SmallestTradableDenominationUpdated(newValue);\n        }*/\n        function setTickSize(uint256 newValue) public onlyOwner {\n                TickSize = newValue;\n                emit TickSizeUpdated(newValue);\n        }\n        function setNextDividendDate(uint256 newValue) public onlyOwner {\n                NextDividendDate = newValue;\n                emit NextDividendDateUpdated(newValue);\n        }\n        function setDividendType(string memory newValue) public onlyOwner {\n                DividendType = newValue;\n                emit DividendTypeUpdated(newValue);\n        }\n        /*function setDividendTax(ufixed newValue) public onlyOwner {\n                DividendTax = newValue;\n                emit DividendTaxUpdated(newValue);\n        }\n        function setPercentageDividend(ufixed newValue) public onlyOwner {\n                PercentageDividend = newValue;\n                emit PercentageDividendUpdated(newValue);\n        }*/\n        function setCompanyName(string memory newValue) public onlyOwner {\n                CompanyName = newValue;\n                emit CompanyNameUpdated(newValue);\n        }\n        function setCompanyStatus(CompanyStatuses newValue) public onlyOwner {\n                CompanyStatus = newValue;\n                emit CompanyStatusUpdated(newValue);\n        }\n        function setCompanyLegalForm(string memory newValue) public onlyOwner {\n                CompanyLegalForm = newValue;\n                emit CompanyLegalFormUpdated(newValue);\n        }\n\n        /* Seize assets */\n        function seizeAssets(address seizee, uint256 seizableAmount) public onlyAssetSeizer {\n                require(balanceOf(seizee) >= seizableAmount);\n                transferFrom(seizee, msg.sender, seizableAmount);\n                emit AssetsSeized(seizee, seizableAmount);\n        }\n\n        /* Release seized assets */\n        function releaseAssets(address seizee, uint256 seizedAmount) public onlyAssetSeizer {\n                require(balanceOf(msg.sender) >= seizedAmount);\n                transferFrom(msg.sender, seizee, seizedAmount);\n                emit AssetsUnseized(seizee, seizedAmount);\n        }\n\n        /* Add investor to the whitelist */\n        function whitelistInvestor(address investor) public onlyKycProvider {\n                investorWhitelist[investor] = true;\n                investorWhitelistLUT.push(investor);\n                emit InvestorWhitelisted(investor);\n        }\n\n        /* Remove investor from the whitelist */\n        function blacklistInvestor(address investor) public onlyKycProvider {\n                investorWhitelist[investor] = false;\n                for (uint i = 0; i < investorWhitelistLUT.length; i++) {\n                        if (investorWhitelistLUT[i] == investor) {\n                                investorWhitelistLUT[i] = investorWhitelistLUT[investorWhitelistLUT.length];\n                                delete investorWhitelistLUT[investorWhitelistLUT.length];\n                                break;\n                        }\n                }\n                emit InvestorBlacklisted(investor);\n        }\n\n        /* Overwrite transfer() to respect the whitelist, tag- and drag along rules */\n        function transfer(address _to, uint256 _value) public returns (bool) {\n                require(investorWhitelist[_to] == true);\n                return super.transfer(_to, _value);\n        }\n\n        /* Notify other investors of an opportunity to tag along. TODO: implement */\n        \n\n        /* Generate tokens */\n        function generateTokens(uint256 amount, address assetReceiver) public onlyOwner {\n                _mint(assetReceiver, amount);\n        }\n\n        function initiateDividendPayments(uint amount) public returns (bool) {\n                uint dividendPerToken = amount / totalSupply();\n                for (uint i = 0; i < investorWhitelistLUT.length; i++) {\n                        address currentInvestor = investorWhitelistLUT[i];\n                        uint256 currentInvestorShares = balanceOf(currentInvestor);\n                        uint256 currentInvestorPayout = dividendPerToken * currentInvestorShares;\n                        emit DividendPayout(currentInvestor, currentInvestorPayout);\n                }\n        }\n\n        function addAuditHash(uint256 hash) public onlyAuditWriter {\n                auditHashes[now] = hash;\n        }\n\n        function getAuditHash(uint256 timestamp) public view returns (uint256) {\n                return auditHashes[timestamp];\n        }\n}",
  "bytecode": "60806040523480156200001157600080fd5b5062000023336200022f60201b60201c565b62000034336200029060201b60201c565b6200004533620002f160201b60201c565b62000056336200035260201b60201c565b6200006733620003b360201b60201c565b62000078336200041460201b60201c565b6000601160006101000a81548160ff021916908360048111156200009857fe5b02179055506040518060400160405280600281526020017f434800000000000000000000000000000000000000000000000000000000000081525060129080519060200190620000ea929190620005be565b506001601360000160006101000a81548160ff0219169083151502179055506001601360000160016101000a81548160ff0219169083151502179055506040518060400160405280600a81526020017f426c6f636b5374617465000000000000000000000000000000000000000000008152506021908051906020019062000174929190620005be565b506001602260006101000a81548160ff021916908360028111156200019557fe5b02179055506040518060400160405280600281526020017f414700000000000000000000000000000000000000000000000000000000000081525060239080519060200190620001e7929190620005be565b5033600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200066d565b6200024a8160036200047560201b62003eb61790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b620002ab8160046200047560201b62003eb61790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6f755026868a359adacf872187c132f6999009ff5c425630b44203ba2b0e8bee60405160405180910390a250565b6200030c8160066200047560201b62003eb61790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f766c8ae645b1fb4eeac23be0b646b4fff7bb9fec05c3fb867895ef7cbf06ee6d60405160405180910390a250565b6200036d8160056200047560201b62003eb61790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f2a52978603c914e958ce841ce8b5d85dc60b832626de3e76a0591e31cde140bc60405160405180910390a250565b620003ce8160076200047560201b62003eb61790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbe53155082cfe4babb63cca3de13be71817a0e5d0d29ee6ffb1c080a8dd5f30f60405160405180910390a250565b6200042f8160086200047560201b62003eb61790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f1bbddd29e5beadd1488995d920f674ccb798746c45b132785f11975baff2c64660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620004b057600080fd5b620004c282826200052b60201b60201c565b15620004cd57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200056757600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200060157805160ff191683800117855562000632565b8280016001018555821562000632579182015b828111156200063157825182559160200191906001019062000614565b5b50905062000641919062000645565b5090565b6200066a91905b80821115620006665760008160009055506001016200064c565b5090565b90565b615021806200067d6000396000f3fe608060405234801561001057600080fd5b50600436106104b75760003560e01c80638e64f92211610278578063d951695d1161015c578063eb326235116100ce578063f0e2545b11610092578063f0e2545b14610e9d578063f224845114610eb9578063f379ad7614610ed5578063f54e5abf14610ef3578063f6c8cf7e14610f11578063ffc1b03814610f2d576104b7565b8063eb32623514610dfd578063eb3313f014610e19578063ed3e3e9414610e35578063efaa8d8f14610e51578063efd8465014610e6d576104b7565b8063dff8cabf11610120578063dff8cabf14610d51578063e109575814610d81578063e3a13eaf14610d9f578063e5a20f2314610da9578063e740d19e14610dc5578063eb2f5c1514610de1576104b7565b8063d951695d14610cad578063da04f82b14610ccb578063daa963ad14610ce7578063dc37257414610d17578063dd62ed3e14610d21576104b7565b8063aa271e1a116101f5578063bf7169a4116101b9578063bf7169a414610c01578063c430bcda14610c1d578063c67ba5f114610c39578063c72df4a114610c57578063c9d27afe14610c73578063cd86127c14610c8f576104b7565b8063aa271e1a14610b4b578063ab10f63614610b7b578063ad9fafa914610bab578063b82fc5b814610bc7578063b96524a714610be5576104b7565b80639b5573e91161023c5780639b5573e914610a95578063a457c2d714610ac5578063a785d52d14610af5578063a9059cbb14610aff578063aa06614e14610b2f576104b7565b80638e64f92214610a03578063937a105a14610a3357806395d89b4114610a51578063983b2d5614610a6f5780639865027514610a8b576104b7565b80633a97ad841161039f5780635b50d7241161031c578063727fe23d116102e0578063727fe23d1461096b578063738b62b41461098757806379155e5c146109a55780637abaf4f9146109c1578063827369c2146109dd5780638ba68877146109f9576104b7565b80635b50d724146108c75780636085aa0d146108e35780636c02a931146109015780636e1ab2be1461091f57806370a082311461093b576104b7565b806346f7c0e21161036357806346f7c0e21461081f57806347e5f33c1461084f5780634a46a12d1461086d578063536a26941461088b5780635493af7b146108a9576104b7565b80633a97ad84146107695780633c4bde3b1461079957806340c10f19146107b557806341c04d18146107e5578063443df6d514610801576104b7565b8063218fd1c41161043857806327d00fb0116103fc57806327d00fb0146106ab57806329203ed7146106c75780632bbbaca1146106e3578063313ce567146106ff57806334951cff1461071d5780633950935114610739576104b7565b8063218fd1c41461060457806323b872dd1461062257806323d76d141461065257806324a6afb61461067157806326f5fbf31461068f576104b7565b806314d4881f1161047f57806314d4881f14610560578063155690e41461057c57806315be1b73146105ac57806318160ddd146105c85780631cebb166146105e6576104b7565b8063089a7ee4146104bc578063095ea7b3146104d85780630b836caf146105085780630cfb87701461052657806311f7b22a14610556575b600080fd5b6104d660048036036104d191908101906146ac565b610f49565b005b6104f260048036036104ed919081019061455b565b610fe4565b6040516104ff9190614b15565b60405180910390f35b610510610ffb565b60405161051d9190614b8f565b60405180910390f35b610540600480360361053b91908101906144a7565b611099565b60405161054d9190614b15565b60405180910390f35b61055e6110b6565b005b61057a600480360361057591908101906146ac565b6110c1565b005b610596600480360361059191908101906146ac565b61115c565b6040516105a39190614c75565b60405180910390f35b6105c660048036036105c1919081019061462a565b611179565b005b6105d0611224565b6040516105dd9190614c75565b60405180910390f35b6105ee61122e565b6040516105fb9190614b8f565b60405180910390f35b61060c6112cc565b6040516106199190614b8f565b60405180910390f35b61063c6004803603610637919081019061450c565b61136a565b6040516106499190614b15565b60405180910390f35b61065a61141b565b604051610668929190614b30565b60405180910390f35b610679611447565b6040516106869190614b8f565b60405180910390f35b6106a960048036036106a4919081019061466b565b6114e5565b005b6106c560048036036106c091908101906146ac565b6115dc565b005b6106e160048036036106dc91908101906144a7565b6116b1565b005b6106fd60048036036106f8919081019061462a565b6116cf565b005b61070761177a565b6040516107149190614ce2565b60405180910390f35b6107376004803603610732919081019061462a565b61177f565b005b610753600480360361074e919081019061455b565b61182a565b6040516107609190614b15565b60405180910390f35b610783600480360361077e91908101906146ac565b6118cf565b6040516107909190614b8f565b60405180910390f35b6107b360048036036107ae91908101906144a7565b611988565b005b6107cf60048036036107ca919081019061455b565b6119a6565b6040516107dc9190614b15565b60405180910390f35b6107ff60048036036107fa9190810190614601565b6119ce565b005b610809611a85565b6040516108169190614c75565b60405180910390f35b610839600480360361083491908101906144a7565b611a8b565b6040516108469190614b15565b60405180910390f35b610857611aa8565b6040516108649190614c75565b60405180910390f35b610875611aae565b6040516108829190614b8f565b60405180910390f35b610893611b4c565b6040516108a09190614c75565b60405180910390f35b6108b1611b52565b6040516108be9190614c75565b60405180910390f35b6108e160048036036108dc91908101906146d5565b611b58565b005b6108eb611bc0565b6040516108f89190614b59565b60405180910390f35b610909611bd3565b6040516109169190614b8f565b60405180910390f35b610939600480360361093491908101906146ac565b611c0c565b005b610955600480360361095091908101906144a7565b611ca7565b6040516109629190614c75565b60405180910390f35b6109856004803603610980919081019061462a565b611cef565b005b61098f611d9a565b60405161099c9190614c75565b60405180910390f35b6109bf60048036036109ba91908101906146ac565b611da0565b005b6109db60048036036109d6919081019061455b565b611dcd565b005b6109f760048036036109f2919081019061462a565b611e3d565b005b610a01611ee8565b005b610a1d6004803603610a1891908101906146ac565b611ef3565b604051610a2a9190614b15565b60405180910390f35b610a3b611f52565b604051610a489190614b8f565b60405180910390f35b610a59611ff0565b604051610a669190614b8f565b60405180910390f35b610a896004803603610a8491908101906144a7565b612029565b005b610a93612047565b005b610aaf6004803603610aaa91908101906144a7565b612052565b604051610abc9190614b15565b60405180910390f35b610adf6004803603610ada919081019061455b565b61206f565b604051610aec9190614b15565b60405180910390f35b610afd612114565b005b610b196004803603610b14919081019061455b565b61211f565b604051610b269190614b15565b60405180910390f35b610b496004803603610b4491908101906144a7565b612190565b005b610b656004803603610b6091908101906144a7565b6121ae565b604051610b729190614b15565b60405180910390f35b610b956004803603610b9091908101906144a7565b6121cb565b604051610ba29190614b15565b60405180910390f35b610bc56004803603610bc091908101906146ac565b6121e8565b005b610bcf612283565b604051610bdc9190614c75565b60405180910390f35b610bff6004803603610bfa91908101906146ac565b612289565b005b610c1b6004803603610c16919081019061462a565b612324565b005b610c376004803603610c3291908101906144a7565b6123cf565b005b610c416124d9565b604051610c4e9190614c75565b60405180910390f35b610c716004803603610c6c91908101906146ac565b6124df565b005b610c8d6004803603610c889190810190614711565b61257a565b005b610c976127b2565b604051610ca49190614b8f565b60405180910390f35b610cb5612850565b604051610cc29190614c75565b60405180910390f35b610ce56004803603610ce091908101906144a7565b612856565b005b610d016004803603610cfc91908101906144a7565b612874565b604051610d0e9190614b15565b60405180910390f35b610d1f612891565b005b610d3b6004803603610d3691908101906144d0565b61289c565b604051610d489190614c75565b60405180910390f35b610d6b6004803603610d6691908101906146ac565b612923565b604051610d789190614b15565b60405180910390f35b610d896129ec565b604051610d969190614b8f565b60405180910390f35b610da7612a8a565b005b610dc36004803603610dbe919081019061462a565b612a95565b005b610ddf6004803603610dda919081019061462a565b612b40565b005b610dfb6004803603610df691908101906145d8565b612beb565b005b610e176004803603610e12919081019061455b565b612ca2565b005b610e336004803603610e2e919081019061462a565b612d12565b005b610e4f6004803603610e4a91908101906144a7565b612dbd565b005b610e6b6004803603610e669190810190614597565b612ddb565b005b610e876004803603610e8291908101906146ac565b612e86565b604051610e949190614b15565b60405180910390f35b610eb76004803603610eb291908101906146ac565b612ea8565b005b610ed36004803603610ece91908101906146ac565b613085565b005b610edd613120565b604051610eea9190614b74565b60405180910390f35b610efb613133565b604051610f089190614b8f565b60405180910390f35b610f2b6004803603610f2691908101906146ac565b6131d1565b005b610f476004803603610f4291908101906144a7565b61326c565b005b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fa357600080fd5b806018819055507f27ab5ee1024ade9217f894bd69bf684442713cef159296a8f24a3ee73b94d68181604051610fd99190614c75565b60405180910390a150565b6000610ff1338484613470565b6001905092915050565b601c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110915780601f1061106657610100808354040283529160200191611091565b820191906000526020600020905b81548152906001019060200180831161107457829003601f168201915b505050505081565b60006110af8260066135cf90919063ffffffff16565b9050919050565b6110bf33613661565b565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111b57600080fd5b80601b819055507fc5ac80f31eb5ba8be1dfd0895ed49c22b2f75db4027801dcae66c53434c50546816040516111519190614c75565b60405180910390a150565b600060286000838152602001908152602001600020549050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111d357600080fd5b80601090805190602001906111e9929190613f62565b507f475e497a1dd6978bec36f83db10f26d43edc61d2fc7e9ae703a2c1c663d486c2816040516112199190614bb1565b60405180910390a150565b6000600254905090565b600f8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112c45780601f10611299576101008083540402835291602001916112c4565b820191906000526020600020905b8154815290600101906020018083116112a757829003601f168201915b505050505081565b60218054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113625780601f1061133757610100808354040283529160200191611362565b820191906000526020600020905b81548152906001019060200180831161134557829003601f168201915b505050505081565b60006113778484846136bb565b611410843361140b85600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461388590919063ffffffff16565b613470565b600190509392505050565b60138060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b601d8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114dd5780601f106114b2576101008083540402835291602001916114dd565b820191906000526020600020905b8154815290600101906020018083116114c057829003601f168201915b505050505081565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461153f57600080fd5b80601360008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff021916908315150217905550604082015181600101908051906020019061159e929190613fe2565b509050507fa70fc5ca1a1672ebe45892ff90d02fbe9e41ba4d7ebec8b1ab40e702f100de2a816040516115d19190614c53565b60405180910390a150565b6000600a60008381526020019081526020016000206000015414611635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162c90614c13565b60405180910390fd5b6009544201600a6000838152602001908152602001600020600001819055507fd1a72fd219f08fda3de2ecbd9353601316e78cba51f6834962a1a704e0b8ff9481600a60008481526020019081526020016000206000015460405161169b929190614cb9565b60405180910390a16116ae81600161257a565b50565b6116ba33612052565b6116c357600080fd5b6116cc816138a5565b50565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461172957600080fd5b80600f908051906020019061173f929190613f62565b507f580537a9be3815c504abbe5febb592699a99159ec814ed6ccd44cbe68316e0018160405161176f9190614bb1565b60405180910390a150565b600081565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117d957600080fd5b80601d90805190602001906117ef929190613f62565b507fb74e0d8ea6ff62278cbba0342c5900d414ae965185b29e3361b33357fe5851f98160405161181f9190614bb1565b60405180910390a150565b60006118c533846118c085600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546138ff90919063ffffffff16565b613470565b6001905092915050565b601581815481106118dc57fe5b906000526020600020016000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119805780601f1061195557610100808354040283529160200191611980565b820191906000526020600020905b81548152906001019060200180831161196357829003601f168201915b505050505081565b61199133612052565b61199a57600080fd5b6119a38161391e565b50565b60006119b1336121ae565b6119ba57600080fd5b6119c48383613978565b6001905092915050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a2857600080fd5b80602260006101000a81548160ff02191690836002811115611a4657fe5b02179055507f800a9479095a863ffa9eafb54a6ccee6c8231fd1d530d21c68a89f6611f12c8e81604051611a7a9190614b74565b60405180910390a150565b601f5481565b6000611aa18260076135cf90919063ffffffff16565b9050919050565b60195481565b60238054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b445780601f10611b1957610100808354040283529160200191611b44565b820191906000526020600020905b815481529060010190602001808311611b2757829003601f168201915b505050505081565b60185481565b601b5481565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bb257600080fd5b611bbc8183613978565b5050565b601160009054906101000a900460ff1681565b6040518060400160405280600881526020017f45544f546f6b656e00000000000000000000000000000000000000000000000081525081565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c6657600080fd5b80601a819055507fefcd5983f8966f85a1beab993e6965234c195734f03d92a638f9a8a540882efd81604051611c9c9190614c75565b60405180910390a150565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d4957600080fd5b8060239080519060200190611d5f929190613f62565b507fe0ee0a06397300b9ee9ccb8bca03066434c350c7d66ca09f50713631ab8cc51c81604051611d8f9190614bb1565b60405180910390a150565b60175481565b611da933612874565b611db257600080fd5b80602860004281526020019081526020016000208190555050565b611dd633611099565b611ddf57600080fd5b80611de933611ca7565b1015611df457600080fd5b611dff33838361136a565b507f9b49421010c91eb868ade1a3d790ade3e6a5390469cc7c9bb230753dc5350b0d8282604051611e31929190614aca565b60405180910390a15050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e9757600080fd5b8060209080519060200190611ead929190613f62565b507fbe0ea19c444acc8abd2a9ba28ca980868d7339368514bb4b87b059886038046b81604051611edd9190614bb1565b60405180910390a150565b611ef133613aca565b565b600080600a600084815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054119050919050565b600e8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fe85780601f10611fbd57610100808354040283529160200191611fe8565b820191906000526020600020905b815481529060010190602001808311611fcb57829003601f168201915b505050505081565b6040518060400160405280600381526020017f45544f000000000000000000000000000000000000000000000000000000000081525081565b612032336121ae565b61203b57600080fd5b61204481613b24565b50565b61205033613b7e565b565b60006120688260086135cf90919063ffffffff16565b9050919050565b600061210a338461210585600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461388590919063ffffffff16565b613470565b6001905092915050565b61211d33613bd8565b565b600060011515600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461217e57600080fd5b6121888383613c32565b905092915050565b61219933612052565b6121a257600080fd5b6121ab81613c49565b50565b60006121c48260036135cf90919063ffffffff16565b9050919050565b60006121e18260056135cf90919063ffffffff16565b9050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461224257600080fd5b80601e819055507f0f3fe4f6152dd96bb4bf6dcd53cb2b6ed00d05f13dc657c0b34ed98b14ba7d50816040516122789190614c75565b60405180910390a150565b601a5481565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122e357600080fd5b806016819055507f5751e663f71910ece66fff5582dd2d695a5f7de8ac4a923f89c8aa79f8314774816040516123199190614c75565b60405180910390a150565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461237e57600080fd5b80600e9080519060200190612394929190613f62565b507f151eb2660ce8e0e86c28216e201729b4c1cf81c6beec1d384329b0a595837333816040516123c49190614bb1565b60405180910390a150565b6123d8336121cb565b6123e157600080fd5b6001600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600d8190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550507fded95a7461813082c997645a1b5e07eb321073a96b7c65dc7f793625383f896e816040516124ce9190614aaf565b60405180910390a150565b601e5481565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461253957600080fd5b80601f819055507fdd507ff31081cc1e1184f24c03af80e4afe70132fb46ff726e87a1ea173f0ded8160405161256f9190614c75565b60405180910390a150565b6000600a600084815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414612610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260790614bf3565b60405180910390fd5b6000600a60008481526020019081526020016000206000015411612669576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266090614bd3565b60405180910390fd5b600a600083815260200190815260200160002060010160405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183151581525090806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908315150217905550505050600a600083815260200190815260200160002060010180549050600a600084815260200190815260200160002060020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128485780601f1061281d57610100808354040283529160200191612848565b820191906000526020600020905b81548152906001019060200180831161282b57829003601f168201915b505050505081565b60165481565b61285f33612052565b61286857600080fd5b61287181613ca3565b50565b600061288a8260046135cf90919063ffffffff16565b9050919050565b61289a33613cfd565b565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008061292e611224565b838161293657fe5b04905060008090505b600d805490508110156129e5576000600d828154811061295b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600061299382611ca7565b9050600081850290507f7065eb5ddb198859f7a7eabe44eade583a6c7a713401dd2e537af7eccc070aca83826040516129cd929190614aca565b60405180910390a1505050808060010191505061293f565b5050919050565b60108054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a825780601f10612a5757610100808354040283529160200191612a82565b820191906000526020600020905b815481529060010190602001808311612a6557829003601f168201915b505050505081565b612a9333613d57565b565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612aef57600080fd5b8060129080519060200190612b05929190613f62565b507fcf21a739f8dc431e45917c2a1e9ebfae6f21f96d7fc3524bd54155ca827307d581604051612b359190614bb1565b60405180910390a150565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612b9a57600080fd5b80601c9080519060200190612bb0929190613f62565b507fba70d013080ca287492b0b677008e94fe92140d3b57c0b33d298614a04e57c8081604051612be09190614bb1565b60405180910390a150565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612c4557600080fd5b80601160006101000a81548160ff02191690836004811115612c6357fe5b02179055507f6d4058bcf506e99a9bd1c6aa09adf9a5cb42f4cd66d50bfd60f276c3f7dbf29f81604051612c979190614b59565b60405180910390a150565b612cab33611099565b612cb457600080fd5b80612cbe83611ca7565b1015612cc957600080fd5b612cd482338361136a565b507f63095c8d49cd5d2f70c55ff073310775845bbe2cb4e2d6dfa5d3f156cea492a78282604051612d06929190614aca565b60405180910390a15050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612d6c57600080fd5b8060219080519060200190612d82929190613f62565b507f6a4f7311c3a118a9ac7b6bde7aa29b5e57167b2014a452200c8f90f1c799d4ec81604051612db29190614bb1565b60405180910390a150565b612dc633612052565b612dcf57600080fd5b612dd881613db1565b50565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612e3557600080fd5b8060159080519060200190612e4b929190614042565b507fd65554827d197a97ca4737b555a4274beee520a4308ab715628d725ad524c43481604051612e7b9190614af3565b60405180910390a150565b600080600a600084815260200190815260200160002060000154119050919050565b6000600a60008381526020019081526020016000206000015411612f01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ef890614bd3565b60405180910390fd5b600a6000828152602001908152602001600020600001544211612f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5090614c33565b60405180910390fd5b6000600a600083815260200190815260200160002060000181905550600080905060008090506000600a600085815260200190815260200160002060010180549050905060008090505b8181101561300f57600a60008681526020019081526020016000206001018181548110612fcc57fe5b9060005260206000200160000160149054906101000a900460ff1615612ff9578380600101945050613002565b82806001019350505b8080600101915050612fa3565b5060008383119050600a600086815260200190815260200160002060008082016000905560018201600061304391906140a2565b50507f513eb7294e18c764d616fa41943ef285743c883f0845bb696e5ea40c3718fd468582604051613076929190614c90565b60405180910390a15050505050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146130df57600080fd5b806017819055507f1ef19029c86d60a76f96a93b89746dd4abda3cd609412dcb160838139d9c1e3f816040516131159190614c75565b60405180910390a150565b602260009054906101000a900460ff1681565b60128054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131c95780601f1061319e576101008083540402835291602001916131c9565b820191906000526020600020905b8154815290600101906020018083116131ac57829003601f168201915b505050505081565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461322b57600080fd5b806019819055507f4f0ed09c0519f00f59f702b0ecde97285e078093bd924e77e0f0d6e7bec72ebd816040516132619190614c75565b60405180910390a150565b613275336121cb565b61327e57600080fd5b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060008090505b600d80549050811015613435578173ffffffffffffffffffffffffffffffffffffffff16600d828154811061330d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561342857600d80805490508154811061336557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d828154811061339d57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600d8080549050815481106133f657fe5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055613435565b80806001019150506132dc565b507f45876485d2f19b25ec8e89e9f6411c51d0ec5dbc3a924c2bb99112e1169faf7c816040516134659190614aaf565b60405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156134aa57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156134e457600080fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516135c29190614c75565b60405180910390a3505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561360a57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b613675816006613e0b90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167faf1e25ad110ffb62340b34b828b80e8148200f0bae8a0de09744cdea4242825a60405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156136f557600080fd5b613746816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461388590919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506137d9816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546138ff90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516138789190614c75565b60405180910390a3505050565b60008282111561389457600080fd5b600082840390508091505092915050565b6138b9816006613eb690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f766c8ae645b1fb4eeac23be0b646b4fff7bb9fec05c3fb867895ef7cbf06ee6d60405160405180910390a250565b60008082840190508381101561391457600080fd5b8091505092915050565b613932816005613eb690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f2a52978603c914e958ce841ce8b5d85dc60b832626de3e76a0591e31cde140bc60405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156139b257600080fd5b6139c7816002546138ff90919063ffffffff16565b600281905550613a1e816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546138ff90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613abe9190614c75565b60405180910390a35050565b613ade816005613e0b90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fa7e7bdb519874ae27edb7c60e6857782e3f6f38d0b6c0dc9f54ad2cd001a4ed960405160405180910390a250565b613b38816003613eb690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b613b92816003613e0b90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b613bec816004613e0b90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fb2f286afcd3737ae2e1a663155ec1f1ae6359f922efd1ff87c384edb7507dd1d60405160405180910390a250565b6000613c3f3384846136bb565b6001905092915050565b613c5d816004613eb690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6f755026868a359adacf872187c132f6999009ff5c425630b44203ba2b0e8bee60405160405180910390a250565b613cb7816008613eb690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f1bbddd29e5beadd1488995d920f674ccb798746c45b132785f11975baff2c64660405160405180910390a250565b613d11816007613e0b90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fc94c46e4609d5e9be07b0bc4cbd148d7b65b7c958a9a541b04abb5974cf30d4a60405160405180910390a250565b613d6b816008613e0b90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f9bf64499af09ff069347ad1132fbc1991de802dd0d1a288a5ba9fc868f27310160405160405180910390a250565b613dc5816007613eb690919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fbe53155082cfe4babb63cca3de13be71817a0e5d0d29ee6ffb1c080a8dd5f30f60405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613e4557600080fd5b613e4f82826135cf565b613e5857600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613ef057600080fd5b613efa82826135cf565b15613f0457600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613fa357805160ff1916838001178555613fd1565b82800160010185558215613fd1579182015b82811115613fd0578251825591602001919060010190613fb5565b5b509050613fde91906140c3565b5090565b828054828255906000526020600020908101928215614031579160200282015b828111156140305782518290805190602001906140209291906140e8565b5091602001919060010190614002565b5b50905061403e9190614168565b5090565b828054828255906000526020600020908101928215614091579160200282015b828111156140905782518290805190602001906140809291906140e8565b5091602001919060010190614062565b5b50905061409e9190614168565b5090565b50805460008255906000526020600020908101906140c09190614194565b50565b6140e591905b808211156140e15760008160009055506001016140c9565b5090565b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061412957805160ff1916838001178555614157565b82800160010185558215614157579182015b8281111561415657825182559160200191906001019061413b565b5b50905061416491906140c3565b5090565b61419191905b8082111561418d576000818161418491906141ee565b5060010161416e565b5090565b90565b6141eb91905b808211156141e757600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff02191690555060010161419a565b5090565b90565b50805460018160011615610100020316600290046000825580601f106142145750614233565b601f01602090049060005260206000209081019061423291906140c3565b5b50565b60008135905061424581614f82565b92915050565b600082601f83011261425c57600080fd5b813561426f61426a82614d2a565b614cfd565b9150818183526020840193506020810190508360005b838110156142b5578135860161429b8882614372565b845260208401935060208301925050600181019050614285565b5050505092915050565b600082601f8301126142d057600080fd5b81356142e36142de82614d52565b614cfd565b9150818183526020840193506020810190508360005b83811015614329578135860161430f8882614372565b8452602084019350602083019250506001810190506142f9565b5050505092915050565b60008135905061434281614f99565b92915050565b60008135905061435781614fb0565b92915050565b60008135905061436c81614fc0565b92915050565b600082601f83011261438357600080fd5b813561439661439182614d7a565b614cfd565b915080825260208301602083018583830111156143b257600080fd5b6143bd838284614f15565b50505092915050565b600082601f8301126143d757600080fd5b81356143ea6143e582614da6565b614cfd565b9150808252602083016020830185838301111561440657600080fd5b614411838284614f15565b50505092915050565b60006060828403121561442c57600080fd5b6144366060614cfd565b9050600061444684828501614333565b600083015250602061445a84828501614333565b602083015250604082013567ffffffffffffffff81111561447a57600080fd5b6144868482850161424b565b60408301525092915050565b6000813590506144a181614fd0565b92915050565b6000602082840312156144b957600080fd5b60006144c784828501614236565b91505092915050565b600080604083850312156144e357600080fd5b60006144f185828601614236565b925050602061450285828601614236565b9150509250929050565b60008060006060848603121561452157600080fd5b600061452f86828701614236565b935050602061454086828701614236565b925050604061455186828701614492565b9150509250925092565b6000806040838503121561456e57600080fd5b600061457c85828601614236565b925050602061458d85828601614492565b9150509250929050565b6000602082840312156145a957600080fd5b600082013567ffffffffffffffff8111156145c357600080fd5b6145cf848285016142bf565b91505092915050565b6000602082840312156145ea57600080fd5b60006145f884828501614348565b91505092915050565b60006020828403121561461357600080fd5b60006146218482850161435d565b91505092915050565b60006020828403121561463c57600080fd5b600082013567ffffffffffffffff81111561465657600080fd5b614662848285016143c6565b91505092915050565b60006020828403121561467d57600080fd5b600082013567ffffffffffffffff81111561469757600080fd5b6146a38482850161441a565b91505092915050565b6000602082840312156146be57600080fd5b60006146cc84828501614492565b91505092915050565b600080604083850312156146e857600080fd5b60006146f685828601614492565b925050602061470785828601614236565b9150509250929050565b6000806040838503121561472457600080fd5b600061473285828601614492565b925050602061474385828601614333565b9150509250929050565b600061475983836148cf565b905092915050565b61476a81614e76565b82525050565b600061477b82614df7565b6147858185614e43565b93508360208202850161479785614ddf565b8060005b858110156147d357848403895281516147b4858261474d565b94506147bf83614e25565b925060208a0199505060018101905061479b565b50829750879550505050505092915050565b60006147f082614dec565b6147fa8185614e32565b93508360208202850161480c85614dd2565b8060005b858110156148485784840389528151614829858261474d565b945061483483614e18565b925060208a01995050600181019050614810565b50829750879550505050505092915050565b61486381614e88565b82525050565b61487281614e88565b82525050565b61488181614ef1565b82525050565b61489081614f03565b82525050565b60006148a182614e0d565b6148ab8185614e65565b93506148bb818560208601614f24565b6148c481614f57565b840191505092915050565b60006148da82614e02565b6148e48185614e54565b93506148f4818560208601614f24565b6148fd81614f57565b840191505092915050565b600061491382614e02565b61491d8185614e65565b935061492d818560208601614f24565b61493681614f57565b840191505092915050565b600061494e601583614e65565b91507f44697370757465206e6f7420617661696c61626c6500000000000000000000006000830152602082019050919050565b600061498e601583614e65565b91507f4164647265737320616c726561647920766f74656400000000000000000000006000830152602082019050919050565b60006149ce601783614e65565b91507f4469737075746520616c7265616479206f6e676f696e670000000000000000006000830152602082019050919050565b6000614a0e601c83614e65565b91507f4469737075746520646561646c696e65206e6f742072656163686564000000006000830152602082019050919050565b6000606083016000830151614a59600086018261485a565b506020830151614a6c602086018261485a565b5060408301518482036040860152614a8482826147e5565b9150508091505092915050565b614a9a81614eda565b82525050565b614aa981614ee4565b82525050565b6000602082019050614ac46000830184614761565b92915050565b6000604082019050614adf6000830185614761565b614aec6020830184614a91565b9392505050565b60006020820190508181036000830152614b0d8184614770565b905092915050565b6000602082019050614b2a6000830184614869565b92915050565b6000604082019050614b456000830185614869565b614b526020830184614869565b9392505050565b6000602082019050614b6e6000830184614878565b92915050565b6000602082019050614b896000830184614887565b92915050565b60006020820190508181036000830152614ba98184614908565b905092915050565b60006020820190508181036000830152614bcb8184614896565b905092915050565b60006020820190508181036000830152614bec81614941565b9050919050565b60006020820190508181036000830152614c0c81614981565b9050919050565b60006020820190508181036000830152614c2c816149c1565b9050919050565b60006020820190508181036000830152614c4c81614a01565b9050919050565b60006020820190508181036000830152614c6d8184614a41565b905092915050565b6000602082019050614c8a6000830184614a91565b92915050565b6000604082019050614ca56000830185614a91565b614cb26020830184614869565b9392505050565b6000604082019050614cce6000830185614a91565b614cdb6020830184614a91565b9392505050565b6000602082019050614cf76000830184614aa0565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614d2057600080fd5b8060405250919050565b600067ffffffffffffffff821115614d4157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115614d6957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115614d9157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115614dbd57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000614e8182614eba565b9050919050565b60008115159050919050565b6000819050614ea282614f68565b919050565b6000819050614eb582614f75565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614efc82614e94565b9050919050565b6000614f0e82614ea7565b9050919050565b82818337600083830152505050565b60005b83811015614f42578082015181840152602081019050614f27565b83811115614f51576000848401525b50505050565b6000601f19601f8301169050919050565b60058110614f7257fe5b50565b60038110614f7f57fe5b50565b614f8b81614e76565b8114614f9657600080fd5b50565b614fa281614e88565b8114614fad57600080fd5b50565b60058110614fbd57600080fd5b50565b60038110614fcd57600080fd5b50565b614fd981614eda565b8114614fe457600080fd5b5056fea265627a7a72305820200fd4d102588e927b5e7308113fca264aeda185cdd5893ad3314c865413cb546c6578706572696d656e74616cf50037",
  "constructorArguments": "0046000825580601f106142145750614233565b601f01602090049060005260206000209081019061423291906140c3565b5b50565b60008135905061424581614f82565b92915050565b600082601f83011261425c57600080fd5b813561426f61426a82614d2a565b614cfd565b9150818183526020840193506020810190508360005b838110156142b5578135860161429b8882614372565b845260208401935060208301925050600181019050614285565b5050505092915050565b600082601f8301126142d057600080fd5b81356142e36142de82614d52565b614cfd565b9150818183526020840193506020810190508360005b83811015614329578135860161430f8882614372565b8452602084019350602083019250506001810190506142f9565b5050505092915050565b60008135905061434281614f99565b92915050565b60008135905061435781614fb0565b92915050565b60008135905061436c81614fc0565b92915050565b600082601f83011261438357600080fd5b813561439661439182614d7a565b614cfd565b915080825260208301602083018583830111156143b257600080fd5b6143bd838284614f15565b50505092915050565b600082601f8301126143d757600080fd5b81356143ea6143e582614da6565b614cfd565b9150808252602083016020830185838301111561440657600080fd5b614411838284614f15565b50505092915050565b60006060828403121561442c57600080fd5b6144366060614cfd565b9050600061444684828501614333565b600083015250602061445a84828501614333565b602083015250604082013567ffffffffffffffff81111561447a57600080fd5b6144868482850161424b565b60408301525092915050565b6000813590506144a181614fd0565b92915050565b6000602082840312156144b957600080fd5b60006144c784828501614236565b91505092915050565b600080604083850312156144e357600080fd5b60006144f185828601614236565b925050602061450285828601614236565b9150509250929050565b60008060006060848603121561452157600080fd5b600061452f86828701614236565b935050602061454086828701614236565b925050604061455186828701614492565b9150509250925092565b6000806040838503121561456e57600080fd5b600061457c85828601614236565b925050602061458d85828601614492565b9150509250929050565b6000602082840312156145a957600080fd5b600082013567ffffffffffffffff8111156145c357600080fd5b6145cf848285016142bf565b91505092915050565b6000602082840312156145ea57600080fd5b60006145f884828501614348565b91505092915050565b60006020828403121561461357600080fd5b60006146218482850161435d565b91505092915050565b60006020828403121561463c57600080fd5b600082013567ffffffffffffffff81111561465657600080fd5b614662848285016143c6565b91505092915050565b60006020828403121561467d57600080fd5b600082013567ffffffffffffffff81111561469757600080fd5b6146a38482850161441a565b91505092915050565b6000602082840312156146be57600080fd5b60006146cc84828501614492565b91505092915050565b600080604083850312156146e857600080fd5b60006146f685828601614492565b925050602061470785828601614236565b9150509250929050565b6000806040838503121561472457600080fd5b600061473285828601614492565b925050602061474385828601614333565b9150509250929050565b600061475983836148cf565b905092915050565b61476a81614e76565b82525050565b600061477b82614df7565b6147858185614e43565b93508360208202850161479785614ddf565b8060005b858110156147d357848403895281516147b4858261474d565b94506147bf83614e25565b925060208a0199505060018101905061479b565b50829750879550505050505092915050565b60006147f082614dec565b6147fa8185614e32565b93508360208202850161480c85614dd2565b8060005b858110156148485784840389528151614829858261474d565b945061483483614e18565b925060208a01995050600181019050614810565b50829750879550505050505092915050565b61486381614e88565b82525050565b61487281614e88565b82525050565b61488181614ef1565b82525050565b61489081614f03565b82525050565b60006148a182614e0d565b6148ab8185614e65565b93506148bb818560208601614f24565b6148c481614f57565b840191505092915050565b60006148da82614e02565b6148e48185614e54565b93506148f4818560208601614f24565b6148fd81614f57565b840191505092915050565b600061491382614e02565b61491d8185614e65565b935061492d818560208601614f24565b61493681614f57565b840191505092915050565b600061494e601583614e65565b91507f44697370757465206e6f7420617661696c61626c6500000000000000000000006000830152602082019050919050565b600061498e601583614e65565b91507f4164647265737320616c726561647920766f74656400000000000000000000006000830152602082019050919050565b60006149ce601783614e65565b91507f4469737075746520616c7265616479206f6e676f696e670000000000000000006000830152602082019050919050565b6000614a0e601c83614e65565b91507f4469737075746520646561646c696e65206e6f742072656163686564000000006000830152602082019050919050565b6000606083016000830151614a59600086018261485a565b506020830151614a6c602086018261485a565b5060408301518482036040860152614a8482826147e5565b9150508091505092915050565b614a9a81614eda565b82525050565b614aa981614ee4565b82525050565b6000602082019050614ac46000830184614761565b92915050565b6000604082019050614adf6000830185614761565b614aec6020830184614a91565b9392505050565b60006020820190508181036000830152614b0d8184614770565b905092915050565b6000602082019050614b2a6000830184614869565b92915050565b6000604082019050614b456000830185614869565b614b526020830184614869565b9392505050565b6000602082019050614b6e6000830184614878565b92915050565b6000602082019050614b896000830184614887565b92915050565b60006020820190508181036000830152614ba98184614908565b905092915050565b60006020820190508181036000830152614bcb8184614896565b905092915050565b60006020820190508181036000830152614bec81614941565b9050919050565b60006020820190508181036000830152614c0c81614981565b9050919050565b60006020820190508181036000830152614c2c816149c1565b9050919050565b60006020820190508181036000830152614c4c81614a01565b9050919050565b60006020820190508181036000830152614c6d8184614a41565b905092915050565b6000602082019050614c8a6000830184614a91565b92915050565b6000604082019050614ca56000830185614a91565b614cb26020830184614869565b9392505050565b6000604082019050614cce6000830185614a91565b614cdb6020830184614a91565b9392505050565b6000602082019050614cf76000830184614aa0565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614d2057600080fd5b8060405250919050565b600067ffffffffffffffff821115614d4157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115614d6957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115614d9157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115614dbd57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000614e8182614eba565b9050919050565b60008115159050919050565b6000819050614ea282614f68565b919050565b6000819050614eb582614f75565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614efc82614e94565b9050919050565b6000614f0e82614ea7565b9050919050565b82818337600083830152505050565b60005b83811015614f42578082015181840152602081019050614f27565b83811115614f51576000848401525b50505050565b6000601f19601f8301169050919050565b60058110614f7257fe5b50565b60038110614f7f57fe5b50565b614f8b81614e76565b8114614f9657600080fd5b50565b614fa281614e88565b8114614fad57600080fd5b50565b60058110614fbd57600080fd5b50565b60038110614fcd57600080fd5b50565b614fd981614eda565b8114614fe457600080fd5b5056fea265627a7a72305820200fd4d102588e927b5e7308113fca264aeda185cdd5893ad3314c865413cb546c6578706572696d656e74616cf50037"
}