{
  "address": "0x44a405b65a904c8595a0dec830f200a406e0bde8",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "ATTRToken",
  "compilerVersion": "v0.4.24+commit.e67f0147",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2018-06-12\n*/\n\npragma solidity ^0.4.23;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)\n    public view returns (uint256);\n\n  function transferFrom(address from, address to, uint256 value)\n    public returns (bool);\n\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  modifier hasMintPermission() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    hasMintPermission\n    canMint\n    public\n    returns (bool)\n  {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract CappedToken is MintableToken {\n\n  uint256 public cap;\n\n  constructor(uint256 _cap) public {\n    require(_cap > 0);\n    cap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address _to,\n    uint256 _amount\n  )\n    // onlyOwner\n    canMint\n    public\n    returns (bool)\n  {\n    require(totalSupply_.add(_amount) <= cap);\n\n    return super.mint(_to, _amount);\n  }\n\n}\n\n\n\ncontract ATTRToken is CappedToken, DetailedERC20 {\n\n  using SafeMath for uint256;\n\n  uint256 public constant TOTAL_SUPPLY       = uint256(1000000000);\n  uint256 public constant TOTAL_SUPPLY_ACES  = uint256(1000000000000000000000000000);\n  uint256 public constant CROWDSALE_MAX_ACES = uint256(500000000000000000000000000);\n\n  address public crowdsaleContract;\n  uint256 public crowdsaleMinted = uint256(0);\n\n  uint256 public releaseTime = uint256(1536278399); // '2018-09-06T23:59:59Z'.unix()\n  bool    public fundingLowcapReached = false;\n  bool    public isReleased = false;\n\n  mapping (address => bool) public agents;\n\n  mapping (address => bool) public transferWhitelist;\n\n  constructor() public \n    CappedToken(TOTAL_SUPPLY_ACES) \n    DetailedERC20(\"Attrace\", \"ATTR\", uint8(18)) {\n    transferWhitelist[msg.sender] = true;\n    agents[msg.sender] = true;\n  }\n  \n  // **********\n  // VALIDATION\n  // **********\n  modifier isInitialized() {\n    require(crowdsaleContract != address(0));\n    require(releaseTime > 0);\n    _;\n  }\n\n  // ********\n  // CONTROLS\n  // ********\n  function setAgent(address _address, bool _status) public onlyOwner {\n    require(_address != address(0));\n    agents[_address] = _status;\n  }\n\n  modifier onlyAgents() {\n    require(agents[msg.sender] == true);\n    _;\n  }\n\n  function setCrowdsaleContract(address _crowdsaleContract) public onlyAgents {\n    require(_crowdsaleContract != address(0));\n    crowdsaleContract = _crowdsaleContract;\n  }\n\n  function setTransferWhitelist(address _address, bool _canTransfer) public onlyAgents {\n    require(_address != address(0));\n    transferWhitelist[_address] = _canTransfer;\n  }\n\n  function setReleaseTime(uint256 _time) public onlyAgents {\n    require(_time > block.timestamp);\n    require(isReleased == false);\n    releaseTime = _time;\n  }\n\n  function setFundingLowcapReached(uint256 _verification) public onlyAgents {\n    require(_verification == uint256(20234983249), \"wrong verification code\");\n    fundingLowcapReached = true;\n  }\n\n  function markReleased() public {\n    if (isReleased == false && _now() > releaseTime) {\n      isReleased = true;\n    }\n  }\n\n  // *******\n  // MINTING\n  // *******\n  modifier hasMintPermission() {\n    require(msg.sender == crowdsaleContract || agents[msg.sender] == true);\n    _;\n  }\n\n  function mint(address _to, uint256 _aces) public canMint hasMintPermission returns (bool) {\n    if (msg.sender == crowdsaleContract) {\n      require(crowdsaleMinted.add(_aces) <= CROWDSALE_MAX_ACES);\n      crowdsaleMinted = crowdsaleMinted.add(_aces);\n    }\n    return super.mint(_to, _aces);\n  }\n\n  // ********\n  // TRANSFER\n  // ********\n  modifier canTransfer(address _from) {\n    if (transferWhitelist[_from] == false) {\n      require(block.timestamp >= releaseTime);\n      require(fundingLowcapReached == true);\n    }\n    _;\n  }\n\n  function transfer(address _to, uint256 _aces) \n    public\n    isInitialized\n    canTransfer(msg.sender) \n    tokensAreUnlocked(msg.sender, _aces)\n    returns (bool) {\n      markReleased();\n      return super.transfer(_to, _aces);\n    }\n\n  function transferFrom(address _from, address _to, uint256 _aces) \n    public\n    isInitialized\n    canTransfer(_from) \n    tokensAreUnlocked(_from, _aces)\n    returns (bool) {\n      markReleased();\n      return super.transferFrom(_from, _to, _aces);\n    }\n\n  // *******\n  // VESTING\n  // *******\n  struct VestingRule {\n    uint256 aces;\n    uint256 unlockTime;\n    bool    processed;\n  }\n\n  // Controls the amount of locked tokens\n  mapping (address => uint256) public lockedAces;\n\n  modifier tokensAreUnlocked(address _from, uint256 _aces) {\n    if (lockedAces[_from] > uint256(0)) {\n      require(balanceOf(_from).sub(lockedAces[_from]) >= _aces);\n    }\n    _;\n  }\n\n  // Dynamic vesting rules\n  mapping (address => VestingRule[]) public vestingRules;\n\n  function processVestingRules(address _address) public onlyAgents {\n    _processVestingRules(_address);\n  }\n\n  function processMyVestingRules() public {\n    _processVestingRules(msg.sender);\n  }\n\n  function addVestingRule(address _address, uint256 _aces, uint256 _unlockTime) public {\n    require(_aces > 0);\n    require(_address != address(0));\n    require(_unlockTime > _now());\n    if (_now() < releaseTime) {\n      require(msg.sender == owner);\n    } else {\n      require(msg.sender == crowdsaleContract || msg.sender == owner);\n      require(_now() < releaseTime.add(uint256(2592000)));\n    }\n    vestingRules[_address].push(VestingRule({ \n      aces: _aces,\n      unlockTime: _unlockTime,\n      processed: false\n    }));\n    lockedAces[_address] = lockedAces[_address].add(_aces);\n  }\n\n  // Loop over vesting rules, bail if date not yet passed.\n  // If date passed, unlock aces and disable rule\n  function _processVestingRules(address _address) internal {\n    for (uint256 i = uint256(0); i < vestingRules[_address].length; i++) {\n      if (vestingRules[_address][i].processed == false && vestingRules[_address][i].unlockTime < _now()) {\n        lockedAces[_address] = lockedAces[_address].sub(vestingRules[_address][i].aces);\n        vestingRules[_address][i].processed = true;\n      }\n    }\n  }\n\n  // *******\n  // TESTING \n  // *******\n  function _now() internal view returns (uint256) {\n    return block.timestamp;\n  }\n}",
  "bytecode": "60806040526003805460a060020a60ff02191690556000600855635b91bf7f600955600a805461ffff191690553480156200003957600080fd5b50604080518082018252600781527f41747472616365000000000000000000000000000000000000000000000000006020808301919091528251808401909352600483527f41545452000000000000000000000000000000000000000000000000000000009083015260038054600160a060020a031916331790559060126b033b2e3c9fd0803ce80000006004558251620000dc9060059060208601906200013c565b508151620000f29060069060208501906200013c565b506007805460ff90921660ff19928316179055336000908152600c60209081526040808320805485166001908117909155600b909252909120805490921617905550620001e19050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017f57805160ff1916838001178555620001af565b82800160010185558215620001af579182015b82811115620001af57825182559160200191906001019062000192565b50620001bd929150620001c1565b5090565b620001de91905b80821115620001bd5760008155600101620001c8565b90565b6118cb80620001f16000396000f3006080604052600436106101e25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146101e757806306fdde0314610210578063095ea7b31461029a57806318160ddd146102be57806323b872dd146102e5578063313ce5671461030f578063316163951461033a578063355274ea1461036b57806340c10f19146103805780635ab5d07d146103a45780636596cff3146103b957806366188463146103dc57806370a0823114610400578063715018a61461042157806375545cb2146104365780637d64bcb41461044b5780637ffbe241146104605780638da5cb5b14610481578063902d55a51461049657806395d89b41146104ab57806397487af8146104c057806397d8c676146104d5578063a9059cbb146104fb578063aa16d2201461051f578063ab05bfff14610540578063ab2c8b1614610558578063b469d6c81461056d578063b57a094514610585578063b91d4001146105c9578063d47af199146105de578063d59138ef146105ff578063d73dd62314610614578063dd62ed3e14610638578063e4a34dce1461065f578063f239c5dd14610685578063f2fde38b1461069a578063f5723b5e146106bb578063fa2a8997146106e2578063fd66091e146106f7575b600080fd5b3480156101f357600080fd5b506101fc610718565b604080519115158252519081900360200190f35b34801561021c57600080fd5b50610225610728565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025f578181015183820152602001610247565b50505050905090810190601f16801561028c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a657600080fd5b506101fc600160a060020a03600435166024356107b6565b3480156102ca57600080fd5b506102d361081c565b60408051918252519081900360200190f35b3480156102f157600080fd5b506101fc600160a060020a0360043581169060243516604435610822565b34801561031b57600080fd5b50610324610917565b6040805160ff9092168252519081900360200190f35b34801561034657600080fd5b5061034f610920565b60408051600160a060020a039092168252519081900360200190f35b34801561037757600080fd5b506102d3610934565b34801561038c57600080fd5b506101fc600160a060020a036004351660243561093a565b3480156103b057600080fd5b506102d36109fd565b3480156103c557600080fd5b506103da600160a060020a0360043516610a0d565b005b3480156103e857600080fd5b506101fc600160a060020a0360043516602435610a78565b34801561040c57600080fd5b506102d3600160a060020a0360043516610b68565b34801561042d57600080fd5b506103da610b83565b34801561044257600080fd5b506103da610bf1565b34801561045757600080fd5b506101fc610bfc565b34801561046c57600080fd5b506101fc600160a060020a0360043516610c80565b34801561048d57600080fd5b5061034f610c95565b3480156104a257600080fd5b506102d3610ca4565b3480156104b757600080fd5b50610225610cac565b3480156104cc57600080fd5b506102d3610d07565b3480156104e157600080fd5b506103da600160a060020a03600435166024351515610d17565b34801561050757600080fd5b506101fc600160a060020a0360043516602435610d6e565b34801561052b57600080fd5b506103da600160a060020a0360043516610e3f565b34801561054c57600080fd5b506103da600435610e6c565b34801561056457600080fd5b506101fc610eb3565b34801561057957600080fd5b506103da600435610ebc565b34801561059157600080fd5b506105a9600160a060020a0360043516602435610f60565b604080519384526020840192909252151582820152519081900360600190f35b3480156105d557600080fd5b506102d3610fa4565b3480156105ea57600080fd5b506102d3600160a060020a0360043516610faa565b34801561060b57600080fd5b506103da610fbc565b34801561062057600080fd5b506101fc600160a060020a0360043516602435610ff2565b34801561064457600080fd5b506102d3600160a060020a036004358116906024351661108b565b34801561066b57600080fd5b506103da600160a060020a036004351660243515156110b6565b34801561069157600080fd5b506102d3611117565b3480156106a657600080fd5b506103da600160a060020a036004351661111d565b3480156106c757600080fd5b506103da600160a060020a036004351660243560443561113d565b3480156106ee57600080fd5b506101fc61129b565b34801561070357600080fd5b506101fc600160a060020a03600435166112a9565b60035460a060020a900460ff1681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107ae5780601f10610783576101008083540402835291602001916107ae565b820191906000526020600020905b81548152906001019060200180831161079157829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6007546000906101009004600160a060020a0316151561084157600080fd5b60095460001061085057600080fd5b600160a060020a0384166000908152600c6020526040902054849060ff1615156108975760095442101561088357600080fd5b600a5460ff16151560011461089757600080fd5b600160a060020a0385166000908152600d60205260408120548691859111156108f957600160a060020a0382166000908152600d602052604090205481906108ee906108e285610b68565b9063ffffffff6112be16565b10156108f957600080fd5b610901610fbc565b61090c8787876112d0565b979650505050505050565b60075460ff1681565b6007546101009004600160a060020a031681565b60045481565b60035460009060a060020a900460ff161561095457600080fd5b6007546101009004600160a060020a03163314806109865750336000908152600b602052604090205460ff1615156001145b151561099157600080fd5b6007546101009004600160a060020a03163314156109ec576008546b019d971e4fe8401e74000000906109ca908463ffffffff61144716565b11156109d557600080fd5b6008546109e8908363ffffffff61144716565b6008555b6109f6838361145a565b9392505050565b6b019d971e4fe8401e7400000081565b336000908152600b602052604090205460ff161515600114610a2e57600080fd5b600160a060020a0381161515610a4357600080fd5b60078054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b336000908152600260209081526040808320600160a060020a038616845290915281205480831115610acd57336000908152600260209081526040808320600160a060020a0388168452909152812055610b02565b610add818463ffffffff6112be16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a03163314610b9a57600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b610bfa3361149f565b565b600354600090600160a060020a03163314610c1657600080fd5b60035460a060020a900460ff1615610c2d57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600c6020526000908152604090205460ff1681565b600354600160a060020a031681565b633b9aca0081565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107ae5780601f10610783576101008083540402835291602001916107ae565b6b033b2e3c9fd0803ce800000081565b600354600160a060020a03163314610d2e57600080fd5b600160a060020a0382161515610d4357600080fd5b600160a060020a03919091166000908152600b60205260409020805460ff1916911515919091179055565b6007546000906101009004600160a060020a03161515610d8d57600080fd5b600954600010610d9c57600080fd5b336000818152600c602052604090205460ff161515610dd857600954421015610dc457600080fd5b600a5460ff161515600114610dd857600080fd5b336000818152600d602052604081205485911015610e2357600160a060020a0382166000908152600d60205260409020548190610e18906108e285610b68565b1015610e2357600080fd5b610e2b610fbc565b610e35868661160c565b9695505050505050565b336000908152600b602052604090205460ff161515600114610e6057600080fd5b610e698161149f565b50565b336000908152600b602052604090205460ff161515600114610e8d57600080fd5b428111610e9957600080fd5b600a54610100900460ff1615610eae57600080fd5b600955565b600a5460ff1681565b336000908152600b602052604090205460ff161515600114610edd57600080fd5b6404b61957518114610f5057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f77726f6e6720766572696669636174696f6e20636f6465000000000000000000604482015290519081900360640190fd5b50600a805460ff19166001179055565b600e60205281600052604060002081815481101515610f7b57fe5b600091825260209091206003909102018054600182015460029092015490935090915060ff1683565b60095481565b600d6020526000908152604090205481565b600a54610100900460ff16158015610fdc5750600954610fda6116ed565b115b15610bfa57600a805461ff001916610100179055565b336000908152600260209081526040808320600160a060020a0386168452909152812054611026908363ffffffff61144716565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b336000908152600b602052604090205460ff1615156001146110d757600080fd5b600160a060020a03821615156110ec57600080fd5b600160a060020a03919091166000908152600c60205260409020805460ff1916911515919091179055565b60085481565b600354600160a060020a0316331461113457600080fd5b610e69816116f1565b6000821161114a57600080fd5b600160a060020a038316151561115f57600080fd5b6111676116ed565b811161117257600080fd5b60095461117d6116ed565b101561119f57600354600160a060020a0316331461119a57600080fd5b6111fa565b6007546101009004600160a060020a03163314806111c75750600354600160a060020a031633145b15156111d257600080fd5b6009546111e89062278d0063ffffffff61144716565b6111f06116ed565b106111fa57600080fd5b600160a060020a0383166000818152600e6020908152604080832081516060810183528781528084018781528184018681528354600180820186559488528688209351600390910290930192835590519282019290925590516002909101805460ff1916911515919091179055928252600d9052205461127a9083611447565b600160a060020a039093166000908152600d60205260409020929092555050565b600a54610100900460ff1681565b600b6020526000908152604090205460ff1681565b6000828211156112ca57fe5b50900390565b6000600160a060020a03831615156112e757600080fd5b600160a060020a03841660009081526020819052604090205482111561130c57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561133c57600080fd5b600160a060020a038416600090815260208190526040902054611365908363ffffffff6112be16565b600160a060020a03808616600090815260208190526040808220939093559085168152205461139a908363ffffffff61144716565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546113dc908363ffffffff6112be16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b8181018281101561145457fe5b92915050565b60035460009060a060020a900460ff161561147457600080fd5b60045460015461148a908463ffffffff61144716565b111561149557600080fd5b6109f6838361176f565b60005b600160a060020a0382166000908152600e602052604090205481101561160857600160a060020a0382166000908152600e602052604090208054829081106114e657fe5b600091825260209091206002600390920201015460ff16158015611545575061150d6116ed565b600160a060020a0383166000908152600e6020526040902080548390811061153157fe5b906000526020600020906003020160010154105b1561160057600160a060020a0382166000908152600e6020526040902080546115a991908390811061157357fe5b60009182526020808320600390920290910154600160a060020a0386168352600d9091526040909120549063ffffffff6112be16565b600160a060020a0383166000908152600d6020908152604080832093909355600e905220805460019190839081106115dd57fe5b60009182526020909120600390910201600201805460ff19169115159190911790555b6001016114a2565b5050565b6000600160a060020a038316151561162357600080fd5b3360009081526020819052604090205482111561163f57600080fd5b3360009081526020819052604090205461165f908363ffffffff6112be16565b3360009081526020819052604080822092909255600160a060020a03851681522054611691908363ffffffff61144716565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b4290565b600160a060020a038116151561170657600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6007546000906101009004600160a060020a03163314806117a45750336000908152600b602052604090205460ff1615156001145b15156117af57600080fd5b60035460a060020a900460ff16156117c657600080fd5b6001546117d9908363ffffffff61144716565b600155600160a060020a038316600090815260208190526040902054611805908363ffffffff61144716565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001929150505600a165627a7a72305820b4cad503627bf88be07e4012acd526278307810243071e43ac4b64a5eb85ad6e0029"
}