{
  "address": "0x60d988739381d055ba9863154ad8cf2123031f88",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "USDT",
  "compilerVersion": "v0.4.25+commit.59dbf8f1",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-03-29\n*/\n\npragma solidity ^ 0.4.24;\n\n// ----------------------------------------------------------------------------\n// 安全的加减乘除\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n\tfunction add(uint a, uint b) internal pure returns(uint c) {\n\t\tc = a + b;\n\t\trequire(c >= a);\n\t}\n\n\tfunction sub(uint a, uint b) internal pure returns(uint c) {\n\t\trequire(b <= a);\n\t\tc = a - b;\n\t}\n\n\tfunction mul(uint a, uint b) internal pure returns(uint c) {\n\t\tc = a * b;\n\t\trequire(a == 0 || c / a == b);\n\t}\n\n\tfunction div(uint a, uint b) internal pure returns(uint c) {\n\t\trequire(b > 0);\n\t\tc = a / b;\n\t}\n}\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n\tfunction totalSupply() public constant returns(uint);\n\n\tfunction balanceOf(address tokenOwner) public constant returns(uint balance);\n\n\tfunction allowance(address tokenOwner, address spender) public constant returns(uint remaining);\n\n\tfunction transfer(address to, uint tokens) public returns(bool success);\n\n\tfunction approve(address spender, uint tokens) public returns(bool success);\n\n\tfunction transferFrom(address from, address to, uint tokens) public returns(bool success);\n\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract EttToken{\n    function tokenAdd(address user,uint tokens) public returns(bool success);\n    function tokenSub(address user,uint tokens) public returns(bool success);\n    function balanceOf(address tokenOwner) public constant returns(uint balance);\n}\n\n// ----------------------------------------------------------------------------\n// 核心类\n// ----------------------------------------------------------------------------\n\ncontract USDT is ERC20Interface{\n\tusing SafeMath for uint;\n\n\tstring public symbol;\n\tstring public name;\n\tuint8 public decimals;\n\tuint _totalSupply;//总发行\n\n\n//\tuint public sellPrice; //出售价格 1枚代币换多少以太 /1000\n\tuint public buyPrice; //购买价格 多少以太可购买1枚代币 /1000\n\n\t\n\tuint public transper; //转账手续费 /3%\n\t\n\tbool public actived;\n\n\tuint public teamper1;//团队奖% \n\tuint public teamper2;//团队奖% \n\t\n\t//uint public sellper;//15\n    uint public sysinteth;\n\n\tmapping(address => uint) balances;//总计\n\t//mapping(address => uint) myeth;//本金\n//\tmapping(address => uint) froeth;//冻结\n\t//mapping(address => uint) used;\n\tmapping(address => mapping(address => uint)) allowed;\n\n\t/* 冻结账户 */\n\tmapping(address => bool) public frozenAccount;\n\n\t//上家地址\n\tmapping(address => address) public fromaddr;\n\t//管理员帐号\n\tmapping(address => bool) public admins;\n\t// 记录各个账户的增量时间\n\tmapping(address => uint) public crontime;\n\t// 挖矿次数\n//\tmapping(address => uint) public mintnum;\n\tuint[] public permans;\n\tmapping(address => uint) public teamget;\n\n\tstruct sunsdata{\n\t\tmapping(uint => uint) n;\t\n\t\tmapping(uint => uint) n_effective;\n\t}\n\t\n    mapping(address => sunsdata)  suns;\n    address public intertoken;\n    modifier onlyInterface {\n        require(intertoken != address(0));\n\t\trequire(msg.sender == intertoken);\n\t\t_;\n\t}\n\t/* 通知 */\n\tevent FrozenFunds(address target, bool frozen);\n\taddress public owner;\n\taddress public financer;\n    modifier onlyOwner {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\tmodifier  onlyFinancer {\n\t\trequire(msg.sender == financer);\n\t\t_;\n\t}\n\t\n\tstruct record{\n\t\t\t//当前可提现本金\n\t\t\tuint can_draw_capital;\n\t\t\t//当前已投资本金\n\t\t\tuint not_draw_capital;\n\t\t\t//总的应释放利润\n\t\t\tuint total_profit;\n\t\t\t//总的已释放利润\n\t\t\tuint  releasd_profit;\n\t\t\t//投资时间\n\t\t\tuint last_investdate;\n\t\t\tuint history_releasd_profit;\n\t\t}\n\t\tmapping(address=>record) public user_inverst_record;\n\t\t\n\t\tstruct plan{\n\t\t\tuint account;\n\t\t\tuint times;\n\t\t}\n\t\tmapping(uint => plan) public plans;\n\t\t\n\t\tstruct node_profit{\n\t\t\t\tuint menber_counts;\n\t\t\t\tuint percent;\n\t\t}\n\t\tmapping(uint => node_profit) public node_profits;\n\t//\tuint public min_investment;\n\t\t\t\t\n\n\t\tuint  public per;\n\t\tuint public OnceWidrawTime;\n\t\tmapping(address => bool) _effective_son;\n\t\tstruct quit_conf{\n\t\t\tuint  interval;\n\t\t\tuint rate1;\n\t\t\tuint rate2;\n\t\t}\n\t\tquit_conf public quit_config;\n\t\tuint teamPrice1;\n\t\tuint teamPrice2;\n\t\t\n        mapping(address=>bool) public isleader;\n        mapping(address =>uint) public leader_eth;\n        \n        mapping(address=>uint) public userineth;\n\t\taddress [] public leaders;\n\t\tEttToken public ett;\n\t\tuint public ettRate;\n\t\tuint generation;\n\t\tuint generation_team;\n\t\tmapping(address=>address) public ethtop;\n\t// ------------------------------------------------------------------------\n\t// Constructor\n\t// ------------------------------------------------------------------------\n\tconstructor(EttToken _ettAddress,address [] _supernodes) public {\n\n\t\tsymbol = \"USDT\";\n\t\tname = \"USDT Coin\";\n\t\tdecimals = 18;\n\t\t_totalSupply = 1000000000 ether;\n\t\tbuyPrice = 138 ether; //购买价格 1eth can buy how much mt\n\t\t\n\n\t\ttransper = uint(0);//转账手续费 /100\n\n\t\tteamper1 = 10;//团队奖% /100\n\t\tteamper2 = 20;//团队奖% /100\n\n\t\t//sellper = 85;// /100\n\t\tactived = true;\n\n\n        permans = [40,10,12,6];\n        //permans = [3,3,2,2];//test\n\t\tbalances[this] = _totalSupply;\n\t\towner = msg.sender;\n\t\tfinancer = msg.sender;\n\t\t\n        \n\t\tper = 1;\n\t\tplans[1].account = 7000 ether;\n\t\tplans[1].times = 2 ;\n\t\tplans[2].account = 35000 ether;\n\t\tplans[2].times = 3 ;\n\t\tplans[3].account = 70000 ether;\n\t\tplans[3].times = 4 ;\n\t\tplans[4].account = 210000 ether;\n\t\tplans[4].times = 5 ;\n\t\n\t\tfor(uint i=1;i<=16;i++){\n\t\t\tnode_profits[i].menber_counts = i;\n\t\t\tif(i==1){\n\t\t\t\tnode_profits[i].percent = 100;\n\t\t\t}else if(i==2){\n\t\t\t\tnode_profits[i].percent = 20;\n\t\t\t}else if(i==3){\n\t\t\t\tnode_profits[i].percent = 15;\n\t\t\t}else if(i == 4){\n\t\t\t\tnode_profits[i].percent = 10;\n\t\t\t}else{\n\t\t\t\tnode_profits[i].percent = 5;\n\t\t\t}\n\t\t}\n\t\t\n\t\tOnceWidrawTime = 24 hours;\n\t\t//OnceWidrawTime = 10 seconds;\n\t\t//min_investment = plans[1].account ;\n\t\t//quit_config.interval = 30 days\n\t\t//quit_config.interval = 30 seconds;\n\t\tquit_config.interval = 30 days;\n\t\tquit_config.rate1 = 5;\n\t\tquit_config.rate2 = 1;\n\t\tteamPrice1 = 100000 ether;\n\t\tteamPrice2 = 500000 ether;\n\t\tettRate = 70 ether;\n\t\tgeneration = 16;\n\t\tgeneration_team = 8;\n\t\tett = _ettAddress;\n\t\tfor(uint m;m<_supernodes.length;m++){\n\t\t    addLeader(_supernodes[m]);\n\t\t}\n\t\t\n\t\temit Transfer(address(0), owner, _totalSupply);\n\n\t}\n\n\t/* 获取用户金额 */\n\tfunction balanceOf(address user) public view returns(uint balance) {\n\t\treturn balances[user];\n\t}\n\tfunction ethbalance(address user) public view returns(uint _balance) {\n\t    \n\t\t_balance = address(user).balance;\n\t}\n\n\t/*\n\t * 获取用户的挖矿时间\n\t * @param {Object} address\n\t */\n\tfunction getaddtime(address _addr) public view returns(uint) {\n\t\tif(crontime[_addr] < 2) {\n\t\t\treturn(0);\n\t\t}else{\n\t\t    return(crontime[_addr]);\n\t\t}\n\t\t\n\t}\n\tfunction getmy(address user) public view returns(\n\t    uint myblance,\n\t    uint meth,\n\t    uint mytime,\n\t    uint bprice,\n\t    uint tmoney,\n\t    uint myineth,\n\t    bool _isleader,\n\t    uint _leader_eth,\n\t    uint [10] _inverst\n\t    /*\n\t    uint _can_draw_capital,\n\t    uint _not_draw_capital,\n\t    uint _last_investdate,\n\t    uint _total_profit,\n\t    uint _releasd_profit,\n\t    uint _history_releasd_profit\n\t    */\n\t){\n\t    address _user = user;\n\t    myblance = balances[_user];//0\n\t    meth = ethbalance(_user);//2\n\t    mytime = crontime[_user];//5\n\t    bprice = buyPrice;//6\n\t    tmoney = balances[this];//9\n\t    myineth = userineth[_user];\n\t    _isleader = isleader[_user];\n\t    _leader_eth = leader_eth[_user];\n\t    \n\t    _inverst[0]=user_inverst_record[_user].can_draw_capital;\n\t    _inverst[1]=user_inverst_record[_user].last_investdate;\n\t    _inverst[2]=user_inverst_record[_user].not_draw_capital;\n\t    _inverst[3]=user_inverst_record[_user].total_profit;\n\t    _inverst[4]=user_inverst_record[_user].releasd_profit;\n\t    _inverst[5] = user_inverst_record[_user].history_releasd_profit;\n\t    _inverst[6] = ethbalance(_user);\n\t    _inverst[7] = getquitfee(_user);\n\t    _inverst[8] = ettRate;\n\t    _inverst[9] = getettbalance(_user);\n\t    /*\n\t    _can_draw_capital=user_inverst_record[_user].can_draw_capital;\n\t    _last_investdate=user_inverst_record[_user].last_investdate;\n\t    _not_draw_capital=user_inverst_record[_user].not_draw_capital;\n\t    _total_profit=user_inverst_record[_user].total_profit;\n\t    _releasd_profit=user_inverst_record[_user].releasd_profit;\n\t    _history_releasd_profit = user_inverst_record[_user].history_releasd_profit;\n\t    */\n\t}\n\t\n\tfunction setRwardGeneration(uint _generation,uint _generation_team) public onlyOwner returns(bool){\n\t    if(_generation_team>1&&_generation>1&&_generation<=16){\n\t        generation = _generation;\n\t        generation_team = _generation_team;\n\t        return true;\n\t    }else{\n\t        return false;\n\t    }\n\t}\n\t\n\tfunction getRwardGeneration() public view onlyOwner returns(uint _generation,uint _generation_team){\n\t    _generation = generation;\n\t    _generation_team = generation_team;\n\t}\n\t\n\tfunction geteam(address _user) public view returns(\n\t    \n\t    uint nn1,//0\n\t    uint nn2,//1\n\t    uint n_effective1,\n\t    uint n_effective2,\n\t    \n\t    uint [16]  n,\n\t    uint [16] n_effective,\n\t    uint ms,//6\n\t    uint tm,//7\n\t    uint lid//11\n\t){\n\t    \n\t    nn1 = suns[_user].n[1];\n\t    nn2 = suns[_user].n[2];\n\t    n_effective1 = suns[_user].n_effective[1];\n\t    n_effective2 = suns[_user].n_effective[2];\n        \n        for(uint i;i<16;i++){\n            \n            n[i] = suns[_user].n[i+1];\n            n_effective[i] = suns[_user].n_effective[i+1];\n        }\n\t    ms = teamget[_user];\n\t    tm = getaddtime(_user);\n\n\n\t    if(suns[_user].n_effective[2] >= permans[2] && suns[_user].n_effective[1] >= permans[3]){\n\t        lid = 1;\n\t    }\n\t    if(suns[_user].n_effective[2] >= permans[0] && suns[_user].n_effective[1] >= permans[1]){\n\t        lid = 2;\n\t    }\n\t}\n\t\n\t\n\n\tfunction getsys() public view returns(\n\t    uint tmoney,//0\n\t    uint _sysinteth\n\t   \n\t){\n\t    tmoney = _totalSupply.sub(balances[this]);\n\t    _sysinteth = sysinteth;\n\t    \n\t}\n    function _transfer(address from, address to, uint tokens) private returns(bool success) {\n        require(!frozenAccount[from]);\n\t\trequire(!frozenAccount[to]);\n\t\trequire(actived == true);\n\t\t\n\t\tuint addper = tokens*transper/100;\n\n\t\tuint allmoney = tokens + addper;\n\t\trequire(balances[from] >= allmoney);\n\t\trequire(tokens > 0 && tokens < _totalSupply);\n\t\t// 防止转移到0x0， 用burn代替这个功能\n        require(to != 0x0);\n\t\trequire(from != to);\n\t\t// 将此保存为将来的断言， 函数最后会有一个检验103 - 3 + 10\n        uint previousBalances = balances[from] - addper + balances[to];\n\t\t//如果用户没有上家\n\t\tif(fromaddr[to] == address(0) && fromaddr[from] != to) {\n\t\t\t//指定上家地址\n\t\t\tfromaddr[to] = from;\n\t\t\taddress top = fromaddr[to];\n\t\t\t\n\t\t\t\n\t\t\tif(isleader[ethtop[top]]){\n\t\t\t    ethtop[to] = ethtop[top];\n\t\t\t}\n\t\t\tif(isleader[top] ){\n\t\t\t    ethtop[to] = top;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\taddress _to = to;\n\t\t\tfor(uint i = 1;i<=16;i++){\n\t\t\t\tif(top != address(0) && top !=_to){\n\t\t\t\t\tsuns[top].n[i] += 1;\n\t\t\t\t\t_to = top;\n\t\t\t\t\ttop = fromaddr[top];\n\t\t\t\t\t\n\t\t\t\t\tcontinue;\n\t\t\t\t}else{\n\t\t\t\t    break;    \n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} \n\t\t\n\t\tbalances[from] = balances[from].sub(allmoney);\n\t\tbalances[this] = balances[this].add(addper);\n\t\tbalances[to] = balances[to].add(tokens);\n\t\temit Transfer(from, this, addper);\n\t\temit Transfer(from, to, tokens);\n\t\t// 断言检测， 不应该为错\n        assert(balances[from] + balances[to] == previousBalances);//90 10\n\t\treturn true;\n    }\n\t/*\n\t * 用户转账\n\t * @param {Object} address\n\t */\n\tfunction transfer(address to, uint tokens) public returns(bool success) {\n\t\t_transfer(msg.sender, to, tokens);\n\t\tsuccess = true;\n\t}\n    function intertransfer(address from, address to, uint tokens) public onlyInterface returns(bool success) {\n\t\t_transfer(from, to, tokens);\n\t\tsuccess = true;\n\t}\n\t/*\n\t * 获取上家地址\n\t * @param {Object} address\n\t */\n\tfunction getfrom(address _addr) public view returns(address) {\n\t\treturn(fromaddr[_addr]);\n\t}\n\n\tfunction approve(address spender, uint tokens) public returns(bool success) {\n\t    require(tokens > 1 && tokens < _totalSupply);\n\t    require(balances[msg.sender] >= tokens);\n\t\tallowed[msg.sender][spender] = tokens;\n\t\temit Approval(msg.sender, spender, tokens);\n\t\treturn true;\n\t}\n\t/*\n\t * 授权转账\n\t * @param {Object} address\n\t */\n\tfunction transferFrom(address from, address to, uint tokens) public returns(bool success) {\n\t\trequire(actived == true);\n\t\trequire(!frozenAccount[from]);\n\t\trequire(!frozenAccount[to]);\n\t\trequire(tokens > 1 && tokens < _totalSupply);\n\t\trequire(balances[from] >= tokens);\n\t\tbalances[from] = balances[from].sub(tokens);\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\t\tbalances[to] = balances[to].add(tokens);\n\t\temit Transfer(from, to, tokens);\n\t\treturn true;\n\t}\n\n\t/*\n\t * 获取授权信息\n\t * @param {Object} address\n\t */\n\tfunction allowance(address tokenOwner, address spender) public view returns(uint remaining) {\n\t\treturn allowed[tokenOwner][spender];\n\t}\n\n\n\n\t/// 冻结 or 解冻账户\n\tfunction freezeAccount(address target, bool freeze) public onlyOwner{\n\t\tfrozenAccount[target] = freeze;\n\t\temit FrozenFunds(target, freeze);\n\t}\n\t\n\t/*\n\t * 系统设置\n\t * @param {Object} uint\n\t \t\n\t */\n\tfunction setconf(\n    \tuint _per,\n    \tuint _newOnceWidrawTime, \n    \tuint _newBuyPrice,\n    \tuint _ettRate\n    ) public onlyOwner{\n        require(_per>0);\n        require(ettRate>0);\n\t\tper = _per;\n\t\tOnceWidrawTime = _newOnceWidrawTime;\n\t\tbuyPrice = _newBuyPrice;\n\t\tettRate = _ettRate;\n\t}\n\t\n\t\n\t// * 获取系统设置\n\t \n\tfunction getconf() public view returns(\n\t    uint _per,\n\t    uint _newOnceWidrawTime, \n    \tuint _newBuyPrice,\n    \tuint _ettRate) \n    {\n\t\t _per = per;\n\t\t _newOnceWidrawTime = OnceWidrawTime;\n\t\t _newBuyPrice = buyPrice;\n\t\t _ettRate = ettRate;\n\t}\n\t\n\tfunction setother(\n    \tuint _transper,\n    \tuint _quit_interval,\n    \tuint _quit_rate1,\n    \tuint _quit_rate2\n\t) public onlyOwner{\n\t    transper = _transper;\n\t\tquit_config = quit_conf(_quit_interval,_quit_rate1,_quit_rate2);\n\t}\n\t\n\tfunction getquitfee(address _user) public view returns(uint ){\n\t    uint _fee;\n\t    //require(actived == true&&!frozenAccount[msg.sender]);\n\t\tif (user_inverst_record[_user].can_draw_capital > 0){\n\t\t    uint interval = now.sub(user_inverst_record[_user].last_investdate);\n\t\t    uint rate = quit_config.rate2;\n\t\t    if(interval<quit_config.interval){\n\t\t\t    rate = quit_config.rate1;\n\t\t    }\n\t\t    uint fee = user_inverst_record[_user].can_draw_capital*rate/100;\n\t\t}\n\t\t_fee = fee;\n\t\treturn _fee;\n\n\t}\n\t\n\tfunction getother() public view returns(\n\t    uint _onceWidrawTime, \n    \tuint newBuyPrice,\n    \tuint _transper,\n    \tuint _quit_interval,\n    \tuint _quit_rate1,\n    \tuint _quit_rate2\n\t){\n\t    _onceWidrawTime = OnceWidrawTime;//0\n\t\tnewBuyPrice = buyPrice;//1\n\t\t_transper = transper;\n\t\t_quit_interval = quit_config.interval;\n\t\t_quit_rate1 = quit_config.rate1;\n\t\t_quit_rate2 = quit_config.rate2;\n\t}\n\t\n\tfunction setNodeProfit(uint _node,uint _members,uint _percert) public  onlyOwner returns(bool){\n\t    //require(_node<=16&&_node>=1);\n\t    require(_node>=1);\n\t    require(_members>0&&_percert>0&&_percert<=100);\n\t    node_profits[_node] = node_profit(_members,_percert);\n\t    return true;\n\t}\n\tfunction setPlan(uint _plan,uint _account,uint _times) public onlyOwner returns(bool){\n\t    require(_plan<=4&&_plan>=1);\n\t    require(_account>0&&_times>0);\n\t    plans[_plan] = plan(_account,_times);\n\t    \n\t    return true;\n\t}\n\tfunction getPlan(uint _plan) public view returns(uint _account,uint _times){\n\t    require(_plan>0 && _plan <=4);\n\t    _account=plans[_plan].account;\n\t    _times = plans[_plan].times;\n\t}\n\tfunction getNodeProfit(uint _node) public view returns(uint _members,uint _percert){\n\t    require(_node>0 && _node <=16);\n\t    _members = node_profits[_node].menber_counts;\n\t    _percert = node_profits[_node].percent;\n\t}\n\t\n\tfunction setsysteam(\n        uint _newteamPrice1,\n        uint _newteamPrice2,\n    \tuint teamper1s,\n    \tuint teamper2s,\n    \tuint t1,\n    \tuint t2,\n    \tuint t3,\n    \tuint t4\n\t) public onlyOwner{\n        teamPrice1=_newteamPrice1;\n        teamPrice2=_newteamPrice2;\n\t    teamper1 = teamper1s;\n\t\tteamper2 = teamper2s;\n\t\tpermans = [t1,t2,t3,t4];\n\t}\n\tfunction getsysteam() public view returns(\n        uint teamprice1,\n        uint teamprice2,\n    \tuint teamper1s,\n    \tuint teamper2s,\n    \tuint t1,\n    \tuint t2,\n    \tuint t3,\n    \tuint t4\n\t){\n        teamprice1 = teamPrice1;\n        teamprice2 = teamPrice2;\n\t\tteamper1s = teamper1;//4\n\t\tteamper2s = teamper2;//5\n\t\tt1 = permans[0];//6\n\t\tt2 = permans[1];//7\n\t\tt3 = permans[2];//8\n\t\tt4 = permans[3];//9\n\t}\n\t/*\n\t * 设置是否开启\n\t * @param {Object} bool\n\t */\n\tfunction setactive(bool tags) public onlyOwner {\n\t\tactived = tags;\n\t}\n\n\tfunction setadmin(address adminaddr) onlyOwner public {\n\t    require(adminaddr != owner && adminaddr != address(0));\n\t\towner = adminaddr;\n\t}\n\tfunction setfinancer(address financeraddr) onlyOwner public {\n\t\tfinancer = financeraddr;\n\t}\n\t/*\n\t * 获取总发行\n\t */\n\tfunction totalSupply() public view returns(uint) {\n\t\treturn _totalSupply;\n\t}\n\tfunction addusermoney(address target, uint256 mintedAmount) private{\n\t    require(!frozenAccount[target]);\n\t\trequire(actived == true);\n        require(balances[this] > mintedAmount);\n\t\tbalances[target] = balances[target].add(mintedAmount);\n\t\tbalances[this] = balances[this].sub(mintedAmount);\n\t\temit Transfer(this, target, mintedAmount);\n\t}\n\tfunction subusermoney(address target, uint256 mintedAmount) private{\n\t    require(!frozenAccount[target]);\n\t\trequire(actived == true);\n        require(balances[target] > mintedAmount);\n\t\tbalances[target] = balances[target].sub(mintedAmount);\n\t\tbalances[this] = balances[this].add(mintedAmount);\n\t\temit Transfer( target,this, mintedAmount);\n\t}\n\t/*\n\t * 向指定账户拨发资金\n\t * @param {Object} address\n\t */\n\tfunction adduser(address target, uint256 mintedAmount) public onlyFinancer{\n\t\taddusermoney(target, mintedAmount);\n\t}\n\tfunction subuser(address target, uint256 mintedAmount) public onlyFinancer{\n\t\tsubusermoney(target, mintedAmount);\n\t}\n\t/*\n\tfunction interadduser(address target, uint256 mintedAmount) public onlyInterface{\n\t\taddusermoney(target, mintedAmount);\n\t}\n\tfunction intersubuser(address target, uint256 mintedAmount) public onlyInterface{\n\t\tsubusermoney(target, mintedAmount);\n\t}\n\t*/\n\t\n\tfunction setteam(address user, uint amount) private returns(bool) {\n\t\trequire(amount >0);\n\t\tteamget[user] += amount;\n\t    if(suns[user].n_effective[2] >= permans[2] && suns[user].n_effective[1] >= permans[3]){\n\t        //teamget[user] += amount;\n\t        uint chkmoney = teamPrice1;\n\t        uint sendmoney = teamget[user]*teamper1/100;\n\t        if(suns[user].n_effective[2] >= permans[0] && suns[user].n_effective[1] >= permans[1]){\n\t            chkmoney = teamPrice2;\n\t            sendmoney = teamget[user]*teamper2/100;\n\t        }\n\t        if(teamget[user] >= chkmoney) {\n\t        \t_update_user_inverst(user,sendmoney);\n\t        \tteamget[user] = uint(0);\n\t        \t\n\t        }\n\t    }\n\t    return(true);\n\t}\t\n\t\n\n\n\tfunction _reset_user_inverst(address user) private returns(bool){\n\t\t\tuser_inverst_record[user].can_draw_capital = uint(0);\n\t\t\tuser_inverst_record[user].not_draw_capital = uint(0);\n\t\t\tuser_inverst_record[user].releasd_profit = uint(0);\n\t\t\t//user_inverst_record[user].last_investdate = uint(0);\n\t\t\tuser_inverst_record[user].total_profit = uint(0);\n\t\t\tcrontime[user]=uint(0);\n\t\t\treturn(true);\n\t}\n\tfunction _update_user_inverst(address user,uint rewards) private returns(uint){\n\t    \n\t\trequire(rewards >0);\n\t\tuint _mint_account;\n\t\tif(user_inverst_record[user].not_draw_capital==uint(0)){\n\t\t    return _mint_account;\n\t\t}\n\t\t/*剩余可释放*/\n\t\tuint releasable = user_inverst_record[user].total_profit.sub(user_inverst_record[user].releasd_profit);\n\t\tif(releasable<=rewards){\n\t\t\t_reset_user_inverst(user);\n\t\t\t_mint_account = releasable;\n\t\t}\n\t\telse{\n\t\t\t/*\n\t\t\t\t修改可提现本金\n\t\t\t*/\n\t\t\t_mint_account = rewards;\n\t\t\tif(user_inverst_record[user].can_draw_capital>0){\n\t\t\t\tif(user_inverst_record[user].can_draw_capital>rewards){\n\t\t\t\t\tuser_inverst_record[user].can_draw_capital=user_inverst_record[user].can_draw_capital.sub(rewards);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tuser_inverst_record[user].can_draw_capital = uint(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n\t\t\t\t修改已释放利润\n\t\t\t*/\n\t\t\tuser_inverst_record[user].releasd_profit += _mint_account;\n\t\t}\n\t\trequire(balances[this]>= _mint_account);\n\t\tuser_inverst_record[user].history_releasd_profit += _mint_account;\n\t\tbalances[user] += _mint_account;\n\t\tbalances[this] -= _mint_account;\n\t\temit Transfer(this, user, _mint_account);\n\t\treturn _mint_account;\n\t}\n\t\n\tfunction hasReward(address _user)public view returns(bool){\n\t    if(crontime[_user] <= now - OnceWidrawTime && crontime[_user]!=0){\n\t        return true;\n\t    }\n\t    else{\n\t        return false;\n\t    }\n\t}\n\t\n\tfunction reward() public returns(bool){\n\t    require(actived == true&&!frozenAccount[msg.sender]);\n\t\taddress user = msg.sender;\n\t\trequire(crontime[user] <= now - OnceWidrawTime && crontime[user]!=0);\n\t\t/*\n\t\t静态\n\t\t*/\n\t\tuint rewards = user_inverst_record[user].not_draw_capital*per/1000;\t\t\n\t\t/*挖矿数量*/\n\t\tuint _mint_account = _update_user_inverst(user,rewards);\n\n\t\t\n\t\t/*\n\t\t\t动态\n\t\t*/\n\t\taddress  top = fromaddr[user];\n\t\taddress _user = user;\n\t \tfor(uint i=1;i<=generation;i++){\n\t \t\t\tif(top != address(0) && top != _user){\n\t \t\t\t\tif(suns[top].n_effective[1]>=node_profits[i].menber_counts){\n\t \t\t\t\t\tuint upmoney = _mint_account*node_profits[i].percent/100;\n\t \t\t\t\t\t//settop(top, upmoney);\n\t \t\t\t\t\t\n\t \t\t\t\t\t_update_user_inverst(top,upmoney);\n\t \t\t\t\t\t//setteam(top,_mint_account);\n\t \t\t\t\t}\n\t \t\t\t\t_user = top;\n\t \t\t\t\ttop = fromaddr[top];\n\t \t\t\t\t\n\t \t\t\t\tcontinue;\n                }\n                 break;\n\t \t}\n\t \t//团队业绩统计\n\t \t_user = user;\n\t \ttop = fromaddr[user];\n\t \tfor(uint n=1;n<=generation_team;n++){\n\t \t\tif(top != address(0) && top != _user){\n\t \t\t\tsetteam(top,_mint_account);\n\t \t\t\t_user = top;\n\t \t\t\ttop = fromaddr[top];\n\t \t\t\tcontinue;\n\t \t\t}\n\t \t\tbreak;\n\t \t}\n\t \t\n\t \t\t\t/*修改下次提现时间*/\n\n\t\tif(crontime[user]>uint(0)){\n\t\t    crontime[user] = now + OnceWidrawTime;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t/*\n\t * 用户参与挖矿\n\t */\n\n\t function mint(uint _tokens) public {\n\t \t\trequire(actived == true&&!frozenAccount[msg.sender]);\n\t \t\taddress user = msg.sender;\n  \t \t\trequire(_tokens>=plans[1].account && balances[user]>=_tokens);\n\t \t\trequire(!frozenAccount[user]);\n\t\t\t\n\t\t\t/*16代以内有效用户设置，可以改成N代*/\n\t\t\taddress top = fromaddr[user];\n\t\t\taddress _user = user;\n\t\t\tfor(uint n=1;n<=16;n++){\t\n\t\t\t\tif(top != address(0) && top !=_user){\n\t\t\t\t\tif(!_effective_son[user] && n==1){\n\t\t\t\t\t\t++suns[top].n_effective[n];\n\t\t\t\t\t\t_effective_son[user] = true;\n\t\t\t\t\t\ttop = fromaddr[top];\n\t\t\t\t\t\tcontinue;\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse if(n >=2){\n\t\t\t\t\t\t++suns[top].n_effective[n];\n\t\t\t\t\t\t_user = top;\n\t\t\t\t\t\ttop = fromaddr[top];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t \t\t/*\n\t \t\t修改投资信息\n\t \t\t*/\n\t \t\tuser_inverst_record[user].can_draw_capital += _tokens;\n\t \t\tuser_inverst_record[user].not_draw_capital += _tokens;\n\t \t\tuser_inverst_record[user].last_investdate = now;\n\n\t\t\t/*\n\t\t\t增加总投资利润\n\t\t\t*/\n\t\t\tuint _profits;\n\t \t\tfor(uint i=4;i>=1;i--){\n\t \t\t\t\tif(_tokens >= plans[i].account){\n\t \t\t\t\t\t\t_profits = plans[i].times * _tokens;\n\t \t\t\t\t\t\tbreak;\n\t \t\t\t\t}\n\t \t\t}\n\t \t\t\n\t \t\tuser_inverst_record[user].total_profit += _profits;\n\n\n\t \t\t\n\t \t\tbalances[user] -= _tokens;\n\t \t\tbalances[this] += _tokens;\n\t \t\tcrontime[user] = now + OnceWidrawTime;\n\t \t}\n\n\n\tfunction quitMint() public returns(bool){\n\t\trequire(actived == true&&!frozenAccount[msg.sender]);\n\t\trequire(user_inverst_record[msg.sender].can_draw_capital > 0);\n\t\tuint interval = now.sub(user_inverst_record[msg.sender].last_investdate);\n\t\tuint rate = quit_config.rate2;\n\t\tif(interval<quit_config.interval){\n\t\t\trate = quit_config.rate1;\n\t\t}\n\t\tuint fee = user_inverst_record[msg.sender].can_draw_capital*rate/100;\n\t\tuint refund = user_inverst_record[msg.sender].can_draw_capital.sub(fee);\n\t\t_reset_user_inverst(msg.sender);\n\t\trequire(balances[this]>=refund);\n\t\tbalances[msg.sender] += refund;\n\t\tbalances[this] -= refund;\n\t\t\n\t\temit Transfer(this, msg.sender,refund);\n\t\treturn(true);\t\n\t}\n\t \n\tfunction addleadereth(address _user,uint _ethvalue) private returns(bool){\n\t    address _ethtop = ethtop[_user];\n\t    if(_ethtop!=address(0) ){\n\t        leader_eth[_ethtop] += _ethvalue;\n\t    }\n\t    /*\n\t    if(isleader[_user]){\n\t        leader_eth[_user] += _ethvalue;\n\t    }\n\t    */\n\t    /*\n\t    address user = _user;\n\t    address top = fromaddr[_user];\n\t    for(uint i=1;;i++){\n\t       if(top!=address(0)&&top!= user){\n\t           if(isleader[top]){\n    \t           leader_eth[top] += _ethvalue;\n    \t           break;\n\t           }\n\t           (user,top)=(top,fromaddr[top]);\n\t           continue;\n\t       }\n\t       break;\n\t   }\n\t   */\n\t    return(true);\n\t}\n\tfunction addLeader(address _leader) public onlyOwner returns(bool){\n\t    require(_leader!=address(0) && !isleader[_leader]);\n\t    isleader[_leader] = true;\n\t    leaders.push(_leader);\n\t    return(true);\n\t}\n\tfunction subLeader(address _leader)public onlyOwner returns(bool){\n\t    require(_leader!=address(0) && isleader[_leader]);\n\t   isleader[_leader] = false;\n\t    return(true);\n\t}\n\t/*\n\t*\n\t*/\n\tfunction getleaders()public view  returns(address [] memory _leaders,uint [] memory _eths){\n        uint l;\n        for(uint i;i<leaders.length;i++){\n            if(isleader[leaders[i]]){\n                l++;\n            }\n        }\n        address [] memory  _leaders1 = new address[](l);\n        uint [] memory _eths1 = new uint[](l);\n        for(uint n;n<leaders.length;n++){\n            if(isleader[leaders[n]]){\n                l--;\n                \n                _leaders1[l] = leaders[n];\n                _eths1[l] = leader_eth[leaders[n]];\n            }\n        }\n        _eths = _eths1;\n        _leaders = _leaders1;\n\t}\n\tfunction setEttTokenAddress(address _ett) public onlyOwner returns(bool){\n\t    require(_ett!=address(0) && _ett != address(this));\n\t    ett = EttToken(_ett);\n\t    return true;\n\t}\n\t/*\n\tfunction setEttRate(uint _rate) public onlyOwner returns(bool){\n\t    require(_rate>0);\n\t    ettRate = _rate;\n\t    return true;\n\t}\n\t*/\n\t/*\n\t* sell usdt\n\t*/\n\t\n\tfunction  usdt2ett(uint _tokens) public returns(bool){\n\t    require(actived);\n\t    require(_tokens>0 && balances[msg.sender] >= _tokens);\n\t    require(ett!=address(0));\n\t    uint _ettAmount = _tokens * ettRate / 1 ether;\n\t    ett.tokenAdd(msg.sender,_ettAmount);\n\t    balances[msg.sender] -= _tokens;\n\t    emit Transfer(msg.sender,this,_tokens);\n\t    return true;\n\t}\n\t\n\t/*\n\t* sell ett\n\t*/\n\tfunction ett2usdt(uint _tokens) public returns(bool){\n\t    require(actived);\n\t    require(_tokens>0);\n\t    require(ett!=address(0));\n\t    if(getettbalance(msg.sender)>= _tokens){\n\t        uint _usdts = _tokens*1 ether/ettRate;    \n\t        ett.tokenSub(msg.sender,_tokens);\n\t        require(balances[this]> _usdts);\n\t        balances[msg.sender] += _usdts;\n\t        balances[this] -= _usdts;\n\t        emit Transfer(this,msg.sender,_tokens);\n\t    }else{\n\t        return false;\n\t    }\n\t    return true;\n\t}\n\t\n\tfunction getettbalance(address _user) public view returns(uint256 _balance){\n\t    require(ett!=address(0));\n\t    _balance = ett.balanceOf(_user);\n\t}\n\t\n\t/*\n\t * 获取总账目\n\t */\n\tfunction getall() public view returns(uint256 money) {\n\t\tmoney = address(this).balance;\n\t}\n\t/*\n\t * 购买\n\t */\n\tfunction buy() public payable returns(uint) {\n\t\trequire(msg.value > 0 && actived);\n\t\taddress user = msg.sender;\n\t\trequire(!frozenAccount[user]);\n\t\tuint amount = msg.value * buyPrice/1 ether;\n\t\trequire(balances[this] >= amount && amount < _totalSupply);\n\t\t\n\t\tbalances[user] = balances[user].add(amount);\n\t\t\n\t\tsysinteth += msg.value;\n\t\tuserineth[user] += msg.value;\n\n\t\tbalances[this] = balances[this].sub(amount);\n        \n\t\taddleadereth(user,msg.value);\n\t\t\n\t\towner.transfer(msg.value);\n\t\t\n\t\temit Transfer(this, user, amount);\n\t\treturn(amount);\n\t}\n\t\n\t\n\n\tfunction() payable public {\n\t\tbuy();\n\t}\n\n\t\n\t/*\n\t * 批量发币\n\t * @param {Object} address\n\t */\n\tfunction addBalances(address[] recipients, uint256[] moenys) public onlyOwner{\n\t\tuint256 sum = 0;\n\t\tfor(uint256 i = 0; i < recipients.length; i++) {\n\t\t\tbalances[recipients[i]] = balances[recipients[i]].add(moenys[i]);\n\t\t\tsum = sum.add(moenys[i]);\n\t\t\temit Transfer(this, recipients[i], moenys[i]);\n\t\t}\n\t\tbalances[this] = balances[this].sub(sum);\n\n\t}\n\t/*\n\t * 批量减币\n\t * @param {Object} address\n\t */\n\tfunction subBalances(address[] recipients, uint256[] moenys) public onlyOwner{\n\t\tuint256 sum = 0;\n\t\tfor(uint256 i = 0; i < recipients.length; i++) {\n\t\t\tbalances[recipients[i]] = balances[recipients[i]].sub(moenys[i]);\n\t\t\tsum = sum.add(moenys[i]);\n\t\t\temit Transfer(recipients[i], this, moenys[i]);\n\t\t}\n\t\tbalances[this] = balances[this].add(sum);\n\n\t}\n\n}",
  "abi": "[{\"constant\":true,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"}],\"name\":\"getNodeProfit\",\"outputs\":[{\"name\":\"_members\",\"type\":\"uint256\"},{\"name\":\"_percert\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"financeraddr\",\"type\":\"address\"}],\"name\":\"setfinancer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_leader\",\"type\":\"address\"}],\"name\":\"subLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OnceWidrawTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_plan\",\"type\":\"uint256\"}],\"name\":\"getPlan\",\"outputs\":[{\"name\":\"_account\",\"type\":\"uint256\"},{\"name\":\"_times\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"node_profits\",\"outputs\":[{\"name\":\"menber_counts\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ettRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getaddtime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"adduser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getsysteam\",\"outputs\":[{\"name\":\"teamprice1\",\"type\":\"uint256\"},{\"name\":\"teamprice2\",\"type\":\"uint256\"},{\"name\":\"teamper1s\",\"type\":\"uint256\"},{\"name\":\"teamper2s\",\"type\":\"uint256\"},{\"name\":\"t1\",\"type\":\"uint256\"},{\"name\":\"t2\",\"type\":\"uint256\"},{\"name\":\"t3\",\"type\":\"uint256\"},{\"name\":\"t4\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getother\",\"outputs\":[{\"name\":\"_onceWidrawTime\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"_transper\",\"type\":\"uint256\"},{\"name\":\"_quit_interval\",\"type\":\"uint256\"},{\"name\":\"_quit_rate1\",\"type\":\"uint256\"},{\"name\":\"_quit_rate2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_generation_team\",\"type\":\"uint256\"}],\"name\":\"setRwardGeneration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getconf\",\"outputs\":[{\"name\":\"_per\",\"type\":\"uint256\"},{\"name\":\"_newOnceWidrawTime\",\"type\":\"uint256\"},{\"name\":\"_newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"_ettRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sysinteth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"moenys\",\"type\":\"uint256[]\"}],\"name\":\"subBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromaddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getquitfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"leader_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethtop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getmy\",\"outputs\":[{\"name\":\"myblance\",\"type\":\"uint256\"},{\"name\":\"meth\",\"type\":\"uint256\"},{\"name\":\"mytime\",\"type\":\"uint256\"},{\"name\":\"bprice\",\"type\":\"uint256\"},{\"name\":\"tmoney\",\"type\":\"uint256\"},{\"name\":\"myineth\",\"type\":\"uint256\"},{\"name\":\"_isleader\",\"type\":\"bool\"},{\"name\":\"_leader_eth\",\"type\":\"uint256\"},{\"name\":\"_inverst\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_plan\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"uint256\"},{\"name\":\"_times\",\"type\":\"uint256\"}],\"name\":\"setPlan\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permans\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_per\",\"type\":\"uint256\"},{\"name\":\"_newOnceWidrawTime\",\"type\":\"uint256\"},{\"name\":\"_newBuyPrice\",\"type\":\"uint256\"},{\"name\":\"_ettRate\",\"type\":\"uint256\"}],\"name\":\"setconf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ethbalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamper2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transper\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"per\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quit_config\",\"outputs\":[{\"name\":\"interval\",\"type\":\"uint256\"},{\"name\":\"rate1\",\"type\":\"uint256\"},{\"name\":\"rate2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userineth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getall\",\"outputs\":[{\"name\":\"money\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"crontime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"geteam\",\"outputs\":[{\"name\":\"nn1\",\"type\":\"uint256\"},{\"name\":\"nn2\",\"type\":\"uint256\"},{\"name\":\"n_effective1\",\"type\":\"uint256\"},{\"name\":\"n_effective2\",\"type\":\"uint256\"},{\"name\":\"n\",\"type\":\"uint256[16]\"},{\"name\":\"n_effective\",\"type\":\"uint256[16]\"},{\"name\":\"ms\",\"type\":\"uint256\"},{\"name\":\"tm\",\"type\":\"uint256\"},{\"name\":\"lid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"intertransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRwardGeneration\",\"outputs\":[{\"name\":\"_generation\",\"type\":\"uint256\"},{\"name\":\"_generation_team\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ett\",\"type\":\"address\"}],\"name\":\"setEttTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leaders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getettbalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_inverst_record\",\"outputs\":[{\"name\":\"can_draw_capital\",\"type\":\"uint256\"},{\"name\":\"not_draw_capital\",\"type\":\"uint256\"},{\"name\":\"total_profit\",\"type\":\"uint256\"},{\"name\":\"releasd_profit\",\"type\":\"uint256\"},{\"name\":\"last_investdate\",\"type\":\"uint256\"},{\"name\":\"history_releasd_profit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"intertoken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamper1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"name\":\"account\",\"type\":\"uint256\"},{\"name\":\"times\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"usdt2ett\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newteamPrice1\",\"type\":\"uint256\"},{\"name\":\"_newteamPrice2\",\"type\":\"uint256\"},{\"name\":\"teamper1s\",\"type\":\"uint256\"},{\"name\":\"teamper2s\",\"type\":\"uint256\"},{\"name\":\"t1\",\"type\":\"uint256\"},{\"name\":\"t2\",\"type\":\"uint256\"},{\"name\":\"t3\",\"type\":\"uint256\"},{\"name\":\"t4\",\"type\":\"uint256\"}],\"name\":\"setsysteam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isleader\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"financer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ett\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"uint256\"},{\"name\":\"_members\",\"type\":\"uint256\"},{\"name\":\"_percert\",\"type\":\"uint256\"}],\"name\":\"setNodeProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"subuser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminaddr\",\"type\":\"address\"}],\"name\":\"setadmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"moenys\",\"type\":\"uint256[]\"}],\"name\":\"addBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getleaders\",\"outputs\":[{\"name\":\"_leaders\",\"type\":\"address[]\"},{\"name\":\"_eths\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getsys\",\"outputs\":[{\"name\":\"tmoney\",\"type\":\"uint256\"},{\"name\":\"_sysinteth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actived\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getfrom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"quitMint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_leader\",\"type\":\"address\"}],\"name\":\"addLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tags\",\"type\":\"bool\"}],\"name\":\"setactive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasReward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"ett2usdt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transper\",\"type\":\"uint256\"},{\"name\":\"_quit_interval\",\"type\":\"uint256\"},{\"name\":\"_quit_rate1\",\"type\":\"uint256\"},{\"name\":\"_quit_rate2\",\"type\":\"uint256\"}],\"name\":\"setother\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ettAddress\",\"type\":\"address\"},{\"name\":\"_supernodes\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]",
  "bytecode": "",
  "constructorArguments": "0000000000000000000000003152089a1700abdf66dfe45159069e814be6c2940000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000d0000000000000000000000004aeb3d07101bc6b5b85723143aeb8f230961b5ed000000000000000000000000e7526fa8ea297ff0c49bd1d708abd104c2355b6a00000000000000000000000000ad0c1ea42c832303d249a006a4a5b8cd5f738100000000000000000000000066ba4d733c60116a5c217f51f8dc414230334d230000000000000000000000009b7aba0ca90e318ebd414023fd53e22bdde74a7f000000000000000000000000e27d6ce787f1c704ae89a0f1a8fcd7d5aca183da000000000000000000000000cd3c7c5b41e8ff4471ab2ce1d8b117be48e813b5000000000000000000000000ad2da2a5259dbde4ab1487880fb8a871c6e04e06000000000000000000000000ff1b6f20291f6889663692c9b7281e0e7b2f8250000000000000000000000000aae907903dc65fd07b8b3ce20d2085aedd9d91880000000000000000000000008264ab8d3423574e64c27b15bec9ae79000bcbb3000000000000000000000000cfa67f8c5aa513457738188e9f7e3e6d4682f0d8000000000000000000000000b361addedc0cbb5d8d93808564049b6cfebddd38"
}