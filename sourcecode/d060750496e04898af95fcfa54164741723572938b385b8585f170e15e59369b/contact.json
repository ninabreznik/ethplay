{
  "address": "0x7148b80b38278853ca8263cfc0b57d4478ae6a6e",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "PeurToken",
  "compilerVersion": "v0.4.16+commit.d7661dd9",
  "optimization": true,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2017-11-18\n*/\n\n/**\n *  The Peurcoin token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\n *  The owner's shareholder of tokens is locked for three year and not all tokens\n *  being sold during or after the crowdsale,reserved token will be use only for loyalty program.\n *  Author: Nancy Abrianna\n *  Internal audit: Felix Norge, John Dewitt\n *  Audit: Smart Contract Consultant\n **/\n\npragma solidity ^0.4.15;\n\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * Overflow aware uint math functions.\n *\n * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * ERC 20 token\n *\n * https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\ncontract PeurToken is StandardToken, Ownable {\n  string public constant name = \"Peurcoin\";\n  string public constant symbol = \"PURC\";\n  uint8 public constant decimals = 8;\n  uint256 public constant INITIAL_SUPPLY = 200000000 * 10 ** uint256(decimals); // 200.000.000 Tokens\n // replace with your fund collection multisig address\n  address public constant multisig = 0x0;\n\n\n  // 1 ether = 8.000 Peur tokens\n  uint public constant PRICE = 8000;\n  \n  function PeurToken() {\n      totalSupply = INITIAL_SUPPLY;\n      balances[msg.sender] = INITIAL_SUPPLY;\n      owner = msg.sender;\n  }\n}\n\n/**\n * 130.000.000 PURC tokens distributed for ICO \n *  42.300.000 PURC tokens distributed for loyalty program\n *  17.500.000 PURC tokens distributed for peur marketplace department\n *   5.200.000 PURC tokens distributed for bounty campaign\n *   5.000.000 PURC tokens distributed for shareholder\n * Overall, 200.000.000 PURC tokens fixed supply \n * All crowdsale depositors must have read the legal agreement.\n * They give their crowdsale Ethereum source address on the website.\n * This is confirmed by having them signing the terms of service on the website.\n */",
  "bytecode": "6060604052341561000f57600080fd5b5b5b60038054600160a060020a03191633600160a060020a03161790555b66470de4df8200006000818155600160a060020a033316808252600160205260409091209190915560038054600160a060020a03191690911790555b5b61082a806100796000396000f300606060405236156100cd5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d2578063095ea7b31461015d57806318160ddd1461019357806323b872dd146101b85780632ff2e9dc146101f4578063313ce567146102195780634783c35b1461024257806370a08231146102715780638d859f3e146102a25780638da5cb5b146102c757806395d89b41146102f6578063a9059cbb14610381578063dd62ed3e146103b7578063f2fde38b146103ee575b600080fd5b34156100dd57600080fd5b6100e561040f565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101225780820151818401525b602001610109565b50505050905090810190601f16801561014f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016857600080fd5b61017f600160a060020a0360043516602435610446565b604051901515815260200160405180910390f35b341561019e57600080fd5b6101a66104ed565b60405190815260200160405180910390f35b34156101c357600080fd5b61017f600160a060020a03600435811690602435166044356104f3565b604051901515815260200160405180910390f35b34156101ff57600080fd5b6101a6610608565b60405190815260200160405180910390f35b341561022457600080fd5b61022c610613565b60405160ff909116815260200160405180910390f35b341561024d57600080fd5b610255610618565b604051600160a060020a03909116815260200160405180910390f35b341561027c57600080fd5b6101a6600160a060020a036004351661061d565b60405190815260200160405180910390f35b34156102ad57600080fd5b6101a661063c565b60405190815260200160405180910390f35b34156102d257600080fd5b610255610642565b604051600160a060020a03909116815260200160405180910390f35b341561030157600080fd5b6100e5610651565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156101225780820151818401525b602001610109565b50505050905090810190601f16801561014f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038c57600080fd5b61017f600160a060020a0360043516602435610688565b604051901515815260200160405180910390f35b34156103c257600080fd5b6101a6600160a060020a0360043581169060243516610748565b60405190815260200160405180910390f35b34156103f957600080fd5b61040d600160a060020a0360043516610775565b005b60408051908101604052600881527f50657572636f696e000000000000000000000000000000000000000000000000602082015281565b60008115806104785750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561048357600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60005481565b600160a060020a03808416600090815260026020908152604080832033851684528252808320549386168352600190915281205490919061053a908463ffffffff6107cd16565b600160a060020a03808616600090815260016020526040808220939093559087168152205461056f908463ffffffff6107e716565b600160a060020a038616600090815260016020526040902055610598818463ffffffff6107e716565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b66470de4df82000081565b600881565b600081565b600160a060020a0381166000908152600160205260409020545b919050565b611f4081565b600354600160a060020a031681565b60408051908101604052600481527f5055524300000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152600160205260408120546106b1908363ffffffff6107e716565b600160a060020a0333811660009081526001602052604080822093909355908516815220546106e6908363ffffffff6107cd16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461079057600080fd5b600160a060020a038116156107c8576003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b5b50565b6000828201838110156107dc57fe5b8091505b5092915050565b6000828211156107f357fe5b508082035b929150505600a165627a7a72305820cd669a01f80061abcd956ebab5e80f4b6eac870e9b4b1b518b94741247e0fa270029"
}