{
  "address": "0x19d9b17497824081e291115044b567c4722cdaeb",
  "chain": "ETH",
  "chainID": 1,
  "verifier": "etherscan.io",
  "commonName": "",
  "contractName": "WrappedCK",
  "compilerVersion": "v0.5.8+commit.23d335f2",
  "optimization": false,
  "runs": "200",
  "evmVersion": "default",
  "sourceCode": "/**\n *Submitted for verification at Etherscan.io on 2019-05-22\n*/\n\npragma solidity ^0.5.8;\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <[email protected]π.com>, Eenae <[email protected]>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor() public {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n\n\n/// @title Main contract for WrappedCK. This contract converts Cryptokitties between the ERC721 standard and the \n///  ERC20 standard by locking cryptokitties into the contract and minting 1:1 backed ERC20 tokens, that\n///  can then be redeemed for cryptokitties when desired.\n/// @notice When wrapping a cryptokitty, you get a generic WCK token. Since the WCK token is generic, it has no\n///  no information about what cryptokitty you submitted, so you will most likely not receive the same kitty\n///  back when redeeming the token. The token only entitles you to receive *a* cryptokitty in return, not \n///  necessarily the *same* cryptokitty in return. This is due to the very nature of the ERC20 standard being\n///  fungible, and the ERC721 standard being nonfungible.\ncontract WrappedCK is ERC20, ReentrancyGuard {\n\n    // OpenZeppelin's SafeMath library is used for all arithmetic operations to avoid overflows/underflows.\n    using SafeMath for uint256;\n\n    /* ****** */\n    /* EVENTS */\n    /* ****** */\n\n    /// @dev This event is fired when a user deposits cryptokitties into the contract in exchange\n    ///  for an equal number of WCK ERC20 tokens.\n    /// @param kittyId  The cryptokitty id of the kitty that was deposited into the contract.\n    /// @param tokensMinted  The number of WCK ERC20 tokens that were minted (measured in 10^18 times\n    ///  the number of tokens minted, due to 18 decimal places).\n    event DepositKittyAndMintToken(\n        uint256 kittyId,\n        uint256 tokensMinted\n    );\n\n    /// @dev This event is fired when a user deposits WCK ERC20 tokens into the contract in exchange\n    ///  for an equal number of locked cryptokitties.\n    /// @param kittyId  The cryptokitty id of the kitty that was withdrawn from the contract.\n    /// @param tokensBurned  The number of WCK ERC20 tokens that were burned (measured in 10^18 times\n    ///  the number of tokens minted, due to 18 decimal places).\n    event BurnTokenAndWithdrawKitty(\n        uint256 kittyId,\n        uint256 tokensBurned\n    );\n\n    /* ******* */\n    /* STORAGE */\n    /* ******* */\n\n    /// @dev A queue containing all of the cryptokitties that are locked in the contract, backing\n    ///  WCK ERC20 tokens 1:1\n    /// @notice We use a queue rather than a stack since many users in the community requested the\n    ///  ability to deposit and withdraw a kitty in order to \"reroll\" its appearance.\n    uint256[] private depositedKittiesQueue;\n    uint256 private queueStartIndex;\n    uint256 private queueEndIndex;\n    \n    /* ********* */\n    /* CONSTANTS */\n    /* ********* */\n\n    /// @dev The metadata details about the \"Wrapped CryptoKitties\" WCK ERC20 token.\n    uint8 constant public decimals = 18;\n    string constant public name = \"Wrapped CryptoKitties\";\n    string constant public symbol = \"WCK\";\n\n    /// @dev The address of official CryptoKitties contract that stores the metadata about each cat.\n    /// @notice The owner is not capable of changing the address of the CryptoKitties Core contract \n    ///  once the contract has been deployed.\n    address public kittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n    KittyCore kittyCore;\n\n    /* ********* */\n    /* FUNCTIONS */\n    /* ********* */\n\n    /// @notice Allows a user to lock one cryptokitty in the contract in exchange for one WCK ERC20 \n    ///  token.\n    /// @param _kittyId  The id of the cryptokitty that will be locked into the contract.\n    /// @notice The user must first call approve() in the Cryptokitties Core contract before calling \n    ///  depositAndMint(). There is no danger of this contract overreaching its approval, since the \n    ///  CryptoKitties Core contract's approve() function only approves this contract for a single \n    ///  Cryptokitty. Calling approve() allows this contract to transfer the specified kitty in the \n    ///  depositAndMint() function.\n    function depositKittyAndMintToken(uint256 _kittyId) external nonReentrant {\n        require(msg.sender == kittyCore.ownerOf(_kittyId), 'you do not own this cat');\n        require(kittyCore.kittyIndexToApproved(_kittyId) == address(this), 'you must approve() this contract to give it permission to withdraw this cat before you can deposit a cat');\n        kittyCore.transferFrom(msg.sender, address(this), _kittyId);\n        _enqueueKitty(_kittyId);\n        _mint(msg.sender, 10**18);\n        emit DepositKittyAndMintToken(_kittyId, 10**18);\n    }\n\n    /// @notice Convenience function for calling depositAndMint() multiple times in a single transaction.\n    /// @param _kittyIds  The ids of the cryptokitties that will be locked into the contract.\n    function multiDepositKittyAndMintToken(uint256[] calldata _kittyIds) external nonReentrant {\n        for(uint i = 0; i < _kittyIds.length; i++){\n            uint256 kittyToDeposit = _kittyIds[i];\n            require(msg.sender == kittyCore.ownerOf(kittyToDeposit), 'you do not own this cat');\n            require(kittyCore.kittyIndexToApproved(kittyToDeposit) == address(this), 'you must approve() this contract to give it permission to withdraw this cat before you can deposit a cat');\n            kittyCore.transferFrom(msg.sender, address(this), kittyToDeposit);\n            _enqueueKitty(kittyToDeposit);\n            emit DepositKittyAndMintToken(kittyToDeposit, 10**18);\n        }\n        _mint(msg.sender, (_kittyIds.length).mul(10**18));\n    }\n\n    /// @notice Allows a user to burn one WCK ERC20 token in exchange for one locked cryptokitty.\n    /// @notice Due to the nature of WCK ERC20 being fungible and interchangeable, the contract is\n    ///  not able to coordinate that you receive the same crypokitty that you originally locked into\n    ///  the contract.\n    function burnTokenAndWithdrawKitty() external nonReentrant {\n        require(balanceOf(msg.sender) >= 10**18, 'you do not own enough tokens to withdraw an ERC721 cat');\n        uint256 kittyId = _dequeueKitty();\n        _burn(msg.sender, 10**18);\n        kittyCore.transfer(msg.sender, kittyId);\n        emit BurnTokenAndWithdrawKitty(kittyId, 10**18);\n    }\n\n    /// @notice Convenience function for calling burnAndWithdraw() multiple times in a single transaction.\n    /// @param _numTokens  The number of WCK ERC20 tokens that will be burned in exchange for cryptokitties.\n    function multiBurnTokenAndWithdrawKitty(uint256 _numTokens) external nonReentrant {\n        require(balanceOf(msg.sender) >= _numTokens.mul(10**18), 'you do not own enough tokens to withdraw this many ERC721 cats');\n        _burn(msg.sender, _numTokens.mul(10**18));\n        for(uint i = 0; i < _numTokens; i++){\n            uint256 kittyToWithdraw = _dequeueKitty();\n            kittyCore.transfer(msg.sender, kittyToWithdraw);\n            emit BurnTokenAndWithdrawKitty(kittyToWithdraw, 10**18);\n        }\n    }\n\n    /// @notice Allows a user to lock one cryptokitty in the contract in exchange for unlocking a \n    ///  different cryptokitty that was previously locked in the contract.\n    /// @param _kittyId  The id of the cryptokitty that will be locked into the contract.\n    /// @notice The user must first call approve() in the Cryptokitties Core contract before calling \n    ///  depositAndMint(). There is no danger of this contract overreaching its approval, since the \n    ///  CryptoKitties Core contract's approve() function only approves this contract for a single \n    ///  Cryptokitty. Calling approve() allows this contract to transfer the specified kitty in the \n    ///  depositAndMint() function.\n    /// @notice This is a convenience function so that users do not need to call both depositAndMint()\n    ///  and burnAndWithdraw() in succession. Many users in the community requested the ability to \n    ///  deposit and withdraw a kitty in order to \"reroll\" its appearance, which this function \n    ///  accomplishes.\n    function depositKittyAndWithdrawDifferentKitty(uint256 _kittyId) external nonReentrant {\n        require(msg.sender == kittyCore.ownerOf(_kittyId), 'you do not own this cat');\n        require(kittyCore.kittyIndexToApproved(_kittyId) == address(this), 'you must approve() this contract to give it permission to withdraw this cat before you can deposit a cat');\n        kittyCore.transferFrom(msg.sender, address(this), _kittyId);\n        _enqueueKitty(_kittyId);\n        uint256 kittyToWithdraw = _dequeueKitty();\n        kittyCore.transfer(msg.sender, kittyToWithdraw);\n        emit DepositKittyAndMintToken(_kittyId, 10**18);\n        emit BurnTokenAndWithdrawKitty(kittyToWithdraw, 10**18);\n    }\n\n    /// @notice Convenience function for calling depositAndWithdraw() multiple times in a single transaction.\n    /// @param _kittyIds  The ids of the cryptokitties that will be locked into the contract.\n    function multiDepositKittyAndWithdrawDifferentKitty(uint256[] calldata _kittyIds) external nonReentrant {\n        for(uint i = 0; i < _kittyIds.length; i++){\n            uint256 kittyToDeposit = _kittyIds[i];\n            require(msg.sender == kittyCore.ownerOf(kittyToDeposit), 'you do not own this cat');\n            require(kittyCore.kittyIndexToApproved(kittyToDeposit) == address(this), 'you must approve() this contract to give it permission to withdraw this cat before you can deposit a cat');\n            kittyCore.transferFrom(msg.sender, address(this), kittyToDeposit);\n            _enqueueKitty(kittyToDeposit);\n            uint256 kittyToWithdraw = _dequeueKitty();\n            kittyCore.transfer(msg.sender, kittyToWithdraw);\n            emit DepositKittyAndMintToken(kittyToDeposit, 10**18);\n            emit BurnTokenAndWithdrawKitty(kittyToWithdraw, 10**18);\n        }\n    }\n    \n    /// @notice Adds a locked cryptokitty to the end of the queue\n    /// @param _kittyId  The id of the cryptokitty that will be locked into the contract.\n    function _enqueueKitty(uint256 _kittyId) internal {\n        depositedKittiesQueue.push(_kittyId);\n        queueEndIndex = queueEndIndex.add(1);\n    }\n\n    /// @notice Adds a locked cryptokitty to the end of the queue\n    /// @return  The id of the cryptokitty that will be unlocked from the contract.\n    function _dequeueKitty() internal returns(uint256){\n        require(queueStartIndex < queueEndIndex, 'there are no cats in the queue');\n        uint256 kittyId = depositedKittiesQueue[queueStartIndex];\n        queueStartIndex = queueStartIndex.add(1);\n        return kittyId;\n    }\n\n    /// @return The number of cryptokitties locked in the contract that back outstanding\n    ///  WCK tokens.\n    function totalCatsLockedInContract() public view returns(uint256){\n        return queueEndIndex.sub(queueStartIndex);\n    }\n\n    /// @notice The owner is not capable of changing the address of the CryptoKitties Core \n    ///  contract once the contract has been deployed.\n    constructor() public {\n        kittyCore = KittyCore(kittyCoreAddress);\n    }\n\n    /// @dev We leave the fallback function payable in case the current State Rent proposals require\n    ///  us to send funds to this contract to keep it alive on mainnet.\n    /// @notice There is no function that allows the contract creator to withdraw any funds sent\n    ///  to this contract, so any funds sent directly to the fallback fucntion that are not used for \n    ///  State Rent are lost forever.\n    function() external payable {}\n}\n\n/// @title Interface for interacting with the CryptoKitties Core contract created by Dapper Labs Inc.\ncontract KittyCore {\n    function ownerOf(uint256 _tokenId) public view returns (address owner);\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    mapping (uint256 => address) public kittyIndexToApproved;\n}",
  "bytecode": "60806040527306012c8cf97bead5deae237070f9587f8e7a266d600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561006557600080fd5b506001600381905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612ead806100e06000396000f3fe6080604052600436106101145760003560e01c80633d216720116100a0578063a9059cbb11610064578063a9059cbb146105f2578063b9b4a8c714610665578063c1009f25146106eb578063db975ae914610726578063dd62ed3e146107ac57610114565b80633d2167201461043857806370a082311461044f57806395d89b41146104b4578063a295ba6714610544578063a457c2d71461057f57610114565b806323b872dd116100e757806323b872dd1461027f5780632abe0beb146103125780632c2ccdfb1461033d578063313ce5671461039457806339509351146103c557610114565b806306fdde0314610116578063095ea7b3146101a657806311a57d7e1461021957806318160ddd14610254575b005b34801561012257600080fd5b5061012b610831565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561016b578082015181840152602081019050610150565b50505050905090810190601f1680156101985780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b257600080fd5b506101ff600480360360408110156101c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061086a565b604051808215151515815260200191505060405180910390f35b34801561022557600080fd5b506102526004803603602081101561023c57600080fd5b8101908080359060200190929190505050610995565b005b34801561026057600080fd5b50610269610d95565b6040518082815260200191505060405180910390f35b34801561028b57600080fd5b506102f8600480360360608110156102a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d9f565b604051808215151515815260200191505060405180910390f35b34801561031e57600080fd5b50610327610fa7565b6040518082815260200191505060405180910390f35b34801561034957600080fd5b50610352610fc5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a057600080fd5b506103a9610feb565b604051808260ff1660ff16815260200191505060405180910390f35b3480156103d157600080fd5b5061041e600480360360408110156103e857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ff0565b604051808215151515815260200191505060405180910390f35b34801561044457600080fd5b5061044d611225565b005b34801561045b57600080fd5b5061049e6004803603602081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113de565b6040518082815260200191505060405180910390f35b3480156104c057600080fd5b506104c9611426565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105095780820151818401526020810190506104ee565b50505050905090810190601f1680156105365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055057600080fd5b5061057d6004803603602081101561056757600080fd5b810190808035906020019092919050505061145f565b005b34801561058b57600080fd5b506105d8600480360360408110156105a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611962565b604051808215151515815260200191505060405180910390f35b3480156105fe57600080fd5b5061064b6004803603604081101561061557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b97565b604051808215151515815260200191505060405180910390f35b34801561067157600080fd5b506106e96004803603602081101561068857600080fd5b81019080803590602001906401000000008111156106a557600080fd5b8201836020820111156106b757600080fd5b803590602001918460208302840111640100000000831117156106d957600080fd5b9091929391929390505050611bae565b005b3480156106f757600080fd5b506107246004803603602081101561070e57600080fd5b81019080803590602001909291905050506120e9565b005b34801561073257600080fd5b506107aa6004803603602081101561074957600080fd5b810190808035906020019064010000000081111561076657600080fd5b82018360208201111561077857600080fd5b8035906020019184602083028401116401000000008311171561079a57600080fd5b90919293919293905050506122e3565b005b3480156107b857600080fd5b5061081b600480360360408110156107cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612730565b6040518082815260200191505060405180910390f35b6040518060400160405280601581526020017f577261707065642043727970746f4b697474696573000000000000000000000081525081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108a557600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b600160036000828254019250508190555060006003549050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610a2057600080fd5b505afa158015610a34573d6000803e3d6000fd5b505050506040513d6020811015610a4a57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610afb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f796f7520646f206e6f74206f776e20746869732063617400000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663481af3d3846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b8557600080fd5b505afa158015610b99573d6000803e3d6000fd5b505050506040513d6020811015610baf57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526068815260200180612da66068913960800191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610d0957600080fd5b505af1158015610d1d573d6000803e3d6000fd5b50505050610d2a826127b7565b610d3c33670de0b6b3a7640000612802565b7fb732365c77c579e959add37d969790708ce4f600e3647b8ba7d4c22bd6f0a70282670de0b6b3a7640000604051808381526020018281526020019250505060405180910390a16003548114610d9157600080fd5b5050565b6000600254905090565b6000610e3082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461295490919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ebb848484612974565b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600190509392505050565b6000610fc060055460065461295490919063ffffffff16565b905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601281565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561102b57600080fd5b6110ba82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b3e90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b600160036000828254019250508190555060006003549050670de0b6b3a764000061124f336113de565b10156112a6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180612e0e6036913960400191505060405180910390fd5b60006112b0612b5d565b90506112c433670de0b6b3a7640000612c19565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561136d57600080fd5b505af1158015611381573d6000803e3d6000fd5b505050507fefd94ed14cba3376bbf3e2a3bb71b35cc64bb684ae704a2d27dda2f70713616481670de0b6b3a7640000604051808381526020018281526020019250505060405180910390a15060035481146113db57600080fd5b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040518060400160405280600381526020017f57434b000000000000000000000000000000000000000000000000000000000081525081565b600160036000828254019250508190555060006003549050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156114ea57600080fd5b505afa1580156114fe573d6000803e3d6000fd5b505050506040513d602081101561151457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f796f7520646f206e6f74206f776e20746869732063617400000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663481af3d3846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561164f57600080fd5b505afa158015611663573d6000803e3d6000fd5b505050506040513d602081101561167957600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146116f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526068815260200180612da66068913960800191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156117d357600080fd5b505af11580156117e7573d6000803e3d6000fd5b505050506117f4826127b7565b60006117fe612b5d565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156118a957600080fd5b505af11580156118bd573d6000803e3d6000fd5b505050507fb732365c77c579e959add37d969790708ce4f600e3647b8ba7d4c22bd6f0a70283670de0b6b3a7640000604051808381526020018281526020019250505060405180910390a17fefd94ed14cba3376bbf3e2a3bb71b35cc64bb684ae704a2d27dda2f70713616481670de0b6b3a7640000604051808381526020018281526020019250505060405180910390a150600354811461195e57600080fd5b5050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561199d57600080fd5b611a2c82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461295490919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000611ba4338484612974565b6001905092915050565b60016003600082825401925050819055506000600354905060008090505b838390508110156120d5576000848483818110611be557fe5b905060200201359050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611c6157600080fd5b505afa158015611c75573d6000803e3d6000fd5b505050506040513d6020811015611c8b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d3c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f796f7520646f206e6f74206f776e20746869732063617400000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663481af3d3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611dc657600080fd5b505afa158015611dda573d6000803e3d6000fd5b505050506040513d6020811015611df057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526068815260200180612da66068913960800191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015611f4a57600080fd5b505af1158015611f5e573d6000803e3d6000fd5b50505050611f6b816127b7565b6000611f75612b5d565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561202057600080fd5b505af1158015612034573d6000803e3d6000fd5b505050507fb732365c77c579e959add37d969790708ce4f600e3647b8ba7d4c22bd6f0a70282670de0b6b3a7640000604051808381526020018281526020019250505060405180910390a17fefd94ed14cba3376bbf3e2a3bb71b35cc64bb684ae704a2d27dda2f70713616481670de0b6b3a7640000604051808381526020018281526020019250505060405180910390a150508080600101915050611bcc565b5060035481146120e457600080fd5b505050565b60016003600082825401925050819055506000600354905061211c670de0b6b3a764000083612d6b90919063ffffffff16565b612125336113de565b101561217c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180612e44603e913960400191505060405180910390fd5b6121a03361219b670de0b6b3a764000085612d6b90919063ffffffff16565b612c19565b60008090505b828110156122d05760006121b8612b5d565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561226357600080fd5b505af1158015612277573d6000803e3d6000fd5b505050507fefd94ed14cba3376bbf3e2a3bb71b35cc64bb684ae704a2d27dda2f70713616481670de0b6b3a7640000604051808381526020018281526020019250505060405180910390a15080806001019150506121a6565b5060035481146122df57600080fd5b5050565b60016003600082825401925050819055506000600354905060008090505b838390508110156126f557600084848381811061231a57fe5b905060200201359050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e826040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561239657600080fd5b505afa1580156123aa573d6000803e3d6000fd5b505050506040513d60208110156123c057600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612471576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f796f7520646f206e6f74206f776e20746869732063617400000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663481af3d3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156124fb57600080fd5b505afa15801561250f573d6000803e3d6000fd5b505050506040513d602081101561252557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146125a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526068815260200180612da66068913960800191505060405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801561267f57600080fd5b505af1158015612693573d6000803e3d6000fd5b505050506126a0816127b7565b7fb732365c77c579e959add37d969790708ce4f600e3647b8ba7d4c22bd6f0a70281670de0b6b3a7640000604051808381526020018281526020019250505060405180910390a1508080600101915050612301565b5061271d33612718670de0b6b3a764000086869050612d6b90919063ffffffff16565b612802565b600354811461272b57600080fd5b505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60048190806001815401808255809150509060018203906000526020600020016000909192909190915055506127f96001600654612b3e90919063ffffffff16565b60068190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561283c57600080fd5b61285181600254612b3e90919063ffffffff16565b6002819055506128a8816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b3e90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b60008282111561296357600080fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156129ae57600080fd5b6129ff816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461295490919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a92816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b3e90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600080828401905083811015612b5357600080fd5b8091505092915050565b600060065460055410612bd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f746865726520617265206e6f206361747320696e20746865207175657565000081525060200191505060405180910390fd5b6000600460055481548110612be957fe5b90600052602060002001549050612c0c6001600554612b3e90919063ffffffff16565b6005819055508091505090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612c5357600080fd5b612c688160025461295490919063ffffffff16565b600281905550612cbf816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461295490919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080831415612d7e5760009050612d9f565b6000828402905082848281612d8f57fe5b0414612d9a57600080fd5b809150505b9291505056fe796f75206d75737420617070726f76652829207468697320636f6e747261637420746f2067697665206974207065726d697373696f6e20746f207769746864726177207468697320636174206265666f726520796f752063616e206465706f736974206120636174796f7520646f206e6f74206f776e20656e6f75676820746f6b656e7320746f20776974686472617720616e2045524337323120636174796f7520646f206e6f74206f776e20656e6f75676820746f6b656e7320746f2077697468647261772074686973206d616e79204552433732312063617473a165627a7a72305820086401e0e759c9826b068c751859665d25555a9badb50f1f8eae2c4501df28760029"
}